
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf04  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800bfc0  0800bfc0  0001bfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c57c  0800c57c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c57c  0800c57c  0001c57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c584  0800c584  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c584  0800c584  0001c584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c588  0800c588  0001c588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001e0  0800c76c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800c76c  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179dd  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003651  00000000  00000000  00037be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0003b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  0003c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a90d  00000000  00000000  0003d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e55  00000000  00000000  00057fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f720  00000000  00000000  00070e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110542  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005894  00000000  00000000  00110594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800bfa8 	.word	0x0800bfa8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800bfa8 	.word	0x0800bfa8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f869 	bl	8001510 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffb9 	bl	80013c0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f85b 	bl	8001510 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f851 	bl	8001510 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffe1 	bl	8001444 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ffd7 	bl	8001444 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 fe89 	bl	8002210 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 fad2 	bl	8001ab0 <__aeabi_dsub>
 800050c:	f001 fe80 	bl	8002210 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 f837 	bl	80015d8 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f001 feb4 	bl	80022dc <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 f82e 	bl	80015d8 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fa94 	bl	8001ab0 <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f001 fe6d 	bl	800227c <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 f817 	bl	80015d8 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f001 fe94 	bl	80022dc <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 f8d0 	bl	800075c <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f001 ff46 	bl	8002474 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f001 ff41 	bl	8002474 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	469b      	mov	fp, r3
 80005fa:	d433      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fc:	465a      	mov	r2, fp
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83a      	bhi.n	8000686 <__udivmoddi4+0xc2>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e078      	b.n	8000708 <__udivmoddi4+0x144>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e075      	b.n	800070e <__udivmoddi4+0x14a>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e028      	b.n	800068e <__udivmoddi4+0xca>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	2320      	movs	r3, #32
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	4652      	mov	r2, sl
 800066c:	40da      	lsrs	r2, r3
 800066e:	4641      	mov	r1, r8
 8000670:	0013      	movs	r3, r2
 8000672:	464a      	mov	r2, r9
 8000674:	408a      	lsls	r2, r1
 8000676:	0017      	movs	r7, r2
 8000678:	4642      	mov	r2, r8
 800067a:	431f      	orrs	r7, r3
 800067c:	4653      	mov	r3, sl
 800067e:	4093      	lsls	r3, r2
 8000680:	001e      	movs	r6, r3
 8000682:	42af      	cmp	r7, r5
 8000684:	d9c4      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4643      	mov	r3, r8
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0d9      	beq.n	8000648 <__udivmoddi4+0x84>
 8000694:	07fb      	lsls	r3, r7, #31
 8000696:	0872      	lsrs	r2, r6, #1
 8000698:	431a      	orrs	r2, r3
 800069a:	4646      	mov	r6, r8
 800069c:	087b      	lsrs	r3, r7, #1
 800069e:	e00e      	b.n	80006be <__udivmoddi4+0xfa>
 80006a0:	42ab      	cmp	r3, r5
 80006a2:	d101      	bne.n	80006a8 <__udivmoddi4+0xe4>
 80006a4:	42a2      	cmp	r2, r4
 80006a6:	d80c      	bhi.n	80006c2 <__udivmoddi4+0xfe>
 80006a8:	1aa4      	subs	r4, r4, r2
 80006aa:	419d      	sbcs	r5, r3
 80006ac:	2001      	movs	r0, #1
 80006ae:	1924      	adds	r4, r4, r4
 80006b0:	416d      	adcs	r5, r5
 80006b2:	2100      	movs	r1, #0
 80006b4:	3e01      	subs	r6, #1
 80006b6:	1824      	adds	r4, r4, r0
 80006b8:	414d      	adcs	r5, r1
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d006      	beq.n	80006cc <__udivmoddi4+0x108>
 80006be:	42ab      	cmp	r3, r5
 80006c0:	d9ee      	bls.n	80006a0 <__udivmoddi4+0xdc>
 80006c2:	3e01      	subs	r6, #1
 80006c4:	1924      	adds	r4, r4, r4
 80006c6:	416d      	adcs	r5, r5
 80006c8:	2e00      	cmp	r6, #0
 80006ca:	d1f8      	bne.n	80006be <__udivmoddi4+0xfa>
 80006cc:	9800      	ldr	r0, [sp, #0]
 80006ce:	9901      	ldr	r1, [sp, #4]
 80006d0:	465b      	mov	r3, fp
 80006d2:	1900      	adds	r0, r0, r4
 80006d4:	4169      	adcs	r1, r5
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db24      	blt.n	8000724 <__udivmoddi4+0x160>
 80006da:	002b      	movs	r3, r5
 80006dc:	465a      	mov	r2, fp
 80006de:	4644      	mov	r4, r8
 80006e0:	40d3      	lsrs	r3, r2
 80006e2:	002a      	movs	r2, r5
 80006e4:	40e2      	lsrs	r2, r4
 80006e6:	001c      	movs	r4, r3
 80006e8:	465b      	mov	r3, fp
 80006ea:	0015      	movs	r5, r2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db2a      	blt.n	8000746 <__udivmoddi4+0x182>
 80006f0:	0026      	movs	r6, r4
 80006f2:	409e      	lsls	r6, r3
 80006f4:	0033      	movs	r3, r6
 80006f6:	0026      	movs	r6, r4
 80006f8:	4647      	mov	r7, r8
 80006fa:	40be      	lsls	r6, r7
 80006fc:	0032      	movs	r2, r6
 80006fe:	1a80      	subs	r0, r0, r2
 8000700:	4199      	sbcs	r1, r3
 8000702:	9000      	str	r0, [sp, #0]
 8000704:	9101      	str	r1, [sp, #4]
 8000706:	e79f      	b.n	8000648 <__udivmoddi4+0x84>
 8000708:	42a3      	cmp	r3, r4
 800070a:	d8bc      	bhi.n	8000686 <__udivmoddi4+0xc2>
 800070c:	e783      	b.n	8000616 <__udivmoddi4+0x52>
 800070e:	4642      	mov	r2, r8
 8000710:	2320      	movs	r3, #32
 8000712:	2100      	movs	r1, #0
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	2200      	movs	r2, #0
 8000718:	9100      	str	r1, [sp, #0]
 800071a:	9201      	str	r2, [sp, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	40da      	lsrs	r2, r3
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	e786      	b.n	8000632 <__udivmoddi4+0x6e>
 8000724:	4642      	mov	r2, r8
 8000726:	2320      	movs	r3, #32
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	002a      	movs	r2, r5
 800072c:	4646      	mov	r6, r8
 800072e:	409a      	lsls	r2, r3
 8000730:	0023      	movs	r3, r4
 8000732:	40f3      	lsrs	r3, r6
 8000734:	4644      	mov	r4, r8
 8000736:	4313      	orrs	r3, r2
 8000738:	002a      	movs	r2, r5
 800073a:	40e2      	lsrs	r2, r4
 800073c:	001c      	movs	r4, r3
 800073e:	465b      	mov	r3, fp
 8000740:	0015      	movs	r5, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	dad4      	bge.n	80006f0 <__udivmoddi4+0x12c>
 8000746:	4642      	mov	r2, r8
 8000748:	002f      	movs	r7, r5
 800074a:	2320      	movs	r3, #32
 800074c:	0026      	movs	r6, r4
 800074e:	4097      	lsls	r7, r2
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	40de      	lsrs	r6, r3
 8000754:	003b      	movs	r3, r7
 8000756:	4333      	orrs	r3, r6
 8000758:	e7cd      	b.n	80006f6 <__udivmoddi4+0x132>
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__aeabi_dadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	000d      	movs	r5, r1
 8000766:	0004      	movs	r4, r0
 8000768:	b5c0      	push	{r6, r7, lr}
 800076a:	001f      	movs	r7, r3
 800076c:	0011      	movs	r1, r2
 800076e:	0328      	lsls	r0, r5, #12
 8000770:	0f62      	lsrs	r2, r4, #29
 8000772:	0a40      	lsrs	r0, r0, #9
 8000774:	4310      	orrs	r0, r2
 8000776:	007a      	lsls	r2, r7, #1
 8000778:	0d52      	lsrs	r2, r2, #21
 800077a:	00e3      	lsls	r3, r4, #3
 800077c:	033c      	lsls	r4, r7, #12
 800077e:	4691      	mov	r9, r2
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	0ffa      	lsrs	r2, r7, #31
 8000784:	0f4f      	lsrs	r7, r1, #29
 8000786:	006e      	lsls	r6, r5, #1
 8000788:	4327      	orrs	r7, r4
 800078a:	4692      	mov	sl, r2
 800078c:	46b8      	mov	r8, r7
 800078e:	0d76      	lsrs	r6, r6, #21
 8000790:	0fed      	lsrs	r5, r5, #31
 8000792:	00c9      	lsls	r1, r1, #3
 8000794:	4295      	cmp	r5, r2
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x3e>
 8000798:	e099      	b.n	80008ce <__aeabi_dadd+0x172>
 800079a:	464c      	mov	r4, r9
 800079c:	1b34      	subs	r4, r6, r4
 800079e:	46a4      	mov	ip, r4
 80007a0:	2c00      	cmp	r4, #0
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_dadd+0x4a>
 80007a4:	e07c      	b.n	80008a0 <__aeabi_dadd+0x144>
 80007a6:	464a      	mov	r2, r9
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x52>
 80007ac:	e0b8      	b.n	8000920 <__aeabi_dadd+0x1c4>
 80007ae:	4ac5      	ldr	r2, [pc, #788]	; (8000ac4 <__aeabi_dadd+0x368>)
 80007b0:	4296      	cmp	r6, r2
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x5a>
 80007b4:	e11c      	b.n	80009f0 <__aeabi_dadd+0x294>
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	003c      	movs	r4, r7
 80007ba:	0412      	lsls	r2, r2, #16
 80007bc:	4314      	orrs	r4, r2
 80007be:	46a0      	mov	r8, r4
 80007c0:	4662      	mov	r2, ip
 80007c2:	2a38      	cmp	r2, #56	; 0x38
 80007c4:	dd00      	ble.n	80007c8 <__aeabi_dadd+0x6c>
 80007c6:	e161      	b.n	8000a8c <__aeabi_dadd+0x330>
 80007c8:	2a1f      	cmp	r2, #31
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0x72>
 80007cc:	e1cc      	b.n	8000b68 <__aeabi_dadd+0x40c>
 80007ce:	4664      	mov	r4, ip
 80007d0:	2220      	movs	r2, #32
 80007d2:	1b12      	subs	r2, r2, r4
 80007d4:	4644      	mov	r4, r8
 80007d6:	4094      	lsls	r4, r2
 80007d8:	000f      	movs	r7, r1
 80007da:	46a1      	mov	r9, r4
 80007dc:	4664      	mov	r4, ip
 80007de:	4091      	lsls	r1, r2
 80007e0:	40e7      	lsrs	r7, r4
 80007e2:	464c      	mov	r4, r9
 80007e4:	1e4a      	subs	r2, r1, #1
 80007e6:	4191      	sbcs	r1, r2
 80007e8:	433c      	orrs	r4, r7
 80007ea:	4642      	mov	r2, r8
 80007ec:	4321      	orrs	r1, r4
 80007ee:	4664      	mov	r4, ip
 80007f0:	40e2      	lsrs	r2, r4
 80007f2:	1a80      	subs	r0, r0, r2
 80007f4:	1a5c      	subs	r4, r3, r1
 80007f6:	42a3      	cmp	r3, r4
 80007f8:	419b      	sbcs	r3, r3
 80007fa:	425f      	negs	r7, r3
 80007fc:	1bc7      	subs	r7, r0, r7
 80007fe:	023b      	lsls	r3, r7, #8
 8000800:	d400      	bmi.n	8000804 <__aeabi_dadd+0xa8>
 8000802:	e0d0      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000804:	027f      	lsls	r7, r7, #9
 8000806:	0a7f      	lsrs	r7, r7, #9
 8000808:	2f00      	cmp	r7, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0xb2>
 800080c:	e0ff      	b.n	8000a0e <__aeabi_dadd+0x2b2>
 800080e:	0038      	movs	r0, r7
 8000810:	f001 fe12 	bl	8002438 <__clzsi2>
 8000814:	0001      	movs	r1, r0
 8000816:	3908      	subs	r1, #8
 8000818:	2320      	movs	r3, #32
 800081a:	0022      	movs	r2, r4
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	408f      	lsls	r7, r1
 8000820:	40da      	lsrs	r2, r3
 8000822:	408c      	lsls	r4, r1
 8000824:	4317      	orrs	r7, r2
 8000826:	42b1      	cmp	r1, r6
 8000828:	da00      	bge.n	800082c <__aeabi_dadd+0xd0>
 800082a:	e0ff      	b.n	8000a2c <__aeabi_dadd+0x2d0>
 800082c:	1b89      	subs	r1, r1, r6
 800082e:	1c4b      	adds	r3, r1, #1
 8000830:	2b1f      	cmp	r3, #31
 8000832:	dd00      	ble.n	8000836 <__aeabi_dadd+0xda>
 8000834:	e0a8      	b.n	8000988 <__aeabi_dadd+0x22c>
 8000836:	2220      	movs	r2, #32
 8000838:	0039      	movs	r1, r7
 800083a:	1ad2      	subs	r2, r2, r3
 800083c:	0020      	movs	r0, r4
 800083e:	4094      	lsls	r4, r2
 8000840:	4091      	lsls	r1, r2
 8000842:	40d8      	lsrs	r0, r3
 8000844:	1e62      	subs	r2, r4, #1
 8000846:	4194      	sbcs	r4, r2
 8000848:	40df      	lsrs	r7, r3
 800084a:	2600      	movs	r6, #0
 800084c:	4301      	orrs	r1, r0
 800084e:	430c      	orrs	r4, r1
 8000850:	0763      	lsls	r3, r4, #29
 8000852:	d009      	beq.n	8000868 <__aeabi_dadd+0x10c>
 8000854:	230f      	movs	r3, #15
 8000856:	4023      	ands	r3, r4
 8000858:	2b04      	cmp	r3, #4
 800085a:	d005      	beq.n	8000868 <__aeabi_dadd+0x10c>
 800085c:	1d23      	adds	r3, r4, #4
 800085e:	42a3      	cmp	r3, r4
 8000860:	41a4      	sbcs	r4, r4
 8000862:	4264      	negs	r4, r4
 8000864:	193f      	adds	r7, r7, r4
 8000866:	001c      	movs	r4, r3
 8000868:	023b      	lsls	r3, r7, #8
 800086a:	d400      	bmi.n	800086e <__aeabi_dadd+0x112>
 800086c:	e09e      	b.n	80009ac <__aeabi_dadd+0x250>
 800086e:	4b95      	ldr	r3, [pc, #596]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000870:	3601      	adds	r6, #1
 8000872:	429e      	cmp	r6, r3
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x11c>
 8000876:	e0b7      	b.n	80009e8 <__aeabi_dadd+0x28c>
 8000878:	4a93      	ldr	r2, [pc, #588]	; (8000ac8 <__aeabi_dadd+0x36c>)
 800087a:	08e4      	lsrs	r4, r4, #3
 800087c:	4017      	ands	r7, r2
 800087e:	077b      	lsls	r3, r7, #29
 8000880:	0571      	lsls	r1, r6, #21
 8000882:	027f      	lsls	r7, r7, #9
 8000884:	4323      	orrs	r3, r4
 8000886:	0b3f      	lsrs	r7, r7, #12
 8000888:	0d4a      	lsrs	r2, r1, #21
 800088a:	0512      	lsls	r2, r2, #20
 800088c:	433a      	orrs	r2, r7
 800088e:	07ed      	lsls	r5, r5, #31
 8000890:	432a      	orrs	r2, r5
 8000892:	0018      	movs	r0, r3
 8000894:	0011      	movs	r1, r2
 8000896:	bce0      	pop	{r5, r6, r7}
 8000898:	46ba      	mov	sl, r7
 800089a:	46b1      	mov	r9, r6
 800089c:	46a8      	mov	r8, r5
 800089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a0:	2c00      	cmp	r4, #0
 80008a2:	d04b      	beq.n	800093c <__aeabi_dadd+0x1e0>
 80008a4:	464c      	mov	r4, r9
 80008a6:	1ba4      	subs	r4, r4, r6
 80008a8:	46a4      	mov	ip, r4
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d000      	beq.n	80008b0 <__aeabi_dadd+0x154>
 80008ae:	e123      	b.n	8000af8 <__aeabi_dadd+0x39c>
 80008b0:	0004      	movs	r4, r0
 80008b2:	431c      	orrs	r4, r3
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x15c>
 80008b6:	e1af      	b.n	8000c18 <__aeabi_dadd+0x4bc>
 80008b8:	4662      	mov	r2, ip
 80008ba:	1e54      	subs	r4, r2, #1
 80008bc:	2a01      	cmp	r2, #1
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x166>
 80008c0:	e215      	b.n	8000cee <__aeabi_dadd+0x592>
 80008c2:	4d80      	ldr	r5, [pc, #512]	; (8000ac4 <__aeabi_dadd+0x368>)
 80008c4:	45ac      	cmp	ip, r5
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x16e>
 80008c8:	e1c8      	b.n	8000c5c <__aeabi_dadd+0x500>
 80008ca:	46a4      	mov	ip, r4
 80008cc:	e11b      	b.n	8000b06 <__aeabi_dadd+0x3aa>
 80008ce:	464a      	mov	r2, r9
 80008d0:	1ab2      	subs	r2, r6, r2
 80008d2:	4694      	mov	ip, r2
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	dc00      	bgt.n	80008da <__aeabi_dadd+0x17e>
 80008d8:	e0ac      	b.n	8000a34 <__aeabi_dadd+0x2d8>
 80008da:	464a      	mov	r2, r9
 80008dc:	2a00      	cmp	r2, #0
 80008de:	d043      	beq.n	8000968 <__aeabi_dadd+0x20c>
 80008e0:	4a78      	ldr	r2, [pc, #480]	; (8000ac4 <__aeabi_dadd+0x368>)
 80008e2:	4296      	cmp	r6, r2
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x18c>
 80008e6:	e1af      	b.n	8000c48 <__aeabi_dadd+0x4ec>
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	003c      	movs	r4, r7
 80008ec:	0412      	lsls	r2, r2, #16
 80008ee:	4314      	orrs	r4, r2
 80008f0:	46a0      	mov	r8, r4
 80008f2:	4662      	mov	r2, ip
 80008f4:	2a38      	cmp	r2, #56	; 0x38
 80008f6:	dc67      	bgt.n	80009c8 <__aeabi_dadd+0x26c>
 80008f8:	2a1f      	cmp	r2, #31
 80008fa:	dc00      	bgt.n	80008fe <__aeabi_dadd+0x1a2>
 80008fc:	e15f      	b.n	8000bbe <__aeabi_dadd+0x462>
 80008fe:	4647      	mov	r7, r8
 8000900:	3a20      	subs	r2, #32
 8000902:	40d7      	lsrs	r7, r2
 8000904:	4662      	mov	r2, ip
 8000906:	2a20      	cmp	r2, #32
 8000908:	d005      	beq.n	8000916 <__aeabi_dadd+0x1ba>
 800090a:	4664      	mov	r4, ip
 800090c:	2240      	movs	r2, #64	; 0x40
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	4321      	orrs	r1, r4
 8000916:	1e4a      	subs	r2, r1, #1
 8000918:	4191      	sbcs	r1, r2
 800091a:	000c      	movs	r4, r1
 800091c:	433c      	orrs	r4, r7
 800091e:	e057      	b.n	80009d0 <__aeabi_dadd+0x274>
 8000920:	003a      	movs	r2, r7
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x1cc>
 8000926:	e105      	b.n	8000b34 <__aeabi_dadd+0x3d8>
 8000928:	0022      	movs	r2, r4
 800092a:	3a01      	subs	r2, #1
 800092c:	2c01      	cmp	r4, #1
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x1d6>
 8000930:	e182      	b.n	8000c38 <__aeabi_dadd+0x4dc>
 8000932:	4c64      	ldr	r4, [pc, #400]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000934:	45a4      	cmp	ip, r4
 8000936:	d05b      	beq.n	80009f0 <__aeabi_dadd+0x294>
 8000938:	4694      	mov	ip, r2
 800093a:	e741      	b.n	80007c0 <__aeabi_dadd+0x64>
 800093c:	4c63      	ldr	r4, [pc, #396]	; (8000acc <__aeabi_dadd+0x370>)
 800093e:	1c77      	adds	r7, r6, #1
 8000940:	4227      	tst	r7, r4
 8000942:	d000      	beq.n	8000946 <__aeabi_dadd+0x1ea>
 8000944:	e0c4      	b.n	8000ad0 <__aeabi_dadd+0x374>
 8000946:	0004      	movs	r4, r0
 8000948:	431c      	orrs	r4, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d000      	beq.n	8000950 <__aeabi_dadd+0x1f4>
 800094e:	e169      	b.n	8000c24 <__aeabi_dadd+0x4c8>
 8000950:	2c00      	cmp	r4, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x1fa>
 8000954:	e1bf      	b.n	8000cd6 <__aeabi_dadd+0x57a>
 8000956:	4644      	mov	r4, r8
 8000958:	430c      	orrs	r4, r1
 800095a:	d000      	beq.n	800095e <__aeabi_dadd+0x202>
 800095c:	e1d0      	b.n	8000d00 <__aeabi_dadd+0x5a4>
 800095e:	0742      	lsls	r2, r0, #29
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	4313      	orrs	r3, r2
 8000964:	08c0      	lsrs	r0, r0, #3
 8000966:	e029      	b.n	80009bc <__aeabi_dadd+0x260>
 8000968:	003a      	movs	r2, r7
 800096a:	430a      	orrs	r2, r1
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x214>
 800096e:	e170      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 8000970:	4662      	mov	r2, ip
 8000972:	4664      	mov	r4, ip
 8000974:	3a01      	subs	r2, #1
 8000976:	2c01      	cmp	r4, #1
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x220>
 800097a:	e0e0      	b.n	8000b3e <__aeabi_dadd+0x3e2>
 800097c:	4c51      	ldr	r4, [pc, #324]	; (8000ac4 <__aeabi_dadd+0x368>)
 800097e:	45a4      	cmp	ip, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x228>
 8000982:	e161      	b.n	8000c48 <__aeabi_dadd+0x4ec>
 8000984:	4694      	mov	ip, r2
 8000986:	e7b4      	b.n	80008f2 <__aeabi_dadd+0x196>
 8000988:	003a      	movs	r2, r7
 800098a:	391f      	subs	r1, #31
 800098c:	40ca      	lsrs	r2, r1
 800098e:	0011      	movs	r1, r2
 8000990:	2b20      	cmp	r3, #32
 8000992:	d003      	beq.n	800099c <__aeabi_dadd+0x240>
 8000994:	2240      	movs	r2, #64	; 0x40
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	409f      	lsls	r7, r3
 800099a:	433c      	orrs	r4, r7
 800099c:	1e63      	subs	r3, r4, #1
 800099e:	419c      	sbcs	r4, r3
 80009a0:	2700      	movs	r7, #0
 80009a2:	2600      	movs	r6, #0
 80009a4:	430c      	orrs	r4, r1
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x250>
 80009aa:	e753      	b.n	8000854 <__aeabi_dadd+0xf8>
 80009ac:	46b4      	mov	ip, r6
 80009ae:	08e4      	lsrs	r4, r4, #3
 80009b0:	077b      	lsls	r3, r7, #29
 80009b2:	4323      	orrs	r3, r4
 80009b4:	08f8      	lsrs	r0, r7, #3
 80009b6:	4a43      	ldr	r2, [pc, #268]	; (8000ac4 <__aeabi_dadd+0x368>)
 80009b8:	4594      	cmp	ip, r2
 80009ba:	d01d      	beq.n	80009f8 <__aeabi_dadd+0x29c>
 80009bc:	4662      	mov	r2, ip
 80009be:	0307      	lsls	r7, r0, #12
 80009c0:	0552      	lsls	r2, r2, #21
 80009c2:	0b3f      	lsrs	r7, r7, #12
 80009c4:	0d52      	lsrs	r2, r2, #21
 80009c6:	e760      	b.n	800088a <__aeabi_dadd+0x12e>
 80009c8:	4644      	mov	r4, r8
 80009ca:	430c      	orrs	r4, r1
 80009cc:	1e62      	subs	r2, r4, #1
 80009ce:	4194      	sbcs	r4, r2
 80009d0:	18e4      	adds	r4, r4, r3
 80009d2:	429c      	cmp	r4, r3
 80009d4:	419b      	sbcs	r3, r3
 80009d6:	425f      	negs	r7, r3
 80009d8:	183f      	adds	r7, r7, r0
 80009da:	023b      	lsls	r3, r7, #8
 80009dc:	d5e3      	bpl.n	80009a6 <__aeabi_dadd+0x24a>
 80009de:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <__aeabi_dadd+0x368>)
 80009e0:	3601      	adds	r6, #1
 80009e2:	429e      	cmp	r6, r3
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dadd+0x28c>
 80009e6:	e0b5      	b.n	8000b54 <__aeabi_dadd+0x3f8>
 80009e8:	0032      	movs	r2, r6
 80009ea:	2700      	movs	r7, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	e74c      	b.n	800088a <__aeabi_dadd+0x12e>
 80009f0:	0742      	lsls	r2, r0, #29
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	08c0      	lsrs	r0, r0, #3
 80009f8:	001a      	movs	r2, r3
 80009fa:	4302      	orrs	r2, r0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_dadd+0x2a4>
 80009fe:	e1e1      	b.n	8000dc4 <__aeabi_dadd+0x668>
 8000a00:	2780      	movs	r7, #128	; 0x80
 8000a02:	033f      	lsls	r7, r7, #12
 8000a04:	4307      	orrs	r7, r0
 8000a06:	033f      	lsls	r7, r7, #12
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000a0a:	0b3f      	lsrs	r7, r7, #12
 8000a0c:	e73d      	b.n	800088a <__aeabi_dadd+0x12e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f001 fd12 	bl	8002438 <__clzsi2>
 8000a14:	0001      	movs	r1, r0
 8000a16:	3118      	adds	r1, #24
 8000a18:	291f      	cmp	r1, #31
 8000a1a:	dc00      	bgt.n	8000a1e <__aeabi_dadd+0x2c2>
 8000a1c:	e6fc      	b.n	8000818 <__aeabi_dadd+0xbc>
 8000a1e:	3808      	subs	r0, #8
 8000a20:	4084      	lsls	r4, r0
 8000a22:	0027      	movs	r7, r4
 8000a24:	2400      	movs	r4, #0
 8000a26:	42b1      	cmp	r1, r6
 8000a28:	db00      	blt.n	8000a2c <__aeabi_dadd+0x2d0>
 8000a2a:	e6ff      	b.n	800082c <__aeabi_dadd+0xd0>
 8000a2c:	4a26      	ldr	r2, [pc, #152]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a2e:	1a76      	subs	r6, r6, r1
 8000a30:	4017      	ands	r7, r2
 8000a32:	e70d      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000a34:	2a00      	cmp	r2, #0
 8000a36:	d02f      	beq.n	8000a98 <__aeabi_dadd+0x33c>
 8000a38:	464a      	mov	r2, r9
 8000a3a:	1b92      	subs	r2, r2, r6
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x2e8>
 8000a42:	e0ad      	b.n	8000ba0 <__aeabi_dadd+0x444>
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000a46:	4591      	cmp	r9, r2
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x2f0>
 8000a4a:	e10f      	b.n	8000c6c <__aeabi_dadd+0x510>
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	0412      	lsls	r2, r2, #16
 8000a50:	4310      	orrs	r0, r2
 8000a52:	4662      	mov	r2, ip
 8000a54:	2a38      	cmp	r2, #56	; 0x38
 8000a56:	dd00      	ble.n	8000a5a <__aeabi_dadd+0x2fe>
 8000a58:	e10f      	b.n	8000c7a <__aeabi_dadd+0x51e>
 8000a5a:	2a1f      	cmp	r2, #31
 8000a5c:	dd00      	ble.n	8000a60 <__aeabi_dadd+0x304>
 8000a5e:	e180      	b.n	8000d62 <__aeabi_dadd+0x606>
 8000a60:	4664      	mov	r4, ip
 8000a62:	2220      	movs	r2, #32
 8000a64:	001e      	movs	r6, r3
 8000a66:	1b12      	subs	r2, r2, r4
 8000a68:	4667      	mov	r7, ip
 8000a6a:	0004      	movs	r4, r0
 8000a6c:	4093      	lsls	r3, r2
 8000a6e:	4094      	lsls	r4, r2
 8000a70:	40fe      	lsrs	r6, r7
 8000a72:	1e5a      	subs	r2, r3, #1
 8000a74:	4193      	sbcs	r3, r2
 8000a76:	40f8      	lsrs	r0, r7
 8000a78:	4334      	orrs	r4, r6
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	4480      	add	r8, r0
 8000a7e:	1864      	adds	r4, r4, r1
 8000a80:	428c      	cmp	r4, r1
 8000a82:	41bf      	sbcs	r7, r7
 8000a84:	427f      	negs	r7, r7
 8000a86:	464e      	mov	r6, r9
 8000a88:	4447      	add	r7, r8
 8000a8a:	e7a6      	b.n	80009da <__aeabi_dadd+0x27e>
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	0011      	movs	r1, r2
 8000a92:	1e4a      	subs	r2, r1, #1
 8000a94:	4191      	sbcs	r1, r2
 8000a96:	e6ad      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000a98:	4c0c      	ldr	r4, [pc, #48]	; (8000acc <__aeabi_dadd+0x370>)
 8000a9a:	1c72      	adds	r2, r6, #1
 8000a9c:	4222      	tst	r2, r4
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_dadd+0x346>
 8000aa0:	e0a1      	b.n	8000be6 <__aeabi_dadd+0x48a>
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d000      	beq.n	8000aac <__aeabi_dadd+0x350>
 8000aaa:	e0fa      	b.n	8000ca2 <__aeabi_dadd+0x546>
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x356>
 8000ab0:	e145      	b.n	8000d3e <__aeabi_dadd+0x5e2>
 8000ab2:	003a      	movs	r2, r7
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	d000      	beq.n	8000aba <__aeabi_dadd+0x35e>
 8000ab8:	e146      	b.n	8000d48 <__aeabi_dadd+0x5ec>
 8000aba:	0742      	lsls	r2, r0, #29
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	08c0      	lsrs	r0, r0, #3
 8000ac2:	e77b      	b.n	80009bc <__aeabi_dadd+0x260>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff
 8000acc:	000007fe 	.word	0x000007fe
 8000ad0:	4647      	mov	r7, r8
 8000ad2:	1a5c      	subs	r4, r3, r1
 8000ad4:	1bc2      	subs	r2, r0, r7
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	41bf      	sbcs	r7, r7
 8000ada:	427f      	negs	r7, r7
 8000adc:	46b9      	mov	r9, r7
 8000ade:	0017      	movs	r7, r2
 8000ae0:	464a      	mov	r2, r9
 8000ae2:	1abf      	subs	r7, r7, r2
 8000ae4:	023a      	lsls	r2, r7, #8
 8000ae6:	d500      	bpl.n	8000aea <__aeabi_dadd+0x38e>
 8000ae8:	e08d      	b.n	8000c06 <__aeabi_dadd+0x4aa>
 8000aea:	0023      	movs	r3, r4
 8000aec:	433b      	orrs	r3, r7
 8000aee:	d000      	beq.n	8000af2 <__aeabi_dadd+0x396>
 8000af0:	e68a      	b.n	8000808 <__aeabi_dadd+0xac>
 8000af2:	2000      	movs	r0, #0
 8000af4:	2500      	movs	r5, #0
 8000af6:	e761      	b.n	80009bc <__aeabi_dadd+0x260>
 8000af8:	4cb4      	ldr	r4, [pc, #720]	; (8000dcc <__aeabi_dadd+0x670>)
 8000afa:	45a1      	cmp	r9, r4
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dadd+0x3a4>
 8000afe:	e0ad      	b.n	8000c5c <__aeabi_dadd+0x500>
 8000b00:	2480      	movs	r4, #128	; 0x80
 8000b02:	0424      	lsls	r4, r4, #16
 8000b04:	4320      	orrs	r0, r4
 8000b06:	4664      	mov	r4, ip
 8000b08:	2c38      	cmp	r4, #56	; 0x38
 8000b0a:	dc3d      	bgt.n	8000b88 <__aeabi_dadd+0x42c>
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	2c1f      	cmp	r4, #31
 8000b10:	dd00      	ble.n	8000b14 <__aeabi_dadd+0x3b8>
 8000b12:	e0b7      	b.n	8000c84 <__aeabi_dadd+0x528>
 8000b14:	2520      	movs	r5, #32
 8000b16:	001e      	movs	r6, r3
 8000b18:	1b2d      	subs	r5, r5, r4
 8000b1a:	0004      	movs	r4, r0
 8000b1c:	40ab      	lsls	r3, r5
 8000b1e:	40ac      	lsls	r4, r5
 8000b20:	40d6      	lsrs	r6, r2
 8000b22:	40d0      	lsrs	r0, r2
 8000b24:	4642      	mov	r2, r8
 8000b26:	1e5d      	subs	r5, r3, #1
 8000b28:	41ab      	sbcs	r3, r5
 8000b2a:	4334      	orrs	r4, r6
 8000b2c:	1a12      	subs	r2, r2, r0
 8000b2e:	4690      	mov	r8, r2
 8000b30:	4323      	orrs	r3, r4
 8000b32:	e02c      	b.n	8000b8e <__aeabi_dadd+0x432>
 8000b34:	0742      	lsls	r2, r0, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c0      	lsrs	r0, r0, #3
 8000b3c:	e73b      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000b3e:	185c      	adds	r4, r3, r1
 8000b40:	429c      	cmp	r4, r3
 8000b42:	419b      	sbcs	r3, r3
 8000b44:	4440      	add	r0, r8
 8000b46:	425b      	negs	r3, r3
 8000b48:	18c7      	adds	r7, r0, r3
 8000b4a:	2601      	movs	r6, #1
 8000b4c:	023b      	lsls	r3, r7, #8
 8000b4e:	d400      	bmi.n	8000b52 <__aeabi_dadd+0x3f6>
 8000b50:	e729      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000b52:	2602      	movs	r6, #2
 8000b54:	4a9e      	ldr	r2, [pc, #632]	; (8000dd0 <__aeabi_dadd+0x674>)
 8000b56:	0863      	lsrs	r3, r4, #1
 8000b58:	4017      	ands	r7, r2
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4014      	ands	r4, r2
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	07fb      	lsls	r3, r7, #31
 8000b62:	431c      	orrs	r4, r3
 8000b64:	087f      	lsrs	r7, r7, #1
 8000b66:	e673      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000b68:	4644      	mov	r4, r8
 8000b6a:	3a20      	subs	r2, #32
 8000b6c:	40d4      	lsrs	r4, r2
 8000b6e:	4662      	mov	r2, ip
 8000b70:	2a20      	cmp	r2, #32
 8000b72:	d005      	beq.n	8000b80 <__aeabi_dadd+0x424>
 8000b74:	4667      	mov	r7, ip
 8000b76:	2240      	movs	r2, #64	; 0x40
 8000b78:	1bd2      	subs	r2, r2, r7
 8000b7a:	4647      	mov	r7, r8
 8000b7c:	4097      	lsls	r7, r2
 8000b7e:	4339      	orrs	r1, r7
 8000b80:	1e4a      	subs	r2, r1, #1
 8000b82:	4191      	sbcs	r1, r2
 8000b84:	4321      	orrs	r1, r4
 8000b86:	e635      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000b88:	4303      	orrs	r3, r0
 8000b8a:	1e58      	subs	r0, r3, #1
 8000b8c:	4183      	sbcs	r3, r0
 8000b8e:	1acc      	subs	r4, r1, r3
 8000b90:	42a1      	cmp	r1, r4
 8000b92:	41bf      	sbcs	r7, r7
 8000b94:	4643      	mov	r3, r8
 8000b96:	427f      	negs	r7, r7
 8000b98:	4655      	mov	r5, sl
 8000b9a:	464e      	mov	r6, r9
 8000b9c:	1bdf      	subs	r7, r3, r7
 8000b9e:	e62e      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_dadd+0x44c>
 8000ba6:	e0bd      	b.n	8000d24 <__aeabi_dadd+0x5c8>
 8000ba8:	4662      	mov	r2, ip
 8000baa:	4664      	mov	r4, ip
 8000bac:	3a01      	subs	r2, #1
 8000bae:	2c01      	cmp	r4, #1
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x458>
 8000bb2:	e0e5      	b.n	8000d80 <__aeabi_dadd+0x624>
 8000bb4:	4c85      	ldr	r4, [pc, #532]	; (8000dcc <__aeabi_dadd+0x670>)
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d058      	beq.n	8000c6c <__aeabi_dadd+0x510>
 8000bba:	4694      	mov	ip, r2
 8000bbc:	e749      	b.n	8000a52 <__aeabi_dadd+0x2f6>
 8000bbe:	4664      	mov	r4, ip
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	1b12      	subs	r2, r2, r4
 8000bc4:	4644      	mov	r4, r8
 8000bc6:	4094      	lsls	r4, r2
 8000bc8:	000f      	movs	r7, r1
 8000bca:	46a1      	mov	r9, r4
 8000bcc:	4664      	mov	r4, ip
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	40e7      	lsrs	r7, r4
 8000bd2:	464c      	mov	r4, r9
 8000bd4:	1e4a      	subs	r2, r1, #1
 8000bd6:	4191      	sbcs	r1, r2
 8000bd8:	433c      	orrs	r4, r7
 8000bda:	4642      	mov	r2, r8
 8000bdc:	430c      	orrs	r4, r1
 8000bde:	4661      	mov	r1, ip
 8000be0:	40ca      	lsrs	r2, r1
 8000be2:	1880      	adds	r0, r0, r2
 8000be4:	e6f4      	b.n	80009d0 <__aeabi_dadd+0x274>
 8000be6:	4c79      	ldr	r4, [pc, #484]	; (8000dcc <__aeabi_dadd+0x670>)
 8000be8:	42a2      	cmp	r2, r4
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x492>
 8000bec:	e6fd      	b.n	80009ea <__aeabi_dadd+0x28e>
 8000bee:	1859      	adds	r1, r3, r1
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	419b      	sbcs	r3, r3
 8000bf4:	4440      	add	r0, r8
 8000bf6:	425f      	negs	r7, r3
 8000bf8:	19c7      	adds	r7, r0, r7
 8000bfa:	07fc      	lsls	r4, r7, #31
 8000bfc:	0849      	lsrs	r1, r1, #1
 8000bfe:	0016      	movs	r6, r2
 8000c00:	430c      	orrs	r4, r1
 8000c02:	087f      	lsrs	r7, r7, #1
 8000c04:	e6cf      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000c06:	1acc      	subs	r4, r1, r3
 8000c08:	42a1      	cmp	r1, r4
 8000c0a:	41bf      	sbcs	r7, r7
 8000c0c:	4643      	mov	r3, r8
 8000c0e:	427f      	negs	r7, r7
 8000c10:	1a18      	subs	r0, r3, r0
 8000c12:	4655      	mov	r5, sl
 8000c14:	1bc7      	subs	r7, r0, r7
 8000c16:	e5f7      	b.n	8000808 <__aeabi_dadd+0xac>
 8000c18:	08c9      	lsrs	r1, r1, #3
 8000c1a:	077b      	lsls	r3, r7, #29
 8000c1c:	4655      	mov	r5, sl
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	08f8      	lsrs	r0, r7, #3
 8000c22:	e6c8      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_dadd+0x4ce>
 8000c28:	e081      	b.n	8000d2e <__aeabi_dadd+0x5d2>
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	d115      	bne.n	8000c5c <__aeabi_dadd+0x500>
 8000c30:	2080      	movs	r0, #128	; 0x80
 8000c32:	2500      	movs	r5, #0
 8000c34:	0300      	lsls	r0, r0, #12
 8000c36:	e6e3      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c38:	1a5c      	subs	r4, r3, r1
 8000c3a:	42a3      	cmp	r3, r4
 8000c3c:	419b      	sbcs	r3, r3
 8000c3e:	1bc7      	subs	r7, r0, r7
 8000c40:	425b      	negs	r3, r3
 8000c42:	2601      	movs	r6, #1
 8000c44:	1aff      	subs	r7, r7, r3
 8000c46:	e5da      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000c48:	0742      	lsls	r2, r0, #29
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	08c0      	lsrs	r0, r0, #3
 8000c50:	e6d2      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c52:	0742      	lsls	r2, r0, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c0      	lsrs	r0, r0, #3
 8000c5a:	e6ac      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000c5c:	4643      	mov	r3, r8
 8000c5e:	4642      	mov	r2, r8
 8000c60:	08c9      	lsrs	r1, r1, #3
 8000c62:	075b      	lsls	r3, r3, #29
 8000c64:	4655      	mov	r5, sl
 8000c66:	430b      	orrs	r3, r1
 8000c68:	08d0      	lsrs	r0, r2, #3
 8000c6a:	e6c5      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	4642      	mov	r2, r8
 8000c70:	075b      	lsls	r3, r3, #29
 8000c72:	08c9      	lsrs	r1, r1, #3
 8000c74:	430b      	orrs	r3, r1
 8000c76:	08d0      	lsrs	r0, r2, #3
 8000c78:	e6be      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c7a:	4303      	orrs	r3, r0
 8000c7c:	001c      	movs	r4, r3
 8000c7e:	1e63      	subs	r3, r4, #1
 8000c80:	419c      	sbcs	r4, r3
 8000c82:	e6fc      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000c84:	0002      	movs	r2, r0
 8000c86:	3c20      	subs	r4, #32
 8000c88:	40e2      	lsrs	r2, r4
 8000c8a:	0014      	movs	r4, r2
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d003      	beq.n	8000c9a <__aeabi_dadd+0x53e>
 8000c92:	2540      	movs	r5, #64	; 0x40
 8000c94:	1aad      	subs	r5, r5, r2
 8000c96:	40a8      	lsls	r0, r5
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	1e58      	subs	r0, r3, #1
 8000c9c:	4183      	sbcs	r3, r0
 8000c9e:	4323      	orrs	r3, r4
 8000ca0:	e775      	b.n	8000b8e <__aeabi_dadd+0x432>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d0e2      	beq.n	8000c6c <__aeabi_dadd+0x510>
 8000ca6:	003a      	movs	r2, r7
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	d0cd      	beq.n	8000c48 <__aeabi_dadd+0x4ec>
 8000cac:	0742      	lsls	r2, r0, #29
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	08c0      	lsrs	r0, r0, #3
 8000cb6:	0312      	lsls	r2, r2, #12
 8000cb8:	4210      	tst	r0, r2
 8000cba:	d006      	beq.n	8000cca <__aeabi_dadd+0x56e>
 8000cbc:	08fc      	lsrs	r4, r7, #3
 8000cbe:	4214      	tst	r4, r2
 8000cc0:	d103      	bne.n	8000cca <__aeabi_dadd+0x56e>
 8000cc2:	0020      	movs	r0, r4
 8000cc4:	08cb      	lsrs	r3, r1, #3
 8000cc6:	077a      	lsls	r2, r7, #29
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	0f5a      	lsrs	r2, r3, #29
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	0752      	lsls	r2, r2, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	e690      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x582>
 8000cdc:	e709      	b.n	8000af2 <__aeabi_dadd+0x396>
 8000cde:	4643      	mov	r3, r8
 8000ce0:	4642      	mov	r2, r8
 8000ce2:	08c9      	lsrs	r1, r1, #3
 8000ce4:	075b      	lsls	r3, r3, #29
 8000ce6:	4655      	mov	r5, sl
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	08d0      	lsrs	r0, r2, #3
 8000cec:	e666      	b.n	80009bc <__aeabi_dadd+0x260>
 8000cee:	1acc      	subs	r4, r1, r3
 8000cf0:	42a1      	cmp	r1, r4
 8000cf2:	4189      	sbcs	r1, r1
 8000cf4:	1a3f      	subs	r7, r7, r0
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	4655      	mov	r5, sl
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	1a7f      	subs	r7, r7, r1
 8000cfe:	e57e      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000d00:	4642      	mov	r2, r8
 8000d02:	1a5c      	subs	r4, r3, r1
 8000d04:	1a87      	subs	r7, r0, r2
 8000d06:	42a3      	cmp	r3, r4
 8000d08:	4192      	sbcs	r2, r2
 8000d0a:	4252      	negs	r2, r2
 8000d0c:	1abf      	subs	r7, r7, r2
 8000d0e:	023a      	lsls	r2, r7, #8
 8000d10:	d53d      	bpl.n	8000d8e <__aeabi_dadd+0x632>
 8000d12:	1acc      	subs	r4, r1, r3
 8000d14:	42a1      	cmp	r1, r4
 8000d16:	4189      	sbcs	r1, r1
 8000d18:	4643      	mov	r3, r8
 8000d1a:	4249      	negs	r1, r1
 8000d1c:	1a1f      	subs	r7, r3, r0
 8000d1e:	4655      	mov	r5, sl
 8000d20:	1a7f      	subs	r7, r7, r1
 8000d22:	e595      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000d24:	077b      	lsls	r3, r7, #29
 8000d26:	08c9      	lsrs	r1, r1, #3
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	08f8      	lsrs	r0, r7, #3
 8000d2c:	e643      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000d2e:	4644      	mov	r4, r8
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	430c      	orrs	r4, r1
 8000d34:	d130      	bne.n	8000d98 <__aeabi_dadd+0x63c>
 8000d36:	0742      	lsls	r2, r0, #29
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	08c0      	lsrs	r0, r0, #3
 8000d3c:	e65c      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000d3e:	077b      	lsls	r3, r7, #29
 8000d40:	08c9      	lsrs	r1, r1, #3
 8000d42:	430b      	orrs	r3, r1
 8000d44:	08f8      	lsrs	r0, r7, #3
 8000d46:	e639      	b.n	80009bc <__aeabi_dadd+0x260>
 8000d48:	185c      	adds	r4, r3, r1
 8000d4a:	429c      	cmp	r4, r3
 8000d4c:	419b      	sbcs	r3, r3
 8000d4e:	4440      	add	r0, r8
 8000d50:	425b      	negs	r3, r3
 8000d52:	18c7      	adds	r7, r0, r3
 8000d54:	023b      	lsls	r3, r7, #8
 8000d56:	d400      	bmi.n	8000d5a <__aeabi_dadd+0x5fe>
 8000d58:	e625      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <__aeabi_dadd+0x674>)
 8000d5c:	2601      	movs	r6, #1
 8000d5e:	401f      	ands	r7, r3
 8000d60:	e621      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d62:	0004      	movs	r4, r0
 8000d64:	3a20      	subs	r2, #32
 8000d66:	40d4      	lsrs	r4, r2
 8000d68:	4662      	mov	r2, ip
 8000d6a:	2a20      	cmp	r2, #32
 8000d6c:	d004      	beq.n	8000d78 <__aeabi_dadd+0x61c>
 8000d6e:	2240      	movs	r2, #64	; 0x40
 8000d70:	4666      	mov	r6, ip
 8000d72:	1b92      	subs	r2, r2, r6
 8000d74:	4090      	lsls	r0, r2
 8000d76:	4303      	orrs	r3, r0
 8000d78:	1e5a      	subs	r2, r3, #1
 8000d7a:	4193      	sbcs	r3, r2
 8000d7c:	431c      	orrs	r4, r3
 8000d7e:	e67e      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000d80:	185c      	adds	r4, r3, r1
 8000d82:	428c      	cmp	r4, r1
 8000d84:	4189      	sbcs	r1, r1
 8000d86:	4440      	add	r0, r8
 8000d88:	4249      	negs	r1, r1
 8000d8a:	1847      	adds	r7, r0, r1
 8000d8c:	e6dd      	b.n	8000b4a <__aeabi_dadd+0x3ee>
 8000d8e:	0023      	movs	r3, r4
 8000d90:	433b      	orrs	r3, r7
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x63a>
 8000d94:	e6ad      	b.n	8000af2 <__aeabi_dadd+0x396>
 8000d96:	e606      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d98:	0744      	lsls	r4, r0, #29
 8000d9a:	4323      	orrs	r3, r4
 8000d9c:	2480      	movs	r4, #128	; 0x80
 8000d9e:	08c0      	lsrs	r0, r0, #3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	4220      	tst	r0, r4
 8000da4:	d008      	beq.n	8000db8 <__aeabi_dadd+0x65c>
 8000da6:	4642      	mov	r2, r8
 8000da8:	08d6      	lsrs	r6, r2, #3
 8000daa:	4226      	tst	r6, r4
 8000dac:	d104      	bne.n	8000db8 <__aeabi_dadd+0x65c>
 8000dae:	4655      	mov	r5, sl
 8000db0:	0030      	movs	r0, r6
 8000db2:	08cb      	lsrs	r3, r1, #3
 8000db4:	0751      	lsls	r1, r2, #29
 8000db6:	430b      	orrs	r3, r1
 8000db8:	0f5a      	lsrs	r2, r3, #29
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	0752      	lsls	r2, r2, #29
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	e619      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	4a01      	ldr	r2, [pc, #4]	; (8000dcc <__aeabi_dadd+0x670>)
 8000dc8:	001f      	movs	r7, r3
 8000dca:	e55e      	b.n	800088a <__aeabi_dadd+0x12e>
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	ff7fffff 	.word	0xff7fffff

08000dd4 <__aeabi_ddiv>:
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	4657      	mov	r7, sl
 8000dd8:	464e      	mov	r6, r9
 8000dda:	4645      	mov	r5, r8
 8000ddc:	46de      	mov	lr, fp
 8000dde:	b5e0      	push	{r5, r6, r7, lr}
 8000de0:	4681      	mov	r9, r0
 8000de2:	0005      	movs	r5, r0
 8000de4:	030c      	lsls	r4, r1, #12
 8000de6:	0048      	lsls	r0, r1, #1
 8000de8:	4692      	mov	sl, r2
 8000dea:	001f      	movs	r7, r3
 8000dec:	b085      	sub	sp, #20
 8000dee:	0b24      	lsrs	r4, r4, #12
 8000df0:	0d40      	lsrs	r0, r0, #21
 8000df2:	0fce      	lsrs	r6, r1, #31
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_ddiv+0x26>
 8000df8:	e156      	b.n	80010a8 <__aeabi_ddiv+0x2d4>
 8000dfa:	4bd4      	ldr	r3, [pc, #848]	; (800114c <__aeabi_ddiv+0x378>)
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e>
 8000e00:	e172      	b.n	80010e8 <__aeabi_ddiv+0x314>
 8000e02:	0f6b      	lsrs	r3, r5, #29
 8000e04:	00e4      	lsls	r4, r4, #3
 8000e06:	431c      	orrs	r4, r3
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	041b      	lsls	r3, r3, #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	4698      	mov	r8, r3
 8000e10:	4bcf      	ldr	r3, [pc, #828]	; (8001150 <__aeabi_ddiv+0x37c>)
 8000e12:	00ed      	lsls	r5, r5, #3
 8000e14:	469b      	mov	fp, r3
 8000e16:	2300      	movs	r3, #0
 8000e18:	4699      	mov	r9, r3
 8000e1a:	4483      	add	fp, r0
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	033c      	lsls	r4, r7, #12
 8000e20:	007b      	lsls	r3, r7, #1
 8000e22:	4650      	mov	r0, sl
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	0fff      	lsrs	r7, r7, #31
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x5c>
 8000e2e:	e11f      	b.n	8001070 <__aeabi_ddiv+0x29c>
 8000e30:	4ac6      	ldr	r2, [pc, #792]	; (800114c <__aeabi_ddiv+0x378>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0x64>
 8000e36:	e162      	b.n	80010fe <__aeabi_ddiv+0x32a>
 8000e38:	49c5      	ldr	r1, [pc, #788]	; (8001150 <__aeabi_ddiv+0x37c>)
 8000e3a:	0f42      	lsrs	r2, r0, #29
 8000e3c:	468c      	mov	ip, r1
 8000e3e:	00e4      	lsls	r4, r4, #3
 8000e40:	4659      	mov	r1, fp
 8000e42:	4314      	orrs	r4, r2
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	4463      	add	r3, ip
 8000e48:	0412      	lsls	r2, r2, #16
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	4314      	orrs	r4, r2
 8000e4e:	469b      	mov	fp, r3
 8000e50:	00c2      	lsls	r2, r0, #3
 8000e52:	2000      	movs	r0, #0
 8000e54:	0033      	movs	r3, r6
 8000e56:	407b      	eors	r3, r7
 8000e58:	469a      	mov	sl, r3
 8000e5a:	464b      	mov	r3, r9
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d827      	bhi.n	8000eb0 <__aeabi_ddiv+0xdc>
 8000e60:	49bc      	ldr	r1, [pc, #752]	; (8001154 <__aeabi_ddiv+0x380>)
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	58cb      	ldr	r3, [r1, r3]
 8000e66:	469f      	mov	pc, r3
 8000e68:	46b2      	mov	sl, r6
 8000e6a:	9b00      	ldr	r3, [sp, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d016      	beq.n	8000e9e <__aeabi_ddiv+0xca>
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0xa2>
 8000e74:	e28e      	b.n	8001394 <__aeabi_ddiv+0x5c0>
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d000      	beq.n	8000e7c <__aeabi_ddiv+0xa8>
 8000e7a:	e0d9      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2400      	movs	r4, #0
 8000e80:	2500      	movs	r5, #0
 8000e82:	4652      	mov	r2, sl
 8000e84:	051b      	lsls	r3, r3, #20
 8000e86:	4323      	orrs	r3, r4
 8000e88:	07d2      	lsls	r2, r2, #31
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	0028      	movs	r0, r5
 8000e8e:	0019      	movs	r1, r3
 8000e90:	b005      	add	sp, #20
 8000e92:	bcf0      	pop	{r4, r5, r6, r7}
 8000e94:	46bb      	mov	fp, r7
 8000e96:	46b2      	mov	sl, r6
 8000e98:	46a9      	mov	r9, r5
 8000e9a:	46a0      	mov	r8, r4
 8000e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	4baa      	ldr	r3, [pc, #680]	; (800114c <__aeabi_ddiv+0x378>)
 8000ea4:	e7ed      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8000ea6:	46ba      	mov	sl, r7
 8000ea8:	46a0      	mov	r8, r4
 8000eaa:	0015      	movs	r5, r2
 8000eac:	9000      	str	r0, [sp, #0]
 8000eae:	e7dc      	b.n	8000e6a <__aeabi_ddiv+0x96>
 8000eb0:	4544      	cmp	r4, r8
 8000eb2:	d200      	bcs.n	8000eb6 <__aeabi_ddiv+0xe2>
 8000eb4:	e1c7      	b.n	8001246 <__aeabi_ddiv+0x472>
 8000eb6:	d100      	bne.n	8000eba <__aeabi_ddiv+0xe6>
 8000eb8:	e1c2      	b.n	8001240 <__aeabi_ddiv+0x46c>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	425b      	negs	r3, r3
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	002e      	movs	r6, r5
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	44e3      	add	fp, ip
 8000ec8:	0223      	lsls	r3, r4, #8
 8000eca:	0e14      	lsrs	r4, r2, #24
 8000ecc:	431c      	orrs	r4, r3
 8000ece:	0c1b      	lsrs	r3, r3, #16
 8000ed0:	4699      	mov	r9, r3
 8000ed2:	0423      	lsls	r3, r4, #16
 8000ed4:	0c1f      	lsrs	r7, r3, #16
 8000ed6:	0212      	lsls	r2, r2, #8
 8000ed8:	4649      	mov	r1, r9
 8000eda:	9200      	str	r2, [sp, #0]
 8000edc:	9701      	str	r7, [sp, #4]
 8000ede:	f7ff f9b3 	bl	8000248 <__aeabi_uidivmod>
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	437a      	muls	r2, r7
 8000ee6:	040b      	lsls	r3, r1, #16
 8000ee8:	0c31      	lsrs	r1, r6, #16
 8000eea:	4680      	mov	r8, r0
 8000eec:	4319      	orrs	r1, r3
 8000eee:	428a      	cmp	r2, r1
 8000ef0:	d907      	bls.n	8000f02 <__aeabi_ddiv+0x12e>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	1909      	adds	r1, r1, r4
 8000efa:	44e0      	add	r8, ip
 8000efc:	428c      	cmp	r4, r1
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x12e>
 8000f00:	e207      	b.n	8001312 <__aeabi_ddiv+0x53e>
 8000f02:	1a88      	subs	r0, r1, r2
 8000f04:	4649      	mov	r1, r9
 8000f06:	f7ff f99f 	bl	8000248 <__aeabi_uidivmod>
 8000f0a:	0409      	lsls	r1, r1, #16
 8000f0c:	468c      	mov	ip, r1
 8000f0e:	0431      	lsls	r1, r6, #16
 8000f10:	4666      	mov	r6, ip
 8000f12:	9a01      	ldr	r2, [sp, #4]
 8000f14:	0c09      	lsrs	r1, r1, #16
 8000f16:	4342      	muls	r2, r0
 8000f18:	0003      	movs	r3, r0
 8000f1a:	4331      	orrs	r1, r6
 8000f1c:	428a      	cmp	r2, r1
 8000f1e:	d904      	bls.n	8000f2a <__aeabi_ddiv+0x156>
 8000f20:	1909      	adds	r1, r1, r4
 8000f22:	3b01      	subs	r3, #1
 8000f24:	428c      	cmp	r4, r1
 8000f26:	d800      	bhi.n	8000f2a <__aeabi_ddiv+0x156>
 8000f28:	e1ed      	b.n	8001306 <__aeabi_ddiv+0x532>
 8000f2a:	1a88      	subs	r0, r1, r2
 8000f2c:	4642      	mov	r2, r8
 8000f2e:	0412      	lsls	r2, r2, #16
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4690      	mov	r8, r2
 8000f34:	4641      	mov	r1, r8
 8000f36:	9b00      	ldr	r3, [sp, #0]
 8000f38:	040e      	lsls	r6, r1, #16
 8000f3a:	0c1b      	lsrs	r3, r3, #16
 8000f3c:	001f      	movs	r7, r3
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	9b00      	ldr	r3, [sp, #0]
 8000f42:	0c36      	lsrs	r6, r6, #16
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	0c19      	lsrs	r1, r3, #16
 8000f48:	000b      	movs	r3, r1
 8000f4a:	4373      	muls	r3, r6
 8000f4c:	0c12      	lsrs	r2, r2, #16
 8000f4e:	437e      	muls	r6, r7
 8000f50:	9103      	str	r1, [sp, #12]
 8000f52:	4351      	muls	r1, r2
 8000f54:	437a      	muls	r2, r7
 8000f56:	0c1f      	lsrs	r7, r3, #16
 8000f58:	46bc      	mov	ip, r7
 8000f5a:	1876      	adds	r6, r6, r1
 8000f5c:	4466      	add	r6, ip
 8000f5e:	42b1      	cmp	r1, r6
 8000f60:	d903      	bls.n	8000f6a <__aeabi_ddiv+0x196>
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	0249      	lsls	r1, r1, #9
 8000f66:	468c      	mov	ip, r1
 8000f68:	4462      	add	r2, ip
 8000f6a:	0c31      	lsrs	r1, r6, #16
 8000f6c:	188a      	adds	r2, r1, r2
 8000f6e:	0431      	lsls	r1, r6, #16
 8000f70:	041e      	lsls	r6, r3, #16
 8000f72:	0c36      	lsrs	r6, r6, #16
 8000f74:	198e      	adds	r6, r1, r6
 8000f76:	4290      	cmp	r0, r2
 8000f78:	d302      	bcc.n	8000f80 <__aeabi_ddiv+0x1ac>
 8000f7a:	d112      	bne.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8000f7c:	42b5      	cmp	r5, r6
 8000f7e:	d210      	bcs.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8000f80:	4643      	mov	r3, r8
 8000f82:	1e59      	subs	r1, r3, #1
 8000f84:	9b00      	ldr	r3, [sp, #0]
 8000f86:	469c      	mov	ip, r3
 8000f88:	4465      	add	r5, ip
 8000f8a:	001f      	movs	r7, r3
 8000f8c:	429d      	cmp	r5, r3
 8000f8e:	419b      	sbcs	r3, r3
 8000f90:	425b      	negs	r3, r3
 8000f92:	191b      	adds	r3, r3, r4
 8000f94:	18c0      	adds	r0, r0, r3
 8000f96:	4284      	cmp	r4, r0
 8000f98:	d200      	bcs.n	8000f9c <__aeabi_ddiv+0x1c8>
 8000f9a:	e1a0      	b.n	80012de <__aeabi_ddiv+0x50a>
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_ddiv+0x1cc>
 8000f9e:	e19b      	b.n	80012d8 <__aeabi_ddiv+0x504>
 8000fa0:	4688      	mov	r8, r1
 8000fa2:	1bae      	subs	r6, r5, r6
 8000fa4:	42b5      	cmp	r5, r6
 8000fa6:	41ad      	sbcs	r5, r5
 8000fa8:	1a80      	subs	r0, r0, r2
 8000faa:	426d      	negs	r5, r5
 8000fac:	1b40      	subs	r0, r0, r5
 8000fae:	4284      	cmp	r4, r0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_ddiv+0x1e0>
 8000fb2:	e1d5      	b.n	8001360 <__aeabi_ddiv+0x58c>
 8000fb4:	4649      	mov	r1, r9
 8000fb6:	f7ff f947 	bl	8000248 <__aeabi_uidivmod>
 8000fba:	9a01      	ldr	r2, [sp, #4]
 8000fbc:	040b      	lsls	r3, r1, #16
 8000fbe:	4342      	muls	r2, r0
 8000fc0:	0c31      	lsrs	r1, r6, #16
 8000fc2:	0005      	movs	r5, r0
 8000fc4:	4319      	orrs	r1, r3
 8000fc6:	428a      	cmp	r2, r1
 8000fc8:	d900      	bls.n	8000fcc <__aeabi_ddiv+0x1f8>
 8000fca:	e16c      	b.n	80012a6 <__aeabi_ddiv+0x4d2>
 8000fcc:	1a88      	subs	r0, r1, r2
 8000fce:	4649      	mov	r1, r9
 8000fd0:	f7ff f93a 	bl	8000248 <__aeabi_uidivmod>
 8000fd4:	9a01      	ldr	r2, [sp, #4]
 8000fd6:	0436      	lsls	r6, r6, #16
 8000fd8:	4342      	muls	r2, r0
 8000fda:	0409      	lsls	r1, r1, #16
 8000fdc:	0c36      	lsrs	r6, r6, #16
 8000fde:	0003      	movs	r3, r0
 8000fe0:	430e      	orrs	r6, r1
 8000fe2:	42b2      	cmp	r2, r6
 8000fe4:	d900      	bls.n	8000fe8 <__aeabi_ddiv+0x214>
 8000fe6:	e153      	b.n	8001290 <__aeabi_ddiv+0x4bc>
 8000fe8:	9803      	ldr	r0, [sp, #12]
 8000fea:	1ab6      	subs	r6, r6, r2
 8000fec:	0002      	movs	r2, r0
 8000fee:	042d      	lsls	r5, r5, #16
 8000ff0:	431d      	orrs	r5, r3
 8000ff2:	9f02      	ldr	r7, [sp, #8]
 8000ff4:	042b      	lsls	r3, r5, #16
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	435a      	muls	r2, r3
 8000ffa:	437b      	muls	r3, r7
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	0c29      	lsrs	r1, r5, #16
 8001000:	4348      	muls	r0, r1
 8001002:	0c13      	lsrs	r3, r2, #16
 8001004:	4484      	add	ip, r0
 8001006:	4463      	add	r3, ip
 8001008:	4379      	muls	r1, r7
 800100a:	4298      	cmp	r0, r3
 800100c:	d903      	bls.n	8001016 <__aeabi_ddiv+0x242>
 800100e:	2080      	movs	r0, #128	; 0x80
 8001010:	0240      	lsls	r0, r0, #9
 8001012:	4684      	mov	ip, r0
 8001014:	4461      	add	r1, ip
 8001016:	0c18      	lsrs	r0, r3, #16
 8001018:	0412      	lsls	r2, r2, #16
 800101a:	041b      	lsls	r3, r3, #16
 800101c:	0c12      	lsrs	r2, r2, #16
 800101e:	1841      	adds	r1, r0, r1
 8001020:	189b      	adds	r3, r3, r2
 8001022:	428e      	cmp	r6, r1
 8001024:	d200      	bcs.n	8001028 <__aeabi_ddiv+0x254>
 8001026:	e0ff      	b.n	8001228 <__aeabi_ddiv+0x454>
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x258>
 800102a:	e0fa      	b.n	8001222 <__aeabi_ddiv+0x44e>
 800102c:	2301      	movs	r3, #1
 800102e:	431d      	orrs	r5, r3
 8001030:	4a49      	ldr	r2, [pc, #292]	; (8001158 <__aeabi_ddiv+0x384>)
 8001032:	445a      	add	r2, fp
 8001034:	2a00      	cmp	r2, #0
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x266>
 8001038:	e0aa      	b.n	8001190 <__aeabi_ddiv+0x3bc>
 800103a:	076b      	lsls	r3, r5, #29
 800103c:	d000      	beq.n	8001040 <__aeabi_ddiv+0x26c>
 800103e:	e13d      	b.n	80012bc <__aeabi_ddiv+0x4e8>
 8001040:	08ed      	lsrs	r5, r5, #3
 8001042:	4643      	mov	r3, r8
 8001044:	01db      	lsls	r3, r3, #7
 8001046:	d506      	bpl.n	8001056 <__aeabi_ddiv+0x282>
 8001048:	4642      	mov	r2, r8
 800104a:	4b44      	ldr	r3, [pc, #272]	; (800115c <__aeabi_ddiv+0x388>)
 800104c:	401a      	ands	r2, r3
 800104e:	4690      	mov	r8, r2
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	00d2      	lsls	r2, r2, #3
 8001054:	445a      	add	r2, fp
 8001056:	4b42      	ldr	r3, [pc, #264]	; (8001160 <__aeabi_ddiv+0x38c>)
 8001058:	429a      	cmp	r2, r3
 800105a:	dd00      	ble.n	800105e <__aeabi_ddiv+0x28a>
 800105c:	e71f      	b.n	8000e9e <__aeabi_ddiv+0xca>
 800105e:	4643      	mov	r3, r8
 8001060:	075b      	lsls	r3, r3, #29
 8001062:	431d      	orrs	r5, r3
 8001064:	4643      	mov	r3, r8
 8001066:	0552      	lsls	r2, r2, #21
 8001068:	025c      	lsls	r4, r3, #9
 800106a:	0b24      	lsrs	r4, r4, #12
 800106c:	0d53      	lsrs	r3, r2, #21
 800106e:	e708      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001070:	4652      	mov	r2, sl
 8001072:	4322      	orrs	r2, r4
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x2a4>
 8001076:	e07b      	b.n	8001170 <__aeabi_ddiv+0x39c>
 8001078:	2c00      	cmp	r4, #0
 800107a:	d100      	bne.n	800107e <__aeabi_ddiv+0x2aa>
 800107c:	e0fa      	b.n	8001274 <__aeabi_ddiv+0x4a0>
 800107e:	0020      	movs	r0, r4
 8001080:	f001 f9da 	bl	8002438 <__clzsi2>
 8001084:	0002      	movs	r2, r0
 8001086:	3a0b      	subs	r2, #11
 8001088:	231d      	movs	r3, #29
 800108a:	0001      	movs	r1, r0
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	4652      	mov	r2, sl
 8001090:	3908      	subs	r1, #8
 8001092:	40da      	lsrs	r2, r3
 8001094:	408c      	lsls	r4, r1
 8001096:	4314      	orrs	r4, r2
 8001098:	4652      	mov	r2, sl
 800109a:	408a      	lsls	r2, r1
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <__aeabi_ddiv+0x390>)
 800109e:	4458      	add	r0, fp
 80010a0:	469b      	mov	fp, r3
 80010a2:	4483      	add	fp, r0
 80010a4:	2000      	movs	r0, #0
 80010a6:	e6d5      	b.n	8000e54 <__aeabi_ddiv+0x80>
 80010a8:	464b      	mov	r3, r9
 80010aa:	4323      	orrs	r3, r4
 80010ac:	4698      	mov	r8, r3
 80010ae:	d044      	beq.n	800113a <__aeabi_ddiv+0x366>
 80010b0:	2c00      	cmp	r4, #0
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x2e2>
 80010b4:	e0ce      	b.n	8001254 <__aeabi_ddiv+0x480>
 80010b6:	0020      	movs	r0, r4
 80010b8:	f001 f9be 	bl	8002438 <__clzsi2>
 80010bc:	0001      	movs	r1, r0
 80010be:	0002      	movs	r2, r0
 80010c0:	390b      	subs	r1, #11
 80010c2:	231d      	movs	r3, #29
 80010c4:	1a5b      	subs	r3, r3, r1
 80010c6:	4649      	mov	r1, r9
 80010c8:	0010      	movs	r0, r2
 80010ca:	40d9      	lsrs	r1, r3
 80010cc:	3808      	subs	r0, #8
 80010ce:	4084      	lsls	r4, r0
 80010d0:	000b      	movs	r3, r1
 80010d2:	464d      	mov	r5, r9
 80010d4:	4323      	orrs	r3, r4
 80010d6:	4698      	mov	r8, r3
 80010d8:	4085      	lsls	r5, r0
 80010da:	4823      	ldr	r0, [pc, #140]	; (8001168 <__aeabi_ddiv+0x394>)
 80010dc:	1a83      	subs	r3, r0, r2
 80010de:	469b      	mov	fp, r3
 80010e0:	2300      	movs	r3, #0
 80010e2:	4699      	mov	r9, r3
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	e69a      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 80010e8:	464b      	mov	r3, r9
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d11d      	bne.n	800112c <__aeabi_ddiv+0x358>
 80010f0:	2308      	movs	r3, #8
 80010f2:	4699      	mov	r9, r3
 80010f4:	3b06      	subs	r3, #6
 80010f6:	2500      	movs	r5, #0
 80010f8:	4683      	mov	fp, r0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	e68f      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 80010fe:	4652      	mov	r2, sl
 8001100:	4322      	orrs	r2, r4
 8001102:	d109      	bne.n	8001118 <__aeabi_ddiv+0x344>
 8001104:	2302      	movs	r3, #2
 8001106:	4649      	mov	r1, r9
 8001108:	4319      	orrs	r1, r3
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <__aeabi_ddiv+0x398>)
 800110c:	4689      	mov	r9, r1
 800110e:	469c      	mov	ip, r3
 8001110:	2400      	movs	r4, #0
 8001112:	2002      	movs	r0, #2
 8001114:	44e3      	add	fp, ip
 8001116:	e69d      	b.n	8000e54 <__aeabi_ddiv+0x80>
 8001118:	2303      	movs	r3, #3
 800111a:	464a      	mov	r2, r9
 800111c:	431a      	orrs	r2, r3
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <__aeabi_ddiv+0x398>)
 8001120:	4691      	mov	r9, r2
 8001122:	469c      	mov	ip, r3
 8001124:	4652      	mov	r2, sl
 8001126:	2003      	movs	r0, #3
 8001128:	44e3      	add	fp, ip
 800112a:	e693      	b.n	8000e54 <__aeabi_ddiv+0x80>
 800112c:	230c      	movs	r3, #12
 800112e:	4699      	mov	r9, r3
 8001130:	3b09      	subs	r3, #9
 8001132:	46a0      	mov	r8, r4
 8001134:	4683      	mov	fp, r0
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	e671      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 800113a:	2304      	movs	r3, #4
 800113c:	4699      	mov	r9, r3
 800113e:	2300      	movs	r3, #0
 8001140:	469b      	mov	fp, r3
 8001142:	3301      	adds	r3, #1
 8001144:	2500      	movs	r5, #0
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	e669      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	000007ff 	.word	0x000007ff
 8001150:	fffffc01 	.word	0xfffffc01
 8001154:	0800bfcc 	.word	0x0800bfcc
 8001158:	000003ff 	.word	0x000003ff
 800115c:	feffffff 	.word	0xfeffffff
 8001160:	000007fe 	.word	0x000007fe
 8001164:	000003f3 	.word	0x000003f3
 8001168:	fffffc0d 	.word	0xfffffc0d
 800116c:	fffff801 	.word	0xfffff801
 8001170:	4649      	mov	r1, r9
 8001172:	2301      	movs	r3, #1
 8001174:	4319      	orrs	r1, r3
 8001176:	4689      	mov	r9, r1
 8001178:	2400      	movs	r4, #0
 800117a:	2001      	movs	r0, #1
 800117c:	e66a      	b.n	8000e54 <__aeabi_ddiv+0x80>
 800117e:	2300      	movs	r3, #0
 8001180:	2480      	movs	r4, #128	; 0x80
 8001182:	469a      	mov	sl, r3
 8001184:	2500      	movs	r5, #0
 8001186:	4b8a      	ldr	r3, [pc, #552]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 8001188:	0324      	lsls	r4, r4, #12
 800118a:	e67a      	b.n	8000e82 <__aeabi_ddiv+0xae>
 800118c:	2501      	movs	r5, #1
 800118e:	426d      	negs	r5, r5
 8001190:	2301      	movs	r3, #1
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	2b38      	cmp	r3, #56	; 0x38
 8001196:	dd00      	ble.n	800119a <__aeabi_ddiv+0x3c6>
 8001198:	e670      	b.n	8000e7c <__aeabi_ddiv+0xa8>
 800119a:	2b1f      	cmp	r3, #31
 800119c:	dc00      	bgt.n	80011a0 <__aeabi_ddiv+0x3cc>
 800119e:	e0bf      	b.n	8001320 <__aeabi_ddiv+0x54c>
 80011a0:	211f      	movs	r1, #31
 80011a2:	4249      	negs	r1, r1
 80011a4:	1a8a      	subs	r2, r1, r2
 80011a6:	4641      	mov	r1, r8
 80011a8:	40d1      	lsrs	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	2b20      	cmp	r3, #32
 80011ae:	d004      	beq.n	80011ba <__aeabi_ddiv+0x3e6>
 80011b0:	4641      	mov	r1, r8
 80011b2:	4b80      	ldr	r3, [pc, #512]	; (80013b4 <__aeabi_ddiv+0x5e0>)
 80011b4:	445b      	add	r3, fp
 80011b6:	4099      	lsls	r1, r3
 80011b8:	430d      	orrs	r5, r1
 80011ba:	1e6b      	subs	r3, r5, #1
 80011bc:	419d      	sbcs	r5, r3
 80011be:	2307      	movs	r3, #7
 80011c0:	432a      	orrs	r2, r5
 80011c2:	001d      	movs	r5, r3
 80011c4:	2400      	movs	r4, #0
 80011c6:	4015      	ands	r5, r2
 80011c8:	4213      	tst	r3, r2
 80011ca:	d100      	bne.n	80011ce <__aeabi_ddiv+0x3fa>
 80011cc:	e0d4      	b.n	8001378 <__aeabi_ddiv+0x5a4>
 80011ce:	210f      	movs	r1, #15
 80011d0:	2300      	movs	r3, #0
 80011d2:	4011      	ands	r1, r2
 80011d4:	2904      	cmp	r1, #4
 80011d6:	d100      	bne.n	80011da <__aeabi_ddiv+0x406>
 80011d8:	e0cb      	b.n	8001372 <__aeabi_ddiv+0x59e>
 80011da:	1d11      	adds	r1, r2, #4
 80011dc:	4291      	cmp	r1, r2
 80011de:	4192      	sbcs	r2, r2
 80011e0:	4252      	negs	r2, r2
 80011e2:	189b      	adds	r3, r3, r2
 80011e4:	000a      	movs	r2, r1
 80011e6:	0219      	lsls	r1, r3, #8
 80011e8:	d400      	bmi.n	80011ec <__aeabi_ddiv+0x418>
 80011ea:	e0c2      	b.n	8001372 <__aeabi_ddiv+0x59e>
 80011ec:	2301      	movs	r3, #1
 80011ee:	2400      	movs	r4, #0
 80011f0:	2500      	movs	r5, #0
 80011f2:	e646      	b.n	8000e82 <__aeabi_ddiv+0xae>
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	4641      	mov	r1, r8
 80011f8:	031b      	lsls	r3, r3, #12
 80011fa:	4219      	tst	r1, r3
 80011fc:	d008      	beq.n	8001210 <__aeabi_ddiv+0x43c>
 80011fe:	421c      	tst	r4, r3
 8001200:	d106      	bne.n	8001210 <__aeabi_ddiv+0x43c>
 8001202:	431c      	orrs	r4, r3
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	46ba      	mov	sl, r7
 8001208:	0015      	movs	r5, r2
 800120a:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 800120c:	0b24      	lsrs	r4, r4, #12
 800120e:	e638      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001210:	2480      	movs	r4, #128	; 0x80
 8001212:	4643      	mov	r3, r8
 8001214:	0324      	lsls	r4, r4, #12
 8001216:	431c      	orrs	r4, r3
 8001218:	0324      	lsls	r4, r4, #12
 800121a:	46b2      	mov	sl, r6
 800121c:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 800121e:	0b24      	lsrs	r4, r4, #12
 8001220:	e62f      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001222:	2b00      	cmp	r3, #0
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0x454>
 8001226:	e703      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8001228:	19a6      	adds	r6, r4, r6
 800122a:	1e68      	subs	r0, r5, #1
 800122c:	42a6      	cmp	r6, r4
 800122e:	d200      	bcs.n	8001232 <__aeabi_ddiv+0x45e>
 8001230:	e08d      	b.n	800134e <__aeabi_ddiv+0x57a>
 8001232:	428e      	cmp	r6, r1
 8001234:	d200      	bcs.n	8001238 <__aeabi_ddiv+0x464>
 8001236:	e0a3      	b.n	8001380 <__aeabi_ddiv+0x5ac>
 8001238:	d100      	bne.n	800123c <__aeabi_ddiv+0x468>
 800123a:	e0b3      	b.n	80013a4 <__aeabi_ddiv+0x5d0>
 800123c:	0005      	movs	r5, r0
 800123e:	e6f5      	b.n	800102c <__aeabi_ddiv+0x258>
 8001240:	42aa      	cmp	r2, r5
 8001242:	d900      	bls.n	8001246 <__aeabi_ddiv+0x472>
 8001244:	e639      	b.n	8000eba <__aeabi_ddiv+0xe6>
 8001246:	4643      	mov	r3, r8
 8001248:	07de      	lsls	r6, r3, #31
 800124a:	0858      	lsrs	r0, r3, #1
 800124c:	086b      	lsrs	r3, r5, #1
 800124e:	431e      	orrs	r6, r3
 8001250:	07ed      	lsls	r5, r5, #31
 8001252:	e639      	b.n	8000ec8 <__aeabi_ddiv+0xf4>
 8001254:	4648      	mov	r0, r9
 8001256:	f001 f8ef 	bl	8002438 <__clzsi2>
 800125a:	0001      	movs	r1, r0
 800125c:	0002      	movs	r2, r0
 800125e:	3115      	adds	r1, #21
 8001260:	3220      	adds	r2, #32
 8001262:	291c      	cmp	r1, #28
 8001264:	dc00      	bgt.n	8001268 <__aeabi_ddiv+0x494>
 8001266:	e72c      	b.n	80010c2 <__aeabi_ddiv+0x2ee>
 8001268:	464b      	mov	r3, r9
 800126a:	3808      	subs	r0, #8
 800126c:	4083      	lsls	r3, r0
 800126e:	2500      	movs	r5, #0
 8001270:	4698      	mov	r8, r3
 8001272:	e732      	b.n	80010da <__aeabi_ddiv+0x306>
 8001274:	f001 f8e0 	bl	8002438 <__clzsi2>
 8001278:	0003      	movs	r3, r0
 800127a:	001a      	movs	r2, r3
 800127c:	3215      	adds	r2, #21
 800127e:	3020      	adds	r0, #32
 8001280:	2a1c      	cmp	r2, #28
 8001282:	dc00      	bgt.n	8001286 <__aeabi_ddiv+0x4b2>
 8001284:	e700      	b.n	8001088 <__aeabi_ddiv+0x2b4>
 8001286:	4654      	mov	r4, sl
 8001288:	3b08      	subs	r3, #8
 800128a:	2200      	movs	r2, #0
 800128c:	409c      	lsls	r4, r3
 800128e:	e705      	b.n	800109c <__aeabi_ddiv+0x2c8>
 8001290:	1936      	adds	r6, r6, r4
 8001292:	3b01      	subs	r3, #1
 8001294:	42b4      	cmp	r4, r6
 8001296:	d900      	bls.n	800129a <__aeabi_ddiv+0x4c6>
 8001298:	e6a6      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 800129a:	42b2      	cmp	r2, r6
 800129c:	d800      	bhi.n	80012a0 <__aeabi_ddiv+0x4cc>
 800129e:	e6a3      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 80012a0:	1e83      	subs	r3, r0, #2
 80012a2:	1936      	adds	r6, r6, r4
 80012a4:	e6a0      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 80012a6:	1909      	adds	r1, r1, r4
 80012a8:	3d01      	subs	r5, #1
 80012aa:	428c      	cmp	r4, r1
 80012ac:	d900      	bls.n	80012b0 <__aeabi_ddiv+0x4dc>
 80012ae:	e68d      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012b0:	428a      	cmp	r2, r1
 80012b2:	d800      	bhi.n	80012b6 <__aeabi_ddiv+0x4e2>
 80012b4:	e68a      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012b6:	1e85      	subs	r5, r0, #2
 80012b8:	1909      	adds	r1, r1, r4
 80012ba:	e687      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012bc:	230f      	movs	r3, #15
 80012be:	402b      	ands	r3, r5
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x4f2>
 80012c4:	e6bc      	b.n	8001040 <__aeabi_ddiv+0x26c>
 80012c6:	2305      	movs	r3, #5
 80012c8:	425b      	negs	r3, r3
 80012ca:	42ab      	cmp	r3, r5
 80012cc:	419b      	sbcs	r3, r3
 80012ce:	3504      	adds	r5, #4
 80012d0:	425b      	negs	r3, r3
 80012d2:	08ed      	lsrs	r5, r5, #3
 80012d4:	4498      	add	r8, r3
 80012d6:	e6b4      	b.n	8001042 <__aeabi_ddiv+0x26e>
 80012d8:	42af      	cmp	r7, r5
 80012da:	d900      	bls.n	80012de <__aeabi_ddiv+0x50a>
 80012dc:	e660      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012de:	4282      	cmp	r2, r0
 80012e0:	d804      	bhi.n	80012ec <__aeabi_ddiv+0x518>
 80012e2:	d000      	beq.n	80012e6 <__aeabi_ddiv+0x512>
 80012e4:	e65c      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012e6:	42ae      	cmp	r6, r5
 80012e8:	d800      	bhi.n	80012ec <__aeabi_ddiv+0x518>
 80012ea:	e659      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012ec:	2302      	movs	r3, #2
 80012ee:	425b      	negs	r3, r3
 80012f0:	469c      	mov	ip, r3
 80012f2:	9b00      	ldr	r3, [sp, #0]
 80012f4:	44e0      	add	r8, ip
 80012f6:	469c      	mov	ip, r3
 80012f8:	4465      	add	r5, ip
 80012fa:	429d      	cmp	r5, r3
 80012fc:	419b      	sbcs	r3, r3
 80012fe:	425b      	negs	r3, r3
 8001300:	191b      	adds	r3, r3, r4
 8001302:	18c0      	adds	r0, r0, r3
 8001304:	e64d      	b.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8001306:	428a      	cmp	r2, r1
 8001308:	d800      	bhi.n	800130c <__aeabi_ddiv+0x538>
 800130a:	e60e      	b.n	8000f2a <__aeabi_ddiv+0x156>
 800130c:	1e83      	subs	r3, r0, #2
 800130e:	1909      	adds	r1, r1, r4
 8001310:	e60b      	b.n	8000f2a <__aeabi_ddiv+0x156>
 8001312:	428a      	cmp	r2, r1
 8001314:	d800      	bhi.n	8001318 <__aeabi_ddiv+0x544>
 8001316:	e5f4      	b.n	8000f02 <__aeabi_ddiv+0x12e>
 8001318:	1e83      	subs	r3, r0, #2
 800131a:	4698      	mov	r8, r3
 800131c:	1909      	adds	r1, r1, r4
 800131e:	e5f0      	b.n	8000f02 <__aeabi_ddiv+0x12e>
 8001320:	4925      	ldr	r1, [pc, #148]	; (80013b8 <__aeabi_ddiv+0x5e4>)
 8001322:	0028      	movs	r0, r5
 8001324:	4459      	add	r1, fp
 8001326:	408d      	lsls	r5, r1
 8001328:	4642      	mov	r2, r8
 800132a:	408a      	lsls	r2, r1
 800132c:	1e69      	subs	r1, r5, #1
 800132e:	418d      	sbcs	r5, r1
 8001330:	4641      	mov	r1, r8
 8001332:	40d8      	lsrs	r0, r3
 8001334:	40d9      	lsrs	r1, r3
 8001336:	4302      	orrs	r2, r0
 8001338:	432a      	orrs	r2, r5
 800133a:	000b      	movs	r3, r1
 800133c:	0751      	lsls	r1, r2, #29
 800133e:	d100      	bne.n	8001342 <__aeabi_ddiv+0x56e>
 8001340:	e751      	b.n	80011e6 <__aeabi_ddiv+0x412>
 8001342:	210f      	movs	r1, #15
 8001344:	4011      	ands	r1, r2
 8001346:	2904      	cmp	r1, #4
 8001348:	d000      	beq.n	800134c <__aeabi_ddiv+0x578>
 800134a:	e746      	b.n	80011da <__aeabi_ddiv+0x406>
 800134c:	e74b      	b.n	80011e6 <__aeabi_ddiv+0x412>
 800134e:	0005      	movs	r5, r0
 8001350:	428e      	cmp	r6, r1
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x582>
 8001354:	e66a      	b.n	800102c <__aeabi_ddiv+0x258>
 8001356:	9a00      	ldr	r2, [sp, #0]
 8001358:	4293      	cmp	r3, r2
 800135a:	d000      	beq.n	800135e <__aeabi_ddiv+0x58a>
 800135c:	e666      	b.n	800102c <__aeabi_ddiv+0x258>
 800135e:	e667      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8001360:	4a16      	ldr	r2, [pc, #88]	; (80013bc <__aeabi_ddiv+0x5e8>)
 8001362:	445a      	add	r2, fp
 8001364:	2a00      	cmp	r2, #0
 8001366:	dc00      	bgt.n	800136a <__aeabi_ddiv+0x596>
 8001368:	e710      	b.n	800118c <__aeabi_ddiv+0x3b8>
 800136a:	2301      	movs	r3, #1
 800136c:	2500      	movs	r5, #0
 800136e:	4498      	add	r8, r3
 8001370:	e667      	b.n	8001042 <__aeabi_ddiv+0x26e>
 8001372:	075d      	lsls	r5, r3, #29
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	0b1c      	lsrs	r4, r3, #12
 8001378:	08d2      	lsrs	r2, r2, #3
 800137a:	2300      	movs	r3, #0
 800137c:	4315      	orrs	r5, r2
 800137e:	e580      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001380:	9800      	ldr	r0, [sp, #0]
 8001382:	3d02      	subs	r5, #2
 8001384:	0042      	lsls	r2, r0, #1
 8001386:	4282      	cmp	r2, r0
 8001388:	41bf      	sbcs	r7, r7
 800138a:	427f      	negs	r7, r7
 800138c:	193c      	adds	r4, r7, r4
 800138e:	1936      	adds	r6, r6, r4
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	e7dd      	b.n	8001350 <__aeabi_ddiv+0x57c>
 8001394:	2480      	movs	r4, #128	; 0x80
 8001396:	4643      	mov	r3, r8
 8001398:	0324      	lsls	r4, r4, #12
 800139a:	431c      	orrs	r4, r3
 800139c:	0324      	lsls	r4, r4, #12
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	e56e      	b.n	8000e82 <__aeabi_ddiv+0xae>
 80013a4:	9a00      	ldr	r2, [sp, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3ea      	bcc.n	8001380 <__aeabi_ddiv+0x5ac>
 80013aa:	0005      	movs	r5, r0
 80013ac:	e7d3      	b.n	8001356 <__aeabi_ddiv+0x582>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	000007ff 	.word	0x000007ff
 80013b4:	0000043e 	.word	0x0000043e
 80013b8:	0000041e 	.word	0x0000041e
 80013bc:	000003ff 	.word	0x000003ff

080013c0 <__eqdf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	464e      	mov	r6, r9
 80013c4:	4645      	mov	r5, r8
 80013c6:	46de      	mov	lr, fp
 80013c8:	4657      	mov	r7, sl
 80013ca:	4690      	mov	r8, r2
 80013cc:	b5e0      	push	{r5, r6, r7, lr}
 80013ce:	0017      	movs	r7, r2
 80013d0:	031a      	lsls	r2, r3, #12
 80013d2:	0b12      	lsrs	r2, r2, #12
 80013d4:	0005      	movs	r5, r0
 80013d6:	4684      	mov	ip, r0
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <__eqdf2+0x80>)
 80013da:	030e      	lsls	r6, r1, #12
 80013dc:	004c      	lsls	r4, r1, #1
 80013de:	4691      	mov	r9, r2
 80013e0:	005a      	lsls	r2, r3, #1
 80013e2:	0fdb      	lsrs	r3, r3, #31
 80013e4:	469b      	mov	fp, r3
 80013e6:	0b36      	lsrs	r6, r6, #12
 80013e8:	0d64      	lsrs	r4, r4, #21
 80013ea:	0fc9      	lsrs	r1, r1, #31
 80013ec:	0d52      	lsrs	r2, r2, #21
 80013ee:	4284      	cmp	r4, r0
 80013f0:	d019      	beq.n	8001426 <__eqdf2+0x66>
 80013f2:	4282      	cmp	r2, r0
 80013f4:	d010      	beq.n	8001418 <__eqdf2+0x58>
 80013f6:	2001      	movs	r0, #1
 80013f8:	4294      	cmp	r4, r2
 80013fa:	d10e      	bne.n	800141a <__eqdf2+0x5a>
 80013fc:	454e      	cmp	r6, r9
 80013fe:	d10c      	bne.n	800141a <__eqdf2+0x5a>
 8001400:	2001      	movs	r0, #1
 8001402:	45c4      	cmp	ip, r8
 8001404:	d109      	bne.n	800141a <__eqdf2+0x5a>
 8001406:	4559      	cmp	r1, fp
 8001408:	d017      	beq.n	800143a <__eqdf2+0x7a>
 800140a:	2c00      	cmp	r4, #0
 800140c:	d105      	bne.n	800141a <__eqdf2+0x5a>
 800140e:	0030      	movs	r0, r6
 8001410:	4328      	orrs	r0, r5
 8001412:	1e43      	subs	r3, r0, #1
 8001414:	4198      	sbcs	r0, r3
 8001416:	e000      	b.n	800141a <__eqdf2+0x5a>
 8001418:	2001      	movs	r0, #1
 800141a:	bcf0      	pop	{r4, r5, r6, r7}
 800141c:	46bb      	mov	fp, r7
 800141e:	46b2      	mov	sl, r6
 8001420:	46a9      	mov	r9, r5
 8001422:	46a0      	mov	r8, r4
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001426:	0033      	movs	r3, r6
 8001428:	2001      	movs	r0, #1
 800142a:	432b      	orrs	r3, r5
 800142c:	d1f5      	bne.n	800141a <__eqdf2+0x5a>
 800142e:	42a2      	cmp	r2, r4
 8001430:	d1f3      	bne.n	800141a <__eqdf2+0x5a>
 8001432:	464b      	mov	r3, r9
 8001434:	433b      	orrs	r3, r7
 8001436:	d1f0      	bne.n	800141a <__eqdf2+0x5a>
 8001438:	e7e2      	b.n	8001400 <__eqdf2+0x40>
 800143a:	2000      	movs	r0, #0
 800143c:	e7ed      	b.n	800141a <__eqdf2+0x5a>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	000007ff 	.word	0x000007ff

08001444 <__gedf2>:
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	4647      	mov	r7, r8
 8001448:	46ce      	mov	lr, r9
 800144a:	0004      	movs	r4, r0
 800144c:	0018      	movs	r0, r3
 800144e:	0016      	movs	r6, r2
 8001450:	031b      	lsls	r3, r3, #12
 8001452:	0b1b      	lsrs	r3, r3, #12
 8001454:	4d2d      	ldr	r5, [pc, #180]	; (800150c <__gedf2+0xc8>)
 8001456:	004a      	lsls	r2, r1, #1
 8001458:	4699      	mov	r9, r3
 800145a:	b580      	push	{r7, lr}
 800145c:	0043      	lsls	r3, r0, #1
 800145e:	030f      	lsls	r7, r1, #12
 8001460:	46a4      	mov	ip, r4
 8001462:	46b0      	mov	r8, r6
 8001464:	0b3f      	lsrs	r7, r7, #12
 8001466:	0d52      	lsrs	r2, r2, #21
 8001468:	0fc9      	lsrs	r1, r1, #31
 800146a:	0d5b      	lsrs	r3, r3, #21
 800146c:	0fc0      	lsrs	r0, r0, #31
 800146e:	42aa      	cmp	r2, r5
 8001470:	d021      	beq.n	80014b6 <__gedf2+0x72>
 8001472:	42ab      	cmp	r3, r5
 8001474:	d013      	beq.n	800149e <__gedf2+0x5a>
 8001476:	2a00      	cmp	r2, #0
 8001478:	d122      	bne.n	80014c0 <__gedf2+0x7c>
 800147a:	433c      	orrs	r4, r7
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <__gedf2+0x42>
 8001480:	464d      	mov	r5, r9
 8001482:	432e      	orrs	r6, r5
 8001484:	d022      	beq.n	80014cc <__gedf2+0x88>
 8001486:	2c00      	cmp	r4, #0
 8001488:	d010      	beq.n	80014ac <__gedf2+0x68>
 800148a:	4281      	cmp	r1, r0
 800148c:	d022      	beq.n	80014d4 <__gedf2+0x90>
 800148e:	2002      	movs	r0, #2
 8001490:	3901      	subs	r1, #1
 8001492:	4008      	ands	r0, r1
 8001494:	3801      	subs	r0, #1
 8001496:	bcc0      	pop	{r6, r7}
 8001498:	46b9      	mov	r9, r7
 800149a:	46b0      	mov	r8, r6
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149e:	464d      	mov	r5, r9
 80014a0:	432e      	orrs	r6, r5
 80014a2:	d129      	bne.n	80014f8 <__gedf2+0xb4>
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d1f0      	bne.n	800148a <__gedf2+0x46>
 80014a8:	433c      	orrs	r4, r7
 80014aa:	d1ee      	bne.n	800148a <__gedf2+0x46>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f2      	bne.n	8001496 <__gedf2+0x52>
 80014b0:	2001      	movs	r0, #1
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7ef      	b.n	8001496 <__gedf2+0x52>
 80014b6:	003d      	movs	r5, r7
 80014b8:	4325      	orrs	r5, r4
 80014ba:	d11d      	bne.n	80014f8 <__gedf2+0xb4>
 80014bc:	4293      	cmp	r3, r2
 80014be:	d0ee      	beq.n	800149e <__gedf2+0x5a>
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e2      	bne.n	800148a <__gedf2+0x46>
 80014c4:	464c      	mov	r4, r9
 80014c6:	4326      	orrs	r6, r4
 80014c8:	d1df      	bne.n	800148a <__gedf2+0x46>
 80014ca:	e7e0      	b.n	800148e <__gedf2+0x4a>
 80014cc:	2000      	movs	r0, #0
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d0e1      	beq.n	8001496 <__gedf2+0x52>
 80014d2:	e7dc      	b.n	800148e <__gedf2+0x4a>
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dc0a      	bgt.n	80014ee <__gedf2+0xaa>
 80014d8:	dbe8      	blt.n	80014ac <__gedf2+0x68>
 80014da:	454f      	cmp	r7, r9
 80014dc:	d8d7      	bhi.n	800148e <__gedf2+0x4a>
 80014de:	d00e      	beq.n	80014fe <__gedf2+0xba>
 80014e0:	2000      	movs	r0, #0
 80014e2:	454f      	cmp	r7, r9
 80014e4:	d2d7      	bcs.n	8001496 <__gedf2+0x52>
 80014e6:	2900      	cmp	r1, #0
 80014e8:	d0e2      	beq.n	80014b0 <__gedf2+0x6c>
 80014ea:	0008      	movs	r0, r1
 80014ec:	e7d3      	b.n	8001496 <__gedf2+0x52>
 80014ee:	4243      	negs	r3, r0
 80014f0:	4158      	adcs	r0, r3
 80014f2:	0040      	lsls	r0, r0, #1
 80014f4:	3801      	subs	r0, #1
 80014f6:	e7ce      	b.n	8001496 <__gedf2+0x52>
 80014f8:	2002      	movs	r0, #2
 80014fa:	4240      	negs	r0, r0
 80014fc:	e7cb      	b.n	8001496 <__gedf2+0x52>
 80014fe:	45c4      	cmp	ip, r8
 8001500:	d8c5      	bhi.n	800148e <__gedf2+0x4a>
 8001502:	2000      	movs	r0, #0
 8001504:	45c4      	cmp	ip, r8
 8001506:	d2c6      	bcs.n	8001496 <__gedf2+0x52>
 8001508:	e7ed      	b.n	80014e6 <__gedf2+0xa2>
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	000007ff 	.word	0x000007ff

08001510 <__ledf2>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	4647      	mov	r7, r8
 8001514:	46ce      	mov	lr, r9
 8001516:	0004      	movs	r4, r0
 8001518:	0018      	movs	r0, r3
 800151a:	0016      	movs	r6, r2
 800151c:	031b      	lsls	r3, r3, #12
 800151e:	0b1b      	lsrs	r3, r3, #12
 8001520:	4d2c      	ldr	r5, [pc, #176]	; (80015d4 <__ledf2+0xc4>)
 8001522:	004a      	lsls	r2, r1, #1
 8001524:	4699      	mov	r9, r3
 8001526:	b580      	push	{r7, lr}
 8001528:	0043      	lsls	r3, r0, #1
 800152a:	030f      	lsls	r7, r1, #12
 800152c:	46a4      	mov	ip, r4
 800152e:	46b0      	mov	r8, r6
 8001530:	0b3f      	lsrs	r7, r7, #12
 8001532:	0d52      	lsrs	r2, r2, #21
 8001534:	0fc9      	lsrs	r1, r1, #31
 8001536:	0d5b      	lsrs	r3, r3, #21
 8001538:	0fc0      	lsrs	r0, r0, #31
 800153a:	42aa      	cmp	r2, r5
 800153c:	d00d      	beq.n	800155a <__ledf2+0x4a>
 800153e:	42ab      	cmp	r3, r5
 8001540:	d010      	beq.n	8001564 <__ledf2+0x54>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d127      	bne.n	8001596 <__ledf2+0x86>
 8001546:	433c      	orrs	r4, r7
 8001548:	2b00      	cmp	r3, #0
 800154a:	d111      	bne.n	8001570 <__ledf2+0x60>
 800154c:	464d      	mov	r5, r9
 800154e:	432e      	orrs	r6, r5
 8001550:	d10e      	bne.n	8001570 <__ledf2+0x60>
 8001552:	2000      	movs	r0, #0
 8001554:	2c00      	cmp	r4, #0
 8001556:	d015      	beq.n	8001584 <__ledf2+0x74>
 8001558:	e00e      	b.n	8001578 <__ledf2+0x68>
 800155a:	003d      	movs	r5, r7
 800155c:	4325      	orrs	r5, r4
 800155e:	d110      	bne.n	8001582 <__ledf2+0x72>
 8001560:	4293      	cmp	r3, r2
 8001562:	d118      	bne.n	8001596 <__ledf2+0x86>
 8001564:	464d      	mov	r5, r9
 8001566:	432e      	orrs	r6, r5
 8001568:	d10b      	bne.n	8001582 <__ledf2+0x72>
 800156a:	2a00      	cmp	r2, #0
 800156c:	d102      	bne.n	8001574 <__ledf2+0x64>
 800156e:	433c      	orrs	r4, r7
 8001570:	2c00      	cmp	r4, #0
 8001572:	d00b      	beq.n	800158c <__ledf2+0x7c>
 8001574:	4281      	cmp	r1, r0
 8001576:	d014      	beq.n	80015a2 <__ledf2+0x92>
 8001578:	2002      	movs	r0, #2
 800157a:	3901      	subs	r1, #1
 800157c:	4008      	ands	r0, r1
 800157e:	3801      	subs	r0, #1
 8001580:	e000      	b.n	8001584 <__ledf2+0x74>
 8001582:	2002      	movs	r0, #2
 8001584:	bcc0      	pop	{r6, r7}
 8001586:	46b9      	mov	r9, r7
 8001588:	46b0      	mov	r8, r6
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	2800      	cmp	r0, #0
 800158e:	d1f9      	bne.n	8001584 <__ledf2+0x74>
 8001590:	2001      	movs	r0, #1
 8001592:	4240      	negs	r0, r0
 8001594:	e7f6      	b.n	8001584 <__ledf2+0x74>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ec      	bne.n	8001574 <__ledf2+0x64>
 800159a:	464c      	mov	r4, r9
 800159c:	4326      	orrs	r6, r4
 800159e:	d1e9      	bne.n	8001574 <__ledf2+0x64>
 80015a0:	e7ea      	b.n	8001578 <__ledf2+0x68>
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dd04      	ble.n	80015b0 <__ledf2+0xa0>
 80015a6:	4243      	negs	r3, r0
 80015a8:	4158      	adcs	r0, r3
 80015aa:	0040      	lsls	r0, r0, #1
 80015ac:	3801      	subs	r0, #1
 80015ae:	e7e9      	b.n	8001584 <__ledf2+0x74>
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbeb      	blt.n	800158c <__ledf2+0x7c>
 80015b4:	454f      	cmp	r7, r9
 80015b6:	d8df      	bhi.n	8001578 <__ledf2+0x68>
 80015b8:	d006      	beq.n	80015c8 <__ledf2+0xb8>
 80015ba:	2000      	movs	r0, #0
 80015bc:	454f      	cmp	r7, r9
 80015be:	d2e1      	bcs.n	8001584 <__ledf2+0x74>
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d0e5      	beq.n	8001590 <__ledf2+0x80>
 80015c4:	0008      	movs	r0, r1
 80015c6:	e7dd      	b.n	8001584 <__ledf2+0x74>
 80015c8:	45c4      	cmp	ip, r8
 80015ca:	d8d5      	bhi.n	8001578 <__ledf2+0x68>
 80015cc:	2000      	movs	r0, #0
 80015ce:	45c4      	cmp	ip, r8
 80015d0:	d2d8      	bcs.n	8001584 <__ledf2+0x74>
 80015d2:	e7f5      	b.n	80015c0 <__ledf2+0xb0>
 80015d4:	000007ff 	.word	0x000007ff

080015d8 <__aeabi_dmul>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	4657      	mov	r7, sl
 80015dc:	464e      	mov	r6, r9
 80015de:	4645      	mov	r5, r8
 80015e0:	46de      	mov	lr, fp
 80015e2:	b5e0      	push	{r5, r6, r7, lr}
 80015e4:	4698      	mov	r8, r3
 80015e6:	030c      	lsls	r4, r1, #12
 80015e8:	004b      	lsls	r3, r1, #1
 80015ea:	0006      	movs	r6, r0
 80015ec:	4692      	mov	sl, r2
 80015ee:	b087      	sub	sp, #28
 80015f0:	0b24      	lsrs	r4, r4, #12
 80015f2:	0d5b      	lsrs	r3, r3, #21
 80015f4:	0fcf      	lsrs	r7, r1, #31
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d100      	bne.n	80015fc <__aeabi_dmul+0x24>
 80015fa:	e15c      	b.n	80018b6 <__aeabi_dmul+0x2de>
 80015fc:	4ad9      	ldr	r2, [pc, #868]	; (8001964 <__aeabi_dmul+0x38c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d100      	bne.n	8001604 <__aeabi_dmul+0x2c>
 8001602:	e175      	b.n	80018f0 <__aeabi_dmul+0x318>
 8001604:	0f42      	lsrs	r2, r0, #29
 8001606:	00e4      	lsls	r4, r4, #3
 8001608:	4314      	orrs	r4, r2
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	0412      	lsls	r2, r2, #16
 800160e:	4314      	orrs	r4, r2
 8001610:	4ad5      	ldr	r2, [pc, #852]	; (8001968 <__aeabi_dmul+0x390>)
 8001612:	00c5      	lsls	r5, r0, #3
 8001614:	4694      	mov	ip, r2
 8001616:	4463      	add	r3, ip
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	4699      	mov	r9, r3
 800161e:	469b      	mov	fp, r3
 8001620:	4643      	mov	r3, r8
 8001622:	4642      	mov	r2, r8
 8001624:	031e      	lsls	r6, r3, #12
 8001626:	0fd2      	lsrs	r2, r2, #31
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4650      	mov	r0, sl
 800162c:	4690      	mov	r8, r2
 800162e:	0b36      	lsrs	r6, r6, #12
 8001630:	0d5b      	lsrs	r3, r3, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x5e>
 8001634:	e120      	b.n	8001878 <__aeabi_dmul+0x2a0>
 8001636:	4acb      	ldr	r2, [pc, #812]	; (8001964 <__aeabi_dmul+0x38c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x66>
 800163c:	e162      	b.n	8001904 <__aeabi_dmul+0x32c>
 800163e:	49ca      	ldr	r1, [pc, #808]	; (8001968 <__aeabi_dmul+0x390>)
 8001640:	0f42      	lsrs	r2, r0, #29
 8001642:	468c      	mov	ip, r1
 8001644:	9900      	ldr	r1, [sp, #0]
 8001646:	4463      	add	r3, ip
 8001648:	00f6      	lsls	r6, r6, #3
 800164a:	468c      	mov	ip, r1
 800164c:	4316      	orrs	r6, r2
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	449c      	add	ip, r3
 8001652:	0412      	lsls	r2, r2, #16
 8001654:	4663      	mov	r3, ip
 8001656:	4316      	orrs	r6, r2
 8001658:	00c2      	lsls	r2, r0, #3
 800165a:	2000      	movs	r0, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	9900      	ldr	r1, [sp, #0]
 8001660:	4643      	mov	r3, r8
 8001662:	3101      	adds	r1, #1
 8001664:	468c      	mov	ip, r1
 8001666:	4649      	mov	r1, r9
 8001668:	407b      	eors	r3, r7
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	290f      	cmp	r1, #15
 800166e:	d826      	bhi.n	80016be <__aeabi_dmul+0xe6>
 8001670:	4bbe      	ldr	r3, [pc, #760]	; (800196c <__aeabi_dmul+0x394>)
 8001672:	0089      	lsls	r1, r1, #2
 8001674:	5859      	ldr	r1, [r3, r1]
 8001676:	468f      	mov	pc, r1
 8001678:	4643      	mov	r3, r8
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	0034      	movs	r4, r6
 800167e:	0015      	movs	r5, r2
 8001680:	4683      	mov	fp, r0
 8001682:	465b      	mov	r3, fp
 8001684:	2b02      	cmp	r3, #2
 8001686:	d016      	beq.n	80016b6 <__aeabi_dmul+0xde>
 8001688:	2b03      	cmp	r3, #3
 800168a:	d100      	bne.n	800168e <__aeabi_dmul+0xb6>
 800168c:	e203      	b.n	8001a96 <__aeabi_dmul+0x4be>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d000      	beq.n	8001694 <__aeabi_dmul+0xbc>
 8001692:	e0cd      	b.n	8001830 <__aeabi_dmul+0x258>
 8001694:	2200      	movs	r2, #0
 8001696:	2400      	movs	r4, #0
 8001698:	2500      	movs	r5, #0
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	0512      	lsls	r2, r2, #20
 800169e:	4322      	orrs	r2, r4
 80016a0:	07db      	lsls	r3, r3, #31
 80016a2:	431a      	orrs	r2, r3
 80016a4:	0028      	movs	r0, r5
 80016a6:	0011      	movs	r1, r2
 80016a8:	b007      	add	sp, #28
 80016aa:	bcf0      	pop	{r4, r5, r6, r7}
 80016ac:	46bb      	mov	fp, r7
 80016ae:	46b2      	mov	sl, r6
 80016b0:	46a9      	mov	r9, r5
 80016b2:	46a0      	mov	r8, r4
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b6:	2400      	movs	r4, #0
 80016b8:	2500      	movs	r5, #0
 80016ba:	4aaa      	ldr	r2, [pc, #680]	; (8001964 <__aeabi_dmul+0x38c>)
 80016bc:	e7ed      	b.n	800169a <__aeabi_dmul+0xc2>
 80016be:	0c28      	lsrs	r0, r5, #16
 80016c0:	042d      	lsls	r5, r5, #16
 80016c2:	0c2d      	lsrs	r5, r5, #16
 80016c4:	002b      	movs	r3, r5
 80016c6:	0c11      	lsrs	r1, r2, #16
 80016c8:	0412      	lsls	r2, r2, #16
 80016ca:	0c12      	lsrs	r2, r2, #16
 80016cc:	4353      	muls	r3, r2
 80016ce:	4698      	mov	r8, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	002f      	movs	r7, r5
 80016d4:	4343      	muls	r3, r0
 80016d6:	4699      	mov	r9, r3
 80016d8:	434f      	muls	r7, r1
 80016da:	444f      	add	r7, r9
 80016dc:	46bb      	mov	fp, r7
 80016de:	4647      	mov	r7, r8
 80016e0:	000b      	movs	r3, r1
 80016e2:	0c3f      	lsrs	r7, r7, #16
 80016e4:	46ba      	mov	sl, r7
 80016e6:	4343      	muls	r3, r0
 80016e8:	44da      	add	sl, fp
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	45d1      	cmp	r9, sl
 80016ee:	d904      	bls.n	80016fa <__aeabi_dmul+0x122>
 80016f0:	2780      	movs	r7, #128	; 0x80
 80016f2:	027f      	lsls	r7, r7, #9
 80016f4:	46b9      	mov	r9, r7
 80016f6:	444b      	add	r3, r9
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	4653      	mov	r3, sl
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	469b      	mov	fp, r3
 8001700:	4653      	mov	r3, sl
 8001702:	041f      	lsls	r7, r3, #16
 8001704:	4643      	mov	r3, r8
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	0c1b      	lsrs	r3, r3, #16
 800170a:	4698      	mov	r8, r3
 800170c:	003b      	movs	r3, r7
 800170e:	4443      	add	r3, r8
 8001710:	9304      	str	r3, [sp, #16]
 8001712:	0c33      	lsrs	r3, r6, #16
 8001714:	0436      	lsls	r6, r6, #16
 8001716:	0c36      	lsrs	r6, r6, #16
 8001718:	4698      	mov	r8, r3
 800171a:	0033      	movs	r3, r6
 800171c:	4343      	muls	r3, r0
 800171e:	4699      	mov	r9, r3
 8001720:	4643      	mov	r3, r8
 8001722:	4343      	muls	r3, r0
 8001724:	002f      	movs	r7, r5
 8001726:	469a      	mov	sl, r3
 8001728:	4643      	mov	r3, r8
 800172a:	4377      	muls	r7, r6
 800172c:	435d      	muls	r5, r3
 800172e:	0c38      	lsrs	r0, r7, #16
 8001730:	444d      	add	r5, r9
 8001732:	1945      	adds	r5, r0, r5
 8001734:	45a9      	cmp	r9, r5
 8001736:	d903      	bls.n	8001740 <__aeabi_dmul+0x168>
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	4699      	mov	r9, r3
 800173e:	44ca      	add	sl, r9
 8001740:	043f      	lsls	r7, r7, #16
 8001742:	0c28      	lsrs	r0, r5, #16
 8001744:	0c3f      	lsrs	r7, r7, #16
 8001746:	042d      	lsls	r5, r5, #16
 8001748:	19ed      	adds	r5, r5, r7
 800174a:	0c27      	lsrs	r7, r4, #16
 800174c:	0424      	lsls	r4, r4, #16
 800174e:	0c24      	lsrs	r4, r4, #16
 8001750:	0003      	movs	r3, r0
 8001752:	0020      	movs	r0, r4
 8001754:	4350      	muls	r0, r2
 8001756:	437a      	muls	r2, r7
 8001758:	4691      	mov	r9, r2
 800175a:	003a      	movs	r2, r7
 800175c:	4453      	add	r3, sl
 800175e:	9305      	str	r3, [sp, #20]
 8001760:	0c03      	lsrs	r3, r0, #16
 8001762:	469a      	mov	sl, r3
 8001764:	434a      	muls	r2, r1
 8001766:	4361      	muls	r1, r4
 8001768:	4449      	add	r1, r9
 800176a:	4451      	add	r1, sl
 800176c:	44ab      	add	fp, r5
 800176e:	4589      	cmp	r9, r1
 8001770:	d903      	bls.n	800177a <__aeabi_dmul+0x1a2>
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	025b      	lsls	r3, r3, #9
 8001776:	4699      	mov	r9, r3
 8001778:	444a      	add	r2, r9
 800177a:	0400      	lsls	r0, r0, #16
 800177c:	0c0b      	lsrs	r3, r1, #16
 800177e:	0c00      	lsrs	r0, r0, #16
 8001780:	0409      	lsls	r1, r1, #16
 8001782:	1809      	adds	r1, r1, r0
 8001784:	0020      	movs	r0, r4
 8001786:	4699      	mov	r9, r3
 8001788:	4643      	mov	r3, r8
 800178a:	4370      	muls	r0, r6
 800178c:	435c      	muls	r4, r3
 800178e:	437e      	muls	r6, r7
 8001790:	435f      	muls	r7, r3
 8001792:	0c03      	lsrs	r3, r0, #16
 8001794:	4698      	mov	r8, r3
 8001796:	19a4      	adds	r4, r4, r6
 8001798:	4444      	add	r4, r8
 800179a:	444a      	add	r2, r9
 800179c:	9703      	str	r7, [sp, #12]
 800179e:	42a6      	cmp	r6, r4
 80017a0:	d904      	bls.n	80017ac <__aeabi_dmul+0x1d4>
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	025b      	lsls	r3, r3, #9
 80017a6:	4698      	mov	r8, r3
 80017a8:	4447      	add	r7, r8
 80017aa:	9703      	str	r7, [sp, #12]
 80017ac:	0423      	lsls	r3, r4, #16
 80017ae:	9e02      	ldr	r6, [sp, #8]
 80017b0:	469a      	mov	sl, r3
 80017b2:	9b05      	ldr	r3, [sp, #20]
 80017b4:	445e      	add	r6, fp
 80017b6:	4698      	mov	r8, r3
 80017b8:	42ae      	cmp	r6, r5
 80017ba:	41ad      	sbcs	r5, r5
 80017bc:	1876      	adds	r6, r6, r1
 80017be:	428e      	cmp	r6, r1
 80017c0:	4189      	sbcs	r1, r1
 80017c2:	0400      	lsls	r0, r0, #16
 80017c4:	0c00      	lsrs	r0, r0, #16
 80017c6:	4450      	add	r0, sl
 80017c8:	4440      	add	r0, r8
 80017ca:	426d      	negs	r5, r5
 80017cc:	1947      	adds	r7, r0, r5
 80017ce:	46b8      	mov	r8, r7
 80017d0:	4693      	mov	fp, r2
 80017d2:	4249      	negs	r1, r1
 80017d4:	4689      	mov	r9, r1
 80017d6:	44c3      	add	fp, r8
 80017d8:	44d9      	add	r9, fp
 80017da:	4298      	cmp	r0, r3
 80017dc:	4180      	sbcs	r0, r0
 80017de:	45a8      	cmp	r8, r5
 80017e0:	41ad      	sbcs	r5, r5
 80017e2:	4593      	cmp	fp, r2
 80017e4:	4192      	sbcs	r2, r2
 80017e6:	4589      	cmp	r9, r1
 80017e8:	4189      	sbcs	r1, r1
 80017ea:	426d      	negs	r5, r5
 80017ec:	4240      	negs	r0, r0
 80017ee:	4328      	orrs	r0, r5
 80017f0:	0c24      	lsrs	r4, r4, #16
 80017f2:	4252      	negs	r2, r2
 80017f4:	4249      	negs	r1, r1
 80017f6:	430a      	orrs	r2, r1
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	1900      	adds	r0, r0, r4
 80017fc:	1880      	adds	r0, r0, r2
 80017fe:	18c7      	adds	r7, r0, r3
 8001800:	464b      	mov	r3, r9
 8001802:	0ddc      	lsrs	r4, r3, #23
 8001804:	9b04      	ldr	r3, [sp, #16]
 8001806:	0275      	lsls	r5, r6, #9
 8001808:	431d      	orrs	r5, r3
 800180a:	1e6a      	subs	r2, r5, #1
 800180c:	4195      	sbcs	r5, r2
 800180e:	464b      	mov	r3, r9
 8001810:	0df6      	lsrs	r6, r6, #23
 8001812:	027f      	lsls	r7, r7, #9
 8001814:	4335      	orrs	r5, r6
 8001816:	025a      	lsls	r2, r3, #9
 8001818:	433c      	orrs	r4, r7
 800181a:	4315      	orrs	r5, r2
 800181c:	01fb      	lsls	r3, r7, #7
 800181e:	d400      	bmi.n	8001822 <__aeabi_dmul+0x24a>
 8001820:	e11c      	b.n	8001a5c <__aeabi_dmul+0x484>
 8001822:	2101      	movs	r1, #1
 8001824:	086a      	lsrs	r2, r5, #1
 8001826:	400d      	ands	r5, r1
 8001828:	4315      	orrs	r5, r2
 800182a:	07e2      	lsls	r2, r4, #31
 800182c:	4315      	orrs	r5, r2
 800182e:	0864      	lsrs	r4, r4, #1
 8001830:	494f      	ldr	r1, [pc, #316]	; (8001970 <__aeabi_dmul+0x398>)
 8001832:	4461      	add	r1, ip
 8001834:	2900      	cmp	r1, #0
 8001836:	dc00      	bgt.n	800183a <__aeabi_dmul+0x262>
 8001838:	e0b0      	b.n	800199c <__aeabi_dmul+0x3c4>
 800183a:	076b      	lsls	r3, r5, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_dmul+0x27a>
 800183e:	220f      	movs	r2, #15
 8001840:	402a      	ands	r2, r5
 8001842:	2a04      	cmp	r2, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_dmul+0x27a>
 8001846:	1d2a      	adds	r2, r5, #4
 8001848:	42aa      	cmp	r2, r5
 800184a:	41ad      	sbcs	r5, r5
 800184c:	426d      	negs	r5, r5
 800184e:	1964      	adds	r4, r4, r5
 8001850:	0015      	movs	r5, r2
 8001852:	01e3      	lsls	r3, r4, #7
 8001854:	d504      	bpl.n	8001860 <__aeabi_dmul+0x288>
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	4a46      	ldr	r2, [pc, #280]	; (8001974 <__aeabi_dmul+0x39c>)
 800185a:	00c9      	lsls	r1, r1, #3
 800185c:	4014      	ands	r4, r2
 800185e:	4461      	add	r1, ip
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <__aeabi_dmul+0x3a0>)
 8001862:	4291      	cmp	r1, r2
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x290>
 8001866:	e726      	b.n	80016b6 <__aeabi_dmul+0xde>
 8001868:	0762      	lsls	r2, r4, #29
 800186a:	08ed      	lsrs	r5, r5, #3
 800186c:	0264      	lsls	r4, r4, #9
 800186e:	0549      	lsls	r1, r1, #21
 8001870:	4315      	orrs	r5, r2
 8001872:	0b24      	lsrs	r4, r4, #12
 8001874:	0d4a      	lsrs	r2, r1, #21
 8001876:	e710      	b.n	800169a <__aeabi_dmul+0xc2>
 8001878:	4652      	mov	r2, sl
 800187a:	4332      	orrs	r2, r6
 800187c:	d100      	bne.n	8001880 <__aeabi_dmul+0x2a8>
 800187e:	e07f      	b.n	8001980 <__aeabi_dmul+0x3a8>
 8001880:	2e00      	cmp	r6, #0
 8001882:	d100      	bne.n	8001886 <__aeabi_dmul+0x2ae>
 8001884:	e0dc      	b.n	8001a40 <__aeabi_dmul+0x468>
 8001886:	0030      	movs	r0, r6
 8001888:	f000 fdd6 	bl	8002438 <__clzsi2>
 800188c:	0002      	movs	r2, r0
 800188e:	3a0b      	subs	r2, #11
 8001890:	231d      	movs	r3, #29
 8001892:	0001      	movs	r1, r0
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	4652      	mov	r2, sl
 8001898:	3908      	subs	r1, #8
 800189a:	40da      	lsrs	r2, r3
 800189c:	408e      	lsls	r6, r1
 800189e:	4316      	orrs	r6, r2
 80018a0:	4652      	mov	r2, sl
 80018a2:	408a      	lsls	r2, r1
 80018a4:	9b00      	ldr	r3, [sp, #0]
 80018a6:	4935      	ldr	r1, [pc, #212]	; (800197c <__aeabi_dmul+0x3a4>)
 80018a8:	1a18      	subs	r0, r3, r0
 80018aa:	0003      	movs	r3, r0
 80018ac:	468c      	mov	ip, r1
 80018ae:	4463      	add	r3, ip
 80018b0:	2000      	movs	r0, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	e6d3      	b.n	800165e <__aeabi_dmul+0x86>
 80018b6:	0025      	movs	r5, r4
 80018b8:	4305      	orrs	r5, r0
 80018ba:	d04a      	beq.n	8001952 <__aeabi_dmul+0x37a>
 80018bc:	2c00      	cmp	r4, #0
 80018be:	d100      	bne.n	80018c2 <__aeabi_dmul+0x2ea>
 80018c0:	e0b0      	b.n	8001a24 <__aeabi_dmul+0x44c>
 80018c2:	0020      	movs	r0, r4
 80018c4:	f000 fdb8 	bl	8002438 <__clzsi2>
 80018c8:	0001      	movs	r1, r0
 80018ca:	0002      	movs	r2, r0
 80018cc:	390b      	subs	r1, #11
 80018ce:	231d      	movs	r3, #29
 80018d0:	0010      	movs	r0, r2
 80018d2:	1a5b      	subs	r3, r3, r1
 80018d4:	0031      	movs	r1, r6
 80018d6:	0035      	movs	r5, r6
 80018d8:	3808      	subs	r0, #8
 80018da:	4084      	lsls	r4, r0
 80018dc:	40d9      	lsrs	r1, r3
 80018de:	4085      	lsls	r5, r0
 80018e0:	430c      	orrs	r4, r1
 80018e2:	4826      	ldr	r0, [pc, #152]	; (800197c <__aeabi_dmul+0x3a4>)
 80018e4:	1a83      	subs	r3, r0, r2
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	4699      	mov	r9, r3
 80018ec:	469b      	mov	fp, r3
 80018ee:	e697      	b.n	8001620 <__aeabi_dmul+0x48>
 80018f0:	0005      	movs	r5, r0
 80018f2:	4325      	orrs	r5, r4
 80018f4:	d126      	bne.n	8001944 <__aeabi_dmul+0x36c>
 80018f6:	2208      	movs	r2, #8
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2302      	movs	r3, #2
 80018fc:	2400      	movs	r4, #0
 80018fe:	4691      	mov	r9, r2
 8001900:	469b      	mov	fp, r3
 8001902:	e68d      	b.n	8001620 <__aeabi_dmul+0x48>
 8001904:	4652      	mov	r2, sl
 8001906:	9b00      	ldr	r3, [sp, #0]
 8001908:	4332      	orrs	r2, r6
 800190a:	d110      	bne.n	800192e <__aeabi_dmul+0x356>
 800190c:	4915      	ldr	r1, [pc, #84]	; (8001964 <__aeabi_dmul+0x38c>)
 800190e:	2600      	movs	r6, #0
 8001910:	468c      	mov	ip, r1
 8001912:	4463      	add	r3, ip
 8001914:	4649      	mov	r1, r9
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2302      	movs	r3, #2
 800191a:	4319      	orrs	r1, r3
 800191c:	4689      	mov	r9, r1
 800191e:	2002      	movs	r0, #2
 8001920:	e69d      	b.n	800165e <__aeabi_dmul+0x86>
 8001922:	465b      	mov	r3, fp
 8001924:	9701      	str	r7, [sp, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d000      	beq.n	800192c <__aeabi_dmul+0x354>
 800192a:	e6ad      	b.n	8001688 <__aeabi_dmul+0xb0>
 800192c:	e6c3      	b.n	80016b6 <__aeabi_dmul+0xde>
 800192e:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <__aeabi_dmul+0x38c>)
 8001930:	2003      	movs	r0, #3
 8001932:	4694      	mov	ip, r2
 8001934:	4463      	add	r3, ip
 8001936:	464a      	mov	r2, r9
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2303      	movs	r3, #3
 800193c:	431a      	orrs	r2, r3
 800193e:	4691      	mov	r9, r2
 8001940:	4652      	mov	r2, sl
 8001942:	e68c      	b.n	800165e <__aeabi_dmul+0x86>
 8001944:	220c      	movs	r2, #12
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2303      	movs	r3, #3
 800194a:	0005      	movs	r5, r0
 800194c:	4691      	mov	r9, r2
 800194e:	469b      	mov	fp, r3
 8001950:	e666      	b.n	8001620 <__aeabi_dmul+0x48>
 8001952:	2304      	movs	r3, #4
 8001954:	4699      	mov	r9, r3
 8001956:	2300      	movs	r3, #0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	2400      	movs	r4, #0
 800195e:	469b      	mov	fp, r3
 8001960:	e65e      	b.n	8001620 <__aeabi_dmul+0x48>
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	000007ff 	.word	0x000007ff
 8001968:	fffffc01 	.word	0xfffffc01
 800196c:	0800c00c 	.word	0x0800c00c
 8001970:	000003ff 	.word	0x000003ff
 8001974:	feffffff 	.word	0xfeffffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	fffffc0d 	.word	0xfffffc0d
 8001980:	4649      	mov	r1, r9
 8001982:	2301      	movs	r3, #1
 8001984:	4319      	orrs	r1, r3
 8001986:	4689      	mov	r9, r1
 8001988:	2600      	movs	r6, #0
 800198a:	2001      	movs	r0, #1
 800198c:	e667      	b.n	800165e <__aeabi_dmul+0x86>
 800198e:	2300      	movs	r3, #0
 8001990:	2480      	movs	r4, #128	; 0x80
 8001992:	2500      	movs	r5, #0
 8001994:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	e67e      	b.n	800169a <__aeabi_dmul+0xc2>
 800199c:	2001      	movs	r0, #1
 800199e:	1a40      	subs	r0, r0, r1
 80019a0:	2838      	cmp	r0, #56	; 0x38
 80019a2:	dd00      	ble.n	80019a6 <__aeabi_dmul+0x3ce>
 80019a4:	e676      	b.n	8001694 <__aeabi_dmul+0xbc>
 80019a6:	281f      	cmp	r0, #31
 80019a8:	dd5b      	ble.n	8001a62 <__aeabi_dmul+0x48a>
 80019aa:	221f      	movs	r2, #31
 80019ac:	0023      	movs	r3, r4
 80019ae:	4252      	negs	r2, r2
 80019b0:	1a51      	subs	r1, r2, r1
 80019b2:	40cb      	lsrs	r3, r1
 80019b4:	0019      	movs	r1, r3
 80019b6:	2820      	cmp	r0, #32
 80019b8:	d003      	beq.n	80019c2 <__aeabi_dmul+0x3ea>
 80019ba:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <__aeabi_dmul+0x4d0>)
 80019bc:	4462      	add	r2, ip
 80019be:	4094      	lsls	r4, r2
 80019c0:	4325      	orrs	r5, r4
 80019c2:	1e6a      	subs	r2, r5, #1
 80019c4:	4195      	sbcs	r5, r2
 80019c6:	002a      	movs	r2, r5
 80019c8:	430a      	orrs	r2, r1
 80019ca:	2107      	movs	r1, #7
 80019cc:	000d      	movs	r5, r1
 80019ce:	2400      	movs	r4, #0
 80019d0:	4015      	ands	r5, r2
 80019d2:	4211      	tst	r1, r2
 80019d4:	d05b      	beq.n	8001a8e <__aeabi_dmul+0x4b6>
 80019d6:	210f      	movs	r1, #15
 80019d8:	2400      	movs	r4, #0
 80019da:	4011      	ands	r1, r2
 80019dc:	2904      	cmp	r1, #4
 80019de:	d053      	beq.n	8001a88 <__aeabi_dmul+0x4b0>
 80019e0:	1d11      	adds	r1, r2, #4
 80019e2:	4291      	cmp	r1, r2
 80019e4:	4192      	sbcs	r2, r2
 80019e6:	4252      	negs	r2, r2
 80019e8:	18a4      	adds	r4, r4, r2
 80019ea:	000a      	movs	r2, r1
 80019ec:	0223      	lsls	r3, r4, #8
 80019ee:	d54b      	bpl.n	8001a88 <__aeabi_dmul+0x4b0>
 80019f0:	2201      	movs	r2, #1
 80019f2:	2400      	movs	r4, #0
 80019f4:	2500      	movs	r5, #0
 80019f6:	e650      	b.n	800169a <__aeabi_dmul+0xc2>
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	031b      	lsls	r3, r3, #12
 80019fc:	421c      	tst	r4, r3
 80019fe:	d009      	beq.n	8001a14 <__aeabi_dmul+0x43c>
 8001a00:	421e      	tst	r6, r3
 8001a02:	d107      	bne.n	8001a14 <__aeabi_dmul+0x43c>
 8001a04:	4333      	orrs	r3, r6
 8001a06:	031c      	lsls	r4, r3, #12
 8001a08:	4643      	mov	r3, r8
 8001a0a:	0015      	movs	r5, r2
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	e642      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	0312      	lsls	r2, r2, #12
 8001a18:	4314      	orrs	r4, r2
 8001a1a:	0324      	lsls	r4, r4, #12
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001a1e:	0b24      	lsrs	r4, r4, #12
 8001a20:	9701      	str	r7, [sp, #4]
 8001a22:	e63a      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a24:	f000 fd08 	bl	8002438 <__clzsi2>
 8001a28:	0001      	movs	r1, r0
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	3115      	adds	r1, #21
 8001a2e:	3220      	adds	r2, #32
 8001a30:	291c      	cmp	r1, #28
 8001a32:	dc00      	bgt.n	8001a36 <__aeabi_dmul+0x45e>
 8001a34:	e74b      	b.n	80018ce <__aeabi_dmul+0x2f6>
 8001a36:	0034      	movs	r4, r6
 8001a38:	3808      	subs	r0, #8
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	4084      	lsls	r4, r0
 8001a3e:	e750      	b.n	80018e2 <__aeabi_dmul+0x30a>
 8001a40:	f000 fcfa 	bl	8002438 <__clzsi2>
 8001a44:	0003      	movs	r3, r0
 8001a46:	001a      	movs	r2, r3
 8001a48:	3215      	adds	r2, #21
 8001a4a:	3020      	adds	r0, #32
 8001a4c:	2a1c      	cmp	r2, #28
 8001a4e:	dc00      	bgt.n	8001a52 <__aeabi_dmul+0x47a>
 8001a50:	e71e      	b.n	8001890 <__aeabi_dmul+0x2b8>
 8001a52:	4656      	mov	r6, sl
 8001a54:	3b08      	subs	r3, #8
 8001a56:	2200      	movs	r2, #0
 8001a58:	409e      	lsls	r6, r3
 8001a5a:	e723      	b.n	80018a4 <__aeabi_dmul+0x2cc>
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	469c      	mov	ip, r3
 8001a60:	e6e6      	b.n	8001830 <__aeabi_dmul+0x258>
 8001a62:	4912      	ldr	r1, [pc, #72]	; (8001aac <__aeabi_dmul+0x4d4>)
 8001a64:	0022      	movs	r2, r4
 8001a66:	4461      	add	r1, ip
 8001a68:	002e      	movs	r6, r5
 8001a6a:	408d      	lsls	r5, r1
 8001a6c:	408a      	lsls	r2, r1
 8001a6e:	40c6      	lsrs	r6, r0
 8001a70:	1e69      	subs	r1, r5, #1
 8001a72:	418d      	sbcs	r5, r1
 8001a74:	4332      	orrs	r2, r6
 8001a76:	432a      	orrs	r2, r5
 8001a78:	40c4      	lsrs	r4, r0
 8001a7a:	0753      	lsls	r3, r2, #29
 8001a7c:	d0b6      	beq.n	80019ec <__aeabi_dmul+0x414>
 8001a7e:	210f      	movs	r1, #15
 8001a80:	4011      	ands	r1, r2
 8001a82:	2904      	cmp	r1, #4
 8001a84:	d1ac      	bne.n	80019e0 <__aeabi_dmul+0x408>
 8001a86:	e7b1      	b.n	80019ec <__aeabi_dmul+0x414>
 8001a88:	0765      	lsls	r5, r4, #29
 8001a8a:	0264      	lsls	r4, r4, #9
 8001a8c:	0b24      	lsrs	r4, r4, #12
 8001a8e:	08d2      	lsrs	r2, r2, #3
 8001a90:	4315      	orrs	r5, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	e601      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	0312      	lsls	r2, r2, #12
 8001a9a:	4314      	orrs	r4, r2
 8001a9c:	0324      	lsls	r4, r4, #12
 8001a9e:	4a01      	ldr	r2, [pc, #4]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001aa0:	0b24      	lsrs	r4, r4, #12
 8001aa2:	e5fa      	b.n	800169a <__aeabi_dmul+0xc2>
 8001aa4:	000007ff 	.word	0x000007ff
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e

08001ab0 <__aeabi_dsub>:
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	4657      	mov	r7, sl
 8001ab4:	464e      	mov	r6, r9
 8001ab6:	4645      	mov	r5, r8
 8001ab8:	46de      	mov	lr, fp
 8001aba:	b5e0      	push	{r5, r6, r7, lr}
 8001abc:	001e      	movs	r6, r3
 8001abe:	0017      	movs	r7, r2
 8001ac0:	004a      	lsls	r2, r1, #1
 8001ac2:	030b      	lsls	r3, r1, #12
 8001ac4:	0d52      	lsrs	r2, r2, #21
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	4690      	mov	r8, r2
 8001aca:	0f42      	lsrs	r2, r0, #29
 8001acc:	431a      	orrs	r2, r3
 8001ace:	0fcd      	lsrs	r5, r1, #31
 8001ad0:	4ccd      	ldr	r4, [pc, #820]	; (8001e08 <__aeabi_dsub+0x358>)
 8001ad2:	0331      	lsls	r1, r6, #12
 8001ad4:	00c3      	lsls	r3, r0, #3
 8001ad6:	4694      	mov	ip, r2
 8001ad8:	0070      	lsls	r0, r6, #1
 8001ada:	0f7a      	lsrs	r2, r7, #29
 8001adc:	0a49      	lsrs	r1, r1, #9
 8001ade:	00ff      	lsls	r7, r7, #3
 8001ae0:	469a      	mov	sl, r3
 8001ae2:	46b9      	mov	r9, r7
 8001ae4:	0d40      	lsrs	r0, r0, #21
 8001ae6:	0ff6      	lsrs	r6, r6, #31
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	42a0      	cmp	r0, r4
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x40>
 8001aee:	e0b1      	b.n	8001c54 <__aeabi_dsub+0x1a4>
 8001af0:	2201      	movs	r2, #1
 8001af2:	4056      	eors	r6, r2
 8001af4:	46b3      	mov	fp, r6
 8001af6:	42b5      	cmp	r5, r6
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x4c>
 8001afa:	e088      	b.n	8001c0e <__aeabi_dsub+0x15e>
 8001afc:	4642      	mov	r2, r8
 8001afe:	1a12      	subs	r2, r2, r0
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_dsub+0x56>
 8001b04:	e0ae      	b.n	8001c64 <__aeabi_dsub+0x1b4>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x5c>
 8001b0a:	e0c1      	b.n	8001c90 <__aeabi_dsub+0x1e0>
 8001b0c:	48be      	ldr	r0, [pc, #760]	; (8001e08 <__aeabi_dsub+0x358>)
 8001b0e:	4580      	cmp	r8, r0
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x64>
 8001b12:	e151      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001b14:	2080      	movs	r0, #128	; 0x80
 8001b16:	0400      	lsls	r0, r0, #16
 8001b18:	4301      	orrs	r1, r0
 8001b1a:	2a38      	cmp	r2, #56	; 0x38
 8001b1c:	dd00      	ble.n	8001b20 <__aeabi_dsub+0x70>
 8001b1e:	e17b      	b.n	8001e18 <__aeabi_dsub+0x368>
 8001b20:	2a1f      	cmp	r2, #31
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x76>
 8001b24:	e1ee      	b.n	8001f04 <__aeabi_dsub+0x454>
 8001b26:	2020      	movs	r0, #32
 8001b28:	003e      	movs	r6, r7
 8001b2a:	1a80      	subs	r0, r0, r2
 8001b2c:	000c      	movs	r4, r1
 8001b2e:	40d6      	lsrs	r6, r2
 8001b30:	40d1      	lsrs	r1, r2
 8001b32:	4087      	lsls	r7, r0
 8001b34:	4662      	mov	r2, ip
 8001b36:	4084      	lsls	r4, r0
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	1e78      	subs	r0, r7, #1
 8001b3c:	4187      	sbcs	r7, r0
 8001b3e:	4694      	mov	ip, r2
 8001b40:	4334      	orrs	r4, r6
 8001b42:	4327      	orrs	r7, r4
 8001b44:	1bdc      	subs	r4, r3, r7
 8001b46:	42a3      	cmp	r3, r4
 8001b48:	419b      	sbcs	r3, r3
 8001b4a:	4662      	mov	r2, ip
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4699      	mov	r9, r3
 8001b52:	464b      	mov	r3, r9
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	d400      	bmi.n	8001b5a <__aeabi_dsub+0xaa>
 8001b58:	e118      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001b5a:	464b      	mov	r3, r9
 8001b5c:	0258      	lsls	r0, r3, #9
 8001b5e:	0a43      	lsrs	r3, r0, #9
 8001b60:	4699      	mov	r9, r3
 8001b62:	464b      	mov	r3, r9
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0xba>
 8001b68:	e137      	b.n	8001dda <__aeabi_dsub+0x32a>
 8001b6a:	4648      	mov	r0, r9
 8001b6c:	f000 fc64 	bl	8002438 <__clzsi2>
 8001b70:	0001      	movs	r1, r0
 8001b72:	3908      	subs	r1, #8
 8001b74:	2320      	movs	r3, #32
 8001b76:	0022      	movs	r2, r4
 8001b78:	4648      	mov	r0, r9
 8001b7a:	1a5b      	subs	r3, r3, r1
 8001b7c:	40da      	lsrs	r2, r3
 8001b7e:	4088      	lsls	r0, r1
 8001b80:	408c      	lsls	r4, r1
 8001b82:	4643      	mov	r3, r8
 8001b84:	4310      	orrs	r0, r2
 8001b86:	4588      	cmp	r8, r1
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dsub+0xdc>
 8001b8a:	e136      	b.n	8001dfa <__aeabi_dsub+0x34a>
 8001b8c:	1ac9      	subs	r1, r1, r3
 8001b8e:	1c4b      	adds	r3, r1, #1
 8001b90:	2b1f      	cmp	r3, #31
 8001b92:	dd00      	ble.n	8001b96 <__aeabi_dsub+0xe6>
 8001b94:	e0ea      	b.n	8001d6c <__aeabi_dsub+0x2bc>
 8001b96:	2220      	movs	r2, #32
 8001b98:	0026      	movs	r6, r4
 8001b9a:	1ad2      	subs	r2, r2, r3
 8001b9c:	0001      	movs	r1, r0
 8001b9e:	4094      	lsls	r4, r2
 8001ba0:	40de      	lsrs	r6, r3
 8001ba2:	40d8      	lsrs	r0, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4091      	lsls	r1, r2
 8001ba8:	1e62      	subs	r2, r4, #1
 8001baa:	4194      	sbcs	r4, r2
 8001bac:	4681      	mov	r9, r0
 8001bae:	4698      	mov	r8, r3
 8001bb0:	4331      	orrs	r1, r6
 8001bb2:	430c      	orrs	r4, r1
 8001bb4:	0763      	lsls	r3, r4, #29
 8001bb6:	d009      	beq.n	8001bcc <__aeabi_dsub+0x11c>
 8001bb8:	230f      	movs	r3, #15
 8001bba:	4023      	ands	r3, r4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d005      	beq.n	8001bcc <__aeabi_dsub+0x11c>
 8001bc0:	1d23      	adds	r3, r4, #4
 8001bc2:	42a3      	cmp	r3, r4
 8001bc4:	41a4      	sbcs	r4, r4
 8001bc6:	4264      	negs	r4, r4
 8001bc8:	44a1      	add	r9, r4
 8001bca:	001c      	movs	r4, r3
 8001bcc:	464b      	mov	r3, r9
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	d400      	bmi.n	8001bd4 <__aeabi_dsub+0x124>
 8001bd2:	e0de      	b.n	8001d92 <__aeabi_dsub+0x2e2>
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <__aeabi_dsub+0x358>)
 8001bd8:	3101      	adds	r1, #1
 8001bda:	4299      	cmp	r1, r3
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x130>
 8001bde:	e0e7      	b.n	8001db0 <__aeabi_dsub+0x300>
 8001be0:	464b      	mov	r3, r9
 8001be2:	488a      	ldr	r0, [pc, #552]	; (8001e0c <__aeabi_dsub+0x35c>)
 8001be4:	08e4      	lsrs	r4, r4, #3
 8001be6:	4003      	ands	r3, r0
 8001be8:	0018      	movs	r0, r3
 8001bea:	0549      	lsls	r1, r1, #21
 8001bec:	075b      	lsls	r3, r3, #29
 8001bee:	0240      	lsls	r0, r0, #9
 8001bf0:	4323      	orrs	r3, r4
 8001bf2:	0d4a      	lsrs	r2, r1, #21
 8001bf4:	0b04      	lsrs	r4, r0, #12
 8001bf6:	0512      	lsls	r2, r2, #20
 8001bf8:	07ed      	lsls	r5, r5, #31
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	432a      	orrs	r2, r5
 8001bfe:	0018      	movs	r0, r3
 8001c00:	0011      	movs	r1, r2
 8001c02:	bcf0      	pop	{r4, r5, r6, r7}
 8001c04:	46bb      	mov	fp, r7
 8001c06:	46b2      	mov	sl, r6
 8001c08:	46a9      	mov	r9, r5
 8001c0a:	46a0      	mov	r8, r4
 8001c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c0e:	4642      	mov	r2, r8
 8001c10:	1a12      	subs	r2, r2, r0
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	dd52      	ble.n	8001cbc <__aeabi_dsub+0x20c>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x16c>
 8001c1a:	e09c      	b.n	8001d56 <__aeabi_dsub+0x2a6>
 8001c1c:	45a0      	cmp	r8, r4
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dsub+0x172>
 8001c20:	e0ca      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001c22:	2080      	movs	r0, #128	; 0x80
 8001c24:	0400      	lsls	r0, r0, #16
 8001c26:	4301      	orrs	r1, r0
 8001c28:	2a38      	cmp	r2, #56	; 0x38
 8001c2a:	dd00      	ble.n	8001c2e <__aeabi_dsub+0x17e>
 8001c2c:	e149      	b.n	8001ec2 <__aeabi_dsub+0x412>
 8001c2e:	2a1f      	cmp	r2, #31
 8001c30:	dc00      	bgt.n	8001c34 <__aeabi_dsub+0x184>
 8001c32:	e197      	b.n	8001f64 <__aeabi_dsub+0x4b4>
 8001c34:	0010      	movs	r0, r2
 8001c36:	000e      	movs	r6, r1
 8001c38:	3820      	subs	r0, #32
 8001c3a:	40c6      	lsrs	r6, r0
 8001c3c:	2a20      	cmp	r2, #32
 8001c3e:	d004      	beq.n	8001c4a <__aeabi_dsub+0x19a>
 8001c40:	2040      	movs	r0, #64	; 0x40
 8001c42:	1a82      	subs	r2, r0, r2
 8001c44:	4091      	lsls	r1, r2
 8001c46:	430f      	orrs	r7, r1
 8001c48:	46b9      	mov	r9, r7
 8001c4a:	464c      	mov	r4, r9
 8001c4c:	1e62      	subs	r2, r4, #1
 8001c4e:	4194      	sbcs	r4, r2
 8001c50:	4334      	orrs	r4, r6
 8001c52:	e13a      	b.n	8001eca <__aeabi_dsub+0x41a>
 8001c54:	000a      	movs	r2, r1
 8001c56:	433a      	orrs	r2, r7
 8001c58:	d028      	beq.n	8001cac <__aeabi_dsub+0x1fc>
 8001c5a:	46b3      	mov	fp, r6
 8001c5c:	42b5      	cmp	r5, r6
 8001c5e:	d02b      	beq.n	8001cb8 <__aeabi_dsub+0x208>
 8001c60:	4a6b      	ldr	r2, [pc, #428]	; (8001e10 <__aeabi_dsub+0x360>)
 8001c62:	4442      	add	r2, r8
 8001c64:	2a00      	cmp	r2, #0
 8001c66:	d05d      	beq.n	8001d24 <__aeabi_dsub+0x274>
 8001c68:	4642      	mov	r2, r8
 8001c6a:	4644      	mov	r4, r8
 8001c6c:	1a82      	subs	r2, r0, r2
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	d000      	beq.n	8001c74 <__aeabi_dsub+0x1c4>
 8001c72:	e0f5      	b.n	8001e60 <__aeabi_dsub+0x3b0>
 8001c74:	4665      	mov	r5, ip
 8001c76:	431d      	orrs	r5, r3
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x1cc>
 8001c7a:	e19c      	b.n	8001fb6 <__aeabi_dsub+0x506>
 8001c7c:	1e55      	subs	r5, r2, #1
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x1d4>
 8001c82:	e1fb      	b.n	800207c <__aeabi_dsub+0x5cc>
 8001c84:	4c60      	ldr	r4, [pc, #384]	; (8001e08 <__aeabi_dsub+0x358>)
 8001c86:	42a2      	cmp	r2, r4
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x1dc>
 8001c8a:	e1bd      	b.n	8002008 <__aeabi_dsub+0x558>
 8001c8c:	002a      	movs	r2, r5
 8001c8e:	e0f0      	b.n	8001e72 <__aeabi_dsub+0x3c2>
 8001c90:	0008      	movs	r0, r1
 8001c92:	4338      	orrs	r0, r7
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e8>
 8001c96:	e0c3      	b.n	8001e20 <__aeabi_dsub+0x370>
 8001c98:	1e50      	subs	r0, r2, #1
 8001c9a:	2a01      	cmp	r2, #1
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x1f0>
 8001c9e:	e1a8      	b.n	8001ff2 <__aeabi_dsub+0x542>
 8001ca0:	4c59      	ldr	r4, [pc, #356]	; (8001e08 <__aeabi_dsub+0x358>)
 8001ca2:	42a2      	cmp	r2, r4
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x1f8>
 8001ca6:	e087      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	e736      	b.n	8001b1a <__aeabi_dsub+0x6a>
 8001cac:	2201      	movs	r2, #1
 8001cae:	4056      	eors	r6, r2
 8001cb0:	46b3      	mov	fp, r6
 8001cb2:	42b5      	cmp	r5, r6
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x208>
 8001cb6:	e721      	b.n	8001afc <__aeabi_dsub+0x4c>
 8001cb8:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <__aeabi_dsub+0x360>)
 8001cba:	4442      	add	r2, r8
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x212>
 8001cc0:	e0b5      	b.n	8001e2e <__aeabi_dsub+0x37e>
 8001cc2:	4642      	mov	r2, r8
 8001cc4:	4644      	mov	r4, r8
 8001cc6:	1a82      	subs	r2, r0, r2
 8001cc8:	2c00      	cmp	r4, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x21e>
 8001ccc:	e138      	b.n	8001f40 <__aeabi_dsub+0x490>
 8001cce:	4e4e      	ldr	r6, [pc, #312]	; (8001e08 <__aeabi_dsub+0x358>)
 8001cd0:	42b0      	cmp	r0, r6
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dsub+0x226>
 8001cd4:	e1de      	b.n	8002094 <__aeabi_dsub+0x5e4>
 8001cd6:	2680      	movs	r6, #128	; 0x80
 8001cd8:	4664      	mov	r4, ip
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4334      	orrs	r4, r6
 8001cde:	46a4      	mov	ip, r4
 8001ce0:	2a38      	cmp	r2, #56	; 0x38
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dsub+0x236>
 8001ce4:	e196      	b.n	8002014 <__aeabi_dsub+0x564>
 8001ce6:	2a1f      	cmp	r2, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0x23c>
 8001cea:	e224      	b.n	8002136 <__aeabi_dsub+0x686>
 8001cec:	2620      	movs	r6, #32
 8001cee:	1ab4      	subs	r4, r6, r2
 8001cf0:	46a2      	mov	sl, r4
 8001cf2:	4664      	mov	r4, ip
 8001cf4:	4656      	mov	r6, sl
 8001cf6:	40b4      	lsls	r4, r6
 8001cf8:	46a1      	mov	r9, r4
 8001cfa:	001c      	movs	r4, r3
 8001cfc:	464e      	mov	r6, r9
 8001cfe:	40d4      	lsrs	r4, r2
 8001d00:	4326      	orrs	r6, r4
 8001d02:	0034      	movs	r4, r6
 8001d04:	4656      	mov	r6, sl
 8001d06:	40b3      	lsls	r3, r6
 8001d08:	1e5e      	subs	r6, r3, #1
 8001d0a:	41b3      	sbcs	r3, r6
 8001d0c:	431c      	orrs	r4, r3
 8001d0e:	4663      	mov	r3, ip
 8001d10:	40d3      	lsrs	r3, r2
 8001d12:	18c9      	adds	r1, r1, r3
 8001d14:	19e4      	adds	r4, r4, r7
 8001d16:	42bc      	cmp	r4, r7
 8001d18:	41bf      	sbcs	r7, r7
 8001d1a:	427f      	negs	r7, r7
 8001d1c:	46b9      	mov	r9, r7
 8001d1e:	4680      	mov	r8, r0
 8001d20:	4489      	add	r9, r1
 8001d22:	e0d8      	b.n	8001ed6 <__aeabi_dsub+0x426>
 8001d24:	4640      	mov	r0, r8
 8001d26:	4c3b      	ldr	r4, [pc, #236]	; (8001e14 <__aeabi_dsub+0x364>)
 8001d28:	3001      	adds	r0, #1
 8001d2a:	4220      	tst	r0, r4
 8001d2c:	d000      	beq.n	8001d30 <__aeabi_dsub+0x280>
 8001d2e:	e0b4      	b.n	8001e9a <__aeabi_dsub+0x3ea>
 8001d30:	4640      	mov	r0, r8
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dsub+0x288>
 8001d36:	e144      	b.n	8001fc2 <__aeabi_dsub+0x512>
 8001d38:	4660      	mov	r0, ip
 8001d3a:	4318      	orrs	r0, r3
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x290>
 8001d3e:	e190      	b.n	8002062 <__aeabi_dsub+0x5b2>
 8001d40:	0008      	movs	r0, r1
 8001d42:	4338      	orrs	r0, r7
 8001d44:	d000      	beq.n	8001d48 <__aeabi_dsub+0x298>
 8001d46:	e1aa      	b.n	800209e <__aeabi_dsub+0x5ee>
 8001d48:	4661      	mov	r1, ip
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	0749      	lsls	r1, r1, #29
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	4661      	mov	r1, ip
 8001d52:	08cc      	lsrs	r4, r1, #3
 8001d54:	e027      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001d56:	0008      	movs	r0, r1
 8001d58:	4338      	orrs	r0, r7
 8001d5a:	d061      	beq.n	8001e20 <__aeabi_dsub+0x370>
 8001d5c:	1e50      	subs	r0, r2, #1
 8001d5e:	2a01      	cmp	r2, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x2b4>
 8001d62:	e139      	b.n	8001fd8 <__aeabi_dsub+0x528>
 8001d64:	42a2      	cmp	r2, r4
 8001d66:	d027      	beq.n	8001db8 <__aeabi_dsub+0x308>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	e75d      	b.n	8001c28 <__aeabi_dsub+0x178>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	391f      	subs	r1, #31
 8001d70:	40ca      	lsrs	r2, r1
 8001d72:	0011      	movs	r1, r2
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d003      	beq.n	8001d80 <__aeabi_dsub+0x2d0>
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	4098      	lsls	r0, r3
 8001d7e:	4304      	orrs	r4, r0
 8001d80:	1e63      	subs	r3, r4, #1
 8001d82:	419c      	sbcs	r4, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	4699      	mov	r9, r3
 8001d88:	4698      	mov	r8, r3
 8001d8a:	430c      	orrs	r4, r1
 8001d8c:	0763      	lsls	r3, r4, #29
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x2e2>
 8001d90:	e712      	b.n	8001bb8 <__aeabi_dsub+0x108>
 8001d92:	464b      	mov	r3, r9
 8001d94:	464a      	mov	r2, r9
 8001d96:	08e4      	lsrs	r4, r4, #3
 8001d98:	075b      	lsls	r3, r3, #29
 8001d9a:	4323      	orrs	r3, r4
 8001d9c:	08d4      	lsrs	r4, r2, #3
 8001d9e:	4642      	mov	r2, r8
 8001da0:	4919      	ldr	r1, [pc, #100]	; (8001e08 <__aeabi_dsub+0x358>)
 8001da2:	428a      	cmp	r2, r1
 8001da4:	d00e      	beq.n	8001dc4 <__aeabi_dsub+0x314>
 8001da6:	0324      	lsls	r4, r4, #12
 8001da8:	0552      	lsls	r2, r2, #21
 8001daa:	0b24      	lsrs	r4, r4, #12
 8001dac:	0d52      	lsrs	r2, r2, #21
 8001dae:	e722      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001db0:	000a      	movs	r2, r1
 8001db2:	2400      	movs	r4, #0
 8001db4:	2300      	movs	r3, #0
 8001db6:	e71e      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	4662      	mov	r2, ip
 8001dbc:	0752      	lsls	r2, r2, #29
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	4662      	mov	r2, ip
 8001dc2:	08d4      	lsrs	r4, r2, #3
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	4322      	orrs	r2, r4
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x31c>
 8001dca:	e1fc      	b.n	80021c6 <__aeabi_dsub+0x716>
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	0312      	lsls	r2, r2, #12
 8001dd0:	4314      	orrs	r4, r2
 8001dd2:	0324      	lsls	r4, r4, #12
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <__aeabi_dsub+0x358>)
 8001dd6:	0b24      	lsrs	r4, r4, #12
 8001dd8:	e70d      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001dda:	0020      	movs	r0, r4
 8001ddc:	f000 fb2c 	bl	8002438 <__clzsi2>
 8001de0:	0001      	movs	r1, r0
 8001de2:	3118      	adds	r1, #24
 8001de4:	291f      	cmp	r1, #31
 8001de6:	dc00      	bgt.n	8001dea <__aeabi_dsub+0x33a>
 8001de8:	e6c4      	b.n	8001b74 <__aeabi_dsub+0xc4>
 8001dea:	3808      	subs	r0, #8
 8001dec:	4084      	lsls	r4, r0
 8001dee:	4643      	mov	r3, r8
 8001df0:	0020      	movs	r0, r4
 8001df2:	2400      	movs	r4, #0
 8001df4:	4588      	cmp	r8, r1
 8001df6:	dc00      	bgt.n	8001dfa <__aeabi_dsub+0x34a>
 8001df8:	e6c8      	b.n	8001b8c <__aeabi_dsub+0xdc>
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__aeabi_dsub+0x35c>)
 8001dfc:	1a5b      	subs	r3, r3, r1
 8001dfe:	4010      	ands	r0, r2
 8001e00:	4698      	mov	r8, r3
 8001e02:	4681      	mov	r9, r0
 8001e04:	e6d6      	b.n	8001bb4 <__aeabi_dsub+0x104>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	ff7fffff 	.word	0xff7fffff
 8001e10:	fffff801 	.word	0xfffff801
 8001e14:	000007fe 	.word	0x000007fe
 8001e18:	430f      	orrs	r7, r1
 8001e1a:	1e7a      	subs	r2, r7, #1
 8001e1c:	4197      	sbcs	r7, r2
 8001e1e:	e691      	b.n	8001b44 <__aeabi_dsub+0x94>
 8001e20:	4661      	mov	r1, ip
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	0749      	lsls	r1, r1, #29
 8001e26:	430b      	orrs	r3, r1
 8001e28:	4661      	mov	r1, ip
 8001e2a:	08cc      	lsrs	r4, r1, #3
 8001e2c:	e7b8      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 8001e2e:	4640      	mov	r0, r8
 8001e30:	4cd3      	ldr	r4, [pc, #844]	; (8002180 <__aeabi_dsub+0x6d0>)
 8001e32:	3001      	adds	r0, #1
 8001e34:	4220      	tst	r0, r4
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x38a>
 8001e38:	e0a2      	b.n	8001f80 <__aeabi_dsub+0x4d0>
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d000      	beq.n	8001e42 <__aeabi_dsub+0x392>
 8001e40:	e101      	b.n	8002046 <__aeabi_dsub+0x596>
 8001e42:	4660      	mov	r0, ip
 8001e44:	4318      	orrs	r0, r3
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x39a>
 8001e48:	e15e      	b.n	8002108 <__aeabi_dsub+0x658>
 8001e4a:	0008      	movs	r0, r1
 8001e4c:	4338      	orrs	r0, r7
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x3a2>
 8001e50:	e15f      	b.n	8002112 <__aeabi_dsub+0x662>
 8001e52:	4661      	mov	r1, ip
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	0749      	lsls	r1, r1, #29
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	4661      	mov	r1, ip
 8001e5c:	08cc      	lsrs	r4, r1, #3
 8001e5e:	e7a2      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001e60:	4dc8      	ldr	r5, [pc, #800]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001e62:	42a8      	cmp	r0, r5
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x3b8>
 8001e66:	e0cf      	b.n	8002008 <__aeabi_dsub+0x558>
 8001e68:	2580      	movs	r5, #128	; 0x80
 8001e6a:	4664      	mov	r4, ip
 8001e6c:	042d      	lsls	r5, r5, #16
 8001e6e:	432c      	orrs	r4, r5
 8001e70:	46a4      	mov	ip, r4
 8001e72:	2a38      	cmp	r2, #56	; 0x38
 8001e74:	dc56      	bgt.n	8001f24 <__aeabi_dsub+0x474>
 8001e76:	2a1f      	cmp	r2, #31
 8001e78:	dd00      	ble.n	8001e7c <__aeabi_dsub+0x3cc>
 8001e7a:	e0d1      	b.n	8002020 <__aeabi_dsub+0x570>
 8001e7c:	2520      	movs	r5, #32
 8001e7e:	001e      	movs	r6, r3
 8001e80:	1aad      	subs	r5, r5, r2
 8001e82:	4664      	mov	r4, ip
 8001e84:	40ab      	lsls	r3, r5
 8001e86:	40ac      	lsls	r4, r5
 8001e88:	40d6      	lsrs	r6, r2
 8001e8a:	1e5d      	subs	r5, r3, #1
 8001e8c:	41ab      	sbcs	r3, r5
 8001e8e:	4334      	orrs	r4, r6
 8001e90:	4323      	orrs	r3, r4
 8001e92:	4664      	mov	r4, ip
 8001e94:	40d4      	lsrs	r4, r2
 8001e96:	1b09      	subs	r1, r1, r4
 8001e98:	e049      	b.n	8001f2e <__aeabi_dsub+0x47e>
 8001e9a:	4660      	mov	r0, ip
 8001e9c:	1bdc      	subs	r4, r3, r7
 8001e9e:	1a46      	subs	r6, r0, r1
 8001ea0:	42a3      	cmp	r3, r4
 8001ea2:	4180      	sbcs	r0, r0
 8001ea4:	4240      	negs	r0, r0
 8001ea6:	4681      	mov	r9, r0
 8001ea8:	0030      	movs	r0, r6
 8001eaa:	464e      	mov	r6, r9
 8001eac:	1b80      	subs	r0, r0, r6
 8001eae:	4681      	mov	r9, r0
 8001eb0:	0200      	lsls	r0, r0, #8
 8001eb2:	d476      	bmi.n	8001fa2 <__aeabi_dsub+0x4f2>
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	d000      	beq.n	8001ebc <__aeabi_dsub+0x40c>
 8001eba:	e652      	b.n	8001b62 <__aeabi_dsub+0xb2>
 8001ebc:	2400      	movs	r4, #0
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	e771      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001ec2:	4339      	orrs	r1, r7
 8001ec4:	000c      	movs	r4, r1
 8001ec6:	1e62      	subs	r2, r4, #1
 8001ec8:	4194      	sbcs	r4, r2
 8001eca:	18e4      	adds	r4, r4, r3
 8001ecc:	429c      	cmp	r4, r3
 8001ece:	419b      	sbcs	r3, r3
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	4463      	add	r3, ip
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	d400      	bmi.n	8001ede <__aeabi_dsub+0x42e>
 8001edc:	e756      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	469c      	mov	ip, r3
 8001ee2:	4ba8      	ldr	r3, [pc, #672]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001ee4:	44e0      	add	r8, ip
 8001ee6:	4598      	cmp	r8, r3
 8001ee8:	d038      	beq.n	8001f5c <__aeabi_dsub+0x4ac>
 8001eea:	464b      	mov	r3, r9
 8001eec:	48a6      	ldr	r0, [pc, #664]	; (8002188 <__aeabi_dsub+0x6d8>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4003      	ands	r3, r0
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	0863      	lsrs	r3, r4, #1
 8001ef6:	4014      	ands	r4, r2
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	07c3      	lsls	r3, r0, #31
 8001efc:	431c      	orrs	r4, r3
 8001efe:	0843      	lsrs	r3, r0, #1
 8001f00:	4699      	mov	r9, r3
 8001f02:	e657      	b.n	8001bb4 <__aeabi_dsub+0x104>
 8001f04:	0010      	movs	r0, r2
 8001f06:	000e      	movs	r6, r1
 8001f08:	3820      	subs	r0, #32
 8001f0a:	40c6      	lsrs	r6, r0
 8001f0c:	2a20      	cmp	r2, #32
 8001f0e:	d004      	beq.n	8001f1a <__aeabi_dsub+0x46a>
 8001f10:	2040      	movs	r0, #64	; 0x40
 8001f12:	1a82      	subs	r2, r0, r2
 8001f14:	4091      	lsls	r1, r2
 8001f16:	430f      	orrs	r7, r1
 8001f18:	46b9      	mov	r9, r7
 8001f1a:	464f      	mov	r7, r9
 8001f1c:	1e7a      	subs	r2, r7, #1
 8001f1e:	4197      	sbcs	r7, r2
 8001f20:	4337      	orrs	r7, r6
 8001f22:	e60f      	b.n	8001b44 <__aeabi_dsub+0x94>
 8001f24:	4662      	mov	r2, ip
 8001f26:	431a      	orrs	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	1e5a      	subs	r2, r3, #1
 8001f2c:	4193      	sbcs	r3, r2
 8001f2e:	1afc      	subs	r4, r7, r3
 8001f30:	42a7      	cmp	r7, r4
 8001f32:	41bf      	sbcs	r7, r7
 8001f34:	427f      	negs	r7, r7
 8001f36:	1bcb      	subs	r3, r1, r7
 8001f38:	4699      	mov	r9, r3
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	4680      	mov	r8, r0
 8001f3e:	e608      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8001f40:	4666      	mov	r6, ip
 8001f42:	431e      	orrs	r6, r3
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x498>
 8001f46:	e0be      	b.n	80020c6 <__aeabi_dsub+0x616>
 8001f48:	1e56      	subs	r6, r2, #1
 8001f4a:	2a01      	cmp	r2, #1
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x4a0>
 8001f4e:	e109      	b.n	8002164 <__aeabi_dsub+0x6b4>
 8001f50:	4c8c      	ldr	r4, [pc, #560]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001f52:	42a2      	cmp	r2, r4
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x4a8>
 8001f56:	e119      	b.n	800218c <__aeabi_dsub+0x6dc>
 8001f58:	0032      	movs	r2, r6
 8001f5a:	e6c1      	b.n	8001ce0 <__aeabi_dsub+0x230>
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	2400      	movs	r4, #0
 8001f60:	2300      	movs	r3, #0
 8001f62:	e648      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001f64:	2020      	movs	r0, #32
 8001f66:	000c      	movs	r4, r1
 8001f68:	1a80      	subs	r0, r0, r2
 8001f6a:	003e      	movs	r6, r7
 8001f6c:	4087      	lsls	r7, r0
 8001f6e:	4084      	lsls	r4, r0
 8001f70:	40d6      	lsrs	r6, r2
 8001f72:	1e78      	subs	r0, r7, #1
 8001f74:	4187      	sbcs	r7, r0
 8001f76:	40d1      	lsrs	r1, r2
 8001f78:	4334      	orrs	r4, r6
 8001f7a:	433c      	orrs	r4, r7
 8001f7c:	448c      	add	ip, r1
 8001f7e:	e7a4      	b.n	8001eca <__aeabi_dsub+0x41a>
 8001f80:	4a80      	ldr	r2, [pc, #512]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001f82:	4290      	cmp	r0, r2
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x4d8>
 8001f86:	e0e9      	b.n	800215c <__aeabi_dsub+0x6ac>
 8001f88:	19df      	adds	r7, r3, r7
 8001f8a:	429f      	cmp	r7, r3
 8001f8c:	419b      	sbcs	r3, r3
 8001f8e:	4461      	add	r1, ip
 8001f90:	425b      	negs	r3, r3
 8001f92:	18c9      	adds	r1, r1, r3
 8001f94:	07cc      	lsls	r4, r1, #31
 8001f96:	087f      	lsrs	r7, r7, #1
 8001f98:	084b      	lsrs	r3, r1, #1
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	4680      	mov	r8, r0
 8001f9e:	433c      	orrs	r4, r7
 8001fa0:	e6f4      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001fa2:	1afc      	subs	r4, r7, r3
 8001fa4:	42a7      	cmp	r7, r4
 8001fa6:	41bf      	sbcs	r7, r7
 8001fa8:	4663      	mov	r3, ip
 8001faa:	427f      	negs	r7, r7
 8001fac:	1ac9      	subs	r1, r1, r3
 8001fae:	1bcb      	subs	r3, r1, r7
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	465d      	mov	r5, fp
 8001fb4:	e5d5      	b.n	8001b62 <__aeabi_dsub+0xb2>
 8001fb6:	08ff      	lsrs	r7, r7, #3
 8001fb8:	074b      	lsls	r3, r1, #29
 8001fba:	465d      	mov	r5, fp
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e6ee      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	d000      	beq.n	8001fca <__aeabi_dsub+0x51a>
 8001fc8:	e082      	b.n	80020d0 <__aeabi_dsub+0x620>
 8001fca:	000b      	movs	r3, r1
 8001fcc:	433b      	orrs	r3, r7
 8001fce:	d11b      	bne.n	8002008 <__aeabi_dsub+0x558>
 8001fd0:	2480      	movs	r4, #128	; 0x80
 8001fd2:	2500      	movs	r5, #0
 8001fd4:	0324      	lsls	r4, r4, #12
 8001fd6:	e6f9      	b.n	8001dcc <__aeabi_dsub+0x31c>
 8001fd8:	19dc      	adds	r4, r3, r7
 8001fda:	429c      	cmp	r4, r3
 8001fdc:	419b      	sbcs	r3, r3
 8001fde:	4461      	add	r1, ip
 8001fe0:	4689      	mov	r9, r1
 8001fe2:	425b      	negs	r3, r3
 8001fe4:	4499      	add	r9, r3
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	d444      	bmi.n	8002076 <__aeabi_dsub+0x5c6>
 8001fec:	2301      	movs	r3, #1
 8001fee:	4698      	mov	r8, r3
 8001ff0:	e6cc      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001ff2:	1bdc      	subs	r4, r3, r7
 8001ff4:	4662      	mov	r2, ip
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	419b      	sbcs	r3, r3
 8001ffa:	1a51      	subs	r1, r2, r1
 8001ffc:	425b      	negs	r3, r3
 8001ffe:	1acb      	subs	r3, r1, r3
 8002000:	4699      	mov	r9, r3
 8002002:	2301      	movs	r3, #1
 8002004:	4698      	mov	r8, r3
 8002006:	e5a4      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8002008:	08ff      	lsrs	r7, r7, #3
 800200a:	074b      	lsls	r3, r1, #29
 800200c:	465d      	mov	r5, fp
 800200e:	433b      	orrs	r3, r7
 8002010:	08cc      	lsrs	r4, r1, #3
 8002012:	e6d7      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002014:	4662      	mov	r2, ip
 8002016:	431a      	orrs	r2, r3
 8002018:	0014      	movs	r4, r2
 800201a:	1e63      	subs	r3, r4, #1
 800201c:	419c      	sbcs	r4, r3
 800201e:	e679      	b.n	8001d14 <__aeabi_dsub+0x264>
 8002020:	0015      	movs	r5, r2
 8002022:	4664      	mov	r4, ip
 8002024:	3d20      	subs	r5, #32
 8002026:	40ec      	lsrs	r4, r5
 8002028:	46a0      	mov	r8, r4
 800202a:	2a20      	cmp	r2, #32
 800202c:	d005      	beq.n	800203a <__aeabi_dsub+0x58a>
 800202e:	2540      	movs	r5, #64	; 0x40
 8002030:	4664      	mov	r4, ip
 8002032:	1aaa      	subs	r2, r5, r2
 8002034:	4094      	lsls	r4, r2
 8002036:	4323      	orrs	r3, r4
 8002038:	469a      	mov	sl, r3
 800203a:	4654      	mov	r4, sl
 800203c:	1e63      	subs	r3, r4, #1
 800203e:	419c      	sbcs	r4, r3
 8002040:	4643      	mov	r3, r8
 8002042:	4323      	orrs	r3, r4
 8002044:	e773      	b.n	8001f2e <__aeabi_dsub+0x47e>
 8002046:	4662      	mov	r2, ip
 8002048:	431a      	orrs	r2, r3
 800204a:	d023      	beq.n	8002094 <__aeabi_dsub+0x5e4>
 800204c:	000a      	movs	r2, r1
 800204e:	433a      	orrs	r2, r7
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x5a4>
 8002052:	e0a0      	b.n	8002196 <__aeabi_dsub+0x6e6>
 8002054:	4662      	mov	r2, ip
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	0752      	lsls	r2, r2, #29
 800205a:	4313      	orrs	r3, r2
 800205c:	4662      	mov	r2, ip
 800205e:	08d4      	lsrs	r4, r2, #3
 8002060:	e6b0      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002062:	000b      	movs	r3, r1
 8002064:	433b      	orrs	r3, r7
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x5ba>
 8002068:	e728      	b.n	8001ebc <__aeabi_dsub+0x40c>
 800206a:	08ff      	lsrs	r7, r7, #3
 800206c:	074b      	lsls	r3, r1, #29
 800206e:	465d      	mov	r5, fp
 8002070:	433b      	orrs	r3, r7
 8002072:	08cc      	lsrs	r4, r1, #3
 8002074:	e697      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8002076:	2302      	movs	r3, #2
 8002078:	4698      	mov	r8, r3
 800207a:	e736      	b.n	8001eea <__aeabi_dsub+0x43a>
 800207c:	1afc      	subs	r4, r7, r3
 800207e:	42a7      	cmp	r7, r4
 8002080:	41bf      	sbcs	r7, r7
 8002082:	4663      	mov	r3, ip
 8002084:	427f      	negs	r7, r7
 8002086:	1ac9      	subs	r1, r1, r3
 8002088:	1bcb      	subs	r3, r1, r7
 800208a:	4699      	mov	r9, r3
 800208c:	2301      	movs	r3, #1
 800208e:	465d      	mov	r5, fp
 8002090:	4698      	mov	r8, r3
 8002092:	e55e      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8002094:	074b      	lsls	r3, r1, #29
 8002096:	08ff      	lsrs	r7, r7, #3
 8002098:	433b      	orrs	r3, r7
 800209a:	08cc      	lsrs	r4, r1, #3
 800209c:	e692      	b.n	8001dc4 <__aeabi_dsub+0x314>
 800209e:	1bdc      	subs	r4, r3, r7
 80020a0:	4660      	mov	r0, ip
 80020a2:	42a3      	cmp	r3, r4
 80020a4:	41b6      	sbcs	r6, r6
 80020a6:	1a40      	subs	r0, r0, r1
 80020a8:	4276      	negs	r6, r6
 80020aa:	1b80      	subs	r0, r0, r6
 80020ac:	4681      	mov	r9, r0
 80020ae:	0200      	lsls	r0, r0, #8
 80020b0:	d560      	bpl.n	8002174 <__aeabi_dsub+0x6c4>
 80020b2:	1afc      	subs	r4, r7, r3
 80020b4:	42a7      	cmp	r7, r4
 80020b6:	41bf      	sbcs	r7, r7
 80020b8:	4663      	mov	r3, ip
 80020ba:	427f      	negs	r7, r7
 80020bc:	1ac9      	subs	r1, r1, r3
 80020be:	1bcb      	subs	r3, r1, r7
 80020c0:	4699      	mov	r9, r3
 80020c2:	465d      	mov	r5, fp
 80020c4:	e576      	b.n	8001bb4 <__aeabi_dsub+0x104>
 80020c6:	08ff      	lsrs	r7, r7, #3
 80020c8:	074b      	lsls	r3, r1, #29
 80020ca:	433b      	orrs	r3, r7
 80020cc:	08cc      	lsrs	r4, r1, #3
 80020ce:	e667      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 80020d0:	000a      	movs	r2, r1
 80020d2:	08db      	lsrs	r3, r3, #3
 80020d4:	433a      	orrs	r2, r7
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x62a>
 80020d8:	e66f      	b.n	8001dba <__aeabi_dsub+0x30a>
 80020da:	4662      	mov	r2, ip
 80020dc:	0752      	lsls	r2, r2, #29
 80020de:	4313      	orrs	r3, r2
 80020e0:	4662      	mov	r2, ip
 80020e2:	08d4      	lsrs	r4, r2, #3
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	0312      	lsls	r2, r2, #12
 80020e8:	4214      	tst	r4, r2
 80020ea:	d007      	beq.n	80020fc <__aeabi_dsub+0x64c>
 80020ec:	08c8      	lsrs	r0, r1, #3
 80020ee:	4210      	tst	r0, r2
 80020f0:	d104      	bne.n	80020fc <__aeabi_dsub+0x64c>
 80020f2:	465d      	mov	r5, fp
 80020f4:	0004      	movs	r4, r0
 80020f6:	08fb      	lsrs	r3, r7, #3
 80020f8:	0749      	lsls	r1, r1, #29
 80020fa:	430b      	orrs	r3, r1
 80020fc:	0f5a      	lsrs	r2, r3, #29
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	0752      	lsls	r2, r2, #29
 8002104:	4313      	orrs	r3, r2
 8002106:	e65d      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002108:	074b      	lsls	r3, r1, #29
 800210a:	08ff      	lsrs	r7, r7, #3
 800210c:	433b      	orrs	r3, r7
 800210e:	08cc      	lsrs	r4, r1, #3
 8002110:	e649      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8002112:	19dc      	adds	r4, r3, r7
 8002114:	429c      	cmp	r4, r3
 8002116:	419b      	sbcs	r3, r3
 8002118:	4461      	add	r1, ip
 800211a:	4689      	mov	r9, r1
 800211c:	425b      	negs	r3, r3
 800211e:	4499      	add	r9, r3
 8002120:	464b      	mov	r3, r9
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	d400      	bmi.n	8002128 <__aeabi_dsub+0x678>
 8002126:	e631      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8002128:	464a      	mov	r2, r9
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <__aeabi_dsub+0x6d8>)
 800212c:	401a      	ands	r2, r3
 800212e:	2301      	movs	r3, #1
 8002130:	4691      	mov	r9, r2
 8002132:	4698      	mov	r8, r3
 8002134:	e62a      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8002136:	0016      	movs	r6, r2
 8002138:	4664      	mov	r4, ip
 800213a:	3e20      	subs	r6, #32
 800213c:	40f4      	lsrs	r4, r6
 800213e:	46a0      	mov	r8, r4
 8002140:	2a20      	cmp	r2, #32
 8002142:	d005      	beq.n	8002150 <__aeabi_dsub+0x6a0>
 8002144:	2640      	movs	r6, #64	; 0x40
 8002146:	4664      	mov	r4, ip
 8002148:	1ab2      	subs	r2, r6, r2
 800214a:	4094      	lsls	r4, r2
 800214c:	4323      	orrs	r3, r4
 800214e:	469a      	mov	sl, r3
 8002150:	4654      	mov	r4, sl
 8002152:	1e63      	subs	r3, r4, #1
 8002154:	419c      	sbcs	r4, r3
 8002156:	4643      	mov	r3, r8
 8002158:	431c      	orrs	r4, r3
 800215a:	e5db      	b.n	8001d14 <__aeabi_dsub+0x264>
 800215c:	0002      	movs	r2, r0
 800215e:	2400      	movs	r4, #0
 8002160:	2300      	movs	r3, #0
 8002162:	e548      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8002164:	19dc      	adds	r4, r3, r7
 8002166:	42bc      	cmp	r4, r7
 8002168:	41bf      	sbcs	r7, r7
 800216a:	4461      	add	r1, ip
 800216c:	4689      	mov	r9, r1
 800216e:	427f      	negs	r7, r7
 8002170:	44b9      	add	r9, r7
 8002172:	e738      	b.n	8001fe6 <__aeabi_dsub+0x536>
 8002174:	464b      	mov	r3, r9
 8002176:	4323      	orrs	r3, r4
 8002178:	d100      	bne.n	800217c <__aeabi_dsub+0x6cc>
 800217a:	e69f      	b.n	8001ebc <__aeabi_dsub+0x40c>
 800217c:	e606      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	000007fe 	.word	0x000007fe
 8002184:	000007ff 	.word	0x000007ff
 8002188:	ff7fffff 	.word	0xff7fffff
 800218c:	08ff      	lsrs	r7, r7, #3
 800218e:	074b      	lsls	r3, r1, #29
 8002190:	433b      	orrs	r3, r7
 8002192:	08cc      	lsrs	r4, r1, #3
 8002194:	e616      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002196:	4662      	mov	r2, ip
 8002198:	08db      	lsrs	r3, r3, #3
 800219a:	0752      	lsls	r2, r2, #29
 800219c:	4313      	orrs	r3, r2
 800219e:	4662      	mov	r2, ip
 80021a0:	08d4      	lsrs	r4, r2, #3
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	0312      	lsls	r2, r2, #12
 80021a6:	4214      	tst	r4, r2
 80021a8:	d007      	beq.n	80021ba <__aeabi_dsub+0x70a>
 80021aa:	08c8      	lsrs	r0, r1, #3
 80021ac:	4210      	tst	r0, r2
 80021ae:	d104      	bne.n	80021ba <__aeabi_dsub+0x70a>
 80021b0:	465d      	mov	r5, fp
 80021b2:	0004      	movs	r4, r0
 80021b4:	08fb      	lsrs	r3, r7, #3
 80021b6:	0749      	lsls	r1, r1, #29
 80021b8:	430b      	orrs	r3, r1
 80021ba:	0f5a      	lsrs	r2, r3, #29
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	0752      	lsls	r2, r2, #29
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	e5fe      	b.n	8001dc4 <__aeabi_dsub+0x314>
 80021c6:	2300      	movs	r3, #0
 80021c8:	4a01      	ldr	r2, [pc, #4]	; (80021d0 <__aeabi_dsub+0x720>)
 80021ca:	001c      	movs	r4, r3
 80021cc:	e513      	b.n	8001bf6 <__aeabi_dsub+0x146>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	000007ff 	.word	0x000007ff

080021d4 <__aeabi_dcmpun>:
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	0005      	movs	r5, r0
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <__aeabi_dcmpun+0x38>)
 80021da:	031c      	lsls	r4, r3, #12
 80021dc:	0016      	movs	r6, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	030a      	lsls	r2, r1, #12
 80021e2:	0049      	lsls	r1, r1, #1
 80021e4:	0b12      	lsrs	r2, r2, #12
 80021e6:	0d49      	lsrs	r1, r1, #21
 80021e8:	0b24      	lsrs	r4, r4, #12
 80021ea:	0d5b      	lsrs	r3, r3, #21
 80021ec:	4281      	cmp	r1, r0
 80021ee:	d008      	beq.n	8002202 <__aeabi_dcmpun+0x2e>
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <__aeabi_dcmpun+0x38>)
 80021f2:	2000      	movs	r0, #0
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <__aeabi_dcmpun+0x2c>
 80021f8:	0020      	movs	r0, r4
 80021fa:	4330      	orrs	r0, r6
 80021fc:	1e43      	subs	r3, r0, #1
 80021fe:	4198      	sbcs	r0, r3
 8002200:	bd70      	pop	{r4, r5, r6, pc}
 8002202:	2001      	movs	r0, #1
 8002204:	432a      	orrs	r2, r5
 8002206:	d1fb      	bne.n	8002200 <__aeabi_dcmpun+0x2c>
 8002208:	e7f2      	b.n	80021f0 <__aeabi_dcmpun+0x1c>
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	000007ff 	.word	0x000007ff

08002210 <__aeabi_d2iz>:
 8002210:	000a      	movs	r2, r1
 8002212:	b530      	push	{r4, r5, lr}
 8002214:	4c13      	ldr	r4, [pc, #76]	; (8002264 <__aeabi_d2iz+0x54>)
 8002216:	0053      	lsls	r3, r2, #1
 8002218:	0309      	lsls	r1, r1, #12
 800221a:	0005      	movs	r5, r0
 800221c:	0b09      	lsrs	r1, r1, #12
 800221e:	2000      	movs	r0, #0
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	0fd2      	lsrs	r2, r2, #31
 8002224:	42a3      	cmp	r3, r4
 8002226:	dd04      	ble.n	8002232 <__aeabi_d2iz+0x22>
 8002228:	480f      	ldr	r0, [pc, #60]	; (8002268 <__aeabi_d2iz+0x58>)
 800222a:	4283      	cmp	r3, r0
 800222c:	dd02      	ble.n	8002234 <__aeabi_d2iz+0x24>
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <__aeabi_d2iz+0x5c>)
 8002230:	18d0      	adds	r0, r2, r3
 8002232:	bd30      	pop	{r4, r5, pc}
 8002234:	2080      	movs	r0, #128	; 0x80
 8002236:	0340      	lsls	r0, r0, #13
 8002238:	4301      	orrs	r1, r0
 800223a:	480d      	ldr	r0, [pc, #52]	; (8002270 <__aeabi_d2iz+0x60>)
 800223c:	1ac0      	subs	r0, r0, r3
 800223e:	281f      	cmp	r0, #31
 8002240:	dd08      	ble.n	8002254 <__aeabi_d2iz+0x44>
 8002242:	480c      	ldr	r0, [pc, #48]	; (8002274 <__aeabi_d2iz+0x64>)
 8002244:	1ac3      	subs	r3, r0, r3
 8002246:	40d9      	lsrs	r1, r3
 8002248:	000b      	movs	r3, r1
 800224a:	4258      	negs	r0, r3
 800224c:	2a00      	cmp	r2, #0
 800224e:	d1f0      	bne.n	8002232 <__aeabi_d2iz+0x22>
 8002250:	0018      	movs	r0, r3
 8002252:	e7ee      	b.n	8002232 <__aeabi_d2iz+0x22>
 8002254:	4c08      	ldr	r4, [pc, #32]	; (8002278 <__aeabi_d2iz+0x68>)
 8002256:	40c5      	lsrs	r5, r0
 8002258:	46a4      	mov	ip, r4
 800225a:	4463      	add	r3, ip
 800225c:	4099      	lsls	r1, r3
 800225e:	000b      	movs	r3, r1
 8002260:	432b      	orrs	r3, r5
 8002262:	e7f2      	b.n	800224a <__aeabi_d2iz+0x3a>
 8002264:	000003fe 	.word	0x000003fe
 8002268:	0000041d 	.word	0x0000041d
 800226c:	7fffffff 	.word	0x7fffffff
 8002270:	00000433 	.word	0x00000433
 8002274:	00000413 	.word	0x00000413
 8002278:	fffffbed 	.word	0xfffffbed

0800227c <__aeabi_i2d>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2800      	cmp	r0, #0
 8002280:	d016      	beq.n	80022b0 <__aeabi_i2d+0x34>
 8002282:	17c3      	asrs	r3, r0, #31
 8002284:	18c5      	adds	r5, r0, r3
 8002286:	405d      	eors	r5, r3
 8002288:	0fc4      	lsrs	r4, r0, #31
 800228a:	0028      	movs	r0, r5
 800228c:	f000 f8d4 	bl	8002438 <__clzsi2>
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <__aeabi_i2d+0x5c>)
 8002292:	1a12      	subs	r2, r2, r0
 8002294:	280a      	cmp	r0, #10
 8002296:	dc16      	bgt.n	80022c6 <__aeabi_i2d+0x4a>
 8002298:	0003      	movs	r3, r0
 800229a:	002e      	movs	r6, r5
 800229c:	3315      	adds	r3, #21
 800229e:	409e      	lsls	r6, r3
 80022a0:	230b      	movs	r3, #11
 80022a2:	1a18      	subs	r0, r3, r0
 80022a4:	40c5      	lsrs	r5, r0
 80022a6:	0552      	lsls	r2, r2, #21
 80022a8:	032d      	lsls	r5, r5, #12
 80022aa:	0b2d      	lsrs	r5, r5, #12
 80022ac:	0d53      	lsrs	r3, r2, #21
 80022ae:	e003      	b.n	80022b8 <__aeabi_i2d+0x3c>
 80022b0:	2400      	movs	r4, #0
 80022b2:	2300      	movs	r3, #0
 80022b4:	2500      	movs	r5, #0
 80022b6:	2600      	movs	r6, #0
 80022b8:	051b      	lsls	r3, r3, #20
 80022ba:	432b      	orrs	r3, r5
 80022bc:	07e4      	lsls	r4, r4, #31
 80022be:	4323      	orrs	r3, r4
 80022c0:	0030      	movs	r0, r6
 80022c2:	0019      	movs	r1, r3
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	380b      	subs	r0, #11
 80022c8:	4085      	lsls	r5, r0
 80022ca:	0552      	lsls	r2, r2, #21
 80022cc:	032d      	lsls	r5, r5, #12
 80022ce:	2600      	movs	r6, #0
 80022d0:	0b2d      	lsrs	r5, r5, #12
 80022d2:	0d53      	lsrs	r3, r2, #21
 80022d4:	e7f0      	b.n	80022b8 <__aeabi_i2d+0x3c>
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	0000041e 	.word	0x0000041e

080022dc <__aeabi_ui2d>:
 80022dc:	b510      	push	{r4, lr}
 80022de:	1e04      	subs	r4, r0, #0
 80022e0:	d010      	beq.n	8002304 <__aeabi_ui2d+0x28>
 80022e2:	f000 f8a9 	bl	8002438 <__clzsi2>
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <__aeabi_ui2d+0x48>)
 80022e8:	1a1b      	subs	r3, r3, r0
 80022ea:	280a      	cmp	r0, #10
 80022ec:	dc11      	bgt.n	8002312 <__aeabi_ui2d+0x36>
 80022ee:	220b      	movs	r2, #11
 80022f0:	0021      	movs	r1, r4
 80022f2:	1a12      	subs	r2, r2, r0
 80022f4:	40d1      	lsrs	r1, r2
 80022f6:	3015      	adds	r0, #21
 80022f8:	030a      	lsls	r2, r1, #12
 80022fa:	055b      	lsls	r3, r3, #21
 80022fc:	4084      	lsls	r4, r0
 80022fe:	0b12      	lsrs	r2, r2, #12
 8002300:	0d5b      	lsrs	r3, r3, #21
 8002302:	e001      	b.n	8002308 <__aeabi_ui2d+0x2c>
 8002304:	2300      	movs	r3, #0
 8002306:	2200      	movs	r2, #0
 8002308:	051b      	lsls	r3, r3, #20
 800230a:	4313      	orrs	r3, r2
 800230c:	0020      	movs	r0, r4
 800230e:	0019      	movs	r1, r3
 8002310:	bd10      	pop	{r4, pc}
 8002312:	0022      	movs	r2, r4
 8002314:	380b      	subs	r0, #11
 8002316:	4082      	lsls	r2, r0
 8002318:	055b      	lsls	r3, r3, #21
 800231a:	0312      	lsls	r2, r2, #12
 800231c:	2400      	movs	r4, #0
 800231e:	0b12      	lsrs	r2, r2, #12
 8002320:	0d5b      	lsrs	r3, r3, #21
 8002322:	e7f1      	b.n	8002308 <__aeabi_ui2d+0x2c>
 8002324:	0000041e 	.word	0x0000041e

08002328 <__aeabi_d2f>:
 8002328:	0002      	movs	r2, r0
 800232a:	004b      	lsls	r3, r1, #1
 800232c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232e:	0d5b      	lsrs	r3, r3, #21
 8002330:	030c      	lsls	r4, r1, #12
 8002332:	4e3d      	ldr	r6, [pc, #244]	; (8002428 <__aeabi_d2f+0x100>)
 8002334:	0a64      	lsrs	r4, r4, #9
 8002336:	0f40      	lsrs	r0, r0, #29
 8002338:	1c5f      	adds	r7, r3, #1
 800233a:	0fc9      	lsrs	r1, r1, #31
 800233c:	4304      	orrs	r4, r0
 800233e:	00d5      	lsls	r5, r2, #3
 8002340:	4237      	tst	r7, r6
 8002342:	d00a      	beq.n	800235a <__aeabi_d2f+0x32>
 8002344:	4839      	ldr	r0, [pc, #228]	; (800242c <__aeabi_d2f+0x104>)
 8002346:	181e      	adds	r6, r3, r0
 8002348:	2efe      	cmp	r6, #254	; 0xfe
 800234a:	dd16      	ble.n	800237a <__aeabi_d2f+0x52>
 800234c:	20ff      	movs	r0, #255	; 0xff
 800234e:	2400      	movs	r4, #0
 8002350:	05c0      	lsls	r0, r0, #23
 8002352:	4320      	orrs	r0, r4
 8002354:	07c9      	lsls	r1, r1, #31
 8002356:	4308      	orrs	r0, r1
 8002358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <__aeabi_d2f+0x44>
 800235e:	432c      	orrs	r4, r5
 8002360:	d026      	beq.n	80023b0 <__aeabi_d2f+0x88>
 8002362:	2205      	movs	r2, #5
 8002364:	0192      	lsls	r2, r2, #6
 8002366:	0a54      	lsrs	r4, r2, #9
 8002368:	b2d8      	uxtb	r0, r3
 800236a:	e7f1      	b.n	8002350 <__aeabi_d2f+0x28>
 800236c:	4325      	orrs	r5, r4
 800236e:	d0ed      	beq.n	800234c <__aeabi_d2f+0x24>
 8002370:	2080      	movs	r0, #128	; 0x80
 8002372:	03c0      	lsls	r0, r0, #15
 8002374:	4304      	orrs	r4, r0
 8002376:	20ff      	movs	r0, #255	; 0xff
 8002378:	e7ea      	b.n	8002350 <__aeabi_d2f+0x28>
 800237a:	2e00      	cmp	r6, #0
 800237c:	dd1b      	ble.n	80023b6 <__aeabi_d2f+0x8e>
 800237e:	0192      	lsls	r2, r2, #6
 8002380:	1e53      	subs	r3, r2, #1
 8002382:	419a      	sbcs	r2, r3
 8002384:	00e4      	lsls	r4, r4, #3
 8002386:	0f6d      	lsrs	r5, r5, #29
 8002388:	4322      	orrs	r2, r4
 800238a:	432a      	orrs	r2, r5
 800238c:	0753      	lsls	r3, r2, #29
 800238e:	d048      	beq.n	8002422 <__aeabi_d2f+0xfa>
 8002390:	230f      	movs	r3, #15
 8002392:	4013      	ands	r3, r2
 8002394:	2b04      	cmp	r3, #4
 8002396:	d000      	beq.n	800239a <__aeabi_d2f+0x72>
 8002398:	3204      	adds	r2, #4
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	04db      	lsls	r3, r3, #19
 800239e:	4013      	ands	r3, r2
 80023a0:	d03f      	beq.n	8002422 <__aeabi_d2f+0xfa>
 80023a2:	1c70      	adds	r0, r6, #1
 80023a4:	2efe      	cmp	r6, #254	; 0xfe
 80023a6:	d0d1      	beq.n	800234c <__aeabi_d2f+0x24>
 80023a8:	0192      	lsls	r2, r2, #6
 80023aa:	0a54      	lsrs	r4, r2, #9
 80023ac:	b2c0      	uxtb	r0, r0
 80023ae:	e7cf      	b.n	8002350 <__aeabi_d2f+0x28>
 80023b0:	2000      	movs	r0, #0
 80023b2:	2400      	movs	r4, #0
 80023b4:	e7cc      	b.n	8002350 <__aeabi_d2f+0x28>
 80023b6:	0032      	movs	r2, r6
 80023b8:	3217      	adds	r2, #23
 80023ba:	db22      	blt.n	8002402 <__aeabi_d2f+0xda>
 80023bc:	2080      	movs	r0, #128	; 0x80
 80023be:	0400      	lsls	r0, r0, #16
 80023c0:	4320      	orrs	r0, r4
 80023c2:	241e      	movs	r4, #30
 80023c4:	1ba4      	subs	r4, r4, r6
 80023c6:	2c1f      	cmp	r4, #31
 80023c8:	dd1d      	ble.n	8002406 <__aeabi_d2f+0xde>
 80023ca:	2202      	movs	r2, #2
 80023cc:	4252      	negs	r2, r2
 80023ce:	1b96      	subs	r6, r2, r6
 80023d0:	0002      	movs	r2, r0
 80023d2:	40f2      	lsrs	r2, r6
 80023d4:	0016      	movs	r6, r2
 80023d6:	2c20      	cmp	r4, #32
 80023d8:	d004      	beq.n	80023e4 <__aeabi_d2f+0xbc>
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <__aeabi_d2f+0x108>)
 80023dc:	4694      	mov	ip, r2
 80023de:	4463      	add	r3, ip
 80023e0:	4098      	lsls	r0, r3
 80023e2:	4305      	orrs	r5, r0
 80023e4:	002a      	movs	r2, r5
 80023e6:	1e53      	subs	r3, r2, #1
 80023e8:	419a      	sbcs	r2, r3
 80023ea:	4332      	orrs	r2, r6
 80023ec:	2600      	movs	r6, #0
 80023ee:	0753      	lsls	r3, r2, #29
 80023f0:	d1ce      	bne.n	8002390 <__aeabi_d2f+0x68>
 80023f2:	2480      	movs	r4, #128	; 0x80
 80023f4:	0013      	movs	r3, r2
 80023f6:	04e4      	lsls	r4, r4, #19
 80023f8:	2001      	movs	r0, #1
 80023fa:	4023      	ands	r3, r4
 80023fc:	4222      	tst	r2, r4
 80023fe:	d1d3      	bne.n	80023a8 <__aeabi_d2f+0x80>
 8002400:	e7b0      	b.n	8002364 <__aeabi_d2f+0x3c>
 8002402:	2300      	movs	r3, #0
 8002404:	e7ad      	b.n	8002362 <__aeabi_d2f+0x3a>
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <__aeabi_d2f+0x10c>)
 8002408:	4694      	mov	ip, r2
 800240a:	002a      	movs	r2, r5
 800240c:	40e2      	lsrs	r2, r4
 800240e:	0014      	movs	r4, r2
 8002410:	002a      	movs	r2, r5
 8002412:	4463      	add	r3, ip
 8002414:	409a      	lsls	r2, r3
 8002416:	4098      	lsls	r0, r3
 8002418:	1e55      	subs	r5, r2, #1
 800241a:	41aa      	sbcs	r2, r5
 800241c:	4302      	orrs	r2, r0
 800241e:	4322      	orrs	r2, r4
 8002420:	e7e4      	b.n	80023ec <__aeabi_d2f+0xc4>
 8002422:	0033      	movs	r3, r6
 8002424:	e79e      	b.n	8002364 <__aeabi_d2f+0x3c>
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	000007fe 	.word	0x000007fe
 800242c:	fffffc80 	.word	0xfffffc80
 8002430:	fffffca2 	.word	0xfffffca2
 8002434:	fffffc82 	.word	0xfffffc82

08002438 <__clzsi2>:
 8002438:	211c      	movs	r1, #28
 800243a:	2301      	movs	r3, #1
 800243c:	041b      	lsls	r3, r3, #16
 800243e:	4298      	cmp	r0, r3
 8002440:	d301      	bcc.n	8002446 <__clzsi2+0xe>
 8002442:	0c00      	lsrs	r0, r0, #16
 8002444:	3910      	subs	r1, #16
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	4298      	cmp	r0, r3
 800244a:	d301      	bcc.n	8002450 <__clzsi2+0x18>
 800244c:	0a00      	lsrs	r0, r0, #8
 800244e:	3908      	subs	r1, #8
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	4298      	cmp	r0, r3
 8002454:	d301      	bcc.n	800245a <__clzsi2+0x22>
 8002456:	0900      	lsrs	r0, r0, #4
 8002458:	3904      	subs	r1, #4
 800245a:	a202      	add	r2, pc, #8	; (adr r2, 8002464 <__clzsi2+0x2c>)
 800245c:	5c10      	ldrb	r0, [r2, r0]
 800245e:	1840      	adds	r0, r0, r1
 8002460:	4770      	bx	lr
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	02020304 	.word	0x02020304
 8002468:	01010101 	.word	0x01010101
	...

08002474 <__clzdi2>:
 8002474:	b510      	push	{r4, lr}
 8002476:	2900      	cmp	r1, #0
 8002478:	d103      	bne.n	8002482 <__clzdi2+0xe>
 800247a:	f7ff ffdd 	bl	8002438 <__clzsi2>
 800247e:	3020      	adds	r0, #32
 8002480:	e002      	b.n	8002488 <__clzdi2+0x14>
 8002482:	0008      	movs	r0, r1
 8002484:	f7ff ffd8 	bl	8002438 <__clzsi2>
 8002488:	bd10      	pop	{r4, pc}
 800248a:	46c0      	nop			; (mov r8, r8)

0800248c <new_adc_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hadc is the adc and _total_ranks are the total ranks.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ADCSensor object
ADCSensor *new_adc_sensor(ADC_HandleTypeDef *hadc, uint8_t _total_ranks) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	000a      	movs	r2, r1
 8002496:	1cfb      	adds	r3, r7, #3
 8002498:	701a      	strb	r2, [r3, #0]
    ADCSensor *adc_sensor = (ADCSensor*) malloc(sizeof(ADCSensor));
 800249a:	201c      	movs	r0, #28
 800249c:	f005 f84a 	bl	8007534 <malloc>
 80024a0:	0003      	movs	r3, r0
 80024a2:	60bb      	str	r3, [r7, #8]
    adc_sensor->adc = hadc;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	601a      	str	r2, [r3, #0]
    adc_sensor->total_ranks = _total_ranks;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1cfa      	adds	r2, r7, #3
 80024ae:	7812      	ldrb	r2, [r2, #0]
 80024b0:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 80024b2:	230f      	movs	r3, #15
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e00d      	b.n	80024d8 <new_adc_sensor+0x4c>
        adc_sensor->values[i] = 0;
 80024bc:	210f      	movs	r1, #15
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	18d3      	adds	r3, r2, r3
 80024c8:	3306      	adds	r3, #6
 80024ca:	2200      	movs	r2, #0
 80024cc:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	187a      	adds	r2, r7, r1
 80024d2:	7812      	ldrb	r2, [r2, #0]
 80024d4:	3201      	adds	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	230f      	movs	r3, #15
 80024da:	18fa      	adds	r2, r7, r3
 80024dc:	1cfb      	adds	r3, r7, #3
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d3ea      	bcc.n	80024bc <new_adc_sensor+0x30>
    }
    return adc_sensor;
 80024e6:	68bb      	ldr	r3, [r7, #8]
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b004      	add	sp, #16
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <get_adc_sensor_value>:

// REQUIRES: adc_sensor is an ADCSensor object and rank is the index
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint16_t get_adc_sensor_value(ADCSensor *adc_sensor, uint8_t rank) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	000a      	movs	r2, r1
 80024fa:	1cfb      	adds	r3, r7, #3
 80024fc:	701a      	strb	r2, [r3, #0]
    return adc_sensor->values[rank];
 80024fe:	1cfb      	adds	r3, r7, #3
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	18d3      	adds	r3, r2, r3
 8002508:	3306      	adds	r3, #6
 800250a:	881b      	ldrh	r3, [r3, #0]
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <update_adc_sensor_values>:

// REQUIRES: adc_sensor is an ADCSensor object
// MODIFIES: values
// EFFECTS: Updates the stored value of value.
void update_adc_sensor_values(ADCSensor *adc_sensor) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	e00b      	b.n	800253a <update_adc_sensor_values+0x26>
		HAL_ADC_Start_DMA(adc_sensor->adc, adc_sensor->values, adc_sensor->total_ranks);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	1d99      	adds	r1, r3, #6
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	791b      	ldrb	r3, [r3, #4]
 800252e:	001a      	movs	r2, r3
 8002530:	f001 fd66 	bl	8004000 <HAL_ADC_Start_DMA>
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3301      	adds	r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	791b      	ldrb	r3, [r3, #4]
 800253e:	001a      	movs	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4293      	cmp	r3, r2
 8002544:	dbed      	blt.n	8002522 <update_adc_sensor_values+0xe>
	}
}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b004      	add	sp, #16
 800254e:	bd80      	pop	{r7, pc}

08002550 <new_battery_buzzer>:
#include "battery_buzzer.h"

// REQUIRES: _buzzer_pin is the buzzer pin
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created BatteryBuzzer object
BatteryBuzzer *new_battery_buzzer(PinData *_buzzer_pin, PinData *_battery_led_pin) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	BatteryBuzzer *battery_buzzer = (BatteryBuzzer*) malloc(sizeof(BatteryBuzzer));
 800255a:	2010      	movs	r0, #16
 800255c:	f004 ffea 	bl	8007534 <malloc>
 8002560:	0003      	movs	r3, r0
 8002562:	60fb      	str	r3, [r7, #12]
	battery_buzzer->buzzer_pin = _buzzer_pin;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
	battery_buzzer->battery_led_pin = _battery_led_pin;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	605a      	str	r2, [r3, #4]
	battery_buzzer->ms_since_period_cycle = 0;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
	battery_buzzer->battery_data = 5;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2205      	movs	r2, #5
 800257a:	731a      	strb	r2, [r3, #12]
	return battery_buzzer;
 800257c:	68fb      	ldr	r3, [r7, #12]
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <update_battery_buzzer_logic>:
// EFFECTS: Updates the logic of the battery buzzer.
// It will buzz for 1 second every 3 seconds if no battery.
// It will buzz for 1 second every 5 seconds if extremely low.
// It will buzz for 1 second every 15 seconds if low.
// This function is expected to be called every 2 ms.
void update_battery_buzzer_logic(BatteryBuzzer *battery_buzzer) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	switch (battery_buzzer->battery_data) {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7b1b      	ldrb	r3, [r3, #12]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d054      	beq.n	8002642 <update_battery_buzzer_logic+0xba>
 8002598:	dd00      	ble.n	800259c <update_battery_buzzer_logic+0x14>
 800259a:	e079      	b.n	8002690 <update_battery_buzzer_logic+0x108>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <update_battery_buzzer_logic+0x1e>
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d027      	beq.n	80025f4 <update_battery_buzzer_logic+0x6c>
 80025a4:	e074      	b.n	8002690 <update_battery_buzzer_logic+0x108>
	case NO_BATTERY_DATA:
		change_battery_led(battery_buzzer, true);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2101      	movs	r1, #1
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 f8a6 	bl	80026fc <change_battery_led>
		if (battery_buzzer->ms_since_period_cycle == 0) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <update_battery_buzzer_logic+0x3c>
			change_battery_buzzer_noise_val(battery_buzzer, true);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2101      	movs	r1, #1
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 f88a 	bl	80026d6 <change_battery_buzzer_noise_val>
 80025c2:	e00a      	b.n	80025da <update_battery_buzzer_logic+0x52>
		}
		else if (battery_buzzer->ms_since_period_cycle == BATTERY_BUZZ_TIME_MS) {
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	23fa      	movs	r3, #250	; 0xfa
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d104      	bne.n	80025da <update_battery_buzzer_logic+0x52>
			change_battery_buzzer_noise_val(battery_buzzer, false);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2100      	movs	r1, #0
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 f87e 	bl	80026d6 <change_battery_buzzer_noise_val>
		}
		battery_buzzer->ms_since_period_cycle =
				battery_buzzer->ms_since_period_cycle == NO_BATTERY_PERIOD_MS ?
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
						0 : battery_buzzer->ms_since_period_cycle + 2;
 80025de:	4a33      	ldr	r2, [pc, #204]	; (80026ac <update_battery_buzzer_logic+0x124>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d003      	beq.n	80025ec <update_battery_buzzer_logic+0x64>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	1c9a      	adds	r2, r3, #2
 80025ea:	e000      	b.n	80025ee <update_battery_buzzer_logic+0x66>
 80025ec:	2200      	movs	r2, #0
		battery_buzzer->ms_since_period_cycle =
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	609a      	str	r2, [r3, #8]
		break;
 80025f2:	e056      	b.n	80026a2 <update_battery_buzzer_logic+0x11a>
	case CRITICALLY_LOW_BATTERY_DATA:
		change_battery_led(battery_buzzer, true);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2101      	movs	r1, #1
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f87f 	bl	80026fc <change_battery_led>
		if (battery_buzzer->ms_since_period_cycle == 0) {
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <update_battery_buzzer_logic+0x8a>
			change_battery_buzzer_noise_val(battery_buzzer, true);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2101      	movs	r1, #1
 800260a:	0018      	movs	r0, r3
 800260c:	f000 f863 	bl	80026d6 <change_battery_buzzer_noise_val>
 8002610:	e00a      	b.n	8002628 <update_battery_buzzer_logic+0xa0>
		}
		else if (battery_buzzer->ms_since_period_cycle == BATTERY_BUZZ_TIME_MS) {
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	23fa      	movs	r3, #250	; 0xfa
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	429a      	cmp	r2, r3
 800261c:	d104      	bne.n	8002628 <update_battery_buzzer_logic+0xa0>
			change_battery_buzzer_noise_val(battery_buzzer, false);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2100      	movs	r1, #0
 8002622:	0018      	movs	r0, r3
 8002624:	f000 f857 	bl	80026d6 <change_battery_buzzer_noise_val>
		}
		battery_buzzer->ms_since_period_cycle =
				battery_buzzer->ms_since_period_cycle == CRITICALLY_LOW_BATTERY_BUZZ_PERIOD_MS ?
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
						0 : battery_buzzer->ms_since_period_cycle + 2;
 800262c:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <update_battery_buzzer_logic+0x128>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d003      	beq.n	800263a <update_battery_buzzer_logic+0xb2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	1c9a      	adds	r2, r3, #2
 8002638:	e000      	b.n	800263c <update_battery_buzzer_logic+0xb4>
 800263a:	2200      	movs	r2, #0
		battery_buzzer->ms_since_period_cycle =
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	609a      	str	r2, [r3, #8]
		break;
 8002640:	e02f      	b.n	80026a2 <update_battery_buzzer_logic+0x11a>
	case LOW_BATTERY_DATA:
		change_battery_led(battery_buzzer, true);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2101      	movs	r1, #1
 8002646:	0018      	movs	r0, r3
 8002648:	f000 f858 	bl	80026fc <change_battery_led>
		if (battery_buzzer->ms_since_period_cycle == 0) {
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <update_battery_buzzer_logic+0xd8>
			change_battery_buzzer_noise_val(battery_buzzer, true);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2101      	movs	r1, #1
 8002658:	0018      	movs	r0, r3
 800265a:	f000 f83c 	bl	80026d6 <change_battery_buzzer_noise_val>
 800265e:	e00a      	b.n	8002676 <update_battery_buzzer_logic+0xee>
		}
		else if (battery_buzzer->ms_since_period_cycle == BATTERY_BUZZ_TIME_MS) {
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	23fa      	movs	r3, #250	; 0xfa
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d104      	bne.n	8002676 <update_battery_buzzer_logic+0xee>
			change_battery_buzzer_noise_val(battery_buzzer, false);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2100      	movs	r1, #0
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f830 	bl	80026d6 <change_battery_buzzer_noise_val>
		}
		battery_buzzer->ms_since_period_cycle =
				battery_buzzer->ms_since_period_cycle == LOW_BATTERY_BUZZ_PERIOD_MS ?
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
						0 : battery_buzzer->ms_since_period_cycle + 2;
 800267a:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <update_battery_buzzer_logic+0x12c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <update_battery_buzzer_logic+0x100>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	1c9a      	adds	r2, r3, #2
 8002686:	e000      	b.n	800268a <update_battery_buzzer_logic+0x102>
 8002688:	2200      	movs	r2, #0
		battery_buzzer->ms_since_period_cycle =
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	609a      	str	r2, [r3, #8]
		break;
 800268e:	e008      	b.n	80026a2 <update_battery_buzzer_logic+0x11a>
	default:
		battery_buzzer->ms_since_period_cycle = 0;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
		change_battery_led(battery_buzzer, false);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2100      	movs	r1, #0
 800269a:	0018      	movs	r0, r3
 800269c:	f000 f82e 	bl	80026fc <change_battery_led>
		break;
 80026a0:	46c0      	nop			; (mov r8, r8)
	}
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b002      	add	sp, #8
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	00000bb8 	.word	0x00000bb8
 80026b0:	00001388 	.word	0x00001388
 80026b4:	00003a98 	.word	0x00003a98

080026b8 <change_battery_buzzer_data>:
// REQUIRES: battery_buzzer is an object and data is the new battery data.
// Data should be 0 for no battery, 1 for critically low battery,
// 2 for low battery, and 3/4/5 for others values.
// MODIFIES: nothing
// EFFECTS: Updates the battery buzzer data
void change_battery_buzzer_data(BatteryBuzzer *battery_buzzer, uint8_t data) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	000a      	movs	r2, r1
 80026c2:	1cfb      	adds	r3, r7, #3
 80026c4:	701a      	strb	r2, [r3, #0]
	battery_buzzer->battery_data = data;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	1cfa      	adds	r2, r7, #3
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	731a      	strb	r2, [r3, #12]
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b002      	add	sp, #8
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <change_battery_buzzer_noise_val>:

// REQUIRES: battery_buzzer is an object and val is if it should be on or off.
// MODIFIES: nothing
// EFFECTS: Changes the output noise of the battery buzzer.
void change_battery_buzzer_noise_val(BatteryBuzzer *battery_buzzer, bool val) {
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	000a      	movs	r2, r1
 80026e0:	1cfb      	adds	r3, r7, #3
 80026e2:	701a      	strb	r2, [r3, #0]
	set_pin_value(battery_buzzer->buzzer_pin, val);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	1cfb      	adds	r3, r7, #3
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	0019      	movs	r1, r3
 80026ee:	0010      	movs	r0, r2
 80026f0:	f000 fd73 	bl	80031da <set_pin_value>
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b002      	add	sp, #8
 80026fa:	bd80      	pop	{r7, pc}

080026fc <change_battery_led>:

// REQUIRES: battery_buzzer is an object and val is if it should be on or off.
// MODIFIES: nothing
// EFFECTS: Turns the battery led on or off.
void change_battery_led(BatteryBuzzer *battery_buzzer, bool val) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	000a      	movs	r2, r1
 8002706:	1cfb      	adds	r3, r7, #3
 8002708:	701a      	strb	r2, [r3, #0]
	set_pin_value(battery_buzzer->battery_led_pin, val);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	1cfb      	adds	r3, r7, #3
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	0019      	movs	r1, r3
 8002714:	0010      	movs	r0, r2
 8002716:	f000 fd60 	bl	80031da <set_pin_value>
}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46bd      	mov	sp, r7
 800271e:	b002      	add	sp, #8
 8002720:	bd80      	pop	{r7, pc}

08002722 <new_wireless>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: huart is a UART channel
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Wireless object
Wireless *new_wireless(UART_HandleTypeDef *huart) {
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	Wireless *wireless = (Wireless*) malloc(sizeof(Wireless));
 800272a:	2018      	movs	r0, #24
 800272c:	f004 ff02 	bl	8007534 <malloc>
 8002730:	0003      	movs	r3, r0
 8002732:	60fb      	str	r3, [r7, #12]
	wireless->uart = huart;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	601a      	str	r2, [r3, #0]
	return wireless;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b004      	add	sp, #16
 8002742:	bd80      	pop	{r7, pc}

08002744 <send_wireless_trigger_input>:
// REQUIRES: wireless is a Wireless object
// and trigger_input is an int from 0 to 64
// of the arm in degrees
// MODIFIES: Nothing
// EFFECTS: Sends trigger input command over wireless
void send_wireless_trigger_input(Wireless *wireless, int trigger_input) {
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
	char string[10];
	sprintf((char *)string, "T%iET%iE", trigger_input, trigger_input);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	4907      	ldr	r1, [pc, #28]	; (8002770 <send_wireless_trigger_input+0x2c>)
 8002754:	240c      	movs	r4, #12
 8002756:	1938      	adds	r0, r7, r4
 8002758:	f005 fe76 	bl	8008448 <siprintf>
	send_wireless_string_10(wireless, string);
 800275c:	193a      	adds	r2, r7, r4
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0011      	movs	r1, r2
 8002762:	0018      	movs	r0, r3
 8002764:	f000 f8c5 	bl	80028f2 <send_wireless_string_10>
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b007      	add	sp, #28
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	0800bfc0 	.word	0x0800bfc0

08002774 <parse_wireless_message>:

// REQUIRES: wireless and display are objects
// MODIFIES: Nothing
// EFFECTS: Attempts to parse data based on wireless buffer and returns true if success
bool parse_wireless_message(Wireless *wireless, Display* display, char start_char) {
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b08d      	sub	sp, #52	; 0x34
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	701a      	strb	r2, [r3, #0]
	int start_of_transmit = -1;
 8002782:	2301      	movs	r3, #1
 8002784:	425b      	negs	r3, r3
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
	int end_of_transmit = -1;
 8002788:	2301      	movs	r3, #1
 800278a:	425b      	negs	r3, r3
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i = 0; i < sizeof(wireless->uart_buffer) - 1; ++i) {
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	e01c      	b.n	80027ce <parse_wireless_message+0x5a>
		if (wireless->uart_buffer[i] == start_char && isdigit(wireless->uart_buffer[i + 1])) {
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	18d3      	adds	r3, r2, r3
 800279a:	3304      	adds	r3, #4
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	1dfa      	adds	r2, r7, #7
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d110      	bne.n	80027c8 <parse_wireless_message+0x54>
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	3301      	adds	r3, #1
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	18d3      	adds	r3, r2, r3
 80027ae:	791b      	ldrb	r3, [r3, #4]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <parse_wireless_message+0xf0>)
 80027b4:	18d3      	adds	r3, r2, r3
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	001a      	movs	r2, r3
 80027ba:	2304      	movs	r3, #4
 80027bc:	4013      	ands	r3, r2
 80027be:	d003      	beq.n	80027c8 <parse_wireless_message+0x54>
			start_of_transmit = i + 1;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	3301      	adds	r3, #1
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 80027c6:	e005      	b.n	80027d4 <parse_wireless_message+0x60>
	for (int i = 0; i < sizeof(wireless->uart_buffer) - 1; ++i) {
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	3301      	adds	r3, #1
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d9df      	bls.n	8002794 <parse_wireless_message+0x20>
		}
	}
	if (start_of_transmit == -1) return false;
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	3301      	adds	r3, #1
 80027d8:	d101      	bne.n	80027de <parse_wireless_message+0x6a>
 80027da:	2300      	movs	r3, #0
 80027dc:	e03e      	b.n	800285c <parse_wireless_message+0xe8>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	623b      	str	r3, [r7, #32]
 80027e2:	e01b      	b.n	800281c <parse_wireless_message+0xa8>
		if (wireless->uart_buffer[i] == 'E') {
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	18d3      	adds	r3, r2, r3
 80027ea:	3304      	adds	r3, #4
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b45      	cmp	r3, #69	; 0x45
 80027f0:	d102      	bne.n	80027f8 <parse_wireless_message+0x84>
			end_of_transmit = i;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80027f6:	e014      	b.n	8002822 <parse_wireless_message+0xae>
		}
		else {
			if (!isdigit(wireless->uart_buffer[i])) return false;
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	18d3      	adds	r3, r2, r3
 80027fe:	3304      	adds	r3, #4
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <parse_wireless_message+0xf0>)
 8002806:	18d3      	adds	r3, r2, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	001a      	movs	r2, r3
 800280c:	2304      	movs	r3, #4
 800280e:	4013      	ands	r3, r2
 8002810:	d101      	bne.n	8002816 <parse_wireless_message+0xa2>
 8002812:	2300      	movs	r3, #0
 8002814:	e022      	b.n	800285c <parse_wireless_message+0xe8>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	3301      	adds	r3, #1
 800281a:	623b      	str	r3, [r7, #32]
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	2b09      	cmp	r3, #9
 8002820:	d9e0      	bls.n	80027e4 <parse_wireless_message+0x70>
		}
	}
	if (end_of_transmit == -1) return false;
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	3301      	adds	r3, #1
 8002826:	d101      	bne.n	800282c <parse_wireless_message+0xb8>
 8002828:	2300      	movs	r3, #0
 800282a:	e017      	b.n	800285c <parse_wireless_message+0xe8>

	char contents_string[5];
	int length = end_of_transmit - start_of_transmit;
 800282c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	61fb      	str	r3, [r7, #28]
	memcpy(contents_string, wireless->uart_buffer + start_of_transmit, length);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1d1a      	adds	r2, r3, #4
 8002838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283a:	18d1      	adds	r1, r2, r3
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	2410      	movs	r4, #16
 8002840:	193b      	adds	r3, r7, r4
 8002842:	0018      	movs	r0, r3
 8002844:	f004 fe80 	bl	8007548 <memcpy>

	int content = atoi(contents_string);
 8002848:	193b      	adds	r3, r7, r4
 800284a:	0018      	movs	r0, r3
 800284c:	f004 fe42 	bl	80074d4 <atoi>
 8002850:	0003      	movs	r3, r0
 8002852:	61bb      	str	r3, [r7, #24]

	wireless->message_contents = content;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	611a      	str	r2, [r3, #16]

	return true;
 800285a:	2301      	movs	r3, #1
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b00d      	add	sp, #52	; 0x34
 8002862:	bd90      	pop	{r4, r7, pc}
 8002864:	0800c0d4 	.word	0x0800c0d4

08002868 <receive_wireless>:

// REQUIRES: wireless and display are objects
// MODIFIES: Nothing
// EFFECTS: Receives the wireless speed and changes the display based on it
void receive_wireless(Wireless *wireless, Display* display, BatteryBuzzer* battery) {
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive_DMA(wireless->uart, wireless->uart_buffer, sizeof(wireless->uart_buffer));
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3304      	adds	r3, #4
 800287c:	220a      	movs	r2, #10
 800287e:	0019      	movs	r1, r3
 8002880:	f003 fe0a 	bl	8006498 <HAL_UART_Receive_DMA>

	bool speed_success = parse_wireless_message(wireless, display, 'S');
 8002884:	2517      	movs	r5, #23
 8002886:	197c      	adds	r4, r7, r5
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2253      	movs	r2, #83	; 0x53
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff ff70 	bl	8002774 <parse_wireless_message>
 8002894:	0003      	movs	r3, r0
 8002896:	7023      	strb	r3, [r4, #0]
	if (speed_success) {
 8002898:	197b      	adds	r3, r7, r5
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <receive_wireless+0x50>
		wireless->ms_since_comms = 0;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	615a      	str	r2, [r3, #20]
		update_display_number(display, wireless->message_contents);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	0011      	movs	r1, r2
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 f8bf 	bl	8002a34 <update_display_number>
		return;
 80028b6:	e019      	b.n	80028ec <receive_wireless+0x84>
	}

	bool battery_data_success = parse_wireless_message(wireless, display, 'B');
 80028b8:	2516      	movs	r5, #22
 80028ba:	197c      	adds	r4, r7, r5
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2242      	movs	r2, #66	; 0x42
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7ff ff56 	bl	8002774 <parse_wireless_message>
 80028c8:	0003      	movs	r3, r0
 80028ca:	7023      	strb	r3, [r4, #0]
	if (battery_data_success) {
 80028cc:	197b      	adds	r3, r7, r5
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <receive_wireless+0x84>
		wireless->ms_since_comms = 0;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
		change_battery_buzzer_data(battery, wireless->message_contents);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0011      	movs	r1, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff fee7 	bl	80026b8 <change_battery_buzzer_data>
		return;
 80028ea:	46c0      	nop			; (mov r8, r8)
	}

}
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b006      	add	sp, #24
 80028f0:	bdb0      	pop	{r4, r5, r7, pc}

080028f2 <send_wireless_string_10>:

// REQUIRES: wireless is a Wireless object
// and string is an array of 10 characters.
// MODIFIES: Nothing
// EFFECTS: Sends the character array over wireless
void send_wireless_string_10(Wireless *wireless, char string[10]) {
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
	HAL_Delay(50);
 80028fc:	2032      	movs	r0, #50	; 0x32
 80028fe:	f001 f86b 	bl	80039d8 <HAL_Delay>
	HAL_UART_Transmit(wireless->uart, (uint8_t *)string, sizeof(wireless->uart_buffer), 200);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	23c8      	movs	r3, #200	; 0xc8
 800290a:	220a      	movs	r2, #10
 800290c:	f003 fd28 	bl	8006360 <HAL_UART_Transmit>
	HAL_Delay(50);
 8002910:	2032      	movs	r0, #50	; 0x32
 8002912:	f001 f861 	bl	80039d8 <HAL_Delay>
}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	b002      	add	sp, #8
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <refresh_wireless_status>:

// REQUIRES: wireless is a Wireless object
// MODIFIES: Nothing
// EFFECTS: Increases ms_since_comms.
// Assumes function is called every 2 ms
void refresh_wireless_status(Wireless *wireless) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	wireless->ms_since_comms = wireless->ms_since_comms >= TIME_INDICATING_WIRELESS_COMMS_LOST_MS ?
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
			TIME_INDICATING_WIRELESS_COMMS_LOST_MS : wireless->ms_since_comms + 2;
 800292c:	4a06      	ldr	r2, [pc, #24]	; (8002948 <refresh_wireless_status+0x28>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d803      	bhi.n	800293a <refresh_wireless_status+0x1a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	1c9a      	adds	r2, r3, #2
 8002938:	e000      	b.n	800293c <refresh_wireless_status+0x1c>
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <refresh_wireless_status+0x2c>)
	wireless->ms_since_comms = wireless->ms_since_comms >= TIME_INDICATING_WIRELESS_COMMS_LOST_MS ?
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	615a      	str	r2, [r3, #20]
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}
 8002948:	00000bb7 	.word	0x00000bb7
 800294c:	00000bb8 	.word	0x00000bb8

08002950 <is_wireless_comms_lost>:

// REQUIRES: wireless is a Wireless object
// MODIFIES: Nothing
// EFFECTS: Returns whether or not wireless comms were lost
bool is_wireless_comms_lost(Wireless *wireless) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	return wireless->ms_since_comms >= TIME_INDICATING_WIRELESS_COMMS_LOST_MS;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <is_wireless_comms_lost+0x20>)
 800295e:	429a      	cmp	r2, r3
 8002960:	419b      	sbcs	r3, r3
 8002962:	425b      	negs	r3, r3
 8002964:	b2db      	uxtb	r3, r3
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	00000bb7 	.word	0x00000bb7

08002974 <new_display>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _shift_register is a ShiftRegister object
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Display object
Display *new_display(ShiftRegister *_shift_register) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	Display *display = (Display*) malloc(sizeof(Display));
 800297c:	202c      	movs	r0, #44	; 0x2c
 800297e:	f004 fdd9 	bl	8007534 <malloc>
 8002982:	0003      	movs	r3, r0
 8002984:	60fb      	str	r3, [r7, #12]
	display->shift_register = _shift_register;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	601a      	str	r2, [r3, #0]

	// These numbers are like this because our actual schematic and pins were off,
	// so this is a software fix.
	display->left_display_numbers[0] = 0b0000000001000000;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2240      	movs	r2, #64	; 0x40
 8002990:	809a      	strh	r2, [r3, #4]
	display->left_display_numbers[1] = 0b0000011101110000;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	22ee      	movs	r2, #238	; 0xee
 8002996:	00d2      	lsls	r2, r2, #3
 8002998:	80da      	strh	r2, [r3, #6]
	display->left_display_numbers[2] = 0b0000100000100000;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2282      	movs	r2, #130	; 0x82
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	811a      	strh	r2, [r3, #8]
	display->left_display_numbers[3] = 0b0000001000100000;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2288      	movs	r2, #136	; 0x88
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	815a      	strh	r2, [r3, #10]
	display->left_display_numbers[4] = 0b0000011000010000;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	22c2      	movs	r2, #194	; 0xc2
 80029ae:	00d2      	lsls	r2, r2, #3
 80029b0:	819a      	strh	r2, [r3, #12]
	display->left_display_numbers[5] = 0b0000001000001000;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2282      	movs	r2, #130	; 0x82
 80029b6:	0092      	lsls	r2, r2, #2
 80029b8:	81da      	strh	r2, [r3, #14]
	display->left_display_numbers[6] = 0b0000000000001000;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2208      	movs	r2, #8
 80029be:	821a      	strh	r2, [r3, #16]
	display->left_display_numbers[7] = 0b0000011001100000;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	22cc      	movs	r2, #204	; 0xcc
 80029c4:	00d2      	lsls	r2, r2, #3
 80029c6:	825a      	strh	r2, [r3, #18]
	display->left_display_numbers[8] = 0b0000000000000000;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	829a      	strh	r2, [r3, #20]
	display->left_display_numbers[9] = 0b0000001000000000;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	82da      	strh	r2, [r3, #22]

	display->right_display_numbers[0] = 0b0000000000000100;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2204      	movs	r2, #4
 80029da:	831a      	strh	r2, [r3, #24]
	display->right_display_numbers[1] = 0b0011000000000111;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <new_display+0xac>)
 80029e0:	835a      	strh	r2, [r3, #26]
	display->right_display_numbers[2] = 0b0100000000000010;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <new_display+0xb0>)
 80029e6:	839a      	strh	r2, [r3, #28]
	display->right_display_numbers[3] = 0b0001000000000010;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a0f      	ldr	r2, [pc, #60]	; (8002a28 <new_display+0xb4>)
 80029ec:	83da      	strh	r2, [r3, #30]
	display->right_display_numbers[4] = 0b0011000000000001;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <new_display+0xb8>)
 80029f2:	841a      	strh	r2, [r3, #32]
	display->right_display_numbers[5] = 0b0001000010000000;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2284      	movs	r2, #132	; 0x84
 80029f8:	0152      	lsls	r2, r2, #5
 80029fa:	845a      	strh	r2, [r3, #34]	; 0x22
	display->right_display_numbers[6] = 0b0000000010000000;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	849a      	strh	r2, [r3, #36]	; 0x24
	display->right_display_numbers[7] = 0b0011000000000110;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <new_display+0xbc>)
 8002a06:	84da      	strh	r2, [r3, #38]	; 0x26
	display->right_display_numbers[8] = 0b0000000000000000;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	851a      	strh	r2, [r3, #40]	; 0x28
	display->right_display_numbers[9] = 0b0001000000000000;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	0152      	lsls	r2, r2, #5
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a

	return display;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b004      	add	sp, #16
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	00003007 	.word	0x00003007
 8002a24:	00004002 	.word	0x00004002
 8002a28:	00001002 	.word	0x00001002
 8002a2c:	00003001 	.word	0x00003001
 8002a30:	00003006 	.word	0x00003006

08002a34 <update_display_number>:

// REQUIRES: Display is a Display object and number is an integer 0 to 99
// MODIFIES: outputs of ports and pins
// EFFECTS: displays number to particular display
void update_display_number(Display *display, uint16_t number) {
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	000a      	movs	r2, r1
 8002a3e:	1cbb      	adds	r3, r7, #2
 8002a40:	801a      	strh	r2, [r3, #0]
	uint16_t numbers_to_insert = display->left_display_numbers[(number / 10) % 10];
 8002a42:	1cbb      	adds	r3, r7, #2
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	210a      	movs	r1, #10
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f7fd fb77 	bl	800013c <__udivsi3>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	210a      	movs	r1, #10
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7fd fbf7 	bl	8000248 <__aeabi_uidivmod>
 8002a5a:	000b      	movs	r3, r1
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	001a      	movs	r2, r3
 8002a60:	240c      	movs	r4, #12
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	0052      	lsls	r2, r2, #1
 8002a68:	188a      	adds	r2, r1, r2
 8002a6a:	3204      	adds	r2, #4
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	801a      	strh	r2, [r3, #0]
	numbers_to_insert |= display->right_display_numbers[number % 10];
 8002a70:	1cbb      	adds	r3, r7, #2
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	210a      	movs	r1, #10
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7fd fbe6 	bl	8000248 <__aeabi_uidivmod>
 8002a7c:	000b      	movs	r3, r1
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	001a      	movs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	320c      	adds	r2, #12
 8002a86:	0052      	lsls	r2, r2, #1
 8002a88:	5ad1      	ldrh	r1, [r2, r3]
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	193a      	adds	r2, r7, r4
 8002a8e:	8812      	ldrh	r2, [r2, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	801a      	strh	r2, [r3, #0]

	for (uint8_t j = 0; j < 16; ++j) {
 8002a94:	230f      	movs	r3, #15
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e01c      	b.n	8002ad8 <update_display_number+0xa4>
		uint8_t shift_val = (numbers_to_insert & (0b1 << (j))) >> (j);
 8002a9e:	230c      	movs	r3, #12
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	240f      	movs	r4, #15
 8002aa6:	193a      	adds	r2, r7, r4
 8002aa8:	7812      	ldrb	r2, [r2, #0]
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4091      	lsls	r1, r2
 8002aae:	000a      	movs	r2, r1
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	411a      	asrs	r2, r3
 8002ab8:	210b      	movs	r1, #11
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	701a      	strb	r2, [r3, #0]
		shift_shift_register(display->shift_register, shift_val);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f000 fbe6 	bl	800329a <shift_shift_register>
	for (uint8_t j = 0; j < 16; ++j) {
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	193a      	adds	r2, r7, r4
 8002ad2:	7812      	ldrb	r2, [r2, #0]
 8002ad4:	3201      	adds	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	230f      	movs	r3, #15
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	d9dd      	bls.n	8002a9e <update_display_number+0x6a>
	}
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b005      	add	sp, #20
 8002aea:	bd90      	pop	{r4, r7, pc}

08002aec <new_interrupt_timer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _timer corresponds to timer
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created InterruptTimer object
InterruptTimer *new_interrupt_timer(TIM_HandleTypeDef *_timer) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	InterruptTimer *interrupt_timer = (InterruptTimer*) malloc(sizeof(InterruptTimer));
 8002af4:	2004      	movs	r0, #4
 8002af6:	f004 fd1d 	bl	8007534 <malloc>
 8002afa:	0003      	movs	r3, r0
 8002afc:	60fb      	str	r3, [r7, #12]
	interrupt_timer->timer = _timer;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	601a      	str	r2, [r3, #0]
	return interrupt_timer;
 8002b04:	68fb      	ldr	r3, [r7, #12]
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b004      	add	sp, #16
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <start_interrupt_timer>:

// REQUIRES: interrupt_timer is an InterruptTimer object
// MODIFIES: nothing
// EFFECTS: Enables interrupts for the interrupt timer
void start_interrupt_timer(InterruptTimer *interrupt_timer) {
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(interrupt_timer->timer);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f003 f996 	bl	8005e4c <HAL_TIM_Base_Start_IT>
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	receive_wireless(wireless, display, battery_buzzer);
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_UART_RxCpltCallback+0x24>)
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_UART_RxCpltCallback+0x28>)
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_UART_RxCpltCallback+0x2c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	f7ff fe93 	bl	8002868 <receive_wireless>
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	2000045c 	.word	0x2000045c
 8002b50:	2000044c 	.word	0x2000044c
 8002b54:	20000448 	.word	0x20000448

08002b58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	if (htim == fast_interrupt_timer->timer) {
		// called every 1 ms
	}
	if (htim == slow_interrupt_timer->timer) {
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10e      	bne.n	8002b8a <HAL_TIM_PeriodElapsedCallback+0x32>
		// called every 2 ms
		update_battery_buzzer_logic(battery_buzzer);
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f7ff fd09 	bl	8002588 <update_battery_buzzer_logic>
		if (is_wireless_comms_lost(wireless)) {
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7ff fee8 	bl	8002950 <is_wireless_comms_lost>
			//TODO: code here
//			blink_battery
		}
		refresh_wireless_status(wireless);
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7ff fecb 	bl	8002920 <refresh_wireless_status>
	}

}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b002      	add	sp, #8
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	20000480 	.word	0x20000480
 8002b98:	20000448 	.word	0x20000448
 8002b9c:	2000045c 	.word	0x2000045c

08002ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	shift_ser = new_pin_data(SHIFT_SER_GPIO_Port, SHIFT_SER_Pin);
 8002ba6:	23a0      	movs	r3, #160	; 0xa0
 8002ba8:	05db      	lsls	r3, r3, #23
 8002baa:	2110      	movs	r1, #16
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 fafc 	bl	80031aa <new_pin_data>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	4b68      	ldr	r3, [pc, #416]	; (8002d58 <main+0x1b8>)
 8002bb6:	601a      	str	r2, [r3, #0]
	shift_srclk = new_pin_data(SHIFT_SRCLK_GPIO_Port, SHIFT_SRCLK_Pin);
 8002bb8:	23a0      	movs	r3, #160	; 0xa0
 8002bba:	05db      	lsls	r3, r3, #23
 8002bbc:	2120      	movs	r1, #32
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 faf3 	bl	80031aa <new_pin_data>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <main+0x1bc>)
 8002bc8:	601a      	str	r2, [r3, #0]
	shift_not_srclk = new_pin_data(SHIFT_NOT_SRCLK_GPIO_Port, SHIFT_NOT_SRCLK_Pin);
 8002bca:	23a0      	movs	r3, #160	; 0xa0
 8002bcc:	05db      	lsls	r3, r3, #23
 8002bce:	2140      	movs	r1, #64	; 0x40
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 faea 	bl	80031aa <new_pin_data>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <main+0x1c0>)
 8002bda:	601a      	str	r2, [r3, #0]
	shift_rclk = new_pin_data(SHIFT_RCLK_GPIO_Port, SHIFT_RCLK_Pin);
 8002bdc:	23a0      	movs	r3, #160	; 0xa0
 8002bde:	05db      	lsls	r3, r3, #23
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fae1 	bl	80031aa <new_pin_data>
 8002be8:	0002      	movs	r2, r0
 8002bea:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <main+0x1c4>)
 8002bec:	601a      	str	r2, [r3, #0]
	shift_not_oe = new_pin_data(SHIFT_NOT_OE_GPIO_Port, SHIFT_NOT_OE_Pin);
 8002bee:	4b5e      	ldr	r3, [pc, #376]	; (8002d68 <main+0x1c8>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 fad9 	bl	80031aa <new_pin_data>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	4b5c      	ldr	r3, [pc, #368]	; (8002d6c <main+0x1cc>)
 8002bfc:	601a      	str	r2, [r3, #0]
	buzzer = new_pin_data(BUZZER_GPIO_Port, BUZZER_Pin);
 8002bfe:	23a0      	movs	r3, #160	; 0xa0
 8002c00:	05db      	lsls	r3, r3, #23
 8002c02:	2102      	movs	r1, #2
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 fad0 	bl	80031aa <new_pin_data>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <main+0x1d0>)
 8002c0e:	601a      	str	r2, [r3, #0]
	battery_led = new_pin_data(BATTERY_OUTPUT_GPIO_Port, BATTERY_OUTPUT_Pin);
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	05db      	lsls	r3, r3, #23
 8002c14:	2108      	movs	r1, #8
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 fac7 	bl	80031aa <new_pin_data>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	4b55      	ldr	r3, [pc, #340]	; (8002d74 <main+0x1d4>)
 8002c20:	601a      	str	r2, [r3, #0]
	debug_led = new_pin_data(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002c22:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <main+0x1d8>)
 8002c24:	2104      	movs	r1, #4
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 fabf 	bl	80031aa <new_pin_data>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <main+0x1dc>)
 8002c30:	601a      	str	r2, [r3, #0]
	slow_interrupt_timer = new_interrupt_timer(&htim14);
 8002c32:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <main+0x1e0>)
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7ff ff59 	bl	8002aec <new_interrupt_timer>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	4b51      	ldr	r3, [pc, #324]	; (8002d84 <main+0x1e4>)
 8002c3e:	601a      	str	r2, [r3, #0]
	fast_interrupt_timer = new_interrupt_timer(&htim16);
 8002c40:	4b51      	ldr	r3, [pc, #324]	; (8002d88 <main+0x1e8>)
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff ff52 	bl	8002aec <new_interrupt_timer>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <main+0x1ec>)
 8002c4c:	601a      	str	r2, [r3, #0]
	adc_sensor = new_adc_sensor(&hadc1, 1);
 8002c4e:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <main+0x1f0>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7ff fc1a 	bl	800248c <new_adc_sensor>
 8002c58:	0002      	movs	r2, r0
 8002c5a:	4b4e      	ldr	r3, [pc, #312]	; (8002d94 <main+0x1f4>)
 8002c5c:	601a      	str	r2, [r3, #0]
	potentiometer = new_potentiometer(adc_sensor, 0);
 8002c5e:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <main+0x1f4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2100      	movs	r1, #0
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 facf 	bl	8003208 <new_potentiometer>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	4b4a      	ldr	r3, [pc, #296]	; (8002d98 <main+0x1f8>)
 8002c6e:	601a      	str	r2, [r3, #0]
	shift_register = new_shift_register(
 8002c70:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <main+0x1b8>)
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <main+0x1bc>)
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <main+0x1c0>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <main+0x1c4>)
 8002c7e:	681c      	ldr	r4, [r3, #0]
 8002c80:	4b3a      	ldr	r3, [pc, #232]	; (8002d6c <main+0x1cc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	0023      	movs	r3, r4
 8002c88:	f000 fae7 	bl	800325a <new_shift_register>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <main+0x1fc>)
 8002c90:	601a      	str	r2, [r3, #0]
			shift_ser,
			shift_srclk,
			shift_not_srclk,
			shift_rclk,
			shift_not_oe);
	display = new_display(shift_register);
 8002c92:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <main+0x1fc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff fe6c 	bl	8002974 <new_display>
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <main+0x200>)
 8002ca0:	601a      	str	r2, [r3, #0]
	trigger = new_trigger(potentiometer);
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	; (8002d98 <main+0x1f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 fdc3 	bl	8003832 <new_trigger>
 8002cac:	0002      	movs	r2, r0
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <main+0x204>)
 8002cb0:	601a      	str	r2, [r3, #0]
	wireless = new_wireless(&huart1);
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <main+0x208>)
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff fd34 	bl	8002722 <new_wireless>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <main+0x20c>)
 8002cbe:	601a      	str	r2, [r3, #0]
	battery_buzzer = new_battery_buzzer(buzzer, battery_led);
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <main+0x1d0>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <main+0x1d4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0019      	movs	r1, r3
 8002cca:	0010      	movs	r0, r2
 8002ccc:	f7ff fc40 	bl	8002550 <new_battery_buzzer>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <main+0x210>)
 8002cd4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cd6:	f000 fdf9 	bl	80038cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cda:	f000 f86b 	bl	8002db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cde:	f000 f9db 	bl	8003098 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ce2:	f000 f9b3 	bl	800304c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002ce6:	f000 f963 	bl	8002fb0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002cea:	f000 f8ab 	bl	8002e44 <MX_ADC1_Init>
  MX_TIM14_Init();
 8002cee:	f000 f913 	bl	8002f18 <MX_TIM14_Init>
  MX_TIM16_Init();
 8002cf2:	f000 f935 	bl	8002f60 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  start_interrupt_timer(fast_interrupt_timer);
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <main+0x1ec>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff ff07 	bl	8002b0e <start_interrupt_timer>
  start_interrupt_timer(slow_interrupt_timer);
 8002d00:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <main+0x1e4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff ff02 	bl	8002b0e <start_interrupt_timer>
  update_display_number(display, 0);
 8002d0a:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <main+0x200>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff fe8f 	bl	8002a34 <update_display_number>
  receive_wireless(wireless, display, battery_buzzer);
 8002d16:	4b25      	ldr	r3, [pc, #148]	; (8002dac <main+0x20c>)
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <main+0x200>)
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <main+0x210>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	001a      	movs	r2, r3
 8002d24:	f7ff fda0 	bl	8002868 <receive_wireless>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Our while loop is so fast so we need to put in some delay
	  HAL_Delay(50);
 8002d28:	2032      	movs	r0, #50	; 0x32
 8002d2a:	f000 fe55 	bl	80039d8 <HAL_Delay>

	  update_adc_sensor_values(adc_sensor);
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <main+0x1f4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff fbee 	bl	8002514 <update_adc_sensor_values>
	  int raw_trigger_counts = (int)get_trigger_input(trigger);
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <main+0x204>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 fd89 	bl	8003854 <get_trigger_input>
 8002d42:	0003      	movs	r3, r0
 8002d44:	607b      	str	r3, [r7, #4]
	  send_wireless_trigger_input(wireless, raw_trigger_counts);
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <main+0x20c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f7ff fcf8 	bl	8002744 <send_wireless_trigger_input>
  {
 8002d54:	e7e8      	b.n	8002d28 <main+0x188>
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	20000460 	.word	0x20000460
 8002d5c:	20000464 	.word	0x20000464
 8002d60:	20000468 	.word	0x20000468
 8002d64:	2000046c 	.word	0x2000046c
 8002d68:	50000400 	.word	0x50000400
 8002d6c:	20000470 	.word	0x20000470
 8002d70:	20000474 	.word	0x20000474
 8002d74:	2000047c 	.word	0x2000047c
 8002d78:	50001400 	.word	0x50001400
 8002d7c:	20000478 	.word	0x20000478
 8002d80:	200002bc 	.word	0x200002bc
 8002d84:	20000480 	.word	0x20000480
 8002d88:	20000308 	.word	0x20000308
 8002d8c:	20000484 	.word	0x20000484
 8002d90:	200001fc 	.word	0x200001fc
 8002d94:	20000444 	.word	0x20000444
 8002d98:	20000450 	.word	0x20000450
 8002d9c:	20000454 	.word	0x20000454
 8002da0:	2000044c 	.word	0x2000044c
 8002da4:	20000458 	.word	0x20000458
 8002da8:	20000354 	.word	0x20000354
 8002dac:	2000045c 	.word	0x2000045c
 8002db0:	20000448 	.word	0x20000448

08002db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b093      	sub	sp, #76	; 0x4c
 8002db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dba:	2410      	movs	r4, #16
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	2338      	movs	r3, #56	; 0x38
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	f004 fbc8 	bl	800755a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dca:	003b      	movs	r3, r7
 8002dcc:	0018      	movs	r0, r3
 8002dce:	2310      	movs	r3, #16
 8002dd0:	001a      	movs	r2, r3
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	f004 fbc1 	bl	800755a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f002 f953 	bl	8005088 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	2202      	movs	r2, #2
 8002de6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002de8:	193b      	adds	r3, r7, r4
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	0052      	lsls	r2, r2, #1
 8002dee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	2240      	movs	r2, #64	; 0x40
 8002dfa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	0018      	movs	r0, r3
 8002e06:	f002 f98b 	bl	8005120 <HAL_RCC_OscConfig>
 8002e0a:	1e03      	subs	r3, r0, #0
 8002e0c:	d001      	beq.n	8002e12 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002e0e:	f000 f9c7 	bl	80031a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e12:	003b      	movs	r3, r7
 8002e14:	2207      	movs	r2, #7
 8002e16:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e18:	003b      	movs	r3, r7
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e1e:	003b      	movs	r3, r7
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e24:	003b      	movs	r3, r7
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e2a:	003b      	movs	r3, r7
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f002 fc90 	bl	8005754 <HAL_RCC_ClockConfig>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002e38:	f000 f9b2 	bl	80031a0 <Error_Handler>
  }
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b013      	add	sp, #76	; 0x4c
 8002e42:	bd90      	pop	{r4, r7, pc}

08002e44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	230c      	movs	r3, #12
 8002e50:	001a      	movs	r2, r3
 8002e52:	2100      	movs	r1, #0
 8002e54:	f004 fb81 	bl	800755a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e58:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e5a:	4a2e      	ldr	r2, [pc, #184]	; (8002f14 <MX_ADC1_Init+0xd0>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	05d2      	lsls	r2, r2, #23
 8002e64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8002e66:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e68:	2218      	movs	r2, #24
 8002e6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e72:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002e84:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002e90:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002e96:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002e98:	2220      	movs	r2, #32
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002eaa:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002eac:	222c      	movs	r2, #44	; 0x2c
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002eb8:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002ec6:	223c      	movs	r2, #60	; 0x3c
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002ecc:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 feeb 	bl	8003cb0 <HAL_ADC_Init>
 8002eda:	1e03      	subs	r3, r0, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002ede:	f000 f95f 	bl	80031a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	2200      	movs	r2, #0
 8002eec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ef4:	1d3a      	adds	r2, r7, #4
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <MX_ADC1_Init+0xcc>)
 8002ef8:	0011      	movs	r1, r2
 8002efa:	0018      	movs	r0, r3
 8002efc:	f001 f926 	bl	800414c <HAL_ADC_ConfigChannel>
 8002f00:	1e03      	subs	r3, r0, #0
 8002f02:	d001      	beq.n	8002f08 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002f04:	f000 f94c 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b004      	add	sp, #16
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	200001fc 	.word	0x200001fc
 8002f14:	40012400 	.word	0x40012400

08002f18 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <MX_TIM14_Init+0x40>)
 8002f1e:	4a0f      	ldr	r2, [pc, #60]	; (8002f5c <MX_TIM14_Init+0x44>)
 8002f20:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <MX_TIM14_Init+0x40>)
 8002f24:	220f      	movs	r2, #15
 8002f26:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <MX_TIM14_Init+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = SLOW_PERIOD;
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <MX_TIM14_Init+0x40>)
 8002f30:	22fa      	movs	r2, #250	; 0xfa
 8002f32:	00d2      	lsls	r2, r2, #3
 8002f34:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <MX_TIM14_Init+0x40>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <MX_TIM14_Init+0x40>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <MX_TIM14_Init+0x40>)
 8002f44:	0018      	movs	r0, r3
 8002f46:	f002 ff29 	bl	8005d9c <HAL_TIM_Base_Init>
 8002f4a:	1e03      	subs	r3, r0, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002f4e:	f000 f927 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200002bc 	.word	0x200002bc
 8002f5c:	40002000 	.word	0x40002000

08002f60 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <MX_TIM16_Init+0x48>)
 8002f66:	4a11      	ldr	r2, [pc, #68]	; (8002fac <MX_TIM16_Init+0x4c>)
 8002f68:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15;
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <MX_TIM16_Init+0x48>)
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <MX_TIM16_Init+0x48>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = FAST_PERIOD;
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <MX_TIM16_Init+0x48>)
 8002f78:	22fa      	movs	r2, #250	; 0xfa
 8002f7a:	0092      	lsls	r2, r2, #2
 8002f7c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <MX_TIM16_Init+0x48>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <MX_TIM16_Init+0x48>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <MX_TIM16_Init+0x48>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <MX_TIM16_Init+0x48>)
 8002f92:	0018      	movs	r0, r3
 8002f94:	f002 ff02 	bl	8005d9c <HAL_TIM_Base_Init>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002f9c:	f000 f900 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	20000308 	.word	0x20000308
 8002fac:	40014400 	.word	0x40014400

08002fb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fb4:	4b23      	ldr	r3, [pc, #140]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002fb6:	4a24      	ldr	r2, [pc, #144]	; (8003048 <MX_USART1_UART_Init+0x98>)
 8002fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002fba:	4b22      	ldr	r3, [pc, #136]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002fbc:	2296      	movs	r2, #150	; 0x96
 8002fbe:	0192      	lsls	r2, r2, #6
 8002fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc2:	4b20      	ldr	r3, [pc, #128]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc8:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fce:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fda:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <MX_USART1_UART_Init+0x94>)
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f003 f95a 	bl	80062b4 <HAL_UART_Init>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d001      	beq.n	8003008 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003004:	f000 f8cc 	bl	80031a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <MX_USART1_UART_Init+0x94>)
 800300a:	2100      	movs	r1, #0
 800300c:	0018      	movs	r0, r3
 800300e:	f004 f981 	bl	8007314 <HAL_UARTEx_SetTxFifoThreshold>
 8003012:	1e03      	subs	r3, r0, #0
 8003014:	d001      	beq.n	800301a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003016:	f000 f8c3 	bl	80031a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <MX_USART1_UART_Init+0x94>)
 800301c:	2100      	movs	r1, #0
 800301e:	0018      	movs	r0, r3
 8003020:	f004 f9b8 	bl	8007394 <HAL_UARTEx_SetRxFifoThreshold>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d001      	beq.n	800302c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003028:	f000 f8ba 	bl	80031a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <MX_USART1_UART_Init+0x94>)
 800302e:	0018      	movs	r0, r3
 8003030:	f004 f936 	bl	80072a0 <HAL_UARTEx_DisableFifoMode>
 8003034:	1e03      	subs	r3, r0, #0
 8003036:	d001      	beq.n	800303c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003038:	f000 f8b2 	bl	80031a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	20000354 	.word	0x20000354
 8003048:	40013800 	.word	0x40013800

0800304c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <MX_DMA_Init+0x48>)
 8003054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <MX_DMA_Init+0x48>)
 8003058:	2101      	movs	r1, #1
 800305a:	430a      	orrs	r2, r1
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <MX_DMA_Init+0x48>)
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	2201      	movs	r2, #1
 8003064:	4013      	ands	r3, r2
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	2009      	movs	r0, #9
 8003070:	f001 fc04 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003074:	2009      	movs	r0, #9
 8003076:	f001 fc16 	bl	80048a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	200a      	movs	r0, #10
 8003080:	f001 fbfc 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003084:	200a      	movs	r0, #10
 8003086:	f001 fc0e 	bl	80048a6 <HAL_NVIC_EnableIRQ>

}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	40021000 	.word	0x40021000

08003098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b089      	sub	sp, #36	; 0x24
 800309c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309e:	240c      	movs	r4, #12
 80030a0:	193b      	adds	r3, r7, r4
 80030a2:	0018      	movs	r0, r3
 80030a4:	2314      	movs	r3, #20
 80030a6:	001a      	movs	r2, r3
 80030a8:	2100      	movs	r1, #0
 80030aa:	f004 fa56 	bl	800755a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <MX_GPIO_Init+0xfc>)
 80030b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b2:	4b38      	ldr	r3, [pc, #224]	; (8003194 <MX_GPIO_Init+0xfc>)
 80030b4:	2102      	movs	r1, #2
 80030b6:	430a      	orrs	r2, r1
 80030b8:	635a      	str	r2, [r3, #52]	; 0x34
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <MX_GPIO_Init+0xfc>)
 80030bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030c6:	4b33      	ldr	r3, [pc, #204]	; (8003194 <MX_GPIO_Init+0xfc>)
 80030c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ca:	4b32      	ldr	r3, [pc, #200]	; (8003194 <MX_GPIO_Init+0xfc>)
 80030cc:	2120      	movs	r1, #32
 80030ce:	430a      	orrs	r2, r1
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <MX_GPIO_Init+0xfc>)
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	2220      	movs	r2, #32
 80030d8:	4013      	ands	r3, r2
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <MX_GPIO_Init+0xfc>)
 80030e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e2:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <MX_GPIO_Init+0xfc>)
 80030e4:	2101      	movs	r1, #1
 80030e6:	430a      	orrs	r2, r1
 80030e8:	635a      	str	r2, [r3, #52]	; 0x34
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <MX_GPIO_Init+0xfc>)
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	2201      	movs	r2, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80030f6:	4b28      	ldr	r3, [pc, #160]	; (8003198 <MX_GPIO_Init+0x100>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	2104      	movs	r1, #4
 80030fc:	0018      	movs	r0, r3
 80030fe:	f001 ffa5 	bl	800504c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|BATTERY_OUTPUT_Pin|SHIFT_SER_Pin|SHIFT_SRCLK_Pin
 8003102:	23a0      	movs	r3, #160	; 0xa0
 8003104:	05db      	lsls	r3, r3, #23
 8003106:	2200      	movs	r2, #0
 8003108:	21fa      	movs	r1, #250	; 0xfa
 800310a:	0018      	movs	r0, r3
 800310c:	f001 ff9e 	bl	800504c <HAL_GPIO_WritePin>
                          |SHIFT_NOT_SRCLK_Pin|SHIFT_RCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_NOT_OE_GPIO_Port, SHIFT_NOT_OE_Pin, GPIO_PIN_RESET);
 8003110:	4b22      	ldr	r3, [pc, #136]	; (800319c <MX_GPIO_Init+0x104>)
 8003112:	2200      	movs	r2, #0
 8003114:	2101      	movs	r1, #1
 8003116:	0018      	movs	r0, r3
 8003118:	f001 ff98 	bl	800504c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 800311c:	193b      	adds	r3, r7, r4
 800311e:	2204      	movs	r2, #4
 8003120:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003122:	193b      	adds	r3, r7, r4
 8003124:	2201      	movs	r2, #1
 8003126:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	193b      	adds	r3, r7, r4
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	193b      	adds	r3, r7, r4
 8003130:	2200      	movs	r2, #0
 8003132:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8003134:	193b      	adds	r3, r7, r4
 8003136:	4a18      	ldr	r2, [pc, #96]	; (8003198 <MX_GPIO_Init+0x100>)
 8003138:	0019      	movs	r1, r3
 800313a:	0010      	movs	r0, r2
 800313c:	f001 fe22 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin BATTERY_OUTPUT_Pin SHIFT_SER_Pin SHIFT_SRCLK_Pin
                           SHIFT_NOT_SRCLK_Pin SHIFT_RCLK_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BATTERY_OUTPUT_Pin|SHIFT_SER_Pin|SHIFT_SRCLK_Pin
 8003140:	193b      	adds	r3, r7, r4
 8003142:	22fa      	movs	r2, #250	; 0xfa
 8003144:	601a      	str	r2, [r3, #0]
                          |SHIFT_NOT_SRCLK_Pin|SHIFT_RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003146:	193b      	adds	r3, r7, r4
 8003148:	2201      	movs	r2, #1
 800314a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	193b      	adds	r3, r7, r4
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	193b      	adds	r3, r7, r4
 8003154:	2200      	movs	r2, #0
 8003156:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003158:	193a      	adds	r2, r7, r4
 800315a:	23a0      	movs	r3, #160	; 0xa0
 800315c:	05db      	lsls	r3, r3, #23
 800315e:	0011      	movs	r1, r2
 8003160:	0018      	movs	r0, r3
 8003162:	f001 fe0f 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_NOT_OE_Pin */
  GPIO_InitStruct.Pin = SHIFT_NOT_OE_Pin;
 8003166:	0021      	movs	r1, r4
 8003168:	187b      	adds	r3, r7, r1
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2201      	movs	r2, #1
 8003172:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	187b      	adds	r3, r7, r1
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	187b      	adds	r3, r7, r1
 800317c:	2200      	movs	r2, #0
 800317e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_NOT_OE_GPIO_Port, &GPIO_InitStruct);
 8003180:	187b      	adds	r3, r7, r1
 8003182:	4a06      	ldr	r2, [pc, #24]	; (800319c <MX_GPIO_Init+0x104>)
 8003184:	0019      	movs	r1, r3
 8003186:	0010      	movs	r0, r2
 8003188:	f001 fdfc 	bl	8004d84 <HAL_GPIO_Init>

}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b009      	add	sp, #36	; 0x24
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	50001400 	.word	0x50001400
 800319c:	50000400 	.word	0x50000400

080031a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031a4:	b672      	cpsid	i
}
 80031a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031a8:	e7fe      	b.n	80031a8 <Error_Handler+0x8>

080031aa <new_pin_data>:

// REQUIRES: _port and _pin corresponds to
// the port and pin.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created PinData object
PinData *new_pin_data(GPIO_TypeDef *_port, uint16_t _pin) {
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	000a      	movs	r2, r1
 80031b4:	1cbb      	adds	r3, r7, #2
 80031b6:	801a      	strh	r2, [r3, #0]
    PinData *pin_data = (PinData*) malloc(sizeof(PinData));
 80031b8:	2008      	movs	r0, #8
 80031ba:	f004 f9bb 	bl	8007534 <malloc>
 80031be:	0003      	movs	r3, r0
 80031c0:	60fb      	str	r3, [r7, #12]
	pin_data->port = _port;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	601a      	str	r2, [r3, #0]
    pin_data->pin = _pin;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1cba      	adds	r2, r7, #2
 80031cc:	8812      	ldrh	r2, [r2, #0]
 80031ce:	809a      	strh	r2, [r3, #4]
	return pin_data;
 80031d0:	68fb      	ldr	r3, [r7, #12]
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b004      	add	sp, #16
 80031d8:	bd80      	pop	{r7, pc}

080031da <set_pin_value>:

// REQUIRES: pin_data is PinData and value is 0 or 1
// MODIFIES: nothing
// EFFECTS: Sets pin to value
void set_pin_value(PinData *pin_data, uint8_t value) {
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	000a      	movs	r2, r1
 80031e4:	1cfb      	adds	r3, r7, #3
 80031e6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(pin_data->port, pin_data->pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8899      	ldrh	r1, [r3, #4]
 80031f0:	1cfb      	adds	r3, r7, #3
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	4193      	sbcs	r3, r2
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	001a      	movs	r2, r3
 80031fc:	f001 ff26 	bl	800504c <HAL_GPIO_WritePin>
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b002      	add	sp, #8
 8003206:	bd80      	pop	{r7, pc}

08003208 <new_potentiometer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Potentiometer object
Potentiometer *new_potentiometer(ADCSensor *_adc_sensor, uint8_t _rank) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	000a      	movs	r2, r1
 8003212:	1cfb      	adds	r3, r7, #3
 8003214:	701a      	strb	r2, [r3, #0]
    Potentiometer *potentiometer = (Potentiometer*) malloc(sizeof(Potentiometer));
 8003216:	2008      	movs	r0, #8
 8003218:	f004 f98c 	bl	8007534 <malloc>
 800321c:	0003      	movs	r3, r0
 800321e:	60fb      	str	r3, [r7, #12]
    potentiometer->adc_sensor = _adc_sensor;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	601a      	str	r2, [r3, #0]
    potentiometer->rank = _rank;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1cfa      	adds	r2, r7, #3
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	711a      	strb	r2, [r3, #4]
    return potentiometer;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b004      	add	sp, #16
 8003236:	bd80      	pop	{r7, pc}

08003238 <get_potentiometer_input>:

// REQUIRES: potentiometer is a Potentiometer object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 64.
uint16_t get_potentiometer_input(Potentiometer *potentiometer) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    return get_adc_sensor_value(potentiometer->adc_sensor, potentiometer->rank);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	791b      	ldrb	r3, [r3, #4]
 8003248:	0019      	movs	r1, r3
 800324a:	0010      	movs	r0, r2
 800324c:	f7ff f950 	bl	80024f0 <get_adc_sensor_value>
 8003250:	0003      	movs	r3, r0
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}

0800325a <new_shift_register>:
ShiftRegister *new_shift_register(
		PinData *_ser_pin,
		PinData *_srclk_pin,
		PinData *_not_srclk_pin,
		PinData *_rclk_pin,
		PinData *_not_oe_pin) {
 800325a:	b580      	push	{r7, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	603b      	str	r3, [r7, #0]
	ShiftRegister *shift_register = (ShiftRegister*) malloc(sizeof(ShiftRegister));
 8003268:	2014      	movs	r0, #20
 800326a:	f004 f963 	bl	8007534 <malloc>
 800326e:	0003      	movs	r3, r0
 8003270:	617b      	str	r3, [r7, #20]
	shift_register->ser_pin = _ser_pin;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]
	shift_register->srclk_pin = _srclk_pin;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	605a      	str	r2, [r3, #4]
	shift_register->not_srclk_pin = _not_srclk_pin;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	609a      	str	r2, [r3, #8]
	shift_register->rclk_pin = _rclk_pin;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	60da      	str	r2, [r3, #12]
	shift_register->not_oe_pin = _not_oe_pin;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	611a      	str	r2, [r3, #16]
	return shift_register;
 8003290:	697b      	ldr	r3, [r7, #20]
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b006      	add	sp, #24
 8003298:	bd80      	pop	{r7, pc}

0800329a <shift_shift_register>:

// REQUIRES: shift_register is a ShiftRegister object and value is either 0 or 1
// MODIFIES: outputs of ports and pins
// EFFECTS: shift value into register
void shift_shift_register(ShiftRegister *shift_register, uint8_t value) {
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	000a      	movs	r2, r1
 80032a4:	1cfb      	adds	r3, r7, #3
 80032a6:	701a      	strb	r2, [r3, #0]
	set_pin_value(shift_register->ser_pin, 1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7ff ff93 	bl	80031da <set_pin_value>
	set_pin_value(shift_register->ser_pin, value);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	1cfb      	adds	r3, r7, #3
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	0019      	movs	r1, r3
 80032be:	0010      	movs	r0, r2
 80032c0:	f7ff ff8b 	bl	80031da <set_pin_value>
	set_pin_value(shift_register->not_srclk_pin, 1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2101      	movs	r1, #1
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7ff ff85 	bl	80031da <set_pin_value>
	set_pin_value(shift_register->srclk_pin, 1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2101      	movs	r1, #1
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7ff ff7f 	bl	80031da <set_pin_value>
	set_pin_value(shift_register->srclk_pin, 0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2100      	movs	r1, #0
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7ff ff79 	bl	80031da <set_pin_value>
	set_pin_value(shift_register->rclk_pin, 1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2101      	movs	r1, #1
 80032ee:	0018      	movs	r0, r3
 80032f0:	f7ff ff73 	bl	80031da <set_pin_value>
	set_pin_value(shift_register->rclk_pin, 0);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2100      	movs	r1, #0
 80032fa:	0018      	movs	r0, r3
 80032fc:	f7ff ff6d 	bl	80031da <set_pin_value>
	set_pin_value(shift_register->ser_pin, 0);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2100      	movs	r1, #0
 8003306:	0018      	movs	r0, r3
 8003308:	f7ff ff67 	bl	80031da <set_pin_value>
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331a:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <HAL_MspInit+0x44>)
 800331c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_MspInit+0x44>)
 8003320:	2101      	movs	r1, #1
 8003322:	430a      	orrs	r2, r1
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_MspInit+0x44>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2201      	movs	r2, #1
 800332c:	4013      	ands	r3, r2
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_MspInit+0x44>)
 8003334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_MspInit+0x44>)
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	0549      	lsls	r1, r1, #21
 800333c:	430a      	orrs	r2, r1
 800333e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_MspInit+0x44>)
 8003342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	055b      	lsls	r3, r3, #21
 8003348:	4013      	ands	r3, r2
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b002      	add	sp, #8
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	40021000 	.word	0x40021000

0800335c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b095      	sub	sp, #84	; 0x54
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003364:	233c      	movs	r3, #60	; 0x3c
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	0018      	movs	r0, r3
 800336a:	2314      	movs	r3, #20
 800336c:	001a      	movs	r2, r3
 800336e:	2100      	movs	r1, #0
 8003370:	f004 f8f3 	bl	800755a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003374:	2414      	movs	r4, #20
 8003376:	193b      	adds	r3, r7, r4
 8003378:	0018      	movs	r0, r3
 800337a:	2328      	movs	r3, #40	; 0x28
 800337c:	001a      	movs	r2, r3
 800337e:	2100      	movs	r1, #0
 8003380:	f004 f8eb 	bl	800755a <memset>
  if(hadc->Instance==ADC1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a35      	ldr	r2, [pc, #212]	; (8003460 <HAL_ADC_MspInit+0x104>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d164      	bne.n	8003458 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800338e:	193b      	adds	r3, r7, r4
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	01d2      	lsls	r2, r2, #7
 8003394:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003396:	193b      	adds	r3, r7, r4
 8003398:	2200      	movs	r2, #0
 800339a:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800339c:	193b      	adds	r3, r7, r4
 800339e:	0018      	movs	r0, r3
 80033a0:	f002 fb82 	bl	8005aa8 <HAL_RCCEx_PeriphCLKConfig>
 80033a4:	1e03      	subs	r3, r0, #0
 80033a6:	d001      	beq.n	80033ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80033a8:	f7ff fefa 	bl	80031a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_ADC_MspInit+0x108>)
 80033ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b0:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <HAL_ADC_MspInit+0x108>)
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	0349      	lsls	r1, r1, #13
 80033b6:	430a      	orrs	r2, r1
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40
 80033ba:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <HAL_ADC_MspInit+0x108>)
 80033bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	035b      	lsls	r3, r3, #13
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <HAL_ADC_MspInit+0x108>)
 80033ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_ADC_MspInit+0x108>)
 80033ce:	2101      	movs	r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	635a      	str	r2, [r3, #52]	; 0x34
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_ADC_MspInit+0x108>)
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	2201      	movs	r2, #1
 80033da:	4013      	ands	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = TRIGGER_POTENTIOMETER_ADC_Pin;
 80033e0:	213c      	movs	r1, #60	; 0x3c
 80033e2:	187b      	adds	r3, r7, r1
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	2203      	movs	r2, #3
 80033ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	187b      	adds	r3, r7, r1
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(TRIGGER_POTENTIOMETER_ADC_GPIO_Port, &GPIO_InitStruct);
 80033f4:	187a      	adds	r2, r7, r1
 80033f6:	23a0      	movs	r3, #160	; 0xa0
 80033f8:	05db      	lsls	r3, r3, #23
 80033fa:	0011      	movs	r1, r2
 80033fc:	0018      	movs	r0, r3
 80033fe:	f001 fcc1 	bl	8004d84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <HAL_ADC_MspInit+0x110>)
 8003406:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003408:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 800340a:	2205      	movs	r2, #5
 800340c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800340e:	4b16      	ldr	r3, [pc, #88]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 800341c:	2280      	movs	r2, #128	; 0x80
 800341e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	0052      	lsls	r2, r2, #1
 8003426:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	00d2      	lsls	r2, r2, #3
 800342e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 8003432:	2220      	movs	r2, #32
 8003434:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 8003438:	2200      	movs	r2, #0
 800343a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 800343e:	0018      	movs	r0, r3
 8003440:	f001 fa4e 	bl	80048e0 <HAL_DMA_Init>
 8003444:	1e03      	subs	r3, r0, #0
 8003446:	d001      	beq.n	800344c <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8003448:	f7ff feaa 	bl	80031a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a06      	ldr	r2, [pc, #24]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 8003450:	651a      	str	r2, [r3, #80]	; 0x50
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_ADC_MspInit+0x10c>)
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b015      	add	sp, #84	; 0x54
 800345e:	bd90      	pop	{r4, r7, pc}
 8003460:	40012400 	.word	0x40012400
 8003464:	40021000 	.word	0x40021000
 8003468:	20000260 	.word	0x20000260
 800346c:	40020008 	.word	0x40020008

08003470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <HAL_TIM_Base_MspInit+0x80>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d116      	bne.n	80034b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003482:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 8003484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	0209      	lsls	r1, r1, #8
 800348c:	430a      	orrs	r2, r1
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
 8003490:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 8003492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	2013      	movs	r0, #19
 80034a4:	f001 f9ea 	bl	800487c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80034a8:	2013      	movs	r0, #19
 80034aa:	f001 f9fc 	bl	80048a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80034ae:	e01a      	b.n	80034e6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a10      	ldr	r2, [pc, #64]	; (80034f8 <HAL_TIM_Base_MspInit+0x88>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d115      	bne.n	80034e6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 80034bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 80034c0:	2180      	movs	r1, #128	; 0x80
 80034c2:	0289      	lsls	r1, r1, #10
 80034c4:	430a      	orrs	r2, r1
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HAL_TIM_Base_MspInit+0x84>)
 80034ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	029b      	lsls	r3, r3, #10
 80034d0:	4013      	ands	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2100      	movs	r1, #0
 80034da:	2015      	movs	r0, #21
 80034dc:	f001 f9ce 	bl	800487c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80034e0:	2015      	movs	r0, #21
 80034e2:	f001 f9e0 	bl	80048a6 <HAL_NVIC_EnableIRQ>
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b004      	add	sp, #16
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	40002000 	.word	0x40002000
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40014400 	.word	0x40014400

080034fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b095      	sub	sp, #84	; 0x54
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	233c      	movs	r3, #60	; 0x3c
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	0018      	movs	r0, r3
 800350a:	2314      	movs	r3, #20
 800350c:	001a      	movs	r2, r3
 800350e:	2100      	movs	r1, #0
 8003510:	f004 f823 	bl	800755a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003514:	2414      	movs	r4, #20
 8003516:	193b      	adds	r3, r7, r4
 8003518:	0018      	movs	r0, r3
 800351a:	2328      	movs	r3, #40	; 0x28
 800351c:	001a      	movs	r2, r3
 800351e:	2100      	movs	r1, #0
 8003520:	f004 f81b 	bl	800755a <memset>
  if(huart->Instance==USART1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a37      	ldr	r2, [pc, #220]	; (8003608 <HAL_UART_MspInit+0x10c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d167      	bne.n	80035fe <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800352e:	193b      	adds	r3, r7, r4
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003534:	193b      	adds	r3, r7, r4
 8003536:	2200      	movs	r2, #0
 8003538:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800353a:	193b      	adds	r3, r7, r4
 800353c:	0018      	movs	r0, r3
 800353e:	f002 fab3 	bl	8005aa8 <HAL_RCCEx_PeriphCLKConfig>
 8003542:	1e03      	subs	r3, r0, #0
 8003544:	d001      	beq.n	800354a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003546:	f7ff fe2b 	bl	80031a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800354a:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_UART_MspInit+0x110>)
 800354c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354e:	4b2f      	ldr	r3, [pc, #188]	; (800360c <HAL_UART_MspInit+0x110>)
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	01c9      	lsls	r1, r1, #7
 8003554:	430a      	orrs	r2, r1
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
 8003558:	4b2c      	ldr	r3, [pc, #176]	; (800360c <HAL_UART_MspInit+0x110>)
 800355a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	01db      	lsls	r3, r3, #7
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003566:	4b29      	ldr	r3, [pc, #164]	; (800360c <HAL_UART_MspInit+0x110>)
 8003568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356a:	4b28      	ldr	r3, [pc, #160]	; (800360c <HAL_UART_MspInit+0x110>)
 800356c:	2102      	movs	r1, #2
 800356e:	430a      	orrs	r2, r1
 8003570:	635a      	str	r2, [r3, #52]	; 0x34
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <HAL_UART_MspInit+0x110>)
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	2202      	movs	r2, #2
 8003578:	4013      	ands	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUETOOTH_UART_RX_Pin|BLUETOOTH_UART_TX_Pin;
 800357e:	213c      	movs	r1, #60	; 0x3c
 8003580:	187b      	adds	r3, r7, r1
 8003582:	22c0      	movs	r2, #192	; 0xc0
 8003584:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003586:	187b      	adds	r3, r7, r1
 8003588:	2202      	movs	r2, #2
 800358a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	187b      	adds	r3, r7, r1
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003592:	187b      	adds	r3, r7, r1
 8003594:	2200      	movs	r2, #0
 8003596:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003598:	187b      	adds	r3, r7, r1
 800359a:	2200      	movs	r2, #0
 800359c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_UART_MspInit+0x114>)
 80035a2:	0019      	movs	r1, r3
 80035a4:	0010      	movs	r0, r2
 80035a6:	f001 fbed 	bl	8004d84 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80035aa:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035ac:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <HAL_UART_MspInit+0x11c>)
 80035ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80035b0:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035b2:	2232      	movs	r2, #50	; 0x32
 80035b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b6:	4b17      	ldr	r3, [pc, #92]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035bc:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035d6:	2220      	movs	r2, #32
 80035d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035dc:	2200      	movs	r2, #0
 80035de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035e2:	0018      	movs	r0, r3
 80035e4:	f001 f97c 	bl	80048e0 <HAL_DMA_Init>
 80035e8:	1e03      	subs	r3, r0, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80035ec:	f7ff fdd8 	bl	80031a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	4a07      	ldr	r2, [pc, #28]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035f6:	505a      	str	r2, [r3, r1]
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_UART_MspInit+0x118>)
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b015      	add	sp, #84	; 0x54
 8003604:	bd90      	pop	{r4, r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	40013800 	.word	0x40013800
 800360c:	40021000 	.word	0x40021000
 8003610:	50000400 	.word	0x50000400
 8003614:	200003e8 	.word	0x200003e8
 8003618:	4002001c 	.word	0x4002001c

0800361c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003620:	e7fe      	b.n	8003620 <NMI_Handler+0x4>

08003622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003626:	e7fe      	b.n	8003626 <HardFault_Handler+0x4>

08003628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003640:	f000 f9ae 	bl	80039a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <DMA1_Channel1_IRQHandler+0x14>)
 8003652:	0018      	movs	r0, r3
 8003654:	f001 fa54 	bl	8004b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	20000260 	.word	0x20000260

08003664 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <DMA1_Channel2_3_IRQHandler+0x14>)
 800366a:	0018      	movs	r0, r3
 800366c:	f001 fa48 	bl	8004b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	200003e8 	.word	0x200003e8

0800367c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <TIM14_IRQHandler+0x14>)
 8003682:	0018      	movs	r0, r3
 8003684:	f002 fc36 	bl	8005ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	200002bc 	.word	0x200002bc

08003694 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <TIM16_IRQHandler+0x14>)
 800369a:	0018      	movs	r0, r3
 800369c:	f002 fc2a 	bl	8005ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	20000308 	.word	0x20000308

080036ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
	return 1;
 80036b0:	2301      	movs	r3, #1
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_kill>:

int _kill(int pid, int sig)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036c2:	f003 ff0d 	bl	80074e0 <__errno>
 80036c6:	0003      	movs	r3, r0
 80036c8:	2216      	movs	r2, #22
 80036ca:	601a      	str	r2, [r3, #0]
	return -1;
 80036cc:	2301      	movs	r3, #1
 80036ce:	425b      	negs	r3, r3
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b002      	add	sp, #8
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_exit>:

void _exit (int status)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036e0:	2301      	movs	r3, #1
 80036e2:	425a      	negs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0011      	movs	r1, r2
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff ffe5 	bl	80036b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036ee:	e7fe      	b.n	80036ee <_exit+0x16>

080036f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e00a      	b.n	8003718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003702:	e000      	b.n	8003706 <_read+0x16>
 8003704:	bf00      	nop
 8003706:	0001      	movs	r1, r0
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	60ba      	str	r2, [r7, #8]
 800370e:	b2ca      	uxtb	r2, r1
 8003710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	3301      	adds	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	dbf0      	blt.n	8003702 <_read+0x12>
	}

return len;
 8003720:	687b      	ldr	r3, [r7, #4]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b006      	add	sp, #24
 8003728:	bd80      	pop	{r7, pc}

0800372a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e009      	b.n	8003750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	60ba      	str	r2, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	0018      	movs	r0, r3
 8003746:	e000      	b.n	800374a <_write+0x20>
 8003748:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3301      	adds	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	dbf1      	blt.n	800373c <_write+0x12>
	}
	return len;
 8003758:	687b      	ldr	r3, [r7, #4]
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b006      	add	sp, #24
 8003760:	bd80      	pop	{r7, pc}

08003762 <_close>:

int _close(int file)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
	return -1;
 800376a:	2301      	movs	r3, #1
 800376c:	425b      	negs	r3, r3
}
 800376e:	0018      	movs	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	b002      	add	sp, #8
 8003774:	bd80      	pop	{r7, pc}

08003776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	0192      	lsls	r2, r2, #6
 8003786:	605a      	str	r2, [r3, #4]
	return 0;
 8003788:	2300      	movs	r3, #0
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b002      	add	sp, #8
 8003790:	bd80      	pop	{r7, pc}

08003792 <_isatty>:

int _isatty(int file)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
	return 1;
 800379a:	2301      	movs	r3, #1
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
	return 0;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b004      	add	sp, #16
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <_sbrk+0x5c>)
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <_sbrk+0x60>)
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <_sbrk+0x64>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <_sbrk+0x64>)
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <_sbrk+0x68>)
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	18d3      	adds	r3, r2, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d207      	bcs.n	80037fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037ec:	f003 fe78 	bl	80074e0 <__errno>
 80037f0:	0003      	movs	r3, r0
 80037f2:	220c      	movs	r2, #12
 80037f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037f6:	2301      	movs	r3, #1
 80037f8:	425b      	negs	r3, r3
 80037fa:	e009      	b.n	8003810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <_sbrk+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <_sbrk+0x64>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	18d2      	adds	r2, r2, r3
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <_sbrk+0x64>)
 800380c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	b006      	add	sp, #24
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20002000 	.word	0x20002000
 800381c:	00000400 	.word	0x00000400
 8003820:	20000488 	.word	0x20000488
 8003824:	200004a0 	.word	0x200004a0

08003828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <new_trigger>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _potentiometer is a Potentiometer object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Trigger object
Trigger *new_trigger(Potentiometer *_potentiometer) {
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
	Trigger *trigger = (Trigger*) malloc(sizeof(Trigger));
 800383a:	2004      	movs	r0, #4
 800383c:	f003 fe7a 	bl	8007534 <malloc>
 8003840:	0003      	movs	r3, r0
 8003842:	60fb      	str	r3, [r7, #12]
	trigger->potentiometer = _potentiometer;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	601a      	str	r2, [r3, #0]
	return trigger;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	b004      	add	sp, #16
 8003852:	bd80      	pop	{r7, pc}

08003854 <get_trigger_input>:

// REQUIRES: trigger is a Trigger object
// MODIFIES: nothing
// EFFECTS: Returns the currently desired steps being commanded
// by user based on trigger
int16_t get_trigger_input(Trigger *trigger) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	uint32_t raw_counts = get_potentiometer_input(trigger->potentiometer);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	0018      	movs	r0, r3
 8003862:	f7ff fce9 	bl	8003238 <get_potentiometer_input>
 8003866:	0003      	movs	r3, r0
 8003868:	60fb      	str	r3, [r7, #12]
	return raw_counts;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	b21b      	sxth	r3, r3
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b004      	add	sp, #16
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003878:	480d      	ldr	r0, [pc, #52]	; (80038b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800387a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800387c:	f7ff ffd4 	bl	8003828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003880:	480c      	ldr	r0, [pc, #48]	; (80038b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003882:	490d      	ldr	r1, [pc, #52]	; (80038b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003884:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <LoopForever+0xe>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003888:	e002      	b.n	8003890 <LoopCopyDataInit>

0800388a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800388a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800388c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388e:	3304      	adds	r3, #4

08003890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003894:	d3f9      	bcc.n	800388a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003898:	4c0a      	ldr	r4, [pc, #40]	; (80038c4 <LoopForever+0x16>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800389c:	e001      	b.n	80038a2 <LoopFillZerobss>

0800389e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a0:	3204      	adds	r2, #4

080038a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a4:	d3fb      	bcc.n	800389e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038a6:	f003 fe21 	bl	80074ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80038aa:	f7ff f979 	bl	8002ba0 <main>

080038ae <LoopForever>:

LoopForever:
  b LoopForever
 80038ae:	e7fe      	b.n	80038ae <LoopForever>
  ldr   r0, =_estack
 80038b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80038b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80038bc:	0800c58c 	.word	0x0800c58c
  ldr r2, =_sbss
 80038c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80038c4:	200004a0 	.word	0x200004a0

080038c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038c8:	e7fe      	b.n	80038c8 <ADC1_IRQHandler>
	...

080038cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038d2:	1dfb      	adds	r3, r7, #7
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_Init+0x3c>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_Init+0x3c>)
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	0049      	lsls	r1, r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038e6:	2003      	movs	r0, #3
 80038e8:	f000 f810 	bl	800390c <HAL_InitTick>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e001      	b.n	80038fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80038f8:	f7ff fd0c 	bl	8003314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038fc:	1dfb      	adds	r3, r7, #7
 80038fe:	781b      	ldrb	r3, [r3, #0]
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40022000 	.word	0x40022000

0800390c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003914:	230f      	movs	r3, #15
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_InitTick+0x88>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02b      	beq.n	800397c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_InitTick+0x8c>)
 8003926:	681c      	ldr	r4, [r3, #0]
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_InitTick+0x88>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	0019      	movs	r1, r3
 800392e:	23fa      	movs	r3, #250	; 0xfa
 8003930:	0098      	lsls	r0, r3, #2
 8003932:	f7fc fc03 	bl	800013c <__udivsi3>
 8003936:	0003      	movs	r3, r0
 8003938:	0019      	movs	r1, r3
 800393a:	0020      	movs	r0, r4
 800393c:	f7fc fbfe 	bl	800013c <__udivsi3>
 8003940:	0003      	movs	r3, r0
 8003942:	0018      	movs	r0, r3
 8003944:	f000 ffbf 	bl	80048c6 <HAL_SYSTICK_Config>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d112      	bne.n	8003972 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d80a      	bhi.n	8003968 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	2301      	movs	r3, #1
 8003956:	425b      	negs	r3, r3
 8003958:	2200      	movs	r2, #0
 800395a:	0018      	movs	r0, r3
 800395c:	f000 ff8e 	bl	800487c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_InitTick+0x90>)
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e00d      	b.n	8003984 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003968:	230f      	movs	r3, #15
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e008      	b.n	8003984 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003972:	230f      	movs	r3, #15
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e003      	b.n	8003984 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800397c:	230f      	movs	r3, #15
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003984:	230f      	movs	r3, #15
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	781b      	ldrb	r3, [r3, #0]
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b005      	add	sp, #20
 8003990:	bd90      	pop	{r4, r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	20000008 	.word	0x20000008
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004

080039a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_IncTick+0x1c>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	001a      	movs	r2, r3
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_IncTick+0x20>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	18d2      	adds	r2, r2, r3
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_IncTick+0x20>)
 80039b2:	601a      	str	r2, [r3, #0]
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	20000008 	.word	0x20000008
 80039c0:	2000048c 	.word	0x2000048c

080039c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  return uwTick;
 80039c8:	4b02      	ldr	r3, [pc, #8]	; (80039d4 <HAL_GetTick+0x10>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	2000048c 	.word	0x2000048c

080039d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_GetTick>
 80039e4:	0003      	movs	r3, r0
 80039e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3301      	adds	r3, #1
 80039f0:	d005      	beq.n	80039fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_Delay+0x44>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	001a      	movs	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	f7ff ffe0 	bl	80039c4 <HAL_GetTick>
 8003a04:	0002      	movs	r2, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d8f7      	bhi.n	8003a00 <HAL_Delay+0x28>
  {
  }
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b004      	add	sp, #16
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	20000008 	.word	0x20000008

08003a20 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003a30:	401a      	ands	r2, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	fe3fffff 	.word	0xfe3fffff

08003a48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	23e0      	movs	r3, #224	; 0xe0
 8003a56:	045b      	lsls	r3, r3, #17
 8003a58:	4013      	ands	r3, r2
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b002      	add	sp, #8
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	2104      	movs	r1, #4
 8003a76:	400a      	ands	r2, r1
 8003a78:	2107      	movs	r1, #7
 8003a7a:	4091      	lsls	r1, r2
 8003a7c:	000a      	movs	r2, r1
 8003a7e:	43d2      	mvns	r2, r2
 8003a80:	401a      	ands	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2104      	movs	r1, #4
 8003a86:	400b      	ands	r3, r1
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4099      	lsls	r1, r3
 8003a8c:	000b      	movs	r3, r1
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b004      	add	sp, #16
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	2104      	movs	r1, #4
 8003aae:	400a      	ands	r2, r1
 8003ab0:	2107      	movs	r1, #7
 8003ab2:	4091      	lsls	r1, r2
 8003ab4:	000a      	movs	r2, r1
 8003ab6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2104      	movs	r1, #4
 8003abc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003abe:	40da      	lsrs	r2, r3
 8003ac0:	0013      	movs	r3, r2
}
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b002      	add	sp, #8
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	23c0      	movs	r3, #192	; 0xc0
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	4013      	ands	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}

08003aec <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	211f      	movs	r1, #31
 8003b00:	400a      	ands	r2, r1
 8003b02:	210f      	movs	r1, #15
 8003b04:	4091      	lsls	r1, r2
 8003b06:	000a      	movs	r2, r1
 8003b08:	43d2      	mvns	r2, r2
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	0e9b      	lsrs	r3, r3, #26
 8003b10:	210f      	movs	r1, #15
 8003b12:	4019      	ands	r1, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	201f      	movs	r0, #31
 8003b18:	4003      	ands	r3, r0
 8003b1a:	4099      	lsls	r1, r3
 8003b1c:	000b      	movs	r3, r1
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b004      	add	sp, #16
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	035b      	lsls	r3, r3, #13
 8003b3e:	0b5b      	lsrs	r3, r3, #13
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	0352      	lsls	r2, r2, #13
 8003b60:	0b52      	lsrs	r2, r2, #13
 8003b62:	43d2      	mvns	r2, r2
 8003b64:	401a      	ands	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b002      	add	sp, #8
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	0212      	lsls	r2, r2, #8
 8003b88:	43d2      	mvns	r2, r2
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	400b      	ands	r3, r1
 8003b94:	4904      	ldr	r1, [pc, #16]	; (8003ba8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003b96:	400b      	ands	r3, r1
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b004      	add	sp, #16
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	07ffff00 	.word	0x07ffff00

08003bac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a05      	ldr	r2, [pc, #20]	; (8003bd0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0552      	lsls	r2, r2, #21
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b002      	add	sp, #8
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	6fffffe8 	.word	0x6fffffe8

08003bd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	055b      	lsls	r3, r3, #21
 8003be4:	401a      	ands	r2, r3
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	055b      	lsls	r3, r3, #21
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d101      	bne.n	8003bf2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <LL_ADC_Enable+0x20>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	7fffffe8 	.word	0x7fffffe8

08003c20 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <LL_ADC_Disable+0x20>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2202      	movs	r2, #2
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	7fffffe8 	.word	0x7fffffe8

08003c44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2201      	movs	r2, #1
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <LL_ADC_IsEnabled+0x18>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <LL_ADC_IsEnabled+0x1a>
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b002      	add	sp, #8
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a04      	ldr	r2, [pc, #16]	; (8003c88 <LL_ADC_REG_StartConversion+0x20>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	2204      	movs	r2, #4
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	7fffffe8 	.word	0x7fffffe8

08003c8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2204      	movs	r2, #4
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d101      	bne.n	8003ca4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b002      	add	sp, #8
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb8:	231f      	movs	r3, #31
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e17f      	b.n	8003fd6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7ff fb3b 	bl	800335c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2254      	movs	r2, #84	; 0x54
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7ff ff6b 	bl	8003bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8003cfe:	1e03      	subs	r3, r0, #0
 8003d00:	d115      	bne.n	8003d2e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7ff ff50 	bl	8003bac <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d0c:	4bb4      	ldr	r3, [pc, #720]	; (8003fe0 <HAL_ADC_Init+0x330>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	49b4      	ldr	r1, [pc, #720]	; (8003fe4 <HAL_ADC_Init+0x334>)
 8003d12:	0018      	movs	r0, r3
 8003d14:	f7fc fa12 	bl	800013c <__udivsi3>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d20:	e002      	b.n	8003d28 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f9      	bne.n	8003d22 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7ff ff4e 	bl	8003bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8003d38:	1e03      	subs	r3, r0, #0
 8003d3a:	d10f      	bne.n	8003d5c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	2210      	movs	r2, #16
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d54:	231f      	movs	r3, #31
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff ff93 	bl	8003c8c <LL_ADC_REG_IsConversionOngoing>
 8003d66:	0003      	movs	r3, r0
 8003d68:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	2210      	movs	r2, #16
 8003d70:	4013      	ands	r3, r2
 8003d72:	d000      	beq.n	8003d76 <HAL_ADC_Init+0xc6>
 8003d74:	e122      	b.n	8003fbc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d000      	beq.n	8003d7e <HAL_ADC_Init+0xce>
 8003d7c:	e11e      	b.n	8003fbc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	4a99      	ldr	r2, [pc, #612]	; (8003fe8 <HAL_ADC_Init+0x338>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	2202      	movs	r2, #2
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7ff ff56 	bl	8003c44 <LL_ADC_IsEnabled>
 8003d98:	1e03      	subs	r3, r0, #0
 8003d9a:	d000      	beq.n	8003d9e <HAL_ADC_Init+0xee>
 8003d9c:	e0ad      	b.n	8003efa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7e1b      	ldrb	r3, [r3, #24]
 8003da6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003da8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7e5b      	ldrb	r3, [r3, #25]
 8003dae:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003db0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7e9b      	ldrb	r3, [r3, #26]
 8003db6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003db8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_ADC_Init+0x118>
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	015b      	lsls	r3, r3, #5
 8003dc6:	e000      	b.n	8003dca <HAL_ADC_Init+0x11a>
 8003dc8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003dca:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003dd0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da04      	bge.n	8003de4 <HAL_ADC_Init+0x134>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	e001      	b.n	8003de8 <HAL_ADC_Init+0x138>
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003de8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	5c5b      	ldrb	r3, [r3, r1]
 8003df0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003df2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	5c9b      	ldrb	r3, [r3, r2]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d115      	bne.n	8003e30 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7e9b      	ldrb	r3, [r3, #26]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	0252      	lsls	r2, r2, #9
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	e00b      	b.n	8003e30 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	2201      	movs	r2, #1
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e3c:	23e0      	movs	r3, #224	; 0xe0
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e46:	4313      	orrs	r3, r2
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a65      	ldr	r2, [pc, #404]	; (8003fec <HAL_ADC_Init+0x33c>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	0f9b      	lsrs	r3, r3, #30
 8003e6a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e70:	4313      	orrs	r3, r2
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	223c      	movs	r2, #60	; 0x3c
 8003e7c:	5c9b      	ldrb	r3, [r3, r2]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d111      	bne.n	8003ea6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	0f9b      	lsrs	r3, r3, #30
 8003e88:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e8e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003e94:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003e9a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	4a50      	ldr	r2, [pc, #320]	; (8003ff0 <HAL_ADC_Init+0x340>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	23c0      	movs	r3, #192	; 0xc0
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d018      	beq.n	8003efa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	05db      	lsls	r3, r3, #23
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d012      	beq.n	8003efa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d00c      	beq.n	8003efa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003ee0:	4b44      	ldr	r3, [pc, #272]	; (8003ff4 <HAL_ADC_Init+0x344>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a44      	ldr	r2, [pc, #272]	; (8003ff8 <HAL_ADC_Init+0x348>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	0019      	movs	r1, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	23f0      	movs	r3, #240	; 0xf0
 8003ef0:	039b      	lsls	r3, r3, #14
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <HAL_ADC_Init+0x344>)
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f02:	001a      	movs	r2, r3
 8003f04:	2100      	movs	r1, #0
 8003f06:	f7ff fdac 	bl	8003a62 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	493a      	ldr	r1, [pc, #232]	; (8003ffc <HAL_ADC_Init+0x34c>)
 8003f14:	001a      	movs	r2, r3
 8003f16:	f7ff fda4 	bl	8003a62 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2110      	movs	r1, #16
 8003f2e:	4249      	negs	r1, r1
 8003f30:	430a      	orrs	r2, r1
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28
 8003f34:	e018      	b.n	8003f68 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	039b      	lsls	r3, r3, #14
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d112      	bne.n	8003f68 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	221c      	movs	r2, #28
 8003f52:	4013      	ands	r3, r2
 8003f54:	2210      	movs	r2, #16
 8003f56:	4252      	negs	r2, r2
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7ff fd94 	bl	8003a9c <LL_ADC_GetSamplingTimeCommonChannels>
 8003f74:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d10b      	bne.n	8003f96 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	2203      	movs	r2, #3
 8003f8a:	4393      	bics	r3, r2
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f94:	e01c      	b.n	8003fd0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	2212      	movs	r2, #18
 8003f9c:	4393      	bics	r3, r2
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	2201      	movs	r2, #1
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003fb2:	231f      	movs	r3, #31
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003fba:	e009      	b.n	8003fd0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003fc8:	231f      	movs	r3, #31
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	2201      	movs	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003fd0:	231f      	movs	r3, #31
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	781b      	ldrb	r3, [r3, #0]
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b008      	add	sp, #32
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	00030d40 	.word	0x00030d40
 8003fe8:	fffffefd 	.word	0xfffffefd
 8003fec:	fffe0201 	.word	0xfffe0201
 8003ff0:	1ffffc02 	.word	0x1ffffc02
 8003ff4:	40012708 	.word	0x40012708
 8003ff8:	ffc3ffff 	.word	0xffc3ffff
 8003ffc:	07ffff04 	.word	0x07ffff04

08004000 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004000:	b5b0      	push	{r4, r5, r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0018      	movs	r0, r3
 8004012:	f7ff fe3b 	bl	8003c8c <LL_ADC_REG_IsConversionOngoing>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d16c      	bne.n	80040f4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2254      	movs	r2, #84	; 0x54
 800401e:	5c9b      	ldrb	r3, [r3, r2]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_ADC_Start_DMA+0x28>
 8004024:	2302      	movs	r3, #2
 8004026:	e06c      	b.n	8004102 <HAL_ADC_Start_DMA+0x102>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2254      	movs	r2, #84	; 0x54
 800402c:	2101      	movs	r1, #1
 800402e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	4013      	ands	r3, r2
 800403a:	d113      	bne.n	8004064 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0018      	movs	r0, r3
 8004042:	f7ff fdff 	bl	8003c44 <LL_ADC_IsEnabled>
 8004046:	1e03      	subs	r3, r0, #0
 8004048:	d004      	beq.n	8004054 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	0018      	movs	r0, r3
 8004050:	f7ff fde6 	bl	8003c20 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2101      	movs	r1, #1
 8004060:	430a      	orrs	r2, r1
 8004062:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004064:	2517      	movs	r5, #23
 8004066:	197c      	adds	r4, r7, r5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	0018      	movs	r0, r3
 800406c:	f000 fa46 	bl	80044fc <ADC_Enable>
 8004070:	0003      	movs	r3, r0
 8004072:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004074:	002c      	movs	r4, r5
 8004076:	193b      	adds	r3, r7, r4
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d13e      	bne.n	80040fc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004082:	4a22      	ldr	r2, [pc, #136]	; (800410c <HAL_ADC_Start_DMA+0x10c>)
 8004084:	4013      	ands	r3, r2
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	0052      	lsls	r2, r2, #1
 800408a:	431a      	orrs	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409a:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_ADC_Start_DMA+0x110>)
 800409c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a2:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <HAL_ADC_Start_DMA+0x114>)
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040aa:	4a1b      	ldr	r2, [pc, #108]	; (8004118 <HAL_ADC_Start_DMA+0x118>)
 80040ac:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	221c      	movs	r2, #28
 80040b4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2254      	movs	r2, #84	; 0x54
 80040ba:	2100      	movs	r1, #0
 80040bc:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2110      	movs	r1, #16
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3340      	adds	r3, #64	; 0x40
 80040d8:	0019      	movs	r1, r3
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	193c      	adds	r4, r7, r4
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f000 fc88 	bl	80049f4 <HAL_DMA_Start_IT>
 80040e4:	0003      	movs	r3, r0
 80040e6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7ff fdbb 	bl	8003c68 <LL_ADC_REG_StartConversion>
 80040f2:	e003      	b.n	80040fc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040f4:	2317      	movs	r3, #23
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	2202      	movs	r2, #2
 80040fa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80040fc:	2317      	movs	r3, #23
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	781b      	ldrb	r3, [r3, #0]
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b006      	add	sp, #24
 8004108:	bdb0      	pop	{r4, r5, r7, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	fffff0fe 	.word	0xfffff0fe
 8004110:	08004609 	.word	0x08004609
 8004114:	080046d1 	.word	0x080046d1
 8004118:	080046ef 	.word	0x080046ef

0800411c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	b002      	add	sp, #8
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004156:	2317      	movs	r3, #23
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2254      	movs	r2, #84	; 0x54
 8004166:	5c9b      	ldrb	r3, [r3, r2]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x24>
 800416c:	2302      	movs	r3, #2
 800416e:	e1c0      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x3a6>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2254      	movs	r2, #84	; 0x54
 8004174:	2101      	movs	r1, #1
 8004176:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0018      	movs	r0, r3
 800417e:	f7ff fd85 	bl	8003c8c <LL_ADC_REG_IsConversionOngoing>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d000      	beq.n	8004188 <HAL_ADC_ConfigChannel+0x3c>
 8004186:	e1a3      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d100      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x46>
 8004190:	e143      	b.n	800441a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	429a      	cmp	r2, r3
 800419c:	d004      	beq.n	80041a8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041a2:	4ac1      	ldr	r2, [pc, #772]	; (80044a8 <HAL_ADC_ConfigChannel+0x35c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d108      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0019      	movs	r1, r3
 80041b2:	0010      	movs	r0, r2
 80041b4:	f7ff fcba 	bl	8003b2c <LL_ADC_REG_SetSequencerChAdd>
 80041b8:	e0c9      	b.n	800434e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	211f      	movs	r1, #31
 80041c4:	400b      	ands	r3, r1
 80041c6:	210f      	movs	r1, #15
 80041c8:	4099      	lsls	r1, r3
 80041ca:	000b      	movs	r3, r1
 80041cc:	43db      	mvns	r3, r3
 80041ce:	4013      	ands	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	035b      	lsls	r3, r3, #13
 80041d8:	0b5b      	lsrs	r3, r3, #13
 80041da:	d105      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x9c>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0e9b      	lsrs	r3, r3, #26
 80041e2:	221f      	movs	r2, #31
 80041e4:	4013      	ands	r3, r2
 80041e6:	e098      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2201      	movs	r2, #1
 80041ee:	4013      	ands	r3, r2
 80041f0:	d000      	beq.n	80041f4 <HAL_ADC_ConfigChannel+0xa8>
 80041f2:	e091      	b.n	8004318 <HAL_ADC_ConfigChannel+0x1cc>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2202      	movs	r2, #2
 80041fa:	4013      	ands	r3, r2
 80041fc:	d000      	beq.n	8004200 <HAL_ADC_ConfigChannel+0xb4>
 80041fe:	e089      	b.n	8004314 <HAL_ADC_ConfigChannel+0x1c8>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2204      	movs	r2, #4
 8004206:	4013      	ands	r3, r2
 8004208:	d000      	beq.n	800420c <HAL_ADC_ConfigChannel+0xc0>
 800420a:	e081      	b.n	8004310 <HAL_ADC_ConfigChannel+0x1c4>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2208      	movs	r2, #8
 8004212:	4013      	ands	r3, r2
 8004214:	d000      	beq.n	8004218 <HAL_ADC_ConfigChannel+0xcc>
 8004216:	e079      	b.n	800430c <HAL_ADC_ConfigChannel+0x1c0>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2210      	movs	r2, #16
 800421e:	4013      	ands	r3, r2
 8004220:	d000      	beq.n	8004224 <HAL_ADC_ConfigChannel+0xd8>
 8004222:	e071      	b.n	8004308 <HAL_ADC_ConfigChannel+0x1bc>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2220      	movs	r2, #32
 800422a:	4013      	ands	r3, r2
 800422c:	d000      	beq.n	8004230 <HAL_ADC_ConfigChannel+0xe4>
 800422e:	e069      	b.n	8004304 <HAL_ADC_ConfigChannel+0x1b8>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2240      	movs	r2, #64	; 0x40
 8004236:	4013      	ands	r3, r2
 8004238:	d000      	beq.n	800423c <HAL_ADC_ConfigChannel+0xf0>
 800423a:	e061      	b.n	8004300 <HAL_ADC_ConfigChannel+0x1b4>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2280      	movs	r2, #128	; 0x80
 8004242:	4013      	ands	r3, r2
 8004244:	d000      	beq.n	8004248 <HAL_ADC_ConfigChannel+0xfc>
 8004246:	e059      	b.n	80042fc <HAL_ADC_ConfigChannel+0x1b0>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4013      	ands	r3, r2
 8004252:	d151      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x1ac>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4013      	ands	r3, r2
 800425e:	d149      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x1a8>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4013      	ands	r3, r2
 800426a:	d141      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x1a4>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4013      	ands	r3, r2
 8004276:	d139      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x1a0>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	015b      	lsls	r3, r3, #5
 8004280:	4013      	ands	r3, r2
 8004282:	d131      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x19c>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	019b      	lsls	r3, r3, #6
 800428c:	4013      	ands	r3, r2
 800428e:	d129      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x198>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	01db      	lsls	r3, r3, #7
 8004298:	4013      	ands	r3, r2
 800429a:	d121      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x194>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	4013      	ands	r3, r2
 80042a6:	d119      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x190>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	025b      	lsls	r3, r3, #9
 80042b0:	4013      	ands	r3, r2
 80042b2:	d111      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x18c>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	029b      	lsls	r3, r3, #10
 80042bc:	4013      	ands	r3, r2
 80042be:	d109      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x188>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	02db      	lsls	r3, r3, #11
 80042c8:	4013      	ands	r3, r2
 80042ca:	d001      	beq.n	80042d0 <HAL_ADC_ConfigChannel+0x184>
 80042cc:	2312      	movs	r3, #18
 80042ce:	e024      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042d0:	2300      	movs	r3, #0
 80042d2:	e022      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042d4:	2311      	movs	r3, #17
 80042d6:	e020      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042d8:	2310      	movs	r3, #16
 80042da:	e01e      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042dc:	230f      	movs	r3, #15
 80042de:	e01c      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042e0:	230e      	movs	r3, #14
 80042e2:	e01a      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042e4:	230d      	movs	r3, #13
 80042e6:	e018      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042e8:	230c      	movs	r3, #12
 80042ea:	e016      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042ec:	230b      	movs	r3, #11
 80042ee:	e014      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042f0:	230a      	movs	r3, #10
 80042f2:	e012      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042f4:	2309      	movs	r3, #9
 80042f6:	e010      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042f8:	2308      	movs	r3, #8
 80042fa:	e00e      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 80042fc:	2307      	movs	r3, #7
 80042fe:	e00c      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 8004300:	2306      	movs	r3, #6
 8004302:	e00a      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 8004304:	2305      	movs	r3, #5
 8004306:	e008      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 8004308:	2304      	movs	r3, #4
 800430a:	e006      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 800430c:	2303      	movs	r3, #3
 800430e:	e004      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 8004310:	2302      	movs	r3, #2
 8004312:	e002      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_ADC_ConfigChannel+0x1ce>
 8004318:	2300      	movs	r3, #0
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	6852      	ldr	r2, [r2, #4]
 800431e:	201f      	movs	r0, #31
 8004320:	4002      	ands	r2, r0
 8004322:	4093      	lsls	r3, r2
 8004324:	000a      	movs	r2, r1
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	d808      	bhi.n	800434e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	001a      	movs	r2, r3
 800434a:	f7ff fbcf 	bl	8003aec <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	001a      	movs	r2, r3
 800435c:	f7ff fc0a 	bl	8003b74 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	db00      	blt.n	800436a <HAL_ADC_ConfigChannel+0x21e>
 8004368:	e0bc      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800436a:	4b50      	ldr	r3, [pc, #320]	; (80044ac <HAL_ADC_ConfigChannel+0x360>)
 800436c:	0018      	movs	r0, r3
 800436e:	f7ff fb6b 	bl	8003a48 <LL_ADC_GetCommonPathInternalCh>
 8004372:	0003      	movs	r3, r0
 8004374:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a4d      	ldr	r2, [pc, #308]	; (80044b0 <HAL_ADC_ConfigChannel+0x364>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d122      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004388:	d11d      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2280      	movs	r2, #128	; 0x80
 800438e:	0412      	lsls	r2, r2, #16
 8004390:	4313      	orrs	r3, r2
 8004392:	4a46      	ldr	r2, [pc, #280]	; (80044ac <HAL_ADC_ConfigChannel+0x360>)
 8004394:	0019      	movs	r1, r3
 8004396:	0010      	movs	r0, r2
 8004398:	f7ff fb42 	bl	8003a20 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800439c:	4b45      	ldr	r3, [pc, #276]	; (80044b4 <HAL_ADC_ConfigChannel+0x368>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4945      	ldr	r1, [pc, #276]	; (80044b8 <HAL_ADC_ConfigChannel+0x36c>)
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7fb feca 	bl	800013c <__udivsi3>
 80043a8:	0003      	movs	r3, r0
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	0013      	movs	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	189b      	adds	r3, r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043b6:	e002      	b.n	80043be <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f9      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043c4:	e08e      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3c      	ldr	r2, [pc, #240]	; (80044bc <HAL_ADC_ConfigChannel+0x370>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10e      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	045b      	lsls	r3, r3, #17
 80043d6:	4013      	ands	r3, r2
 80043d8:	d109      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2280      	movs	r2, #128	; 0x80
 80043de:	0452      	lsls	r2, r2, #17
 80043e0:	4313      	orrs	r3, r2
 80043e2:	4a32      	ldr	r2, [pc, #200]	; (80044ac <HAL_ADC_ConfigChannel+0x360>)
 80043e4:	0019      	movs	r1, r3
 80043e6:	0010      	movs	r0, r2
 80043e8:	f7ff fb1a 	bl	8003a20 <LL_ADC_SetCommonPathInternalCh>
 80043ec:	e07a      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a33      	ldr	r2, [pc, #204]	; (80044c0 <HAL_ADC_ConfigChannel+0x374>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d000      	beq.n	80043fa <HAL_ADC_ConfigChannel+0x2ae>
 80043f8:	e074      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	03db      	lsls	r3, r3, #15
 8004400:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004402:	d000      	beq.n	8004406 <HAL_ADC_ConfigChannel+0x2ba>
 8004404:	e06e      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2280      	movs	r2, #128	; 0x80
 800440a:	03d2      	lsls	r2, r2, #15
 800440c:	4313      	orrs	r3, r2
 800440e:	4a27      	ldr	r2, [pc, #156]	; (80044ac <HAL_ADC_ConfigChannel+0x360>)
 8004410:	0019      	movs	r1, r3
 8004412:	0010      	movs	r0, r2
 8004414:	f7ff fb04 	bl	8003a20 <LL_ADC_SetCommonPathInternalCh>
 8004418:	e064      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	061b      	lsls	r3, r3, #24
 8004422:	429a      	cmp	r2, r3
 8004424:	d004      	beq.n	8004430 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800442a:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <HAL_ADC_ConfigChannel+0x35c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d107      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	0019      	movs	r1, r3
 800443a:	0010      	movs	r0, r2
 800443c:	f7ff fb87 	bl	8003b4e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	da4d      	bge.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004448:	4b18      	ldr	r3, [pc, #96]	; (80044ac <HAL_ADC_ConfigChannel+0x360>)
 800444a:	0018      	movs	r0, r3
 800444c:	f7ff fafc 	bl	8003a48 <LL_ADC_GetCommonPathInternalCh>
 8004450:	0003      	movs	r3, r0
 8004452:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <HAL_ADC_ConfigChannel+0x364>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d108      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_ADC_ConfigChannel+0x378>)
 8004462:	4013      	ands	r3, r2
 8004464:	4a11      	ldr	r2, [pc, #68]	; (80044ac <HAL_ADC_ConfigChannel+0x360>)
 8004466:	0019      	movs	r1, r3
 8004468:	0010      	movs	r0, r2
 800446a:	f7ff fad9 	bl	8003a20 <LL_ADC_SetCommonPathInternalCh>
 800446e:	e039      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a11      	ldr	r2, [pc, #68]	; (80044bc <HAL_ADC_ConfigChannel+0x370>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d108      	bne.n	800448c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <HAL_ADC_ConfigChannel+0x37c>)
 800447e:	4013      	ands	r3, r2
 8004480:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <HAL_ADC_ConfigChannel+0x360>)
 8004482:	0019      	movs	r1, r3
 8004484:	0010      	movs	r0, r2
 8004486:	f7ff facb 	bl	8003a20 <LL_ADC_SetCommonPathInternalCh>
 800448a:	e02b      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <HAL_ADC_ConfigChannel+0x374>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d126      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <HAL_ADC_ConfigChannel+0x380>)
 800449a:	4013      	ands	r3, r2
 800449c:	4a03      	ldr	r2, [pc, #12]	; (80044ac <HAL_ADC_ConfigChannel+0x360>)
 800449e:	0019      	movs	r1, r3
 80044a0:	0010      	movs	r0, r2
 80044a2:	f7ff fabd 	bl	8003a20 <LL_ADC_SetCommonPathInternalCh>
 80044a6:	e01d      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x398>
 80044a8:	80000004 	.word	0x80000004
 80044ac:	40012708 	.word	0x40012708
 80044b0:	b0001000 	.word	0xb0001000
 80044b4:	20000000 	.word	0x20000000
 80044b8:	00030d40 	.word	0x00030d40
 80044bc:	b8004000 	.word	0xb8004000
 80044c0:	b4002000 	.word	0xb4002000
 80044c4:	ff7fffff 	.word	0xff7fffff
 80044c8:	feffffff 	.word	0xfeffffff
 80044cc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	2220      	movs	r2, #32
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044dc:	2317      	movs	r3, #23
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2254      	movs	r2, #84	; 0x54
 80044e8:	2100      	movs	r1, #0
 80044ea:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80044ec:	2317      	movs	r3, #23
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	781b      	ldrb	r3, [r3, #0]
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b006      	add	sp, #24
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)

080044fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004504:	2300      	movs	r3, #0
 8004506:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	0018      	movs	r0, r3
 800450e:	f7ff fb99 	bl	8003c44 <LL_ADC_IsEnabled>
 8004512:	1e03      	subs	r3, r0, #0
 8004514:	d000      	beq.n	8004518 <ADC_Enable+0x1c>
 8004516:	e069      	b.n	80045ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	4a36      	ldr	r2, [pc, #216]	; (80045f8 <ADC_Enable+0xfc>)
 8004520:	4013      	ands	r3, r2
 8004522:	d00d      	beq.n	8004540 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004528:	2210      	movs	r2, #16
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	2201      	movs	r2, #1
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e056      	b.n	80045ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff fb59 	bl	8003bfc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800454a:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <ADC_Enable+0x100>)
 800454c:	0018      	movs	r0, r3
 800454e:	f7ff fa7b 	bl	8003a48 <LL_ADC_GetCommonPathInternalCh>
 8004552:	0002      	movs	r2, r0
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	4013      	ands	r3, r2
 800455a:	d00f      	beq.n	800457c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800455c:	4b28      	ldr	r3, [pc, #160]	; (8004600 <ADC_Enable+0x104>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4928      	ldr	r1, [pc, #160]	; (8004604 <ADC_Enable+0x108>)
 8004562:	0018      	movs	r0, r3
 8004564:	f7fb fdea 	bl	800013c <__udivsi3>
 8004568:	0003      	movs	r3, r0
 800456a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800456c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800456e:	e002      	b.n	8004576 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	3b01      	subs	r3, #1
 8004574:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f9      	bne.n	8004570 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	7e5b      	ldrb	r3, [r3, #25]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d033      	beq.n	80045ec <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004584:	f7ff fa1e 	bl	80039c4 <HAL_GetTick>
 8004588:	0003      	movs	r3, r0
 800458a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800458c:	e027      	b.n	80045de <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	0018      	movs	r0, r3
 8004594:	f7ff fb56 	bl	8003c44 <LL_ADC_IsEnabled>
 8004598:	1e03      	subs	r3, r0, #0
 800459a:	d104      	bne.n	80045a6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f7ff fb2b 	bl	8003bfc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045a6:	f7ff fa0d 	bl	80039c4 <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d914      	bls.n	80045de <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2201      	movs	r2, #1
 80045bc:	4013      	ands	r3, r2
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d00d      	beq.n	80045de <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	2210      	movs	r2, #16
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	2201      	movs	r2, #1
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e007      	b.n	80045ee <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2201      	movs	r2, #1
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d1d0      	bne.n	800458e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	0018      	movs	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b004      	add	sp, #16
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	80000017 	.word	0x80000017
 80045fc:	40012708 	.word	0x40012708
 8004600:	20000000 	.word	0x20000000
 8004604:	00030d40 	.word	0x00030d40

08004608 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	2250      	movs	r2, #80	; 0x50
 800461c:	4013      	ands	r3, r2
 800461e:	d141      	bne.n	80046a4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	2280      	movs	r2, #128	; 0x80
 8004626:	0092      	lsls	r2, r2, #2
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	0018      	movs	r0, r3
 8004634:	f7ff fa49 	bl	8003aca <LL_ADC_REG_IsTriggerSourceSWStart>
 8004638:	1e03      	subs	r3, r0, #0
 800463a:	d02e      	beq.n	800469a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	7e9b      	ldrb	r3, [r3, #26]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d12a      	bne.n	800469a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2208      	movs	r2, #8
 800464c:	4013      	ands	r3, r2
 800464e:	2b08      	cmp	r3, #8
 8004650:	d123      	bne.n	800469a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	0018      	movs	r0, r3
 8004658:	f7ff fb18 	bl	8003c8c <LL_ADC_REG_IsConversionOngoing>
 800465c:	1e03      	subs	r3, r0, #0
 800465e:	d110      	bne.n	8004682 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	210c      	movs	r1, #12
 800466c:	438a      	bics	r2, r1
 800466e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004674:	4a15      	ldr	r2, [pc, #84]	; (80046cc <ADC_DMAConvCplt+0xc4>)
 8004676:	4013      	ands	r3, r2
 8004678:	2201      	movs	r2, #1
 800467a:	431a      	orrs	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	659a      	str	r2, [r3, #88]	; 0x58
 8004680:	e00b      	b.n	800469a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	2220      	movs	r2, #32
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004692:	2201      	movs	r2, #1
 8004694:	431a      	orrs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	0018      	movs	r0, r3
 800469e:	f7ff fd3d 	bl	800411c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046a2:	e00f      	b.n	80046c4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	2210      	movs	r2, #16
 80046aa:	4013      	ands	r3, r2
 80046ac:	d004      	beq.n	80046b8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7ff fd43 	bl	800413c <HAL_ADC_ErrorCallback>
}
 80046b6:	e005      	b.n	80046c4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	0010      	movs	r0, r2
 80046c2:	4798      	blx	r3
}
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b004      	add	sp, #16
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	fffffefe 	.word	0xfffffefe

080046d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7ff fd23 	bl	800412c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b004      	add	sp, #16
 80046ec:	bd80      	pop	{r7, pc}

080046ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	2240      	movs	r2, #64	; 0x40
 8004702:	431a      	orrs	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	2204      	movs	r2, #4
 800470e:	431a      	orrs	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	0018      	movs	r0, r3
 8004718:	f7ff fd10 	bl	800413c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800471c:	46c0      	nop			; (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b004      	add	sp, #16
 8004722:	bd80      	pop	{r7, pc}

08004724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	0002      	movs	r2, r0
 800472c:	1dfb      	adds	r3, r7, #7
 800472e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004730:	1dfb      	adds	r3, r7, #7
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b7f      	cmp	r3, #127	; 0x7f
 8004736:	d809      	bhi.n	800474c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004738:	1dfb      	adds	r3, r7, #7
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	001a      	movs	r2, r3
 800473e:	231f      	movs	r3, #31
 8004740:	401a      	ands	r2, r3
 8004742:	4b04      	ldr	r3, [pc, #16]	; (8004754 <__NVIC_EnableIRQ+0x30>)
 8004744:	2101      	movs	r1, #1
 8004746:	4091      	lsls	r1, r2
 8004748:	000a      	movs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b002      	add	sp, #8
 8004752:	bd80      	pop	{r7, pc}
 8004754:	e000e100 	.word	0xe000e100

08004758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	0002      	movs	r2, r0
 8004760:	6039      	str	r1, [r7, #0]
 8004762:	1dfb      	adds	r3, r7, #7
 8004764:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004766:	1dfb      	adds	r3, r7, #7
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b7f      	cmp	r3, #127	; 0x7f
 800476c:	d828      	bhi.n	80047c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800476e:	4a2f      	ldr	r2, [pc, #188]	; (800482c <__NVIC_SetPriority+0xd4>)
 8004770:	1dfb      	adds	r3, r7, #7
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b25b      	sxtb	r3, r3
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	33c0      	adds	r3, #192	; 0xc0
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	589b      	ldr	r3, [r3, r2]
 800477e:	1dfa      	adds	r2, r7, #7
 8004780:	7812      	ldrb	r2, [r2, #0]
 8004782:	0011      	movs	r1, r2
 8004784:	2203      	movs	r2, #3
 8004786:	400a      	ands	r2, r1
 8004788:	00d2      	lsls	r2, r2, #3
 800478a:	21ff      	movs	r1, #255	; 0xff
 800478c:	4091      	lsls	r1, r2
 800478e:	000a      	movs	r2, r1
 8004790:	43d2      	mvns	r2, r2
 8004792:	401a      	ands	r2, r3
 8004794:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	019b      	lsls	r3, r3, #6
 800479a:	22ff      	movs	r2, #255	; 0xff
 800479c:	401a      	ands	r2, r3
 800479e:	1dfb      	adds	r3, r7, #7
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	0018      	movs	r0, r3
 80047a4:	2303      	movs	r3, #3
 80047a6:	4003      	ands	r3, r0
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047ac:	481f      	ldr	r0, [pc, #124]	; (800482c <__NVIC_SetPriority+0xd4>)
 80047ae:	1dfb      	adds	r3, r7, #7
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	b25b      	sxtb	r3, r3
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	430a      	orrs	r2, r1
 80047b8:	33c0      	adds	r3, #192	; 0xc0
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80047be:	e031      	b.n	8004824 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <__NVIC_SetPriority+0xd8>)
 80047c2:	1dfb      	adds	r3, r7, #7
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	0019      	movs	r1, r3
 80047c8:	230f      	movs	r3, #15
 80047ca:	400b      	ands	r3, r1
 80047cc:	3b08      	subs	r3, #8
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	3306      	adds	r3, #6
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	18d3      	adds	r3, r2, r3
 80047d6:	3304      	adds	r3, #4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1dfa      	adds	r2, r7, #7
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	0011      	movs	r1, r2
 80047e0:	2203      	movs	r2, #3
 80047e2:	400a      	ands	r2, r1
 80047e4:	00d2      	lsls	r2, r2, #3
 80047e6:	21ff      	movs	r1, #255	; 0xff
 80047e8:	4091      	lsls	r1, r2
 80047ea:	000a      	movs	r2, r1
 80047ec:	43d2      	mvns	r2, r2
 80047ee:	401a      	ands	r2, r3
 80047f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	22ff      	movs	r2, #255	; 0xff
 80047f8:	401a      	ands	r2, r3
 80047fa:	1dfb      	adds	r3, r7, #7
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	0018      	movs	r0, r3
 8004800:	2303      	movs	r3, #3
 8004802:	4003      	ands	r3, r0
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004808:	4809      	ldr	r0, [pc, #36]	; (8004830 <__NVIC_SetPriority+0xd8>)
 800480a:	1dfb      	adds	r3, r7, #7
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	001c      	movs	r4, r3
 8004810:	230f      	movs	r3, #15
 8004812:	4023      	ands	r3, r4
 8004814:	3b08      	subs	r3, #8
 8004816:	089b      	lsrs	r3, r3, #2
 8004818:	430a      	orrs	r2, r1
 800481a:	3306      	adds	r3, #6
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	18c3      	adds	r3, r0, r3
 8004820:	3304      	adds	r3, #4
 8004822:	601a      	str	r2, [r3, #0]
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	b003      	add	sp, #12
 800482a:	bd90      	pop	{r4, r7, pc}
 800482c:	e000e100 	.word	0xe000e100
 8004830:	e000ed00 	.word	0xe000ed00

08004834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	1e5a      	subs	r2, r3, #1
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	045b      	lsls	r3, r3, #17
 8004844:	429a      	cmp	r2, r3
 8004846:	d301      	bcc.n	800484c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004848:	2301      	movs	r3, #1
 800484a:	e010      	b.n	800486e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <SysTick_Config+0x44>)
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	3a01      	subs	r2, #1
 8004852:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004854:	2301      	movs	r3, #1
 8004856:	425b      	negs	r3, r3
 8004858:	2103      	movs	r1, #3
 800485a:	0018      	movs	r0, r3
 800485c:	f7ff ff7c 	bl	8004758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <SysTick_Config+0x44>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004866:	4b04      	ldr	r3, [pc, #16]	; (8004878 <SysTick_Config+0x44>)
 8004868:	2207      	movs	r2, #7
 800486a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800486c:	2300      	movs	r3, #0
}
 800486e:	0018      	movs	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	b002      	add	sp, #8
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	e000e010 	.word	0xe000e010

0800487c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	210f      	movs	r1, #15
 8004888:	187b      	adds	r3, r7, r1
 800488a:	1c02      	adds	r2, r0, #0
 800488c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	187b      	adds	r3, r7, r1
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	b25b      	sxtb	r3, r3
 8004896:	0011      	movs	r1, r2
 8004898:	0018      	movs	r0, r3
 800489a:	f7ff ff5d 	bl	8004758 <__NVIC_SetPriority>
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b004      	add	sp, #16
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	0002      	movs	r2, r0
 80048ae:	1dfb      	adds	r3, r7, #7
 80048b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048b2:	1dfb      	adds	r3, r7, #7
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	b25b      	sxtb	r3, r3
 80048b8:	0018      	movs	r0, r3
 80048ba:	f7ff ff33 	bl	8004724 <__NVIC_EnableIRQ>
}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b002      	add	sp, #8
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7ff ffaf 	bl	8004834 <SysTick_Config>
 80048d6:	0003      	movs	r3, r0
}
 80048d8:	0018      	movs	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	b002      	add	sp, #8
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e077      	b.n	80049e2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a3d      	ldr	r2, [pc, #244]	; (80049ec <HAL_DMA_Init+0x10c>)
 80048f8:	4694      	mov	ip, r2
 80048fa:	4463      	add	r3, ip
 80048fc:	2114      	movs	r1, #20
 80048fe:	0018      	movs	r0, r3
 8004900:	f7fb fc1c 	bl	800013c <__udivsi3>
 8004904:	0003      	movs	r3, r0
 8004906:	009a      	lsls	r2, r3, #2
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2225      	movs	r2, #37	; 0x25
 8004910:	2102      	movs	r1, #2
 8004912:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4934      	ldr	r1, [pc, #208]	; (80049f0 <HAL_DMA_Init+0x110>)
 8004920:	400a      	ands	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6819      	ldr	r1, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	0018      	movs	r0, r3
 800495e:	f000 f9c1 	bl	8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	2380      	movs	r3, #128	; 0x80
 8004968:	01db      	lsls	r3, r3, #7
 800496a:	429a      	cmp	r2, r3
 800496c:	d102      	bne.n	8004974 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497c:	213f      	movs	r1, #63	; 0x3f
 800497e:	400a      	ands	r2, r1
 8004980:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800498a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d011      	beq.n	80049b8 <HAL_DMA_Init+0xd8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b04      	cmp	r3, #4
 800499a:	d80d      	bhi.n	80049b8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	0018      	movs	r0, r3
 80049a0:	f000 f9cc 	bl	8004d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	e008      	b.n	80049ca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2225      	movs	r2, #37	; 0x25
 80049d4:	2101      	movs	r1, #1
 80049d6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2224      	movs	r2, #36	; 0x24
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b002      	add	sp, #8
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	bffdfff8 	.word	0xbffdfff8
 80049f0:	ffff800f 	.word	0xffff800f

080049f4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a02:	2317      	movs	r3, #23
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2224      	movs	r2, #36	; 0x24
 8004a0e:	5c9b      	ldrb	r3, [r3, r2]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_DMA_Start_IT+0x24>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e06f      	b.n	8004af8 <HAL_DMA_Start_IT+0x104>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2224      	movs	r2, #36	; 0x24
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2225      	movs	r2, #37	; 0x25
 8004a24:	5c9b      	ldrb	r3, [r3, r2]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d157      	bne.n	8004adc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2225      	movs	r2, #37	; 0x25
 8004a30:	2102      	movs	r1, #2
 8004a32:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2101      	movs	r1, #1
 8004a46:	438a      	bics	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f907 	bl	8004c64 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	210e      	movs	r1, #14
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e00f      	b.n	8004a90 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	438a      	bics	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	210a      	movs	r1, #10
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	2380      	movs	r3, #128	; 0x80
 8004a98:	025b      	lsls	r3, r3, #9
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d008      	beq.n	8004ab0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	0049      	lsls	r1, r1, #1
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	2180      	movs	r1, #128	; 0x80
 8004ac4:	0049      	lsls	r1, r1, #1
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	e00a      	b.n	8004af2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2280      	movs	r2, #128	; 0x80
 8004ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2224      	movs	r2, #36	; 0x24
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004aea:	2317      	movs	r3, #23
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004af2:	2317      	movs	r3, #23
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	781b      	ldrb	r3, [r3, #0]
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b006      	add	sp, #24
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004b08:	4b55      	ldr	r3, [pc, #340]	; (8004c60 <HAL_DMA_IRQHandler+0x160>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	221c      	movs	r2, #28
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2204      	movs	r2, #4
 8004b20:	409a      	lsls	r2, r3
 8004b22:	0013      	movs	r3, r2
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4013      	ands	r3, r2
 8004b28:	d027      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x7a>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d023      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d107      	bne.n	8004b4e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2104      	movs	r1, #4
 8004b4a:	438a      	bics	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004b4e:	4b44      	ldr	r3, [pc, #272]	; (8004c60 <HAL_DMA_IRQHandler+0x160>)
 8004b50:	6859      	ldr	r1, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	221c      	movs	r2, #28
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <HAL_DMA_IRQHandler+0x160>)
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d100      	bne.n	8004b6e <HAL_DMA_IRQHandler+0x6e>
 8004b6c:	e073      	b.n	8004c56 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	0010      	movs	r0, r2
 8004b76:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004b78:	e06d      	b.n	8004c56 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	221c      	movs	r2, #28
 8004b80:	4013      	ands	r3, r2
 8004b82:	2202      	movs	r2, #2
 8004b84:	409a      	lsls	r2, r3
 8004b86:	0013      	movs	r3, r2
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d02e      	beq.n	8004bec <HAL_DMA_IRQHandler+0xec>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2202      	movs	r2, #2
 8004b92:	4013      	ands	r3, r2
 8004b94:	d02a      	beq.n	8004bec <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d10b      	bne.n	8004bba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	210a      	movs	r1, #10
 8004bae:	438a      	bics	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2225      	movs	r2, #37	; 0x25
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004bba:	4b29      	ldr	r3, [pc, #164]	; (8004c60 <HAL_DMA_IRQHandler+0x160>)
 8004bbc:	6859      	ldr	r1, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	221c      	movs	r2, #28
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <HAL_DMA_IRQHandler+0x160>)
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2224      	movs	r2, #36	; 0x24
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d03a      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	0010      	movs	r0, r2
 8004be8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004bea:	e034      	b.n	8004c56 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	221c      	movs	r2, #28
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	0013      	movs	r3, r2
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d02b      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x158>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2208      	movs	r2, #8
 8004c04:	4013      	ands	r3, r2
 8004c06:	d027      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	210e      	movs	r1, #14
 8004c14:	438a      	bics	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <HAL_DMA_IRQHandler+0x160>)
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	221c      	movs	r2, #28
 8004c22:	4013      	ands	r3, r2
 8004c24:	2201      	movs	r2, #1
 8004c26:	409a      	lsls	r2, r3
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_DMA_IRQHandler+0x160>)
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2225      	movs	r2, #37	; 0x25
 8004c38:	2101      	movs	r1, #1
 8004c3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	2100      	movs	r1, #0
 8004c42:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	0010      	movs	r0, r2
 8004c54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	46c0      	nop			; (mov r8, r8)
}
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b004      	add	sp, #16
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40020000 	.word	0x40020000

08004c64 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c7a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d004      	beq.n	8004c8e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004c8c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <DMA_SetConfig+0x7c>)
 8004c90:	6859      	ldr	r1, [r3, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	221c      	movs	r2, #28
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <DMA_SetConfig+0x7c>)
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d108      	bne.n	8004cc6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cc4:	e007      	b.n	8004cd6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	60da      	str	r2, [r3, #12]
}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b004      	add	sp, #16
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	40020000 	.word	0x40020000

08004ce4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	089b      	lsrs	r3, r3, #2
 8004cf2:	4a10      	ldr	r2, [pc, #64]	; (8004d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004cf4:	4694      	mov	ip, r2
 8004cf6:	4463      	add	r3, ip
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	001a      	movs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	001a      	movs	r2, r3
 8004d06:	23ff      	movs	r3, #255	; 0xff
 8004d08:	4013      	ands	r3, r2
 8004d0a:	3b08      	subs	r3, #8
 8004d0c:	2114      	movs	r1, #20
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7fb fa14 	bl	800013c <__udivsi3>
 8004d14:	0003      	movs	r3, r0
 8004d16:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a07      	ldr	r2, [pc, #28]	; (8004d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004d1c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	221f      	movs	r2, #31
 8004d22:	4013      	ands	r3, r2
 8004d24:	2201      	movs	r2, #1
 8004d26:	409a      	lsls	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004d2c:	46c0      	nop			; (mov r8, r8)
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b004      	add	sp, #16
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	10008200 	.word	0x10008200
 8004d38:	40020880 	.word	0x40020880

08004d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	223f      	movs	r2, #63	; 0x3f
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d52:	4694      	mov	ip, r2
 8004d54:	4463      	add	r3, ip
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	001a      	movs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a07      	ldr	r2, [pc, #28]	; (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	2203      	movs	r2, #3
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b004      	add	sp, #16
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	1000823f 	.word	0x1000823f
 8004d80:	40020940 	.word	0x40020940

08004d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d92:	e147      	b.n	8005024 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2101      	movs	r1, #1
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4091      	lsls	r1, r2
 8004d9e:	000a      	movs	r2, r1
 8004da0:	4013      	ands	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d100      	bne.n	8004dac <HAL_GPIO_Init+0x28>
 8004daa:	e138      	b.n	800501e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2203      	movs	r2, #3
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d005      	beq.n	8004dc4 <HAL_GPIO_Init+0x40>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d130      	bne.n	8004e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	2203      	movs	r2, #3
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	0013      	movs	r3, r2
 8004dd4:	43da      	mvns	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	409a      	lsls	r2, r3
 8004de6:	0013      	movs	r3, r2
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	409a      	lsls	r2, r3
 8004e00:	0013      	movs	r3, r2
 8004e02:	43da      	mvns	r2, r3
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4013      	ands	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	2201      	movs	r2, #1
 8004e12:	401a      	ands	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	409a      	lsls	r2, r3
 8004e18:	0013      	movs	r3, r2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d017      	beq.n	8004e62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	0013      	movs	r3, r2
 8004e42:	43da      	mvns	r2, r3
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4013      	ands	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	409a      	lsls	r2, r3
 8004e54:	0013      	movs	r3, r2
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2203      	movs	r2, #3
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d123      	bne.n	8004eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	08da      	lsrs	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3208      	adds	r2, #8
 8004e76:	0092      	lsls	r2, r2, #2
 8004e78:	58d3      	ldr	r3, [r2, r3]
 8004e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2207      	movs	r2, #7
 8004e80:	4013      	ands	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	409a      	lsls	r2, r3
 8004e88:	0013      	movs	r3, r2
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2107      	movs	r1, #7
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	0013      	movs	r3, r2
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	08da      	lsrs	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3208      	adds	r2, #8
 8004eb0:	0092      	lsls	r2, r2, #2
 8004eb2:	6939      	ldr	r1, [r7, #16]
 8004eb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	0013      	movs	r3, r2
 8004ec6:	43da      	mvns	r2, r3
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	401a      	ands	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	409a      	lsls	r2, r3
 8004edc:	0013      	movs	r3, r2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	23c0      	movs	r3, #192	; 0xc0
 8004ef0:	029b      	lsls	r3, r3, #10
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d100      	bne.n	8004ef8 <HAL_GPIO_Init+0x174>
 8004ef6:	e092      	b.n	800501e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004ef8:	4a50      	ldr	r2, [pc, #320]	; (800503c <HAL_GPIO_Init+0x2b8>)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	089b      	lsrs	r3, r3, #2
 8004efe:	3318      	adds	r3, #24
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	589b      	ldr	r3, [r3, r2]
 8004f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2203      	movs	r2, #3
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	220f      	movs	r2, #15
 8004f10:	409a      	lsls	r2, r3
 8004f12:	0013      	movs	r3, r2
 8004f14:	43da      	mvns	r2, r3
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	23a0      	movs	r3, #160	; 0xa0
 8004f20:	05db      	lsls	r3, r3, #23
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d013      	beq.n	8004f4e <HAL_GPIO_Init+0x1ca>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a45      	ldr	r2, [pc, #276]	; (8005040 <HAL_GPIO_Init+0x2bc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00d      	beq.n	8004f4a <HAL_GPIO_Init+0x1c6>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a44      	ldr	r2, [pc, #272]	; (8005044 <HAL_GPIO_Init+0x2c0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d007      	beq.n	8004f46 <HAL_GPIO_Init+0x1c2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a43      	ldr	r2, [pc, #268]	; (8005048 <HAL_GPIO_Init+0x2c4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d101      	bne.n	8004f42 <HAL_GPIO_Init+0x1be>
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e006      	b.n	8004f50 <HAL_GPIO_Init+0x1cc>
 8004f42:	2305      	movs	r3, #5
 8004f44:	e004      	b.n	8004f50 <HAL_GPIO_Init+0x1cc>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e002      	b.n	8004f50 <HAL_GPIO_Init+0x1cc>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_GPIO_Init+0x1cc>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	2103      	movs	r1, #3
 8004f54:	400a      	ands	r2, r1
 8004f56:	00d2      	lsls	r2, r2, #3
 8004f58:	4093      	lsls	r3, r2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004f60:	4936      	ldr	r1, [pc, #216]	; (800503c <HAL_GPIO_Init+0x2b8>)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	089b      	lsrs	r3, r3, #2
 8004f66:	3318      	adds	r3, #24
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f6e:	4b33      	ldr	r3, [pc, #204]	; (800503c <HAL_GPIO_Init+0x2b8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	43da      	mvns	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	035b      	lsls	r3, r3, #13
 8004f86:	4013      	ands	r3, r2
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f92:	4b2a      	ldr	r3, [pc, #168]	; (800503c <HAL_GPIO_Init+0x2b8>)
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004f98:	4b28      	ldr	r3, [pc, #160]	; (800503c <HAL_GPIO_Init+0x2b8>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	43da      	mvns	r2, r3
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	039b      	lsls	r3, r3, #14
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fbc:	4b1f      	ldr	r3, [pc, #124]	; (800503c <HAL_GPIO_Init+0x2b8>)
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	; (800503c <HAL_GPIO_Init+0x2b8>)
 8004fc4:	2384      	movs	r3, #132	; 0x84
 8004fc6:	58d3      	ldr	r3, [r2, r3]
 8004fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	43da      	mvns	r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fe8:	4914      	ldr	r1, [pc, #80]	; (800503c <HAL_GPIO_Init+0x2b8>)
 8004fea:	2284      	movs	r2, #132	; 0x84
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004ff0:	4a12      	ldr	r2, [pc, #72]	; (800503c <HAL_GPIO_Init+0x2b8>)
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	58d3      	ldr	r3, [r2, r3]
 8004ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	43da      	mvns	r2, r3
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4013      	ands	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	025b      	lsls	r3, r3, #9
 800500a:	4013      	ands	r3, r2
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005016:	4909      	ldr	r1, [pc, #36]	; (800503c <HAL_GPIO_Init+0x2b8>)
 8005018:	2280      	movs	r2, #128	; 0x80
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	3301      	adds	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	40da      	lsrs	r2, r3
 800502c:	1e13      	subs	r3, r2, #0
 800502e:	d000      	beq.n	8005032 <HAL_GPIO_Init+0x2ae>
 8005030:	e6b0      	b.n	8004d94 <HAL_GPIO_Init+0x10>
  }
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	46bd      	mov	sp, r7
 8005038:	b006      	add	sp, #24
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021800 	.word	0x40021800
 8005040:	50000400 	.word	0x50000400
 8005044:	50000800 	.word	0x50000800
 8005048:	50000c00 	.word	0x50000c00

0800504c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	0008      	movs	r0, r1
 8005056:	0011      	movs	r1, r2
 8005058:	1cbb      	adds	r3, r7, #2
 800505a:	1c02      	adds	r2, r0, #0
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	1c7b      	adds	r3, r7, #1
 8005060:	1c0a      	adds	r2, r1, #0
 8005062:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005064:	1c7b      	adds	r3, r7, #1
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800506c:	1cbb      	adds	r3, r7, #2
 800506e:	881a      	ldrh	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005074:	e003      	b.n	800507e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005076:	1cbb      	adds	r3, r7, #2
 8005078:	881a      	ldrh	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	46bd      	mov	sp, r7
 8005082:	b002      	add	sp, #8
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005096:	4013      	ands	r3, r2
 8005098:	0019      	movs	r1, r3
 800509a:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d11f      	bne.n	80050ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80050ac:	4b14      	ldr	r3, [pc, #80]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	0013      	movs	r3, r2
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	189b      	adds	r3, r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4912      	ldr	r1, [pc, #72]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80050ba:	0018      	movs	r0, r3
 80050bc:	f7fb f83e 	bl	800013c <__udivsi3>
 80050c0:	0003      	movs	r3, r0
 80050c2:	3301      	adds	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050c6:	e008      	b.n	80050da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e001      	b.n	80050da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e009      	b.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050da:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	401a      	ands	r2, r3
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d0ed      	beq.n	80050c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	0018      	movs	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b004      	add	sp, #16
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	40007000 	.word	0x40007000
 80050fc:	fffff9ff 	.word	0xfffff9ff
 8005100:	20000000 	.word	0x20000000
 8005104:	000f4240 	.word	0x000f4240

08005108 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <LL_RCC_GetAPB1Prescaler+0x14>)
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	23e0      	movs	r3, #224	; 0xe0
 8005112:	01db      	lsls	r3, r3, #7
 8005114:	4013      	ands	r3, r2
}
 8005116:	0018      	movs	r0, r3
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40021000 	.word	0x40021000

08005120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e2fe      	b.n	8005730 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2201      	movs	r2, #1
 8005138:	4013      	ands	r3, r2
 800513a:	d100      	bne.n	800513e <HAL_RCC_OscConfig+0x1e>
 800513c:	e07c      	b.n	8005238 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513e:	4bc3      	ldr	r3, [pc, #780]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2238      	movs	r2, #56	; 0x38
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005148:	4bc0      	ldr	r3, [pc, #768]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2203      	movs	r2, #3
 800514e:	4013      	ands	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	2b10      	cmp	r3, #16
 8005156:	d102      	bne.n	800515e <HAL_RCC_OscConfig+0x3e>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b03      	cmp	r3, #3
 800515c:	d002      	beq.n	8005164 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b08      	cmp	r3, #8
 8005162:	d10b      	bne.n	800517c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	4bb9      	ldr	r3, [pc, #740]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	029b      	lsls	r3, r3, #10
 800516c:	4013      	ands	r3, r2
 800516e:	d062      	beq.n	8005236 <HAL_RCC_OscConfig+0x116>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d15e      	bne.n	8005236 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e2d9      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	025b      	lsls	r3, r3, #9
 8005184:	429a      	cmp	r2, r3
 8005186:	d107      	bne.n	8005198 <HAL_RCC_OscConfig+0x78>
 8005188:	4bb0      	ldr	r3, [pc, #704]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4baf      	ldr	r3, [pc, #700]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	0249      	lsls	r1, r1, #9
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e020      	b.n	80051da <HAL_RCC_OscConfig+0xba>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	23a0      	movs	r3, #160	; 0xa0
 800519e:	02db      	lsls	r3, r3, #11
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d10e      	bne.n	80051c2 <HAL_RCC_OscConfig+0xa2>
 80051a4:	4ba9      	ldr	r3, [pc, #676]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4ba8      	ldr	r3, [pc, #672]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80051aa:	2180      	movs	r1, #128	; 0x80
 80051ac:	02c9      	lsls	r1, r1, #11
 80051ae:	430a      	orrs	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	4ba6      	ldr	r3, [pc, #664]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4ba5      	ldr	r3, [pc, #660]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80051b8:	2180      	movs	r1, #128	; 0x80
 80051ba:	0249      	lsls	r1, r1, #9
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	e00b      	b.n	80051da <HAL_RCC_OscConfig+0xba>
 80051c2:	4ba2      	ldr	r3, [pc, #648]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4ba1      	ldr	r3, [pc, #644]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80051c8:	49a1      	ldr	r1, [pc, #644]	; (8005450 <HAL_RCC_OscConfig+0x330>)
 80051ca:	400a      	ands	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	4b9f      	ldr	r3, [pc, #636]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b9e      	ldr	r3, [pc, #632]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80051d4:	499f      	ldr	r1, [pc, #636]	; (8005454 <HAL_RCC_OscConfig+0x334>)
 80051d6:	400a      	ands	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d014      	beq.n	800520c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e2:	f7fe fbef 	bl	80039c4 <HAL_GetTick>
 80051e6:	0003      	movs	r3, r0
 80051e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051ec:	f7fe fbea 	bl	80039c4 <HAL_GetTick>
 80051f0:	0002      	movs	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e298      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051fe:	4b93      	ldr	r3, [pc, #588]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	029b      	lsls	r3, r3, #10
 8005206:	4013      	ands	r3, r2
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0xcc>
 800520a:	e015      	b.n	8005238 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fe fbda 	bl	80039c4 <HAL_GetTick>
 8005210:	0003      	movs	r3, r0
 8005212:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005216:	f7fe fbd5 	bl	80039c4 <HAL_GetTick>
 800521a:	0002      	movs	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b64      	cmp	r3, #100	; 0x64
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e283      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005228:	4b88      	ldr	r3, [pc, #544]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	029b      	lsls	r3, r3, #10
 8005230:	4013      	ands	r3, r2
 8005232:	d1f0      	bne.n	8005216 <HAL_RCC_OscConfig+0xf6>
 8005234:	e000      	b.n	8005238 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005236:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2202      	movs	r2, #2
 800523e:	4013      	ands	r3, r2
 8005240:	d100      	bne.n	8005244 <HAL_RCC_OscConfig+0x124>
 8005242:	e099      	b.n	8005378 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005244:	4b81      	ldr	r3, [pc, #516]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2238      	movs	r2, #56	; 0x38
 800524a:	4013      	ands	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800524e:	4b7f      	ldr	r3, [pc, #508]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2203      	movs	r2, #3
 8005254:	4013      	ands	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b10      	cmp	r3, #16
 800525c:	d102      	bne.n	8005264 <HAL_RCC_OscConfig+0x144>
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d002      	beq.n	800526a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d135      	bne.n	80052d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800526a:	4b78      	ldr	r3, [pc, #480]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4013      	ands	r3, r2
 8005274:	d005      	beq.n	8005282 <HAL_RCC_OscConfig+0x162>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e256      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005282:	4b72      	ldr	r3, [pc, #456]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4a74      	ldr	r2, [pc, #464]	; (8005458 <HAL_RCC_OscConfig+0x338>)
 8005288:	4013      	ands	r3, r2
 800528a:	0019      	movs	r1, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	021a      	lsls	r2, r3, #8
 8005292:	4b6e      	ldr	r3, [pc, #440]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005294:	430a      	orrs	r2, r1
 8005296:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d112      	bne.n	80052c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800529e:	4b6b      	ldr	r3, [pc, #428]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a6e      	ldr	r2, [pc, #440]	; (800545c <HAL_RCC_OscConfig+0x33c>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	4b67      	ldr	r3, [pc, #412]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80052ae:	430a      	orrs	r2, r1
 80052b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80052b2:	4b66      	ldr	r3, [pc, #408]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	0adb      	lsrs	r3, r3, #11
 80052b8:	2207      	movs	r2, #7
 80052ba:	4013      	ands	r3, r2
 80052bc:	4a68      	ldr	r2, [pc, #416]	; (8005460 <HAL_RCC_OscConfig+0x340>)
 80052be:	40da      	lsrs	r2, r3
 80052c0:	4b68      	ldr	r3, [pc, #416]	; (8005464 <HAL_RCC_OscConfig+0x344>)
 80052c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052c4:	4b68      	ldr	r3, [pc, #416]	; (8005468 <HAL_RCC_OscConfig+0x348>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f7fe fb1f 	bl	800390c <HAL_InitTick>
 80052ce:	1e03      	subs	r3, r0, #0
 80052d0:	d051      	beq.n	8005376 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e22c      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d030      	beq.n	8005340 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80052de:	4b5b      	ldr	r3, [pc, #364]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a5e      	ldr	r2, [pc, #376]	; (800545c <HAL_RCC_OscConfig+0x33c>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	0019      	movs	r1, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	4b57      	ldr	r3, [pc, #348]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80052f2:	4b56      	ldr	r3, [pc, #344]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4b55      	ldr	r3, [pc, #340]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80052f8:	2180      	movs	r1, #128	; 0x80
 80052fa:	0049      	lsls	r1, r1, #1
 80052fc:	430a      	orrs	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fe fb60 	bl	80039c4 <HAL_GetTick>
 8005304:	0003      	movs	r3, r0
 8005306:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800530a:	f7fe fb5b 	bl	80039c4 <HAL_GetTick>
 800530e:	0002      	movs	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e209      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800531c:	4b4b      	ldr	r3, [pc, #300]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4013      	ands	r3, r2
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005328:	4b48      	ldr	r3, [pc, #288]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a4a      	ldr	r2, [pc, #296]	; (8005458 <HAL_RCC_OscConfig+0x338>)
 800532e:	4013      	ands	r3, r2
 8005330:	0019      	movs	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	021a      	lsls	r2, r3, #8
 8005338:	4b44      	ldr	r3, [pc, #272]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	e01b      	b.n	8005378 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005340:	4b42      	ldr	r3, [pc, #264]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b41      	ldr	r3, [pc, #260]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005346:	4949      	ldr	r1, [pc, #292]	; (800546c <HAL_RCC_OscConfig+0x34c>)
 8005348:	400a      	ands	r2, r1
 800534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fe fb3a 	bl	80039c4 <HAL_GetTick>
 8005350:	0003      	movs	r3, r0
 8005352:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005356:	f7fe fb35 	bl	80039c4 <HAL_GetTick>
 800535a:	0002      	movs	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e1e3      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005368:	4b38      	ldr	r3, [pc, #224]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	2380      	movs	r3, #128	; 0x80
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4013      	ands	r3, r2
 8005372:	d1f0      	bne.n	8005356 <HAL_RCC_OscConfig+0x236>
 8005374:	e000      	b.n	8005378 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005376:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2208      	movs	r2, #8
 800537e:	4013      	ands	r3, r2
 8005380:	d047      	beq.n	8005412 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005382:	4b32      	ldr	r3, [pc, #200]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2238      	movs	r2, #56	; 0x38
 8005388:	4013      	ands	r3, r2
 800538a:	2b18      	cmp	r3, #24
 800538c:	d10a      	bne.n	80053a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800538e:	4b2f      	ldr	r3, [pc, #188]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005392:	2202      	movs	r2, #2
 8005394:	4013      	ands	r3, r2
 8005396:	d03c      	beq.n	8005412 <HAL_RCC_OscConfig+0x2f2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d138      	bne.n	8005412 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e1c5      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d019      	beq.n	80053e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80053ac:	4b27      	ldr	r3, [pc, #156]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80053ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053b0:	4b26      	ldr	r3, [pc, #152]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80053b2:	2101      	movs	r1, #1
 80053b4:	430a      	orrs	r2, r1
 80053b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fe fb04 	bl	80039c4 <HAL_GetTick>
 80053bc:	0003      	movs	r3, r0
 80053be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c2:	f7fe faff 	bl	80039c4 <HAL_GetTick>
 80053c6:	0002      	movs	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e1ad      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053d4:	4b1d      	ldr	r3, [pc, #116]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80053d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d8:	2202      	movs	r2, #2
 80053da:	4013      	ands	r3, r2
 80053dc:	d0f1      	beq.n	80053c2 <HAL_RCC_OscConfig+0x2a2>
 80053de:	e018      	b.n	8005412 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80053e0:	4b1a      	ldr	r3, [pc, #104]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80053e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 80053e6:	2101      	movs	r1, #1
 80053e8:	438a      	bics	r2, r1
 80053ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ec:	f7fe faea 	bl	80039c4 <HAL_GetTick>
 80053f0:	0003      	movs	r3, r0
 80053f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f6:	f7fe fae5 	bl	80039c4 <HAL_GetTick>
 80053fa:	0002      	movs	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e193      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005408:	4b10      	ldr	r3, [pc, #64]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 800540a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540c:	2202      	movs	r2, #2
 800540e:	4013      	ands	r3, r2
 8005410:	d1f1      	bne.n	80053f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2204      	movs	r2, #4
 8005418:	4013      	ands	r3, r2
 800541a:	d100      	bne.n	800541e <HAL_RCC_OscConfig+0x2fe>
 800541c:	e0c6      	b.n	80055ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800541e:	231f      	movs	r3, #31
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2238      	movs	r2, #56	; 0x38
 800542c:	4013      	ands	r3, r2
 800542e:	2b20      	cmp	r3, #32
 8005430:	d11e      	bne.n	8005470 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_RCC_OscConfig+0x32c>)
 8005434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005436:	2202      	movs	r2, #2
 8005438:	4013      	ands	r3, r2
 800543a:	d100      	bne.n	800543e <HAL_RCC_OscConfig+0x31e>
 800543c:	e0b6      	b.n	80055ac <HAL_RCC_OscConfig+0x48c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d000      	beq.n	8005448 <HAL_RCC_OscConfig+0x328>
 8005446:	e0b1      	b.n	80055ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e171      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
 800544c:	40021000 	.word	0x40021000
 8005450:	fffeffff 	.word	0xfffeffff
 8005454:	fffbffff 	.word	0xfffbffff
 8005458:	ffff80ff 	.word	0xffff80ff
 800545c:	ffffc7ff 	.word	0xffffc7ff
 8005460:	00f42400 	.word	0x00f42400
 8005464:	20000000 	.word	0x20000000
 8005468:	20000004 	.word	0x20000004
 800546c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005470:	4bb1      	ldr	r3, [pc, #708]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	055b      	lsls	r3, r3, #21
 8005478:	4013      	ands	r3, r2
 800547a:	d101      	bne.n	8005480 <HAL_RCC_OscConfig+0x360>
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <HAL_RCC_OscConfig+0x362>
 8005480:	2300      	movs	r3, #0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d011      	beq.n	80054aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	4bac      	ldr	r3, [pc, #688]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800548a:	4bab      	ldr	r3, [pc, #684]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 800548c:	2180      	movs	r1, #128	; 0x80
 800548e:	0549      	lsls	r1, r1, #21
 8005490:	430a      	orrs	r2, r1
 8005492:	63da      	str	r2, [r3, #60]	; 0x3c
 8005494:	4ba8      	ldr	r3, [pc, #672]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	055b      	lsls	r3, r3, #21
 800549c:	4013      	ands	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80054a2:	231f      	movs	r3, #31
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054aa:	4ba4      	ldr	r3, [pc, #656]	; (800573c <HAL_RCC_OscConfig+0x61c>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4013      	ands	r3, r2
 80054b4:	d11a      	bne.n	80054ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054b6:	4ba1      	ldr	r3, [pc, #644]	; (800573c <HAL_RCC_OscConfig+0x61c>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4ba0      	ldr	r3, [pc, #640]	; (800573c <HAL_RCC_OscConfig+0x61c>)
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	0049      	lsls	r1, r1, #1
 80054c0:	430a      	orrs	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80054c4:	f7fe fa7e 	bl	80039c4 <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fe fa79 	bl	80039c4 <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e127      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054e0:	4b96      	ldr	r3, [pc, #600]	; (800573c <HAL_RCC_OscConfig+0x61c>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	4013      	ands	r3, r2
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x3e2>
 80054f4:	4b90      	ldr	r3, [pc, #576]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80054f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054f8:	4b8f      	ldr	r3, [pc, #572]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80054fa:	2101      	movs	r1, #1
 80054fc:	430a      	orrs	r2, r1
 80054fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005500:	e01c      	b.n	800553c <HAL_RCC_OscConfig+0x41c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x404>
 800550a:	4b8b      	ldr	r3, [pc, #556]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 800550c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800550e:	4b8a      	ldr	r3, [pc, #552]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005510:	2104      	movs	r1, #4
 8005512:	430a      	orrs	r2, r1
 8005514:	65da      	str	r2, [r3, #92]	; 0x5c
 8005516:	4b88      	ldr	r3, [pc, #544]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005518:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800551a:	4b87      	ldr	r3, [pc, #540]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 800551c:	2101      	movs	r1, #1
 800551e:	430a      	orrs	r2, r1
 8005520:	65da      	str	r2, [r3, #92]	; 0x5c
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0x41c>
 8005524:	4b84      	ldr	r3, [pc, #528]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005526:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005528:	4b83      	ldr	r3, [pc, #524]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 800552a:	2101      	movs	r1, #1
 800552c:	438a      	bics	r2, r1
 800552e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005530:	4b81      	ldr	r3, [pc, #516]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005532:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005534:	4b80      	ldr	r3, [pc, #512]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005536:	2104      	movs	r1, #4
 8005538:	438a      	bics	r2, r1
 800553a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d014      	beq.n	800556e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fe fa3e 	bl	80039c4 <HAL_GetTick>
 8005548:	0003      	movs	r3, r0
 800554a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554c:	e009      	b.n	8005562 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554e:	f7fe fa39 	bl	80039c4 <HAL_GetTick>
 8005552:	0002      	movs	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	4a79      	ldr	r2, [pc, #484]	; (8005740 <HAL_RCC_OscConfig+0x620>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e0e6      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005562:	4b75      	ldr	r3, [pc, #468]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005566:	2202      	movs	r2, #2
 8005568:	4013      	ands	r3, r2
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x42e>
 800556c:	e013      	b.n	8005596 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556e:	f7fe fa29 	bl	80039c4 <HAL_GetTick>
 8005572:	0003      	movs	r3, r0
 8005574:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005576:	e009      	b.n	800558c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fe fa24 	bl	80039c4 <HAL_GetTick>
 800557c:	0002      	movs	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	4a6f      	ldr	r2, [pc, #444]	; (8005740 <HAL_RCC_OscConfig+0x620>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e0d1      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800558c:	4b6a      	ldr	r3, [pc, #424]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 800558e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005590:	2202      	movs	r2, #2
 8005592:	4013      	ands	r3, r2
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005596:	231f      	movs	r3, #31
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d105      	bne.n	80055ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80055a0:	4b65      	ldr	r3, [pc, #404]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80055a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a4:	4b64      	ldr	r3, [pc, #400]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80055a6:	4967      	ldr	r1, [pc, #412]	; (8005744 <HAL_RCC_OscConfig+0x624>)
 80055a8:	400a      	ands	r2, r1
 80055aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d100      	bne.n	80055b6 <HAL_RCC_OscConfig+0x496>
 80055b4:	e0bb      	b.n	800572e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055b6:	4b60      	ldr	r3, [pc, #384]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2238      	movs	r2, #56	; 0x38
 80055bc:	4013      	ands	r3, r2
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d100      	bne.n	80055c4 <HAL_RCC_OscConfig+0x4a4>
 80055c2:	e07b      	b.n	80056bc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d156      	bne.n	800567a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055cc:	4b5a      	ldr	r3, [pc, #360]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	4b59      	ldr	r3, [pc, #356]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80055d2:	495d      	ldr	r1, [pc, #372]	; (8005748 <HAL_RCC_OscConfig+0x628>)
 80055d4:	400a      	ands	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fe f9f4 	bl	80039c4 <HAL_GetTick>
 80055dc:	0003      	movs	r3, r0
 80055de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e2:	f7fe f9ef 	bl	80039c4 <HAL_GetTick>
 80055e6:	0002      	movs	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e09d      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f4:	4b50      	ldr	r3, [pc, #320]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	049b      	lsls	r3, r3, #18
 80055fc:	4013      	ands	r3, r2
 80055fe:	d1f0      	bne.n	80055e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005600:	4b4d      	ldr	r3, [pc, #308]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	4a51      	ldr	r2, [pc, #324]	; (800574c <HAL_RCC_OscConfig+0x62c>)
 8005606:	4013      	ands	r3, r2
 8005608:	0019      	movs	r1, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	431a      	orrs	r2, r3
 800562e:	4b42      	ldr	r3, [pc, #264]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005630:	430a      	orrs	r2, r1
 8005632:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005634:	4b40      	ldr	r3, [pc, #256]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b3f      	ldr	r3, [pc, #252]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 800563a:	2180      	movs	r1, #128	; 0x80
 800563c:	0449      	lsls	r1, r1, #17
 800563e:	430a      	orrs	r2, r1
 8005640:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005642:	4b3d      	ldr	r3, [pc, #244]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	4b3c      	ldr	r3, [pc, #240]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005648:	2180      	movs	r1, #128	; 0x80
 800564a:	0549      	lsls	r1, r1, #21
 800564c:	430a      	orrs	r2, r1
 800564e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fe f9b8 	bl	80039c4 <HAL_GetTick>
 8005654:	0003      	movs	r3, r0
 8005656:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565a:	f7fe f9b3 	bl	80039c4 <HAL_GetTick>
 800565e:	0002      	movs	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e061      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566c:	4b32      	ldr	r3, [pc, #200]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	049b      	lsls	r3, r3, #18
 8005674:	4013      	ands	r3, r2
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x53a>
 8005678:	e059      	b.n	800572e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567a:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b2e      	ldr	r3, [pc, #184]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 8005680:	4931      	ldr	r1, [pc, #196]	; (8005748 <HAL_RCC_OscConfig+0x628>)
 8005682:	400a      	ands	r2, r1
 8005684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005686:	f7fe f99d 	bl	80039c4 <HAL_GetTick>
 800568a:	0003      	movs	r3, r0
 800568c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005690:	f7fe f998 	bl	80039c4 <HAL_GetTick>
 8005694:	0002      	movs	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e046      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056a2:	4b25      	ldr	r3, [pc, #148]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	2380      	movs	r3, #128	; 0x80
 80056a8:	049b      	lsls	r3, r3, #18
 80056aa:	4013      	ands	r3, r2
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80056ae:	4b22      	ldr	r3, [pc, #136]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	4b21      	ldr	r3, [pc, #132]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80056b4:	4926      	ldr	r1, [pc, #152]	; (8005750 <HAL_RCC_OscConfig+0x630>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	60da      	str	r2, [r3, #12]
 80056ba:	e038      	b.n	800572e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e033      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80056c8:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <HAL_RCC_OscConfig+0x618>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2203      	movs	r2, #3
 80056d2:	401a      	ands	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d126      	bne.n	800572a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2270      	movs	r2, #112	; 0x70
 80056e0:	401a      	ands	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d11f      	bne.n	800572a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	23fe      	movs	r3, #254	; 0xfe
 80056ee:	01db      	lsls	r3, r3, #7
 80056f0:	401a      	ands	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d116      	bne.n	800572a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	23f8      	movs	r3, #248	; 0xf8
 8005700:	039b      	lsls	r3, r3, #14
 8005702:	401a      	ands	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005708:	429a      	cmp	r2, r3
 800570a:	d10e      	bne.n	800572a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	23e0      	movs	r3, #224	; 0xe0
 8005710:	051b      	lsls	r3, r3, #20
 8005712:	401a      	ands	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d106      	bne.n	800572a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	0f5b      	lsrs	r3, r3, #29
 8005720:	075a      	lsls	r2, r3, #29
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005726:	429a      	cmp	r2, r3
 8005728:	d001      	beq.n	800572e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	0018      	movs	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	b008      	add	sp, #32
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40021000 	.word	0x40021000
 800573c:	40007000 	.word	0x40007000
 8005740:	00001388 	.word	0x00001388
 8005744:	efffffff 	.word	0xefffffff
 8005748:	feffffff 	.word	0xfeffffff
 800574c:	11c1808c 	.word	0x11c1808c
 8005750:	eefefffc 	.word	0xeefefffc

08005754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0e9      	b.n	800593c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005768:	4b76      	ldr	r3, [pc, #472]	; (8005944 <HAL_RCC_ClockConfig+0x1f0>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2207      	movs	r2, #7
 800576e:	4013      	ands	r3, r2
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d91e      	bls.n	80057b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005776:	4b73      	ldr	r3, [pc, #460]	; (8005944 <HAL_RCC_ClockConfig+0x1f0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2207      	movs	r2, #7
 800577c:	4393      	bics	r3, r2
 800577e:	0019      	movs	r1, r3
 8005780:	4b70      	ldr	r3, [pc, #448]	; (8005944 <HAL_RCC_ClockConfig+0x1f0>)
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005788:	f7fe f91c 	bl	80039c4 <HAL_GetTick>
 800578c:	0003      	movs	r3, r0
 800578e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005790:	e009      	b.n	80057a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005792:	f7fe f917 	bl	80039c4 <HAL_GetTick>
 8005796:	0002      	movs	r2, r0
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	4a6a      	ldr	r2, [pc, #424]	; (8005948 <HAL_RCC_ClockConfig+0x1f4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0ca      	b.n	800593c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057a6:	4b67      	ldr	r3, [pc, #412]	; (8005944 <HAL_RCC_ClockConfig+0x1f0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2207      	movs	r2, #7
 80057ac:	4013      	ands	r3, r2
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d1ee      	bne.n	8005792 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2202      	movs	r2, #2
 80057ba:	4013      	ands	r3, r2
 80057bc:	d015      	beq.n	80057ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2204      	movs	r2, #4
 80057c4:	4013      	ands	r3, r2
 80057c6:	d006      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80057c8:	4b60      	ldr	r3, [pc, #384]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	4b5f      	ldr	r3, [pc, #380]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 80057ce:	21e0      	movs	r1, #224	; 0xe0
 80057d0:	01c9      	lsls	r1, r1, #7
 80057d2:	430a      	orrs	r2, r1
 80057d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d6:	4b5d      	ldr	r3, [pc, #372]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	4a5d      	ldr	r2, [pc, #372]	; (8005950 <HAL_RCC_ClockConfig+0x1fc>)
 80057dc:	4013      	ands	r3, r2
 80057de:	0019      	movs	r1, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	4b59      	ldr	r3, [pc, #356]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 80057e6:	430a      	orrs	r2, r1
 80057e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2201      	movs	r2, #1
 80057f0:	4013      	ands	r3, r2
 80057f2:	d057      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d107      	bne.n	800580c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057fc:	4b53      	ldr	r3, [pc, #332]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	029b      	lsls	r3, r3, #10
 8005804:	4013      	ands	r3, r2
 8005806:	d12b      	bne.n	8005860 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e097      	b.n	800593c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d107      	bne.n	8005824 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005814:	4b4d      	ldr	r3, [pc, #308]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	049b      	lsls	r3, r3, #18
 800581c:	4013      	ands	r3, r2
 800581e:	d11f      	bne.n	8005860 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e08b      	b.n	800593c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800582c:	4b47      	ldr	r3, [pc, #284]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	4013      	ands	r3, r2
 8005836:	d113      	bne.n	8005860 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e07f      	b.n	800593c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b03      	cmp	r3, #3
 8005842:	d106      	bne.n	8005852 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005844:	4b41      	ldr	r3, [pc, #260]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 8005846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005848:	2202      	movs	r2, #2
 800584a:	4013      	ands	r3, r2
 800584c:	d108      	bne.n	8005860 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e074      	b.n	800593c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005852:	4b3e      	ldr	r3, [pc, #248]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 8005854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005856:	2202      	movs	r2, #2
 8005858:	4013      	ands	r3, r2
 800585a:	d101      	bne.n	8005860 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e06d      	b.n	800593c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005860:	4b3a      	ldr	r3, [pc, #232]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2207      	movs	r2, #7
 8005866:	4393      	bics	r3, r2
 8005868:	0019      	movs	r1, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	4b37      	ldr	r3, [pc, #220]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005874:	f7fe f8a6 	bl	80039c4 <HAL_GetTick>
 8005878:	0003      	movs	r3, r0
 800587a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587c:	e009      	b.n	8005892 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800587e:	f7fe f8a1 	bl	80039c4 <HAL_GetTick>
 8005882:	0002      	movs	r2, r0
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	4a2f      	ldr	r2, [pc, #188]	; (8005948 <HAL_RCC_ClockConfig+0x1f4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e054      	b.n	800593c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005892:	4b2e      	ldr	r3, [pc, #184]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2238      	movs	r2, #56	; 0x38
 8005898:	401a      	ands	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d1ec      	bne.n	800587e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058a4:	4b27      	ldr	r3, [pc, #156]	; (8005944 <HAL_RCC_ClockConfig+0x1f0>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2207      	movs	r2, #7
 80058aa:	4013      	ands	r3, r2
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d21e      	bcs.n	80058f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b2:	4b24      	ldr	r3, [pc, #144]	; (8005944 <HAL_RCC_ClockConfig+0x1f0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2207      	movs	r2, #7
 80058b8:	4393      	bics	r3, r2
 80058ba:	0019      	movs	r1, r3
 80058bc:	4b21      	ldr	r3, [pc, #132]	; (8005944 <HAL_RCC_ClockConfig+0x1f0>)
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058c4:	f7fe f87e 	bl	80039c4 <HAL_GetTick>
 80058c8:	0003      	movs	r3, r0
 80058ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058cc:	e009      	b.n	80058e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ce:	f7fe f879 	bl	80039c4 <HAL_GetTick>
 80058d2:	0002      	movs	r2, r0
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	4a1b      	ldr	r2, [pc, #108]	; (8005948 <HAL_RCC_ClockConfig+0x1f4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e02c      	b.n	800593c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058e2:	4b18      	ldr	r3, [pc, #96]	; (8005944 <HAL_RCC_ClockConfig+0x1f0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2207      	movs	r2, #7
 80058e8:	4013      	ands	r3, r2
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d1ee      	bne.n	80058ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2204      	movs	r2, #4
 80058f6:	4013      	ands	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80058fa:	4b14      	ldr	r3, [pc, #80]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	4a15      	ldr	r2, [pc, #84]	; (8005954 <HAL_RCC_ClockConfig+0x200>)
 8005900:	4013      	ands	r3, r2
 8005902:	0019      	movs	r1, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	4b10      	ldr	r3, [pc, #64]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 800590a:	430a      	orrs	r2, r1
 800590c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800590e:	f000 f829 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 8005912:	0001      	movs	r1, r0
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <HAL_RCC_ClockConfig+0x1f8>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	220f      	movs	r2, #15
 800591c:	401a      	ands	r2, r3
 800591e:	4b0e      	ldr	r3, [pc, #56]	; (8005958 <HAL_RCC_ClockConfig+0x204>)
 8005920:	0092      	lsls	r2, r2, #2
 8005922:	58d3      	ldr	r3, [r2, r3]
 8005924:	221f      	movs	r2, #31
 8005926:	4013      	ands	r3, r2
 8005928:	000a      	movs	r2, r1
 800592a:	40da      	lsrs	r2, r3
 800592c:	4b0b      	ldr	r3, [pc, #44]	; (800595c <HAL_RCC_ClockConfig+0x208>)
 800592e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <HAL_RCC_ClockConfig+0x20c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	0018      	movs	r0, r3
 8005936:	f7fd ffe9 	bl	800390c <HAL_InitTick>
 800593a:	0003      	movs	r3, r0
}
 800593c:	0018      	movs	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	b004      	add	sp, #16
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40022000 	.word	0x40022000
 8005948:	00001388 	.word	0x00001388
 800594c:	40021000 	.word	0x40021000
 8005950:	fffff0ff 	.word	0xfffff0ff
 8005954:	ffff8fff 	.word	0xffff8fff
 8005958:	0800c04c 	.word	0x0800c04c
 800595c:	20000000 	.word	0x20000000
 8005960:	20000004 	.word	0x20000004

08005964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800596a:	4b3c      	ldr	r3, [pc, #240]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2238      	movs	r2, #56	; 0x38
 8005970:	4013      	ands	r3, r2
 8005972:	d10f      	bne.n	8005994 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005974:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	0adb      	lsrs	r3, r3, #11
 800597a:	2207      	movs	r2, #7
 800597c:	4013      	ands	r3, r2
 800597e:	2201      	movs	r2, #1
 8005980:	409a      	lsls	r2, r3
 8005982:	0013      	movs	r3, r2
 8005984:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	4835      	ldr	r0, [pc, #212]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xfc>)
 800598a:	f7fa fbd7 	bl	800013c <__udivsi3>
 800598e:	0003      	movs	r3, r0
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	e05d      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005994:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2238      	movs	r2, #56	; 0x38
 800599a:	4013      	ands	r3, r2
 800599c:	2b08      	cmp	r3, #8
 800599e:	d102      	bne.n	80059a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059a0:	4b30      	ldr	r3, [pc, #192]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x100>)
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	e054      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a6:	4b2d      	ldr	r3, [pc, #180]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2238      	movs	r2, #56	; 0x38
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d138      	bne.n	8005a24 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80059b2:	4b2a      	ldr	r3, [pc, #168]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	2203      	movs	r2, #3
 80059b8:	4013      	ands	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059bc:	4b27      	ldr	r3, [pc, #156]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	091b      	lsrs	r3, r3, #4
 80059c2:	2207      	movs	r2, #7
 80059c4:	4013      	ands	r3, r2
 80059c6:	3301      	adds	r3, #1
 80059c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d10d      	bne.n	80059ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	4824      	ldr	r0, [pc, #144]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x100>)
 80059d4:	f7fa fbb2 	bl	800013c <__udivsi3>
 80059d8:	0003      	movs	r3, r0
 80059da:	0019      	movs	r1, r3
 80059dc:	4b1f      	ldr	r3, [pc, #124]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	0a1b      	lsrs	r3, r3, #8
 80059e2:	227f      	movs	r2, #127	; 0x7f
 80059e4:	4013      	ands	r3, r2
 80059e6:	434b      	muls	r3, r1
 80059e8:	617b      	str	r3, [r7, #20]
        break;
 80059ea:	e00d      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	481c      	ldr	r0, [pc, #112]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xfc>)
 80059f0:	f7fa fba4 	bl	800013c <__udivsi3>
 80059f4:	0003      	movs	r3, r0
 80059f6:	0019      	movs	r1, r3
 80059f8:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	227f      	movs	r2, #127	; 0x7f
 8005a00:	4013      	ands	r3, r2
 8005a02:	434b      	muls	r3, r1
 8005a04:	617b      	str	r3, [r7, #20]
        break;
 8005a06:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005a08:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	0f5b      	lsrs	r3, r3, #29
 8005a0e:	2207      	movs	r2, #7
 8005a10:	4013      	ands	r3, r2
 8005a12:	3301      	adds	r3, #1
 8005a14:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	6978      	ldr	r0, [r7, #20]
 8005a1a:	f7fa fb8f 	bl	800013c <__udivsi3>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	e015      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	2238      	movs	r2, #56	; 0x38
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d103      	bne.n	8005a38 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e00b      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2238      	movs	r2, #56	; 0x38
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b18      	cmp	r3, #24
 8005a42:	d103      	bne.n	8005a4c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005a44:	23fa      	movs	r3, #250	; 0xfa
 8005a46:	01db      	lsls	r3, r3, #7
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	e001      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a50:	693b      	ldr	r3, [r7, #16]
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b006      	add	sp, #24
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	00f42400 	.word	0x00f42400
 8005a64:	007a1200 	.word	0x007a1200

08005a68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a6c:	4b02      	ldr	r3, [pc, #8]	; (8005a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
}
 8005a70:	0018      	movs	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	20000000 	.word	0x20000000

08005a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a7c:	b5b0      	push	{r4, r5, r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005a80:	f7ff fff2 	bl	8005a68 <HAL_RCC_GetHCLKFreq>
 8005a84:	0004      	movs	r4, r0
 8005a86:	f7ff fb3f 	bl	8005108 <LL_RCC_GetAPB1Prescaler>
 8005a8a:	0003      	movs	r3, r0
 8005a8c:	0b1a      	lsrs	r2, r3, #12
 8005a8e:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a90:	0092      	lsls	r2, r2, #2
 8005a92:	58d3      	ldr	r3, [r2, r3]
 8005a94:	221f      	movs	r2, #31
 8005a96:	4013      	ands	r3, r2
 8005a98:	40dc      	lsrs	r4, r3
 8005a9a:	0023      	movs	r3, r4
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	0800c08c 	.word	0x0800c08c

08005aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005ab0:	2313      	movs	r3, #19
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ab8:	2312      	movs	r3, #18
 8005aba:	18fb      	adds	r3, r7, r3
 8005abc:	2200      	movs	r2, #0
 8005abe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	2380      	movs	r3, #128	; 0x80
 8005ac6:	029b      	lsls	r3, r3, #10
 8005ac8:	4013      	ands	r3, r2
 8005aca:	d100      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005acc:	e0a3      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ace:	2011      	movs	r0, #17
 8005ad0:	183b      	adds	r3, r7, r0
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad6:	4ba5      	ldr	r3, [pc, #660]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	055b      	lsls	r3, r3, #21
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d110      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	4ba2      	ldr	r3, [pc, #648]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ae6:	4ba1      	ldr	r3, [pc, #644]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ae8:	2180      	movs	r1, #128	; 0x80
 8005aea:	0549      	lsls	r1, r1, #21
 8005aec:	430a      	orrs	r2, r1
 8005aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8005af0:	4b9e      	ldr	r3, [pc, #632]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af4:	2380      	movs	r3, #128	; 0x80
 8005af6:	055b      	lsls	r3, r3, #21
 8005af8:	4013      	ands	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afe:	183b      	adds	r3, r7, r0
 8005b00:	2201      	movs	r2, #1
 8005b02:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b04:	4b9a      	ldr	r3, [pc, #616]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	4b99      	ldr	r3, [pc, #612]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	0049      	lsls	r1, r1, #1
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b12:	f7fd ff57 	bl	80039c4 <HAL_GetTick>
 8005b16:	0003      	movs	r3, r0
 8005b18:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b1a:	e00b      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b1c:	f7fd ff52 	bl	80039c4 <HAL_GetTick>
 8005b20:	0002      	movs	r2, r0
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d904      	bls.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005b2a:	2313      	movs	r3, #19
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	2203      	movs	r2, #3
 8005b30:	701a      	strb	r2, [r3, #0]
        break;
 8005b32:	e005      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b34:	4b8e      	ldr	r3, [pc, #568]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d0ed      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005b40:	2313      	movs	r3, #19
 8005b42:	18fb      	adds	r3, r7, r3
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d154      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b4a:	4b88      	ldr	r3, [pc, #544]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b4e:	23c0      	movs	r3, #192	; 0xc0
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4013      	ands	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d019      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d014      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b66:	4b81      	ldr	r3, [pc, #516]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6a:	4a82      	ldr	r2, [pc, #520]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b70:	4b7e      	ldr	r3, [pc, #504]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b74:	4b7d      	ldr	r3, [pc, #500]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b76:	2180      	movs	r1, #128	; 0x80
 8005b78:	0249      	lsls	r1, r1, #9
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b7e:	4b7b      	ldr	r3, [pc, #492]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b82:	4b7a      	ldr	r3, [pc, #488]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b84:	497c      	ldr	r1, [pc, #496]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005b86:	400a      	ands	r2, r1
 8005b88:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b8a:	4b78      	ldr	r3, [pc, #480]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2201      	movs	r2, #1
 8005b94:	4013      	ands	r3, r2
 8005b96:	d016      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	f7fd ff14 	bl	80039c4 <HAL_GetTick>
 8005b9c:	0003      	movs	r3, r0
 8005b9e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ba0:	e00c      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fd ff0f 	bl	80039c4 <HAL_GetTick>
 8005ba6:	0002      	movs	r2, r0
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	4a73      	ldr	r2, [pc, #460]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d904      	bls.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005bb2:	2313      	movs	r3, #19
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	701a      	strb	r2, [r3, #0]
            break;
 8005bba:	e004      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bbc:	4b6b      	ldr	r3, [pc, #428]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d0ed      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005bc6:	2313      	movs	r3, #19
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bd0:	4b66      	ldr	r3, [pc, #408]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd4:	4a67      	ldr	r2, [pc, #412]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	0019      	movs	r1, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bde:	4b63      	ldr	r3, [pc, #396]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005be0:	430a      	orrs	r2, r1
 8005be2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005be4:	e00c      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005be6:	2312      	movs	r3, #18
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	2213      	movs	r2, #19
 8005bec:	18ba      	adds	r2, r7, r2
 8005bee:	7812      	ldrb	r2, [r2, #0]
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	e005      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf4:	2312      	movs	r3, #18
 8005bf6:	18fb      	adds	r3, r7, r3
 8005bf8:	2213      	movs	r2, #19
 8005bfa:	18ba      	adds	r2, r7, r2
 8005bfc:	7812      	ldrb	r2, [r2, #0]
 8005bfe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c00:	2311      	movs	r3, #17
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d105      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c0a:	4b58      	ldr	r3, [pc, #352]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c0e:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c10:	495b      	ldr	r1, [pc, #364]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c12:	400a      	ands	r2, r1
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c20:	4b52      	ldr	r3, [pc, #328]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c24:	2203      	movs	r2, #3
 8005c26:	4393      	bics	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	4b4f      	ldr	r3, [pc, #316]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c30:	430a      	orrs	r2, r1
 8005c32:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2210      	movs	r2, #16
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d009      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c3e:	4b4b      	ldr	r3, [pc, #300]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	4a50      	ldr	r2, [pc, #320]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	0019      	movs	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d009      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c5e:	4b43      	ldr	r3, [pc, #268]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	4a49      	ldr	r2, [pc, #292]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	0019      	movs	r1, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	695a      	ldr	r2, [r3, #20]
 8005c6c:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c7e:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c82:	4a42      	ldr	r2, [pc, #264]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	0019      	movs	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699a      	ldr	r2, [r3, #24]
 8005c8c:	4b37      	ldr	r3, [pc, #220]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2220      	movs	r2, #32
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c9c:	4b33      	ldr	r3, [pc, #204]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca0:	4a3b      	ldr	r2, [pc, #236]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	0019      	movs	r1, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	4b30      	ldr	r3, [pc, #192]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cac:	430a      	orrs	r2, r1
 8005cae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	01db      	lsls	r3, r3, #7
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d015      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	0899      	lsrs	r1, r3, #2
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69da      	ldr	r2, [r3, #28]
 8005cd2:	2380      	movs	r3, #128	; 0x80
 8005cd4:	05db      	lsls	r3, r3, #23
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d106      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005cda:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	4b23      	ldr	r3, [pc, #140]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ce0:	2180      	movs	r1, #128	; 0x80
 8005ce2:	0249      	lsls	r1, r1, #9
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	039b      	lsls	r3, r3, #14
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d016      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf8:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1a      	ldr	r2, [r3, #32]
 8005d02:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d04:	430a      	orrs	r2, r1
 8005d06:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1a      	ldr	r2, [r3, #32]
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	03db      	lsls	r3, r3, #15
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d106      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005d14:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	0449      	lsls	r1, r1, #17
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d016      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005d2e:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	0019      	movs	r1, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	2380      	movs	r3, #128	; 0x80
 8005d48:	01db      	lsls	r3, r3, #7
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d106      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005d4e:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d54:	2180      	movs	r1, #128	; 0x80
 8005d56:	0249      	lsls	r1, r1, #9
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005d5c:	2312      	movs	r3, #18
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	781b      	ldrb	r3, [r3, #0]
}
 8005d62:	0018      	movs	r0, r3
 8005d64:	46bd      	mov	sp, r7
 8005d66:	b006      	add	sp, #24
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	40007000 	.word	0x40007000
 8005d74:	fffffcff 	.word	0xfffffcff
 8005d78:	fffeffff 	.word	0xfffeffff
 8005d7c:	00001388 	.word	0x00001388
 8005d80:	efffffff 	.word	0xefffffff
 8005d84:	fffff3ff 	.word	0xfffff3ff
 8005d88:	fff3ffff 	.word	0xfff3ffff
 8005d8c:	ffcfffff 	.word	0xffcfffff
 8005d90:	ffffcfff 	.word	0xffffcfff
 8005d94:	ffbfffff 	.word	0xffbfffff
 8005d98:	ffff3fff 	.word	0xffff3fff

08005d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e04a      	b.n	8005e44 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	223d      	movs	r2, #61	; 0x3d
 8005db2:	5c9b      	ldrb	r3, [r3, r2]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d107      	bne.n	8005dca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	223c      	movs	r2, #60	; 0x3c
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7fd fb53 	bl	8003470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	223d      	movs	r2, #61	; 0x3d
 8005dce:	2102      	movs	r1, #2
 8005dd0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	0019      	movs	r1, r3
 8005ddc:	0010      	movs	r0, r2
 8005dde:	f000 f9db 	bl	8006198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2248      	movs	r2, #72	; 0x48
 8005de6:	2101      	movs	r1, #1
 8005de8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	223e      	movs	r2, #62	; 0x3e
 8005dee:	2101      	movs	r1, #1
 8005df0:	5499      	strb	r1, [r3, r2]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	223f      	movs	r2, #63	; 0x3f
 8005df6:	2101      	movs	r1, #1
 8005df8:	5499      	strb	r1, [r3, r2]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2240      	movs	r2, #64	; 0x40
 8005dfe:	2101      	movs	r1, #1
 8005e00:	5499      	strb	r1, [r3, r2]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2241      	movs	r2, #65	; 0x41
 8005e06:	2101      	movs	r1, #1
 8005e08:	5499      	strb	r1, [r3, r2]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2242      	movs	r2, #66	; 0x42
 8005e0e:	2101      	movs	r1, #1
 8005e10:	5499      	strb	r1, [r3, r2]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2243      	movs	r2, #67	; 0x43
 8005e16:	2101      	movs	r1, #1
 8005e18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2244      	movs	r2, #68	; 0x44
 8005e1e:	2101      	movs	r1, #1
 8005e20:	5499      	strb	r1, [r3, r2]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2245      	movs	r2, #69	; 0x45
 8005e26:	2101      	movs	r1, #1
 8005e28:	5499      	strb	r1, [r3, r2]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2246      	movs	r2, #70	; 0x46
 8005e2e:	2101      	movs	r1, #1
 8005e30:	5499      	strb	r1, [r3, r2]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2247      	movs	r2, #71	; 0x47
 8005e36:	2101      	movs	r1, #1
 8005e38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	223d      	movs	r2, #61	; 0x3d
 8005e3e:	2101      	movs	r1, #1
 8005e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	223d      	movs	r2, #61	; 0x3d
 8005e58:	5c9b      	ldrb	r3, [r3, r2]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d001      	beq.n	8005e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e03d      	b.n	8005ee0 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	223d      	movs	r2, #61	; 0x3d
 8005e68:	2102      	movs	r1, #2
 8005e6a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2101      	movs	r1, #1
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00a      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0x50>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	05db      	lsls	r3, r3, #23
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d004      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0x50>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a15      	ldr	r2, [pc, #84]	; (8005eec <HAL_TIM_Base_Start_IT+0xa0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d116      	bne.n	8005eca <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b06      	cmp	r3, #6
 8005eac:	d016      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x90>
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	025b      	lsls	r3, r3, #9
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d011      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec8:	e008      	b.n	8005edc <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e000      	b.n	8005ede <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005edc:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b004      	add	sp, #16
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	00010007 	.word	0x00010007

08005ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2202      	movs	r2, #2
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d124      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2202      	movs	r2, #2
 8005f12:	4013      	ands	r3, r2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d11d      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	4252      	negs	r2, r2
 8005f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2203      	movs	r2, #3
 8005f30:	4013      	ands	r3, r2
 8005f32:	d004      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	0018      	movs	r0, r3
 8005f38:	f000 f916 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e007      	b.n	8005f4e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	0018      	movs	r0, r3
 8005f42:	f000 f909 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 f915 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d125      	bne.n	8005fae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d11e      	bne.n	8005fae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2205      	movs	r2, #5
 8005f76:	4252      	negs	r2, r2
 8005f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	23c0      	movs	r3, #192	; 0xc0
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	d004      	beq.n	8005f98 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	0018      	movs	r0, r3
 8005f92:	f000 f8e9 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005f96:	e007      	b.n	8005fa8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f000 f8dc 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f000 f8e8 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d124      	bne.n	8006006 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d11d      	bne.n	8006006 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2209      	movs	r2, #9
 8005fd0:	4252      	negs	r2, r2
 8005fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	2203      	movs	r2, #3
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f000 f8bd 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005fee:	e007      	b.n	8006000 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 f8b0 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f000 f8bc 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2210      	movs	r2, #16
 800600e:	4013      	ands	r3, r2
 8006010:	2b10      	cmp	r3, #16
 8006012:	d125      	bne.n	8006060 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	2210      	movs	r2, #16
 800601c:	4013      	ands	r3, r2
 800601e:	2b10      	cmp	r3, #16
 8006020:	d11e      	bne.n	8006060 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2211      	movs	r2, #17
 8006028:	4252      	negs	r2, r2
 800602a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2208      	movs	r2, #8
 8006030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	23c0      	movs	r3, #192	; 0xc0
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4013      	ands	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	0018      	movs	r0, r3
 8006044:	f000 f890 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8006048:	e007      	b.n	800605a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	0018      	movs	r0, r3
 800604e:	f000 f883 	bl	8006158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	0018      	movs	r0, r3
 8006056:	f000 f88f 	bl	8006178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2201      	movs	r2, #1
 8006068:	4013      	ands	r3, r2
 800606a:	2b01      	cmp	r3, #1
 800606c:	d10f      	bne.n	800608e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	4013      	ands	r3, r2
 8006078:	2b01      	cmp	r3, #1
 800607a:	d108      	bne.n	800608e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2202      	movs	r2, #2
 8006082:	4252      	negs	r2, r2
 8006084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	0018      	movs	r0, r3
 800608a:	f7fc fd65 	bl	8002b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2280      	movs	r2, #128	; 0x80
 8006096:	4013      	ands	r3, r2
 8006098:	2b80      	cmp	r3, #128	; 0x80
 800609a:	d10f      	bne.n	80060bc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2280      	movs	r2, #128	; 0x80
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b80      	cmp	r3, #128	; 0x80
 80060a8:	d108      	bne.n	80060bc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2281      	movs	r2, #129	; 0x81
 80060b0:	4252      	negs	r2, r2
 80060b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	0018      	movs	r0, r3
 80060b8:	f000 f8ec 	bl	8006294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	401a      	ands	r2, r3
 80060c8:	2380      	movs	r3, #128	; 0x80
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d10e      	bne.n	80060ee <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	2280      	movs	r2, #128	; 0x80
 80060d8:	4013      	ands	r3, r2
 80060da:	2b80      	cmp	r3, #128	; 0x80
 80060dc:	d107      	bne.n	80060ee <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1c      	ldr	r2, [pc, #112]	; (8006154 <HAL_TIM_IRQHandler+0x260>)
 80060e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	0018      	movs	r0, r3
 80060ea:	f000 f8db 	bl	80062a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2240      	movs	r2, #64	; 0x40
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d10f      	bne.n	800611c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2240      	movs	r2, #64	; 0x40
 8006104:	4013      	ands	r3, r2
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d108      	bne.n	800611c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2241      	movs	r2, #65	; 0x41
 8006110:	4252      	negs	r2, r2
 8006112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	0018      	movs	r0, r3
 8006118:	f000 f836 	bl	8006188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2220      	movs	r2, #32
 8006124:	4013      	ands	r3, r2
 8006126:	2b20      	cmp	r3, #32
 8006128:	d10f      	bne.n	800614a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	4013      	ands	r3, r2
 8006134:	2b20      	cmp	r3, #32
 8006136:	d108      	bne.n	800614a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2221      	movs	r2, #33	; 0x21
 800613e:	4252      	negs	r2, r2
 8006140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	0018      	movs	r0, r3
 8006146:	f000 f89d 	bl	8006284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	46bd      	mov	sp, r7
 800614e:	b002      	add	sp, #8
 8006150:	bd80      	pop	{r7, pc}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	fffffeff 	.word	0xfffffeff

08006158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006160:	46c0      	nop			; (mov r8, r8)
 8006162:	46bd      	mov	sp, r7
 8006164:	b002      	add	sp, #8
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006170:	46c0      	nop			; (mov r8, r8)
 8006172:	46bd      	mov	sp, r7
 8006174:	b002      	add	sp, #8
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006180:	46c0      	nop			; (mov r8, r8)
 8006182:	46bd      	mov	sp, r7
 8006184:	b002      	add	sp, #8
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006190:	46c0      	nop			; (mov r8, r8)
 8006192:	46bd      	mov	sp, r7
 8006194:	b002      	add	sp, #8
 8006196:	bd80      	pop	{r7, pc}

08006198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a30      	ldr	r2, [pc, #192]	; (800626c <TIM_Base_SetConfig+0xd4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d008      	beq.n	80061c2 <TIM_Base_SetConfig+0x2a>
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	2380      	movs	r3, #128	; 0x80
 80061b4:	05db      	lsls	r3, r3, #23
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d003      	beq.n	80061c2 <TIM_Base_SetConfig+0x2a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2c      	ldr	r2, [pc, #176]	; (8006270 <TIM_Base_SetConfig+0xd8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d108      	bne.n	80061d4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2270      	movs	r2, #112	; 0x70
 80061c6:	4393      	bics	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a25      	ldr	r2, [pc, #148]	; (800626c <TIM_Base_SetConfig+0xd4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d014      	beq.n	8006206 <TIM_Base_SetConfig+0x6e>
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	2380      	movs	r3, #128	; 0x80
 80061e0:	05db      	lsls	r3, r3, #23
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d00f      	beq.n	8006206 <TIM_Base_SetConfig+0x6e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a21      	ldr	r2, [pc, #132]	; (8006270 <TIM_Base_SetConfig+0xd8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00b      	beq.n	8006206 <TIM_Base_SetConfig+0x6e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <TIM_Base_SetConfig+0xdc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_Base_SetConfig+0x6e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <TIM_Base_SetConfig+0xe0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_Base_SetConfig+0x6e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a1e      	ldr	r2, [pc, #120]	; (800627c <TIM_Base_SetConfig+0xe4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d108      	bne.n	8006218 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <TIM_Base_SetConfig+0xe8>)
 800620a:	4013      	ands	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2280      	movs	r2, #128	; 0x80
 800621c:	4393      	bics	r3, r2
 800621e:	001a      	movs	r2, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a0a      	ldr	r2, [pc, #40]	; (800626c <TIM_Base_SetConfig+0xd4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d007      	beq.n	8006256 <TIM_Base_SetConfig+0xbe>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a0b      	ldr	r2, [pc, #44]	; (8006278 <TIM_Base_SetConfig+0xe0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d003      	beq.n	8006256 <TIM_Base_SetConfig+0xbe>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a0a      	ldr	r2, [pc, #40]	; (800627c <TIM_Base_SetConfig+0xe4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d103      	bne.n	800625e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	615a      	str	r2, [r3, #20]
}
 8006264:	46c0      	nop			; (mov r8, r8)
 8006266:	46bd      	mov	sp, r7
 8006268:	b004      	add	sp, #16
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40012c00 	.word	0x40012c00
 8006270:	40000400 	.word	0x40000400
 8006274:	40002000 	.word	0x40002000
 8006278:	40014400 	.word	0x40014400
 800627c:	40014800 	.word	0x40014800
 8006280:	fffffcff 	.word	0xfffffcff

08006284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800628c:	46c0      	nop			; (mov r8, r8)
 800628e:	46bd      	mov	sp, r7
 8006290:	b002      	add	sp, #8
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	b002      	add	sp, #8
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062ac:	46c0      	nop			; (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b002      	add	sp, #8
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e046      	b.n	8006354 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2288      	movs	r2, #136	; 0x88
 80062ca:	589b      	ldr	r3, [r3, r2]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d107      	bne.n	80062e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2284      	movs	r2, #132	; 0x84
 80062d4:	2100      	movs	r1, #0
 80062d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	0018      	movs	r0, r3
 80062dc:	f7fd f90e 	bl	80034fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2288      	movs	r2, #136	; 0x88
 80062e4:	2124      	movs	r1, #36	; 0x24
 80062e6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2101      	movs	r1, #1
 80062f4:	438a      	bics	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0018      	movs	r0, r3
 80062fc:	f000 f946 	bl	800658c <UART_SetConfig>
 8006300:	0003      	movs	r3, r0
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e024      	b.n	8006354 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0018      	movs	r0, r3
 8006316:	f000 fbb1 	bl	8006a7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	490d      	ldr	r1, [pc, #52]	; (800635c <HAL_UART_Init+0xa8>)
 8006326:	400a      	ands	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	212a      	movs	r1, #42	; 0x2a
 8006336:	438a      	bics	r2, r1
 8006338:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2101      	movs	r1, #1
 8006346:	430a      	orrs	r2, r1
 8006348:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	0018      	movs	r0, r3
 800634e:	f000 fc49 	bl	8006be4 <UART_CheckIdleState>
 8006352:	0003      	movs	r3, r0
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	b002      	add	sp, #8
 800635a:	bd80      	pop	{r7, pc}
 800635c:	ffffb7ff 	.word	0xffffb7ff

08006360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	1dbb      	adds	r3, r7, #6
 800636e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2288      	movs	r2, #136	; 0x88
 8006374:	589b      	ldr	r3, [r3, r2]
 8006376:	2b20      	cmp	r3, #32
 8006378:	d000      	beq.n	800637c <HAL_UART_Transmit+0x1c>
 800637a:	e088      	b.n	800648e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_UART_Transmit+0x2a>
 8006382:	1dbb      	adds	r3, r7, #6
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e080      	b.n	8006490 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	2380      	movs	r3, #128	; 0x80
 8006394:	015b      	lsls	r3, r3, #5
 8006396:	429a      	cmp	r2, r3
 8006398:	d109      	bne.n	80063ae <HAL_UART_Transmit+0x4e>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2201      	movs	r2, #1
 80063a6:	4013      	ands	r3, r2
 80063a8:	d001      	beq.n	80063ae <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e070      	b.n	8006490 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2290      	movs	r2, #144	; 0x90
 80063b2:	2100      	movs	r1, #0
 80063b4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2288      	movs	r2, #136	; 0x88
 80063ba:	2121      	movs	r1, #33	; 0x21
 80063bc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063be:	f7fd fb01 	bl	80039c4 <HAL_GetTick>
 80063c2:	0003      	movs	r3, r0
 80063c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1dba      	adds	r2, r7, #6
 80063ca:	2154      	movs	r1, #84	; 0x54
 80063cc:	8812      	ldrh	r2, [r2, #0]
 80063ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	1dba      	adds	r2, r7, #6
 80063d4:	2156      	movs	r1, #86	; 0x56
 80063d6:	8812      	ldrh	r2, [r2, #0]
 80063d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	2380      	movs	r3, #128	; 0x80
 80063e0:	015b      	lsls	r3, r3, #5
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d108      	bne.n	80063f8 <HAL_UART_Transmit+0x98>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	e003      	b.n	8006400 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006400:	e02c      	b.n	800645c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	0013      	movs	r3, r2
 800640c:	2200      	movs	r2, #0
 800640e:	2180      	movs	r1, #128	; 0x80
 8006410:	f000 fc36 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 8006414:	1e03      	subs	r3, r0, #0
 8006416:	d001      	beq.n	800641c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e039      	b.n	8006490 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10b      	bne.n	800643a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	001a      	movs	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	05d2      	lsls	r2, r2, #23
 800642e:	0dd2      	lsrs	r2, r2, #23
 8006430:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	3302      	adds	r3, #2
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	e007      	b.n	800644a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	3301      	adds	r3, #1
 8006448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2256      	movs	r2, #86	; 0x56
 800644e:	5a9b      	ldrh	r3, [r3, r2]
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b299      	uxth	r1, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2256      	movs	r2, #86	; 0x56
 800645a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2256      	movs	r2, #86	; 0x56
 8006460:	5a9b      	ldrh	r3, [r3, r2]
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1cc      	bne.n	8006402 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	0013      	movs	r3, r2
 8006472:	2200      	movs	r2, #0
 8006474:	2140      	movs	r1, #64	; 0x40
 8006476:	f000 fc03 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 800647a:	1e03      	subs	r3, r0, #0
 800647c:	d001      	beq.n	8006482 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e006      	b.n	8006490 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2288      	movs	r2, #136	; 0x88
 8006486:	2120      	movs	r1, #32
 8006488:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	e000      	b.n	8006490 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800648e:	2302      	movs	r3, #2
  }
}
 8006490:	0018      	movs	r0, r3
 8006492:	46bd      	mov	sp, r7
 8006494:	b008      	add	sp, #32
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	1dbb      	adds	r3, r7, #6
 80064a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	228c      	movs	r2, #140	; 0x8c
 80064aa:	589b      	ldr	r3, [r3, r2]
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d14a      	bne.n	8006546 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_UART_Receive_DMA+0x26>
 80064b6:	1dbb      	adds	r3, r7, #6
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e042      	b.n	8006548 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	2380      	movs	r3, #128	; 0x80
 80064c8:	015b      	lsls	r3, r3, #5
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d109      	bne.n	80064e2 <HAL_UART_Receive_DMA+0x4a>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d105      	bne.n	80064e2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2201      	movs	r2, #1
 80064da:	4013      	ands	r3, r2
 80064dc:	d001      	beq.n	80064e2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e032      	b.n	8006548 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a18      	ldr	r2, [pc, #96]	; (8006550 <HAL_UART_Receive_DMA+0xb8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d020      	beq.n	8006534 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	2380      	movs	r3, #128	; 0x80
 80064fa:	041b      	lsls	r3, r3, #16
 80064fc:	4013      	ands	r3, r2
 80064fe:	d019      	beq.n	8006534 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006500:	f3ef 8310 	mrs	r3, PRIMASK
 8006504:	613b      	str	r3, [r7, #16]
  return(result);
 8006506:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006508:	61fb      	str	r3, [r7, #28]
 800650a:	2301      	movs	r3, #1
 800650c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f383 8810 	msr	PRIMASK, r3
}
 8006514:	46c0      	nop			; (mov r8, r8)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2180      	movs	r1, #128	; 0x80
 8006522:	04c9      	lsls	r1, r1, #19
 8006524:	430a      	orrs	r2, r1
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	f383 8810 	msr	PRIMASK, r3
}
 8006532:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006534:	1dbb      	adds	r3, r7, #6
 8006536:	881a      	ldrh	r2, [r3, #0]
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	0018      	movs	r0, r3
 800653e:	f000 fc67 	bl	8006e10 <UART_Start_Receive_DMA>
 8006542:	0003      	movs	r3, r0
 8006544:	e000      	b.n	8006548 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8006546:	2302      	movs	r3, #2
  }
}
 8006548:	0018      	movs	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	b008      	add	sp, #32
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40008000 	.word	0x40008000

08006554 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	46bd      	mov	sp, r7
 8006560:	b002      	add	sp, #8
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800656c:	46c0      	nop			; (mov r8, r8)
 800656e:	46bd      	mov	sp, r7
 8006570:	b002      	add	sp, #8
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	000a      	movs	r2, r1
 800657e:	1cbb      	adds	r3, r7, #2
 8006580:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	46bd      	mov	sp, r7
 8006586:	b002      	add	sp, #8
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800658c:	b5b0      	push	{r4, r5, r7, lr}
 800658e:	b090      	sub	sp, #64	; 0x40
 8006590:	af00      	add	r7, sp, #0
 8006592:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006594:	231a      	movs	r3, #26
 8006596:	2220      	movs	r2, #32
 8006598:	189b      	adds	r3, r3, r2
 800659a:	19db      	adds	r3, r3, r7
 800659c:	2200      	movs	r2, #0
 800659e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4ac4      	ldr	r2, [pc, #784]	; (80068d0 <UART_SetConfig+0x344>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	0019      	movs	r1, r3
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ca:	430b      	orrs	r3, r1
 80065cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	4abf      	ldr	r2, [pc, #764]	; (80068d4 <UART_SetConfig+0x348>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	0018      	movs	r0, r3
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	68d9      	ldr	r1, [r3, #12]
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	0003      	movs	r3, r0
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4ab9      	ldr	r2, [pc, #740]	; (80068d8 <UART_SetConfig+0x34c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065fe:	4313      	orrs	r3, r2
 8006600:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4ab4      	ldr	r2, [pc, #720]	; (80068dc <UART_SetConfig+0x350>)
 800660a:	4013      	ands	r3, r2
 800660c:	0019      	movs	r1, r3
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	430b      	orrs	r3, r1
 8006616:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	220f      	movs	r2, #15
 8006620:	4393      	bics	r3, r2
 8006622:	0018      	movs	r0, r3
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	0003      	movs	r3, r0
 800662e:	430b      	orrs	r3, r1
 8006630:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4aaa      	ldr	r2, [pc, #680]	; (80068e0 <UART_SetConfig+0x354>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d131      	bne.n	80066a0 <UART_SetConfig+0x114>
 800663c:	4ba9      	ldr	r3, [pc, #676]	; (80068e4 <UART_SetConfig+0x358>)
 800663e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006640:	2203      	movs	r2, #3
 8006642:	4013      	ands	r3, r2
 8006644:	2b03      	cmp	r3, #3
 8006646:	d01d      	beq.n	8006684 <UART_SetConfig+0xf8>
 8006648:	d823      	bhi.n	8006692 <UART_SetConfig+0x106>
 800664a:	2b02      	cmp	r3, #2
 800664c:	d00c      	beq.n	8006668 <UART_SetConfig+0xdc>
 800664e:	d820      	bhi.n	8006692 <UART_SetConfig+0x106>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <UART_SetConfig+0xce>
 8006654:	2b01      	cmp	r3, #1
 8006656:	d00e      	beq.n	8006676 <UART_SetConfig+0xea>
 8006658:	e01b      	b.n	8006692 <UART_SetConfig+0x106>
 800665a:	231b      	movs	r3, #27
 800665c:	2220      	movs	r2, #32
 800665e:	189b      	adds	r3, r3, r2
 8006660:	19db      	adds	r3, r3, r7
 8006662:	2200      	movs	r2, #0
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	e071      	b.n	800674c <UART_SetConfig+0x1c0>
 8006668:	231b      	movs	r3, #27
 800666a:	2220      	movs	r2, #32
 800666c:	189b      	adds	r3, r3, r2
 800666e:	19db      	adds	r3, r3, r7
 8006670:	2202      	movs	r2, #2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	e06a      	b.n	800674c <UART_SetConfig+0x1c0>
 8006676:	231b      	movs	r3, #27
 8006678:	2220      	movs	r2, #32
 800667a:	189b      	adds	r3, r3, r2
 800667c:	19db      	adds	r3, r3, r7
 800667e:	2204      	movs	r2, #4
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	e063      	b.n	800674c <UART_SetConfig+0x1c0>
 8006684:	231b      	movs	r3, #27
 8006686:	2220      	movs	r2, #32
 8006688:	189b      	adds	r3, r3, r2
 800668a:	19db      	adds	r3, r3, r7
 800668c:	2208      	movs	r2, #8
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	e05c      	b.n	800674c <UART_SetConfig+0x1c0>
 8006692:	231b      	movs	r3, #27
 8006694:	2220      	movs	r2, #32
 8006696:	189b      	adds	r3, r3, r2
 8006698:	19db      	adds	r3, r3, r7
 800669a:	2210      	movs	r2, #16
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	e055      	b.n	800674c <UART_SetConfig+0x1c0>
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a90      	ldr	r2, [pc, #576]	; (80068e8 <UART_SetConfig+0x35c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d106      	bne.n	80066b8 <UART_SetConfig+0x12c>
 80066aa:	231b      	movs	r3, #27
 80066ac:	2220      	movs	r2, #32
 80066ae:	189b      	adds	r3, r3, r2
 80066b0:	19db      	adds	r3, r3, r7
 80066b2:	2200      	movs	r2, #0
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e049      	b.n	800674c <UART_SetConfig+0x1c0>
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a86      	ldr	r2, [pc, #536]	; (80068d8 <UART_SetConfig+0x34c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d13e      	bne.n	8006740 <UART_SetConfig+0x1b4>
 80066c2:	4b88      	ldr	r3, [pc, #544]	; (80068e4 <UART_SetConfig+0x358>)
 80066c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066c6:	23c0      	movs	r3, #192	; 0xc0
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	4013      	ands	r3, r2
 80066cc:	22c0      	movs	r2, #192	; 0xc0
 80066ce:	0112      	lsls	r2, r2, #4
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d027      	beq.n	8006724 <UART_SetConfig+0x198>
 80066d4:	22c0      	movs	r2, #192	; 0xc0
 80066d6:	0112      	lsls	r2, r2, #4
 80066d8:	4293      	cmp	r3, r2
 80066da:	d82a      	bhi.n	8006732 <UART_SetConfig+0x1a6>
 80066dc:	2280      	movs	r2, #128	; 0x80
 80066de:	0112      	lsls	r2, r2, #4
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d011      	beq.n	8006708 <UART_SetConfig+0x17c>
 80066e4:	2280      	movs	r2, #128	; 0x80
 80066e6:	0112      	lsls	r2, r2, #4
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d822      	bhi.n	8006732 <UART_SetConfig+0x1a6>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <UART_SetConfig+0x16e>
 80066f0:	2280      	movs	r2, #128	; 0x80
 80066f2:	00d2      	lsls	r2, r2, #3
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00e      	beq.n	8006716 <UART_SetConfig+0x18a>
 80066f8:	e01b      	b.n	8006732 <UART_SetConfig+0x1a6>
 80066fa:	231b      	movs	r3, #27
 80066fc:	2220      	movs	r2, #32
 80066fe:	189b      	adds	r3, r3, r2
 8006700:	19db      	adds	r3, r3, r7
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	e021      	b.n	800674c <UART_SetConfig+0x1c0>
 8006708:	231b      	movs	r3, #27
 800670a:	2220      	movs	r2, #32
 800670c:	189b      	adds	r3, r3, r2
 800670e:	19db      	adds	r3, r3, r7
 8006710:	2202      	movs	r2, #2
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	e01a      	b.n	800674c <UART_SetConfig+0x1c0>
 8006716:	231b      	movs	r3, #27
 8006718:	2220      	movs	r2, #32
 800671a:	189b      	adds	r3, r3, r2
 800671c:	19db      	adds	r3, r3, r7
 800671e:	2204      	movs	r2, #4
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	e013      	b.n	800674c <UART_SetConfig+0x1c0>
 8006724:	231b      	movs	r3, #27
 8006726:	2220      	movs	r2, #32
 8006728:	189b      	adds	r3, r3, r2
 800672a:	19db      	adds	r3, r3, r7
 800672c:	2208      	movs	r2, #8
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	e00c      	b.n	800674c <UART_SetConfig+0x1c0>
 8006732:	231b      	movs	r3, #27
 8006734:	2220      	movs	r2, #32
 8006736:	189b      	adds	r3, r3, r2
 8006738:	19db      	adds	r3, r3, r7
 800673a:	2210      	movs	r2, #16
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	e005      	b.n	800674c <UART_SetConfig+0x1c0>
 8006740:	231b      	movs	r3, #27
 8006742:	2220      	movs	r2, #32
 8006744:	189b      	adds	r3, r3, r2
 8006746:	19db      	adds	r3, r3, r7
 8006748:	2210      	movs	r2, #16
 800674a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a61      	ldr	r2, [pc, #388]	; (80068d8 <UART_SetConfig+0x34c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d000      	beq.n	8006758 <UART_SetConfig+0x1cc>
 8006756:	e092      	b.n	800687e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006758:	231b      	movs	r3, #27
 800675a:	2220      	movs	r2, #32
 800675c:	189b      	adds	r3, r3, r2
 800675e:	19db      	adds	r3, r3, r7
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b08      	cmp	r3, #8
 8006764:	d015      	beq.n	8006792 <UART_SetConfig+0x206>
 8006766:	dc18      	bgt.n	800679a <UART_SetConfig+0x20e>
 8006768:	2b04      	cmp	r3, #4
 800676a:	d00d      	beq.n	8006788 <UART_SetConfig+0x1fc>
 800676c:	dc15      	bgt.n	800679a <UART_SetConfig+0x20e>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <UART_SetConfig+0x1ec>
 8006772:	2b02      	cmp	r3, #2
 8006774:	d005      	beq.n	8006782 <UART_SetConfig+0x1f6>
 8006776:	e010      	b.n	800679a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006778:	f7ff f980 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 800677c:	0003      	movs	r3, r0
 800677e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006780:	e014      	b.n	80067ac <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006782:	4b5a      	ldr	r3, [pc, #360]	; (80068ec <UART_SetConfig+0x360>)
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006786:	e011      	b.n	80067ac <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006788:	f7ff f8ec 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 800678c:	0003      	movs	r3, r0
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006790:	e00c      	b.n	80067ac <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006792:	2380      	movs	r3, #128	; 0x80
 8006794:	021b      	lsls	r3, r3, #8
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006798:	e008      	b.n	80067ac <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800679e:	231a      	movs	r3, #26
 80067a0:	2220      	movs	r2, #32
 80067a2:	189b      	adds	r3, r3, r2
 80067a4:	19db      	adds	r3, r3, r7
 80067a6:	2201      	movs	r2, #1
 80067a8:	701a      	strb	r2, [r3, #0]
        break;
 80067aa:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d100      	bne.n	80067b4 <UART_SetConfig+0x228>
 80067b2:	e147      	b.n	8006a44 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067b8:	4b4d      	ldr	r3, [pc, #308]	; (80068f0 <UART_SetConfig+0x364>)
 80067ba:	0052      	lsls	r2, r2, #1
 80067bc:	5ad3      	ldrh	r3, [r2, r3]
 80067be:	0019      	movs	r1, r3
 80067c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80067c2:	f7f9 fcbb 	bl	800013c <__udivsi3>
 80067c6:	0003      	movs	r3, r0
 80067c8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	0013      	movs	r3, r2
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	189b      	adds	r3, r3, r2
 80067d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d305      	bcc.n	80067e6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d906      	bls.n	80067f4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80067e6:	231a      	movs	r3, #26
 80067e8:	2220      	movs	r2, #32
 80067ea:	189b      	adds	r3, r3, r2
 80067ec:	19db      	adds	r3, r3, r7
 80067ee:	2201      	movs	r2, #1
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	e127      	b.n	8006a44 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	2300      	movs	r3, #0
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006800:	4b3b      	ldr	r3, [pc, #236]	; (80068f0 <UART_SetConfig+0x364>)
 8006802:	0052      	lsls	r2, r2, #1
 8006804:	5ad3      	ldrh	r3, [r2, r3]
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	69b8      	ldr	r0, [r7, #24]
 8006812:	69f9      	ldr	r1, [r7, #28]
 8006814:	f7f9 fe46 	bl	80004a4 <__aeabi_uldivmod>
 8006818:	0002      	movs	r2, r0
 800681a:	000b      	movs	r3, r1
 800681c:	0e11      	lsrs	r1, r2, #24
 800681e:	021d      	lsls	r5, r3, #8
 8006820:	430d      	orrs	r5, r1
 8006822:	0214      	lsls	r4, r2, #8
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68b8      	ldr	r0, [r7, #8]
 8006832:	68f9      	ldr	r1, [r7, #12]
 8006834:	1900      	adds	r0, r0, r4
 8006836:	4169      	adcs	r1, r5
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	603b      	str	r3, [r7, #0]
 800683e:	2300      	movs	r3, #0
 8006840:	607b      	str	r3, [r7, #4]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f7f9 fe2d 	bl	80004a4 <__aeabi_uldivmod>
 800684a:	0002      	movs	r2, r0
 800684c:	000b      	movs	r3, r1
 800684e:	0013      	movs	r3, r2
 8006850:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	23c0      	movs	r3, #192	; 0xc0
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	429a      	cmp	r2, r3
 800685a:	d309      	bcc.n	8006870 <UART_SetConfig+0x2e4>
 800685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685e:	2380      	movs	r3, #128	; 0x80
 8006860:	035b      	lsls	r3, r3, #13
 8006862:	429a      	cmp	r2, r3
 8006864:	d204      	bcs.n	8006870 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686c:	60da      	str	r2, [r3, #12]
 800686e:	e0e9      	b.n	8006a44 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8006870:	231a      	movs	r3, #26
 8006872:	2220      	movs	r2, #32
 8006874:	189b      	adds	r3, r3, r2
 8006876:	19db      	adds	r3, r3, r7
 8006878:	2201      	movs	r2, #1
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	e0e2      	b.n	8006a44 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	69da      	ldr	r2, [r3, #28]
 8006882:	2380      	movs	r3, #128	; 0x80
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	429a      	cmp	r2, r3
 8006888:	d000      	beq.n	800688c <UART_SetConfig+0x300>
 800688a:	e083      	b.n	8006994 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800688c:	231b      	movs	r3, #27
 800688e:	2220      	movs	r2, #32
 8006890:	189b      	adds	r3, r3, r2
 8006892:	19db      	adds	r3, r3, r7
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b08      	cmp	r3, #8
 8006898:	d015      	beq.n	80068c6 <UART_SetConfig+0x33a>
 800689a:	dc2b      	bgt.n	80068f4 <UART_SetConfig+0x368>
 800689c:	2b04      	cmp	r3, #4
 800689e:	d00d      	beq.n	80068bc <UART_SetConfig+0x330>
 80068a0:	dc28      	bgt.n	80068f4 <UART_SetConfig+0x368>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <UART_SetConfig+0x320>
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d005      	beq.n	80068b6 <UART_SetConfig+0x32a>
 80068aa:	e023      	b.n	80068f4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ac:	f7ff f8e6 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 80068b0:	0003      	movs	r3, r0
 80068b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068b4:	e027      	b.n	8006906 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b6:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <UART_SetConfig+0x360>)
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068ba:	e024      	b.n	8006906 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068bc:	f7ff f852 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 80068c0:	0003      	movs	r3, r0
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068c4:	e01f      	b.n	8006906 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c6:	2380      	movs	r3, #128	; 0x80
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068cc:	e01b      	b.n	8006906 <UART_SetConfig+0x37a>
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	cfff69f3 	.word	0xcfff69f3
 80068d4:	ffffcfff 	.word	0xffffcfff
 80068d8:	40008000 	.word	0x40008000
 80068dc:	11fff4ff 	.word	0x11fff4ff
 80068e0:	40013800 	.word	0x40013800
 80068e4:	40021000 	.word	0x40021000
 80068e8:	40004400 	.word	0x40004400
 80068ec:	00f42400 	.word	0x00f42400
 80068f0:	0800c0ac 	.word	0x0800c0ac
      default:
        pclk = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80068f8:	231a      	movs	r3, #26
 80068fa:	2220      	movs	r2, #32
 80068fc:	189b      	adds	r3, r3, r2
 80068fe:	19db      	adds	r3, r3, r7
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
        break;
 8006904:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006908:	2b00      	cmp	r3, #0
 800690a:	d100      	bne.n	800690e <UART_SetConfig+0x382>
 800690c:	e09a      	b.n	8006a44 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006912:	4b58      	ldr	r3, [pc, #352]	; (8006a74 <UART_SetConfig+0x4e8>)
 8006914:	0052      	lsls	r2, r2, #1
 8006916:	5ad3      	ldrh	r3, [r2, r3]
 8006918:	0019      	movs	r1, r3
 800691a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800691c:	f7f9 fc0e 	bl	800013c <__udivsi3>
 8006920:	0003      	movs	r3, r0
 8006922:	005a      	lsls	r2, r3, #1
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	085b      	lsrs	r3, r3, #1
 800692a:	18d2      	adds	r2, r2, r3
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	0019      	movs	r1, r3
 8006932:	0010      	movs	r0, r2
 8006934:	f7f9 fc02 	bl	800013c <__udivsi3>
 8006938:	0003      	movs	r3, r0
 800693a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	2b0f      	cmp	r3, #15
 8006940:	d921      	bls.n	8006986 <UART_SetConfig+0x3fa>
 8006942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006944:	2380      	movs	r3, #128	; 0x80
 8006946:	025b      	lsls	r3, r3, #9
 8006948:	429a      	cmp	r2, r3
 800694a:	d21c      	bcs.n	8006986 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	b29a      	uxth	r2, r3
 8006950:	200e      	movs	r0, #14
 8006952:	2420      	movs	r4, #32
 8006954:	1903      	adds	r3, r0, r4
 8006956:	19db      	adds	r3, r3, r7
 8006958:	210f      	movs	r1, #15
 800695a:	438a      	bics	r2, r1
 800695c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	b29b      	uxth	r3, r3
 8006964:	2207      	movs	r2, #7
 8006966:	4013      	ands	r3, r2
 8006968:	b299      	uxth	r1, r3
 800696a:	1903      	adds	r3, r0, r4
 800696c:	19db      	adds	r3, r3, r7
 800696e:	1902      	adds	r2, r0, r4
 8006970:	19d2      	adds	r2, r2, r7
 8006972:	8812      	ldrh	r2, [r2, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	1902      	adds	r2, r0, r4
 800697e:	19d2      	adds	r2, r2, r7
 8006980:	8812      	ldrh	r2, [r2, #0]
 8006982:	60da      	str	r2, [r3, #12]
 8006984:	e05e      	b.n	8006a44 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006986:	231a      	movs	r3, #26
 8006988:	2220      	movs	r2, #32
 800698a:	189b      	adds	r3, r3, r2
 800698c:	19db      	adds	r3, r3, r7
 800698e:	2201      	movs	r2, #1
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	e057      	b.n	8006a44 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006994:	231b      	movs	r3, #27
 8006996:	2220      	movs	r2, #32
 8006998:	189b      	adds	r3, r3, r2
 800699a:	19db      	adds	r3, r3, r7
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d015      	beq.n	80069ce <UART_SetConfig+0x442>
 80069a2:	dc18      	bgt.n	80069d6 <UART_SetConfig+0x44a>
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d00d      	beq.n	80069c4 <UART_SetConfig+0x438>
 80069a8:	dc15      	bgt.n	80069d6 <UART_SetConfig+0x44a>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <UART_SetConfig+0x428>
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d005      	beq.n	80069be <UART_SetConfig+0x432>
 80069b2:	e010      	b.n	80069d6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b4:	f7ff f862 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 80069b8:	0003      	movs	r3, r0
 80069ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069bc:	e014      	b.n	80069e8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069be:	4b2e      	ldr	r3, [pc, #184]	; (8006a78 <UART_SetConfig+0x4ec>)
 80069c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069c2:	e011      	b.n	80069e8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069c4:	f7fe ffce 	bl	8005964 <HAL_RCC_GetSysClockFreq>
 80069c8:	0003      	movs	r3, r0
 80069ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069cc:	e00c      	b.n	80069e8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	2380      	movs	r3, #128	; 0x80
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069d4:	e008      	b.n	80069e8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80069da:	231a      	movs	r3, #26
 80069dc:	2220      	movs	r2, #32
 80069de:	189b      	adds	r3, r3, r2
 80069e0:	19db      	adds	r3, r3, r7
 80069e2:	2201      	movs	r2, #1
 80069e4:	701a      	strb	r2, [r3, #0]
        break;
 80069e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d02a      	beq.n	8006a44 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069f2:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <UART_SetConfig+0x4e8>)
 80069f4:	0052      	lsls	r2, r2, #1
 80069f6:	5ad3      	ldrh	r3, [r2, r3]
 80069f8:	0019      	movs	r1, r3
 80069fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80069fc:	f7f9 fb9e 	bl	800013c <__udivsi3>
 8006a00:	0003      	movs	r3, r0
 8006a02:	001a      	movs	r2, r3
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	18d2      	adds	r2, r2, r3
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	0019      	movs	r1, r3
 8006a12:	0010      	movs	r0, r2
 8006a14:	f7f9 fb92 	bl	800013c <__udivsi3>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	2b0f      	cmp	r3, #15
 8006a20:	d90a      	bls.n	8006a38 <UART_SetConfig+0x4ac>
 8006a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	025b      	lsls	r3, r3, #9
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d205      	bcs.n	8006a38 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60da      	str	r2, [r3, #12]
 8006a36:	e005      	b.n	8006a44 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006a38:	231a      	movs	r3, #26
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	189b      	adds	r3, r3, r2
 8006a3e:	19db      	adds	r3, r3, r7
 8006a40:	2201      	movs	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	226a      	movs	r2, #106	; 0x6a
 8006a48:	2101      	movs	r1, #1
 8006a4a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	2268      	movs	r2, #104	; 0x68
 8006a50:	2101      	movs	r1, #1
 8006a52:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	2200      	movs	r2, #0
 8006a58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006a60:	231a      	movs	r3, #26
 8006a62:	2220      	movs	r2, #32
 8006a64:	189b      	adds	r3, r3, r2
 8006a66:	19db      	adds	r3, r3, r7
 8006a68:	781b      	ldrb	r3, [r3, #0]
}
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	b010      	add	sp, #64	; 0x40
 8006a70:	bdb0      	pop	{r4, r5, r7, pc}
 8006a72:	46c0      	nop			; (mov r8, r8)
 8006a74:	0800c0ac 	.word	0x0800c0ac
 8006a78:	00f42400 	.word	0x00f42400

08006a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	2201      	movs	r2, #1
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	d00b      	beq.n	8006aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a4a      	ldr	r2, [pc, #296]	; (8006bc0 <UART_AdvFeatureConfig+0x144>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	0019      	movs	r1, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	2202      	movs	r2, #2
 8006aac:	4013      	ands	r3, r2
 8006aae:	d00b      	beq.n	8006ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4a43      	ldr	r2, [pc, #268]	; (8006bc4 <UART_AdvFeatureConfig+0x148>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	0019      	movs	r1, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	2204      	movs	r2, #4
 8006ace:	4013      	ands	r3, r2
 8006ad0:	d00b      	beq.n	8006aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	4a3b      	ldr	r2, [pc, #236]	; (8006bc8 <UART_AdvFeatureConfig+0x14c>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	0019      	movs	r1, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	2208      	movs	r2, #8
 8006af0:	4013      	ands	r3, r2
 8006af2:	d00b      	beq.n	8006b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	4a34      	ldr	r2, [pc, #208]	; (8006bcc <UART_AdvFeatureConfig+0x150>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	0019      	movs	r1, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	2210      	movs	r2, #16
 8006b12:	4013      	ands	r3, r2
 8006b14:	d00b      	beq.n	8006b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <UART_AdvFeatureConfig+0x154>)
 8006b1e:	4013      	ands	r3, r2
 8006b20:	0019      	movs	r1, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	2220      	movs	r2, #32
 8006b34:	4013      	ands	r3, r2
 8006b36:	d00b      	beq.n	8006b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	4a25      	ldr	r2, [pc, #148]	; (8006bd4 <UART_AdvFeatureConfig+0x158>)
 8006b40:	4013      	ands	r3, r2
 8006b42:	0019      	movs	r1, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	2240      	movs	r2, #64	; 0x40
 8006b56:	4013      	ands	r3, r2
 8006b58:	d01d      	beq.n	8006b96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <UART_AdvFeatureConfig+0x15c>)
 8006b62:	4013      	ands	r3, r2
 8006b64:	0019      	movs	r1, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b76:	2380      	movs	r3, #128	; 0x80
 8006b78:	035b      	lsls	r3, r3, #13
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d10b      	bne.n	8006b96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	4a15      	ldr	r2, [pc, #84]	; (8006bdc <UART_AdvFeatureConfig+0x160>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	0019      	movs	r1, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	2280      	movs	r2, #128	; 0x80
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	4a0e      	ldr	r2, [pc, #56]	; (8006be0 <UART_AdvFeatureConfig+0x164>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	0019      	movs	r1, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	605a      	str	r2, [r3, #4]
  }
}
 8006bb8:	46c0      	nop			; (mov r8, r8)
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b002      	add	sp, #8
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	fffdffff 	.word	0xfffdffff
 8006bc4:	fffeffff 	.word	0xfffeffff
 8006bc8:	fffbffff 	.word	0xfffbffff
 8006bcc:	ffff7fff 	.word	0xffff7fff
 8006bd0:	ffffefff 	.word	0xffffefff
 8006bd4:	ffffdfff 	.word	0xffffdfff
 8006bd8:	ffefffff 	.word	0xffefffff
 8006bdc:	ff9fffff 	.word	0xff9fffff
 8006be0:	fff7ffff 	.word	0xfff7ffff

08006be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2290      	movs	r2, #144	; 0x90
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bf4:	f7fc fee6 	bl	80039c4 <HAL_GetTick>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2208      	movs	r2, #8
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d10c      	bne.n	8006c24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2280      	movs	r2, #128	; 0x80
 8006c0e:	0391      	lsls	r1, r2, #14
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4a1a      	ldr	r2, [pc, #104]	; (8006c7c <UART_CheckIdleState+0x98>)
 8006c14:	9200      	str	r2, [sp, #0]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f000 f832 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 8006c1c:	1e03      	subs	r3, r0, #0
 8006c1e:	d001      	beq.n	8006c24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e026      	b.n	8006c72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2204      	movs	r2, #4
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d10c      	bne.n	8006c4c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2280      	movs	r2, #128	; 0x80
 8006c36:	03d1      	lsls	r1, r2, #15
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4a10      	ldr	r2, [pc, #64]	; (8006c7c <UART_CheckIdleState+0x98>)
 8006c3c:	9200      	str	r2, [sp, #0]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f000 f81e 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 8006c44:	1e03      	subs	r3, r0, #0
 8006c46:	d001      	beq.n	8006c4c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e012      	b.n	8006c72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2288      	movs	r2, #136	; 0x88
 8006c50:	2120      	movs	r1, #32
 8006c52:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	228c      	movs	r2, #140	; 0x8c
 8006c58:	2120      	movs	r1, #32
 8006c5a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2284      	movs	r2, #132	; 0x84
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	0018      	movs	r0, r3
 8006c74:	46bd      	mov	sp, r7
 8006c76:	b004      	add	sp, #16
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	01ffffff 	.word	0x01ffffff

08006c80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b094      	sub	sp, #80	; 0x50
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	1dfb      	adds	r3, r7, #7
 8006c8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c90:	e0a7      	b.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c94:	3301      	adds	r3, #1
 8006c96:	d100      	bne.n	8006c9a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006c98:	e0a3      	b.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9a:	f7fc fe93 	bl	80039c4 <HAL_GetTick>
 8006c9e:	0002      	movs	r2, r0
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d302      	bcc.n	8006cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d13f      	bne.n	8006d30 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cba:	2301      	movs	r3, #1
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	f383 8810 	msr	PRIMASK, r3
}
 8006cc4:	46c0      	nop			; (mov r8, r8)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	494e      	ldr	r1, [pc, #312]	; (8006e0c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006cd2:	400a      	ands	r2, r1
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	f383 8810 	msr	PRIMASK, r3
}
 8006ce0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cea:	643b      	str	r3, [r7, #64]	; 0x40
 8006cec:	2301      	movs	r3, #1
 8006cee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	f383 8810 	msr	PRIMASK, r3
}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2101      	movs	r1, #1
 8006d04:	438a      	bics	r2, r1
 8006d06:	609a      	str	r2, [r3, #8]
 8006d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0e:	f383 8810 	msr	PRIMASK, r3
}
 8006d12:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2288      	movs	r2, #136	; 0x88
 8006d18:	2120      	movs	r1, #32
 8006d1a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	228c      	movs	r2, #140	; 0x8c
 8006d20:	2120      	movs	r1, #32
 8006d22:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2284      	movs	r2, #132	; 0x84
 8006d28:	2100      	movs	r1, #0
 8006d2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e069      	b.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2204      	movs	r2, #4
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d052      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69da      	ldr	r2, [r3, #28]
 8006d42:	2380      	movs	r3, #128	; 0x80
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	401a      	ands	r2, r3
 8006d48:	2380      	movs	r3, #128	; 0x80
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d148      	bne.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2280      	movs	r2, #128	; 0x80
 8006d56:	0112      	lsls	r2, r2, #4
 8006d58:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d5e:	613b      	str	r3, [r7, #16]
  return(result);
 8006d60:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d64:	2301      	movs	r3, #1
 8006d66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f383 8810 	msr	PRIMASK, r3
}
 8006d6e:	46c0      	nop			; (mov r8, r8)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4924      	ldr	r1, [pc, #144]	; (8006e0c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006d7c:	400a      	ands	r2, r1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f383 8810 	msr	PRIMASK, r3
}
 8006d8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d90:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d92:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d96:	2301      	movs	r3, #1
 8006d98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	f383 8810 	msr	PRIMASK, r3
}
 8006da0:	46c0      	nop			; (mov r8, r8)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2101      	movs	r1, #1
 8006dae:	438a      	bics	r2, r1
 8006db0:	609a      	str	r2, [r3, #8]
 8006db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	f383 8810 	msr	PRIMASK, r3
}
 8006dbc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2288      	movs	r2, #136	; 0x88
 8006dc2:	2120      	movs	r1, #32
 8006dc4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	228c      	movs	r2, #140	; 0x8c
 8006dca:	2120      	movs	r1, #32
 8006dcc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2290      	movs	r2, #144	; 0x90
 8006dd2:	2120      	movs	r1, #32
 8006dd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2284      	movs	r2, #132	; 0x84
 8006dda:	2100      	movs	r1, #0
 8006ddc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e010      	b.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	4013      	ands	r3, r2
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	425a      	negs	r2, r3
 8006df2:	4153      	adcs	r3, r2
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	001a      	movs	r2, r3
 8006df8:	1dfb      	adds	r3, r7, #7
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d100      	bne.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x182>
 8006e00:	e747      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	0018      	movs	r0, r3
 8006e06:	46bd      	mov	sp, r7
 8006e08:	b014      	add	sp, #80	; 0x50
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	fffffe5f 	.word	0xfffffe5f

08006e10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b090      	sub	sp, #64	; 0x40
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	1dbb      	adds	r3, r7, #6
 8006e1c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	1dba      	adds	r2, r7, #6
 8006e28:	215c      	movs	r1, #92	; 0x5c
 8006e2a:	8812      	ldrh	r2, [r2, #0]
 8006e2c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2290      	movs	r2, #144	; 0x90
 8006e32:	2100      	movs	r1, #0
 8006e34:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	228c      	movs	r2, #140	; 0x8c
 8006e3a:	2122      	movs	r1, #34	; 0x22
 8006e3c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2280      	movs	r2, #128	; 0x80
 8006e42:	589b      	ldr	r3, [r3, r2]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d02d      	beq.n	8006ea4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2280      	movs	r2, #128	; 0x80
 8006e4c:	589b      	ldr	r3, [r3, r2]
 8006e4e:	4a40      	ldr	r2, [pc, #256]	; (8006f50 <UART_Start_Receive_DMA+0x140>)
 8006e50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2280      	movs	r2, #128	; 0x80
 8006e56:	589b      	ldr	r3, [r3, r2]
 8006e58:	4a3e      	ldr	r2, [pc, #248]	; (8006f54 <UART_Start_Receive_DMA+0x144>)
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2280      	movs	r2, #128	; 0x80
 8006e60:	589b      	ldr	r3, [r3, r2]
 8006e62:	4a3d      	ldr	r2, [pc, #244]	; (8006f58 <UART_Start_Receive_DMA+0x148>)
 8006e64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2280      	movs	r2, #128	; 0x80
 8006e6a:	589b      	ldr	r3, [r3, r2]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2280      	movs	r2, #128	; 0x80
 8006e74:	5898      	ldr	r0, [r3, r2]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3324      	adds	r3, #36	; 0x24
 8006e7c:	0019      	movs	r1, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	001a      	movs	r2, r3
 8006e84:	1dbb      	adds	r3, r7, #6
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	f7fd fdb4 	bl	80049f4 <HAL_DMA_Start_IT>
 8006e8c:	1e03      	subs	r3, r0, #0
 8006e8e:	d009      	beq.n	8006ea4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2290      	movs	r2, #144	; 0x90
 8006e94:	2110      	movs	r1, #16
 8006e96:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	228c      	movs	r2, #140	; 0x8c
 8006e9c:	2120      	movs	r1, #32
 8006e9e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e050      	b.n	8006f46 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d019      	beq.n	8006ee0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eac:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	f383 8810 	msr	PRIMASK, r3
}
 8006ec0:	46c0      	nop			; (mov r8, r8)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2180      	movs	r1, #128	; 0x80
 8006ece:	0049      	lsls	r1, r1, #1
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	f383 8810 	msr	PRIMASK, r3
}
 8006ede:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ee6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eea:	2301      	movs	r3, #1
 8006eec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f383 8810 	msr	PRIMASK, r3
}
 8006ef4:	46c0      	nop			; (mov r8, r8)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2101      	movs	r1, #1
 8006f02:	430a      	orrs	r2, r1
 8006f04:	609a      	str	r2, [r3, #8]
 8006f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	f383 8810 	msr	PRIMASK, r3
}
 8006f10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f12:	f3ef 8310 	mrs	r3, PRIMASK
 8006f16:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f18:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	f383 8810 	msr	PRIMASK, r3
}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2140      	movs	r1, #64	; 0x40
 8006f34:	430a      	orrs	r2, r1
 8006f36:	609a      	str	r2, [r3, #8]
 8006f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	f383 8810 	msr	PRIMASK, r3
}
 8006f42:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	0018      	movs	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	b010      	add	sp, #64	; 0x40
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	080070a9 	.word	0x080070a9
 8006f54:	080071d9 	.word	0x080071d9
 8006f58:	0800721b 	.word	0x0800721b

08006f5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08a      	sub	sp, #40	; 0x28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f64:	f3ef 8310 	mrs	r3, PRIMASK
 8006f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f6e:	2301      	movs	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	21c0      	movs	r1, #192	; 0xc0
 8006f86:	438a      	bics	r2, r1
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f383 8810 	msr	PRIMASK, r3
}
 8006f94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f96:	f3ef 8310 	mrs	r3, PRIMASK
 8006f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8006f9c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006f9e:	623b      	str	r3, [r7, #32]
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f383 8810 	msr	PRIMASK, r3
}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4908      	ldr	r1, [pc, #32]	; (8006fd8 <UART_EndTxTransfer+0x7c>)
 8006fb8:	400a      	ands	r2, r1
 8006fba:	609a      	str	r2, [r3, #8]
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f383 8810 	msr	PRIMASK, r3
}
 8006fc6:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2288      	movs	r2, #136	; 0x88
 8006fcc:	2120      	movs	r1, #32
 8006fce:	5099      	str	r1, [r3, r2]
}
 8006fd0:	46c0      	nop			; (mov r8, r8)
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	b00a      	add	sp, #40	; 0x28
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	ff7fffff 	.word	0xff7fffff

08006fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08e      	sub	sp, #56	; 0x38
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe8:	617b      	str	r3, [r7, #20]
  return(result);
 8006fea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fec:	637b      	str	r3, [r7, #52]	; 0x34
 8006fee:	2301      	movs	r3, #1
 8006ff0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	f383 8810 	msr	PRIMASK, r3
}
 8006ff8:	46c0      	nop			; (mov r8, r8)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4926      	ldr	r1, [pc, #152]	; (80070a0 <UART_EndRxTransfer+0xc4>)
 8007006:	400a      	ands	r2, r1
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	f383 8810 	msr	PRIMASK, r3
}
 8007014:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007016:	f3ef 8310 	mrs	r3, PRIMASK
 800701a:	623b      	str	r3, [r7, #32]
  return(result);
 800701c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800701e:	633b      	str	r3, [r7, #48]	; 0x30
 8007020:	2301      	movs	r3, #1
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	f383 8810 	msr	PRIMASK, r3
}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	491b      	ldr	r1, [pc, #108]	; (80070a4 <UART_EndRxTransfer+0xc8>)
 8007038:	400a      	ands	r2, r1
 800703a:	609a      	str	r2, [r3, #8]
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	f383 8810 	msr	PRIMASK, r3
}
 8007046:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d118      	bne.n	8007082 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007050:	f3ef 8310 	mrs	r3, PRIMASK
 8007054:	60bb      	str	r3, [r7, #8]
  return(result);
 8007056:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800705a:	2301      	movs	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f383 8810 	msr	PRIMASK, r3
}
 8007064:	46c0      	nop			; (mov r8, r8)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2110      	movs	r1, #16
 8007072:	438a      	bics	r2, r1
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f383 8810 	msr	PRIMASK, r3
}
 8007080:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	228c      	movs	r2, #140	; 0x8c
 8007086:	2120      	movs	r1, #32
 8007088:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	46bd      	mov	sp, r7
 800709a:	b00e      	add	sp, #56	; 0x38
 800709c:	bd80      	pop	{r7, pc}
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	fffffedf 	.word	0xfffffedf
 80070a4:	effffffe 	.word	0xeffffffe

080070a8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b094      	sub	sp, #80	; 0x50
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2220      	movs	r2, #32
 80070be:	4013      	ands	r3, r2
 80070c0:	d16f      	bne.n	80071a2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80070c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c4:	225e      	movs	r2, #94	; 0x5e
 80070c6:	2100      	movs	r1, #0
 80070c8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ca:	f3ef 8310 	mrs	r3, PRIMASK
 80070ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80070d0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d4:	2301      	movs	r3, #1
 80070d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f383 8810 	msr	PRIMASK, r3
}
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	493a      	ldr	r1, [pc, #232]	; (80071d4 <UART_DMAReceiveCplt+0x12c>)
 80070ec:	400a      	ands	r2, r1
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	f383 8810 	msr	PRIMASK, r3
}
 80070fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007104:	647b      	str	r3, [r7, #68]	; 0x44
 8007106:	2301      	movs	r3, #1
 8007108:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	f383 8810 	msr	PRIMASK, r3
}
 8007110:	46c0      	nop			; (mov r8, r8)
 8007112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2101      	movs	r1, #1
 800711e:	438a      	bics	r2, r1
 8007120:	609a      	str	r2, [r3, #8]
 8007122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007124:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	f383 8810 	msr	PRIMASK, r3
}
 800712c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800712e:	f3ef 8310 	mrs	r3, PRIMASK
 8007132:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007136:	643b      	str	r3, [r7, #64]	; 0x40
 8007138:	2301      	movs	r3, #1
 800713a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800713c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713e:	f383 8810 	msr	PRIMASK, r3
}
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2140      	movs	r1, #64	; 0x40
 8007150:	438a      	bics	r2, r1
 8007152:	609a      	str	r2, [r3, #8]
 8007154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007156:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	f383 8810 	msr	PRIMASK, r3
}
 800715e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007162:	228c      	movs	r2, #140	; 0x8c
 8007164:	2120      	movs	r1, #32
 8007166:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d118      	bne.n	80071a2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007170:	f3ef 8310 	mrs	r3, PRIMASK
 8007174:	60fb      	str	r3, [r7, #12]
  return(result);
 8007176:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800717a:	2301      	movs	r3, #1
 800717c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f383 8810 	msr	PRIMASK, r3
}
 8007184:	46c0      	nop			; (mov r8, r8)
 8007186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2110      	movs	r1, #16
 8007192:	438a      	bics	r2, r1
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007198:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f383 8810 	msr	PRIMASK, r3
}
 80071a0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a4:	2200      	movs	r2, #0
 80071a6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d108      	bne.n	80071c2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b2:	225c      	movs	r2, #92	; 0x5c
 80071b4:	5a9a      	ldrh	r2, [r3, r2]
 80071b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b8:	0011      	movs	r1, r2
 80071ba:	0018      	movs	r0, r3
 80071bc:	f7ff f9da 	bl	8006574 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071c0:	e003      	b.n	80071ca <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80071c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7fb fcaf 	bl	8002b28 <HAL_UART_RxCpltCallback>
}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	46bd      	mov	sp, r7
 80071ce:	b014      	add	sp, #80	; 0x50
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	46c0      	nop			; (mov r8, r8)
 80071d4:	fffffeff 	.word	0xfffffeff

080071d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d10a      	bne.n	800720a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	225c      	movs	r2, #92	; 0x5c
 80071f8:	5a9b      	ldrh	r3, [r3, r2]
 80071fa:	085b      	lsrs	r3, r3, #1
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	0011      	movs	r1, r2
 8007202:	0018      	movs	r0, r3
 8007204:	f7ff f9b6 	bl	8006574 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007208:	e003      	b.n	8007212 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	0018      	movs	r0, r3
 800720e:	f7ff f9a1 	bl	8006554 <HAL_UART_RxHalfCpltCallback>
}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	46bd      	mov	sp, r7
 8007216:	b004      	add	sp, #16
 8007218:	bd80      	pop	{r7, pc}

0800721a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b086      	sub	sp, #24
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2288      	movs	r2, #136	; 0x88
 800722c:	589b      	ldr	r3, [r3, r2]
 800722e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	228c      	movs	r2, #140	; 0x8c
 8007234:	589b      	ldr	r3, [r3, r2]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2280      	movs	r2, #128	; 0x80
 8007240:	4013      	ands	r3, r2
 8007242:	2b80      	cmp	r3, #128	; 0x80
 8007244:	d10a      	bne.n	800725c <UART_DMAError+0x42>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b21      	cmp	r3, #33	; 0x21
 800724a:	d107      	bne.n	800725c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2256      	movs	r2, #86	; 0x56
 8007250:	2100      	movs	r1, #0
 8007252:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	0018      	movs	r0, r3
 8007258:	f7ff fe80 	bl	8006f5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2240      	movs	r2, #64	; 0x40
 8007264:	4013      	ands	r3, r2
 8007266:	2b40      	cmp	r3, #64	; 0x40
 8007268:	d10a      	bne.n	8007280 <UART_DMAError+0x66>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b22      	cmp	r3, #34	; 0x22
 800726e:	d107      	bne.n	8007280 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	225e      	movs	r2, #94	; 0x5e
 8007274:	2100      	movs	r1, #0
 8007276:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	0018      	movs	r0, r3
 800727c:	f7ff feae 	bl	8006fdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2290      	movs	r2, #144	; 0x90
 8007284:	589b      	ldr	r3, [r3, r2]
 8007286:	2210      	movs	r2, #16
 8007288:	431a      	orrs	r2, r3
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2190      	movs	r1, #144	; 0x90
 800728e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	0018      	movs	r0, r3
 8007294:	f7ff f966 	bl	8006564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007298:	46c0      	nop			; (mov r8, r8)
 800729a:	46bd      	mov	sp, r7
 800729c:	b006      	add	sp, #24
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2284      	movs	r2, #132	; 0x84
 80072ac:	5c9b      	ldrb	r3, [r3, r2]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e027      	b.n	8007306 <HAL_UARTEx_DisableFifoMode+0x66>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2284      	movs	r2, #132	; 0x84
 80072ba:	2101      	movs	r1, #1
 80072bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2288      	movs	r2, #136	; 0x88
 80072c2:	2124      	movs	r1, #36	; 0x24
 80072c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2101      	movs	r1, #1
 80072da:	438a      	bics	r2, r1
 80072dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4a0b      	ldr	r2, [pc, #44]	; (8007310 <HAL_UARTEx_DisableFifoMode+0x70>)
 80072e2:	4013      	ands	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2288      	movs	r2, #136	; 0x88
 80072f8:	2120      	movs	r1, #32
 80072fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2284      	movs	r2, #132	; 0x84
 8007300:	2100      	movs	r1, #0
 8007302:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	0018      	movs	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	b004      	add	sp, #16
 800730c:	bd80      	pop	{r7, pc}
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	dfffffff 	.word	0xdfffffff

08007314 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2284      	movs	r2, #132	; 0x84
 8007322:	5c9b      	ldrb	r3, [r3, r2]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007328:	2302      	movs	r3, #2
 800732a:	e02e      	b.n	800738a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2284      	movs	r2, #132	; 0x84
 8007330:	2101      	movs	r1, #1
 8007332:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2288      	movs	r2, #136	; 0x88
 8007338:	2124      	movs	r1, #36	; 0x24
 800733a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2101      	movs	r1, #1
 8007350:	438a      	bics	r2, r1
 8007352:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	08d9      	lsrs	r1, r3, #3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	0018      	movs	r0, r3
 800736c:	f000 f854 	bl	8007418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2288      	movs	r2, #136	; 0x88
 800737c:	2120      	movs	r1, #32
 800737e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2284      	movs	r2, #132	; 0x84
 8007384:	2100      	movs	r1, #0
 8007386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	0018      	movs	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	b004      	add	sp, #16
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2284      	movs	r2, #132	; 0x84
 80073a2:	5c9b      	ldrb	r3, [r3, r2]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e02f      	b.n	800740c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2284      	movs	r2, #132	; 0x84
 80073b0:	2101      	movs	r1, #1
 80073b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2288      	movs	r2, #136	; 0x88
 80073b8:	2124      	movs	r1, #36	; 0x24
 80073ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2101      	movs	r1, #1
 80073d0:	438a      	bics	r2, r1
 80073d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	4a0e      	ldr	r2, [pc, #56]	; (8007414 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80073dc:	4013      	ands	r3, r2
 80073de:	0019      	movs	r1, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	0018      	movs	r0, r3
 80073ee:	f000 f813 	bl	8007418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2288      	movs	r2, #136	; 0x88
 80073fe:	2120      	movs	r1, #32
 8007400:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2284      	movs	r2, #132	; 0x84
 8007406:	2100      	movs	r1, #0
 8007408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	0018      	movs	r0, r3
 800740e:	46bd      	mov	sp, r7
 8007410:	b004      	add	sp, #16
 8007412:	bd80      	pop	{r7, pc}
 8007414:	f1ffffff 	.word	0xf1ffffff

08007418 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007424:	2b00      	cmp	r3, #0
 8007426:	d108      	bne.n	800743a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	226a      	movs	r2, #106	; 0x6a
 800742c:	2101      	movs	r1, #1
 800742e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2268      	movs	r2, #104	; 0x68
 8007434:	2101      	movs	r1, #1
 8007436:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007438:	e043      	b.n	80074c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800743a:	260f      	movs	r6, #15
 800743c:	19bb      	adds	r3, r7, r6
 800743e:	2208      	movs	r2, #8
 8007440:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007442:	200e      	movs	r0, #14
 8007444:	183b      	adds	r3, r7, r0
 8007446:	2208      	movs	r2, #8
 8007448:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	0e5b      	lsrs	r3, r3, #25
 8007452:	b2da      	uxtb	r2, r3
 8007454:	240d      	movs	r4, #13
 8007456:	193b      	adds	r3, r7, r4
 8007458:	2107      	movs	r1, #7
 800745a:	400a      	ands	r2, r1
 800745c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	0f5b      	lsrs	r3, r3, #29
 8007466:	b2da      	uxtb	r2, r3
 8007468:	250c      	movs	r5, #12
 800746a:	197b      	adds	r3, r7, r5
 800746c:	2107      	movs	r1, #7
 800746e:	400a      	ands	r2, r1
 8007470:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007472:	183b      	adds	r3, r7, r0
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	197a      	adds	r2, r7, r5
 8007478:	7812      	ldrb	r2, [r2, #0]
 800747a:	4914      	ldr	r1, [pc, #80]	; (80074cc <UARTEx_SetNbDataToProcess+0xb4>)
 800747c:	5c8a      	ldrb	r2, [r1, r2]
 800747e:	435a      	muls	r2, r3
 8007480:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007482:	197b      	adds	r3, r7, r5
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	4a12      	ldr	r2, [pc, #72]	; (80074d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007488:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800748a:	0019      	movs	r1, r3
 800748c:	f7f8 fee0 	bl	8000250 <__divsi3>
 8007490:	0003      	movs	r3, r0
 8007492:	b299      	uxth	r1, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	226a      	movs	r2, #106	; 0x6a
 8007498:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800749a:	19bb      	adds	r3, r7, r6
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	193a      	adds	r2, r7, r4
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	490a      	ldr	r1, [pc, #40]	; (80074cc <UARTEx_SetNbDataToProcess+0xb4>)
 80074a4:	5c8a      	ldrb	r2, [r1, r2]
 80074a6:	435a      	muls	r2, r3
 80074a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80074aa:	193b      	adds	r3, r7, r4
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	4a08      	ldr	r2, [pc, #32]	; (80074d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80074b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074b2:	0019      	movs	r1, r3
 80074b4:	f7f8 fecc 	bl	8000250 <__divsi3>
 80074b8:	0003      	movs	r3, r0
 80074ba:	b299      	uxth	r1, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2268      	movs	r2, #104	; 0x68
 80074c0:	5299      	strh	r1, [r3, r2]
}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	46bd      	mov	sp, r7
 80074c6:	b005      	add	sp, #20
 80074c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ca:	46c0      	nop			; (mov r8, r8)
 80074cc:	0800c0c4 	.word	0x0800c0c4
 80074d0:	0800c0cc 	.word	0x0800c0cc

080074d4 <atoi>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	220a      	movs	r2, #10
 80074d8:	2100      	movs	r1, #0
 80074da:	f001 fe9b 	bl	8009214 <strtol>
 80074de:	bd10      	pop	{r4, pc}

080074e0 <__errno>:
 80074e0:	4b01      	ldr	r3, [pc, #4]	; (80074e8 <__errno+0x8>)
 80074e2:	6818      	ldr	r0, [r3, #0]
 80074e4:	4770      	bx	lr
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	2000000c 	.word	0x2000000c

080074ec <__libc_init_array>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	2600      	movs	r6, #0
 80074f0:	4d0c      	ldr	r5, [pc, #48]	; (8007524 <__libc_init_array+0x38>)
 80074f2:	4c0d      	ldr	r4, [pc, #52]	; (8007528 <__libc_init_array+0x3c>)
 80074f4:	1b64      	subs	r4, r4, r5
 80074f6:	10a4      	asrs	r4, r4, #2
 80074f8:	42a6      	cmp	r6, r4
 80074fa:	d109      	bne.n	8007510 <__libc_init_array+0x24>
 80074fc:	2600      	movs	r6, #0
 80074fe:	f004 fd53 	bl	800bfa8 <_init>
 8007502:	4d0a      	ldr	r5, [pc, #40]	; (800752c <__libc_init_array+0x40>)
 8007504:	4c0a      	ldr	r4, [pc, #40]	; (8007530 <__libc_init_array+0x44>)
 8007506:	1b64      	subs	r4, r4, r5
 8007508:	10a4      	asrs	r4, r4, #2
 800750a:	42a6      	cmp	r6, r4
 800750c:	d105      	bne.n	800751a <__libc_init_array+0x2e>
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	00b3      	lsls	r3, r6, #2
 8007512:	58eb      	ldr	r3, [r5, r3]
 8007514:	4798      	blx	r3
 8007516:	3601      	adds	r6, #1
 8007518:	e7ee      	b.n	80074f8 <__libc_init_array+0xc>
 800751a:	00b3      	lsls	r3, r6, #2
 800751c:	58eb      	ldr	r3, [r5, r3]
 800751e:	4798      	blx	r3
 8007520:	3601      	adds	r6, #1
 8007522:	e7f2      	b.n	800750a <__libc_init_array+0x1e>
 8007524:	0800c584 	.word	0x0800c584
 8007528:	0800c584 	.word	0x0800c584
 800752c:	0800c584 	.word	0x0800c584
 8007530:	0800c588 	.word	0x0800c588

08007534 <malloc>:
 8007534:	b510      	push	{r4, lr}
 8007536:	4b03      	ldr	r3, [pc, #12]	; (8007544 <malloc+0x10>)
 8007538:	0001      	movs	r1, r0
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	f000 f882 	bl	8007644 <_malloc_r>
 8007540:	bd10      	pop	{r4, pc}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	2000000c 	.word	0x2000000c

08007548 <memcpy>:
 8007548:	2300      	movs	r3, #0
 800754a:	b510      	push	{r4, lr}
 800754c:	429a      	cmp	r2, r3
 800754e:	d100      	bne.n	8007552 <memcpy+0xa>
 8007550:	bd10      	pop	{r4, pc}
 8007552:	5ccc      	ldrb	r4, [r1, r3]
 8007554:	54c4      	strb	r4, [r0, r3]
 8007556:	3301      	adds	r3, #1
 8007558:	e7f8      	b.n	800754c <memcpy+0x4>

0800755a <memset>:
 800755a:	0003      	movs	r3, r0
 800755c:	1882      	adds	r2, r0, r2
 800755e:	4293      	cmp	r3, r2
 8007560:	d100      	bne.n	8007564 <memset+0xa>
 8007562:	4770      	bx	lr
 8007564:	7019      	strb	r1, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	e7f9      	b.n	800755e <memset+0x4>
	...

0800756c <_free_r>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	0005      	movs	r5, r0
 8007570:	2900      	cmp	r1, #0
 8007572:	d010      	beq.n	8007596 <_free_r+0x2a>
 8007574:	1f0c      	subs	r4, r1, #4
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	da00      	bge.n	800757e <_free_r+0x12>
 800757c:	18e4      	adds	r4, r4, r3
 800757e:	0028      	movs	r0, r5
 8007580:	f003 f890 	bl	800a6a4 <__malloc_lock>
 8007584:	4a1d      	ldr	r2, [pc, #116]	; (80075fc <_free_r+0x90>)
 8007586:	6813      	ldr	r3, [r2, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d105      	bne.n	8007598 <_free_r+0x2c>
 800758c:	6063      	str	r3, [r4, #4]
 800758e:	6014      	str	r4, [r2, #0]
 8007590:	0028      	movs	r0, r5
 8007592:	f003 f88f 	bl	800a6b4 <__malloc_unlock>
 8007596:	bd70      	pop	{r4, r5, r6, pc}
 8007598:	42a3      	cmp	r3, r4
 800759a:	d908      	bls.n	80075ae <_free_r+0x42>
 800759c:	6821      	ldr	r1, [r4, #0]
 800759e:	1860      	adds	r0, r4, r1
 80075a0:	4283      	cmp	r3, r0
 80075a2:	d1f3      	bne.n	800758c <_free_r+0x20>
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	1841      	adds	r1, r0, r1
 80075aa:	6021      	str	r1, [r4, #0]
 80075ac:	e7ee      	b.n	800758c <_free_r+0x20>
 80075ae:	001a      	movs	r2, r3
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <_free_r+0x4e>
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	d9f9      	bls.n	80075ae <_free_r+0x42>
 80075ba:	6811      	ldr	r1, [r2, #0]
 80075bc:	1850      	adds	r0, r2, r1
 80075be:	42a0      	cmp	r0, r4
 80075c0:	d10b      	bne.n	80075da <_free_r+0x6e>
 80075c2:	6820      	ldr	r0, [r4, #0]
 80075c4:	1809      	adds	r1, r1, r0
 80075c6:	1850      	adds	r0, r2, r1
 80075c8:	6011      	str	r1, [r2, #0]
 80075ca:	4283      	cmp	r3, r0
 80075cc:	d1e0      	bne.n	8007590 <_free_r+0x24>
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	1841      	adds	r1, r0, r1
 80075d4:	6011      	str	r1, [r2, #0]
 80075d6:	6053      	str	r3, [r2, #4]
 80075d8:	e7da      	b.n	8007590 <_free_r+0x24>
 80075da:	42a0      	cmp	r0, r4
 80075dc:	d902      	bls.n	80075e4 <_free_r+0x78>
 80075de:	230c      	movs	r3, #12
 80075e0:	602b      	str	r3, [r5, #0]
 80075e2:	e7d5      	b.n	8007590 <_free_r+0x24>
 80075e4:	6821      	ldr	r1, [r4, #0]
 80075e6:	1860      	adds	r0, r4, r1
 80075e8:	4283      	cmp	r3, r0
 80075ea:	d103      	bne.n	80075f4 <_free_r+0x88>
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	1841      	adds	r1, r0, r1
 80075f2:	6021      	str	r1, [r4, #0]
 80075f4:	6063      	str	r3, [r4, #4]
 80075f6:	6054      	str	r4, [r2, #4]
 80075f8:	e7ca      	b.n	8007590 <_free_r+0x24>
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	20000490 	.word	0x20000490

08007600 <sbrk_aligned>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	4e0f      	ldr	r6, [pc, #60]	; (8007640 <sbrk_aligned+0x40>)
 8007604:	000d      	movs	r5, r1
 8007606:	6831      	ldr	r1, [r6, #0]
 8007608:	0004      	movs	r4, r0
 800760a:	2900      	cmp	r1, #0
 800760c:	d102      	bne.n	8007614 <sbrk_aligned+0x14>
 800760e:	f000 ff05 	bl	800841c <_sbrk_r>
 8007612:	6030      	str	r0, [r6, #0]
 8007614:	0029      	movs	r1, r5
 8007616:	0020      	movs	r0, r4
 8007618:	f000 ff00 	bl	800841c <_sbrk_r>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d00a      	beq.n	8007636 <sbrk_aligned+0x36>
 8007620:	2303      	movs	r3, #3
 8007622:	1cc5      	adds	r5, r0, #3
 8007624:	439d      	bics	r5, r3
 8007626:	42a8      	cmp	r0, r5
 8007628:	d007      	beq.n	800763a <sbrk_aligned+0x3a>
 800762a:	1a29      	subs	r1, r5, r0
 800762c:	0020      	movs	r0, r4
 800762e:	f000 fef5 	bl	800841c <_sbrk_r>
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	d101      	bne.n	800763a <sbrk_aligned+0x3a>
 8007636:	2501      	movs	r5, #1
 8007638:	426d      	negs	r5, r5
 800763a:	0028      	movs	r0, r5
 800763c:	bd70      	pop	{r4, r5, r6, pc}
 800763e:	46c0      	nop			; (mov r8, r8)
 8007640:	20000494 	.word	0x20000494

08007644 <_malloc_r>:
 8007644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007646:	2203      	movs	r2, #3
 8007648:	1ccb      	adds	r3, r1, #3
 800764a:	4393      	bics	r3, r2
 800764c:	3308      	adds	r3, #8
 800764e:	0006      	movs	r6, r0
 8007650:	001f      	movs	r7, r3
 8007652:	2b0c      	cmp	r3, #12
 8007654:	d232      	bcs.n	80076bc <_malloc_r+0x78>
 8007656:	270c      	movs	r7, #12
 8007658:	42b9      	cmp	r1, r7
 800765a:	d831      	bhi.n	80076c0 <_malloc_r+0x7c>
 800765c:	0030      	movs	r0, r6
 800765e:	f003 f821 	bl	800a6a4 <__malloc_lock>
 8007662:	4d32      	ldr	r5, [pc, #200]	; (800772c <_malloc_r+0xe8>)
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	001c      	movs	r4, r3
 8007668:	2c00      	cmp	r4, #0
 800766a:	d12e      	bne.n	80076ca <_malloc_r+0x86>
 800766c:	0039      	movs	r1, r7
 800766e:	0030      	movs	r0, r6
 8007670:	f7ff ffc6 	bl	8007600 <sbrk_aligned>
 8007674:	0004      	movs	r4, r0
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	d11e      	bne.n	80076b8 <_malloc_r+0x74>
 800767a:	682c      	ldr	r4, [r5, #0]
 800767c:	0025      	movs	r5, r4
 800767e:	2d00      	cmp	r5, #0
 8007680:	d14a      	bne.n	8007718 <_malloc_r+0xd4>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	0029      	movs	r1, r5
 8007686:	18e3      	adds	r3, r4, r3
 8007688:	0030      	movs	r0, r6
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	f000 fec6 	bl	800841c <_sbrk_r>
 8007690:	9b01      	ldr	r3, [sp, #4]
 8007692:	4283      	cmp	r3, r0
 8007694:	d143      	bne.n	800771e <_malloc_r+0xda>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	3703      	adds	r7, #3
 800769a:	1aff      	subs	r7, r7, r3
 800769c:	2303      	movs	r3, #3
 800769e:	439f      	bics	r7, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	2f0c      	cmp	r7, #12
 80076a4:	d200      	bcs.n	80076a8 <_malloc_r+0x64>
 80076a6:	270c      	movs	r7, #12
 80076a8:	0039      	movs	r1, r7
 80076aa:	0030      	movs	r0, r6
 80076ac:	f7ff ffa8 	bl	8007600 <sbrk_aligned>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d034      	beq.n	800771e <_malloc_r+0xda>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	19df      	adds	r7, r3, r7
 80076b8:	6027      	str	r7, [r4, #0]
 80076ba:	e013      	b.n	80076e4 <_malloc_r+0xa0>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	dacb      	bge.n	8007658 <_malloc_r+0x14>
 80076c0:	230c      	movs	r3, #12
 80076c2:	2500      	movs	r5, #0
 80076c4:	6033      	str	r3, [r6, #0]
 80076c6:	0028      	movs	r0, r5
 80076c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	1bd1      	subs	r1, r2, r7
 80076ce:	d420      	bmi.n	8007712 <_malloc_r+0xce>
 80076d0:	290b      	cmp	r1, #11
 80076d2:	d917      	bls.n	8007704 <_malloc_r+0xc0>
 80076d4:	19e2      	adds	r2, r4, r7
 80076d6:	6027      	str	r7, [r4, #0]
 80076d8:	42a3      	cmp	r3, r4
 80076da:	d111      	bne.n	8007700 <_malloc_r+0xbc>
 80076dc:	602a      	str	r2, [r5, #0]
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	6011      	str	r1, [r2, #0]
 80076e2:	6053      	str	r3, [r2, #4]
 80076e4:	0030      	movs	r0, r6
 80076e6:	0025      	movs	r5, r4
 80076e8:	f002 ffe4 	bl	800a6b4 <__malloc_unlock>
 80076ec:	2207      	movs	r2, #7
 80076ee:	350b      	adds	r5, #11
 80076f0:	1d23      	adds	r3, r4, #4
 80076f2:	4395      	bics	r5, r2
 80076f4:	1aea      	subs	r2, r5, r3
 80076f6:	429d      	cmp	r5, r3
 80076f8:	d0e5      	beq.n	80076c6 <_malloc_r+0x82>
 80076fa:	1b5b      	subs	r3, r3, r5
 80076fc:	50a3      	str	r3, [r4, r2]
 80076fe:	e7e2      	b.n	80076c6 <_malloc_r+0x82>
 8007700:	605a      	str	r2, [r3, #4]
 8007702:	e7ec      	b.n	80076de <_malloc_r+0x9a>
 8007704:	6862      	ldr	r2, [r4, #4]
 8007706:	42a3      	cmp	r3, r4
 8007708:	d101      	bne.n	800770e <_malloc_r+0xca>
 800770a:	602a      	str	r2, [r5, #0]
 800770c:	e7ea      	b.n	80076e4 <_malloc_r+0xa0>
 800770e:	605a      	str	r2, [r3, #4]
 8007710:	e7e8      	b.n	80076e4 <_malloc_r+0xa0>
 8007712:	0023      	movs	r3, r4
 8007714:	6864      	ldr	r4, [r4, #4]
 8007716:	e7a7      	b.n	8007668 <_malloc_r+0x24>
 8007718:	002c      	movs	r4, r5
 800771a:	686d      	ldr	r5, [r5, #4]
 800771c:	e7af      	b.n	800767e <_malloc_r+0x3a>
 800771e:	230c      	movs	r3, #12
 8007720:	0030      	movs	r0, r6
 8007722:	6033      	str	r3, [r6, #0]
 8007724:	f002 ffc6 	bl	800a6b4 <__malloc_unlock>
 8007728:	e7cd      	b.n	80076c6 <_malloc_r+0x82>
 800772a:	46c0      	nop			; (mov r8, r8)
 800772c:	20000490 	.word	0x20000490

08007730 <__cvt>:
 8007730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007732:	001e      	movs	r6, r3
 8007734:	2300      	movs	r3, #0
 8007736:	0014      	movs	r4, r2
 8007738:	b08b      	sub	sp, #44	; 0x2c
 800773a:	429e      	cmp	r6, r3
 800773c:	da04      	bge.n	8007748 <__cvt+0x18>
 800773e:	2180      	movs	r1, #128	; 0x80
 8007740:	0609      	lsls	r1, r1, #24
 8007742:	1873      	adds	r3, r6, r1
 8007744:	001e      	movs	r6, r3
 8007746:	232d      	movs	r3, #45	; 0x2d
 8007748:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800774a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800774c:	7013      	strb	r3, [r2, #0]
 800774e:	2320      	movs	r3, #32
 8007750:	2203      	movs	r2, #3
 8007752:	439f      	bics	r7, r3
 8007754:	2f46      	cmp	r7, #70	; 0x46
 8007756:	d007      	beq.n	8007768 <__cvt+0x38>
 8007758:	003b      	movs	r3, r7
 800775a:	3b45      	subs	r3, #69	; 0x45
 800775c:	4259      	negs	r1, r3
 800775e:	414b      	adcs	r3, r1
 8007760:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007762:	3a01      	subs	r2, #1
 8007764:	18cb      	adds	r3, r1, r3
 8007766:	9310      	str	r3, [sp, #64]	; 0x40
 8007768:	ab09      	add	r3, sp, #36	; 0x24
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	ab08      	add	r3, sp, #32
 800776e:	9303      	str	r3, [sp, #12]
 8007770:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007772:	9200      	str	r2, [sp, #0]
 8007774:	9302      	str	r3, [sp, #8]
 8007776:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007778:	0022      	movs	r2, r4
 800777a:	9301      	str	r3, [sp, #4]
 800777c:	0033      	movs	r3, r6
 800777e:	f001 fde1 	bl	8009344 <_dtoa_r>
 8007782:	0005      	movs	r5, r0
 8007784:	2f47      	cmp	r7, #71	; 0x47
 8007786:	d102      	bne.n	800778e <__cvt+0x5e>
 8007788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800778a:	07db      	lsls	r3, r3, #31
 800778c:	d528      	bpl.n	80077e0 <__cvt+0xb0>
 800778e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007790:	18eb      	adds	r3, r5, r3
 8007792:	9307      	str	r3, [sp, #28]
 8007794:	2f46      	cmp	r7, #70	; 0x46
 8007796:	d114      	bne.n	80077c2 <__cvt+0x92>
 8007798:	782b      	ldrb	r3, [r5, #0]
 800779a:	2b30      	cmp	r3, #48	; 0x30
 800779c:	d10c      	bne.n	80077b8 <__cvt+0x88>
 800779e:	2200      	movs	r2, #0
 80077a0:	2300      	movs	r3, #0
 80077a2:	0020      	movs	r0, r4
 80077a4:	0031      	movs	r1, r6
 80077a6:	f7f8 fe4f 	bl	8000448 <__aeabi_dcmpeq>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d104      	bne.n	80077b8 <__cvt+0x88>
 80077ae:	2301      	movs	r3, #1
 80077b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077ba:	9a07      	ldr	r2, [sp, #28]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	18d3      	adds	r3, r2, r3
 80077c0:	9307      	str	r3, [sp, #28]
 80077c2:	2200      	movs	r2, #0
 80077c4:	2300      	movs	r3, #0
 80077c6:	0020      	movs	r0, r4
 80077c8:	0031      	movs	r1, r6
 80077ca:	f7f8 fe3d 	bl	8000448 <__aeabi_dcmpeq>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d001      	beq.n	80077d6 <__cvt+0xa6>
 80077d2:	9b07      	ldr	r3, [sp, #28]
 80077d4:	9309      	str	r3, [sp, #36]	; 0x24
 80077d6:	2230      	movs	r2, #48	; 0x30
 80077d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077da:	9907      	ldr	r1, [sp, #28]
 80077dc:	428b      	cmp	r3, r1
 80077de:	d306      	bcc.n	80077ee <__cvt+0xbe>
 80077e0:	0028      	movs	r0, r5
 80077e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077e6:	1b5b      	subs	r3, r3, r5
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	b00b      	add	sp, #44	; 0x2c
 80077ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ee:	1c59      	adds	r1, r3, #1
 80077f0:	9109      	str	r1, [sp, #36]	; 0x24
 80077f2:	701a      	strb	r2, [r3, #0]
 80077f4:	e7f0      	b.n	80077d8 <__cvt+0xa8>

080077f6 <__exponent>:
 80077f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077f8:	1c83      	adds	r3, r0, #2
 80077fa:	b087      	sub	sp, #28
 80077fc:	9303      	str	r3, [sp, #12]
 80077fe:	0005      	movs	r5, r0
 8007800:	000c      	movs	r4, r1
 8007802:	232b      	movs	r3, #43	; 0x2b
 8007804:	7002      	strb	r2, [r0, #0]
 8007806:	2900      	cmp	r1, #0
 8007808:	da01      	bge.n	800780e <__exponent+0x18>
 800780a:	424c      	negs	r4, r1
 800780c:	3302      	adds	r3, #2
 800780e:	706b      	strb	r3, [r5, #1]
 8007810:	2c09      	cmp	r4, #9
 8007812:	dd31      	ble.n	8007878 <__exponent+0x82>
 8007814:	270a      	movs	r7, #10
 8007816:	ab04      	add	r3, sp, #16
 8007818:	1dde      	adds	r6, r3, #7
 800781a:	0020      	movs	r0, r4
 800781c:	0039      	movs	r1, r7
 800781e:	9601      	str	r6, [sp, #4]
 8007820:	f7f8 fdfc 	bl	800041c <__aeabi_idivmod>
 8007824:	3e01      	subs	r6, #1
 8007826:	3130      	adds	r1, #48	; 0x30
 8007828:	0020      	movs	r0, r4
 800782a:	7031      	strb	r1, [r6, #0]
 800782c:	0039      	movs	r1, r7
 800782e:	9402      	str	r4, [sp, #8]
 8007830:	f7f8 fd0e 	bl	8000250 <__divsi3>
 8007834:	9b02      	ldr	r3, [sp, #8]
 8007836:	0004      	movs	r4, r0
 8007838:	2b63      	cmp	r3, #99	; 0x63
 800783a:	dcee      	bgt.n	800781a <__exponent+0x24>
 800783c:	9b01      	ldr	r3, [sp, #4]
 800783e:	3430      	adds	r4, #48	; 0x30
 8007840:	1e9a      	subs	r2, r3, #2
 8007842:	0013      	movs	r3, r2
 8007844:	9903      	ldr	r1, [sp, #12]
 8007846:	7014      	strb	r4, [r2, #0]
 8007848:	a804      	add	r0, sp, #16
 800784a:	3007      	adds	r0, #7
 800784c:	4298      	cmp	r0, r3
 800784e:	d80e      	bhi.n	800786e <__exponent+0x78>
 8007850:	ab04      	add	r3, sp, #16
 8007852:	3307      	adds	r3, #7
 8007854:	2000      	movs	r0, #0
 8007856:	429a      	cmp	r2, r3
 8007858:	d804      	bhi.n	8007864 <__exponent+0x6e>
 800785a:	ab04      	add	r3, sp, #16
 800785c:	3009      	adds	r0, #9
 800785e:	18c0      	adds	r0, r0, r3
 8007860:	9b01      	ldr	r3, [sp, #4]
 8007862:	1ac0      	subs	r0, r0, r3
 8007864:	9b03      	ldr	r3, [sp, #12]
 8007866:	1818      	adds	r0, r3, r0
 8007868:	1b40      	subs	r0, r0, r5
 800786a:	b007      	add	sp, #28
 800786c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800786e:	7818      	ldrb	r0, [r3, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	7008      	strb	r0, [r1, #0]
 8007874:	3101      	adds	r1, #1
 8007876:	e7e7      	b.n	8007848 <__exponent+0x52>
 8007878:	2330      	movs	r3, #48	; 0x30
 800787a:	18e4      	adds	r4, r4, r3
 800787c:	70ab      	strb	r3, [r5, #2]
 800787e:	1d28      	adds	r0, r5, #4
 8007880:	70ec      	strb	r4, [r5, #3]
 8007882:	e7f1      	b.n	8007868 <__exponent+0x72>

08007884 <_printf_float>:
 8007884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007886:	b095      	sub	sp, #84	; 0x54
 8007888:	000c      	movs	r4, r1
 800788a:	9209      	str	r2, [sp, #36]	; 0x24
 800788c:	001e      	movs	r6, r3
 800788e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007890:	0007      	movs	r7, r0
 8007892:	f002 fee5 	bl	800a660 <_localeconv_r>
 8007896:	6803      	ldr	r3, [r0, #0]
 8007898:	0018      	movs	r0, r3
 800789a:	930c      	str	r3, [sp, #48]	; 0x30
 800789c:	f7f8 fc32 	bl	8000104 <strlen>
 80078a0:	2300      	movs	r3, #0
 80078a2:	9312      	str	r3, [sp, #72]	; 0x48
 80078a4:	7e23      	ldrb	r3, [r4, #24]
 80078a6:	2207      	movs	r2, #7
 80078a8:	930a      	str	r3, [sp, #40]	; 0x28
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	900e      	str	r0, [sp, #56]	; 0x38
 80078ae:	930d      	str	r3, [sp, #52]	; 0x34
 80078b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80078b2:	682b      	ldr	r3, [r5, #0]
 80078b4:	05c9      	lsls	r1, r1, #23
 80078b6:	d547      	bpl.n	8007948 <_printf_float+0xc4>
 80078b8:	189b      	adds	r3, r3, r2
 80078ba:	4393      	bics	r3, r2
 80078bc:	001a      	movs	r2, r3
 80078be:	3208      	adds	r2, #8
 80078c0:	602a      	str	r2, [r5, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	64a2      	str	r2, [r4, #72]	; 0x48
 80078c8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80078ca:	2201      	movs	r2, #1
 80078cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80078ce:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80078d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078d2:	006b      	lsls	r3, r5, #1
 80078d4:	085b      	lsrs	r3, r3, #1
 80078d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80078da:	4ba7      	ldr	r3, [pc, #668]	; (8007b78 <_printf_float+0x2f4>)
 80078dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078de:	4252      	negs	r2, r2
 80078e0:	f7fa fc78 	bl	80021d4 <__aeabi_dcmpun>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d131      	bne.n	800794c <_printf_float+0xc8>
 80078e8:	2201      	movs	r2, #1
 80078ea:	4ba3      	ldr	r3, [pc, #652]	; (8007b78 <_printf_float+0x2f4>)
 80078ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80078ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078f0:	4252      	negs	r2, r2
 80078f2:	f7f8 fdb9 	bl	8000468 <__aeabi_dcmple>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d128      	bne.n	800794c <_printf_float+0xc8>
 80078fa:	2200      	movs	r2, #0
 80078fc:	2300      	movs	r3, #0
 80078fe:	0029      	movs	r1, r5
 8007900:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007902:	f7f8 fda7 	bl	8000454 <__aeabi_dcmplt>
 8007906:	2800      	cmp	r0, #0
 8007908:	d003      	beq.n	8007912 <_printf_float+0x8e>
 800790a:	0023      	movs	r3, r4
 800790c:	222d      	movs	r2, #45	; 0x2d
 800790e:	3343      	adds	r3, #67	; 0x43
 8007910:	701a      	strb	r2, [r3, #0]
 8007912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007914:	4d99      	ldr	r5, [pc, #612]	; (8007b7c <_printf_float+0x2f8>)
 8007916:	2b47      	cmp	r3, #71	; 0x47
 8007918:	d900      	bls.n	800791c <_printf_float+0x98>
 800791a:	4d99      	ldr	r5, [pc, #612]	; (8007b80 <_printf_float+0x2fc>)
 800791c:	2303      	movs	r3, #3
 800791e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	3301      	adds	r3, #1
 8007924:	439a      	bics	r2, r3
 8007926:	2300      	movs	r3, #0
 8007928:	6022      	str	r2, [r4, #0]
 800792a:	930b      	str	r3, [sp, #44]	; 0x2c
 800792c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792e:	0021      	movs	r1, r4
 8007930:	0038      	movs	r0, r7
 8007932:	9600      	str	r6, [sp, #0]
 8007934:	aa13      	add	r2, sp, #76	; 0x4c
 8007936:	f000 f9e7 	bl	8007d08 <_printf_common>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	d000      	beq.n	8007940 <_printf_float+0xbc>
 800793e:	e0a2      	b.n	8007a86 <_printf_float+0x202>
 8007940:	2001      	movs	r0, #1
 8007942:	4240      	negs	r0, r0
 8007944:	b015      	add	sp, #84	; 0x54
 8007946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007948:	3307      	adds	r3, #7
 800794a:	e7b6      	b.n	80078ba <_printf_float+0x36>
 800794c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800794e:	002b      	movs	r3, r5
 8007950:	0010      	movs	r0, r2
 8007952:	0029      	movs	r1, r5
 8007954:	f7fa fc3e 	bl	80021d4 <__aeabi_dcmpun>
 8007958:	2800      	cmp	r0, #0
 800795a:	d00b      	beq.n	8007974 <_printf_float+0xf0>
 800795c:	2d00      	cmp	r5, #0
 800795e:	da03      	bge.n	8007968 <_printf_float+0xe4>
 8007960:	0023      	movs	r3, r4
 8007962:	222d      	movs	r2, #45	; 0x2d
 8007964:	3343      	adds	r3, #67	; 0x43
 8007966:	701a      	strb	r2, [r3, #0]
 8007968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800796a:	4d86      	ldr	r5, [pc, #536]	; (8007b84 <_printf_float+0x300>)
 800796c:	2b47      	cmp	r3, #71	; 0x47
 800796e:	d9d5      	bls.n	800791c <_printf_float+0x98>
 8007970:	4d85      	ldr	r5, [pc, #532]	; (8007b88 <_printf_float+0x304>)
 8007972:	e7d3      	b.n	800791c <_printf_float+0x98>
 8007974:	2220      	movs	r2, #32
 8007976:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007978:	6863      	ldr	r3, [r4, #4]
 800797a:	4391      	bics	r1, r2
 800797c:	910f      	str	r1, [sp, #60]	; 0x3c
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	d149      	bne.n	8007a16 <_printf_float+0x192>
 8007982:	3307      	adds	r3, #7
 8007984:	6063      	str	r3, [r4, #4]
 8007986:	2380      	movs	r3, #128	; 0x80
 8007988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	4313      	orrs	r3, r2
 800798e:	2200      	movs	r2, #0
 8007990:	9206      	str	r2, [sp, #24]
 8007992:	aa12      	add	r2, sp, #72	; 0x48
 8007994:	9205      	str	r2, [sp, #20]
 8007996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007998:	a908      	add	r1, sp, #32
 800799a:	9204      	str	r2, [sp, #16]
 800799c:	aa11      	add	r2, sp, #68	; 0x44
 800799e:	9203      	str	r2, [sp, #12]
 80079a0:	2223      	movs	r2, #35	; 0x23
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	6863      	ldr	r3, [r4, #4]
 80079a8:	1852      	adds	r2, r2, r1
 80079aa:	9202      	str	r2, [sp, #8]
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	0038      	movs	r0, r7
 80079b0:	002b      	movs	r3, r5
 80079b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079b4:	f7ff febc 	bl	8007730 <__cvt>
 80079b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079ba:	0005      	movs	r5, r0
 80079bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80079be:	2b47      	cmp	r3, #71	; 0x47
 80079c0:	d108      	bne.n	80079d4 <_printf_float+0x150>
 80079c2:	1ccb      	adds	r3, r1, #3
 80079c4:	db02      	blt.n	80079cc <_printf_float+0x148>
 80079c6:	6863      	ldr	r3, [r4, #4]
 80079c8:	4299      	cmp	r1, r3
 80079ca:	dd48      	ble.n	8007a5e <_printf_float+0x1da>
 80079cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ce:	3b02      	subs	r3, #2
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	930a      	str	r3, [sp, #40]	; 0x28
 80079d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d6:	2b65      	cmp	r3, #101	; 0x65
 80079d8:	d824      	bhi.n	8007a24 <_printf_float+0x1a0>
 80079da:	0020      	movs	r0, r4
 80079dc:	001a      	movs	r2, r3
 80079de:	3901      	subs	r1, #1
 80079e0:	3050      	adds	r0, #80	; 0x50
 80079e2:	9111      	str	r1, [sp, #68]	; 0x44
 80079e4:	f7ff ff07 	bl	80077f6 <__exponent>
 80079e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80079ec:	1813      	adds	r3, r2, r0
 80079ee:	6123      	str	r3, [r4, #16]
 80079f0:	2a01      	cmp	r2, #1
 80079f2:	dc02      	bgt.n	80079fa <_printf_float+0x176>
 80079f4:	6822      	ldr	r2, [r4, #0]
 80079f6:	07d2      	lsls	r2, r2, #31
 80079f8:	d501      	bpl.n	80079fe <_printf_float+0x17a>
 80079fa:	3301      	adds	r3, #1
 80079fc:	6123      	str	r3, [r4, #16]
 80079fe:	2323      	movs	r3, #35	; 0x23
 8007a00:	aa08      	add	r2, sp, #32
 8007a02:	189b      	adds	r3, r3, r2
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d100      	bne.n	8007a0c <_printf_float+0x188>
 8007a0a:	e78f      	b.n	800792c <_printf_float+0xa8>
 8007a0c:	0023      	movs	r3, r4
 8007a0e:	222d      	movs	r2, #45	; 0x2d
 8007a10:	3343      	adds	r3, #67	; 0x43
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	e78a      	b.n	800792c <_printf_float+0xa8>
 8007a16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a18:	2a47      	cmp	r2, #71	; 0x47
 8007a1a:	d1b4      	bne.n	8007986 <_printf_float+0x102>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1b2      	bne.n	8007986 <_printf_float+0x102>
 8007a20:	3301      	adds	r3, #1
 8007a22:	e7af      	b.n	8007984 <_printf_float+0x100>
 8007a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a26:	2b66      	cmp	r3, #102	; 0x66
 8007a28:	d11b      	bne.n	8007a62 <_printf_float+0x1de>
 8007a2a:	6863      	ldr	r3, [r4, #4]
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	dd0d      	ble.n	8007a4c <_printf_float+0x1c8>
 8007a30:	6121      	str	r1, [r4, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d102      	bne.n	8007a3c <_printf_float+0x1b8>
 8007a36:	6822      	ldr	r2, [r4, #0]
 8007a38:	07d2      	lsls	r2, r2, #31
 8007a3a:	d502      	bpl.n	8007a42 <_printf_float+0x1be>
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	1859      	adds	r1, r3, r1
 8007a40:	6121      	str	r1, [r4, #16]
 8007a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a44:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a46:	2300      	movs	r3, #0
 8007a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a4a:	e7d8      	b.n	80079fe <_printf_float+0x17a>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d103      	bne.n	8007a58 <_printf_float+0x1d4>
 8007a50:	2201      	movs	r2, #1
 8007a52:	6821      	ldr	r1, [r4, #0]
 8007a54:	4211      	tst	r1, r2
 8007a56:	d000      	beq.n	8007a5a <_printf_float+0x1d6>
 8007a58:	1c9a      	adds	r2, r3, #2
 8007a5a:	6122      	str	r2, [r4, #16]
 8007a5c:	e7f1      	b.n	8007a42 <_printf_float+0x1be>
 8007a5e:	2367      	movs	r3, #103	; 0x67
 8007a60:	930a      	str	r3, [sp, #40]	; 0x28
 8007a62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a66:	4293      	cmp	r3, r2
 8007a68:	db06      	blt.n	8007a78 <_printf_float+0x1f4>
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	6123      	str	r3, [r4, #16]
 8007a6e:	07d2      	lsls	r2, r2, #31
 8007a70:	d5e7      	bpl.n	8007a42 <_printf_float+0x1be>
 8007a72:	3301      	adds	r3, #1
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	e7e4      	b.n	8007a42 <_printf_float+0x1be>
 8007a78:	2101      	movs	r1, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	dc01      	bgt.n	8007a82 <_printf_float+0x1fe>
 8007a7e:	1849      	adds	r1, r1, r1
 8007a80:	1ac9      	subs	r1, r1, r3
 8007a82:	1852      	adds	r2, r2, r1
 8007a84:	e7e9      	b.n	8007a5a <_printf_float+0x1d6>
 8007a86:	6822      	ldr	r2, [r4, #0]
 8007a88:	0553      	lsls	r3, r2, #21
 8007a8a:	d407      	bmi.n	8007a9c <_printf_float+0x218>
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	002a      	movs	r2, r5
 8007a90:	0038      	movs	r0, r7
 8007a92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a94:	47b0      	blx	r6
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	d128      	bne.n	8007aec <_printf_float+0x268>
 8007a9a:	e751      	b.n	8007940 <_printf_float+0xbc>
 8007a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9e:	2b65      	cmp	r3, #101	; 0x65
 8007aa0:	d800      	bhi.n	8007aa4 <_printf_float+0x220>
 8007aa2:	e0e1      	b.n	8007c68 <_printf_float+0x3e4>
 8007aa4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007aa6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f7f8 fccc 	bl	8000448 <__aeabi_dcmpeq>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d031      	beq.n	8007b18 <_printf_float+0x294>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	0038      	movs	r0, r7
 8007ab8:	4a34      	ldr	r2, [pc, #208]	; (8007b8c <_printf_float+0x308>)
 8007aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007abc:	47b0      	blx	r6
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	d100      	bne.n	8007ac4 <_printf_float+0x240>
 8007ac2:	e73d      	b.n	8007940 <_printf_float+0xbc>
 8007ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ac6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	db02      	blt.n	8007ad2 <_printf_float+0x24e>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	07db      	lsls	r3, r3, #31
 8007ad0:	d50c      	bpl.n	8007aec <_printf_float+0x268>
 8007ad2:	0038      	movs	r0, r7
 8007ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ada:	47b0      	blx	r6
 8007adc:	2500      	movs	r5, #0
 8007ade:	1c43      	adds	r3, r0, #1
 8007ae0:	d100      	bne.n	8007ae4 <_printf_float+0x260>
 8007ae2:	e72d      	b.n	8007940 <_printf_float+0xbc>
 8007ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	dc0a      	bgt.n	8007b02 <_printf_float+0x27e>
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	079b      	lsls	r3, r3, #30
 8007af0:	d500      	bpl.n	8007af4 <_printf_float+0x270>
 8007af2:	e106      	b.n	8007d02 <_printf_float+0x47e>
 8007af4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007af6:	68e0      	ldr	r0, [r4, #12]
 8007af8:	4298      	cmp	r0, r3
 8007afa:	db00      	blt.n	8007afe <_printf_float+0x27a>
 8007afc:	e722      	b.n	8007944 <_printf_float+0xc0>
 8007afe:	0018      	movs	r0, r3
 8007b00:	e720      	b.n	8007944 <_printf_float+0xc0>
 8007b02:	0022      	movs	r2, r4
 8007b04:	2301      	movs	r3, #1
 8007b06:	0038      	movs	r0, r7
 8007b08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b0a:	321a      	adds	r2, #26
 8007b0c:	47b0      	blx	r6
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	d100      	bne.n	8007b14 <_printf_float+0x290>
 8007b12:	e715      	b.n	8007940 <_printf_float+0xbc>
 8007b14:	3501      	adds	r5, #1
 8007b16:	e7e5      	b.n	8007ae4 <_printf_float+0x260>
 8007b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dc38      	bgt.n	8007b90 <_printf_float+0x30c>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	0038      	movs	r0, r7
 8007b22:	4a1a      	ldr	r2, [pc, #104]	; (8007b8c <_printf_float+0x308>)
 8007b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b26:	47b0      	blx	r6
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d100      	bne.n	8007b2e <_printf_float+0x2aa>
 8007b2c:	e708      	b.n	8007940 <_printf_float+0xbc>
 8007b2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b32:	4313      	orrs	r3, r2
 8007b34:	d102      	bne.n	8007b3c <_printf_float+0x2b8>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	07db      	lsls	r3, r3, #31
 8007b3a:	d5d7      	bpl.n	8007aec <_printf_float+0x268>
 8007b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b3e:	0038      	movs	r0, r7
 8007b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b44:	47b0      	blx	r6
 8007b46:	1c43      	adds	r3, r0, #1
 8007b48:	d100      	bne.n	8007b4c <_printf_float+0x2c8>
 8007b4a:	e6f9      	b.n	8007940 <_printf_float+0xbc>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b54:	425b      	negs	r3, r3
 8007b56:	4293      	cmp	r3, r2
 8007b58:	dc01      	bgt.n	8007b5e <_printf_float+0x2da>
 8007b5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b5c:	e797      	b.n	8007a8e <_printf_float+0x20a>
 8007b5e:	0022      	movs	r2, r4
 8007b60:	2301      	movs	r3, #1
 8007b62:	0038      	movs	r0, r7
 8007b64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b66:	321a      	adds	r2, #26
 8007b68:	47b0      	blx	r6
 8007b6a:	1c43      	adds	r3, r0, #1
 8007b6c:	d100      	bne.n	8007b70 <_printf_float+0x2ec>
 8007b6e:	e6e7      	b.n	8007940 <_printf_float+0xbc>
 8007b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b72:	3301      	adds	r3, #1
 8007b74:	e7eb      	b.n	8007b4e <_printf_float+0x2ca>
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	7fefffff 	.word	0x7fefffff
 8007b7c:	0800c1dc 	.word	0x0800c1dc
 8007b80:	0800c1e0 	.word	0x0800c1e0
 8007b84:	0800c1e4 	.word	0x0800c1e4
 8007b88:	0800c1e8 	.word	0x0800c1e8
 8007b8c:	0800c1ec 	.word	0x0800c1ec
 8007b90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b94:	920a      	str	r2, [sp, #40]	; 0x28
 8007b96:	429a      	cmp	r2, r3
 8007b98:	dd00      	ble.n	8007b9c <_printf_float+0x318>
 8007b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	dc3c      	bgt.n	8007c1c <_printf_float+0x398>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	17db      	asrs	r3, r3, #31
 8007bac:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	dc34      	bgt.n	8007c2c <_printf_float+0x3a8>
 8007bc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	db3d      	blt.n	8007c46 <_printf_float+0x3c2>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	07db      	lsls	r3, r3, #31
 8007bce:	d43a      	bmi.n	8007c46 <_printf_float+0x3c2>
 8007bd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	1a52      	subs	r2, r2, r1
 8007bda:	920a      	str	r2, [sp, #40]	; 0x28
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	dd00      	ble.n	8007be2 <_printf_float+0x35e>
 8007be0:	930a      	str	r3, [sp, #40]	; 0x28
 8007be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	dc36      	bgt.n	8007c56 <_printf_float+0x3d2>
 8007be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bea:	2500      	movs	r5, #0
 8007bec:	43db      	mvns	r3, r3
 8007bee:	17db      	asrs	r3, r3, #31
 8007bf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007bf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bf8:	1a9b      	subs	r3, r3, r2
 8007bfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bfc:	400a      	ands	r2, r1
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	42ab      	cmp	r3, r5
 8007c02:	dc00      	bgt.n	8007c06 <_printf_float+0x382>
 8007c04:	e772      	b.n	8007aec <_printf_float+0x268>
 8007c06:	0022      	movs	r2, r4
 8007c08:	2301      	movs	r3, #1
 8007c0a:	0038      	movs	r0, r7
 8007c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c0e:	321a      	adds	r2, #26
 8007c10:	47b0      	blx	r6
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d100      	bne.n	8007c18 <_printf_float+0x394>
 8007c16:	e693      	b.n	8007940 <_printf_float+0xbc>
 8007c18:	3501      	adds	r5, #1
 8007c1a:	e7ea      	b.n	8007bf2 <_printf_float+0x36e>
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1e:	002a      	movs	r2, r5
 8007c20:	0038      	movs	r0, r7
 8007c22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c24:	47b0      	blx	r6
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	d1bb      	bne.n	8007ba2 <_printf_float+0x31e>
 8007c2a:	e689      	b.n	8007940 <_printf_float+0xbc>
 8007c2c:	0022      	movs	r2, r4
 8007c2e:	2301      	movs	r3, #1
 8007c30:	0038      	movs	r0, r7
 8007c32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c34:	321a      	adds	r2, #26
 8007c36:	47b0      	blx	r6
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d100      	bne.n	8007c3e <_printf_float+0x3ba>
 8007c3c:	e680      	b.n	8007940 <_printf_float+0xbc>
 8007c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c40:	3301      	adds	r3, #1
 8007c42:	930d      	str	r3, [sp, #52]	; 0x34
 8007c44:	e7b3      	b.n	8007bae <_printf_float+0x32a>
 8007c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c48:	0038      	movs	r0, r7
 8007c4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c4e:	47b0      	blx	r6
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d1bd      	bne.n	8007bd0 <_printf_float+0x34c>
 8007c54:	e674      	b.n	8007940 <_printf_float+0xbc>
 8007c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c58:	0038      	movs	r0, r7
 8007c5a:	18ea      	adds	r2, r5, r3
 8007c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c60:	47b0      	blx	r6
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	d1c0      	bne.n	8007be8 <_printf_float+0x364>
 8007c66:	e66b      	b.n	8007940 <_printf_float+0xbc>
 8007c68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	dc02      	bgt.n	8007c74 <_printf_float+0x3f0>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	421a      	tst	r2, r3
 8007c72:	d034      	beq.n	8007cde <_printf_float+0x45a>
 8007c74:	2301      	movs	r3, #1
 8007c76:	002a      	movs	r2, r5
 8007c78:	0038      	movs	r0, r7
 8007c7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c7c:	47b0      	blx	r6
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	d100      	bne.n	8007c84 <_printf_float+0x400>
 8007c82:	e65d      	b.n	8007940 <_printf_float+0xbc>
 8007c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c86:	0038      	movs	r0, r7
 8007c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c8c:	47b0      	blx	r6
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	d100      	bne.n	8007c94 <_printf_float+0x410>
 8007c92:	e655      	b.n	8007940 <_printf_float+0xbc>
 8007c94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007c96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f7f8 fbd4 	bl	8000448 <__aeabi_dcmpeq>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d11a      	bne.n	8007cda <_printf_float+0x456>
 8007ca4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ca6:	1c6a      	adds	r2, r5, #1
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	0038      	movs	r0, r7
 8007cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cae:	47b0      	blx	r6
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d10e      	bne.n	8007cd2 <_printf_float+0x44e>
 8007cb4:	e644      	b.n	8007940 <_printf_float+0xbc>
 8007cb6:	0022      	movs	r2, r4
 8007cb8:	2301      	movs	r3, #1
 8007cba:	0038      	movs	r0, r7
 8007cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cbe:	321a      	adds	r2, #26
 8007cc0:	47b0      	blx	r6
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	d100      	bne.n	8007cc8 <_printf_float+0x444>
 8007cc6:	e63b      	b.n	8007940 <_printf_float+0xbc>
 8007cc8:	3501      	adds	r5, #1
 8007cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	42ab      	cmp	r3, r5
 8007cd0:	dcf1      	bgt.n	8007cb6 <_printf_float+0x432>
 8007cd2:	0022      	movs	r2, r4
 8007cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cd6:	3250      	adds	r2, #80	; 0x50
 8007cd8:	e6da      	b.n	8007a90 <_printf_float+0x20c>
 8007cda:	2500      	movs	r5, #0
 8007cdc:	e7f5      	b.n	8007cca <_printf_float+0x446>
 8007cde:	002a      	movs	r2, r5
 8007ce0:	e7e3      	b.n	8007caa <_printf_float+0x426>
 8007ce2:	0022      	movs	r2, r4
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	0038      	movs	r0, r7
 8007ce8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cea:	3219      	adds	r2, #25
 8007cec:	47b0      	blx	r6
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	d100      	bne.n	8007cf4 <_printf_float+0x470>
 8007cf2:	e625      	b.n	8007940 <_printf_float+0xbc>
 8007cf4:	3501      	adds	r5, #1
 8007cf6:	68e3      	ldr	r3, [r4, #12]
 8007cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	42ab      	cmp	r3, r5
 8007cfe:	dcf0      	bgt.n	8007ce2 <_printf_float+0x45e>
 8007d00:	e6f8      	b.n	8007af4 <_printf_float+0x270>
 8007d02:	2500      	movs	r5, #0
 8007d04:	e7f7      	b.n	8007cf6 <_printf_float+0x472>
 8007d06:	46c0      	nop			; (mov r8, r8)

08007d08 <_printf_common>:
 8007d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d0a:	0015      	movs	r5, r2
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	688a      	ldr	r2, [r1, #8]
 8007d10:	690b      	ldr	r3, [r1, #16]
 8007d12:	000c      	movs	r4, r1
 8007d14:	9000      	str	r0, [sp, #0]
 8007d16:	4293      	cmp	r3, r2
 8007d18:	da00      	bge.n	8007d1c <_printf_common+0x14>
 8007d1a:	0013      	movs	r3, r2
 8007d1c:	0022      	movs	r2, r4
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	3243      	adds	r2, #67	; 0x43
 8007d22:	7812      	ldrb	r2, [r2, #0]
 8007d24:	2a00      	cmp	r2, #0
 8007d26:	d001      	beq.n	8007d2c <_printf_common+0x24>
 8007d28:	3301      	adds	r3, #1
 8007d2a:	602b      	str	r3, [r5, #0]
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	069b      	lsls	r3, r3, #26
 8007d30:	d502      	bpl.n	8007d38 <_printf_common+0x30>
 8007d32:	682b      	ldr	r3, [r5, #0]
 8007d34:	3302      	adds	r3, #2
 8007d36:	602b      	str	r3, [r5, #0]
 8007d38:	6822      	ldr	r2, [r4, #0]
 8007d3a:	2306      	movs	r3, #6
 8007d3c:	0017      	movs	r7, r2
 8007d3e:	401f      	ands	r7, r3
 8007d40:	421a      	tst	r2, r3
 8007d42:	d027      	beq.n	8007d94 <_printf_common+0x8c>
 8007d44:	0023      	movs	r3, r4
 8007d46:	3343      	adds	r3, #67	; 0x43
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	1e5a      	subs	r2, r3, #1
 8007d4c:	4193      	sbcs	r3, r2
 8007d4e:	6822      	ldr	r2, [r4, #0]
 8007d50:	0692      	lsls	r2, r2, #26
 8007d52:	d430      	bmi.n	8007db6 <_printf_common+0xae>
 8007d54:	0022      	movs	r2, r4
 8007d56:	9901      	ldr	r1, [sp, #4]
 8007d58:	9800      	ldr	r0, [sp, #0]
 8007d5a:	9e08      	ldr	r6, [sp, #32]
 8007d5c:	3243      	adds	r2, #67	; 0x43
 8007d5e:	47b0      	blx	r6
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d025      	beq.n	8007db0 <_printf_common+0xa8>
 8007d64:	2306      	movs	r3, #6
 8007d66:	6820      	ldr	r0, [r4, #0]
 8007d68:	682a      	ldr	r2, [r5, #0]
 8007d6a:	68e1      	ldr	r1, [r4, #12]
 8007d6c:	2500      	movs	r5, #0
 8007d6e:	4003      	ands	r3, r0
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d103      	bne.n	8007d7c <_printf_common+0x74>
 8007d74:	1a8d      	subs	r5, r1, r2
 8007d76:	43eb      	mvns	r3, r5
 8007d78:	17db      	asrs	r3, r3, #31
 8007d7a:	401d      	ands	r5, r3
 8007d7c:	68a3      	ldr	r3, [r4, #8]
 8007d7e:	6922      	ldr	r2, [r4, #16]
 8007d80:	4293      	cmp	r3, r2
 8007d82:	dd01      	ble.n	8007d88 <_printf_common+0x80>
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	18ed      	adds	r5, r5, r3
 8007d88:	2700      	movs	r7, #0
 8007d8a:	42bd      	cmp	r5, r7
 8007d8c:	d120      	bne.n	8007dd0 <_printf_common+0xc8>
 8007d8e:	2000      	movs	r0, #0
 8007d90:	e010      	b.n	8007db4 <_printf_common+0xac>
 8007d92:	3701      	adds	r7, #1
 8007d94:	68e3      	ldr	r3, [r4, #12]
 8007d96:	682a      	ldr	r2, [r5, #0]
 8007d98:	1a9b      	subs	r3, r3, r2
 8007d9a:	42bb      	cmp	r3, r7
 8007d9c:	ddd2      	ble.n	8007d44 <_printf_common+0x3c>
 8007d9e:	0022      	movs	r2, r4
 8007da0:	2301      	movs	r3, #1
 8007da2:	9901      	ldr	r1, [sp, #4]
 8007da4:	9800      	ldr	r0, [sp, #0]
 8007da6:	9e08      	ldr	r6, [sp, #32]
 8007da8:	3219      	adds	r2, #25
 8007daa:	47b0      	blx	r6
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d1f0      	bne.n	8007d92 <_printf_common+0x8a>
 8007db0:	2001      	movs	r0, #1
 8007db2:	4240      	negs	r0, r0
 8007db4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007db6:	2030      	movs	r0, #48	; 0x30
 8007db8:	18e1      	adds	r1, r4, r3
 8007dba:	3143      	adds	r1, #67	; 0x43
 8007dbc:	7008      	strb	r0, [r1, #0]
 8007dbe:	0021      	movs	r1, r4
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	3145      	adds	r1, #69	; 0x45
 8007dc4:	7809      	ldrb	r1, [r1, #0]
 8007dc6:	18a2      	adds	r2, r4, r2
 8007dc8:	3243      	adds	r2, #67	; 0x43
 8007dca:	3302      	adds	r3, #2
 8007dcc:	7011      	strb	r1, [r2, #0]
 8007dce:	e7c1      	b.n	8007d54 <_printf_common+0x4c>
 8007dd0:	0022      	movs	r2, r4
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	9901      	ldr	r1, [sp, #4]
 8007dd6:	9800      	ldr	r0, [sp, #0]
 8007dd8:	9e08      	ldr	r6, [sp, #32]
 8007dda:	321a      	adds	r2, #26
 8007ddc:	47b0      	blx	r6
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d0e6      	beq.n	8007db0 <_printf_common+0xa8>
 8007de2:	3701      	adds	r7, #1
 8007de4:	e7d1      	b.n	8007d8a <_printf_common+0x82>
	...

08007de8 <_printf_i>:
 8007de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dea:	b08b      	sub	sp, #44	; 0x2c
 8007dec:	9206      	str	r2, [sp, #24]
 8007dee:	000a      	movs	r2, r1
 8007df0:	3243      	adds	r2, #67	; 0x43
 8007df2:	9307      	str	r3, [sp, #28]
 8007df4:	9005      	str	r0, [sp, #20]
 8007df6:	9204      	str	r2, [sp, #16]
 8007df8:	7e0a      	ldrb	r2, [r1, #24]
 8007dfa:	000c      	movs	r4, r1
 8007dfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dfe:	2a78      	cmp	r2, #120	; 0x78
 8007e00:	d807      	bhi.n	8007e12 <_printf_i+0x2a>
 8007e02:	2a62      	cmp	r2, #98	; 0x62
 8007e04:	d809      	bhi.n	8007e1a <_printf_i+0x32>
 8007e06:	2a00      	cmp	r2, #0
 8007e08:	d100      	bne.n	8007e0c <_printf_i+0x24>
 8007e0a:	e0c1      	b.n	8007f90 <_printf_i+0x1a8>
 8007e0c:	2a58      	cmp	r2, #88	; 0x58
 8007e0e:	d100      	bne.n	8007e12 <_printf_i+0x2a>
 8007e10:	e08c      	b.n	8007f2c <_printf_i+0x144>
 8007e12:	0026      	movs	r6, r4
 8007e14:	3642      	adds	r6, #66	; 0x42
 8007e16:	7032      	strb	r2, [r6, #0]
 8007e18:	e022      	b.n	8007e60 <_printf_i+0x78>
 8007e1a:	0010      	movs	r0, r2
 8007e1c:	3863      	subs	r0, #99	; 0x63
 8007e1e:	2815      	cmp	r0, #21
 8007e20:	d8f7      	bhi.n	8007e12 <_printf_i+0x2a>
 8007e22:	f7f8 f981 	bl	8000128 <__gnu_thumb1_case_shi>
 8007e26:	0016      	.short	0x0016
 8007e28:	fff6001f 	.word	0xfff6001f
 8007e2c:	fff6fff6 	.word	0xfff6fff6
 8007e30:	001ffff6 	.word	0x001ffff6
 8007e34:	fff6fff6 	.word	0xfff6fff6
 8007e38:	fff6fff6 	.word	0xfff6fff6
 8007e3c:	003600a8 	.word	0x003600a8
 8007e40:	fff6009a 	.word	0xfff6009a
 8007e44:	00b9fff6 	.word	0x00b9fff6
 8007e48:	0036fff6 	.word	0x0036fff6
 8007e4c:	fff6fff6 	.word	0xfff6fff6
 8007e50:	009e      	.short	0x009e
 8007e52:	0026      	movs	r6, r4
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	3642      	adds	r6, #66	; 0x42
 8007e58:	1d11      	adds	r1, r2, #4
 8007e5a:	6019      	str	r1, [r3, #0]
 8007e5c:	6813      	ldr	r3, [r2, #0]
 8007e5e:	7033      	strb	r3, [r6, #0]
 8007e60:	2301      	movs	r3, #1
 8007e62:	e0a7      	b.n	8007fb4 <_printf_i+0x1cc>
 8007e64:	6808      	ldr	r0, [r1, #0]
 8007e66:	6819      	ldr	r1, [r3, #0]
 8007e68:	1d0a      	adds	r2, r1, #4
 8007e6a:	0605      	lsls	r5, r0, #24
 8007e6c:	d50b      	bpl.n	8007e86 <_printf_i+0x9e>
 8007e6e:	680d      	ldr	r5, [r1, #0]
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	2d00      	cmp	r5, #0
 8007e74:	da03      	bge.n	8007e7e <_printf_i+0x96>
 8007e76:	232d      	movs	r3, #45	; 0x2d
 8007e78:	9a04      	ldr	r2, [sp, #16]
 8007e7a:	426d      	negs	r5, r5
 8007e7c:	7013      	strb	r3, [r2, #0]
 8007e7e:	4b61      	ldr	r3, [pc, #388]	; (8008004 <_printf_i+0x21c>)
 8007e80:	270a      	movs	r7, #10
 8007e82:	9303      	str	r3, [sp, #12]
 8007e84:	e01b      	b.n	8007ebe <_printf_i+0xd6>
 8007e86:	680d      	ldr	r5, [r1, #0]
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	0641      	lsls	r1, r0, #25
 8007e8c:	d5f1      	bpl.n	8007e72 <_printf_i+0x8a>
 8007e8e:	b22d      	sxth	r5, r5
 8007e90:	e7ef      	b.n	8007e72 <_printf_i+0x8a>
 8007e92:	680d      	ldr	r5, [r1, #0]
 8007e94:	6819      	ldr	r1, [r3, #0]
 8007e96:	1d08      	adds	r0, r1, #4
 8007e98:	6018      	str	r0, [r3, #0]
 8007e9a:	062e      	lsls	r6, r5, #24
 8007e9c:	d501      	bpl.n	8007ea2 <_printf_i+0xba>
 8007e9e:	680d      	ldr	r5, [r1, #0]
 8007ea0:	e003      	b.n	8007eaa <_printf_i+0xc2>
 8007ea2:	066d      	lsls	r5, r5, #25
 8007ea4:	d5fb      	bpl.n	8007e9e <_printf_i+0xb6>
 8007ea6:	680d      	ldr	r5, [r1, #0]
 8007ea8:	b2ad      	uxth	r5, r5
 8007eaa:	4b56      	ldr	r3, [pc, #344]	; (8008004 <_printf_i+0x21c>)
 8007eac:	2708      	movs	r7, #8
 8007eae:	9303      	str	r3, [sp, #12]
 8007eb0:	2a6f      	cmp	r2, #111	; 0x6f
 8007eb2:	d000      	beq.n	8007eb6 <_printf_i+0xce>
 8007eb4:	3702      	adds	r7, #2
 8007eb6:	0023      	movs	r3, r4
 8007eb8:	2200      	movs	r2, #0
 8007eba:	3343      	adds	r3, #67	; 0x43
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	6863      	ldr	r3, [r4, #4]
 8007ec0:	60a3      	str	r3, [r4, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	db03      	blt.n	8007ece <_printf_i+0xe6>
 8007ec6:	2204      	movs	r2, #4
 8007ec8:	6821      	ldr	r1, [r4, #0]
 8007eca:	4391      	bics	r1, r2
 8007ecc:	6021      	str	r1, [r4, #0]
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	d102      	bne.n	8007ed8 <_printf_i+0xf0>
 8007ed2:	9e04      	ldr	r6, [sp, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00c      	beq.n	8007ef2 <_printf_i+0x10a>
 8007ed8:	9e04      	ldr	r6, [sp, #16]
 8007eda:	0028      	movs	r0, r5
 8007edc:	0039      	movs	r1, r7
 8007ede:	f7f8 f9b3 	bl	8000248 <__aeabi_uidivmod>
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	3e01      	subs	r6, #1
 8007ee6:	5c5b      	ldrb	r3, [r3, r1]
 8007ee8:	7033      	strb	r3, [r6, #0]
 8007eea:	002b      	movs	r3, r5
 8007eec:	0005      	movs	r5, r0
 8007eee:	429f      	cmp	r7, r3
 8007ef0:	d9f3      	bls.n	8007eda <_printf_i+0xf2>
 8007ef2:	2f08      	cmp	r7, #8
 8007ef4:	d109      	bne.n	8007f0a <_printf_i+0x122>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	07db      	lsls	r3, r3, #31
 8007efa:	d506      	bpl.n	8007f0a <_printf_i+0x122>
 8007efc:	6863      	ldr	r3, [r4, #4]
 8007efe:	6922      	ldr	r2, [r4, #16]
 8007f00:	4293      	cmp	r3, r2
 8007f02:	dc02      	bgt.n	8007f0a <_printf_i+0x122>
 8007f04:	2330      	movs	r3, #48	; 0x30
 8007f06:	3e01      	subs	r6, #1
 8007f08:	7033      	strb	r3, [r6, #0]
 8007f0a:	9b04      	ldr	r3, [sp, #16]
 8007f0c:	1b9b      	subs	r3, r3, r6
 8007f0e:	6123      	str	r3, [r4, #16]
 8007f10:	9b07      	ldr	r3, [sp, #28]
 8007f12:	0021      	movs	r1, r4
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	9805      	ldr	r0, [sp, #20]
 8007f18:	9b06      	ldr	r3, [sp, #24]
 8007f1a:	aa09      	add	r2, sp, #36	; 0x24
 8007f1c:	f7ff fef4 	bl	8007d08 <_printf_common>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	d14c      	bne.n	8007fbe <_printf_i+0x1d6>
 8007f24:	2001      	movs	r0, #1
 8007f26:	4240      	negs	r0, r0
 8007f28:	b00b      	add	sp, #44	; 0x2c
 8007f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f2c:	3145      	adds	r1, #69	; 0x45
 8007f2e:	700a      	strb	r2, [r1, #0]
 8007f30:	4a34      	ldr	r2, [pc, #208]	; (8008004 <_printf_i+0x21c>)
 8007f32:	9203      	str	r2, [sp, #12]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	6821      	ldr	r1, [r4, #0]
 8007f38:	ca20      	ldmia	r2!, {r5}
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	0608      	lsls	r0, r1, #24
 8007f3e:	d516      	bpl.n	8007f6e <_printf_i+0x186>
 8007f40:	07cb      	lsls	r3, r1, #31
 8007f42:	d502      	bpl.n	8007f4a <_printf_i+0x162>
 8007f44:	2320      	movs	r3, #32
 8007f46:	4319      	orrs	r1, r3
 8007f48:	6021      	str	r1, [r4, #0]
 8007f4a:	2710      	movs	r7, #16
 8007f4c:	2d00      	cmp	r5, #0
 8007f4e:	d1b2      	bne.n	8007eb6 <_printf_i+0xce>
 8007f50:	2320      	movs	r3, #32
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	439a      	bics	r2, r3
 8007f56:	6022      	str	r2, [r4, #0]
 8007f58:	e7ad      	b.n	8007eb6 <_printf_i+0xce>
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	6809      	ldr	r1, [r1, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	6022      	str	r2, [r4, #0]
 8007f62:	0022      	movs	r2, r4
 8007f64:	2178      	movs	r1, #120	; 0x78
 8007f66:	3245      	adds	r2, #69	; 0x45
 8007f68:	7011      	strb	r1, [r2, #0]
 8007f6a:	4a27      	ldr	r2, [pc, #156]	; (8008008 <_printf_i+0x220>)
 8007f6c:	e7e1      	b.n	8007f32 <_printf_i+0x14a>
 8007f6e:	0648      	lsls	r0, r1, #25
 8007f70:	d5e6      	bpl.n	8007f40 <_printf_i+0x158>
 8007f72:	b2ad      	uxth	r5, r5
 8007f74:	e7e4      	b.n	8007f40 <_printf_i+0x158>
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	680d      	ldr	r5, [r1, #0]
 8007f7a:	1d10      	adds	r0, r2, #4
 8007f7c:	6949      	ldr	r1, [r1, #20]
 8007f7e:	6018      	str	r0, [r3, #0]
 8007f80:	6813      	ldr	r3, [r2, #0]
 8007f82:	062e      	lsls	r6, r5, #24
 8007f84:	d501      	bpl.n	8007f8a <_printf_i+0x1a2>
 8007f86:	6019      	str	r1, [r3, #0]
 8007f88:	e002      	b.n	8007f90 <_printf_i+0x1a8>
 8007f8a:	066d      	lsls	r5, r5, #25
 8007f8c:	d5fb      	bpl.n	8007f86 <_printf_i+0x19e>
 8007f8e:	8019      	strh	r1, [r3, #0]
 8007f90:	2300      	movs	r3, #0
 8007f92:	9e04      	ldr	r6, [sp, #16]
 8007f94:	6123      	str	r3, [r4, #16]
 8007f96:	e7bb      	b.n	8007f10 <_printf_i+0x128>
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	1d11      	adds	r1, r2, #4
 8007f9c:	6019      	str	r1, [r3, #0]
 8007f9e:	6816      	ldr	r6, [r2, #0]
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	0030      	movs	r0, r6
 8007fa4:	6862      	ldr	r2, [r4, #4]
 8007fa6:	f002 fb71 	bl	800a68c <memchr>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d001      	beq.n	8007fb2 <_printf_i+0x1ca>
 8007fae:	1b80      	subs	r0, r0, r6
 8007fb0:	6060      	str	r0, [r4, #4]
 8007fb2:	6863      	ldr	r3, [r4, #4]
 8007fb4:	6123      	str	r3, [r4, #16]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9a04      	ldr	r2, [sp, #16]
 8007fba:	7013      	strb	r3, [r2, #0]
 8007fbc:	e7a8      	b.n	8007f10 <_printf_i+0x128>
 8007fbe:	6923      	ldr	r3, [r4, #16]
 8007fc0:	0032      	movs	r2, r6
 8007fc2:	9906      	ldr	r1, [sp, #24]
 8007fc4:	9805      	ldr	r0, [sp, #20]
 8007fc6:	9d07      	ldr	r5, [sp, #28]
 8007fc8:	47a8      	blx	r5
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	d0aa      	beq.n	8007f24 <_printf_i+0x13c>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	079b      	lsls	r3, r3, #30
 8007fd2:	d415      	bmi.n	8008000 <_printf_i+0x218>
 8007fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd6:	68e0      	ldr	r0, [r4, #12]
 8007fd8:	4298      	cmp	r0, r3
 8007fda:	daa5      	bge.n	8007f28 <_printf_i+0x140>
 8007fdc:	0018      	movs	r0, r3
 8007fde:	e7a3      	b.n	8007f28 <_printf_i+0x140>
 8007fe0:	0022      	movs	r2, r4
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	9906      	ldr	r1, [sp, #24]
 8007fe6:	9805      	ldr	r0, [sp, #20]
 8007fe8:	9e07      	ldr	r6, [sp, #28]
 8007fea:	3219      	adds	r2, #25
 8007fec:	47b0      	blx	r6
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	d098      	beq.n	8007f24 <_printf_i+0x13c>
 8007ff2:	3501      	adds	r5, #1
 8007ff4:	68e3      	ldr	r3, [r4, #12]
 8007ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	42ab      	cmp	r3, r5
 8007ffc:	dcf0      	bgt.n	8007fe0 <_printf_i+0x1f8>
 8007ffe:	e7e9      	b.n	8007fd4 <_printf_i+0x1ec>
 8008000:	2500      	movs	r5, #0
 8008002:	e7f7      	b.n	8007ff4 <_printf_i+0x20c>
 8008004:	0800c1ee 	.word	0x0800c1ee
 8008008:	0800c1ff 	.word	0x0800c1ff

0800800c <_scanf_float>:
 800800c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800800e:	b08b      	sub	sp, #44	; 0x2c
 8008010:	0015      	movs	r5, r2
 8008012:	9001      	str	r0, [sp, #4]
 8008014:	22ae      	movs	r2, #174	; 0xae
 8008016:	2000      	movs	r0, #0
 8008018:	9306      	str	r3, [sp, #24]
 800801a:	688b      	ldr	r3, [r1, #8]
 800801c:	000e      	movs	r6, r1
 800801e:	1e59      	subs	r1, r3, #1
 8008020:	0052      	lsls	r2, r2, #1
 8008022:	9005      	str	r0, [sp, #20]
 8008024:	4291      	cmp	r1, r2
 8008026:	d905      	bls.n	8008034 <_scanf_float+0x28>
 8008028:	3b5e      	subs	r3, #94	; 0x5e
 800802a:	3bff      	subs	r3, #255	; 0xff
 800802c:	9305      	str	r3, [sp, #20]
 800802e:	235e      	movs	r3, #94	; 0x5e
 8008030:	33ff      	adds	r3, #255	; 0xff
 8008032:	60b3      	str	r3, [r6, #8]
 8008034:	23f0      	movs	r3, #240	; 0xf0
 8008036:	6832      	ldr	r2, [r6, #0]
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	4313      	orrs	r3, r2
 800803c:	6033      	str	r3, [r6, #0]
 800803e:	0033      	movs	r3, r6
 8008040:	2400      	movs	r4, #0
 8008042:	331c      	adds	r3, #28
 8008044:	001f      	movs	r7, r3
 8008046:	9303      	str	r3, [sp, #12]
 8008048:	9402      	str	r4, [sp, #8]
 800804a:	9408      	str	r4, [sp, #32]
 800804c:	9407      	str	r4, [sp, #28]
 800804e:	9400      	str	r4, [sp, #0]
 8008050:	9404      	str	r4, [sp, #16]
 8008052:	68b2      	ldr	r2, [r6, #8]
 8008054:	2a00      	cmp	r2, #0
 8008056:	d00a      	beq.n	800806e <_scanf_float+0x62>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b4e      	cmp	r3, #78	; 0x4e
 800805e:	d844      	bhi.n	80080ea <_scanf_float+0xde>
 8008060:	0018      	movs	r0, r3
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d82c      	bhi.n	80080c0 <_scanf_float+0xb4>
 8008066:	382b      	subs	r0, #43	; 0x2b
 8008068:	b2c1      	uxtb	r1, r0
 800806a:	290e      	cmp	r1, #14
 800806c:	d92a      	bls.n	80080c4 <_scanf_float+0xb8>
 800806e:	9b00      	ldr	r3, [sp, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <_scanf_float+0x70>
 8008074:	6832      	ldr	r2, [r6, #0]
 8008076:	4ba4      	ldr	r3, [pc, #656]	; (8008308 <_scanf_float+0x2fc>)
 8008078:	4013      	ands	r3, r2
 800807a:	6033      	str	r3, [r6, #0]
 800807c:	9b02      	ldr	r3, [sp, #8]
 800807e:	3b01      	subs	r3, #1
 8008080:	2b01      	cmp	r3, #1
 8008082:	d900      	bls.n	8008086 <_scanf_float+0x7a>
 8008084:	e0f9      	b.n	800827a <_scanf_float+0x26e>
 8008086:	24be      	movs	r4, #190	; 0xbe
 8008088:	0064      	lsls	r4, r4, #1
 800808a:	9b03      	ldr	r3, [sp, #12]
 800808c:	429f      	cmp	r7, r3
 800808e:	d900      	bls.n	8008092 <_scanf_float+0x86>
 8008090:	e0e9      	b.n	8008266 <_scanf_float+0x25a>
 8008092:	2301      	movs	r3, #1
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	e185      	b.n	80083a4 <_scanf_float+0x398>
 8008098:	0018      	movs	r0, r3
 800809a:	3861      	subs	r0, #97	; 0x61
 800809c:	280d      	cmp	r0, #13
 800809e:	d8e6      	bhi.n	800806e <_scanf_float+0x62>
 80080a0:	f7f8 f842 	bl	8000128 <__gnu_thumb1_case_shi>
 80080a4:	ffe50083 	.word	0xffe50083
 80080a8:	ffe5ffe5 	.word	0xffe5ffe5
 80080ac:	00a200b6 	.word	0x00a200b6
 80080b0:	ffe5ffe5 	.word	0xffe5ffe5
 80080b4:	ffe50089 	.word	0xffe50089
 80080b8:	ffe5ffe5 	.word	0xffe5ffe5
 80080bc:	0065ffe5 	.word	0x0065ffe5
 80080c0:	3841      	subs	r0, #65	; 0x41
 80080c2:	e7eb      	b.n	800809c <_scanf_float+0x90>
 80080c4:	280e      	cmp	r0, #14
 80080c6:	d8d2      	bhi.n	800806e <_scanf_float+0x62>
 80080c8:	f7f8 f82e 	bl	8000128 <__gnu_thumb1_case_shi>
 80080cc:	ffd1004b 	.word	0xffd1004b
 80080d0:	0098004b 	.word	0x0098004b
 80080d4:	0020ffd1 	.word	0x0020ffd1
 80080d8:	00400040 	.word	0x00400040
 80080dc:	00400040 	.word	0x00400040
 80080e0:	00400040 	.word	0x00400040
 80080e4:	00400040 	.word	0x00400040
 80080e8:	0040      	.short	0x0040
 80080ea:	2b6e      	cmp	r3, #110	; 0x6e
 80080ec:	d809      	bhi.n	8008102 <_scanf_float+0xf6>
 80080ee:	2b60      	cmp	r3, #96	; 0x60
 80080f0:	d8d2      	bhi.n	8008098 <_scanf_float+0x8c>
 80080f2:	2b54      	cmp	r3, #84	; 0x54
 80080f4:	d07d      	beq.n	80081f2 <_scanf_float+0x1e6>
 80080f6:	2b59      	cmp	r3, #89	; 0x59
 80080f8:	d1b9      	bne.n	800806e <_scanf_float+0x62>
 80080fa:	2c07      	cmp	r4, #7
 80080fc:	d1b7      	bne.n	800806e <_scanf_float+0x62>
 80080fe:	2408      	movs	r4, #8
 8008100:	e02c      	b.n	800815c <_scanf_float+0x150>
 8008102:	2b74      	cmp	r3, #116	; 0x74
 8008104:	d075      	beq.n	80081f2 <_scanf_float+0x1e6>
 8008106:	2b79      	cmp	r3, #121	; 0x79
 8008108:	d0f7      	beq.n	80080fa <_scanf_float+0xee>
 800810a:	e7b0      	b.n	800806e <_scanf_float+0x62>
 800810c:	6831      	ldr	r1, [r6, #0]
 800810e:	05c8      	lsls	r0, r1, #23
 8008110:	d51c      	bpl.n	800814c <_scanf_float+0x140>
 8008112:	2380      	movs	r3, #128	; 0x80
 8008114:	4399      	bics	r1, r3
 8008116:	9b00      	ldr	r3, [sp, #0]
 8008118:	6031      	str	r1, [r6, #0]
 800811a:	3301      	adds	r3, #1
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	9b05      	ldr	r3, [sp, #20]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <_scanf_float+0x120>
 8008124:	3b01      	subs	r3, #1
 8008126:	3201      	adds	r2, #1
 8008128:	9305      	str	r3, [sp, #20]
 800812a:	60b2      	str	r2, [r6, #8]
 800812c:	68b3      	ldr	r3, [r6, #8]
 800812e:	3b01      	subs	r3, #1
 8008130:	60b3      	str	r3, [r6, #8]
 8008132:	6933      	ldr	r3, [r6, #16]
 8008134:	3301      	adds	r3, #1
 8008136:	6133      	str	r3, [r6, #16]
 8008138:	686b      	ldr	r3, [r5, #4]
 800813a:	3b01      	subs	r3, #1
 800813c:	606b      	str	r3, [r5, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	dc00      	bgt.n	8008144 <_scanf_float+0x138>
 8008142:	e086      	b.n	8008252 <_scanf_float+0x246>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	3301      	adds	r3, #1
 8008148:	602b      	str	r3, [r5, #0]
 800814a:	e782      	b.n	8008052 <_scanf_float+0x46>
 800814c:	9a02      	ldr	r2, [sp, #8]
 800814e:	1912      	adds	r2, r2, r4
 8008150:	2a00      	cmp	r2, #0
 8008152:	d18c      	bne.n	800806e <_scanf_float+0x62>
 8008154:	4a6d      	ldr	r2, [pc, #436]	; (800830c <_scanf_float+0x300>)
 8008156:	6831      	ldr	r1, [r6, #0]
 8008158:	400a      	ands	r2, r1
 800815a:	6032      	str	r2, [r6, #0]
 800815c:	703b      	strb	r3, [r7, #0]
 800815e:	3701      	adds	r7, #1
 8008160:	e7e4      	b.n	800812c <_scanf_float+0x120>
 8008162:	2180      	movs	r1, #128	; 0x80
 8008164:	6832      	ldr	r2, [r6, #0]
 8008166:	420a      	tst	r2, r1
 8008168:	d081      	beq.n	800806e <_scanf_float+0x62>
 800816a:	438a      	bics	r2, r1
 800816c:	e7f5      	b.n	800815a <_scanf_float+0x14e>
 800816e:	9a02      	ldr	r2, [sp, #8]
 8008170:	2a00      	cmp	r2, #0
 8008172:	d10f      	bne.n	8008194 <_scanf_float+0x188>
 8008174:	9a00      	ldr	r2, [sp, #0]
 8008176:	2a00      	cmp	r2, #0
 8008178:	d10f      	bne.n	800819a <_scanf_float+0x18e>
 800817a:	6832      	ldr	r2, [r6, #0]
 800817c:	21e0      	movs	r1, #224	; 0xe0
 800817e:	0010      	movs	r0, r2
 8008180:	00c9      	lsls	r1, r1, #3
 8008182:	4008      	ands	r0, r1
 8008184:	4288      	cmp	r0, r1
 8008186:	d108      	bne.n	800819a <_scanf_float+0x18e>
 8008188:	4961      	ldr	r1, [pc, #388]	; (8008310 <_scanf_float+0x304>)
 800818a:	400a      	ands	r2, r1
 800818c:	6032      	str	r2, [r6, #0]
 800818e:	2201      	movs	r2, #1
 8008190:	9202      	str	r2, [sp, #8]
 8008192:	e7e3      	b.n	800815c <_scanf_float+0x150>
 8008194:	9a02      	ldr	r2, [sp, #8]
 8008196:	2a02      	cmp	r2, #2
 8008198:	d059      	beq.n	800824e <_scanf_float+0x242>
 800819a:	2c01      	cmp	r4, #1
 800819c:	d002      	beq.n	80081a4 <_scanf_float+0x198>
 800819e:	2c04      	cmp	r4, #4
 80081a0:	d000      	beq.n	80081a4 <_scanf_float+0x198>
 80081a2:	e764      	b.n	800806e <_scanf_float+0x62>
 80081a4:	3401      	adds	r4, #1
 80081a6:	b2e4      	uxtb	r4, r4
 80081a8:	e7d8      	b.n	800815c <_scanf_float+0x150>
 80081aa:	9a02      	ldr	r2, [sp, #8]
 80081ac:	2a01      	cmp	r2, #1
 80081ae:	d000      	beq.n	80081b2 <_scanf_float+0x1a6>
 80081b0:	e75d      	b.n	800806e <_scanf_float+0x62>
 80081b2:	2202      	movs	r2, #2
 80081b4:	e7ec      	b.n	8008190 <_scanf_float+0x184>
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d110      	bne.n	80081dc <_scanf_float+0x1d0>
 80081ba:	9a00      	ldr	r2, [sp, #0]
 80081bc:	2a00      	cmp	r2, #0
 80081be:	d000      	beq.n	80081c2 <_scanf_float+0x1b6>
 80081c0:	e758      	b.n	8008074 <_scanf_float+0x68>
 80081c2:	6832      	ldr	r2, [r6, #0]
 80081c4:	21e0      	movs	r1, #224	; 0xe0
 80081c6:	0010      	movs	r0, r2
 80081c8:	00c9      	lsls	r1, r1, #3
 80081ca:	4008      	ands	r0, r1
 80081cc:	4288      	cmp	r0, r1
 80081ce:	d000      	beq.n	80081d2 <_scanf_float+0x1c6>
 80081d0:	e754      	b.n	800807c <_scanf_float+0x70>
 80081d2:	494f      	ldr	r1, [pc, #316]	; (8008310 <_scanf_float+0x304>)
 80081d4:	3401      	adds	r4, #1
 80081d6:	400a      	ands	r2, r1
 80081d8:	6032      	str	r2, [r6, #0]
 80081da:	e7bf      	b.n	800815c <_scanf_float+0x150>
 80081dc:	21fd      	movs	r1, #253	; 0xfd
 80081de:	1ee2      	subs	r2, r4, #3
 80081e0:	420a      	tst	r2, r1
 80081e2:	d000      	beq.n	80081e6 <_scanf_float+0x1da>
 80081e4:	e743      	b.n	800806e <_scanf_float+0x62>
 80081e6:	e7dd      	b.n	80081a4 <_scanf_float+0x198>
 80081e8:	2c02      	cmp	r4, #2
 80081ea:	d000      	beq.n	80081ee <_scanf_float+0x1e2>
 80081ec:	e73f      	b.n	800806e <_scanf_float+0x62>
 80081ee:	2403      	movs	r4, #3
 80081f0:	e7b4      	b.n	800815c <_scanf_float+0x150>
 80081f2:	2c06      	cmp	r4, #6
 80081f4:	d000      	beq.n	80081f8 <_scanf_float+0x1ec>
 80081f6:	e73a      	b.n	800806e <_scanf_float+0x62>
 80081f8:	2407      	movs	r4, #7
 80081fa:	e7af      	b.n	800815c <_scanf_float+0x150>
 80081fc:	6832      	ldr	r2, [r6, #0]
 80081fe:	0591      	lsls	r1, r2, #22
 8008200:	d400      	bmi.n	8008204 <_scanf_float+0x1f8>
 8008202:	e734      	b.n	800806e <_scanf_float+0x62>
 8008204:	4943      	ldr	r1, [pc, #268]	; (8008314 <_scanf_float+0x308>)
 8008206:	400a      	ands	r2, r1
 8008208:	6032      	str	r2, [r6, #0]
 800820a:	9a00      	ldr	r2, [sp, #0]
 800820c:	9204      	str	r2, [sp, #16]
 800820e:	e7a5      	b.n	800815c <_scanf_float+0x150>
 8008210:	21a0      	movs	r1, #160	; 0xa0
 8008212:	2080      	movs	r0, #128	; 0x80
 8008214:	6832      	ldr	r2, [r6, #0]
 8008216:	00c9      	lsls	r1, r1, #3
 8008218:	4011      	ands	r1, r2
 800821a:	00c0      	lsls	r0, r0, #3
 800821c:	4281      	cmp	r1, r0
 800821e:	d006      	beq.n	800822e <_scanf_float+0x222>
 8008220:	4202      	tst	r2, r0
 8008222:	d100      	bne.n	8008226 <_scanf_float+0x21a>
 8008224:	e723      	b.n	800806e <_scanf_float+0x62>
 8008226:	9900      	ldr	r1, [sp, #0]
 8008228:	2900      	cmp	r1, #0
 800822a:	d100      	bne.n	800822e <_scanf_float+0x222>
 800822c:	e726      	b.n	800807c <_scanf_float+0x70>
 800822e:	0591      	lsls	r1, r2, #22
 8008230:	d404      	bmi.n	800823c <_scanf_float+0x230>
 8008232:	9900      	ldr	r1, [sp, #0]
 8008234:	9804      	ldr	r0, [sp, #16]
 8008236:	9708      	str	r7, [sp, #32]
 8008238:	1a09      	subs	r1, r1, r0
 800823a:	9107      	str	r1, [sp, #28]
 800823c:	4934      	ldr	r1, [pc, #208]	; (8008310 <_scanf_float+0x304>)
 800823e:	400a      	ands	r2, r1
 8008240:	21c0      	movs	r1, #192	; 0xc0
 8008242:	0049      	lsls	r1, r1, #1
 8008244:	430a      	orrs	r2, r1
 8008246:	6032      	str	r2, [r6, #0]
 8008248:	2200      	movs	r2, #0
 800824a:	9200      	str	r2, [sp, #0]
 800824c:	e786      	b.n	800815c <_scanf_float+0x150>
 800824e:	2203      	movs	r2, #3
 8008250:	e79e      	b.n	8008190 <_scanf_float+0x184>
 8008252:	23c0      	movs	r3, #192	; 0xc0
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	0029      	movs	r1, r5
 8008258:	58f3      	ldr	r3, [r6, r3]
 800825a:	9801      	ldr	r0, [sp, #4]
 800825c:	4798      	blx	r3
 800825e:	2800      	cmp	r0, #0
 8008260:	d100      	bne.n	8008264 <_scanf_float+0x258>
 8008262:	e6f6      	b.n	8008052 <_scanf_float+0x46>
 8008264:	e703      	b.n	800806e <_scanf_float+0x62>
 8008266:	3f01      	subs	r7, #1
 8008268:	5933      	ldr	r3, [r6, r4]
 800826a:	002a      	movs	r2, r5
 800826c:	7839      	ldrb	r1, [r7, #0]
 800826e:	9801      	ldr	r0, [sp, #4]
 8008270:	4798      	blx	r3
 8008272:	6933      	ldr	r3, [r6, #16]
 8008274:	3b01      	subs	r3, #1
 8008276:	6133      	str	r3, [r6, #16]
 8008278:	e707      	b.n	800808a <_scanf_float+0x7e>
 800827a:	1e63      	subs	r3, r4, #1
 800827c:	2b06      	cmp	r3, #6
 800827e:	d80e      	bhi.n	800829e <_scanf_float+0x292>
 8008280:	9702      	str	r7, [sp, #8]
 8008282:	2c02      	cmp	r4, #2
 8008284:	d920      	bls.n	80082c8 <_scanf_float+0x2bc>
 8008286:	1be3      	subs	r3, r4, r7
 8008288:	b2db      	uxtb	r3, r3
 800828a:	9305      	str	r3, [sp, #20]
 800828c:	9b02      	ldr	r3, [sp, #8]
 800828e:	9a05      	ldr	r2, [sp, #20]
 8008290:	189b      	adds	r3, r3, r2
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b03      	cmp	r3, #3
 8008296:	d827      	bhi.n	80082e8 <_scanf_float+0x2dc>
 8008298:	3c03      	subs	r4, #3
 800829a:	b2e4      	uxtb	r4, r4
 800829c:	1b3f      	subs	r7, r7, r4
 800829e:	6833      	ldr	r3, [r6, #0]
 80082a0:	05da      	lsls	r2, r3, #23
 80082a2:	d554      	bpl.n	800834e <_scanf_float+0x342>
 80082a4:	055b      	lsls	r3, r3, #21
 80082a6:	d537      	bpl.n	8008318 <_scanf_float+0x30c>
 80082a8:	24be      	movs	r4, #190	; 0xbe
 80082aa:	0064      	lsls	r4, r4, #1
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	429f      	cmp	r7, r3
 80082b0:	d800      	bhi.n	80082b4 <_scanf_float+0x2a8>
 80082b2:	e6ee      	b.n	8008092 <_scanf_float+0x86>
 80082b4:	3f01      	subs	r7, #1
 80082b6:	5933      	ldr	r3, [r6, r4]
 80082b8:	002a      	movs	r2, r5
 80082ba:	7839      	ldrb	r1, [r7, #0]
 80082bc:	9801      	ldr	r0, [sp, #4]
 80082be:	4798      	blx	r3
 80082c0:	6933      	ldr	r3, [r6, #16]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	6133      	str	r3, [r6, #16]
 80082c6:	e7f1      	b.n	80082ac <_scanf_float+0x2a0>
 80082c8:	24be      	movs	r4, #190	; 0xbe
 80082ca:	0064      	lsls	r4, r4, #1
 80082cc:	9b03      	ldr	r3, [sp, #12]
 80082ce:	429f      	cmp	r7, r3
 80082d0:	d800      	bhi.n	80082d4 <_scanf_float+0x2c8>
 80082d2:	e6de      	b.n	8008092 <_scanf_float+0x86>
 80082d4:	3f01      	subs	r7, #1
 80082d6:	5933      	ldr	r3, [r6, r4]
 80082d8:	002a      	movs	r2, r5
 80082da:	7839      	ldrb	r1, [r7, #0]
 80082dc:	9801      	ldr	r0, [sp, #4]
 80082de:	4798      	blx	r3
 80082e0:	6933      	ldr	r3, [r6, #16]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	6133      	str	r3, [r6, #16]
 80082e6:	e7f1      	b.n	80082cc <_scanf_float+0x2c0>
 80082e8:	9b02      	ldr	r3, [sp, #8]
 80082ea:	002a      	movs	r2, r5
 80082ec:	3b01      	subs	r3, #1
 80082ee:	7819      	ldrb	r1, [r3, #0]
 80082f0:	9302      	str	r3, [sp, #8]
 80082f2:	23be      	movs	r3, #190	; 0xbe
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	58f3      	ldr	r3, [r6, r3]
 80082f8:	9801      	ldr	r0, [sp, #4]
 80082fa:	9309      	str	r3, [sp, #36]	; 0x24
 80082fc:	4798      	blx	r3
 80082fe:	6933      	ldr	r3, [r6, #16]
 8008300:	3b01      	subs	r3, #1
 8008302:	6133      	str	r3, [r6, #16]
 8008304:	e7c2      	b.n	800828c <_scanf_float+0x280>
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	fffffeff 	.word	0xfffffeff
 800830c:	fffffe7f 	.word	0xfffffe7f
 8008310:	fffff87f 	.word	0xfffff87f
 8008314:	fffffd7f 	.word	0xfffffd7f
 8008318:	6933      	ldr	r3, [r6, #16]
 800831a:	1e7c      	subs	r4, r7, #1
 800831c:	7821      	ldrb	r1, [r4, #0]
 800831e:	3b01      	subs	r3, #1
 8008320:	6133      	str	r3, [r6, #16]
 8008322:	2965      	cmp	r1, #101	; 0x65
 8008324:	d00c      	beq.n	8008340 <_scanf_float+0x334>
 8008326:	2945      	cmp	r1, #69	; 0x45
 8008328:	d00a      	beq.n	8008340 <_scanf_float+0x334>
 800832a:	23be      	movs	r3, #190	; 0xbe
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	58f3      	ldr	r3, [r6, r3]
 8008330:	002a      	movs	r2, r5
 8008332:	9801      	ldr	r0, [sp, #4]
 8008334:	4798      	blx	r3
 8008336:	6933      	ldr	r3, [r6, #16]
 8008338:	1ebc      	subs	r4, r7, #2
 800833a:	3b01      	subs	r3, #1
 800833c:	7821      	ldrb	r1, [r4, #0]
 800833e:	6133      	str	r3, [r6, #16]
 8008340:	23be      	movs	r3, #190	; 0xbe
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	002a      	movs	r2, r5
 8008346:	58f3      	ldr	r3, [r6, r3]
 8008348:	9801      	ldr	r0, [sp, #4]
 800834a:	4798      	blx	r3
 800834c:	0027      	movs	r7, r4
 800834e:	6832      	ldr	r2, [r6, #0]
 8008350:	2310      	movs	r3, #16
 8008352:	0011      	movs	r1, r2
 8008354:	4019      	ands	r1, r3
 8008356:	9102      	str	r1, [sp, #8]
 8008358:	421a      	tst	r2, r3
 800835a:	d158      	bne.n	800840e <_scanf_float+0x402>
 800835c:	23c0      	movs	r3, #192	; 0xc0
 800835e:	7039      	strb	r1, [r7, #0]
 8008360:	6832      	ldr	r2, [r6, #0]
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	4013      	ands	r3, r2
 8008366:	2280      	movs	r2, #128	; 0x80
 8008368:	00d2      	lsls	r2, r2, #3
 800836a:	4293      	cmp	r3, r2
 800836c:	d11d      	bne.n	80083aa <_scanf_float+0x39e>
 800836e:	9b04      	ldr	r3, [sp, #16]
 8008370:	9a00      	ldr	r2, [sp, #0]
 8008372:	9900      	ldr	r1, [sp, #0]
 8008374:	1a9a      	subs	r2, r3, r2
 8008376:	428b      	cmp	r3, r1
 8008378:	d124      	bne.n	80083c4 <_scanf_float+0x3b8>
 800837a:	2200      	movs	r2, #0
 800837c:	9903      	ldr	r1, [sp, #12]
 800837e:	9801      	ldr	r0, [sp, #4]
 8008380:	f000 feae 	bl	80090e0 <_strtod_r>
 8008384:	9b06      	ldr	r3, [sp, #24]
 8008386:	000d      	movs	r5, r1
 8008388:	6831      	ldr	r1, [r6, #0]
 800838a:	0004      	movs	r4, r0
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	078a      	lsls	r2, r1, #30
 8008390:	d525      	bpl.n	80083de <_scanf_float+0x3d2>
 8008392:	1d1a      	adds	r2, r3, #4
 8008394:	9906      	ldr	r1, [sp, #24]
 8008396:	600a      	str	r2, [r1, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	601c      	str	r4, [r3, #0]
 800839c:	605d      	str	r5, [r3, #4]
 800839e:	68f3      	ldr	r3, [r6, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60f3      	str	r3, [r6, #12]
 80083a4:	9802      	ldr	r0, [sp, #8]
 80083a6:	b00b      	add	sp, #44	; 0x2c
 80083a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083aa:	9b07      	ldr	r3, [sp, #28]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0e4      	beq.n	800837a <_scanf_float+0x36e>
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	9a02      	ldr	r2, [sp, #8]
 80083b4:	1c59      	adds	r1, r3, #1
 80083b6:	9801      	ldr	r0, [sp, #4]
 80083b8:	230a      	movs	r3, #10
 80083ba:	f000 ff27 	bl	800920c <_strtol_r>
 80083be:	9b07      	ldr	r3, [sp, #28]
 80083c0:	9f08      	ldr	r7, [sp, #32]
 80083c2:	1ac2      	subs	r2, r0, r3
 80083c4:	0033      	movs	r3, r6
 80083c6:	3370      	adds	r3, #112	; 0x70
 80083c8:	33ff      	adds	r3, #255	; 0xff
 80083ca:	429f      	cmp	r7, r3
 80083cc:	d302      	bcc.n	80083d4 <_scanf_float+0x3c8>
 80083ce:	0037      	movs	r7, r6
 80083d0:	376f      	adds	r7, #111	; 0x6f
 80083d2:	37ff      	adds	r7, #255	; 0xff
 80083d4:	0038      	movs	r0, r7
 80083d6:	490f      	ldr	r1, [pc, #60]	; (8008414 <_scanf_float+0x408>)
 80083d8:	f000 f836 	bl	8008448 <siprintf>
 80083dc:	e7cd      	b.n	800837a <_scanf_float+0x36e>
 80083de:	1d1a      	adds	r2, r3, #4
 80083e0:	0749      	lsls	r1, r1, #29
 80083e2:	d4d7      	bmi.n	8008394 <_scanf_float+0x388>
 80083e4:	9906      	ldr	r1, [sp, #24]
 80083e6:	0020      	movs	r0, r4
 80083e8:	600a      	str	r2, [r1, #0]
 80083ea:	681f      	ldr	r7, [r3, #0]
 80083ec:	0022      	movs	r2, r4
 80083ee:	002b      	movs	r3, r5
 80083f0:	0029      	movs	r1, r5
 80083f2:	f7f9 feef 	bl	80021d4 <__aeabi_dcmpun>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d004      	beq.n	8008404 <_scanf_float+0x3f8>
 80083fa:	4807      	ldr	r0, [pc, #28]	; (8008418 <_scanf_float+0x40c>)
 80083fc:	f000 f820 	bl	8008440 <nanf>
 8008400:	6038      	str	r0, [r7, #0]
 8008402:	e7cc      	b.n	800839e <_scanf_float+0x392>
 8008404:	0020      	movs	r0, r4
 8008406:	0029      	movs	r1, r5
 8008408:	f7f9 ff8e 	bl	8002328 <__aeabi_d2f>
 800840c:	e7f8      	b.n	8008400 <_scanf_float+0x3f4>
 800840e:	2300      	movs	r3, #0
 8008410:	e640      	b.n	8008094 <_scanf_float+0x88>
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	0800c210 	.word	0x0800c210
 8008418:	0800c518 	.word	0x0800c518

0800841c <_sbrk_r>:
 800841c:	2300      	movs	r3, #0
 800841e:	b570      	push	{r4, r5, r6, lr}
 8008420:	4d06      	ldr	r5, [pc, #24]	; (800843c <_sbrk_r+0x20>)
 8008422:	0004      	movs	r4, r0
 8008424:	0008      	movs	r0, r1
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	f7fb f9c8 	bl	80037bc <_sbrk>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d103      	bne.n	8008438 <_sbrk_r+0x1c>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d000      	beq.n	8008438 <_sbrk_r+0x1c>
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	bd70      	pop	{r4, r5, r6, pc}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	20000498 	.word	0x20000498

08008440 <nanf>:
 8008440:	4800      	ldr	r0, [pc, #0]	; (8008444 <nanf+0x4>)
 8008442:	4770      	bx	lr
 8008444:	7fc00000 	.word	0x7fc00000

08008448 <siprintf>:
 8008448:	b40e      	push	{r1, r2, r3}
 800844a:	b500      	push	{lr}
 800844c:	490b      	ldr	r1, [pc, #44]	; (800847c <siprintf+0x34>)
 800844e:	b09c      	sub	sp, #112	; 0x70
 8008450:	ab1d      	add	r3, sp, #116	; 0x74
 8008452:	9002      	str	r0, [sp, #8]
 8008454:	9006      	str	r0, [sp, #24]
 8008456:	9107      	str	r1, [sp, #28]
 8008458:	9104      	str	r1, [sp, #16]
 800845a:	4809      	ldr	r0, [pc, #36]	; (8008480 <siprintf+0x38>)
 800845c:	4909      	ldr	r1, [pc, #36]	; (8008484 <siprintf+0x3c>)
 800845e:	cb04      	ldmia	r3!, {r2}
 8008460:	9105      	str	r1, [sp, #20]
 8008462:	6800      	ldr	r0, [r0, #0]
 8008464:	a902      	add	r1, sp, #8
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	f002 fe84 	bl	800b174 <_svfiprintf_r>
 800846c:	2300      	movs	r3, #0
 800846e:	9a02      	ldr	r2, [sp, #8]
 8008470:	7013      	strb	r3, [r2, #0]
 8008472:	b01c      	add	sp, #112	; 0x70
 8008474:	bc08      	pop	{r3}
 8008476:	b003      	add	sp, #12
 8008478:	4718      	bx	r3
 800847a:	46c0      	nop			; (mov r8, r8)
 800847c:	7fffffff 	.word	0x7fffffff
 8008480:	2000000c 	.word	0x2000000c
 8008484:	ffff0208 	.word	0xffff0208

08008488 <sulp>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	0016      	movs	r6, r2
 800848c:	000d      	movs	r5, r1
 800848e:	f002 fc9d 	bl	800adcc <__ulp>
 8008492:	2e00      	cmp	r6, #0
 8008494:	d00d      	beq.n	80084b2 <sulp+0x2a>
 8008496:	236b      	movs	r3, #107	; 0x6b
 8008498:	006a      	lsls	r2, r5, #1
 800849a:	0d52      	lsrs	r2, r2, #21
 800849c:	1a9b      	subs	r3, r3, r2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	dd07      	ble.n	80084b2 <sulp+0x2a>
 80084a2:	2400      	movs	r4, #0
 80084a4:	4a03      	ldr	r2, [pc, #12]	; (80084b4 <sulp+0x2c>)
 80084a6:	051b      	lsls	r3, r3, #20
 80084a8:	189d      	adds	r5, r3, r2
 80084aa:	002b      	movs	r3, r5
 80084ac:	0022      	movs	r2, r4
 80084ae:	f7f9 f893 	bl	80015d8 <__aeabi_dmul>
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	3ff00000 	.word	0x3ff00000

080084b8 <_strtod_l>:
 80084b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ba:	001d      	movs	r5, r3
 80084bc:	2300      	movs	r3, #0
 80084be:	b0a5      	sub	sp, #148	; 0x94
 80084c0:	9320      	str	r3, [sp, #128]	; 0x80
 80084c2:	4bac      	ldr	r3, [pc, #688]	; (8008774 <_strtod_l+0x2bc>)
 80084c4:	9005      	str	r0, [sp, #20]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	9108      	str	r1, [sp, #32]
 80084ca:	0018      	movs	r0, r3
 80084cc:	9307      	str	r3, [sp, #28]
 80084ce:	921b      	str	r2, [sp, #108]	; 0x6c
 80084d0:	f7f7 fe18 	bl	8000104 <strlen>
 80084d4:	2600      	movs	r6, #0
 80084d6:	0004      	movs	r4, r0
 80084d8:	2700      	movs	r7, #0
 80084da:	9b08      	ldr	r3, [sp, #32]
 80084dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80084de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80084e0:	7813      	ldrb	r3, [r2, #0]
 80084e2:	2b2b      	cmp	r3, #43	; 0x2b
 80084e4:	d058      	beq.n	8008598 <_strtod_l+0xe0>
 80084e6:	d844      	bhi.n	8008572 <_strtod_l+0xba>
 80084e8:	2b0d      	cmp	r3, #13
 80084ea:	d83d      	bhi.n	8008568 <_strtod_l+0xb0>
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d83d      	bhi.n	800856c <_strtod_l+0xb4>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d047      	beq.n	8008584 <_strtod_l+0xcc>
 80084f4:	2300      	movs	r3, #0
 80084f6:	930e      	str	r3, [sp, #56]	; 0x38
 80084f8:	2200      	movs	r2, #0
 80084fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80084fc:	920a      	str	r2, [sp, #40]	; 0x28
 80084fe:	9306      	str	r3, [sp, #24]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b30      	cmp	r3, #48	; 0x30
 8008504:	d000      	beq.n	8008508 <_strtod_l+0x50>
 8008506:	e07f      	b.n	8008608 <_strtod_l+0x150>
 8008508:	9b06      	ldr	r3, [sp, #24]
 800850a:	3220      	adds	r2, #32
 800850c:	785b      	ldrb	r3, [r3, #1]
 800850e:	4393      	bics	r3, r2
 8008510:	2b58      	cmp	r3, #88	; 0x58
 8008512:	d000      	beq.n	8008516 <_strtod_l+0x5e>
 8008514:	e06e      	b.n	80085f4 <_strtod_l+0x13c>
 8008516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008518:	9502      	str	r5, [sp, #8]
 800851a:	9301      	str	r3, [sp, #4]
 800851c:	ab20      	add	r3, sp, #128	; 0x80
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	4a95      	ldr	r2, [pc, #596]	; (8008778 <_strtod_l+0x2c0>)
 8008522:	ab21      	add	r3, sp, #132	; 0x84
 8008524:	9805      	ldr	r0, [sp, #20]
 8008526:	a91f      	add	r1, sp, #124	; 0x7c
 8008528:	f001 fd90 	bl	800a04c <__gethex>
 800852c:	2307      	movs	r3, #7
 800852e:	0005      	movs	r5, r0
 8008530:	0004      	movs	r4, r0
 8008532:	401d      	ands	r5, r3
 8008534:	4218      	tst	r0, r3
 8008536:	d006      	beq.n	8008546 <_strtod_l+0x8e>
 8008538:	2d06      	cmp	r5, #6
 800853a:	d12f      	bne.n	800859c <_strtod_l+0xe4>
 800853c:	9b06      	ldr	r3, [sp, #24]
 800853e:	3301      	adds	r3, #1
 8008540:	931f      	str	r3, [sp, #124]	; 0x7c
 8008542:	2300      	movs	r3, #0
 8008544:	930e      	str	r3, [sp, #56]	; 0x38
 8008546:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <_strtod_l+0x9a>
 800854c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800854e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01c      	beq.n	8008592 <_strtod_l+0xda>
 8008558:	2380      	movs	r3, #128	; 0x80
 800855a:	0032      	movs	r2, r6
 800855c:	061b      	lsls	r3, r3, #24
 800855e:	18fb      	adds	r3, r7, r3
 8008560:	0010      	movs	r0, r2
 8008562:	0019      	movs	r1, r3
 8008564:	b025      	add	sp, #148	; 0x94
 8008566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008568:	2b20      	cmp	r3, #32
 800856a:	d1c3      	bne.n	80084f4 <_strtod_l+0x3c>
 800856c:	3201      	adds	r2, #1
 800856e:	921f      	str	r2, [sp, #124]	; 0x7c
 8008570:	e7b5      	b.n	80084de <_strtod_l+0x26>
 8008572:	2b2d      	cmp	r3, #45	; 0x2d
 8008574:	d1be      	bne.n	80084f4 <_strtod_l+0x3c>
 8008576:	3b2c      	subs	r3, #44	; 0x2c
 8008578:	930e      	str	r3, [sp, #56]	; 0x38
 800857a:	1c53      	adds	r3, r2, #1
 800857c:	931f      	str	r3, [sp, #124]	; 0x7c
 800857e:	7853      	ldrb	r3, [r2, #1]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1b9      	bne.n	80084f8 <_strtod_l+0x40>
 8008584:	9b08      	ldr	r3, [sp, #32]
 8008586:	931f      	str	r3, [sp, #124]	; 0x7c
 8008588:	2300      	movs	r3, #0
 800858a:	930e      	str	r3, [sp, #56]	; 0x38
 800858c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1dc      	bne.n	800854c <_strtod_l+0x94>
 8008592:	0032      	movs	r2, r6
 8008594:	003b      	movs	r3, r7
 8008596:	e7e3      	b.n	8008560 <_strtod_l+0xa8>
 8008598:	2300      	movs	r3, #0
 800859a:	e7ed      	b.n	8008578 <_strtod_l+0xc0>
 800859c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800859e:	2a00      	cmp	r2, #0
 80085a0:	d007      	beq.n	80085b2 <_strtod_l+0xfa>
 80085a2:	2135      	movs	r1, #53	; 0x35
 80085a4:	a822      	add	r0, sp, #136	; 0x88
 80085a6:	f002 fd12 	bl	800afce <__copybits>
 80085aa:	9920      	ldr	r1, [sp, #128]	; 0x80
 80085ac:	9805      	ldr	r0, [sp, #20]
 80085ae:	f002 f8cd 	bl	800a74c <_Bfree>
 80085b2:	1e68      	subs	r0, r5, #1
 80085b4:	2804      	cmp	r0, #4
 80085b6:	d806      	bhi.n	80085c6 <_strtod_l+0x10e>
 80085b8:	f7f7 fdac 	bl	8000114 <__gnu_thumb1_case_uqi>
 80085bc:	1816030b 	.word	0x1816030b
 80085c0:	0b          	.byte	0x0b
 80085c1:	00          	.byte	0x00
 80085c2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80085c4:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80085c6:	0723      	lsls	r3, r4, #28
 80085c8:	d5bd      	bpl.n	8008546 <_strtod_l+0x8e>
 80085ca:	2380      	movs	r3, #128	; 0x80
 80085cc:	061b      	lsls	r3, r3, #24
 80085ce:	431f      	orrs	r7, r3
 80085d0:	e7b9      	b.n	8008546 <_strtod_l+0x8e>
 80085d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085d4:	4a69      	ldr	r2, [pc, #420]	; (800877c <_strtod_l+0x2c4>)
 80085d6:	496a      	ldr	r1, [pc, #424]	; (8008780 <_strtod_l+0x2c8>)
 80085d8:	401a      	ands	r2, r3
 80085da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085dc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80085de:	185b      	adds	r3, r3, r1
 80085e0:	051b      	lsls	r3, r3, #20
 80085e2:	431a      	orrs	r2, r3
 80085e4:	0017      	movs	r7, r2
 80085e6:	e7ee      	b.n	80085c6 <_strtod_l+0x10e>
 80085e8:	4f66      	ldr	r7, [pc, #408]	; (8008784 <_strtod_l+0x2cc>)
 80085ea:	e7ec      	b.n	80085c6 <_strtod_l+0x10e>
 80085ec:	2601      	movs	r6, #1
 80085ee:	4f66      	ldr	r7, [pc, #408]	; (8008788 <_strtod_l+0x2d0>)
 80085f0:	4276      	negs	r6, r6
 80085f2:	e7e8      	b.n	80085c6 <_strtod_l+0x10e>
 80085f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	921f      	str	r2, [sp, #124]	; 0x7c
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	2b30      	cmp	r3, #48	; 0x30
 80085fe:	d0f9      	beq.n	80085f4 <_strtod_l+0x13c>
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0a0      	beq.n	8008546 <_strtod_l+0x8e>
 8008604:	2301      	movs	r3, #1
 8008606:	930a      	str	r3, [sp, #40]	; 0x28
 8008608:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800860a:	220a      	movs	r2, #10
 800860c:	9310      	str	r3, [sp, #64]	; 0x40
 800860e:	2300      	movs	r3, #0
 8008610:	930f      	str	r3, [sp, #60]	; 0x3c
 8008612:	930b      	str	r3, [sp, #44]	; 0x2c
 8008614:	9309      	str	r3, [sp, #36]	; 0x24
 8008616:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008618:	7805      	ldrb	r5, [r0, #0]
 800861a:	002b      	movs	r3, r5
 800861c:	3b30      	subs	r3, #48	; 0x30
 800861e:	b2d9      	uxtb	r1, r3
 8008620:	2909      	cmp	r1, #9
 8008622:	d927      	bls.n	8008674 <_strtod_l+0x1bc>
 8008624:	0022      	movs	r2, r4
 8008626:	9907      	ldr	r1, [sp, #28]
 8008628:	f002 feaa 	bl	800b380 <strncmp>
 800862c:	2800      	cmp	r0, #0
 800862e:	d033      	beq.n	8008698 <_strtod_l+0x1e0>
 8008630:	2000      	movs	r0, #0
 8008632:	002b      	movs	r3, r5
 8008634:	4684      	mov	ip, r0
 8008636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008638:	900c      	str	r0, [sp, #48]	; 0x30
 800863a:	9206      	str	r2, [sp, #24]
 800863c:	2220      	movs	r2, #32
 800863e:	0019      	movs	r1, r3
 8008640:	4391      	bics	r1, r2
 8008642:	000a      	movs	r2, r1
 8008644:	2100      	movs	r1, #0
 8008646:	9107      	str	r1, [sp, #28]
 8008648:	2a45      	cmp	r2, #69	; 0x45
 800864a:	d000      	beq.n	800864e <_strtod_l+0x196>
 800864c:	e0c5      	b.n	80087da <_strtod_l+0x322>
 800864e:	9b06      	ldr	r3, [sp, #24]
 8008650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008652:	4303      	orrs	r3, r0
 8008654:	4313      	orrs	r3, r2
 8008656:	428b      	cmp	r3, r1
 8008658:	d094      	beq.n	8008584 <_strtod_l+0xcc>
 800865a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	3301      	adds	r3, #1
 8008660:	931f      	str	r3, [sp, #124]	; 0x7c
 8008662:	9b08      	ldr	r3, [sp, #32]
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	2b2b      	cmp	r3, #43	; 0x2b
 8008668:	d076      	beq.n	8008758 <_strtod_l+0x2a0>
 800866a:	000c      	movs	r4, r1
 800866c:	2b2d      	cmp	r3, #45	; 0x2d
 800866e:	d179      	bne.n	8008764 <_strtod_l+0x2ac>
 8008670:	2401      	movs	r4, #1
 8008672:	e072      	b.n	800875a <_strtod_l+0x2a2>
 8008674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008676:	2908      	cmp	r1, #8
 8008678:	dc09      	bgt.n	800868e <_strtod_l+0x1d6>
 800867a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800867c:	4351      	muls	r1, r2
 800867e:	185b      	adds	r3, r3, r1
 8008680:	930b      	str	r3, [sp, #44]	; 0x2c
 8008682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008684:	3001      	adds	r0, #1
 8008686:	3301      	adds	r3, #1
 8008688:	9309      	str	r3, [sp, #36]	; 0x24
 800868a:	901f      	str	r0, [sp, #124]	; 0x7c
 800868c:	e7c3      	b.n	8008616 <_strtod_l+0x15e>
 800868e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008690:	4351      	muls	r1, r2
 8008692:	185b      	adds	r3, r3, r1
 8008694:	930f      	str	r3, [sp, #60]	; 0x3c
 8008696:	e7f4      	b.n	8008682 <_strtod_l+0x1ca>
 8008698:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800869a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800869c:	191c      	adds	r4, r3, r4
 800869e:	941f      	str	r4, [sp, #124]	; 0x7c
 80086a0:	7823      	ldrb	r3, [r4, #0]
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	d039      	beq.n	800871a <_strtod_l+0x262>
 80086a6:	900c      	str	r0, [sp, #48]	; 0x30
 80086a8:	9206      	str	r2, [sp, #24]
 80086aa:	001a      	movs	r2, r3
 80086ac:	3a30      	subs	r2, #48	; 0x30
 80086ae:	2a09      	cmp	r2, #9
 80086b0:	d912      	bls.n	80086d8 <_strtod_l+0x220>
 80086b2:	2201      	movs	r2, #1
 80086b4:	4694      	mov	ip, r2
 80086b6:	e7c1      	b.n	800863c <_strtod_l+0x184>
 80086b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086ba:	3001      	adds	r0, #1
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	921f      	str	r2, [sp, #124]	; 0x7c
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	2b30      	cmp	r3, #48	; 0x30
 80086c4:	d0f8      	beq.n	80086b8 <_strtod_l+0x200>
 80086c6:	001a      	movs	r2, r3
 80086c8:	3a31      	subs	r2, #49	; 0x31
 80086ca:	2a08      	cmp	r2, #8
 80086cc:	d83f      	bhi.n	800874e <_strtod_l+0x296>
 80086ce:	900c      	str	r0, [sp, #48]	; 0x30
 80086d0:	2000      	movs	r0, #0
 80086d2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80086d4:	9006      	str	r0, [sp, #24]
 80086d6:	9210      	str	r2, [sp, #64]	; 0x40
 80086d8:	001a      	movs	r2, r3
 80086da:	1c41      	adds	r1, r0, #1
 80086dc:	3a30      	subs	r2, #48	; 0x30
 80086de:	2b30      	cmp	r3, #48	; 0x30
 80086e0:	d015      	beq.n	800870e <_strtod_l+0x256>
 80086e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086e4:	185b      	adds	r3, r3, r1
 80086e6:	210a      	movs	r1, #10
 80086e8:	930c      	str	r3, [sp, #48]	; 0x30
 80086ea:	9b06      	ldr	r3, [sp, #24]
 80086ec:	18c4      	adds	r4, r0, r3
 80086ee:	42a3      	cmp	r3, r4
 80086f0:	d115      	bne.n	800871e <_strtod_l+0x266>
 80086f2:	9906      	ldr	r1, [sp, #24]
 80086f4:	9b06      	ldr	r3, [sp, #24]
 80086f6:	3101      	adds	r1, #1
 80086f8:	1809      	adds	r1, r1, r0
 80086fa:	181b      	adds	r3, r3, r0
 80086fc:	9106      	str	r1, [sp, #24]
 80086fe:	2b08      	cmp	r3, #8
 8008700:	dc1b      	bgt.n	800873a <_strtod_l+0x282>
 8008702:	230a      	movs	r3, #10
 8008704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008706:	434b      	muls	r3, r1
 8008708:	2100      	movs	r1, #0
 800870a:	18d3      	adds	r3, r2, r3
 800870c:	930b      	str	r3, [sp, #44]	; 0x2c
 800870e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008710:	0008      	movs	r0, r1
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	921f      	str	r2, [sp, #124]	; 0x7c
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	e7c7      	b.n	80086aa <_strtod_l+0x1f2>
 800871a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800871c:	e7d1      	b.n	80086c2 <_strtod_l+0x20a>
 800871e:	2b08      	cmp	r3, #8
 8008720:	dc04      	bgt.n	800872c <_strtod_l+0x274>
 8008722:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008724:	434d      	muls	r5, r1
 8008726:	950b      	str	r5, [sp, #44]	; 0x2c
 8008728:	3301      	adds	r3, #1
 800872a:	e7e0      	b.n	80086ee <_strtod_l+0x236>
 800872c:	1c5d      	adds	r5, r3, #1
 800872e:	2d10      	cmp	r5, #16
 8008730:	dcfa      	bgt.n	8008728 <_strtod_l+0x270>
 8008732:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008734:	434d      	muls	r5, r1
 8008736:	950f      	str	r5, [sp, #60]	; 0x3c
 8008738:	e7f6      	b.n	8008728 <_strtod_l+0x270>
 800873a:	9b06      	ldr	r3, [sp, #24]
 800873c:	2100      	movs	r1, #0
 800873e:	2b10      	cmp	r3, #16
 8008740:	dce5      	bgt.n	800870e <_strtod_l+0x256>
 8008742:	230a      	movs	r3, #10
 8008744:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008746:	4343      	muls	r3, r0
 8008748:	18d3      	adds	r3, r2, r3
 800874a:	930f      	str	r3, [sp, #60]	; 0x3c
 800874c:	e7df      	b.n	800870e <_strtod_l+0x256>
 800874e:	2200      	movs	r2, #0
 8008750:	920c      	str	r2, [sp, #48]	; 0x30
 8008752:	9206      	str	r2, [sp, #24]
 8008754:	3201      	adds	r2, #1
 8008756:	e7ad      	b.n	80086b4 <_strtod_l+0x1fc>
 8008758:	2400      	movs	r4, #0
 800875a:	9b08      	ldr	r3, [sp, #32]
 800875c:	3302      	adds	r3, #2
 800875e:	931f      	str	r3, [sp, #124]	; 0x7c
 8008760:	9b08      	ldr	r3, [sp, #32]
 8008762:	789b      	ldrb	r3, [r3, #2]
 8008764:	001a      	movs	r2, r3
 8008766:	3a30      	subs	r2, #48	; 0x30
 8008768:	2a09      	cmp	r2, #9
 800876a:	d913      	bls.n	8008794 <_strtod_l+0x2dc>
 800876c:	9a08      	ldr	r2, [sp, #32]
 800876e:	921f      	str	r2, [sp, #124]	; 0x7c
 8008770:	2200      	movs	r2, #0
 8008772:	e031      	b.n	80087d8 <_strtod_l+0x320>
 8008774:	0800c360 	.word	0x0800c360
 8008778:	0800c218 	.word	0x0800c218
 800877c:	ffefffff 	.word	0xffefffff
 8008780:	00000433 	.word	0x00000433
 8008784:	7ff00000 	.word	0x7ff00000
 8008788:	7fffffff 	.word	0x7fffffff
 800878c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	921f      	str	r2, [sp, #124]	; 0x7c
 8008792:	785b      	ldrb	r3, [r3, #1]
 8008794:	2b30      	cmp	r3, #48	; 0x30
 8008796:	d0f9      	beq.n	800878c <_strtod_l+0x2d4>
 8008798:	2200      	movs	r2, #0
 800879a:	9207      	str	r2, [sp, #28]
 800879c:	001a      	movs	r2, r3
 800879e:	3a31      	subs	r2, #49	; 0x31
 80087a0:	2a08      	cmp	r2, #8
 80087a2:	d81a      	bhi.n	80087da <_strtod_l+0x322>
 80087a4:	3b30      	subs	r3, #48	; 0x30
 80087a6:	001a      	movs	r2, r3
 80087a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80087aa:	9307      	str	r3, [sp, #28]
 80087ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80087ae:	1c59      	adds	r1, r3, #1
 80087b0:	911f      	str	r1, [sp, #124]	; 0x7c
 80087b2:	785b      	ldrb	r3, [r3, #1]
 80087b4:	001d      	movs	r5, r3
 80087b6:	3d30      	subs	r5, #48	; 0x30
 80087b8:	2d09      	cmp	r5, #9
 80087ba:	d939      	bls.n	8008830 <_strtod_l+0x378>
 80087bc:	9d07      	ldr	r5, [sp, #28]
 80087be:	1b49      	subs	r1, r1, r5
 80087c0:	4db0      	ldr	r5, [pc, #704]	; (8008a84 <_strtod_l+0x5cc>)
 80087c2:	9507      	str	r5, [sp, #28]
 80087c4:	2908      	cmp	r1, #8
 80087c6:	dc03      	bgt.n	80087d0 <_strtod_l+0x318>
 80087c8:	9207      	str	r2, [sp, #28]
 80087ca:	42aa      	cmp	r2, r5
 80087cc:	dd00      	ble.n	80087d0 <_strtod_l+0x318>
 80087ce:	9507      	str	r5, [sp, #28]
 80087d0:	2c00      	cmp	r4, #0
 80087d2:	d002      	beq.n	80087da <_strtod_l+0x322>
 80087d4:	9a07      	ldr	r2, [sp, #28]
 80087d6:	4252      	negs	r2, r2
 80087d8:	9207      	str	r2, [sp, #28]
 80087da:	9a06      	ldr	r2, [sp, #24]
 80087dc:	2a00      	cmp	r2, #0
 80087de:	d14b      	bne.n	8008878 <_strtod_l+0x3c0>
 80087e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087e2:	4310      	orrs	r0, r2
 80087e4:	d000      	beq.n	80087e8 <_strtod_l+0x330>
 80087e6:	e6ae      	b.n	8008546 <_strtod_l+0x8e>
 80087e8:	4662      	mov	r2, ip
 80087ea:	2a00      	cmp	r2, #0
 80087ec:	d000      	beq.n	80087f0 <_strtod_l+0x338>
 80087ee:	e6c9      	b.n	8008584 <_strtod_l+0xcc>
 80087f0:	2b69      	cmp	r3, #105	; 0x69
 80087f2:	d025      	beq.n	8008840 <_strtod_l+0x388>
 80087f4:	dc21      	bgt.n	800883a <_strtod_l+0x382>
 80087f6:	2b49      	cmp	r3, #73	; 0x49
 80087f8:	d022      	beq.n	8008840 <_strtod_l+0x388>
 80087fa:	2b4e      	cmp	r3, #78	; 0x4e
 80087fc:	d000      	beq.n	8008800 <_strtod_l+0x348>
 80087fe:	e6c1      	b.n	8008584 <_strtod_l+0xcc>
 8008800:	49a1      	ldr	r1, [pc, #644]	; (8008a88 <_strtod_l+0x5d0>)
 8008802:	a81f      	add	r0, sp, #124	; 0x7c
 8008804:	f001 fe70 	bl	800a4e8 <__match>
 8008808:	2800      	cmp	r0, #0
 800880a:	d100      	bne.n	800880e <_strtod_l+0x356>
 800880c:	e6ba      	b.n	8008584 <_strtod_l+0xcc>
 800880e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b28      	cmp	r3, #40	; 0x28
 8008814:	d12a      	bne.n	800886c <_strtod_l+0x3b4>
 8008816:	499d      	ldr	r1, [pc, #628]	; (8008a8c <_strtod_l+0x5d4>)
 8008818:	aa22      	add	r2, sp, #136	; 0x88
 800881a:	a81f      	add	r0, sp, #124	; 0x7c
 800881c:	f001 fe78 	bl	800a510 <__hexnan>
 8008820:	2805      	cmp	r0, #5
 8008822:	d123      	bne.n	800886c <_strtod_l+0x3b4>
 8008824:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008826:	4a9a      	ldr	r2, [pc, #616]	; (8008a90 <_strtod_l+0x5d8>)
 8008828:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800882a:	431a      	orrs	r2, r3
 800882c:	0017      	movs	r7, r2
 800882e:	e68a      	b.n	8008546 <_strtod_l+0x8e>
 8008830:	210a      	movs	r1, #10
 8008832:	434a      	muls	r2, r1
 8008834:	18d2      	adds	r2, r2, r3
 8008836:	3a30      	subs	r2, #48	; 0x30
 8008838:	e7b8      	b.n	80087ac <_strtod_l+0x2f4>
 800883a:	2b6e      	cmp	r3, #110	; 0x6e
 800883c:	d0e0      	beq.n	8008800 <_strtod_l+0x348>
 800883e:	e6a1      	b.n	8008584 <_strtod_l+0xcc>
 8008840:	4994      	ldr	r1, [pc, #592]	; (8008a94 <_strtod_l+0x5dc>)
 8008842:	a81f      	add	r0, sp, #124	; 0x7c
 8008844:	f001 fe50 	bl	800a4e8 <__match>
 8008848:	2800      	cmp	r0, #0
 800884a:	d100      	bne.n	800884e <_strtod_l+0x396>
 800884c:	e69a      	b.n	8008584 <_strtod_l+0xcc>
 800884e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008850:	4991      	ldr	r1, [pc, #580]	; (8008a98 <_strtod_l+0x5e0>)
 8008852:	3b01      	subs	r3, #1
 8008854:	a81f      	add	r0, sp, #124	; 0x7c
 8008856:	931f      	str	r3, [sp, #124]	; 0x7c
 8008858:	f001 fe46 	bl	800a4e8 <__match>
 800885c:	2800      	cmp	r0, #0
 800885e:	d102      	bne.n	8008866 <_strtod_l+0x3ae>
 8008860:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008862:	3301      	adds	r3, #1
 8008864:	931f      	str	r3, [sp, #124]	; 0x7c
 8008866:	2600      	movs	r6, #0
 8008868:	4f89      	ldr	r7, [pc, #548]	; (8008a90 <_strtod_l+0x5d8>)
 800886a:	e66c      	b.n	8008546 <_strtod_l+0x8e>
 800886c:	488b      	ldr	r0, [pc, #556]	; (8008a9c <_strtod_l+0x5e4>)
 800886e:	f002 fd81 	bl	800b374 <nan>
 8008872:	0006      	movs	r6, r0
 8008874:	000f      	movs	r7, r1
 8008876:	e666      	b.n	8008546 <_strtod_l+0x8e>
 8008878:	9b07      	ldr	r3, [sp, #28]
 800887a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800887c:	1a9b      	subs	r3, r3, r2
 800887e:	930a      	str	r3, [sp, #40]	; 0x28
 8008880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <_strtod_l+0x3d2>
 8008886:	9b06      	ldr	r3, [sp, #24]
 8008888:	9309      	str	r3, [sp, #36]	; 0x24
 800888a:	9c06      	ldr	r4, [sp, #24]
 800888c:	2c10      	cmp	r4, #16
 800888e:	dd00      	ble.n	8008892 <_strtod_l+0x3da>
 8008890:	2410      	movs	r4, #16
 8008892:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008894:	f7f9 fd22 	bl	80022dc <__aeabi_ui2d>
 8008898:	9b06      	ldr	r3, [sp, #24]
 800889a:	0006      	movs	r6, r0
 800889c:	000f      	movs	r7, r1
 800889e:	2b09      	cmp	r3, #9
 80088a0:	dd15      	ble.n	80088ce <_strtod_l+0x416>
 80088a2:	0022      	movs	r2, r4
 80088a4:	4b7e      	ldr	r3, [pc, #504]	; (8008aa0 <_strtod_l+0x5e8>)
 80088a6:	3a09      	subs	r2, #9
 80088a8:	00d2      	lsls	r2, r2, #3
 80088aa:	189b      	adds	r3, r3, r2
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f7f8 fe92 	bl	80015d8 <__aeabi_dmul>
 80088b4:	0006      	movs	r6, r0
 80088b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80088b8:	000f      	movs	r7, r1
 80088ba:	f7f9 fd0f 	bl	80022dc <__aeabi_ui2d>
 80088be:	0002      	movs	r2, r0
 80088c0:	000b      	movs	r3, r1
 80088c2:	0030      	movs	r0, r6
 80088c4:	0039      	movs	r1, r7
 80088c6:	f7f7 ff49 	bl	800075c <__aeabi_dadd>
 80088ca:	0006      	movs	r6, r0
 80088cc:	000f      	movs	r7, r1
 80088ce:	9b06      	ldr	r3, [sp, #24]
 80088d0:	2b0f      	cmp	r3, #15
 80088d2:	dc39      	bgt.n	8008948 <_strtod_l+0x490>
 80088d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d100      	bne.n	80088dc <_strtod_l+0x424>
 80088da:	e634      	b.n	8008546 <_strtod_l+0x8e>
 80088dc:	dd24      	ble.n	8008928 <_strtod_l+0x470>
 80088de:	2b16      	cmp	r3, #22
 80088e0:	dc09      	bgt.n	80088f6 <_strtod_l+0x43e>
 80088e2:	496f      	ldr	r1, [pc, #444]	; (8008aa0 <_strtod_l+0x5e8>)
 80088e4:	00db      	lsls	r3, r3, #3
 80088e6:	18c9      	adds	r1, r1, r3
 80088e8:	0032      	movs	r2, r6
 80088ea:	6808      	ldr	r0, [r1, #0]
 80088ec:	6849      	ldr	r1, [r1, #4]
 80088ee:	003b      	movs	r3, r7
 80088f0:	f7f8 fe72 	bl	80015d8 <__aeabi_dmul>
 80088f4:	e7bd      	b.n	8008872 <_strtod_l+0x3ba>
 80088f6:	2325      	movs	r3, #37	; 0x25
 80088f8:	9a06      	ldr	r2, [sp, #24]
 80088fa:	1a9b      	subs	r3, r3, r2
 80088fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088fe:	4293      	cmp	r3, r2
 8008900:	db22      	blt.n	8008948 <_strtod_l+0x490>
 8008902:	240f      	movs	r4, #15
 8008904:	9b06      	ldr	r3, [sp, #24]
 8008906:	4d66      	ldr	r5, [pc, #408]	; (8008aa0 <_strtod_l+0x5e8>)
 8008908:	1ae4      	subs	r4, r4, r3
 800890a:	00e1      	lsls	r1, r4, #3
 800890c:	1869      	adds	r1, r5, r1
 800890e:	0032      	movs	r2, r6
 8008910:	6808      	ldr	r0, [r1, #0]
 8008912:	6849      	ldr	r1, [r1, #4]
 8008914:	003b      	movs	r3, r7
 8008916:	f7f8 fe5f 	bl	80015d8 <__aeabi_dmul>
 800891a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891c:	1b1c      	subs	r4, r3, r4
 800891e:	00e4      	lsls	r4, r4, #3
 8008920:	192c      	adds	r4, r5, r4
 8008922:	6822      	ldr	r2, [r4, #0]
 8008924:	6863      	ldr	r3, [r4, #4]
 8008926:	e7e3      	b.n	80088f0 <_strtod_l+0x438>
 8008928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892a:	3316      	adds	r3, #22
 800892c:	db0c      	blt.n	8008948 <_strtod_l+0x490>
 800892e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008930:	9a07      	ldr	r2, [sp, #28]
 8008932:	0030      	movs	r0, r6
 8008934:	1a9a      	subs	r2, r3, r2
 8008936:	4b5a      	ldr	r3, [pc, #360]	; (8008aa0 <_strtod_l+0x5e8>)
 8008938:	00d2      	lsls	r2, r2, #3
 800893a:	189b      	adds	r3, r3, r2
 800893c:	0039      	movs	r1, r7
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f7f8 fa47 	bl	8000dd4 <__aeabi_ddiv>
 8008946:	e794      	b.n	8008872 <_strtod_l+0x3ba>
 8008948:	9b06      	ldr	r3, [sp, #24]
 800894a:	1b1c      	subs	r4, r3, r4
 800894c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800894e:	18e4      	adds	r4, r4, r3
 8008950:	2c00      	cmp	r4, #0
 8008952:	dd72      	ble.n	8008a3a <_strtod_l+0x582>
 8008954:	230f      	movs	r3, #15
 8008956:	0021      	movs	r1, r4
 8008958:	4019      	ands	r1, r3
 800895a:	421c      	tst	r4, r3
 800895c:	d00a      	beq.n	8008974 <_strtod_l+0x4bc>
 800895e:	00cb      	lsls	r3, r1, #3
 8008960:	494f      	ldr	r1, [pc, #316]	; (8008aa0 <_strtod_l+0x5e8>)
 8008962:	0032      	movs	r2, r6
 8008964:	18c9      	adds	r1, r1, r3
 8008966:	6808      	ldr	r0, [r1, #0]
 8008968:	6849      	ldr	r1, [r1, #4]
 800896a:	003b      	movs	r3, r7
 800896c:	f7f8 fe34 	bl	80015d8 <__aeabi_dmul>
 8008970:	0006      	movs	r6, r0
 8008972:	000f      	movs	r7, r1
 8008974:	230f      	movs	r3, #15
 8008976:	439c      	bics	r4, r3
 8008978:	d04a      	beq.n	8008a10 <_strtod_l+0x558>
 800897a:	3326      	adds	r3, #38	; 0x26
 800897c:	33ff      	adds	r3, #255	; 0xff
 800897e:	429c      	cmp	r4, r3
 8008980:	dd22      	ble.n	80089c8 <_strtod_l+0x510>
 8008982:	2300      	movs	r3, #0
 8008984:	9306      	str	r3, [sp, #24]
 8008986:	9307      	str	r3, [sp, #28]
 8008988:	930b      	str	r3, [sp, #44]	; 0x2c
 800898a:	9309      	str	r3, [sp, #36]	; 0x24
 800898c:	2322      	movs	r3, #34	; 0x22
 800898e:	2600      	movs	r6, #0
 8008990:	9a05      	ldr	r2, [sp, #20]
 8008992:	4f3f      	ldr	r7, [pc, #252]	; (8008a90 <_strtod_l+0x5d8>)
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008998:	42b3      	cmp	r3, r6
 800899a:	d100      	bne.n	800899e <_strtod_l+0x4e6>
 800899c:	e5d3      	b.n	8008546 <_strtod_l+0x8e>
 800899e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80089a0:	9805      	ldr	r0, [sp, #20]
 80089a2:	f001 fed3 	bl	800a74c <_Bfree>
 80089a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089a8:	9805      	ldr	r0, [sp, #20]
 80089aa:	f001 fecf 	bl	800a74c <_Bfree>
 80089ae:	9907      	ldr	r1, [sp, #28]
 80089b0:	9805      	ldr	r0, [sp, #20]
 80089b2:	f001 fecb 	bl	800a74c <_Bfree>
 80089b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089b8:	9805      	ldr	r0, [sp, #20]
 80089ba:	f001 fec7 	bl	800a74c <_Bfree>
 80089be:	9906      	ldr	r1, [sp, #24]
 80089c0:	9805      	ldr	r0, [sp, #20]
 80089c2:	f001 fec3 	bl	800a74c <_Bfree>
 80089c6:	e5be      	b.n	8008546 <_strtod_l+0x8e>
 80089c8:	2300      	movs	r3, #0
 80089ca:	0030      	movs	r0, r6
 80089cc:	0039      	movs	r1, r7
 80089ce:	4d35      	ldr	r5, [pc, #212]	; (8008aa4 <_strtod_l+0x5ec>)
 80089d0:	1124      	asrs	r4, r4, #4
 80089d2:	9308      	str	r3, [sp, #32]
 80089d4:	2c01      	cmp	r4, #1
 80089d6:	dc1e      	bgt.n	8008a16 <_strtod_l+0x55e>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <_strtod_l+0x528>
 80089dc:	0006      	movs	r6, r0
 80089de:	000f      	movs	r7, r1
 80089e0:	4b31      	ldr	r3, [pc, #196]	; (8008aa8 <_strtod_l+0x5f0>)
 80089e2:	0032      	movs	r2, r6
 80089e4:	18ff      	adds	r7, r7, r3
 80089e6:	9b08      	ldr	r3, [sp, #32]
 80089e8:	00dd      	lsls	r5, r3, #3
 80089ea:	4b2e      	ldr	r3, [pc, #184]	; (8008aa4 <_strtod_l+0x5ec>)
 80089ec:	195d      	adds	r5, r3, r5
 80089ee:	6828      	ldr	r0, [r5, #0]
 80089f0:	6869      	ldr	r1, [r5, #4]
 80089f2:	003b      	movs	r3, r7
 80089f4:	f7f8 fdf0 	bl	80015d8 <__aeabi_dmul>
 80089f8:	4b25      	ldr	r3, [pc, #148]	; (8008a90 <_strtod_l+0x5d8>)
 80089fa:	4a2c      	ldr	r2, [pc, #176]	; (8008aac <_strtod_l+0x5f4>)
 80089fc:	0006      	movs	r6, r0
 80089fe:	400b      	ands	r3, r1
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d8be      	bhi.n	8008982 <_strtod_l+0x4ca>
 8008a04:	4a2a      	ldr	r2, [pc, #168]	; (8008ab0 <_strtod_l+0x5f8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d913      	bls.n	8008a32 <_strtod_l+0x57a>
 8008a0a:	2601      	movs	r6, #1
 8008a0c:	4f29      	ldr	r7, [pc, #164]	; (8008ab4 <_strtod_l+0x5fc>)
 8008a0e:	4276      	negs	r6, r6
 8008a10:	2300      	movs	r3, #0
 8008a12:	9308      	str	r3, [sp, #32]
 8008a14:	e087      	b.n	8008b26 <_strtod_l+0x66e>
 8008a16:	2201      	movs	r2, #1
 8008a18:	4214      	tst	r4, r2
 8008a1a:	d004      	beq.n	8008a26 <_strtod_l+0x56e>
 8008a1c:	682a      	ldr	r2, [r5, #0]
 8008a1e:	686b      	ldr	r3, [r5, #4]
 8008a20:	f7f8 fdda 	bl	80015d8 <__aeabi_dmul>
 8008a24:	2301      	movs	r3, #1
 8008a26:	9a08      	ldr	r2, [sp, #32]
 8008a28:	1064      	asrs	r4, r4, #1
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	9208      	str	r2, [sp, #32]
 8008a2e:	3508      	adds	r5, #8
 8008a30:	e7d0      	b.n	80089d4 <_strtod_l+0x51c>
 8008a32:	23d4      	movs	r3, #212	; 0xd4
 8008a34:	049b      	lsls	r3, r3, #18
 8008a36:	18cf      	adds	r7, r1, r3
 8008a38:	e7ea      	b.n	8008a10 <_strtod_l+0x558>
 8008a3a:	2c00      	cmp	r4, #0
 8008a3c:	d0e8      	beq.n	8008a10 <_strtod_l+0x558>
 8008a3e:	4264      	negs	r4, r4
 8008a40:	220f      	movs	r2, #15
 8008a42:	0023      	movs	r3, r4
 8008a44:	4013      	ands	r3, r2
 8008a46:	4214      	tst	r4, r2
 8008a48:	d00a      	beq.n	8008a60 <_strtod_l+0x5a8>
 8008a4a:	00da      	lsls	r2, r3, #3
 8008a4c:	4b14      	ldr	r3, [pc, #80]	; (8008aa0 <_strtod_l+0x5e8>)
 8008a4e:	0030      	movs	r0, r6
 8008a50:	189b      	adds	r3, r3, r2
 8008a52:	0039      	movs	r1, r7
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f7f8 f9bc 	bl	8000dd4 <__aeabi_ddiv>
 8008a5c:	0006      	movs	r6, r0
 8008a5e:	000f      	movs	r7, r1
 8008a60:	1124      	asrs	r4, r4, #4
 8008a62:	d0d5      	beq.n	8008a10 <_strtod_l+0x558>
 8008a64:	2c1f      	cmp	r4, #31
 8008a66:	dd27      	ble.n	8008ab8 <_strtod_l+0x600>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	9306      	str	r3, [sp, #24]
 8008a6c:	9307      	str	r3, [sp, #28]
 8008a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a70:	9309      	str	r3, [sp, #36]	; 0x24
 8008a72:	2322      	movs	r3, #34	; 0x22
 8008a74:	9a05      	ldr	r2, [sp, #20]
 8008a76:	2600      	movs	r6, #0
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7c:	2700      	movs	r7, #0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d18d      	bne.n	800899e <_strtod_l+0x4e6>
 8008a82:	e560      	b.n	8008546 <_strtod_l+0x8e>
 8008a84:	00004e1f 	.word	0x00004e1f
 8008a88:	0800c1e9 	.word	0x0800c1e9
 8008a8c:	0800c22c 	.word	0x0800c22c
 8008a90:	7ff00000 	.word	0x7ff00000
 8008a94:	0800c1e1 	.word	0x0800c1e1
 8008a98:	0800c26b 	.word	0x0800c26b
 8008a9c:	0800c518 	.word	0x0800c518
 8008aa0:	0800c3f8 	.word	0x0800c3f8
 8008aa4:	0800c3d0 	.word	0x0800c3d0
 8008aa8:	fcb00000 	.word	0xfcb00000
 8008aac:	7ca00000 	.word	0x7ca00000
 8008ab0:	7c900000 	.word	0x7c900000
 8008ab4:	7fefffff 	.word	0x7fefffff
 8008ab8:	2310      	movs	r3, #16
 8008aba:	0022      	movs	r2, r4
 8008abc:	401a      	ands	r2, r3
 8008abe:	9208      	str	r2, [sp, #32]
 8008ac0:	421c      	tst	r4, r3
 8008ac2:	d001      	beq.n	8008ac8 <_strtod_l+0x610>
 8008ac4:	335a      	adds	r3, #90	; 0x5a
 8008ac6:	9308      	str	r3, [sp, #32]
 8008ac8:	0030      	movs	r0, r6
 8008aca:	0039      	movs	r1, r7
 8008acc:	2300      	movs	r3, #0
 8008ace:	4dc5      	ldr	r5, [pc, #788]	; (8008de4 <_strtod_l+0x92c>)
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	4214      	tst	r4, r2
 8008ad4:	d004      	beq.n	8008ae0 <_strtod_l+0x628>
 8008ad6:	682a      	ldr	r2, [r5, #0]
 8008ad8:	686b      	ldr	r3, [r5, #4]
 8008ada:	f7f8 fd7d 	bl	80015d8 <__aeabi_dmul>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	1064      	asrs	r4, r4, #1
 8008ae2:	3508      	adds	r5, #8
 8008ae4:	2c00      	cmp	r4, #0
 8008ae6:	d1f3      	bne.n	8008ad0 <_strtod_l+0x618>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <_strtod_l+0x638>
 8008aec:	0006      	movs	r6, r0
 8008aee:	000f      	movs	r7, r1
 8008af0:	9b08      	ldr	r3, [sp, #32]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00f      	beq.n	8008b16 <_strtod_l+0x65e>
 8008af6:	236b      	movs	r3, #107	; 0x6b
 8008af8:	007a      	lsls	r2, r7, #1
 8008afa:	0d52      	lsrs	r2, r2, #21
 8008afc:	0039      	movs	r1, r7
 8008afe:	1a9b      	subs	r3, r3, r2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dd08      	ble.n	8008b16 <_strtod_l+0x65e>
 8008b04:	2b1f      	cmp	r3, #31
 8008b06:	dc00      	bgt.n	8008b0a <_strtod_l+0x652>
 8008b08:	e124      	b.n	8008d54 <_strtod_l+0x89c>
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	2b34      	cmp	r3, #52	; 0x34
 8008b0e:	dc00      	bgt.n	8008b12 <_strtod_l+0x65a>
 8008b10:	e119      	b.n	8008d46 <_strtod_l+0x88e>
 8008b12:	27dc      	movs	r7, #220	; 0xdc
 8008b14:	04bf      	lsls	r7, r7, #18
 8008b16:	2200      	movs	r2, #0
 8008b18:	2300      	movs	r3, #0
 8008b1a:	0030      	movs	r0, r6
 8008b1c:	0039      	movs	r1, r7
 8008b1e:	f7f7 fc93 	bl	8000448 <__aeabi_dcmpeq>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d1a0      	bne.n	8008a68 <_strtod_l+0x5b0>
 8008b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b2e:	9b06      	ldr	r3, [sp, #24]
 8008b30:	9805      	ldr	r0, [sp, #20]
 8008b32:	f001 fe73 	bl	800a81c <__s2b>
 8008b36:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d100      	bne.n	8008b3e <_strtod_l+0x686>
 8008b3c:	e721      	b.n	8008982 <_strtod_l+0x4ca>
 8008b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b40:	9907      	ldr	r1, [sp, #28]
 8008b42:	17da      	asrs	r2, r3, #31
 8008b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b46:	1a5b      	subs	r3, r3, r1
 8008b48:	401a      	ands	r2, r3
 8008b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4c:	9215      	str	r2, [sp, #84]	; 0x54
 8008b4e:	43db      	mvns	r3, r3
 8008b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b52:	17db      	asrs	r3, r3, #31
 8008b54:	401a      	ands	r2, r3
 8008b56:	2300      	movs	r3, #0
 8008b58:	921a      	str	r2, [sp, #104]	; 0x68
 8008b5a:	9306      	str	r3, [sp, #24]
 8008b5c:	9307      	str	r3, [sp, #28]
 8008b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b60:	9805      	ldr	r0, [sp, #20]
 8008b62:	6859      	ldr	r1, [r3, #4]
 8008b64:	f001 fdae 	bl	800a6c4 <_Balloc>
 8008b68:	9009      	str	r0, [sp, #36]	; 0x24
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d100      	bne.n	8008b70 <_strtod_l+0x6b8>
 8008b6e:	e70d      	b.n	800898c <_strtod_l+0x4d4>
 8008b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	310c      	adds	r1, #12
 8008b78:	1c9a      	adds	r2, r3, #2
 8008b7a:	0092      	lsls	r2, r2, #2
 8008b7c:	300c      	adds	r0, #12
 8008b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b80:	f7fe fce2 	bl	8007548 <memcpy>
 8008b84:	ab22      	add	r3, sp, #136	; 0x88
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	ab21      	add	r3, sp, #132	; 0x84
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	0032      	movs	r2, r6
 8008b8e:	003b      	movs	r3, r7
 8008b90:	9805      	ldr	r0, [sp, #20]
 8008b92:	9612      	str	r6, [sp, #72]	; 0x48
 8008b94:	9713      	str	r7, [sp, #76]	; 0x4c
 8008b96:	f002 f98d 	bl	800aeb4 <__d2b>
 8008b9a:	9020      	str	r0, [sp, #128]	; 0x80
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d100      	bne.n	8008ba2 <_strtod_l+0x6ea>
 8008ba0:	e6f4      	b.n	800898c <_strtod_l+0x4d4>
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	9805      	ldr	r0, [sp, #20]
 8008ba6:	f001 fecd 	bl	800a944 <__i2b>
 8008baa:	9007      	str	r0, [sp, #28]
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d100      	bne.n	8008bb2 <_strtod_l+0x6fa>
 8008bb0:	e6ec      	b.n	800898c <_strtod_l+0x4d4>
 8008bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008bb6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008bb8:	1ad4      	subs	r4, r2, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	db01      	blt.n	8008bc2 <_strtod_l+0x70a>
 8008bbe:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8008bc0:	195d      	adds	r5, r3, r5
 8008bc2:	9908      	ldr	r1, [sp, #32]
 8008bc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008bc6:	1a5b      	subs	r3, r3, r1
 8008bc8:	2136      	movs	r1, #54	; 0x36
 8008bca:	189b      	adds	r3, r3, r2
 8008bcc:	1a8a      	subs	r2, r1, r2
 8008bce:	4986      	ldr	r1, [pc, #536]	; (8008de8 <_strtod_l+0x930>)
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	468c      	mov	ip, r1
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	9110      	str	r1, [sp, #64]	; 0x40
 8008bda:	9014      	str	r0, [sp, #80]	; 0x50
 8008bdc:	4563      	cmp	r3, ip
 8008bde:	da07      	bge.n	8008bf0 <_strtod_l+0x738>
 8008be0:	4661      	mov	r1, ip
 8008be2:	1ac9      	subs	r1, r1, r3
 8008be4:	1a52      	subs	r2, r2, r1
 8008be6:	291f      	cmp	r1, #31
 8008be8:	dd00      	ble.n	8008bec <_strtod_l+0x734>
 8008bea:	e0b8      	b.n	8008d5e <_strtod_l+0x8a6>
 8008bec:	4088      	lsls	r0, r1
 8008bee:	9014      	str	r0, [sp, #80]	; 0x50
 8008bf0:	18ab      	adds	r3, r5, r2
 8008bf2:	930c      	str	r3, [sp, #48]	; 0x30
 8008bf4:	18a4      	adds	r4, r4, r2
 8008bf6:	9b08      	ldr	r3, [sp, #32]
 8008bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bfa:	191c      	adds	r4, r3, r4
 8008bfc:	002b      	movs	r3, r5
 8008bfe:	4295      	cmp	r5, r2
 8008c00:	dd00      	ble.n	8008c04 <_strtod_l+0x74c>
 8008c02:	0013      	movs	r3, r2
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	dd00      	ble.n	8008c0a <_strtod_l+0x752>
 8008c08:	0023      	movs	r3, r4
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	dd04      	ble.n	8008c18 <_strtod_l+0x760>
 8008c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c10:	1ae4      	subs	r4, r4, r3
 8008c12:	1ad2      	subs	r2, r2, r3
 8008c14:	920c      	str	r2, [sp, #48]	; 0x30
 8008c16:	1aed      	subs	r5, r5, r3
 8008c18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	dd17      	ble.n	8008c4e <_strtod_l+0x796>
 8008c1e:	001a      	movs	r2, r3
 8008c20:	9907      	ldr	r1, [sp, #28]
 8008c22:	9805      	ldr	r0, [sp, #20]
 8008c24:	f001 ff54 	bl	800aad0 <__pow5mult>
 8008c28:	9007      	str	r0, [sp, #28]
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d100      	bne.n	8008c30 <_strtod_l+0x778>
 8008c2e:	e6ad      	b.n	800898c <_strtod_l+0x4d4>
 8008c30:	0001      	movs	r1, r0
 8008c32:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008c34:	9805      	ldr	r0, [sp, #20]
 8008c36:	f001 fe9b 	bl	800a970 <__multiply>
 8008c3a:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d100      	bne.n	8008c42 <_strtod_l+0x78a>
 8008c40:	e6a4      	b.n	800898c <_strtod_l+0x4d4>
 8008c42:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008c44:	9805      	ldr	r0, [sp, #20]
 8008c46:	f001 fd81 	bl	800a74c <_Bfree>
 8008c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c4c:	9320      	str	r3, [sp, #128]	; 0x80
 8008c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dd00      	ble.n	8008c56 <_strtod_l+0x79e>
 8008c54:	e089      	b.n	8008d6a <_strtod_l+0x8b2>
 8008c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	dd08      	ble.n	8008c6e <_strtod_l+0x7b6>
 8008c5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008c5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c60:	9805      	ldr	r0, [sp, #20]
 8008c62:	f001 ff35 	bl	800aad0 <__pow5mult>
 8008c66:	9009      	str	r0, [sp, #36]	; 0x24
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d100      	bne.n	8008c6e <_strtod_l+0x7b6>
 8008c6c:	e68e      	b.n	800898c <_strtod_l+0x4d4>
 8008c6e:	2c00      	cmp	r4, #0
 8008c70:	dd08      	ble.n	8008c84 <_strtod_l+0x7cc>
 8008c72:	0022      	movs	r2, r4
 8008c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c76:	9805      	ldr	r0, [sp, #20]
 8008c78:	f001 ff86 	bl	800ab88 <__lshift>
 8008c7c:	9009      	str	r0, [sp, #36]	; 0x24
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d100      	bne.n	8008c84 <_strtod_l+0x7cc>
 8008c82:	e683      	b.n	800898c <_strtod_l+0x4d4>
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	dd08      	ble.n	8008c9a <_strtod_l+0x7e2>
 8008c88:	002a      	movs	r2, r5
 8008c8a:	9907      	ldr	r1, [sp, #28]
 8008c8c:	9805      	ldr	r0, [sp, #20]
 8008c8e:	f001 ff7b 	bl	800ab88 <__lshift>
 8008c92:	9007      	str	r0, [sp, #28]
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d100      	bne.n	8008c9a <_strtod_l+0x7e2>
 8008c98:	e678      	b.n	800898c <_strtod_l+0x4d4>
 8008c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c9c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008c9e:	9805      	ldr	r0, [sp, #20]
 8008ca0:	f001 fffc 	bl	800ac9c <__mdiff>
 8008ca4:	9006      	str	r0, [sp, #24]
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d100      	bne.n	8008cac <_strtod_l+0x7f4>
 8008caa:	e66f      	b.n	800898c <_strtod_l+0x4d4>
 8008cac:	2200      	movs	r2, #0
 8008cae:	68c3      	ldr	r3, [r0, #12]
 8008cb0:	9907      	ldr	r1, [sp, #28]
 8008cb2:	60c2      	str	r2, [r0, #12]
 8008cb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cb6:	f001 ffd5 	bl	800ac64 <__mcmp>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	da5f      	bge.n	8008d7e <_strtod_l+0x8c6>
 8008cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cc0:	4333      	orrs	r3, r6
 8008cc2:	d000      	beq.n	8008cc6 <_strtod_l+0x80e>
 8008cc4:	e08a      	b.n	8008ddc <_strtod_l+0x924>
 8008cc6:	033b      	lsls	r3, r7, #12
 8008cc8:	d000      	beq.n	8008ccc <_strtod_l+0x814>
 8008cca:	e087      	b.n	8008ddc <_strtod_l+0x924>
 8008ccc:	22d6      	movs	r2, #214	; 0xd6
 8008cce:	4b47      	ldr	r3, [pc, #284]	; (8008dec <_strtod_l+0x934>)
 8008cd0:	04d2      	lsls	r2, r2, #19
 8008cd2:	403b      	ands	r3, r7
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d800      	bhi.n	8008cda <_strtod_l+0x822>
 8008cd8:	e080      	b.n	8008ddc <_strtod_l+0x924>
 8008cda:	9b06      	ldr	r3, [sp, #24]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	930a      	str	r3, [sp, #40]	; 0x28
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <_strtod_l+0x836>
 8008ce4:	9b06      	ldr	r3, [sp, #24]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	dd76      	ble.n	8008ddc <_strtod_l+0x924>
 8008cee:	9906      	ldr	r1, [sp, #24]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	9805      	ldr	r0, [sp, #20]
 8008cf4:	f001 ff48 	bl	800ab88 <__lshift>
 8008cf8:	9907      	ldr	r1, [sp, #28]
 8008cfa:	9006      	str	r0, [sp, #24]
 8008cfc:	f001 ffb2 	bl	800ac64 <__mcmp>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	dd6b      	ble.n	8008ddc <_strtod_l+0x924>
 8008d04:	9908      	ldr	r1, [sp, #32]
 8008d06:	003b      	movs	r3, r7
 8008d08:	4a38      	ldr	r2, [pc, #224]	; (8008dec <_strtod_l+0x934>)
 8008d0a:	2900      	cmp	r1, #0
 8008d0c:	d100      	bne.n	8008d10 <_strtod_l+0x858>
 8008d0e:	e092      	b.n	8008e36 <_strtod_l+0x97e>
 8008d10:	0011      	movs	r1, r2
 8008d12:	20d6      	movs	r0, #214	; 0xd6
 8008d14:	4039      	ands	r1, r7
 8008d16:	04c0      	lsls	r0, r0, #19
 8008d18:	4281      	cmp	r1, r0
 8008d1a:	dd00      	ble.n	8008d1e <_strtod_l+0x866>
 8008d1c:	e08b      	b.n	8008e36 <_strtod_l+0x97e>
 8008d1e:	23dc      	movs	r3, #220	; 0xdc
 8008d20:	049b      	lsls	r3, r3, #18
 8008d22:	4299      	cmp	r1, r3
 8008d24:	dc00      	bgt.n	8008d28 <_strtod_l+0x870>
 8008d26:	e6a4      	b.n	8008a72 <_strtod_l+0x5ba>
 8008d28:	0030      	movs	r0, r6
 8008d2a:	0039      	movs	r1, r7
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4b30      	ldr	r3, [pc, #192]	; (8008df0 <_strtod_l+0x938>)
 8008d30:	f7f8 fc52 	bl	80015d8 <__aeabi_dmul>
 8008d34:	0006      	movs	r6, r0
 8008d36:	000f      	movs	r7, r1
 8008d38:	4308      	orrs	r0, r1
 8008d3a:	d000      	beq.n	8008d3e <_strtod_l+0x886>
 8008d3c:	e62f      	b.n	800899e <_strtod_l+0x4e6>
 8008d3e:	2322      	movs	r3, #34	; 0x22
 8008d40:	9a05      	ldr	r2, [sp, #20]
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	e62b      	b.n	800899e <_strtod_l+0x4e6>
 8008d46:	234b      	movs	r3, #75	; 0x4b
 8008d48:	1a9a      	subs	r2, r3, r2
 8008d4a:	3b4c      	subs	r3, #76	; 0x4c
 8008d4c:	4093      	lsls	r3, r2
 8008d4e:	4019      	ands	r1, r3
 8008d50:	000f      	movs	r7, r1
 8008d52:	e6e0      	b.n	8008b16 <_strtod_l+0x65e>
 8008d54:	2201      	movs	r2, #1
 8008d56:	4252      	negs	r2, r2
 8008d58:	409a      	lsls	r2, r3
 8008d5a:	4016      	ands	r6, r2
 8008d5c:	e6db      	b.n	8008b16 <_strtod_l+0x65e>
 8008d5e:	4925      	ldr	r1, [pc, #148]	; (8008df4 <_strtod_l+0x93c>)
 8008d60:	1acb      	subs	r3, r1, r3
 8008d62:	0001      	movs	r1, r0
 8008d64:	4099      	lsls	r1, r3
 8008d66:	9110      	str	r1, [sp, #64]	; 0x40
 8008d68:	e741      	b.n	8008bee <_strtod_l+0x736>
 8008d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d6c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008d6e:	9805      	ldr	r0, [sp, #20]
 8008d70:	f001 ff0a 	bl	800ab88 <__lshift>
 8008d74:	9020      	str	r0, [sp, #128]	; 0x80
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d000      	beq.n	8008d7c <_strtod_l+0x8c4>
 8008d7a:	e76c      	b.n	8008c56 <_strtod_l+0x79e>
 8008d7c:	e606      	b.n	800898c <_strtod_l+0x4d4>
 8008d7e:	970c      	str	r7, [sp, #48]	; 0x30
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d176      	bne.n	8008e72 <_strtod_l+0x9ba>
 8008d84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d86:	033b      	lsls	r3, r7, #12
 8008d88:	0b1b      	lsrs	r3, r3, #12
 8008d8a:	2a00      	cmp	r2, #0
 8008d8c:	d038      	beq.n	8008e00 <_strtod_l+0x948>
 8008d8e:	4a1a      	ldr	r2, [pc, #104]	; (8008df8 <_strtod_l+0x940>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d138      	bne.n	8008e06 <_strtod_l+0x94e>
 8008d94:	2201      	movs	r2, #1
 8008d96:	9b08      	ldr	r3, [sp, #32]
 8008d98:	4252      	negs	r2, r2
 8008d9a:	0031      	movs	r1, r6
 8008d9c:	0010      	movs	r0, r2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00b      	beq.n	8008dba <_strtod_l+0x902>
 8008da2:	24d4      	movs	r4, #212	; 0xd4
 8008da4:	4b11      	ldr	r3, [pc, #68]	; (8008dec <_strtod_l+0x934>)
 8008da6:	0010      	movs	r0, r2
 8008da8:	403b      	ands	r3, r7
 8008daa:	04e4      	lsls	r4, r4, #19
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	d804      	bhi.n	8008dba <_strtod_l+0x902>
 8008db0:	306c      	adds	r0, #108	; 0x6c
 8008db2:	0d1b      	lsrs	r3, r3, #20
 8008db4:	1ac3      	subs	r3, r0, r3
 8008db6:	409a      	lsls	r2, r3
 8008db8:	0010      	movs	r0, r2
 8008dba:	4281      	cmp	r1, r0
 8008dbc:	d123      	bne.n	8008e06 <_strtod_l+0x94e>
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <_strtod_l+0x944>)
 8008dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d102      	bne.n	8008dcc <_strtod_l+0x914>
 8008dc6:	1c4b      	adds	r3, r1, #1
 8008dc8:	d100      	bne.n	8008dcc <_strtod_l+0x914>
 8008dca:	e5df      	b.n	800898c <_strtod_l+0x4d4>
 8008dcc:	4b07      	ldr	r3, [pc, #28]	; (8008dec <_strtod_l+0x934>)
 8008dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dd0:	2600      	movs	r6, #0
 8008dd2:	401a      	ands	r2, r3
 8008dd4:	0013      	movs	r3, r2
 8008dd6:	2280      	movs	r2, #128	; 0x80
 8008dd8:	0352      	lsls	r2, r2, #13
 8008dda:	189f      	adds	r7, r3, r2
 8008ddc:	9b08      	ldr	r3, [sp, #32]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1a2      	bne.n	8008d28 <_strtod_l+0x870>
 8008de2:	e5dc      	b.n	800899e <_strtod_l+0x4e6>
 8008de4:	0800c240 	.word	0x0800c240
 8008de8:	fffffc02 	.word	0xfffffc02
 8008dec:	7ff00000 	.word	0x7ff00000
 8008df0:	39500000 	.word	0x39500000
 8008df4:	fffffbe2 	.word	0xfffffbe2
 8008df8:	000fffff 	.word	0x000fffff
 8008dfc:	7fefffff 	.word	0x7fefffff
 8008e00:	4333      	orrs	r3, r6
 8008e02:	d100      	bne.n	8008e06 <_strtod_l+0x94e>
 8008e04:	e77e      	b.n	8008d04 <_strtod_l+0x84c>
 8008e06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01d      	beq.n	8008e48 <_strtod_l+0x990>
 8008e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e10:	4213      	tst	r3, r2
 8008e12:	d0e3      	beq.n	8008ddc <_strtod_l+0x924>
 8008e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e16:	0030      	movs	r0, r6
 8008e18:	0039      	movs	r1, r7
 8008e1a:	9a08      	ldr	r2, [sp, #32]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d017      	beq.n	8008e50 <_strtod_l+0x998>
 8008e20:	f7ff fb32 	bl	8008488 <sulp>
 8008e24:	0002      	movs	r2, r0
 8008e26:	000b      	movs	r3, r1
 8008e28:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008e2c:	f7f7 fc96 	bl	800075c <__aeabi_dadd>
 8008e30:	0006      	movs	r6, r0
 8008e32:	000f      	movs	r7, r1
 8008e34:	e7d2      	b.n	8008ddc <_strtod_l+0x924>
 8008e36:	2601      	movs	r6, #1
 8008e38:	4013      	ands	r3, r2
 8008e3a:	4a99      	ldr	r2, [pc, #612]	; (80090a0 <_strtod_l+0xbe8>)
 8008e3c:	4276      	negs	r6, r6
 8008e3e:	189b      	adds	r3, r3, r2
 8008e40:	4a98      	ldr	r2, [pc, #608]	; (80090a4 <_strtod_l+0xbec>)
 8008e42:	431a      	orrs	r2, r3
 8008e44:	0017      	movs	r7, r2
 8008e46:	e7c9      	b.n	8008ddc <_strtod_l+0x924>
 8008e48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e4a:	4233      	tst	r3, r6
 8008e4c:	d0c6      	beq.n	8008ddc <_strtod_l+0x924>
 8008e4e:	e7e1      	b.n	8008e14 <_strtod_l+0x95c>
 8008e50:	f7ff fb1a 	bl	8008488 <sulp>
 8008e54:	0002      	movs	r2, r0
 8008e56:	000b      	movs	r3, r1
 8008e58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008e5c:	f7f8 fe28 	bl	8001ab0 <__aeabi_dsub>
 8008e60:	2200      	movs	r2, #0
 8008e62:	2300      	movs	r3, #0
 8008e64:	0006      	movs	r6, r0
 8008e66:	000f      	movs	r7, r1
 8008e68:	f7f7 faee 	bl	8000448 <__aeabi_dcmpeq>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d0b5      	beq.n	8008ddc <_strtod_l+0x924>
 8008e70:	e5ff      	b.n	8008a72 <_strtod_l+0x5ba>
 8008e72:	9907      	ldr	r1, [sp, #28]
 8008e74:	9806      	ldr	r0, [sp, #24]
 8008e76:	f002 f881 	bl	800af7c <__ratio>
 8008e7a:	2380      	movs	r3, #128	; 0x80
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	05db      	lsls	r3, r3, #23
 8008e80:	0004      	movs	r4, r0
 8008e82:	000d      	movs	r5, r1
 8008e84:	f7f7 faf0 	bl	8000468 <__aeabi_dcmple>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d075      	beq.n	8008f78 <_strtod_l+0xac0>
 8008e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d047      	beq.n	8008f22 <_strtod_l+0xa6a>
 8008e92:	2300      	movs	r3, #0
 8008e94:	4c84      	ldr	r4, [pc, #528]	; (80090a8 <_strtod_l+0xbf0>)
 8008e96:	2500      	movs	r5, #0
 8008e98:	9310      	str	r3, [sp, #64]	; 0x40
 8008e9a:	9411      	str	r4, [sp, #68]	; 0x44
 8008e9c:	4c82      	ldr	r4, [pc, #520]	; (80090a8 <_strtod_l+0xbf0>)
 8008e9e:	4a83      	ldr	r2, [pc, #524]	; (80090ac <_strtod_l+0xbf4>)
 8008ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	9314      	str	r3, [sp, #80]	; 0x50
 8008ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ea8:	4b81      	ldr	r3, [pc, #516]	; (80090b0 <_strtod_l+0xbf8>)
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d000      	beq.n	8008eb0 <_strtod_l+0x9f8>
 8008eae:	e0ac      	b.n	800900a <_strtod_l+0xb52>
 8008eb0:	4a80      	ldr	r2, [pc, #512]	; (80090b4 <_strtod_l+0xbfc>)
 8008eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb4:	4694      	mov	ip, r2
 8008eb6:	4463      	add	r3, ip
 8008eb8:	001f      	movs	r7, r3
 8008eba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ebc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ebe:	0030      	movs	r0, r6
 8008ec0:	0039      	movs	r1, r7
 8008ec2:	920c      	str	r2, [sp, #48]	; 0x30
 8008ec4:	930d      	str	r3, [sp, #52]	; 0x34
 8008ec6:	f001 ff81 	bl	800adcc <__ulp>
 8008eca:	0002      	movs	r2, r0
 8008ecc:	000b      	movs	r3, r1
 8008ece:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008ed0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ed2:	f7f8 fb81 	bl	80015d8 <__aeabi_dmul>
 8008ed6:	0032      	movs	r2, r6
 8008ed8:	003b      	movs	r3, r7
 8008eda:	f7f7 fc3f 	bl	800075c <__aeabi_dadd>
 8008ede:	4a73      	ldr	r2, [pc, #460]	; (80090ac <_strtod_l+0xbf4>)
 8008ee0:	4b75      	ldr	r3, [pc, #468]	; (80090b8 <_strtod_l+0xc00>)
 8008ee2:	0006      	movs	r6, r0
 8008ee4:	400a      	ands	r2, r1
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d95e      	bls.n	8008fa8 <_strtod_l+0xaf0>
 8008eea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008eec:	4b73      	ldr	r3, [pc, #460]	; (80090bc <_strtod_l+0xc04>)
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d103      	bne.n	8008efa <_strtod_l+0xa42>
 8008ef2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	d100      	bne.n	8008efa <_strtod_l+0xa42>
 8008ef8:	e548      	b.n	800898c <_strtod_l+0x4d4>
 8008efa:	2601      	movs	r6, #1
 8008efc:	4f6f      	ldr	r7, [pc, #444]	; (80090bc <_strtod_l+0xc04>)
 8008efe:	4276      	negs	r6, r6
 8008f00:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008f02:	9805      	ldr	r0, [sp, #20]
 8008f04:	f001 fc22 	bl	800a74c <_Bfree>
 8008f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f0a:	9805      	ldr	r0, [sp, #20]
 8008f0c:	f001 fc1e 	bl	800a74c <_Bfree>
 8008f10:	9907      	ldr	r1, [sp, #28]
 8008f12:	9805      	ldr	r0, [sp, #20]
 8008f14:	f001 fc1a 	bl	800a74c <_Bfree>
 8008f18:	9906      	ldr	r1, [sp, #24]
 8008f1a:	9805      	ldr	r0, [sp, #20]
 8008f1c:	f001 fc16 	bl	800a74c <_Bfree>
 8008f20:	e61d      	b.n	8008b5e <_strtod_l+0x6a6>
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	d11c      	bne.n	8008f60 <_strtod_l+0xaa8>
 8008f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f28:	031b      	lsls	r3, r3, #12
 8008f2a:	d11f      	bne.n	8008f6c <_strtod_l+0xab4>
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	0020      	movs	r0, r4
 8008f30:	0029      	movs	r1, r5
 8008f32:	4b5d      	ldr	r3, [pc, #372]	; (80090a8 <_strtod_l+0xbf0>)
 8008f34:	f7f7 fa8e 	bl	8000454 <__aeabi_dcmplt>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d11a      	bne.n	8008f72 <_strtod_l+0xaba>
 8008f3c:	0020      	movs	r0, r4
 8008f3e:	0029      	movs	r1, r5
 8008f40:	2200      	movs	r2, #0
 8008f42:	4b5f      	ldr	r3, [pc, #380]	; (80090c0 <_strtod_l+0xc08>)
 8008f44:	f7f8 fb48 	bl	80015d8 <__aeabi_dmul>
 8008f48:	0005      	movs	r5, r0
 8008f4a:	000c      	movs	r4, r1
 8008f4c:	2380      	movs	r3, #128	; 0x80
 8008f4e:	061b      	lsls	r3, r3, #24
 8008f50:	18e3      	adds	r3, r4, r3
 8008f52:	951c      	str	r5, [sp, #112]	; 0x70
 8008f54:	931d      	str	r3, [sp, #116]	; 0x74
 8008f56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008f58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f5a:	9210      	str	r2, [sp, #64]	; 0x40
 8008f5c:	9311      	str	r3, [sp, #68]	; 0x44
 8008f5e:	e79e      	b.n	8008e9e <_strtod_l+0x9e6>
 8008f60:	2e01      	cmp	r6, #1
 8008f62:	d103      	bne.n	8008f6c <_strtod_l+0xab4>
 8008f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d100      	bne.n	8008f6c <_strtod_l+0xab4>
 8008f6a:	e582      	b.n	8008a72 <_strtod_l+0x5ba>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4c55      	ldr	r4, [pc, #340]	; (80090c4 <_strtod_l+0xc0c>)
 8008f70:	e791      	b.n	8008e96 <_strtod_l+0x9de>
 8008f72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f74:	4c52      	ldr	r4, [pc, #328]	; (80090c0 <_strtod_l+0xc08>)
 8008f76:	e7e9      	b.n	8008f4c <_strtod_l+0xa94>
 8008f78:	2200      	movs	r2, #0
 8008f7a:	0020      	movs	r0, r4
 8008f7c:	0029      	movs	r1, r5
 8008f7e:	4b50      	ldr	r3, [pc, #320]	; (80090c0 <_strtod_l+0xc08>)
 8008f80:	f7f8 fb2a 	bl	80015d8 <__aeabi_dmul>
 8008f84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f86:	0005      	movs	r5, r0
 8008f88:	000b      	movs	r3, r1
 8008f8a:	000c      	movs	r4, r1
 8008f8c:	2a00      	cmp	r2, #0
 8008f8e:	d107      	bne.n	8008fa0 <_strtod_l+0xae8>
 8008f90:	2280      	movs	r2, #128	; 0x80
 8008f92:	0612      	lsls	r2, r2, #24
 8008f94:	188b      	adds	r3, r1, r2
 8008f96:	9016      	str	r0, [sp, #88]	; 0x58
 8008f98:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008f9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f9e:	e7dc      	b.n	8008f5a <_strtod_l+0xaa2>
 8008fa0:	0002      	movs	r2, r0
 8008fa2:	9216      	str	r2, [sp, #88]	; 0x58
 8008fa4:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fa6:	e7f8      	b.n	8008f9a <_strtod_l+0xae2>
 8008fa8:	23d4      	movs	r3, #212	; 0xd4
 8008faa:	049b      	lsls	r3, r3, #18
 8008fac:	18cf      	adds	r7, r1, r3
 8008fae:	9b08      	ldr	r3, [sp, #32]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1a5      	bne.n	8008f00 <_strtod_l+0xa48>
 8008fb4:	4b3d      	ldr	r3, [pc, #244]	; (80090ac <_strtod_l+0xbf4>)
 8008fb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fb8:	403b      	ands	r3, r7
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d1a0      	bne.n	8008f00 <_strtod_l+0xa48>
 8008fbe:	0028      	movs	r0, r5
 8008fc0:	0021      	movs	r1, r4
 8008fc2:	f7f7 faad 	bl	8000520 <__aeabi_d2lz>
 8008fc6:	f7f7 fae7 	bl	8000598 <__aeabi_l2d>
 8008fca:	0002      	movs	r2, r0
 8008fcc:	000b      	movs	r3, r1
 8008fce:	0028      	movs	r0, r5
 8008fd0:	0021      	movs	r1, r4
 8008fd2:	f7f8 fd6d 	bl	8001ab0 <__aeabi_dsub>
 8008fd6:	033b      	lsls	r3, r7, #12
 8008fd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fda:	0b1b      	lsrs	r3, r3, #12
 8008fdc:	4333      	orrs	r3, r6
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	0004      	movs	r4, r0
 8008fe2:	000d      	movs	r5, r1
 8008fe4:	4a38      	ldr	r2, [pc, #224]	; (80090c8 <_strtod_l+0xc10>)
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d055      	beq.n	8009096 <_strtod_l+0xbde>
 8008fea:	4b38      	ldr	r3, [pc, #224]	; (80090cc <_strtod_l+0xc14>)
 8008fec:	f7f7 fa32 	bl	8000454 <__aeabi_dcmplt>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d000      	beq.n	8008ff6 <_strtod_l+0xb3e>
 8008ff4:	e4d3      	b.n	800899e <_strtod_l+0x4e6>
 8008ff6:	0020      	movs	r0, r4
 8008ff8:	0029      	movs	r1, r5
 8008ffa:	4a35      	ldr	r2, [pc, #212]	; (80090d0 <_strtod_l+0xc18>)
 8008ffc:	4b30      	ldr	r3, [pc, #192]	; (80090c0 <_strtod_l+0xc08>)
 8008ffe:	f7f7 fa3d 	bl	800047c <__aeabi_dcmpgt>
 8009002:	2800      	cmp	r0, #0
 8009004:	d100      	bne.n	8009008 <_strtod_l+0xb50>
 8009006:	e77b      	b.n	8008f00 <_strtod_l+0xa48>
 8009008:	e4c9      	b.n	800899e <_strtod_l+0x4e6>
 800900a:	9b08      	ldr	r3, [sp, #32]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d02b      	beq.n	8009068 <_strtod_l+0xbb0>
 8009010:	23d4      	movs	r3, #212	; 0xd4
 8009012:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009014:	04db      	lsls	r3, r3, #19
 8009016:	429a      	cmp	r2, r3
 8009018:	d826      	bhi.n	8009068 <_strtod_l+0xbb0>
 800901a:	0028      	movs	r0, r5
 800901c:	0021      	movs	r1, r4
 800901e:	4a2d      	ldr	r2, [pc, #180]	; (80090d4 <_strtod_l+0xc1c>)
 8009020:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <_strtod_l+0xc20>)
 8009022:	f7f7 fa21 	bl	8000468 <__aeabi_dcmple>
 8009026:	2800      	cmp	r0, #0
 8009028:	d017      	beq.n	800905a <_strtod_l+0xba2>
 800902a:	0028      	movs	r0, r5
 800902c:	0021      	movs	r1, r4
 800902e:	f7f7 fa59 	bl	80004e4 <__aeabi_d2uiz>
 8009032:	2800      	cmp	r0, #0
 8009034:	d100      	bne.n	8009038 <_strtod_l+0xb80>
 8009036:	3001      	adds	r0, #1
 8009038:	f7f9 f950 	bl	80022dc <__aeabi_ui2d>
 800903c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800903e:	0005      	movs	r5, r0
 8009040:	000b      	movs	r3, r1
 8009042:	000c      	movs	r4, r1
 8009044:	2a00      	cmp	r2, #0
 8009046:	d122      	bne.n	800908e <_strtod_l+0xbd6>
 8009048:	2280      	movs	r2, #128	; 0x80
 800904a:	0612      	lsls	r2, r2, #24
 800904c:	188b      	adds	r3, r1, r2
 800904e:	9018      	str	r0, [sp, #96]	; 0x60
 8009050:	9319      	str	r3, [sp, #100]	; 0x64
 8009052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009054:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009056:	9210      	str	r2, [sp, #64]	; 0x40
 8009058:	9311      	str	r3, [sp, #68]	; 0x44
 800905a:	22d6      	movs	r2, #214	; 0xd6
 800905c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800905e:	04d2      	lsls	r2, r2, #19
 8009060:	189b      	adds	r3, r3, r2
 8009062:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009064:	1a9b      	subs	r3, r3, r2
 8009066:	9311      	str	r3, [sp, #68]	; 0x44
 8009068:	9812      	ldr	r0, [sp, #72]	; 0x48
 800906a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800906c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800906e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009070:	f001 feac 	bl	800adcc <__ulp>
 8009074:	0002      	movs	r2, r0
 8009076:	000b      	movs	r3, r1
 8009078:	0030      	movs	r0, r6
 800907a:	0039      	movs	r1, r7
 800907c:	f7f8 faac 	bl	80015d8 <__aeabi_dmul>
 8009080:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009082:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009084:	f7f7 fb6a 	bl	800075c <__aeabi_dadd>
 8009088:	0006      	movs	r6, r0
 800908a:	000f      	movs	r7, r1
 800908c:	e78f      	b.n	8008fae <_strtod_l+0xaf6>
 800908e:	0002      	movs	r2, r0
 8009090:	9218      	str	r2, [sp, #96]	; 0x60
 8009092:	9319      	str	r3, [sp, #100]	; 0x64
 8009094:	e7dd      	b.n	8009052 <_strtod_l+0xb9a>
 8009096:	4b11      	ldr	r3, [pc, #68]	; (80090dc <_strtod_l+0xc24>)
 8009098:	f7f7 f9dc 	bl	8000454 <__aeabi_dcmplt>
 800909c:	e7b1      	b.n	8009002 <_strtod_l+0xb4a>
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	fff00000 	.word	0xfff00000
 80090a4:	000fffff 	.word	0x000fffff
 80090a8:	3ff00000 	.word	0x3ff00000
 80090ac:	7ff00000 	.word	0x7ff00000
 80090b0:	7fe00000 	.word	0x7fe00000
 80090b4:	fcb00000 	.word	0xfcb00000
 80090b8:	7c9fffff 	.word	0x7c9fffff
 80090bc:	7fefffff 	.word	0x7fefffff
 80090c0:	3fe00000 	.word	0x3fe00000
 80090c4:	bff00000 	.word	0xbff00000
 80090c8:	94a03595 	.word	0x94a03595
 80090cc:	3fdfffff 	.word	0x3fdfffff
 80090d0:	35afe535 	.word	0x35afe535
 80090d4:	ffc00000 	.word	0xffc00000
 80090d8:	41dfffff 	.word	0x41dfffff
 80090dc:	3fcfffff 	.word	0x3fcfffff

080090e0 <_strtod_r>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	4b02      	ldr	r3, [pc, #8]	; (80090ec <_strtod_r+0xc>)
 80090e4:	f7ff f9e8 	bl	80084b8 <_strtod_l>
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	20000074 	.word	0x20000074

080090f0 <_strtol_l.constprop.0>:
 80090f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090f2:	b087      	sub	sp, #28
 80090f4:	001e      	movs	r6, r3
 80090f6:	9005      	str	r0, [sp, #20]
 80090f8:	9101      	str	r1, [sp, #4]
 80090fa:	9202      	str	r2, [sp, #8]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d045      	beq.n	800918c <_strtol_l.constprop.0+0x9c>
 8009100:	000b      	movs	r3, r1
 8009102:	2e24      	cmp	r6, #36	; 0x24
 8009104:	d842      	bhi.n	800918c <_strtol_l.constprop.0+0x9c>
 8009106:	4a3f      	ldr	r2, [pc, #252]	; (8009204 <_strtol_l.constprop.0+0x114>)
 8009108:	2108      	movs	r1, #8
 800910a:	4694      	mov	ip, r2
 800910c:	001a      	movs	r2, r3
 800910e:	4660      	mov	r0, ip
 8009110:	7814      	ldrb	r4, [r2, #0]
 8009112:	3301      	adds	r3, #1
 8009114:	5d00      	ldrb	r0, [r0, r4]
 8009116:	001d      	movs	r5, r3
 8009118:	0007      	movs	r7, r0
 800911a:	400f      	ands	r7, r1
 800911c:	4208      	tst	r0, r1
 800911e:	d1f5      	bne.n	800910c <_strtol_l.constprop.0+0x1c>
 8009120:	2c2d      	cmp	r4, #45	; 0x2d
 8009122:	d13a      	bne.n	800919a <_strtol_l.constprop.0+0xaa>
 8009124:	2701      	movs	r7, #1
 8009126:	781c      	ldrb	r4, [r3, #0]
 8009128:	1c95      	adds	r5, r2, #2
 800912a:	2e00      	cmp	r6, #0
 800912c:	d065      	beq.n	80091fa <_strtol_l.constprop.0+0x10a>
 800912e:	2e10      	cmp	r6, #16
 8009130:	d109      	bne.n	8009146 <_strtol_l.constprop.0+0x56>
 8009132:	2c30      	cmp	r4, #48	; 0x30
 8009134:	d107      	bne.n	8009146 <_strtol_l.constprop.0+0x56>
 8009136:	2220      	movs	r2, #32
 8009138:	782b      	ldrb	r3, [r5, #0]
 800913a:	4393      	bics	r3, r2
 800913c:	2b58      	cmp	r3, #88	; 0x58
 800913e:	d157      	bne.n	80091f0 <_strtol_l.constprop.0+0x100>
 8009140:	2610      	movs	r6, #16
 8009142:	786c      	ldrb	r4, [r5, #1]
 8009144:	3502      	adds	r5, #2
 8009146:	4b30      	ldr	r3, [pc, #192]	; (8009208 <_strtol_l.constprop.0+0x118>)
 8009148:	0031      	movs	r1, r6
 800914a:	18fb      	adds	r3, r7, r3
 800914c:	0018      	movs	r0, r3
 800914e:	9303      	str	r3, [sp, #12]
 8009150:	f7f7 f87a 	bl	8000248 <__aeabi_uidivmod>
 8009154:	2300      	movs	r3, #0
 8009156:	2201      	movs	r2, #1
 8009158:	4684      	mov	ip, r0
 800915a:	0018      	movs	r0, r3
 800915c:	9104      	str	r1, [sp, #16]
 800915e:	4252      	negs	r2, r2
 8009160:	0021      	movs	r1, r4
 8009162:	3930      	subs	r1, #48	; 0x30
 8009164:	2909      	cmp	r1, #9
 8009166:	d81d      	bhi.n	80091a4 <_strtol_l.constprop.0+0xb4>
 8009168:	000c      	movs	r4, r1
 800916a:	42a6      	cmp	r6, r4
 800916c:	dd28      	ble.n	80091c0 <_strtol_l.constprop.0+0xd0>
 800916e:	2b00      	cmp	r3, #0
 8009170:	db24      	blt.n	80091bc <_strtol_l.constprop.0+0xcc>
 8009172:	0013      	movs	r3, r2
 8009174:	4584      	cmp	ip, r0
 8009176:	d306      	bcc.n	8009186 <_strtol_l.constprop.0+0x96>
 8009178:	d102      	bne.n	8009180 <_strtol_l.constprop.0+0x90>
 800917a:	9904      	ldr	r1, [sp, #16]
 800917c:	42a1      	cmp	r1, r4
 800917e:	db02      	blt.n	8009186 <_strtol_l.constprop.0+0x96>
 8009180:	2301      	movs	r3, #1
 8009182:	4370      	muls	r0, r6
 8009184:	1820      	adds	r0, r4, r0
 8009186:	782c      	ldrb	r4, [r5, #0]
 8009188:	3501      	adds	r5, #1
 800918a:	e7e9      	b.n	8009160 <_strtol_l.constprop.0+0x70>
 800918c:	f7fe f9a8 	bl	80074e0 <__errno>
 8009190:	2316      	movs	r3, #22
 8009192:	6003      	str	r3, [r0, #0]
 8009194:	2000      	movs	r0, #0
 8009196:	b007      	add	sp, #28
 8009198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800919a:	2c2b      	cmp	r4, #43	; 0x2b
 800919c:	d1c5      	bne.n	800912a <_strtol_l.constprop.0+0x3a>
 800919e:	781c      	ldrb	r4, [r3, #0]
 80091a0:	1c95      	adds	r5, r2, #2
 80091a2:	e7c2      	b.n	800912a <_strtol_l.constprop.0+0x3a>
 80091a4:	0021      	movs	r1, r4
 80091a6:	3941      	subs	r1, #65	; 0x41
 80091a8:	2919      	cmp	r1, #25
 80091aa:	d801      	bhi.n	80091b0 <_strtol_l.constprop.0+0xc0>
 80091ac:	3c37      	subs	r4, #55	; 0x37
 80091ae:	e7dc      	b.n	800916a <_strtol_l.constprop.0+0x7a>
 80091b0:	0021      	movs	r1, r4
 80091b2:	3961      	subs	r1, #97	; 0x61
 80091b4:	2919      	cmp	r1, #25
 80091b6:	d803      	bhi.n	80091c0 <_strtol_l.constprop.0+0xd0>
 80091b8:	3c57      	subs	r4, #87	; 0x57
 80091ba:	e7d6      	b.n	800916a <_strtol_l.constprop.0+0x7a>
 80091bc:	0013      	movs	r3, r2
 80091be:	e7e2      	b.n	8009186 <_strtol_l.constprop.0+0x96>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	da09      	bge.n	80091d8 <_strtol_l.constprop.0+0xe8>
 80091c4:	2322      	movs	r3, #34	; 0x22
 80091c6:	9a05      	ldr	r2, [sp, #20]
 80091c8:	9803      	ldr	r0, [sp, #12]
 80091ca:	6013      	str	r3, [r2, #0]
 80091cc:	9b02      	ldr	r3, [sp, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0e1      	beq.n	8009196 <_strtol_l.constprop.0+0xa6>
 80091d2:	1e6b      	subs	r3, r5, #1
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	e007      	b.n	80091e8 <_strtol_l.constprop.0+0xf8>
 80091d8:	2f00      	cmp	r7, #0
 80091da:	d000      	beq.n	80091de <_strtol_l.constprop.0+0xee>
 80091dc:	4240      	negs	r0, r0
 80091de:	9a02      	ldr	r2, [sp, #8]
 80091e0:	2a00      	cmp	r2, #0
 80091e2:	d0d8      	beq.n	8009196 <_strtol_l.constprop.0+0xa6>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1f4      	bne.n	80091d2 <_strtol_l.constprop.0+0xe2>
 80091e8:	9b02      	ldr	r3, [sp, #8]
 80091ea:	9a01      	ldr	r2, [sp, #4]
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	e7d2      	b.n	8009196 <_strtol_l.constprop.0+0xa6>
 80091f0:	2430      	movs	r4, #48	; 0x30
 80091f2:	2e00      	cmp	r6, #0
 80091f4:	d1a7      	bne.n	8009146 <_strtol_l.constprop.0+0x56>
 80091f6:	3608      	adds	r6, #8
 80091f8:	e7a5      	b.n	8009146 <_strtol_l.constprop.0+0x56>
 80091fa:	2c30      	cmp	r4, #48	; 0x30
 80091fc:	d09b      	beq.n	8009136 <_strtol_l.constprop.0+0x46>
 80091fe:	260a      	movs	r6, #10
 8009200:	e7a1      	b.n	8009146 <_strtol_l.constprop.0+0x56>
 8009202:	46c0      	nop			; (mov r8, r8)
 8009204:	0800c0d5 	.word	0x0800c0d5
 8009208:	7fffffff 	.word	0x7fffffff

0800920c <_strtol_r>:
 800920c:	b510      	push	{r4, lr}
 800920e:	f7ff ff6f 	bl	80090f0 <_strtol_l.constprop.0>
 8009212:	bd10      	pop	{r4, pc}

08009214 <strtol>:
 8009214:	b510      	push	{r4, lr}
 8009216:	0013      	movs	r3, r2
 8009218:	000a      	movs	r2, r1
 800921a:	0001      	movs	r1, r0
 800921c:	4802      	ldr	r0, [pc, #8]	; (8009228 <strtol+0x14>)
 800921e:	6800      	ldr	r0, [r0, #0]
 8009220:	f7ff ff66 	bl	80090f0 <_strtol_l.constprop.0>
 8009224:	bd10      	pop	{r4, pc}
 8009226:	46c0      	nop			; (mov r8, r8)
 8009228:	2000000c 	.word	0x2000000c

0800922c <quorem>:
 800922c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800922e:	0006      	movs	r6, r0
 8009230:	690b      	ldr	r3, [r1, #16]
 8009232:	6932      	ldr	r2, [r6, #16]
 8009234:	b087      	sub	sp, #28
 8009236:	2000      	movs	r0, #0
 8009238:	9103      	str	r1, [sp, #12]
 800923a:	429a      	cmp	r2, r3
 800923c:	db65      	blt.n	800930a <quorem+0xde>
 800923e:	3b01      	subs	r3, #1
 8009240:	009c      	lsls	r4, r3, #2
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	000b      	movs	r3, r1
 8009246:	3314      	adds	r3, #20
 8009248:	9305      	str	r3, [sp, #20]
 800924a:	191b      	adds	r3, r3, r4
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	0033      	movs	r3, r6
 8009250:	3314      	adds	r3, #20
 8009252:	9302      	str	r3, [sp, #8]
 8009254:	191c      	adds	r4, r3, r4
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	6827      	ldr	r7, [r4, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	0038      	movs	r0, r7
 800925e:	1c5d      	adds	r5, r3, #1
 8009260:	0029      	movs	r1, r5
 8009262:	9301      	str	r3, [sp, #4]
 8009264:	f7f6 ff6a 	bl	800013c <__udivsi3>
 8009268:	9001      	str	r0, [sp, #4]
 800926a:	42af      	cmp	r7, r5
 800926c:	d324      	bcc.n	80092b8 <quorem+0x8c>
 800926e:	2500      	movs	r5, #0
 8009270:	46ac      	mov	ip, r5
 8009272:	9802      	ldr	r0, [sp, #8]
 8009274:	9f05      	ldr	r7, [sp, #20]
 8009276:	cf08      	ldmia	r7!, {r3}
 8009278:	9a01      	ldr	r2, [sp, #4]
 800927a:	b299      	uxth	r1, r3
 800927c:	4351      	muls	r1, r2
 800927e:	0c1b      	lsrs	r3, r3, #16
 8009280:	4353      	muls	r3, r2
 8009282:	1949      	adds	r1, r1, r5
 8009284:	0c0a      	lsrs	r2, r1, #16
 8009286:	189b      	adds	r3, r3, r2
 8009288:	6802      	ldr	r2, [r0, #0]
 800928a:	b289      	uxth	r1, r1
 800928c:	b292      	uxth	r2, r2
 800928e:	4462      	add	r2, ip
 8009290:	1a52      	subs	r2, r2, r1
 8009292:	6801      	ldr	r1, [r0, #0]
 8009294:	0c1d      	lsrs	r5, r3, #16
 8009296:	0c09      	lsrs	r1, r1, #16
 8009298:	b29b      	uxth	r3, r3
 800929a:	1acb      	subs	r3, r1, r3
 800929c:	1411      	asrs	r1, r2, #16
 800929e:	185b      	adds	r3, r3, r1
 80092a0:	1419      	asrs	r1, r3, #16
 80092a2:	b292      	uxth	r2, r2
 80092a4:	041b      	lsls	r3, r3, #16
 80092a6:	431a      	orrs	r2, r3
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	468c      	mov	ip, r1
 80092ac:	c004      	stmia	r0!, {r2}
 80092ae:	42bb      	cmp	r3, r7
 80092b0:	d2e1      	bcs.n	8009276 <quorem+0x4a>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d030      	beq.n	800931a <quorem+0xee>
 80092b8:	0030      	movs	r0, r6
 80092ba:	9903      	ldr	r1, [sp, #12]
 80092bc:	f001 fcd2 	bl	800ac64 <__mcmp>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	db21      	blt.n	8009308 <quorem+0xdc>
 80092c4:	0030      	movs	r0, r6
 80092c6:	2400      	movs	r4, #0
 80092c8:	9b01      	ldr	r3, [sp, #4]
 80092ca:	9903      	ldr	r1, [sp, #12]
 80092cc:	3301      	adds	r3, #1
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	3014      	adds	r0, #20
 80092d2:	3114      	adds	r1, #20
 80092d4:	6803      	ldr	r3, [r0, #0]
 80092d6:	c920      	ldmia	r1!, {r5}
 80092d8:	b29a      	uxth	r2, r3
 80092da:	1914      	adds	r4, r2, r4
 80092dc:	b2aa      	uxth	r2, r5
 80092de:	1aa2      	subs	r2, r4, r2
 80092e0:	0c1b      	lsrs	r3, r3, #16
 80092e2:	0c2d      	lsrs	r5, r5, #16
 80092e4:	1414      	asrs	r4, r2, #16
 80092e6:	1b5b      	subs	r3, r3, r5
 80092e8:	191b      	adds	r3, r3, r4
 80092ea:	141c      	asrs	r4, r3, #16
 80092ec:	b292      	uxth	r2, r2
 80092ee:	041b      	lsls	r3, r3, #16
 80092f0:	4313      	orrs	r3, r2
 80092f2:	c008      	stmia	r0!, {r3}
 80092f4:	9b04      	ldr	r3, [sp, #16]
 80092f6:	428b      	cmp	r3, r1
 80092f8:	d2ec      	bcs.n	80092d4 <quorem+0xa8>
 80092fa:	9b00      	ldr	r3, [sp, #0]
 80092fc:	9a02      	ldr	r2, [sp, #8]
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	18d3      	adds	r3, r2, r3
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	2a00      	cmp	r2, #0
 8009306:	d015      	beq.n	8009334 <quorem+0x108>
 8009308:	9801      	ldr	r0, [sp, #4]
 800930a:	b007      	add	sp, #28
 800930c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <quorem+0xf6>
 8009314:	9b00      	ldr	r3, [sp, #0]
 8009316:	3b01      	subs	r3, #1
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	9b02      	ldr	r3, [sp, #8]
 800931c:	3c04      	subs	r4, #4
 800931e:	42a3      	cmp	r3, r4
 8009320:	d3f5      	bcc.n	800930e <quorem+0xe2>
 8009322:	9b00      	ldr	r3, [sp, #0]
 8009324:	6133      	str	r3, [r6, #16]
 8009326:	e7c7      	b.n	80092b8 <quorem+0x8c>
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	2a00      	cmp	r2, #0
 800932c:	d106      	bne.n	800933c <quorem+0x110>
 800932e:	9a00      	ldr	r2, [sp, #0]
 8009330:	3a01      	subs	r2, #1
 8009332:	9200      	str	r2, [sp, #0]
 8009334:	9a02      	ldr	r2, [sp, #8]
 8009336:	3b04      	subs	r3, #4
 8009338:	429a      	cmp	r2, r3
 800933a:	d3f5      	bcc.n	8009328 <quorem+0xfc>
 800933c:	9b00      	ldr	r3, [sp, #0]
 800933e:	6133      	str	r3, [r6, #16]
 8009340:	e7e2      	b.n	8009308 <quorem+0xdc>
	...

08009344 <_dtoa_r>:
 8009344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009346:	b09d      	sub	sp, #116	; 0x74
 8009348:	9202      	str	r2, [sp, #8]
 800934a:	9303      	str	r3, [sp, #12]
 800934c:	9b02      	ldr	r3, [sp, #8]
 800934e:	9c03      	ldr	r4, [sp, #12]
 8009350:	9308      	str	r3, [sp, #32]
 8009352:	9409      	str	r4, [sp, #36]	; 0x24
 8009354:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009356:	0007      	movs	r7, r0
 8009358:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800935a:	2c00      	cmp	r4, #0
 800935c:	d10e      	bne.n	800937c <_dtoa_r+0x38>
 800935e:	2010      	movs	r0, #16
 8009360:	f7fe f8e8 	bl	8007534 <malloc>
 8009364:	1e02      	subs	r2, r0, #0
 8009366:	6278      	str	r0, [r7, #36]	; 0x24
 8009368:	d104      	bne.n	8009374 <_dtoa_r+0x30>
 800936a:	21ea      	movs	r1, #234	; 0xea
 800936c:	4bc7      	ldr	r3, [pc, #796]	; (800968c <_dtoa_r+0x348>)
 800936e:	48c8      	ldr	r0, [pc, #800]	; (8009690 <_dtoa_r+0x34c>)
 8009370:	f002 f826 	bl	800b3c0 <__assert_func>
 8009374:	6044      	str	r4, [r0, #4]
 8009376:	6084      	str	r4, [r0, #8]
 8009378:	6004      	str	r4, [r0, #0]
 800937a:	60c4      	str	r4, [r0, #12]
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	6819      	ldr	r1, [r3, #0]
 8009380:	2900      	cmp	r1, #0
 8009382:	d00a      	beq.n	800939a <_dtoa_r+0x56>
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	2301      	movs	r3, #1
 8009388:	4093      	lsls	r3, r2
 800938a:	604a      	str	r2, [r1, #4]
 800938c:	608b      	str	r3, [r1, #8]
 800938e:	0038      	movs	r0, r7
 8009390:	f001 f9dc 	bl	800a74c <_Bfree>
 8009394:	2200      	movs	r2, #0
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	da20      	bge.n	80093e2 <_dtoa_r+0x9e>
 80093a0:	2301      	movs	r3, #1
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	085b      	lsrs	r3, r3, #1
 80093aa:	9309      	str	r3, [sp, #36]	; 0x24
 80093ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80093ae:	4bb9      	ldr	r3, [pc, #740]	; (8009694 <_dtoa_r+0x350>)
 80093b0:	4ab8      	ldr	r2, [pc, #736]	; (8009694 <_dtoa_r+0x350>)
 80093b2:	402b      	ands	r3, r5
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d117      	bne.n	80093e8 <_dtoa_r+0xa4>
 80093b8:	4bb7      	ldr	r3, [pc, #732]	; (8009698 <_dtoa_r+0x354>)
 80093ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80093bc:	0328      	lsls	r0, r5, #12
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	0b00      	lsrs	r0, r0, #12
 80093c4:	4318      	orrs	r0, r3
 80093c6:	d101      	bne.n	80093cc <_dtoa_r+0x88>
 80093c8:	f000 fdbf 	bl	8009f4a <_dtoa_r+0xc06>
 80093cc:	48b3      	ldr	r0, [pc, #716]	; (800969c <_dtoa_r+0x358>)
 80093ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093d0:	9006      	str	r0, [sp, #24]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d002      	beq.n	80093dc <_dtoa_r+0x98>
 80093d6:	4bb2      	ldr	r3, [pc, #712]	; (80096a0 <_dtoa_r+0x35c>)
 80093d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	9806      	ldr	r0, [sp, #24]
 80093de:	b01d      	add	sp, #116	; 0x74
 80093e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e2:	2300      	movs	r3, #0
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	e7e1      	b.n	80093ac <_dtoa_r+0x68>
 80093e8:	9b08      	ldr	r3, [sp, #32]
 80093ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80093ec:	9312      	str	r3, [sp, #72]	; 0x48
 80093ee:	9413      	str	r4, [sp, #76]	; 0x4c
 80093f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80093f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80093f4:	2200      	movs	r2, #0
 80093f6:	2300      	movs	r3, #0
 80093f8:	f7f7 f826 	bl	8000448 <__aeabi_dcmpeq>
 80093fc:	1e04      	subs	r4, r0, #0
 80093fe:	d009      	beq.n	8009414 <_dtoa_r+0xd0>
 8009400:	2301      	movs	r3, #1
 8009402:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	4ba7      	ldr	r3, [pc, #668]	; (80096a4 <_dtoa_r+0x360>)
 8009408:	9306      	str	r3, [sp, #24]
 800940a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0e5      	beq.n	80093dc <_dtoa_r+0x98>
 8009410:	4ba5      	ldr	r3, [pc, #660]	; (80096a8 <_dtoa_r+0x364>)
 8009412:	e7e1      	b.n	80093d8 <_dtoa_r+0x94>
 8009414:	ab1a      	add	r3, sp, #104	; 0x68
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	ab1b      	add	r3, sp, #108	; 0x6c
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	0038      	movs	r0, r7
 800941e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009422:	f001 fd47 	bl	800aeb4 <__d2b>
 8009426:	006e      	lsls	r6, r5, #1
 8009428:	9005      	str	r0, [sp, #20]
 800942a:	0d76      	lsrs	r6, r6, #21
 800942c:	d100      	bne.n	8009430 <_dtoa_r+0xec>
 800942e:	e07c      	b.n	800952a <_dtoa_r+0x1e6>
 8009430:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009432:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009436:	4a9d      	ldr	r2, [pc, #628]	; (80096ac <_dtoa_r+0x368>)
 8009438:	031b      	lsls	r3, r3, #12
 800943a:	0b1b      	lsrs	r3, r3, #12
 800943c:	431a      	orrs	r2, r3
 800943e:	0011      	movs	r1, r2
 8009440:	4b9b      	ldr	r3, [pc, #620]	; (80096b0 <_dtoa_r+0x36c>)
 8009442:	9418      	str	r4, [sp, #96]	; 0x60
 8009444:	18f6      	adds	r6, r6, r3
 8009446:	2200      	movs	r2, #0
 8009448:	4b9a      	ldr	r3, [pc, #616]	; (80096b4 <_dtoa_r+0x370>)
 800944a:	f7f8 fb31 	bl	8001ab0 <__aeabi_dsub>
 800944e:	4a9a      	ldr	r2, [pc, #616]	; (80096b8 <_dtoa_r+0x374>)
 8009450:	4b9a      	ldr	r3, [pc, #616]	; (80096bc <_dtoa_r+0x378>)
 8009452:	f7f8 f8c1 	bl	80015d8 <__aeabi_dmul>
 8009456:	4a9a      	ldr	r2, [pc, #616]	; (80096c0 <_dtoa_r+0x37c>)
 8009458:	4b9a      	ldr	r3, [pc, #616]	; (80096c4 <_dtoa_r+0x380>)
 800945a:	f7f7 f97f 	bl	800075c <__aeabi_dadd>
 800945e:	0004      	movs	r4, r0
 8009460:	0030      	movs	r0, r6
 8009462:	000d      	movs	r5, r1
 8009464:	f7f8 ff0a 	bl	800227c <__aeabi_i2d>
 8009468:	4a97      	ldr	r2, [pc, #604]	; (80096c8 <_dtoa_r+0x384>)
 800946a:	4b98      	ldr	r3, [pc, #608]	; (80096cc <_dtoa_r+0x388>)
 800946c:	f7f8 f8b4 	bl	80015d8 <__aeabi_dmul>
 8009470:	0002      	movs	r2, r0
 8009472:	000b      	movs	r3, r1
 8009474:	0020      	movs	r0, r4
 8009476:	0029      	movs	r1, r5
 8009478:	f7f7 f970 	bl	800075c <__aeabi_dadd>
 800947c:	0004      	movs	r4, r0
 800947e:	000d      	movs	r5, r1
 8009480:	f7f8 fec6 	bl	8002210 <__aeabi_d2iz>
 8009484:	2200      	movs	r2, #0
 8009486:	9002      	str	r0, [sp, #8]
 8009488:	2300      	movs	r3, #0
 800948a:	0020      	movs	r0, r4
 800948c:	0029      	movs	r1, r5
 800948e:	f7f6 ffe1 	bl	8000454 <__aeabi_dcmplt>
 8009492:	2800      	cmp	r0, #0
 8009494:	d00b      	beq.n	80094ae <_dtoa_r+0x16a>
 8009496:	9802      	ldr	r0, [sp, #8]
 8009498:	f7f8 fef0 	bl	800227c <__aeabi_i2d>
 800949c:	002b      	movs	r3, r5
 800949e:	0022      	movs	r2, r4
 80094a0:	f7f6 ffd2 	bl	8000448 <__aeabi_dcmpeq>
 80094a4:	4243      	negs	r3, r0
 80094a6:	4158      	adcs	r0, r3
 80094a8:	9b02      	ldr	r3, [sp, #8]
 80094aa:	1a1b      	subs	r3, r3, r0
 80094ac:	9302      	str	r3, [sp, #8]
 80094ae:	2301      	movs	r3, #1
 80094b0:	9316      	str	r3, [sp, #88]	; 0x58
 80094b2:	9b02      	ldr	r3, [sp, #8]
 80094b4:	2b16      	cmp	r3, #22
 80094b6:	d80f      	bhi.n	80094d8 <_dtoa_r+0x194>
 80094b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80094ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80094bc:	00da      	lsls	r2, r3, #3
 80094be:	4b84      	ldr	r3, [pc, #528]	; (80096d0 <_dtoa_r+0x38c>)
 80094c0:	189b      	adds	r3, r3, r2
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f7f6 ffc5 	bl	8000454 <__aeabi_dcmplt>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d049      	beq.n	8009562 <_dtoa_r+0x21e>
 80094ce:	9b02      	ldr	r3, [sp, #8]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	9302      	str	r3, [sp, #8]
 80094d4:	2300      	movs	r3, #0
 80094d6:	9316      	str	r3, [sp, #88]	; 0x58
 80094d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80094da:	1b9e      	subs	r6, r3, r6
 80094dc:	2300      	movs	r3, #0
 80094de:	930a      	str	r3, [sp, #40]	; 0x28
 80094e0:	0033      	movs	r3, r6
 80094e2:	3b01      	subs	r3, #1
 80094e4:	930d      	str	r3, [sp, #52]	; 0x34
 80094e6:	d504      	bpl.n	80094f2 <_dtoa_r+0x1ae>
 80094e8:	2301      	movs	r3, #1
 80094ea:	1b9b      	subs	r3, r3, r6
 80094ec:	930a      	str	r3, [sp, #40]	; 0x28
 80094ee:	2300      	movs	r3, #0
 80094f0:	930d      	str	r3, [sp, #52]	; 0x34
 80094f2:	9b02      	ldr	r3, [sp, #8]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	db36      	blt.n	8009566 <_dtoa_r+0x222>
 80094f8:	9a02      	ldr	r2, [sp, #8]
 80094fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094fc:	4694      	mov	ip, r2
 80094fe:	4463      	add	r3, ip
 8009500:	930d      	str	r3, [sp, #52]	; 0x34
 8009502:	2300      	movs	r3, #0
 8009504:	9215      	str	r2, [sp, #84]	; 0x54
 8009506:	930e      	str	r3, [sp, #56]	; 0x38
 8009508:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800950a:	2401      	movs	r4, #1
 800950c:	2b09      	cmp	r3, #9
 800950e:	d864      	bhi.n	80095da <_dtoa_r+0x296>
 8009510:	2b05      	cmp	r3, #5
 8009512:	dd02      	ble.n	800951a <_dtoa_r+0x1d6>
 8009514:	2400      	movs	r4, #0
 8009516:	3b04      	subs	r3, #4
 8009518:	9322      	str	r3, [sp, #136]	; 0x88
 800951a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800951c:	1e98      	subs	r0, r3, #2
 800951e:	2803      	cmp	r0, #3
 8009520:	d864      	bhi.n	80095ec <_dtoa_r+0x2a8>
 8009522:	f7f6 fdf7 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009526:	3829      	.short	0x3829
 8009528:	5836      	.short	0x5836
 800952a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800952c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800952e:	189e      	adds	r6, r3, r2
 8009530:	4b68      	ldr	r3, [pc, #416]	; (80096d4 <_dtoa_r+0x390>)
 8009532:	18f2      	adds	r2, r6, r3
 8009534:	2a20      	cmp	r2, #32
 8009536:	dd0f      	ble.n	8009558 <_dtoa_r+0x214>
 8009538:	2340      	movs	r3, #64	; 0x40
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	409d      	lsls	r5, r3
 800953e:	4b66      	ldr	r3, [pc, #408]	; (80096d8 <_dtoa_r+0x394>)
 8009540:	9802      	ldr	r0, [sp, #8]
 8009542:	18f3      	adds	r3, r6, r3
 8009544:	40d8      	lsrs	r0, r3
 8009546:	4328      	orrs	r0, r5
 8009548:	f7f8 fec8 	bl	80022dc <__aeabi_ui2d>
 800954c:	2301      	movs	r3, #1
 800954e:	4c63      	ldr	r4, [pc, #396]	; (80096dc <_dtoa_r+0x398>)
 8009550:	3e01      	subs	r6, #1
 8009552:	1909      	adds	r1, r1, r4
 8009554:	9318      	str	r3, [sp, #96]	; 0x60
 8009556:	e776      	b.n	8009446 <_dtoa_r+0x102>
 8009558:	2320      	movs	r3, #32
 800955a:	9802      	ldr	r0, [sp, #8]
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	4098      	lsls	r0, r3
 8009560:	e7f2      	b.n	8009548 <_dtoa_r+0x204>
 8009562:	9016      	str	r0, [sp, #88]	; 0x58
 8009564:	e7b8      	b.n	80094d8 <_dtoa_r+0x194>
 8009566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009568:	9a02      	ldr	r2, [sp, #8]
 800956a:	1a9b      	subs	r3, r3, r2
 800956c:	930a      	str	r3, [sp, #40]	; 0x28
 800956e:	4253      	negs	r3, r2
 8009570:	930e      	str	r3, [sp, #56]	; 0x38
 8009572:	2300      	movs	r3, #0
 8009574:	9315      	str	r3, [sp, #84]	; 0x54
 8009576:	e7c7      	b.n	8009508 <_dtoa_r+0x1c4>
 8009578:	2300      	movs	r3, #0
 800957a:	930f      	str	r3, [sp, #60]	; 0x3c
 800957c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800957e:	930c      	str	r3, [sp, #48]	; 0x30
 8009580:	9307      	str	r3, [sp, #28]
 8009582:	2b00      	cmp	r3, #0
 8009584:	dc13      	bgt.n	80095ae <_dtoa_r+0x26a>
 8009586:	2301      	movs	r3, #1
 8009588:	001a      	movs	r2, r3
 800958a:	930c      	str	r3, [sp, #48]	; 0x30
 800958c:	9307      	str	r3, [sp, #28]
 800958e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009590:	e00d      	b.n	80095ae <_dtoa_r+0x26a>
 8009592:	2301      	movs	r3, #1
 8009594:	e7f1      	b.n	800957a <_dtoa_r+0x236>
 8009596:	2300      	movs	r3, #0
 8009598:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800959a:	930f      	str	r3, [sp, #60]	; 0x3c
 800959c:	4694      	mov	ip, r2
 800959e:	9b02      	ldr	r3, [sp, #8]
 80095a0:	4463      	add	r3, ip
 80095a2:	930c      	str	r3, [sp, #48]	; 0x30
 80095a4:	3301      	adds	r3, #1
 80095a6:	9307      	str	r3, [sp, #28]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	dc00      	bgt.n	80095ae <_dtoa_r+0x26a>
 80095ac:	2301      	movs	r3, #1
 80095ae:	2200      	movs	r2, #0
 80095b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095b2:	6042      	str	r2, [r0, #4]
 80095b4:	3204      	adds	r2, #4
 80095b6:	0015      	movs	r5, r2
 80095b8:	3514      	adds	r5, #20
 80095ba:	6841      	ldr	r1, [r0, #4]
 80095bc:	429d      	cmp	r5, r3
 80095be:	d919      	bls.n	80095f4 <_dtoa_r+0x2b0>
 80095c0:	0038      	movs	r0, r7
 80095c2:	f001 f87f 	bl	800a6c4 <_Balloc>
 80095c6:	9006      	str	r0, [sp, #24]
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d117      	bne.n	80095fc <_dtoa_r+0x2b8>
 80095cc:	21d5      	movs	r1, #213	; 0xd5
 80095ce:	0002      	movs	r2, r0
 80095d0:	4b43      	ldr	r3, [pc, #268]	; (80096e0 <_dtoa_r+0x39c>)
 80095d2:	0049      	lsls	r1, r1, #1
 80095d4:	e6cb      	b.n	800936e <_dtoa_r+0x2a>
 80095d6:	2301      	movs	r3, #1
 80095d8:	e7de      	b.n	8009598 <_dtoa_r+0x254>
 80095da:	2300      	movs	r3, #0
 80095dc:	940f      	str	r4, [sp, #60]	; 0x3c
 80095de:	9322      	str	r3, [sp, #136]	; 0x88
 80095e0:	3b01      	subs	r3, #1
 80095e2:	930c      	str	r3, [sp, #48]	; 0x30
 80095e4:	9307      	str	r3, [sp, #28]
 80095e6:	2200      	movs	r2, #0
 80095e8:	3313      	adds	r3, #19
 80095ea:	e7d0      	b.n	800958e <_dtoa_r+0x24a>
 80095ec:	2301      	movs	r3, #1
 80095ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80095f0:	3b02      	subs	r3, #2
 80095f2:	e7f6      	b.n	80095e2 <_dtoa_r+0x29e>
 80095f4:	3101      	adds	r1, #1
 80095f6:	6041      	str	r1, [r0, #4]
 80095f8:	0052      	lsls	r2, r2, #1
 80095fa:	e7dc      	b.n	80095b6 <_dtoa_r+0x272>
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	9a06      	ldr	r2, [sp, #24]
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	9b07      	ldr	r3, [sp, #28]
 8009604:	2b0e      	cmp	r3, #14
 8009606:	d900      	bls.n	800960a <_dtoa_r+0x2c6>
 8009608:	e0eb      	b.n	80097e2 <_dtoa_r+0x49e>
 800960a:	2c00      	cmp	r4, #0
 800960c:	d100      	bne.n	8009610 <_dtoa_r+0x2cc>
 800960e:	e0e8      	b.n	80097e2 <_dtoa_r+0x49e>
 8009610:	9b02      	ldr	r3, [sp, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	dd68      	ble.n	80096e8 <_dtoa_r+0x3a4>
 8009616:	001a      	movs	r2, r3
 8009618:	210f      	movs	r1, #15
 800961a:	4b2d      	ldr	r3, [pc, #180]	; (80096d0 <_dtoa_r+0x38c>)
 800961c:	400a      	ands	r2, r1
 800961e:	00d2      	lsls	r2, r2, #3
 8009620:	189b      	adds	r3, r3, r2
 8009622:	681d      	ldr	r5, [r3, #0]
 8009624:	685e      	ldr	r6, [r3, #4]
 8009626:	9b02      	ldr	r3, [sp, #8]
 8009628:	111c      	asrs	r4, r3, #4
 800962a:	2302      	movs	r3, #2
 800962c:	9310      	str	r3, [sp, #64]	; 0x40
 800962e:	9b02      	ldr	r3, [sp, #8]
 8009630:	05db      	lsls	r3, r3, #23
 8009632:	d50b      	bpl.n	800964c <_dtoa_r+0x308>
 8009634:	4b2b      	ldr	r3, [pc, #172]	; (80096e4 <_dtoa_r+0x3a0>)
 8009636:	400c      	ands	r4, r1
 8009638:	6a1a      	ldr	r2, [r3, #32]
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800963e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009640:	f7f7 fbc8 	bl	8000dd4 <__aeabi_ddiv>
 8009644:	2303      	movs	r3, #3
 8009646:	9008      	str	r0, [sp, #32]
 8009648:	9109      	str	r1, [sp, #36]	; 0x24
 800964a:	9310      	str	r3, [sp, #64]	; 0x40
 800964c:	4b25      	ldr	r3, [pc, #148]	; (80096e4 <_dtoa_r+0x3a0>)
 800964e:	9314      	str	r3, [sp, #80]	; 0x50
 8009650:	2c00      	cmp	r4, #0
 8009652:	d108      	bne.n	8009666 <_dtoa_r+0x322>
 8009654:	9808      	ldr	r0, [sp, #32]
 8009656:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009658:	002a      	movs	r2, r5
 800965a:	0033      	movs	r3, r6
 800965c:	f7f7 fbba 	bl	8000dd4 <__aeabi_ddiv>
 8009660:	9008      	str	r0, [sp, #32]
 8009662:	9109      	str	r1, [sp, #36]	; 0x24
 8009664:	e05c      	b.n	8009720 <_dtoa_r+0x3dc>
 8009666:	2301      	movs	r3, #1
 8009668:	421c      	tst	r4, r3
 800966a:	d00b      	beq.n	8009684 <_dtoa_r+0x340>
 800966c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800966e:	0028      	movs	r0, r5
 8009670:	3301      	adds	r3, #1
 8009672:	9310      	str	r3, [sp, #64]	; 0x40
 8009674:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009676:	0031      	movs	r1, r6
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	f7f7 ffac 	bl	80015d8 <__aeabi_dmul>
 8009680:	0005      	movs	r5, r0
 8009682:	000e      	movs	r6, r1
 8009684:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009686:	1064      	asrs	r4, r4, #1
 8009688:	3308      	adds	r3, #8
 800968a:	e7e0      	b.n	800964e <_dtoa_r+0x30a>
 800968c:	0800c275 	.word	0x0800c275
 8009690:	0800c28c 	.word	0x0800c28c
 8009694:	7ff00000 	.word	0x7ff00000
 8009698:	0000270f 	.word	0x0000270f
 800969c:	0800c271 	.word	0x0800c271
 80096a0:	0800c274 	.word	0x0800c274
 80096a4:	0800c1ec 	.word	0x0800c1ec
 80096a8:	0800c1ed 	.word	0x0800c1ed
 80096ac:	3ff00000 	.word	0x3ff00000
 80096b0:	fffffc01 	.word	0xfffffc01
 80096b4:	3ff80000 	.word	0x3ff80000
 80096b8:	636f4361 	.word	0x636f4361
 80096bc:	3fd287a7 	.word	0x3fd287a7
 80096c0:	8b60c8b3 	.word	0x8b60c8b3
 80096c4:	3fc68a28 	.word	0x3fc68a28
 80096c8:	509f79fb 	.word	0x509f79fb
 80096cc:	3fd34413 	.word	0x3fd34413
 80096d0:	0800c3f8 	.word	0x0800c3f8
 80096d4:	00000432 	.word	0x00000432
 80096d8:	00000412 	.word	0x00000412
 80096dc:	fe100000 	.word	0xfe100000
 80096e0:	0800c2e7 	.word	0x0800c2e7
 80096e4:	0800c3d0 	.word	0x0800c3d0
 80096e8:	2302      	movs	r3, #2
 80096ea:	9310      	str	r3, [sp, #64]	; 0x40
 80096ec:	9b02      	ldr	r3, [sp, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d016      	beq.n	8009720 <_dtoa_r+0x3dc>
 80096f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80096f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80096f6:	425c      	negs	r4, r3
 80096f8:	230f      	movs	r3, #15
 80096fa:	4ab6      	ldr	r2, [pc, #728]	; (80099d4 <_dtoa_r+0x690>)
 80096fc:	4023      	ands	r3, r4
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	18d3      	adds	r3, r2, r3
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	f7f7 ff67 	bl	80015d8 <__aeabi_dmul>
 800970a:	2601      	movs	r6, #1
 800970c:	2300      	movs	r3, #0
 800970e:	9008      	str	r0, [sp, #32]
 8009710:	9109      	str	r1, [sp, #36]	; 0x24
 8009712:	4db1      	ldr	r5, [pc, #708]	; (80099d8 <_dtoa_r+0x694>)
 8009714:	1124      	asrs	r4, r4, #4
 8009716:	2c00      	cmp	r4, #0
 8009718:	d000      	beq.n	800971c <_dtoa_r+0x3d8>
 800971a:	e094      	b.n	8009846 <_dtoa_r+0x502>
 800971c:	2b00      	cmp	r3, #0
 800971e:	d19f      	bne.n	8009660 <_dtoa_r+0x31c>
 8009720:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009722:	2b00      	cmp	r3, #0
 8009724:	d100      	bne.n	8009728 <_dtoa_r+0x3e4>
 8009726:	e09b      	b.n	8009860 <_dtoa_r+0x51c>
 8009728:	9c08      	ldr	r4, [sp, #32]
 800972a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800972c:	2200      	movs	r2, #0
 800972e:	0020      	movs	r0, r4
 8009730:	0029      	movs	r1, r5
 8009732:	4baa      	ldr	r3, [pc, #680]	; (80099dc <_dtoa_r+0x698>)
 8009734:	f7f6 fe8e 	bl	8000454 <__aeabi_dcmplt>
 8009738:	2800      	cmp	r0, #0
 800973a:	d100      	bne.n	800973e <_dtoa_r+0x3fa>
 800973c:	e090      	b.n	8009860 <_dtoa_r+0x51c>
 800973e:	9b07      	ldr	r3, [sp, #28]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d100      	bne.n	8009746 <_dtoa_r+0x402>
 8009744:	e08c      	b.n	8009860 <_dtoa_r+0x51c>
 8009746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009748:	2b00      	cmp	r3, #0
 800974a:	dd46      	ble.n	80097da <_dtoa_r+0x496>
 800974c:	9b02      	ldr	r3, [sp, #8]
 800974e:	2200      	movs	r2, #0
 8009750:	0020      	movs	r0, r4
 8009752:	0029      	movs	r1, r5
 8009754:	1e5e      	subs	r6, r3, #1
 8009756:	4ba2      	ldr	r3, [pc, #648]	; (80099e0 <_dtoa_r+0x69c>)
 8009758:	f7f7 ff3e 	bl	80015d8 <__aeabi_dmul>
 800975c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800975e:	9008      	str	r0, [sp, #32]
 8009760:	9109      	str	r1, [sp, #36]	; 0x24
 8009762:	3301      	adds	r3, #1
 8009764:	9310      	str	r3, [sp, #64]	; 0x40
 8009766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009768:	9810      	ldr	r0, [sp, #64]	; 0x40
 800976a:	9c08      	ldr	r4, [sp, #32]
 800976c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800976e:	9314      	str	r3, [sp, #80]	; 0x50
 8009770:	f7f8 fd84 	bl	800227c <__aeabi_i2d>
 8009774:	0022      	movs	r2, r4
 8009776:	002b      	movs	r3, r5
 8009778:	f7f7 ff2e 	bl	80015d8 <__aeabi_dmul>
 800977c:	2200      	movs	r2, #0
 800977e:	4b99      	ldr	r3, [pc, #612]	; (80099e4 <_dtoa_r+0x6a0>)
 8009780:	f7f6 ffec 	bl	800075c <__aeabi_dadd>
 8009784:	9010      	str	r0, [sp, #64]	; 0x40
 8009786:	9111      	str	r1, [sp, #68]	; 0x44
 8009788:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800978a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800978c:	9208      	str	r2, [sp, #32]
 800978e:	9309      	str	r3, [sp, #36]	; 0x24
 8009790:	4a95      	ldr	r2, [pc, #596]	; (80099e8 <_dtoa_r+0x6a4>)
 8009792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009794:	4694      	mov	ip, r2
 8009796:	4463      	add	r3, ip
 8009798:	9317      	str	r3, [sp, #92]	; 0x5c
 800979a:	9309      	str	r3, [sp, #36]	; 0x24
 800979c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d161      	bne.n	8009866 <_dtoa_r+0x522>
 80097a2:	2200      	movs	r2, #0
 80097a4:	0020      	movs	r0, r4
 80097a6:	0029      	movs	r1, r5
 80097a8:	4b90      	ldr	r3, [pc, #576]	; (80099ec <_dtoa_r+0x6a8>)
 80097aa:	f7f8 f981 	bl	8001ab0 <__aeabi_dsub>
 80097ae:	9a08      	ldr	r2, [sp, #32]
 80097b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097b2:	0004      	movs	r4, r0
 80097b4:	000d      	movs	r5, r1
 80097b6:	f7f6 fe61 	bl	800047c <__aeabi_dcmpgt>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d000      	beq.n	80097c0 <_dtoa_r+0x47c>
 80097be:	e2af      	b.n	8009d20 <_dtoa_r+0x9dc>
 80097c0:	488b      	ldr	r0, [pc, #556]	; (80099f0 <_dtoa_r+0x6ac>)
 80097c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80097c4:	4684      	mov	ip, r0
 80097c6:	4461      	add	r1, ip
 80097c8:	000b      	movs	r3, r1
 80097ca:	0020      	movs	r0, r4
 80097cc:	0029      	movs	r1, r5
 80097ce:	9a08      	ldr	r2, [sp, #32]
 80097d0:	f7f6 fe40 	bl	8000454 <__aeabi_dcmplt>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d000      	beq.n	80097da <_dtoa_r+0x496>
 80097d8:	e29f      	b.n	8009d1a <_dtoa_r+0x9d6>
 80097da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80097de:	9308      	str	r3, [sp, #32]
 80097e0:	9409      	str	r4, [sp, #36]	; 0x24
 80097e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	da00      	bge.n	80097ea <_dtoa_r+0x4a6>
 80097e8:	e172      	b.n	8009ad0 <_dtoa_r+0x78c>
 80097ea:	9a02      	ldr	r2, [sp, #8]
 80097ec:	2a0e      	cmp	r2, #14
 80097ee:	dd00      	ble.n	80097f2 <_dtoa_r+0x4ae>
 80097f0:	e16e      	b.n	8009ad0 <_dtoa_r+0x78c>
 80097f2:	4b78      	ldr	r3, [pc, #480]	; (80099d4 <_dtoa_r+0x690>)
 80097f4:	00d2      	lsls	r2, r2, #3
 80097f6:	189b      	adds	r3, r3, r2
 80097f8:	685c      	ldr	r4, [r3, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	930a      	str	r3, [sp, #40]	; 0x28
 80097fe:	940b      	str	r4, [sp, #44]	; 0x2c
 8009800:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009802:	2b00      	cmp	r3, #0
 8009804:	db00      	blt.n	8009808 <_dtoa_r+0x4c4>
 8009806:	e0f7      	b.n	80099f8 <_dtoa_r+0x6b4>
 8009808:	9b07      	ldr	r3, [sp, #28]
 800980a:	2b00      	cmp	r3, #0
 800980c:	dd00      	ble.n	8009810 <_dtoa_r+0x4cc>
 800980e:	e0f3      	b.n	80099f8 <_dtoa_r+0x6b4>
 8009810:	d000      	beq.n	8009814 <_dtoa_r+0x4d0>
 8009812:	e282      	b.n	8009d1a <_dtoa_r+0x9d6>
 8009814:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009816:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009818:	2200      	movs	r2, #0
 800981a:	4b74      	ldr	r3, [pc, #464]	; (80099ec <_dtoa_r+0x6a8>)
 800981c:	f7f7 fedc 	bl	80015d8 <__aeabi_dmul>
 8009820:	9a08      	ldr	r2, [sp, #32]
 8009822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009824:	f7f6 fe34 	bl	8000490 <__aeabi_dcmpge>
 8009828:	9e07      	ldr	r6, [sp, #28]
 800982a:	0035      	movs	r5, r6
 800982c:	2800      	cmp	r0, #0
 800982e:	d000      	beq.n	8009832 <_dtoa_r+0x4ee>
 8009830:	e259      	b.n	8009ce6 <_dtoa_r+0x9a2>
 8009832:	9b06      	ldr	r3, [sp, #24]
 8009834:	9a06      	ldr	r2, [sp, #24]
 8009836:	3301      	adds	r3, #1
 8009838:	9308      	str	r3, [sp, #32]
 800983a:	2331      	movs	r3, #49	; 0x31
 800983c:	7013      	strb	r3, [r2, #0]
 800983e:	9b02      	ldr	r3, [sp, #8]
 8009840:	3301      	adds	r3, #1
 8009842:	9302      	str	r3, [sp, #8]
 8009844:	e254      	b.n	8009cf0 <_dtoa_r+0x9ac>
 8009846:	4234      	tst	r4, r6
 8009848:	d007      	beq.n	800985a <_dtoa_r+0x516>
 800984a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800984c:	3301      	adds	r3, #1
 800984e:	9310      	str	r3, [sp, #64]	; 0x40
 8009850:	682a      	ldr	r2, [r5, #0]
 8009852:	686b      	ldr	r3, [r5, #4]
 8009854:	f7f7 fec0 	bl	80015d8 <__aeabi_dmul>
 8009858:	0033      	movs	r3, r6
 800985a:	1064      	asrs	r4, r4, #1
 800985c:	3508      	adds	r5, #8
 800985e:	e75a      	b.n	8009716 <_dtoa_r+0x3d2>
 8009860:	9e02      	ldr	r6, [sp, #8]
 8009862:	9b07      	ldr	r3, [sp, #28]
 8009864:	e780      	b.n	8009768 <_dtoa_r+0x424>
 8009866:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800986a:	1e5a      	subs	r2, r3, #1
 800986c:	4b59      	ldr	r3, [pc, #356]	; (80099d4 <_dtoa_r+0x690>)
 800986e:	00d2      	lsls	r2, r2, #3
 8009870:	189b      	adds	r3, r3, r2
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	2900      	cmp	r1, #0
 8009878:	d051      	beq.n	800991e <_dtoa_r+0x5da>
 800987a:	2000      	movs	r0, #0
 800987c:	495d      	ldr	r1, [pc, #372]	; (80099f4 <_dtoa_r+0x6b0>)
 800987e:	f7f7 faa9 	bl	8000dd4 <__aeabi_ddiv>
 8009882:	9a08      	ldr	r2, [sp, #32]
 8009884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009886:	f7f8 f913 	bl	8001ab0 <__aeabi_dsub>
 800988a:	9a06      	ldr	r2, [sp, #24]
 800988c:	9b06      	ldr	r3, [sp, #24]
 800988e:	4694      	mov	ip, r2
 8009890:	9317      	str	r3, [sp, #92]	; 0x5c
 8009892:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009894:	9010      	str	r0, [sp, #64]	; 0x40
 8009896:	9111      	str	r1, [sp, #68]	; 0x44
 8009898:	4463      	add	r3, ip
 800989a:	9319      	str	r3, [sp, #100]	; 0x64
 800989c:	0029      	movs	r1, r5
 800989e:	0020      	movs	r0, r4
 80098a0:	f7f8 fcb6 	bl	8002210 <__aeabi_d2iz>
 80098a4:	9014      	str	r0, [sp, #80]	; 0x50
 80098a6:	f7f8 fce9 	bl	800227c <__aeabi_i2d>
 80098aa:	0002      	movs	r2, r0
 80098ac:	000b      	movs	r3, r1
 80098ae:	0020      	movs	r0, r4
 80098b0:	0029      	movs	r1, r5
 80098b2:	f7f8 f8fd 	bl	8001ab0 <__aeabi_dsub>
 80098b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80098ba:	3301      	adds	r3, #1
 80098bc:	9308      	str	r3, [sp, #32]
 80098be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098c0:	0004      	movs	r4, r0
 80098c2:	3330      	adds	r3, #48	; 0x30
 80098c4:	7013      	strb	r3, [r2, #0]
 80098c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098ca:	000d      	movs	r5, r1
 80098cc:	f7f6 fdc2 	bl	8000454 <__aeabi_dcmplt>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d175      	bne.n	80099c0 <_dtoa_r+0x67c>
 80098d4:	0022      	movs	r2, r4
 80098d6:	002b      	movs	r3, r5
 80098d8:	2000      	movs	r0, #0
 80098da:	4940      	ldr	r1, [pc, #256]	; (80099dc <_dtoa_r+0x698>)
 80098dc:	f7f8 f8e8 	bl	8001ab0 <__aeabi_dsub>
 80098e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098e4:	f7f6 fdb6 	bl	8000454 <__aeabi_dcmplt>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d000      	beq.n	80098ee <_dtoa_r+0x5aa>
 80098ec:	e0d2      	b.n	8009a94 <_dtoa_r+0x750>
 80098ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098f0:	9a08      	ldr	r2, [sp, #32]
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d100      	bne.n	80098f8 <_dtoa_r+0x5b4>
 80098f6:	e770      	b.n	80097da <_dtoa_r+0x496>
 80098f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80098fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80098fc:	2200      	movs	r2, #0
 80098fe:	4b38      	ldr	r3, [pc, #224]	; (80099e0 <_dtoa_r+0x69c>)
 8009900:	f7f7 fe6a 	bl	80015d8 <__aeabi_dmul>
 8009904:	4b36      	ldr	r3, [pc, #216]	; (80099e0 <_dtoa_r+0x69c>)
 8009906:	9010      	str	r0, [sp, #64]	; 0x40
 8009908:	9111      	str	r1, [sp, #68]	; 0x44
 800990a:	2200      	movs	r2, #0
 800990c:	0020      	movs	r0, r4
 800990e:	0029      	movs	r1, r5
 8009910:	f7f7 fe62 	bl	80015d8 <__aeabi_dmul>
 8009914:	9b08      	ldr	r3, [sp, #32]
 8009916:	0004      	movs	r4, r0
 8009918:	000d      	movs	r5, r1
 800991a:	9317      	str	r3, [sp, #92]	; 0x5c
 800991c:	e7be      	b.n	800989c <_dtoa_r+0x558>
 800991e:	9808      	ldr	r0, [sp, #32]
 8009920:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009922:	f7f7 fe59 	bl	80015d8 <__aeabi_dmul>
 8009926:	9a06      	ldr	r2, [sp, #24]
 8009928:	9b06      	ldr	r3, [sp, #24]
 800992a:	4694      	mov	ip, r2
 800992c:	9308      	str	r3, [sp, #32]
 800992e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009930:	9010      	str	r0, [sp, #64]	; 0x40
 8009932:	9111      	str	r1, [sp, #68]	; 0x44
 8009934:	4463      	add	r3, ip
 8009936:	9319      	str	r3, [sp, #100]	; 0x64
 8009938:	0029      	movs	r1, r5
 800993a:	0020      	movs	r0, r4
 800993c:	f7f8 fc68 	bl	8002210 <__aeabi_d2iz>
 8009940:	9017      	str	r0, [sp, #92]	; 0x5c
 8009942:	f7f8 fc9b 	bl	800227c <__aeabi_i2d>
 8009946:	0002      	movs	r2, r0
 8009948:	000b      	movs	r3, r1
 800994a:	0020      	movs	r0, r4
 800994c:	0029      	movs	r1, r5
 800994e:	f7f8 f8af 	bl	8001ab0 <__aeabi_dsub>
 8009952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009954:	9a08      	ldr	r2, [sp, #32]
 8009956:	3330      	adds	r3, #48	; 0x30
 8009958:	7013      	strb	r3, [r2, #0]
 800995a:	0013      	movs	r3, r2
 800995c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800995e:	3301      	adds	r3, #1
 8009960:	0004      	movs	r4, r0
 8009962:	000d      	movs	r5, r1
 8009964:	9308      	str	r3, [sp, #32]
 8009966:	4293      	cmp	r3, r2
 8009968:	d12c      	bne.n	80099c4 <_dtoa_r+0x680>
 800996a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800996c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800996e:	9a06      	ldr	r2, [sp, #24]
 8009970:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009972:	4694      	mov	ip, r2
 8009974:	4463      	add	r3, ip
 8009976:	2200      	movs	r2, #0
 8009978:	9308      	str	r3, [sp, #32]
 800997a:	4b1e      	ldr	r3, [pc, #120]	; (80099f4 <_dtoa_r+0x6b0>)
 800997c:	f7f6 feee 	bl	800075c <__aeabi_dadd>
 8009980:	0002      	movs	r2, r0
 8009982:	000b      	movs	r3, r1
 8009984:	0020      	movs	r0, r4
 8009986:	0029      	movs	r1, r5
 8009988:	f7f6 fd78 	bl	800047c <__aeabi_dcmpgt>
 800998c:	2800      	cmp	r0, #0
 800998e:	d000      	beq.n	8009992 <_dtoa_r+0x64e>
 8009990:	e080      	b.n	8009a94 <_dtoa_r+0x750>
 8009992:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009994:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009996:	2000      	movs	r0, #0
 8009998:	4916      	ldr	r1, [pc, #88]	; (80099f4 <_dtoa_r+0x6b0>)
 800999a:	f7f8 f889 	bl	8001ab0 <__aeabi_dsub>
 800999e:	0002      	movs	r2, r0
 80099a0:	000b      	movs	r3, r1
 80099a2:	0020      	movs	r0, r4
 80099a4:	0029      	movs	r1, r5
 80099a6:	f7f6 fd55 	bl	8000454 <__aeabi_dcmplt>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d100      	bne.n	80099b0 <_dtoa_r+0x66c>
 80099ae:	e714      	b.n	80097da <_dtoa_r+0x496>
 80099b0:	9b08      	ldr	r3, [sp, #32]
 80099b2:	001a      	movs	r2, r3
 80099b4:	3a01      	subs	r2, #1
 80099b6:	9208      	str	r2, [sp, #32]
 80099b8:	7812      	ldrb	r2, [r2, #0]
 80099ba:	2a30      	cmp	r2, #48	; 0x30
 80099bc:	d0f8      	beq.n	80099b0 <_dtoa_r+0x66c>
 80099be:	9308      	str	r3, [sp, #32]
 80099c0:	9602      	str	r6, [sp, #8]
 80099c2:	e055      	b.n	8009a70 <_dtoa_r+0x72c>
 80099c4:	2200      	movs	r2, #0
 80099c6:	4b06      	ldr	r3, [pc, #24]	; (80099e0 <_dtoa_r+0x69c>)
 80099c8:	f7f7 fe06 	bl	80015d8 <__aeabi_dmul>
 80099cc:	0004      	movs	r4, r0
 80099ce:	000d      	movs	r5, r1
 80099d0:	e7b2      	b.n	8009938 <_dtoa_r+0x5f4>
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	0800c3f8 	.word	0x0800c3f8
 80099d8:	0800c3d0 	.word	0x0800c3d0
 80099dc:	3ff00000 	.word	0x3ff00000
 80099e0:	40240000 	.word	0x40240000
 80099e4:	401c0000 	.word	0x401c0000
 80099e8:	fcc00000 	.word	0xfcc00000
 80099ec:	40140000 	.word	0x40140000
 80099f0:	7cc00000 	.word	0x7cc00000
 80099f4:	3fe00000 	.word	0x3fe00000
 80099f8:	9b07      	ldr	r3, [sp, #28]
 80099fa:	9e06      	ldr	r6, [sp, #24]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	199b      	adds	r3, r3, r6
 8009a00:	930c      	str	r3, [sp, #48]	; 0x30
 8009a02:	9c08      	ldr	r4, [sp, #32]
 8009a04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a0a:	0020      	movs	r0, r4
 8009a0c:	0029      	movs	r1, r5
 8009a0e:	f7f7 f9e1 	bl	8000dd4 <__aeabi_ddiv>
 8009a12:	f7f8 fbfd 	bl	8002210 <__aeabi_d2iz>
 8009a16:	9007      	str	r0, [sp, #28]
 8009a18:	f7f8 fc30 	bl	800227c <__aeabi_i2d>
 8009a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a20:	f7f7 fdda 	bl	80015d8 <__aeabi_dmul>
 8009a24:	0002      	movs	r2, r0
 8009a26:	000b      	movs	r3, r1
 8009a28:	0020      	movs	r0, r4
 8009a2a:	0029      	movs	r1, r5
 8009a2c:	f7f8 f840 	bl	8001ab0 <__aeabi_dsub>
 8009a30:	0033      	movs	r3, r6
 8009a32:	9a07      	ldr	r2, [sp, #28]
 8009a34:	3601      	adds	r6, #1
 8009a36:	3230      	adds	r2, #48	; 0x30
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a3c:	9608      	str	r6, [sp, #32]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d139      	bne.n	8009ab6 <_dtoa_r+0x772>
 8009a42:	0002      	movs	r2, r0
 8009a44:	000b      	movs	r3, r1
 8009a46:	f7f6 fe89 	bl	800075c <__aeabi_dadd>
 8009a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a4e:	0004      	movs	r4, r0
 8009a50:	000d      	movs	r5, r1
 8009a52:	f7f6 fd13 	bl	800047c <__aeabi_dcmpgt>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d11b      	bne.n	8009a92 <_dtoa_r+0x74e>
 8009a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a5e:	0020      	movs	r0, r4
 8009a60:	0029      	movs	r1, r5
 8009a62:	f7f6 fcf1 	bl	8000448 <__aeabi_dcmpeq>
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d002      	beq.n	8009a70 <_dtoa_r+0x72c>
 8009a6a:	9b07      	ldr	r3, [sp, #28]
 8009a6c:	07db      	lsls	r3, r3, #31
 8009a6e:	d410      	bmi.n	8009a92 <_dtoa_r+0x74e>
 8009a70:	0038      	movs	r0, r7
 8009a72:	9905      	ldr	r1, [sp, #20]
 8009a74:	f000 fe6a 	bl	800a74c <_Bfree>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	9a08      	ldr	r2, [sp, #32]
 8009a7c:	9802      	ldr	r0, [sp, #8]
 8009a7e:	7013      	strb	r3, [r2, #0]
 8009a80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a82:	3001      	adds	r0, #1
 8009a84:	6018      	str	r0, [r3, #0]
 8009a86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d100      	bne.n	8009a8e <_dtoa_r+0x74a>
 8009a8c:	e4a6      	b.n	80093dc <_dtoa_r+0x98>
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	e4a4      	b.n	80093dc <_dtoa_r+0x98>
 8009a92:	9e02      	ldr	r6, [sp, #8]
 8009a94:	9b08      	ldr	r3, [sp, #32]
 8009a96:	9308      	str	r3, [sp, #32]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	781a      	ldrb	r2, [r3, #0]
 8009a9c:	2a39      	cmp	r2, #57	; 0x39
 8009a9e:	d106      	bne.n	8009aae <_dtoa_r+0x76a>
 8009aa0:	9a06      	ldr	r2, [sp, #24]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d1f7      	bne.n	8009a96 <_dtoa_r+0x752>
 8009aa6:	2230      	movs	r2, #48	; 0x30
 8009aa8:	9906      	ldr	r1, [sp, #24]
 8009aaa:	3601      	adds	r6, #1
 8009aac:	700a      	strb	r2, [r1, #0]
 8009aae:	781a      	ldrb	r2, [r3, #0]
 8009ab0:	3201      	adds	r2, #1
 8009ab2:	701a      	strb	r2, [r3, #0]
 8009ab4:	e784      	b.n	80099c0 <_dtoa_r+0x67c>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	4baa      	ldr	r3, [pc, #680]	; (8009d64 <_dtoa_r+0xa20>)
 8009aba:	f7f7 fd8d 	bl	80015d8 <__aeabi_dmul>
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	0004      	movs	r4, r0
 8009ac4:	000d      	movs	r5, r1
 8009ac6:	f7f6 fcbf 	bl	8000448 <__aeabi_dcmpeq>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d09b      	beq.n	8009a06 <_dtoa_r+0x6c2>
 8009ace:	e7cf      	b.n	8009a70 <_dtoa_r+0x72c>
 8009ad0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ad2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009ad4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	d012      	beq.n	8009b00 <_dtoa_r+0x7bc>
 8009ada:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009adc:	2a01      	cmp	r2, #1
 8009ade:	dc66      	bgt.n	8009bae <_dtoa_r+0x86a>
 8009ae0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ae2:	2a00      	cmp	r2, #0
 8009ae4:	d05d      	beq.n	8009ba2 <_dtoa_r+0x85e>
 8009ae6:	4aa0      	ldr	r2, [pc, #640]	; (8009d68 <_dtoa_r+0xa24>)
 8009ae8:	189b      	adds	r3, r3, r2
 8009aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aec:	2101      	movs	r1, #1
 8009aee:	18d2      	adds	r2, r2, r3
 8009af0:	920a      	str	r2, [sp, #40]	; 0x28
 8009af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009af4:	0038      	movs	r0, r7
 8009af6:	18d3      	adds	r3, r2, r3
 8009af8:	930d      	str	r3, [sp, #52]	; 0x34
 8009afa:	f000 ff23 	bl	800a944 <__i2b>
 8009afe:	0005      	movs	r5, r0
 8009b00:	2c00      	cmp	r4, #0
 8009b02:	dd0e      	ble.n	8009b22 <_dtoa_r+0x7de>
 8009b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	dd0b      	ble.n	8009b22 <_dtoa_r+0x7de>
 8009b0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b0c:	0023      	movs	r3, r4
 8009b0e:	4294      	cmp	r4, r2
 8009b10:	dd00      	ble.n	8009b14 <_dtoa_r+0x7d0>
 8009b12:	0013      	movs	r3, r2
 8009b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b16:	1ae4      	subs	r4, r4, r3
 8009b18:	1ad2      	subs	r2, r2, r3
 8009b1a:	920a      	str	r2, [sp, #40]	; 0x28
 8009b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	930d      	str	r3, [sp, #52]	; 0x34
 8009b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01f      	beq.n	8009b68 <_dtoa_r+0x824>
 8009b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d054      	beq.n	8009bd8 <_dtoa_r+0x894>
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	dd11      	ble.n	8009b56 <_dtoa_r+0x812>
 8009b32:	0029      	movs	r1, r5
 8009b34:	0032      	movs	r2, r6
 8009b36:	0038      	movs	r0, r7
 8009b38:	f000 ffca 	bl	800aad0 <__pow5mult>
 8009b3c:	9a05      	ldr	r2, [sp, #20]
 8009b3e:	0001      	movs	r1, r0
 8009b40:	0005      	movs	r5, r0
 8009b42:	0038      	movs	r0, r7
 8009b44:	f000 ff14 	bl	800a970 <__multiply>
 8009b48:	9905      	ldr	r1, [sp, #20]
 8009b4a:	9014      	str	r0, [sp, #80]	; 0x50
 8009b4c:	0038      	movs	r0, r7
 8009b4e:	f000 fdfd 	bl	800a74c <_Bfree>
 8009b52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b58:	1b9a      	subs	r2, r3, r6
 8009b5a:	42b3      	cmp	r3, r6
 8009b5c:	d004      	beq.n	8009b68 <_dtoa_r+0x824>
 8009b5e:	0038      	movs	r0, r7
 8009b60:	9905      	ldr	r1, [sp, #20]
 8009b62:	f000 ffb5 	bl	800aad0 <__pow5mult>
 8009b66:	9005      	str	r0, [sp, #20]
 8009b68:	2101      	movs	r1, #1
 8009b6a:	0038      	movs	r0, r7
 8009b6c:	f000 feea 	bl	800a944 <__i2b>
 8009b70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b72:	0006      	movs	r6, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dd31      	ble.n	8009bdc <_dtoa_r+0x898>
 8009b78:	001a      	movs	r2, r3
 8009b7a:	0001      	movs	r1, r0
 8009b7c:	0038      	movs	r0, r7
 8009b7e:	f000 ffa7 	bl	800aad0 <__pow5mult>
 8009b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b84:	0006      	movs	r6, r0
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	dd2d      	ble.n	8009be6 <_dtoa_r+0x8a2>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b8e:	6933      	ldr	r3, [r6, #16]
 8009b90:	3303      	adds	r3, #3
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	18f3      	adds	r3, r6, r3
 8009b96:	6858      	ldr	r0, [r3, #4]
 8009b98:	f000 fe8c 	bl	800a8b4 <__hi0bits>
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	1a18      	subs	r0, r3, r0
 8009ba0:	e039      	b.n	8009c16 <_dtoa_r+0x8d2>
 8009ba2:	2336      	movs	r3, #54	; 0x36
 8009ba4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009ba6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009ba8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009baa:	1a9b      	subs	r3, r3, r2
 8009bac:	e79d      	b.n	8009aea <_dtoa_r+0x7a6>
 8009bae:	9b07      	ldr	r3, [sp, #28]
 8009bb0:	1e5e      	subs	r6, r3, #1
 8009bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bb4:	42b3      	cmp	r3, r6
 8009bb6:	db07      	blt.n	8009bc8 <_dtoa_r+0x884>
 8009bb8:	1b9e      	subs	r6, r3, r6
 8009bba:	9b07      	ldr	r3, [sp, #28]
 8009bbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	da93      	bge.n	8009aea <_dtoa_r+0x7a6>
 8009bc2:	1ae4      	subs	r4, r4, r3
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e790      	b.n	8009aea <_dtoa_r+0x7a6>
 8009bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009bcc:	1af3      	subs	r3, r6, r3
 8009bce:	18d3      	adds	r3, r2, r3
 8009bd0:	960e      	str	r6, [sp, #56]	; 0x38
 8009bd2:	9315      	str	r3, [sp, #84]	; 0x54
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	e7f0      	b.n	8009bba <_dtoa_r+0x876>
 8009bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bda:	e7c0      	b.n	8009b5e <_dtoa_r+0x81a>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	930e      	str	r3, [sp, #56]	; 0x38
 8009be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	dc13      	bgt.n	8009c0e <_dtoa_r+0x8ca>
 8009be6:	2300      	movs	r3, #0
 8009be8:	930e      	str	r3, [sp, #56]	; 0x38
 8009bea:	9b08      	ldr	r3, [sp, #32]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10e      	bne.n	8009c0e <_dtoa_r+0x8ca>
 8009bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf2:	031b      	lsls	r3, r3, #12
 8009bf4:	d10b      	bne.n	8009c0e <_dtoa_r+0x8ca>
 8009bf6:	4b5d      	ldr	r3, [pc, #372]	; (8009d6c <_dtoa_r+0xa28>)
 8009bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bfa:	4213      	tst	r3, r2
 8009bfc:	d007      	beq.n	8009c0e <_dtoa_r+0x8ca>
 8009bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c00:	3301      	adds	r3, #1
 8009c02:	930a      	str	r3, [sp, #40]	; 0x28
 8009c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c06:	3301      	adds	r3, #1
 8009c08:	930d      	str	r3, [sp, #52]	; 0x34
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c10:	2001      	movs	r0, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1bb      	bne.n	8009b8e <_dtoa_r+0x84a>
 8009c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c18:	221f      	movs	r2, #31
 8009c1a:	1818      	adds	r0, r3, r0
 8009c1c:	0003      	movs	r3, r0
 8009c1e:	4013      	ands	r3, r2
 8009c20:	4210      	tst	r0, r2
 8009c22:	d046      	beq.n	8009cb2 <_dtoa_r+0x96e>
 8009c24:	3201      	adds	r2, #1
 8009c26:	1ad2      	subs	r2, r2, r3
 8009c28:	2a04      	cmp	r2, #4
 8009c2a:	dd3f      	ble.n	8009cac <_dtoa_r+0x968>
 8009c2c:	221c      	movs	r2, #28
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c32:	18e4      	adds	r4, r4, r3
 8009c34:	18d2      	adds	r2, r2, r3
 8009c36:	920a      	str	r2, [sp, #40]	; 0x28
 8009c38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c3a:	18d3      	adds	r3, r2, r3
 8009c3c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	dd05      	ble.n	8009c50 <_dtoa_r+0x90c>
 8009c44:	001a      	movs	r2, r3
 8009c46:	0038      	movs	r0, r7
 8009c48:	9905      	ldr	r1, [sp, #20]
 8009c4a:	f000 ff9d 	bl	800ab88 <__lshift>
 8009c4e:	9005      	str	r0, [sp, #20]
 8009c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dd05      	ble.n	8009c62 <_dtoa_r+0x91e>
 8009c56:	0031      	movs	r1, r6
 8009c58:	001a      	movs	r2, r3
 8009c5a:	0038      	movs	r0, r7
 8009c5c:	f000 ff94 	bl	800ab88 <__lshift>
 8009c60:	0006      	movs	r6, r0
 8009c62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d026      	beq.n	8009cb6 <_dtoa_r+0x972>
 8009c68:	0031      	movs	r1, r6
 8009c6a:	9805      	ldr	r0, [sp, #20]
 8009c6c:	f000 fffa 	bl	800ac64 <__mcmp>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	da20      	bge.n	8009cb6 <_dtoa_r+0x972>
 8009c74:	9b02      	ldr	r3, [sp, #8]
 8009c76:	220a      	movs	r2, #10
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	9302      	str	r3, [sp, #8]
 8009c7c:	0038      	movs	r0, r7
 8009c7e:	2300      	movs	r3, #0
 8009c80:	9905      	ldr	r1, [sp, #20]
 8009c82:	f000 fd87 	bl	800a794 <__multadd>
 8009c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c88:	9005      	str	r0, [sp, #20]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d100      	bne.n	8009c90 <_dtoa_r+0x94c>
 8009c8e:	e166      	b.n	8009f5e <_dtoa_r+0xc1a>
 8009c90:	2300      	movs	r3, #0
 8009c92:	0029      	movs	r1, r5
 8009c94:	220a      	movs	r2, #10
 8009c96:	0038      	movs	r0, r7
 8009c98:	f000 fd7c 	bl	800a794 <__multadd>
 8009c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c9e:	0005      	movs	r5, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	dc47      	bgt.n	8009d34 <_dtoa_r+0x9f0>
 8009ca4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	dc0d      	bgt.n	8009cc6 <_dtoa_r+0x982>
 8009caa:	e043      	b.n	8009d34 <_dtoa_r+0x9f0>
 8009cac:	2a04      	cmp	r2, #4
 8009cae:	d0c6      	beq.n	8009c3e <_dtoa_r+0x8fa>
 8009cb0:	0013      	movs	r3, r2
 8009cb2:	331c      	adds	r3, #28
 8009cb4:	e7bc      	b.n	8009c30 <_dtoa_r+0x8ec>
 8009cb6:	9b07      	ldr	r3, [sp, #28]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dc35      	bgt.n	8009d28 <_dtoa_r+0x9e4>
 8009cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	dd32      	ble.n	8009d28 <_dtoa_r+0x9e4>
 8009cc2:	9b07      	ldr	r3, [sp, #28]
 8009cc4:	930c      	str	r3, [sp, #48]	; 0x30
 8009cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10c      	bne.n	8009ce6 <_dtoa_r+0x9a2>
 8009ccc:	0031      	movs	r1, r6
 8009cce:	2205      	movs	r2, #5
 8009cd0:	0038      	movs	r0, r7
 8009cd2:	f000 fd5f 	bl	800a794 <__multadd>
 8009cd6:	0006      	movs	r6, r0
 8009cd8:	0001      	movs	r1, r0
 8009cda:	9805      	ldr	r0, [sp, #20]
 8009cdc:	f000 ffc2 	bl	800ac64 <__mcmp>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	dd00      	ble.n	8009ce6 <_dtoa_r+0x9a2>
 8009ce4:	e5a5      	b.n	8009832 <_dtoa_r+0x4ee>
 8009ce6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ce8:	43db      	mvns	r3, r3
 8009cea:	9302      	str	r3, [sp, #8]
 8009cec:	9b06      	ldr	r3, [sp, #24]
 8009cee:	9308      	str	r3, [sp, #32]
 8009cf0:	2400      	movs	r4, #0
 8009cf2:	0031      	movs	r1, r6
 8009cf4:	0038      	movs	r0, r7
 8009cf6:	f000 fd29 	bl	800a74c <_Bfree>
 8009cfa:	2d00      	cmp	r5, #0
 8009cfc:	d100      	bne.n	8009d00 <_dtoa_r+0x9bc>
 8009cfe:	e6b7      	b.n	8009a70 <_dtoa_r+0x72c>
 8009d00:	2c00      	cmp	r4, #0
 8009d02:	d005      	beq.n	8009d10 <_dtoa_r+0x9cc>
 8009d04:	42ac      	cmp	r4, r5
 8009d06:	d003      	beq.n	8009d10 <_dtoa_r+0x9cc>
 8009d08:	0021      	movs	r1, r4
 8009d0a:	0038      	movs	r0, r7
 8009d0c:	f000 fd1e 	bl	800a74c <_Bfree>
 8009d10:	0029      	movs	r1, r5
 8009d12:	0038      	movs	r0, r7
 8009d14:	f000 fd1a 	bl	800a74c <_Bfree>
 8009d18:	e6aa      	b.n	8009a70 <_dtoa_r+0x72c>
 8009d1a:	2600      	movs	r6, #0
 8009d1c:	0035      	movs	r5, r6
 8009d1e:	e7e2      	b.n	8009ce6 <_dtoa_r+0x9a2>
 8009d20:	9602      	str	r6, [sp, #8]
 8009d22:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009d24:	0035      	movs	r5, r6
 8009d26:	e584      	b.n	8009832 <_dtoa_r+0x4ee>
 8009d28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d100      	bne.n	8009d30 <_dtoa_r+0x9ec>
 8009d2e:	e0ce      	b.n	8009ece <_dtoa_r+0xb8a>
 8009d30:	9b07      	ldr	r3, [sp, #28]
 8009d32:	930c      	str	r3, [sp, #48]	; 0x30
 8009d34:	2c00      	cmp	r4, #0
 8009d36:	dd05      	ble.n	8009d44 <_dtoa_r+0xa00>
 8009d38:	0029      	movs	r1, r5
 8009d3a:	0022      	movs	r2, r4
 8009d3c:	0038      	movs	r0, r7
 8009d3e:	f000 ff23 	bl	800ab88 <__lshift>
 8009d42:	0005      	movs	r5, r0
 8009d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d46:	0028      	movs	r0, r5
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d022      	beq.n	8009d92 <_dtoa_r+0xa4e>
 8009d4c:	0038      	movs	r0, r7
 8009d4e:	6869      	ldr	r1, [r5, #4]
 8009d50:	f000 fcb8 	bl	800a6c4 <_Balloc>
 8009d54:	1e04      	subs	r4, r0, #0
 8009d56:	d10f      	bne.n	8009d78 <_dtoa_r+0xa34>
 8009d58:	0002      	movs	r2, r0
 8009d5a:	4b05      	ldr	r3, [pc, #20]	; (8009d70 <_dtoa_r+0xa2c>)
 8009d5c:	4905      	ldr	r1, [pc, #20]	; (8009d74 <_dtoa_r+0xa30>)
 8009d5e:	f7ff fb06 	bl	800936e <_dtoa_r+0x2a>
 8009d62:	46c0      	nop			; (mov r8, r8)
 8009d64:	40240000 	.word	0x40240000
 8009d68:	00000433 	.word	0x00000433
 8009d6c:	7ff00000 	.word	0x7ff00000
 8009d70:	0800c2e7 	.word	0x0800c2e7
 8009d74:	000002ea 	.word	0x000002ea
 8009d78:	0029      	movs	r1, r5
 8009d7a:	692b      	ldr	r3, [r5, #16]
 8009d7c:	310c      	adds	r1, #12
 8009d7e:	1c9a      	adds	r2, r3, #2
 8009d80:	0092      	lsls	r2, r2, #2
 8009d82:	300c      	adds	r0, #12
 8009d84:	f7fd fbe0 	bl	8007548 <memcpy>
 8009d88:	2201      	movs	r2, #1
 8009d8a:	0021      	movs	r1, r4
 8009d8c:	0038      	movs	r0, r7
 8009d8e:	f000 fefb 	bl	800ab88 <__lshift>
 8009d92:	9b06      	ldr	r3, [sp, #24]
 8009d94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d96:	930a      	str	r3, [sp, #40]	; 0x28
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	189b      	adds	r3, r3, r2
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	002c      	movs	r4, r5
 8009da0:	0005      	movs	r5, r0
 8009da2:	9314      	str	r3, [sp, #80]	; 0x50
 8009da4:	9b08      	ldr	r3, [sp, #32]
 8009da6:	4013      	ands	r3, r2
 8009da8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009daa:	0031      	movs	r1, r6
 8009dac:	9805      	ldr	r0, [sp, #20]
 8009dae:	f7ff fa3d 	bl	800922c <quorem>
 8009db2:	0003      	movs	r3, r0
 8009db4:	0021      	movs	r1, r4
 8009db6:	3330      	adds	r3, #48	; 0x30
 8009db8:	900d      	str	r0, [sp, #52]	; 0x34
 8009dba:	9805      	ldr	r0, [sp, #20]
 8009dbc:	9307      	str	r3, [sp, #28]
 8009dbe:	f000 ff51 	bl	800ac64 <__mcmp>
 8009dc2:	002a      	movs	r2, r5
 8009dc4:	900e      	str	r0, [sp, #56]	; 0x38
 8009dc6:	0031      	movs	r1, r6
 8009dc8:	0038      	movs	r0, r7
 8009dca:	f000 ff67 	bl	800ac9c <__mdiff>
 8009dce:	68c3      	ldr	r3, [r0, #12]
 8009dd0:	9008      	str	r0, [sp, #32]
 8009dd2:	9310      	str	r3, [sp, #64]	; 0x40
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8009dd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d104      	bne.n	8009de8 <_dtoa_r+0xaa4>
 8009dde:	0001      	movs	r1, r0
 8009de0:	9805      	ldr	r0, [sp, #20]
 8009de2:	f000 ff3f 	bl	800ac64 <__mcmp>
 8009de6:	900c      	str	r0, [sp, #48]	; 0x30
 8009de8:	0038      	movs	r0, r7
 8009dea:	9908      	ldr	r1, [sp, #32]
 8009dec:	f000 fcae 	bl	800a74c <_Bfree>
 8009df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009df4:	3301      	adds	r3, #1
 8009df6:	9308      	str	r3, [sp, #32]
 8009df8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	d10c      	bne.n	8009e1c <_dtoa_r+0xad8>
 8009e02:	9b07      	ldr	r3, [sp, #28]
 8009e04:	2b39      	cmp	r3, #57	; 0x39
 8009e06:	d026      	beq.n	8009e56 <_dtoa_r+0xb12>
 8009e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dd02      	ble.n	8009e14 <_dtoa_r+0xad0>
 8009e0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e10:	3331      	adds	r3, #49	; 0x31
 8009e12:	9307      	str	r3, [sp, #28]
 8009e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e16:	9a07      	ldr	r2, [sp, #28]
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	e76a      	b.n	8009cf2 <_dtoa_r+0x9ae>
 8009e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	db04      	blt.n	8009e2c <_dtoa_r+0xae8>
 8009e22:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e24:	4313      	orrs	r3, r2
 8009e26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	d11f      	bne.n	8009e6c <_dtoa_r+0xb28>
 8009e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	ddf0      	ble.n	8009e14 <_dtoa_r+0xad0>
 8009e32:	9905      	ldr	r1, [sp, #20]
 8009e34:	2201      	movs	r2, #1
 8009e36:	0038      	movs	r0, r7
 8009e38:	f000 fea6 	bl	800ab88 <__lshift>
 8009e3c:	0031      	movs	r1, r6
 8009e3e:	9005      	str	r0, [sp, #20]
 8009e40:	f000 ff10 	bl	800ac64 <__mcmp>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	dc03      	bgt.n	8009e50 <_dtoa_r+0xb0c>
 8009e48:	d1e4      	bne.n	8009e14 <_dtoa_r+0xad0>
 8009e4a:	9b07      	ldr	r3, [sp, #28]
 8009e4c:	07db      	lsls	r3, r3, #31
 8009e4e:	d5e1      	bpl.n	8009e14 <_dtoa_r+0xad0>
 8009e50:	9b07      	ldr	r3, [sp, #28]
 8009e52:	2b39      	cmp	r3, #57	; 0x39
 8009e54:	d1db      	bne.n	8009e0e <_dtoa_r+0xaca>
 8009e56:	2339      	movs	r3, #57	; 0x39
 8009e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e5a:	7013      	strb	r3, [r2, #0]
 8009e5c:	9b08      	ldr	r3, [sp, #32]
 8009e5e:	9308      	str	r3, [sp, #32]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	2a39      	cmp	r2, #57	; 0x39
 8009e66:	d068      	beq.n	8009f3a <_dtoa_r+0xbf6>
 8009e68:	3201      	adds	r2, #1
 8009e6a:	e7d5      	b.n	8009e18 <_dtoa_r+0xad4>
 8009e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	dd07      	ble.n	8009e82 <_dtoa_r+0xb3e>
 8009e72:	9b07      	ldr	r3, [sp, #28]
 8009e74:	2b39      	cmp	r3, #57	; 0x39
 8009e76:	d0ee      	beq.n	8009e56 <_dtoa_r+0xb12>
 8009e78:	9b07      	ldr	r3, [sp, #28]
 8009e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	7013      	strb	r3, [r2, #0]
 8009e80:	e737      	b.n	8009cf2 <_dtoa_r+0x9ae>
 8009e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e84:	9a07      	ldr	r2, [sp, #28]
 8009e86:	701a      	strb	r2, [r3, #0]
 8009e88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d03e      	beq.n	8009f0e <_dtoa_r+0xbca>
 8009e90:	2300      	movs	r3, #0
 8009e92:	220a      	movs	r2, #10
 8009e94:	9905      	ldr	r1, [sp, #20]
 8009e96:	0038      	movs	r0, r7
 8009e98:	f000 fc7c 	bl	800a794 <__multadd>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	9005      	str	r0, [sp, #20]
 8009ea0:	220a      	movs	r2, #10
 8009ea2:	0021      	movs	r1, r4
 8009ea4:	0038      	movs	r0, r7
 8009ea6:	42ac      	cmp	r4, r5
 8009ea8:	d106      	bne.n	8009eb8 <_dtoa_r+0xb74>
 8009eaa:	f000 fc73 	bl	800a794 <__multadd>
 8009eae:	0004      	movs	r4, r0
 8009eb0:	0005      	movs	r5, r0
 8009eb2:	9b08      	ldr	r3, [sp, #32]
 8009eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8009eb6:	e778      	b.n	8009daa <_dtoa_r+0xa66>
 8009eb8:	f000 fc6c 	bl	800a794 <__multadd>
 8009ebc:	0029      	movs	r1, r5
 8009ebe:	0004      	movs	r4, r0
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	220a      	movs	r2, #10
 8009ec4:	0038      	movs	r0, r7
 8009ec6:	f000 fc65 	bl	800a794 <__multadd>
 8009eca:	0005      	movs	r5, r0
 8009ecc:	e7f1      	b.n	8009eb2 <_dtoa_r+0xb6e>
 8009ece:	9b07      	ldr	r3, [sp, #28]
 8009ed0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ed2:	2400      	movs	r4, #0
 8009ed4:	0031      	movs	r1, r6
 8009ed6:	9805      	ldr	r0, [sp, #20]
 8009ed8:	f7ff f9a8 	bl	800922c <quorem>
 8009edc:	9b06      	ldr	r3, [sp, #24]
 8009ede:	3030      	adds	r0, #48	; 0x30
 8009ee0:	5518      	strb	r0, [r3, r4]
 8009ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ee4:	3401      	adds	r4, #1
 8009ee6:	9007      	str	r0, [sp, #28]
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	dd07      	ble.n	8009efc <_dtoa_r+0xbb8>
 8009eec:	2300      	movs	r3, #0
 8009eee:	220a      	movs	r2, #10
 8009ef0:	0038      	movs	r0, r7
 8009ef2:	9905      	ldr	r1, [sp, #20]
 8009ef4:	f000 fc4e 	bl	800a794 <__multadd>
 8009ef8:	9005      	str	r0, [sp, #20]
 8009efa:	e7eb      	b.n	8009ed4 <_dtoa_r+0xb90>
 8009efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009efe:	2001      	movs	r0, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dd00      	ble.n	8009f06 <_dtoa_r+0xbc2>
 8009f04:	0018      	movs	r0, r3
 8009f06:	2400      	movs	r4, #0
 8009f08:	9b06      	ldr	r3, [sp, #24]
 8009f0a:	181b      	adds	r3, r3, r0
 8009f0c:	9308      	str	r3, [sp, #32]
 8009f0e:	9905      	ldr	r1, [sp, #20]
 8009f10:	2201      	movs	r2, #1
 8009f12:	0038      	movs	r0, r7
 8009f14:	f000 fe38 	bl	800ab88 <__lshift>
 8009f18:	0031      	movs	r1, r6
 8009f1a:	9005      	str	r0, [sp, #20]
 8009f1c:	f000 fea2 	bl	800ac64 <__mcmp>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	dc9b      	bgt.n	8009e5c <_dtoa_r+0xb18>
 8009f24:	d102      	bne.n	8009f2c <_dtoa_r+0xbe8>
 8009f26:	9b07      	ldr	r3, [sp, #28]
 8009f28:	07db      	lsls	r3, r3, #31
 8009f2a:	d497      	bmi.n	8009e5c <_dtoa_r+0xb18>
 8009f2c:	9b08      	ldr	r3, [sp, #32]
 8009f2e:	9308      	str	r3, [sp, #32]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	781a      	ldrb	r2, [r3, #0]
 8009f34:	2a30      	cmp	r2, #48	; 0x30
 8009f36:	d0fa      	beq.n	8009f2e <_dtoa_r+0xbea>
 8009f38:	e6db      	b.n	8009cf2 <_dtoa_r+0x9ae>
 8009f3a:	9a06      	ldr	r2, [sp, #24]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d18e      	bne.n	8009e5e <_dtoa_r+0xb1a>
 8009f40:	9b02      	ldr	r3, [sp, #8]
 8009f42:	3301      	adds	r3, #1
 8009f44:	9302      	str	r3, [sp, #8]
 8009f46:	2331      	movs	r3, #49	; 0x31
 8009f48:	e799      	b.n	8009e7e <_dtoa_r+0xb3a>
 8009f4a:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <_dtoa_r+0xc2c>)
 8009f4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009f4e:	9306      	str	r3, [sp, #24]
 8009f50:	4b08      	ldr	r3, [pc, #32]	; (8009f74 <_dtoa_r+0xc30>)
 8009f52:	2a00      	cmp	r2, #0
 8009f54:	d001      	beq.n	8009f5a <_dtoa_r+0xc16>
 8009f56:	f7ff fa3f 	bl	80093d8 <_dtoa_r+0x94>
 8009f5a:	f7ff fa3f 	bl	80093dc <_dtoa_r+0x98>
 8009f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	dcb6      	bgt.n	8009ed2 <_dtoa_r+0xb8e>
 8009f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	dd00      	ble.n	8009f6c <_dtoa_r+0xc28>
 8009f6a:	e6ac      	b.n	8009cc6 <_dtoa_r+0x982>
 8009f6c:	e7b1      	b.n	8009ed2 <_dtoa_r+0xb8e>
 8009f6e:	46c0      	nop			; (mov r8, r8)
 8009f70:	0800c268 	.word	0x0800c268
 8009f74:	0800c270 	.word	0x0800c270

08009f78 <rshift>:
 8009f78:	0002      	movs	r2, r0
 8009f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7c:	6904      	ldr	r4, [r0, #16]
 8009f7e:	3214      	adds	r2, #20
 8009f80:	0013      	movs	r3, r2
 8009f82:	b085      	sub	sp, #20
 8009f84:	114f      	asrs	r7, r1, #5
 8009f86:	42bc      	cmp	r4, r7
 8009f88:	dd31      	ble.n	8009fee <rshift+0x76>
 8009f8a:	00bb      	lsls	r3, r7, #2
 8009f8c:	18d3      	adds	r3, r2, r3
 8009f8e:	261f      	movs	r6, #31
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	000b      	movs	r3, r1
 8009f94:	00a5      	lsls	r5, r4, #2
 8009f96:	4033      	ands	r3, r6
 8009f98:	1955      	adds	r5, r2, r5
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	4231      	tst	r1, r6
 8009f9e:	d10c      	bne.n	8009fba <rshift+0x42>
 8009fa0:	0016      	movs	r6, r2
 8009fa2:	9901      	ldr	r1, [sp, #4]
 8009fa4:	428d      	cmp	r5, r1
 8009fa6:	d838      	bhi.n	800a01a <rshift+0xa2>
 8009fa8:	9901      	ldr	r1, [sp, #4]
 8009faa:	2300      	movs	r3, #0
 8009fac:	3903      	subs	r1, #3
 8009fae:	428d      	cmp	r5, r1
 8009fb0:	d301      	bcc.n	8009fb6 <rshift+0x3e>
 8009fb2:	1be3      	subs	r3, r4, r7
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	18d3      	adds	r3, r2, r3
 8009fb8:	e019      	b.n	8009fee <rshift+0x76>
 8009fba:	2120      	movs	r1, #32
 8009fbc:	9b02      	ldr	r3, [sp, #8]
 8009fbe:	9e01      	ldr	r6, [sp, #4]
 8009fc0:	1acb      	subs	r3, r1, r3
 8009fc2:	9303      	str	r3, [sp, #12]
 8009fc4:	ce02      	ldmia	r6!, {r1}
 8009fc6:	9b02      	ldr	r3, [sp, #8]
 8009fc8:	4694      	mov	ip, r2
 8009fca:	40d9      	lsrs	r1, r3
 8009fcc:	9100      	str	r1, [sp, #0]
 8009fce:	42b5      	cmp	r5, r6
 8009fd0:	d816      	bhi.n	800a000 <rshift+0x88>
 8009fd2:	9e01      	ldr	r6, [sp, #4]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	3601      	adds	r6, #1
 8009fd8:	42b5      	cmp	r5, r6
 8009fda:	d302      	bcc.n	8009fe2 <rshift+0x6a>
 8009fdc:	1be3      	subs	r3, r4, r7
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	3b04      	subs	r3, #4
 8009fe2:	9900      	ldr	r1, [sp, #0]
 8009fe4:	18d3      	adds	r3, r2, r3
 8009fe6:	6019      	str	r1, [r3, #0]
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	d000      	beq.n	8009fee <rshift+0x76>
 8009fec:	3304      	adds	r3, #4
 8009fee:	1a99      	subs	r1, r3, r2
 8009ff0:	1089      	asrs	r1, r1, #2
 8009ff2:	6101      	str	r1, [r0, #16]
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d101      	bne.n	8009ffc <rshift+0x84>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	6143      	str	r3, [r0, #20]
 8009ffc:	b005      	add	sp, #20
 8009ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a000:	6833      	ldr	r3, [r6, #0]
 800a002:	9903      	ldr	r1, [sp, #12]
 800a004:	408b      	lsls	r3, r1
 800a006:	9900      	ldr	r1, [sp, #0]
 800a008:	4319      	orrs	r1, r3
 800a00a:	4663      	mov	r3, ip
 800a00c:	c302      	stmia	r3!, {r1}
 800a00e:	469c      	mov	ip, r3
 800a010:	ce02      	ldmia	r6!, {r1}
 800a012:	9b02      	ldr	r3, [sp, #8]
 800a014:	40d9      	lsrs	r1, r3
 800a016:	9100      	str	r1, [sp, #0]
 800a018:	e7d9      	b.n	8009fce <rshift+0x56>
 800a01a:	c908      	ldmia	r1!, {r3}
 800a01c:	c608      	stmia	r6!, {r3}
 800a01e:	e7c1      	b.n	8009fa4 <rshift+0x2c>

0800a020 <__hexdig_fun>:
 800a020:	0002      	movs	r2, r0
 800a022:	3a30      	subs	r2, #48	; 0x30
 800a024:	0003      	movs	r3, r0
 800a026:	2a09      	cmp	r2, #9
 800a028:	d802      	bhi.n	800a030 <__hexdig_fun+0x10>
 800a02a:	3b20      	subs	r3, #32
 800a02c:	b2d8      	uxtb	r0, r3
 800a02e:	4770      	bx	lr
 800a030:	0002      	movs	r2, r0
 800a032:	3a61      	subs	r2, #97	; 0x61
 800a034:	2a05      	cmp	r2, #5
 800a036:	d801      	bhi.n	800a03c <__hexdig_fun+0x1c>
 800a038:	3b47      	subs	r3, #71	; 0x47
 800a03a:	e7f7      	b.n	800a02c <__hexdig_fun+0xc>
 800a03c:	001a      	movs	r2, r3
 800a03e:	3a41      	subs	r2, #65	; 0x41
 800a040:	2000      	movs	r0, #0
 800a042:	2a05      	cmp	r2, #5
 800a044:	d8f3      	bhi.n	800a02e <__hexdig_fun+0xe>
 800a046:	3b27      	subs	r3, #39	; 0x27
 800a048:	e7f0      	b.n	800a02c <__hexdig_fun+0xc>
	...

0800a04c <__gethex>:
 800a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a04e:	b08d      	sub	sp, #52	; 0x34
 800a050:	930a      	str	r3, [sp, #40]	; 0x28
 800a052:	4bbf      	ldr	r3, [pc, #764]	; (800a350 <__gethex+0x304>)
 800a054:	9005      	str	r0, [sp, #20]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	9109      	str	r1, [sp, #36]	; 0x24
 800a05a:	0018      	movs	r0, r3
 800a05c:	9202      	str	r2, [sp, #8]
 800a05e:	9307      	str	r3, [sp, #28]
 800a060:	f7f6 f850 	bl	8000104 <strlen>
 800a064:	2202      	movs	r2, #2
 800a066:	9b07      	ldr	r3, [sp, #28]
 800a068:	4252      	negs	r2, r2
 800a06a:	181b      	adds	r3, r3, r0
 800a06c:	3b01      	subs	r3, #1
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	9003      	str	r0, [sp, #12]
 800a072:	930b      	str	r3, [sp, #44]	; 0x2c
 800a074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a076:	6819      	ldr	r1, [r3, #0]
 800a078:	1c8b      	adds	r3, r1, #2
 800a07a:	1a52      	subs	r2, r2, r1
 800a07c:	18d1      	adds	r1, r2, r3
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	9108      	str	r1, [sp, #32]
 800a082:	9901      	ldr	r1, [sp, #4]
 800a084:	3301      	adds	r3, #1
 800a086:	7808      	ldrb	r0, [r1, #0]
 800a088:	2830      	cmp	r0, #48	; 0x30
 800a08a:	d0f7      	beq.n	800a07c <__gethex+0x30>
 800a08c:	f7ff ffc8 	bl	800a020 <__hexdig_fun>
 800a090:	2300      	movs	r3, #0
 800a092:	001c      	movs	r4, r3
 800a094:	9304      	str	r3, [sp, #16]
 800a096:	4298      	cmp	r0, r3
 800a098:	d11f      	bne.n	800a0da <__gethex+0x8e>
 800a09a:	9a03      	ldr	r2, [sp, #12]
 800a09c:	9907      	ldr	r1, [sp, #28]
 800a09e:	9801      	ldr	r0, [sp, #4]
 800a0a0:	f001 f96e 	bl	800b380 <strncmp>
 800a0a4:	0007      	movs	r7, r0
 800a0a6:	42a0      	cmp	r0, r4
 800a0a8:	d000      	beq.n	800a0ac <__gethex+0x60>
 800a0aa:	e06b      	b.n	800a184 <__gethex+0x138>
 800a0ac:	9b01      	ldr	r3, [sp, #4]
 800a0ae:	9a03      	ldr	r2, [sp, #12]
 800a0b0:	5c98      	ldrb	r0, [r3, r2]
 800a0b2:	189d      	adds	r5, r3, r2
 800a0b4:	f7ff ffb4 	bl	800a020 <__hexdig_fun>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	42a0      	cmp	r0, r4
 800a0be:	d030      	beq.n	800a122 <__gethex+0xd6>
 800a0c0:	9501      	str	r5, [sp, #4]
 800a0c2:	9b01      	ldr	r3, [sp, #4]
 800a0c4:	7818      	ldrb	r0, [r3, #0]
 800a0c6:	2830      	cmp	r0, #48	; 0x30
 800a0c8:	d009      	beq.n	800a0de <__gethex+0x92>
 800a0ca:	f7ff ffa9 	bl	800a020 <__hexdig_fun>
 800a0ce:	4242      	negs	r2, r0
 800a0d0:	4142      	adcs	r2, r0
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	002c      	movs	r4, r5
 800a0d6:	9204      	str	r2, [sp, #16]
 800a0d8:	9308      	str	r3, [sp, #32]
 800a0da:	9d01      	ldr	r5, [sp, #4]
 800a0dc:	e004      	b.n	800a0e8 <__gethex+0x9c>
 800a0de:	9b01      	ldr	r3, [sp, #4]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	e7ed      	b.n	800a0c2 <__gethex+0x76>
 800a0e6:	3501      	adds	r5, #1
 800a0e8:	7828      	ldrb	r0, [r5, #0]
 800a0ea:	f7ff ff99 	bl	800a020 <__hexdig_fun>
 800a0ee:	1e07      	subs	r7, r0, #0
 800a0f0:	d1f9      	bne.n	800a0e6 <__gethex+0x9a>
 800a0f2:	0028      	movs	r0, r5
 800a0f4:	9a03      	ldr	r2, [sp, #12]
 800a0f6:	9907      	ldr	r1, [sp, #28]
 800a0f8:	f001 f942 	bl	800b380 <strncmp>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d10e      	bne.n	800a11e <__gethex+0xd2>
 800a100:	2c00      	cmp	r4, #0
 800a102:	d107      	bne.n	800a114 <__gethex+0xc8>
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	18ed      	adds	r5, r5, r3
 800a108:	002c      	movs	r4, r5
 800a10a:	7828      	ldrb	r0, [r5, #0]
 800a10c:	f7ff ff88 	bl	800a020 <__hexdig_fun>
 800a110:	2800      	cmp	r0, #0
 800a112:	d102      	bne.n	800a11a <__gethex+0xce>
 800a114:	1b64      	subs	r4, r4, r5
 800a116:	00a7      	lsls	r7, r4, #2
 800a118:	e003      	b.n	800a122 <__gethex+0xd6>
 800a11a:	3501      	adds	r5, #1
 800a11c:	e7f5      	b.n	800a10a <__gethex+0xbe>
 800a11e:	2c00      	cmp	r4, #0
 800a120:	d1f8      	bne.n	800a114 <__gethex+0xc8>
 800a122:	2220      	movs	r2, #32
 800a124:	782b      	ldrb	r3, [r5, #0]
 800a126:	002e      	movs	r6, r5
 800a128:	4393      	bics	r3, r2
 800a12a:	2b50      	cmp	r3, #80	; 0x50
 800a12c:	d11d      	bne.n	800a16a <__gethex+0x11e>
 800a12e:	786b      	ldrb	r3, [r5, #1]
 800a130:	2b2b      	cmp	r3, #43	; 0x2b
 800a132:	d02c      	beq.n	800a18e <__gethex+0x142>
 800a134:	2b2d      	cmp	r3, #45	; 0x2d
 800a136:	d02e      	beq.n	800a196 <__gethex+0x14a>
 800a138:	2300      	movs	r3, #0
 800a13a:	1c6e      	adds	r6, r5, #1
 800a13c:	9306      	str	r3, [sp, #24]
 800a13e:	7830      	ldrb	r0, [r6, #0]
 800a140:	f7ff ff6e 	bl	800a020 <__hexdig_fun>
 800a144:	1e43      	subs	r3, r0, #1
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b18      	cmp	r3, #24
 800a14a:	d82b      	bhi.n	800a1a4 <__gethex+0x158>
 800a14c:	3810      	subs	r0, #16
 800a14e:	0004      	movs	r4, r0
 800a150:	7870      	ldrb	r0, [r6, #1]
 800a152:	f7ff ff65 	bl	800a020 <__hexdig_fun>
 800a156:	1e43      	subs	r3, r0, #1
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	3601      	adds	r6, #1
 800a15c:	2b18      	cmp	r3, #24
 800a15e:	d91c      	bls.n	800a19a <__gethex+0x14e>
 800a160:	9b06      	ldr	r3, [sp, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d000      	beq.n	800a168 <__gethex+0x11c>
 800a166:	4264      	negs	r4, r4
 800a168:	193f      	adds	r7, r7, r4
 800a16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a16c:	601e      	str	r6, [r3, #0]
 800a16e:	9b04      	ldr	r3, [sp, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d019      	beq.n	800a1a8 <__gethex+0x15c>
 800a174:	2600      	movs	r6, #0
 800a176:	9b08      	ldr	r3, [sp, #32]
 800a178:	42b3      	cmp	r3, r6
 800a17a:	d100      	bne.n	800a17e <__gethex+0x132>
 800a17c:	3606      	adds	r6, #6
 800a17e:	0030      	movs	r0, r6
 800a180:	b00d      	add	sp, #52	; 0x34
 800a182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a184:	2301      	movs	r3, #1
 800a186:	2700      	movs	r7, #0
 800a188:	9d01      	ldr	r5, [sp, #4]
 800a18a:	9304      	str	r3, [sp, #16]
 800a18c:	e7c9      	b.n	800a122 <__gethex+0xd6>
 800a18e:	2300      	movs	r3, #0
 800a190:	9306      	str	r3, [sp, #24]
 800a192:	1cae      	adds	r6, r5, #2
 800a194:	e7d3      	b.n	800a13e <__gethex+0xf2>
 800a196:	2301      	movs	r3, #1
 800a198:	e7fa      	b.n	800a190 <__gethex+0x144>
 800a19a:	230a      	movs	r3, #10
 800a19c:	435c      	muls	r4, r3
 800a19e:	1824      	adds	r4, r4, r0
 800a1a0:	3c10      	subs	r4, #16
 800a1a2:	e7d5      	b.n	800a150 <__gethex+0x104>
 800a1a4:	002e      	movs	r6, r5
 800a1a6:	e7e0      	b.n	800a16a <__gethex+0x11e>
 800a1a8:	9b01      	ldr	r3, [sp, #4]
 800a1aa:	9904      	ldr	r1, [sp, #16]
 800a1ac:	1aeb      	subs	r3, r5, r3
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	2b07      	cmp	r3, #7
 800a1b2:	dc0a      	bgt.n	800a1ca <__gethex+0x17e>
 800a1b4:	9805      	ldr	r0, [sp, #20]
 800a1b6:	f000 fa85 	bl	800a6c4 <_Balloc>
 800a1ba:	1e04      	subs	r4, r0, #0
 800a1bc:	d108      	bne.n	800a1d0 <__gethex+0x184>
 800a1be:	0002      	movs	r2, r0
 800a1c0:	21de      	movs	r1, #222	; 0xde
 800a1c2:	4b64      	ldr	r3, [pc, #400]	; (800a354 <__gethex+0x308>)
 800a1c4:	4864      	ldr	r0, [pc, #400]	; (800a358 <__gethex+0x30c>)
 800a1c6:	f001 f8fb 	bl	800b3c0 <__assert_func>
 800a1ca:	3101      	adds	r1, #1
 800a1cc:	105b      	asrs	r3, r3, #1
 800a1ce:	e7ef      	b.n	800a1b0 <__gethex+0x164>
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	3314      	adds	r3, #20
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d8:	2300      	movs	r3, #0
 800a1da:	001e      	movs	r6, r3
 800a1dc:	9306      	str	r3, [sp, #24]
 800a1de:	9b01      	ldr	r3, [sp, #4]
 800a1e0:	42ab      	cmp	r3, r5
 800a1e2:	d340      	bcc.n	800a266 <__gethex+0x21a>
 800a1e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	c540      	stmia	r5!, {r6}
 800a1ea:	1aed      	subs	r5, r5, r3
 800a1ec:	10ad      	asrs	r5, r5, #2
 800a1ee:	0030      	movs	r0, r6
 800a1f0:	6125      	str	r5, [r4, #16]
 800a1f2:	f000 fb5f 	bl	800a8b4 <__hi0bits>
 800a1f6:	9b02      	ldr	r3, [sp, #8]
 800a1f8:	016d      	lsls	r5, r5, #5
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	1a2e      	subs	r6, r5, r0
 800a1fe:	9301      	str	r3, [sp, #4]
 800a200:	429e      	cmp	r6, r3
 800a202:	dd5a      	ble.n	800a2ba <__gethex+0x26e>
 800a204:	1af6      	subs	r6, r6, r3
 800a206:	0031      	movs	r1, r6
 800a208:	0020      	movs	r0, r4
 800a20a:	f000 ff01 	bl	800b010 <__any_on>
 800a20e:	1e05      	subs	r5, r0, #0
 800a210:	d016      	beq.n	800a240 <__gethex+0x1f4>
 800a212:	2501      	movs	r5, #1
 800a214:	211f      	movs	r1, #31
 800a216:	0028      	movs	r0, r5
 800a218:	1e73      	subs	r3, r6, #1
 800a21a:	4019      	ands	r1, r3
 800a21c:	4088      	lsls	r0, r1
 800a21e:	0001      	movs	r1, r0
 800a220:	115a      	asrs	r2, r3, #5
 800a222:	9804      	ldr	r0, [sp, #16]
 800a224:	0092      	lsls	r2, r2, #2
 800a226:	5812      	ldr	r2, [r2, r0]
 800a228:	420a      	tst	r2, r1
 800a22a:	d009      	beq.n	800a240 <__gethex+0x1f4>
 800a22c:	42ab      	cmp	r3, r5
 800a22e:	dd06      	ble.n	800a23e <__gethex+0x1f2>
 800a230:	0020      	movs	r0, r4
 800a232:	1eb1      	subs	r1, r6, #2
 800a234:	f000 feec 	bl	800b010 <__any_on>
 800a238:	3502      	adds	r5, #2
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d100      	bne.n	800a240 <__gethex+0x1f4>
 800a23e:	2502      	movs	r5, #2
 800a240:	0031      	movs	r1, r6
 800a242:	0020      	movs	r0, r4
 800a244:	f7ff fe98 	bl	8009f78 <rshift>
 800a248:	19bf      	adds	r7, r7, r6
 800a24a:	9b02      	ldr	r3, [sp, #8]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	9303      	str	r3, [sp, #12]
 800a250:	42bb      	cmp	r3, r7
 800a252:	da42      	bge.n	800a2da <__gethex+0x28e>
 800a254:	0021      	movs	r1, r4
 800a256:	9805      	ldr	r0, [sp, #20]
 800a258:	f000 fa78 	bl	800a74c <_Bfree>
 800a25c:	2300      	movs	r3, #0
 800a25e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a260:	26a3      	movs	r6, #163	; 0xa3
 800a262:	6013      	str	r3, [r2, #0]
 800a264:	e78b      	b.n	800a17e <__gethex+0x132>
 800a266:	1e6b      	subs	r3, r5, #1
 800a268:	9308      	str	r3, [sp, #32]
 800a26a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	4293      	cmp	r3, r2
 800a270:	d014      	beq.n	800a29c <__gethex+0x250>
 800a272:	9b06      	ldr	r3, [sp, #24]
 800a274:	2b20      	cmp	r3, #32
 800a276:	d104      	bne.n	800a282 <__gethex+0x236>
 800a278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27a:	c340      	stmia	r3!, {r6}
 800a27c:	2600      	movs	r6, #0
 800a27e:	9309      	str	r3, [sp, #36]	; 0x24
 800a280:	9606      	str	r6, [sp, #24]
 800a282:	9b08      	ldr	r3, [sp, #32]
 800a284:	7818      	ldrb	r0, [r3, #0]
 800a286:	f7ff fecb 	bl	800a020 <__hexdig_fun>
 800a28a:	230f      	movs	r3, #15
 800a28c:	4018      	ands	r0, r3
 800a28e:	9b06      	ldr	r3, [sp, #24]
 800a290:	9d08      	ldr	r5, [sp, #32]
 800a292:	4098      	lsls	r0, r3
 800a294:	3304      	adds	r3, #4
 800a296:	4306      	orrs	r6, r0
 800a298:	9306      	str	r3, [sp, #24]
 800a29a:	e7a0      	b.n	800a1de <__gethex+0x192>
 800a29c:	2301      	movs	r3, #1
 800a29e:	9a03      	ldr	r2, [sp, #12]
 800a2a0:	1a9d      	subs	r5, r3, r2
 800a2a2:	9b08      	ldr	r3, [sp, #32]
 800a2a4:	195d      	adds	r5, r3, r5
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	429d      	cmp	r5, r3
 800a2aa:	d3e2      	bcc.n	800a272 <__gethex+0x226>
 800a2ac:	0028      	movs	r0, r5
 800a2ae:	9907      	ldr	r1, [sp, #28]
 800a2b0:	f001 f866 	bl	800b380 <strncmp>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d1dc      	bne.n	800a272 <__gethex+0x226>
 800a2b8:	e791      	b.n	800a1de <__gethex+0x192>
 800a2ba:	9b01      	ldr	r3, [sp, #4]
 800a2bc:	2500      	movs	r5, #0
 800a2be:	429e      	cmp	r6, r3
 800a2c0:	dac3      	bge.n	800a24a <__gethex+0x1fe>
 800a2c2:	1b9e      	subs	r6, r3, r6
 800a2c4:	0021      	movs	r1, r4
 800a2c6:	0032      	movs	r2, r6
 800a2c8:	9805      	ldr	r0, [sp, #20]
 800a2ca:	f000 fc5d 	bl	800ab88 <__lshift>
 800a2ce:	0003      	movs	r3, r0
 800a2d0:	3314      	adds	r3, #20
 800a2d2:	0004      	movs	r4, r0
 800a2d4:	1bbf      	subs	r7, r7, r6
 800a2d6:	9304      	str	r3, [sp, #16]
 800a2d8:	e7b7      	b.n	800a24a <__gethex+0x1fe>
 800a2da:	9b02      	ldr	r3, [sp, #8]
 800a2dc:	685e      	ldr	r6, [r3, #4]
 800a2de:	42be      	cmp	r6, r7
 800a2e0:	dd71      	ble.n	800a3c6 <__gethex+0x37a>
 800a2e2:	9b01      	ldr	r3, [sp, #4]
 800a2e4:	1bf6      	subs	r6, r6, r7
 800a2e6:	42b3      	cmp	r3, r6
 800a2e8:	dc38      	bgt.n	800a35c <__gethex+0x310>
 800a2ea:	9b02      	ldr	r3, [sp, #8]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d026      	beq.n	800a340 <__gethex+0x2f4>
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d028      	beq.n	800a348 <__gethex+0x2fc>
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d119      	bne.n	800a32e <__gethex+0x2e2>
 800a2fa:	9b01      	ldr	r3, [sp, #4]
 800a2fc:	42b3      	cmp	r3, r6
 800a2fe:	d116      	bne.n	800a32e <__gethex+0x2e2>
 800a300:	2b01      	cmp	r3, #1
 800a302:	d10d      	bne.n	800a320 <__gethex+0x2d4>
 800a304:	9b02      	ldr	r3, [sp, #8]
 800a306:	2662      	movs	r6, #98	; 0x62
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	9a01      	ldr	r2, [sp, #4]
 800a30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	2301      	movs	r3, #1
 800a314:	9a04      	ldr	r2, [sp, #16]
 800a316:	6123      	str	r3, [r4, #16]
 800a318:	6013      	str	r3, [r2, #0]
 800a31a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a31c:	601c      	str	r4, [r3, #0]
 800a31e:	e72e      	b.n	800a17e <__gethex+0x132>
 800a320:	9901      	ldr	r1, [sp, #4]
 800a322:	0020      	movs	r0, r4
 800a324:	3901      	subs	r1, #1
 800a326:	f000 fe73 	bl	800b010 <__any_on>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d1ea      	bne.n	800a304 <__gethex+0x2b8>
 800a32e:	0021      	movs	r1, r4
 800a330:	9805      	ldr	r0, [sp, #20]
 800a332:	f000 fa0b 	bl	800a74c <_Bfree>
 800a336:	2300      	movs	r3, #0
 800a338:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a33a:	2650      	movs	r6, #80	; 0x50
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	e71e      	b.n	800a17e <__gethex+0x132>
 800a340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1f3      	bne.n	800a32e <__gethex+0x2e2>
 800a346:	e7dd      	b.n	800a304 <__gethex+0x2b8>
 800a348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1da      	bne.n	800a304 <__gethex+0x2b8>
 800a34e:	e7ee      	b.n	800a32e <__gethex+0x2e2>
 800a350:	0800c360 	.word	0x0800c360
 800a354:	0800c2e7 	.word	0x0800c2e7
 800a358:	0800c2f8 	.word	0x0800c2f8
 800a35c:	1e77      	subs	r7, r6, #1
 800a35e:	2d00      	cmp	r5, #0
 800a360:	d12f      	bne.n	800a3c2 <__gethex+0x376>
 800a362:	2f00      	cmp	r7, #0
 800a364:	d004      	beq.n	800a370 <__gethex+0x324>
 800a366:	0039      	movs	r1, r7
 800a368:	0020      	movs	r0, r4
 800a36a:	f000 fe51 	bl	800b010 <__any_on>
 800a36e:	0005      	movs	r5, r0
 800a370:	231f      	movs	r3, #31
 800a372:	117a      	asrs	r2, r7, #5
 800a374:	401f      	ands	r7, r3
 800a376:	3b1e      	subs	r3, #30
 800a378:	40bb      	lsls	r3, r7
 800a37a:	9904      	ldr	r1, [sp, #16]
 800a37c:	0092      	lsls	r2, r2, #2
 800a37e:	5852      	ldr	r2, [r2, r1]
 800a380:	421a      	tst	r2, r3
 800a382:	d001      	beq.n	800a388 <__gethex+0x33c>
 800a384:	2302      	movs	r3, #2
 800a386:	431d      	orrs	r5, r3
 800a388:	9b01      	ldr	r3, [sp, #4]
 800a38a:	0031      	movs	r1, r6
 800a38c:	1b9b      	subs	r3, r3, r6
 800a38e:	2602      	movs	r6, #2
 800a390:	0020      	movs	r0, r4
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	f7ff fdf0 	bl	8009f78 <rshift>
 800a398:	9b02      	ldr	r3, [sp, #8]
 800a39a:	685f      	ldr	r7, [r3, #4]
 800a39c:	2d00      	cmp	r5, #0
 800a39e:	d041      	beq.n	800a424 <__gethex+0x3d8>
 800a3a0:	9b02      	ldr	r3, [sp, #8]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d010      	beq.n	800a3ca <__gethex+0x37e>
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d012      	beq.n	800a3d2 <__gethex+0x386>
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d106      	bne.n	800a3be <__gethex+0x372>
 800a3b0:	07aa      	lsls	r2, r5, #30
 800a3b2:	d504      	bpl.n	800a3be <__gethex+0x372>
 800a3b4:	9a04      	ldr	r2, [sp, #16]
 800a3b6:	6810      	ldr	r0, [r2, #0]
 800a3b8:	4305      	orrs	r5, r0
 800a3ba:	421d      	tst	r5, r3
 800a3bc:	d10c      	bne.n	800a3d8 <__gethex+0x38c>
 800a3be:	2310      	movs	r3, #16
 800a3c0:	e02f      	b.n	800a422 <__gethex+0x3d6>
 800a3c2:	2501      	movs	r5, #1
 800a3c4:	e7d4      	b.n	800a370 <__gethex+0x324>
 800a3c6:	2601      	movs	r6, #1
 800a3c8:	e7e8      	b.n	800a39c <__gethex+0x350>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3ce:	1a9b      	subs	r3, r3, r2
 800a3d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0f2      	beq.n	800a3be <__gethex+0x372>
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	2000      	movs	r0, #0
 800a3dc:	9303      	str	r3, [sp, #12]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	0023      	movs	r3, r4
 800a3e4:	9a04      	ldr	r2, [sp, #16]
 800a3e6:	3314      	adds	r3, #20
 800a3e8:	1899      	adds	r1, r3, r2
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	1c55      	adds	r5, r2, #1
 800a3ee:	d01e      	beq.n	800a42e <__gethex+0x3e2>
 800a3f0:	3201      	adds	r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	0023      	movs	r3, r4
 800a3f6:	3314      	adds	r3, #20
 800a3f8:	2e02      	cmp	r6, #2
 800a3fa:	d140      	bne.n	800a47e <__gethex+0x432>
 800a3fc:	9a02      	ldr	r2, [sp, #8]
 800a3fe:	9901      	ldr	r1, [sp, #4]
 800a400:	6812      	ldr	r2, [r2, #0]
 800a402:	3a01      	subs	r2, #1
 800a404:	428a      	cmp	r2, r1
 800a406:	d10b      	bne.n	800a420 <__gethex+0x3d4>
 800a408:	114a      	asrs	r2, r1, #5
 800a40a:	211f      	movs	r1, #31
 800a40c:	9801      	ldr	r0, [sp, #4]
 800a40e:	0092      	lsls	r2, r2, #2
 800a410:	4001      	ands	r1, r0
 800a412:	2001      	movs	r0, #1
 800a414:	0005      	movs	r5, r0
 800a416:	408d      	lsls	r5, r1
 800a418:	58d3      	ldr	r3, [r2, r3]
 800a41a:	422b      	tst	r3, r5
 800a41c:	d000      	beq.n	800a420 <__gethex+0x3d4>
 800a41e:	2601      	movs	r6, #1
 800a420:	2320      	movs	r3, #32
 800a422:	431e      	orrs	r6, r3
 800a424:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a426:	601c      	str	r4, [r3, #0]
 800a428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a42a:	601f      	str	r7, [r3, #0]
 800a42c:	e6a7      	b.n	800a17e <__gethex+0x132>
 800a42e:	c301      	stmia	r3!, {r0}
 800a430:	4299      	cmp	r1, r3
 800a432:	d8da      	bhi.n	800a3ea <__gethex+0x39e>
 800a434:	9b03      	ldr	r3, [sp, #12]
 800a436:	68a2      	ldr	r2, [r4, #8]
 800a438:	4293      	cmp	r3, r2
 800a43a:	db17      	blt.n	800a46c <__gethex+0x420>
 800a43c:	6863      	ldr	r3, [r4, #4]
 800a43e:	9805      	ldr	r0, [sp, #20]
 800a440:	1c59      	adds	r1, r3, #1
 800a442:	f000 f93f 	bl	800a6c4 <_Balloc>
 800a446:	1e05      	subs	r5, r0, #0
 800a448:	d103      	bne.n	800a452 <__gethex+0x406>
 800a44a:	0002      	movs	r2, r0
 800a44c:	2184      	movs	r1, #132	; 0x84
 800a44e:	4b1c      	ldr	r3, [pc, #112]	; (800a4c0 <__gethex+0x474>)
 800a450:	e6b8      	b.n	800a1c4 <__gethex+0x178>
 800a452:	0021      	movs	r1, r4
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	310c      	adds	r1, #12
 800a458:	1c9a      	adds	r2, r3, #2
 800a45a:	0092      	lsls	r2, r2, #2
 800a45c:	300c      	adds	r0, #12
 800a45e:	f7fd f873 	bl	8007548 <memcpy>
 800a462:	0021      	movs	r1, r4
 800a464:	9805      	ldr	r0, [sp, #20]
 800a466:	f000 f971 	bl	800a74c <_Bfree>
 800a46a:	002c      	movs	r4, r5
 800a46c:	6923      	ldr	r3, [r4, #16]
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	6122      	str	r2, [r4, #16]
 800a472:	2201      	movs	r2, #1
 800a474:	3304      	adds	r3, #4
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	18e3      	adds	r3, r4, r3
 800a47a:	605a      	str	r2, [r3, #4]
 800a47c:	e7ba      	b.n	800a3f4 <__gethex+0x3a8>
 800a47e:	6922      	ldr	r2, [r4, #16]
 800a480:	9903      	ldr	r1, [sp, #12]
 800a482:	428a      	cmp	r2, r1
 800a484:	dd09      	ble.n	800a49a <__gethex+0x44e>
 800a486:	2101      	movs	r1, #1
 800a488:	0020      	movs	r0, r4
 800a48a:	f7ff fd75 	bl	8009f78 <rshift>
 800a48e:	9b02      	ldr	r3, [sp, #8]
 800a490:	3701      	adds	r7, #1
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	42bb      	cmp	r3, r7
 800a496:	dac2      	bge.n	800a41e <__gethex+0x3d2>
 800a498:	e6dc      	b.n	800a254 <__gethex+0x208>
 800a49a:	221f      	movs	r2, #31
 800a49c:	9d01      	ldr	r5, [sp, #4]
 800a49e:	9901      	ldr	r1, [sp, #4]
 800a4a0:	2601      	movs	r6, #1
 800a4a2:	4015      	ands	r5, r2
 800a4a4:	4211      	tst	r1, r2
 800a4a6:	d0bb      	beq.n	800a420 <__gethex+0x3d4>
 800a4a8:	9a04      	ldr	r2, [sp, #16]
 800a4aa:	189b      	adds	r3, r3, r2
 800a4ac:	3b04      	subs	r3, #4
 800a4ae:	6818      	ldr	r0, [r3, #0]
 800a4b0:	f000 fa00 	bl	800a8b4 <__hi0bits>
 800a4b4:	2320      	movs	r3, #32
 800a4b6:	1b5d      	subs	r5, r3, r5
 800a4b8:	42a8      	cmp	r0, r5
 800a4ba:	dbe4      	blt.n	800a486 <__gethex+0x43a>
 800a4bc:	e7b0      	b.n	800a420 <__gethex+0x3d4>
 800a4be:	46c0      	nop			; (mov r8, r8)
 800a4c0:	0800c2e7 	.word	0x0800c2e7

0800a4c4 <L_shift>:
 800a4c4:	2308      	movs	r3, #8
 800a4c6:	b570      	push	{r4, r5, r6, lr}
 800a4c8:	2520      	movs	r5, #32
 800a4ca:	1a9a      	subs	r2, r3, r2
 800a4cc:	0092      	lsls	r2, r2, #2
 800a4ce:	1aad      	subs	r5, r5, r2
 800a4d0:	6843      	ldr	r3, [r0, #4]
 800a4d2:	6806      	ldr	r6, [r0, #0]
 800a4d4:	001c      	movs	r4, r3
 800a4d6:	40ac      	lsls	r4, r5
 800a4d8:	40d3      	lsrs	r3, r2
 800a4da:	4334      	orrs	r4, r6
 800a4dc:	6004      	str	r4, [r0, #0]
 800a4de:	6043      	str	r3, [r0, #4]
 800a4e0:	3004      	adds	r0, #4
 800a4e2:	4288      	cmp	r0, r1
 800a4e4:	d3f4      	bcc.n	800a4d0 <L_shift+0xc>
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}

0800a4e8 <__match>:
 800a4e8:	b530      	push	{r4, r5, lr}
 800a4ea:	6803      	ldr	r3, [r0, #0]
 800a4ec:	780c      	ldrb	r4, [r1, #0]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	2c00      	cmp	r4, #0
 800a4f2:	d102      	bne.n	800a4fa <__match+0x12>
 800a4f4:	6003      	str	r3, [r0, #0]
 800a4f6:	2001      	movs	r0, #1
 800a4f8:	bd30      	pop	{r4, r5, pc}
 800a4fa:	781a      	ldrb	r2, [r3, #0]
 800a4fc:	0015      	movs	r5, r2
 800a4fe:	3d41      	subs	r5, #65	; 0x41
 800a500:	2d19      	cmp	r5, #25
 800a502:	d800      	bhi.n	800a506 <__match+0x1e>
 800a504:	3220      	adds	r2, #32
 800a506:	3101      	adds	r1, #1
 800a508:	42a2      	cmp	r2, r4
 800a50a:	d0ef      	beq.n	800a4ec <__match+0x4>
 800a50c:	2000      	movs	r0, #0
 800a50e:	e7f3      	b.n	800a4f8 <__match+0x10>

0800a510 <__hexnan>:
 800a510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a512:	680b      	ldr	r3, [r1, #0]
 800a514:	b08b      	sub	sp, #44	; 0x2c
 800a516:	9201      	str	r2, [sp, #4]
 800a518:	9901      	ldr	r1, [sp, #4]
 800a51a:	115a      	asrs	r2, r3, #5
 800a51c:	0092      	lsls	r2, r2, #2
 800a51e:	188a      	adds	r2, r1, r2
 800a520:	9202      	str	r2, [sp, #8]
 800a522:	0019      	movs	r1, r3
 800a524:	221f      	movs	r2, #31
 800a526:	4011      	ands	r1, r2
 800a528:	9008      	str	r0, [sp, #32]
 800a52a:	9106      	str	r1, [sp, #24]
 800a52c:	4213      	tst	r3, r2
 800a52e:	d002      	beq.n	800a536 <__hexnan+0x26>
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	3304      	adds	r3, #4
 800a534:	9302      	str	r3, [sp, #8]
 800a536:	9b02      	ldr	r3, [sp, #8]
 800a538:	2500      	movs	r5, #0
 800a53a:	1f1e      	subs	r6, r3, #4
 800a53c:	0037      	movs	r7, r6
 800a53e:	0034      	movs	r4, r6
 800a540:	9b08      	ldr	r3, [sp, #32]
 800a542:	6035      	str	r5, [r6, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	9507      	str	r5, [sp, #28]
 800a548:	9305      	str	r3, [sp, #20]
 800a54a:	9503      	str	r5, [sp, #12]
 800a54c:	9b05      	ldr	r3, [sp, #20]
 800a54e:	3301      	adds	r3, #1
 800a550:	9309      	str	r3, [sp, #36]	; 0x24
 800a552:	9b05      	ldr	r3, [sp, #20]
 800a554:	785b      	ldrb	r3, [r3, #1]
 800a556:	9304      	str	r3, [sp, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d028      	beq.n	800a5ae <__hexnan+0x9e>
 800a55c:	9804      	ldr	r0, [sp, #16]
 800a55e:	f7ff fd5f 	bl	800a020 <__hexdig_fun>
 800a562:	2800      	cmp	r0, #0
 800a564:	d154      	bne.n	800a610 <__hexnan+0x100>
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	2b20      	cmp	r3, #32
 800a56a:	d819      	bhi.n	800a5a0 <__hexnan+0x90>
 800a56c:	9b03      	ldr	r3, [sp, #12]
 800a56e:	9a07      	ldr	r2, [sp, #28]
 800a570:	4293      	cmp	r3, r2
 800a572:	dd12      	ble.n	800a59a <__hexnan+0x8a>
 800a574:	42bc      	cmp	r4, r7
 800a576:	d206      	bcs.n	800a586 <__hexnan+0x76>
 800a578:	2d07      	cmp	r5, #7
 800a57a:	dc04      	bgt.n	800a586 <__hexnan+0x76>
 800a57c:	002a      	movs	r2, r5
 800a57e:	0039      	movs	r1, r7
 800a580:	0020      	movs	r0, r4
 800a582:	f7ff ff9f 	bl	800a4c4 <L_shift>
 800a586:	9b01      	ldr	r3, [sp, #4]
 800a588:	2508      	movs	r5, #8
 800a58a:	429c      	cmp	r4, r3
 800a58c:	d905      	bls.n	800a59a <__hexnan+0x8a>
 800a58e:	1f27      	subs	r7, r4, #4
 800a590:	2500      	movs	r5, #0
 800a592:	003c      	movs	r4, r7
 800a594:	9b03      	ldr	r3, [sp, #12]
 800a596:	603d      	str	r5, [r7, #0]
 800a598:	9307      	str	r3, [sp, #28]
 800a59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59c:	9305      	str	r3, [sp, #20]
 800a59e:	e7d5      	b.n	800a54c <__hexnan+0x3c>
 800a5a0:	9b04      	ldr	r3, [sp, #16]
 800a5a2:	2b29      	cmp	r3, #41	; 0x29
 800a5a4:	d159      	bne.n	800a65a <__hexnan+0x14a>
 800a5a6:	9b05      	ldr	r3, [sp, #20]
 800a5a8:	9a08      	ldr	r2, [sp, #32]
 800a5aa:	3302      	adds	r3, #2
 800a5ac:	6013      	str	r3, [r2, #0]
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d052      	beq.n	800a65a <__hexnan+0x14a>
 800a5b4:	42bc      	cmp	r4, r7
 800a5b6:	d206      	bcs.n	800a5c6 <__hexnan+0xb6>
 800a5b8:	2d07      	cmp	r5, #7
 800a5ba:	dc04      	bgt.n	800a5c6 <__hexnan+0xb6>
 800a5bc:	002a      	movs	r2, r5
 800a5be:	0039      	movs	r1, r7
 800a5c0:	0020      	movs	r0, r4
 800a5c2:	f7ff ff7f 	bl	800a4c4 <L_shift>
 800a5c6:	9b01      	ldr	r3, [sp, #4]
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d935      	bls.n	800a638 <__hexnan+0x128>
 800a5cc:	001a      	movs	r2, r3
 800a5ce:	0023      	movs	r3, r4
 800a5d0:	cb02      	ldmia	r3!, {r1}
 800a5d2:	c202      	stmia	r2!, {r1}
 800a5d4:	429e      	cmp	r6, r3
 800a5d6:	d2fb      	bcs.n	800a5d0 <__hexnan+0xc0>
 800a5d8:	9b02      	ldr	r3, [sp, #8]
 800a5da:	1c61      	adds	r1, r4, #1
 800a5dc:	1eda      	subs	r2, r3, #3
 800a5de:	2304      	movs	r3, #4
 800a5e0:	4291      	cmp	r1, r2
 800a5e2:	d805      	bhi.n	800a5f0 <__hexnan+0xe0>
 800a5e4:	9b02      	ldr	r3, [sp, #8]
 800a5e6:	3b04      	subs	r3, #4
 800a5e8:	1b1b      	subs	r3, r3, r4
 800a5ea:	089b      	lsrs	r3, r3, #2
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	9a01      	ldr	r2, [sp, #4]
 800a5f2:	18d3      	adds	r3, r2, r3
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	c304      	stmia	r3!, {r2}
 800a5f8:	429e      	cmp	r6, r3
 800a5fa:	d2fc      	bcs.n	800a5f6 <__hexnan+0xe6>
 800a5fc:	6833      	ldr	r3, [r6, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d104      	bne.n	800a60c <__hexnan+0xfc>
 800a602:	9b01      	ldr	r3, [sp, #4]
 800a604:	429e      	cmp	r6, r3
 800a606:	d126      	bne.n	800a656 <__hexnan+0x146>
 800a608:	2301      	movs	r3, #1
 800a60a:	6033      	str	r3, [r6, #0]
 800a60c:	2005      	movs	r0, #5
 800a60e:	e025      	b.n	800a65c <__hexnan+0x14c>
 800a610:	9b03      	ldr	r3, [sp, #12]
 800a612:	3501      	adds	r5, #1
 800a614:	3301      	adds	r3, #1
 800a616:	9303      	str	r3, [sp, #12]
 800a618:	2d08      	cmp	r5, #8
 800a61a:	dd06      	ble.n	800a62a <__hexnan+0x11a>
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	429c      	cmp	r4, r3
 800a620:	d9bb      	bls.n	800a59a <__hexnan+0x8a>
 800a622:	2300      	movs	r3, #0
 800a624:	2501      	movs	r5, #1
 800a626:	3c04      	subs	r4, #4
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	220f      	movs	r2, #15
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	4010      	ands	r0, r2
 800a630:	011b      	lsls	r3, r3, #4
 800a632:	4318      	orrs	r0, r3
 800a634:	6020      	str	r0, [r4, #0]
 800a636:	e7b0      	b.n	800a59a <__hexnan+0x8a>
 800a638:	9b06      	ldr	r3, [sp, #24]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d0de      	beq.n	800a5fc <__hexnan+0xec>
 800a63e:	2120      	movs	r1, #32
 800a640:	9a06      	ldr	r2, [sp, #24]
 800a642:	9b02      	ldr	r3, [sp, #8]
 800a644:	1a89      	subs	r1, r1, r2
 800a646:	2201      	movs	r2, #1
 800a648:	4252      	negs	r2, r2
 800a64a:	40ca      	lsrs	r2, r1
 800a64c:	3b04      	subs	r3, #4
 800a64e:	6819      	ldr	r1, [r3, #0]
 800a650:	400a      	ands	r2, r1
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	e7d2      	b.n	800a5fc <__hexnan+0xec>
 800a656:	3e04      	subs	r6, #4
 800a658:	e7d0      	b.n	800a5fc <__hexnan+0xec>
 800a65a:	2004      	movs	r0, #4
 800a65c:	b00b      	add	sp, #44	; 0x2c
 800a65e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a660 <_localeconv_r>:
 800a660:	4800      	ldr	r0, [pc, #0]	; (800a664 <_localeconv_r+0x4>)
 800a662:	4770      	bx	lr
 800a664:	20000164 	.word	0x20000164

0800a668 <__ascii_mbtowc>:
 800a668:	b082      	sub	sp, #8
 800a66a:	2900      	cmp	r1, #0
 800a66c:	d100      	bne.n	800a670 <__ascii_mbtowc+0x8>
 800a66e:	a901      	add	r1, sp, #4
 800a670:	1e10      	subs	r0, r2, #0
 800a672:	d006      	beq.n	800a682 <__ascii_mbtowc+0x1a>
 800a674:	2b00      	cmp	r3, #0
 800a676:	d006      	beq.n	800a686 <__ascii_mbtowc+0x1e>
 800a678:	7813      	ldrb	r3, [r2, #0]
 800a67a:	600b      	str	r3, [r1, #0]
 800a67c:	7810      	ldrb	r0, [r2, #0]
 800a67e:	1e43      	subs	r3, r0, #1
 800a680:	4198      	sbcs	r0, r3
 800a682:	b002      	add	sp, #8
 800a684:	4770      	bx	lr
 800a686:	2002      	movs	r0, #2
 800a688:	4240      	negs	r0, r0
 800a68a:	e7fa      	b.n	800a682 <__ascii_mbtowc+0x1a>

0800a68c <memchr>:
 800a68c:	b2c9      	uxtb	r1, r1
 800a68e:	1882      	adds	r2, r0, r2
 800a690:	4290      	cmp	r0, r2
 800a692:	d101      	bne.n	800a698 <memchr+0xc>
 800a694:	2000      	movs	r0, #0
 800a696:	4770      	bx	lr
 800a698:	7803      	ldrb	r3, [r0, #0]
 800a69a:	428b      	cmp	r3, r1
 800a69c:	d0fb      	beq.n	800a696 <memchr+0xa>
 800a69e:	3001      	adds	r0, #1
 800a6a0:	e7f6      	b.n	800a690 <memchr+0x4>
	...

0800a6a4 <__malloc_lock>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	4802      	ldr	r0, [pc, #8]	; (800a6b0 <__malloc_lock+0xc>)
 800a6a8:	f000 feb9 	bl	800b41e <__retarget_lock_acquire_recursive>
 800a6ac:	bd10      	pop	{r4, pc}
 800a6ae:	46c0      	nop			; (mov r8, r8)
 800a6b0:	2000049c 	.word	0x2000049c

0800a6b4 <__malloc_unlock>:
 800a6b4:	b510      	push	{r4, lr}
 800a6b6:	4802      	ldr	r0, [pc, #8]	; (800a6c0 <__malloc_unlock+0xc>)
 800a6b8:	f000 feb2 	bl	800b420 <__retarget_lock_release_recursive>
 800a6bc:	bd10      	pop	{r4, pc}
 800a6be:	46c0      	nop			; (mov r8, r8)
 800a6c0:	2000049c 	.word	0x2000049c

0800a6c4 <_Balloc>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6c8:	0006      	movs	r6, r0
 800a6ca:	000c      	movs	r4, r1
 800a6cc:	2d00      	cmp	r5, #0
 800a6ce:	d10e      	bne.n	800a6ee <_Balloc+0x2a>
 800a6d0:	2010      	movs	r0, #16
 800a6d2:	f7fc ff2f 	bl	8007534 <malloc>
 800a6d6:	1e02      	subs	r2, r0, #0
 800a6d8:	6270      	str	r0, [r6, #36]	; 0x24
 800a6da:	d104      	bne.n	800a6e6 <_Balloc+0x22>
 800a6dc:	2166      	movs	r1, #102	; 0x66
 800a6de:	4b19      	ldr	r3, [pc, #100]	; (800a744 <_Balloc+0x80>)
 800a6e0:	4819      	ldr	r0, [pc, #100]	; (800a748 <_Balloc+0x84>)
 800a6e2:	f000 fe6d 	bl	800b3c0 <__assert_func>
 800a6e6:	6045      	str	r5, [r0, #4]
 800a6e8:	6085      	str	r5, [r0, #8]
 800a6ea:	6005      	str	r5, [r0, #0]
 800a6ec:	60c5      	str	r5, [r0, #12]
 800a6ee:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a6f0:	68eb      	ldr	r3, [r5, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d013      	beq.n	800a71e <_Balloc+0x5a>
 800a6f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a6f8:	00a2      	lsls	r2, r4, #2
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	189b      	adds	r3, r3, r2
 800a6fe:	6818      	ldr	r0, [r3, #0]
 800a700:	2800      	cmp	r0, #0
 800a702:	d118      	bne.n	800a736 <_Balloc+0x72>
 800a704:	2101      	movs	r1, #1
 800a706:	000d      	movs	r5, r1
 800a708:	40a5      	lsls	r5, r4
 800a70a:	1d6a      	adds	r2, r5, #5
 800a70c:	0030      	movs	r0, r6
 800a70e:	0092      	lsls	r2, r2, #2
 800a710:	f000 fca1 	bl	800b056 <_calloc_r>
 800a714:	2800      	cmp	r0, #0
 800a716:	d00c      	beq.n	800a732 <_Balloc+0x6e>
 800a718:	6044      	str	r4, [r0, #4]
 800a71a:	6085      	str	r5, [r0, #8]
 800a71c:	e00d      	b.n	800a73a <_Balloc+0x76>
 800a71e:	2221      	movs	r2, #33	; 0x21
 800a720:	2104      	movs	r1, #4
 800a722:	0030      	movs	r0, r6
 800a724:	f000 fc97 	bl	800b056 <_calloc_r>
 800a728:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a72a:	60e8      	str	r0, [r5, #12]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1e1      	bne.n	800a6f6 <_Balloc+0x32>
 800a732:	2000      	movs	r0, #0
 800a734:	bd70      	pop	{r4, r5, r6, pc}
 800a736:	6802      	ldr	r2, [r0, #0]
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	2300      	movs	r3, #0
 800a73c:	6103      	str	r3, [r0, #16]
 800a73e:	60c3      	str	r3, [r0, #12]
 800a740:	e7f8      	b.n	800a734 <_Balloc+0x70>
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	0800c275 	.word	0x0800c275
 800a748:	0800c374 	.word	0x0800c374

0800a74c <_Bfree>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a750:	0005      	movs	r5, r0
 800a752:	000c      	movs	r4, r1
 800a754:	2e00      	cmp	r6, #0
 800a756:	d10e      	bne.n	800a776 <_Bfree+0x2a>
 800a758:	2010      	movs	r0, #16
 800a75a:	f7fc feeb 	bl	8007534 <malloc>
 800a75e:	1e02      	subs	r2, r0, #0
 800a760:	6268      	str	r0, [r5, #36]	; 0x24
 800a762:	d104      	bne.n	800a76e <_Bfree+0x22>
 800a764:	218a      	movs	r1, #138	; 0x8a
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <_Bfree+0x40>)
 800a768:	4809      	ldr	r0, [pc, #36]	; (800a790 <_Bfree+0x44>)
 800a76a:	f000 fe29 	bl	800b3c0 <__assert_func>
 800a76e:	6046      	str	r6, [r0, #4]
 800a770:	6086      	str	r6, [r0, #8]
 800a772:	6006      	str	r6, [r0, #0]
 800a774:	60c6      	str	r6, [r0, #12]
 800a776:	2c00      	cmp	r4, #0
 800a778:	d007      	beq.n	800a78a <_Bfree+0x3e>
 800a77a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a77c:	6862      	ldr	r2, [r4, #4]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	0092      	lsls	r2, r2, #2
 800a782:	189b      	adds	r3, r3, r2
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	6022      	str	r2, [r4, #0]
 800a788:	601c      	str	r4, [r3, #0]
 800a78a:	bd70      	pop	{r4, r5, r6, pc}
 800a78c:	0800c275 	.word	0x0800c275
 800a790:	0800c374 	.word	0x0800c374

0800a794 <__multadd>:
 800a794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a796:	000e      	movs	r6, r1
 800a798:	9001      	str	r0, [sp, #4]
 800a79a:	000c      	movs	r4, r1
 800a79c:	001d      	movs	r5, r3
 800a79e:	2000      	movs	r0, #0
 800a7a0:	690f      	ldr	r7, [r1, #16]
 800a7a2:	3614      	adds	r6, #20
 800a7a4:	6833      	ldr	r3, [r6, #0]
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	b299      	uxth	r1, r3
 800a7aa:	4351      	muls	r1, r2
 800a7ac:	0c1b      	lsrs	r3, r3, #16
 800a7ae:	4353      	muls	r3, r2
 800a7b0:	1949      	adds	r1, r1, r5
 800a7b2:	0c0d      	lsrs	r5, r1, #16
 800a7b4:	195b      	adds	r3, r3, r5
 800a7b6:	0c1d      	lsrs	r5, r3, #16
 800a7b8:	b289      	uxth	r1, r1
 800a7ba:	041b      	lsls	r3, r3, #16
 800a7bc:	185b      	adds	r3, r3, r1
 800a7be:	c608      	stmia	r6!, {r3}
 800a7c0:	4287      	cmp	r7, r0
 800a7c2:	dcef      	bgt.n	800a7a4 <__multadd+0x10>
 800a7c4:	2d00      	cmp	r5, #0
 800a7c6:	d022      	beq.n	800a80e <__multadd+0x7a>
 800a7c8:	68a3      	ldr	r3, [r4, #8]
 800a7ca:	42bb      	cmp	r3, r7
 800a7cc:	dc19      	bgt.n	800a802 <__multadd+0x6e>
 800a7ce:	6863      	ldr	r3, [r4, #4]
 800a7d0:	9801      	ldr	r0, [sp, #4]
 800a7d2:	1c59      	adds	r1, r3, #1
 800a7d4:	f7ff ff76 	bl	800a6c4 <_Balloc>
 800a7d8:	1e06      	subs	r6, r0, #0
 800a7da:	d105      	bne.n	800a7e8 <__multadd+0x54>
 800a7dc:	0002      	movs	r2, r0
 800a7de:	21b5      	movs	r1, #181	; 0xb5
 800a7e0:	4b0c      	ldr	r3, [pc, #48]	; (800a814 <__multadd+0x80>)
 800a7e2:	480d      	ldr	r0, [pc, #52]	; (800a818 <__multadd+0x84>)
 800a7e4:	f000 fdec 	bl	800b3c0 <__assert_func>
 800a7e8:	0021      	movs	r1, r4
 800a7ea:	6923      	ldr	r3, [r4, #16]
 800a7ec:	310c      	adds	r1, #12
 800a7ee:	1c9a      	adds	r2, r3, #2
 800a7f0:	0092      	lsls	r2, r2, #2
 800a7f2:	300c      	adds	r0, #12
 800a7f4:	f7fc fea8 	bl	8007548 <memcpy>
 800a7f8:	0021      	movs	r1, r4
 800a7fa:	9801      	ldr	r0, [sp, #4]
 800a7fc:	f7ff ffa6 	bl	800a74c <_Bfree>
 800a800:	0034      	movs	r4, r6
 800a802:	1d3b      	adds	r3, r7, #4
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	18e3      	adds	r3, r4, r3
 800a808:	605d      	str	r5, [r3, #4]
 800a80a:	1c7b      	adds	r3, r7, #1
 800a80c:	6123      	str	r3, [r4, #16]
 800a80e:	0020      	movs	r0, r4
 800a810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a812:	46c0      	nop			; (mov r8, r8)
 800a814:	0800c2e7 	.word	0x0800c2e7
 800a818:	0800c374 	.word	0x0800c374

0800a81c <__s2b>:
 800a81c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a81e:	0006      	movs	r6, r0
 800a820:	0018      	movs	r0, r3
 800a822:	000c      	movs	r4, r1
 800a824:	3008      	adds	r0, #8
 800a826:	2109      	movs	r1, #9
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	0015      	movs	r5, r2
 800a82c:	f7f5 fd10 	bl	8000250 <__divsi3>
 800a830:	2301      	movs	r3, #1
 800a832:	2100      	movs	r1, #0
 800a834:	4283      	cmp	r3, r0
 800a836:	db0a      	blt.n	800a84e <__s2b+0x32>
 800a838:	0030      	movs	r0, r6
 800a83a:	f7ff ff43 	bl	800a6c4 <_Balloc>
 800a83e:	1e01      	subs	r1, r0, #0
 800a840:	d108      	bne.n	800a854 <__s2b+0x38>
 800a842:	0002      	movs	r2, r0
 800a844:	4b19      	ldr	r3, [pc, #100]	; (800a8ac <__s2b+0x90>)
 800a846:	481a      	ldr	r0, [pc, #104]	; (800a8b0 <__s2b+0x94>)
 800a848:	31ce      	adds	r1, #206	; 0xce
 800a84a:	f000 fdb9 	bl	800b3c0 <__assert_func>
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	3101      	adds	r1, #1
 800a852:	e7ef      	b.n	800a834 <__s2b+0x18>
 800a854:	9b08      	ldr	r3, [sp, #32]
 800a856:	6143      	str	r3, [r0, #20]
 800a858:	2301      	movs	r3, #1
 800a85a:	6103      	str	r3, [r0, #16]
 800a85c:	2d09      	cmp	r5, #9
 800a85e:	dd18      	ble.n	800a892 <__s2b+0x76>
 800a860:	0023      	movs	r3, r4
 800a862:	3309      	adds	r3, #9
 800a864:	001f      	movs	r7, r3
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	1964      	adds	r4, r4, r5
 800a86a:	783b      	ldrb	r3, [r7, #0]
 800a86c:	220a      	movs	r2, #10
 800a86e:	0030      	movs	r0, r6
 800a870:	3b30      	subs	r3, #48	; 0x30
 800a872:	f7ff ff8f 	bl	800a794 <__multadd>
 800a876:	3701      	adds	r7, #1
 800a878:	0001      	movs	r1, r0
 800a87a:	42a7      	cmp	r7, r4
 800a87c:	d1f5      	bne.n	800a86a <__s2b+0x4e>
 800a87e:	002c      	movs	r4, r5
 800a880:	9b00      	ldr	r3, [sp, #0]
 800a882:	3c08      	subs	r4, #8
 800a884:	191c      	adds	r4, r3, r4
 800a886:	002f      	movs	r7, r5
 800a888:	9b01      	ldr	r3, [sp, #4]
 800a88a:	429f      	cmp	r7, r3
 800a88c:	db04      	blt.n	800a898 <__s2b+0x7c>
 800a88e:	0008      	movs	r0, r1
 800a890:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a892:	2509      	movs	r5, #9
 800a894:	340a      	adds	r4, #10
 800a896:	e7f6      	b.n	800a886 <__s2b+0x6a>
 800a898:	1b63      	subs	r3, r4, r5
 800a89a:	5ddb      	ldrb	r3, [r3, r7]
 800a89c:	220a      	movs	r2, #10
 800a89e:	0030      	movs	r0, r6
 800a8a0:	3b30      	subs	r3, #48	; 0x30
 800a8a2:	f7ff ff77 	bl	800a794 <__multadd>
 800a8a6:	3701      	adds	r7, #1
 800a8a8:	0001      	movs	r1, r0
 800a8aa:	e7ed      	b.n	800a888 <__s2b+0x6c>
 800a8ac:	0800c2e7 	.word	0x0800c2e7
 800a8b0:	0800c374 	.word	0x0800c374

0800a8b4 <__hi0bits>:
 800a8b4:	0003      	movs	r3, r0
 800a8b6:	0c02      	lsrs	r2, r0, #16
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	4282      	cmp	r2, r0
 800a8bc:	d101      	bne.n	800a8c2 <__hi0bits+0xe>
 800a8be:	041b      	lsls	r3, r3, #16
 800a8c0:	3010      	adds	r0, #16
 800a8c2:	0e1a      	lsrs	r2, r3, #24
 800a8c4:	d101      	bne.n	800a8ca <__hi0bits+0x16>
 800a8c6:	3008      	adds	r0, #8
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	0f1a      	lsrs	r2, r3, #28
 800a8cc:	d101      	bne.n	800a8d2 <__hi0bits+0x1e>
 800a8ce:	3004      	adds	r0, #4
 800a8d0:	011b      	lsls	r3, r3, #4
 800a8d2:	0f9a      	lsrs	r2, r3, #30
 800a8d4:	d101      	bne.n	800a8da <__hi0bits+0x26>
 800a8d6:	3002      	adds	r0, #2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	db03      	blt.n	800a8e6 <__hi0bits+0x32>
 800a8de:	3001      	adds	r0, #1
 800a8e0:	005b      	lsls	r3, r3, #1
 800a8e2:	d400      	bmi.n	800a8e6 <__hi0bits+0x32>
 800a8e4:	2020      	movs	r0, #32
 800a8e6:	4770      	bx	lr

0800a8e8 <__lo0bits>:
 800a8e8:	6803      	ldr	r3, [r0, #0]
 800a8ea:	0002      	movs	r2, r0
 800a8ec:	2107      	movs	r1, #7
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	4008      	ands	r0, r1
 800a8f2:	420b      	tst	r3, r1
 800a8f4:	d00d      	beq.n	800a912 <__lo0bits+0x2a>
 800a8f6:	3906      	subs	r1, #6
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	420b      	tst	r3, r1
 800a8fc:	d105      	bne.n	800a90a <__lo0bits+0x22>
 800a8fe:	3002      	adds	r0, #2
 800a900:	4203      	tst	r3, r0
 800a902:	d003      	beq.n	800a90c <__lo0bits+0x24>
 800a904:	40cb      	lsrs	r3, r1
 800a906:	0008      	movs	r0, r1
 800a908:	6013      	str	r3, [r2, #0]
 800a90a:	4770      	bx	lr
 800a90c:	089b      	lsrs	r3, r3, #2
 800a90e:	6013      	str	r3, [r2, #0]
 800a910:	e7fb      	b.n	800a90a <__lo0bits+0x22>
 800a912:	b299      	uxth	r1, r3
 800a914:	2900      	cmp	r1, #0
 800a916:	d101      	bne.n	800a91c <__lo0bits+0x34>
 800a918:	2010      	movs	r0, #16
 800a91a:	0c1b      	lsrs	r3, r3, #16
 800a91c:	b2d9      	uxtb	r1, r3
 800a91e:	2900      	cmp	r1, #0
 800a920:	d101      	bne.n	800a926 <__lo0bits+0x3e>
 800a922:	3008      	adds	r0, #8
 800a924:	0a1b      	lsrs	r3, r3, #8
 800a926:	0719      	lsls	r1, r3, #28
 800a928:	d101      	bne.n	800a92e <__lo0bits+0x46>
 800a92a:	3004      	adds	r0, #4
 800a92c:	091b      	lsrs	r3, r3, #4
 800a92e:	0799      	lsls	r1, r3, #30
 800a930:	d101      	bne.n	800a936 <__lo0bits+0x4e>
 800a932:	3002      	adds	r0, #2
 800a934:	089b      	lsrs	r3, r3, #2
 800a936:	07d9      	lsls	r1, r3, #31
 800a938:	d4e9      	bmi.n	800a90e <__lo0bits+0x26>
 800a93a:	3001      	adds	r0, #1
 800a93c:	085b      	lsrs	r3, r3, #1
 800a93e:	d1e6      	bne.n	800a90e <__lo0bits+0x26>
 800a940:	2020      	movs	r0, #32
 800a942:	e7e2      	b.n	800a90a <__lo0bits+0x22>

0800a944 <__i2b>:
 800a944:	b510      	push	{r4, lr}
 800a946:	000c      	movs	r4, r1
 800a948:	2101      	movs	r1, #1
 800a94a:	f7ff febb 	bl	800a6c4 <_Balloc>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d106      	bne.n	800a960 <__i2b+0x1c>
 800a952:	21a0      	movs	r1, #160	; 0xa0
 800a954:	0002      	movs	r2, r0
 800a956:	4b04      	ldr	r3, [pc, #16]	; (800a968 <__i2b+0x24>)
 800a958:	4804      	ldr	r0, [pc, #16]	; (800a96c <__i2b+0x28>)
 800a95a:	0049      	lsls	r1, r1, #1
 800a95c:	f000 fd30 	bl	800b3c0 <__assert_func>
 800a960:	2301      	movs	r3, #1
 800a962:	6144      	str	r4, [r0, #20]
 800a964:	6103      	str	r3, [r0, #16]
 800a966:	bd10      	pop	{r4, pc}
 800a968:	0800c2e7 	.word	0x0800c2e7
 800a96c:	0800c374 	.word	0x0800c374

0800a970 <__multiply>:
 800a970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a972:	690b      	ldr	r3, [r1, #16]
 800a974:	0014      	movs	r4, r2
 800a976:	6912      	ldr	r2, [r2, #16]
 800a978:	000d      	movs	r5, r1
 800a97a:	b089      	sub	sp, #36	; 0x24
 800a97c:	4293      	cmp	r3, r2
 800a97e:	da01      	bge.n	800a984 <__multiply+0x14>
 800a980:	0025      	movs	r5, r4
 800a982:	000c      	movs	r4, r1
 800a984:	692f      	ldr	r7, [r5, #16]
 800a986:	6926      	ldr	r6, [r4, #16]
 800a988:	6869      	ldr	r1, [r5, #4]
 800a98a:	19bb      	adds	r3, r7, r6
 800a98c:	9302      	str	r3, [sp, #8]
 800a98e:	68ab      	ldr	r3, [r5, #8]
 800a990:	19ba      	adds	r2, r7, r6
 800a992:	4293      	cmp	r3, r2
 800a994:	da00      	bge.n	800a998 <__multiply+0x28>
 800a996:	3101      	adds	r1, #1
 800a998:	f7ff fe94 	bl	800a6c4 <_Balloc>
 800a99c:	9001      	str	r0, [sp, #4]
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d106      	bne.n	800a9b0 <__multiply+0x40>
 800a9a2:	215e      	movs	r1, #94	; 0x5e
 800a9a4:	0002      	movs	r2, r0
 800a9a6:	4b48      	ldr	r3, [pc, #288]	; (800aac8 <__multiply+0x158>)
 800a9a8:	4848      	ldr	r0, [pc, #288]	; (800aacc <__multiply+0x15c>)
 800a9aa:	31ff      	adds	r1, #255	; 0xff
 800a9ac:	f000 fd08 	bl	800b3c0 <__assert_func>
 800a9b0:	9b01      	ldr	r3, [sp, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	3314      	adds	r3, #20
 800a9b6:	469c      	mov	ip, r3
 800a9b8:	19bb      	adds	r3, r7, r6
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4463      	add	r3, ip
 800a9be:	9303      	str	r3, [sp, #12]
 800a9c0:	4663      	mov	r3, ip
 800a9c2:	9903      	ldr	r1, [sp, #12]
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	d32c      	bcc.n	800aa22 <__multiply+0xb2>
 800a9c8:	002b      	movs	r3, r5
 800a9ca:	0022      	movs	r2, r4
 800a9cc:	3314      	adds	r3, #20
 800a9ce:	00bf      	lsls	r7, r7, #2
 800a9d0:	3214      	adds	r2, #20
 800a9d2:	9306      	str	r3, [sp, #24]
 800a9d4:	00b6      	lsls	r6, r6, #2
 800a9d6:	19db      	adds	r3, r3, r7
 800a9d8:	9304      	str	r3, [sp, #16]
 800a9da:	1993      	adds	r3, r2, r6
 800a9dc:	9307      	str	r3, [sp, #28]
 800a9de:	2304      	movs	r3, #4
 800a9e0:	9305      	str	r3, [sp, #20]
 800a9e2:	002b      	movs	r3, r5
 800a9e4:	9904      	ldr	r1, [sp, #16]
 800a9e6:	3315      	adds	r3, #21
 800a9e8:	9200      	str	r2, [sp, #0]
 800a9ea:	4299      	cmp	r1, r3
 800a9ec:	d305      	bcc.n	800a9fa <__multiply+0x8a>
 800a9ee:	1b4b      	subs	r3, r1, r5
 800a9f0:	3b15      	subs	r3, #21
 800a9f2:	089b      	lsrs	r3, r3, #2
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	9305      	str	r3, [sp, #20]
 800a9fa:	9b07      	ldr	r3, [sp, #28]
 800a9fc:	9a00      	ldr	r2, [sp, #0]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d311      	bcc.n	800aa26 <__multiply+0xb6>
 800aa02:	9b02      	ldr	r3, [sp, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	dd06      	ble.n	800aa16 <__multiply+0xa6>
 800aa08:	9b03      	ldr	r3, [sp, #12]
 800aa0a:	3b04      	subs	r3, #4
 800aa0c:	9303      	str	r3, [sp, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d053      	beq.n	800aabe <__multiply+0x14e>
 800aa16:	9b01      	ldr	r3, [sp, #4]
 800aa18:	9a02      	ldr	r2, [sp, #8]
 800aa1a:	0018      	movs	r0, r3
 800aa1c:	611a      	str	r2, [r3, #16]
 800aa1e:	b009      	add	sp, #36	; 0x24
 800aa20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa22:	c304      	stmia	r3!, {r2}
 800aa24:	e7cd      	b.n	800a9c2 <__multiply+0x52>
 800aa26:	9b00      	ldr	r3, [sp, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	b298      	uxth	r0, r3
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d01b      	beq.n	800aa68 <__multiply+0xf8>
 800aa30:	4667      	mov	r7, ip
 800aa32:	2400      	movs	r4, #0
 800aa34:	9e06      	ldr	r6, [sp, #24]
 800aa36:	ce02      	ldmia	r6!, {r1}
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	b28b      	uxth	r3, r1
 800aa3c:	4343      	muls	r3, r0
 800aa3e:	b292      	uxth	r2, r2
 800aa40:	189b      	adds	r3, r3, r2
 800aa42:	191b      	adds	r3, r3, r4
 800aa44:	0c0c      	lsrs	r4, r1, #16
 800aa46:	4344      	muls	r4, r0
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	0c11      	lsrs	r1, r2, #16
 800aa4c:	1861      	adds	r1, r4, r1
 800aa4e:	0c1c      	lsrs	r4, r3, #16
 800aa50:	1909      	adds	r1, r1, r4
 800aa52:	0c0c      	lsrs	r4, r1, #16
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	0409      	lsls	r1, r1, #16
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	c708      	stmia	r7!, {r3}
 800aa5c:	9b04      	ldr	r3, [sp, #16]
 800aa5e:	42b3      	cmp	r3, r6
 800aa60:	d8e9      	bhi.n	800aa36 <__multiply+0xc6>
 800aa62:	4663      	mov	r3, ip
 800aa64:	9a05      	ldr	r2, [sp, #20]
 800aa66:	509c      	str	r4, [r3, r2]
 800aa68:	9b00      	ldr	r3, [sp, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	0c1e      	lsrs	r6, r3, #16
 800aa6e:	d020      	beq.n	800aab2 <__multiply+0x142>
 800aa70:	4663      	mov	r3, ip
 800aa72:	002c      	movs	r4, r5
 800aa74:	4660      	mov	r0, ip
 800aa76:	2700      	movs	r7, #0
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3414      	adds	r4, #20
 800aa7c:	6822      	ldr	r2, [r4, #0]
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	b291      	uxth	r1, r2
 800aa82:	4371      	muls	r1, r6
 800aa84:	6802      	ldr	r2, [r0, #0]
 800aa86:	0c12      	lsrs	r2, r2, #16
 800aa88:	1889      	adds	r1, r1, r2
 800aa8a:	19cf      	adds	r7, r1, r7
 800aa8c:	0439      	lsls	r1, r7, #16
 800aa8e:	430b      	orrs	r3, r1
 800aa90:	6003      	str	r3, [r0, #0]
 800aa92:	cc02      	ldmia	r4!, {r1}
 800aa94:	6843      	ldr	r3, [r0, #4]
 800aa96:	0c09      	lsrs	r1, r1, #16
 800aa98:	4371      	muls	r1, r6
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	0c3f      	lsrs	r7, r7, #16
 800aa9e:	18cb      	adds	r3, r1, r3
 800aaa0:	9a04      	ldr	r2, [sp, #16]
 800aaa2:	19db      	adds	r3, r3, r7
 800aaa4:	0c1f      	lsrs	r7, r3, #16
 800aaa6:	3004      	adds	r0, #4
 800aaa8:	42a2      	cmp	r2, r4
 800aaaa:	d8e7      	bhi.n	800aa7c <__multiply+0x10c>
 800aaac:	4662      	mov	r2, ip
 800aaae:	9905      	ldr	r1, [sp, #20]
 800aab0:	5053      	str	r3, [r2, r1]
 800aab2:	9b00      	ldr	r3, [sp, #0]
 800aab4:	3304      	adds	r3, #4
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	2304      	movs	r3, #4
 800aaba:	449c      	add	ip, r3
 800aabc:	e79d      	b.n	800a9fa <__multiply+0x8a>
 800aabe:	9b02      	ldr	r3, [sp, #8]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	9302      	str	r3, [sp, #8]
 800aac4:	e79d      	b.n	800aa02 <__multiply+0x92>
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	0800c2e7 	.word	0x0800c2e7
 800aacc:	0800c374 	.word	0x0800c374

0800aad0 <__pow5mult>:
 800aad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aad2:	2303      	movs	r3, #3
 800aad4:	0015      	movs	r5, r2
 800aad6:	0007      	movs	r7, r0
 800aad8:	000e      	movs	r6, r1
 800aada:	401a      	ands	r2, r3
 800aadc:	421d      	tst	r5, r3
 800aade:	d008      	beq.n	800aaf2 <__pow5mult+0x22>
 800aae0:	4925      	ldr	r1, [pc, #148]	; (800ab78 <__pow5mult+0xa8>)
 800aae2:	3a01      	subs	r2, #1
 800aae4:	0092      	lsls	r2, r2, #2
 800aae6:	5852      	ldr	r2, [r2, r1]
 800aae8:	2300      	movs	r3, #0
 800aaea:	0031      	movs	r1, r6
 800aaec:	f7ff fe52 	bl	800a794 <__multadd>
 800aaf0:	0006      	movs	r6, r0
 800aaf2:	10ad      	asrs	r5, r5, #2
 800aaf4:	d03d      	beq.n	800ab72 <__pow5mult+0xa2>
 800aaf6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800aaf8:	2c00      	cmp	r4, #0
 800aafa:	d10f      	bne.n	800ab1c <__pow5mult+0x4c>
 800aafc:	2010      	movs	r0, #16
 800aafe:	f7fc fd19 	bl	8007534 <malloc>
 800ab02:	1e02      	subs	r2, r0, #0
 800ab04:	6278      	str	r0, [r7, #36]	; 0x24
 800ab06:	d105      	bne.n	800ab14 <__pow5mult+0x44>
 800ab08:	21d7      	movs	r1, #215	; 0xd7
 800ab0a:	4b1c      	ldr	r3, [pc, #112]	; (800ab7c <__pow5mult+0xac>)
 800ab0c:	481c      	ldr	r0, [pc, #112]	; (800ab80 <__pow5mult+0xb0>)
 800ab0e:	0049      	lsls	r1, r1, #1
 800ab10:	f000 fc56 	bl	800b3c0 <__assert_func>
 800ab14:	6044      	str	r4, [r0, #4]
 800ab16:	6084      	str	r4, [r0, #8]
 800ab18:	6004      	str	r4, [r0, #0]
 800ab1a:	60c4      	str	r4, [r0, #12]
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1e:	689c      	ldr	r4, [r3, #8]
 800ab20:	9301      	str	r3, [sp, #4]
 800ab22:	2c00      	cmp	r4, #0
 800ab24:	d108      	bne.n	800ab38 <__pow5mult+0x68>
 800ab26:	0038      	movs	r0, r7
 800ab28:	4916      	ldr	r1, [pc, #88]	; (800ab84 <__pow5mult+0xb4>)
 800ab2a:	f7ff ff0b 	bl	800a944 <__i2b>
 800ab2e:	9b01      	ldr	r3, [sp, #4]
 800ab30:	0004      	movs	r4, r0
 800ab32:	6098      	str	r0, [r3, #8]
 800ab34:	2300      	movs	r3, #0
 800ab36:	6003      	str	r3, [r0, #0]
 800ab38:	2301      	movs	r3, #1
 800ab3a:	421d      	tst	r5, r3
 800ab3c:	d00a      	beq.n	800ab54 <__pow5mult+0x84>
 800ab3e:	0031      	movs	r1, r6
 800ab40:	0022      	movs	r2, r4
 800ab42:	0038      	movs	r0, r7
 800ab44:	f7ff ff14 	bl	800a970 <__multiply>
 800ab48:	0031      	movs	r1, r6
 800ab4a:	9001      	str	r0, [sp, #4]
 800ab4c:	0038      	movs	r0, r7
 800ab4e:	f7ff fdfd 	bl	800a74c <_Bfree>
 800ab52:	9e01      	ldr	r6, [sp, #4]
 800ab54:	106d      	asrs	r5, r5, #1
 800ab56:	d00c      	beq.n	800ab72 <__pow5mult+0xa2>
 800ab58:	6820      	ldr	r0, [r4, #0]
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d107      	bne.n	800ab6e <__pow5mult+0x9e>
 800ab5e:	0022      	movs	r2, r4
 800ab60:	0021      	movs	r1, r4
 800ab62:	0038      	movs	r0, r7
 800ab64:	f7ff ff04 	bl	800a970 <__multiply>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	6020      	str	r0, [r4, #0]
 800ab6c:	6003      	str	r3, [r0, #0]
 800ab6e:	0004      	movs	r4, r0
 800ab70:	e7e2      	b.n	800ab38 <__pow5mult+0x68>
 800ab72:	0030      	movs	r0, r6
 800ab74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab76:	46c0      	nop			; (mov r8, r8)
 800ab78:	0800c4c0 	.word	0x0800c4c0
 800ab7c:	0800c275 	.word	0x0800c275
 800ab80:	0800c374 	.word	0x0800c374
 800ab84:	00000271 	.word	0x00000271

0800ab88 <__lshift>:
 800ab88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab8a:	000c      	movs	r4, r1
 800ab8c:	0017      	movs	r7, r2
 800ab8e:	6923      	ldr	r3, [r4, #16]
 800ab90:	1155      	asrs	r5, r2, #5
 800ab92:	b087      	sub	sp, #28
 800ab94:	18eb      	adds	r3, r5, r3
 800ab96:	9302      	str	r3, [sp, #8]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	9301      	str	r3, [sp, #4]
 800ab9c:	6849      	ldr	r1, [r1, #4]
 800ab9e:	68a3      	ldr	r3, [r4, #8]
 800aba0:	9004      	str	r0, [sp, #16]
 800aba2:	9a01      	ldr	r2, [sp, #4]
 800aba4:	4293      	cmp	r3, r2
 800aba6:	db10      	blt.n	800abca <__lshift+0x42>
 800aba8:	9804      	ldr	r0, [sp, #16]
 800abaa:	f7ff fd8b 	bl	800a6c4 <_Balloc>
 800abae:	2300      	movs	r3, #0
 800abb0:	0002      	movs	r2, r0
 800abb2:	0006      	movs	r6, r0
 800abb4:	0019      	movs	r1, r3
 800abb6:	3214      	adds	r2, #20
 800abb8:	4298      	cmp	r0, r3
 800abba:	d10c      	bne.n	800abd6 <__lshift+0x4e>
 800abbc:	21da      	movs	r1, #218	; 0xda
 800abbe:	0002      	movs	r2, r0
 800abc0:	4b26      	ldr	r3, [pc, #152]	; (800ac5c <__lshift+0xd4>)
 800abc2:	4827      	ldr	r0, [pc, #156]	; (800ac60 <__lshift+0xd8>)
 800abc4:	31ff      	adds	r1, #255	; 0xff
 800abc6:	f000 fbfb 	bl	800b3c0 <__assert_func>
 800abca:	3101      	adds	r1, #1
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	e7e8      	b.n	800aba2 <__lshift+0x1a>
 800abd0:	0098      	lsls	r0, r3, #2
 800abd2:	5011      	str	r1, [r2, r0]
 800abd4:	3301      	adds	r3, #1
 800abd6:	42ab      	cmp	r3, r5
 800abd8:	dbfa      	blt.n	800abd0 <__lshift+0x48>
 800abda:	43eb      	mvns	r3, r5
 800abdc:	17db      	asrs	r3, r3, #31
 800abde:	401d      	ands	r5, r3
 800abe0:	211f      	movs	r1, #31
 800abe2:	0023      	movs	r3, r4
 800abe4:	0038      	movs	r0, r7
 800abe6:	00ad      	lsls	r5, r5, #2
 800abe8:	1955      	adds	r5, r2, r5
 800abea:	6922      	ldr	r2, [r4, #16]
 800abec:	3314      	adds	r3, #20
 800abee:	0092      	lsls	r2, r2, #2
 800abf0:	4008      	ands	r0, r1
 800abf2:	4684      	mov	ip, r0
 800abf4:	189a      	adds	r2, r3, r2
 800abf6:	420f      	tst	r7, r1
 800abf8:	d02a      	beq.n	800ac50 <__lshift+0xc8>
 800abfa:	3101      	adds	r1, #1
 800abfc:	1a09      	subs	r1, r1, r0
 800abfe:	9105      	str	r1, [sp, #20]
 800ac00:	2100      	movs	r1, #0
 800ac02:	9503      	str	r5, [sp, #12]
 800ac04:	4667      	mov	r7, ip
 800ac06:	6818      	ldr	r0, [r3, #0]
 800ac08:	40b8      	lsls	r0, r7
 800ac0a:	4301      	orrs	r1, r0
 800ac0c:	9803      	ldr	r0, [sp, #12]
 800ac0e:	c002      	stmia	r0!, {r1}
 800ac10:	cb02      	ldmia	r3!, {r1}
 800ac12:	9003      	str	r0, [sp, #12]
 800ac14:	9805      	ldr	r0, [sp, #20]
 800ac16:	40c1      	lsrs	r1, r0
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d8f3      	bhi.n	800ac04 <__lshift+0x7c>
 800ac1c:	0020      	movs	r0, r4
 800ac1e:	3015      	adds	r0, #21
 800ac20:	2304      	movs	r3, #4
 800ac22:	4282      	cmp	r2, r0
 800ac24:	d304      	bcc.n	800ac30 <__lshift+0xa8>
 800ac26:	1b13      	subs	r3, r2, r4
 800ac28:	3b15      	subs	r3, #21
 800ac2a:	089b      	lsrs	r3, r3, #2
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	50e9      	str	r1, [r5, r3]
 800ac32:	2900      	cmp	r1, #0
 800ac34:	d002      	beq.n	800ac3c <__lshift+0xb4>
 800ac36:	9b02      	ldr	r3, [sp, #8]
 800ac38:	3302      	adds	r3, #2
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	9b01      	ldr	r3, [sp, #4]
 800ac3e:	9804      	ldr	r0, [sp, #16]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	0021      	movs	r1, r4
 800ac44:	6133      	str	r3, [r6, #16]
 800ac46:	f7ff fd81 	bl	800a74c <_Bfree>
 800ac4a:	0030      	movs	r0, r6
 800ac4c:	b007      	add	sp, #28
 800ac4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac50:	cb02      	ldmia	r3!, {r1}
 800ac52:	c502      	stmia	r5!, {r1}
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d8fb      	bhi.n	800ac50 <__lshift+0xc8>
 800ac58:	e7f0      	b.n	800ac3c <__lshift+0xb4>
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	0800c2e7 	.word	0x0800c2e7
 800ac60:	0800c374 	.word	0x0800c374

0800ac64 <__mcmp>:
 800ac64:	6902      	ldr	r2, [r0, #16]
 800ac66:	690b      	ldr	r3, [r1, #16]
 800ac68:	b530      	push	{r4, r5, lr}
 800ac6a:	0004      	movs	r4, r0
 800ac6c:	1ad0      	subs	r0, r2, r3
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d10d      	bne.n	800ac8e <__mcmp+0x2a>
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	3414      	adds	r4, #20
 800ac76:	3114      	adds	r1, #20
 800ac78:	18e2      	adds	r2, r4, r3
 800ac7a:	18c9      	adds	r1, r1, r3
 800ac7c:	3a04      	subs	r2, #4
 800ac7e:	3904      	subs	r1, #4
 800ac80:	6815      	ldr	r5, [r2, #0]
 800ac82:	680b      	ldr	r3, [r1, #0]
 800ac84:	429d      	cmp	r5, r3
 800ac86:	d003      	beq.n	800ac90 <__mcmp+0x2c>
 800ac88:	2001      	movs	r0, #1
 800ac8a:	429d      	cmp	r5, r3
 800ac8c:	d303      	bcc.n	800ac96 <__mcmp+0x32>
 800ac8e:	bd30      	pop	{r4, r5, pc}
 800ac90:	4294      	cmp	r4, r2
 800ac92:	d3f3      	bcc.n	800ac7c <__mcmp+0x18>
 800ac94:	e7fb      	b.n	800ac8e <__mcmp+0x2a>
 800ac96:	4240      	negs	r0, r0
 800ac98:	e7f9      	b.n	800ac8e <__mcmp+0x2a>
	...

0800ac9c <__mdiff>:
 800ac9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac9e:	000e      	movs	r6, r1
 800aca0:	0007      	movs	r7, r0
 800aca2:	0011      	movs	r1, r2
 800aca4:	0030      	movs	r0, r6
 800aca6:	b087      	sub	sp, #28
 800aca8:	0014      	movs	r4, r2
 800acaa:	f7ff ffdb 	bl	800ac64 <__mcmp>
 800acae:	1e05      	subs	r5, r0, #0
 800acb0:	d110      	bne.n	800acd4 <__mdiff+0x38>
 800acb2:	0001      	movs	r1, r0
 800acb4:	0038      	movs	r0, r7
 800acb6:	f7ff fd05 	bl	800a6c4 <_Balloc>
 800acba:	1e02      	subs	r2, r0, #0
 800acbc:	d104      	bne.n	800acc8 <__mdiff+0x2c>
 800acbe:	4b40      	ldr	r3, [pc, #256]	; (800adc0 <__mdiff+0x124>)
 800acc0:	4940      	ldr	r1, [pc, #256]	; (800adc4 <__mdiff+0x128>)
 800acc2:	4841      	ldr	r0, [pc, #260]	; (800adc8 <__mdiff+0x12c>)
 800acc4:	f000 fb7c 	bl	800b3c0 <__assert_func>
 800acc8:	2301      	movs	r3, #1
 800acca:	6145      	str	r5, [r0, #20]
 800accc:	6103      	str	r3, [r0, #16]
 800acce:	0010      	movs	r0, r2
 800acd0:	b007      	add	sp, #28
 800acd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd4:	2301      	movs	r3, #1
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	2800      	cmp	r0, #0
 800acda:	db04      	blt.n	800ace6 <__mdiff+0x4a>
 800acdc:	0023      	movs	r3, r4
 800acde:	0034      	movs	r4, r6
 800ace0:	001e      	movs	r6, r3
 800ace2:	2300      	movs	r3, #0
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	0038      	movs	r0, r7
 800ace8:	6861      	ldr	r1, [r4, #4]
 800acea:	f7ff fceb 	bl	800a6c4 <_Balloc>
 800acee:	1e02      	subs	r2, r0, #0
 800acf0:	d103      	bne.n	800acfa <__mdiff+0x5e>
 800acf2:	2190      	movs	r1, #144	; 0x90
 800acf4:	4b32      	ldr	r3, [pc, #200]	; (800adc0 <__mdiff+0x124>)
 800acf6:	0089      	lsls	r1, r1, #2
 800acf8:	e7e3      	b.n	800acc2 <__mdiff+0x26>
 800acfa:	9b01      	ldr	r3, [sp, #4]
 800acfc:	2700      	movs	r7, #0
 800acfe:	60c3      	str	r3, [r0, #12]
 800ad00:	6920      	ldr	r0, [r4, #16]
 800ad02:	3414      	adds	r4, #20
 800ad04:	9401      	str	r4, [sp, #4]
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	0084      	lsls	r4, r0, #2
 800ad0a:	191b      	adds	r3, r3, r4
 800ad0c:	0034      	movs	r4, r6
 800ad0e:	9302      	str	r3, [sp, #8]
 800ad10:	6933      	ldr	r3, [r6, #16]
 800ad12:	3414      	adds	r4, #20
 800ad14:	0099      	lsls	r1, r3, #2
 800ad16:	1863      	adds	r3, r4, r1
 800ad18:	9303      	str	r3, [sp, #12]
 800ad1a:	0013      	movs	r3, r2
 800ad1c:	3314      	adds	r3, #20
 800ad1e:	469c      	mov	ip, r3
 800ad20:	9305      	str	r3, [sp, #20]
 800ad22:	9b01      	ldr	r3, [sp, #4]
 800ad24:	9304      	str	r3, [sp, #16]
 800ad26:	9b04      	ldr	r3, [sp, #16]
 800ad28:	cc02      	ldmia	r4!, {r1}
 800ad2a:	cb20      	ldmia	r3!, {r5}
 800ad2c:	9304      	str	r3, [sp, #16]
 800ad2e:	b2ab      	uxth	r3, r5
 800ad30:	19df      	adds	r7, r3, r7
 800ad32:	b28b      	uxth	r3, r1
 800ad34:	1afb      	subs	r3, r7, r3
 800ad36:	0c09      	lsrs	r1, r1, #16
 800ad38:	0c2d      	lsrs	r5, r5, #16
 800ad3a:	1a6d      	subs	r5, r5, r1
 800ad3c:	1419      	asrs	r1, r3, #16
 800ad3e:	186d      	adds	r5, r5, r1
 800ad40:	4661      	mov	r1, ip
 800ad42:	142f      	asrs	r7, r5, #16
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	042d      	lsls	r5, r5, #16
 800ad48:	432b      	orrs	r3, r5
 800ad4a:	c108      	stmia	r1!, {r3}
 800ad4c:	9b03      	ldr	r3, [sp, #12]
 800ad4e:	468c      	mov	ip, r1
 800ad50:	42a3      	cmp	r3, r4
 800ad52:	d8e8      	bhi.n	800ad26 <__mdiff+0x8a>
 800ad54:	0031      	movs	r1, r6
 800ad56:	9c03      	ldr	r4, [sp, #12]
 800ad58:	3115      	adds	r1, #21
 800ad5a:	2304      	movs	r3, #4
 800ad5c:	428c      	cmp	r4, r1
 800ad5e:	d304      	bcc.n	800ad6a <__mdiff+0xce>
 800ad60:	1ba3      	subs	r3, r4, r6
 800ad62:	3b15      	subs	r3, #21
 800ad64:	089b      	lsrs	r3, r3, #2
 800ad66:	3301      	adds	r3, #1
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	9901      	ldr	r1, [sp, #4]
 800ad6c:	18cc      	adds	r4, r1, r3
 800ad6e:	9905      	ldr	r1, [sp, #20]
 800ad70:	0026      	movs	r6, r4
 800ad72:	18cb      	adds	r3, r1, r3
 800ad74:	469c      	mov	ip, r3
 800ad76:	9902      	ldr	r1, [sp, #8]
 800ad78:	428e      	cmp	r6, r1
 800ad7a:	d310      	bcc.n	800ad9e <__mdiff+0x102>
 800ad7c:	9e02      	ldr	r6, [sp, #8]
 800ad7e:	1ee1      	subs	r1, r4, #3
 800ad80:	2500      	movs	r5, #0
 800ad82:	428e      	cmp	r6, r1
 800ad84:	d304      	bcc.n	800ad90 <__mdiff+0xf4>
 800ad86:	0031      	movs	r1, r6
 800ad88:	3103      	adds	r1, #3
 800ad8a:	1b0c      	subs	r4, r1, r4
 800ad8c:	08a4      	lsrs	r4, r4, #2
 800ad8e:	00a5      	lsls	r5, r4, #2
 800ad90:	195b      	adds	r3, r3, r5
 800ad92:	3b04      	subs	r3, #4
 800ad94:	6819      	ldr	r1, [r3, #0]
 800ad96:	2900      	cmp	r1, #0
 800ad98:	d00f      	beq.n	800adba <__mdiff+0x11e>
 800ad9a:	6110      	str	r0, [r2, #16]
 800ad9c:	e797      	b.n	800acce <__mdiff+0x32>
 800ad9e:	ce02      	ldmia	r6!, {r1}
 800ada0:	b28d      	uxth	r5, r1
 800ada2:	19ed      	adds	r5, r5, r7
 800ada4:	0c0f      	lsrs	r7, r1, #16
 800ada6:	1429      	asrs	r1, r5, #16
 800ada8:	1879      	adds	r1, r7, r1
 800adaa:	140f      	asrs	r7, r1, #16
 800adac:	b2ad      	uxth	r5, r5
 800adae:	0409      	lsls	r1, r1, #16
 800adb0:	430d      	orrs	r5, r1
 800adb2:	4661      	mov	r1, ip
 800adb4:	c120      	stmia	r1!, {r5}
 800adb6:	468c      	mov	ip, r1
 800adb8:	e7dd      	b.n	800ad76 <__mdiff+0xda>
 800adba:	3801      	subs	r0, #1
 800adbc:	e7e9      	b.n	800ad92 <__mdiff+0xf6>
 800adbe:	46c0      	nop			; (mov r8, r8)
 800adc0:	0800c2e7 	.word	0x0800c2e7
 800adc4:	00000232 	.word	0x00000232
 800adc8:	0800c374 	.word	0x0800c374

0800adcc <__ulp>:
 800adcc:	4b0f      	ldr	r3, [pc, #60]	; (800ae0c <__ulp+0x40>)
 800adce:	4019      	ands	r1, r3
 800add0:	4b0f      	ldr	r3, [pc, #60]	; (800ae10 <__ulp+0x44>)
 800add2:	18c9      	adds	r1, r1, r3
 800add4:	2900      	cmp	r1, #0
 800add6:	dd04      	ble.n	800ade2 <__ulp+0x16>
 800add8:	2200      	movs	r2, #0
 800adda:	000b      	movs	r3, r1
 800addc:	0010      	movs	r0, r2
 800adde:	0019      	movs	r1, r3
 800ade0:	4770      	bx	lr
 800ade2:	4249      	negs	r1, r1
 800ade4:	2200      	movs	r2, #0
 800ade6:	2300      	movs	r3, #0
 800ade8:	1509      	asrs	r1, r1, #20
 800adea:	2913      	cmp	r1, #19
 800adec:	dc04      	bgt.n	800adf8 <__ulp+0x2c>
 800adee:	2080      	movs	r0, #128	; 0x80
 800adf0:	0300      	lsls	r0, r0, #12
 800adf2:	4108      	asrs	r0, r1
 800adf4:	0003      	movs	r3, r0
 800adf6:	e7f1      	b.n	800addc <__ulp+0x10>
 800adf8:	3914      	subs	r1, #20
 800adfa:	2001      	movs	r0, #1
 800adfc:	291e      	cmp	r1, #30
 800adfe:	dc02      	bgt.n	800ae06 <__ulp+0x3a>
 800ae00:	2080      	movs	r0, #128	; 0x80
 800ae02:	0600      	lsls	r0, r0, #24
 800ae04:	40c8      	lsrs	r0, r1
 800ae06:	0002      	movs	r2, r0
 800ae08:	e7e8      	b.n	800addc <__ulp+0x10>
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	7ff00000 	.word	0x7ff00000
 800ae10:	fcc00000 	.word	0xfcc00000

0800ae14 <__b2d>:
 800ae14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae16:	0006      	movs	r6, r0
 800ae18:	6903      	ldr	r3, [r0, #16]
 800ae1a:	3614      	adds	r6, #20
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	18f3      	adds	r3, r6, r3
 800ae20:	1f1d      	subs	r5, r3, #4
 800ae22:	682c      	ldr	r4, [r5, #0]
 800ae24:	000f      	movs	r7, r1
 800ae26:	0020      	movs	r0, r4
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	f7ff fd43 	bl	800a8b4 <__hi0bits>
 800ae2e:	2320      	movs	r3, #32
 800ae30:	1a1b      	subs	r3, r3, r0
 800ae32:	491f      	ldr	r1, [pc, #124]	; (800aeb0 <__b2d+0x9c>)
 800ae34:	603b      	str	r3, [r7, #0]
 800ae36:	280a      	cmp	r0, #10
 800ae38:	dc16      	bgt.n	800ae68 <__b2d+0x54>
 800ae3a:	230b      	movs	r3, #11
 800ae3c:	0027      	movs	r7, r4
 800ae3e:	1a1b      	subs	r3, r3, r0
 800ae40:	40df      	lsrs	r7, r3
 800ae42:	4339      	orrs	r1, r7
 800ae44:	469c      	mov	ip, r3
 800ae46:	000b      	movs	r3, r1
 800ae48:	2100      	movs	r1, #0
 800ae4a:	42ae      	cmp	r6, r5
 800ae4c:	d202      	bcs.n	800ae54 <__b2d+0x40>
 800ae4e:	9901      	ldr	r1, [sp, #4]
 800ae50:	3908      	subs	r1, #8
 800ae52:	6809      	ldr	r1, [r1, #0]
 800ae54:	3015      	adds	r0, #21
 800ae56:	4084      	lsls	r4, r0
 800ae58:	4660      	mov	r0, ip
 800ae5a:	40c1      	lsrs	r1, r0
 800ae5c:	430c      	orrs	r4, r1
 800ae5e:	0022      	movs	r2, r4
 800ae60:	0010      	movs	r0, r2
 800ae62:	0019      	movs	r1, r3
 800ae64:	b003      	add	sp, #12
 800ae66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae68:	2700      	movs	r7, #0
 800ae6a:	42ae      	cmp	r6, r5
 800ae6c:	d202      	bcs.n	800ae74 <__b2d+0x60>
 800ae6e:	9d01      	ldr	r5, [sp, #4]
 800ae70:	3d08      	subs	r5, #8
 800ae72:	682f      	ldr	r7, [r5, #0]
 800ae74:	230b      	movs	r3, #11
 800ae76:	425b      	negs	r3, r3
 800ae78:	469c      	mov	ip, r3
 800ae7a:	4484      	add	ip, r0
 800ae7c:	280b      	cmp	r0, #11
 800ae7e:	d013      	beq.n	800aea8 <__b2d+0x94>
 800ae80:	4663      	mov	r3, ip
 800ae82:	2020      	movs	r0, #32
 800ae84:	409c      	lsls	r4, r3
 800ae86:	1ac0      	subs	r0, r0, r3
 800ae88:	003b      	movs	r3, r7
 800ae8a:	40c3      	lsrs	r3, r0
 800ae8c:	431c      	orrs	r4, r3
 800ae8e:	4321      	orrs	r1, r4
 800ae90:	000b      	movs	r3, r1
 800ae92:	2100      	movs	r1, #0
 800ae94:	42b5      	cmp	r5, r6
 800ae96:	d901      	bls.n	800ae9c <__b2d+0x88>
 800ae98:	3d04      	subs	r5, #4
 800ae9a:	6829      	ldr	r1, [r5, #0]
 800ae9c:	4664      	mov	r4, ip
 800ae9e:	40c1      	lsrs	r1, r0
 800aea0:	40a7      	lsls	r7, r4
 800aea2:	430f      	orrs	r7, r1
 800aea4:	003a      	movs	r2, r7
 800aea6:	e7db      	b.n	800ae60 <__b2d+0x4c>
 800aea8:	4321      	orrs	r1, r4
 800aeaa:	000b      	movs	r3, r1
 800aeac:	e7fa      	b.n	800aea4 <__b2d+0x90>
 800aeae:	46c0      	nop			; (mov r8, r8)
 800aeb0:	3ff00000 	.word	0x3ff00000

0800aeb4 <__d2b>:
 800aeb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	0014      	movs	r4, r2
 800aeba:	001e      	movs	r6, r3
 800aebc:	9f08      	ldr	r7, [sp, #32]
 800aebe:	f7ff fc01 	bl	800a6c4 <_Balloc>
 800aec2:	1e05      	subs	r5, r0, #0
 800aec4:	d105      	bne.n	800aed2 <__d2b+0x1e>
 800aec6:	0002      	movs	r2, r0
 800aec8:	4b26      	ldr	r3, [pc, #152]	; (800af64 <__d2b+0xb0>)
 800aeca:	4927      	ldr	r1, [pc, #156]	; (800af68 <__d2b+0xb4>)
 800aecc:	4827      	ldr	r0, [pc, #156]	; (800af6c <__d2b+0xb8>)
 800aece:	f000 fa77 	bl	800b3c0 <__assert_func>
 800aed2:	0333      	lsls	r3, r6, #12
 800aed4:	0076      	lsls	r6, r6, #1
 800aed6:	0b1b      	lsrs	r3, r3, #12
 800aed8:	0d76      	lsrs	r6, r6, #21
 800aeda:	d124      	bne.n	800af26 <__d2b+0x72>
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	2c00      	cmp	r4, #0
 800aee0:	d027      	beq.n	800af32 <__d2b+0x7e>
 800aee2:	4668      	mov	r0, sp
 800aee4:	9400      	str	r4, [sp, #0]
 800aee6:	f7ff fcff 	bl	800a8e8 <__lo0bits>
 800aeea:	9c00      	ldr	r4, [sp, #0]
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d01e      	beq.n	800af2e <__d2b+0x7a>
 800aef0:	9b01      	ldr	r3, [sp, #4]
 800aef2:	2120      	movs	r1, #32
 800aef4:	001a      	movs	r2, r3
 800aef6:	1a09      	subs	r1, r1, r0
 800aef8:	408a      	lsls	r2, r1
 800aefa:	40c3      	lsrs	r3, r0
 800aefc:	4322      	orrs	r2, r4
 800aefe:	616a      	str	r2, [r5, #20]
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	9c01      	ldr	r4, [sp, #4]
 800af04:	61ac      	str	r4, [r5, #24]
 800af06:	1e63      	subs	r3, r4, #1
 800af08:	419c      	sbcs	r4, r3
 800af0a:	3401      	adds	r4, #1
 800af0c:	612c      	str	r4, [r5, #16]
 800af0e:	2e00      	cmp	r6, #0
 800af10:	d018      	beq.n	800af44 <__d2b+0x90>
 800af12:	4b17      	ldr	r3, [pc, #92]	; (800af70 <__d2b+0xbc>)
 800af14:	18f6      	adds	r6, r6, r3
 800af16:	2335      	movs	r3, #53	; 0x35
 800af18:	1836      	adds	r6, r6, r0
 800af1a:	1a18      	subs	r0, r3, r0
 800af1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1e:	603e      	str	r6, [r7, #0]
 800af20:	6018      	str	r0, [r3, #0]
 800af22:	0028      	movs	r0, r5
 800af24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af26:	2280      	movs	r2, #128	; 0x80
 800af28:	0352      	lsls	r2, r2, #13
 800af2a:	4313      	orrs	r3, r2
 800af2c:	e7d6      	b.n	800aedc <__d2b+0x28>
 800af2e:	616c      	str	r4, [r5, #20]
 800af30:	e7e7      	b.n	800af02 <__d2b+0x4e>
 800af32:	a801      	add	r0, sp, #4
 800af34:	f7ff fcd8 	bl	800a8e8 <__lo0bits>
 800af38:	2401      	movs	r4, #1
 800af3a:	9b01      	ldr	r3, [sp, #4]
 800af3c:	612c      	str	r4, [r5, #16]
 800af3e:	616b      	str	r3, [r5, #20]
 800af40:	3020      	adds	r0, #32
 800af42:	e7e4      	b.n	800af0e <__d2b+0x5a>
 800af44:	4b0b      	ldr	r3, [pc, #44]	; (800af74 <__d2b+0xc0>)
 800af46:	18c0      	adds	r0, r0, r3
 800af48:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <__d2b+0xc4>)
 800af4a:	6038      	str	r0, [r7, #0]
 800af4c:	18e3      	adds	r3, r4, r3
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	18eb      	adds	r3, r5, r3
 800af52:	6958      	ldr	r0, [r3, #20]
 800af54:	f7ff fcae 	bl	800a8b4 <__hi0bits>
 800af58:	0164      	lsls	r4, r4, #5
 800af5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af5c:	1a24      	subs	r4, r4, r0
 800af5e:	601c      	str	r4, [r3, #0]
 800af60:	e7df      	b.n	800af22 <__d2b+0x6e>
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	0800c2e7 	.word	0x0800c2e7
 800af68:	0000030a 	.word	0x0000030a
 800af6c:	0800c374 	.word	0x0800c374
 800af70:	fffffbcd 	.word	0xfffffbcd
 800af74:	fffffbce 	.word	0xfffffbce
 800af78:	3fffffff 	.word	0x3fffffff

0800af7c <__ratio>:
 800af7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af7e:	b087      	sub	sp, #28
 800af80:	000f      	movs	r7, r1
 800af82:	a904      	add	r1, sp, #16
 800af84:	0006      	movs	r6, r0
 800af86:	f7ff ff45 	bl	800ae14 <__b2d>
 800af8a:	9000      	str	r0, [sp, #0]
 800af8c:	9101      	str	r1, [sp, #4]
 800af8e:	9c00      	ldr	r4, [sp, #0]
 800af90:	9d01      	ldr	r5, [sp, #4]
 800af92:	0038      	movs	r0, r7
 800af94:	a905      	add	r1, sp, #20
 800af96:	f7ff ff3d 	bl	800ae14 <__b2d>
 800af9a:	9002      	str	r0, [sp, #8]
 800af9c:	9103      	str	r1, [sp, #12]
 800af9e:	9a02      	ldr	r2, [sp, #8]
 800afa0:	9b03      	ldr	r3, [sp, #12]
 800afa2:	6931      	ldr	r1, [r6, #16]
 800afa4:	6938      	ldr	r0, [r7, #16]
 800afa6:	9e05      	ldr	r6, [sp, #20]
 800afa8:	1a08      	subs	r0, r1, r0
 800afaa:	9904      	ldr	r1, [sp, #16]
 800afac:	0140      	lsls	r0, r0, #5
 800afae:	1b89      	subs	r1, r1, r6
 800afb0:	1841      	adds	r1, r0, r1
 800afb2:	0508      	lsls	r0, r1, #20
 800afb4:	2900      	cmp	r1, #0
 800afb6:	dd07      	ble.n	800afc8 <__ratio+0x4c>
 800afb8:	9901      	ldr	r1, [sp, #4]
 800afba:	1845      	adds	r5, r0, r1
 800afbc:	0020      	movs	r0, r4
 800afbe:	0029      	movs	r1, r5
 800afc0:	f7f5 ff08 	bl	8000dd4 <__aeabi_ddiv>
 800afc4:	b007      	add	sp, #28
 800afc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afc8:	9903      	ldr	r1, [sp, #12]
 800afca:	1a0b      	subs	r3, r1, r0
 800afcc:	e7f6      	b.n	800afbc <__ratio+0x40>

0800afce <__copybits>:
 800afce:	b570      	push	{r4, r5, r6, lr}
 800afd0:	0014      	movs	r4, r2
 800afd2:	0005      	movs	r5, r0
 800afd4:	3901      	subs	r1, #1
 800afd6:	6913      	ldr	r3, [r2, #16]
 800afd8:	1149      	asrs	r1, r1, #5
 800afda:	3101      	adds	r1, #1
 800afdc:	0089      	lsls	r1, r1, #2
 800afde:	3414      	adds	r4, #20
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	1841      	adds	r1, r0, r1
 800afe4:	18e3      	adds	r3, r4, r3
 800afe6:	42a3      	cmp	r3, r4
 800afe8:	d80d      	bhi.n	800b006 <__copybits+0x38>
 800afea:	0014      	movs	r4, r2
 800afec:	3411      	adds	r4, #17
 800afee:	2500      	movs	r5, #0
 800aff0:	429c      	cmp	r4, r3
 800aff2:	d803      	bhi.n	800affc <__copybits+0x2e>
 800aff4:	1a9b      	subs	r3, r3, r2
 800aff6:	3b11      	subs	r3, #17
 800aff8:	089b      	lsrs	r3, r3, #2
 800affa:	009d      	lsls	r5, r3, #2
 800affc:	2300      	movs	r3, #0
 800affe:	1940      	adds	r0, r0, r5
 800b000:	4281      	cmp	r1, r0
 800b002:	d803      	bhi.n	800b00c <__copybits+0x3e>
 800b004:	bd70      	pop	{r4, r5, r6, pc}
 800b006:	cc40      	ldmia	r4!, {r6}
 800b008:	c540      	stmia	r5!, {r6}
 800b00a:	e7ec      	b.n	800afe6 <__copybits+0x18>
 800b00c:	c008      	stmia	r0!, {r3}
 800b00e:	e7f7      	b.n	800b000 <__copybits+0x32>

0800b010 <__any_on>:
 800b010:	0002      	movs	r2, r0
 800b012:	6900      	ldr	r0, [r0, #16]
 800b014:	b510      	push	{r4, lr}
 800b016:	3214      	adds	r2, #20
 800b018:	114b      	asrs	r3, r1, #5
 800b01a:	4298      	cmp	r0, r3
 800b01c:	db13      	blt.n	800b046 <__any_on+0x36>
 800b01e:	dd0c      	ble.n	800b03a <__any_on+0x2a>
 800b020:	241f      	movs	r4, #31
 800b022:	0008      	movs	r0, r1
 800b024:	4020      	ands	r0, r4
 800b026:	4221      	tst	r1, r4
 800b028:	d007      	beq.n	800b03a <__any_on+0x2a>
 800b02a:	0099      	lsls	r1, r3, #2
 800b02c:	588c      	ldr	r4, [r1, r2]
 800b02e:	0021      	movs	r1, r4
 800b030:	40c1      	lsrs	r1, r0
 800b032:	4081      	lsls	r1, r0
 800b034:	2001      	movs	r0, #1
 800b036:	428c      	cmp	r4, r1
 800b038:	d104      	bne.n	800b044 <__any_on+0x34>
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	18d3      	adds	r3, r2, r3
 800b03e:	4293      	cmp	r3, r2
 800b040:	d803      	bhi.n	800b04a <__any_on+0x3a>
 800b042:	2000      	movs	r0, #0
 800b044:	bd10      	pop	{r4, pc}
 800b046:	0003      	movs	r3, r0
 800b048:	e7f7      	b.n	800b03a <__any_on+0x2a>
 800b04a:	3b04      	subs	r3, #4
 800b04c:	6819      	ldr	r1, [r3, #0]
 800b04e:	2900      	cmp	r1, #0
 800b050:	d0f5      	beq.n	800b03e <__any_on+0x2e>
 800b052:	2001      	movs	r0, #1
 800b054:	e7f6      	b.n	800b044 <__any_on+0x34>

0800b056 <_calloc_r>:
 800b056:	b570      	push	{r4, r5, r6, lr}
 800b058:	0c13      	lsrs	r3, r2, #16
 800b05a:	0c0d      	lsrs	r5, r1, #16
 800b05c:	d11e      	bne.n	800b09c <_calloc_r+0x46>
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10c      	bne.n	800b07c <_calloc_r+0x26>
 800b062:	b289      	uxth	r1, r1
 800b064:	b294      	uxth	r4, r2
 800b066:	434c      	muls	r4, r1
 800b068:	0021      	movs	r1, r4
 800b06a:	f7fc faeb 	bl	8007644 <_malloc_r>
 800b06e:	1e05      	subs	r5, r0, #0
 800b070:	d01b      	beq.n	800b0aa <_calloc_r+0x54>
 800b072:	0022      	movs	r2, r4
 800b074:	2100      	movs	r1, #0
 800b076:	f7fc fa70 	bl	800755a <memset>
 800b07a:	e016      	b.n	800b0aa <_calloc_r+0x54>
 800b07c:	1c1d      	adds	r5, r3, #0
 800b07e:	1c0b      	adds	r3, r1, #0
 800b080:	b292      	uxth	r2, r2
 800b082:	b289      	uxth	r1, r1
 800b084:	b29c      	uxth	r4, r3
 800b086:	4351      	muls	r1, r2
 800b088:	b2ab      	uxth	r3, r5
 800b08a:	4363      	muls	r3, r4
 800b08c:	0c0c      	lsrs	r4, r1, #16
 800b08e:	191c      	adds	r4, r3, r4
 800b090:	0c22      	lsrs	r2, r4, #16
 800b092:	d107      	bne.n	800b0a4 <_calloc_r+0x4e>
 800b094:	0424      	lsls	r4, r4, #16
 800b096:	b289      	uxth	r1, r1
 800b098:	430c      	orrs	r4, r1
 800b09a:	e7e5      	b.n	800b068 <_calloc_r+0x12>
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <_calloc_r+0x4e>
 800b0a0:	1c13      	adds	r3, r2, #0
 800b0a2:	e7ed      	b.n	800b080 <_calloc_r+0x2a>
 800b0a4:	230c      	movs	r3, #12
 800b0a6:	2500      	movs	r5, #0
 800b0a8:	6003      	str	r3, [r0, #0]
 800b0aa:	0028      	movs	r0, r5
 800b0ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0b0 <__ssputs_r>:
 800b0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0b2:	688e      	ldr	r6, [r1, #8]
 800b0b4:	b085      	sub	sp, #20
 800b0b6:	0007      	movs	r7, r0
 800b0b8:	000c      	movs	r4, r1
 800b0ba:	9203      	str	r2, [sp, #12]
 800b0bc:	9301      	str	r3, [sp, #4]
 800b0be:	429e      	cmp	r6, r3
 800b0c0:	d83c      	bhi.n	800b13c <__ssputs_r+0x8c>
 800b0c2:	2390      	movs	r3, #144	; 0x90
 800b0c4:	898a      	ldrh	r2, [r1, #12]
 800b0c6:	00db      	lsls	r3, r3, #3
 800b0c8:	421a      	tst	r2, r3
 800b0ca:	d034      	beq.n	800b136 <__ssputs_r+0x86>
 800b0cc:	6909      	ldr	r1, [r1, #16]
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	6960      	ldr	r0, [r4, #20]
 800b0d2:	1a5b      	subs	r3, r3, r1
 800b0d4:	9302      	str	r3, [sp, #8]
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	4343      	muls	r3, r0
 800b0da:	0fdd      	lsrs	r5, r3, #31
 800b0dc:	18ed      	adds	r5, r5, r3
 800b0de:	9b01      	ldr	r3, [sp, #4]
 800b0e0:	9802      	ldr	r0, [sp, #8]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	181b      	adds	r3, r3, r0
 800b0e6:	106d      	asrs	r5, r5, #1
 800b0e8:	42ab      	cmp	r3, r5
 800b0ea:	d900      	bls.n	800b0ee <__ssputs_r+0x3e>
 800b0ec:	001d      	movs	r5, r3
 800b0ee:	0553      	lsls	r3, r2, #21
 800b0f0:	d532      	bpl.n	800b158 <__ssputs_r+0xa8>
 800b0f2:	0029      	movs	r1, r5
 800b0f4:	0038      	movs	r0, r7
 800b0f6:	f7fc faa5 	bl	8007644 <_malloc_r>
 800b0fa:	1e06      	subs	r6, r0, #0
 800b0fc:	d109      	bne.n	800b112 <__ssputs_r+0x62>
 800b0fe:	230c      	movs	r3, #12
 800b100:	603b      	str	r3, [r7, #0]
 800b102:	2340      	movs	r3, #64	; 0x40
 800b104:	2001      	movs	r0, #1
 800b106:	89a2      	ldrh	r2, [r4, #12]
 800b108:	4240      	negs	r0, r0
 800b10a:	4313      	orrs	r3, r2
 800b10c:	81a3      	strh	r3, [r4, #12]
 800b10e:	b005      	add	sp, #20
 800b110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b112:	9a02      	ldr	r2, [sp, #8]
 800b114:	6921      	ldr	r1, [r4, #16]
 800b116:	f7fc fa17 	bl	8007548 <memcpy>
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	4a14      	ldr	r2, [pc, #80]	; (800b170 <__ssputs_r+0xc0>)
 800b11e:	401a      	ands	r2, r3
 800b120:	2380      	movs	r3, #128	; 0x80
 800b122:	4313      	orrs	r3, r2
 800b124:	81a3      	strh	r3, [r4, #12]
 800b126:	9b02      	ldr	r3, [sp, #8]
 800b128:	6126      	str	r6, [r4, #16]
 800b12a:	18f6      	adds	r6, r6, r3
 800b12c:	6026      	str	r6, [r4, #0]
 800b12e:	6165      	str	r5, [r4, #20]
 800b130:	9e01      	ldr	r6, [sp, #4]
 800b132:	1aed      	subs	r5, r5, r3
 800b134:	60a5      	str	r5, [r4, #8]
 800b136:	9b01      	ldr	r3, [sp, #4]
 800b138:	429e      	cmp	r6, r3
 800b13a:	d900      	bls.n	800b13e <__ssputs_r+0x8e>
 800b13c:	9e01      	ldr	r6, [sp, #4]
 800b13e:	0032      	movs	r2, r6
 800b140:	9903      	ldr	r1, [sp, #12]
 800b142:	6820      	ldr	r0, [r4, #0]
 800b144:	f000 f96d 	bl	800b422 <memmove>
 800b148:	68a3      	ldr	r3, [r4, #8]
 800b14a:	2000      	movs	r0, #0
 800b14c:	1b9b      	subs	r3, r3, r6
 800b14e:	60a3      	str	r3, [r4, #8]
 800b150:	6823      	ldr	r3, [r4, #0]
 800b152:	199e      	adds	r6, r3, r6
 800b154:	6026      	str	r6, [r4, #0]
 800b156:	e7da      	b.n	800b10e <__ssputs_r+0x5e>
 800b158:	002a      	movs	r2, r5
 800b15a:	0038      	movs	r0, r7
 800b15c:	f000 f974 	bl	800b448 <_realloc_r>
 800b160:	1e06      	subs	r6, r0, #0
 800b162:	d1e0      	bne.n	800b126 <__ssputs_r+0x76>
 800b164:	0038      	movs	r0, r7
 800b166:	6921      	ldr	r1, [r4, #16]
 800b168:	f7fc fa00 	bl	800756c <_free_r>
 800b16c:	e7c7      	b.n	800b0fe <__ssputs_r+0x4e>
 800b16e:	46c0      	nop			; (mov r8, r8)
 800b170:	fffffb7f 	.word	0xfffffb7f

0800b174 <_svfiprintf_r>:
 800b174:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b176:	b0a1      	sub	sp, #132	; 0x84
 800b178:	9003      	str	r0, [sp, #12]
 800b17a:	001d      	movs	r5, r3
 800b17c:	898b      	ldrh	r3, [r1, #12]
 800b17e:	000f      	movs	r7, r1
 800b180:	0016      	movs	r6, r2
 800b182:	061b      	lsls	r3, r3, #24
 800b184:	d511      	bpl.n	800b1aa <_svfiprintf_r+0x36>
 800b186:	690b      	ldr	r3, [r1, #16]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10e      	bne.n	800b1aa <_svfiprintf_r+0x36>
 800b18c:	2140      	movs	r1, #64	; 0x40
 800b18e:	f7fc fa59 	bl	8007644 <_malloc_r>
 800b192:	6038      	str	r0, [r7, #0]
 800b194:	6138      	str	r0, [r7, #16]
 800b196:	2800      	cmp	r0, #0
 800b198:	d105      	bne.n	800b1a6 <_svfiprintf_r+0x32>
 800b19a:	230c      	movs	r3, #12
 800b19c:	9a03      	ldr	r2, [sp, #12]
 800b19e:	3801      	subs	r0, #1
 800b1a0:	6013      	str	r3, [r2, #0]
 800b1a2:	b021      	add	sp, #132	; 0x84
 800b1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	617b      	str	r3, [r7, #20]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	ac08      	add	r4, sp, #32
 800b1ae:	6163      	str	r3, [r4, #20]
 800b1b0:	3320      	adds	r3, #32
 800b1b2:	7663      	strb	r3, [r4, #25]
 800b1b4:	3310      	adds	r3, #16
 800b1b6:	76a3      	strb	r3, [r4, #26]
 800b1b8:	9507      	str	r5, [sp, #28]
 800b1ba:	0035      	movs	r5, r6
 800b1bc:	782b      	ldrb	r3, [r5, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <_svfiprintf_r+0x52>
 800b1c2:	2b25      	cmp	r3, #37	; 0x25
 800b1c4:	d147      	bne.n	800b256 <_svfiprintf_r+0xe2>
 800b1c6:	1bab      	subs	r3, r5, r6
 800b1c8:	9305      	str	r3, [sp, #20]
 800b1ca:	42b5      	cmp	r5, r6
 800b1cc:	d00c      	beq.n	800b1e8 <_svfiprintf_r+0x74>
 800b1ce:	0032      	movs	r2, r6
 800b1d0:	0039      	movs	r1, r7
 800b1d2:	9803      	ldr	r0, [sp, #12]
 800b1d4:	f7ff ff6c 	bl	800b0b0 <__ssputs_r>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d100      	bne.n	800b1de <_svfiprintf_r+0x6a>
 800b1dc:	e0ae      	b.n	800b33c <_svfiprintf_r+0x1c8>
 800b1de:	6962      	ldr	r2, [r4, #20]
 800b1e0:	9b05      	ldr	r3, [sp, #20]
 800b1e2:	4694      	mov	ip, r2
 800b1e4:	4463      	add	r3, ip
 800b1e6:	6163      	str	r3, [r4, #20]
 800b1e8:	782b      	ldrb	r3, [r5, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d100      	bne.n	800b1f0 <_svfiprintf_r+0x7c>
 800b1ee:	e0a5      	b.n	800b33c <_svfiprintf_r+0x1c8>
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	4252      	negs	r2, r2
 800b1f6:	6062      	str	r2, [r4, #4]
 800b1f8:	a904      	add	r1, sp, #16
 800b1fa:	3254      	adds	r2, #84	; 0x54
 800b1fc:	1852      	adds	r2, r2, r1
 800b1fe:	1c6e      	adds	r6, r5, #1
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	60e3      	str	r3, [r4, #12]
 800b204:	60a3      	str	r3, [r4, #8]
 800b206:	7013      	strb	r3, [r2, #0]
 800b208:	65a3      	str	r3, [r4, #88]	; 0x58
 800b20a:	2205      	movs	r2, #5
 800b20c:	7831      	ldrb	r1, [r6, #0]
 800b20e:	4854      	ldr	r0, [pc, #336]	; (800b360 <_svfiprintf_r+0x1ec>)
 800b210:	f7ff fa3c 	bl	800a68c <memchr>
 800b214:	1c75      	adds	r5, r6, #1
 800b216:	2800      	cmp	r0, #0
 800b218:	d11f      	bne.n	800b25a <_svfiprintf_r+0xe6>
 800b21a:	6822      	ldr	r2, [r4, #0]
 800b21c:	06d3      	lsls	r3, r2, #27
 800b21e:	d504      	bpl.n	800b22a <_svfiprintf_r+0xb6>
 800b220:	2353      	movs	r3, #83	; 0x53
 800b222:	a904      	add	r1, sp, #16
 800b224:	185b      	adds	r3, r3, r1
 800b226:	2120      	movs	r1, #32
 800b228:	7019      	strb	r1, [r3, #0]
 800b22a:	0713      	lsls	r3, r2, #28
 800b22c:	d504      	bpl.n	800b238 <_svfiprintf_r+0xc4>
 800b22e:	2353      	movs	r3, #83	; 0x53
 800b230:	a904      	add	r1, sp, #16
 800b232:	185b      	adds	r3, r3, r1
 800b234:	212b      	movs	r1, #43	; 0x2b
 800b236:	7019      	strb	r1, [r3, #0]
 800b238:	7833      	ldrb	r3, [r6, #0]
 800b23a:	2b2a      	cmp	r3, #42	; 0x2a
 800b23c:	d016      	beq.n	800b26c <_svfiprintf_r+0xf8>
 800b23e:	0035      	movs	r5, r6
 800b240:	2100      	movs	r1, #0
 800b242:	200a      	movs	r0, #10
 800b244:	68e3      	ldr	r3, [r4, #12]
 800b246:	782a      	ldrb	r2, [r5, #0]
 800b248:	1c6e      	adds	r6, r5, #1
 800b24a:	3a30      	subs	r2, #48	; 0x30
 800b24c:	2a09      	cmp	r2, #9
 800b24e:	d94e      	bls.n	800b2ee <_svfiprintf_r+0x17a>
 800b250:	2900      	cmp	r1, #0
 800b252:	d111      	bne.n	800b278 <_svfiprintf_r+0x104>
 800b254:	e017      	b.n	800b286 <_svfiprintf_r+0x112>
 800b256:	3501      	adds	r5, #1
 800b258:	e7b0      	b.n	800b1bc <_svfiprintf_r+0x48>
 800b25a:	4b41      	ldr	r3, [pc, #260]	; (800b360 <_svfiprintf_r+0x1ec>)
 800b25c:	6822      	ldr	r2, [r4, #0]
 800b25e:	1ac0      	subs	r0, r0, r3
 800b260:	2301      	movs	r3, #1
 800b262:	4083      	lsls	r3, r0
 800b264:	4313      	orrs	r3, r2
 800b266:	002e      	movs	r6, r5
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	e7ce      	b.n	800b20a <_svfiprintf_r+0x96>
 800b26c:	9b07      	ldr	r3, [sp, #28]
 800b26e:	1d19      	adds	r1, r3, #4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	9107      	str	r1, [sp, #28]
 800b274:	2b00      	cmp	r3, #0
 800b276:	db01      	blt.n	800b27c <_svfiprintf_r+0x108>
 800b278:	930b      	str	r3, [sp, #44]	; 0x2c
 800b27a:	e004      	b.n	800b286 <_svfiprintf_r+0x112>
 800b27c:	425b      	negs	r3, r3
 800b27e:	60e3      	str	r3, [r4, #12]
 800b280:	2302      	movs	r3, #2
 800b282:	4313      	orrs	r3, r2
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	782b      	ldrb	r3, [r5, #0]
 800b288:	2b2e      	cmp	r3, #46	; 0x2e
 800b28a:	d10a      	bne.n	800b2a2 <_svfiprintf_r+0x12e>
 800b28c:	786b      	ldrb	r3, [r5, #1]
 800b28e:	2b2a      	cmp	r3, #42	; 0x2a
 800b290:	d135      	bne.n	800b2fe <_svfiprintf_r+0x18a>
 800b292:	9b07      	ldr	r3, [sp, #28]
 800b294:	3502      	adds	r5, #2
 800b296:	1d1a      	adds	r2, r3, #4
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	9207      	str	r2, [sp, #28]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	db2b      	blt.n	800b2f8 <_svfiprintf_r+0x184>
 800b2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2a2:	4e30      	ldr	r6, [pc, #192]	; (800b364 <_svfiprintf_r+0x1f0>)
 800b2a4:	2203      	movs	r2, #3
 800b2a6:	0030      	movs	r0, r6
 800b2a8:	7829      	ldrb	r1, [r5, #0]
 800b2aa:	f7ff f9ef 	bl	800a68c <memchr>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d006      	beq.n	800b2c0 <_svfiprintf_r+0x14c>
 800b2b2:	2340      	movs	r3, #64	; 0x40
 800b2b4:	1b80      	subs	r0, r0, r6
 800b2b6:	4083      	lsls	r3, r0
 800b2b8:	6822      	ldr	r2, [r4, #0]
 800b2ba:	3501      	adds	r5, #1
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	7829      	ldrb	r1, [r5, #0]
 800b2c2:	2206      	movs	r2, #6
 800b2c4:	4828      	ldr	r0, [pc, #160]	; (800b368 <_svfiprintf_r+0x1f4>)
 800b2c6:	1c6e      	adds	r6, r5, #1
 800b2c8:	7621      	strb	r1, [r4, #24]
 800b2ca:	f7ff f9df 	bl	800a68c <memchr>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d03c      	beq.n	800b34c <_svfiprintf_r+0x1d8>
 800b2d2:	4b26      	ldr	r3, [pc, #152]	; (800b36c <_svfiprintf_r+0x1f8>)
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d125      	bne.n	800b324 <_svfiprintf_r+0x1b0>
 800b2d8:	2207      	movs	r2, #7
 800b2da:	9b07      	ldr	r3, [sp, #28]
 800b2dc:	3307      	adds	r3, #7
 800b2de:	4393      	bics	r3, r2
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	9307      	str	r3, [sp, #28]
 800b2e4:	6963      	ldr	r3, [r4, #20]
 800b2e6:	9a04      	ldr	r2, [sp, #16]
 800b2e8:	189b      	adds	r3, r3, r2
 800b2ea:	6163      	str	r3, [r4, #20]
 800b2ec:	e765      	b.n	800b1ba <_svfiprintf_r+0x46>
 800b2ee:	4343      	muls	r3, r0
 800b2f0:	0035      	movs	r5, r6
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	189b      	adds	r3, r3, r2
 800b2f6:	e7a6      	b.n	800b246 <_svfiprintf_r+0xd2>
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	425b      	negs	r3, r3
 800b2fc:	e7d0      	b.n	800b2a0 <_svfiprintf_r+0x12c>
 800b2fe:	2300      	movs	r3, #0
 800b300:	200a      	movs	r0, #10
 800b302:	001a      	movs	r2, r3
 800b304:	3501      	adds	r5, #1
 800b306:	6063      	str	r3, [r4, #4]
 800b308:	7829      	ldrb	r1, [r5, #0]
 800b30a:	1c6e      	adds	r6, r5, #1
 800b30c:	3930      	subs	r1, #48	; 0x30
 800b30e:	2909      	cmp	r1, #9
 800b310:	d903      	bls.n	800b31a <_svfiprintf_r+0x1a6>
 800b312:	2b00      	cmp	r3, #0
 800b314:	d0c5      	beq.n	800b2a2 <_svfiprintf_r+0x12e>
 800b316:	9209      	str	r2, [sp, #36]	; 0x24
 800b318:	e7c3      	b.n	800b2a2 <_svfiprintf_r+0x12e>
 800b31a:	4342      	muls	r2, r0
 800b31c:	0035      	movs	r5, r6
 800b31e:	2301      	movs	r3, #1
 800b320:	1852      	adds	r2, r2, r1
 800b322:	e7f1      	b.n	800b308 <_svfiprintf_r+0x194>
 800b324:	ab07      	add	r3, sp, #28
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	003a      	movs	r2, r7
 800b32a:	0021      	movs	r1, r4
 800b32c:	4b10      	ldr	r3, [pc, #64]	; (800b370 <_svfiprintf_r+0x1fc>)
 800b32e:	9803      	ldr	r0, [sp, #12]
 800b330:	f7fc faa8 	bl	8007884 <_printf_float>
 800b334:	9004      	str	r0, [sp, #16]
 800b336:	9b04      	ldr	r3, [sp, #16]
 800b338:	3301      	adds	r3, #1
 800b33a:	d1d3      	bne.n	800b2e4 <_svfiprintf_r+0x170>
 800b33c:	89bb      	ldrh	r3, [r7, #12]
 800b33e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b340:	065b      	lsls	r3, r3, #25
 800b342:	d400      	bmi.n	800b346 <_svfiprintf_r+0x1d2>
 800b344:	e72d      	b.n	800b1a2 <_svfiprintf_r+0x2e>
 800b346:	2001      	movs	r0, #1
 800b348:	4240      	negs	r0, r0
 800b34a:	e72a      	b.n	800b1a2 <_svfiprintf_r+0x2e>
 800b34c:	ab07      	add	r3, sp, #28
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	003a      	movs	r2, r7
 800b352:	0021      	movs	r1, r4
 800b354:	4b06      	ldr	r3, [pc, #24]	; (800b370 <_svfiprintf_r+0x1fc>)
 800b356:	9803      	ldr	r0, [sp, #12]
 800b358:	f7fc fd46 	bl	8007de8 <_printf_i>
 800b35c:	e7ea      	b.n	800b334 <_svfiprintf_r+0x1c0>
 800b35e:	46c0      	nop			; (mov r8, r8)
 800b360:	0800c4cc 	.word	0x0800c4cc
 800b364:	0800c4d2 	.word	0x0800c4d2
 800b368:	0800c4d6 	.word	0x0800c4d6
 800b36c:	08007885 	.word	0x08007885
 800b370:	0800b0b1 	.word	0x0800b0b1

0800b374 <nan>:
 800b374:	2000      	movs	r0, #0
 800b376:	4901      	ldr	r1, [pc, #4]	; (800b37c <nan+0x8>)
 800b378:	4770      	bx	lr
 800b37a:	46c0      	nop			; (mov r8, r8)
 800b37c:	7ff80000 	.word	0x7ff80000

0800b380 <strncmp>:
 800b380:	b530      	push	{r4, r5, lr}
 800b382:	0005      	movs	r5, r0
 800b384:	1e10      	subs	r0, r2, #0
 800b386:	d008      	beq.n	800b39a <strncmp+0x1a>
 800b388:	2400      	movs	r4, #0
 800b38a:	3a01      	subs	r2, #1
 800b38c:	5d2b      	ldrb	r3, [r5, r4]
 800b38e:	5d08      	ldrb	r0, [r1, r4]
 800b390:	4283      	cmp	r3, r0
 800b392:	d101      	bne.n	800b398 <strncmp+0x18>
 800b394:	4294      	cmp	r4, r2
 800b396:	d101      	bne.n	800b39c <strncmp+0x1c>
 800b398:	1a18      	subs	r0, r3, r0
 800b39a:	bd30      	pop	{r4, r5, pc}
 800b39c:	3401      	adds	r4, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1f4      	bne.n	800b38c <strncmp+0xc>
 800b3a2:	e7f9      	b.n	800b398 <strncmp+0x18>

0800b3a4 <__ascii_wctomb>:
 800b3a4:	0003      	movs	r3, r0
 800b3a6:	1e08      	subs	r0, r1, #0
 800b3a8:	d005      	beq.n	800b3b6 <__ascii_wctomb+0x12>
 800b3aa:	2aff      	cmp	r2, #255	; 0xff
 800b3ac:	d904      	bls.n	800b3b8 <__ascii_wctomb+0x14>
 800b3ae:	228a      	movs	r2, #138	; 0x8a
 800b3b0:	2001      	movs	r0, #1
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	4240      	negs	r0, r0
 800b3b6:	4770      	bx	lr
 800b3b8:	2001      	movs	r0, #1
 800b3ba:	700a      	strb	r2, [r1, #0]
 800b3bc:	e7fb      	b.n	800b3b6 <__ascii_wctomb+0x12>
	...

0800b3c0 <__assert_func>:
 800b3c0:	b530      	push	{r4, r5, lr}
 800b3c2:	0014      	movs	r4, r2
 800b3c4:	001a      	movs	r2, r3
 800b3c6:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <__assert_func+0x2c>)
 800b3c8:	0005      	movs	r5, r0
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	b085      	sub	sp, #20
 800b3ce:	68d8      	ldr	r0, [r3, #12]
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <__assert_func+0x30>)
 800b3d2:	2c00      	cmp	r4, #0
 800b3d4:	d101      	bne.n	800b3da <__assert_func+0x1a>
 800b3d6:	4b07      	ldr	r3, [pc, #28]	; (800b3f4 <__assert_func+0x34>)
 800b3d8:	001c      	movs	r4, r3
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	9100      	str	r1, [sp, #0]
 800b3de:	002b      	movs	r3, r5
 800b3e0:	4905      	ldr	r1, [pc, #20]	; (800b3f8 <__assert_func+0x38>)
 800b3e2:	9402      	str	r4, [sp, #8]
 800b3e4:	f000 f80a 	bl	800b3fc <fiprintf>
 800b3e8:	f000 fa8c 	bl	800b904 <abort>
 800b3ec:	2000000c 	.word	0x2000000c
 800b3f0:	0800c4dd 	.word	0x0800c4dd
 800b3f4:	0800c518 	.word	0x0800c518
 800b3f8:	0800c4ea 	.word	0x0800c4ea

0800b3fc <fiprintf>:
 800b3fc:	b40e      	push	{r1, r2, r3}
 800b3fe:	b503      	push	{r0, r1, lr}
 800b400:	0001      	movs	r1, r0
 800b402:	ab03      	add	r3, sp, #12
 800b404:	4804      	ldr	r0, [pc, #16]	; (800b418 <fiprintf+0x1c>)
 800b406:	cb04      	ldmia	r3!, {r2}
 800b408:	6800      	ldr	r0, [r0, #0]
 800b40a:	9301      	str	r3, [sp, #4]
 800b40c:	f000 f872 	bl	800b4f4 <_vfiprintf_r>
 800b410:	b002      	add	sp, #8
 800b412:	bc08      	pop	{r3}
 800b414:	b003      	add	sp, #12
 800b416:	4718      	bx	r3
 800b418:	2000000c 	.word	0x2000000c

0800b41c <__retarget_lock_init_recursive>:
 800b41c:	4770      	bx	lr

0800b41e <__retarget_lock_acquire_recursive>:
 800b41e:	4770      	bx	lr

0800b420 <__retarget_lock_release_recursive>:
 800b420:	4770      	bx	lr

0800b422 <memmove>:
 800b422:	b510      	push	{r4, lr}
 800b424:	4288      	cmp	r0, r1
 800b426:	d902      	bls.n	800b42e <memmove+0xc>
 800b428:	188b      	adds	r3, r1, r2
 800b42a:	4298      	cmp	r0, r3
 800b42c:	d303      	bcc.n	800b436 <memmove+0x14>
 800b42e:	2300      	movs	r3, #0
 800b430:	e007      	b.n	800b442 <memmove+0x20>
 800b432:	5c8b      	ldrb	r3, [r1, r2]
 800b434:	5483      	strb	r3, [r0, r2]
 800b436:	3a01      	subs	r2, #1
 800b438:	d2fb      	bcs.n	800b432 <memmove+0x10>
 800b43a:	bd10      	pop	{r4, pc}
 800b43c:	5ccc      	ldrb	r4, [r1, r3]
 800b43e:	54c4      	strb	r4, [r0, r3]
 800b440:	3301      	adds	r3, #1
 800b442:	429a      	cmp	r2, r3
 800b444:	d1fa      	bne.n	800b43c <memmove+0x1a>
 800b446:	e7f8      	b.n	800b43a <memmove+0x18>

0800b448 <_realloc_r>:
 800b448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b44a:	0007      	movs	r7, r0
 800b44c:	000e      	movs	r6, r1
 800b44e:	0014      	movs	r4, r2
 800b450:	2900      	cmp	r1, #0
 800b452:	d105      	bne.n	800b460 <_realloc_r+0x18>
 800b454:	0011      	movs	r1, r2
 800b456:	f7fc f8f5 	bl	8007644 <_malloc_r>
 800b45a:	0005      	movs	r5, r0
 800b45c:	0028      	movs	r0, r5
 800b45e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b460:	2a00      	cmp	r2, #0
 800b462:	d103      	bne.n	800b46c <_realloc_r+0x24>
 800b464:	f7fc f882 	bl	800756c <_free_r>
 800b468:	0025      	movs	r5, r4
 800b46a:	e7f7      	b.n	800b45c <_realloc_r+0x14>
 800b46c:	f000 fc8c 	bl	800bd88 <_malloc_usable_size_r>
 800b470:	9001      	str	r0, [sp, #4]
 800b472:	4284      	cmp	r4, r0
 800b474:	d803      	bhi.n	800b47e <_realloc_r+0x36>
 800b476:	0035      	movs	r5, r6
 800b478:	0843      	lsrs	r3, r0, #1
 800b47a:	42a3      	cmp	r3, r4
 800b47c:	d3ee      	bcc.n	800b45c <_realloc_r+0x14>
 800b47e:	0021      	movs	r1, r4
 800b480:	0038      	movs	r0, r7
 800b482:	f7fc f8df 	bl	8007644 <_malloc_r>
 800b486:	1e05      	subs	r5, r0, #0
 800b488:	d0e8      	beq.n	800b45c <_realloc_r+0x14>
 800b48a:	9b01      	ldr	r3, [sp, #4]
 800b48c:	0022      	movs	r2, r4
 800b48e:	429c      	cmp	r4, r3
 800b490:	d900      	bls.n	800b494 <_realloc_r+0x4c>
 800b492:	001a      	movs	r2, r3
 800b494:	0031      	movs	r1, r6
 800b496:	0028      	movs	r0, r5
 800b498:	f7fc f856 	bl	8007548 <memcpy>
 800b49c:	0031      	movs	r1, r6
 800b49e:	0038      	movs	r0, r7
 800b4a0:	f7fc f864 	bl	800756c <_free_r>
 800b4a4:	e7da      	b.n	800b45c <_realloc_r+0x14>

0800b4a6 <__sfputc_r>:
 800b4a6:	6893      	ldr	r3, [r2, #8]
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	6093      	str	r3, [r2, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	da04      	bge.n	800b4bc <__sfputc_r+0x16>
 800b4b2:	6994      	ldr	r4, [r2, #24]
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	db07      	blt.n	800b4c8 <__sfputc_r+0x22>
 800b4b8:	290a      	cmp	r1, #10
 800b4ba:	d005      	beq.n	800b4c8 <__sfputc_r+0x22>
 800b4bc:	6813      	ldr	r3, [r2, #0]
 800b4be:	1c58      	adds	r0, r3, #1
 800b4c0:	6010      	str	r0, [r2, #0]
 800b4c2:	7019      	strb	r1, [r3, #0]
 800b4c4:	0008      	movs	r0, r1
 800b4c6:	bd10      	pop	{r4, pc}
 800b4c8:	f000 f94e 	bl	800b768 <__swbuf_r>
 800b4cc:	0001      	movs	r1, r0
 800b4ce:	e7f9      	b.n	800b4c4 <__sfputc_r+0x1e>

0800b4d0 <__sfputs_r>:
 800b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d2:	0006      	movs	r6, r0
 800b4d4:	000f      	movs	r7, r1
 800b4d6:	0014      	movs	r4, r2
 800b4d8:	18d5      	adds	r5, r2, r3
 800b4da:	42ac      	cmp	r4, r5
 800b4dc:	d101      	bne.n	800b4e2 <__sfputs_r+0x12>
 800b4de:	2000      	movs	r0, #0
 800b4e0:	e007      	b.n	800b4f2 <__sfputs_r+0x22>
 800b4e2:	7821      	ldrb	r1, [r4, #0]
 800b4e4:	003a      	movs	r2, r7
 800b4e6:	0030      	movs	r0, r6
 800b4e8:	f7ff ffdd 	bl	800b4a6 <__sfputc_r>
 800b4ec:	3401      	adds	r4, #1
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	d1f3      	bne.n	800b4da <__sfputs_r+0xa>
 800b4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4f4 <_vfiprintf_r>:
 800b4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4f6:	b0a1      	sub	sp, #132	; 0x84
 800b4f8:	0006      	movs	r6, r0
 800b4fa:	000c      	movs	r4, r1
 800b4fc:	001f      	movs	r7, r3
 800b4fe:	9203      	str	r2, [sp, #12]
 800b500:	2800      	cmp	r0, #0
 800b502:	d004      	beq.n	800b50e <_vfiprintf_r+0x1a>
 800b504:	6983      	ldr	r3, [r0, #24]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d101      	bne.n	800b50e <_vfiprintf_r+0x1a>
 800b50a:	f000 fb31 	bl	800bb70 <__sinit>
 800b50e:	4b8e      	ldr	r3, [pc, #568]	; (800b748 <_vfiprintf_r+0x254>)
 800b510:	429c      	cmp	r4, r3
 800b512:	d11c      	bne.n	800b54e <_vfiprintf_r+0x5a>
 800b514:	6874      	ldr	r4, [r6, #4]
 800b516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b518:	07db      	lsls	r3, r3, #31
 800b51a:	d405      	bmi.n	800b528 <_vfiprintf_r+0x34>
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	059b      	lsls	r3, r3, #22
 800b520:	d402      	bmi.n	800b528 <_vfiprintf_r+0x34>
 800b522:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b524:	f7ff ff7b 	bl	800b41e <__retarget_lock_acquire_recursive>
 800b528:	89a3      	ldrh	r3, [r4, #12]
 800b52a:	071b      	lsls	r3, r3, #28
 800b52c:	d502      	bpl.n	800b534 <_vfiprintf_r+0x40>
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d11d      	bne.n	800b570 <_vfiprintf_r+0x7c>
 800b534:	0021      	movs	r1, r4
 800b536:	0030      	movs	r0, r6
 800b538:	f000 f96c 	bl	800b814 <__swsetup_r>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d017      	beq.n	800b570 <_vfiprintf_r+0x7c>
 800b540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b542:	07db      	lsls	r3, r3, #31
 800b544:	d50d      	bpl.n	800b562 <_vfiprintf_r+0x6e>
 800b546:	2001      	movs	r0, #1
 800b548:	4240      	negs	r0, r0
 800b54a:	b021      	add	sp, #132	; 0x84
 800b54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b54e:	4b7f      	ldr	r3, [pc, #508]	; (800b74c <_vfiprintf_r+0x258>)
 800b550:	429c      	cmp	r4, r3
 800b552:	d101      	bne.n	800b558 <_vfiprintf_r+0x64>
 800b554:	68b4      	ldr	r4, [r6, #8]
 800b556:	e7de      	b.n	800b516 <_vfiprintf_r+0x22>
 800b558:	4b7d      	ldr	r3, [pc, #500]	; (800b750 <_vfiprintf_r+0x25c>)
 800b55a:	429c      	cmp	r4, r3
 800b55c:	d1db      	bne.n	800b516 <_vfiprintf_r+0x22>
 800b55e:	68f4      	ldr	r4, [r6, #12]
 800b560:	e7d9      	b.n	800b516 <_vfiprintf_r+0x22>
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	059b      	lsls	r3, r3, #22
 800b566:	d4ee      	bmi.n	800b546 <_vfiprintf_r+0x52>
 800b568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b56a:	f7ff ff59 	bl	800b420 <__retarget_lock_release_recursive>
 800b56e:	e7ea      	b.n	800b546 <_vfiprintf_r+0x52>
 800b570:	2300      	movs	r3, #0
 800b572:	ad08      	add	r5, sp, #32
 800b574:	616b      	str	r3, [r5, #20]
 800b576:	3320      	adds	r3, #32
 800b578:	766b      	strb	r3, [r5, #25]
 800b57a:	3310      	adds	r3, #16
 800b57c:	76ab      	strb	r3, [r5, #26]
 800b57e:	9707      	str	r7, [sp, #28]
 800b580:	9f03      	ldr	r7, [sp, #12]
 800b582:	783b      	ldrb	r3, [r7, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <_vfiprintf_r+0x98>
 800b588:	2b25      	cmp	r3, #37	; 0x25
 800b58a:	d14e      	bne.n	800b62a <_vfiprintf_r+0x136>
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	1afb      	subs	r3, r7, r3
 800b590:	9305      	str	r3, [sp, #20]
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	429f      	cmp	r7, r3
 800b596:	d00d      	beq.n	800b5b4 <_vfiprintf_r+0xc0>
 800b598:	9b05      	ldr	r3, [sp, #20]
 800b59a:	0021      	movs	r1, r4
 800b59c:	0030      	movs	r0, r6
 800b59e:	9a03      	ldr	r2, [sp, #12]
 800b5a0:	f7ff ff96 	bl	800b4d0 <__sfputs_r>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d100      	bne.n	800b5aa <_vfiprintf_r+0xb6>
 800b5a8:	e0b5      	b.n	800b716 <_vfiprintf_r+0x222>
 800b5aa:	696a      	ldr	r2, [r5, #20]
 800b5ac:	9b05      	ldr	r3, [sp, #20]
 800b5ae:	4694      	mov	ip, r2
 800b5b0:	4463      	add	r3, ip
 800b5b2:	616b      	str	r3, [r5, #20]
 800b5b4:	783b      	ldrb	r3, [r7, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d100      	bne.n	800b5bc <_vfiprintf_r+0xc8>
 800b5ba:	e0ac      	b.n	800b716 <_vfiprintf_r+0x222>
 800b5bc:	2201      	movs	r2, #1
 800b5be:	1c7b      	adds	r3, r7, #1
 800b5c0:	9303      	str	r3, [sp, #12]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	4252      	negs	r2, r2
 800b5c6:	606a      	str	r2, [r5, #4]
 800b5c8:	a904      	add	r1, sp, #16
 800b5ca:	3254      	adds	r2, #84	; 0x54
 800b5cc:	1852      	adds	r2, r2, r1
 800b5ce:	602b      	str	r3, [r5, #0]
 800b5d0:	60eb      	str	r3, [r5, #12]
 800b5d2:	60ab      	str	r3, [r5, #8]
 800b5d4:	7013      	strb	r3, [r2, #0]
 800b5d6:	65ab      	str	r3, [r5, #88]	; 0x58
 800b5d8:	9b03      	ldr	r3, [sp, #12]
 800b5da:	2205      	movs	r2, #5
 800b5dc:	7819      	ldrb	r1, [r3, #0]
 800b5de:	485d      	ldr	r0, [pc, #372]	; (800b754 <_vfiprintf_r+0x260>)
 800b5e0:	f7ff f854 	bl	800a68c <memchr>
 800b5e4:	9b03      	ldr	r3, [sp, #12]
 800b5e6:	1c5f      	adds	r7, r3, #1
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d120      	bne.n	800b62e <_vfiprintf_r+0x13a>
 800b5ec:	682a      	ldr	r2, [r5, #0]
 800b5ee:	06d3      	lsls	r3, r2, #27
 800b5f0:	d504      	bpl.n	800b5fc <_vfiprintf_r+0x108>
 800b5f2:	2353      	movs	r3, #83	; 0x53
 800b5f4:	a904      	add	r1, sp, #16
 800b5f6:	185b      	adds	r3, r3, r1
 800b5f8:	2120      	movs	r1, #32
 800b5fa:	7019      	strb	r1, [r3, #0]
 800b5fc:	0713      	lsls	r3, r2, #28
 800b5fe:	d504      	bpl.n	800b60a <_vfiprintf_r+0x116>
 800b600:	2353      	movs	r3, #83	; 0x53
 800b602:	a904      	add	r1, sp, #16
 800b604:	185b      	adds	r3, r3, r1
 800b606:	212b      	movs	r1, #43	; 0x2b
 800b608:	7019      	strb	r1, [r3, #0]
 800b60a:	9b03      	ldr	r3, [sp, #12]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b2a      	cmp	r3, #42	; 0x2a
 800b610:	d016      	beq.n	800b640 <_vfiprintf_r+0x14c>
 800b612:	2100      	movs	r1, #0
 800b614:	68eb      	ldr	r3, [r5, #12]
 800b616:	9f03      	ldr	r7, [sp, #12]
 800b618:	783a      	ldrb	r2, [r7, #0]
 800b61a:	1c78      	adds	r0, r7, #1
 800b61c:	3a30      	subs	r2, #48	; 0x30
 800b61e:	4684      	mov	ip, r0
 800b620:	2a09      	cmp	r2, #9
 800b622:	d94f      	bls.n	800b6c4 <_vfiprintf_r+0x1d0>
 800b624:	2900      	cmp	r1, #0
 800b626:	d111      	bne.n	800b64c <_vfiprintf_r+0x158>
 800b628:	e017      	b.n	800b65a <_vfiprintf_r+0x166>
 800b62a:	3701      	adds	r7, #1
 800b62c:	e7a9      	b.n	800b582 <_vfiprintf_r+0x8e>
 800b62e:	4b49      	ldr	r3, [pc, #292]	; (800b754 <_vfiprintf_r+0x260>)
 800b630:	682a      	ldr	r2, [r5, #0]
 800b632:	1ac0      	subs	r0, r0, r3
 800b634:	2301      	movs	r3, #1
 800b636:	4083      	lsls	r3, r0
 800b638:	4313      	orrs	r3, r2
 800b63a:	602b      	str	r3, [r5, #0]
 800b63c:	9703      	str	r7, [sp, #12]
 800b63e:	e7cb      	b.n	800b5d8 <_vfiprintf_r+0xe4>
 800b640:	9b07      	ldr	r3, [sp, #28]
 800b642:	1d19      	adds	r1, r3, #4
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	9107      	str	r1, [sp, #28]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	db01      	blt.n	800b650 <_vfiprintf_r+0x15c>
 800b64c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b64e:	e004      	b.n	800b65a <_vfiprintf_r+0x166>
 800b650:	425b      	negs	r3, r3
 800b652:	60eb      	str	r3, [r5, #12]
 800b654:	2302      	movs	r3, #2
 800b656:	4313      	orrs	r3, r2
 800b658:	602b      	str	r3, [r5, #0]
 800b65a:	783b      	ldrb	r3, [r7, #0]
 800b65c:	2b2e      	cmp	r3, #46	; 0x2e
 800b65e:	d10a      	bne.n	800b676 <_vfiprintf_r+0x182>
 800b660:	787b      	ldrb	r3, [r7, #1]
 800b662:	2b2a      	cmp	r3, #42	; 0x2a
 800b664:	d137      	bne.n	800b6d6 <_vfiprintf_r+0x1e2>
 800b666:	9b07      	ldr	r3, [sp, #28]
 800b668:	3702      	adds	r7, #2
 800b66a:	1d1a      	adds	r2, r3, #4
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	9207      	str	r2, [sp, #28]
 800b670:	2b00      	cmp	r3, #0
 800b672:	db2d      	blt.n	800b6d0 <_vfiprintf_r+0x1dc>
 800b674:	9309      	str	r3, [sp, #36]	; 0x24
 800b676:	2203      	movs	r2, #3
 800b678:	7839      	ldrb	r1, [r7, #0]
 800b67a:	4837      	ldr	r0, [pc, #220]	; (800b758 <_vfiprintf_r+0x264>)
 800b67c:	f7ff f806 	bl	800a68c <memchr>
 800b680:	2800      	cmp	r0, #0
 800b682:	d007      	beq.n	800b694 <_vfiprintf_r+0x1a0>
 800b684:	4b34      	ldr	r3, [pc, #208]	; (800b758 <_vfiprintf_r+0x264>)
 800b686:	682a      	ldr	r2, [r5, #0]
 800b688:	1ac0      	subs	r0, r0, r3
 800b68a:	2340      	movs	r3, #64	; 0x40
 800b68c:	4083      	lsls	r3, r0
 800b68e:	4313      	orrs	r3, r2
 800b690:	3701      	adds	r7, #1
 800b692:	602b      	str	r3, [r5, #0]
 800b694:	7839      	ldrb	r1, [r7, #0]
 800b696:	1c7b      	adds	r3, r7, #1
 800b698:	2206      	movs	r2, #6
 800b69a:	4830      	ldr	r0, [pc, #192]	; (800b75c <_vfiprintf_r+0x268>)
 800b69c:	9303      	str	r3, [sp, #12]
 800b69e:	7629      	strb	r1, [r5, #24]
 800b6a0:	f7fe fff4 	bl	800a68c <memchr>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d045      	beq.n	800b734 <_vfiprintf_r+0x240>
 800b6a8:	4b2d      	ldr	r3, [pc, #180]	; (800b760 <_vfiprintf_r+0x26c>)
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d127      	bne.n	800b6fe <_vfiprintf_r+0x20a>
 800b6ae:	2207      	movs	r2, #7
 800b6b0:	9b07      	ldr	r3, [sp, #28]
 800b6b2:	3307      	adds	r3, #7
 800b6b4:	4393      	bics	r3, r2
 800b6b6:	3308      	adds	r3, #8
 800b6b8:	9307      	str	r3, [sp, #28]
 800b6ba:	696b      	ldr	r3, [r5, #20]
 800b6bc:	9a04      	ldr	r2, [sp, #16]
 800b6be:	189b      	adds	r3, r3, r2
 800b6c0:	616b      	str	r3, [r5, #20]
 800b6c2:	e75d      	b.n	800b580 <_vfiprintf_r+0x8c>
 800b6c4:	210a      	movs	r1, #10
 800b6c6:	434b      	muls	r3, r1
 800b6c8:	4667      	mov	r7, ip
 800b6ca:	189b      	adds	r3, r3, r2
 800b6cc:	3909      	subs	r1, #9
 800b6ce:	e7a3      	b.n	800b618 <_vfiprintf_r+0x124>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	425b      	negs	r3, r3
 800b6d4:	e7ce      	b.n	800b674 <_vfiprintf_r+0x180>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	001a      	movs	r2, r3
 800b6da:	3701      	adds	r7, #1
 800b6dc:	606b      	str	r3, [r5, #4]
 800b6de:	7839      	ldrb	r1, [r7, #0]
 800b6e0:	1c78      	adds	r0, r7, #1
 800b6e2:	3930      	subs	r1, #48	; 0x30
 800b6e4:	4684      	mov	ip, r0
 800b6e6:	2909      	cmp	r1, #9
 800b6e8:	d903      	bls.n	800b6f2 <_vfiprintf_r+0x1fe>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d0c3      	beq.n	800b676 <_vfiprintf_r+0x182>
 800b6ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b6f0:	e7c1      	b.n	800b676 <_vfiprintf_r+0x182>
 800b6f2:	230a      	movs	r3, #10
 800b6f4:	435a      	muls	r2, r3
 800b6f6:	4667      	mov	r7, ip
 800b6f8:	1852      	adds	r2, r2, r1
 800b6fa:	3b09      	subs	r3, #9
 800b6fc:	e7ef      	b.n	800b6de <_vfiprintf_r+0x1ea>
 800b6fe:	ab07      	add	r3, sp, #28
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	0022      	movs	r2, r4
 800b704:	0029      	movs	r1, r5
 800b706:	0030      	movs	r0, r6
 800b708:	4b16      	ldr	r3, [pc, #88]	; (800b764 <_vfiprintf_r+0x270>)
 800b70a:	f7fc f8bb 	bl	8007884 <_printf_float>
 800b70e:	9004      	str	r0, [sp, #16]
 800b710:	9b04      	ldr	r3, [sp, #16]
 800b712:	3301      	adds	r3, #1
 800b714:	d1d1      	bne.n	800b6ba <_vfiprintf_r+0x1c6>
 800b716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b718:	07db      	lsls	r3, r3, #31
 800b71a:	d405      	bmi.n	800b728 <_vfiprintf_r+0x234>
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	059b      	lsls	r3, r3, #22
 800b720:	d402      	bmi.n	800b728 <_vfiprintf_r+0x234>
 800b722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b724:	f7ff fe7c 	bl	800b420 <__retarget_lock_release_recursive>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	065b      	lsls	r3, r3, #25
 800b72c:	d500      	bpl.n	800b730 <_vfiprintf_r+0x23c>
 800b72e:	e70a      	b.n	800b546 <_vfiprintf_r+0x52>
 800b730:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b732:	e70a      	b.n	800b54a <_vfiprintf_r+0x56>
 800b734:	ab07      	add	r3, sp, #28
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	0022      	movs	r2, r4
 800b73a:	0029      	movs	r1, r5
 800b73c:	0030      	movs	r0, r6
 800b73e:	4b09      	ldr	r3, [pc, #36]	; (800b764 <_vfiprintf_r+0x270>)
 800b740:	f7fc fb52 	bl	8007de8 <_printf_i>
 800b744:	e7e3      	b.n	800b70e <_vfiprintf_r+0x21a>
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	0800c53c 	.word	0x0800c53c
 800b74c:	0800c55c 	.word	0x0800c55c
 800b750:	0800c51c 	.word	0x0800c51c
 800b754:	0800c4cc 	.word	0x0800c4cc
 800b758:	0800c4d2 	.word	0x0800c4d2
 800b75c:	0800c4d6 	.word	0x0800c4d6
 800b760:	08007885 	.word	0x08007885
 800b764:	0800b4d1 	.word	0x0800b4d1

0800b768 <__swbuf_r>:
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b76a:	0005      	movs	r5, r0
 800b76c:	000e      	movs	r6, r1
 800b76e:	0014      	movs	r4, r2
 800b770:	2800      	cmp	r0, #0
 800b772:	d004      	beq.n	800b77e <__swbuf_r+0x16>
 800b774:	6983      	ldr	r3, [r0, #24]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <__swbuf_r+0x16>
 800b77a:	f000 f9f9 	bl	800bb70 <__sinit>
 800b77e:	4b22      	ldr	r3, [pc, #136]	; (800b808 <__swbuf_r+0xa0>)
 800b780:	429c      	cmp	r4, r3
 800b782:	d12e      	bne.n	800b7e2 <__swbuf_r+0x7a>
 800b784:	686c      	ldr	r4, [r5, #4]
 800b786:	69a3      	ldr	r3, [r4, #24]
 800b788:	60a3      	str	r3, [r4, #8]
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	071b      	lsls	r3, r3, #28
 800b78e:	d532      	bpl.n	800b7f6 <__swbuf_r+0x8e>
 800b790:	6923      	ldr	r3, [r4, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d02f      	beq.n	800b7f6 <__swbuf_r+0x8e>
 800b796:	6823      	ldr	r3, [r4, #0]
 800b798:	6922      	ldr	r2, [r4, #16]
 800b79a:	b2f7      	uxtb	r7, r6
 800b79c:	1a98      	subs	r0, r3, r2
 800b79e:	6963      	ldr	r3, [r4, #20]
 800b7a0:	b2f6      	uxtb	r6, r6
 800b7a2:	4283      	cmp	r3, r0
 800b7a4:	dc05      	bgt.n	800b7b2 <__swbuf_r+0x4a>
 800b7a6:	0021      	movs	r1, r4
 800b7a8:	0028      	movs	r0, r5
 800b7aa:	f000 f93f 	bl	800ba2c <_fflush_r>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d127      	bne.n	800b802 <__swbuf_r+0x9a>
 800b7b2:	68a3      	ldr	r3, [r4, #8]
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	60a3      	str	r3, [r4, #8]
 800b7ba:	6823      	ldr	r3, [r4, #0]
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	6022      	str	r2, [r4, #0]
 800b7c0:	701f      	strb	r7, [r3, #0]
 800b7c2:	6963      	ldr	r3, [r4, #20]
 800b7c4:	4283      	cmp	r3, r0
 800b7c6:	d004      	beq.n	800b7d2 <__swbuf_r+0x6a>
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	07db      	lsls	r3, r3, #31
 800b7cc:	d507      	bpl.n	800b7de <__swbuf_r+0x76>
 800b7ce:	2e0a      	cmp	r6, #10
 800b7d0:	d105      	bne.n	800b7de <__swbuf_r+0x76>
 800b7d2:	0021      	movs	r1, r4
 800b7d4:	0028      	movs	r0, r5
 800b7d6:	f000 f929 	bl	800ba2c <_fflush_r>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d111      	bne.n	800b802 <__swbuf_r+0x9a>
 800b7de:	0030      	movs	r0, r6
 800b7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7e2:	4b0a      	ldr	r3, [pc, #40]	; (800b80c <__swbuf_r+0xa4>)
 800b7e4:	429c      	cmp	r4, r3
 800b7e6:	d101      	bne.n	800b7ec <__swbuf_r+0x84>
 800b7e8:	68ac      	ldr	r4, [r5, #8]
 800b7ea:	e7cc      	b.n	800b786 <__swbuf_r+0x1e>
 800b7ec:	4b08      	ldr	r3, [pc, #32]	; (800b810 <__swbuf_r+0xa8>)
 800b7ee:	429c      	cmp	r4, r3
 800b7f0:	d1c9      	bne.n	800b786 <__swbuf_r+0x1e>
 800b7f2:	68ec      	ldr	r4, [r5, #12]
 800b7f4:	e7c7      	b.n	800b786 <__swbuf_r+0x1e>
 800b7f6:	0021      	movs	r1, r4
 800b7f8:	0028      	movs	r0, r5
 800b7fa:	f000 f80b 	bl	800b814 <__swsetup_r>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d0c9      	beq.n	800b796 <__swbuf_r+0x2e>
 800b802:	2601      	movs	r6, #1
 800b804:	4276      	negs	r6, r6
 800b806:	e7ea      	b.n	800b7de <__swbuf_r+0x76>
 800b808:	0800c53c 	.word	0x0800c53c
 800b80c:	0800c55c 	.word	0x0800c55c
 800b810:	0800c51c 	.word	0x0800c51c

0800b814 <__swsetup_r>:
 800b814:	4b37      	ldr	r3, [pc, #220]	; (800b8f4 <__swsetup_r+0xe0>)
 800b816:	b570      	push	{r4, r5, r6, lr}
 800b818:	681d      	ldr	r5, [r3, #0]
 800b81a:	0006      	movs	r6, r0
 800b81c:	000c      	movs	r4, r1
 800b81e:	2d00      	cmp	r5, #0
 800b820:	d005      	beq.n	800b82e <__swsetup_r+0x1a>
 800b822:	69ab      	ldr	r3, [r5, #24]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d102      	bne.n	800b82e <__swsetup_r+0x1a>
 800b828:	0028      	movs	r0, r5
 800b82a:	f000 f9a1 	bl	800bb70 <__sinit>
 800b82e:	4b32      	ldr	r3, [pc, #200]	; (800b8f8 <__swsetup_r+0xe4>)
 800b830:	429c      	cmp	r4, r3
 800b832:	d10f      	bne.n	800b854 <__swsetup_r+0x40>
 800b834:	686c      	ldr	r4, [r5, #4]
 800b836:	230c      	movs	r3, #12
 800b838:	5ee2      	ldrsh	r2, [r4, r3]
 800b83a:	b293      	uxth	r3, r2
 800b83c:	0711      	lsls	r1, r2, #28
 800b83e:	d42d      	bmi.n	800b89c <__swsetup_r+0x88>
 800b840:	06d9      	lsls	r1, r3, #27
 800b842:	d411      	bmi.n	800b868 <__swsetup_r+0x54>
 800b844:	2309      	movs	r3, #9
 800b846:	2001      	movs	r0, #1
 800b848:	6033      	str	r3, [r6, #0]
 800b84a:	3337      	adds	r3, #55	; 0x37
 800b84c:	4313      	orrs	r3, r2
 800b84e:	81a3      	strh	r3, [r4, #12]
 800b850:	4240      	negs	r0, r0
 800b852:	bd70      	pop	{r4, r5, r6, pc}
 800b854:	4b29      	ldr	r3, [pc, #164]	; (800b8fc <__swsetup_r+0xe8>)
 800b856:	429c      	cmp	r4, r3
 800b858:	d101      	bne.n	800b85e <__swsetup_r+0x4a>
 800b85a:	68ac      	ldr	r4, [r5, #8]
 800b85c:	e7eb      	b.n	800b836 <__swsetup_r+0x22>
 800b85e:	4b28      	ldr	r3, [pc, #160]	; (800b900 <__swsetup_r+0xec>)
 800b860:	429c      	cmp	r4, r3
 800b862:	d1e8      	bne.n	800b836 <__swsetup_r+0x22>
 800b864:	68ec      	ldr	r4, [r5, #12]
 800b866:	e7e6      	b.n	800b836 <__swsetup_r+0x22>
 800b868:	075b      	lsls	r3, r3, #29
 800b86a:	d513      	bpl.n	800b894 <__swsetup_r+0x80>
 800b86c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b86e:	2900      	cmp	r1, #0
 800b870:	d008      	beq.n	800b884 <__swsetup_r+0x70>
 800b872:	0023      	movs	r3, r4
 800b874:	3344      	adds	r3, #68	; 0x44
 800b876:	4299      	cmp	r1, r3
 800b878:	d002      	beq.n	800b880 <__swsetup_r+0x6c>
 800b87a:	0030      	movs	r0, r6
 800b87c:	f7fb fe76 	bl	800756c <_free_r>
 800b880:	2300      	movs	r3, #0
 800b882:	6363      	str	r3, [r4, #52]	; 0x34
 800b884:	2224      	movs	r2, #36	; 0x24
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	4393      	bics	r3, r2
 800b88a:	81a3      	strh	r3, [r4, #12]
 800b88c:	2300      	movs	r3, #0
 800b88e:	6063      	str	r3, [r4, #4]
 800b890:	6923      	ldr	r3, [r4, #16]
 800b892:	6023      	str	r3, [r4, #0]
 800b894:	2308      	movs	r3, #8
 800b896:	89a2      	ldrh	r2, [r4, #12]
 800b898:	4313      	orrs	r3, r2
 800b89a:	81a3      	strh	r3, [r4, #12]
 800b89c:	6923      	ldr	r3, [r4, #16]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10b      	bne.n	800b8ba <__swsetup_r+0xa6>
 800b8a2:	21a0      	movs	r1, #160	; 0xa0
 800b8a4:	2280      	movs	r2, #128	; 0x80
 800b8a6:	89a3      	ldrh	r3, [r4, #12]
 800b8a8:	0089      	lsls	r1, r1, #2
 800b8aa:	0092      	lsls	r2, r2, #2
 800b8ac:	400b      	ands	r3, r1
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d003      	beq.n	800b8ba <__swsetup_r+0xa6>
 800b8b2:	0021      	movs	r1, r4
 800b8b4:	0030      	movs	r0, r6
 800b8b6:	f000 fa23 	bl	800bd00 <__smakebuf_r>
 800b8ba:	220c      	movs	r2, #12
 800b8bc:	5ea3      	ldrsh	r3, [r4, r2]
 800b8be:	2001      	movs	r0, #1
 800b8c0:	001a      	movs	r2, r3
 800b8c2:	b299      	uxth	r1, r3
 800b8c4:	4002      	ands	r2, r0
 800b8c6:	4203      	tst	r3, r0
 800b8c8:	d00f      	beq.n	800b8ea <__swsetup_r+0xd6>
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	60a2      	str	r2, [r4, #8]
 800b8ce:	6962      	ldr	r2, [r4, #20]
 800b8d0:	4252      	negs	r2, r2
 800b8d2:	61a2      	str	r2, [r4, #24]
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	6922      	ldr	r2, [r4, #16]
 800b8d8:	4282      	cmp	r2, r0
 800b8da:	d1ba      	bne.n	800b852 <__swsetup_r+0x3e>
 800b8dc:	060a      	lsls	r2, r1, #24
 800b8de:	d5b8      	bpl.n	800b852 <__swsetup_r+0x3e>
 800b8e0:	2240      	movs	r2, #64	; 0x40
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	81a3      	strh	r3, [r4, #12]
 800b8e6:	3801      	subs	r0, #1
 800b8e8:	e7b3      	b.n	800b852 <__swsetup_r+0x3e>
 800b8ea:	0788      	lsls	r0, r1, #30
 800b8ec:	d400      	bmi.n	800b8f0 <__swsetup_r+0xdc>
 800b8ee:	6962      	ldr	r2, [r4, #20]
 800b8f0:	60a2      	str	r2, [r4, #8]
 800b8f2:	e7ef      	b.n	800b8d4 <__swsetup_r+0xc0>
 800b8f4:	2000000c 	.word	0x2000000c
 800b8f8:	0800c53c 	.word	0x0800c53c
 800b8fc:	0800c55c 	.word	0x0800c55c
 800b900:	0800c51c 	.word	0x0800c51c

0800b904 <abort>:
 800b904:	2006      	movs	r0, #6
 800b906:	b510      	push	{r4, lr}
 800b908:	f000 fa70 	bl	800bdec <raise>
 800b90c:	2001      	movs	r0, #1
 800b90e:	f7f7 fee3 	bl	80036d8 <_exit>
	...

0800b914 <__sflush_r>:
 800b914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b916:	898b      	ldrh	r3, [r1, #12]
 800b918:	0005      	movs	r5, r0
 800b91a:	000c      	movs	r4, r1
 800b91c:	071a      	lsls	r2, r3, #28
 800b91e:	d45f      	bmi.n	800b9e0 <__sflush_r+0xcc>
 800b920:	684a      	ldr	r2, [r1, #4]
 800b922:	2a00      	cmp	r2, #0
 800b924:	dc04      	bgt.n	800b930 <__sflush_r+0x1c>
 800b926:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b928:	2a00      	cmp	r2, #0
 800b92a:	dc01      	bgt.n	800b930 <__sflush_r+0x1c>
 800b92c:	2000      	movs	r0, #0
 800b92e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b930:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b932:	2f00      	cmp	r7, #0
 800b934:	d0fa      	beq.n	800b92c <__sflush_r+0x18>
 800b936:	2200      	movs	r2, #0
 800b938:	2180      	movs	r1, #128	; 0x80
 800b93a:	682e      	ldr	r6, [r5, #0]
 800b93c:	602a      	str	r2, [r5, #0]
 800b93e:	001a      	movs	r2, r3
 800b940:	0149      	lsls	r1, r1, #5
 800b942:	400a      	ands	r2, r1
 800b944:	420b      	tst	r3, r1
 800b946:	d034      	beq.n	800b9b2 <__sflush_r+0x9e>
 800b948:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b94a:	89a3      	ldrh	r3, [r4, #12]
 800b94c:	075b      	lsls	r3, r3, #29
 800b94e:	d506      	bpl.n	800b95e <__sflush_r+0x4a>
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	1ac0      	subs	r0, r0, r3
 800b954:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <__sflush_r+0x4a>
 800b95a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b95c:	1ac0      	subs	r0, r0, r3
 800b95e:	0002      	movs	r2, r0
 800b960:	6a21      	ldr	r1, [r4, #32]
 800b962:	2300      	movs	r3, #0
 800b964:	0028      	movs	r0, r5
 800b966:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b968:	47b8      	blx	r7
 800b96a:	89a1      	ldrh	r1, [r4, #12]
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	d106      	bne.n	800b97e <__sflush_r+0x6a>
 800b970:	682b      	ldr	r3, [r5, #0]
 800b972:	2b1d      	cmp	r3, #29
 800b974:	d831      	bhi.n	800b9da <__sflush_r+0xc6>
 800b976:	4a2c      	ldr	r2, [pc, #176]	; (800ba28 <__sflush_r+0x114>)
 800b978:	40da      	lsrs	r2, r3
 800b97a:	07d3      	lsls	r3, r2, #31
 800b97c:	d52d      	bpl.n	800b9da <__sflush_r+0xc6>
 800b97e:	2300      	movs	r3, #0
 800b980:	6063      	str	r3, [r4, #4]
 800b982:	6923      	ldr	r3, [r4, #16]
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	04cb      	lsls	r3, r1, #19
 800b988:	d505      	bpl.n	800b996 <__sflush_r+0x82>
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	d102      	bne.n	800b994 <__sflush_r+0x80>
 800b98e:	682b      	ldr	r3, [r5, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d100      	bne.n	800b996 <__sflush_r+0x82>
 800b994:	6560      	str	r0, [r4, #84]	; 0x54
 800b996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b998:	602e      	str	r6, [r5, #0]
 800b99a:	2900      	cmp	r1, #0
 800b99c:	d0c6      	beq.n	800b92c <__sflush_r+0x18>
 800b99e:	0023      	movs	r3, r4
 800b9a0:	3344      	adds	r3, #68	; 0x44
 800b9a2:	4299      	cmp	r1, r3
 800b9a4:	d002      	beq.n	800b9ac <__sflush_r+0x98>
 800b9a6:	0028      	movs	r0, r5
 800b9a8:	f7fb fde0 	bl	800756c <_free_r>
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	6360      	str	r0, [r4, #52]	; 0x34
 800b9b0:	e7bd      	b.n	800b92e <__sflush_r+0x1a>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	0028      	movs	r0, r5
 800b9b6:	6a21      	ldr	r1, [r4, #32]
 800b9b8:	47b8      	blx	r7
 800b9ba:	1c43      	adds	r3, r0, #1
 800b9bc:	d1c5      	bne.n	800b94a <__sflush_r+0x36>
 800b9be:	682b      	ldr	r3, [r5, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d0c2      	beq.n	800b94a <__sflush_r+0x36>
 800b9c4:	2b1d      	cmp	r3, #29
 800b9c6:	d001      	beq.n	800b9cc <__sflush_r+0xb8>
 800b9c8:	2b16      	cmp	r3, #22
 800b9ca:	d101      	bne.n	800b9d0 <__sflush_r+0xbc>
 800b9cc:	602e      	str	r6, [r5, #0]
 800b9ce:	e7ad      	b.n	800b92c <__sflush_r+0x18>
 800b9d0:	2340      	movs	r3, #64	; 0x40
 800b9d2:	89a2      	ldrh	r2, [r4, #12]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	e7a9      	b.n	800b92e <__sflush_r+0x1a>
 800b9da:	2340      	movs	r3, #64	; 0x40
 800b9dc:	430b      	orrs	r3, r1
 800b9de:	e7fa      	b.n	800b9d6 <__sflush_r+0xc2>
 800b9e0:	690f      	ldr	r7, [r1, #16]
 800b9e2:	2f00      	cmp	r7, #0
 800b9e4:	d0a2      	beq.n	800b92c <__sflush_r+0x18>
 800b9e6:	680a      	ldr	r2, [r1, #0]
 800b9e8:	600f      	str	r7, [r1, #0]
 800b9ea:	1bd2      	subs	r2, r2, r7
 800b9ec:	9201      	str	r2, [sp, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	079b      	lsls	r3, r3, #30
 800b9f2:	d100      	bne.n	800b9f6 <__sflush_r+0xe2>
 800b9f4:	694a      	ldr	r2, [r1, #20]
 800b9f6:	60a2      	str	r2, [r4, #8]
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	dc00      	bgt.n	800ba00 <__sflush_r+0xec>
 800b9fe:	e795      	b.n	800b92c <__sflush_r+0x18>
 800ba00:	003a      	movs	r2, r7
 800ba02:	0028      	movs	r0, r5
 800ba04:	9b01      	ldr	r3, [sp, #4]
 800ba06:	6a21      	ldr	r1, [r4, #32]
 800ba08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba0a:	47b0      	blx	r6
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	dc06      	bgt.n	800ba1e <__sflush_r+0x10a>
 800ba10:	2340      	movs	r3, #64	; 0x40
 800ba12:	2001      	movs	r0, #1
 800ba14:	89a2      	ldrh	r2, [r4, #12]
 800ba16:	4240      	negs	r0, r0
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	81a3      	strh	r3, [r4, #12]
 800ba1c:	e787      	b.n	800b92e <__sflush_r+0x1a>
 800ba1e:	9b01      	ldr	r3, [sp, #4]
 800ba20:	183f      	adds	r7, r7, r0
 800ba22:	1a1b      	subs	r3, r3, r0
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	e7e7      	b.n	800b9f8 <__sflush_r+0xe4>
 800ba28:	20400001 	.word	0x20400001

0800ba2c <_fflush_r>:
 800ba2c:	690b      	ldr	r3, [r1, #16]
 800ba2e:	b570      	push	{r4, r5, r6, lr}
 800ba30:	0005      	movs	r5, r0
 800ba32:	000c      	movs	r4, r1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d102      	bne.n	800ba3e <_fflush_r+0x12>
 800ba38:	2500      	movs	r5, #0
 800ba3a:	0028      	movs	r0, r5
 800ba3c:	bd70      	pop	{r4, r5, r6, pc}
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d004      	beq.n	800ba4c <_fflush_r+0x20>
 800ba42:	6983      	ldr	r3, [r0, #24]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d101      	bne.n	800ba4c <_fflush_r+0x20>
 800ba48:	f000 f892 	bl	800bb70 <__sinit>
 800ba4c:	4b14      	ldr	r3, [pc, #80]	; (800baa0 <_fflush_r+0x74>)
 800ba4e:	429c      	cmp	r4, r3
 800ba50:	d11b      	bne.n	800ba8a <_fflush_r+0x5e>
 800ba52:	686c      	ldr	r4, [r5, #4]
 800ba54:	220c      	movs	r2, #12
 800ba56:	5ea3      	ldrsh	r3, [r4, r2]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d0ed      	beq.n	800ba38 <_fflush_r+0xc>
 800ba5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba5e:	07d2      	lsls	r2, r2, #31
 800ba60:	d404      	bmi.n	800ba6c <_fflush_r+0x40>
 800ba62:	059b      	lsls	r3, r3, #22
 800ba64:	d402      	bmi.n	800ba6c <_fflush_r+0x40>
 800ba66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba68:	f7ff fcd9 	bl	800b41e <__retarget_lock_acquire_recursive>
 800ba6c:	0028      	movs	r0, r5
 800ba6e:	0021      	movs	r1, r4
 800ba70:	f7ff ff50 	bl	800b914 <__sflush_r>
 800ba74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba76:	0005      	movs	r5, r0
 800ba78:	07db      	lsls	r3, r3, #31
 800ba7a:	d4de      	bmi.n	800ba3a <_fflush_r+0xe>
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	059b      	lsls	r3, r3, #22
 800ba80:	d4db      	bmi.n	800ba3a <_fflush_r+0xe>
 800ba82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba84:	f7ff fccc 	bl	800b420 <__retarget_lock_release_recursive>
 800ba88:	e7d7      	b.n	800ba3a <_fflush_r+0xe>
 800ba8a:	4b06      	ldr	r3, [pc, #24]	; (800baa4 <_fflush_r+0x78>)
 800ba8c:	429c      	cmp	r4, r3
 800ba8e:	d101      	bne.n	800ba94 <_fflush_r+0x68>
 800ba90:	68ac      	ldr	r4, [r5, #8]
 800ba92:	e7df      	b.n	800ba54 <_fflush_r+0x28>
 800ba94:	4b04      	ldr	r3, [pc, #16]	; (800baa8 <_fflush_r+0x7c>)
 800ba96:	429c      	cmp	r4, r3
 800ba98:	d1dc      	bne.n	800ba54 <_fflush_r+0x28>
 800ba9a:	68ec      	ldr	r4, [r5, #12]
 800ba9c:	e7da      	b.n	800ba54 <_fflush_r+0x28>
 800ba9e:	46c0      	nop			; (mov r8, r8)
 800baa0:	0800c53c 	.word	0x0800c53c
 800baa4:	0800c55c 	.word	0x0800c55c
 800baa8:	0800c51c 	.word	0x0800c51c

0800baac <std>:
 800baac:	2300      	movs	r3, #0
 800baae:	b510      	push	{r4, lr}
 800bab0:	0004      	movs	r4, r0
 800bab2:	6003      	str	r3, [r0, #0]
 800bab4:	6043      	str	r3, [r0, #4]
 800bab6:	6083      	str	r3, [r0, #8]
 800bab8:	8181      	strh	r1, [r0, #12]
 800baba:	6643      	str	r3, [r0, #100]	; 0x64
 800babc:	0019      	movs	r1, r3
 800babe:	81c2      	strh	r2, [r0, #14]
 800bac0:	6103      	str	r3, [r0, #16]
 800bac2:	6143      	str	r3, [r0, #20]
 800bac4:	6183      	str	r3, [r0, #24]
 800bac6:	2208      	movs	r2, #8
 800bac8:	305c      	adds	r0, #92	; 0x5c
 800baca:	f7fb fd46 	bl	800755a <memset>
 800bace:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <std+0x38>)
 800bad0:	6224      	str	r4, [r4, #32]
 800bad2:	6263      	str	r3, [r4, #36]	; 0x24
 800bad4:	4b04      	ldr	r3, [pc, #16]	; (800bae8 <std+0x3c>)
 800bad6:	62a3      	str	r3, [r4, #40]	; 0x28
 800bad8:	4b04      	ldr	r3, [pc, #16]	; (800baec <std+0x40>)
 800bada:	62e3      	str	r3, [r4, #44]	; 0x2c
 800badc:	4b04      	ldr	r3, [pc, #16]	; (800baf0 <std+0x44>)
 800bade:	6323      	str	r3, [r4, #48]	; 0x30
 800bae0:	bd10      	pop	{r4, pc}
 800bae2:	46c0      	nop			; (mov r8, r8)
 800bae4:	0800be2d 	.word	0x0800be2d
 800bae8:	0800be55 	.word	0x0800be55
 800baec:	0800be8d 	.word	0x0800be8d
 800baf0:	0800beb9 	.word	0x0800beb9

0800baf4 <_cleanup_r>:
 800baf4:	b510      	push	{r4, lr}
 800baf6:	4902      	ldr	r1, [pc, #8]	; (800bb00 <_cleanup_r+0xc>)
 800baf8:	f000 f8ba 	bl	800bc70 <_fwalk_reent>
 800bafc:	bd10      	pop	{r4, pc}
 800bafe:	46c0      	nop			; (mov r8, r8)
 800bb00:	0800ba2d 	.word	0x0800ba2d

0800bb04 <__sfmoreglue>:
 800bb04:	b570      	push	{r4, r5, r6, lr}
 800bb06:	2568      	movs	r5, #104	; 0x68
 800bb08:	1e4a      	subs	r2, r1, #1
 800bb0a:	4355      	muls	r5, r2
 800bb0c:	000e      	movs	r6, r1
 800bb0e:	0029      	movs	r1, r5
 800bb10:	3174      	adds	r1, #116	; 0x74
 800bb12:	f7fb fd97 	bl	8007644 <_malloc_r>
 800bb16:	1e04      	subs	r4, r0, #0
 800bb18:	d008      	beq.n	800bb2c <__sfmoreglue+0x28>
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	002a      	movs	r2, r5
 800bb1e:	6001      	str	r1, [r0, #0]
 800bb20:	6046      	str	r6, [r0, #4]
 800bb22:	300c      	adds	r0, #12
 800bb24:	60a0      	str	r0, [r4, #8]
 800bb26:	3268      	adds	r2, #104	; 0x68
 800bb28:	f7fb fd17 	bl	800755a <memset>
 800bb2c:	0020      	movs	r0, r4
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}

0800bb30 <__sfp_lock_acquire>:
 800bb30:	b510      	push	{r4, lr}
 800bb32:	4802      	ldr	r0, [pc, #8]	; (800bb3c <__sfp_lock_acquire+0xc>)
 800bb34:	f7ff fc73 	bl	800b41e <__retarget_lock_acquire_recursive>
 800bb38:	bd10      	pop	{r4, pc}
 800bb3a:	46c0      	nop			; (mov r8, r8)
 800bb3c:	2000049d 	.word	0x2000049d

0800bb40 <__sfp_lock_release>:
 800bb40:	b510      	push	{r4, lr}
 800bb42:	4802      	ldr	r0, [pc, #8]	; (800bb4c <__sfp_lock_release+0xc>)
 800bb44:	f7ff fc6c 	bl	800b420 <__retarget_lock_release_recursive>
 800bb48:	bd10      	pop	{r4, pc}
 800bb4a:	46c0      	nop			; (mov r8, r8)
 800bb4c:	2000049d 	.word	0x2000049d

0800bb50 <__sinit_lock_acquire>:
 800bb50:	b510      	push	{r4, lr}
 800bb52:	4802      	ldr	r0, [pc, #8]	; (800bb5c <__sinit_lock_acquire+0xc>)
 800bb54:	f7ff fc63 	bl	800b41e <__retarget_lock_acquire_recursive>
 800bb58:	bd10      	pop	{r4, pc}
 800bb5a:	46c0      	nop			; (mov r8, r8)
 800bb5c:	2000049e 	.word	0x2000049e

0800bb60 <__sinit_lock_release>:
 800bb60:	b510      	push	{r4, lr}
 800bb62:	4802      	ldr	r0, [pc, #8]	; (800bb6c <__sinit_lock_release+0xc>)
 800bb64:	f7ff fc5c 	bl	800b420 <__retarget_lock_release_recursive>
 800bb68:	bd10      	pop	{r4, pc}
 800bb6a:	46c0      	nop			; (mov r8, r8)
 800bb6c:	2000049e 	.word	0x2000049e

0800bb70 <__sinit>:
 800bb70:	b513      	push	{r0, r1, r4, lr}
 800bb72:	0004      	movs	r4, r0
 800bb74:	f7ff ffec 	bl	800bb50 <__sinit_lock_acquire>
 800bb78:	69a3      	ldr	r3, [r4, #24]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d002      	beq.n	800bb84 <__sinit+0x14>
 800bb7e:	f7ff ffef 	bl	800bb60 <__sinit_lock_release>
 800bb82:	bd13      	pop	{r0, r1, r4, pc}
 800bb84:	64a3      	str	r3, [r4, #72]	; 0x48
 800bb86:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bb88:	6523      	str	r3, [r4, #80]	; 0x50
 800bb8a:	4b13      	ldr	r3, [pc, #76]	; (800bbd8 <__sinit+0x68>)
 800bb8c:	4a13      	ldr	r2, [pc, #76]	; (800bbdc <__sinit+0x6c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb92:	9301      	str	r3, [sp, #4]
 800bb94:	42a3      	cmp	r3, r4
 800bb96:	d101      	bne.n	800bb9c <__sinit+0x2c>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	61a3      	str	r3, [r4, #24]
 800bb9c:	0020      	movs	r0, r4
 800bb9e:	f000 f81f 	bl	800bbe0 <__sfp>
 800bba2:	6060      	str	r0, [r4, #4]
 800bba4:	0020      	movs	r0, r4
 800bba6:	f000 f81b 	bl	800bbe0 <__sfp>
 800bbaa:	60a0      	str	r0, [r4, #8]
 800bbac:	0020      	movs	r0, r4
 800bbae:	f000 f817 	bl	800bbe0 <__sfp>
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2104      	movs	r1, #4
 800bbb6:	60e0      	str	r0, [r4, #12]
 800bbb8:	6860      	ldr	r0, [r4, #4]
 800bbba:	f7ff ff77 	bl	800baac <std>
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	2109      	movs	r1, #9
 800bbc2:	68a0      	ldr	r0, [r4, #8]
 800bbc4:	f7ff ff72 	bl	800baac <std>
 800bbc8:	2202      	movs	r2, #2
 800bbca:	2112      	movs	r1, #18
 800bbcc:	68e0      	ldr	r0, [r4, #12]
 800bbce:	f7ff ff6d 	bl	800baac <std>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	61a3      	str	r3, [r4, #24]
 800bbd6:	e7d2      	b.n	800bb7e <__sinit+0xe>
 800bbd8:	0800c1d8 	.word	0x0800c1d8
 800bbdc:	0800baf5 	.word	0x0800baf5

0800bbe0 <__sfp>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	0007      	movs	r7, r0
 800bbe4:	f7ff ffa4 	bl	800bb30 <__sfp_lock_acquire>
 800bbe8:	4b1f      	ldr	r3, [pc, #124]	; (800bc68 <__sfp+0x88>)
 800bbea:	681e      	ldr	r6, [r3, #0]
 800bbec:	69b3      	ldr	r3, [r6, #24]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d102      	bne.n	800bbf8 <__sfp+0x18>
 800bbf2:	0030      	movs	r0, r6
 800bbf4:	f7ff ffbc 	bl	800bb70 <__sinit>
 800bbf8:	3648      	adds	r6, #72	; 0x48
 800bbfa:	68b4      	ldr	r4, [r6, #8]
 800bbfc:	6873      	ldr	r3, [r6, #4]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	d504      	bpl.n	800bc0c <__sfp+0x2c>
 800bc02:	6833      	ldr	r3, [r6, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d022      	beq.n	800bc4e <__sfp+0x6e>
 800bc08:	6836      	ldr	r6, [r6, #0]
 800bc0a:	e7f6      	b.n	800bbfa <__sfp+0x1a>
 800bc0c:	220c      	movs	r2, #12
 800bc0e:	5ea5      	ldrsh	r5, [r4, r2]
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	d11a      	bne.n	800bc4a <__sfp+0x6a>
 800bc14:	0020      	movs	r0, r4
 800bc16:	4b15      	ldr	r3, [pc, #84]	; (800bc6c <__sfp+0x8c>)
 800bc18:	3058      	adds	r0, #88	; 0x58
 800bc1a:	60e3      	str	r3, [r4, #12]
 800bc1c:	6665      	str	r5, [r4, #100]	; 0x64
 800bc1e:	f7ff fbfd 	bl	800b41c <__retarget_lock_init_recursive>
 800bc22:	f7ff ff8d 	bl	800bb40 <__sfp_lock_release>
 800bc26:	0020      	movs	r0, r4
 800bc28:	2208      	movs	r2, #8
 800bc2a:	0029      	movs	r1, r5
 800bc2c:	6025      	str	r5, [r4, #0]
 800bc2e:	60a5      	str	r5, [r4, #8]
 800bc30:	6065      	str	r5, [r4, #4]
 800bc32:	6125      	str	r5, [r4, #16]
 800bc34:	6165      	str	r5, [r4, #20]
 800bc36:	61a5      	str	r5, [r4, #24]
 800bc38:	305c      	adds	r0, #92	; 0x5c
 800bc3a:	f7fb fc8e 	bl	800755a <memset>
 800bc3e:	6365      	str	r5, [r4, #52]	; 0x34
 800bc40:	63a5      	str	r5, [r4, #56]	; 0x38
 800bc42:	64a5      	str	r5, [r4, #72]	; 0x48
 800bc44:	64e5      	str	r5, [r4, #76]	; 0x4c
 800bc46:	0020      	movs	r0, r4
 800bc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc4a:	3468      	adds	r4, #104	; 0x68
 800bc4c:	e7d7      	b.n	800bbfe <__sfp+0x1e>
 800bc4e:	2104      	movs	r1, #4
 800bc50:	0038      	movs	r0, r7
 800bc52:	f7ff ff57 	bl	800bb04 <__sfmoreglue>
 800bc56:	1e04      	subs	r4, r0, #0
 800bc58:	6030      	str	r0, [r6, #0]
 800bc5a:	d1d5      	bne.n	800bc08 <__sfp+0x28>
 800bc5c:	f7ff ff70 	bl	800bb40 <__sfp_lock_release>
 800bc60:	230c      	movs	r3, #12
 800bc62:	603b      	str	r3, [r7, #0]
 800bc64:	e7ef      	b.n	800bc46 <__sfp+0x66>
 800bc66:	46c0      	nop			; (mov r8, r8)
 800bc68:	0800c1d8 	.word	0x0800c1d8
 800bc6c:	ffff0001 	.word	0xffff0001

0800bc70 <_fwalk_reent>:
 800bc70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc72:	0004      	movs	r4, r0
 800bc74:	0006      	movs	r6, r0
 800bc76:	2700      	movs	r7, #0
 800bc78:	9101      	str	r1, [sp, #4]
 800bc7a:	3448      	adds	r4, #72	; 0x48
 800bc7c:	6863      	ldr	r3, [r4, #4]
 800bc7e:	68a5      	ldr	r5, [r4, #8]
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	9b00      	ldr	r3, [sp, #0]
 800bc84:	3b01      	subs	r3, #1
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	d504      	bpl.n	800bc94 <_fwalk_reent+0x24>
 800bc8a:	6824      	ldr	r4, [r4, #0]
 800bc8c:	2c00      	cmp	r4, #0
 800bc8e:	d1f5      	bne.n	800bc7c <_fwalk_reent+0xc>
 800bc90:	0038      	movs	r0, r7
 800bc92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc94:	89ab      	ldrh	r3, [r5, #12]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d908      	bls.n	800bcac <_fwalk_reent+0x3c>
 800bc9a:	220e      	movs	r2, #14
 800bc9c:	5eab      	ldrsh	r3, [r5, r2]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	d004      	beq.n	800bcac <_fwalk_reent+0x3c>
 800bca2:	0029      	movs	r1, r5
 800bca4:	0030      	movs	r0, r6
 800bca6:	9b01      	ldr	r3, [sp, #4]
 800bca8:	4798      	blx	r3
 800bcaa:	4307      	orrs	r7, r0
 800bcac:	3568      	adds	r5, #104	; 0x68
 800bcae:	e7e8      	b.n	800bc82 <_fwalk_reent+0x12>

0800bcb0 <__swhatbuf_r>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	000e      	movs	r6, r1
 800bcb4:	001d      	movs	r5, r3
 800bcb6:	230e      	movs	r3, #14
 800bcb8:	5ec9      	ldrsh	r1, [r1, r3]
 800bcba:	0014      	movs	r4, r2
 800bcbc:	b096      	sub	sp, #88	; 0x58
 800bcbe:	2900      	cmp	r1, #0
 800bcc0:	da08      	bge.n	800bcd4 <__swhatbuf_r+0x24>
 800bcc2:	220c      	movs	r2, #12
 800bcc4:	5eb3      	ldrsh	r3, [r6, r2]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	602a      	str	r2, [r5, #0]
 800bcca:	061b      	lsls	r3, r3, #24
 800bccc:	d411      	bmi.n	800bcf2 <__swhatbuf_r+0x42>
 800bcce:	2380      	movs	r3, #128	; 0x80
 800bcd0:	00db      	lsls	r3, r3, #3
 800bcd2:	e00f      	b.n	800bcf4 <__swhatbuf_r+0x44>
 800bcd4:	466a      	mov	r2, sp
 800bcd6:	f000 f91b 	bl	800bf10 <_fstat_r>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	dbf1      	blt.n	800bcc2 <__swhatbuf_r+0x12>
 800bcde:	23f0      	movs	r3, #240	; 0xf0
 800bce0:	9901      	ldr	r1, [sp, #4]
 800bce2:	021b      	lsls	r3, r3, #8
 800bce4:	4019      	ands	r1, r3
 800bce6:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <__swhatbuf_r+0x4c>)
 800bce8:	18c9      	adds	r1, r1, r3
 800bcea:	424b      	negs	r3, r1
 800bcec:	4159      	adcs	r1, r3
 800bcee:	6029      	str	r1, [r5, #0]
 800bcf0:	e7ed      	b.n	800bcce <__swhatbuf_r+0x1e>
 800bcf2:	2340      	movs	r3, #64	; 0x40
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	6023      	str	r3, [r4, #0]
 800bcf8:	b016      	add	sp, #88	; 0x58
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	ffffe000 	.word	0xffffe000

0800bd00 <__smakebuf_r>:
 800bd00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd02:	2602      	movs	r6, #2
 800bd04:	898b      	ldrh	r3, [r1, #12]
 800bd06:	0005      	movs	r5, r0
 800bd08:	000c      	movs	r4, r1
 800bd0a:	4233      	tst	r3, r6
 800bd0c:	d006      	beq.n	800bd1c <__smakebuf_r+0x1c>
 800bd0e:	0023      	movs	r3, r4
 800bd10:	3347      	adds	r3, #71	; 0x47
 800bd12:	6023      	str	r3, [r4, #0]
 800bd14:	6123      	str	r3, [r4, #16]
 800bd16:	2301      	movs	r3, #1
 800bd18:	6163      	str	r3, [r4, #20]
 800bd1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bd1c:	466a      	mov	r2, sp
 800bd1e:	ab01      	add	r3, sp, #4
 800bd20:	f7ff ffc6 	bl	800bcb0 <__swhatbuf_r>
 800bd24:	9900      	ldr	r1, [sp, #0]
 800bd26:	0007      	movs	r7, r0
 800bd28:	0028      	movs	r0, r5
 800bd2a:	f7fb fc8b 	bl	8007644 <_malloc_r>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d108      	bne.n	800bd44 <__smakebuf_r+0x44>
 800bd32:	220c      	movs	r2, #12
 800bd34:	5ea3      	ldrsh	r3, [r4, r2]
 800bd36:	059a      	lsls	r2, r3, #22
 800bd38:	d4ef      	bmi.n	800bd1a <__smakebuf_r+0x1a>
 800bd3a:	2203      	movs	r2, #3
 800bd3c:	4393      	bics	r3, r2
 800bd3e:	431e      	orrs	r6, r3
 800bd40:	81a6      	strh	r6, [r4, #12]
 800bd42:	e7e4      	b.n	800bd0e <__smakebuf_r+0xe>
 800bd44:	4b0f      	ldr	r3, [pc, #60]	; (800bd84 <__smakebuf_r+0x84>)
 800bd46:	62ab      	str	r3, [r5, #40]	; 0x28
 800bd48:	2380      	movs	r3, #128	; 0x80
 800bd4a:	89a2      	ldrh	r2, [r4, #12]
 800bd4c:	6020      	str	r0, [r4, #0]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	81a3      	strh	r3, [r4, #12]
 800bd52:	9b00      	ldr	r3, [sp, #0]
 800bd54:	6120      	str	r0, [r4, #16]
 800bd56:	6163      	str	r3, [r4, #20]
 800bd58:	9b01      	ldr	r3, [sp, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00d      	beq.n	800bd7a <__smakebuf_r+0x7a>
 800bd5e:	0028      	movs	r0, r5
 800bd60:	230e      	movs	r3, #14
 800bd62:	5ee1      	ldrsh	r1, [r4, r3]
 800bd64:	f000 f8e6 	bl	800bf34 <_isatty_r>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d006      	beq.n	800bd7a <__smakebuf_r+0x7a>
 800bd6c:	2203      	movs	r2, #3
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	4393      	bics	r3, r2
 800bd72:	001a      	movs	r2, r3
 800bd74:	2301      	movs	r3, #1
 800bd76:	4313      	orrs	r3, r2
 800bd78:	81a3      	strh	r3, [r4, #12]
 800bd7a:	89a0      	ldrh	r0, [r4, #12]
 800bd7c:	4307      	orrs	r7, r0
 800bd7e:	81a7      	strh	r7, [r4, #12]
 800bd80:	e7cb      	b.n	800bd1a <__smakebuf_r+0x1a>
 800bd82:	46c0      	nop			; (mov r8, r8)
 800bd84:	0800baf5 	.word	0x0800baf5

0800bd88 <_malloc_usable_size_r>:
 800bd88:	1f0b      	subs	r3, r1, #4
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	1f18      	subs	r0, r3, #4
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	da01      	bge.n	800bd96 <_malloc_usable_size_r+0xe>
 800bd92:	580b      	ldr	r3, [r1, r0]
 800bd94:	18c0      	adds	r0, r0, r3
 800bd96:	4770      	bx	lr

0800bd98 <_raise_r>:
 800bd98:	b570      	push	{r4, r5, r6, lr}
 800bd9a:	0004      	movs	r4, r0
 800bd9c:	000d      	movs	r5, r1
 800bd9e:	291f      	cmp	r1, #31
 800bda0:	d904      	bls.n	800bdac <_raise_r+0x14>
 800bda2:	2316      	movs	r3, #22
 800bda4:	6003      	str	r3, [r0, #0]
 800bda6:	2001      	movs	r0, #1
 800bda8:	4240      	negs	r0, r0
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}
 800bdac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d004      	beq.n	800bdbc <_raise_r+0x24>
 800bdb2:	008a      	lsls	r2, r1, #2
 800bdb4:	189b      	adds	r3, r3, r2
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	2a00      	cmp	r2, #0
 800bdba:	d108      	bne.n	800bdce <_raise_r+0x36>
 800bdbc:	0020      	movs	r0, r4
 800bdbe:	f000 f831 	bl	800be24 <_getpid_r>
 800bdc2:	002a      	movs	r2, r5
 800bdc4:	0001      	movs	r1, r0
 800bdc6:	0020      	movs	r0, r4
 800bdc8:	f000 f81a 	bl	800be00 <_kill_r>
 800bdcc:	e7ed      	b.n	800bdaa <_raise_r+0x12>
 800bdce:	2000      	movs	r0, #0
 800bdd0:	2a01      	cmp	r2, #1
 800bdd2:	d0ea      	beq.n	800bdaa <_raise_r+0x12>
 800bdd4:	1c51      	adds	r1, r2, #1
 800bdd6:	d103      	bne.n	800bde0 <_raise_r+0x48>
 800bdd8:	2316      	movs	r3, #22
 800bdda:	3001      	adds	r0, #1
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	e7e4      	b.n	800bdaa <_raise_r+0x12>
 800bde0:	2400      	movs	r4, #0
 800bde2:	0028      	movs	r0, r5
 800bde4:	601c      	str	r4, [r3, #0]
 800bde6:	4790      	blx	r2
 800bde8:	0020      	movs	r0, r4
 800bdea:	e7de      	b.n	800bdaa <_raise_r+0x12>

0800bdec <raise>:
 800bdec:	b510      	push	{r4, lr}
 800bdee:	4b03      	ldr	r3, [pc, #12]	; (800bdfc <raise+0x10>)
 800bdf0:	0001      	movs	r1, r0
 800bdf2:	6818      	ldr	r0, [r3, #0]
 800bdf4:	f7ff ffd0 	bl	800bd98 <_raise_r>
 800bdf8:	bd10      	pop	{r4, pc}
 800bdfa:	46c0      	nop			; (mov r8, r8)
 800bdfc:	2000000c 	.word	0x2000000c

0800be00 <_kill_r>:
 800be00:	2300      	movs	r3, #0
 800be02:	b570      	push	{r4, r5, r6, lr}
 800be04:	4d06      	ldr	r5, [pc, #24]	; (800be20 <_kill_r+0x20>)
 800be06:	0004      	movs	r4, r0
 800be08:	0008      	movs	r0, r1
 800be0a:	0011      	movs	r1, r2
 800be0c:	602b      	str	r3, [r5, #0]
 800be0e:	f7f7 fc53 	bl	80036b8 <_kill>
 800be12:	1c43      	adds	r3, r0, #1
 800be14:	d103      	bne.n	800be1e <_kill_r+0x1e>
 800be16:	682b      	ldr	r3, [r5, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d000      	beq.n	800be1e <_kill_r+0x1e>
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	bd70      	pop	{r4, r5, r6, pc}
 800be20:	20000498 	.word	0x20000498

0800be24 <_getpid_r>:
 800be24:	b510      	push	{r4, lr}
 800be26:	f7f7 fc41 	bl	80036ac <_getpid>
 800be2a:	bd10      	pop	{r4, pc}

0800be2c <__sread>:
 800be2c:	b570      	push	{r4, r5, r6, lr}
 800be2e:	000c      	movs	r4, r1
 800be30:	250e      	movs	r5, #14
 800be32:	5f49      	ldrsh	r1, [r1, r5]
 800be34:	f000 f8a4 	bl	800bf80 <_read_r>
 800be38:	2800      	cmp	r0, #0
 800be3a:	db03      	blt.n	800be44 <__sread+0x18>
 800be3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800be3e:	181b      	adds	r3, r3, r0
 800be40:	6563      	str	r3, [r4, #84]	; 0x54
 800be42:	bd70      	pop	{r4, r5, r6, pc}
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	4a02      	ldr	r2, [pc, #8]	; (800be50 <__sread+0x24>)
 800be48:	4013      	ands	r3, r2
 800be4a:	81a3      	strh	r3, [r4, #12]
 800be4c:	e7f9      	b.n	800be42 <__sread+0x16>
 800be4e:	46c0      	nop			; (mov r8, r8)
 800be50:	ffffefff 	.word	0xffffefff

0800be54 <__swrite>:
 800be54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be56:	001f      	movs	r7, r3
 800be58:	898b      	ldrh	r3, [r1, #12]
 800be5a:	0005      	movs	r5, r0
 800be5c:	000c      	movs	r4, r1
 800be5e:	0016      	movs	r6, r2
 800be60:	05db      	lsls	r3, r3, #23
 800be62:	d505      	bpl.n	800be70 <__swrite+0x1c>
 800be64:	230e      	movs	r3, #14
 800be66:	5ec9      	ldrsh	r1, [r1, r3]
 800be68:	2200      	movs	r2, #0
 800be6a:	2302      	movs	r3, #2
 800be6c:	f000 f874 	bl	800bf58 <_lseek_r>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	4a05      	ldr	r2, [pc, #20]	; (800be88 <__swrite+0x34>)
 800be74:	0028      	movs	r0, r5
 800be76:	4013      	ands	r3, r2
 800be78:	81a3      	strh	r3, [r4, #12]
 800be7a:	0032      	movs	r2, r6
 800be7c:	230e      	movs	r3, #14
 800be7e:	5ee1      	ldrsh	r1, [r4, r3]
 800be80:	003b      	movs	r3, r7
 800be82:	f000 f81f 	bl	800bec4 <_write_r>
 800be86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be88:	ffffefff 	.word	0xffffefff

0800be8c <__sseek>:
 800be8c:	b570      	push	{r4, r5, r6, lr}
 800be8e:	000c      	movs	r4, r1
 800be90:	250e      	movs	r5, #14
 800be92:	5f49      	ldrsh	r1, [r1, r5]
 800be94:	f000 f860 	bl	800bf58 <_lseek_r>
 800be98:	89a3      	ldrh	r3, [r4, #12]
 800be9a:	1c42      	adds	r2, r0, #1
 800be9c:	d103      	bne.n	800bea6 <__sseek+0x1a>
 800be9e:	4a05      	ldr	r2, [pc, #20]	; (800beb4 <__sseek+0x28>)
 800bea0:	4013      	ands	r3, r2
 800bea2:	81a3      	strh	r3, [r4, #12]
 800bea4:	bd70      	pop	{r4, r5, r6, pc}
 800bea6:	2280      	movs	r2, #128	; 0x80
 800bea8:	0152      	lsls	r2, r2, #5
 800beaa:	4313      	orrs	r3, r2
 800beac:	81a3      	strh	r3, [r4, #12]
 800beae:	6560      	str	r0, [r4, #84]	; 0x54
 800beb0:	e7f8      	b.n	800bea4 <__sseek+0x18>
 800beb2:	46c0      	nop			; (mov r8, r8)
 800beb4:	ffffefff 	.word	0xffffefff

0800beb8 <__sclose>:
 800beb8:	b510      	push	{r4, lr}
 800beba:	230e      	movs	r3, #14
 800bebc:	5ec9      	ldrsh	r1, [r1, r3]
 800bebe:	f000 f815 	bl	800beec <_close_r>
 800bec2:	bd10      	pop	{r4, pc}

0800bec4 <_write_r>:
 800bec4:	b570      	push	{r4, r5, r6, lr}
 800bec6:	0004      	movs	r4, r0
 800bec8:	0008      	movs	r0, r1
 800beca:	0011      	movs	r1, r2
 800becc:	001a      	movs	r2, r3
 800bece:	2300      	movs	r3, #0
 800bed0:	4d05      	ldr	r5, [pc, #20]	; (800bee8 <_write_r+0x24>)
 800bed2:	602b      	str	r3, [r5, #0]
 800bed4:	f7f7 fc29 	bl	800372a <_write>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d103      	bne.n	800bee4 <_write_r+0x20>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d000      	beq.n	800bee4 <_write_r+0x20>
 800bee2:	6023      	str	r3, [r4, #0]
 800bee4:	bd70      	pop	{r4, r5, r6, pc}
 800bee6:	46c0      	nop			; (mov r8, r8)
 800bee8:	20000498 	.word	0x20000498

0800beec <_close_r>:
 800beec:	2300      	movs	r3, #0
 800beee:	b570      	push	{r4, r5, r6, lr}
 800bef0:	4d06      	ldr	r5, [pc, #24]	; (800bf0c <_close_r+0x20>)
 800bef2:	0004      	movs	r4, r0
 800bef4:	0008      	movs	r0, r1
 800bef6:	602b      	str	r3, [r5, #0]
 800bef8:	f7f7 fc33 	bl	8003762 <_close>
 800befc:	1c43      	adds	r3, r0, #1
 800befe:	d103      	bne.n	800bf08 <_close_r+0x1c>
 800bf00:	682b      	ldr	r3, [r5, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d000      	beq.n	800bf08 <_close_r+0x1c>
 800bf06:	6023      	str	r3, [r4, #0]
 800bf08:	bd70      	pop	{r4, r5, r6, pc}
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	20000498 	.word	0x20000498

0800bf10 <_fstat_r>:
 800bf10:	2300      	movs	r3, #0
 800bf12:	b570      	push	{r4, r5, r6, lr}
 800bf14:	4d06      	ldr	r5, [pc, #24]	; (800bf30 <_fstat_r+0x20>)
 800bf16:	0004      	movs	r4, r0
 800bf18:	0008      	movs	r0, r1
 800bf1a:	0011      	movs	r1, r2
 800bf1c:	602b      	str	r3, [r5, #0]
 800bf1e:	f7f7 fc2a 	bl	8003776 <_fstat>
 800bf22:	1c43      	adds	r3, r0, #1
 800bf24:	d103      	bne.n	800bf2e <_fstat_r+0x1e>
 800bf26:	682b      	ldr	r3, [r5, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d000      	beq.n	800bf2e <_fstat_r+0x1e>
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	20000498 	.word	0x20000498

0800bf34 <_isatty_r>:
 800bf34:	2300      	movs	r3, #0
 800bf36:	b570      	push	{r4, r5, r6, lr}
 800bf38:	4d06      	ldr	r5, [pc, #24]	; (800bf54 <_isatty_r+0x20>)
 800bf3a:	0004      	movs	r4, r0
 800bf3c:	0008      	movs	r0, r1
 800bf3e:	602b      	str	r3, [r5, #0]
 800bf40:	f7f7 fc27 	bl	8003792 <_isatty>
 800bf44:	1c43      	adds	r3, r0, #1
 800bf46:	d103      	bne.n	800bf50 <_isatty_r+0x1c>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d000      	beq.n	800bf50 <_isatty_r+0x1c>
 800bf4e:	6023      	str	r3, [r4, #0]
 800bf50:	bd70      	pop	{r4, r5, r6, pc}
 800bf52:	46c0      	nop			; (mov r8, r8)
 800bf54:	20000498 	.word	0x20000498

0800bf58 <_lseek_r>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	0004      	movs	r4, r0
 800bf5c:	0008      	movs	r0, r1
 800bf5e:	0011      	movs	r1, r2
 800bf60:	001a      	movs	r2, r3
 800bf62:	2300      	movs	r3, #0
 800bf64:	4d05      	ldr	r5, [pc, #20]	; (800bf7c <_lseek_r+0x24>)
 800bf66:	602b      	str	r3, [r5, #0]
 800bf68:	f7f7 fc1c 	bl	80037a4 <_lseek>
 800bf6c:	1c43      	adds	r3, r0, #1
 800bf6e:	d103      	bne.n	800bf78 <_lseek_r+0x20>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d000      	beq.n	800bf78 <_lseek_r+0x20>
 800bf76:	6023      	str	r3, [r4, #0]
 800bf78:	bd70      	pop	{r4, r5, r6, pc}
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	20000498 	.word	0x20000498

0800bf80 <_read_r>:
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	0004      	movs	r4, r0
 800bf84:	0008      	movs	r0, r1
 800bf86:	0011      	movs	r1, r2
 800bf88:	001a      	movs	r2, r3
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	4d05      	ldr	r5, [pc, #20]	; (800bfa4 <_read_r+0x24>)
 800bf8e:	602b      	str	r3, [r5, #0]
 800bf90:	f7f7 fbae 	bl	80036f0 <_read>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d103      	bne.n	800bfa0 <_read_r+0x20>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d000      	beq.n	800bfa0 <_read_r+0x20>
 800bf9e:	6023      	str	r3, [r4, #0]
 800bfa0:	bd70      	pop	{r4, r5, r6, pc}
 800bfa2:	46c0      	nop			; (mov r8, r8)
 800bfa4:	20000498 	.word	0x20000498

0800bfa8 <_init>:
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	46c0      	nop			; (mov r8, r8)
 800bfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfae:	bc08      	pop	{r3}
 800bfb0:	469e      	mov	lr, r3
 800bfb2:	4770      	bx	lr

0800bfb4 <_fini>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	46c0      	nop			; (mov r8, r8)
 800bfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfba:	bc08      	pop	{r3}
 800bfbc:	469e      	mov	lr, r3
 800bfbe:	4770      	bx	lr
