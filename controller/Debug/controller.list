
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800b660  0800b660  0001b660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc14  0800bc14  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc14  0800bc14  0001bc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc1c  0800bc1c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc1c  0800bc1c  0001bc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc20  0800bc20  0001bc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bc24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001e0  0800be04  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  0800be04  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b58  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003642  00000000  00000000  00037d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0003b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a91e  00000000  00000000  0003d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d9b  00000000  00000000  0005810e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f6e8  00000000  00000000  00070ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d4  00000000  00000000  001105e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b644 	.word	0x0800b644

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800b644 	.word	0x0800b644

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f869 	bl	8001510 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffb9 	bl	80013c0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f85b 	bl	8001510 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f851 	bl	8001510 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffe1 	bl	8001444 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ffd7 	bl	8001444 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 fe89 	bl	8002210 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 fad2 	bl	8001ab0 <__aeabi_dsub>
 800050c:	f001 fe80 	bl	8002210 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 f837 	bl	80015d8 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f001 feb4 	bl	80022dc <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 f82e 	bl	80015d8 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fa94 	bl	8001ab0 <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f001 fe6d 	bl	800227c <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 f817 	bl	80015d8 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f001 fe94 	bl	80022dc <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 f8d0 	bl	800075c <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f001 ff46 	bl	8002474 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f001 ff41 	bl	8002474 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	469b      	mov	fp, r3
 80005fa:	d433      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fc:	465a      	mov	r2, fp
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83a      	bhi.n	8000686 <__udivmoddi4+0xc2>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e078      	b.n	8000708 <__udivmoddi4+0x144>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e075      	b.n	800070e <__udivmoddi4+0x14a>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e028      	b.n	800068e <__udivmoddi4+0xca>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	2320      	movs	r3, #32
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	4652      	mov	r2, sl
 800066c:	40da      	lsrs	r2, r3
 800066e:	4641      	mov	r1, r8
 8000670:	0013      	movs	r3, r2
 8000672:	464a      	mov	r2, r9
 8000674:	408a      	lsls	r2, r1
 8000676:	0017      	movs	r7, r2
 8000678:	4642      	mov	r2, r8
 800067a:	431f      	orrs	r7, r3
 800067c:	4653      	mov	r3, sl
 800067e:	4093      	lsls	r3, r2
 8000680:	001e      	movs	r6, r3
 8000682:	42af      	cmp	r7, r5
 8000684:	d9c4      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4643      	mov	r3, r8
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0d9      	beq.n	8000648 <__udivmoddi4+0x84>
 8000694:	07fb      	lsls	r3, r7, #31
 8000696:	0872      	lsrs	r2, r6, #1
 8000698:	431a      	orrs	r2, r3
 800069a:	4646      	mov	r6, r8
 800069c:	087b      	lsrs	r3, r7, #1
 800069e:	e00e      	b.n	80006be <__udivmoddi4+0xfa>
 80006a0:	42ab      	cmp	r3, r5
 80006a2:	d101      	bne.n	80006a8 <__udivmoddi4+0xe4>
 80006a4:	42a2      	cmp	r2, r4
 80006a6:	d80c      	bhi.n	80006c2 <__udivmoddi4+0xfe>
 80006a8:	1aa4      	subs	r4, r4, r2
 80006aa:	419d      	sbcs	r5, r3
 80006ac:	2001      	movs	r0, #1
 80006ae:	1924      	adds	r4, r4, r4
 80006b0:	416d      	adcs	r5, r5
 80006b2:	2100      	movs	r1, #0
 80006b4:	3e01      	subs	r6, #1
 80006b6:	1824      	adds	r4, r4, r0
 80006b8:	414d      	adcs	r5, r1
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d006      	beq.n	80006cc <__udivmoddi4+0x108>
 80006be:	42ab      	cmp	r3, r5
 80006c0:	d9ee      	bls.n	80006a0 <__udivmoddi4+0xdc>
 80006c2:	3e01      	subs	r6, #1
 80006c4:	1924      	adds	r4, r4, r4
 80006c6:	416d      	adcs	r5, r5
 80006c8:	2e00      	cmp	r6, #0
 80006ca:	d1f8      	bne.n	80006be <__udivmoddi4+0xfa>
 80006cc:	9800      	ldr	r0, [sp, #0]
 80006ce:	9901      	ldr	r1, [sp, #4]
 80006d0:	465b      	mov	r3, fp
 80006d2:	1900      	adds	r0, r0, r4
 80006d4:	4169      	adcs	r1, r5
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db24      	blt.n	8000724 <__udivmoddi4+0x160>
 80006da:	002b      	movs	r3, r5
 80006dc:	465a      	mov	r2, fp
 80006de:	4644      	mov	r4, r8
 80006e0:	40d3      	lsrs	r3, r2
 80006e2:	002a      	movs	r2, r5
 80006e4:	40e2      	lsrs	r2, r4
 80006e6:	001c      	movs	r4, r3
 80006e8:	465b      	mov	r3, fp
 80006ea:	0015      	movs	r5, r2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db2a      	blt.n	8000746 <__udivmoddi4+0x182>
 80006f0:	0026      	movs	r6, r4
 80006f2:	409e      	lsls	r6, r3
 80006f4:	0033      	movs	r3, r6
 80006f6:	0026      	movs	r6, r4
 80006f8:	4647      	mov	r7, r8
 80006fa:	40be      	lsls	r6, r7
 80006fc:	0032      	movs	r2, r6
 80006fe:	1a80      	subs	r0, r0, r2
 8000700:	4199      	sbcs	r1, r3
 8000702:	9000      	str	r0, [sp, #0]
 8000704:	9101      	str	r1, [sp, #4]
 8000706:	e79f      	b.n	8000648 <__udivmoddi4+0x84>
 8000708:	42a3      	cmp	r3, r4
 800070a:	d8bc      	bhi.n	8000686 <__udivmoddi4+0xc2>
 800070c:	e783      	b.n	8000616 <__udivmoddi4+0x52>
 800070e:	4642      	mov	r2, r8
 8000710:	2320      	movs	r3, #32
 8000712:	2100      	movs	r1, #0
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	2200      	movs	r2, #0
 8000718:	9100      	str	r1, [sp, #0]
 800071a:	9201      	str	r2, [sp, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	40da      	lsrs	r2, r3
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	e786      	b.n	8000632 <__udivmoddi4+0x6e>
 8000724:	4642      	mov	r2, r8
 8000726:	2320      	movs	r3, #32
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	002a      	movs	r2, r5
 800072c:	4646      	mov	r6, r8
 800072e:	409a      	lsls	r2, r3
 8000730:	0023      	movs	r3, r4
 8000732:	40f3      	lsrs	r3, r6
 8000734:	4644      	mov	r4, r8
 8000736:	4313      	orrs	r3, r2
 8000738:	002a      	movs	r2, r5
 800073a:	40e2      	lsrs	r2, r4
 800073c:	001c      	movs	r4, r3
 800073e:	465b      	mov	r3, fp
 8000740:	0015      	movs	r5, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	dad4      	bge.n	80006f0 <__udivmoddi4+0x12c>
 8000746:	4642      	mov	r2, r8
 8000748:	002f      	movs	r7, r5
 800074a:	2320      	movs	r3, #32
 800074c:	0026      	movs	r6, r4
 800074e:	4097      	lsls	r7, r2
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	40de      	lsrs	r6, r3
 8000754:	003b      	movs	r3, r7
 8000756:	4333      	orrs	r3, r6
 8000758:	e7cd      	b.n	80006f6 <__udivmoddi4+0x132>
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__aeabi_dadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	000d      	movs	r5, r1
 8000766:	0004      	movs	r4, r0
 8000768:	b5c0      	push	{r6, r7, lr}
 800076a:	001f      	movs	r7, r3
 800076c:	0011      	movs	r1, r2
 800076e:	0328      	lsls	r0, r5, #12
 8000770:	0f62      	lsrs	r2, r4, #29
 8000772:	0a40      	lsrs	r0, r0, #9
 8000774:	4310      	orrs	r0, r2
 8000776:	007a      	lsls	r2, r7, #1
 8000778:	0d52      	lsrs	r2, r2, #21
 800077a:	00e3      	lsls	r3, r4, #3
 800077c:	033c      	lsls	r4, r7, #12
 800077e:	4691      	mov	r9, r2
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	0ffa      	lsrs	r2, r7, #31
 8000784:	0f4f      	lsrs	r7, r1, #29
 8000786:	006e      	lsls	r6, r5, #1
 8000788:	4327      	orrs	r7, r4
 800078a:	4692      	mov	sl, r2
 800078c:	46b8      	mov	r8, r7
 800078e:	0d76      	lsrs	r6, r6, #21
 8000790:	0fed      	lsrs	r5, r5, #31
 8000792:	00c9      	lsls	r1, r1, #3
 8000794:	4295      	cmp	r5, r2
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x3e>
 8000798:	e099      	b.n	80008ce <__aeabi_dadd+0x172>
 800079a:	464c      	mov	r4, r9
 800079c:	1b34      	subs	r4, r6, r4
 800079e:	46a4      	mov	ip, r4
 80007a0:	2c00      	cmp	r4, #0
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_dadd+0x4a>
 80007a4:	e07c      	b.n	80008a0 <__aeabi_dadd+0x144>
 80007a6:	464a      	mov	r2, r9
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x52>
 80007ac:	e0b8      	b.n	8000920 <__aeabi_dadd+0x1c4>
 80007ae:	4ac5      	ldr	r2, [pc, #788]	; (8000ac4 <__aeabi_dadd+0x368>)
 80007b0:	4296      	cmp	r6, r2
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x5a>
 80007b4:	e11c      	b.n	80009f0 <__aeabi_dadd+0x294>
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	003c      	movs	r4, r7
 80007ba:	0412      	lsls	r2, r2, #16
 80007bc:	4314      	orrs	r4, r2
 80007be:	46a0      	mov	r8, r4
 80007c0:	4662      	mov	r2, ip
 80007c2:	2a38      	cmp	r2, #56	; 0x38
 80007c4:	dd00      	ble.n	80007c8 <__aeabi_dadd+0x6c>
 80007c6:	e161      	b.n	8000a8c <__aeabi_dadd+0x330>
 80007c8:	2a1f      	cmp	r2, #31
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0x72>
 80007cc:	e1cc      	b.n	8000b68 <__aeabi_dadd+0x40c>
 80007ce:	4664      	mov	r4, ip
 80007d0:	2220      	movs	r2, #32
 80007d2:	1b12      	subs	r2, r2, r4
 80007d4:	4644      	mov	r4, r8
 80007d6:	4094      	lsls	r4, r2
 80007d8:	000f      	movs	r7, r1
 80007da:	46a1      	mov	r9, r4
 80007dc:	4664      	mov	r4, ip
 80007de:	4091      	lsls	r1, r2
 80007e0:	40e7      	lsrs	r7, r4
 80007e2:	464c      	mov	r4, r9
 80007e4:	1e4a      	subs	r2, r1, #1
 80007e6:	4191      	sbcs	r1, r2
 80007e8:	433c      	orrs	r4, r7
 80007ea:	4642      	mov	r2, r8
 80007ec:	4321      	orrs	r1, r4
 80007ee:	4664      	mov	r4, ip
 80007f0:	40e2      	lsrs	r2, r4
 80007f2:	1a80      	subs	r0, r0, r2
 80007f4:	1a5c      	subs	r4, r3, r1
 80007f6:	42a3      	cmp	r3, r4
 80007f8:	419b      	sbcs	r3, r3
 80007fa:	425f      	negs	r7, r3
 80007fc:	1bc7      	subs	r7, r0, r7
 80007fe:	023b      	lsls	r3, r7, #8
 8000800:	d400      	bmi.n	8000804 <__aeabi_dadd+0xa8>
 8000802:	e0d0      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000804:	027f      	lsls	r7, r7, #9
 8000806:	0a7f      	lsrs	r7, r7, #9
 8000808:	2f00      	cmp	r7, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0xb2>
 800080c:	e0ff      	b.n	8000a0e <__aeabi_dadd+0x2b2>
 800080e:	0038      	movs	r0, r7
 8000810:	f001 fe12 	bl	8002438 <__clzsi2>
 8000814:	0001      	movs	r1, r0
 8000816:	3908      	subs	r1, #8
 8000818:	2320      	movs	r3, #32
 800081a:	0022      	movs	r2, r4
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	408f      	lsls	r7, r1
 8000820:	40da      	lsrs	r2, r3
 8000822:	408c      	lsls	r4, r1
 8000824:	4317      	orrs	r7, r2
 8000826:	42b1      	cmp	r1, r6
 8000828:	da00      	bge.n	800082c <__aeabi_dadd+0xd0>
 800082a:	e0ff      	b.n	8000a2c <__aeabi_dadd+0x2d0>
 800082c:	1b89      	subs	r1, r1, r6
 800082e:	1c4b      	adds	r3, r1, #1
 8000830:	2b1f      	cmp	r3, #31
 8000832:	dd00      	ble.n	8000836 <__aeabi_dadd+0xda>
 8000834:	e0a8      	b.n	8000988 <__aeabi_dadd+0x22c>
 8000836:	2220      	movs	r2, #32
 8000838:	0039      	movs	r1, r7
 800083a:	1ad2      	subs	r2, r2, r3
 800083c:	0020      	movs	r0, r4
 800083e:	4094      	lsls	r4, r2
 8000840:	4091      	lsls	r1, r2
 8000842:	40d8      	lsrs	r0, r3
 8000844:	1e62      	subs	r2, r4, #1
 8000846:	4194      	sbcs	r4, r2
 8000848:	40df      	lsrs	r7, r3
 800084a:	2600      	movs	r6, #0
 800084c:	4301      	orrs	r1, r0
 800084e:	430c      	orrs	r4, r1
 8000850:	0763      	lsls	r3, r4, #29
 8000852:	d009      	beq.n	8000868 <__aeabi_dadd+0x10c>
 8000854:	230f      	movs	r3, #15
 8000856:	4023      	ands	r3, r4
 8000858:	2b04      	cmp	r3, #4
 800085a:	d005      	beq.n	8000868 <__aeabi_dadd+0x10c>
 800085c:	1d23      	adds	r3, r4, #4
 800085e:	42a3      	cmp	r3, r4
 8000860:	41a4      	sbcs	r4, r4
 8000862:	4264      	negs	r4, r4
 8000864:	193f      	adds	r7, r7, r4
 8000866:	001c      	movs	r4, r3
 8000868:	023b      	lsls	r3, r7, #8
 800086a:	d400      	bmi.n	800086e <__aeabi_dadd+0x112>
 800086c:	e09e      	b.n	80009ac <__aeabi_dadd+0x250>
 800086e:	4b95      	ldr	r3, [pc, #596]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000870:	3601      	adds	r6, #1
 8000872:	429e      	cmp	r6, r3
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x11c>
 8000876:	e0b7      	b.n	80009e8 <__aeabi_dadd+0x28c>
 8000878:	4a93      	ldr	r2, [pc, #588]	; (8000ac8 <__aeabi_dadd+0x36c>)
 800087a:	08e4      	lsrs	r4, r4, #3
 800087c:	4017      	ands	r7, r2
 800087e:	077b      	lsls	r3, r7, #29
 8000880:	0571      	lsls	r1, r6, #21
 8000882:	027f      	lsls	r7, r7, #9
 8000884:	4323      	orrs	r3, r4
 8000886:	0b3f      	lsrs	r7, r7, #12
 8000888:	0d4a      	lsrs	r2, r1, #21
 800088a:	0512      	lsls	r2, r2, #20
 800088c:	433a      	orrs	r2, r7
 800088e:	07ed      	lsls	r5, r5, #31
 8000890:	432a      	orrs	r2, r5
 8000892:	0018      	movs	r0, r3
 8000894:	0011      	movs	r1, r2
 8000896:	bce0      	pop	{r5, r6, r7}
 8000898:	46ba      	mov	sl, r7
 800089a:	46b1      	mov	r9, r6
 800089c:	46a8      	mov	r8, r5
 800089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a0:	2c00      	cmp	r4, #0
 80008a2:	d04b      	beq.n	800093c <__aeabi_dadd+0x1e0>
 80008a4:	464c      	mov	r4, r9
 80008a6:	1ba4      	subs	r4, r4, r6
 80008a8:	46a4      	mov	ip, r4
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d000      	beq.n	80008b0 <__aeabi_dadd+0x154>
 80008ae:	e123      	b.n	8000af8 <__aeabi_dadd+0x39c>
 80008b0:	0004      	movs	r4, r0
 80008b2:	431c      	orrs	r4, r3
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x15c>
 80008b6:	e1af      	b.n	8000c18 <__aeabi_dadd+0x4bc>
 80008b8:	4662      	mov	r2, ip
 80008ba:	1e54      	subs	r4, r2, #1
 80008bc:	2a01      	cmp	r2, #1
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x166>
 80008c0:	e215      	b.n	8000cee <__aeabi_dadd+0x592>
 80008c2:	4d80      	ldr	r5, [pc, #512]	; (8000ac4 <__aeabi_dadd+0x368>)
 80008c4:	45ac      	cmp	ip, r5
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x16e>
 80008c8:	e1c8      	b.n	8000c5c <__aeabi_dadd+0x500>
 80008ca:	46a4      	mov	ip, r4
 80008cc:	e11b      	b.n	8000b06 <__aeabi_dadd+0x3aa>
 80008ce:	464a      	mov	r2, r9
 80008d0:	1ab2      	subs	r2, r6, r2
 80008d2:	4694      	mov	ip, r2
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	dc00      	bgt.n	80008da <__aeabi_dadd+0x17e>
 80008d8:	e0ac      	b.n	8000a34 <__aeabi_dadd+0x2d8>
 80008da:	464a      	mov	r2, r9
 80008dc:	2a00      	cmp	r2, #0
 80008de:	d043      	beq.n	8000968 <__aeabi_dadd+0x20c>
 80008e0:	4a78      	ldr	r2, [pc, #480]	; (8000ac4 <__aeabi_dadd+0x368>)
 80008e2:	4296      	cmp	r6, r2
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x18c>
 80008e6:	e1af      	b.n	8000c48 <__aeabi_dadd+0x4ec>
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	003c      	movs	r4, r7
 80008ec:	0412      	lsls	r2, r2, #16
 80008ee:	4314      	orrs	r4, r2
 80008f0:	46a0      	mov	r8, r4
 80008f2:	4662      	mov	r2, ip
 80008f4:	2a38      	cmp	r2, #56	; 0x38
 80008f6:	dc67      	bgt.n	80009c8 <__aeabi_dadd+0x26c>
 80008f8:	2a1f      	cmp	r2, #31
 80008fa:	dc00      	bgt.n	80008fe <__aeabi_dadd+0x1a2>
 80008fc:	e15f      	b.n	8000bbe <__aeabi_dadd+0x462>
 80008fe:	4647      	mov	r7, r8
 8000900:	3a20      	subs	r2, #32
 8000902:	40d7      	lsrs	r7, r2
 8000904:	4662      	mov	r2, ip
 8000906:	2a20      	cmp	r2, #32
 8000908:	d005      	beq.n	8000916 <__aeabi_dadd+0x1ba>
 800090a:	4664      	mov	r4, ip
 800090c:	2240      	movs	r2, #64	; 0x40
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	4321      	orrs	r1, r4
 8000916:	1e4a      	subs	r2, r1, #1
 8000918:	4191      	sbcs	r1, r2
 800091a:	000c      	movs	r4, r1
 800091c:	433c      	orrs	r4, r7
 800091e:	e057      	b.n	80009d0 <__aeabi_dadd+0x274>
 8000920:	003a      	movs	r2, r7
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x1cc>
 8000926:	e105      	b.n	8000b34 <__aeabi_dadd+0x3d8>
 8000928:	0022      	movs	r2, r4
 800092a:	3a01      	subs	r2, #1
 800092c:	2c01      	cmp	r4, #1
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x1d6>
 8000930:	e182      	b.n	8000c38 <__aeabi_dadd+0x4dc>
 8000932:	4c64      	ldr	r4, [pc, #400]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000934:	45a4      	cmp	ip, r4
 8000936:	d05b      	beq.n	80009f0 <__aeabi_dadd+0x294>
 8000938:	4694      	mov	ip, r2
 800093a:	e741      	b.n	80007c0 <__aeabi_dadd+0x64>
 800093c:	4c63      	ldr	r4, [pc, #396]	; (8000acc <__aeabi_dadd+0x370>)
 800093e:	1c77      	adds	r7, r6, #1
 8000940:	4227      	tst	r7, r4
 8000942:	d000      	beq.n	8000946 <__aeabi_dadd+0x1ea>
 8000944:	e0c4      	b.n	8000ad0 <__aeabi_dadd+0x374>
 8000946:	0004      	movs	r4, r0
 8000948:	431c      	orrs	r4, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d000      	beq.n	8000950 <__aeabi_dadd+0x1f4>
 800094e:	e169      	b.n	8000c24 <__aeabi_dadd+0x4c8>
 8000950:	2c00      	cmp	r4, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x1fa>
 8000954:	e1bf      	b.n	8000cd6 <__aeabi_dadd+0x57a>
 8000956:	4644      	mov	r4, r8
 8000958:	430c      	orrs	r4, r1
 800095a:	d000      	beq.n	800095e <__aeabi_dadd+0x202>
 800095c:	e1d0      	b.n	8000d00 <__aeabi_dadd+0x5a4>
 800095e:	0742      	lsls	r2, r0, #29
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	4313      	orrs	r3, r2
 8000964:	08c0      	lsrs	r0, r0, #3
 8000966:	e029      	b.n	80009bc <__aeabi_dadd+0x260>
 8000968:	003a      	movs	r2, r7
 800096a:	430a      	orrs	r2, r1
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x214>
 800096e:	e170      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 8000970:	4662      	mov	r2, ip
 8000972:	4664      	mov	r4, ip
 8000974:	3a01      	subs	r2, #1
 8000976:	2c01      	cmp	r4, #1
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x220>
 800097a:	e0e0      	b.n	8000b3e <__aeabi_dadd+0x3e2>
 800097c:	4c51      	ldr	r4, [pc, #324]	; (8000ac4 <__aeabi_dadd+0x368>)
 800097e:	45a4      	cmp	ip, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x228>
 8000982:	e161      	b.n	8000c48 <__aeabi_dadd+0x4ec>
 8000984:	4694      	mov	ip, r2
 8000986:	e7b4      	b.n	80008f2 <__aeabi_dadd+0x196>
 8000988:	003a      	movs	r2, r7
 800098a:	391f      	subs	r1, #31
 800098c:	40ca      	lsrs	r2, r1
 800098e:	0011      	movs	r1, r2
 8000990:	2b20      	cmp	r3, #32
 8000992:	d003      	beq.n	800099c <__aeabi_dadd+0x240>
 8000994:	2240      	movs	r2, #64	; 0x40
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	409f      	lsls	r7, r3
 800099a:	433c      	orrs	r4, r7
 800099c:	1e63      	subs	r3, r4, #1
 800099e:	419c      	sbcs	r4, r3
 80009a0:	2700      	movs	r7, #0
 80009a2:	2600      	movs	r6, #0
 80009a4:	430c      	orrs	r4, r1
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x250>
 80009aa:	e753      	b.n	8000854 <__aeabi_dadd+0xf8>
 80009ac:	46b4      	mov	ip, r6
 80009ae:	08e4      	lsrs	r4, r4, #3
 80009b0:	077b      	lsls	r3, r7, #29
 80009b2:	4323      	orrs	r3, r4
 80009b4:	08f8      	lsrs	r0, r7, #3
 80009b6:	4a43      	ldr	r2, [pc, #268]	; (8000ac4 <__aeabi_dadd+0x368>)
 80009b8:	4594      	cmp	ip, r2
 80009ba:	d01d      	beq.n	80009f8 <__aeabi_dadd+0x29c>
 80009bc:	4662      	mov	r2, ip
 80009be:	0307      	lsls	r7, r0, #12
 80009c0:	0552      	lsls	r2, r2, #21
 80009c2:	0b3f      	lsrs	r7, r7, #12
 80009c4:	0d52      	lsrs	r2, r2, #21
 80009c6:	e760      	b.n	800088a <__aeabi_dadd+0x12e>
 80009c8:	4644      	mov	r4, r8
 80009ca:	430c      	orrs	r4, r1
 80009cc:	1e62      	subs	r2, r4, #1
 80009ce:	4194      	sbcs	r4, r2
 80009d0:	18e4      	adds	r4, r4, r3
 80009d2:	429c      	cmp	r4, r3
 80009d4:	419b      	sbcs	r3, r3
 80009d6:	425f      	negs	r7, r3
 80009d8:	183f      	adds	r7, r7, r0
 80009da:	023b      	lsls	r3, r7, #8
 80009dc:	d5e3      	bpl.n	80009a6 <__aeabi_dadd+0x24a>
 80009de:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <__aeabi_dadd+0x368>)
 80009e0:	3601      	adds	r6, #1
 80009e2:	429e      	cmp	r6, r3
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dadd+0x28c>
 80009e6:	e0b5      	b.n	8000b54 <__aeabi_dadd+0x3f8>
 80009e8:	0032      	movs	r2, r6
 80009ea:	2700      	movs	r7, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	e74c      	b.n	800088a <__aeabi_dadd+0x12e>
 80009f0:	0742      	lsls	r2, r0, #29
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	08c0      	lsrs	r0, r0, #3
 80009f8:	001a      	movs	r2, r3
 80009fa:	4302      	orrs	r2, r0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_dadd+0x2a4>
 80009fe:	e1e1      	b.n	8000dc4 <__aeabi_dadd+0x668>
 8000a00:	2780      	movs	r7, #128	; 0x80
 8000a02:	033f      	lsls	r7, r7, #12
 8000a04:	4307      	orrs	r7, r0
 8000a06:	033f      	lsls	r7, r7, #12
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000a0a:	0b3f      	lsrs	r7, r7, #12
 8000a0c:	e73d      	b.n	800088a <__aeabi_dadd+0x12e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f001 fd12 	bl	8002438 <__clzsi2>
 8000a14:	0001      	movs	r1, r0
 8000a16:	3118      	adds	r1, #24
 8000a18:	291f      	cmp	r1, #31
 8000a1a:	dc00      	bgt.n	8000a1e <__aeabi_dadd+0x2c2>
 8000a1c:	e6fc      	b.n	8000818 <__aeabi_dadd+0xbc>
 8000a1e:	3808      	subs	r0, #8
 8000a20:	4084      	lsls	r4, r0
 8000a22:	0027      	movs	r7, r4
 8000a24:	2400      	movs	r4, #0
 8000a26:	42b1      	cmp	r1, r6
 8000a28:	db00      	blt.n	8000a2c <__aeabi_dadd+0x2d0>
 8000a2a:	e6ff      	b.n	800082c <__aeabi_dadd+0xd0>
 8000a2c:	4a26      	ldr	r2, [pc, #152]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a2e:	1a76      	subs	r6, r6, r1
 8000a30:	4017      	ands	r7, r2
 8000a32:	e70d      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000a34:	2a00      	cmp	r2, #0
 8000a36:	d02f      	beq.n	8000a98 <__aeabi_dadd+0x33c>
 8000a38:	464a      	mov	r2, r9
 8000a3a:	1b92      	subs	r2, r2, r6
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x2e8>
 8000a42:	e0ad      	b.n	8000ba0 <__aeabi_dadd+0x444>
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000a46:	4591      	cmp	r9, r2
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x2f0>
 8000a4a:	e10f      	b.n	8000c6c <__aeabi_dadd+0x510>
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	0412      	lsls	r2, r2, #16
 8000a50:	4310      	orrs	r0, r2
 8000a52:	4662      	mov	r2, ip
 8000a54:	2a38      	cmp	r2, #56	; 0x38
 8000a56:	dd00      	ble.n	8000a5a <__aeabi_dadd+0x2fe>
 8000a58:	e10f      	b.n	8000c7a <__aeabi_dadd+0x51e>
 8000a5a:	2a1f      	cmp	r2, #31
 8000a5c:	dd00      	ble.n	8000a60 <__aeabi_dadd+0x304>
 8000a5e:	e180      	b.n	8000d62 <__aeabi_dadd+0x606>
 8000a60:	4664      	mov	r4, ip
 8000a62:	2220      	movs	r2, #32
 8000a64:	001e      	movs	r6, r3
 8000a66:	1b12      	subs	r2, r2, r4
 8000a68:	4667      	mov	r7, ip
 8000a6a:	0004      	movs	r4, r0
 8000a6c:	4093      	lsls	r3, r2
 8000a6e:	4094      	lsls	r4, r2
 8000a70:	40fe      	lsrs	r6, r7
 8000a72:	1e5a      	subs	r2, r3, #1
 8000a74:	4193      	sbcs	r3, r2
 8000a76:	40f8      	lsrs	r0, r7
 8000a78:	4334      	orrs	r4, r6
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	4480      	add	r8, r0
 8000a7e:	1864      	adds	r4, r4, r1
 8000a80:	428c      	cmp	r4, r1
 8000a82:	41bf      	sbcs	r7, r7
 8000a84:	427f      	negs	r7, r7
 8000a86:	464e      	mov	r6, r9
 8000a88:	4447      	add	r7, r8
 8000a8a:	e7a6      	b.n	80009da <__aeabi_dadd+0x27e>
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	0011      	movs	r1, r2
 8000a92:	1e4a      	subs	r2, r1, #1
 8000a94:	4191      	sbcs	r1, r2
 8000a96:	e6ad      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000a98:	4c0c      	ldr	r4, [pc, #48]	; (8000acc <__aeabi_dadd+0x370>)
 8000a9a:	1c72      	adds	r2, r6, #1
 8000a9c:	4222      	tst	r2, r4
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_dadd+0x346>
 8000aa0:	e0a1      	b.n	8000be6 <__aeabi_dadd+0x48a>
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d000      	beq.n	8000aac <__aeabi_dadd+0x350>
 8000aaa:	e0fa      	b.n	8000ca2 <__aeabi_dadd+0x546>
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x356>
 8000ab0:	e145      	b.n	8000d3e <__aeabi_dadd+0x5e2>
 8000ab2:	003a      	movs	r2, r7
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	d000      	beq.n	8000aba <__aeabi_dadd+0x35e>
 8000ab8:	e146      	b.n	8000d48 <__aeabi_dadd+0x5ec>
 8000aba:	0742      	lsls	r2, r0, #29
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	08c0      	lsrs	r0, r0, #3
 8000ac2:	e77b      	b.n	80009bc <__aeabi_dadd+0x260>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff
 8000acc:	000007fe 	.word	0x000007fe
 8000ad0:	4647      	mov	r7, r8
 8000ad2:	1a5c      	subs	r4, r3, r1
 8000ad4:	1bc2      	subs	r2, r0, r7
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	41bf      	sbcs	r7, r7
 8000ada:	427f      	negs	r7, r7
 8000adc:	46b9      	mov	r9, r7
 8000ade:	0017      	movs	r7, r2
 8000ae0:	464a      	mov	r2, r9
 8000ae2:	1abf      	subs	r7, r7, r2
 8000ae4:	023a      	lsls	r2, r7, #8
 8000ae6:	d500      	bpl.n	8000aea <__aeabi_dadd+0x38e>
 8000ae8:	e08d      	b.n	8000c06 <__aeabi_dadd+0x4aa>
 8000aea:	0023      	movs	r3, r4
 8000aec:	433b      	orrs	r3, r7
 8000aee:	d000      	beq.n	8000af2 <__aeabi_dadd+0x396>
 8000af0:	e68a      	b.n	8000808 <__aeabi_dadd+0xac>
 8000af2:	2000      	movs	r0, #0
 8000af4:	2500      	movs	r5, #0
 8000af6:	e761      	b.n	80009bc <__aeabi_dadd+0x260>
 8000af8:	4cb4      	ldr	r4, [pc, #720]	; (8000dcc <__aeabi_dadd+0x670>)
 8000afa:	45a1      	cmp	r9, r4
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dadd+0x3a4>
 8000afe:	e0ad      	b.n	8000c5c <__aeabi_dadd+0x500>
 8000b00:	2480      	movs	r4, #128	; 0x80
 8000b02:	0424      	lsls	r4, r4, #16
 8000b04:	4320      	orrs	r0, r4
 8000b06:	4664      	mov	r4, ip
 8000b08:	2c38      	cmp	r4, #56	; 0x38
 8000b0a:	dc3d      	bgt.n	8000b88 <__aeabi_dadd+0x42c>
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	2c1f      	cmp	r4, #31
 8000b10:	dd00      	ble.n	8000b14 <__aeabi_dadd+0x3b8>
 8000b12:	e0b7      	b.n	8000c84 <__aeabi_dadd+0x528>
 8000b14:	2520      	movs	r5, #32
 8000b16:	001e      	movs	r6, r3
 8000b18:	1b2d      	subs	r5, r5, r4
 8000b1a:	0004      	movs	r4, r0
 8000b1c:	40ab      	lsls	r3, r5
 8000b1e:	40ac      	lsls	r4, r5
 8000b20:	40d6      	lsrs	r6, r2
 8000b22:	40d0      	lsrs	r0, r2
 8000b24:	4642      	mov	r2, r8
 8000b26:	1e5d      	subs	r5, r3, #1
 8000b28:	41ab      	sbcs	r3, r5
 8000b2a:	4334      	orrs	r4, r6
 8000b2c:	1a12      	subs	r2, r2, r0
 8000b2e:	4690      	mov	r8, r2
 8000b30:	4323      	orrs	r3, r4
 8000b32:	e02c      	b.n	8000b8e <__aeabi_dadd+0x432>
 8000b34:	0742      	lsls	r2, r0, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c0      	lsrs	r0, r0, #3
 8000b3c:	e73b      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000b3e:	185c      	adds	r4, r3, r1
 8000b40:	429c      	cmp	r4, r3
 8000b42:	419b      	sbcs	r3, r3
 8000b44:	4440      	add	r0, r8
 8000b46:	425b      	negs	r3, r3
 8000b48:	18c7      	adds	r7, r0, r3
 8000b4a:	2601      	movs	r6, #1
 8000b4c:	023b      	lsls	r3, r7, #8
 8000b4e:	d400      	bmi.n	8000b52 <__aeabi_dadd+0x3f6>
 8000b50:	e729      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000b52:	2602      	movs	r6, #2
 8000b54:	4a9e      	ldr	r2, [pc, #632]	; (8000dd0 <__aeabi_dadd+0x674>)
 8000b56:	0863      	lsrs	r3, r4, #1
 8000b58:	4017      	ands	r7, r2
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4014      	ands	r4, r2
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	07fb      	lsls	r3, r7, #31
 8000b62:	431c      	orrs	r4, r3
 8000b64:	087f      	lsrs	r7, r7, #1
 8000b66:	e673      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000b68:	4644      	mov	r4, r8
 8000b6a:	3a20      	subs	r2, #32
 8000b6c:	40d4      	lsrs	r4, r2
 8000b6e:	4662      	mov	r2, ip
 8000b70:	2a20      	cmp	r2, #32
 8000b72:	d005      	beq.n	8000b80 <__aeabi_dadd+0x424>
 8000b74:	4667      	mov	r7, ip
 8000b76:	2240      	movs	r2, #64	; 0x40
 8000b78:	1bd2      	subs	r2, r2, r7
 8000b7a:	4647      	mov	r7, r8
 8000b7c:	4097      	lsls	r7, r2
 8000b7e:	4339      	orrs	r1, r7
 8000b80:	1e4a      	subs	r2, r1, #1
 8000b82:	4191      	sbcs	r1, r2
 8000b84:	4321      	orrs	r1, r4
 8000b86:	e635      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000b88:	4303      	orrs	r3, r0
 8000b8a:	1e58      	subs	r0, r3, #1
 8000b8c:	4183      	sbcs	r3, r0
 8000b8e:	1acc      	subs	r4, r1, r3
 8000b90:	42a1      	cmp	r1, r4
 8000b92:	41bf      	sbcs	r7, r7
 8000b94:	4643      	mov	r3, r8
 8000b96:	427f      	negs	r7, r7
 8000b98:	4655      	mov	r5, sl
 8000b9a:	464e      	mov	r6, r9
 8000b9c:	1bdf      	subs	r7, r3, r7
 8000b9e:	e62e      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_dadd+0x44c>
 8000ba6:	e0bd      	b.n	8000d24 <__aeabi_dadd+0x5c8>
 8000ba8:	4662      	mov	r2, ip
 8000baa:	4664      	mov	r4, ip
 8000bac:	3a01      	subs	r2, #1
 8000bae:	2c01      	cmp	r4, #1
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x458>
 8000bb2:	e0e5      	b.n	8000d80 <__aeabi_dadd+0x624>
 8000bb4:	4c85      	ldr	r4, [pc, #532]	; (8000dcc <__aeabi_dadd+0x670>)
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d058      	beq.n	8000c6c <__aeabi_dadd+0x510>
 8000bba:	4694      	mov	ip, r2
 8000bbc:	e749      	b.n	8000a52 <__aeabi_dadd+0x2f6>
 8000bbe:	4664      	mov	r4, ip
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	1b12      	subs	r2, r2, r4
 8000bc4:	4644      	mov	r4, r8
 8000bc6:	4094      	lsls	r4, r2
 8000bc8:	000f      	movs	r7, r1
 8000bca:	46a1      	mov	r9, r4
 8000bcc:	4664      	mov	r4, ip
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	40e7      	lsrs	r7, r4
 8000bd2:	464c      	mov	r4, r9
 8000bd4:	1e4a      	subs	r2, r1, #1
 8000bd6:	4191      	sbcs	r1, r2
 8000bd8:	433c      	orrs	r4, r7
 8000bda:	4642      	mov	r2, r8
 8000bdc:	430c      	orrs	r4, r1
 8000bde:	4661      	mov	r1, ip
 8000be0:	40ca      	lsrs	r2, r1
 8000be2:	1880      	adds	r0, r0, r2
 8000be4:	e6f4      	b.n	80009d0 <__aeabi_dadd+0x274>
 8000be6:	4c79      	ldr	r4, [pc, #484]	; (8000dcc <__aeabi_dadd+0x670>)
 8000be8:	42a2      	cmp	r2, r4
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x492>
 8000bec:	e6fd      	b.n	80009ea <__aeabi_dadd+0x28e>
 8000bee:	1859      	adds	r1, r3, r1
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	419b      	sbcs	r3, r3
 8000bf4:	4440      	add	r0, r8
 8000bf6:	425f      	negs	r7, r3
 8000bf8:	19c7      	adds	r7, r0, r7
 8000bfa:	07fc      	lsls	r4, r7, #31
 8000bfc:	0849      	lsrs	r1, r1, #1
 8000bfe:	0016      	movs	r6, r2
 8000c00:	430c      	orrs	r4, r1
 8000c02:	087f      	lsrs	r7, r7, #1
 8000c04:	e6cf      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000c06:	1acc      	subs	r4, r1, r3
 8000c08:	42a1      	cmp	r1, r4
 8000c0a:	41bf      	sbcs	r7, r7
 8000c0c:	4643      	mov	r3, r8
 8000c0e:	427f      	negs	r7, r7
 8000c10:	1a18      	subs	r0, r3, r0
 8000c12:	4655      	mov	r5, sl
 8000c14:	1bc7      	subs	r7, r0, r7
 8000c16:	e5f7      	b.n	8000808 <__aeabi_dadd+0xac>
 8000c18:	08c9      	lsrs	r1, r1, #3
 8000c1a:	077b      	lsls	r3, r7, #29
 8000c1c:	4655      	mov	r5, sl
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	08f8      	lsrs	r0, r7, #3
 8000c22:	e6c8      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_dadd+0x4ce>
 8000c28:	e081      	b.n	8000d2e <__aeabi_dadd+0x5d2>
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	d115      	bne.n	8000c5c <__aeabi_dadd+0x500>
 8000c30:	2080      	movs	r0, #128	; 0x80
 8000c32:	2500      	movs	r5, #0
 8000c34:	0300      	lsls	r0, r0, #12
 8000c36:	e6e3      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c38:	1a5c      	subs	r4, r3, r1
 8000c3a:	42a3      	cmp	r3, r4
 8000c3c:	419b      	sbcs	r3, r3
 8000c3e:	1bc7      	subs	r7, r0, r7
 8000c40:	425b      	negs	r3, r3
 8000c42:	2601      	movs	r6, #1
 8000c44:	1aff      	subs	r7, r7, r3
 8000c46:	e5da      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000c48:	0742      	lsls	r2, r0, #29
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	08c0      	lsrs	r0, r0, #3
 8000c50:	e6d2      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c52:	0742      	lsls	r2, r0, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c0      	lsrs	r0, r0, #3
 8000c5a:	e6ac      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000c5c:	4643      	mov	r3, r8
 8000c5e:	4642      	mov	r2, r8
 8000c60:	08c9      	lsrs	r1, r1, #3
 8000c62:	075b      	lsls	r3, r3, #29
 8000c64:	4655      	mov	r5, sl
 8000c66:	430b      	orrs	r3, r1
 8000c68:	08d0      	lsrs	r0, r2, #3
 8000c6a:	e6c5      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	4642      	mov	r2, r8
 8000c70:	075b      	lsls	r3, r3, #29
 8000c72:	08c9      	lsrs	r1, r1, #3
 8000c74:	430b      	orrs	r3, r1
 8000c76:	08d0      	lsrs	r0, r2, #3
 8000c78:	e6be      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c7a:	4303      	orrs	r3, r0
 8000c7c:	001c      	movs	r4, r3
 8000c7e:	1e63      	subs	r3, r4, #1
 8000c80:	419c      	sbcs	r4, r3
 8000c82:	e6fc      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000c84:	0002      	movs	r2, r0
 8000c86:	3c20      	subs	r4, #32
 8000c88:	40e2      	lsrs	r2, r4
 8000c8a:	0014      	movs	r4, r2
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d003      	beq.n	8000c9a <__aeabi_dadd+0x53e>
 8000c92:	2540      	movs	r5, #64	; 0x40
 8000c94:	1aad      	subs	r5, r5, r2
 8000c96:	40a8      	lsls	r0, r5
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	1e58      	subs	r0, r3, #1
 8000c9c:	4183      	sbcs	r3, r0
 8000c9e:	4323      	orrs	r3, r4
 8000ca0:	e775      	b.n	8000b8e <__aeabi_dadd+0x432>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d0e2      	beq.n	8000c6c <__aeabi_dadd+0x510>
 8000ca6:	003a      	movs	r2, r7
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	d0cd      	beq.n	8000c48 <__aeabi_dadd+0x4ec>
 8000cac:	0742      	lsls	r2, r0, #29
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	08c0      	lsrs	r0, r0, #3
 8000cb6:	0312      	lsls	r2, r2, #12
 8000cb8:	4210      	tst	r0, r2
 8000cba:	d006      	beq.n	8000cca <__aeabi_dadd+0x56e>
 8000cbc:	08fc      	lsrs	r4, r7, #3
 8000cbe:	4214      	tst	r4, r2
 8000cc0:	d103      	bne.n	8000cca <__aeabi_dadd+0x56e>
 8000cc2:	0020      	movs	r0, r4
 8000cc4:	08cb      	lsrs	r3, r1, #3
 8000cc6:	077a      	lsls	r2, r7, #29
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	0f5a      	lsrs	r2, r3, #29
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	0752      	lsls	r2, r2, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	e690      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x582>
 8000cdc:	e709      	b.n	8000af2 <__aeabi_dadd+0x396>
 8000cde:	4643      	mov	r3, r8
 8000ce0:	4642      	mov	r2, r8
 8000ce2:	08c9      	lsrs	r1, r1, #3
 8000ce4:	075b      	lsls	r3, r3, #29
 8000ce6:	4655      	mov	r5, sl
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	08d0      	lsrs	r0, r2, #3
 8000cec:	e666      	b.n	80009bc <__aeabi_dadd+0x260>
 8000cee:	1acc      	subs	r4, r1, r3
 8000cf0:	42a1      	cmp	r1, r4
 8000cf2:	4189      	sbcs	r1, r1
 8000cf4:	1a3f      	subs	r7, r7, r0
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	4655      	mov	r5, sl
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	1a7f      	subs	r7, r7, r1
 8000cfe:	e57e      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000d00:	4642      	mov	r2, r8
 8000d02:	1a5c      	subs	r4, r3, r1
 8000d04:	1a87      	subs	r7, r0, r2
 8000d06:	42a3      	cmp	r3, r4
 8000d08:	4192      	sbcs	r2, r2
 8000d0a:	4252      	negs	r2, r2
 8000d0c:	1abf      	subs	r7, r7, r2
 8000d0e:	023a      	lsls	r2, r7, #8
 8000d10:	d53d      	bpl.n	8000d8e <__aeabi_dadd+0x632>
 8000d12:	1acc      	subs	r4, r1, r3
 8000d14:	42a1      	cmp	r1, r4
 8000d16:	4189      	sbcs	r1, r1
 8000d18:	4643      	mov	r3, r8
 8000d1a:	4249      	negs	r1, r1
 8000d1c:	1a1f      	subs	r7, r3, r0
 8000d1e:	4655      	mov	r5, sl
 8000d20:	1a7f      	subs	r7, r7, r1
 8000d22:	e595      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000d24:	077b      	lsls	r3, r7, #29
 8000d26:	08c9      	lsrs	r1, r1, #3
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	08f8      	lsrs	r0, r7, #3
 8000d2c:	e643      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000d2e:	4644      	mov	r4, r8
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	430c      	orrs	r4, r1
 8000d34:	d130      	bne.n	8000d98 <__aeabi_dadd+0x63c>
 8000d36:	0742      	lsls	r2, r0, #29
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	08c0      	lsrs	r0, r0, #3
 8000d3c:	e65c      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000d3e:	077b      	lsls	r3, r7, #29
 8000d40:	08c9      	lsrs	r1, r1, #3
 8000d42:	430b      	orrs	r3, r1
 8000d44:	08f8      	lsrs	r0, r7, #3
 8000d46:	e639      	b.n	80009bc <__aeabi_dadd+0x260>
 8000d48:	185c      	adds	r4, r3, r1
 8000d4a:	429c      	cmp	r4, r3
 8000d4c:	419b      	sbcs	r3, r3
 8000d4e:	4440      	add	r0, r8
 8000d50:	425b      	negs	r3, r3
 8000d52:	18c7      	adds	r7, r0, r3
 8000d54:	023b      	lsls	r3, r7, #8
 8000d56:	d400      	bmi.n	8000d5a <__aeabi_dadd+0x5fe>
 8000d58:	e625      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <__aeabi_dadd+0x674>)
 8000d5c:	2601      	movs	r6, #1
 8000d5e:	401f      	ands	r7, r3
 8000d60:	e621      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d62:	0004      	movs	r4, r0
 8000d64:	3a20      	subs	r2, #32
 8000d66:	40d4      	lsrs	r4, r2
 8000d68:	4662      	mov	r2, ip
 8000d6a:	2a20      	cmp	r2, #32
 8000d6c:	d004      	beq.n	8000d78 <__aeabi_dadd+0x61c>
 8000d6e:	2240      	movs	r2, #64	; 0x40
 8000d70:	4666      	mov	r6, ip
 8000d72:	1b92      	subs	r2, r2, r6
 8000d74:	4090      	lsls	r0, r2
 8000d76:	4303      	orrs	r3, r0
 8000d78:	1e5a      	subs	r2, r3, #1
 8000d7a:	4193      	sbcs	r3, r2
 8000d7c:	431c      	orrs	r4, r3
 8000d7e:	e67e      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000d80:	185c      	adds	r4, r3, r1
 8000d82:	428c      	cmp	r4, r1
 8000d84:	4189      	sbcs	r1, r1
 8000d86:	4440      	add	r0, r8
 8000d88:	4249      	negs	r1, r1
 8000d8a:	1847      	adds	r7, r0, r1
 8000d8c:	e6dd      	b.n	8000b4a <__aeabi_dadd+0x3ee>
 8000d8e:	0023      	movs	r3, r4
 8000d90:	433b      	orrs	r3, r7
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x63a>
 8000d94:	e6ad      	b.n	8000af2 <__aeabi_dadd+0x396>
 8000d96:	e606      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d98:	0744      	lsls	r4, r0, #29
 8000d9a:	4323      	orrs	r3, r4
 8000d9c:	2480      	movs	r4, #128	; 0x80
 8000d9e:	08c0      	lsrs	r0, r0, #3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	4220      	tst	r0, r4
 8000da4:	d008      	beq.n	8000db8 <__aeabi_dadd+0x65c>
 8000da6:	4642      	mov	r2, r8
 8000da8:	08d6      	lsrs	r6, r2, #3
 8000daa:	4226      	tst	r6, r4
 8000dac:	d104      	bne.n	8000db8 <__aeabi_dadd+0x65c>
 8000dae:	4655      	mov	r5, sl
 8000db0:	0030      	movs	r0, r6
 8000db2:	08cb      	lsrs	r3, r1, #3
 8000db4:	0751      	lsls	r1, r2, #29
 8000db6:	430b      	orrs	r3, r1
 8000db8:	0f5a      	lsrs	r2, r3, #29
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	0752      	lsls	r2, r2, #29
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	e619      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	4a01      	ldr	r2, [pc, #4]	; (8000dcc <__aeabi_dadd+0x670>)
 8000dc8:	001f      	movs	r7, r3
 8000dca:	e55e      	b.n	800088a <__aeabi_dadd+0x12e>
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	ff7fffff 	.word	0xff7fffff

08000dd4 <__aeabi_ddiv>:
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	4657      	mov	r7, sl
 8000dd8:	464e      	mov	r6, r9
 8000dda:	4645      	mov	r5, r8
 8000ddc:	46de      	mov	lr, fp
 8000dde:	b5e0      	push	{r5, r6, r7, lr}
 8000de0:	4681      	mov	r9, r0
 8000de2:	0005      	movs	r5, r0
 8000de4:	030c      	lsls	r4, r1, #12
 8000de6:	0048      	lsls	r0, r1, #1
 8000de8:	4692      	mov	sl, r2
 8000dea:	001f      	movs	r7, r3
 8000dec:	b085      	sub	sp, #20
 8000dee:	0b24      	lsrs	r4, r4, #12
 8000df0:	0d40      	lsrs	r0, r0, #21
 8000df2:	0fce      	lsrs	r6, r1, #31
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_ddiv+0x26>
 8000df8:	e156      	b.n	80010a8 <__aeabi_ddiv+0x2d4>
 8000dfa:	4bd4      	ldr	r3, [pc, #848]	; (800114c <__aeabi_ddiv+0x378>)
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e>
 8000e00:	e172      	b.n	80010e8 <__aeabi_ddiv+0x314>
 8000e02:	0f6b      	lsrs	r3, r5, #29
 8000e04:	00e4      	lsls	r4, r4, #3
 8000e06:	431c      	orrs	r4, r3
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	041b      	lsls	r3, r3, #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	4698      	mov	r8, r3
 8000e10:	4bcf      	ldr	r3, [pc, #828]	; (8001150 <__aeabi_ddiv+0x37c>)
 8000e12:	00ed      	lsls	r5, r5, #3
 8000e14:	469b      	mov	fp, r3
 8000e16:	2300      	movs	r3, #0
 8000e18:	4699      	mov	r9, r3
 8000e1a:	4483      	add	fp, r0
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	033c      	lsls	r4, r7, #12
 8000e20:	007b      	lsls	r3, r7, #1
 8000e22:	4650      	mov	r0, sl
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	0fff      	lsrs	r7, r7, #31
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x5c>
 8000e2e:	e11f      	b.n	8001070 <__aeabi_ddiv+0x29c>
 8000e30:	4ac6      	ldr	r2, [pc, #792]	; (800114c <__aeabi_ddiv+0x378>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0x64>
 8000e36:	e162      	b.n	80010fe <__aeabi_ddiv+0x32a>
 8000e38:	49c5      	ldr	r1, [pc, #788]	; (8001150 <__aeabi_ddiv+0x37c>)
 8000e3a:	0f42      	lsrs	r2, r0, #29
 8000e3c:	468c      	mov	ip, r1
 8000e3e:	00e4      	lsls	r4, r4, #3
 8000e40:	4659      	mov	r1, fp
 8000e42:	4314      	orrs	r4, r2
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	4463      	add	r3, ip
 8000e48:	0412      	lsls	r2, r2, #16
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	4314      	orrs	r4, r2
 8000e4e:	469b      	mov	fp, r3
 8000e50:	00c2      	lsls	r2, r0, #3
 8000e52:	2000      	movs	r0, #0
 8000e54:	0033      	movs	r3, r6
 8000e56:	407b      	eors	r3, r7
 8000e58:	469a      	mov	sl, r3
 8000e5a:	464b      	mov	r3, r9
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d827      	bhi.n	8000eb0 <__aeabi_ddiv+0xdc>
 8000e60:	49bc      	ldr	r1, [pc, #752]	; (8001154 <__aeabi_ddiv+0x380>)
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	58cb      	ldr	r3, [r1, r3]
 8000e66:	469f      	mov	pc, r3
 8000e68:	46b2      	mov	sl, r6
 8000e6a:	9b00      	ldr	r3, [sp, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d016      	beq.n	8000e9e <__aeabi_ddiv+0xca>
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0xa2>
 8000e74:	e28e      	b.n	8001394 <__aeabi_ddiv+0x5c0>
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d000      	beq.n	8000e7c <__aeabi_ddiv+0xa8>
 8000e7a:	e0d9      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2400      	movs	r4, #0
 8000e80:	2500      	movs	r5, #0
 8000e82:	4652      	mov	r2, sl
 8000e84:	051b      	lsls	r3, r3, #20
 8000e86:	4323      	orrs	r3, r4
 8000e88:	07d2      	lsls	r2, r2, #31
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	0028      	movs	r0, r5
 8000e8e:	0019      	movs	r1, r3
 8000e90:	b005      	add	sp, #20
 8000e92:	bcf0      	pop	{r4, r5, r6, r7}
 8000e94:	46bb      	mov	fp, r7
 8000e96:	46b2      	mov	sl, r6
 8000e98:	46a9      	mov	r9, r5
 8000e9a:	46a0      	mov	r8, r4
 8000e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	4baa      	ldr	r3, [pc, #680]	; (800114c <__aeabi_ddiv+0x378>)
 8000ea4:	e7ed      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8000ea6:	46ba      	mov	sl, r7
 8000ea8:	46a0      	mov	r8, r4
 8000eaa:	0015      	movs	r5, r2
 8000eac:	9000      	str	r0, [sp, #0]
 8000eae:	e7dc      	b.n	8000e6a <__aeabi_ddiv+0x96>
 8000eb0:	4544      	cmp	r4, r8
 8000eb2:	d200      	bcs.n	8000eb6 <__aeabi_ddiv+0xe2>
 8000eb4:	e1c7      	b.n	8001246 <__aeabi_ddiv+0x472>
 8000eb6:	d100      	bne.n	8000eba <__aeabi_ddiv+0xe6>
 8000eb8:	e1c2      	b.n	8001240 <__aeabi_ddiv+0x46c>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	425b      	negs	r3, r3
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	002e      	movs	r6, r5
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	44e3      	add	fp, ip
 8000ec8:	0223      	lsls	r3, r4, #8
 8000eca:	0e14      	lsrs	r4, r2, #24
 8000ecc:	431c      	orrs	r4, r3
 8000ece:	0c1b      	lsrs	r3, r3, #16
 8000ed0:	4699      	mov	r9, r3
 8000ed2:	0423      	lsls	r3, r4, #16
 8000ed4:	0c1f      	lsrs	r7, r3, #16
 8000ed6:	0212      	lsls	r2, r2, #8
 8000ed8:	4649      	mov	r1, r9
 8000eda:	9200      	str	r2, [sp, #0]
 8000edc:	9701      	str	r7, [sp, #4]
 8000ede:	f7ff f9b3 	bl	8000248 <__aeabi_uidivmod>
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	437a      	muls	r2, r7
 8000ee6:	040b      	lsls	r3, r1, #16
 8000ee8:	0c31      	lsrs	r1, r6, #16
 8000eea:	4680      	mov	r8, r0
 8000eec:	4319      	orrs	r1, r3
 8000eee:	428a      	cmp	r2, r1
 8000ef0:	d907      	bls.n	8000f02 <__aeabi_ddiv+0x12e>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	1909      	adds	r1, r1, r4
 8000efa:	44e0      	add	r8, ip
 8000efc:	428c      	cmp	r4, r1
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x12e>
 8000f00:	e207      	b.n	8001312 <__aeabi_ddiv+0x53e>
 8000f02:	1a88      	subs	r0, r1, r2
 8000f04:	4649      	mov	r1, r9
 8000f06:	f7ff f99f 	bl	8000248 <__aeabi_uidivmod>
 8000f0a:	0409      	lsls	r1, r1, #16
 8000f0c:	468c      	mov	ip, r1
 8000f0e:	0431      	lsls	r1, r6, #16
 8000f10:	4666      	mov	r6, ip
 8000f12:	9a01      	ldr	r2, [sp, #4]
 8000f14:	0c09      	lsrs	r1, r1, #16
 8000f16:	4342      	muls	r2, r0
 8000f18:	0003      	movs	r3, r0
 8000f1a:	4331      	orrs	r1, r6
 8000f1c:	428a      	cmp	r2, r1
 8000f1e:	d904      	bls.n	8000f2a <__aeabi_ddiv+0x156>
 8000f20:	1909      	adds	r1, r1, r4
 8000f22:	3b01      	subs	r3, #1
 8000f24:	428c      	cmp	r4, r1
 8000f26:	d800      	bhi.n	8000f2a <__aeabi_ddiv+0x156>
 8000f28:	e1ed      	b.n	8001306 <__aeabi_ddiv+0x532>
 8000f2a:	1a88      	subs	r0, r1, r2
 8000f2c:	4642      	mov	r2, r8
 8000f2e:	0412      	lsls	r2, r2, #16
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4690      	mov	r8, r2
 8000f34:	4641      	mov	r1, r8
 8000f36:	9b00      	ldr	r3, [sp, #0]
 8000f38:	040e      	lsls	r6, r1, #16
 8000f3a:	0c1b      	lsrs	r3, r3, #16
 8000f3c:	001f      	movs	r7, r3
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	9b00      	ldr	r3, [sp, #0]
 8000f42:	0c36      	lsrs	r6, r6, #16
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	0c19      	lsrs	r1, r3, #16
 8000f48:	000b      	movs	r3, r1
 8000f4a:	4373      	muls	r3, r6
 8000f4c:	0c12      	lsrs	r2, r2, #16
 8000f4e:	437e      	muls	r6, r7
 8000f50:	9103      	str	r1, [sp, #12]
 8000f52:	4351      	muls	r1, r2
 8000f54:	437a      	muls	r2, r7
 8000f56:	0c1f      	lsrs	r7, r3, #16
 8000f58:	46bc      	mov	ip, r7
 8000f5a:	1876      	adds	r6, r6, r1
 8000f5c:	4466      	add	r6, ip
 8000f5e:	42b1      	cmp	r1, r6
 8000f60:	d903      	bls.n	8000f6a <__aeabi_ddiv+0x196>
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	0249      	lsls	r1, r1, #9
 8000f66:	468c      	mov	ip, r1
 8000f68:	4462      	add	r2, ip
 8000f6a:	0c31      	lsrs	r1, r6, #16
 8000f6c:	188a      	adds	r2, r1, r2
 8000f6e:	0431      	lsls	r1, r6, #16
 8000f70:	041e      	lsls	r6, r3, #16
 8000f72:	0c36      	lsrs	r6, r6, #16
 8000f74:	198e      	adds	r6, r1, r6
 8000f76:	4290      	cmp	r0, r2
 8000f78:	d302      	bcc.n	8000f80 <__aeabi_ddiv+0x1ac>
 8000f7a:	d112      	bne.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8000f7c:	42b5      	cmp	r5, r6
 8000f7e:	d210      	bcs.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8000f80:	4643      	mov	r3, r8
 8000f82:	1e59      	subs	r1, r3, #1
 8000f84:	9b00      	ldr	r3, [sp, #0]
 8000f86:	469c      	mov	ip, r3
 8000f88:	4465      	add	r5, ip
 8000f8a:	001f      	movs	r7, r3
 8000f8c:	429d      	cmp	r5, r3
 8000f8e:	419b      	sbcs	r3, r3
 8000f90:	425b      	negs	r3, r3
 8000f92:	191b      	adds	r3, r3, r4
 8000f94:	18c0      	adds	r0, r0, r3
 8000f96:	4284      	cmp	r4, r0
 8000f98:	d200      	bcs.n	8000f9c <__aeabi_ddiv+0x1c8>
 8000f9a:	e1a0      	b.n	80012de <__aeabi_ddiv+0x50a>
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_ddiv+0x1cc>
 8000f9e:	e19b      	b.n	80012d8 <__aeabi_ddiv+0x504>
 8000fa0:	4688      	mov	r8, r1
 8000fa2:	1bae      	subs	r6, r5, r6
 8000fa4:	42b5      	cmp	r5, r6
 8000fa6:	41ad      	sbcs	r5, r5
 8000fa8:	1a80      	subs	r0, r0, r2
 8000faa:	426d      	negs	r5, r5
 8000fac:	1b40      	subs	r0, r0, r5
 8000fae:	4284      	cmp	r4, r0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_ddiv+0x1e0>
 8000fb2:	e1d5      	b.n	8001360 <__aeabi_ddiv+0x58c>
 8000fb4:	4649      	mov	r1, r9
 8000fb6:	f7ff f947 	bl	8000248 <__aeabi_uidivmod>
 8000fba:	9a01      	ldr	r2, [sp, #4]
 8000fbc:	040b      	lsls	r3, r1, #16
 8000fbe:	4342      	muls	r2, r0
 8000fc0:	0c31      	lsrs	r1, r6, #16
 8000fc2:	0005      	movs	r5, r0
 8000fc4:	4319      	orrs	r1, r3
 8000fc6:	428a      	cmp	r2, r1
 8000fc8:	d900      	bls.n	8000fcc <__aeabi_ddiv+0x1f8>
 8000fca:	e16c      	b.n	80012a6 <__aeabi_ddiv+0x4d2>
 8000fcc:	1a88      	subs	r0, r1, r2
 8000fce:	4649      	mov	r1, r9
 8000fd0:	f7ff f93a 	bl	8000248 <__aeabi_uidivmod>
 8000fd4:	9a01      	ldr	r2, [sp, #4]
 8000fd6:	0436      	lsls	r6, r6, #16
 8000fd8:	4342      	muls	r2, r0
 8000fda:	0409      	lsls	r1, r1, #16
 8000fdc:	0c36      	lsrs	r6, r6, #16
 8000fde:	0003      	movs	r3, r0
 8000fe0:	430e      	orrs	r6, r1
 8000fe2:	42b2      	cmp	r2, r6
 8000fe4:	d900      	bls.n	8000fe8 <__aeabi_ddiv+0x214>
 8000fe6:	e153      	b.n	8001290 <__aeabi_ddiv+0x4bc>
 8000fe8:	9803      	ldr	r0, [sp, #12]
 8000fea:	1ab6      	subs	r6, r6, r2
 8000fec:	0002      	movs	r2, r0
 8000fee:	042d      	lsls	r5, r5, #16
 8000ff0:	431d      	orrs	r5, r3
 8000ff2:	9f02      	ldr	r7, [sp, #8]
 8000ff4:	042b      	lsls	r3, r5, #16
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	435a      	muls	r2, r3
 8000ffa:	437b      	muls	r3, r7
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	0c29      	lsrs	r1, r5, #16
 8001000:	4348      	muls	r0, r1
 8001002:	0c13      	lsrs	r3, r2, #16
 8001004:	4484      	add	ip, r0
 8001006:	4463      	add	r3, ip
 8001008:	4379      	muls	r1, r7
 800100a:	4298      	cmp	r0, r3
 800100c:	d903      	bls.n	8001016 <__aeabi_ddiv+0x242>
 800100e:	2080      	movs	r0, #128	; 0x80
 8001010:	0240      	lsls	r0, r0, #9
 8001012:	4684      	mov	ip, r0
 8001014:	4461      	add	r1, ip
 8001016:	0c18      	lsrs	r0, r3, #16
 8001018:	0412      	lsls	r2, r2, #16
 800101a:	041b      	lsls	r3, r3, #16
 800101c:	0c12      	lsrs	r2, r2, #16
 800101e:	1841      	adds	r1, r0, r1
 8001020:	189b      	adds	r3, r3, r2
 8001022:	428e      	cmp	r6, r1
 8001024:	d200      	bcs.n	8001028 <__aeabi_ddiv+0x254>
 8001026:	e0ff      	b.n	8001228 <__aeabi_ddiv+0x454>
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x258>
 800102a:	e0fa      	b.n	8001222 <__aeabi_ddiv+0x44e>
 800102c:	2301      	movs	r3, #1
 800102e:	431d      	orrs	r5, r3
 8001030:	4a49      	ldr	r2, [pc, #292]	; (8001158 <__aeabi_ddiv+0x384>)
 8001032:	445a      	add	r2, fp
 8001034:	2a00      	cmp	r2, #0
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x266>
 8001038:	e0aa      	b.n	8001190 <__aeabi_ddiv+0x3bc>
 800103a:	076b      	lsls	r3, r5, #29
 800103c:	d000      	beq.n	8001040 <__aeabi_ddiv+0x26c>
 800103e:	e13d      	b.n	80012bc <__aeabi_ddiv+0x4e8>
 8001040:	08ed      	lsrs	r5, r5, #3
 8001042:	4643      	mov	r3, r8
 8001044:	01db      	lsls	r3, r3, #7
 8001046:	d506      	bpl.n	8001056 <__aeabi_ddiv+0x282>
 8001048:	4642      	mov	r2, r8
 800104a:	4b44      	ldr	r3, [pc, #272]	; (800115c <__aeabi_ddiv+0x388>)
 800104c:	401a      	ands	r2, r3
 800104e:	4690      	mov	r8, r2
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	00d2      	lsls	r2, r2, #3
 8001054:	445a      	add	r2, fp
 8001056:	4b42      	ldr	r3, [pc, #264]	; (8001160 <__aeabi_ddiv+0x38c>)
 8001058:	429a      	cmp	r2, r3
 800105a:	dd00      	ble.n	800105e <__aeabi_ddiv+0x28a>
 800105c:	e71f      	b.n	8000e9e <__aeabi_ddiv+0xca>
 800105e:	4643      	mov	r3, r8
 8001060:	075b      	lsls	r3, r3, #29
 8001062:	431d      	orrs	r5, r3
 8001064:	4643      	mov	r3, r8
 8001066:	0552      	lsls	r2, r2, #21
 8001068:	025c      	lsls	r4, r3, #9
 800106a:	0b24      	lsrs	r4, r4, #12
 800106c:	0d53      	lsrs	r3, r2, #21
 800106e:	e708      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001070:	4652      	mov	r2, sl
 8001072:	4322      	orrs	r2, r4
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x2a4>
 8001076:	e07b      	b.n	8001170 <__aeabi_ddiv+0x39c>
 8001078:	2c00      	cmp	r4, #0
 800107a:	d100      	bne.n	800107e <__aeabi_ddiv+0x2aa>
 800107c:	e0fa      	b.n	8001274 <__aeabi_ddiv+0x4a0>
 800107e:	0020      	movs	r0, r4
 8001080:	f001 f9da 	bl	8002438 <__clzsi2>
 8001084:	0002      	movs	r2, r0
 8001086:	3a0b      	subs	r2, #11
 8001088:	231d      	movs	r3, #29
 800108a:	0001      	movs	r1, r0
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	4652      	mov	r2, sl
 8001090:	3908      	subs	r1, #8
 8001092:	40da      	lsrs	r2, r3
 8001094:	408c      	lsls	r4, r1
 8001096:	4314      	orrs	r4, r2
 8001098:	4652      	mov	r2, sl
 800109a:	408a      	lsls	r2, r1
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <__aeabi_ddiv+0x390>)
 800109e:	4458      	add	r0, fp
 80010a0:	469b      	mov	fp, r3
 80010a2:	4483      	add	fp, r0
 80010a4:	2000      	movs	r0, #0
 80010a6:	e6d5      	b.n	8000e54 <__aeabi_ddiv+0x80>
 80010a8:	464b      	mov	r3, r9
 80010aa:	4323      	orrs	r3, r4
 80010ac:	4698      	mov	r8, r3
 80010ae:	d044      	beq.n	800113a <__aeabi_ddiv+0x366>
 80010b0:	2c00      	cmp	r4, #0
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x2e2>
 80010b4:	e0ce      	b.n	8001254 <__aeabi_ddiv+0x480>
 80010b6:	0020      	movs	r0, r4
 80010b8:	f001 f9be 	bl	8002438 <__clzsi2>
 80010bc:	0001      	movs	r1, r0
 80010be:	0002      	movs	r2, r0
 80010c0:	390b      	subs	r1, #11
 80010c2:	231d      	movs	r3, #29
 80010c4:	1a5b      	subs	r3, r3, r1
 80010c6:	4649      	mov	r1, r9
 80010c8:	0010      	movs	r0, r2
 80010ca:	40d9      	lsrs	r1, r3
 80010cc:	3808      	subs	r0, #8
 80010ce:	4084      	lsls	r4, r0
 80010d0:	000b      	movs	r3, r1
 80010d2:	464d      	mov	r5, r9
 80010d4:	4323      	orrs	r3, r4
 80010d6:	4698      	mov	r8, r3
 80010d8:	4085      	lsls	r5, r0
 80010da:	4823      	ldr	r0, [pc, #140]	; (8001168 <__aeabi_ddiv+0x394>)
 80010dc:	1a83      	subs	r3, r0, r2
 80010de:	469b      	mov	fp, r3
 80010e0:	2300      	movs	r3, #0
 80010e2:	4699      	mov	r9, r3
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	e69a      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 80010e8:	464b      	mov	r3, r9
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d11d      	bne.n	800112c <__aeabi_ddiv+0x358>
 80010f0:	2308      	movs	r3, #8
 80010f2:	4699      	mov	r9, r3
 80010f4:	3b06      	subs	r3, #6
 80010f6:	2500      	movs	r5, #0
 80010f8:	4683      	mov	fp, r0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	e68f      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 80010fe:	4652      	mov	r2, sl
 8001100:	4322      	orrs	r2, r4
 8001102:	d109      	bne.n	8001118 <__aeabi_ddiv+0x344>
 8001104:	2302      	movs	r3, #2
 8001106:	4649      	mov	r1, r9
 8001108:	4319      	orrs	r1, r3
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <__aeabi_ddiv+0x398>)
 800110c:	4689      	mov	r9, r1
 800110e:	469c      	mov	ip, r3
 8001110:	2400      	movs	r4, #0
 8001112:	2002      	movs	r0, #2
 8001114:	44e3      	add	fp, ip
 8001116:	e69d      	b.n	8000e54 <__aeabi_ddiv+0x80>
 8001118:	2303      	movs	r3, #3
 800111a:	464a      	mov	r2, r9
 800111c:	431a      	orrs	r2, r3
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <__aeabi_ddiv+0x398>)
 8001120:	4691      	mov	r9, r2
 8001122:	469c      	mov	ip, r3
 8001124:	4652      	mov	r2, sl
 8001126:	2003      	movs	r0, #3
 8001128:	44e3      	add	fp, ip
 800112a:	e693      	b.n	8000e54 <__aeabi_ddiv+0x80>
 800112c:	230c      	movs	r3, #12
 800112e:	4699      	mov	r9, r3
 8001130:	3b09      	subs	r3, #9
 8001132:	46a0      	mov	r8, r4
 8001134:	4683      	mov	fp, r0
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	e671      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 800113a:	2304      	movs	r3, #4
 800113c:	4699      	mov	r9, r3
 800113e:	2300      	movs	r3, #0
 8001140:	469b      	mov	fp, r3
 8001142:	3301      	adds	r3, #1
 8001144:	2500      	movs	r5, #0
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	e669      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	000007ff 	.word	0x000007ff
 8001150:	fffffc01 	.word	0xfffffc01
 8001154:	0800b660 	.word	0x0800b660
 8001158:	000003ff 	.word	0x000003ff
 800115c:	feffffff 	.word	0xfeffffff
 8001160:	000007fe 	.word	0x000007fe
 8001164:	000003f3 	.word	0x000003f3
 8001168:	fffffc0d 	.word	0xfffffc0d
 800116c:	fffff801 	.word	0xfffff801
 8001170:	4649      	mov	r1, r9
 8001172:	2301      	movs	r3, #1
 8001174:	4319      	orrs	r1, r3
 8001176:	4689      	mov	r9, r1
 8001178:	2400      	movs	r4, #0
 800117a:	2001      	movs	r0, #1
 800117c:	e66a      	b.n	8000e54 <__aeabi_ddiv+0x80>
 800117e:	2300      	movs	r3, #0
 8001180:	2480      	movs	r4, #128	; 0x80
 8001182:	469a      	mov	sl, r3
 8001184:	2500      	movs	r5, #0
 8001186:	4b8a      	ldr	r3, [pc, #552]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 8001188:	0324      	lsls	r4, r4, #12
 800118a:	e67a      	b.n	8000e82 <__aeabi_ddiv+0xae>
 800118c:	2501      	movs	r5, #1
 800118e:	426d      	negs	r5, r5
 8001190:	2301      	movs	r3, #1
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	2b38      	cmp	r3, #56	; 0x38
 8001196:	dd00      	ble.n	800119a <__aeabi_ddiv+0x3c6>
 8001198:	e670      	b.n	8000e7c <__aeabi_ddiv+0xa8>
 800119a:	2b1f      	cmp	r3, #31
 800119c:	dc00      	bgt.n	80011a0 <__aeabi_ddiv+0x3cc>
 800119e:	e0bf      	b.n	8001320 <__aeabi_ddiv+0x54c>
 80011a0:	211f      	movs	r1, #31
 80011a2:	4249      	negs	r1, r1
 80011a4:	1a8a      	subs	r2, r1, r2
 80011a6:	4641      	mov	r1, r8
 80011a8:	40d1      	lsrs	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	2b20      	cmp	r3, #32
 80011ae:	d004      	beq.n	80011ba <__aeabi_ddiv+0x3e6>
 80011b0:	4641      	mov	r1, r8
 80011b2:	4b80      	ldr	r3, [pc, #512]	; (80013b4 <__aeabi_ddiv+0x5e0>)
 80011b4:	445b      	add	r3, fp
 80011b6:	4099      	lsls	r1, r3
 80011b8:	430d      	orrs	r5, r1
 80011ba:	1e6b      	subs	r3, r5, #1
 80011bc:	419d      	sbcs	r5, r3
 80011be:	2307      	movs	r3, #7
 80011c0:	432a      	orrs	r2, r5
 80011c2:	001d      	movs	r5, r3
 80011c4:	2400      	movs	r4, #0
 80011c6:	4015      	ands	r5, r2
 80011c8:	4213      	tst	r3, r2
 80011ca:	d100      	bne.n	80011ce <__aeabi_ddiv+0x3fa>
 80011cc:	e0d4      	b.n	8001378 <__aeabi_ddiv+0x5a4>
 80011ce:	210f      	movs	r1, #15
 80011d0:	2300      	movs	r3, #0
 80011d2:	4011      	ands	r1, r2
 80011d4:	2904      	cmp	r1, #4
 80011d6:	d100      	bne.n	80011da <__aeabi_ddiv+0x406>
 80011d8:	e0cb      	b.n	8001372 <__aeabi_ddiv+0x59e>
 80011da:	1d11      	adds	r1, r2, #4
 80011dc:	4291      	cmp	r1, r2
 80011de:	4192      	sbcs	r2, r2
 80011e0:	4252      	negs	r2, r2
 80011e2:	189b      	adds	r3, r3, r2
 80011e4:	000a      	movs	r2, r1
 80011e6:	0219      	lsls	r1, r3, #8
 80011e8:	d400      	bmi.n	80011ec <__aeabi_ddiv+0x418>
 80011ea:	e0c2      	b.n	8001372 <__aeabi_ddiv+0x59e>
 80011ec:	2301      	movs	r3, #1
 80011ee:	2400      	movs	r4, #0
 80011f0:	2500      	movs	r5, #0
 80011f2:	e646      	b.n	8000e82 <__aeabi_ddiv+0xae>
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	4641      	mov	r1, r8
 80011f8:	031b      	lsls	r3, r3, #12
 80011fa:	4219      	tst	r1, r3
 80011fc:	d008      	beq.n	8001210 <__aeabi_ddiv+0x43c>
 80011fe:	421c      	tst	r4, r3
 8001200:	d106      	bne.n	8001210 <__aeabi_ddiv+0x43c>
 8001202:	431c      	orrs	r4, r3
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	46ba      	mov	sl, r7
 8001208:	0015      	movs	r5, r2
 800120a:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 800120c:	0b24      	lsrs	r4, r4, #12
 800120e:	e638      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001210:	2480      	movs	r4, #128	; 0x80
 8001212:	4643      	mov	r3, r8
 8001214:	0324      	lsls	r4, r4, #12
 8001216:	431c      	orrs	r4, r3
 8001218:	0324      	lsls	r4, r4, #12
 800121a:	46b2      	mov	sl, r6
 800121c:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 800121e:	0b24      	lsrs	r4, r4, #12
 8001220:	e62f      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001222:	2b00      	cmp	r3, #0
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0x454>
 8001226:	e703      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8001228:	19a6      	adds	r6, r4, r6
 800122a:	1e68      	subs	r0, r5, #1
 800122c:	42a6      	cmp	r6, r4
 800122e:	d200      	bcs.n	8001232 <__aeabi_ddiv+0x45e>
 8001230:	e08d      	b.n	800134e <__aeabi_ddiv+0x57a>
 8001232:	428e      	cmp	r6, r1
 8001234:	d200      	bcs.n	8001238 <__aeabi_ddiv+0x464>
 8001236:	e0a3      	b.n	8001380 <__aeabi_ddiv+0x5ac>
 8001238:	d100      	bne.n	800123c <__aeabi_ddiv+0x468>
 800123a:	e0b3      	b.n	80013a4 <__aeabi_ddiv+0x5d0>
 800123c:	0005      	movs	r5, r0
 800123e:	e6f5      	b.n	800102c <__aeabi_ddiv+0x258>
 8001240:	42aa      	cmp	r2, r5
 8001242:	d900      	bls.n	8001246 <__aeabi_ddiv+0x472>
 8001244:	e639      	b.n	8000eba <__aeabi_ddiv+0xe6>
 8001246:	4643      	mov	r3, r8
 8001248:	07de      	lsls	r6, r3, #31
 800124a:	0858      	lsrs	r0, r3, #1
 800124c:	086b      	lsrs	r3, r5, #1
 800124e:	431e      	orrs	r6, r3
 8001250:	07ed      	lsls	r5, r5, #31
 8001252:	e639      	b.n	8000ec8 <__aeabi_ddiv+0xf4>
 8001254:	4648      	mov	r0, r9
 8001256:	f001 f8ef 	bl	8002438 <__clzsi2>
 800125a:	0001      	movs	r1, r0
 800125c:	0002      	movs	r2, r0
 800125e:	3115      	adds	r1, #21
 8001260:	3220      	adds	r2, #32
 8001262:	291c      	cmp	r1, #28
 8001264:	dc00      	bgt.n	8001268 <__aeabi_ddiv+0x494>
 8001266:	e72c      	b.n	80010c2 <__aeabi_ddiv+0x2ee>
 8001268:	464b      	mov	r3, r9
 800126a:	3808      	subs	r0, #8
 800126c:	4083      	lsls	r3, r0
 800126e:	2500      	movs	r5, #0
 8001270:	4698      	mov	r8, r3
 8001272:	e732      	b.n	80010da <__aeabi_ddiv+0x306>
 8001274:	f001 f8e0 	bl	8002438 <__clzsi2>
 8001278:	0003      	movs	r3, r0
 800127a:	001a      	movs	r2, r3
 800127c:	3215      	adds	r2, #21
 800127e:	3020      	adds	r0, #32
 8001280:	2a1c      	cmp	r2, #28
 8001282:	dc00      	bgt.n	8001286 <__aeabi_ddiv+0x4b2>
 8001284:	e700      	b.n	8001088 <__aeabi_ddiv+0x2b4>
 8001286:	4654      	mov	r4, sl
 8001288:	3b08      	subs	r3, #8
 800128a:	2200      	movs	r2, #0
 800128c:	409c      	lsls	r4, r3
 800128e:	e705      	b.n	800109c <__aeabi_ddiv+0x2c8>
 8001290:	1936      	adds	r6, r6, r4
 8001292:	3b01      	subs	r3, #1
 8001294:	42b4      	cmp	r4, r6
 8001296:	d900      	bls.n	800129a <__aeabi_ddiv+0x4c6>
 8001298:	e6a6      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 800129a:	42b2      	cmp	r2, r6
 800129c:	d800      	bhi.n	80012a0 <__aeabi_ddiv+0x4cc>
 800129e:	e6a3      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 80012a0:	1e83      	subs	r3, r0, #2
 80012a2:	1936      	adds	r6, r6, r4
 80012a4:	e6a0      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 80012a6:	1909      	adds	r1, r1, r4
 80012a8:	3d01      	subs	r5, #1
 80012aa:	428c      	cmp	r4, r1
 80012ac:	d900      	bls.n	80012b0 <__aeabi_ddiv+0x4dc>
 80012ae:	e68d      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012b0:	428a      	cmp	r2, r1
 80012b2:	d800      	bhi.n	80012b6 <__aeabi_ddiv+0x4e2>
 80012b4:	e68a      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012b6:	1e85      	subs	r5, r0, #2
 80012b8:	1909      	adds	r1, r1, r4
 80012ba:	e687      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012bc:	230f      	movs	r3, #15
 80012be:	402b      	ands	r3, r5
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x4f2>
 80012c4:	e6bc      	b.n	8001040 <__aeabi_ddiv+0x26c>
 80012c6:	2305      	movs	r3, #5
 80012c8:	425b      	negs	r3, r3
 80012ca:	42ab      	cmp	r3, r5
 80012cc:	419b      	sbcs	r3, r3
 80012ce:	3504      	adds	r5, #4
 80012d0:	425b      	negs	r3, r3
 80012d2:	08ed      	lsrs	r5, r5, #3
 80012d4:	4498      	add	r8, r3
 80012d6:	e6b4      	b.n	8001042 <__aeabi_ddiv+0x26e>
 80012d8:	42af      	cmp	r7, r5
 80012da:	d900      	bls.n	80012de <__aeabi_ddiv+0x50a>
 80012dc:	e660      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012de:	4282      	cmp	r2, r0
 80012e0:	d804      	bhi.n	80012ec <__aeabi_ddiv+0x518>
 80012e2:	d000      	beq.n	80012e6 <__aeabi_ddiv+0x512>
 80012e4:	e65c      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012e6:	42ae      	cmp	r6, r5
 80012e8:	d800      	bhi.n	80012ec <__aeabi_ddiv+0x518>
 80012ea:	e659      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012ec:	2302      	movs	r3, #2
 80012ee:	425b      	negs	r3, r3
 80012f0:	469c      	mov	ip, r3
 80012f2:	9b00      	ldr	r3, [sp, #0]
 80012f4:	44e0      	add	r8, ip
 80012f6:	469c      	mov	ip, r3
 80012f8:	4465      	add	r5, ip
 80012fa:	429d      	cmp	r5, r3
 80012fc:	419b      	sbcs	r3, r3
 80012fe:	425b      	negs	r3, r3
 8001300:	191b      	adds	r3, r3, r4
 8001302:	18c0      	adds	r0, r0, r3
 8001304:	e64d      	b.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8001306:	428a      	cmp	r2, r1
 8001308:	d800      	bhi.n	800130c <__aeabi_ddiv+0x538>
 800130a:	e60e      	b.n	8000f2a <__aeabi_ddiv+0x156>
 800130c:	1e83      	subs	r3, r0, #2
 800130e:	1909      	adds	r1, r1, r4
 8001310:	e60b      	b.n	8000f2a <__aeabi_ddiv+0x156>
 8001312:	428a      	cmp	r2, r1
 8001314:	d800      	bhi.n	8001318 <__aeabi_ddiv+0x544>
 8001316:	e5f4      	b.n	8000f02 <__aeabi_ddiv+0x12e>
 8001318:	1e83      	subs	r3, r0, #2
 800131a:	4698      	mov	r8, r3
 800131c:	1909      	adds	r1, r1, r4
 800131e:	e5f0      	b.n	8000f02 <__aeabi_ddiv+0x12e>
 8001320:	4925      	ldr	r1, [pc, #148]	; (80013b8 <__aeabi_ddiv+0x5e4>)
 8001322:	0028      	movs	r0, r5
 8001324:	4459      	add	r1, fp
 8001326:	408d      	lsls	r5, r1
 8001328:	4642      	mov	r2, r8
 800132a:	408a      	lsls	r2, r1
 800132c:	1e69      	subs	r1, r5, #1
 800132e:	418d      	sbcs	r5, r1
 8001330:	4641      	mov	r1, r8
 8001332:	40d8      	lsrs	r0, r3
 8001334:	40d9      	lsrs	r1, r3
 8001336:	4302      	orrs	r2, r0
 8001338:	432a      	orrs	r2, r5
 800133a:	000b      	movs	r3, r1
 800133c:	0751      	lsls	r1, r2, #29
 800133e:	d100      	bne.n	8001342 <__aeabi_ddiv+0x56e>
 8001340:	e751      	b.n	80011e6 <__aeabi_ddiv+0x412>
 8001342:	210f      	movs	r1, #15
 8001344:	4011      	ands	r1, r2
 8001346:	2904      	cmp	r1, #4
 8001348:	d000      	beq.n	800134c <__aeabi_ddiv+0x578>
 800134a:	e746      	b.n	80011da <__aeabi_ddiv+0x406>
 800134c:	e74b      	b.n	80011e6 <__aeabi_ddiv+0x412>
 800134e:	0005      	movs	r5, r0
 8001350:	428e      	cmp	r6, r1
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x582>
 8001354:	e66a      	b.n	800102c <__aeabi_ddiv+0x258>
 8001356:	9a00      	ldr	r2, [sp, #0]
 8001358:	4293      	cmp	r3, r2
 800135a:	d000      	beq.n	800135e <__aeabi_ddiv+0x58a>
 800135c:	e666      	b.n	800102c <__aeabi_ddiv+0x258>
 800135e:	e667      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8001360:	4a16      	ldr	r2, [pc, #88]	; (80013bc <__aeabi_ddiv+0x5e8>)
 8001362:	445a      	add	r2, fp
 8001364:	2a00      	cmp	r2, #0
 8001366:	dc00      	bgt.n	800136a <__aeabi_ddiv+0x596>
 8001368:	e710      	b.n	800118c <__aeabi_ddiv+0x3b8>
 800136a:	2301      	movs	r3, #1
 800136c:	2500      	movs	r5, #0
 800136e:	4498      	add	r8, r3
 8001370:	e667      	b.n	8001042 <__aeabi_ddiv+0x26e>
 8001372:	075d      	lsls	r5, r3, #29
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	0b1c      	lsrs	r4, r3, #12
 8001378:	08d2      	lsrs	r2, r2, #3
 800137a:	2300      	movs	r3, #0
 800137c:	4315      	orrs	r5, r2
 800137e:	e580      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001380:	9800      	ldr	r0, [sp, #0]
 8001382:	3d02      	subs	r5, #2
 8001384:	0042      	lsls	r2, r0, #1
 8001386:	4282      	cmp	r2, r0
 8001388:	41bf      	sbcs	r7, r7
 800138a:	427f      	negs	r7, r7
 800138c:	193c      	adds	r4, r7, r4
 800138e:	1936      	adds	r6, r6, r4
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	e7dd      	b.n	8001350 <__aeabi_ddiv+0x57c>
 8001394:	2480      	movs	r4, #128	; 0x80
 8001396:	4643      	mov	r3, r8
 8001398:	0324      	lsls	r4, r4, #12
 800139a:	431c      	orrs	r4, r3
 800139c:	0324      	lsls	r4, r4, #12
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	e56e      	b.n	8000e82 <__aeabi_ddiv+0xae>
 80013a4:	9a00      	ldr	r2, [sp, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3ea      	bcc.n	8001380 <__aeabi_ddiv+0x5ac>
 80013aa:	0005      	movs	r5, r0
 80013ac:	e7d3      	b.n	8001356 <__aeabi_ddiv+0x582>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	000007ff 	.word	0x000007ff
 80013b4:	0000043e 	.word	0x0000043e
 80013b8:	0000041e 	.word	0x0000041e
 80013bc:	000003ff 	.word	0x000003ff

080013c0 <__eqdf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	464e      	mov	r6, r9
 80013c4:	4645      	mov	r5, r8
 80013c6:	46de      	mov	lr, fp
 80013c8:	4657      	mov	r7, sl
 80013ca:	4690      	mov	r8, r2
 80013cc:	b5e0      	push	{r5, r6, r7, lr}
 80013ce:	0017      	movs	r7, r2
 80013d0:	031a      	lsls	r2, r3, #12
 80013d2:	0b12      	lsrs	r2, r2, #12
 80013d4:	0005      	movs	r5, r0
 80013d6:	4684      	mov	ip, r0
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <__eqdf2+0x80>)
 80013da:	030e      	lsls	r6, r1, #12
 80013dc:	004c      	lsls	r4, r1, #1
 80013de:	4691      	mov	r9, r2
 80013e0:	005a      	lsls	r2, r3, #1
 80013e2:	0fdb      	lsrs	r3, r3, #31
 80013e4:	469b      	mov	fp, r3
 80013e6:	0b36      	lsrs	r6, r6, #12
 80013e8:	0d64      	lsrs	r4, r4, #21
 80013ea:	0fc9      	lsrs	r1, r1, #31
 80013ec:	0d52      	lsrs	r2, r2, #21
 80013ee:	4284      	cmp	r4, r0
 80013f0:	d019      	beq.n	8001426 <__eqdf2+0x66>
 80013f2:	4282      	cmp	r2, r0
 80013f4:	d010      	beq.n	8001418 <__eqdf2+0x58>
 80013f6:	2001      	movs	r0, #1
 80013f8:	4294      	cmp	r4, r2
 80013fa:	d10e      	bne.n	800141a <__eqdf2+0x5a>
 80013fc:	454e      	cmp	r6, r9
 80013fe:	d10c      	bne.n	800141a <__eqdf2+0x5a>
 8001400:	2001      	movs	r0, #1
 8001402:	45c4      	cmp	ip, r8
 8001404:	d109      	bne.n	800141a <__eqdf2+0x5a>
 8001406:	4559      	cmp	r1, fp
 8001408:	d017      	beq.n	800143a <__eqdf2+0x7a>
 800140a:	2c00      	cmp	r4, #0
 800140c:	d105      	bne.n	800141a <__eqdf2+0x5a>
 800140e:	0030      	movs	r0, r6
 8001410:	4328      	orrs	r0, r5
 8001412:	1e43      	subs	r3, r0, #1
 8001414:	4198      	sbcs	r0, r3
 8001416:	e000      	b.n	800141a <__eqdf2+0x5a>
 8001418:	2001      	movs	r0, #1
 800141a:	bcf0      	pop	{r4, r5, r6, r7}
 800141c:	46bb      	mov	fp, r7
 800141e:	46b2      	mov	sl, r6
 8001420:	46a9      	mov	r9, r5
 8001422:	46a0      	mov	r8, r4
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001426:	0033      	movs	r3, r6
 8001428:	2001      	movs	r0, #1
 800142a:	432b      	orrs	r3, r5
 800142c:	d1f5      	bne.n	800141a <__eqdf2+0x5a>
 800142e:	42a2      	cmp	r2, r4
 8001430:	d1f3      	bne.n	800141a <__eqdf2+0x5a>
 8001432:	464b      	mov	r3, r9
 8001434:	433b      	orrs	r3, r7
 8001436:	d1f0      	bne.n	800141a <__eqdf2+0x5a>
 8001438:	e7e2      	b.n	8001400 <__eqdf2+0x40>
 800143a:	2000      	movs	r0, #0
 800143c:	e7ed      	b.n	800141a <__eqdf2+0x5a>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	000007ff 	.word	0x000007ff

08001444 <__gedf2>:
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	4647      	mov	r7, r8
 8001448:	46ce      	mov	lr, r9
 800144a:	0004      	movs	r4, r0
 800144c:	0018      	movs	r0, r3
 800144e:	0016      	movs	r6, r2
 8001450:	031b      	lsls	r3, r3, #12
 8001452:	0b1b      	lsrs	r3, r3, #12
 8001454:	4d2d      	ldr	r5, [pc, #180]	; (800150c <__gedf2+0xc8>)
 8001456:	004a      	lsls	r2, r1, #1
 8001458:	4699      	mov	r9, r3
 800145a:	b580      	push	{r7, lr}
 800145c:	0043      	lsls	r3, r0, #1
 800145e:	030f      	lsls	r7, r1, #12
 8001460:	46a4      	mov	ip, r4
 8001462:	46b0      	mov	r8, r6
 8001464:	0b3f      	lsrs	r7, r7, #12
 8001466:	0d52      	lsrs	r2, r2, #21
 8001468:	0fc9      	lsrs	r1, r1, #31
 800146a:	0d5b      	lsrs	r3, r3, #21
 800146c:	0fc0      	lsrs	r0, r0, #31
 800146e:	42aa      	cmp	r2, r5
 8001470:	d021      	beq.n	80014b6 <__gedf2+0x72>
 8001472:	42ab      	cmp	r3, r5
 8001474:	d013      	beq.n	800149e <__gedf2+0x5a>
 8001476:	2a00      	cmp	r2, #0
 8001478:	d122      	bne.n	80014c0 <__gedf2+0x7c>
 800147a:	433c      	orrs	r4, r7
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <__gedf2+0x42>
 8001480:	464d      	mov	r5, r9
 8001482:	432e      	orrs	r6, r5
 8001484:	d022      	beq.n	80014cc <__gedf2+0x88>
 8001486:	2c00      	cmp	r4, #0
 8001488:	d010      	beq.n	80014ac <__gedf2+0x68>
 800148a:	4281      	cmp	r1, r0
 800148c:	d022      	beq.n	80014d4 <__gedf2+0x90>
 800148e:	2002      	movs	r0, #2
 8001490:	3901      	subs	r1, #1
 8001492:	4008      	ands	r0, r1
 8001494:	3801      	subs	r0, #1
 8001496:	bcc0      	pop	{r6, r7}
 8001498:	46b9      	mov	r9, r7
 800149a:	46b0      	mov	r8, r6
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149e:	464d      	mov	r5, r9
 80014a0:	432e      	orrs	r6, r5
 80014a2:	d129      	bne.n	80014f8 <__gedf2+0xb4>
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d1f0      	bne.n	800148a <__gedf2+0x46>
 80014a8:	433c      	orrs	r4, r7
 80014aa:	d1ee      	bne.n	800148a <__gedf2+0x46>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f2      	bne.n	8001496 <__gedf2+0x52>
 80014b0:	2001      	movs	r0, #1
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7ef      	b.n	8001496 <__gedf2+0x52>
 80014b6:	003d      	movs	r5, r7
 80014b8:	4325      	orrs	r5, r4
 80014ba:	d11d      	bne.n	80014f8 <__gedf2+0xb4>
 80014bc:	4293      	cmp	r3, r2
 80014be:	d0ee      	beq.n	800149e <__gedf2+0x5a>
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e2      	bne.n	800148a <__gedf2+0x46>
 80014c4:	464c      	mov	r4, r9
 80014c6:	4326      	orrs	r6, r4
 80014c8:	d1df      	bne.n	800148a <__gedf2+0x46>
 80014ca:	e7e0      	b.n	800148e <__gedf2+0x4a>
 80014cc:	2000      	movs	r0, #0
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d0e1      	beq.n	8001496 <__gedf2+0x52>
 80014d2:	e7dc      	b.n	800148e <__gedf2+0x4a>
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dc0a      	bgt.n	80014ee <__gedf2+0xaa>
 80014d8:	dbe8      	blt.n	80014ac <__gedf2+0x68>
 80014da:	454f      	cmp	r7, r9
 80014dc:	d8d7      	bhi.n	800148e <__gedf2+0x4a>
 80014de:	d00e      	beq.n	80014fe <__gedf2+0xba>
 80014e0:	2000      	movs	r0, #0
 80014e2:	454f      	cmp	r7, r9
 80014e4:	d2d7      	bcs.n	8001496 <__gedf2+0x52>
 80014e6:	2900      	cmp	r1, #0
 80014e8:	d0e2      	beq.n	80014b0 <__gedf2+0x6c>
 80014ea:	0008      	movs	r0, r1
 80014ec:	e7d3      	b.n	8001496 <__gedf2+0x52>
 80014ee:	4243      	negs	r3, r0
 80014f0:	4158      	adcs	r0, r3
 80014f2:	0040      	lsls	r0, r0, #1
 80014f4:	3801      	subs	r0, #1
 80014f6:	e7ce      	b.n	8001496 <__gedf2+0x52>
 80014f8:	2002      	movs	r0, #2
 80014fa:	4240      	negs	r0, r0
 80014fc:	e7cb      	b.n	8001496 <__gedf2+0x52>
 80014fe:	45c4      	cmp	ip, r8
 8001500:	d8c5      	bhi.n	800148e <__gedf2+0x4a>
 8001502:	2000      	movs	r0, #0
 8001504:	45c4      	cmp	ip, r8
 8001506:	d2c6      	bcs.n	8001496 <__gedf2+0x52>
 8001508:	e7ed      	b.n	80014e6 <__gedf2+0xa2>
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	000007ff 	.word	0x000007ff

08001510 <__ledf2>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	4647      	mov	r7, r8
 8001514:	46ce      	mov	lr, r9
 8001516:	0004      	movs	r4, r0
 8001518:	0018      	movs	r0, r3
 800151a:	0016      	movs	r6, r2
 800151c:	031b      	lsls	r3, r3, #12
 800151e:	0b1b      	lsrs	r3, r3, #12
 8001520:	4d2c      	ldr	r5, [pc, #176]	; (80015d4 <__ledf2+0xc4>)
 8001522:	004a      	lsls	r2, r1, #1
 8001524:	4699      	mov	r9, r3
 8001526:	b580      	push	{r7, lr}
 8001528:	0043      	lsls	r3, r0, #1
 800152a:	030f      	lsls	r7, r1, #12
 800152c:	46a4      	mov	ip, r4
 800152e:	46b0      	mov	r8, r6
 8001530:	0b3f      	lsrs	r7, r7, #12
 8001532:	0d52      	lsrs	r2, r2, #21
 8001534:	0fc9      	lsrs	r1, r1, #31
 8001536:	0d5b      	lsrs	r3, r3, #21
 8001538:	0fc0      	lsrs	r0, r0, #31
 800153a:	42aa      	cmp	r2, r5
 800153c:	d00d      	beq.n	800155a <__ledf2+0x4a>
 800153e:	42ab      	cmp	r3, r5
 8001540:	d010      	beq.n	8001564 <__ledf2+0x54>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d127      	bne.n	8001596 <__ledf2+0x86>
 8001546:	433c      	orrs	r4, r7
 8001548:	2b00      	cmp	r3, #0
 800154a:	d111      	bne.n	8001570 <__ledf2+0x60>
 800154c:	464d      	mov	r5, r9
 800154e:	432e      	orrs	r6, r5
 8001550:	d10e      	bne.n	8001570 <__ledf2+0x60>
 8001552:	2000      	movs	r0, #0
 8001554:	2c00      	cmp	r4, #0
 8001556:	d015      	beq.n	8001584 <__ledf2+0x74>
 8001558:	e00e      	b.n	8001578 <__ledf2+0x68>
 800155a:	003d      	movs	r5, r7
 800155c:	4325      	orrs	r5, r4
 800155e:	d110      	bne.n	8001582 <__ledf2+0x72>
 8001560:	4293      	cmp	r3, r2
 8001562:	d118      	bne.n	8001596 <__ledf2+0x86>
 8001564:	464d      	mov	r5, r9
 8001566:	432e      	orrs	r6, r5
 8001568:	d10b      	bne.n	8001582 <__ledf2+0x72>
 800156a:	2a00      	cmp	r2, #0
 800156c:	d102      	bne.n	8001574 <__ledf2+0x64>
 800156e:	433c      	orrs	r4, r7
 8001570:	2c00      	cmp	r4, #0
 8001572:	d00b      	beq.n	800158c <__ledf2+0x7c>
 8001574:	4281      	cmp	r1, r0
 8001576:	d014      	beq.n	80015a2 <__ledf2+0x92>
 8001578:	2002      	movs	r0, #2
 800157a:	3901      	subs	r1, #1
 800157c:	4008      	ands	r0, r1
 800157e:	3801      	subs	r0, #1
 8001580:	e000      	b.n	8001584 <__ledf2+0x74>
 8001582:	2002      	movs	r0, #2
 8001584:	bcc0      	pop	{r6, r7}
 8001586:	46b9      	mov	r9, r7
 8001588:	46b0      	mov	r8, r6
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	2800      	cmp	r0, #0
 800158e:	d1f9      	bne.n	8001584 <__ledf2+0x74>
 8001590:	2001      	movs	r0, #1
 8001592:	4240      	negs	r0, r0
 8001594:	e7f6      	b.n	8001584 <__ledf2+0x74>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ec      	bne.n	8001574 <__ledf2+0x64>
 800159a:	464c      	mov	r4, r9
 800159c:	4326      	orrs	r6, r4
 800159e:	d1e9      	bne.n	8001574 <__ledf2+0x64>
 80015a0:	e7ea      	b.n	8001578 <__ledf2+0x68>
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dd04      	ble.n	80015b0 <__ledf2+0xa0>
 80015a6:	4243      	negs	r3, r0
 80015a8:	4158      	adcs	r0, r3
 80015aa:	0040      	lsls	r0, r0, #1
 80015ac:	3801      	subs	r0, #1
 80015ae:	e7e9      	b.n	8001584 <__ledf2+0x74>
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbeb      	blt.n	800158c <__ledf2+0x7c>
 80015b4:	454f      	cmp	r7, r9
 80015b6:	d8df      	bhi.n	8001578 <__ledf2+0x68>
 80015b8:	d006      	beq.n	80015c8 <__ledf2+0xb8>
 80015ba:	2000      	movs	r0, #0
 80015bc:	454f      	cmp	r7, r9
 80015be:	d2e1      	bcs.n	8001584 <__ledf2+0x74>
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d0e5      	beq.n	8001590 <__ledf2+0x80>
 80015c4:	0008      	movs	r0, r1
 80015c6:	e7dd      	b.n	8001584 <__ledf2+0x74>
 80015c8:	45c4      	cmp	ip, r8
 80015ca:	d8d5      	bhi.n	8001578 <__ledf2+0x68>
 80015cc:	2000      	movs	r0, #0
 80015ce:	45c4      	cmp	ip, r8
 80015d0:	d2d8      	bcs.n	8001584 <__ledf2+0x74>
 80015d2:	e7f5      	b.n	80015c0 <__ledf2+0xb0>
 80015d4:	000007ff 	.word	0x000007ff

080015d8 <__aeabi_dmul>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	4657      	mov	r7, sl
 80015dc:	464e      	mov	r6, r9
 80015de:	4645      	mov	r5, r8
 80015e0:	46de      	mov	lr, fp
 80015e2:	b5e0      	push	{r5, r6, r7, lr}
 80015e4:	4698      	mov	r8, r3
 80015e6:	030c      	lsls	r4, r1, #12
 80015e8:	004b      	lsls	r3, r1, #1
 80015ea:	0006      	movs	r6, r0
 80015ec:	4692      	mov	sl, r2
 80015ee:	b087      	sub	sp, #28
 80015f0:	0b24      	lsrs	r4, r4, #12
 80015f2:	0d5b      	lsrs	r3, r3, #21
 80015f4:	0fcf      	lsrs	r7, r1, #31
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d100      	bne.n	80015fc <__aeabi_dmul+0x24>
 80015fa:	e15c      	b.n	80018b6 <__aeabi_dmul+0x2de>
 80015fc:	4ad9      	ldr	r2, [pc, #868]	; (8001964 <__aeabi_dmul+0x38c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d100      	bne.n	8001604 <__aeabi_dmul+0x2c>
 8001602:	e175      	b.n	80018f0 <__aeabi_dmul+0x318>
 8001604:	0f42      	lsrs	r2, r0, #29
 8001606:	00e4      	lsls	r4, r4, #3
 8001608:	4314      	orrs	r4, r2
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	0412      	lsls	r2, r2, #16
 800160e:	4314      	orrs	r4, r2
 8001610:	4ad5      	ldr	r2, [pc, #852]	; (8001968 <__aeabi_dmul+0x390>)
 8001612:	00c5      	lsls	r5, r0, #3
 8001614:	4694      	mov	ip, r2
 8001616:	4463      	add	r3, ip
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	4699      	mov	r9, r3
 800161e:	469b      	mov	fp, r3
 8001620:	4643      	mov	r3, r8
 8001622:	4642      	mov	r2, r8
 8001624:	031e      	lsls	r6, r3, #12
 8001626:	0fd2      	lsrs	r2, r2, #31
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4650      	mov	r0, sl
 800162c:	4690      	mov	r8, r2
 800162e:	0b36      	lsrs	r6, r6, #12
 8001630:	0d5b      	lsrs	r3, r3, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x5e>
 8001634:	e120      	b.n	8001878 <__aeabi_dmul+0x2a0>
 8001636:	4acb      	ldr	r2, [pc, #812]	; (8001964 <__aeabi_dmul+0x38c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x66>
 800163c:	e162      	b.n	8001904 <__aeabi_dmul+0x32c>
 800163e:	49ca      	ldr	r1, [pc, #808]	; (8001968 <__aeabi_dmul+0x390>)
 8001640:	0f42      	lsrs	r2, r0, #29
 8001642:	468c      	mov	ip, r1
 8001644:	9900      	ldr	r1, [sp, #0]
 8001646:	4463      	add	r3, ip
 8001648:	00f6      	lsls	r6, r6, #3
 800164a:	468c      	mov	ip, r1
 800164c:	4316      	orrs	r6, r2
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	449c      	add	ip, r3
 8001652:	0412      	lsls	r2, r2, #16
 8001654:	4663      	mov	r3, ip
 8001656:	4316      	orrs	r6, r2
 8001658:	00c2      	lsls	r2, r0, #3
 800165a:	2000      	movs	r0, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	9900      	ldr	r1, [sp, #0]
 8001660:	4643      	mov	r3, r8
 8001662:	3101      	adds	r1, #1
 8001664:	468c      	mov	ip, r1
 8001666:	4649      	mov	r1, r9
 8001668:	407b      	eors	r3, r7
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	290f      	cmp	r1, #15
 800166e:	d826      	bhi.n	80016be <__aeabi_dmul+0xe6>
 8001670:	4bbe      	ldr	r3, [pc, #760]	; (800196c <__aeabi_dmul+0x394>)
 8001672:	0089      	lsls	r1, r1, #2
 8001674:	5859      	ldr	r1, [r3, r1]
 8001676:	468f      	mov	pc, r1
 8001678:	4643      	mov	r3, r8
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	0034      	movs	r4, r6
 800167e:	0015      	movs	r5, r2
 8001680:	4683      	mov	fp, r0
 8001682:	465b      	mov	r3, fp
 8001684:	2b02      	cmp	r3, #2
 8001686:	d016      	beq.n	80016b6 <__aeabi_dmul+0xde>
 8001688:	2b03      	cmp	r3, #3
 800168a:	d100      	bne.n	800168e <__aeabi_dmul+0xb6>
 800168c:	e203      	b.n	8001a96 <__aeabi_dmul+0x4be>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d000      	beq.n	8001694 <__aeabi_dmul+0xbc>
 8001692:	e0cd      	b.n	8001830 <__aeabi_dmul+0x258>
 8001694:	2200      	movs	r2, #0
 8001696:	2400      	movs	r4, #0
 8001698:	2500      	movs	r5, #0
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	0512      	lsls	r2, r2, #20
 800169e:	4322      	orrs	r2, r4
 80016a0:	07db      	lsls	r3, r3, #31
 80016a2:	431a      	orrs	r2, r3
 80016a4:	0028      	movs	r0, r5
 80016a6:	0011      	movs	r1, r2
 80016a8:	b007      	add	sp, #28
 80016aa:	bcf0      	pop	{r4, r5, r6, r7}
 80016ac:	46bb      	mov	fp, r7
 80016ae:	46b2      	mov	sl, r6
 80016b0:	46a9      	mov	r9, r5
 80016b2:	46a0      	mov	r8, r4
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b6:	2400      	movs	r4, #0
 80016b8:	2500      	movs	r5, #0
 80016ba:	4aaa      	ldr	r2, [pc, #680]	; (8001964 <__aeabi_dmul+0x38c>)
 80016bc:	e7ed      	b.n	800169a <__aeabi_dmul+0xc2>
 80016be:	0c28      	lsrs	r0, r5, #16
 80016c0:	042d      	lsls	r5, r5, #16
 80016c2:	0c2d      	lsrs	r5, r5, #16
 80016c4:	002b      	movs	r3, r5
 80016c6:	0c11      	lsrs	r1, r2, #16
 80016c8:	0412      	lsls	r2, r2, #16
 80016ca:	0c12      	lsrs	r2, r2, #16
 80016cc:	4353      	muls	r3, r2
 80016ce:	4698      	mov	r8, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	002f      	movs	r7, r5
 80016d4:	4343      	muls	r3, r0
 80016d6:	4699      	mov	r9, r3
 80016d8:	434f      	muls	r7, r1
 80016da:	444f      	add	r7, r9
 80016dc:	46bb      	mov	fp, r7
 80016de:	4647      	mov	r7, r8
 80016e0:	000b      	movs	r3, r1
 80016e2:	0c3f      	lsrs	r7, r7, #16
 80016e4:	46ba      	mov	sl, r7
 80016e6:	4343      	muls	r3, r0
 80016e8:	44da      	add	sl, fp
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	45d1      	cmp	r9, sl
 80016ee:	d904      	bls.n	80016fa <__aeabi_dmul+0x122>
 80016f0:	2780      	movs	r7, #128	; 0x80
 80016f2:	027f      	lsls	r7, r7, #9
 80016f4:	46b9      	mov	r9, r7
 80016f6:	444b      	add	r3, r9
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	4653      	mov	r3, sl
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	469b      	mov	fp, r3
 8001700:	4653      	mov	r3, sl
 8001702:	041f      	lsls	r7, r3, #16
 8001704:	4643      	mov	r3, r8
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	0c1b      	lsrs	r3, r3, #16
 800170a:	4698      	mov	r8, r3
 800170c:	003b      	movs	r3, r7
 800170e:	4443      	add	r3, r8
 8001710:	9304      	str	r3, [sp, #16]
 8001712:	0c33      	lsrs	r3, r6, #16
 8001714:	0436      	lsls	r6, r6, #16
 8001716:	0c36      	lsrs	r6, r6, #16
 8001718:	4698      	mov	r8, r3
 800171a:	0033      	movs	r3, r6
 800171c:	4343      	muls	r3, r0
 800171e:	4699      	mov	r9, r3
 8001720:	4643      	mov	r3, r8
 8001722:	4343      	muls	r3, r0
 8001724:	002f      	movs	r7, r5
 8001726:	469a      	mov	sl, r3
 8001728:	4643      	mov	r3, r8
 800172a:	4377      	muls	r7, r6
 800172c:	435d      	muls	r5, r3
 800172e:	0c38      	lsrs	r0, r7, #16
 8001730:	444d      	add	r5, r9
 8001732:	1945      	adds	r5, r0, r5
 8001734:	45a9      	cmp	r9, r5
 8001736:	d903      	bls.n	8001740 <__aeabi_dmul+0x168>
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	4699      	mov	r9, r3
 800173e:	44ca      	add	sl, r9
 8001740:	043f      	lsls	r7, r7, #16
 8001742:	0c28      	lsrs	r0, r5, #16
 8001744:	0c3f      	lsrs	r7, r7, #16
 8001746:	042d      	lsls	r5, r5, #16
 8001748:	19ed      	adds	r5, r5, r7
 800174a:	0c27      	lsrs	r7, r4, #16
 800174c:	0424      	lsls	r4, r4, #16
 800174e:	0c24      	lsrs	r4, r4, #16
 8001750:	0003      	movs	r3, r0
 8001752:	0020      	movs	r0, r4
 8001754:	4350      	muls	r0, r2
 8001756:	437a      	muls	r2, r7
 8001758:	4691      	mov	r9, r2
 800175a:	003a      	movs	r2, r7
 800175c:	4453      	add	r3, sl
 800175e:	9305      	str	r3, [sp, #20]
 8001760:	0c03      	lsrs	r3, r0, #16
 8001762:	469a      	mov	sl, r3
 8001764:	434a      	muls	r2, r1
 8001766:	4361      	muls	r1, r4
 8001768:	4449      	add	r1, r9
 800176a:	4451      	add	r1, sl
 800176c:	44ab      	add	fp, r5
 800176e:	4589      	cmp	r9, r1
 8001770:	d903      	bls.n	800177a <__aeabi_dmul+0x1a2>
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	025b      	lsls	r3, r3, #9
 8001776:	4699      	mov	r9, r3
 8001778:	444a      	add	r2, r9
 800177a:	0400      	lsls	r0, r0, #16
 800177c:	0c0b      	lsrs	r3, r1, #16
 800177e:	0c00      	lsrs	r0, r0, #16
 8001780:	0409      	lsls	r1, r1, #16
 8001782:	1809      	adds	r1, r1, r0
 8001784:	0020      	movs	r0, r4
 8001786:	4699      	mov	r9, r3
 8001788:	4643      	mov	r3, r8
 800178a:	4370      	muls	r0, r6
 800178c:	435c      	muls	r4, r3
 800178e:	437e      	muls	r6, r7
 8001790:	435f      	muls	r7, r3
 8001792:	0c03      	lsrs	r3, r0, #16
 8001794:	4698      	mov	r8, r3
 8001796:	19a4      	adds	r4, r4, r6
 8001798:	4444      	add	r4, r8
 800179a:	444a      	add	r2, r9
 800179c:	9703      	str	r7, [sp, #12]
 800179e:	42a6      	cmp	r6, r4
 80017a0:	d904      	bls.n	80017ac <__aeabi_dmul+0x1d4>
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	025b      	lsls	r3, r3, #9
 80017a6:	4698      	mov	r8, r3
 80017a8:	4447      	add	r7, r8
 80017aa:	9703      	str	r7, [sp, #12]
 80017ac:	0423      	lsls	r3, r4, #16
 80017ae:	9e02      	ldr	r6, [sp, #8]
 80017b0:	469a      	mov	sl, r3
 80017b2:	9b05      	ldr	r3, [sp, #20]
 80017b4:	445e      	add	r6, fp
 80017b6:	4698      	mov	r8, r3
 80017b8:	42ae      	cmp	r6, r5
 80017ba:	41ad      	sbcs	r5, r5
 80017bc:	1876      	adds	r6, r6, r1
 80017be:	428e      	cmp	r6, r1
 80017c0:	4189      	sbcs	r1, r1
 80017c2:	0400      	lsls	r0, r0, #16
 80017c4:	0c00      	lsrs	r0, r0, #16
 80017c6:	4450      	add	r0, sl
 80017c8:	4440      	add	r0, r8
 80017ca:	426d      	negs	r5, r5
 80017cc:	1947      	adds	r7, r0, r5
 80017ce:	46b8      	mov	r8, r7
 80017d0:	4693      	mov	fp, r2
 80017d2:	4249      	negs	r1, r1
 80017d4:	4689      	mov	r9, r1
 80017d6:	44c3      	add	fp, r8
 80017d8:	44d9      	add	r9, fp
 80017da:	4298      	cmp	r0, r3
 80017dc:	4180      	sbcs	r0, r0
 80017de:	45a8      	cmp	r8, r5
 80017e0:	41ad      	sbcs	r5, r5
 80017e2:	4593      	cmp	fp, r2
 80017e4:	4192      	sbcs	r2, r2
 80017e6:	4589      	cmp	r9, r1
 80017e8:	4189      	sbcs	r1, r1
 80017ea:	426d      	negs	r5, r5
 80017ec:	4240      	negs	r0, r0
 80017ee:	4328      	orrs	r0, r5
 80017f0:	0c24      	lsrs	r4, r4, #16
 80017f2:	4252      	negs	r2, r2
 80017f4:	4249      	negs	r1, r1
 80017f6:	430a      	orrs	r2, r1
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	1900      	adds	r0, r0, r4
 80017fc:	1880      	adds	r0, r0, r2
 80017fe:	18c7      	adds	r7, r0, r3
 8001800:	464b      	mov	r3, r9
 8001802:	0ddc      	lsrs	r4, r3, #23
 8001804:	9b04      	ldr	r3, [sp, #16]
 8001806:	0275      	lsls	r5, r6, #9
 8001808:	431d      	orrs	r5, r3
 800180a:	1e6a      	subs	r2, r5, #1
 800180c:	4195      	sbcs	r5, r2
 800180e:	464b      	mov	r3, r9
 8001810:	0df6      	lsrs	r6, r6, #23
 8001812:	027f      	lsls	r7, r7, #9
 8001814:	4335      	orrs	r5, r6
 8001816:	025a      	lsls	r2, r3, #9
 8001818:	433c      	orrs	r4, r7
 800181a:	4315      	orrs	r5, r2
 800181c:	01fb      	lsls	r3, r7, #7
 800181e:	d400      	bmi.n	8001822 <__aeabi_dmul+0x24a>
 8001820:	e11c      	b.n	8001a5c <__aeabi_dmul+0x484>
 8001822:	2101      	movs	r1, #1
 8001824:	086a      	lsrs	r2, r5, #1
 8001826:	400d      	ands	r5, r1
 8001828:	4315      	orrs	r5, r2
 800182a:	07e2      	lsls	r2, r4, #31
 800182c:	4315      	orrs	r5, r2
 800182e:	0864      	lsrs	r4, r4, #1
 8001830:	494f      	ldr	r1, [pc, #316]	; (8001970 <__aeabi_dmul+0x398>)
 8001832:	4461      	add	r1, ip
 8001834:	2900      	cmp	r1, #0
 8001836:	dc00      	bgt.n	800183a <__aeabi_dmul+0x262>
 8001838:	e0b0      	b.n	800199c <__aeabi_dmul+0x3c4>
 800183a:	076b      	lsls	r3, r5, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_dmul+0x27a>
 800183e:	220f      	movs	r2, #15
 8001840:	402a      	ands	r2, r5
 8001842:	2a04      	cmp	r2, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_dmul+0x27a>
 8001846:	1d2a      	adds	r2, r5, #4
 8001848:	42aa      	cmp	r2, r5
 800184a:	41ad      	sbcs	r5, r5
 800184c:	426d      	negs	r5, r5
 800184e:	1964      	adds	r4, r4, r5
 8001850:	0015      	movs	r5, r2
 8001852:	01e3      	lsls	r3, r4, #7
 8001854:	d504      	bpl.n	8001860 <__aeabi_dmul+0x288>
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	4a46      	ldr	r2, [pc, #280]	; (8001974 <__aeabi_dmul+0x39c>)
 800185a:	00c9      	lsls	r1, r1, #3
 800185c:	4014      	ands	r4, r2
 800185e:	4461      	add	r1, ip
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <__aeabi_dmul+0x3a0>)
 8001862:	4291      	cmp	r1, r2
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x290>
 8001866:	e726      	b.n	80016b6 <__aeabi_dmul+0xde>
 8001868:	0762      	lsls	r2, r4, #29
 800186a:	08ed      	lsrs	r5, r5, #3
 800186c:	0264      	lsls	r4, r4, #9
 800186e:	0549      	lsls	r1, r1, #21
 8001870:	4315      	orrs	r5, r2
 8001872:	0b24      	lsrs	r4, r4, #12
 8001874:	0d4a      	lsrs	r2, r1, #21
 8001876:	e710      	b.n	800169a <__aeabi_dmul+0xc2>
 8001878:	4652      	mov	r2, sl
 800187a:	4332      	orrs	r2, r6
 800187c:	d100      	bne.n	8001880 <__aeabi_dmul+0x2a8>
 800187e:	e07f      	b.n	8001980 <__aeabi_dmul+0x3a8>
 8001880:	2e00      	cmp	r6, #0
 8001882:	d100      	bne.n	8001886 <__aeabi_dmul+0x2ae>
 8001884:	e0dc      	b.n	8001a40 <__aeabi_dmul+0x468>
 8001886:	0030      	movs	r0, r6
 8001888:	f000 fdd6 	bl	8002438 <__clzsi2>
 800188c:	0002      	movs	r2, r0
 800188e:	3a0b      	subs	r2, #11
 8001890:	231d      	movs	r3, #29
 8001892:	0001      	movs	r1, r0
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	4652      	mov	r2, sl
 8001898:	3908      	subs	r1, #8
 800189a:	40da      	lsrs	r2, r3
 800189c:	408e      	lsls	r6, r1
 800189e:	4316      	orrs	r6, r2
 80018a0:	4652      	mov	r2, sl
 80018a2:	408a      	lsls	r2, r1
 80018a4:	9b00      	ldr	r3, [sp, #0]
 80018a6:	4935      	ldr	r1, [pc, #212]	; (800197c <__aeabi_dmul+0x3a4>)
 80018a8:	1a18      	subs	r0, r3, r0
 80018aa:	0003      	movs	r3, r0
 80018ac:	468c      	mov	ip, r1
 80018ae:	4463      	add	r3, ip
 80018b0:	2000      	movs	r0, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	e6d3      	b.n	800165e <__aeabi_dmul+0x86>
 80018b6:	0025      	movs	r5, r4
 80018b8:	4305      	orrs	r5, r0
 80018ba:	d04a      	beq.n	8001952 <__aeabi_dmul+0x37a>
 80018bc:	2c00      	cmp	r4, #0
 80018be:	d100      	bne.n	80018c2 <__aeabi_dmul+0x2ea>
 80018c0:	e0b0      	b.n	8001a24 <__aeabi_dmul+0x44c>
 80018c2:	0020      	movs	r0, r4
 80018c4:	f000 fdb8 	bl	8002438 <__clzsi2>
 80018c8:	0001      	movs	r1, r0
 80018ca:	0002      	movs	r2, r0
 80018cc:	390b      	subs	r1, #11
 80018ce:	231d      	movs	r3, #29
 80018d0:	0010      	movs	r0, r2
 80018d2:	1a5b      	subs	r3, r3, r1
 80018d4:	0031      	movs	r1, r6
 80018d6:	0035      	movs	r5, r6
 80018d8:	3808      	subs	r0, #8
 80018da:	4084      	lsls	r4, r0
 80018dc:	40d9      	lsrs	r1, r3
 80018de:	4085      	lsls	r5, r0
 80018e0:	430c      	orrs	r4, r1
 80018e2:	4826      	ldr	r0, [pc, #152]	; (800197c <__aeabi_dmul+0x3a4>)
 80018e4:	1a83      	subs	r3, r0, r2
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	4699      	mov	r9, r3
 80018ec:	469b      	mov	fp, r3
 80018ee:	e697      	b.n	8001620 <__aeabi_dmul+0x48>
 80018f0:	0005      	movs	r5, r0
 80018f2:	4325      	orrs	r5, r4
 80018f4:	d126      	bne.n	8001944 <__aeabi_dmul+0x36c>
 80018f6:	2208      	movs	r2, #8
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2302      	movs	r3, #2
 80018fc:	2400      	movs	r4, #0
 80018fe:	4691      	mov	r9, r2
 8001900:	469b      	mov	fp, r3
 8001902:	e68d      	b.n	8001620 <__aeabi_dmul+0x48>
 8001904:	4652      	mov	r2, sl
 8001906:	9b00      	ldr	r3, [sp, #0]
 8001908:	4332      	orrs	r2, r6
 800190a:	d110      	bne.n	800192e <__aeabi_dmul+0x356>
 800190c:	4915      	ldr	r1, [pc, #84]	; (8001964 <__aeabi_dmul+0x38c>)
 800190e:	2600      	movs	r6, #0
 8001910:	468c      	mov	ip, r1
 8001912:	4463      	add	r3, ip
 8001914:	4649      	mov	r1, r9
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2302      	movs	r3, #2
 800191a:	4319      	orrs	r1, r3
 800191c:	4689      	mov	r9, r1
 800191e:	2002      	movs	r0, #2
 8001920:	e69d      	b.n	800165e <__aeabi_dmul+0x86>
 8001922:	465b      	mov	r3, fp
 8001924:	9701      	str	r7, [sp, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d000      	beq.n	800192c <__aeabi_dmul+0x354>
 800192a:	e6ad      	b.n	8001688 <__aeabi_dmul+0xb0>
 800192c:	e6c3      	b.n	80016b6 <__aeabi_dmul+0xde>
 800192e:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <__aeabi_dmul+0x38c>)
 8001930:	2003      	movs	r0, #3
 8001932:	4694      	mov	ip, r2
 8001934:	4463      	add	r3, ip
 8001936:	464a      	mov	r2, r9
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2303      	movs	r3, #3
 800193c:	431a      	orrs	r2, r3
 800193e:	4691      	mov	r9, r2
 8001940:	4652      	mov	r2, sl
 8001942:	e68c      	b.n	800165e <__aeabi_dmul+0x86>
 8001944:	220c      	movs	r2, #12
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2303      	movs	r3, #3
 800194a:	0005      	movs	r5, r0
 800194c:	4691      	mov	r9, r2
 800194e:	469b      	mov	fp, r3
 8001950:	e666      	b.n	8001620 <__aeabi_dmul+0x48>
 8001952:	2304      	movs	r3, #4
 8001954:	4699      	mov	r9, r3
 8001956:	2300      	movs	r3, #0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	2400      	movs	r4, #0
 800195e:	469b      	mov	fp, r3
 8001960:	e65e      	b.n	8001620 <__aeabi_dmul+0x48>
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	000007ff 	.word	0x000007ff
 8001968:	fffffc01 	.word	0xfffffc01
 800196c:	0800b6a0 	.word	0x0800b6a0
 8001970:	000003ff 	.word	0x000003ff
 8001974:	feffffff 	.word	0xfeffffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	fffffc0d 	.word	0xfffffc0d
 8001980:	4649      	mov	r1, r9
 8001982:	2301      	movs	r3, #1
 8001984:	4319      	orrs	r1, r3
 8001986:	4689      	mov	r9, r1
 8001988:	2600      	movs	r6, #0
 800198a:	2001      	movs	r0, #1
 800198c:	e667      	b.n	800165e <__aeabi_dmul+0x86>
 800198e:	2300      	movs	r3, #0
 8001990:	2480      	movs	r4, #128	; 0x80
 8001992:	2500      	movs	r5, #0
 8001994:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	e67e      	b.n	800169a <__aeabi_dmul+0xc2>
 800199c:	2001      	movs	r0, #1
 800199e:	1a40      	subs	r0, r0, r1
 80019a0:	2838      	cmp	r0, #56	; 0x38
 80019a2:	dd00      	ble.n	80019a6 <__aeabi_dmul+0x3ce>
 80019a4:	e676      	b.n	8001694 <__aeabi_dmul+0xbc>
 80019a6:	281f      	cmp	r0, #31
 80019a8:	dd5b      	ble.n	8001a62 <__aeabi_dmul+0x48a>
 80019aa:	221f      	movs	r2, #31
 80019ac:	0023      	movs	r3, r4
 80019ae:	4252      	negs	r2, r2
 80019b0:	1a51      	subs	r1, r2, r1
 80019b2:	40cb      	lsrs	r3, r1
 80019b4:	0019      	movs	r1, r3
 80019b6:	2820      	cmp	r0, #32
 80019b8:	d003      	beq.n	80019c2 <__aeabi_dmul+0x3ea>
 80019ba:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <__aeabi_dmul+0x4d0>)
 80019bc:	4462      	add	r2, ip
 80019be:	4094      	lsls	r4, r2
 80019c0:	4325      	orrs	r5, r4
 80019c2:	1e6a      	subs	r2, r5, #1
 80019c4:	4195      	sbcs	r5, r2
 80019c6:	002a      	movs	r2, r5
 80019c8:	430a      	orrs	r2, r1
 80019ca:	2107      	movs	r1, #7
 80019cc:	000d      	movs	r5, r1
 80019ce:	2400      	movs	r4, #0
 80019d0:	4015      	ands	r5, r2
 80019d2:	4211      	tst	r1, r2
 80019d4:	d05b      	beq.n	8001a8e <__aeabi_dmul+0x4b6>
 80019d6:	210f      	movs	r1, #15
 80019d8:	2400      	movs	r4, #0
 80019da:	4011      	ands	r1, r2
 80019dc:	2904      	cmp	r1, #4
 80019de:	d053      	beq.n	8001a88 <__aeabi_dmul+0x4b0>
 80019e0:	1d11      	adds	r1, r2, #4
 80019e2:	4291      	cmp	r1, r2
 80019e4:	4192      	sbcs	r2, r2
 80019e6:	4252      	negs	r2, r2
 80019e8:	18a4      	adds	r4, r4, r2
 80019ea:	000a      	movs	r2, r1
 80019ec:	0223      	lsls	r3, r4, #8
 80019ee:	d54b      	bpl.n	8001a88 <__aeabi_dmul+0x4b0>
 80019f0:	2201      	movs	r2, #1
 80019f2:	2400      	movs	r4, #0
 80019f4:	2500      	movs	r5, #0
 80019f6:	e650      	b.n	800169a <__aeabi_dmul+0xc2>
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	031b      	lsls	r3, r3, #12
 80019fc:	421c      	tst	r4, r3
 80019fe:	d009      	beq.n	8001a14 <__aeabi_dmul+0x43c>
 8001a00:	421e      	tst	r6, r3
 8001a02:	d107      	bne.n	8001a14 <__aeabi_dmul+0x43c>
 8001a04:	4333      	orrs	r3, r6
 8001a06:	031c      	lsls	r4, r3, #12
 8001a08:	4643      	mov	r3, r8
 8001a0a:	0015      	movs	r5, r2
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	e642      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	0312      	lsls	r2, r2, #12
 8001a18:	4314      	orrs	r4, r2
 8001a1a:	0324      	lsls	r4, r4, #12
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001a1e:	0b24      	lsrs	r4, r4, #12
 8001a20:	9701      	str	r7, [sp, #4]
 8001a22:	e63a      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a24:	f000 fd08 	bl	8002438 <__clzsi2>
 8001a28:	0001      	movs	r1, r0
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	3115      	adds	r1, #21
 8001a2e:	3220      	adds	r2, #32
 8001a30:	291c      	cmp	r1, #28
 8001a32:	dc00      	bgt.n	8001a36 <__aeabi_dmul+0x45e>
 8001a34:	e74b      	b.n	80018ce <__aeabi_dmul+0x2f6>
 8001a36:	0034      	movs	r4, r6
 8001a38:	3808      	subs	r0, #8
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	4084      	lsls	r4, r0
 8001a3e:	e750      	b.n	80018e2 <__aeabi_dmul+0x30a>
 8001a40:	f000 fcfa 	bl	8002438 <__clzsi2>
 8001a44:	0003      	movs	r3, r0
 8001a46:	001a      	movs	r2, r3
 8001a48:	3215      	adds	r2, #21
 8001a4a:	3020      	adds	r0, #32
 8001a4c:	2a1c      	cmp	r2, #28
 8001a4e:	dc00      	bgt.n	8001a52 <__aeabi_dmul+0x47a>
 8001a50:	e71e      	b.n	8001890 <__aeabi_dmul+0x2b8>
 8001a52:	4656      	mov	r6, sl
 8001a54:	3b08      	subs	r3, #8
 8001a56:	2200      	movs	r2, #0
 8001a58:	409e      	lsls	r6, r3
 8001a5a:	e723      	b.n	80018a4 <__aeabi_dmul+0x2cc>
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	469c      	mov	ip, r3
 8001a60:	e6e6      	b.n	8001830 <__aeabi_dmul+0x258>
 8001a62:	4912      	ldr	r1, [pc, #72]	; (8001aac <__aeabi_dmul+0x4d4>)
 8001a64:	0022      	movs	r2, r4
 8001a66:	4461      	add	r1, ip
 8001a68:	002e      	movs	r6, r5
 8001a6a:	408d      	lsls	r5, r1
 8001a6c:	408a      	lsls	r2, r1
 8001a6e:	40c6      	lsrs	r6, r0
 8001a70:	1e69      	subs	r1, r5, #1
 8001a72:	418d      	sbcs	r5, r1
 8001a74:	4332      	orrs	r2, r6
 8001a76:	432a      	orrs	r2, r5
 8001a78:	40c4      	lsrs	r4, r0
 8001a7a:	0753      	lsls	r3, r2, #29
 8001a7c:	d0b6      	beq.n	80019ec <__aeabi_dmul+0x414>
 8001a7e:	210f      	movs	r1, #15
 8001a80:	4011      	ands	r1, r2
 8001a82:	2904      	cmp	r1, #4
 8001a84:	d1ac      	bne.n	80019e0 <__aeabi_dmul+0x408>
 8001a86:	e7b1      	b.n	80019ec <__aeabi_dmul+0x414>
 8001a88:	0765      	lsls	r5, r4, #29
 8001a8a:	0264      	lsls	r4, r4, #9
 8001a8c:	0b24      	lsrs	r4, r4, #12
 8001a8e:	08d2      	lsrs	r2, r2, #3
 8001a90:	4315      	orrs	r5, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	e601      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	0312      	lsls	r2, r2, #12
 8001a9a:	4314      	orrs	r4, r2
 8001a9c:	0324      	lsls	r4, r4, #12
 8001a9e:	4a01      	ldr	r2, [pc, #4]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001aa0:	0b24      	lsrs	r4, r4, #12
 8001aa2:	e5fa      	b.n	800169a <__aeabi_dmul+0xc2>
 8001aa4:	000007ff 	.word	0x000007ff
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e

08001ab0 <__aeabi_dsub>:
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	4657      	mov	r7, sl
 8001ab4:	464e      	mov	r6, r9
 8001ab6:	4645      	mov	r5, r8
 8001ab8:	46de      	mov	lr, fp
 8001aba:	b5e0      	push	{r5, r6, r7, lr}
 8001abc:	001e      	movs	r6, r3
 8001abe:	0017      	movs	r7, r2
 8001ac0:	004a      	lsls	r2, r1, #1
 8001ac2:	030b      	lsls	r3, r1, #12
 8001ac4:	0d52      	lsrs	r2, r2, #21
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	4690      	mov	r8, r2
 8001aca:	0f42      	lsrs	r2, r0, #29
 8001acc:	431a      	orrs	r2, r3
 8001ace:	0fcd      	lsrs	r5, r1, #31
 8001ad0:	4ccd      	ldr	r4, [pc, #820]	; (8001e08 <__aeabi_dsub+0x358>)
 8001ad2:	0331      	lsls	r1, r6, #12
 8001ad4:	00c3      	lsls	r3, r0, #3
 8001ad6:	4694      	mov	ip, r2
 8001ad8:	0070      	lsls	r0, r6, #1
 8001ada:	0f7a      	lsrs	r2, r7, #29
 8001adc:	0a49      	lsrs	r1, r1, #9
 8001ade:	00ff      	lsls	r7, r7, #3
 8001ae0:	469a      	mov	sl, r3
 8001ae2:	46b9      	mov	r9, r7
 8001ae4:	0d40      	lsrs	r0, r0, #21
 8001ae6:	0ff6      	lsrs	r6, r6, #31
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	42a0      	cmp	r0, r4
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x40>
 8001aee:	e0b1      	b.n	8001c54 <__aeabi_dsub+0x1a4>
 8001af0:	2201      	movs	r2, #1
 8001af2:	4056      	eors	r6, r2
 8001af4:	46b3      	mov	fp, r6
 8001af6:	42b5      	cmp	r5, r6
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x4c>
 8001afa:	e088      	b.n	8001c0e <__aeabi_dsub+0x15e>
 8001afc:	4642      	mov	r2, r8
 8001afe:	1a12      	subs	r2, r2, r0
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_dsub+0x56>
 8001b04:	e0ae      	b.n	8001c64 <__aeabi_dsub+0x1b4>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x5c>
 8001b0a:	e0c1      	b.n	8001c90 <__aeabi_dsub+0x1e0>
 8001b0c:	48be      	ldr	r0, [pc, #760]	; (8001e08 <__aeabi_dsub+0x358>)
 8001b0e:	4580      	cmp	r8, r0
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x64>
 8001b12:	e151      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001b14:	2080      	movs	r0, #128	; 0x80
 8001b16:	0400      	lsls	r0, r0, #16
 8001b18:	4301      	orrs	r1, r0
 8001b1a:	2a38      	cmp	r2, #56	; 0x38
 8001b1c:	dd00      	ble.n	8001b20 <__aeabi_dsub+0x70>
 8001b1e:	e17b      	b.n	8001e18 <__aeabi_dsub+0x368>
 8001b20:	2a1f      	cmp	r2, #31
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x76>
 8001b24:	e1ee      	b.n	8001f04 <__aeabi_dsub+0x454>
 8001b26:	2020      	movs	r0, #32
 8001b28:	003e      	movs	r6, r7
 8001b2a:	1a80      	subs	r0, r0, r2
 8001b2c:	000c      	movs	r4, r1
 8001b2e:	40d6      	lsrs	r6, r2
 8001b30:	40d1      	lsrs	r1, r2
 8001b32:	4087      	lsls	r7, r0
 8001b34:	4662      	mov	r2, ip
 8001b36:	4084      	lsls	r4, r0
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	1e78      	subs	r0, r7, #1
 8001b3c:	4187      	sbcs	r7, r0
 8001b3e:	4694      	mov	ip, r2
 8001b40:	4334      	orrs	r4, r6
 8001b42:	4327      	orrs	r7, r4
 8001b44:	1bdc      	subs	r4, r3, r7
 8001b46:	42a3      	cmp	r3, r4
 8001b48:	419b      	sbcs	r3, r3
 8001b4a:	4662      	mov	r2, ip
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4699      	mov	r9, r3
 8001b52:	464b      	mov	r3, r9
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	d400      	bmi.n	8001b5a <__aeabi_dsub+0xaa>
 8001b58:	e118      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001b5a:	464b      	mov	r3, r9
 8001b5c:	0258      	lsls	r0, r3, #9
 8001b5e:	0a43      	lsrs	r3, r0, #9
 8001b60:	4699      	mov	r9, r3
 8001b62:	464b      	mov	r3, r9
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0xba>
 8001b68:	e137      	b.n	8001dda <__aeabi_dsub+0x32a>
 8001b6a:	4648      	mov	r0, r9
 8001b6c:	f000 fc64 	bl	8002438 <__clzsi2>
 8001b70:	0001      	movs	r1, r0
 8001b72:	3908      	subs	r1, #8
 8001b74:	2320      	movs	r3, #32
 8001b76:	0022      	movs	r2, r4
 8001b78:	4648      	mov	r0, r9
 8001b7a:	1a5b      	subs	r3, r3, r1
 8001b7c:	40da      	lsrs	r2, r3
 8001b7e:	4088      	lsls	r0, r1
 8001b80:	408c      	lsls	r4, r1
 8001b82:	4643      	mov	r3, r8
 8001b84:	4310      	orrs	r0, r2
 8001b86:	4588      	cmp	r8, r1
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dsub+0xdc>
 8001b8a:	e136      	b.n	8001dfa <__aeabi_dsub+0x34a>
 8001b8c:	1ac9      	subs	r1, r1, r3
 8001b8e:	1c4b      	adds	r3, r1, #1
 8001b90:	2b1f      	cmp	r3, #31
 8001b92:	dd00      	ble.n	8001b96 <__aeabi_dsub+0xe6>
 8001b94:	e0ea      	b.n	8001d6c <__aeabi_dsub+0x2bc>
 8001b96:	2220      	movs	r2, #32
 8001b98:	0026      	movs	r6, r4
 8001b9a:	1ad2      	subs	r2, r2, r3
 8001b9c:	0001      	movs	r1, r0
 8001b9e:	4094      	lsls	r4, r2
 8001ba0:	40de      	lsrs	r6, r3
 8001ba2:	40d8      	lsrs	r0, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4091      	lsls	r1, r2
 8001ba8:	1e62      	subs	r2, r4, #1
 8001baa:	4194      	sbcs	r4, r2
 8001bac:	4681      	mov	r9, r0
 8001bae:	4698      	mov	r8, r3
 8001bb0:	4331      	orrs	r1, r6
 8001bb2:	430c      	orrs	r4, r1
 8001bb4:	0763      	lsls	r3, r4, #29
 8001bb6:	d009      	beq.n	8001bcc <__aeabi_dsub+0x11c>
 8001bb8:	230f      	movs	r3, #15
 8001bba:	4023      	ands	r3, r4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d005      	beq.n	8001bcc <__aeabi_dsub+0x11c>
 8001bc0:	1d23      	adds	r3, r4, #4
 8001bc2:	42a3      	cmp	r3, r4
 8001bc4:	41a4      	sbcs	r4, r4
 8001bc6:	4264      	negs	r4, r4
 8001bc8:	44a1      	add	r9, r4
 8001bca:	001c      	movs	r4, r3
 8001bcc:	464b      	mov	r3, r9
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	d400      	bmi.n	8001bd4 <__aeabi_dsub+0x124>
 8001bd2:	e0de      	b.n	8001d92 <__aeabi_dsub+0x2e2>
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <__aeabi_dsub+0x358>)
 8001bd8:	3101      	adds	r1, #1
 8001bda:	4299      	cmp	r1, r3
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x130>
 8001bde:	e0e7      	b.n	8001db0 <__aeabi_dsub+0x300>
 8001be0:	464b      	mov	r3, r9
 8001be2:	488a      	ldr	r0, [pc, #552]	; (8001e0c <__aeabi_dsub+0x35c>)
 8001be4:	08e4      	lsrs	r4, r4, #3
 8001be6:	4003      	ands	r3, r0
 8001be8:	0018      	movs	r0, r3
 8001bea:	0549      	lsls	r1, r1, #21
 8001bec:	075b      	lsls	r3, r3, #29
 8001bee:	0240      	lsls	r0, r0, #9
 8001bf0:	4323      	orrs	r3, r4
 8001bf2:	0d4a      	lsrs	r2, r1, #21
 8001bf4:	0b04      	lsrs	r4, r0, #12
 8001bf6:	0512      	lsls	r2, r2, #20
 8001bf8:	07ed      	lsls	r5, r5, #31
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	432a      	orrs	r2, r5
 8001bfe:	0018      	movs	r0, r3
 8001c00:	0011      	movs	r1, r2
 8001c02:	bcf0      	pop	{r4, r5, r6, r7}
 8001c04:	46bb      	mov	fp, r7
 8001c06:	46b2      	mov	sl, r6
 8001c08:	46a9      	mov	r9, r5
 8001c0a:	46a0      	mov	r8, r4
 8001c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c0e:	4642      	mov	r2, r8
 8001c10:	1a12      	subs	r2, r2, r0
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	dd52      	ble.n	8001cbc <__aeabi_dsub+0x20c>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x16c>
 8001c1a:	e09c      	b.n	8001d56 <__aeabi_dsub+0x2a6>
 8001c1c:	45a0      	cmp	r8, r4
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dsub+0x172>
 8001c20:	e0ca      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001c22:	2080      	movs	r0, #128	; 0x80
 8001c24:	0400      	lsls	r0, r0, #16
 8001c26:	4301      	orrs	r1, r0
 8001c28:	2a38      	cmp	r2, #56	; 0x38
 8001c2a:	dd00      	ble.n	8001c2e <__aeabi_dsub+0x17e>
 8001c2c:	e149      	b.n	8001ec2 <__aeabi_dsub+0x412>
 8001c2e:	2a1f      	cmp	r2, #31
 8001c30:	dc00      	bgt.n	8001c34 <__aeabi_dsub+0x184>
 8001c32:	e197      	b.n	8001f64 <__aeabi_dsub+0x4b4>
 8001c34:	0010      	movs	r0, r2
 8001c36:	000e      	movs	r6, r1
 8001c38:	3820      	subs	r0, #32
 8001c3a:	40c6      	lsrs	r6, r0
 8001c3c:	2a20      	cmp	r2, #32
 8001c3e:	d004      	beq.n	8001c4a <__aeabi_dsub+0x19a>
 8001c40:	2040      	movs	r0, #64	; 0x40
 8001c42:	1a82      	subs	r2, r0, r2
 8001c44:	4091      	lsls	r1, r2
 8001c46:	430f      	orrs	r7, r1
 8001c48:	46b9      	mov	r9, r7
 8001c4a:	464c      	mov	r4, r9
 8001c4c:	1e62      	subs	r2, r4, #1
 8001c4e:	4194      	sbcs	r4, r2
 8001c50:	4334      	orrs	r4, r6
 8001c52:	e13a      	b.n	8001eca <__aeabi_dsub+0x41a>
 8001c54:	000a      	movs	r2, r1
 8001c56:	433a      	orrs	r2, r7
 8001c58:	d028      	beq.n	8001cac <__aeabi_dsub+0x1fc>
 8001c5a:	46b3      	mov	fp, r6
 8001c5c:	42b5      	cmp	r5, r6
 8001c5e:	d02b      	beq.n	8001cb8 <__aeabi_dsub+0x208>
 8001c60:	4a6b      	ldr	r2, [pc, #428]	; (8001e10 <__aeabi_dsub+0x360>)
 8001c62:	4442      	add	r2, r8
 8001c64:	2a00      	cmp	r2, #0
 8001c66:	d05d      	beq.n	8001d24 <__aeabi_dsub+0x274>
 8001c68:	4642      	mov	r2, r8
 8001c6a:	4644      	mov	r4, r8
 8001c6c:	1a82      	subs	r2, r0, r2
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	d000      	beq.n	8001c74 <__aeabi_dsub+0x1c4>
 8001c72:	e0f5      	b.n	8001e60 <__aeabi_dsub+0x3b0>
 8001c74:	4665      	mov	r5, ip
 8001c76:	431d      	orrs	r5, r3
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x1cc>
 8001c7a:	e19c      	b.n	8001fb6 <__aeabi_dsub+0x506>
 8001c7c:	1e55      	subs	r5, r2, #1
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x1d4>
 8001c82:	e1fb      	b.n	800207c <__aeabi_dsub+0x5cc>
 8001c84:	4c60      	ldr	r4, [pc, #384]	; (8001e08 <__aeabi_dsub+0x358>)
 8001c86:	42a2      	cmp	r2, r4
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x1dc>
 8001c8a:	e1bd      	b.n	8002008 <__aeabi_dsub+0x558>
 8001c8c:	002a      	movs	r2, r5
 8001c8e:	e0f0      	b.n	8001e72 <__aeabi_dsub+0x3c2>
 8001c90:	0008      	movs	r0, r1
 8001c92:	4338      	orrs	r0, r7
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e8>
 8001c96:	e0c3      	b.n	8001e20 <__aeabi_dsub+0x370>
 8001c98:	1e50      	subs	r0, r2, #1
 8001c9a:	2a01      	cmp	r2, #1
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x1f0>
 8001c9e:	e1a8      	b.n	8001ff2 <__aeabi_dsub+0x542>
 8001ca0:	4c59      	ldr	r4, [pc, #356]	; (8001e08 <__aeabi_dsub+0x358>)
 8001ca2:	42a2      	cmp	r2, r4
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x1f8>
 8001ca6:	e087      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	e736      	b.n	8001b1a <__aeabi_dsub+0x6a>
 8001cac:	2201      	movs	r2, #1
 8001cae:	4056      	eors	r6, r2
 8001cb0:	46b3      	mov	fp, r6
 8001cb2:	42b5      	cmp	r5, r6
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x208>
 8001cb6:	e721      	b.n	8001afc <__aeabi_dsub+0x4c>
 8001cb8:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <__aeabi_dsub+0x360>)
 8001cba:	4442      	add	r2, r8
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x212>
 8001cc0:	e0b5      	b.n	8001e2e <__aeabi_dsub+0x37e>
 8001cc2:	4642      	mov	r2, r8
 8001cc4:	4644      	mov	r4, r8
 8001cc6:	1a82      	subs	r2, r0, r2
 8001cc8:	2c00      	cmp	r4, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x21e>
 8001ccc:	e138      	b.n	8001f40 <__aeabi_dsub+0x490>
 8001cce:	4e4e      	ldr	r6, [pc, #312]	; (8001e08 <__aeabi_dsub+0x358>)
 8001cd0:	42b0      	cmp	r0, r6
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dsub+0x226>
 8001cd4:	e1de      	b.n	8002094 <__aeabi_dsub+0x5e4>
 8001cd6:	2680      	movs	r6, #128	; 0x80
 8001cd8:	4664      	mov	r4, ip
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4334      	orrs	r4, r6
 8001cde:	46a4      	mov	ip, r4
 8001ce0:	2a38      	cmp	r2, #56	; 0x38
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dsub+0x236>
 8001ce4:	e196      	b.n	8002014 <__aeabi_dsub+0x564>
 8001ce6:	2a1f      	cmp	r2, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0x23c>
 8001cea:	e224      	b.n	8002136 <__aeabi_dsub+0x686>
 8001cec:	2620      	movs	r6, #32
 8001cee:	1ab4      	subs	r4, r6, r2
 8001cf0:	46a2      	mov	sl, r4
 8001cf2:	4664      	mov	r4, ip
 8001cf4:	4656      	mov	r6, sl
 8001cf6:	40b4      	lsls	r4, r6
 8001cf8:	46a1      	mov	r9, r4
 8001cfa:	001c      	movs	r4, r3
 8001cfc:	464e      	mov	r6, r9
 8001cfe:	40d4      	lsrs	r4, r2
 8001d00:	4326      	orrs	r6, r4
 8001d02:	0034      	movs	r4, r6
 8001d04:	4656      	mov	r6, sl
 8001d06:	40b3      	lsls	r3, r6
 8001d08:	1e5e      	subs	r6, r3, #1
 8001d0a:	41b3      	sbcs	r3, r6
 8001d0c:	431c      	orrs	r4, r3
 8001d0e:	4663      	mov	r3, ip
 8001d10:	40d3      	lsrs	r3, r2
 8001d12:	18c9      	adds	r1, r1, r3
 8001d14:	19e4      	adds	r4, r4, r7
 8001d16:	42bc      	cmp	r4, r7
 8001d18:	41bf      	sbcs	r7, r7
 8001d1a:	427f      	negs	r7, r7
 8001d1c:	46b9      	mov	r9, r7
 8001d1e:	4680      	mov	r8, r0
 8001d20:	4489      	add	r9, r1
 8001d22:	e0d8      	b.n	8001ed6 <__aeabi_dsub+0x426>
 8001d24:	4640      	mov	r0, r8
 8001d26:	4c3b      	ldr	r4, [pc, #236]	; (8001e14 <__aeabi_dsub+0x364>)
 8001d28:	3001      	adds	r0, #1
 8001d2a:	4220      	tst	r0, r4
 8001d2c:	d000      	beq.n	8001d30 <__aeabi_dsub+0x280>
 8001d2e:	e0b4      	b.n	8001e9a <__aeabi_dsub+0x3ea>
 8001d30:	4640      	mov	r0, r8
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dsub+0x288>
 8001d36:	e144      	b.n	8001fc2 <__aeabi_dsub+0x512>
 8001d38:	4660      	mov	r0, ip
 8001d3a:	4318      	orrs	r0, r3
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x290>
 8001d3e:	e190      	b.n	8002062 <__aeabi_dsub+0x5b2>
 8001d40:	0008      	movs	r0, r1
 8001d42:	4338      	orrs	r0, r7
 8001d44:	d000      	beq.n	8001d48 <__aeabi_dsub+0x298>
 8001d46:	e1aa      	b.n	800209e <__aeabi_dsub+0x5ee>
 8001d48:	4661      	mov	r1, ip
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	0749      	lsls	r1, r1, #29
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	4661      	mov	r1, ip
 8001d52:	08cc      	lsrs	r4, r1, #3
 8001d54:	e027      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001d56:	0008      	movs	r0, r1
 8001d58:	4338      	orrs	r0, r7
 8001d5a:	d061      	beq.n	8001e20 <__aeabi_dsub+0x370>
 8001d5c:	1e50      	subs	r0, r2, #1
 8001d5e:	2a01      	cmp	r2, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x2b4>
 8001d62:	e139      	b.n	8001fd8 <__aeabi_dsub+0x528>
 8001d64:	42a2      	cmp	r2, r4
 8001d66:	d027      	beq.n	8001db8 <__aeabi_dsub+0x308>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	e75d      	b.n	8001c28 <__aeabi_dsub+0x178>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	391f      	subs	r1, #31
 8001d70:	40ca      	lsrs	r2, r1
 8001d72:	0011      	movs	r1, r2
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d003      	beq.n	8001d80 <__aeabi_dsub+0x2d0>
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	4098      	lsls	r0, r3
 8001d7e:	4304      	orrs	r4, r0
 8001d80:	1e63      	subs	r3, r4, #1
 8001d82:	419c      	sbcs	r4, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	4699      	mov	r9, r3
 8001d88:	4698      	mov	r8, r3
 8001d8a:	430c      	orrs	r4, r1
 8001d8c:	0763      	lsls	r3, r4, #29
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x2e2>
 8001d90:	e712      	b.n	8001bb8 <__aeabi_dsub+0x108>
 8001d92:	464b      	mov	r3, r9
 8001d94:	464a      	mov	r2, r9
 8001d96:	08e4      	lsrs	r4, r4, #3
 8001d98:	075b      	lsls	r3, r3, #29
 8001d9a:	4323      	orrs	r3, r4
 8001d9c:	08d4      	lsrs	r4, r2, #3
 8001d9e:	4642      	mov	r2, r8
 8001da0:	4919      	ldr	r1, [pc, #100]	; (8001e08 <__aeabi_dsub+0x358>)
 8001da2:	428a      	cmp	r2, r1
 8001da4:	d00e      	beq.n	8001dc4 <__aeabi_dsub+0x314>
 8001da6:	0324      	lsls	r4, r4, #12
 8001da8:	0552      	lsls	r2, r2, #21
 8001daa:	0b24      	lsrs	r4, r4, #12
 8001dac:	0d52      	lsrs	r2, r2, #21
 8001dae:	e722      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001db0:	000a      	movs	r2, r1
 8001db2:	2400      	movs	r4, #0
 8001db4:	2300      	movs	r3, #0
 8001db6:	e71e      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	4662      	mov	r2, ip
 8001dbc:	0752      	lsls	r2, r2, #29
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	4662      	mov	r2, ip
 8001dc2:	08d4      	lsrs	r4, r2, #3
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	4322      	orrs	r2, r4
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x31c>
 8001dca:	e1fc      	b.n	80021c6 <__aeabi_dsub+0x716>
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	0312      	lsls	r2, r2, #12
 8001dd0:	4314      	orrs	r4, r2
 8001dd2:	0324      	lsls	r4, r4, #12
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <__aeabi_dsub+0x358>)
 8001dd6:	0b24      	lsrs	r4, r4, #12
 8001dd8:	e70d      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001dda:	0020      	movs	r0, r4
 8001ddc:	f000 fb2c 	bl	8002438 <__clzsi2>
 8001de0:	0001      	movs	r1, r0
 8001de2:	3118      	adds	r1, #24
 8001de4:	291f      	cmp	r1, #31
 8001de6:	dc00      	bgt.n	8001dea <__aeabi_dsub+0x33a>
 8001de8:	e6c4      	b.n	8001b74 <__aeabi_dsub+0xc4>
 8001dea:	3808      	subs	r0, #8
 8001dec:	4084      	lsls	r4, r0
 8001dee:	4643      	mov	r3, r8
 8001df0:	0020      	movs	r0, r4
 8001df2:	2400      	movs	r4, #0
 8001df4:	4588      	cmp	r8, r1
 8001df6:	dc00      	bgt.n	8001dfa <__aeabi_dsub+0x34a>
 8001df8:	e6c8      	b.n	8001b8c <__aeabi_dsub+0xdc>
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__aeabi_dsub+0x35c>)
 8001dfc:	1a5b      	subs	r3, r3, r1
 8001dfe:	4010      	ands	r0, r2
 8001e00:	4698      	mov	r8, r3
 8001e02:	4681      	mov	r9, r0
 8001e04:	e6d6      	b.n	8001bb4 <__aeabi_dsub+0x104>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	ff7fffff 	.word	0xff7fffff
 8001e10:	fffff801 	.word	0xfffff801
 8001e14:	000007fe 	.word	0x000007fe
 8001e18:	430f      	orrs	r7, r1
 8001e1a:	1e7a      	subs	r2, r7, #1
 8001e1c:	4197      	sbcs	r7, r2
 8001e1e:	e691      	b.n	8001b44 <__aeabi_dsub+0x94>
 8001e20:	4661      	mov	r1, ip
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	0749      	lsls	r1, r1, #29
 8001e26:	430b      	orrs	r3, r1
 8001e28:	4661      	mov	r1, ip
 8001e2a:	08cc      	lsrs	r4, r1, #3
 8001e2c:	e7b8      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 8001e2e:	4640      	mov	r0, r8
 8001e30:	4cd3      	ldr	r4, [pc, #844]	; (8002180 <__aeabi_dsub+0x6d0>)
 8001e32:	3001      	adds	r0, #1
 8001e34:	4220      	tst	r0, r4
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x38a>
 8001e38:	e0a2      	b.n	8001f80 <__aeabi_dsub+0x4d0>
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d000      	beq.n	8001e42 <__aeabi_dsub+0x392>
 8001e40:	e101      	b.n	8002046 <__aeabi_dsub+0x596>
 8001e42:	4660      	mov	r0, ip
 8001e44:	4318      	orrs	r0, r3
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x39a>
 8001e48:	e15e      	b.n	8002108 <__aeabi_dsub+0x658>
 8001e4a:	0008      	movs	r0, r1
 8001e4c:	4338      	orrs	r0, r7
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x3a2>
 8001e50:	e15f      	b.n	8002112 <__aeabi_dsub+0x662>
 8001e52:	4661      	mov	r1, ip
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	0749      	lsls	r1, r1, #29
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	4661      	mov	r1, ip
 8001e5c:	08cc      	lsrs	r4, r1, #3
 8001e5e:	e7a2      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001e60:	4dc8      	ldr	r5, [pc, #800]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001e62:	42a8      	cmp	r0, r5
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x3b8>
 8001e66:	e0cf      	b.n	8002008 <__aeabi_dsub+0x558>
 8001e68:	2580      	movs	r5, #128	; 0x80
 8001e6a:	4664      	mov	r4, ip
 8001e6c:	042d      	lsls	r5, r5, #16
 8001e6e:	432c      	orrs	r4, r5
 8001e70:	46a4      	mov	ip, r4
 8001e72:	2a38      	cmp	r2, #56	; 0x38
 8001e74:	dc56      	bgt.n	8001f24 <__aeabi_dsub+0x474>
 8001e76:	2a1f      	cmp	r2, #31
 8001e78:	dd00      	ble.n	8001e7c <__aeabi_dsub+0x3cc>
 8001e7a:	e0d1      	b.n	8002020 <__aeabi_dsub+0x570>
 8001e7c:	2520      	movs	r5, #32
 8001e7e:	001e      	movs	r6, r3
 8001e80:	1aad      	subs	r5, r5, r2
 8001e82:	4664      	mov	r4, ip
 8001e84:	40ab      	lsls	r3, r5
 8001e86:	40ac      	lsls	r4, r5
 8001e88:	40d6      	lsrs	r6, r2
 8001e8a:	1e5d      	subs	r5, r3, #1
 8001e8c:	41ab      	sbcs	r3, r5
 8001e8e:	4334      	orrs	r4, r6
 8001e90:	4323      	orrs	r3, r4
 8001e92:	4664      	mov	r4, ip
 8001e94:	40d4      	lsrs	r4, r2
 8001e96:	1b09      	subs	r1, r1, r4
 8001e98:	e049      	b.n	8001f2e <__aeabi_dsub+0x47e>
 8001e9a:	4660      	mov	r0, ip
 8001e9c:	1bdc      	subs	r4, r3, r7
 8001e9e:	1a46      	subs	r6, r0, r1
 8001ea0:	42a3      	cmp	r3, r4
 8001ea2:	4180      	sbcs	r0, r0
 8001ea4:	4240      	negs	r0, r0
 8001ea6:	4681      	mov	r9, r0
 8001ea8:	0030      	movs	r0, r6
 8001eaa:	464e      	mov	r6, r9
 8001eac:	1b80      	subs	r0, r0, r6
 8001eae:	4681      	mov	r9, r0
 8001eb0:	0200      	lsls	r0, r0, #8
 8001eb2:	d476      	bmi.n	8001fa2 <__aeabi_dsub+0x4f2>
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	d000      	beq.n	8001ebc <__aeabi_dsub+0x40c>
 8001eba:	e652      	b.n	8001b62 <__aeabi_dsub+0xb2>
 8001ebc:	2400      	movs	r4, #0
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	e771      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001ec2:	4339      	orrs	r1, r7
 8001ec4:	000c      	movs	r4, r1
 8001ec6:	1e62      	subs	r2, r4, #1
 8001ec8:	4194      	sbcs	r4, r2
 8001eca:	18e4      	adds	r4, r4, r3
 8001ecc:	429c      	cmp	r4, r3
 8001ece:	419b      	sbcs	r3, r3
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	4463      	add	r3, ip
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	d400      	bmi.n	8001ede <__aeabi_dsub+0x42e>
 8001edc:	e756      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	469c      	mov	ip, r3
 8001ee2:	4ba8      	ldr	r3, [pc, #672]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001ee4:	44e0      	add	r8, ip
 8001ee6:	4598      	cmp	r8, r3
 8001ee8:	d038      	beq.n	8001f5c <__aeabi_dsub+0x4ac>
 8001eea:	464b      	mov	r3, r9
 8001eec:	48a6      	ldr	r0, [pc, #664]	; (8002188 <__aeabi_dsub+0x6d8>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4003      	ands	r3, r0
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	0863      	lsrs	r3, r4, #1
 8001ef6:	4014      	ands	r4, r2
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	07c3      	lsls	r3, r0, #31
 8001efc:	431c      	orrs	r4, r3
 8001efe:	0843      	lsrs	r3, r0, #1
 8001f00:	4699      	mov	r9, r3
 8001f02:	e657      	b.n	8001bb4 <__aeabi_dsub+0x104>
 8001f04:	0010      	movs	r0, r2
 8001f06:	000e      	movs	r6, r1
 8001f08:	3820      	subs	r0, #32
 8001f0a:	40c6      	lsrs	r6, r0
 8001f0c:	2a20      	cmp	r2, #32
 8001f0e:	d004      	beq.n	8001f1a <__aeabi_dsub+0x46a>
 8001f10:	2040      	movs	r0, #64	; 0x40
 8001f12:	1a82      	subs	r2, r0, r2
 8001f14:	4091      	lsls	r1, r2
 8001f16:	430f      	orrs	r7, r1
 8001f18:	46b9      	mov	r9, r7
 8001f1a:	464f      	mov	r7, r9
 8001f1c:	1e7a      	subs	r2, r7, #1
 8001f1e:	4197      	sbcs	r7, r2
 8001f20:	4337      	orrs	r7, r6
 8001f22:	e60f      	b.n	8001b44 <__aeabi_dsub+0x94>
 8001f24:	4662      	mov	r2, ip
 8001f26:	431a      	orrs	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	1e5a      	subs	r2, r3, #1
 8001f2c:	4193      	sbcs	r3, r2
 8001f2e:	1afc      	subs	r4, r7, r3
 8001f30:	42a7      	cmp	r7, r4
 8001f32:	41bf      	sbcs	r7, r7
 8001f34:	427f      	negs	r7, r7
 8001f36:	1bcb      	subs	r3, r1, r7
 8001f38:	4699      	mov	r9, r3
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	4680      	mov	r8, r0
 8001f3e:	e608      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8001f40:	4666      	mov	r6, ip
 8001f42:	431e      	orrs	r6, r3
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x498>
 8001f46:	e0be      	b.n	80020c6 <__aeabi_dsub+0x616>
 8001f48:	1e56      	subs	r6, r2, #1
 8001f4a:	2a01      	cmp	r2, #1
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x4a0>
 8001f4e:	e109      	b.n	8002164 <__aeabi_dsub+0x6b4>
 8001f50:	4c8c      	ldr	r4, [pc, #560]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001f52:	42a2      	cmp	r2, r4
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x4a8>
 8001f56:	e119      	b.n	800218c <__aeabi_dsub+0x6dc>
 8001f58:	0032      	movs	r2, r6
 8001f5a:	e6c1      	b.n	8001ce0 <__aeabi_dsub+0x230>
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	2400      	movs	r4, #0
 8001f60:	2300      	movs	r3, #0
 8001f62:	e648      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001f64:	2020      	movs	r0, #32
 8001f66:	000c      	movs	r4, r1
 8001f68:	1a80      	subs	r0, r0, r2
 8001f6a:	003e      	movs	r6, r7
 8001f6c:	4087      	lsls	r7, r0
 8001f6e:	4084      	lsls	r4, r0
 8001f70:	40d6      	lsrs	r6, r2
 8001f72:	1e78      	subs	r0, r7, #1
 8001f74:	4187      	sbcs	r7, r0
 8001f76:	40d1      	lsrs	r1, r2
 8001f78:	4334      	orrs	r4, r6
 8001f7a:	433c      	orrs	r4, r7
 8001f7c:	448c      	add	ip, r1
 8001f7e:	e7a4      	b.n	8001eca <__aeabi_dsub+0x41a>
 8001f80:	4a80      	ldr	r2, [pc, #512]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001f82:	4290      	cmp	r0, r2
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x4d8>
 8001f86:	e0e9      	b.n	800215c <__aeabi_dsub+0x6ac>
 8001f88:	19df      	adds	r7, r3, r7
 8001f8a:	429f      	cmp	r7, r3
 8001f8c:	419b      	sbcs	r3, r3
 8001f8e:	4461      	add	r1, ip
 8001f90:	425b      	negs	r3, r3
 8001f92:	18c9      	adds	r1, r1, r3
 8001f94:	07cc      	lsls	r4, r1, #31
 8001f96:	087f      	lsrs	r7, r7, #1
 8001f98:	084b      	lsrs	r3, r1, #1
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	4680      	mov	r8, r0
 8001f9e:	433c      	orrs	r4, r7
 8001fa0:	e6f4      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001fa2:	1afc      	subs	r4, r7, r3
 8001fa4:	42a7      	cmp	r7, r4
 8001fa6:	41bf      	sbcs	r7, r7
 8001fa8:	4663      	mov	r3, ip
 8001faa:	427f      	negs	r7, r7
 8001fac:	1ac9      	subs	r1, r1, r3
 8001fae:	1bcb      	subs	r3, r1, r7
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	465d      	mov	r5, fp
 8001fb4:	e5d5      	b.n	8001b62 <__aeabi_dsub+0xb2>
 8001fb6:	08ff      	lsrs	r7, r7, #3
 8001fb8:	074b      	lsls	r3, r1, #29
 8001fba:	465d      	mov	r5, fp
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e6ee      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	d000      	beq.n	8001fca <__aeabi_dsub+0x51a>
 8001fc8:	e082      	b.n	80020d0 <__aeabi_dsub+0x620>
 8001fca:	000b      	movs	r3, r1
 8001fcc:	433b      	orrs	r3, r7
 8001fce:	d11b      	bne.n	8002008 <__aeabi_dsub+0x558>
 8001fd0:	2480      	movs	r4, #128	; 0x80
 8001fd2:	2500      	movs	r5, #0
 8001fd4:	0324      	lsls	r4, r4, #12
 8001fd6:	e6f9      	b.n	8001dcc <__aeabi_dsub+0x31c>
 8001fd8:	19dc      	adds	r4, r3, r7
 8001fda:	429c      	cmp	r4, r3
 8001fdc:	419b      	sbcs	r3, r3
 8001fde:	4461      	add	r1, ip
 8001fe0:	4689      	mov	r9, r1
 8001fe2:	425b      	negs	r3, r3
 8001fe4:	4499      	add	r9, r3
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	d444      	bmi.n	8002076 <__aeabi_dsub+0x5c6>
 8001fec:	2301      	movs	r3, #1
 8001fee:	4698      	mov	r8, r3
 8001ff0:	e6cc      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001ff2:	1bdc      	subs	r4, r3, r7
 8001ff4:	4662      	mov	r2, ip
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	419b      	sbcs	r3, r3
 8001ffa:	1a51      	subs	r1, r2, r1
 8001ffc:	425b      	negs	r3, r3
 8001ffe:	1acb      	subs	r3, r1, r3
 8002000:	4699      	mov	r9, r3
 8002002:	2301      	movs	r3, #1
 8002004:	4698      	mov	r8, r3
 8002006:	e5a4      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8002008:	08ff      	lsrs	r7, r7, #3
 800200a:	074b      	lsls	r3, r1, #29
 800200c:	465d      	mov	r5, fp
 800200e:	433b      	orrs	r3, r7
 8002010:	08cc      	lsrs	r4, r1, #3
 8002012:	e6d7      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002014:	4662      	mov	r2, ip
 8002016:	431a      	orrs	r2, r3
 8002018:	0014      	movs	r4, r2
 800201a:	1e63      	subs	r3, r4, #1
 800201c:	419c      	sbcs	r4, r3
 800201e:	e679      	b.n	8001d14 <__aeabi_dsub+0x264>
 8002020:	0015      	movs	r5, r2
 8002022:	4664      	mov	r4, ip
 8002024:	3d20      	subs	r5, #32
 8002026:	40ec      	lsrs	r4, r5
 8002028:	46a0      	mov	r8, r4
 800202a:	2a20      	cmp	r2, #32
 800202c:	d005      	beq.n	800203a <__aeabi_dsub+0x58a>
 800202e:	2540      	movs	r5, #64	; 0x40
 8002030:	4664      	mov	r4, ip
 8002032:	1aaa      	subs	r2, r5, r2
 8002034:	4094      	lsls	r4, r2
 8002036:	4323      	orrs	r3, r4
 8002038:	469a      	mov	sl, r3
 800203a:	4654      	mov	r4, sl
 800203c:	1e63      	subs	r3, r4, #1
 800203e:	419c      	sbcs	r4, r3
 8002040:	4643      	mov	r3, r8
 8002042:	4323      	orrs	r3, r4
 8002044:	e773      	b.n	8001f2e <__aeabi_dsub+0x47e>
 8002046:	4662      	mov	r2, ip
 8002048:	431a      	orrs	r2, r3
 800204a:	d023      	beq.n	8002094 <__aeabi_dsub+0x5e4>
 800204c:	000a      	movs	r2, r1
 800204e:	433a      	orrs	r2, r7
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x5a4>
 8002052:	e0a0      	b.n	8002196 <__aeabi_dsub+0x6e6>
 8002054:	4662      	mov	r2, ip
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	0752      	lsls	r2, r2, #29
 800205a:	4313      	orrs	r3, r2
 800205c:	4662      	mov	r2, ip
 800205e:	08d4      	lsrs	r4, r2, #3
 8002060:	e6b0      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002062:	000b      	movs	r3, r1
 8002064:	433b      	orrs	r3, r7
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x5ba>
 8002068:	e728      	b.n	8001ebc <__aeabi_dsub+0x40c>
 800206a:	08ff      	lsrs	r7, r7, #3
 800206c:	074b      	lsls	r3, r1, #29
 800206e:	465d      	mov	r5, fp
 8002070:	433b      	orrs	r3, r7
 8002072:	08cc      	lsrs	r4, r1, #3
 8002074:	e697      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8002076:	2302      	movs	r3, #2
 8002078:	4698      	mov	r8, r3
 800207a:	e736      	b.n	8001eea <__aeabi_dsub+0x43a>
 800207c:	1afc      	subs	r4, r7, r3
 800207e:	42a7      	cmp	r7, r4
 8002080:	41bf      	sbcs	r7, r7
 8002082:	4663      	mov	r3, ip
 8002084:	427f      	negs	r7, r7
 8002086:	1ac9      	subs	r1, r1, r3
 8002088:	1bcb      	subs	r3, r1, r7
 800208a:	4699      	mov	r9, r3
 800208c:	2301      	movs	r3, #1
 800208e:	465d      	mov	r5, fp
 8002090:	4698      	mov	r8, r3
 8002092:	e55e      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8002094:	074b      	lsls	r3, r1, #29
 8002096:	08ff      	lsrs	r7, r7, #3
 8002098:	433b      	orrs	r3, r7
 800209a:	08cc      	lsrs	r4, r1, #3
 800209c:	e692      	b.n	8001dc4 <__aeabi_dsub+0x314>
 800209e:	1bdc      	subs	r4, r3, r7
 80020a0:	4660      	mov	r0, ip
 80020a2:	42a3      	cmp	r3, r4
 80020a4:	41b6      	sbcs	r6, r6
 80020a6:	1a40      	subs	r0, r0, r1
 80020a8:	4276      	negs	r6, r6
 80020aa:	1b80      	subs	r0, r0, r6
 80020ac:	4681      	mov	r9, r0
 80020ae:	0200      	lsls	r0, r0, #8
 80020b0:	d560      	bpl.n	8002174 <__aeabi_dsub+0x6c4>
 80020b2:	1afc      	subs	r4, r7, r3
 80020b4:	42a7      	cmp	r7, r4
 80020b6:	41bf      	sbcs	r7, r7
 80020b8:	4663      	mov	r3, ip
 80020ba:	427f      	negs	r7, r7
 80020bc:	1ac9      	subs	r1, r1, r3
 80020be:	1bcb      	subs	r3, r1, r7
 80020c0:	4699      	mov	r9, r3
 80020c2:	465d      	mov	r5, fp
 80020c4:	e576      	b.n	8001bb4 <__aeabi_dsub+0x104>
 80020c6:	08ff      	lsrs	r7, r7, #3
 80020c8:	074b      	lsls	r3, r1, #29
 80020ca:	433b      	orrs	r3, r7
 80020cc:	08cc      	lsrs	r4, r1, #3
 80020ce:	e667      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 80020d0:	000a      	movs	r2, r1
 80020d2:	08db      	lsrs	r3, r3, #3
 80020d4:	433a      	orrs	r2, r7
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x62a>
 80020d8:	e66f      	b.n	8001dba <__aeabi_dsub+0x30a>
 80020da:	4662      	mov	r2, ip
 80020dc:	0752      	lsls	r2, r2, #29
 80020de:	4313      	orrs	r3, r2
 80020e0:	4662      	mov	r2, ip
 80020e2:	08d4      	lsrs	r4, r2, #3
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	0312      	lsls	r2, r2, #12
 80020e8:	4214      	tst	r4, r2
 80020ea:	d007      	beq.n	80020fc <__aeabi_dsub+0x64c>
 80020ec:	08c8      	lsrs	r0, r1, #3
 80020ee:	4210      	tst	r0, r2
 80020f0:	d104      	bne.n	80020fc <__aeabi_dsub+0x64c>
 80020f2:	465d      	mov	r5, fp
 80020f4:	0004      	movs	r4, r0
 80020f6:	08fb      	lsrs	r3, r7, #3
 80020f8:	0749      	lsls	r1, r1, #29
 80020fa:	430b      	orrs	r3, r1
 80020fc:	0f5a      	lsrs	r2, r3, #29
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	0752      	lsls	r2, r2, #29
 8002104:	4313      	orrs	r3, r2
 8002106:	e65d      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002108:	074b      	lsls	r3, r1, #29
 800210a:	08ff      	lsrs	r7, r7, #3
 800210c:	433b      	orrs	r3, r7
 800210e:	08cc      	lsrs	r4, r1, #3
 8002110:	e649      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8002112:	19dc      	adds	r4, r3, r7
 8002114:	429c      	cmp	r4, r3
 8002116:	419b      	sbcs	r3, r3
 8002118:	4461      	add	r1, ip
 800211a:	4689      	mov	r9, r1
 800211c:	425b      	negs	r3, r3
 800211e:	4499      	add	r9, r3
 8002120:	464b      	mov	r3, r9
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	d400      	bmi.n	8002128 <__aeabi_dsub+0x678>
 8002126:	e631      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8002128:	464a      	mov	r2, r9
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <__aeabi_dsub+0x6d8>)
 800212c:	401a      	ands	r2, r3
 800212e:	2301      	movs	r3, #1
 8002130:	4691      	mov	r9, r2
 8002132:	4698      	mov	r8, r3
 8002134:	e62a      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8002136:	0016      	movs	r6, r2
 8002138:	4664      	mov	r4, ip
 800213a:	3e20      	subs	r6, #32
 800213c:	40f4      	lsrs	r4, r6
 800213e:	46a0      	mov	r8, r4
 8002140:	2a20      	cmp	r2, #32
 8002142:	d005      	beq.n	8002150 <__aeabi_dsub+0x6a0>
 8002144:	2640      	movs	r6, #64	; 0x40
 8002146:	4664      	mov	r4, ip
 8002148:	1ab2      	subs	r2, r6, r2
 800214a:	4094      	lsls	r4, r2
 800214c:	4323      	orrs	r3, r4
 800214e:	469a      	mov	sl, r3
 8002150:	4654      	mov	r4, sl
 8002152:	1e63      	subs	r3, r4, #1
 8002154:	419c      	sbcs	r4, r3
 8002156:	4643      	mov	r3, r8
 8002158:	431c      	orrs	r4, r3
 800215a:	e5db      	b.n	8001d14 <__aeabi_dsub+0x264>
 800215c:	0002      	movs	r2, r0
 800215e:	2400      	movs	r4, #0
 8002160:	2300      	movs	r3, #0
 8002162:	e548      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8002164:	19dc      	adds	r4, r3, r7
 8002166:	42bc      	cmp	r4, r7
 8002168:	41bf      	sbcs	r7, r7
 800216a:	4461      	add	r1, ip
 800216c:	4689      	mov	r9, r1
 800216e:	427f      	negs	r7, r7
 8002170:	44b9      	add	r9, r7
 8002172:	e738      	b.n	8001fe6 <__aeabi_dsub+0x536>
 8002174:	464b      	mov	r3, r9
 8002176:	4323      	orrs	r3, r4
 8002178:	d100      	bne.n	800217c <__aeabi_dsub+0x6cc>
 800217a:	e69f      	b.n	8001ebc <__aeabi_dsub+0x40c>
 800217c:	e606      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	000007fe 	.word	0x000007fe
 8002184:	000007ff 	.word	0x000007ff
 8002188:	ff7fffff 	.word	0xff7fffff
 800218c:	08ff      	lsrs	r7, r7, #3
 800218e:	074b      	lsls	r3, r1, #29
 8002190:	433b      	orrs	r3, r7
 8002192:	08cc      	lsrs	r4, r1, #3
 8002194:	e616      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002196:	4662      	mov	r2, ip
 8002198:	08db      	lsrs	r3, r3, #3
 800219a:	0752      	lsls	r2, r2, #29
 800219c:	4313      	orrs	r3, r2
 800219e:	4662      	mov	r2, ip
 80021a0:	08d4      	lsrs	r4, r2, #3
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	0312      	lsls	r2, r2, #12
 80021a6:	4214      	tst	r4, r2
 80021a8:	d007      	beq.n	80021ba <__aeabi_dsub+0x70a>
 80021aa:	08c8      	lsrs	r0, r1, #3
 80021ac:	4210      	tst	r0, r2
 80021ae:	d104      	bne.n	80021ba <__aeabi_dsub+0x70a>
 80021b0:	465d      	mov	r5, fp
 80021b2:	0004      	movs	r4, r0
 80021b4:	08fb      	lsrs	r3, r7, #3
 80021b6:	0749      	lsls	r1, r1, #29
 80021b8:	430b      	orrs	r3, r1
 80021ba:	0f5a      	lsrs	r2, r3, #29
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	0752      	lsls	r2, r2, #29
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	e5fe      	b.n	8001dc4 <__aeabi_dsub+0x314>
 80021c6:	2300      	movs	r3, #0
 80021c8:	4a01      	ldr	r2, [pc, #4]	; (80021d0 <__aeabi_dsub+0x720>)
 80021ca:	001c      	movs	r4, r3
 80021cc:	e513      	b.n	8001bf6 <__aeabi_dsub+0x146>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	000007ff 	.word	0x000007ff

080021d4 <__aeabi_dcmpun>:
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	0005      	movs	r5, r0
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <__aeabi_dcmpun+0x38>)
 80021da:	031c      	lsls	r4, r3, #12
 80021dc:	0016      	movs	r6, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	030a      	lsls	r2, r1, #12
 80021e2:	0049      	lsls	r1, r1, #1
 80021e4:	0b12      	lsrs	r2, r2, #12
 80021e6:	0d49      	lsrs	r1, r1, #21
 80021e8:	0b24      	lsrs	r4, r4, #12
 80021ea:	0d5b      	lsrs	r3, r3, #21
 80021ec:	4281      	cmp	r1, r0
 80021ee:	d008      	beq.n	8002202 <__aeabi_dcmpun+0x2e>
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <__aeabi_dcmpun+0x38>)
 80021f2:	2000      	movs	r0, #0
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <__aeabi_dcmpun+0x2c>
 80021f8:	0020      	movs	r0, r4
 80021fa:	4330      	orrs	r0, r6
 80021fc:	1e43      	subs	r3, r0, #1
 80021fe:	4198      	sbcs	r0, r3
 8002200:	bd70      	pop	{r4, r5, r6, pc}
 8002202:	2001      	movs	r0, #1
 8002204:	432a      	orrs	r2, r5
 8002206:	d1fb      	bne.n	8002200 <__aeabi_dcmpun+0x2c>
 8002208:	e7f2      	b.n	80021f0 <__aeabi_dcmpun+0x1c>
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	000007ff 	.word	0x000007ff

08002210 <__aeabi_d2iz>:
 8002210:	000a      	movs	r2, r1
 8002212:	b530      	push	{r4, r5, lr}
 8002214:	4c13      	ldr	r4, [pc, #76]	; (8002264 <__aeabi_d2iz+0x54>)
 8002216:	0053      	lsls	r3, r2, #1
 8002218:	0309      	lsls	r1, r1, #12
 800221a:	0005      	movs	r5, r0
 800221c:	0b09      	lsrs	r1, r1, #12
 800221e:	2000      	movs	r0, #0
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	0fd2      	lsrs	r2, r2, #31
 8002224:	42a3      	cmp	r3, r4
 8002226:	dd04      	ble.n	8002232 <__aeabi_d2iz+0x22>
 8002228:	480f      	ldr	r0, [pc, #60]	; (8002268 <__aeabi_d2iz+0x58>)
 800222a:	4283      	cmp	r3, r0
 800222c:	dd02      	ble.n	8002234 <__aeabi_d2iz+0x24>
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <__aeabi_d2iz+0x5c>)
 8002230:	18d0      	adds	r0, r2, r3
 8002232:	bd30      	pop	{r4, r5, pc}
 8002234:	2080      	movs	r0, #128	; 0x80
 8002236:	0340      	lsls	r0, r0, #13
 8002238:	4301      	orrs	r1, r0
 800223a:	480d      	ldr	r0, [pc, #52]	; (8002270 <__aeabi_d2iz+0x60>)
 800223c:	1ac0      	subs	r0, r0, r3
 800223e:	281f      	cmp	r0, #31
 8002240:	dd08      	ble.n	8002254 <__aeabi_d2iz+0x44>
 8002242:	480c      	ldr	r0, [pc, #48]	; (8002274 <__aeabi_d2iz+0x64>)
 8002244:	1ac3      	subs	r3, r0, r3
 8002246:	40d9      	lsrs	r1, r3
 8002248:	000b      	movs	r3, r1
 800224a:	4258      	negs	r0, r3
 800224c:	2a00      	cmp	r2, #0
 800224e:	d1f0      	bne.n	8002232 <__aeabi_d2iz+0x22>
 8002250:	0018      	movs	r0, r3
 8002252:	e7ee      	b.n	8002232 <__aeabi_d2iz+0x22>
 8002254:	4c08      	ldr	r4, [pc, #32]	; (8002278 <__aeabi_d2iz+0x68>)
 8002256:	40c5      	lsrs	r5, r0
 8002258:	46a4      	mov	ip, r4
 800225a:	4463      	add	r3, ip
 800225c:	4099      	lsls	r1, r3
 800225e:	000b      	movs	r3, r1
 8002260:	432b      	orrs	r3, r5
 8002262:	e7f2      	b.n	800224a <__aeabi_d2iz+0x3a>
 8002264:	000003fe 	.word	0x000003fe
 8002268:	0000041d 	.word	0x0000041d
 800226c:	7fffffff 	.word	0x7fffffff
 8002270:	00000433 	.word	0x00000433
 8002274:	00000413 	.word	0x00000413
 8002278:	fffffbed 	.word	0xfffffbed

0800227c <__aeabi_i2d>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2800      	cmp	r0, #0
 8002280:	d016      	beq.n	80022b0 <__aeabi_i2d+0x34>
 8002282:	17c3      	asrs	r3, r0, #31
 8002284:	18c5      	adds	r5, r0, r3
 8002286:	405d      	eors	r5, r3
 8002288:	0fc4      	lsrs	r4, r0, #31
 800228a:	0028      	movs	r0, r5
 800228c:	f000 f8d4 	bl	8002438 <__clzsi2>
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <__aeabi_i2d+0x5c>)
 8002292:	1a12      	subs	r2, r2, r0
 8002294:	280a      	cmp	r0, #10
 8002296:	dc16      	bgt.n	80022c6 <__aeabi_i2d+0x4a>
 8002298:	0003      	movs	r3, r0
 800229a:	002e      	movs	r6, r5
 800229c:	3315      	adds	r3, #21
 800229e:	409e      	lsls	r6, r3
 80022a0:	230b      	movs	r3, #11
 80022a2:	1a18      	subs	r0, r3, r0
 80022a4:	40c5      	lsrs	r5, r0
 80022a6:	0552      	lsls	r2, r2, #21
 80022a8:	032d      	lsls	r5, r5, #12
 80022aa:	0b2d      	lsrs	r5, r5, #12
 80022ac:	0d53      	lsrs	r3, r2, #21
 80022ae:	e003      	b.n	80022b8 <__aeabi_i2d+0x3c>
 80022b0:	2400      	movs	r4, #0
 80022b2:	2300      	movs	r3, #0
 80022b4:	2500      	movs	r5, #0
 80022b6:	2600      	movs	r6, #0
 80022b8:	051b      	lsls	r3, r3, #20
 80022ba:	432b      	orrs	r3, r5
 80022bc:	07e4      	lsls	r4, r4, #31
 80022be:	4323      	orrs	r3, r4
 80022c0:	0030      	movs	r0, r6
 80022c2:	0019      	movs	r1, r3
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	380b      	subs	r0, #11
 80022c8:	4085      	lsls	r5, r0
 80022ca:	0552      	lsls	r2, r2, #21
 80022cc:	032d      	lsls	r5, r5, #12
 80022ce:	2600      	movs	r6, #0
 80022d0:	0b2d      	lsrs	r5, r5, #12
 80022d2:	0d53      	lsrs	r3, r2, #21
 80022d4:	e7f0      	b.n	80022b8 <__aeabi_i2d+0x3c>
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	0000041e 	.word	0x0000041e

080022dc <__aeabi_ui2d>:
 80022dc:	b510      	push	{r4, lr}
 80022de:	1e04      	subs	r4, r0, #0
 80022e0:	d010      	beq.n	8002304 <__aeabi_ui2d+0x28>
 80022e2:	f000 f8a9 	bl	8002438 <__clzsi2>
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <__aeabi_ui2d+0x48>)
 80022e8:	1a1b      	subs	r3, r3, r0
 80022ea:	280a      	cmp	r0, #10
 80022ec:	dc11      	bgt.n	8002312 <__aeabi_ui2d+0x36>
 80022ee:	220b      	movs	r2, #11
 80022f0:	0021      	movs	r1, r4
 80022f2:	1a12      	subs	r2, r2, r0
 80022f4:	40d1      	lsrs	r1, r2
 80022f6:	3015      	adds	r0, #21
 80022f8:	030a      	lsls	r2, r1, #12
 80022fa:	055b      	lsls	r3, r3, #21
 80022fc:	4084      	lsls	r4, r0
 80022fe:	0b12      	lsrs	r2, r2, #12
 8002300:	0d5b      	lsrs	r3, r3, #21
 8002302:	e001      	b.n	8002308 <__aeabi_ui2d+0x2c>
 8002304:	2300      	movs	r3, #0
 8002306:	2200      	movs	r2, #0
 8002308:	051b      	lsls	r3, r3, #20
 800230a:	4313      	orrs	r3, r2
 800230c:	0020      	movs	r0, r4
 800230e:	0019      	movs	r1, r3
 8002310:	bd10      	pop	{r4, pc}
 8002312:	0022      	movs	r2, r4
 8002314:	380b      	subs	r0, #11
 8002316:	4082      	lsls	r2, r0
 8002318:	055b      	lsls	r3, r3, #21
 800231a:	0312      	lsls	r2, r2, #12
 800231c:	2400      	movs	r4, #0
 800231e:	0b12      	lsrs	r2, r2, #12
 8002320:	0d5b      	lsrs	r3, r3, #21
 8002322:	e7f1      	b.n	8002308 <__aeabi_ui2d+0x2c>
 8002324:	0000041e 	.word	0x0000041e

08002328 <__aeabi_d2f>:
 8002328:	0002      	movs	r2, r0
 800232a:	004b      	lsls	r3, r1, #1
 800232c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232e:	0d5b      	lsrs	r3, r3, #21
 8002330:	030c      	lsls	r4, r1, #12
 8002332:	4e3d      	ldr	r6, [pc, #244]	; (8002428 <__aeabi_d2f+0x100>)
 8002334:	0a64      	lsrs	r4, r4, #9
 8002336:	0f40      	lsrs	r0, r0, #29
 8002338:	1c5f      	adds	r7, r3, #1
 800233a:	0fc9      	lsrs	r1, r1, #31
 800233c:	4304      	orrs	r4, r0
 800233e:	00d5      	lsls	r5, r2, #3
 8002340:	4237      	tst	r7, r6
 8002342:	d00a      	beq.n	800235a <__aeabi_d2f+0x32>
 8002344:	4839      	ldr	r0, [pc, #228]	; (800242c <__aeabi_d2f+0x104>)
 8002346:	181e      	adds	r6, r3, r0
 8002348:	2efe      	cmp	r6, #254	; 0xfe
 800234a:	dd16      	ble.n	800237a <__aeabi_d2f+0x52>
 800234c:	20ff      	movs	r0, #255	; 0xff
 800234e:	2400      	movs	r4, #0
 8002350:	05c0      	lsls	r0, r0, #23
 8002352:	4320      	orrs	r0, r4
 8002354:	07c9      	lsls	r1, r1, #31
 8002356:	4308      	orrs	r0, r1
 8002358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <__aeabi_d2f+0x44>
 800235e:	432c      	orrs	r4, r5
 8002360:	d026      	beq.n	80023b0 <__aeabi_d2f+0x88>
 8002362:	2205      	movs	r2, #5
 8002364:	0192      	lsls	r2, r2, #6
 8002366:	0a54      	lsrs	r4, r2, #9
 8002368:	b2d8      	uxtb	r0, r3
 800236a:	e7f1      	b.n	8002350 <__aeabi_d2f+0x28>
 800236c:	4325      	orrs	r5, r4
 800236e:	d0ed      	beq.n	800234c <__aeabi_d2f+0x24>
 8002370:	2080      	movs	r0, #128	; 0x80
 8002372:	03c0      	lsls	r0, r0, #15
 8002374:	4304      	orrs	r4, r0
 8002376:	20ff      	movs	r0, #255	; 0xff
 8002378:	e7ea      	b.n	8002350 <__aeabi_d2f+0x28>
 800237a:	2e00      	cmp	r6, #0
 800237c:	dd1b      	ble.n	80023b6 <__aeabi_d2f+0x8e>
 800237e:	0192      	lsls	r2, r2, #6
 8002380:	1e53      	subs	r3, r2, #1
 8002382:	419a      	sbcs	r2, r3
 8002384:	00e4      	lsls	r4, r4, #3
 8002386:	0f6d      	lsrs	r5, r5, #29
 8002388:	4322      	orrs	r2, r4
 800238a:	432a      	orrs	r2, r5
 800238c:	0753      	lsls	r3, r2, #29
 800238e:	d048      	beq.n	8002422 <__aeabi_d2f+0xfa>
 8002390:	230f      	movs	r3, #15
 8002392:	4013      	ands	r3, r2
 8002394:	2b04      	cmp	r3, #4
 8002396:	d000      	beq.n	800239a <__aeabi_d2f+0x72>
 8002398:	3204      	adds	r2, #4
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	04db      	lsls	r3, r3, #19
 800239e:	4013      	ands	r3, r2
 80023a0:	d03f      	beq.n	8002422 <__aeabi_d2f+0xfa>
 80023a2:	1c70      	adds	r0, r6, #1
 80023a4:	2efe      	cmp	r6, #254	; 0xfe
 80023a6:	d0d1      	beq.n	800234c <__aeabi_d2f+0x24>
 80023a8:	0192      	lsls	r2, r2, #6
 80023aa:	0a54      	lsrs	r4, r2, #9
 80023ac:	b2c0      	uxtb	r0, r0
 80023ae:	e7cf      	b.n	8002350 <__aeabi_d2f+0x28>
 80023b0:	2000      	movs	r0, #0
 80023b2:	2400      	movs	r4, #0
 80023b4:	e7cc      	b.n	8002350 <__aeabi_d2f+0x28>
 80023b6:	0032      	movs	r2, r6
 80023b8:	3217      	adds	r2, #23
 80023ba:	db22      	blt.n	8002402 <__aeabi_d2f+0xda>
 80023bc:	2080      	movs	r0, #128	; 0x80
 80023be:	0400      	lsls	r0, r0, #16
 80023c0:	4320      	orrs	r0, r4
 80023c2:	241e      	movs	r4, #30
 80023c4:	1ba4      	subs	r4, r4, r6
 80023c6:	2c1f      	cmp	r4, #31
 80023c8:	dd1d      	ble.n	8002406 <__aeabi_d2f+0xde>
 80023ca:	2202      	movs	r2, #2
 80023cc:	4252      	negs	r2, r2
 80023ce:	1b96      	subs	r6, r2, r6
 80023d0:	0002      	movs	r2, r0
 80023d2:	40f2      	lsrs	r2, r6
 80023d4:	0016      	movs	r6, r2
 80023d6:	2c20      	cmp	r4, #32
 80023d8:	d004      	beq.n	80023e4 <__aeabi_d2f+0xbc>
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <__aeabi_d2f+0x108>)
 80023dc:	4694      	mov	ip, r2
 80023de:	4463      	add	r3, ip
 80023e0:	4098      	lsls	r0, r3
 80023e2:	4305      	orrs	r5, r0
 80023e4:	002a      	movs	r2, r5
 80023e6:	1e53      	subs	r3, r2, #1
 80023e8:	419a      	sbcs	r2, r3
 80023ea:	4332      	orrs	r2, r6
 80023ec:	2600      	movs	r6, #0
 80023ee:	0753      	lsls	r3, r2, #29
 80023f0:	d1ce      	bne.n	8002390 <__aeabi_d2f+0x68>
 80023f2:	2480      	movs	r4, #128	; 0x80
 80023f4:	0013      	movs	r3, r2
 80023f6:	04e4      	lsls	r4, r4, #19
 80023f8:	2001      	movs	r0, #1
 80023fa:	4023      	ands	r3, r4
 80023fc:	4222      	tst	r2, r4
 80023fe:	d1d3      	bne.n	80023a8 <__aeabi_d2f+0x80>
 8002400:	e7b0      	b.n	8002364 <__aeabi_d2f+0x3c>
 8002402:	2300      	movs	r3, #0
 8002404:	e7ad      	b.n	8002362 <__aeabi_d2f+0x3a>
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <__aeabi_d2f+0x10c>)
 8002408:	4694      	mov	ip, r2
 800240a:	002a      	movs	r2, r5
 800240c:	40e2      	lsrs	r2, r4
 800240e:	0014      	movs	r4, r2
 8002410:	002a      	movs	r2, r5
 8002412:	4463      	add	r3, ip
 8002414:	409a      	lsls	r2, r3
 8002416:	4098      	lsls	r0, r3
 8002418:	1e55      	subs	r5, r2, #1
 800241a:	41aa      	sbcs	r2, r5
 800241c:	4302      	orrs	r2, r0
 800241e:	4322      	orrs	r2, r4
 8002420:	e7e4      	b.n	80023ec <__aeabi_d2f+0xc4>
 8002422:	0033      	movs	r3, r6
 8002424:	e79e      	b.n	8002364 <__aeabi_d2f+0x3c>
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	000007fe 	.word	0x000007fe
 800242c:	fffffc80 	.word	0xfffffc80
 8002430:	fffffca2 	.word	0xfffffca2
 8002434:	fffffc82 	.word	0xfffffc82

08002438 <__clzsi2>:
 8002438:	211c      	movs	r1, #28
 800243a:	2301      	movs	r3, #1
 800243c:	041b      	lsls	r3, r3, #16
 800243e:	4298      	cmp	r0, r3
 8002440:	d301      	bcc.n	8002446 <__clzsi2+0xe>
 8002442:	0c00      	lsrs	r0, r0, #16
 8002444:	3910      	subs	r1, #16
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	4298      	cmp	r0, r3
 800244a:	d301      	bcc.n	8002450 <__clzsi2+0x18>
 800244c:	0a00      	lsrs	r0, r0, #8
 800244e:	3908      	subs	r1, #8
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	4298      	cmp	r0, r3
 8002454:	d301      	bcc.n	800245a <__clzsi2+0x22>
 8002456:	0900      	lsrs	r0, r0, #4
 8002458:	3904      	subs	r1, #4
 800245a:	a202      	add	r2, pc, #8	; (adr r2, 8002464 <__clzsi2+0x2c>)
 800245c:	5c10      	ldrb	r0, [r2, r0]
 800245e:	1840      	adds	r0, r0, r1
 8002460:	4770      	bx	lr
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	02020304 	.word	0x02020304
 8002468:	01010101 	.word	0x01010101
	...

08002474 <__clzdi2>:
 8002474:	b510      	push	{r4, lr}
 8002476:	2900      	cmp	r1, #0
 8002478:	d103      	bne.n	8002482 <__clzdi2+0xe>
 800247a:	f7ff ffdd 	bl	8002438 <__clzsi2>
 800247e:	3020      	adds	r0, #32
 8002480:	e002      	b.n	8002488 <__clzdi2+0x14>
 8002482:	0008      	movs	r0, r1
 8002484:	f7ff ffd8 	bl	8002438 <__clzsi2>
 8002488:	bd10      	pop	{r4, pc}
 800248a:	46c0      	nop			; (mov r8, r8)

0800248c <new_adc_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hadc is the adc and _total_ranks are the total ranks.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ADCSensor object
ADCSensor *new_adc_sensor(ADC_HandleTypeDef *hadc, uint8_t _total_ranks) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	000a      	movs	r2, r1
 8002496:	1cfb      	adds	r3, r7, #3
 8002498:	701a      	strb	r2, [r3, #0]
    ADCSensor *adc_sensor = (ADCSensor*) malloc(sizeof(ADCSensor));
 800249a:	201c      	movs	r0, #28
 800249c:	f004 fba4 	bl	8006be8 <malloc>
 80024a0:	0003      	movs	r3, r0
 80024a2:	60bb      	str	r3, [r7, #8]
    adc_sensor->adc = hadc;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	601a      	str	r2, [r3, #0]
    adc_sensor->total_ranks = _total_ranks;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1cfa      	adds	r2, r7, #3
 80024ae:	7812      	ldrb	r2, [r2, #0]
 80024b0:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 80024b2:	230f      	movs	r3, #15
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e00d      	b.n	80024d8 <new_adc_sensor+0x4c>
        adc_sensor->values[i] = 0;
 80024bc:	210f      	movs	r1, #15
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	18d3      	adds	r3, r2, r3
 80024c8:	3306      	adds	r3, #6
 80024ca:	2200      	movs	r2, #0
 80024cc:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	187a      	adds	r2, r7, r1
 80024d2:	7812      	ldrb	r2, [r2, #0]
 80024d4:	3201      	adds	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	230f      	movs	r3, #15
 80024da:	18fa      	adds	r2, r7, r3
 80024dc:	1cfb      	adds	r3, r7, #3
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d3ea      	bcc.n	80024bc <new_adc_sensor+0x30>
    }
    return adc_sensor;
 80024e6:	68bb      	ldr	r3, [r7, #8]
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b004      	add	sp, #16
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <update_battery_buzzer_logic>:
// EFFECTS: Updates the logic of the battery buzzer.
// It will buzz for 1 second every 3 seconds if no battery.
// It will buzz for 1 second every 5 seconds if extremely low.
// It will buzz for 1 second every 15 seconds if low.
// This function is expected to be called every 2 ms.
void update_battery_buzzer_logic(BatteryBuzzer *battery_buzzer) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	switch (battery_buzzer->battery_data) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7a1b      	ldrb	r3, [r3, #8]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d04a      	beq.n	8002596 <update_battery_buzzer_logic+0xa6>
 8002500:	dd00      	ble.n	8002504 <update_battery_buzzer_logic+0x14>
 8002502:	e06a      	b.n	80025da <update_battery_buzzer_logic+0xea>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <update_battery_buzzer_logic+0x1e>
 8002508:	2b01      	cmp	r3, #1
 800250a:	d022      	beq.n	8002552 <update_battery_buzzer_logic+0x62>
 800250c:	e065      	b.n	80025da <update_battery_buzzer_logic+0xea>
	case NO_BATTERY_DATA:
		if (battery_buzzer->ms_since_period_cycle == 0) {
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <update_battery_buzzer_logic+0x32>
			change_battery_buzzer_noise_val(battery_buzzer, true);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2101      	movs	r1, #1
 800251a:	0018      	movs	r0, r3
 800251c:	f000 f86c 	bl	80025f8 <change_battery_buzzer_noise_val>
 8002520:	e00a      	b.n	8002538 <update_battery_buzzer_logic+0x48>
		}
		else if (battery_buzzer->ms_since_period_cycle == BATTERY_BUZZ_TIME_MS) {
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	23fa      	movs	r3, #250	; 0xfa
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	429a      	cmp	r2, r3
 800252c:	d104      	bne.n	8002538 <update_battery_buzzer_logic+0x48>
			change_battery_buzzer_noise_val(battery_buzzer, false);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2100      	movs	r1, #0
 8002532:	0018      	movs	r0, r3
 8002534:	f000 f860 	bl	80025f8 <change_battery_buzzer_noise_val>
		}
		battery_buzzer->ms_since_period_cycle =
				battery_buzzer->ms_since_period_cycle == NO_BATTERY_PERIOD_MS ?
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
						0 : battery_buzzer->ms_since_period_cycle + 2;
 800253c:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <update_battery_buzzer_logic+0xfc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <update_battery_buzzer_logic+0x5a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	1c9a      	adds	r2, r3, #2
 8002548:	e000      	b.n	800254c <update_battery_buzzer_logic+0x5c>
 800254a:	2200      	movs	r2, #0
		battery_buzzer->ms_since_period_cycle =
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	605a      	str	r2, [r3, #4]
		break;
 8002550:	e047      	b.n	80025e2 <update_battery_buzzer_logic+0xf2>
	case CRITICALLY_LOW_BATTERY_DATA:
		if (battery_buzzer->ms_since_period_cycle == 0) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <update_battery_buzzer_logic+0x76>
			change_battery_buzzer_noise_val(battery_buzzer, true);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2101      	movs	r1, #1
 800255e:	0018      	movs	r0, r3
 8002560:	f000 f84a 	bl	80025f8 <change_battery_buzzer_noise_val>
 8002564:	e00a      	b.n	800257c <update_battery_buzzer_logic+0x8c>
		}
		else if (battery_buzzer->ms_since_period_cycle == BATTERY_BUZZ_TIME_MS) {
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	23fa      	movs	r3, #250	; 0xfa
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	429a      	cmp	r2, r3
 8002570:	d104      	bne.n	800257c <update_battery_buzzer_logic+0x8c>
			change_battery_buzzer_noise_val(battery_buzzer, false);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2100      	movs	r1, #0
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f83e 	bl	80025f8 <change_battery_buzzer_noise_val>
		}
		battery_buzzer->ms_since_period_cycle =
				battery_buzzer->ms_since_period_cycle == CRITICALLY_LOW_BATTERY_BUZZ_PERIOD_MS ?
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
						0 : battery_buzzer->ms_since_period_cycle + 2;
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <update_battery_buzzer_logic+0x100>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d003      	beq.n	800258e <update_battery_buzzer_logic+0x9e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	1c9a      	adds	r2, r3, #2
 800258c:	e000      	b.n	8002590 <update_battery_buzzer_logic+0xa0>
 800258e:	2200      	movs	r2, #0
		battery_buzzer->ms_since_period_cycle =
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	605a      	str	r2, [r3, #4]
		break;
 8002594:	e025      	b.n	80025e2 <update_battery_buzzer_logic+0xf2>
	case LOW_BATTERY_DATA:
		if (battery_buzzer->ms_since_period_cycle == 0) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <update_battery_buzzer_logic+0xba>
			change_battery_buzzer_noise_val(battery_buzzer, true);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2101      	movs	r1, #1
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f828 	bl	80025f8 <change_battery_buzzer_noise_val>
 80025a8:	e00a      	b.n	80025c0 <update_battery_buzzer_logic+0xd0>
		}
		else if (battery_buzzer->ms_since_period_cycle == BATTERY_BUZZ_TIME_MS) {
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	23fa      	movs	r3, #250	; 0xfa
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d104      	bne.n	80025c0 <update_battery_buzzer_logic+0xd0>
			change_battery_buzzer_noise_val(battery_buzzer, false);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2100      	movs	r1, #0
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 f81c 	bl	80025f8 <change_battery_buzzer_noise_val>
		}
		battery_buzzer->ms_since_period_cycle =
				battery_buzzer->ms_since_period_cycle == LOW_BATTERY_BUZZ_PERIOD_MS ?
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
						0 : battery_buzzer->ms_since_period_cycle + 2;
 80025c4:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <update_battery_buzzer_logic+0x104>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <update_battery_buzzer_logic+0xe2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	1c9a      	adds	r2, r3, #2
 80025d0:	e000      	b.n	80025d4 <update_battery_buzzer_logic+0xe4>
 80025d2:	2200      	movs	r2, #0
		battery_buzzer->ms_since_period_cycle =
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	605a      	str	r2, [r3, #4]
		break;
 80025d8:	e003      	b.n	80025e2 <update_battery_buzzer_logic+0xf2>
	default:
		battery_buzzer->ms_since_period_cycle = 0;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
		break;
 80025e0:	46c0      	nop			; (mov r8, r8)
	}
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b002      	add	sp, #8
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	00000bb8 	.word	0x00000bb8
 80025f0:	00001388 	.word	0x00001388
 80025f4:	00003a98 	.word	0x00003a98

080025f8 <change_battery_buzzer_noise_val>:
}

// REQUIRES: battery_buzzer is an object and val is if it should be on or off.
// MODIFIES: nothing
// EFFECTS: Changes the output noise of the battery buzzer.
void change_battery_buzzer_noise_val(BatteryBuzzer *battery_buzzer, bool val) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	000a      	movs	r2, r1
 8002602:	1cfb      	adds	r3, r7, #3
 8002604:	701a      	strb	r2, [r3, #0]
	set_pin_value(battery_buzzer->buzzer_pin, val);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	1cfb      	adds	r3, r7, #3
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	0019      	movs	r1, r3
 8002610:	0010      	movs	r0, r2
 8002612:	f000 fb5a 	bl	8002cca <set_pin_value>
}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b002      	add	sp, #8
 800261c:	bd80      	pop	{r7, pc}

0800261e <new_wireless>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: huart is a UART channel
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Wireless object
Wireless *new_wireless(UART_HandleTypeDef *huart) {
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
	Wireless *wireless = (Wireless*) malloc(sizeof(Wireless));
 8002626:	2014      	movs	r0, #20
 8002628:	f004 fade 	bl	8006be8 <malloc>
 800262c:	0003      	movs	r3, r0
 800262e:	60fb      	str	r3, [r7, #12]
	wireless->uart = huart;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	601a      	str	r2, [r3, #0]
	return wireless;
 8002636:	68fb      	ldr	r3, [r7, #12]
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b004      	add	sp, #16
 800263e:	bd80      	pop	{r7, pc}

08002640 <new_display>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _shift_register is a ShiftRegister object
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Display object
Display *new_display(ShiftRegister *_shift_register) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	Display *display = (Display*) malloc(sizeof(Display));
 8002648:	2010      	movs	r0, #16
 800264a:	f004 facd 	bl	8006be8 <malloc>
 800264e:	0003      	movs	r3, r0
 8002650:	60fb      	str	r3, [r7, #12]
	display->shift_register = _shift_register;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	601a      	str	r2, [r3, #0]
	display->display_numbers[0] = 0xC0;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	22c0      	movs	r2, #192	; 0xc0
 800265c:	711a      	strb	r2, [r3, #4]
	display->display_numbers[1] = 0xF9;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	22f9      	movs	r2, #249	; 0xf9
 8002662:	715a      	strb	r2, [r3, #5]
	display->display_numbers[2] = 0xA4;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	22a4      	movs	r2, #164	; 0xa4
 8002668:	719a      	strb	r2, [r3, #6]
	display->display_numbers[3] = 0xB0;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	22b0      	movs	r2, #176	; 0xb0
 800266e:	71da      	strb	r2, [r3, #7]
	display->display_numbers[4] = 0x99;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2299      	movs	r2, #153	; 0x99
 8002674:	721a      	strb	r2, [r3, #8]
	display->display_numbers[5] = 0x92;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2292      	movs	r2, #146	; 0x92
 800267a:	725a      	strb	r2, [r3, #9]
	display->display_numbers[6] = 0x82;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2282      	movs	r2, #130	; 0x82
 8002680:	729a      	strb	r2, [r3, #10]
	display->display_numbers[7] = 0xF8;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	22f8      	movs	r2, #248	; 0xf8
 8002686:	72da      	strb	r2, [r3, #11]
	display->display_numbers[8] = 0x80;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	731a      	strb	r2, [r3, #12]
	display->display_numbers[9] = 0x90;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2290      	movs	r2, #144	; 0x90
 8002692:	735a      	strb	r2, [r3, #13]
	return display;
 8002694:	68fb      	ldr	r3, [r7, #12]
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}

0800269e <new_interrupt_timer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _timer corresponds to timer
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created InterruptTimer object
InterruptTimer *new_interrupt_timer(TIM_HandleTypeDef *_timer) {
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
	InterruptTimer *interrupt_timer = (InterruptTimer*) malloc(sizeof(InterruptTimer));
 80026a6:	2004      	movs	r0, #4
 80026a8:	f004 fa9e 	bl	8006be8 <malloc>
 80026ac:	0003      	movs	r3, r0
 80026ae:	60fb      	str	r3, [r7, #12]
	interrupt_timer->timer = _timer;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	601a      	str	r2, [r3, #0]
	return interrupt_timer;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b004      	add	sp, #16
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	if (htim == fast_interrupt_timer->timer) {
		// called every 1 ms
	}
	if (htim == slow_interrupt_timer->timer) {
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d104      	bne.n	80026de <HAL_TIM_PeriodElapsedCallback+0x1e>
		// called every 2 ms
		update_battery_buzzer_logic(battery_buzzer);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0018      	movs	r0, r3
 80026da:	f7ff ff09 	bl	80024f0 <update_battery_buzzer_logic>
	}
}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b002      	add	sp, #8
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	20000420 	.word	0x20000420
 80026ec:	200003ec 	.word	0x200003ec

080026f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	shift_ser = new_pin_data(SHIFT_SER_GPIO_Port, SHIFT_SER_Pin);
 80026f6:	23a0      	movs	r3, #160	; 0xa0
 80026f8:	05db      	lsls	r3, r3, #23
 80026fa:	2110      	movs	r1, #16
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 facc 	bl	8002c9a <new_pin_data>
 8002702:	0002      	movs	r2, r0
 8002704:	4b4e      	ldr	r3, [pc, #312]	; (8002840 <main+0x150>)
 8002706:	601a      	str	r2, [r3, #0]
	shift_srclk = new_pin_data(SHIFT_SRCLK_GPIO_Port, SHIFT_SRCLK_Pin);
 8002708:	23a0      	movs	r3, #160	; 0xa0
 800270a:	05db      	lsls	r3, r3, #23
 800270c:	2120      	movs	r1, #32
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fac3 	bl	8002c9a <new_pin_data>
 8002714:	0002      	movs	r2, r0
 8002716:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <main+0x154>)
 8002718:	601a      	str	r2, [r3, #0]
	shift_not_srclk = new_pin_data(SHIFT_NOT_SRCLK_GPIO_Port, SHIFT_NOT_SRCLK_Pin);
 800271a:	23a0      	movs	r3, #160	; 0xa0
 800271c:	05db      	lsls	r3, r3, #23
 800271e:	2140      	movs	r1, #64	; 0x40
 8002720:	0018      	movs	r0, r3
 8002722:	f000 faba 	bl	8002c9a <new_pin_data>
 8002726:	0002      	movs	r2, r0
 8002728:	4b47      	ldr	r3, [pc, #284]	; (8002848 <main+0x158>)
 800272a:	601a      	str	r2, [r3, #0]
	shift_rclk = new_pin_data(SHIFT_RCLK_GPIO_Port, SHIFT_RCLK_Pin);
 800272c:	23a0      	movs	r3, #160	; 0xa0
 800272e:	05db      	lsls	r3, r3, #23
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	0018      	movs	r0, r3
 8002734:	f000 fab1 	bl	8002c9a <new_pin_data>
 8002738:	0002      	movs	r2, r0
 800273a:	4b44      	ldr	r3, [pc, #272]	; (800284c <main+0x15c>)
 800273c:	601a      	str	r2, [r3, #0]
	shift_not_oe = new_pin_data(SHIFT_NOT_OE_GPIO_Port, SHIFT_NOT_OE_Pin);
 800273e:	4b44      	ldr	r3, [pc, #272]	; (8002850 <main+0x160>)
 8002740:	2101      	movs	r1, #1
 8002742:	0018      	movs	r0, r3
 8002744:	f000 faa9 	bl	8002c9a <new_pin_data>
 8002748:	0002      	movs	r2, r0
 800274a:	4b42      	ldr	r3, [pc, #264]	; (8002854 <main+0x164>)
 800274c:	601a      	str	r2, [r3, #0]
	buzzer = new_pin_data(BATTERY_OUTPUT_GPIO_Port, BATTERY_OUTPUT_Pin);
 800274e:	23a0      	movs	r3, #160	; 0xa0
 8002750:	05db      	lsls	r3, r3, #23
 8002752:	2108      	movs	r1, #8
 8002754:	0018      	movs	r0, r3
 8002756:	f000 faa0 	bl	8002c9a <new_pin_data>
 800275a:	0002      	movs	r2, r0
 800275c:	4b3e      	ldr	r3, [pc, #248]	; (8002858 <main+0x168>)
 800275e:	601a      	str	r2, [r3, #0]
	debug_led = new_pin_data(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002760:	4b3e      	ldr	r3, [pc, #248]	; (800285c <main+0x16c>)
 8002762:	2104      	movs	r1, #4
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fa98 	bl	8002c9a <new_pin_data>
 800276a:	0002      	movs	r2, r0
 800276c:	4b3c      	ldr	r3, [pc, #240]	; (8002860 <main+0x170>)
 800276e:	601a      	str	r2, [r3, #0]
	slow_interrupt_timer = new_interrupt_timer(&htim14);
 8002770:	4b3c      	ldr	r3, [pc, #240]	; (8002864 <main+0x174>)
 8002772:	0018      	movs	r0, r3
 8002774:	f7ff ff93 	bl	800269e <new_interrupt_timer>
 8002778:	0002      	movs	r2, r0
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <main+0x178>)
 800277c:	601a      	str	r2, [r3, #0]
	fast_interrupt_timer = new_interrupt_timer(&htim16);
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <main+0x17c>)
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff ff8c 	bl	800269e <new_interrupt_timer>
 8002786:	0002      	movs	r2, r0
 8002788:	4b39      	ldr	r3, [pc, #228]	; (8002870 <main+0x180>)
 800278a:	601a      	str	r2, [r3, #0]
	adc_sensor = new_adc_sensor(&hadc1, 1);
 800278c:	4b39      	ldr	r3, [pc, #228]	; (8002874 <main+0x184>)
 800278e:	2101      	movs	r1, #1
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff fe7b 	bl	800248c <new_adc_sensor>
 8002796:	0002      	movs	r2, r0
 8002798:	4b37      	ldr	r3, [pc, #220]	; (8002878 <main+0x188>)
 800279a:	601a      	str	r2, [r3, #0]
	potentiometer = new_potentiometer(adc_sensor, 0);
 800279c:	4b36      	ldr	r3, [pc, #216]	; (8002878 <main+0x188>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2100      	movs	r1, #0
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 faa8 	bl	8002cf8 <new_potentiometer>
 80027a8:	0002      	movs	r2, r0
 80027aa:	4b34      	ldr	r3, [pc, #208]	; (800287c <main+0x18c>)
 80027ac:	601a      	str	r2, [r3, #0]
	shift_register = new_shift_register(
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <main+0x150>)
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <main+0x154>)
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <main+0x158>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <main+0x15c>)
 80027bc:	681c      	ldr	r4, [r3, #0]
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <main+0x164>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	0023      	movs	r3, r4
 80027c6:	f000 faaf 	bl	8002d28 <new_shift_register>
 80027ca:	0002      	movs	r2, r0
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <main+0x190>)
 80027ce:	601a      	str	r2, [r3, #0]
			shift_ser,
			shift_srclk,
			shift_not_srclk,
			shift_rclk,
			shift_not_oe);
	display = new_display(shift_register);
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <main+0x190>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff ff33 	bl	8002640 <new_display>
 80027da:	0002      	movs	r2, r0
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <main+0x194>)
 80027de:	601a      	str	r2, [r3, #0]
	trigger = new_trigger(potentiometer);
 80027e0:	4b26      	ldr	r3, [pc, #152]	; (800287c <main+0x18c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fd66 	bl	80032b6 <new_trigger>
 80027ea:	0002      	movs	r2, r0
 80027ec:	4b26      	ldr	r3, [pc, #152]	; (8002888 <main+0x198>)
 80027ee:	601a      	str	r2, [r3, #0]
	wireless = new_wireless(&huart1);
 80027f0:	4b26      	ldr	r3, [pc, #152]	; (800288c <main+0x19c>)
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff ff13 	bl	800261e <new_wireless>
 80027f8:	0002      	movs	r2, r0
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <main+0x1a0>)
 80027fc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027fe:	f000 fd95 	bl	800332c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002802:	f000 f847 	bl	8002894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002806:	f000 f9af 	bl	8002b68 <MX_GPIO_Init>
  MX_DMA_Init();
 800280a:	f000 f98f 	bl	8002b2c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800280e:	f000 f93f 	bl	8002a90 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002812:	f000 f887 	bl	8002924 <MX_ADC1_Init>
  MX_TIM14_Init();
 8002816:	f000 f8ef 	bl	80029f8 <MX_TIM14_Init>
  MX_TIM16_Init();
 800281a:	f000 f911 	bl	8002a40 <MX_TIM16_Init>

//	  for (int i = 0; i < 8; ++i) {
//		  shift_shift_register(shift_register, 0);
//	  }

	  for (int i = 0; i < 20; ++i) {
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	e008      	b.n	8002836 <main+0x146>
		  shift_shift_register(shift_register, 1);
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <main+0x190>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fa9c 	bl	8002d68 <shift_shift_register>
	  for (int i = 0; i < 20; ++i) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3301      	adds	r3, #1
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b13      	cmp	r3, #19
 800283a:	ddf3      	ble.n	8002824 <main+0x134>
 800283c:	e7ef      	b.n	800281e <main+0x12e>
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	20000404 	.word	0x20000404
 8002844:	20000408 	.word	0x20000408
 8002848:	2000040c 	.word	0x2000040c
 800284c:	20000410 	.word	0x20000410
 8002850:	50000400 	.word	0x50000400
 8002854:	20000414 	.word	0x20000414
 8002858:	20000418 	.word	0x20000418
 800285c:	50001400 	.word	0x50001400
 8002860:	2000041c 	.word	0x2000041c
 8002864:	200002bc 	.word	0x200002bc
 8002868:	20000420 	.word	0x20000420
 800286c:	20000308 	.word	0x20000308
 8002870:	20000424 	.word	0x20000424
 8002874:	200001fc 	.word	0x200001fc
 8002878:	200003e8 	.word	0x200003e8
 800287c:	200003f4 	.word	0x200003f4
 8002880:	200003f8 	.word	0x200003f8
 8002884:	200003f0 	.word	0x200003f0
 8002888:	200003fc 	.word	0x200003fc
 800288c:	20000354 	.word	0x20000354
 8002890:	20000400 	.word	0x20000400

08002894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b093      	sub	sp, #76	; 0x4c
 8002898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800289a:	2410      	movs	r4, #16
 800289c:	193b      	adds	r3, r7, r4
 800289e:	0018      	movs	r0, r3
 80028a0:	2338      	movs	r3, #56	; 0x38
 80028a2:	001a      	movs	r2, r3
 80028a4:	2100      	movs	r1, #0
 80028a6:	f004 f9b2 	bl	8006c0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028aa:	003b      	movs	r3, r7
 80028ac:	0018      	movs	r0, r3
 80028ae:	2310      	movs	r3, #16
 80028b0:	001a      	movs	r2, r3
 80028b2:	2100      	movs	r1, #0
 80028b4:	f004 f9ab 	bl	8006c0e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	0018      	movs	r0, r3
 80028be:	f001 fef1 	bl	80046a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028c2:	193b      	adds	r3, r7, r4
 80028c4:	2202      	movs	r2, #2
 80028c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c8:	193b      	adds	r3, r7, r4
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	0052      	lsls	r2, r2, #1
 80028ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	2240      	movs	r2, #64	; 0x40
 80028da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	0018      	movs	r0, r3
 80028e6:	f001 ff29 	bl	800473c <HAL_RCC_OscConfig>
 80028ea:	1e03      	subs	r3, r0, #0
 80028ec:	d001      	beq.n	80028f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80028ee:	f000 f9cf 	bl	8002c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028f2:	003b      	movs	r3, r7
 80028f4:	2207      	movs	r2, #7
 80028f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80028f8:	003b      	movs	r3, r7
 80028fa:	2200      	movs	r2, #0
 80028fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028fe:	003b      	movs	r3, r7
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002904:	003b      	movs	r3, r7
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800290a:	003b      	movs	r3, r7
 800290c:	2100      	movs	r1, #0
 800290e:	0018      	movs	r0, r3
 8002910:	f002 fa2e 	bl	8004d70 <HAL_RCC_ClockConfig>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d001      	beq.n	800291c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002918:	f000 f9ba 	bl	8002c90 <Error_Handler>
  }
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b013      	add	sp, #76	; 0x4c
 8002922:	bd90      	pop	{r4, r7, pc}

08002924 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	0018      	movs	r0, r3
 800292e:	230c      	movs	r3, #12
 8002930:	001a      	movs	r2, r3
 8002932:	2100      	movs	r1, #0
 8002934:	f004 f96b 	bl	8006c0e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <MX_ADC1_Init+0xcc>)
 800293a:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <MX_ADC1_Init+0xd0>)
 800293c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800293e:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <MX_ADC1_Init+0xcc>)
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	05d2      	lsls	r2, r2, #23
 8002944:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <MX_ADC1_Init+0xcc>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800294c:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <MX_ADC1_Init+0xcc>)
 800294e:	2200      	movs	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002952:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <MX_ADC1_Init+0xcc>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002958:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <MX_ADC1_Init+0xcc>)
 800295a:	2204      	movs	r2, #4
 800295c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <MX_ADC1_Init+0xcc>)
 8002960:	2200      	movs	r2, #0
 8002962:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002964:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <MX_ADC1_Init+0xcc>)
 8002966:	2200      	movs	r2, #0
 8002968:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800296a:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <MX_ADC1_Init+0xcc>)
 800296c:	2200      	movs	r2, #0
 800296e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002970:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <MX_ADC1_Init+0xcc>)
 8002972:	2201      	movs	r2, #1
 8002974:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <MX_ADC1_Init+0xcc>)
 8002978:	2220      	movs	r2, #32
 800297a:	2101      	movs	r1, #1
 800297c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <MX_ADC1_Init+0xcc>)
 8002980:	2200      	movs	r2, #0
 8002982:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <MX_ADC1_Init+0xcc>)
 8002986:	2200      	movs	r2, #0
 8002988:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <MX_ADC1_Init+0xcc>)
 800298c:	222c      	movs	r2, #44	; 0x2c
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <MX_ADC1_Init+0xcc>)
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <MX_ADC1_Init+0xcc>)
 800299a:	2200      	movs	r2, #0
 800299c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <MX_ADC1_Init+0xcc>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <MX_ADC1_Init+0xcc>)
 80029a6:	223c      	movs	r2, #60	; 0x3c
 80029a8:	2100      	movs	r1, #0
 80029aa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <MX_ADC1_Init+0xcc>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029b2:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <MX_ADC1_Init+0xcc>)
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 fe3d 	bl	8003634 <HAL_ADC_Init>
 80029ba:	1e03      	subs	r3, r0, #0
 80029bc:	d001      	beq.n	80029c2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80029be:	f000 f967 	bl	8002c90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80029c2:	1d3b      	adds	r3, r7, #4
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029d4:	1d3a      	adds	r2, r7, #4
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <MX_ADC1_Init+0xcc>)
 80029d8:	0011      	movs	r1, r2
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 ffd2 	bl	8003984 <HAL_ADC_ConfigChannel>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d001      	beq.n	80029e8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80029e4:	f000 f954 	bl	8002c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b004      	add	sp, #16
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	200001fc 	.word	0x200001fc
 80029f4:	40012400 	.word	0x40012400

080029f8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <MX_TIM14_Init+0x40>)
 80029fe:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <MX_TIM14_Init+0x44>)
 8002a00:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15;
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <MX_TIM14_Init+0x40>)
 8002a04:	220f      	movs	r2, #15
 8002a06:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <MX_TIM14_Init+0x40>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = SLOW_PERIOD;
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <MX_TIM14_Init+0x40>)
 8002a10:	22fa      	movs	r2, #250	; 0xfa
 8002a12:	00d2      	lsls	r2, r2, #3
 8002a14:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <MX_TIM14_Init+0x40>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <MX_TIM14_Init+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <MX_TIM14_Init+0x40>)
 8002a24:	0018      	movs	r0, r3
 8002a26:	f002 fcc7 	bl	80053b8 <HAL_TIM_Base_Init>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002a2e:	f000 f92f 	bl	8002c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	200002bc 	.word	0x200002bc
 8002a3c:	40002000 	.word	0x40002000

08002a40 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <MX_TIM16_Init+0x48>)
 8002a46:	4a11      	ldr	r2, [pc, #68]	; (8002a8c <MX_TIM16_Init+0x4c>)
 8002a48:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15;
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <MX_TIM16_Init+0x48>)
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a50:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <MX_TIM16_Init+0x48>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = FAST_PERIOD;
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <MX_TIM16_Init+0x48>)
 8002a58:	22fa      	movs	r2, #250	; 0xfa
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <MX_TIM16_Init+0x48>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <MX_TIM16_Init+0x48>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <MX_TIM16_Init+0x48>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <MX_TIM16_Init+0x48>)
 8002a72:	0018      	movs	r0, r3
 8002a74:	f002 fca0 	bl	80053b8 <HAL_TIM_Base_Init>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002a7c:	f000 f908 	bl	8002c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	20000308 	.word	0x20000308
 8002a8c:	40014400 	.word	0x40014400

08002a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a94:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002a96:	4a24      	ldr	r2, [pc, #144]	; (8002b28 <MX_USART1_UART_Init+0x98>)
 8002a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002a9c:	2296      	movs	r2, #150	; 0x96
 8002a9e:	0192      	lsls	r2, r2, #6
 8002aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa2:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aba:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002acc:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ad2:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002ada:	0018      	movs	r0, r3
 8002adc:	f002 fea4 	bl	8005828 <HAL_UART_Init>
 8002ae0:	1e03      	subs	r3, r0, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ae4:	f000 f8d4 	bl	8002c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002aea:	2100      	movs	r1, #0
 8002aec:	0018      	movs	r0, r3
 8002aee:	f003 ff71 	bl	80069d4 <HAL_UARTEx_SetTxFifoThreshold>
 8002af2:	1e03      	subs	r3, r0, #0
 8002af4:	d001      	beq.n	8002afa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002af6:	f000 f8cb 	bl	8002c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002afc:	2100      	movs	r1, #0
 8002afe:	0018      	movs	r0, r3
 8002b00:	f003 ffa8 	bl	8006a54 <HAL_UARTEx_SetRxFifoThreshold>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d001      	beq.n	8002b0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b08:	f000 f8c2 	bl	8002c90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <MX_USART1_UART_Init+0x94>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f003 ff26 	bl	8006960 <HAL_UARTEx_DisableFifoMode>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d001      	beq.n	8002b1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b18:	f000 f8ba 	bl	8002c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	20000354 	.word	0x20000354
 8002b28:	40013800 	.word	0x40013800

08002b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_DMA_Init+0x38>)
 8002b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MX_DMA_Init+0x38>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_DMA_Init+0x38>)
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2009      	movs	r0, #9
 8002b50:	f001 f99c 	bl	8003e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b54:	2009      	movs	r0, #9
 8002b56:	f001 f9ae 	bl	8003eb6 <HAL_NVIC_EnableIRQ>

}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b002      	add	sp, #8
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40021000 	.word	0x40021000

08002b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6e:	240c      	movs	r4, #12
 8002b70:	193b      	adds	r3, r7, r4
 8002b72:	0018      	movs	r0, r3
 8002b74:	2314      	movs	r3, #20
 8002b76:	001a      	movs	r2, r3
 8002b78:	2100      	movs	r1, #0
 8002b7a:	f004 f848 	bl	8006c0e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <MX_GPIO_Init+0x11c>)
 8002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b82:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <MX_GPIO_Init+0x11c>)
 8002b84:	2102      	movs	r1, #2
 8002b86:	430a      	orrs	r2, r1
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <MX_GPIO_Init+0x11c>)
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	2202      	movs	r2, #2
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b96:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <MX_GPIO_Init+0x11c>)
 8002b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <MX_GPIO_Init+0x11c>)
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba2:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <MX_GPIO_Init+0x11c>)
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	4013      	ands	r3, r2
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	4b35      	ldr	r3, [pc, #212]	; (8002c84 <MX_GPIO_Init+0x11c>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <MX_GPIO_Init+0x11c>)
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bba:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <MX_GPIO_Init+0x11c>)
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8002bc6:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <MX_GPIO_Init+0x120>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2104      	movs	r1, #4
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f001 fd4b 	bl	8004668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|BATTERY_OUTPUT_Pin|SHIFT_SER_Pin|SHIFT_SRCLK_Pin
 8002bd2:	23a0      	movs	r3, #160	; 0xa0
 8002bd4:	05db      	lsls	r3, r3, #23
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	21fa      	movs	r1, #250	; 0xfa
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f001 fd44 	bl	8004668 <HAL_GPIO_WritePin>
                          |SHIFT_NOT_SRCLK_Pin|SHIFT_RCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_NOT_OE_GPIO_Port, SHIFT_NOT_OE_Pin, GPIO_PIN_RESET);
 8002be0:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <MX_GPIO_Init+0x124>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	2101      	movs	r1, #1
 8002be6:	0018      	movs	r0, r3
 8002be8:	f001 fd3e 	bl	8004668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8002bec:	193b      	adds	r3, r7, r4
 8002bee:	2204      	movs	r2, #4
 8002bf0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	2200      	movs	r2, #0
 8002c02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <MX_GPIO_Init+0x120>)
 8002c08:	0019      	movs	r1, r3
 8002c0a:	0010      	movs	r0, r2
 8002c0c:	f001 fbc8 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin BATTERY_OUTPUT_Pin SHIFT_SER_Pin SHIFT_SRCLK_Pin
                           SHIFT_NOT_SRCLK_Pin SHIFT_RCLK_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BATTERY_OUTPUT_Pin|SHIFT_SER_Pin|SHIFT_SRCLK_Pin
 8002c10:	193b      	adds	r3, r7, r4
 8002c12:	22fa      	movs	r2, #250	; 0xfa
 8002c14:	601a      	str	r2, [r3, #0]
                          |SHIFT_NOT_SRCLK_Pin|SHIFT_RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	2201      	movs	r2, #1
 8002c1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	2200      	movs	r2, #0
 8002c26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	193a      	adds	r2, r7, r4
 8002c2a:	23a0      	movs	r3, #160	; 0xa0
 8002c2c:	05db      	lsls	r3, r3, #23
 8002c2e:	0011      	movs	r1, r2
 8002c30:	0018      	movs	r0, r3
 8002c32:	f001 fbb5 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATTERY_STATUS_BUTTON_Pin */
  GPIO_InitStruct.Pin = BATTERY_STATUS_BUTTON_Pin;
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	2204      	movs	r2, #4
 8002c3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3c:	193b      	adds	r3, r7, r4
 8002c3e:	2200      	movs	r2, #0
 8002c40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BATTERY_STATUS_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002c48:	193a      	adds	r2, r7, r4
 8002c4a:	23a0      	movs	r3, #160	; 0xa0
 8002c4c:	05db      	lsls	r3, r3, #23
 8002c4e:	0011      	movs	r1, r2
 8002c50:	0018      	movs	r0, r3
 8002c52:	f001 fba5 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_NOT_OE_Pin */
  GPIO_InitStruct.Pin = SHIFT_NOT_OE_Pin;
 8002c56:	0021      	movs	r1, r4
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2201      	movs	r2, #1
 8002c62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	187b      	adds	r3, r7, r1
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_NOT_OE_GPIO_Port, &GPIO_InitStruct);
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	4a06      	ldr	r2, [pc, #24]	; (8002c8c <MX_GPIO_Init+0x124>)
 8002c74:	0019      	movs	r1, r3
 8002c76:	0010      	movs	r0, r2
 8002c78:	f001 fb92 	bl	80043a0 <HAL_GPIO_Init>

}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b009      	add	sp, #36	; 0x24
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	50001400 	.word	0x50001400
 8002c8c:	50000400 	.word	0x50000400

08002c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c94:	b672      	cpsid	i
}
 8002c96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <Error_Handler+0x8>

08002c9a <new_pin_data>:

// REQUIRES: _port and _pin corresponds to
// the port and pin.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created PinData object
PinData *new_pin_data(GPIO_TypeDef *_port, uint16_t _pin) {
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	000a      	movs	r2, r1
 8002ca4:	1cbb      	adds	r3, r7, #2
 8002ca6:	801a      	strh	r2, [r3, #0]
    PinData *pin_data = (PinData*) malloc(sizeof(PinData));
 8002ca8:	2008      	movs	r0, #8
 8002caa:	f003 ff9d 	bl	8006be8 <malloc>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	60fb      	str	r3, [r7, #12]
	pin_data->port = _port;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	601a      	str	r2, [r3, #0]
    pin_data->pin = _pin;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1cba      	adds	r2, r7, #2
 8002cbc:	8812      	ldrh	r2, [r2, #0]
 8002cbe:	809a      	strh	r2, [r3, #4]
	return pin_data;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b004      	add	sp, #16
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <set_pin_value>:

// REQUIRES: pin_data is PinData and value is 0 or 1
// MODIFIES: nothing
// EFFECTS: Sets pin to value
void set_pin_value(PinData *pin_data, uint8_t value) {
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	000a      	movs	r2, r1
 8002cd4:	1cfb      	adds	r3, r7, #3
 8002cd6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(pin_data->port, pin_data->pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8899      	ldrh	r1, [r3, #4]
 8002ce0:	1cfb      	adds	r3, r7, #3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	4193      	sbcs	r3, r2
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	001a      	movs	r2, r3
 8002cec:	f001 fcbc 	bl	8004668 <HAL_GPIO_WritePin>
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <new_potentiometer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Potentiometer object
Potentiometer *new_potentiometer(ADCSensor *_adc_sensor, uint8_t _rank) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	000a      	movs	r2, r1
 8002d02:	1cfb      	adds	r3, r7, #3
 8002d04:	701a      	strb	r2, [r3, #0]
    Potentiometer *potentiometer = (Potentiometer*) malloc(sizeof(Potentiometer));
 8002d06:	2008      	movs	r0, #8
 8002d08:	f003 ff6e 	bl	8006be8 <malloc>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]
    potentiometer->adc_sensor = _adc_sensor;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
    potentiometer->rank = _rank;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1cfa      	adds	r2, r7, #3
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	711a      	strb	r2, [r3, #4]
    return potentiometer;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	0018      	movs	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b004      	add	sp, #16
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <new_shift_register>:
ShiftRegister *new_shift_register(
		PinData *_ser_pin,
		PinData *_srclk_pin,
		PinData *_not_srclk_pin,
		PinData *_rclk_pin,
		PinData *_not_oe_pin) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
	ShiftRegister *shift_register = (ShiftRegister*) malloc(sizeof(ShiftRegister));
 8002d36:	2014      	movs	r0, #20
 8002d38:	f003 ff56 	bl	8006be8 <malloc>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	617b      	str	r3, [r7, #20]
	shift_register->ser_pin = _ser_pin;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]
	shift_register->srclk_pin = _srclk_pin;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	605a      	str	r2, [r3, #4]
	shift_register->not_srclk_pin = _not_srclk_pin;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	609a      	str	r2, [r3, #8]
	shift_register->rclk_pin = _rclk_pin;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	60da      	str	r2, [r3, #12]
	shift_register->not_oe_pin = _not_oe_pin;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	611a      	str	r2, [r3, #16]
	return shift_register;
 8002d5e:	697b      	ldr	r3, [r7, #20]
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b006      	add	sp, #24
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <shift_shift_register>:

// REQUIRES: shift_register is a ShiftRegister object and value is either 0 or 1
// MODIFIES: outputs of ports and pins
// EFFECTS: shift value into register
void shift_shift_register(ShiftRegister *shift_register, uint8_t value) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	000a      	movs	r2, r1
 8002d72:	1cfb      	adds	r3, r7, #3
 8002d74:	701a      	strb	r2, [r3, #0]
	set_pin_value(shift_register->ser_pin, 1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7ff ffa4 	bl	8002cca <set_pin_value>
	set_pin_value(shift_register->ser_pin, value);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	1cfb      	adds	r3, r7, #3
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	0010      	movs	r0, r2
 8002d8e:	f7ff ff9c 	bl	8002cca <set_pin_value>
	set_pin_value(shift_register->not_srclk_pin, 1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2101      	movs	r1, #1
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7ff ff96 	bl	8002cca <set_pin_value>
	set_pin_value(shift_register->srclk_pin, 1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2101      	movs	r1, #1
 8002da4:	0018      	movs	r0, r3
 8002da6:	f7ff ff90 	bl	8002cca <set_pin_value>
	set_pin_value(shift_register->srclk_pin, 0);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2100      	movs	r1, #0
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7ff ff8a 	bl	8002cca <set_pin_value>
	set_pin_value(shift_register->rclk_pin, 1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2101      	movs	r1, #1
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f7ff ff84 	bl	8002cca <set_pin_value>
	set_pin_value(shift_register->rclk_pin, 0);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff ff7e 	bl	8002cca <set_pin_value>
	set_pin_value(shift_register->ser_pin, 0);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7ff ff78 	bl	8002cca <set_pin_value>
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b002      	add	sp, #8
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_MspInit+0x44>)
 8002dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_MspInit+0x44>)
 8002df0:	2101      	movs	r1, #1
 8002df2:	430a      	orrs	r2, r1
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
 8002df6:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_MspInit+0x44>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	607b      	str	r3, [r7, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_MspInit+0x44>)
 8002e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_MspInit+0x44>)
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	0549      	lsls	r1, r1, #21
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_MspInit+0x44>)
 8002e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	055b      	lsls	r3, r3, #21
 8002e18:	4013      	ands	r3, r2
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	40021000 	.word	0x40021000

08002e2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b095      	sub	sp, #84	; 0x54
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	233c      	movs	r3, #60	; 0x3c
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	0018      	movs	r0, r3
 8002e3a:	2314      	movs	r3, #20
 8002e3c:	001a      	movs	r2, r3
 8002e3e:	2100      	movs	r1, #0
 8002e40:	f003 fee5 	bl	8006c0e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e44:	2414      	movs	r4, #20
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	0018      	movs	r0, r3
 8002e4a:	2328      	movs	r3, #40	; 0x28
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	2100      	movs	r1, #0
 8002e50:	f003 fedd 	bl	8006c0e <memset>
  if(hadc->Instance==ADC1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a35      	ldr	r2, [pc, #212]	; (8002f30 <HAL_ADC_MspInit+0x104>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d164      	bne.n	8002f28 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e5e:	193b      	adds	r3, r7, r4
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	01d2      	lsls	r2, r2, #7
 8002e64:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002e66:	193b      	adds	r3, r7, r4
 8002e68:	2200      	movs	r2, #0
 8002e6a:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e6c:	193b      	adds	r3, r7, r4
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f002 f928 	bl	80050c4 <HAL_RCCEx_PeriphCLKConfig>
 8002e74:	1e03      	subs	r3, r0, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002e78:	f7ff ff0a 	bl	8002c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_ADC_MspInit+0x108>)
 8002e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e80:	4b2c      	ldr	r3, [pc, #176]	; (8002f34 <HAL_ADC_MspInit+0x108>)
 8002e82:	2180      	movs	r1, #128	; 0x80
 8002e84:	0349      	lsls	r1, r1, #13
 8002e86:	430a      	orrs	r2, r1
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_ADC_MspInit+0x108>)
 8002e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	035b      	lsls	r3, r3, #13
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e98:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <HAL_ADC_MspInit+0x108>)
 8002e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_ADC_MspInit+0x108>)
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_ADC_MspInit+0x108>)
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	4013      	ands	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = TRIGGER_POTENTIOMETER_ADC_Pin;
 8002eb0:	213c      	movs	r1, #60	; 0x3c
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	2203      	movs	r2, #3
 8002ebc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	187b      	adds	r3, r7, r1
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(TRIGGER_POTENTIOMETER_ADC_GPIO_Port, &GPIO_InitStruct);
 8002ec4:	187a      	adds	r2, r7, r1
 8002ec6:	23a0      	movs	r3, #160	; 0xa0
 8002ec8:	05db      	lsls	r3, r3, #23
 8002eca:	0011      	movs	r1, r2
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f001 fa67 	bl	80043a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002ed2:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_ADC_MspInit+0x110>)
 8002ed6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002ed8:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002eda:	2205      	movs	r2, #5
 8002edc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002eec:	2280      	movs	r2, #128	; 0x80
 8002eee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	0052      	lsls	r2, r2, #1
 8002ef6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	00d2      	lsls	r2, r2, #3
 8002efe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002f02:	2220      	movs	r2, #32
 8002f04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 ffee 	bl	8003ef0 <HAL_DMA_Init>
 8002f14:	1e03      	subs	r3, r0, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8002f18:	f7ff feba 	bl	8002c90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a06      	ldr	r2, [pc, #24]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002f20:	651a      	str	r2, [r3, #80]	; 0x50
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_ADC_MspInit+0x10c>)
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b015      	add	sp, #84	; 0x54
 8002f2e:	bd90      	pop	{r4, r7, pc}
 8002f30:	40012400 	.word	0x40012400
 8002f34:	40021000 	.word	0x40021000
 8002f38:	20000260 	.word	0x20000260
 8002f3c:	40020008 	.word	0x40020008

08002f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <HAL_TIM_Base_MspInit+0x80>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d116      	bne.n	8002f80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002f52:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <HAL_TIM_Base_MspInit+0x84>)
 8002f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_TIM_Base_MspInit+0x84>)
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	0209      	lsls	r1, r1, #8
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f60:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <HAL_TIM_Base_MspInit+0x84>)
 8002f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	2013      	movs	r0, #19
 8002f74:	f000 ff8a 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002f78:	2013      	movs	r0, #19
 8002f7a:	f000 ff9c 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002f7e:	e01a      	b.n	8002fb6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <HAL_TIM_Base_MspInit+0x88>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d115      	bne.n	8002fb6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <HAL_TIM_Base_MspInit+0x84>)
 8002f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_TIM_Base_MspInit+0x84>)
 8002f90:	2180      	movs	r1, #128	; 0x80
 8002f92:	0289      	lsls	r1, r1, #10
 8002f94:	430a      	orrs	r2, r1
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_TIM_Base_MspInit+0x84>)
 8002f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	029b      	lsls	r3, r3, #10
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2100      	movs	r1, #0
 8002faa:	2015      	movs	r0, #21
 8002fac:	f000 ff6e 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002fb0:	2015      	movs	r0, #21
 8002fb2:	f000 ff80 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b004      	add	sp, #16
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	40002000 	.word	0x40002000
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40014400 	.word	0x40014400

08002fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b095      	sub	sp, #84	; 0x54
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	233c      	movs	r3, #60	; 0x3c
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	0018      	movs	r0, r3
 8002fda:	2314      	movs	r3, #20
 8002fdc:	001a      	movs	r2, r3
 8002fde:	2100      	movs	r1, #0
 8002fe0:	f003 fe15 	bl	8006c0e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fe4:	2414      	movs	r4, #20
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	0018      	movs	r0, r3
 8002fea:	2328      	movs	r3, #40	; 0x28
 8002fec:	001a      	movs	r2, r3
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f003 fe0d 	bl	8006c0e <memset>
  if(huart->Instance==USART1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a26      	ldr	r2, [pc, #152]	; (8003094 <HAL_UART_MspInit+0xc8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d145      	bne.n	800308a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ffe:	193b      	adds	r3, r7, r4
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003004:	193b      	adds	r3, r7, r4
 8003006:	2200      	movs	r2, #0
 8003008:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800300a:	193b      	adds	r3, r7, r4
 800300c:	0018      	movs	r0, r3
 800300e:	f002 f859 	bl	80050c4 <HAL_RCCEx_PeriphCLKConfig>
 8003012:	1e03      	subs	r3, r0, #0
 8003014:	d001      	beq.n	800301a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003016:	f7ff fe3b 	bl	8002c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800301a:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <HAL_UART_MspInit+0xcc>)
 800301c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_UART_MspInit+0xcc>)
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	01c9      	lsls	r1, r1, #7
 8003024:	430a      	orrs	r2, r1
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_UART_MspInit+0xcc>)
 800302a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	01db      	lsls	r3, r3, #7
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_UART_MspInit+0xcc>)
 8003038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <HAL_UART_MspInit+0xcc>)
 800303c:	2102      	movs	r1, #2
 800303e:	430a      	orrs	r2, r1
 8003040:	635a      	str	r2, [r3, #52]	; 0x34
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_UART_MspInit+0xcc>)
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	2202      	movs	r2, #2
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUETOOTH_UART_RX_Pin|BLUETOOTH_UART_TX_Pin;
 800304e:	213c      	movs	r1, #60	; 0x3c
 8003050:	187b      	adds	r3, r7, r1
 8003052:	22c0      	movs	r2, #192	; 0xc0
 8003054:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2202      	movs	r2, #2
 800305a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	187b      	adds	r3, r7, r1
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	187b      	adds	r3, r7, r1
 8003064:	2200      	movs	r2, #0
 8003066:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003068:	187b      	adds	r3, r7, r1
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306e:	187b      	adds	r3, r7, r1
 8003070:	4a0a      	ldr	r2, [pc, #40]	; (800309c <HAL_UART_MspInit+0xd0>)
 8003072:	0019      	movs	r1, r3
 8003074:	0010      	movs	r0, r2
 8003076:	f001 f993 	bl	80043a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	201b      	movs	r0, #27
 8003080:	f000 ff04 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003084:	201b      	movs	r0, #27
 8003086:	f000 ff16 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b015      	add	sp, #84	; 0x54
 8003090:	bd90      	pop	{r4, r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	40013800 	.word	0x40013800
 8003098:	40021000 	.word	0x40021000
 800309c:	50000400 	.word	0x50000400

080030a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <NMI_Handler+0x4>

080030a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030aa:	e7fe      	b.n	80030aa <HardFault_Handler+0x4>

080030ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030c4:	f000 f99c 	bl	8003400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <DMA1_Channel1_IRQHandler+0x14>)
 80030d6:	0018      	movs	r0, r3
 80030d8:	f001 f860 	bl	800419c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	20000260 	.word	0x20000260

080030e8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <TIM14_IRQHandler+0x14>)
 80030ee:	0018      	movs	r0, r3
 80030f0:	f002 f9ba 	bl	8005468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	200002bc 	.word	0x200002bc

08003100 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <TIM16_IRQHandler+0x14>)
 8003106:	0018      	movs	r0, r3
 8003108:	f002 f9ae 	bl	8005468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	20000308 	.word	0x20000308

08003118 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <USART1_IRQHandler+0x14>)
 800311e:	0018      	movs	r0, r3
 8003120:	f002 fbd8 	bl	80058d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	20000354 	.word	0x20000354

08003130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
	return 1;
 8003134:	2301      	movs	r3, #1
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <_kill>:

int _kill(int pid, int sig)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003146:	f003 fd25 	bl	8006b94 <__errno>
 800314a:	0003      	movs	r3, r0
 800314c:	2216      	movs	r2, #22
 800314e:	601a      	str	r2, [r3, #0]
	return -1;
 8003150:	2301      	movs	r3, #1
 8003152:	425b      	negs	r3, r3
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b002      	add	sp, #8
 800315a:	bd80      	pop	{r7, pc}

0800315c <_exit>:

void _exit (int status)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003164:	2301      	movs	r3, #1
 8003166:	425a      	negs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f7ff ffe5 	bl	800313c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003172:	e7fe      	b.n	8003172 <_exit+0x16>

08003174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e00a      	b.n	800319c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003186:	e000      	b.n	800318a <_read+0x16>
 8003188:	bf00      	nop
 800318a:	0001      	movs	r1, r0
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	60ba      	str	r2, [r7, #8]
 8003192:	b2ca      	uxtb	r2, r1
 8003194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	3301      	adds	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	dbf0      	blt.n	8003186 <_read+0x12>
	}

return len;
 80031a4:	687b      	ldr	r3, [r7, #4]
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b006      	add	sp, #24
 80031ac:	bd80      	pop	{r7, pc}

080031ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e009      	b.n	80031d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	60ba      	str	r2, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	0018      	movs	r0, r3
 80031ca:	e000      	b.n	80031ce <_write+0x20>
 80031cc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3301      	adds	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	dbf1      	blt.n	80031c0 <_write+0x12>
	}
	return len;
 80031dc:	687b      	ldr	r3, [r7, #4]
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b006      	add	sp, #24
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_close>:

int _close(int file)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
	return -1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	425b      	negs	r3, r3
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	0192      	lsls	r2, r2, #6
 800320a:	605a      	str	r2, [r3, #4]
	return 0;
 800320c:	2300      	movs	r3, #0
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}

08003216 <_isatty>:

int _isatty(int file)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
	return 1;
 800321e:	2301      	movs	r3, #1
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
	return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <_sbrk+0x5c>)
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <_sbrk+0x60>)
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <_sbrk+0x64>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <_sbrk+0x64>)
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <_sbrk+0x68>)
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <_sbrk+0x64>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	18d3      	adds	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d207      	bcs.n	8003280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003270:	f003 fc90 	bl	8006b94 <__errno>
 8003274:	0003      	movs	r3, r0
 8003276:	220c      	movs	r2, #12
 8003278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800327a:	2301      	movs	r3, #1
 800327c:	425b      	negs	r3, r3
 800327e:	e009      	b.n	8003294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <_sbrk+0x64>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <_sbrk+0x64>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	18d2      	adds	r2, r2, r3
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <_sbrk+0x64>)
 8003290:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b006      	add	sp, #24
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20002000 	.word	0x20002000
 80032a0:	00000400 	.word	0x00000400
 80032a4:	20000428 	.word	0x20000428
 80032a8:	20000440 	.word	0x20000440

080032ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <new_trigger>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _potentiometer is a Potentiometer object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Trigger object
Trigger *new_trigger(Potentiometer *_potentiometer) {
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
	Trigger *trigger = (Trigger*) malloc(sizeof(Trigger));
 80032be:	2004      	movs	r0, #4
 80032c0:	f003 fc92 	bl	8006be8 <malloc>
 80032c4:	0003      	movs	r3, r0
 80032c6:	60fb      	str	r3, [r7, #12]
	trigger->potentiometer = _potentiometer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	601a      	str	r2, [r3, #0]
	return trigger;
 80032ce:	68fb      	ldr	r3, [r7, #12]
}
 80032d0:	0018      	movs	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b004      	add	sp, #16
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032d8:	480d      	ldr	r0, [pc, #52]	; (8003310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032dc:	f7ff ffe6 	bl	80032ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032e0:	480c      	ldr	r0, [pc, #48]	; (8003314 <LoopForever+0x6>)
  ldr r1, =_edata
 80032e2:	490d      	ldr	r1, [pc, #52]	; (8003318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032e4:	4a0d      	ldr	r2, [pc, #52]	; (800331c <LoopForever+0xe>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e8:	e002      	b.n	80032f0 <LoopCopyDataInit>

080032ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ee:	3304      	adds	r3, #4

080032f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f4:	d3f9      	bcc.n	80032ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f6:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032f8:	4c0a      	ldr	r4, [pc, #40]	; (8003324 <LoopForever+0x16>)
  movs r3, #0
 80032fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032fc:	e001      	b.n	8003302 <LoopFillZerobss>

080032fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003300:	3204      	adds	r2, #4

08003302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003304:	d3fb      	bcc.n	80032fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003306:	f003 fc4b 	bl	8006ba0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800330a:	f7ff f9f1 	bl	80026f0 <main>

0800330e <LoopForever>:

LoopForever:
  b LoopForever
 800330e:	e7fe      	b.n	800330e <LoopForever>
  ldr   r0, =_estack
 8003310:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003318:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800331c:	0800bc24 	.word	0x0800bc24
  ldr r2, =_sbss
 8003320:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003324:	20000440 	.word	0x20000440

08003328 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003328:	e7fe      	b.n	8003328 <ADC1_IRQHandler>
	...

0800332c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003332:	1dfb      	adds	r3, r7, #7
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_Init+0x3c>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_Init+0x3c>)
 800333e:	2180      	movs	r1, #128	; 0x80
 8003340:	0049      	lsls	r1, r1, #1
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003346:	2003      	movs	r0, #3
 8003348:	f000 f810 	bl	800336c <HAL_InitTick>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d003      	beq.n	8003358 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003350:	1dfb      	adds	r3, r7, #7
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e001      	b.n	800335c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003358:	f7ff fd44 	bl	8002de4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800335c:	1dfb      	adds	r3, r7, #7
 800335e:	781b      	ldrb	r3, [r3, #0]
}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	b002      	add	sp, #8
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40022000 	.word	0x40022000

0800336c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003374:	230f      	movs	r3, #15
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_InitTick+0x88>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02b      	beq.n	80033dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003384:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_InitTick+0x8c>)
 8003386:	681c      	ldr	r4, [r3, #0]
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HAL_InitTick+0x88>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	0019      	movs	r1, r3
 800338e:	23fa      	movs	r3, #250	; 0xfa
 8003390:	0098      	lsls	r0, r3, #2
 8003392:	f7fc fed3 	bl	800013c <__udivsi3>
 8003396:	0003      	movs	r3, r0
 8003398:	0019      	movs	r1, r3
 800339a:	0020      	movs	r0, r4
 800339c:	f7fc fece 	bl	800013c <__udivsi3>
 80033a0:	0003      	movs	r3, r0
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 fd97 	bl	8003ed6 <HAL_SYSTICK_Config>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d112      	bne.n	80033d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d80a      	bhi.n	80033c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	2301      	movs	r3, #1
 80033b6:	425b      	negs	r3, r3
 80033b8:	2200      	movs	r2, #0
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 fd66 	bl	8003e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_InitTick+0x90>)
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e00d      	b.n	80033e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80033c8:	230f      	movs	r3, #15
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e008      	b.n	80033e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033d2:	230f      	movs	r3, #15
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e003      	b.n	80033e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033dc:	230f      	movs	r3, #15
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80033e4:	230f      	movs	r3, #15
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	781b      	ldrb	r3, [r3, #0]
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b005      	add	sp, #20
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	20000008 	.word	0x20000008
 80033f8:	20000000 	.word	0x20000000
 80033fc:	20000004 	.word	0x20000004

08003400 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_IncTick+0x1c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	001a      	movs	r2, r3
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_IncTick+0x20>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	18d2      	adds	r2, r2, r3
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_IncTick+0x20>)
 8003412:	601a      	str	r2, [r3, #0]
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	20000008 	.word	0x20000008
 8003420:	2000042c 	.word	0x2000042c

08003424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  return uwTick;
 8003428:	4b02      	ldr	r3, [pc, #8]	; (8003434 <HAL_GetTick+0x10>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	2000042c 	.word	0x2000042c

08003438 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a05      	ldr	r2, [pc, #20]	; (800345c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003448:	401a      	ands	r2, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	601a      	str	r2, [r3, #0]
}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b002      	add	sp, #8
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	fe3fffff 	.word	0xfe3fffff

08003460 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	23e0      	movs	r3, #224	; 0xe0
 800346e:	045b      	lsls	r3, r3, #17
 8003470:	4013      	ands	r3, r2
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b002      	add	sp, #8
 8003478:	bd80      	pop	{r7, pc}

0800347a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	2104      	movs	r1, #4
 800348e:	400a      	ands	r2, r1
 8003490:	2107      	movs	r1, #7
 8003492:	4091      	lsls	r1, r2
 8003494:	000a      	movs	r2, r1
 8003496:	43d2      	mvns	r2, r2
 8003498:	401a      	ands	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2104      	movs	r1, #4
 800349e:	400b      	ands	r3, r1
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4099      	lsls	r1, r3
 80034a4:	000b      	movs	r3, r1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b004      	add	sp, #16
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	2104      	movs	r1, #4
 80034c6:	400a      	ands	r2, r1
 80034c8:	2107      	movs	r1, #7
 80034ca:	4091      	lsls	r1, r2
 80034cc:	000a      	movs	r2, r1
 80034ce:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2104      	movs	r1, #4
 80034d4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80034d6:	40da      	lsrs	r2, r3
 80034d8:	0013      	movs	r3, r2
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b002      	add	sp, #8
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	211f      	movs	r1, #31
 80034f6:	400a      	ands	r2, r1
 80034f8:	210f      	movs	r1, #15
 80034fa:	4091      	lsls	r1, r2
 80034fc:	000a      	movs	r2, r1
 80034fe:	43d2      	mvns	r2, r2
 8003500:	401a      	ands	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0e9b      	lsrs	r3, r3, #26
 8003506:	210f      	movs	r1, #15
 8003508:	4019      	ands	r1, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	201f      	movs	r0, #31
 800350e:	4003      	ands	r3, r0
 8003510:	4099      	lsls	r1, r3
 8003512:	000b      	movs	r3, r1
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	b004      	add	sp, #16
 8003520:	bd80      	pop	{r7, pc}

08003522 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	035b      	lsls	r3, r3, #13
 8003534:	0b5b      	lsrs	r3, r3, #13
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}

08003544 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	0352      	lsls	r2, r2, #13
 8003556:	0b52      	lsrs	r2, r2, #13
 8003558:	43d2      	mvns	r2, r2
 800355a:	401a      	ands	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	0212      	lsls	r2, r2, #8
 800357c:	43d2      	mvns	r2, r2
 800357e:	401a      	ands	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	400b      	ands	r3, r1
 8003588:	4904      	ldr	r1, [pc, #16]	; (800359c <LL_ADC_SetChannelSamplingTime+0x34>)
 800358a:	400b      	ands	r3, r1
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	46bd      	mov	sp, r7
 8003596:	b004      	add	sp, #16
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	07ffff00 	.word	0x07ffff00

080035a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a05      	ldr	r2, [pc, #20]	; (80035c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	2280      	movs	r2, #128	; 0x80
 80035b2:	0552      	lsls	r2, r2, #21
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b002      	add	sp, #8
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	6fffffe8 	.word	0x6fffffe8

080035c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	055b      	lsls	r3, r3, #21
 80035d8:	401a      	ands	r2, r3
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	055b      	lsls	r3, r3, #21
 80035de:	429a      	cmp	r2, r3
 80035e0:	d101      	bne.n	80035e6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2201      	movs	r2, #1
 80035fe:	4013      	ands	r3, r2
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <LL_ADC_IsEnabled+0x18>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <LL_ADC_IsEnabled+0x1a>
 8003608:	2300      	movs	r3, #0
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b002      	add	sp, #8
 8003610:	bd80      	pop	{r7, pc}

08003612 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2204      	movs	r2, #4
 8003620:	4013      	ands	r3, r2
 8003622:	2b04      	cmp	r3, #4
 8003624:	d101      	bne.n	800362a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800362a:	2300      	movs	r3, #0
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800363c:	231f      	movs	r3, #31
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003644:	2300      	movs	r3, #0
 8003646:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e17f      	b.n	800395a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	0018      	movs	r0, r3
 8003666:	f7ff fbe1 	bl	8002e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2254      	movs	r2, #84	; 0x54
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0018      	movs	r0, r3
 800367e:	f7ff ffa3 	bl	80035c8 <LL_ADC_IsInternalRegulatorEnabled>
 8003682:	1e03      	subs	r3, r0, #0
 8003684:	d115      	bne.n	80036b2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0018      	movs	r0, r3
 800368c:	f7ff ff88 	bl	80035a0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003690:	4bb4      	ldr	r3, [pc, #720]	; (8003964 <HAL_ADC_Init+0x330>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	49b4      	ldr	r1, [pc, #720]	; (8003968 <HAL_ADC_Init+0x334>)
 8003696:	0018      	movs	r0, r3
 8003698:	f7fc fd50 	bl	800013c <__udivsi3>
 800369c:	0003      	movs	r3, r0
 800369e:	3301      	adds	r3, #1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036a4:	e002      	b.n	80036ac <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f9      	bne.n	80036a6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7ff ff86 	bl	80035c8 <LL_ADC_IsInternalRegulatorEnabled>
 80036bc:	1e03      	subs	r3, r0, #0
 80036be:	d10f      	bne.n	80036e0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	2210      	movs	r2, #16
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	2201      	movs	r2, #1
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036d8:	231f      	movs	r3, #31
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7ff ff94 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 80036ea:	0003      	movs	r3, r0
 80036ec:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	2210      	movs	r2, #16
 80036f4:	4013      	ands	r3, r2
 80036f6:	d000      	beq.n	80036fa <HAL_ADC_Init+0xc6>
 80036f8:	e122      	b.n	8003940 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d000      	beq.n	8003702 <HAL_ADC_Init+0xce>
 8003700:	e11e      	b.n	8003940 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	4a99      	ldr	r2, [pc, #612]	; (800396c <HAL_ADC_Init+0x338>)
 8003708:	4013      	ands	r3, r2
 800370a:	2202      	movs	r2, #2
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	0018      	movs	r0, r3
 8003718:	f7ff ff6a 	bl	80035f0 <LL_ADC_IsEnabled>
 800371c:	1e03      	subs	r3, r0, #0
 800371e:	d000      	beq.n	8003722 <HAL_ADC_Init+0xee>
 8003720:	e0ad      	b.n	800387e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	7e1b      	ldrb	r3, [r3, #24]
 800372a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800372c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7e5b      	ldrb	r3, [r3, #25]
 8003732:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003734:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	7e9b      	ldrb	r3, [r3, #26]
 800373a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800373c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_ADC_Init+0x118>
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	015b      	lsls	r3, r3, #5
 800374a:	e000      	b.n	800374e <HAL_ADC_Init+0x11a>
 800374c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800374e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003754:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	da04      	bge.n	8003768 <HAL_ADC_Init+0x134>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	e001      	b.n	800376c <HAL_ADC_Init+0x138>
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800376c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	5c5b      	ldrb	r3, [r3, r1]
 8003774:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003776:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	5c9b      	ldrb	r3, [r3, r2]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d115      	bne.n	80037b4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7e9b      	ldrb	r3, [r3, #26]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	0252      	lsls	r2, r2, #9
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e00b      	b.n	80037b4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	2220      	movs	r2, #32
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	2201      	movs	r2, #1
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c0:	23e0      	movs	r3, #224	; 0xe0
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037ca:	4313      	orrs	r3, r2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a65      	ldr	r2, [pc, #404]	; (8003970 <HAL_ADC_Init+0x33c>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	0f9b      	lsrs	r3, r3, #30
 80037ee:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037f4:	4313      	orrs	r3, r2
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	223c      	movs	r2, #60	; 0x3c
 8003800:	5c9b      	ldrb	r3, [r3, r2]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d111      	bne.n	800382a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	0f9b      	lsrs	r3, r3, #30
 800380c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003812:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003818:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800381e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	2201      	movs	r2, #1
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	4a50      	ldr	r2, [pc, #320]	; (8003974 <HAL_ADC_Init+0x340>)
 8003832:	4013      	ands	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	430a      	orrs	r2, r1
 800383e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	23c0      	movs	r3, #192	; 0xc0
 8003846:	061b      	lsls	r3, r3, #24
 8003848:	429a      	cmp	r2, r3
 800384a:	d018      	beq.n	800387e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	05db      	lsls	r3, r3, #23
 8003854:	429a      	cmp	r2, r3
 8003856:	d012      	beq.n	800387e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	061b      	lsls	r3, r3, #24
 8003860:	429a      	cmp	r2, r3
 8003862:	d00c      	beq.n	800387e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003864:	4b44      	ldr	r3, [pc, #272]	; (8003978 <HAL_ADC_Init+0x344>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a44      	ldr	r2, [pc, #272]	; (800397c <HAL_ADC_Init+0x348>)
 800386a:	4013      	ands	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	23f0      	movs	r3, #240	; 0xf0
 8003874:	039b      	lsls	r3, r3, #14
 8003876:	401a      	ands	r2, r3
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <HAL_ADC_Init+0x344>)
 800387a:	430a      	orrs	r2, r1
 800387c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003886:	001a      	movs	r2, r3
 8003888:	2100      	movs	r1, #0
 800388a:	f7ff fdf6 	bl	800347a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	493a      	ldr	r1, [pc, #232]	; (8003980 <HAL_ADC_Init+0x34c>)
 8003898:	001a      	movs	r2, r3
 800389a:	f7ff fdee 	bl	800347a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2110      	movs	r1, #16
 80038b2:	4249      	negs	r1, r1
 80038b4:	430a      	orrs	r2, r1
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
 80038b8:	e018      	b.n	80038ec <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	039b      	lsls	r3, r3, #14
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d112      	bne.n	80038ec <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	221c      	movs	r2, #28
 80038d6:	4013      	ands	r3, r2
 80038d8:	2210      	movs	r2, #16
 80038da:	4252      	negs	r2, r2
 80038dc:	409a      	lsls	r2, r3
 80038de:	0011      	movs	r1, r2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2100      	movs	r1, #0
 80038f2:	0018      	movs	r0, r3
 80038f4:	f7ff fdde 	bl	80034b4 <LL_ADC_GetSamplingTimeCommonChannels>
 80038f8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038fe:	429a      	cmp	r2, r3
 8003900:	d10b      	bne.n	800391a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	2203      	movs	r2, #3
 800390e:	4393      	bics	r3, r2
 8003910:	2201      	movs	r2, #1
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003918:	e01c      	b.n	8003954 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	2212      	movs	r2, #18
 8003920:	4393      	bics	r3, r2
 8003922:	2210      	movs	r2, #16
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	2201      	movs	r2, #1
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003936:	231f      	movs	r3, #31
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800393e:	e009      	b.n	8003954 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	2210      	movs	r2, #16
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800394c:	231f      	movs	r3, #31
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003954:	231f      	movs	r3, #31
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	781b      	ldrb	r3, [r3, #0]
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b008      	add	sp, #32
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	20000000 	.word	0x20000000
 8003968:	00030d40 	.word	0x00030d40
 800396c:	fffffefd 	.word	0xfffffefd
 8003970:	fffe0201 	.word	0xfffe0201
 8003974:	1ffffc02 	.word	0x1ffffc02
 8003978:	40012708 	.word	0x40012708
 800397c:	ffc3ffff 	.word	0xffc3ffff
 8003980:	07ffff04 	.word	0x07ffff04

08003984 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800398e:	2317      	movs	r3, #23
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2254      	movs	r2, #84	; 0x54
 800399e:	5c9b      	ldrb	r3, [r3, r2]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x24>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e1c0      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x3a6>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2254      	movs	r2, #84	; 0x54
 80039ac:	2101      	movs	r1, #1
 80039ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7ff fe2c 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 80039ba:	1e03      	subs	r3, r0, #0
 80039bc:	d000      	beq.n	80039c0 <HAL_ADC_ConfigChannel+0x3c>
 80039be:	e1a3      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d100      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x46>
 80039c8:	e143      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d004      	beq.n	80039e0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039da:	4ac1      	ldr	r2, [pc, #772]	; (8003ce0 <HAL_ADC_ConfigChannel+0x35c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d108      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	0019      	movs	r1, r3
 80039ea:	0010      	movs	r0, r2
 80039ec:	f7ff fd99 	bl	8003522 <LL_ADC_REG_SetSequencerChAdd>
 80039f0:	e0c9      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	211f      	movs	r1, #31
 80039fc:	400b      	ands	r3, r1
 80039fe:	210f      	movs	r1, #15
 8003a00:	4099      	lsls	r1, r3
 8003a02:	000b      	movs	r3, r1
 8003a04:	43db      	mvns	r3, r3
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	035b      	lsls	r3, r3, #13
 8003a10:	0b5b      	lsrs	r3, r3, #13
 8003a12:	d105      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x9c>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	0e9b      	lsrs	r3, r3, #26
 8003a1a:	221f      	movs	r2, #31
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	e098      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2201      	movs	r2, #1
 8003a26:	4013      	ands	r3, r2
 8003a28:	d000      	beq.n	8003a2c <HAL_ADC_ConfigChannel+0xa8>
 8003a2a:	e091      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x1cc>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2202      	movs	r2, #2
 8003a32:	4013      	ands	r3, r2
 8003a34:	d000      	beq.n	8003a38 <HAL_ADC_ConfigChannel+0xb4>
 8003a36:	e089      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x1c8>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d000      	beq.n	8003a44 <HAL_ADC_ConfigChannel+0xc0>
 8003a42:	e081      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x1c4>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2208      	movs	r2, #8
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d000      	beq.n	8003a50 <HAL_ADC_ConfigChannel+0xcc>
 8003a4e:	e079      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x1c0>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2210      	movs	r2, #16
 8003a56:	4013      	ands	r3, r2
 8003a58:	d000      	beq.n	8003a5c <HAL_ADC_ConfigChannel+0xd8>
 8003a5a:	e071      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x1bc>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2220      	movs	r2, #32
 8003a62:	4013      	ands	r3, r2
 8003a64:	d000      	beq.n	8003a68 <HAL_ADC_ConfigChannel+0xe4>
 8003a66:	e069      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x1b8>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d000      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0xf0>
 8003a72:	e061      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x1b4>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d000      	beq.n	8003a80 <HAL_ADC_ConfigChannel+0xfc>
 8003a7e:	e059      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x1b0>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d151      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x1ac>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4013      	ands	r3, r2
 8003a96:	d149      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x1a8>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d141      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1a4>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	4013      	ands	r3, r2
 8003aae:	d139      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x1a0>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	015b      	lsls	r3, r3, #5
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d131      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x19c>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	019b      	lsls	r3, r3, #6
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d129      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x198>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	01db      	lsls	r3, r3, #7
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d121      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x194>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	4013      	ands	r3, r2
 8003ade:	d119      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x190>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	025b      	lsls	r3, r3, #9
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d111      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x18c>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	4013      	ands	r3, r2
 8003af6:	d109      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x188>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	02db      	lsls	r3, r3, #11
 8003b00:	4013      	ands	r3, r2
 8003b02:	d001      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x184>
 8003b04:	2312      	movs	r3, #18
 8003b06:	e024      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e022      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b0c:	2311      	movs	r3, #17
 8003b0e:	e020      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b10:	2310      	movs	r3, #16
 8003b12:	e01e      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b14:	230f      	movs	r3, #15
 8003b16:	e01c      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b18:	230e      	movs	r3, #14
 8003b1a:	e01a      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b1c:	230d      	movs	r3, #13
 8003b1e:	e018      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b20:	230c      	movs	r3, #12
 8003b22:	e016      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b24:	230b      	movs	r3, #11
 8003b26:	e014      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b28:	230a      	movs	r3, #10
 8003b2a:	e012      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b2c:	2309      	movs	r3, #9
 8003b2e:	e010      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b30:	2308      	movs	r3, #8
 8003b32:	e00e      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b34:	2307      	movs	r3, #7
 8003b36:	e00c      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b38:	2306      	movs	r3, #6
 8003b3a:	e00a      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b3c:	2305      	movs	r3, #5
 8003b3e:	e008      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b40:	2304      	movs	r3, #4
 8003b42:	e006      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b44:	2303      	movs	r3, #3
 8003b46:	e004      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e002      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x1ce>
 8003b50:	2300      	movs	r3, #0
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	6852      	ldr	r2, [r2, #4]
 8003b56:	201f      	movs	r0, #31
 8003b58:	4002      	ands	r2, r0
 8003b5a:	4093      	lsls	r3, r2
 8003b5c:	000a      	movs	r2, r1
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d808      	bhi.n	8003b86 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	001a      	movs	r2, r3
 8003b82:	f7ff fcae 	bl	80034e2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6819      	ldr	r1, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	001a      	movs	r2, r3
 8003b94:	f7ff fce8 	bl	8003568 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	db00      	blt.n	8003ba2 <HAL_ADC_ConfigChannel+0x21e>
 8003ba0:	e0bc      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ba2:	4b50      	ldr	r3, [pc, #320]	; (8003ce4 <HAL_ADC_ConfigChannel+0x360>)
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7ff fc5b 	bl	8003460 <LL_ADC_GetCommonPathInternalCh>
 8003baa:	0003      	movs	r3, r0
 8003bac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a4d      	ldr	r2, [pc, #308]	; (8003ce8 <HAL_ADC_ConfigChannel+0x364>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d122      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bc0:	d11d      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	0412      	lsls	r2, r2, #16
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	4a46      	ldr	r2, [pc, #280]	; (8003ce4 <HAL_ADC_ConfigChannel+0x360>)
 8003bcc:	0019      	movs	r1, r3
 8003bce:	0010      	movs	r0, r2
 8003bd0:	f7ff fc32 	bl	8003438 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bd4:	4b45      	ldr	r3, [pc, #276]	; (8003cec <HAL_ADC_ConfigChannel+0x368>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4945      	ldr	r1, [pc, #276]	; (8003cf0 <HAL_ADC_ConfigChannel+0x36c>)
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7fc faae 	bl	800013c <__udivsi3>
 8003be0:	0003      	movs	r3, r0
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	0013      	movs	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bee:	e002      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f9      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bfc:	e08e      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a3c      	ldr	r2, [pc, #240]	; (8003cf4 <HAL_ADC_ConfigChannel+0x370>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d10e      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	045b      	lsls	r3, r3, #17
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d109      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	0452      	lsls	r2, r2, #17
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	4a32      	ldr	r2, [pc, #200]	; (8003ce4 <HAL_ADC_ConfigChannel+0x360>)
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	0010      	movs	r0, r2
 8003c20:	f7ff fc0a 	bl	8003438 <LL_ADC_SetCommonPathInternalCh>
 8003c24:	e07a      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a33      	ldr	r2, [pc, #204]	; (8003cf8 <HAL_ADC_ConfigChannel+0x374>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d000      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x2ae>
 8003c30:	e074      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	03db      	lsls	r3, r3, #15
 8003c38:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c3a:	d000      	beq.n	8003c3e <HAL_ADC_ConfigChannel+0x2ba>
 8003c3c:	e06e      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2280      	movs	r2, #128	; 0x80
 8003c42:	03d2      	lsls	r2, r2, #15
 8003c44:	4313      	orrs	r3, r2
 8003c46:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_ADC_ConfigChannel+0x360>)
 8003c48:	0019      	movs	r1, r3
 8003c4a:	0010      	movs	r0, r2
 8003c4c:	f7ff fbf4 	bl	8003438 <LL_ADC_SetCommonPathInternalCh>
 8003c50:	e064      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d004      	beq.n	8003c68 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c62:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_ADC_ConfigChannel+0x35c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d107      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0019      	movs	r1, r3
 8003c72:	0010      	movs	r0, r2
 8003c74:	f7ff fc66 	bl	8003544 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	da4d      	bge.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c80:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <HAL_ADC_ConfigChannel+0x360>)
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7ff fbec 	bl	8003460 <LL_ADC_GetCommonPathInternalCh>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <HAL_ADC_ConfigChannel+0x364>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d108      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_ADC_ConfigChannel+0x378>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	4a11      	ldr	r2, [pc, #68]	; (8003ce4 <HAL_ADC_ConfigChannel+0x360>)
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	0010      	movs	r0, r2
 8003ca2:	f7ff fbc9 	bl	8003438 <LL_ADC_SetCommonPathInternalCh>
 8003ca6:	e039      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <HAL_ADC_ConfigChannel+0x370>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d108      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4a12      	ldr	r2, [pc, #72]	; (8003d00 <HAL_ADC_ConfigChannel+0x37c>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <HAL_ADC_ConfigChannel+0x360>)
 8003cba:	0019      	movs	r1, r3
 8003cbc:	0010      	movs	r0, r2
 8003cbe:	f7ff fbbb 	bl	8003438 <LL_ADC_SetCommonPathInternalCh>
 8003cc2:	e02b      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <HAL_ADC_ConfigChannel+0x374>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d126      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4a0c      	ldr	r2, [pc, #48]	; (8003d04 <HAL_ADC_ConfigChannel+0x380>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	4a03      	ldr	r2, [pc, #12]	; (8003ce4 <HAL_ADC_ConfigChannel+0x360>)
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	0010      	movs	r0, r2
 8003cda:	f7ff fbad 	bl	8003438 <LL_ADC_SetCommonPathInternalCh>
 8003cde:	e01d      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x398>
 8003ce0:	80000004 	.word	0x80000004
 8003ce4:	40012708 	.word	0x40012708
 8003ce8:	b0001000 	.word	0xb0001000
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	00030d40 	.word	0x00030d40
 8003cf4:	b8004000 	.word	0xb8004000
 8003cf8:	b4002000 	.word	0xb4002000
 8003cfc:	ff7fffff 	.word	0xff7fffff
 8003d00:	feffffff 	.word	0xfeffffff
 8003d04:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d14:	2317      	movs	r3, #23
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2254      	movs	r2, #84	; 0x54
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003d24:	2317      	movs	r3, #23
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	781b      	ldrb	r3, [r3, #0]
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b006      	add	sp, #24
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)

08003d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	1dfb      	adds	r3, r7, #7
 8003d3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d40:	1dfb      	adds	r3, r7, #7
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b7f      	cmp	r3, #127	; 0x7f
 8003d46:	d809      	bhi.n	8003d5c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d48:	1dfb      	adds	r3, r7, #7
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	231f      	movs	r3, #31
 8003d50:	401a      	ands	r2, r3
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <__NVIC_EnableIRQ+0x30>)
 8003d54:	2101      	movs	r1, #1
 8003d56:	4091      	lsls	r1, r2
 8003d58:	000a      	movs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b002      	add	sp, #8
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	e000e100 	.word	0xe000e100

08003d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	0002      	movs	r2, r0
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	1dfb      	adds	r3, r7, #7
 8003d74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d76:	1dfb      	adds	r3, r7, #7
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d7c:	d828      	bhi.n	8003dd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d7e:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <__NVIC_SetPriority+0xd4>)
 8003d80:	1dfb      	adds	r3, r7, #7
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	33c0      	adds	r3, #192	; 0xc0
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	589b      	ldr	r3, [r3, r2]
 8003d8e:	1dfa      	adds	r2, r7, #7
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	0011      	movs	r1, r2
 8003d94:	2203      	movs	r2, #3
 8003d96:	400a      	ands	r2, r1
 8003d98:	00d2      	lsls	r2, r2, #3
 8003d9a:	21ff      	movs	r1, #255	; 0xff
 8003d9c:	4091      	lsls	r1, r2
 8003d9e:	000a      	movs	r2, r1
 8003da0:	43d2      	mvns	r2, r2
 8003da2:	401a      	ands	r2, r3
 8003da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	019b      	lsls	r3, r3, #6
 8003daa:	22ff      	movs	r2, #255	; 0xff
 8003dac:	401a      	ands	r2, r3
 8003dae:	1dfb      	adds	r3, r7, #7
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	0018      	movs	r0, r3
 8003db4:	2303      	movs	r3, #3
 8003db6:	4003      	ands	r3, r0
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dbc:	481f      	ldr	r0, [pc, #124]	; (8003e3c <__NVIC_SetPriority+0xd4>)
 8003dbe:	1dfb      	adds	r3, r7, #7
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b25b      	sxtb	r3, r3
 8003dc4:	089b      	lsrs	r3, r3, #2
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	33c0      	adds	r3, #192	; 0xc0
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003dce:	e031      	b.n	8003e34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dd0:	4a1b      	ldr	r2, [pc, #108]	; (8003e40 <__NVIC_SetPriority+0xd8>)
 8003dd2:	1dfb      	adds	r3, r7, #7
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	230f      	movs	r3, #15
 8003dda:	400b      	ands	r3, r1
 8003ddc:	3b08      	subs	r3, #8
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3306      	adds	r3, #6
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	18d3      	adds	r3, r2, r3
 8003de6:	3304      	adds	r3, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	1dfa      	adds	r2, r7, #7
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	0011      	movs	r1, r2
 8003df0:	2203      	movs	r2, #3
 8003df2:	400a      	ands	r2, r1
 8003df4:	00d2      	lsls	r2, r2, #3
 8003df6:	21ff      	movs	r1, #255	; 0xff
 8003df8:	4091      	lsls	r1, r2
 8003dfa:	000a      	movs	r2, r1
 8003dfc:	43d2      	mvns	r2, r2
 8003dfe:	401a      	ands	r2, r3
 8003e00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	019b      	lsls	r3, r3, #6
 8003e06:	22ff      	movs	r2, #255	; 0xff
 8003e08:	401a      	ands	r2, r3
 8003e0a:	1dfb      	adds	r3, r7, #7
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	0018      	movs	r0, r3
 8003e10:	2303      	movs	r3, #3
 8003e12:	4003      	ands	r3, r0
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e18:	4809      	ldr	r0, [pc, #36]	; (8003e40 <__NVIC_SetPriority+0xd8>)
 8003e1a:	1dfb      	adds	r3, r7, #7
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	001c      	movs	r4, r3
 8003e20:	230f      	movs	r3, #15
 8003e22:	4023      	ands	r3, r4
 8003e24:	3b08      	subs	r3, #8
 8003e26:	089b      	lsrs	r3, r3, #2
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	3306      	adds	r3, #6
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	18c3      	adds	r3, r0, r3
 8003e30:	3304      	adds	r3, #4
 8003e32:	601a      	str	r2, [r3, #0]
}
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b003      	add	sp, #12
 8003e3a:	bd90      	pop	{r4, r7, pc}
 8003e3c:	e000e100 	.word	0xe000e100
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	045b      	lsls	r3, r3, #17
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d301      	bcc.n	8003e5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e010      	b.n	8003e7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <SysTick_Config+0x44>)
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	3a01      	subs	r2, #1
 8003e62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e64:	2301      	movs	r3, #1
 8003e66:	425b      	negs	r3, r3
 8003e68:	2103      	movs	r1, #3
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7ff ff7c 	bl	8003d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <SysTick_Config+0x44>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e76:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <SysTick_Config+0x44>)
 8003e78:	2207      	movs	r2, #7
 8003e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b002      	add	sp, #8
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	e000e010 	.word	0xe000e010

08003e8c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	210f      	movs	r1, #15
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	1c02      	adds	r2, r0, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	0011      	movs	r1, r2
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7ff ff5d 	bl	8003d68 <__NVIC_SetPriority>
}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	1dfb      	adds	r3, r7, #7
 8003ec0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec2:	1dfb      	adds	r3, r7, #7
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	b25b      	sxtb	r3, r3
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7ff ff33 	bl	8003d34 <__NVIC_EnableIRQ>
}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b002      	add	sp, #8
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7ff ffaf 	bl	8003e44 <SysTick_Config>
 8003ee6:	0003      	movs	r3, r0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b002      	add	sp, #8
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e077      	b.n	8003ff2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a3d      	ldr	r2, [pc, #244]	; (8003ffc <HAL_DMA_Init+0x10c>)
 8003f08:	4694      	mov	ip, r2
 8003f0a:	4463      	add	r3, ip
 8003f0c:	2114      	movs	r1, #20
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7fc f914 	bl	800013c <__udivsi3>
 8003f14:	0003      	movs	r3, r0
 8003f16:	009a      	lsls	r2, r3, #2
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2225      	movs	r2, #37	; 0x25
 8003f20:	2102      	movs	r1, #2
 8003f22:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4934      	ldr	r1, [pc, #208]	; (8004000 <HAL_DMA_Init+0x110>)
 8003f30:	400a      	ands	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f000 f9c7 	bl	8004300 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	01db      	lsls	r3, r3, #7
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d102      	bne.n	8003f84 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	213f      	movs	r1, #63	; 0x3f
 8003f8e:	400a      	ands	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f9a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d011      	beq.n	8003fc8 <HAL_DMA_Init+0xd8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d80d      	bhi.n	8003fc8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f000 f9d2 	bl	8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	e008      	b.n	8003fda <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2225      	movs	r2, #37	; 0x25
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	2100      	movs	r1, #0
 8003fee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b002      	add	sp, #8
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	bffdfff8 	.word	0xbffdfff8
 8004000:	ffff800f 	.word	0xffff800f

08004004 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e050      	b.n	80040b8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2225      	movs	r2, #37	; 0x25
 800401a:	5c9b      	ldrb	r3, [r3, r2]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d008      	beq.n	8004034 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2204      	movs	r2, #4
 8004026:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	; 0x24
 800402c:	2100      	movs	r1, #0
 800402e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e041      	b.n	80040b8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	210e      	movs	r1, #14
 8004040:	438a      	bics	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	491c      	ldr	r1, [pc, #112]	; (80040c0 <HAL_DMA_Abort+0xbc>)
 8004050:	400a      	ands	r2, r1
 8004052:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2101      	movs	r1, #1
 8004060:	438a      	bics	r2, r1
 8004062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004064:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <HAL_DMA_Abort+0xc0>)
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	221c      	movs	r2, #28
 800406e:	4013      	ands	r3, r2
 8004070:	2201      	movs	r2, #1
 8004072:	409a      	lsls	r2, r3
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <HAL_DMA_Abort+0xc0>)
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004082:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00c      	beq.n	80040a6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004096:	490a      	ldr	r1, [pc, #40]	; (80040c0 <HAL_DMA_Abort+0xbc>)
 8004098:	400a      	ands	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80040a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2225      	movs	r2, #37	; 0x25
 80040aa:	2101      	movs	r1, #1
 80040ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2224      	movs	r2, #36	; 0x24
 80040b2:	2100      	movs	r1, #0
 80040b4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	fffffeff 	.word	0xfffffeff
 80040c4:	40020000 	.word	0x40020000

080040c8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	210f      	movs	r1, #15
 80040d2:	187b      	adds	r3, r7, r1
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2225      	movs	r2, #37	; 0x25
 80040dc:	5c9b      	ldrb	r3, [r3, r2]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d006      	beq.n	80040f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2204      	movs	r2, #4
 80040e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e049      	b.n	8004186 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	210e      	movs	r1, #14
 80040fe:	438a      	bics	r2, r1
 8004100:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2101      	movs	r1, #1
 800410e:	438a      	bics	r2, r1
 8004110:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411c:	491d      	ldr	r1, [pc, #116]	; (8004194 <HAL_DMA_Abort_IT+0xcc>)
 800411e:	400a      	ands	r2, r1
 8004120:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_DMA_Abort_IT+0xd0>)
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	221c      	movs	r2, #28
 800412c:	4013      	ands	r3, r2
 800412e:	2201      	movs	r2, #1
 8004130:	409a      	lsls	r2, r3
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_DMA_Abort_IT+0xd0>)
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004140:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00c      	beq.n	8004164 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	490f      	ldr	r1, [pc, #60]	; (8004194 <HAL_DMA_Abort_IT+0xcc>)
 8004156:	400a      	ands	r2, r1
 8004158:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004162:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2225      	movs	r2, #37	; 0x25
 8004168:	2101      	movs	r1, #1
 800416a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2224      	movs	r2, #36	; 0x24
 8004170:	2100      	movs	r1, #0
 8004172:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	0010      	movs	r0, r2
 8004184:	4798      	blx	r3
    }
  }
  return status;
 8004186:	230f      	movs	r3, #15
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	781b      	ldrb	r3, [r3, #0]
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b004      	add	sp, #16
 8004192:	bd80      	pop	{r7, pc}
 8004194:	fffffeff 	.word	0xfffffeff
 8004198:	40020000 	.word	0x40020000

0800419c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80041a4:	4b55      	ldr	r3, [pc, #340]	; (80042fc <HAL_DMA_IRQHandler+0x160>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	221c      	movs	r2, #28
 80041b8:	4013      	ands	r3, r2
 80041ba:	2204      	movs	r2, #4
 80041bc:	409a      	lsls	r2, r3
 80041be:	0013      	movs	r3, r2
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4013      	ands	r3, r2
 80041c4:	d027      	beq.n	8004216 <HAL_DMA_IRQHandler+0x7a>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2204      	movs	r2, #4
 80041ca:	4013      	ands	r3, r2
 80041cc:	d023      	beq.n	8004216 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2220      	movs	r2, #32
 80041d6:	4013      	ands	r3, r2
 80041d8:	d107      	bne.n	80041ea <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2104      	movs	r1, #4
 80041e6:	438a      	bics	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80041ea:	4b44      	ldr	r3, [pc, #272]	; (80042fc <HAL_DMA_IRQHandler+0x160>)
 80041ec:	6859      	ldr	r1, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	221c      	movs	r2, #28
 80041f4:	4013      	ands	r3, r2
 80041f6:	2204      	movs	r2, #4
 80041f8:	409a      	lsls	r2, r3
 80041fa:	4b40      	ldr	r3, [pc, #256]	; (80042fc <HAL_DMA_IRQHandler+0x160>)
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	2b00      	cmp	r3, #0
 8004206:	d100      	bne.n	800420a <HAL_DMA_IRQHandler+0x6e>
 8004208:	e073      	b.n	80042f2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	0010      	movs	r0, r2
 8004212:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004214:	e06d      	b.n	80042f2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	221c      	movs	r2, #28
 800421c:	4013      	ands	r3, r2
 800421e:	2202      	movs	r2, #2
 8004220:	409a      	lsls	r2, r3
 8004222:	0013      	movs	r3, r2
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4013      	ands	r3, r2
 8004228:	d02e      	beq.n	8004288 <HAL_DMA_IRQHandler+0xec>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2202      	movs	r2, #2
 800422e:	4013      	ands	r3, r2
 8004230:	d02a      	beq.n	8004288 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2220      	movs	r2, #32
 800423a:	4013      	ands	r3, r2
 800423c:	d10b      	bne.n	8004256 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	210a      	movs	r1, #10
 800424a:	438a      	bics	r2, r1
 800424c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2225      	movs	r2, #37	; 0x25
 8004252:	2101      	movs	r1, #1
 8004254:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004256:	4b29      	ldr	r3, [pc, #164]	; (80042fc <HAL_DMA_IRQHandler+0x160>)
 8004258:	6859      	ldr	r1, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	221c      	movs	r2, #28
 8004260:	4013      	ands	r3, r2
 8004262:	2202      	movs	r2, #2
 8004264:	409a      	lsls	r2, r3
 8004266:	4b25      	ldr	r3, [pc, #148]	; (80042fc <HAL_DMA_IRQHandler+0x160>)
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	; 0x24
 8004270:	2100      	movs	r1, #0
 8004272:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d03a      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	0010      	movs	r0, r2
 8004284:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004286:	e034      	b.n	80042f2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	221c      	movs	r2, #28
 800428e:	4013      	ands	r3, r2
 8004290:	2208      	movs	r2, #8
 8004292:	409a      	lsls	r2, r3
 8004294:	0013      	movs	r3, r2
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4013      	ands	r3, r2
 800429a:	d02b      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x158>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2208      	movs	r2, #8
 80042a0:	4013      	ands	r3, r2
 80042a2:	d027      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	210e      	movs	r1, #14
 80042b0:	438a      	bics	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_DMA_IRQHandler+0x160>)
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	221c      	movs	r2, #28
 80042be:	4013      	ands	r3, r2
 80042c0:	2201      	movs	r2, #1
 80042c2:	409a      	lsls	r2, r3
 80042c4:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <HAL_DMA_IRQHandler+0x160>)
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2225      	movs	r2, #37	; 0x25
 80042d4:	2101      	movs	r1, #1
 80042d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2224      	movs	r2, #36	; 0x24
 80042dc:	2100      	movs	r1, #0
 80042de:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	0010      	movs	r0, r2
 80042f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	46c0      	nop			; (mov r8, r8)
}
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b004      	add	sp, #16
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40020000 	.word	0x40020000

08004300 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	089b      	lsrs	r3, r3, #2
 800430e:	4a10      	ldr	r2, [pc, #64]	; (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004310:	4694      	mov	ip, r2
 8004312:	4463      	add	r3, ip
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	001a      	movs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	001a      	movs	r2, r3
 8004322:	23ff      	movs	r3, #255	; 0xff
 8004324:	4013      	ands	r3, r2
 8004326:	3b08      	subs	r3, #8
 8004328:	2114      	movs	r1, #20
 800432a:	0018      	movs	r0, r3
 800432c:	f7fb ff06 	bl	800013c <__udivsi3>
 8004330:	0003      	movs	r3, r0
 8004332:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a07      	ldr	r2, [pc, #28]	; (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004338:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	221f      	movs	r2, #31
 800433e:	4013      	ands	r3, r2
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b004      	add	sp, #16
 800434e:	bd80      	pop	{r7, pc}
 8004350:	10008200 	.word	0x10008200
 8004354:	40020880 	.word	0x40020880

08004358 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	223f      	movs	r2, #63	; 0x3f
 8004366:	4013      	ands	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800436e:	4694      	mov	ip, r2
 8004370:	4463      	add	r3, ip
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	001a      	movs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a07      	ldr	r2, [pc, #28]	; (800439c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800437e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3b01      	subs	r3, #1
 8004384:	2203      	movs	r2, #3
 8004386:	4013      	ands	r3, r2
 8004388:	2201      	movs	r2, #1
 800438a:	409a      	lsls	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b004      	add	sp, #16
 8004396:	bd80      	pop	{r7, pc}
 8004398:	1000823f 	.word	0x1000823f
 800439c:	40020940 	.word	0x40020940

080043a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ae:	e147      	b.n	8004640 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2101      	movs	r1, #1
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4091      	lsls	r1, r2
 80043ba:	000a      	movs	r2, r1
 80043bc:	4013      	ands	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d100      	bne.n	80043c8 <HAL_GPIO_Init+0x28>
 80043c6:	e138      	b.n	800463a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2203      	movs	r2, #3
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d005      	beq.n	80043e0 <HAL_GPIO_Init+0x40>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2203      	movs	r2, #3
 80043da:	4013      	ands	r3, r2
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d130      	bne.n	8004442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2203      	movs	r2, #3
 80043ec:	409a      	lsls	r2, r3
 80043ee:	0013      	movs	r3, r2
 80043f0:	43da      	mvns	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	4013      	ands	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	409a      	lsls	r2, r3
 8004402:	0013      	movs	r3, r2
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004416:	2201      	movs	r2, #1
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	409a      	lsls	r2, r3
 800441c:	0013      	movs	r3, r2
 800441e:	43da      	mvns	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	091b      	lsrs	r3, r3, #4
 800442c:	2201      	movs	r2, #1
 800442e:	401a      	ands	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	409a      	lsls	r2, r3
 8004434:	0013      	movs	r3, r2
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2203      	movs	r2, #3
 8004448:	4013      	ands	r3, r2
 800444a:	2b03      	cmp	r3, #3
 800444c:	d017      	beq.n	800447e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	2203      	movs	r2, #3
 800445a:	409a      	lsls	r2, r3
 800445c:	0013      	movs	r3, r2
 800445e:	43da      	mvns	r2, r3
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4013      	ands	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	409a      	lsls	r2, r3
 8004470:	0013      	movs	r3, r2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2203      	movs	r2, #3
 8004484:	4013      	ands	r3, r2
 8004486:	2b02      	cmp	r3, #2
 8004488:	d123      	bne.n	80044d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	08da      	lsrs	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3208      	adds	r2, #8
 8004492:	0092      	lsls	r2, r2, #2
 8004494:	58d3      	ldr	r3, [r2, r3]
 8004496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2207      	movs	r2, #7
 800449c:	4013      	ands	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	220f      	movs	r2, #15
 80044a2:	409a      	lsls	r2, r3
 80044a4:	0013      	movs	r3, r2
 80044a6:	43da      	mvns	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2107      	movs	r1, #7
 80044b6:	400b      	ands	r3, r1
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	409a      	lsls	r2, r3
 80044bc:	0013      	movs	r3, r2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	08da      	lsrs	r2, r3, #3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3208      	adds	r2, #8
 80044cc:	0092      	lsls	r2, r2, #2
 80044ce:	6939      	ldr	r1, [r7, #16]
 80044d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	2203      	movs	r2, #3
 80044de:	409a      	lsls	r2, r3
 80044e0:	0013      	movs	r3, r2
 80044e2:	43da      	mvns	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4013      	ands	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2203      	movs	r2, #3
 80044f0:	401a      	ands	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	409a      	lsls	r2, r3
 80044f8:	0013      	movs	r3, r2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	23c0      	movs	r3, #192	; 0xc0
 800450c:	029b      	lsls	r3, r3, #10
 800450e:	4013      	ands	r3, r2
 8004510:	d100      	bne.n	8004514 <HAL_GPIO_Init+0x174>
 8004512:	e092      	b.n	800463a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004514:	4a50      	ldr	r2, [pc, #320]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	3318      	adds	r3, #24
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	589b      	ldr	r3, [r3, r2]
 8004520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2203      	movs	r2, #3
 8004526:	4013      	ands	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	220f      	movs	r2, #15
 800452c:	409a      	lsls	r2, r3
 800452e:	0013      	movs	r3, r2
 8004530:	43da      	mvns	r2, r3
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	23a0      	movs	r3, #160	; 0xa0
 800453c:	05db      	lsls	r3, r3, #23
 800453e:	429a      	cmp	r2, r3
 8004540:	d013      	beq.n	800456a <HAL_GPIO_Init+0x1ca>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a45      	ldr	r2, [pc, #276]	; (800465c <HAL_GPIO_Init+0x2bc>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00d      	beq.n	8004566 <HAL_GPIO_Init+0x1c6>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a44      	ldr	r2, [pc, #272]	; (8004660 <HAL_GPIO_Init+0x2c0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <HAL_GPIO_Init+0x1c2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a43      	ldr	r2, [pc, #268]	; (8004664 <HAL_GPIO_Init+0x2c4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d101      	bne.n	800455e <HAL_GPIO_Init+0x1be>
 800455a:	2303      	movs	r3, #3
 800455c:	e006      	b.n	800456c <HAL_GPIO_Init+0x1cc>
 800455e:	2305      	movs	r3, #5
 8004560:	e004      	b.n	800456c <HAL_GPIO_Init+0x1cc>
 8004562:	2302      	movs	r3, #2
 8004564:	e002      	b.n	800456c <HAL_GPIO_Init+0x1cc>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_GPIO_Init+0x1cc>
 800456a:	2300      	movs	r3, #0
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	2103      	movs	r1, #3
 8004570:	400a      	ands	r2, r1
 8004572:	00d2      	lsls	r2, r2, #3
 8004574:	4093      	lsls	r3, r2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800457c:	4936      	ldr	r1, [pc, #216]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	3318      	adds	r3, #24
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800458a:	4b33      	ldr	r3, [pc, #204]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43da      	mvns	r2, r3
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4013      	ands	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	035b      	lsls	r3, r3, #13
 80045a2:	4013      	ands	r3, r2
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045ae:	4b2a      	ldr	r3, [pc, #168]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80045b4:	4b28      	ldr	r3, [pc, #160]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	43da      	mvns	r2, r3
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4013      	ands	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	039b      	lsls	r3, r3, #14
 80045cc:	4013      	ands	r3, r2
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045d8:	4b1f      	ldr	r3, [pc, #124]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045de:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 80045e0:	2384      	movs	r3, #132	; 0x84
 80045e2:	58d3      	ldr	r3, [r2, r3]
 80045e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	43da      	mvns	r2, r3
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4013      	ands	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	029b      	lsls	r3, r3, #10
 80045f8:	4013      	ands	r3, r2
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004604:	4914      	ldr	r1, [pc, #80]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 8004606:	2284      	movs	r2, #132	; 0x84
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800460c:	4a12      	ldr	r2, [pc, #72]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	58d3      	ldr	r3, [r2, r3]
 8004612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	43da      	mvns	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4013      	ands	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	025b      	lsls	r3, r3, #9
 8004626:	4013      	ands	r3, r2
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004632:	4909      	ldr	r1, [pc, #36]	; (8004658 <HAL_GPIO_Init+0x2b8>)
 8004634:	2280      	movs	r2, #128	; 0x80
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	3301      	adds	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	40da      	lsrs	r2, r3
 8004648:	1e13      	subs	r3, r2, #0
 800464a:	d000      	beq.n	800464e <HAL_GPIO_Init+0x2ae>
 800464c:	e6b0      	b.n	80043b0 <HAL_GPIO_Init+0x10>
  }
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b006      	add	sp, #24
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021800 	.word	0x40021800
 800465c:	50000400 	.word	0x50000400
 8004660:	50000800 	.word	0x50000800
 8004664:	50000c00 	.word	0x50000c00

08004668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	0008      	movs	r0, r1
 8004672:	0011      	movs	r1, r2
 8004674:	1cbb      	adds	r3, r7, #2
 8004676:	1c02      	adds	r2, r0, #0
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	1c7b      	adds	r3, r7, #1
 800467c:	1c0a      	adds	r2, r1, #0
 800467e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004680:	1c7b      	adds	r3, r7, #1
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004688:	1cbb      	adds	r3, r7, #2
 800468a:	881a      	ldrh	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004690:	e003      	b.n	800469a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004692:	1cbb      	adds	r3, r7, #2
 8004694:	881a      	ldrh	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	629a      	str	r2, [r3, #40]	; 0x28
}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	0019      	movs	r1, r3
 80046b6:	4b17      	ldr	r3, [pc, #92]	; (8004714 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d11f      	bne.n	8004708 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	0013      	movs	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4912      	ldr	r1, [pc, #72]	; (8004720 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7fb fd30 	bl	800013c <__udivsi3>
 80046dc:	0003      	movs	r3, r0
 80046de:	3301      	adds	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046e2:	e008      	b.n	80046f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e001      	b.n	80046f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e009      	b.n	800470a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046f6:	4b07      	ldr	r3, [pc, #28]	; (8004714 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	2380      	movs	r3, #128	; 0x80
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	401a      	ands	r2, r3
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	429a      	cmp	r2, r3
 8004706:	d0ed      	beq.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b004      	add	sp, #16
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	40007000 	.word	0x40007000
 8004718:	fffff9ff 	.word	0xfffff9ff
 800471c:	20000000 	.word	0x20000000
 8004720:	000f4240 	.word	0x000f4240

08004724 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <LL_RCC_GetAPB1Prescaler+0x14>)
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	23e0      	movs	r3, #224	; 0xe0
 800472e:	01db      	lsls	r3, r3, #7
 8004730:	4013      	ands	r3, r2
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000

0800473c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e2fe      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	4013      	ands	r3, r2
 8004756:	d100      	bne.n	800475a <HAL_RCC_OscConfig+0x1e>
 8004758:	e07c      	b.n	8004854 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800475a:	4bc3      	ldr	r3, [pc, #780]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2238      	movs	r2, #56	; 0x38
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004764:	4bc0      	ldr	r3, [pc, #768]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2203      	movs	r2, #3
 800476a:	4013      	ands	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b10      	cmp	r3, #16
 8004772:	d102      	bne.n	800477a <HAL_RCC_OscConfig+0x3e>
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d002      	beq.n	8004780 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d10b      	bne.n	8004798 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004780:	4bb9      	ldr	r3, [pc, #740]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	029b      	lsls	r3, r3, #10
 8004788:	4013      	ands	r3, r2
 800478a:	d062      	beq.n	8004852 <HAL_RCC_OscConfig+0x116>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d15e      	bne.n	8004852 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e2d9      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	025b      	lsls	r3, r3, #9
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_OscConfig+0x78>
 80047a4:	4bb0      	ldr	r3, [pc, #704]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4baf      	ldr	r3, [pc, #700]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047aa:	2180      	movs	r1, #128	; 0x80
 80047ac:	0249      	lsls	r1, r1, #9
 80047ae:	430a      	orrs	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e020      	b.n	80047f6 <HAL_RCC_OscConfig+0xba>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	23a0      	movs	r3, #160	; 0xa0
 80047ba:	02db      	lsls	r3, r3, #11
 80047bc:	429a      	cmp	r2, r3
 80047be:	d10e      	bne.n	80047de <HAL_RCC_OscConfig+0xa2>
 80047c0:	4ba9      	ldr	r3, [pc, #676]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4ba8      	ldr	r3, [pc, #672]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047c6:	2180      	movs	r1, #128	; 0x80
 80047c8:	02c9      	lsls	r1, r1, #11
 80047ca:	430a      	orrs	r2, r1
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	4ba6      	ldr	r3, [pc, #664]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4ba5      	ldr	r3, [pc, #660]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047d4:	2180      	movs	r1, #128	; 0x80
 80047d6:	0249      	lsls	r1, r1, #9
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e00b      	b.n	80047f6 <HAL_RCC_OscConfig+0xba>
 80047de:	4ba2      	ldr	r3, [pc, #648]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4ba1      	ldr	r3, [pc, #644]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047e4:	49a1      	ldr	r1, [pc, #644]	; (8004a6c <HAL_RCC_OscConfig+0x330>)
 80047e6:	400a      	ands	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	4b9f      	ldr	r3, [pc, #636]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b9e      	ldr	r3, [pc, #632]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047f0:	499f      	ldr	r1, [pc, #636]	; (8004a70 <HAL_RCC_OscConfig+0x334>)
 80047f2:	400a      	ands	r2, r1
 80047f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d014      	beq.n	8004828 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fe fe11 	bl	8003424 <HAL_GetTick>
 8004802:	0003      	movs	r3, r0
 8004804:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004808:	f7fe fe0c 	bl	8003424 <HAL_GetTick>
 800480c:	0002      	movs	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e298      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800481a:	4b93      	ldr	r3, [pc, #588]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	029b      	lsls	r3, r3, #10
 8004822:	4013      	ands	r3, r2
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0xcc>
 8004826:	e015      	b.n	8004854 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fe fdfc 	bl	8003424 <HAL_GetTick>
 800482c:	0003      	movs	r3, r0
 800482e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004832:	f7fe fdf7 	bl	8003424 <HAL_GetTick>
 8004836:	0002      	movs	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b64      	cmp	r3, #100	; 0x64
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e283      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004844:	4b88      	ldr	r3, [pc, #544]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	4013      	ands	r3, r2
 800484e:	d1f0      	bne.n	8004832 <HAL_RCC_OscConfig+0xf6>
 8004850:	e000      	b.n	8004854 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004852:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2202      	movs	r2, #2
 800485a:	4013      	ands	r3, r2
 800485c:	d100      	bne.n	8004860 <HAL_RCC_OscConfig+0x124>
 800485e:	e099      	b.n	8004994 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004860:	4b81      	ldr	r3, [pc, #516]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2238      	movs	r2, #56	; 0x38
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800486a:	4b7f      	ldr	r3, [pc, #508]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2203      	movs	r2, #3
 8004870:	4013      	ands	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b10      	cmp	r3, #16
 8004878:	d102      	bne.n	8004880 <HAL_RCC_OscConfig+0x144>
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d002      	beq.n	8004886 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d135      	bne.n	80048f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004886:	4b78      	ldr	r3, [pc, #480]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	4013      	ands	r3, r2
 8004890:	d005      	beq.n	800489e <HAL_RCC_OscConfig+0x162>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e256      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489e:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4a74      	ldr	r2, [pc, #464]	; (8004a74 <HAL_RCC_OscConfig+0x338>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	0019      	movs	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	021a      	lsls	r2, r3, #8
 80048ae:	4b6e      	ldr	r3, [pc, #440]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048b0:	430a      	orrs	r2, r1
 80048b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d112      	bne.n	80048e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80048ba:	4b6b      	ldr	r3, [pc, #428]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a6e      	ldr	r2, [pc, #440]	; (8004a78 <HAL_RCC_OscConfig+0x33c>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	0019      	movs	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	4b67      	ldr	r3, [pc, #412]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048ca:	430a      	orrs	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80048ce:	4b66      	ldr	r3, [pc, #408]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	0adb      	lsrs	r3, r3, #11
 80048d4:	2207      	movs	r2, #7
 80048d6:	4013      	ands	r3, r2
 80048d8:	4a68      	ldr	r2, [pc, #416]	; (8004a7c <HAL_RCC_OscConfig+0x340>)
 80048da:	40da      	lsrs	r2, r3
 80048dc:	4b68      	ldr	r3, [pc, #416]	; (8004a80 <HAL_RCC_OscConfig+0x344>)
 80048de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048e0:	4b68      	ldr	r3, [pc, #416]	; (8004a84 <HAL_RCC_OscConfig+0x348>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7fe fd41 	bl	800336c <HAL_InitTick>
 80048ea:	1e03      	subs	r3, r0, #0
 80048ec:	d051      	beq.n	8004992 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e22c      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d030      	beq.n	800495c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80048fa:	4b5b      	ldr	r3, [pc, #364]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a5e      	ldr	r2, [pc, #376]	; (8004a78 <HAL_RCC_OscConfig+0x33c>)
 8004900:	4013      	ands	r3, r2
 8004902:	0019      	movs	r1, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	4b57      	ldr	r3, [pc, #348]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800490a:	430a      	orrs	r2, r1
 800490c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800490e:	4b56      	ldr	r3, [pc, #344]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b55      	ldr	r3, [pc, #340]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004914:	2180      	movs	r1, #128	; 0x80
 8004916:	0049      	lsls	r1, r1, #1
 8004918:	430a      	orrs	r2, r1
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fe fd82 	bl	8003424 <HAL_GetTick>
 8004920:	0003      	movs	r3, r0
 8004922:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004926:	f7fe fd7d 	bl	8003424 <HAL_GetTick>
 800492a:	0002      	movs	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e209      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004938:	4b4b      	ldr	r3, [pc, #300]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4013      	ands	r3, r2
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004944:	4b48      	ldr	r3, [pc, #288]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a4a      	ldr	r2, [pc, #296]	; (8004a74 <HAL_RCC_OscConfig+0x338>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	021a      	lsls	r2, r3, #8
 8004954:	4b44      	ldr	r3, [pc, #272]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	e01b      	b.n	8004994 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800495c:	4b42      	ldr	r3, [pc, #264]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4b41      	ldr	r3, [pc, #260]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004962:	4949      	ldr	r1, [pc, #292]	; (8004a88 <HAL_RCC_OscConfig+0x34c>)
 8004964:	400a      	ands	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fe fd5c 	bl	8003424 <HAL_GetTick>
 800496c:	0003      	movs	r3, r0
 800496e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004972:	f7fe fd57 	bl	8003424 <HAL_GetTick>
 8004976:	0002      	movs	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e1e3      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004984:	4b38      	ldr	r3, [pc, #224]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	4013      	ands	r3, r2
 800498e:	d1f0      	bne.n	8004972 <HAL_RCC_OscConfig+0x236>
 8004990:	e000      	b.n	8004994 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004992:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2208      	movs	r2, #8
 800499a:	4013      	ands	r3, r2
 800499c:	d047      	beq.n	8004a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800499e:	4b32      	ldr	r3, [pc, #200]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2238      	movs	r2, #56	; 0x38
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b18      	cmp	r3, #24
 80049a8:	d10a      	bne.n	80049c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80049aa:	4b2f      	ldr	r3, [pc, #188]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ae:	2202      	movs	r2, #2
 80049b0:	4013      	ands	r3, r2
 80049b2:	d03c      	beq.n	8004a2e <HAL_RCC_OscConfig+0x2f2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d138      	bne.n	8004a2e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e1c5      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d019      	beq.n	80049fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80049c8:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049cc:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049ce:	2101      	movs	r1, #1
 80049d0:	430a      	orrs	r2, r1
 80049d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fe fd26 	bl	8003424 <HAL_GetTick>
 80049d8:	0003      	movs	r3, r0
 80049da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049de:	f7fe fd21 	bl	8003424 <HAL_GetTick>
 80049e2:	0002      	movs	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e1ad      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f4:	2202      	movs	r2, #2
 80049f6:	4013      	ands	r3, r2
 80049f8:	d0f1      	beq.n	80049de <HAL_RCC_OscConfig+0x2a2>
 80049fa:	e018      	b.n	8004a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80049fc:	4b1a      	ldr	r3, [pc, #104]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004a02:	2101      	movs	r1, #1
 8004a04:	438a      	bics	r2, r1
 8004a06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fe fd0c 	bl	8003424 <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a12:	f7fe fd07 	bl	8003424 <HAL_GetTick>
 8004a16:	0002      	movs	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e193      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a24:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a28:	2202      	movs	r2, #2
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d1f1      	bne.n	8004a12 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2204      	movs	r2, #4
 8004a34:	4013      	ands	r3, r2
 8004a36:	d100      	bne.n	8004a3a <HAL_RCC_OscConfig+0x2fe>
 8004a38:	e0c6      	b.n	8004bc8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3a:	231f      	movs	r3, #31
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	2200      	movs	r2, #0
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a42:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2238      	movs	r2, #56	; 0x38
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d11e      	bne.n	8004a8c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a52:	2202      	movs	r2, #2
 8004a54:	4013      	ands	r3, r2
 8004a56:	d100      	bne.n	8004a5a <HAL_RCC_OscConfig+0x31e>
 8004a58:	e0b6      	b.n	8004bc8 <HAL_RCC_OscConfig+0x48c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d000      	beq.n	8004a64 <HAL_RCC_OscConfig+0x328>
 8004a62:	e0b1      	b.n	8004bc8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e171      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	fffeffff 	.word	0xfffeffff
 8004a70:	fffbffff 	.word	0xfffbffff
 8004a74:	ffff80ff 	.word	0xffff80ff
 8004a78:	ffffc7ff 	.word	0xffffc7ff
 8004a7c:	00f42400 	.word	0x00f42400
 8004a80:	20000000 	.word	0x20000000
 8004a84:	20000004 	.word	0x20000004
 8004a88:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a8c:	4bb1      	ldr	r3, [pc, #708]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	055b      	lsls	r3, r3, #21
 8004a94:	4013      	ands	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_OscConfig+0x360>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x362>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d011      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004aa2:	4bac      	ldr	r3, [pc, #688]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa6:	4bab      	ldr	r3, [pc, #684]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	0549      	lsls	r1, r1, #21
 8004aac:	430a      	orrs	r2, r1
 8004aae:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ab0:	4ba8      	ldr	r3, [pc, #672]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	055b      	lsls	r3, r3, #21
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004abe:	231f      	movs	r3, #31
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac6:	4ba4      	ldr	r3, [pc, #656]	; (8004d58 <HAL_RCC_OscConfig+0x61c>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d11a      	bne.n	8004b08 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ad2:	4ba1      	ldr	r3, [pc, #644]	; (8004d58 <HAL_RCC_OscConfig+0x61c>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4ba0      	ldr	r3, [pc, #640]	; (8004d58 <HAL_RCC_OscConfig+0x61c>)
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	0049      	lsls	r1, r1, #1
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004ae0:	f7fe fca0 	bl	8003424 <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aea:	f7fe fc9b 	bl	8003424 <HAL_GetTick>
 8004aee:	0002      	movs	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e127      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004afc:	4b96      	ldr	r3, [pc, #600]	; (8004d58 <HAL_RCC_OscConfig+0x61c>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	4013      	ands	r3, r2
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d106      	bne.n	8004b1e <HAL_RCC_OscConfig+0x3e2>
 8004b10:	4b90      	ldr	r3, [pc, #576]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b14:	4b8f      	ldr	r3, [pc, #572]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b16:	2101      	movs	r1, #1
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b1c:	e01c      	b.n	8004b58 <HAL_RCC_OscConfig+0x41c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCC_OscConfig+0x404>
 8004b26:	4b8b      	ldr	r3, [pc, #556]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b2a:	4b8a      	ldr	r3, [pc, #552]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b2c:	2104      	movs	r1, #4
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b32:	4b88      	ldr	r3, [pc, #544]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b36:	4b87      	ldr	r3, [pc, #540]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b38:	2101      	movs	r1, #1
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b3e:	e00b      	b.n	8004b58 <HAL_RCC_OscConfig+0x41c>
 8004b40:	4b84      	ldr	r3, [pc, #528]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b44:	4b83      	ldr	r3, [pc, #524]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b46:	2101      	movs	r1, #1
 8004b48:	438a      	bics	r2, r1
 8004b4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b4c:	4b81      	ldr	r3, [pc, #516]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b50:	4b80      	ldr	r3, [pc, #512]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b52:	2104      	movs	r1, #4
 8004b54:	438a      	bics	r2, r1
 8004b56:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d014      	beq.n	8004b8a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fe fc60 	bl	8003424 <HAL_GetTick>
 8004b64:	0003      	movs	r3, r0
 8004b66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b68:	e009      	b.n	8004b7e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fe fc5b 	bl	8003424 <HAL_GetTick>
 8004b6e:	0002      	movs	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	4a79      	ldr	r2, [pc, #484]	; (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e0e6      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7e:	4b75      	ldr	r3, [pc, #468]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b82:	2202      	movs	r2, #2
 8004b84:	4013      	ands	r3, r2
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x42e>
 8004b88:	e013      	b.n	8004bb2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fe fc4b 	bl	8003424 <HAL_GetTick>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b92:	e009      	b.n	8004ba8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b94:	f7fe fc46 	bl	8003424 <HAL_GetTick>
 8004b98:	0002      	movs	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	4a6f      	ldr	r2, [pc, #444]	; (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e0d1      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba8:	4b6a      	ldr	r3, [pc, #424]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	2202      	movs	r2, #2
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004bb2:	231f      	movs	r3, #31
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004bbc:	4b65      	ldr	r3, [pc, #404]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc0:	4b64      	ldr	r3, [pc, #400]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004bc2:	4967      	ldr	r1, [pc, #412]	; (8004d60 <HAL_RCC_OscConfig+0x624>)
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d100      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x496>
 8004bd0:	e0bb      	b.n	8004d4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd2:	4b60      	ldr	r3, [pc, #384]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2238      	movs	r2, #56	; 0x38
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d100      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4a4>
 8004bde:	e07b      	b.n	8004cd8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d156      	bne.n	8004c96 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be8:	4b5a      	ldr	r3, [pc, #360]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b59      	ldr	r3, [pc, #356]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004bee:	495d      	ldr	r1, [pc, #372]	; (8004d64 <HAL_RCC_OscConfig+0x628>)
 8004bf0:	400a      	ands	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fe fc16 	bl	8003424 <HAL_GetTick>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfe:	f7fe fc11 	bl	8003424 <HAL_GetTick>
 8004c02:	0002      	movs	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e09d      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c10:	4b50      	ldr	r3, [pc, #320]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	049b      	lsls	r3, r3, #18
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d1f0      	bne.n	8004bfe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c1c:	4b4d      	ldr	r3, [pc, #308]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4a51      	ldr	r2, [pc, #324]	; (8004d68 <HAL_RCC_OscConfig+0x62c>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1a      	ldr	r2, [r3, #32]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c50:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004c56:	2180      	movs	r1, #128	; 0x80
 8004c58:	0449      	lsls	r1, r1, #17
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004c5e:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	4b3c      	ldr	r3, [pc, #240]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004c64:	2180      	movs	r1, #128	; 0x80
 8004c66:	0549      	lsls	r1, r1, #21
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fe fbda 	bl	8003424 <HAL_GetTick>
 8004c70:	0003      	movs	r3, r0
 8004c72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c76:	f7fe fbd5 	bl	8003424 <HAL_GetTick>
 8004c7a:	0002      	movs	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e061      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c88:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	049b      	lsls	r3, r3, #18
 8004c90:	4013      	ands	r3, r2
 8004c92:	d0f0      	beq.n	8004c76 <HAL_RCC_OscConfig+0x53a>
 8004c94:	e059      	b.n	8004d4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c96:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4b2e      	ldr	r3, [pc, #184]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004c9c:	4931      	ldr	r1, [pc, #196]	; (8004d64 <HAL_RCC_OscConfig+0x628>)
 8004c9e:	400a      	ands	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca2:	f7fe fbbf 	bl	8003424 <HAL_GetTick>
 8004ca6:	0003      	movs	r3, r0
 8004ca8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fe fbba 	bl	8003424 <HAL_GetTick>
 8004cb0:	0002      	movs	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e046      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbe:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	049b      	lsls	r3, r3, #18
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004cca:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004cd0:	4926      	ldr	r1, [pc, #152]	; (8004d6c <HAL_RCC_OscConfig+0x630>)
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	e038      	b.n	8004d4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e033      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <HAL_RCC_OscConfig+0x618>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2203      	movs	r2, #3
 8004cee:	401a      	ands	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d126      	bne.n	8004d46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2270      	movs	r2, #112	; 0x70
 8004cfc:	401a      	ands	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d11f      	bne.n	8004d46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	23fe      	movs	r3, #254	; 0xfe
 8004d0a:	01db      	lsls	r3, r3, #7
 8004d0c:	401a      	ands	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d116      	bne.n	8004d46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	23f8      	movs	r3, #248	; 0xf8
 8004d1c:	039b      	lsls	r3, r3, #14
 8004d1e:	401a      	ands	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d10e      	bne.n	8004d46 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	23e0      	movs	r3, #224	; 0xe0
 8004d2c:	051b      	lsls	r3, r3, #20
 8004d2e:	401a      	ands	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d106      	bne.n	8004d46 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	0f5b      	lsrs	r3, r3, #29
 8004d3c:	075a      	lsls	r2, r3, #29
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d001      	beq.n	8004d4a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b008      	add	sp, #32
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40007000 	.word	0x40007000
 8004d5c:	00001388 	.word	0x00001388
 8004d60:	efffffff 	.word	0xefffffff
 8004d64:	feffffff 	.word	0xfeffffff
 8004d68:	11c1808c 	.word	0x11c1808c
 8004d6c:	eefefffc 	.word	0xeefefffc

08004d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0e9      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b76      	ldr	r3, [pc, #472]	; (8004f60 <HAL_RCC_ClockConfig+0x1f0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2207      	movs	r2, #7
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d91e      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b73      	ldr	r3, [pc, #460]	; (8004f60 <HAL_RCC_ClockConfig+0x1f0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2207      	movs	r2, #7
 8004d98:	4393      	bics	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	4b70      	ldr	r3, [pc, #448]	; (8004f60 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004da4:	f7fe fb3e 	bl	8003424 <HAL_GetTick>
 8004da8:	0003      	movs	r3, r0
 8004daa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dac:	e009      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dae:	f7fe fb39 	bl	8003424 <HAL_GetTick>
 8004db2:	0002      	movs	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	4a6a      	ldr	r2, [pc, #424]	; (8004f64 <HAL_RCC_ClockConfig+0x1f4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0ca      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dc2:	4b67      	ldr	r3, [pc, #412]	; (8004f60 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	4013      	ands	r3, r2
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1ee      	bne.n	8004dae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d015      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2204      	movs	r2, #4
 8004de0:	4013      	ands	r3, r2
 8004de2:	d006      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004de4:	4b60      	ldr	r3, [pc, #384]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	4b5f      	ldr	r3, [pc, #380]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004dea:	21e0      	movs	r1, #224	; 0xe0
 8004dec:	01c9      	lsls	r1, r1, #7
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df2:	4b5d      	ldr	r3, [pc, #372]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	4a5d      	ldr	r2, [pc, #372]	; (8004f6c <HAL_RCC_ClockConfig+0x1fc>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	4b59      	ldr	r3, [pc, #356]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004e02:	430a      	orrs	r2, r1
 8004e04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d057      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e18:	4b53      	ldr	r3, [pc, #332]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	029b      	lsls	r3, r3, #10
 8004e20:	4013      	ands	r3, r2
 8004e22:	d12b      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e097      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e30:	4b4d      	ldr	r3, [pc, #308]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	049b      	lsls	r3, r3, #18
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d11f      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e08b      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d107      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e48:	4b47      	ldr	r3, [pc, #284]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4013      	ands	r3, r2
 8004e52:	d113      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e07f      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e60:	4b41      	ldr	r3, [pc, #260]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e64:	2202      	movs	r2, #2
 8004e66:	4013      	ands	r3, r2
 8004e68:	d108      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e074      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6e:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	2202      	movs	r2, #2
 8004e74:	4013      	ands	r3, r2
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e06d      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e7c:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2207      	movs	r2, #7
 8004e82:	4393      	bics	r3, r2
 8004e84:	0019      	movs	r1, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	4b37      	ldr	r3, [pc, #220]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e90:	f7fe fac8 	bl	8003424 <HAL_GetTick>
 8004e94:	0003      	movs	r3, r0
 8004e96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e98:	e009      	b.n	8004eae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9a:	f7fe fac3 	bl	8003424 <HAL_GetTick>
 8004e9e:	0002      	movs	r2, r0
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <HAL_RCC_ClockConfig+0x1f4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e054      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	4b2e      	ldr	r3, [pc, #184]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2238      	movs	r2, #56	; 0x38
 8004eb4:	401a      	ands	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1ec      	bne.n	8004e9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b27      	ldr	r3, [pc, #156]	; (8004f60 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2207      	movs	r2, #7
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d21e      	bcs.n	8004f0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2207      	movs	r2, #7
 8004ed4:	4393      	bics	r3, r2
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <HAL_RCC_ClockConfig+0x1f0>)
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ee0:	f7fe faa0 	bl	8003424 <HAL_GetTick>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ee8:	e009      	b.n	8004efe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eea:	f7fe fa9b 	bl	8003424 <HAL_GetTick>
 8004eee:	0002      	movs	r2, r0
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	4a1b      	ldr	r2, [pc, #108]	; (8004f64 <HAL_RCC_ClockConfig+0x1f4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e02c      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004efe:	4b18      	ldr	r3, [pc, #96]	; (8004f60 <HAL_RCC_ClockConfig+0x1f0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2207      	movs	r2, #7
 8004f04:	4013      	ands	r3, r2
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1ee      	bne.n	8004eea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2204      	movs	r2, #4
 8004f12:	4013      	ands	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <HAL_RCC_ClockConfig+0x200>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	0019      	movs	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004f26:	430a      	orrs	r2, r1
 8004f28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004f2a:	f000 f829 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8004f2e:	0001      	movs	r1, r0
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <HAL_RCC_ClockConfig+0x1f8>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	220f      	movs	r2, #15
 8004f38:	401a      	ands	r2, r3
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <HAL_RCC_ClockConfig+0x204>)
 8004f3c:	0092      	lsls	r2, r2, #2
 8004f3e:	58d3      	ldr	r3, [r2, r3]
 8004f40:	221f      	movs	r2, #31
 8004f42:	4013      	ands	r3, r2
 8004f44:	000a      	movs	r2, r1
 8004f46:	40da      	lsrs	r2, r3
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_ClockConfig+0x208>)
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <HAL_RCC_ClockConfig+0x20c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7fe fa0b 	bl	800336c <HAL_InitTick>
 8004f56:	0003      	movs	r3, r0
}
 8004f58:	0018      	movs	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b004      	add	sp, #16
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40022000 	.word	0x40022000
 8004f64:	00001388 	.word	0x00001388
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	fffff0ff 	.word	0xfffff0ff
 8004f70:	ffff8fff 	.word	0xffff8fff
 8004f74:	0800b6e0 	.word	0x0800b6e0
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	20000004 	.word	0x20000004

08004f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f86:	4b3c      	ldr	r3, [pc, #240]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2238      	movs	r2, #56	; 0x38
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d10f      	bne.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004f90:	4b39      	ldr	r3, [pc, #228]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	0adb      	lsrs	r3, r3, #11
 8004f96:	2207      	movs	r2, #7
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	0013      	movs	r3, r2
 8004fa0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004fa2:	6839      	ldr	r1, [r7, #0]
 8004fa4:	4835      	ldr	r0, [pc, #212]	; (800507c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004fa6:	f7fb f8c9 	bl	800013c <__udivsi3>
 8004faa:	0003      	movs	r3, r0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	e05d      	b.n	800506c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fb0:	4b31      	ldr	r3, [pc, #196]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2238      	movs	r2, #56	; 0x38
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d102      	bne.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fbc:	4b30      	ldr	r3, [pc, #192]	; (8005080 <HAL_RCC_GetSysClockFreq+0x100>)
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	e054      	b.n	800506c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fc2:	4b2d      	ldr	r3, [pc, #180]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2238      	movs	r2, #56	; 0x38
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d138      	bne.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004fce:	4b2a      	ldr	r3, [pc, #168]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fd8:	4b27      	ldr	r3, [pc, #156]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	2207      	movs	r2, #7
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d10d      	bne.n	8005008 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	4824      	ldr	r0, [pc, #144]	; (8005080 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ff0:	f7fb f8a4 	bl	800013c <__udivsi3>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	4b1f      	ldr	r3, [pc, #124]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	227f      	movs	r2, #127	; 0x7f
 8005000:	4013      	ands	r3, r2
 8005002:	434b      	muls	r3, r1
 8005004:	617b      	str	r3, [r7, #20]
        break;
 8005006:	e00d      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	481c      	ldr	r0, [pc, #112]	; (800507c <HAL_RCC_GetSysClockFreq+0xfc>)
 800500c:	f7fb f896 	bl	800013c <__udivsi3>
 8005010:	0003      	movs	r3, r0
 8005012:	0019      	movs	r1, r3
 8005014:	4b18      	ldr	r3, [pc, #96]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	0a1b      	lsrs	r3, r3, #8
 800501a:	227f      	movs	r2, #127	; 0x7f
 800501c:	4013      	ands	r3, r2
 800501e:	434b      	muls	r3, r1
 8005020:	617b      	str	r3, [r7, #20]
        break;
 8005022:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005024:	4b14      	ldr	r3, [pc, #80]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	0f5b      	lsrs	r3, r3, #29
 800502a:	2207      	movs	r2, #7
 800502c:	4013      	ands	r3, r2
 800502e:	3301      	adds	r3, #1
 8005030:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	6978      	ldr	r0, [r7, #20]
 8005036:	f7fb f881 	bl	800013c <__udivsi3>
 800503a:	0003      	movs	r3, r0
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	e015      	b.n	800506c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005040:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2238      	movs	r2, #56	; 0x38
 8005046:	4013      	ands	r3, r2
 8005048:	2b20      	cmp	r3, #32
 800504a:	d103      	bne.n	8005054 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	e00b      	b.n	800506c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005054:	4b08      	ldr	r3, [pc, #32]	; (8005078 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2238      	movs	r2, #56	; 0x38
 800505a:	4013      	ands	r3, r2
 800505c:	2b18      	cmp	r3, #24
 800505e:	d103      	bne.n	8005068 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005060:	23fa      	movs	r3, #250	; 0xfa
 8005062:	01db      	lsls	r3, r3, #7
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	e001      	b.n	800506c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800506c:	693b      	ldr	r3, [r7, #16]
}
 800506e:	0018      	movs	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	b006      	add	sp, #24
 8005074:	bd80      	pop	{r7, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	40021000 	.word	0x40021000
 800507c:	00f42400 	.word	0x00f42400
 8005080:	007a1200 	.word	0x007a1200

08005084 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005088:	4b02      	ldr	r3, [pc, #8]	; (8005094 <HAL_RCC_GetHCLKFreq+0x10>)
 800508a:	681b      	ldr	r3, [r3, #0]
}
 800508c:	0018      	movs	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	20000000 	.word	0x20000000

08005098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005098:	b5b0      	push	{r4, r5, r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800509c:	f7ff fff2 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050a0:	0004      	movs	r4, r0
 80050a2:	f7ff fb3f 	bl	8004724 <LL_RCC_GetAPB1Prescaler>
 80050a6:	0003      	movs	r3, r0
 80050a8:	0b1a      	lsrs	r2, r3, #12
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ac:	0092      	lsls	r2, r2, #2
 80050ae:	58d3      	ldr	r3, [r2, r3]
 80050b0:	221f      	movs	r2, #31
 80050b2:	4013      	ands	r3, r2
 80050b4:	40dc      	lsrs	r4, r3
 80050b6:	0023      	movs	r3, r4
}
 80050b8:	0018      	movs	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bdb0      	pop	{r4, r5, r7, pc}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	0800b720 	.word	0x0800b720

080050c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80050cc:	2313      	movs	r3, #19
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050d4:	2312      	movs	r3, #18
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	029b      	lsls	r3, r3, #10
 80050e4:	4013      	ands	r3, r2
 80050e6:	d100      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80050e8:	e0a3      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ea:	2011      	movs	r0, #17
 80050ec:	183b      	adds	r3, r7, r0
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f2:	4ba5      	ldr	r3, [pc, #660]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	055b      	lsls	r3, r3, #21
 80050fa:	4013      	ands	r3, r2
 80050fc:	d110      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	4ba2      	ldr	r3, [pc, #648]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005102:	4ba1      	ldr	r3, [pc, #644]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005104:	2180      	movs	r1, #128	; 0x80
 8005106:	0549      	lsls	r1, r1, #21
 8005108:	430a      	orrs	r2, r1
 800510a:	63da      	str	r2, [r3, #60]	; 0x3c
 800510c:	4b9e      	ldr	r3, [pc, #632]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800510e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	055b      	lsls	r3, r3, #21
 8005114:	4013      	ands	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511a:	183b      	adds	r3, r7, r0
 800511c:	2201      	movs	r2, #1
 800511e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005120:	4b9a      	ldr	r3, [pc, #616]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b99      	ldr	r3, [pc, #612]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005126:	2180      	movs	r1, #128	; 0x80
 8005128:	0049      	lsls	r1, r1, #1
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800512e:	f7fe f979 	bl	8003424 <HAL_GetTick>
 8005132:	0003      	movs	r3, r0
 8005134:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005136:	e00b      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005138:	f7fe f974 	bl	8003424 <HAL_GetTick>
 800513c:	0002      	movs	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d904      	bls.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005146:	2313      	movs	r3, #19
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	2203      	movs	r2, #3
 800514c:	701a      	strb	r2, [r3, #0]
        break;
 800514e:	e005      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005150:	4b8e      	ldr	r3, [pc, #568]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	4013      	ands	r3, r2
 800515a:	d0ed      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800515c:	2313      	movs	r3, #19
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d154      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005166:	4b88      	ldr	r3, [pc, #544]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005168:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800516a:	23c0      	movs	r3, #192	; 0xc0
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4013      	ands	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d019      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	429a      	cmp	r2, r3
 8005180:	d014      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005182:	4b81      	ldr	r3, [pc, #516]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005186:	4a82      	ldr	r2, [pc, #520]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005188:	4013      	ands	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800518c:	4b7e      	ldr	r3, [pc, #504]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800518e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005190:	4b7d      	ldr	r3, [pc, #500]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005192:	2180      	movs	r1, #128	; 0x80
 8005194:	0249      	lsls	r1, r1, #9
 8005196:	430a      	orrs	r2, r1
 8005198:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800519a:	4b7b      	ldr	r3, [pc, #492]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800519c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800519e:	4b7a      	ldr	r3, [pc, #488]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051a0:	497c      	ldr	r1, [pc, #496]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80051a2:	400a      	ands	r2, r1
 80051a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051a6:	4b78      	ldr	r3, [pc, #480]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2201      	movs	r2, #1
 80051b0:	4013      	ands	r3, r2
 80051b2:	d016      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fe f936 	bl	8003424 <HAL_GetTick>
 80051b8:	0003      	movs	r3, r0
 80051ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051bc:	e00c      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051be:	f7fe f931 	bl	8003424 <HAL_GetTick>
 80051c2:	0002      	movs	r2, r0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	4a73      	ldr	r2, [pc, #460]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d904      	bls.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80051ce:	2313      	movs	r3, #19
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	2203      	movs	r2, #3
 80051d4:	701a      	strb	r2, [r3, #0]
            break;
 80051d6:	e004      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d8:	4b6b      	ldr	r3, [pc, #428]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	2202      	movs	r2, #2
 80051de:	4013      	ands	r3, r2
 80051e0:	d0ed      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80051e2:	2313      	movs	r3, #19
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ec:	4b66      	ldr	r3, [pc, #408]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f0:	4a67      	ldr	r2, [pc, #412]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	0019      	movs	r1, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051fa:	4b63      	ldr	r3, [pc, #396]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051fc:	430a      	orrs	r2, r1
 80051fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005200:	e00c      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005202:	2312      	movs	r3, #18
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	2213      	movs	r2, #19
 8005208:	18ba      	adds	r2, r7, r2
 800520a:	7812      	ldrb	r2, [r2, #0]
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	e005      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	2312      	movs	r3, #18
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	2213      	movs	r2, #19
 8005216:	18ba      	adds	r2, r7, r2
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800521c:	2311      	movs	r3, #17
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d105      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005226:	4b58      	ldr	r3, [pc, #352]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800522a:	4b57      	ldr	r3, [pc, #348]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800522c:	495b      	ldr	r1, [pc, #364]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800522e:	400a      	ands	r2, r1
 8005230:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2201      	movs	r2, #1
 8005238:	4013      	ands	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800523c:	4b52      	ldr	r3, [pc, #328]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800523e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005240:	2203      	movs	r2, #3
 8005242:	4393      	bics	r3, r2
 8005244:	0019      	movs	r1, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	4b4f      	ldr	r3, [pc, #316]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800524c:	430a      	orrs	r2, r1
 800524e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2210      	movs	r2, #16
 8005256:	4013      	ands	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800525a:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	4a50      	ldr	r2, [pc, #320]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005260:	4013      	ands	r3, r2
 8005262:	0019      	movs	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	4b47      	ldr	r3, [pc, #284]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800526a:	430a      	orrs	r2, r1
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	2380      	movs	r3, #128	; 0x80
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4013      	ands	r3, r2
 8005278:	d009      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800527a:	4b43      	ldr	r3, [pc, #268]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	4a49      	ldr	r2, [pc, #292]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005280:	4013      	ands	r3, r2
 8005282:	0019      	movs	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695a      	ldr	r2, [r3, #20]
 8005288:	4b3f      	ldr	r3, [pc, #252]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800528a:	430a      	orrs	r2, r1
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4013      	ands	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800529a:	4b3b      	ldr	r3, [pc, #236]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	4a42      	ldr	r2, [pc, #264]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	0019      	movs	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	4b37      	ldr	r3, [pc, #220]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052aa:	430a      	orrs	r2, r1
 80052ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2220      	movs	r2, #32
 80052b4:	4013      	ands	r3, r2
 80052b6:	d009      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052b8:	4b33      	ldr	r3, [pc, #204]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	4a3b      	ldr	r2, [pc, #236]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052be:	4013      	ands	r3, r2
 80052c0:	0019      	movs	r1, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	4b30      	ldr	r3, [pc, #192]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052c8:	430a      	orrs	r2, r1
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	01db      	lsls	r3, r3, #7
 80052d4:	4013      	ands	r3, r2
 80052d6:	d015      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	0899      	lsrs	r1, r3, #2
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	4b28      	ldr	r3, [pc, #160]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052e6:	430a      	orrs	r2, r1
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	05db      	lsls	r3, r3, #23
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d106      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80052f6:	4b24      	ldr	r3, [pc, #144]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	4b23      	ldr	r3, [pc, #140]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052fc:	2180      	movs	r1, #128	; 0x80
 80052fe:	0249      	lsls	r1, r1, #9
 8005300:	430a      	orrs	r2, r1
 8005302:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	039b      	lsls	r3, r3, #14
 800530c:	4013      	ands	r3, r2
 800530e:	d016      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005310:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005316:	4013      	ands	r3, r2
 8005318:	0019      	movs	r1, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005320:	430a      	orrs	r2, r1
 8005322:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1a      	ldr	r2, [r3, #32]
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	03db      	lsls	r3, r3, #15
 800532c:	429a      	cmp	r2, r3
 800532e:	d106      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005330:	4b15      	ldr	r3, [pc, #84]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	0449      	lsls	r1, r1, #17
 800533a:	430a      	orrs	r2, r1
 800533c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	2380      	movs	r3, #128	; 0x80
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	4013      	ands	r3, r2
 8005348:	d016      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800534a:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005350:	4013      	ands	r3, r2
 8005352:	0019      	movs	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800535a:	430a      	orrs	r2, r1
 800535c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	01db      	lsls	r3, r3, #7
 8005366:	429a      	cmp	r2, r3
 8005368:	d106      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	4b06      	ldr	r3, [pc, #24]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	0249      	lsls	r1, r1, #9
 8005374:	430a      	orrs	r2, r1
 8005376:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005378:	2312      	movs	r3, #18
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	781b      	ldrb	r3, [r3, #0]
}
 800537e:	0018      	movs	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	b006      	add	sp, #24
 8005384:	bd80      	pop	{r7, pc}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	40021000 	.word	0x40021000
 800538c:	40007000 	.word	0x40007000
 8005390:	fffffcff 	.word	0xfffffcff
 8005394:	fffeffff 	.word	0xfffeffff
 8005398:	00001388 	.word	0x00001388
 800539c:	efffffff 	.word	0xefffffff
 80053a0:	fffff3ff 	.word	0xfffff3ff
 80053a4:	fff3ffff 	.word	0xfff3ffff
 80053a8:	ffcfffff 	.word	0xffcfffff
 80053ac:	ffffcfff 	.word	0xffffcfff
 80053b0:	ffbfffff 	.word	0xffbfffff
 80053b4:	ffff3fff 	.word	0xffff3fff

080053b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e04a      	b.n	8005460 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	223d      	movs	r2, #61	; 0x3d
 80053ce:	5c9b      	ldrb	r3, [r3, r2]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d107      	bne.n	80053e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	223c      	movs	r2, #60	; 0x3c
 80053da:	2100      	movs	r1, #0
 80053dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fd fdad 	bl	8002f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	223d      	movs	r2, #61	; 0x3d
 80053ea:	2102      	movs	r1, #2
 80053ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3304      	adds	r3, #4
 80053f6:	0019      	movs	r1, r3
 80053f8:	0010      	movs	r0, r2
 80053fa:	f000 f987 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2248      	movs	r2, #72	; 0x48
 8005402:	2101      	movs	r1, #1
 8005404:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	223e      	movs	r2, #62	; 0x3e
 800540a:	2101      	movs	r1, #1
 800540c:	5499      	strb	r1, [r3, r2]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	223f      	movs	r2, #63	; 0x3f
 8005412:	2101      	movs	r1, #1
 8005414:	5499      	strb	r1, [r3, r2]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2240      	movs	r2, #64	; 0x40
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2241      	movs	r2, #65	; 0x41
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2242      	movs	r2, #66	; 0x42
 800542a:	2101      	movs	r1, #1
 800542c:	5499      	strb	r1, [r3, r2]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2243      	movs	r2, #67	; 0x43
 8005432:	2101      	movs	r1, #1
 8005434:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2244      	movs	r2, #68	; 0x44
 800543a:	2101      	movs	r1, #1
 800543c:	5499      	strb	r1, [r3, r2]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2245      	movs	r2, #69	; 0x45
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2246      	movs	r2, #70	; 0x46
 800544a:	2101      	movs	r1, #1
 800544c:	5499      	strb	r1, [r3, r2]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2247      	movs	r2, #71	; 0x47
 8005452:	2101      	movs	r1, #1
 8005454:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	223d      	movs	r2, #61	; 0x3d
 800545a:	2101      	movs	r1, #1
 800545c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	b002      	add	sp, #8
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2202      	movs	r2, #2
 8005478:	4013      	ands	r3, r2
 800547a:	2b02      	cmp	r3, #2
 800547c:	d124      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2202      	movs	r2, #2
 8005486:	4013      	ands	r3, r2
 8005488:	2b02      	cmp	r3, #2
 800548a:	d11d      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2203      	movs	r2, #3
 8005492:	4252      	negs	r2, r2
 8005494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2203      	movs	r2, #3
 80054a4:	4013      	ands	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	0018      	movs	r0, r3
 80054ac:	f000 f916 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 80054b0:	e007      	b.n	80054c2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 f909 	bl	80056cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f000 f915 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2204      	movs	r2, #4
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d125      	bne.n	8005522 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2204      	movs	r2, #4
 80054de:	4013      	ands	r3, r2
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d11e      	bne.n	8005522 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2205      	movs	r2, #5
 80054ea:	4252      	negs	r2, r2
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	23c0      	movs	r3, #192	; 0xc0
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4013      	ands	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	0018      	movs	r0, r3
 8005506:	f000 f8e9 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 800550a:	e007      	b.n	800551c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	0018      	movs	r0, r3
 8005510:	f000 f8dc 	bl	80056cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	0018      	movs	r0, r3
 8005518:	f000 f8e8 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2208      	movs	r2, #8
 800552a:	4013      	ands	r3, r2
 800552c:	2b08      	cmp	r3, #8
 800552e:	d124      	bne.n	800557a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	2208      	movs	r2, #8
 8005538:	4013      	ands	r3, r2
 800553a:	2b08      	cmp	r3, #8
 800553c:	d11d      	bne.n	800557a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2209      	movs	r2, #9
 8005544:	4252      	negs	r2, r2
 8005546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2204      	movs	r2, #4
 800554c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	2203      	movs	r2, #3
 8005556:	4013      	ands	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	0018      	movs	r0, r3
 800555e:	f000 f8bd 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 8005562:	e007      	b.n	8005574 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	0018      	movs	r0, r3
 8005568:	f000 f8b0 	bl	80056cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 f8bc 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2210      	movs	r2, #16
 8005582:	4013      	ands	r3, r2
 8005584:	2b10      	cmp	r3, #16
 8005586:	d125      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	2210      	movs	r2, #16
 8005590:	4013      	ands	r3, r2
 8005592:	2b10      	cmp	r3, #16
 8005594:	d11e      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2211      	movs	r2, #17
 800559c:	4252      	negs	r2, r2
 800559e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2208      	movs	r2, #8
 80055a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	23c0      	movs	r3, #192	; 0xc0
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4013      	ands	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	0018      	movs	r0, r3
 80055b8:	f000 f890 	bl	80056dc <HAL_TIM_IC_CaptureCallback>
 80055bc:	e007      	b.n	80055ce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f000 f883 	bl	80056cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	0018      	movs	r0, r3
 80055ca:	f000 f88f 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2201      	movs	r2, #1
 80055dc:	4013      	ands	r3, r2
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d10f      	bne.n	8005602 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d108      	bne.n	8005602 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2202      	movs	r2, #2
 80055f6:	4252      	negs	r2, r2
 80055f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	0018      	movs	r0, r3
 80055fe:	f7fd f85f 	bl	80026c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2280      	movs	r2, #128	; 0x80
 800560a:	4013      	ands	r3, r2
 800560c:	2b80      	cmp	r3, #128	; 0x80
 800560e:	d10f      	bne.n	8005630 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	4013      	ands	r3, r2
 800561a:	2b80      	cmp	r3, #128	; 0x80
 800561c:	d108      	bne.n	8005630 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2281      	movs	r2, #129	; 0x81
 8005624:	4252      	negs	r2, r2
 8005626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	0018      	movs	r0, r3
 800562c:	f000 f8ec 	bl	8005808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	401a      	ands	r2, r3
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	429a      	cmp	r2, r3
 8005642:	d10e      	bne.n	8005662 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	2280      	movs	r2, #128	; 0x80
 800564c:	4013      	ands	r3, r2
 800564e:	2b80      	cmp	r3, #128	; 0x80
 8005650:	d107      	bne.n	8005662 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <HAL_TIM_IRQHandler+0x260>)
 8005658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	0018      	movs	r0, r3
 800565e:	f000 f8db 	bl	8005818 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	2240      	movs	r2, #64	; 0x40
 800566a:	4013      	ands	r3, r2
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d10f      	bne.n	8005690 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	2240      	movs	r2, #64	; 0x40
 8005678:	4013      	ands	r3, r2
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d108      	bne.n	8005690 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2241      	movs	r2, #65	; 0x41
 8005684:	4252      	negs	r2, r2
 8005686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	0018      	movs	r0, r3
 800568c:	f000 f836 	bl	80056fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2220      	movs	r2, #32
 8005698:	4013      	ands	r3, r2
 800569a:	2b20      	cmp	r3, #32
 800569c:	d10f      	bne.n	80056be <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d108      	bne.n	80056be <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2221      	movs	r2, #33	; 0x21
 80056b2:	4252      	negs	r2, r2
 80056b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	0018      	movs	r0, r3
 80056ba:	f000 f89d 	bl	80057f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b002      	add	sp, #8
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	fffffeff 	.word	0xfffffeff

080056cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b002      	add	sp, #8
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056e4:	46c0      	nop			; (mov r8, r8)
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b002      	add	sp, #8
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b002      	add	sp, #8
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}

0800570c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a30      	ldr	r2, [pc, #192]	; (80057e0 <TIM_Base_SetConfig+0xd4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d008      	beq.n	8005736 <TIM_Base_SetConfig+0x2a>
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	2380      	movs	r3, #128	; 0x80
 8005728:	05db      	lsls	r3, r3, #23
 800572a:	429a      	cmp	r2, r3
 800572c:	d003      	beq.n	8005736 <TIM_Base_SetConfig+0x2a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <TIM_Base_SetConfig+0xd8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d108      	bne.n	8005748 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2270      	movs	r2, #112	; 0x70
 800573a:	4393      	bics	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a25      	ldr	r2, [pc, #148]	; (80057e0 <TIM_Base_SetConfig+0xd4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d014      	beq.n	800577a <TIM_Base_SetConfig+0x6e>
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	2380      	movs	r3, #128	; 0x80
 8005754:	05db      	lsls	r3, r3, #23
 8005756:	429a      	cmp	r2, r3
 8005758:	d00f      	beq.n	800577a <TIM_Base_SetConfig+0x6e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <TIM_Base_SetConfig+0xd8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00b      	beq.n	800577a <TIM_Base_SetConfig+0x6e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a20      	ldr	r2, [pc, #128]	; (80057e8 <TIM_Base_SetConfig+0xdc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <TIM_Base_SetConfig+0x6e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1f      	ldr	r2, [pc, #124]	; (80057ec <TIM_Base_SetConfig+0xe0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_Base_SetConfig+0x6e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1e      	ldr	r2, [pc, #120]	; (80057f0 <TIM_Base_SetConfig+0xe4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d108      	bne.n	800578c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <TIM_Base_SetConfig+0xe8>)
 800577e:	4013      	ands	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	4393      	bics	r3, r2
 8005792:	001a      	movs	r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <TIM_Base_SetConfig+0xd4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_Base_SetConfig+0xbe>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a0b      	ldr	r2, [pc, #44]	; (80057ec <TIM_Base_SetConfig+0xe0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_Base_SetConfig+0xbe>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <TIM_Base_SetConfig+0xe4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d103      	bne.n	80057d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	615a      	str	r2, [r3, #20]
}
 80057d8:	46c0      	nop			; (mov r8, r8)
 80057da:	46bd      	mov	sp, r7
 80057dc:	b004      	add	sp, #16
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40002000 	.word	0x40002000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800
 80057f4:	fffffcff 	.word	0xfffffcff

080057f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005800:	46c0      	nop			; (mov r8, r8)
 8005802:	46bd      	mov	sp, r7
 8005804:	b002      	add	sp, #8
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005810:	46c0      	nop			; (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	b002      	add	sp, #8
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005820:	46c0      	nop			; (mov r8, r8)
 8005822:	46bd      	mov	sp, r7
 8005824:	b002      	add	sp, #8
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e046      	b.n	80058c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2288      	movs	r2, #136	; 0x88
 800583e:	589b      	ldr	r3, [r3, r2]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d107      	bne.n	8005854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2284      	movs	r2, #132	; 0x84
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0018      	movs	r0, r3
 8005850:	f7fd fbbc 	bl	8002fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2288      	movs	r2, #136	; 0x88
 8005858:	2124      	movs	r1, #36	; 0x24
 800585a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2101      	movs	r1, #1
 8005868:	438a      	bics	r2, r1
 800586a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	0018      	movs	r0, r3
 8005870:	f000 fb72 	bl	8005f58 <UART_SetConfig>
 8005874:	0003      	movs	r3, r0
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e024      	b.n	80058c8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	0018      	movs	r0, r3
 800588a:	f000 fddd 	bl	8006448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	490d      	ldr	r1, [pc, #52]	; (80058d0 <HAL_UART_Init+0xa8>)
 800589a:	400a      	ands	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	212a      	movs	r1, #42	; 0x2a
 80058aa:	438a      	bics	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2101      	movs	r1, #1
 80058ba:	430a      	orrs	r2, r1
 80058bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	0018      	movs	r0, r3
 80058c2:	f000 fe75 	bl	80065b0 <UART_CheckIdleState>
 80058c6:	0003      	movs	r3, r0
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b002      	add	sp, #8
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	ffffb7ff 	.word	0xffffb7ff

080058d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058d4:	b5b0      	push	{r4, r5, r7, lr}
 80058d6:	b0aa      	sub	sp, #168	; 0xa8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	22a4      	movs	r2, #164	; 0xa4
 80058e4:	18b9      	adds	r1, r7, r2
 80058e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	20a0      	movs	r0, #160	; 0xa0
 80058f0:	1839      	adds	r1, r7, r0
 80058f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	249c      	movs	r4, #156	; 0x9c
 80058fc:	1939      	adds	r1, r7, r4
 80058fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005900:	0011      	movs	r1, r2
 8005902:	18bb      	adds	r3, r7, r2
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4aa2      	ldr	r2, [pc, #648]	; (8005b90 <HAL_UART_IRQHandler+0x2bc>)
 8005908:	4013      	ands	r3, r2
 800590a:	2298      	movs	r2, #152	; 0x98
 800590c:	18bd      	adds	r5, r7, r2
 800590e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005910:	18bb      	adds	r3, r7, r2
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d11a      	bne.n	800594e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005918:	187b      	adds	r3, r7, r1
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2220      	movs	r2, #32
 800591e:	4013      	ands	r3, r2
 8005920:	d015      	beq.n	800594e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005922:	183b      	adds	r3, r7, r0
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2220      	movs	r2, #32
 8005928:	4013      	ands	r3, r2
 800592a:	d105      	bne.n	8005938 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800592c:	193b      	adds	r3, r7, r4
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	055b      	lsls	r3, r3, #21
 8005934:	4013      	ands	r3, r2
 8005936:	d00a      	beq.n	800594e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593c:	2b00      	cmp	r3, #0
 800593e:	d100      	bne.n	8005942 <HAL_UART_IRQHandler+0x6e>
 8005940:	e2dc      	b.n	8005efc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	0010      	movs	r0, r2
 800594a:	4798      	blx	r3
      }
      return;
 800594c:	e2d6      	b.n	8005efc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800594e:	2398      	movs	r3, #152	; 0x98
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d100      	bne.n	800595a <HAL_UART_IRQHandler+0x86>
 8005958:	e122      	b.n	8005ba0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800595a:	239c      	movs	r3, #156	; 0x9c
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a8c      	ldr	r2, [pc, #560]	; (8005b94 <HAL_UART_IRQHandler+0x2c0>)
 8005962:	4013      	ands	r3, r2
 8005964:	d106      	bne.n	8005974 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005966:	23a0      	movs	r3, #160	; 0xa0
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a8a      	ldr	r2, [pc, #552]	; (8005b98 <HAL_UART_IRQHandler+0x2c4>)
 800596e:	4013      	ands	r3, r2
 8005970:	d100      	bne.n	8005974 <HAL_UART_IRQHandler+0xa0>
 8005972:	e115      	b.n	8005ba0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005974:	23a4      	movs	r3, #164	; 0xa4
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2201      	movs	r2, #1
 800597c:	4013      	ands	r3, r2
 800597e:	d012      	beq.n	80059a6 <HAL_UART_IRQHandler+0xd2>
 8005980:	23a0      	movs	r3, #160	; 0xa0
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	4013      	ands	r3, r2
 800598c:	d00b      	beq.n	80059a6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2201      	movs	r2, #1
 8005994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2290      	movs	r2, #144	; 0x90
 800599a:	589b      	ldr	r3, [r3, r2]
 800599c:	2201      	movs	r2, #1
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2190      	movs	r1, #144	; 0x90
 80059a4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a6:	23a4      	movs	r3, #164	; 0xa4
 80059a8:	18fb      	adds	r3, r7, r3
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2202      	movs	r2, #2
 80059ae:	4013      	ands	r3, r2
 80059b0:	d011      	beq.n	80059d6 <HAL_UART_IRQHandler+0x102>
 80059b2:	239c      	movs	r3, #156	; 0x9c
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	4013      	ands	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2202      	movs	r2, #2
 80059c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2290      	movs	r2, #144	; 0x90
 80059ca:	589b      	ldr	r3, [r3, r2]
 80059cc:	2204      	movs	r2, #4
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2190      	movs	r1, #144	; 0x90
 80059d4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059d6:	23a4      	movs	r3, #164	; 0xa4
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2204      	movs	r2, #4
 80059de:	4013      	ands	r3, r2
 80059e0:	d011      	beq.n	8005a06 <HAL_UART_IRQHandler+0x132>
 80059e2:	239c      	movs	r3, #156	; 0x9c
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2201      	movs	r2, #1
 80059ea:	4013      	ands	r3, r2
 80059ec:	d00b      	beq.n	8005a06 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2204      	movs	r2, #4
 80059f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2290      	movs	r2, #144	; 0x90
 80059fa:	589b      	ldr	r3, [r3, r2]
 80059fc:	2202      	movs	r2, #2
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2190      	movs	r1, #144	; 0x90
 8005a04:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a06:	23a4      	movs	r3, #164	; 0xa4
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d017      	beq.n	8005a42 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a12:	23a0      	movs	r3, #160	; 0xa0
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d105      	bne.n	8005a2a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a1e:	239c      	movs	r3, #156	; 0x9c
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a5b      	ldr	r2, [pc, #364]	; (8005b94 <HAL_UART_IRQHandler+0x2c0>)
 8005a26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a28:	d00b      	beq.n	8005a42 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2208      	movs	r2, #8
 8005a30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2290      	movs	r2, #144	; 0x90
 8005a36:	589b      	ldr	r3, [r3, r2]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2190      	movs	r1, #144	; 0x90
 8005a40:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a42:	23a4      	movs	r3, #164	; 0xa4
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <HAL_UART_IRQHandler+0x1a4>
 8005a50:	23a0      	movs	r3, #160	; 0xa0
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	04db      	lsls	r3, r3, #19
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d00c      	beq.n	8005a78 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2280      	movs	r2, #128	; 0x80
 8005a64:	0112      	lsls	r2, r2, #4
 8005a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2290      	movs	r2, #144	; 0x90
 8005a6c:	589b      	ldr	r3, [r3, r2]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2190      	movs	r1, #144	; 0x90
 8005a76:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2290      	movs	r2, #144	; 0x90
 8005a7c:	589b      	ldr	r3, [r3, r2]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d100      	bne.n	8005a84 <HAL_UART_IRQHandler+0x1b0>
 8005a82:	e23d      	b.n	8005f00 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a84:	23a4      	movs	r3, #164	; 0xa4
 8005a86:	18fb      	adds	r3, r7, r3
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d015      	beq.n	8005abc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a90:	23a0      	movs	r3, #160	; 0xa0
 8005a92:	18fb      	adds	r3, r7, r3
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2220      	movs	r2, #32
 8005a98:	4013      	ands	r3, r2
 8005a9a:	d106      	bne.n	8005aaa <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a9c:	239c      	movs	r3, #156	; 0x9c
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	2380      	movs	r3, #128	; 0x80
 8005aa4:	055b      	lsls	r3, r3, #21
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d008      	beq.n	8005abc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	0010      	movs	r0, r2
 8005aba:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2290      	movs	r2, #144	; 0x90
 8005ac0:	589b      	ldr	r3, [r3, r2]
 8005ac2:	2194      	movs	r1, #148	; 0x94
 8005ac4:	187a      	adds	r2, r7, r1
 8005ac6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2240      	movs	r2, #64	; 0x40
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d004      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ad6:	187b      	adds	r3, r7, r1
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2228      	movs	r2, #40	; 0x28
 8005adc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ade:	d04c      	beq.n	8005b7a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f000 fe7a 	bl	80067dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2240      	movs	r2, #64	; 0x40
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d13c      	bne.n	8005b70 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af6:	f3ef 8310 	mrs	r3, PRIMASK
 8005afa:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afe:	2090      	movs	r0, #144	; 0x90
 8005b00:	183a      	adds	r2, r7, r0
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	2301      	movs	r3, #1
 8005b06:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b0a:	f383 8810 	msr	PRIMASK, r3
}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2140      	movs	r1, #64	; 0x40
 8005b1c:	438a      	bics	r2, r1
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	183b      	adds	r3, r7, r0
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b28:	f383 8810 	msr	PRIMASK, r3
}
 8005b2c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2280      	movs	r2, #128	; 0x80
 8005b32:	589b      	ldr	r3, [r3, r2]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d016      	beq.n	8005b66 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2280      	movs	r2, #128	; 0x80
 8005b3c:	589b      	ldr	r3, [r3, r2]
 8005b3e:	4a17      	ldr	r2, [pc, #92]	; (8005b9c <HAL_UART_IRQHandler+0x2c8>)
 8005b40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2280      	movs	r2, #128	; 0x80
 8005b46:	589b      	ldr	r3, [r3, r2]
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f7fe fabd 	bl	80040c8 <HAL_DMA_Abort_IT>
 8005b4e:	1e03      	subs	r3, r0, #0
 8005b50:	d01c      	beq.n	8005b8c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2280      	movs	r2, #128	; 0x80
 8005b56:	589b      	ldr	r3, [r3, r2]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	2180      	movs	r1, #128	; 0x80
 8005b5e:	5852      	ldr	r2, [r2, r1]
 8005b60:	0010      	movs	r0, r2
 8005b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e012      	b.n	8005b8c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 f9e1 	bl	8005f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6e:	e00d      	b.n	8005b8c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 f9dc 	bl	8005f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	e008      	b.n	8005b8c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f000 f9d7 	bl	8005f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2290      	movs	r2, #144	; 0x90
 8005b86:	2100      	movs	r1, #0
 8005b88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b8a:	e1b9      	b.n	8005f00 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	46c0      	nop			; (mov r8, r8)
    return;
 8005b8e:	e1b7      	b.n	8005f00 <HAL_UART_IRQHandler+0x62c>
 8005b90:	0000080f 	.word	0x0000080f
 8005b94:	10000001 	.word	0x10000001
 8005b98:	04000120 	.word	0x04000120
 8005b9c:	080068a9 	.word	0x080068a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d000      	beq.n	8005baa <HAL_UART_IRQHandler+0x2d6>
 8005ba8:	e13e      	b.n	8005e28 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005baa:	23a4      	movs	r3, #164	; 0xa4
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d100      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x2e4>
 8005bb6:	e137      	b.n	8005e28 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bb8:	23a0      	movs	r3, #160	; 0xa0
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d100      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x2f2>
 8005bc4:	e130      	b.n	8005e28 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2210      	movs	r2, #16
 8005bcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2240      	movs	r2, #64	; 0x40
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	d000      	beq.n	8005bde <HAL_UART_IRQHandler+0x30a>
 8005bdc:	e0a4      	b.n	8005d28 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	589b      	ldr	r3, [r3, r2]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	217e      	movs	r1, #126	; 0x7e
 8005bea:	187b      	adds	r3, r7, r1
 8005bec:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005bee:	187b      	adds	r3, r7, r1
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d100      	bne.n	8005bf8 <HAL_UART_IRQHandler+0x324>
 8005bf6:	e185      	b.n	8005f04 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	225c      	movs	r2, #92	; 0x5c
 8005bfc:	5a9b      	ldrh	r3, [r3, r2]
 8005bfe:	187a      	adds	r2, r7, r1
 8005c00:	8812      	ldrh	r2, [r2, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d300      	bcc.n	8005c08 <HAL_UART_IRQHandler+0x334>
 8005c06:	e17d      	b.n	8005f04 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	187a      	adds	r2, r7, r1
 8005c0c:	215e      	movs	r1, #94	; 0x5e
 8005c0e:	8812      	ldrh	r2, [r2, #0]
 8005c10:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2280      	movs	r2, #128	; 0x80
 8005c16:	589b      	ldr	r3, [r3, r2]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d170      	bne.n	8005d04 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c22:	f3ef 8310 	mrs	r3, PRIMASK
 8005c26:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c32:	f383 8810 	msr	PRIMASK, r3
}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	49b4      	ldr	r1, [pc, #720]	; (8005f14 <HAL_UART_IRQHandler+0x640>)
 8005c44:	400a      	ands	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	f383 8810 	msr	PRIMASK, r3
}
 8005c52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c54:	f3ef 8310 	mrs	r3, PRIMASK
 8005c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5c:	677b      	str	r3, [r7, #116]	; 0x74
 8005c5e:	2301      	movs	r3, #1
 8005c60:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c64:	f383 8810 	msr	PRIMASK, r3
}
 8005c68:	46c0      	nop			; (mov r8, r8)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2101      	movs	r1, #1
 8005c76:	438a      	bics	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]
 8005c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c7c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c80:	f383 8810 	msr	PRIMASK, r3
}
 8005c84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c86:	f3ef 8310 	mrs	r3, PRIMASK
 8005c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c90:	2301      	movs	r3, #1
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c96:	f383 8810 	msr	PRIMASK, r3
}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2140      	movs	r1, #64	; 0x40
 8005ca8:	438a      	bics	r2, r1
 8005caa:	609a      	str	r2, [r3, #8]
 8005cac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cae:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb2:	f383 8810 	msr	PRIMASK, r3
}
 8005cb6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	228c      	movs	r2, #140	; 0x8c
 8005cbc:	2120      	movs	r1, #32
 8005cbe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cca:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cd6:	f383 8810 	msr	PRIMASK, r3
}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2110      	movs	r1, #16
 8005ce8:	438a      	bics	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cee:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf2:	f383 8810 	msr	PRIMASK, r3
}
 8005cf6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2280      	movs	r2, #128	; 0x80
 8005cfc:	589b      	ldr	r3, [r3, r2]
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f7fe f980 	bl	8004004 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	225c      	movs	r2, #92	; 0x5c
 8005d0e:	5a9a      	ldrh	r2, [r3, r2]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	215e      	movs	r1, #94	; 0x5e
 8005d14:	5a5b      	ldrh	r3, [r3, r1]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	0011      	movs	r1, r2
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 f90d 	bl	8005f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d26:	e0ed      	b.n	8005f04 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	225c      	movs	r2, #92	; 0x5c
 8005d2c:	5a99      	ldrh	r1, [r3, r2]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	225e      	movs	r2, #94	; 0x5e
 8005d32:	5a9b      	ldrh	r3, [r3, r2]
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	208e      	movs	r0, #142	; 0x8e
 8005d38:	183b      	adds	r3, r7, r0
 8005d3a:	1a8a      	subs	r2, r1, r2
 8005d3c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	225e      	movs	r2, #94	; 0x5e
 8005d42:	5a9b      	ldrh	r3, [r3, r2]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d100      	bne.n	8005d4c <HAL_UART_IRQHandler+0x478>
 8005d4a:	e0dd      	b.n	8005f08 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005d4c:	183b      	adds	r3, r7, r0
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d100      	bne.n	8005d56 <HAL_UART_IRQHandler+0x482>
 8005d54:	e0d8      	b.n	8005f08 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d56:	f3ef 8310 	mrs	r3, PRIMASK
 8005d5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d5e:	2488      	movs	r4, #136	; 0x88
 8005d60:	193a      	adds	r2, r7, r4
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	2301      	movs	r3, #1
 8005d66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f383 8810 	msr	PRIMASK, r3
}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4967      	ldr	r1, [pc, #412]	; (8005f18 <HAL_UART_IRQHandler+0x644>)
 8005d7c:	400a      	ands	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	193b      	adds	r3, r7, r4
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f383 8810 	msr	PRIMASK, r3
}
 8005d8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d92:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d94:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d96:	2484      	movs	r4, #132	; 0x84
 8005d98:	193a      	adds	r2, r7, r4
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f383 8810 	msr	PRIMASK, r3
}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	495a      	ldr	r1, [pc, #360]	; (8005f1c <HAL_UART_IRQHandler+0x648>)
 8005db4:	400a      	ands	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]
 8005db8:	193b      	adds	r3, r7, r4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	f383 8810 	msr	PRIMASK, r3
}
 8005dc4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	228c      	movs	r2, #140	; 0x8c
 8005dca:	2120      	movs	r1, #32
 8005dcc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dda:	f3ef 8310 	mrs	r3, PRIMASK
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de2:	2480      	movs	r4, #128	; 0x80
 8005de4:	193a      	adds	r2, r7, r4
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	2301      	movs	r3, #1
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	f383 8810 	msr	PRIMASK, r3
}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2110      	movs	r1, #16
 8005e00:	438a      	bics	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	193b      	adds	r3, r7, r4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e18:	183b      	adds	r3, r7, r0
 8005e1a:	881a      	ldrh	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	0011      	movs	r1, r2
 8005e20:	0018      	movs	r0, r3
 8005e22:	f000 f88d 	bl	8005f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e26:	e06f      	b.n	8005f08 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e28:	23a4      	movs	r3, #164	; 0xa4
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	2380      	movs	r3, #128	; 0x80
 8005e30:	035b      	lsls	r3, r3, #13
 8005e32:	4013      	ands	r3, r2
 8005e34:	d010      	beq.n	8005e58 <HAL_UART_IRQHandler+0x584>
 8005e36:	239c      	movs	r3, #156	; 0x9c
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	03db      	lsls	r3, r3, #15
 8005e40:	4013      	ands	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2280      	movs	r2, #128	; 0x80
 8005e4a:	0352      	lsls	r2, r2, #13
 8005e4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	0018      	movs	r0, r3
 8005e52:	f000 fd6c 	bl	800692e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e56:	e05a      	b.n	8005f0e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e58:	23a4      	movs	r3, #164	; 0xa4
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2280      	movs	r2, #128	; 0x80
 8005e60:	4013      	ands	r3, r2
 8005e62:	d016      	beq.n	8005e92 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e64:	23a0      	movs	r3, #160	; 0xa0
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2280      	movs	r2, #128	; 0x80
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d106      	bne.n	8005e7e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e70:	239c      	movs	r3, #156	; 0x9c
 8005e72:	18fb      	adds	r3, r7, r3
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	041b      	lsls	r3, r3, #16
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d042      	beq.n	8005f0c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	0010      	movs	r0, r2
 8005e8e:	4798      	blx	r3
    }
    return;
 8005e90:	e03c      	b.n	8005f0c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e92:	23a4      	movs	r3, #164	; 0xa4
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2240      	movs	r2, #64	; 0x40
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d00a      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x5e0>
 8005e9e:	23a0      	movs	r3, #160	; 0xa0
 8005ea0:	18fb      	adds	r3, r7, r3
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2240      	movs	r2, #64	; 0x40
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d004      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	0018      	movs	r0, r3
 8005eae:	f000 fd12 	bl	80068d6 <UART_EndTransmit_IT>
    return;
 8005eb2:	e02c      	b.n	8005f0e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005eb4:	23a4      	movs	r3, #164	; 0xa4
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	041b      	lsls	r3, r3, #16
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d00b      	beq.n	8005eda <HAL_UART_IRQHandler+0x606>
 8005ec2:	23a0      	movs	r3, #160	; 0xa0
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	05db      	lsls	r3, r3, #23
 8005ecc:	4013      	ands	r3, r2
 8005ece:	d004      	beq.n	8005eda <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 fd3b 	bl	800694e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ed8:	e019      	b.n	8005f0e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005eda:	23a4      	movs	r3, #164	; 0xa4
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	045b      	lsls	r3, r3, #17
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d012      	beq.n	8005f0e <HAL_UART_IRQHandler+0x63a>
 8005ee8:	23a0      	movs	r3, #160	; 0xa0
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da0d      	bge.n	8005f0e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f000 fd22 	bl	800693e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005efa:	e008      	b.n	8005f0e <HAL_UART_IRQHandler+0x63a>
      return;
 8005efc:	46c0      	nop			; (mov r8, r8)
 8005efe:	e006      	b.n	8005f0e <HAL_UART_IRQHandler+0x63a>
    return;
 8005f00:	46c0      	nop			; (mov r8, r8)
 8005f02:	e004      	b.n	8005f0e <HAL_UART_IRQHandler+0x63a>
      return;
 8005f04:	46c0      	nop			; (mov r8, r8)
 8005f06:	e002      	b.n	8005f0e <HAL_UART_IRQHandler+0x63a>
      return;
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	e000      	b.n	8005f0e <HAL_UART_IRQHandler+0x63a>
    return;
 8005f0c:	46c0      	nop			; (mov r8, r8)
  }
}
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b02a      	add	sp, #168	; 0xa8
 8005f12:	bdb0      	pop	{r4, r5, r7, pc}
 8005f14:	fffffeff 	.word	0xfffffeff
 8005f18:	fffffedf 	.word	0xfffffedf
 8005f1c:	effffffe 	.word	0xeffffffe

08005f20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f28:	46c0      	nop			; (mov r8, r8)
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b002      	add	sp, #8
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f38:	46c0      	nop			; (mov r8, r8)
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	b002      	add	sp, #8
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	000a      	movs	r2, r1
 8005f4a:	1cbb      	adds	r3, r7, #2
 8005f4c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b002      	add	sp, #8
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f58:	b5b0      	push	{r4, r5, r7, lr}
 8005f5a:	b090      	sub	sp, #64	; 0x40
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f60:	231a      	movs	r3, #26
 8005f62:	2220      	movs	r2, #32
 8005f64:	189b      	adds	r3, r3, r2
 8005f66:	19db      	adds	r3, r3, r7
 8005f68:	2200      	movs	r2, #0
 8005f6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	431a      	orrs	r2, r3
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4ac4      	ldr	r2, [pc, #784]	; (800629c <UART_SetConfig+0x344>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	0019      	movs	r1, r3
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f96:	430b      	orrs	r3, r1
 8005f98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4abf      	ldr	r2, [pc, #764]	; (80062a0 <UART_SetConfig+0x348>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	68d9      	ldr	r1, [r3, #12]
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	0003      	movs	r3, r0
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4ab9      	ldr	r2, [pc, #740]	; (80062a4 <UART_SetConfig+0x34c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	4ab4      	ldr	r2, [pc, #720]	; (80062a8 <UART_SetConfig+0x350>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	0019      	movs	r1, r3
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	220f      	movs	r2, #15
 8005fec:	4393      	bics	r3, r2
 8005fee:	0018      	movs	r0, r3
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4aaa      	ldr	r2, [pc, #680]	; (80062ac <UART_SetConfig+0x354>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d131      	bne.n	800606c <UART_SetConfig+0x114>
 8006008:	4ba9      	ldr	r3, [pc, #676]	; (80062b0 <UART_SetConfig+0x358>)
 800600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600c:	2203      	movs	r2, #3
 800600e:	4013      	ands	r3, r2
 8006010:	2b03      	cmp	r3, #3
 8006012:	d01d      	beq.n	8006050 <UART_SetConfig+0xf8>
 8006014:	d823      	bhi.n	800605e <UART_SetConfig+0x106>
 8006016:	2b02      	cmp	r3, #2
 8006018:	d00c      	beq.n	8006034 <UART_SetConfig+0xdc>
 800601a:	d820      	bhi.n	800605e <UART_SetConfig+0x106>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <UART_SetConfig+0xce>
 8006020:	2b01      	cmp	r3, #1
 8006022:	d00e      	beq.n	8006042 <UART_SetConfig+0xea>
 8006024:	e01b      	b.n	800605e <UART_SetConfig+0x106>
 8006026:	231b      	movs	r3, #27
 8006028:	2220      	movs	r2, #32
 800602a:	189b      	adds	r3, r3, r2
 800602c:	19db      	adds	r3, r3, r7
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e071      	b.n	8006118 <UART_SetConfig+0x1c0>
 8006034:	231b      	movs	r3, #27
 8006036:	2220      	movs	r2, #32
 8006038:	189b      	adds	r3, r3, r2
 800603a:	19db      	adds	r3, r3, r7
 800603c:	2202      	movs	r2, #2
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	e06a      	b.n	8006118 <UART_SetConfig+0x1c0>
 8006042:	231b      	movs	r3, #27
 8006044:	2220      	movs	r2, #32
 8006046:	189b      	adds	r3, r3, r2
 8006048:	19db      	adds	r3, r3, r7
 800604a:	2204      	movs	r2, #4
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e063      	b.n	8006118 <UART_SetConfig+0x1c0>
 8006050:	231b      	movs	r3, #27
 8006052:	2220      	movs	r2, #32
 8006054:	189b      	adds	r3, r3, r2
 8006056:	19db      	adds	r3, r3, r7
 8006058:	2208      	movs	r2, #8
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e05c      	b.n	8006118 <UART_SetConfig+0x1c0>
 800605e:	231b      	movs	r3, #27
 8006060:	2220      	movs	r2, #32
 8006062:	189b      	adds	r3, r3, r2
 8006064:	19db      	adds	r3, r3, r7
 8006066:	2210      	movs	r2, #16
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e055      	b.n	8006118 <UART_SetConfig+0x1c0>
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a90      	ldr	r2, [pc, #576]	; (80062b4 <UART_SetConfig+0x35c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d106      	bne.n	8006084 <UART_SetConfig+0x12c>
 8006076:	231b      	movs	r3, #27
 8006078:	2220      	movs	r2, #32
 800607a:	189b      	adds	r3, r3, r2
 800607c:	19db      	adds	r3, r3, r7
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	e049      	b.n	8006118 <UART_SetConfig+0x1c0>
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a86      	ldr	r2, [pc, #536]	; (80062a4 <UART_SetConfig+0x34c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d13e      	bne.n	800610c <UART_SetConfig+0x1b4>
 800608e:	4b88      	ldr	r3, [pc, #544]	; (80062b0 <UART_SetConfig+0x358>)
 8006090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006092:	23c0      	movs	r3, #192	; 0xc0
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	4013      	ands	r3, r2
 8006098:	22c0      	movs	r2, #192	; 0xc0
 800609a:	0112      	lsls	r2, r2, #4
 800609c:	4293      	cmp	r3, r2
 800609e:	d027      	beq.n	80060f0 <UART_SetConfig+0x198>
 80060a0:	22c0      	movs	r2, #192	; 0xc0
 80060a2:	0112      	lsls	r2, r2, #4
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d82a      	bhi.n	80060fe <UART_SetConfig+0x1a6>
 80060a8:	2280      	movs	r2, #128	; 0x80
 80060aa:	0112      	lsls	r2, r2, #4
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d011      	beq.n	80060d4 <UART_SetConfig+0x17c>
 80060b0:	2280      	movs	r2, #128	; 0x80
 80060b2:	0112      	lsls	r2, r2, #4
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d822      	bhi.n	80060fe <UART_SetConfig+0x1a6>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d004      	beq.n	80060c6 <UART_SetConfig+0x16e>
 80060bc:	2280      	movs	r2, #128	; 0x80
 80060be:	00d2      	lsls	r2, r2, #3
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00e      	beq.n	80060e2 <UART_SetConfig+0x18a>
 80060c4:	e01b      	b.n	80060fe <UART_SetConfig+0x1a6>
 80060c6:	231b      	movs	r3, #27
 80060c8:	2220      	movs	r2, #32
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	19db      	adds	r3, r3, r7
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	e021      	b.n	8006118 <UART_SetConfig+0x1c0>
 80060d4:	231b      	movs	r3, #27
 80060d6:	2220      	movs	r2, #32
 80060d8:	189b      	adds	r3, r3, r2
 80060da:	19db      	adds	r3, r3, r7
 80060dc:	2202      	movs	r2, #2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	e01a      	b.n	8006118 <UART_SetConfig+0x1c0>
 80060e2:	231b      	movs	r3, #27
 80060e4:	2220      	movs	r2, #32
 80060e6:	189b      	adds	r3, r3, r2
 80060e8:	19db      	adds	r3, r3, r7
 80060ea:	2204      	movs	r2, #4
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	e013      	b.n	8006118 <UART_SetConfig+0x1c0>
 80060f0:	231b      	movs	r3, #27
 80060f2:	2220      	movs	r2, #32
 80060f4:	189b      	adds	r3, r3, r2
 80060f6:	19db      	adds	r3, r3, r7
 80060f8:	2208      	movs	r2, #8
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	e00c      	b.n	8006118 <UART_SetConfig+0x1c0>
 80060fe:	231b      	movs	r3, #27
 8006100:	2220      	movs	r2, #32
 8006102:	189b      	adds	r3, r3, r2
 8006104:	19db      	adds	r3, r3, r7
 8006106:	2210      	movs	r2, #16
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	e005      	b.n	8006118 <UART_SetConfig+0x1c0>
 800610c:	231b      	movs	r3, #27
 800610e:	2220      	movs	r2, #32
 8006110:	189b      	adds	r3, r3, r2
 8006112:	19db      	adds	r3, r3, r7
 8006114:	2210      	movs	r2, #16
 8006116:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a61      	ldr	r2, [pc, #388]	; (80062a4 <UART_SetConfig+0x34c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d000      	beq.n	8006124 <UART_SetConfig+0x1cc>
 8006122:	e092      	b.n	800624a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006124:	231b      	movs	r3, #27
 8006126:	2220      	movs	r2, #32
 8006128:	189b      	adds	r3, r3, r2
 800612a:	19db      	adds	r3, r3, r7
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b08      	cmp	r3, #8
 8006130:	d015      	beq.n	800615e <UART_SetConfig+0x206>
 8006132:	dc18      	bgt.n	8006166 <UART_SetConfig+0x20e>
 8006134:	2b04      	cmp	r3, #4
 8006136:	d00d      	beq.n	8006154 <UART_SetConfig+0x1fc>
 8006138:	dc15      	bgt.n	8006166 <UART_SetConfig+0x20e>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <UART_SetConfig+0x1ec>
 800613e:	2b02      	cmp	r3, #2
 8006140:	d005      	beq.n	800614e <UART_SetConfig+0x1f6>
 8006142:	e010      	b.n	8006166 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006144:	f7fe ffa8 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 8006148:	0003      	movs	r3, r0
 800614a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800614c:	e014      	b.n	8006178 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800614e:	4b5a      	ldr	r3, [pc, #360]	; (80062b8 <UART_SetConfig+0x360>)
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006152:	e011      	b.n	8006178 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006154:	f7fe ff14 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8006158:	0003      	movs	r3, r0
 800615a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800615c:	e00c      	b.n	8006178 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615e:	2380      	movs	r3, #128	; 0x80
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006164:	e008      	b.n	8006178 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800616a:	231a      	movs	r3, #26
 800616c:	2220      	movs	r2, #32
 800616e:	189b      	adds	r3, r3, r2
 8006170:	19db      	adds	r3, r3, r7
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
        break;
 8006176:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617a:	2b00      	cmp	r3, #0
 800617c:	d100      	bne.n	8006180 <UART_SetConfig+0x228>
 800617e:	e147      	b.n	8006410 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006184:	4b4d      	ldr	r3, [pc, #308]	; (80062bc <UART_SetConfig+0x364>)
 8006186:	0052      	lsls	r2, r2, #1
 8006188:	5ad3      	ldrh	r3, [r2, r3]
 800618a:	0019      	movs	r1, r3
 800618c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800618e:	f7f9 ffd5 	bl	800013c <__udivsi3>
 8006192:	0003      	movs	r3, r0
 8006194:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	0013      	movs	r3, r2
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	189b      	adds	r3, r3, r2
 80061a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d305      	bcc.n	80061b2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d906      	bls.n	80061c0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80061b2:	231a      	movs	r3, #26
 80061b4:	2220      	movs	r2, #32
 80061b6:	189b      	adds	r3, r3, r2
 80061b8:	19db      	adds	r3, r3, r7
 80061ba:	2201      	movs	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	e127      	b.n	8006410 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061cc:	4b3b      	ldr	r3, [pc, #236]	; (80062bc <UART_SetConfig+0x364>)
 80061ce:	0052      	lsls	r2, r2, #1
 80061d0:	5ad3      	ldrh	r3, [r2, r3]
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	69b8      	ldr	r0, [r7, #24]
 80061de:	69f9      	ldr	r1, [r7, #28]
 80061e0:	f7fa f960 	bl	80004a4 <__aeabi_uldivmod>
 80061e4:	0002      	movs	r2, r0
 80061e6:	000b      	movs	r3, r1
 80061e8:	0e11      	lsrs	r1, r2, #24
 80061ea:	021d      	lsls	r5, r3, #8
 80061ec:	430d      	orrs	r5, r1
 80061ee:	0214      	lsls	r4, r2, #8
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	085b      	lsrs	r3, r3, #1
 80061f6:	60bb      	str	r3, [r7, #8]
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68b8      	ldr	r0, [r7, #8]
 80061fe:	68f9      	ldr	r1, [r7, #12]
 8006200:	1900      	adds	r0, r0, r4
 8006202:	4169      	adcs	r1, r5
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	603b      	str	r3, [r7, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f7fa f947 	bl	80004a4 <__aeabi_uldivmod>
 8006216:	0002      	movs	r2, r0
 8006218:	000b      	movs	r3, r1
 800621a:	0013      	movs	r3, r2
 800621c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800621e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006220:	23c0      	movs	r3, #192	; 0xc0
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	429a      	cmp	r2, r3
 8006226:	d309      	bcc.n	800623c <UART_SetConfig+0x2e4>
 8006228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	035b      	lsls	r3, r3, #13
 800622e:	429a      	cmp	r2, r3
 8006230:	d204      	bcs.n	800623c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006238:	60da      	str	r2, [r3, #12]
 800623a:	e0e9      	b.n	8006410 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800623c:	231a      	movs	r3, #26
 800623e:	2220      	movs	r2, #32
 8006240:	189b      	adds	r3, r3, r2
 8006242:	19db      	adds	r3, r3, r7
 8006244:	2201      	movs	r2, #1
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	e0e2      	b.n	8006410 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	69da      	ldr	r2, [r3, #28]
 800624e:	2380      	movs	r3, #128	; 0x80
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	429a      	cmp	r2, r3
 8006254:	d000      	beq.n	8006258 <UART_SetConfig+0x300>
 8006256:	e083      	b.n	8006360 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006258:	231b      	movs	r3, #27
 800625a:	2220      	movs	r2, #32
 800625c:	189b      	adds	r3, r3, r2
 800625e:	19db      	adds	r3, r3, r7
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b08      	cmp	r3, #8
 8006264:	d015      	beq.n	8006292 <UART_SetConfig+0x33a>
 8006266:	dc2b      	bgt.n	80062c0 <UART_SetConfig+0x368>
 8006268:	2b04      	cmp	r3, #4
 800626a:	d00d      	beq.n	8006288 <UART_SetConfig+0x330>
 800626c:	dc28      	bgt.n	80062c0 <UART_SetConfig+0x368>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <UART_SetConfig+0x320>
 8006272:	2b02      	cmp	r3, #2
 8006274:	d005      	beq.n	8006282 <UART_SetConfig+0x32a>
 8006276:	e023      	b.n	80062c0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006278:	f7fe ff0e 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 800627c:	0003      	movs	r3, r0
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006280:	e027      	b.n	80062d2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006282:	4b0d      	ldr	r3, [pc, #52]	; (80062b8 <UART_SetConfig+0x360>)
 8006284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006286:	e024      	b.n	80062d2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006288:	f7fe fe7a 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 800628c:	0003      	movs	r3, r0
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006290:	e01f      	b.n	80062d2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006292:	2380      	movs	r3, #128	; 0x80
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006298:	e01b      	b.n	80062d2 <UART_SetConfig+0x37a>
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	cfff69f3 	.word	0xcfff69f3
 80062a0:	ffffcfff 	.word	0xffffcfff
 80062a4:	40008000 	.word	0x40008000
 80062a8:	11fff4ff 	.word	0x11fff4ff
 80062ac:	40013800 	.word	0x40013800
 80062b0:	40021000 	.word	0x40021000
 80062b4:	40004400 	.word	0x40004400
 80062b8:	00f42400 	.word	0x00f42400
 80062bc:	0800b740 	.word	0x0800b740
      default:
        pclk = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80062c4:	231a      	movs	r3, #26
 80062c6:	2220      	movs	r2, #32
 80062c8:	189b      	adds	r3, r3, r2
 80062ca:	19db      	adds	r3, r3, r7
 80062cc:	2201      	movs	r2, #1
 80062ce:	701a      	strb	r2, [r3, #0]
        break;
 80062d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d100      	bne.n	80062da <UART_SetConfig+0x382>
 80062d8:	e09a      	b.n	8006410 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062de:	4b58      	ldr	r3, [pc, #352]	; (8006440 <UART_SetConfig+0x4e8>)
 80062e0:	0052      	lsls	r2, r2, #1
 80062e2:	5ad3      	ldrh	r3, [r2, r3]
 80062e4:	0019      	movs	r1, r3
 80062e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80062e8:	f7f9 ff28 	bl	800013c <__udivsi3>
 80062ec:	0003      	movs	r3, r0
 80062ee:	005a      	lsls	r2, r3, #1
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	18d2      	adds	r2, r2, r3
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	0019      	movs	r1, r3
 80062fe:	0010      	movs	r0, r2
 8006300:	f7f9 ff1c 	bl	800013c <__udivsi3>
 8006304:	0003      	movs	r3, r0
 8006306:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	2b0f      	cmp	r3, #15
 800630c:	d921      	bls.n	8006352 <UART_SetConfig+0x3fa>
 800630e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006310:	2380      	movs	r3, #128	; 0x80
 8006312:	025b      	lsls	r3, r3, #9
 8006314:	429a      	cmp	r2, r3
 8006316:	d21c      	bcs.n	8006352 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	b29a      	uxth	r2, r3
 800631c:	200e      	movs	r0, #14
 800631e:	2420      	movs	r4, #32
 8006320:	1903      	adds	r3, r0, r4
 8006322:	19db      	adds	r3, r3, r7
 8006324:	210f      	movs	r1, #15
 8006326:	438a      	bics	r2, r1
 8006328:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	b29b      	uxth	r3, r3
 8006330:	2207      	movs	r2, #7
 8006332:	4013      	ands	r3, r2
 8006334:	b299      	uxth	r1, r3
 8006336:	1903      	adds	r3, r0, r4
 8006338:	19db      	adds	r3, r3, r7
 800633a:	1902      	adds	r2, r0, r4
 800633c:	19d2      	adds	r2, r2, r7
 800633e:	8812      	ldrh	r2, [r2, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	1902      	adds	r2, r0, r4
 800634a:	19d2      	adds	r2, r2, r7
 800634c:	8812      	ldrh	r2, [r2, #0]
 800634e:	60da      	str	r2, [r3, #12]
 8006350:	e05e      	b.n	8006410 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006352:	231a      	movs	r3, #26
 8006354:	2220      	movs	r2, #32
 8006356:	189b      	adds	r3, r3, r2
 8006358:	19db      	adds	r3, r3, r7
 800635a:	2201      	movs	r2, #1
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	e057      	b.n	8006410 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006360:	231b      	movs	r3, #27
 8006362:	2220      	movs	r2, #32
 8006364:	189b      	adds	r3, r3, r2
 8006366:	19db      	adds	r3, r3, r7
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b08      	cmp	r3, #8
 800636c:	d015      	beq.n	800639a <UART_SetConfig+0x442>
 800636e:	dc18      	bgt.n	80063a2 <UART_SetConfig+0x44a>
 8006370:	2b04      	cmp	r3, #4
 8006372:	d00d      	beq.n	8006390 <UART_SetConfig+0x438>
 8006374:	dc15      	bgt.n	80063a2 <UART_SetConfig+0x44a>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <UART_SetConfig+0x428>
 800637a:	2b02      	cmp	r3, #2
 800637c:	d005      	beq.n	800638a <UART_SetConfig+0x432>
 800637e:	e010      	b.n	80063a2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006380:	f7fe fe8a 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 8006384:	0003      	movs	r3, r0
 8006386:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006388:	e014      	b.n	80063b4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800638a:	4b2e      	ldr	r3, [pc, #184]	; (8006444 <UART_SetConfig+0x4ec>)
 800638c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800638e:	e011      	b.n	80063b4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006390:	f7fe fdf6 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8006394:	0003      	movs	r3, r0
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006398:	e00c      	b.n	80063b4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639a:	2380      	movs	r3, #128	; 0x80
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063a0:	e008      	b.n	80063b4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80063a6:	231a      	movs	r3, #26
 80063a8:	2220      	movs	r2, #32
 80063aa:	189b      	adds	r3, r3, r2
 80063ac:	19db      	adds	r3, r3, r7
 80063ae:	2201      	movs	r2, #1
 80063b0:	701a      	strb	r2, [r3, #0]
        break;
 80063b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80063b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d02a      	beq.n	8006410 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063be:	4b20      	ldr	r3, [pc, #128]	; (8006440 <UART_SetConfig+0x4e8>)
 80063c0:	0052      	lsls	r2, r2, #1
 80063c2:	5ad3      	ldrh	r3, [r2, r3]
 80063c4:	0019      	movs	r1, r3
 80063c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80063c8:	f7f9 feb8 	bl	800013c <__udivsi3>
 80063cc:	0003      	movs	r3, r0
 80063ce:	001a      	movs	r2, r3
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	18d2      	adds	r2, r2, r3
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	0019      	movs	r1, r3
 80063de:	0010      	movs	r0, r2
 80063e0:	f7f9 feac 	bl	800013c <__udivsi3>
 80063e4:	0003      	movs	r3, r0
 80063e6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	2b0f      	cmp	r3, #15
 80063ec:	d90a      	bls.n	8006404 <UART_SetConfig+0x4ac>
 80063ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	025b      	lsls	r3, r3, #9
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d205      	bcs.n	8006404 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60da      	str	r2, [r3, #12]
 8006402:	e005      	b.n	8006410 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006404:	231a      	movs	r3, #26
 8006406:	2220      	movs	r2, #32
 8006408:	189b      	adds	r3, r3, r2
 800640a:	19db      	adds	r3, r3, r7
 800640c:	2201      	movs	r2, #1
 800640e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	226a      	movs	r2, #106	; 0x6a
 8006414:	2101      	movs	r1, #1
 8006416:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	2268      	movs	r2, #104	; 0x68
 800641c:	2101      	movs	r1, #1
 800641e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	2200      	movs	r2, #0
 8006424:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	2200      	movs	r2, #0
 800642a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800642c:	231a      	movs	r3, #26
 800642e:	2220      	movs	r2, #32
 8006430:	189b      	adds	r3, r3, r2
 8006432:	19db      	adds	r3, r3, r7
 8006434:	781b      	ldrb	r3, [r3, #0]
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b010      	add	sp, #64	; 0x40
 800643c:	bdb0      	pop	{r4, r5, r7, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	0800b740 	.word	0x0800b740
 8006444:	00f42400 	.word	0x00f42400

08006448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	2201      	movs	r2, #1
 8006456:	4013      	ands	r3, r2
 8006458:	d00b      	beq.n	8006472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4a4a      	ldr	r2, [pc, #296]	; (800658c <UART_AdvFeatureConfig+0x144>)
 8006462:	4013      	ands	r3, r2
 8006464:	0019      	movs	r1, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	2202      	movs	r2, #2
 8006478:	4013      	ands	r3, r2
 800647a:	d00b      	beq.n	8006494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4a43      	ldr	r2, [pc, #268]	; (8006590 <UART_AdvFeatureConfig+0x148>)
 8006484:	4013      	ands	r3, r2
 8006486:	0019      	movs	r1, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	2204      	movs	r2, #4
 800649a:	4013      	ands	r3, r2
 800649c:	d00b      	beq.n	80064b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	4a3b      	ldr	r2, [pc, #236]	; (8006594 <UART_AdvFeatureConfig+0x14c>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	0019      	movs	r1, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ba:	2208      	movs	r2, #8
 80064bc:	4013      	ands	r3, r2
 80064be:	d00b      	beq.n	80064d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	4a34      	ldr	r2, [pc, #208]	; (8006598 <UART_AdvFeatureConfig+0x150>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	0019      	movs	r1, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	2210      	movs	r2, #16
 80064de:	4013      	ands	r3, r2
 80064e0:	d00b      	beq.n	80064fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	4a2c      	ldr	r2, [pc, #176]	; (800659c <UART_AdvFeatureConfig+0x154>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	0019      	movs	r1, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	2220      	movs	r2, #32
 8006500:	4013      	ands	r3, r2
 8006502:	d00b      	beq.n	800651c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	4a25      	ldr	r2, [pc, #148]	; (80065a0 <UART_AdvFeatureConfig+0x158>)
 800650c:	4013      	ands	r3, r2
 800650e:	0019      	movs	r1, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	2240      	movs	r2, #64	; 0x40
 8006522:	4013      	ands	r3, r2
 8006524:	d01d      	beq.n	8006562 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <UART_AdvFeatureConfig+0x15c>)
 800652e:	4013      	ands	r3, r2
 8006530:	0019      	movs	r1, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	035b      	lsls	r3, r3, #13
 8006546:	429a      	cmp	r2, r3
 8006548:	d10b      	bne.n	8006562 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <UART_AdvFeatureConfig+0x160>)
 8006552:	4013      	ands	r3, r2
 8006554:	0019      	movs	r1, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	2280      	movs	r2, #128	; 0x80
 8006568:	4013      	ands	r3, r2
 800656a:	d00b      	beq.n	8006584 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4a0e      	ldr	r2, [pc, #56]	; (80065ac <UART_AdvFeatureConfig+0x164>)
 8006574:	4013      	ands	r3, r2
 8006576:	0019      	movs	r1, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	605a      	str	r2, [r3, #4]
  }
}
 8006584:	46c0      	nop			; (mov r8, r8)
 8006586:	46bd      	mov	sp, r7
 8006588:	b002      	add	sp, #8
 800658a:	bd80      	pop	{r7, pc}
 800658c:	fffdffff 	.word	0xfffdffff
 8006590:	fffeffff 	.word	0xfffeffff
 8006594:	fffbffff 	.word	0xfffbffff
 8006598:	ffff7fff 	.word	0xffff7fff
 800659c:	ffffefff 	.word	0xffffefff
 80065a0:	ffffdfff 	.word	0xffffdfff
 80065a4:	ffefffff 	.word	0xffefffff
 80065a8:	ff9fffff 	.word	0xff9fffff
 80065ac:	fff7ffff 	.word	0xfff7ffff

080065b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2290      	movs	r2, #144	; 0x90
 80065bc:	2100      	movs	r1, #0
 80065be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065c0:	f7fc ff30 	bl	8003424 <HAL_GetTick>
 80065c4:	0003      	movs	r3, r0
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2208      	movs	r2, #8
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d10c      	bne.n	80065f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2280      	movs	r2, #128	; 0x80
 80065da:	0391      	lsls	r1, r2, #14
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4a1a      	ldr	r2, [pc, #104]	; (8006648 <UART_CheckIdleState+0x98>)
 80065e0:	9200      	str	r2, [sp, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f000 f832 	bl	800664c <UART_WaitOnFlagUntilTimeout>
 80065e8:	1e03      	subs	r3, r0, #0
 80065ea:	d001      	beq.n	80065f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e026      	b.n	800663e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2204      	movs	r2, #4
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d10c      	bne.n	8006618 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2280      	movs	r2, #128	; 0x80
 8006602:	03d1      	lsls	r1, r2, #15
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4a10      	ldr	r2, [pc, #64]	; (8006648 <UART_CheckIdleState+0x98>)
 8006608:	9200      	str	r2, [sp, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	f000 f81e 	bl	800664c <UART_WaitOnFlagUntilTimeout>
 8006610:	1e03      	subs	r3, r0, #0
 8006612:	d001      	beq.n	8006618 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e012      	b.n	800663e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2288      	movs	r2, #136	; 0x88
 800661c:	2120      	movs	r1, #32
 800661e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	228c      	movs	r2, #140	; 0x8c
 8006624:	2120      	movs	r1, #32
 8006626:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2284      	movs	r2, #132	; 0x84
 8006638:	2100      	movs	r1, #0
 800663a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	0018      	movs	r0, r3
 8006640:	46bd      	mov	sp, r7
 8006642:	b004      	add	sp, #16
 8006644:	bd80      	pop	{r7, pc}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	01ffffff 	.word	0x01ffffff

0800664c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b094      	sub	sp, #80	; 0x50
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	1dfb      	adds	r3, r7, #7
 800665a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800665c:	e0a7      	b.n	80067ae <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006660:	3301      	adds	r3, #1
 8006662:	d100      	bne.n	8006666 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006664:	e0a3      	b.n	80067ae <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006666:	f7fc fedd 	bl	8003424 <HAL_GetTick>
 800666a:	0002      	movs	r2, r0
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006672:	429a      	cmp	r2, r3
 8006674:	d302      	bcc.n	800667c <UART_WaitOnFlagUntilTimeout+0x30>
 8006676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006678:	2b00      	cmp	r3, #0
 800667a:	d13f      	bne.n	80066fc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800667c:	f3ef 8310 	mrs	r3, PRIMASK
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006684:	647b      	str	r3, [r7, #68]	; 0x44
 8006686:	2301      	movs	r3, #1
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	f383 8810 	msr	PRIMASK, r3
}
 8006690:	46c0      	nop			; (mov r8, r8)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	494e      	ldr	r1, [pc, #312]	; (80067d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800669e:	400a      	ands	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f383 8810 	msr	PRIMASK, r3
}
 80066ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ae:	f3ef 8310 	mrs	r3, PRIMASK
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80066b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b6:	643b      	str	r3, [r7, #64]	; 0x40
 80066b8:	2301      	movs	r3, #1
 80066ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	f383 8810 	msr	PRIMASK, r3
}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2101      	movs	r1, #1
 80066d0:	438a      	bics	r2, r1
 80066d2:	609a      	str	r2, [r3, #8]
 80066d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066da:	f383 8810 	msr	PRIMASK, r3
}
 80066de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2288      	movs	r2, #136	; 0x88
 80066e4:	2120      	movs	r1, #32
 80066e6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	228c      	movs	r2, #140	; 0x8c
 80066ec:	2120      	movs	r1, #32
 80066ee:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2284      	movs	r2, #132	; 0x84
 80066f4:	2100      	movs	r1, #0
 80066f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e069      	b.n	80067d0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2204      	movs	r2, #4
 8006704:	4013      	ands	r3, r2
 8006706:	d052      	beq.n	80067ae <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69da      	ldr	r2, [r3, #28]
 800670e:	2380      	movs	r3, #128	; 0x80
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	401a      	ands	r2, r3
 8006714:	2380      	movs	r3, #128	; 0x80
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	429a      	cmp	r2, r3
 800671a:	d148      	bne.n	80067ae <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2280      	movs	r2, #128	; 0x80
 8006722:	0112      	lsls	r2, r2, #4
 8006724:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006726:	f3ef 8310 	mrs	r3, PRIMASK
 800672a:	613b      	str	r3, [r7, #16]
  return(result);
 800672c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800672e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006730:	2301      	movs	r3, #1
 8006732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f383 8810 	msr	PRIMASK, r3
}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4924      	ldr	r1, [pc, #144]	; (80067d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006748:	400a      	ands	r2, r1
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f383 8810 	msr	PRIMASK, r3
}
 8006756:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006758:	f3ef 8310 	mrs	r3, PRIMASK
 800675c:	61fb      	str	r3, [r7, #28]
  return(result);
 800675e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006760:	64bb      	str	r3, [r7, #72]	; 0x48
 8006762:	2301      	movs	r3, #1
 8006764:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	f383 8810 	msr	PRIMASK, r3
}
 800676c:	46c0      	nop			; (mov r8, r8)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2101      	movs	r1, #1
 800677a:	438a      	bics	r2, r1
 800677c:	609a      	str	r2, [r3, #8]
 800677e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	f383 8810 	msr	PRIMASK, r3
}
 8006788:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2288      	movs	r2, #136	; 0x88
 800678e:	2120      	movs	r1, #32
 8006790:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	228c      	movs	r2, #140	; 0x8c
 8006796:	2120      	movs	r1, #32
 8006798:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2290      	movs	r2, #144	; 0x90
 800679e:	2120      	movs	r1, #32
 80067a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2284      	movs	r2, #132	; 0x84
 80067a6:	2100      	movs	r1, #0
 80067a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e010      	b.n	80067d0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	4013      	ands	r3, r2
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	425a      	negs	r2, r3
 80067be:	4153      	adcs	r3, r2
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	001a      	movs	r2, r3
 80067c4:	1dfb      	adds	r3, r7, #7
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d100      	bne.n	80067ce <UART_WaitOnFlagUntilTimeout+0x182>
 80067cc:	e747      	b.n	800665e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	0018      	movs	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	b014      	add	sp, #80	; 0x50
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	fffffe5f 	.word	0xfffffe5f

080067dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08e      	sub	sp, #56	; 0x38
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e4:	f3ef 8310 	mrs	r3, PRIMASK
 80067e8:	617b      	str	r3, [r7, #20]
  return(result);
 80067ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
 80067ee:	2301      	movs	r3, #1
 80067f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f383 8810 	msr	PRIMASK, r3
}
 80067f8:	46c0      	nop			; (mov r8, r8)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4926      	ldr	r1, [pc, #152]	; (80068a0 <UART_EndRxTransfer+0xc4>)
 8006806:	400a      	ands	r2, r1
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	f383 8810 	msr	PRIMASK, r3
}
 8006814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006816:	f3ef 8310 	mrs	r3, PRIMASK
 800681a:	623b      	str	r3, [r7, #32]
  return(result);
 800681c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800681e:	633b      	str	r3, [r7, #48]	; 0x30
 8006820:	2301      	movs	r3, #1
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	f383 8810 	msr	PRIMASK, r3
}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	491b      	ldr	r1, [pc, #108]	; (80068a4 <UART_EndRxTransfer+0xc8>)
 8006838:	400a      	ands	r2, r1
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	f383 8810 	msr	PRIMASK, r3
}
 8006846:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d118      	bne.n	8006882 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006850:	f3ef 8310 	mrs	r3, PRIMASK
 8006854:	60bb      	str	r3, [r7, #8]
  return(result);
 8006856:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800685a:	2301      	movs	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f383 8810 	msr	PRIMASK, r3
}
 8006864:	46c0      	nop			; (mov r8, r8)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2110      	movs	r1, #16
 8006872:	438a      	bics	r2, r1
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f383 8810 	msr	PRIMASK, r3
}
 8006880:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	228c      	movs	r2, #140	; 0x8c
 8006886:	2120      	movs	r1, #32
 8006888:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	46bd      	mov	sp, r7
 800689a:	b00e      	add	sp, #56	; 0x38
 800689c:	bd80      	pop	{r7, pc}
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	fffffedf 	.word	0xfffffedf
 80068a4:	effffffe 	.word	0xeffffffe

080068a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	225e      	movs	r2, #94	; 0x5e
 80068ba:	2100      	movs	r1, #0
 80068bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2256      	movs	r2, #86	; 0x56
 80068c2:	2100      	movs	r1, #0
 80068c4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	0018      	movs	r0, r3
 80068ca:	f7ff fb31 	bl	8005f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b004      	add	sp, #16
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b086      	sub	sp, #24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068de:	f3ef 8310 	mrs	r3, PRIMASK
 80068e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80068e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	2301      	movs	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f383 8810 	msr	PRIMASK, r3
}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2140      	movs	r1, #64	; 0x40
 8006900:	438a      	bics	r2, r1
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f383 8810 	msr	PRIMASK, r3
}
 800690e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2288      	movs	r2, #136	; 0x88
 8006914:	2120      	movs	r1, #32
 8006916:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	0018      	movs	r0, r3
 8006922:	f7ff fafd 	bl	8005f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	46bd      	mov	sp, r7
 800692a:	b006      	add	sp, #24
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	46bd      	mov	sp, r7
 800693a:	b002      	add	sp, #8
 800693c:	bd80      	pop	{r7, pc}

0800693e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b082      	sub	sp, #8
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	46bd      	mov	sp, r7
 800694a:	b002      	add	sp, #8
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	46bd      	mov	sp, r7
 800695a:	b002      	add	sp, #8
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2284      	movs	r2, #132	; 0x84
 800696c:	5c9b      	ldrb	r3, [r3, r2]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_UARTEx_DisableFifoMode+0x16>
 8006972:	2302      	movs	r3, #2
 8006974:	e027      	b.n	80069c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2284      	movs	r2, #132	; 0x84
 800697a:	2101      	movs	r1, #1
 800697c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2288      	movs	r2, #136	; 0x88
 8006982:	2124      	movs	r1, #36	; 0x24
 8006984:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2101      	movs	r1, #1
 800699a:	438a      	bics	r2, r1
 800699c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4a0b      	ldr	r2, [pc, #44]	; (80069d0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2288      	movs	r2, #136	; 0x88
 80069b8:	2120      	movs	r1, #32
 80069ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2284      	movs	r2, #132	; 0x84
 80069c0:	2100      	movs	r1, #0
 80069c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	0018      	movs	r0, r3
 80069c8:	46bd      	mov	sp, r7
 80069ca:	b004      	add	sp, #16
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	dfffffff 	.word	0xdfffffff

080069d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2284      	movs	r2, #132	; 0x84
 80069e2:	5c9b      	ldrb	r3, [r3, r2]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e02e      	b.n	8006a4a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2284      	movs	r2, #132	; 0x84
 80069f0:	2101      	movs	r1, #1
 80069f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2288      	movs	r2, #136	; 0x88
 80069f8:	2124      	movs	r1, #36	; 0x24
 80069fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2101      	movs	r1, #1
 8006a10:	438a      	bics	r2, r1
 8006a12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	08d9      	lsrs	r1, r3, #3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f000 f854 	bl	8006ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2288      	movs	r2, #136	; 0x88
 8006a3c:	2120      	movs	r1, #32
 8006a3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2284      	movs	r2, #132	; 0x84
 8006a44:	2100      	movs	r1, #0
 8006a46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	b004      	add	sp, #16
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2284      	movs	r2, #132	; 0x84
 8006a62:	5c9b      	ldrb	r3, [r3, r2]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e02f      	b.n	8006acc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2284      	movs	r2, #132	; 0x84
 8006a70:	2101      	movs	r1, #1
 8006a72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2288      	movs	r2, #136	; 0x88
 8006a78:	2124      	movs	r1, #36	; 0x24
 8006a7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2101      	movs	r1, #1
 8006a90:	438a      	bics	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	4a0e      	ldr	r2, [pc, #56]	; (8006ad4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	0019      	movs	r1, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	0018      	movs	r0, r3
 8006aae:	f000 f813 	bl	8006ad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2288      	movs	r2, #136	; 0x88
 8006abe:	2120      	movs	r1, #32
 8006ac0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2284      	movs	r2, #132	; 0x84
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	0018      	movs	r0, r3
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	b004      	add	sp, #16
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	f1ffffff 	.word	0xf1ffffff

08006ad8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d108      	bne.n	8006afa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	226a      	movs	r2, #106	; 0x6a
 8006aec:	2101      	movs	r1, #1
 8006aee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2268      	movs	r2, #104	; 0x68
 8006af4:	2101      	movs	r1, #1
 8006af6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006af8:	e043      	b.n	8006b82 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006afa:	260f      	movs	r6, #15
 8006afc:	19bb      	adds	r3, r7, r6
 8006afe:	2208      	movs	r2, #8
 8006b00:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b02:	200e      	movs	r0, #14
 8006b04:	183b      	adds	r3, r7, r0
 8006b06:	2208      	movs	r2, #8
 8006b08:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	0e5b      	lsrs	r3, r3, #25
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	240d      	movs	r4, #13
 8006b16:	193b      	adds	r3, r7, r4
 8006b18:	2107      	movs	r1, #7
 8006b1a:	400a      	ands	r2, r1
 8006b1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	0f5b      	lsrs	r3, r3, #29
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	250c      	movs	r5, #12
 8006b2a:	197b      	adds	r3, r7, r5
 8006b2c:	2107      	movs	r1, #7
 8006b2e:	400a      	ands	r2, r1
 8006b30:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b32:	183b      	adds	r3, r7, r0
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	197a      	adds	r2, r7, r5
 8006b38:	7812      	ldrb	r2, [r2, #0]
 8006b3a:	4914      	ldr	r1, [pc, #80]	; (8006b8c <UARTEx_SetNbDataToProcess+0xb4>)
 8006b3c:	5c8a      	ldrb	r2, [r1, r2]
 8006b3e:	435a      	muls	r2, r3
 8006b40:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b42:	197b      	adds	r3, r7, r5
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <UARTEx_SetNbDataToProcess+0xb8>)
 8006b48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b4a:	0019      	movs	r1, r3
 8006b4c:	f7f9 fb80 	bl	8000250 <__divsi3>
 8006b50:	0003      	movs	r3, r0
 8006b52:	b299      	uxth	r1, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	226a      	movs	r2, #106	; 0x6a
 8006b58:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b5a:	19bb      	adds	r3, r7, r6
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	193a      	adds	r2, r7, r4
 8006b60:	7812      	ldrb	r2, [r2, #0]
 8006b62:	490a      	ldr	r1, [pc, #40]	; (8006b8c <UARTEx_SetNbDataToProcess+0xb4>)
 8006b64:	5c8a      	ldrb	r2, [r1, r2]
 8006b66:	435a      	muls	r2, r3
 8006b68:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b6a:	193b      	adds	r3, r7, r4
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	4a08      	ldr	r2, [pc, #32]	; (8006b90 <UARTEx_SetNbDataToProcess+0xb8>)
 8006b70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b72:	0019      	movs	r1, r3
 8006b74:	f7f9 fb6c 	bl	8000250 <__divsi3>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	b299      	uxth	r1, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2268      	movs	r2, #104	; 0x68
 8006b80:	5299      	strh	r1, [r3, r2]
}
 8006b82:	46c0      	nop			; (mov r8, r8)
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b005      	add	sp, #20
 8006b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	0800b758 	.word	0x0800b758
 8006b90:	0800b760 	.word	0x0800b760

08006b94 <__errno>:
 8006b94:	4b01      	ldr	r3, [pc, #4]	; (8006b9c <__errno+0x8>)
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	4770      	bx	lr
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	2000000c 	.word	0x2000000c

08006ba0 <__libc_init_array>:
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	4d0c      	ldr	r5, [pc, #48]	; (8006bd8 <__libc_init_array+0x38>)
 8006ba6:	4c0d      	ldr	r4, [pc, #52]	; (8006bdc <__libc_init_array+0x3c>)
 8006ba8:	1b64      	subs	r4, r4, r5
 8006baa:	10a4      	asrs	r4, r4, #2
 8006bac:	42a6      	cmp	r6, r4
 8006bae:	d109      	bne.n	8006bc4 <__libc_init_array+0x24>
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	f004 fd47 	bl	800b644 <_init>
 8006bb6:	4d0a      	ldr	r5, [pc, #40]	; (8006be0 <__libc_init_array+0x40>)
 8006bb8:	4c0a      	ldr	r4, [pc, #40]	; (8006be4 <__libc_init_array+0x44>)
 8006bba:	1b64      	subs	r4, r4, r5
 8006bbc:	10a4      	asrs	r4, r4, #2
 8006bbe:	42a6      	cmp	r6, r4
 8006bc0:	d105      	bne.n	8006bce <__libc_init_array+0x2e>
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
 8006bc4:	00b3      	lsls	r3, r6, #2
 8006bc6:	58eb      	ldr	r3, [r5, r3]
 8006bc8:	4798      	blx	r3
 8006bca:	3601      	adds	r6, #1
 8006bcc:	e7ee      	b.n	8006bac <__libc_init_array+0xc>
 8006bce:	00b3      	lsls	r3, r6, #2
 8006bd0:	58eb      	ldr	r3, [r5, r3]
 8006bd2:	4798      	blx	r3
 8006bd4:	3601      	adds	r6, #1
 8006bd6:	e7f2      	b.n	8006bbe <__libc_init_array+0x1e>
 8006bd8:	0800bc1c 	.word	0x0800bc1c
 8006bdc:	0800bc1c 	.word	0x0800bc1c
 8006be0:	0800bc1c 	.word	0x0800bc1c
 8006be4:	0800bc20 	.word	0x0800bc20

08006be8 <malloc>:
 8006be8:	b510      	push	{r4, lr}
 8006bea:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <malloc+0x10>)
 8006bec:	0001      	movs	r1, r0
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	f000 f882 	bl	8006cf8 <_malloc_r>
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	2000000c 	.word	0x2000000c

08006bfc <memcpy>:
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	b510      	push	{r4, lr}
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d100      	bne.n	8006c06 <memcpy+0xa>
 8006c04:	bd10      	pop	{r4, pc}
 8006c06:	5ccc      	ldrb	r4, [r1, r3]
 8006c08:	54c4      	strb	r4, [r0, r3]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	e7f8      	b.n	8006c00 <memcpy+0x4>

08006c0e <memset>:
 8006c0e:	0003      	movs	r3, r0
 8006c10:	1882      	adds	r2, r0, r2
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d100      	bne.n	8006c18 <memset+0xa>
 8006c16:	4770      	bx	lr
 8006c18:	7019      	strb	r1, [r3, #0]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	e7f9      	b.n	8006c12 <memset+0x4>
	...

08006c20 <_free_r>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	0005      	movs	r5, r0
 8006c24:	2900      	cmp	r1, #0
 8006c26:	d010      	beq.n	8006c4a <_free_r+0x2a>
 8006c28:	1f0c      	subs	r4, r1, #4
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	da00      	bge.n	8006c32 <_free_r+0x12>
 8006c30:	18e4      	adds	r4, r4, r3
 8006c32:	0028      	movs	r0, r5
 8006c34:	f003 f884 	bl	8009d40 <__malloc_lock>
 8006c38:	4a1d      	ldr	r2, [pc, #116]	; (8006cb0 <_free_r+0x90>)
 8006c3a:	6813      	ldr	r3, [r2, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <_free_r+0x2c>
 8006c40:	6063      	str	r3, [r4, #4]
 8006c42:	6014      	str	r4, [r2, #0]
 8006c44:	0028      	movs	r0, r5
 8006c46:	f003 f883 	bl	8009d50 <__malloc_unlock>
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	d908      	bls.n	8006c62 <_free_r+0x42>
 8006c50:	6821      	ldr	r1, [r4, #0]
 8006c52:	1860      	adds	r0, r4, r1
 8006c54:	4283      	cmp	r3, r0
 8006c56:	d1f3      	bne.n	8006c40 <_free_r+0x20>
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	1841      	adds	r1, r0, r1
 8006c5e:	6021      	str	r1, [r4, #0]
 8006c60:	e7ee      	b.n	8006c40 <_free_r+0x20>
 8006c62:	001a      	movs	r2, r3
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <_free_r+0x4e>
 8006c6a:	42a3      	cmp	r3, r4
 8006c6c:	d9f9      	bls.n	8006c62 <_free_r+0x42>
 8006c6e:	6811      	ldr	r1, [r2, #0]
 8006c70:	1850      	adds	r0, r2, r1
 8006c72:	42a0      	cmp	r0, r4
 8006c74:	d10b      	bne.n	8006c8e <_free_r+0x6e>
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	1809      	adds	r1, r1, r0
 8006c7a:	1850      	adds	r0, r2, r1
 8006c7c:	6011      	str	r1, [r2, #0]
 8006c7e:	4283      	cmp	r3, r0
 8006c80:	d1e0      	bne.n	8006c44 <_free_r+0x24>
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	1841      	adds	r1, r0, r1
 8006c88:	6011      	str	r1, [r2, #0]
 8006c8a:	6053      	str	r3, [r2, #4]
 8006c8c:	e7da      	b.n	8006c44 <_free_r+0x24>
 8006c8e:	42a0      	cmp	r0, r4
 8006c90:	d902      	bls.n	8006c98 <_free_r+0x78>
 8006c92:	230c      	movs	r3, #12
 8006c94:	602b      	str	r3, [r5, #0]
 8006c96:	e7d5      	b.n	8006c44 <_free_r+0x24>
 8006c98:	6821      	ldr	r1, [r4, #0]
 8006c9a:	1860      	adds	r0, r4, r1
 8006c9c:	4283      	cmp	r3, r0
 8006c9e:	d103      	bne.n	8006ca8 <_free_r+0x88>
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	1841      	adds	r1, r0, r1
 8006ca6:	6021      	str	r1, [r4, #0]
 8006ca8:	6063      	str	r3, [r4, #4]
 8006caa:	6054      	str	r4, [r2, #4]
 8006cac:	e7ca      	b.n	8006c44 <_free_r+0x24>
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	20000430 	.word	0x20000430

08006cb4 <sbrk_aligned>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	4e0f      	ldr	r6, [pc, #60]	; (8006cf4 <sbrk_aligned+0x40>)
 8006cb8:	000d      	movs	r5, r1
 8006cba:	6831      	ldr	r1, [r6, #0]
 8006cbc:	0004      	movs	r4, r0
 8006cbe:	2900      	cmp	r1, #0
 8006cc0:	d102      	bne.n	8006cc8 <sbrk_aligned+0x14>
 8006cc2:	f000 ff05 	bl	8007ad0 <_sbrk_r>
 8006cc6:	6030      	str	r0, [r6, #0]
 8006cc8:	0029      	movs	r1, r5
 8006cca:	0020      	movs	r0, r4
 8006ccc:	f000 ff00 	bl	8007ad0 <_sbrk_r>
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d00a      	beq.n	8006cea <sbrk_aligned+0x36>
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	1cc5      	adds	r5, r0, #3
 8006cd8:	439d      	bics	r5, r3
 8006cda:	42a8      	cmp	r0, r5
 8006cdc:	d007      	beq.n	8006cee <sbrk_aligned+0x3a>
 8006cde:	1a29      	subs	r1, r5, r0
 8006ce0:	0020      	movs	r0, r4
 8006ce2:	f000 fef5 	bl	8007ad0 <_sbrk_r>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	d101      	bne.n	8006cee <sbrk_aligned+0x3a>
 8006cea:	2501      	movs	r5, #1
 8006cec:	426d      	negs	r5, r5
 8006cee:	0028      	movs	r0, r5
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	20000434 	.word	0x20000434

08006cf8 <_malloc_r>:
 8006cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cfa:	2203      	movs	r2, #3
 8006cfc:	1ccb      	adds	r3, r1, #3
 8006cfe:	4393      	bics	r3, r2
 8006d00:	3308      	adds	r3, #8
 8006d02:	0006      	movs	r6, r0
 8006d04:	001f      	movs	r7, r3
 8006d06:	2b0c      	cmp	r3, #12
 8006d08:	d232      	bcs.n	8006d70 <_malloc_r+0x78>
 8006d0a:	270c      	movs	r7, #12
 8006d0c:	42b9      	cmp	r1, r7
 8006d0e:	d831      	bhi.n	8006d74 <_malloc_r+0x7c>
 8006d10:	0030      	movs	r0, r6
 8006d12:	f003 f815 	bl	8009d40 <__malloc_lock>
 8006d16:	4d32      	ldr	r5, [pc, #200]	; (8006de0 <_malloc_r+0xe8>)
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	001c      	movs	r4, r3
 8006d1c:	2c00      	cmp	r4, #0
 8006d1e:	d12e      	bne.n	8006d7e <_malloc_r+0x86>
 8006d20:	0039      	movs	r1, r7
 8006d22:	0030      	movs	r0, r6
 8006d24:	f7ff ffc6 	bl	8006cb4 <sbrk_aligned>
 8006d28:	0004      	movs	r4, r0
 8006d2a:	1c43      	adds	r3, r0, #1
 8006d2c:	d11e      	bne.n	8006d6c <_malloc_r+0x74>
 8006d2e:	682c      	ldr	r4, [r5, #0]
 8006d30:	0025      	movs	r5, r4
 8006d32:	2d00      	cmp	r5, #0
 8006d34:	d14a      	bne.n	8006dcc <_malloc_r+0xd4>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	0029      	movs	r1, r5
 8006d3a:	18e3      	adds	r3, r4, r3
 8006d3c:	0030      	movs	r0, r6
 8006d3e:	9301      	str	r3, [sp, #4]
 8006d40:	f000 fec6 	bl	8007ad0 <_sbrk_r>
 8006d44:	9b01      	ldr	r3, [sp, #4]
 8006d46:	4283      	cmp	r3, r0
 8006d48:	d143      	bne.n	8006dd2 <_malloc_r+0xda>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	3703      	adds	r7, #3
 8006d4e:	1aff      	subs	r7, r7, r3
 8006d50:	2303      	movs	r3, #3
 8006d52:	439f      	bics	r7, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	2f0c      	cmp	r7, #12
 8006d58:	d200      	bcs.n	8006d5c <_malloc_r+0x64>
 8006d5a:	270c      	movs	r7, #12
 8006d5c:	0039      	movs	r1, r7
 8006d5e:	0030      	movs	r0, r6
 8006d60:	f7ff ffa8 	bl	8006cb4 <sbrk_aligned>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d034      	beq.n	8006dd2 <_malloc_r+0xda>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	19df      	adds	r7, r3, r7
 8006d6c:	6027      	str	r7, [r4, #0]
 8006d6e:	e013      	b.n	8006d98 <_malloc_r+0xa0>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dacb      	bge.n	8006d0c <_malloc_r+0x14>
 8006d74:	230c      	movs	r3, #12
 8006d76:	2500      	movs	r5, #0
 8006d78:	6033      	str	r3, [r6, #0]
 8006d7a:	0028      	movs	r0, r5
 8006d7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d7e:	6822      	ldr	r2, [r4, #0]
 8006d80:	1bd1      	subs	r1, r2, r7
 8006d82:	d420      	bmi.n	8006dc6 <_malloc_r+0xce>
 8006d84:	290b      	cmp	r1, #11
 8006d86:	d917      	bls.n	8006db8 <_malloc_r+0xc0>
 8006d88:	19e2      	adds	r2, r4, r7
 8006d8a:	6027      	str	r7, [r4, #0]
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d111      	bne.n	8006db4 <_malloc_r+0xbc>
 8006d90:	602a      	str	r2, [r5, #0]
 8006d92:	6863      	ldr	r3, [r4, #4]
 8006d94:	6011      	str	r1, [r2, #0]
 8006d96:	6053      	str	r3, [r2, #4]
 8006d98:	0030      	movs	r0, r6
 8006d9a:	0025      	movs	r5, r4
 8006d9c:	f002 ffd8 	bl	8009d50 <__malloc_unlock>
 8006da0:	2207      	movs	r2, #7
 8006da2:	350b      	adds	r5, #11
 8006da4:	1d23      	adds	r3, r4, #4
 8006da6:	4395      	bics	r5, r2
 8006da8:	1aea      	subs	r2, r5, r3
 8006daa:	429d      	cmp	r5, r3
 8006dac:	d0e5      	beq.n	8006d7a <_malloc_r+0x82>
 8006dae:	1b5b      	subs	r3, r3, r5
 8006db0:	50a3      	str	r3, [r4, r2]
 8006db2:	e7e2      	b.n	8006d7a <_malloc_r+0x82>
 8006db4:	605a      	str	r2, [r3, #4]
 8006db6:	e7ec      	b.n	8006d92 <_malloc_r+0x9a>
 8006db8:	6862      	ldr	r2, [r4, #4]
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	d101      	bne.n	8006dc2 <_malloc_r+0xca>
 8006dbe:	602a      	str	r2, [r5, #0]
 8006dc0:	e7ea      	b.n	8006d98 <_malloc_r+0xa0>
 8006dc2:	605a      	str	r2, [r3, #4]
 8006dc4:	e7e8      	b.n	8006d98 <_malloc_r+0xa0>
 8006dc6:	0023      	movs	r3, r4
 8006dc8:	6864      	ldr	r4, [r4, #4]
 8006dca:	e7a7      	b.n	8006d1c <_malloc_r+0x24>
 8006dcc:	002c      	movs	r4, r5
 8006dce:	686d      	ldr	r5, [r5, #4]
 8006dd0:	e7af      	b.n	8006d32 <_malloc_r+0x3a>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	0030      	movs	r0, r6
 8006dd6:	6033      	str	r3, [r6, #0]
 8006dd8:	f002 ffba 	bl	8009d50 <__malloc_unlock>
 8006ddc:	e7cd      	b.n	8006d7a <_malloc_r+0x82>
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	20000430 	.word	0x20000430

08006de4 <__cvt>:
 8006de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de6:	001e      	movs	r6, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	0014      	movs	r4, r2
 8006dec:	b08b      	sub	sp, #44	; 0x2c
 8006dee:	429e      	cmp	r6, r3
 8006df0:	da04      	bge.n	8006dfc <__cvt+0x18>
 8006df2:	2180      	movs	r1, #128	; 0x80
 8006df4:	0609      	lsls	r1, r1, #24
 8006df6:	1873      	adds	r3, r6, r1
 8006df8:	001e      	movs	r6, r3
 8006dfa:	232d      	movs	r3, #45	; 0x2d
 8006dfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dfe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e00:	7013      	strb	r3, [r2, #0]
 8006e02:	2320      	movs	r3, #32
 8006e04:	2203      	movs	r2, #3
 8006e06:	439f      	bics	r7, r3
 8006e08:	2f46      	cmp	r7, #70	; 0x46
 8006e0a:	d007      	beq.n	8006e1c <__cvt+0x38>
 8006e0c:	003b      	movs	r3, r7
 8006e0e:	3b45      	subs	r3, #69	; 0x45
 8006e10:	4259      	negs	r1, r3
 8006e12:	414b      	adcs	r3, r1
 8006e14:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006e16:	3a01      	subs	r2, #1
 8006e18:	18cb      	adds	r3, r1, r3
 8006e1a:	9310      	str	r3, [sp, #64]	; 0x40
 8006e1c:	ab09      	add	r3, sp, #36	; 0x24
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	ab08      	add	r3, sp, #32
 8006e22:	9303      	str	r3, [sp, #12]
 8006e24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e26:	9200      	str	r2, [sp, #0]
 8006e28:	9302      	str	r3, [sp, #8]
 8006e2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e2c:	0022      	movs	r2, r4
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	0033      	movs	r3, r6
 8006e32:	f001 fdd5 	bl	80089e0 <_dtoa_r>
 8006e36:	0005      	movs	r5, r0
 8006e38:	2f47      	cmp	r7, #71	; 0x47
 8006e3a:	d102      	bne.n	8006e42 <__cvt+0x5e>
 8006e3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e3e:	07db      	lsls	r3, r3, #31
 8006e40:	d528      	bpl.n	8006e94 <__cvt+0xb0>
 8006e42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e44:	18eb      	adds	r3, r5, r3
 8006e46:	9307      	str	r3, [sp, #28]
 8006e48:	2f46      	cmp	r7, #70	; 0x46
 8006e4a:	d114      	bne.n	8006e76 <__cvt+0x92>
 8006e4c:	782b      	ldrb	r3, [r5, #0]
 8006e4e:	2b30      	cmp	r3, #48	; 0x30
 8006e50:	d10c      	bne.n	8006e6c <__cvt+0x88>
 8006e52:	2200      	movs	r2, #0
 8006e54:	2300      	movs	r3, #0
 8006e56:	0020      	movs	r0, r4
 8006e58:	0031      	movs	r1, r6
 8006e5a:	f7f9 faf5 	bl	8000448 <__aeabi_dcmpeq>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d104      	bne.n	8006e6c <__cvt+0x88>
 8006e62:	2301      	movs	r3, #1
 8006e64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e6e:	9a07      	ldr	r2, [sp, #28]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	18d3      	adds	r3, r2, r3
 8006e74:	9307      	str	r3, [sp, #28]
 8006e76:	2200      	movs	r2, #0
 8006e78:	2300      	movs	r3, #0
 8006e7a:	0020      	movs	r0, r4
 8006e7c:	0031      	movs	r1, r6
 8006e7e:	f7f9 fae3 	bl	8000448 <__aeabi_dcmpeq>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d001      	beq.n	8006e8a <__cvt+0xa6>
 8006e86:	9b07      	ldr	r3, [sp, #28]
 8006e88:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8a:	2230      	movs	r2, #48	; 0x30
 8006e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8e:	9907      	ldr	r1, [sp, #28]
 8006e90:	428b      	cmp	r3, r1
 8006e92:	d306      	bcc.n	8006ea2 <__cvt+0xbe>
 8006e94:	0028      	movs	r0, r5
 8006e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e9a:	1b5b      	subs	r3, r3, r5
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	b00b      	add	sp, #44	; 0x2c
 8006ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea2:	1c59      	adds	r1, r3, #1
 8006ea4:	9109      	str	r1, [sp, #36]	; 0x24
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	e7f0      	b.n	8006e8c <__cvt+0xa8>

08006eaa <__exponent>:
 8006eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eac:	1c83      	adds	r3, r0, #2
 8006eae:	b087      	sub	sp, #28
 8006eb0:	9303      	str	r3, [sp, #12]
 8006eb2:	0005      	movs	r5, r0
 8006eb4:	000c      	movs	r4, r1
 8006eb6:	232b      	movs	r3, #43	; 0x2b
 8006eb8:	7002      	strb	r2, [r0, #0]
 8006eba:	2900      	cmp	r1, #0
 8006ebc:	da01      	bge.n	8006ec2 <__exponent+0x18>
 8006ebe:	424c      	negs	r4, r1
 8006ec0:	3302      	adds	r3, #2
 8006ec2:	706b      	strb	r3, [r5, #1]
 8006ec4:	2c09      	cmp	r4, #9
 8006ec6:	dd31      	ble.n	8006f2c <__exponent+0x82>
 8006ec8:	270a      	movs	r7, #10
 8006eca:	ab04      	add	r3, sp, #16
 8006ecc:	1dde      	adds	r6, r3, #7
 8006ece:	0020      	movs	r0, r4
 8006ed0:	0039      	movs	r1, r7
 8006ed2:	9601      	str	r6, [sp, #4]
 8006ed4:	f7f9 faa2 	bl	800041c <__aeabi_idivmod>
 8006ed8:	3e01      	subs	r6, #1
 8006eda:	3130      	adds	r1, #48	; 0x30
 8006edc:	0020      	movs	r0, r4
 8006ede:	7031      	strb	r1, [r6, #0]
 8006ee0:	0039      	movs	r1, r7
 8006ee2:	9402      	str	r4, [sp, #8]
 8006ee4:	f7f9 f9b4 	bl	8000250 <__divsi3>
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	0004      	movs	r4, r0
 8006eec:	2b63      	cmp	r3, #99	; 0x63
 8006eee:	dcee      	bgt.n	8006ece <__exponent+0x24>
 8006ef0:	9b01      	ldr	r3, [sp, #4]
 8006ef2:	3430      	adds	r4, #48	; 0x30
 8006ef4:	1e9a      	subs	r2, r3, #2
 8006ef6:	0013      	movs	r3, r2
 8006ef8:	9903      	ldr	r1, [sp, #12]
 8006efa:	7014      	strb	r4, [r2, #0]
 8006efc:	a804      	add	r0, sp, #16
 8006efe:	3007      	adds	r0, #7
 8006f00:	4298      	cmp	r0, r3
 8006f02:	d80e      	bhi.n	8006f22 <__exponent+0x78>
 8006f04:	ab04      	add	r3, sp, #16
 8006f06:	3307      	adds	r3, #7
 8006f08:	2000      	movs	r0, #0
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d804      	bhi.n	8006f18 <__exponent+0x6e>
 8006f0e:	ab04      	add	r3, sp, #16
 8006f10:	3009      	adds	r0, #9
 8006f12:	18c0      	adds	r0, r0, r3
 8006f14:	9b01      	ldr	r3, [sp, #4]
 8006f16:	1ac0      	subs	r0, r0, r3
 8006f18:	9b03      	ldr	r3, [sp, #12]
 8006f1a:	1818      	adds	r0, r3, r0
 8006f1c:	1b40      	subs	r0, r0, r5
 8006f1e:	b007      	add	sp, #28
 8006f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f22:	7818      	ldrb	r0, [r3, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	7008      	strb	r0, [r1, #0]
 8006f28:	3101      	adds	r1, #1
 8006f2a:	e7e7      	b.n	8006efc <__exponent+0x52>
 8006f2c:	2330      	movs	r3, #48	; 0x30
 8006f2e:	18e4      	adds	r4, r4, r3
 8006f30:	70ab      	strb	r3, [r5, #2]
 8006f32:	1d28      	adds	r0, r5, #4
 8006f34:	70ec      	strb	r4, [r5, #3]
 8006f36:	e7f1      	b.n	8006f1c <__exponent+0x72>

08006f38 <_printf_float>:
 8006f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3a:	b095      	sub	sp, #84	; 0x54
 8006f3c:	000c      	movs	r4, r1
 8006f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f40:	001e      	movs	r6, r3
 8006f42:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006f44:	0007      	movs	r7, r0
 8006f46:	f002 fed9 	bl	8009cfc <_localeconv_r>
 8006f4a:	6803      	ldr	r3, [r0, #0]
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f50:	f7f9 f8d8 	bl	8000104 <strlen>
 8006f54:	2300      	movs	r3, #0
 8006f56:	9312      	str	r3, [sp, #72]	; 0x48
 8006f58:	7e23      	ldrb	r3, [r4, #24]
 8006f5a:	2207      	movs	r2, #7
 8006f5c:	930a      	str	r3, [sp, #40]	; 0x28
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	900e      	str	r0, [sp, #56]	; 0x38
 8006f62:	930d      	str	r3, [sp, #52]	; 0x34
 8006f64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f66:	682b      	ldr	r3, [r5, #0]
 8006f68:	05c9      	lsls	r1, r1, #23
 8006f6a:	d547      	bpl.n	8006ffc <_printf_float+0xc4>
 8006f6c:	189b      	adds	r3, r3, r2
 8006f6e:	4393      	bics	r3, r2
 8006f70:	001a      	movs	r2, r3
 8006f72:	3208      	adds	r2, #8
 8006f74:	602a      	str	r2, [r5, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	64a2      	str	r2, [r4, #72]	; 0x48
 8006f7c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006f7e:	2201      	movs	r2, #1
 8006f80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006f82:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006f84:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f86:	006b      	lsls	r3, r5, #1
 8006f88:	085b      	lsrs	r3, r3, #1
 8006f8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f8e:	4ba7      	ldr	r3, [pc, #668]	; (800722c <_printf_float+0x2f4>)
 8006f90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f92:	4252      	negs	r2, r2
 8006f94:	f7fb f91e 	bl	80021d4 <__aeabi_dcmpun>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d131      	bne.n	8007000 <_printf_float+0xc8>
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	4ba3      	ldr	r3, [pc, #652]	; (800722c <_printf_float+0x2f4>)
 8006fa0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006fa2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fa4:	4252      	negs	r2, r2
 8006fa6:	f7f9 fa5f 	bl	8000468 <__aeabi_dcmple>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d128      	bne.n	8007000 <_printf_float+0xc8>
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	0029      	movs	r1, r5
 8006fb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006fb6:	f7f9 fa4d 	bl	8000454 <__aeabi_dcmplt>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d003      	beq.n	8006fc6 <_printf_float+0x8e>
 8006fbe:	0023      	movs	r3, r4
 8006fc0:	222d      	movs	r2, #45	; 0x2d
 8006fc2:	3343      	adds	r3, #67	; 0x43
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc8:	4d99      	ldr	r5, [pc, #612]	; (8007230 <_printf_float+0x2f8>)
 8006fca:	2b47      	cmp	r3, #71	; 0x47
 8006fcc:	d900      	bls.n	8006fd0 <_printf_float+0x98>
 8006fce:	4d99      	ldr	r5, [pc, #612]	; (8007234 <_printf_float+0x2fc>)
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	439a      	bics	r2, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6022      	str	r2, [r4, #0]
 8006fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe2:	0021      	movs	r1, r4
 8006fe4:	0038      	movs	r0, r7
 8006fe6:	9600      	str	r6, [sp, #0]
 8006fe8:	aa13      	add	r2, sp, #76	; 0x4c
 8006fea:	f000 f9e7 	bl	80073bc <_printf_common>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d000      	beq.n	8006ff4 <_printf_float+0xbc>
 8006ff2:	e0a2      	b.n	800713a <_printf_float+0x202>
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	4240      	negs	r0, r0
 8006ff8:	b015      	add	sp, #84	; 0x54
 8006ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffc:	3307      	adds	r3, #7
 8006ffe:	e7b6      	b.n	8006f6e <_printf_float+0x36>
 8007000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007002:	002b      	movs	r3, r5
 8007004:	0010      	movs	r0, r2
 8007006:	0029      	movs	r1, r5
 8007008:	f7fb f8e4 	bl	80021d4 <__aeabi_dcmpun>
 800700c:	2800      	cmp	r0, #0
 800700e:	d00b      	beq.n	8007028 <_printf_float+0xf0>
 8007010:	2d00      	cmp	r5, #0
 8007012:	da03      	bge.n	800701c <_printf_float+0xe4>
 8007014:	0023      	movs	r3, r4
 8007016:	222d      	movs	r2, #45	; 0x2d
 8007018:	3343      	adds	r3, #67	; 0x43
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800701e:	4d86      	ldr	r5, [pc, #536]	; (8007238 <_printf_float+0x300>)
 8007020:	2b47      	cmp	r3, #71	; 0x47
 8007022:	d9d5      	bls.n	8006fd0 <_printf_float+0x98>
 8007024:	4d85      	ldr	r5, [pc, #532]	; (800723c <_printf_float+0x304>)
 8007026:	e7d3      	b.n	8006fd0 <_printf_float+0x98>
 8007028:	2220      	movs	r2, #32
 800702a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	4391      	bics	r1, r2
 8007030:	910f      	str	r1, [sp, #60]	; 0x3c
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	d149      	bne.n	80070ca <_printf_float+0x192>
 8007036:	3307      	adds	r3, #7
 8007038:	6063      	str	r3, [r4, #4]
 800703a:	2380      	movs	r3, #128	; 0x80
 800703c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	4313      	orrs	r3, r2
 8007042:	2200      	movs	r2, #0
 8007044:	9206      	str	r2, [sp, #24]
 8007046:	aa12      	add	r2, sp, #72	; 0x48
 8007048:	9205      	str	r2, [sp, #20]
 800704a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800704c:	a908      	add	r1, sp, #32
 800704e:	9204      	str	r2, [sp, #16]
 8007050:	aa11      	add	r2, sp, #68	; 0x44
 8007052:	9203      	str	r2, [sp, #12]
 8007054:	2223      	movs	r2, #35	; 0x23
 8007056:	6023      	str	r3, [r4, #0]
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	6863      	ldr	r3, [r4, #4]
 800705c:	1852      	adds	r2, r2, r1
 800705e:	9202      	str	r2, [sp, #8]
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	0038      	movs	r0, r7
 8007064:	002b      	movs	r3, r5
 8007066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007068:	f7ff febc 	bl	8006de4 <__cvt>
 800706c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800706e:	0005      	movs	r5, r0
 8007070:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007072:	2b47      	cmp	r3, #71	; 0x47
 8007074:	d108      	bne.n	8007088 <_printf_float+0x150>
 8007076:	1ccb      	adds	r3, r1, #3
 8007078:	db02      	blt.n	8007080 <_printf_float+0x148>
 800707a:	6863      	ldr	r3, [r4, #4]
 800707c:	4299      	cmp	r1, r3
 800707e:	dd48      	ble.n	8007112 <_printf_float+0x1da>
 8007080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007082:	3b02      	subs	r3, #2
 8007084:	b2db      	uxtb	r3, r3
 8007086:	930a      	str	r3, [sp, #40]	; 0x28
 8007088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708a:	2b65      	cmp	r3, #101	; 0x65
 800708c:	d824      	bhi.n	80070d8 <_printf_float+0x1a0>
 800708e:	0020      	movs	r0, r4
 8007090:	001a      	movs	r2, r3
 8007092:	3901      	subs	r1, #1
 8007094:	3050      	adds	r0, #80	; 0x50
 8007096:	9111      	str	r1, [sp, #68]	; 0x44
 8007098:	f7ff ff07 	bl	8006eaa <__exponent>
 800709c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800709e:	900b      	str	r0, [sp, #44]	; 0x2c
 80070a0:	1813      	adds	r3, r2, r0
 80070a2:	6123      	str	r3, [r4, #16]
 80070a4:	2a01      	cmp	r2, #1
 80070a6:	dc02      	bgt.n	80070ae <_printf_float+0x176>
 80070a8:	6822      	ldr	r2, [r4, #0]
 80070aa:	07d2      	lsls	r2, r2, #31
 80070ac:	d501      	bpl.n	80070b2 <_printf_float+0x17a>
 80070ae:	3301      	adds	r3, #1
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	2323      	movs	r3, #35	; 0x23
 80070b4:	aa08      	add	r2, sp, #32
 80070b6:	189b      	adds	r3, r3, r2
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d100      	bne.n	80070c0 <_printf_float+0x188>
 80070be:	e78f      	b.n	8006fe0 <_printf_float+0xa8>
 80070c0:	0023      	movs	r3, r4
 80070c2:	222d      	movs	r2, #45	; 0x2d
 80070c4:	3343      	adds	r3, #67	; 0x43
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	e78a      	b.n	8006fe0 <_printf_float+0xa8>
 80070ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070cc:	2a47      	cmp	r2, #71	; 0x47
 80070ce:	d1b4      	bne.n	800703a <_printf_float+0x102>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1b2      	bne.n	800703a <_printf_float+0x102>
 80070d4:	3301      	adds	r3, #1
 80070d6:	e7af      	b.n	8007038 <_printf_float+0x100>
 80070d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070da:	2b66      	cmp	r3, #102	; 0x66
 80070dc:	d11b      	bne.n	8007116 <_printf_float+0x1de>
 80070de:	6863      	ldr	r3, [r4, #4]
 80070e0:	2900      	cmp	r1, #0
 80070e2:	dd0d      	ble.n	8007100 <_printf_float+0x1c8>
 80070e4:	6121      	str	r1, [r4, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <_printf_float+0x1b8>
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	07d2      	lsls	r2, r2, #31
 80070ee:	d502      	bpl.n	80070f6 <_printf_float+0x1be>
 80070f0:	3301      	adds	r3, #1
 80070f2:	1859      	adds	r1, r3, r1
 80070f4:	6121      	str	r1, [r4, #16]
 80070f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80070fa:	2300      	movs	r3, #0
 80070fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80070fe:	e7d8      	b.n	80070b2 <_printf_float+0x17a>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <_printf_float+0x1d4>
 8007104:	2201      	movs	r2, #1
 8007106:	6821      	ldr	r1, [r4, #0]
 8007108:	4211      	tst	r1, r2
 800710a:	d000      	beq.n	800710e <_printf_float+0x1d6>
 800710c:	1c9a      	adds	r2, r3, #2
 800710e:	6122      	str	r2, [r4, #16]
 8007110:	e7f1      	b.n	80070f6 <_printf_float+0x1be>
 8007112:	2367      	movs	r3, #103	; 0x67
 8007114:	930a      	str	r3, [sp, #40]	; 0x28
 8007116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007118:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800711a:	4293      	cmp	r3, r2
 800711c:	db06      	blt.n	800712c <_printf_float+0x1f4>
 800711e:	6822      	ldr	r2, [r4, #0]
 8007120:	6123      	str	r3, [r4, #16]
 8007122:	07d2      	lsls	r2, r2, #31
 8007124:	d5e7      	bpl.n	80070f6 <_printf_float+0x1be>
 8007126:	3301      	adds	r3, #1
 8007128:	6123      	str	r3, [r4, #16]
 800712a:	e7e4      	b.n	80070f6 <_printf_float+0x1be>
 800712c:	2101      	movs	r1, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	dc01      	bgt.n	8007136 <_printf_float+0x1fe>
 8007132:	1849      	adds	r1, r1, r1
 8007134:	1ac9      	subs	r1, r1, r3
 8007136:	1852      	adds	r2, r2, r1
 8007138:	e7e9      	b.n	800710e <_printf_float+0x1d6>
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	0553      	lsls	r3, r2, #21
 800713e:	d407      	bmi.n	8007150 <_printf_float+0x218>
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	002a      	movs	r2, r5
 8007144:	0038      	movs	r0, r7
 8007146:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007148:	47b0      	blx	r6
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	d128      	bne.n	80071a0 <_printf_float+0x268>
 800714e:	e751      	b.n	8006ff4 <_printf_float+0xbc>
 8007150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007152:	2b65      	cmp	r3, #101	; 0x65
 8007154:	d800      	bhi.n	8007158 <_printf_float+0x220>
 8007156:	e0e1      	b.n	800731c <_printf_float+0x3e4>
 8007158:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800715a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	f7f9 f972 	bl	8000448 <__aeabi_dcmpeq>
 8007164:	2800      	cmp	r0, #0
 8007166:	d031      	beq.n	80071cc <_printf_float+0x294>
 8007168:	2301      	movs	r3, #1
 800716a:	0038      	movs	r0, r7
 800716c:	4a34      	ldr	r2, [pc, #208]	; (8007240 <_printf_float+0x308>)
 800716e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007170:	47b0      	blx	r6
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	d100      	bne.n	8007178 <_printf_float+0x240>
 8007176:	e73d      	b.n	8006ff4 <_printf_float+0xbc>
 8007178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800717a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800717c:	4293      	cmp	r3, r2
 800717e:	db02      	blt.n	8007186 <_printf_float+0x24e>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	07db      	lsls	r3, r3, #31
 8007184:	d50c      	bpl.n	80071a0 <_printf_float+0x268>
 8007186:	0038      	movs	r0, r7
 8007188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800718a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800718c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800718e:	47b0      	blx	r6
 8007190:	2500      	movs	r5, #0
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	d100      	bne.n	8007198 <_printf_float+0x260>
 8007196:	e72d      	b.n	8006ff4 <_printf_float+0xbc>
 8007198:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800719a:	3b01      	subs	r3, #1
 800719c:	42ab      	cmp	r3, r5
 800719e:	dc0a      	bgt.n	80071b6 <_printf_float+0x27e>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	079b      	lsls	r3, r3, #30
 80071a4:	d500      	bpl.n	80071a8 <_printf_float+0x270>
 80071a6:	e106      	b.n	80073b6 <_printf_float+0x47e>
 80071a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071aa:	68e0      	ldr	r0, [r4, #12]
 80071ac:	4298      	cmp	r0, r3
 80071ae:	db00      	blt.n	80071b2 <_printf_float+0x27a>
 80071b0:	e722      	b.n	8006ff8 <_printf_float+0xc0>
 80071b2:	0018      	movs	r0, r3
 80071b4:	e720      	b.n	8006ff8 <_printf_float+0xc0>
 80071b6:	0022      	movs	r2, r4
 80071b8:	2301      	movs	r3, #1
 80071ba:	0038      	movs	r0, r7
 80071bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071be:	321a      	adds	r2, #26
 80071c0:	47b0      	blx	r6
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	d100      	bne.n	80071c8 <_printf_float+0x290>
 80071c6:	e715      	b.n	8006ff4 <_printf_float+0xbc>
 80071c8:	3501      	adds	r5, #1
 80071ca:	e7e5      	b.n	8007198 <_printf_float+0x260>
 80071cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	dc38      	bgt.n	8007244 <_printf_float+0x30c>
 80071d2:	2301      	movs	r3, #1
 80071d4:	0038      	movs	r0, r7
 80071d6:	4a1a      	ldr	r2, [pc, #104]	; (8007240 <_printf_float+0x308>)
 80071d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071da:	47b0      	blx	r6
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d100      	bne.n	80071e2 <_printf_float+0x2aa>
 80071e0:	e708      	b.n	8006ff4 <_printf_float+0xbc>
 80071e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071e6:	4313      	orrs	r3, r2
 80071e8:	d102      	bne.n	80071f0 <_printf_float+0x2b8>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	07db      	lsls	r3, r3, #31
 80071ee:	d5d7      	bpl.n	80071a0 <_printf_float+0x268>
 80071f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071f2:	0038      	movs	r0, r7
 80071f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071f8:	47b0      	blx	r6
 80071fa:	1c43      	adds	r3, r0, #1
 80071fc:	d100      	bne.n	8007200 <_printf_float+0x2c8>
 80071fe:	e6f9      	b.n	8006ff4 <_printf_float+0xbc>
 8007200:	2300      	movs	r3, #0
 8007202:	930a      	str	r3, [sp, #40]	; 0x28
 8007204:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007208:	425b      	negs	r3, r3
 800720a:	4293      	cmp	r3, r2
 800720c:	dc01      	bgt.n	8007212 <_printf_float+0x2da>
 800720e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007210:	e797      	b.n	8007142 <_printf_float+0x20a>
 8007212:	0022      	movs	r2, r4
 8007214:	2301      	movs	r3, #1
 8007216:	0038      	movs	r0, r7
 8007218:	9909      	ldr	r1, [sp, #36]	; 0x24
 800721a:	321a      	adds	r2, #26
 800721c:	47b0      	blx	r6
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	d100      	bne.n	8007224 <_printf_float+0x2ec>
 8007222:	e6e7      	b.n	8006ff4 <_printf_float+0xbc>
 8007224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007226:	3301      	adds	r3, #1
 8007228:	e7eb      	b.n	8007202 <_printf_float+0x2ca>
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	7fefffff 	.word	0x7fefffff
 8007230:	0800b870 	.word	0x0800b870
 8007234:	0800b874 	.word	0x0800b874
 8007238:	0800b878 	.word	0x0800b878
 800723c:	0800b87c 	.word	0x0800b87c
 8007240:	0800b880 	.word	0x0800b880
 8007244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007248:	920a      	str	r2, [sp, #40]	; 0x28
 800724a:	429a      	cmp	r2, r3
 800724c:	dd00      	ble.n	8007250 <_printf_float+0x318>
 800724e:	930a      	str	r3, [sp, #40]	; 0x28
 8007250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	dc3c      	bgt.n	80072d0 <_printf_float+0x398>
 8007256:	2300      	movs	r3, #0
 8007258:	930d      	str	r3, [sp, #52]	; 0x34
 800725a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725c:	43db      	mvns	r3, r3
 800725e:	17db      	asrs	r3, r3, #31
 8007260:	930f      	str	r3, [sp, #60]	; 0x3c
 8007262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007266:	930b      	str	r3, [sp, #44]	; 0x2c
 8007268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726a:	4013      	ands	r3, r2
 800726c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007272:	4293      	cmp	r3, r2
 8007274:	dc34      	bgt.n	80072e0 <_printf_float+0x3a8>
 8007276:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007278:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800727a:	4293      	cmp	r3, r2
 800727c:	db3d      	blt.n	80072fa <_printf_float+0x3c2>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	07db      	lsls	r3, r3, #31
 8007282:	d43a      	bmi.n	80072fa <_printf_float+0x3c2>
 8007284:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007288:	9911      	ldr	r1, [sp, #68]	; 0x44
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	1a52      	subs	r2, r2, r1
 800728e:	920a      	str	r2, [sp, #40]	; 0x28
 8007290:	429a      	cmp	r2, r3
 8007292:	dd00      	ble.n	8007296 <_printf_float+0x35e>
 8007294:	930a      	str	r3, [sp, #40]	; 0x28
 8007296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007298:	2b00      	cmp	r3, #0
 800729a:	dc36      	bgt.n	800730a <_printf_float+0x3d2>
 800729c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800729e:	2500      	movs	r5, #0
 80072a0:	43db      	mvns	r3, r3
 80072a2:	17db      	asrs	r3, r3, #31
 80072a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80072a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072ac:	1a9b      	subs	r3, r3, r2
 80072ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072b0:	400a      	ands	r2, r1
 80072b2:	1a9b      	subs	r3, r3, r2
 80072b4:	42ab      	cmp	r3, r5
 80072b6:	dc00      	bgt.n	80072ba <_printf_float+0x382>
 80072b8:	e772      	b.n	80071a0 <_printf_float+0x268>
 80072ba:	0022      	movs	r2, r4
 80072bc:	2301      	movs	r3, #1
 80072be:	0038      	movs	r0, r7
 80072c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072c2:	321a      	adds	r2, #26
 80072c4:	47b0      	blx	r6
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	d100      	bne.n	80072cc <_printf_float+0x394>
 80072ca:	e693      	b.n	8006ff4 <_printf_float+0xbc>
 80072cc:	3501      	adds	r5, #1
 80072ce:	e7ea      	b.n	80072a6 <_printf_float+0x36e>
 80072d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d2:	002a      	movs	r2, r5
 80072d4:	0038      	movs	r0, r7
 80072d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072d8:	47b0      	blx	r6
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	d1bb      	bne.n	8007256 <_printf_float+0x31e>
 80072de:	e689      	b.n	8006ff4 <_printf_float+0xbc>
 80072e0:	0022      	movs	r2, r4
 80072e2:	2301      	movs	r3, #1
 80072e4:	0038      	movs	r0, r7
 80072e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072e8:	321a      	adds	r2, #26
 80072ea:	47b0      	blx	r6
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d100      	bne.n	80072f2 <_printf_float+0x3ba>
 80072f0:	e680      	b.n	8006ff4 <_printf_float+0xbc>
 80072f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072f4:	3301      	adds	r3, #1
 80072f6:	930d      	str	r3, [sp, #52]	; 0x34
 80072f8:	e7b3      	b.n	8007262 <_printf_float+0x32a>
 80072fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072fc:	0038      	movs	r0, r7
 80072fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007300:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007302:	47b0      	blx	r6
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	d1bd      	bne.n	8007284 <_printf_float+0x34c>
 8007308:	e674      	b.n	8006ff4 <_printf_float+0xbc>
 800730a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800730c:	0038      	movs	r0, r7
 800730e:	18ea      	adds	r2, r5, r3
 8007310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007314:	47b0      	blx	r6
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	d1c0      	bne.n	800729c <_printf_float+0x364>
 800731a:	e66b      	b.n	8006ff4 <_printf_float+0xbc>
 800731c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800731e:	2b01      	cmp	r3, #1
 8007320:	dc02      	bgt.n	8007328 <_printf_float+0x3f0>
 8007322:	2301      	movs	r3, #1
 8007324:	421a      	tst	r2, r3
 8007326:	d034      	beq.n	8007392 <_printf_float+0x45a>
 8007328:	2301      	movs	r3, #1
 800732a:	002a      	movs	r2, r5
 800732c:	0038      	movs	r0, r7
 800732e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007330:	47b0      	blx	r6
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	d100      	bne.n	8007338 <_printf_float+0x400>
 8007336:	e65d      	b.n	8006ff4 <_printf_float+0xbc>
 8007338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800733a:	0038      	movs	r0, r7
 800733c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800733e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007340:	47b0      	blx	r6
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	d100      	bne.n	8007348 <_printf_float+0x410>
 8007346:	e655      	b.n	8006ff4 <_printf_float+0xbc>
 8007348:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800734a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800734c:	2200      	movs	r2, #0
 800734e:	2300      	movs	r3, #0
 8007350:	f7f9 f87a 	bl	8000448 <__aeabi_dcmpeq>
 8007354:	2800      	cmp	r0, #0
 8007356:	d11a      	bne.n	800738e <_printf_float+0x456>
 8007358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800735a:	1c6a      	adds	r2, r5, #1
 800735c:	3b01      	subs	r3, #1
 800735e:	0038      	movs	r0, r7
 8007360:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007362:	47b0      	blx	r6
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d10e      	bne.n	8007386 <_printf_float+0x44e>
 8007368:	e644      	b.n	8006ff4 <_printf_float+0xbc>
 800736a:	0022      	movs	r2, r4
 800736c:	2301      	movs	r3, #1
 800736e:	0038      	movs	r0, r7
 8007370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007372:	321a      	adds	r2, #26
 8007374:	47b0      	blx	r6
 8007376:	1c43      	adds	r3, r0, #1
 8007378:	d100      	bne.n	800737c <_printf_float+0x444>
 800737a:	e63b      	b.n	8006ff4 <_printf_float+0xbc>
 800737c:	3501      	adds	r5, #1
 800737e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007380:	3b01      	subs	r3, #1
 8007382:	42ab      	cmp	r3, r5
 8007384:	dcf1      	bgt.n	800736a <_printf_float+0x432>
 8007386:	0022      	movs	r2, r4
 8007388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800738a:	3250      	adds	r2, #80	; 0x50
 800738c:	e6da      	b.n	8007144 <_printf_float+0x20c>
 800738e:	2500      	movs	r5, #0
 8007390:	e7f5      	b.n	800737e <_printf_float+0x446>
 8007392:	002a      	movs	r2, r5
 8007394:	e7e3      	b.n	800735e <_printf_float+0x426>
 8007396:	0022      	movs	r2, r4
 8007398:	2301      	movs	r3, #1
 800739a:	0038      	movs	r0, r7
 800739c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800739e:	3219      	adds	r2, #25
 80073a0:	47b0      	blx	r6
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	d100      	bne.n	80073a8 <_printf_float+0x470>
 80073a6:	e625      	b.n	8006ff4 <_printf_float+0xbc>
 80073a8:	3501      	adds	r5, #1
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	42ab      	cmp	r3, r5
 80073b2:	dcf0      	bgt.n	8007396 <_printf_float+0x45e>
 80073b4:	e6f8      	b.n	80071a8 <_printf_float+0x270>
 80073b6:	2500      	movs	r5, #0
 80073b8:	e7f7      	b.n	80073aa <_printf_float+0x472>
 80073ba:	46c0      	nop			; (mov r8, r8)

080073bc <_printf_common>:
 80073bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073be:	0015      	movs	r5, r2
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	688a      	ldr	r2, [r1, #8]
 80073c4:	690b      	ldr	r3, [r1, #16]
 80073c6:	000c      	movs	r4, r1
 80073c8:	9000      	str	r0, [sp, #0]
 80073ca:	4293      	cmp	r3, r2
 80073cc:	da00      	bge.n	80073d0 <_printf_common+0x14>
 80073ce:	0013      	movs	r3, r2
 80073d0:	0022      	movs	r2, r4
 80073d2:	602b      	str	r3, [r5, #0]
 80073d4:	3243      	adds	r2, #67	; 0x43
 80073d6:	7812      	ldrb	r2, [r2, #0]
 80073d8:	2a00      	cmp	r2, #0
 80073da:	d001      	beq.n	80073e0 <_printf_common+0x24>
 80073dc:	3301      	adds	r3, #1
 80073de:	602b      	str	r3, [r5, #0]
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	069b      	lsls	r3, r3, #26
 80073e4:	d502      	bpl.n	80073ec <_printf_common+0x30>
 80073e6:	682b      	ldr	r3, [r5, #0]
 80073e8:	3302      	adds	r3, #2
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	2306      	movs	r3, #6
 80073f0:	0017      	movs	r7, r2
 80073f2:	401f      	ands	r7, r3
 80073f4:	421a      	tst	r2, r3
 80073f6:	d027      	beq.n	8007448 <_printf_common+0x8c>
 80073f8:	0023      	movs	r3, r4
 80073fa:	3343      	adds	r3, #67	; 0x43
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	1e5a      	subs	r2, r3, #1
 8007400:	4193      	sbcs	r3, r2
 8007402:	6822      	ldr	r2, [r4, #0]
 8007404:	0692      	lsls	r2, r2, #26
 8007406:	d430      	bmi.n	800746a <_printf_common+0xae>
 8007408:	0022      	movs	r2, r4
 800740a:	9901      	ldr	r1, [sp, #4]
 800740c:	9800      	ldr	r0, [sp, #0]
 800740e:	9e08      	ldr	r6, [sp, #32]
 8007410:	3243      	adds	r2, #67	; 0x43
 8007412:	47b0      	blx	r6
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d025      	beq.n	8007464 <_printf_common+0xa8>
 8007418:	2306      	movs	r3, #6
 800741a:	6820      	ldr	r0, [r4, #0]
 800741c:	682a      	ldr	r2, [r5, #0]
 800741e:	68e1      	ldr	r1, [r4, #12]
 8007420:	2500      	movs	r5, #0
 8007422:	4003      	ands	r3, r0
 8007424:	2b04      	cmp	r3, #4
 8007426:	d103      	bne.n	8007430 <_printf_common+0x74>
 8007428:	1a8d      	subs	r5, r1, r2
 800742a:	43eb      	mvns	r3, r5
 800742c:	17db      	asrs	r3, r3, #31
 800742e:	401d      	ands	r5, r3
 8007430:	68a3      	ldr	r3, [r4, #8]
 8007432:	6922      	ldr	r2, [r4, #16]
 8007434:	4293      	cmp	r3, r2
 8007436:	dd01      	ble.n	800743c <_printf_common+0x80>
 8007438:	1a9b      	subs	r3, r3, r2
 800743a:	18ed      	adds	r5, r5, r3
 800743c:	2700      	movs	r7, #0
 800743e:	42bd      	cmp	r5, r7
 8007440:	d120      	bne.n	8007484 <_printf_common+0xc8>
 8007442:	2000      	movs	r0, #0
 8007444:	e010      	b.n	8007468 <_printf_common+0xac>
 8007446:	3701      	adds	r7, #1
 8007448:	68e3      	ldr	r3, [r4, #12]
 800744a:	682a      	ldr	r2, [r5, #0]
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	42bb      	cmp	r3, r7
 8007450:	ddd2      	ble.n	80073f8 <_printf_common+0x3c>
 8007452:	0022      	movs	r2, r4
 8007454:	2301      	movs	r3, #1
 8007456:	9901      	ldr	r1, [sp, #4]
 8007458:	9800      	ldr	r0, [sp, #0]
 800745a:	9e08      	ldr	r6, [sp, #32]
 800745c:	3219      	adds	r2, #25
 800745e:	47b0      	blx	r6
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	d1f0      	bne.n	8007446 <_printf_common+0x8a>
 8007464:	2001      	movs	r0, #1
 8007466:	4240      	negs	r0, r0
 8007468:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800746a:	2030      	movs	r0, #48	; 0x30
 800746c:	18e1      	adds	r1, r4, r3
 800746e:	3143      	adds	r1, #67	; 0x43
 8007470:	7008      	strb	r0, [r1, #0]
 8007472:	0021      	movs	r1, r4
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	3145      	adds	r1, #69	; 0x45
 8007478:	7809      	ldrb	r1, [r1, #0]
 800747a:	18a2      	adds	r2, r4, r2
 800747c:	3243      	adds	r2, #67	; 0x43
 800747e:	3302      	adds	r3, #2
 8007480:	7011      	strb	r1, [r2, #0]
 8007482:	e7c1      	b.n	8007408 <_printf_common+0x4c>
 8007484:	0022      	movs	r2, r4
 8007486:	2301      	movs	r3, #1
 8007488:	9901      	ldr	r1, [sp, #4]
 800748a:	9800      	ldr	r0, [sp, #0]
 800748c:	9e08      	ldr	r6, [sp, #32]
 800748e:	321a      	adds	r2, #26
 8007490:	47b0      	blx	r6
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	d0e6      	beq.n	8007464 <_printf_common+0xa8>
 8007496:	3701      	adds	r7, #1
 8007498:	e7d1      	b.n	800743e <_printf_common+0x82>
	...

0800749c <_printf_i>:
 800749c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800749e:	b08b      	sub	sp, #44	; 0x2c
 80074a0:	9206      	str	r2, [sp, #24]
 80074a2:	000a      	movs	r2, r1
 80074a4:	3243      	adds	r2, #67	; 0x43
 80074a6:	9307      	str	r3, [sp, #28]
 80074a8:	9005      	str	r0, [sp, #20]
 80074aa:	9204      	str	r2, [sp, #16]
 80074ac:	7e0a      	ldrb	r2, [r1, #24]
 80074ae:	000c      	movs	r4, r1
 80074b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074b2:	2a78      	cmp	r2, #120	; 0x78
 80074b4:	d807      	bhi.n	80074c6 <_printf_i+0x2a>
 80074b6:	2a62      	cmp	r2, #98	; 0x62
 80074b8:	d809      	bhi.n	80074ce <_printf_i+0x32>
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	d100      	bne.n	80074c0 <_printf_i+0x24>
 80074be:	e0c1      	b.n	8007644 <_printf_i+0x1a8>
 80074c0:	2a58      	cmp	r2, #88	; 0x58
 80074c2:	d100      	bne.n	80074c6 <_printf_i+0x2a>
 80074c4:	e08c      	b.n	80075e0 <_printf_i+0x144>
 80074c6:	0026      	movs	r6, r4
 80074c8:	3642      	adds	r6, #66	; 0x42
 80074ca:	7032      	strb	r2, [r6, #0]
 80074cc:	e022      	b.n	8007514 <_printf_i+0x78>
 80074ce:	0010      	movs	r0, r2
 80074d0:	3863      	subs	r0, #99	; 0x63
 80074d2:	2815      	cmp	r0, #21
 80074d4:	d8f7      	bhi.n	80074c6 <_printf_i+0x2a>
 80074d6:	f7f8 fe27 	bl	8000128 <__gnu_thumb1_case_shi>
 80074da:	0016      	.short	0x0016
 80074dc:	fff6001f 	.word	0xfff6001f
 80074e0:	fff6fff6 	.word	0xfff6fff6
 80074e4:	001ffff6 	.word	0x001ffff6
 80074e8:	fff6fff6 	.word	0xfff6fff6
 80074ec:	fff6fff6 	.word	0xfff6fff6
 80074f0:	003600a8 	.word	0x003600a8
 80074f4:	fff6009a 	.word	0xfff6009a
 80074f8:	00b9fff6 	.word	0x00b9fff6
 80074fc:	0036fff6 	.word	0x0036fff6
 8007500:	fff6fff6 	.word	0xfff6fff6
 8007504:	009e      	.short	0x009e
 8007506:	0026      	movs	r6, r4
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	3642      	adds	r6, #66	; 0x42
 800750c:	1d11      	adds	r1, r2, #4
 800750e:	6019      	str	r1, [r3, #0]
 8007510:	6813      	ldr	r3, [r2, #0]
 8007512:	7033      	strb	r3, [r6, #0]
 8007514:	2301      	movs	r3, #1
 8007516:	e0a7      	b.n	8007668 <_printf_i+0x1cc>
 8007518:	6808      	ldr	r0, [r1, #0]
 800751a:	6819      	ldr	r1, [r3, #0]
 800751c:	1d0a      	adds	r2, r1, #4
 800751e:	0605      	lsls	r5, r0, #24
 8007520:	d50b      	bpl.n	800753a <_printf_i+0x9e>
 8007522:	680d      	ldr	r5, [r1, #0]
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	2d00      	cmp	r5, #0
 8007528:	da03      	bge.n	8007532 <_printf_i+0x96>
 800752a:	232d      	movs	r3, #45	; 0x2d
 800752c:	9a04      	ldr	r2, [sp, #16]
 800752e:	426d      	negs	r5, r5
 8007530:	7013      	strb	r3, [r2, #0]
 8007532:	4b61      	ldr	r3, [pc, #388]	; (80076b8 <_printf_i+0x21c>)
 8007534:	270a      	movs	r7, #10
 8007536:	9303      	str	r3, [sp, #12]
 8007538:	e01b      	b.n	8007572 <_printf_i+0xd6>
 800753a:	680d      	ldr	r5, [r1, #0]
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	0641      	lsls	r1, r0, #25
 8007540:	d5f1      	bpl.n	8007526 <_printf_i+0x8a>
 8007542:	b22d      	sxth	r5, r5
 8007544:	e7ef      	b.n	8007526 <_printf_i+0x8a>
 8007546:	680d      	ldr	r5, [r1, #0]
 8007548:	6819      	ldr	r1, [r3, #0]
 800754a:	1d08      	adds	r0, r1, #4
 800754c:	6018      	str	r0, [r3, #0]
 800754e:	062e      	lsls	r6, r5, #24
 8007550:	d501      	bpl.n	8007556 <_printf_i+0xba>
 8007552:	680d      	ldr	r5, [r1, #0]
 8007554:	e003      	b.n	800755e <_printf_i+0xc2>
 8007556:	066d      	lsls	r5, r5, #25
 8007558:	d5fb      	bpl.n	8007552 <_printf_i+0xb6>
 800755a:	680d      	ldr	r5, [r1, #0]
 800755c:	b2ad      	uxth	r5, r5
 800755e:	4b56      	ldr	r3, [pc, #344]	; (80076b8 <_printf_i+0x21c>)
 8007560:	2708      	movs	r7, #8
 8007562:	9303      	str	r3, [sp, #12]
 8007564:	2a6f      	cmp	r2, #111	; 0x6f
 8007566:	d000      	beq.n	800756a <_printf_i+0xce>
 8007568:	3702      	adds	r7, #2
 800756a:	0023      	movs	r3, r4
 800756c:	2200      	movs	r2, #0
 800756e:	3343      	adds	r3, #67	; 0x43
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	6863      	ldr	r3, [r4, #4]
 8007574:	60a3      	str	r3, [r4, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	db03      	blt.n	8007582 <_printf_i+0xe6>
 800757a:	2204      	movs	r2, #4
 800757c:	6821      	ldr	r1, [r4, #0]
 800757e:	4391      	bics	r1, r2
 8007580:	6021      	str	r1, [r4, #0]
 8007582:	2d00      	cmp	r5, #0
 8007584:	d102      	bne.n	800758c <_printf_i+0xf0>
 8007586:	9e04      	ldr	r6, [sp, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00c      	beq.n	80075a6 <_printf_i+0x10a>
 800758c:	9e04      	ldr	r6, [sp, #16]
 800758e:	0028      	movs	r0, r5
 8007590:	0039      	movs	r1, r7
 8007592:	f7f8 fe59 	bl	8000248 <__aeabi_uidivmod>
 8007596:	9b03      	ldr	r3, [sp, #12]
 8007598:	3e01      	subs	r6, #1
 800759a:	5c5b      	ldrb	r3, [r3, r1]
 800759c:	7033      	strb	r3, [r6, #0]
 800759e:	002b      	movs	r3, r5
 80075a0:	0005      	movs	r5, r0
 80075a2:	429f      	cmp	r7, r3
 80075a4:	d9f3      	bls.n	800758e <_printf_i+0xf2>
 80075a6:	2f08      	cmp	r7, #8
 80075a8:	d109      	bne.n	80075be <_printf_i+0x122>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	07db      	lsls	r3, r3, #31
 80075ae:	d506      	bpl.n	80075be <_printf_i+0x122>
 80075b0:	6863      	ldr	r3, [r4, #4]
 80075b2:	6922      	ldr	r2, [r4, #16]
 80075b4:	4293      	cmp	r3, r2
 80075b6:	dc02      	bgt.n	80075be <_printf_i+0x122>
 80075b8:	2330      	movs	r3, #48	; 0x30
 80075ba:	3e01      	subs	r6, #1
 80075bc:	7033      	strb	r3, [r6, #0]
 80075be:	9b04      	ldr	r3, [sp, #16]
 80075c0:	1b9b      	subs	r3, r3, r6
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	9b07      	ldr	r3, [sp, #28]
 80075c6:	0021      	movs	r1, r4
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	9805      	ldr	r0, [sp, #20]
 80075cc:	9b06      	ldr	r3, [sp, #24]
 80075ce:	aa09      	add	r2, sp, #36	; 0x24
 80075d0:	f7ff fef4 	bl	80073bc <_printf_common>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d14c      	bne.n	8007672 <_printf_i+0x1d6>
 80075d8:	2001      	movs	r0, #1
 80075da:	4240      	negs	r0, r0
 80075dc:	b00b      	add	sp, #44	; 0x2c
 80075de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e0:	3145      	adds	r1, #69	; 0x45
 80075e2:	700a      	strb	r2, [r1, #0]
 80075e4:	4a34      	ldr	r2, [pc, #208]	; (80076b8 <_printf_i+0x21c>)
 80075e6:	9203      	str	r2, [sp, #12]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	6821      	ldr	r1, [r4, #0]
 80075ec:	ca20      	ldmia	r2!, {r5}
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	0608      	lsls	r0, r1, #24
 80075f2:	d516      	bpl.n	8007622 <_printf_i+0x186>
 80075f4:	07cb      	lsls	r3, r1, #31
 80075f6:	d502      	bpl.n	80075fe <_printf_i+0x162>
 80075f8:	2320      	movs	r3, #32
 80075fa:	4319      	orrs	r1, r3
 80075fc:	6021      	str	r1, [r4, #0]
 80075fe:	2710      	movs	r7, #16
 8007600:	2d00      	cmp	r5, #0
 8007602:	d1b2      	bne.n	800756a <_printf_i+0xce>
 8007604:	2320      	movs	r3, #32
 8007606:	6822      	ldr	r2, [r4, #0]
 8007608:	439a      	bics	r2, r3
 800760a:	6022      	str	r2, [r4, #0]
 800760c:	e7ad      	b.n	800756a <_printf_i+0xce>
 800760e:	2220      	movs	r2, #32
 8007610:	6809      	ldr	r1, [r1, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	0022      	movs	r2, r4
 8007618:	2178      	movs	r1, #120	; 0x78
 800761a:	3245      	adds	r2, #69	; 0x45
 800761c:	7011      	strb	r1, [r2, #0]
 800761e:	4a27      	ldr	r2, [pc, #156]	; (80076bc <_printf_i+0x220>)
 8007620:	e7e1      	b.n	80075e6 <_printf_i+0x14a>
 8007622:	0648      	lsls	r0, r1, #25
 8007624:	d5e6      	bpl.n	80075f4 <_printf_i+0x158>
 8007626:	b2ad      	uxth	r5, r5
 8007628:	e7e4      	b.n	80075f4 <_printf_i+0x158>
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	680d      	ldr	r5, [r1, #0]
 800762e:	1d10      	adds	r0, r2, #4
 8007630:	6949      	ldr	r1, [r1, #20]
 8007632:	6018      	str	r0, [r3, #0]
 8007634:	6813      	ldr	r3, [r2, #0]
 8007636:	062e      	lsls	r6, r5, #24
 8007638:	d501      	bpl.n	800763e <_printf_i+0x1a2>
 800763a:	6019      	str	r1, [r3, #0]
 800763c:	e002      	b.n	8007644 <_printf_i+0x1a8>
 800763e:	066d      	lsls	r5, r5, #25
 8007640:	d5fb      	bpl.n	800763a <_printf_i+0x19e>
 8007642:	8019      	strh	r1, [r3, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	9e04      	ldr	r6, [sp, #16]
 8007648:	6123      	str	r3, [r4, #16]
 800764a:	e7bb      	b.n	80075c4 <_printf_i+0x128>
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	1d11      	adds	r1, r2, #4
 8007650:	6019      	str	r1, [r3, #0]
 8007652:	6816      	ldr	r6, [r2, #0]
 8007654:	2100      	movs	r1, #0
 8007656:	0030      	movs	r0, r6
 8007658:	6862      	ldr	r2, [r4, #4]
 800765a:	f002 fb65 	bl	8009d28 <memchr>
 800765e:	2800      	cmp	r0, #0
 8007660:	d001      	beq.n	8007666 <_printf_i+0x1ca>
 8007662:	1b80      	subs	r0, r0, r6
 8007664:	6060      	str	r0, [r4, #4]
 8007666:	6863      	ldr	r3, [r4, #4]
 8007668:	6123      	str	r3, [r4, #16]
 800766a:	2300      	movs	r3, #0
 800766c:	9a04      	ldr	r2, [sp, #16]
 800766e:	7013      	strb	r3, [r2, #0]
 8007670:	e7a8      	b.n	80075c4 <_printf_i+0x128>
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	0032      	movs	r2, r6
 8007676:	9906      	ldr	r1, [sp, #24]
 8007678:	9805      	ldr	r0, [sp, #20]
 800767a:	9d07      	ldr	r5, [sp, #28]
 800767c:	47a8      	blx	r5
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	d0aa      	beq.n	80075d8 <_printf_i+0x13c>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	079b      	lsls	r3, r3, #30
 8007686:	d415      	bmi.n	80076b4 <_printf_i+0x218>
 8007688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768a:	68e0      	ldr	r0, [r4, #12]
 800768c:	4298      	cmp	r0, r3
 800768e:	daa5      	bge.n	80075dc <_printf_i+0x140>
 8007690:	0018      	movs	r0, r3
 8007692:	e7a3      	b.n	80075dc <_printf_i+0x140>
 8007694:	0022      	movs	r2, r4
 8007696:	2301      	movs	r3, #1
 8007698:	9906      	ldr	r1, [sp, #24]
 800769a:	9805      	ldr	r0, [sp, #20]
 800769c:	9e07      	ldr	r6, [sp, #28]
 800769e:	3219      	adds	r2, #25
 80076a0:	47b0      	blx	r6
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	d098      	beq.n	80075d8 <_printf_i+0x13c>
 80076a6:	3501      	adds	r5, #1
 80076a8:	68e3      	ldr	r3, [r4, #12]
 80076aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	42ab      	cmp	r3, r5
 80076b0:	dcf0      	bgt.n	8007694 <_printf_i+0x1f8>
 80076b2:	e7e9      	b.n	8007688 <_printf_i+0x1ec>
 80076b4:	2500      	movs	r5, #0
 80076b6:	e7f7      	b.n	80076a8 <_printf_i+0x20c>
 80076b8:	0800b882 	.word	0x0800b882
 80076bc:	0800b893 	.word	0x0800b893

080076c0 <_scanf_float>:
 80076c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c2:	b08b      	sub	sp, #44	; 0x2c
 80076c4:	0015      	movs	r5, r2
 80076c6:	9001      	str	r0, [sp, #4]
 80076c8:	22ae      	movs	r2, #174	; 0xae
 80076ca:	2000      	movs	r0, #0
 80076cc:	9306      	str	r3, [sp, #24]
 80076ce:	688b      	ldr	r3, [r1, #8]
 80076d0:	000e      	movs	r6, r1
 80076d2:	1e59      	subs	r1, r3, #1
 80076d4:	0052      	lsls	r2, r2, #1
 80076d6:	9005      	str	r0, [sp, #20]
 80076d8:	4291      	cmp	r1, r2
 80076da:	d905      	bls.n	80076e8 <_scanf_float+0x28>
 80076dc:	3b5e      	subs	r3, #94	; 0x5e
 80076de:	3bff      	subs	r3, #255	; 0xff
 80076e0:	9305      	str	r3, [sp, #20]
 80076e2:	235e      	movs	r3, #94	; 0x5e
 80076e4:	33ff      	adds	r3, #255	; 0xff
 80076e6:	60b3      	str	r3, [r6, #8]
 80076e8:	23f0      	movs	r3, #240	; 0xf0
 80076ea:	6832      	ldr	r2, [r6, #0]
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	4313      	orrs	r3, r2
 80076f0:	6033      	str	r3, [r6, #0]
 80076f2:	0033      	movs	r3, r6
 80076f4:	2400      	movs	r4, #0
 80076f6:	331c      	adds	r3, #28
 80076f8:	001f      	movs	r7, r3
 80076fa:	9303      	str	r3, [sp, #12]
 80076fc:	9402      	str	r4, [sp, #8]
 80076fe:	9408      	str	r4, [sp, #32]
 8007700:	9407      	str	r4, [sp, #28]
 8007702:	9400      	str	r4, [sp, #0]
 8007704:	9404      	str	r4, [sp, #16]
 8007706:	68b2      	ldr	r2, [r6, #8]
 8007708:	2a00      	cmp	r2, #0
 800770a:	d00a      	beq.n	8007722 <_scanf_float+0x62>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b4e      	cmp	r3, #78	; 0x4e
 8007712:	d844      	bhi.n	800779e <_scanf_float+0xde>
 8007714:	0018      	movs	r0, r3
 8007716:	2b40      	cmp	r3, #64	; 0x40
 8007718:	d82c      	bhi.n	8007774 <_scanf_float+0xb4>
 800771a:	382b      	subs	r0, #43	; 0x2b
 800771c:	b2c1      	uxtb	r1, r0
 800771e:	290e      	cmp	r1, #14
 8007720:	d92a      	bls.n	8007778 <_scanf_float+0xb8>
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <_scanf_float+0x70>
 8007728:	6832      	ldr	r2, [r6, #0]
 800772a:	4ba4      	ldr	r3, [pc, #656]	; (80079bc <_scanf_float+0x2fc>)
 800772c:	4013      	ands	r3, r2
 800772e:	6033      	str	r3, [r6, #0]
 8007730:	9b02      	ldr	r3, [sp, #8]
 8007732:	3b01      	subs	r3, #1
 8007734:	2b01      	cmp	r3, #1
 8007736:	d900      	bls.n	800773a <_scanf_float+0x7a>
 8007738:	e0f9      	b.n	800792e <_scanf_float+0x26e>
 800773a:	24be      	movs	r4, #190	; 0xbe
 800773c:	0064      	lsls	r4, r4, #1
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	429f      	cmp	r7, r3
 8007742:	d900      	bls.n	8007746 <_scanf_float+0x86>
 8007744:	e0e9      	b.n	800791a <_scanf_float+0x25a>
 8007746:	2301      	movs	r3, #1
 8007748:	9302      	str	r3, [sp, #8]
 800774a:	e185      	b.n	8007a58 <_scanf_float+0x398>
 800774c:	0018      	movs	r0, r3
 800774e:	3861      	subs	r0, #97	; 0x61
 8007750:	280d      	cmp	r0, #13
 8007752:	d8e6      	bhi.n	8007722 <_scanf_float+0x62>
 8007754:	f7f8 fce8 	bl	8000128 <__gnu_thumb1_case_shi>
 8007758:	ffe50083 	.word	0xffe50083
 800775c:	ffe5ffe5 	.word	0xffe5ffe5
 8007760:	00a200b6 	.word	0x00a200b6
 8007764:	ffe5ffe5 	.word	0xffe5ffe5
 8007768:	ffe50089 	.word	0xffe50089
 800776c:	ffe5ffe5 	.word	0xffe5ffe5
 8007770:	0065ffe5 	.word	0x0065ffe5
 8007774:	3841      	subs	r0, #65	; 0x41
 8007776:	e7eb      	b.n	8007750 <_scanf_float+0x90>
 8007778:	280e      	cmp	r0, #14
 800777a:	d8d2      	bhi.n	8007722 <_scanf_float+0x62>
 800777c:	f7f8 fcd4 	bl	8000128 <__gnu_thumb1_case_shi>
 8007780:	ffd1004b 	.word	0xffd1004b
 8007784:	0098004b 	.word	0x0098004b
 8007788:	0020ffd1 	.word	0x0020ffd1
 800778c:	00400040 	.word	0x00400040
 8007790:	00400040 	.word	0x00400040
 8007794:	00400040 	.word	0x00400040
 8007798:	00400040 	.word	0x00400040
 800779c:	0040      	.short	0x0040
 800779e:	2b6e      	cmp	r3, #110	; 0x6e
 80077a0:	d809      	bhi.n	80077b6 <_scanf_float+0xf6>
 80077a2:	2b60      	cmp	r3, #96	; 0x60
 80077a4:	d8d2      	bhi.n	800774c <_scanf_float+0x8c>
 80077a6:	2b54      	cmp	r3, #84	; 0x54
 80077a8:	d07d      	beq.n	80078a6 <_scanf_float+0x1e6>
 80077aa:	2b59      	cmp	r3, #89	; 0x59
 80077ac:	d1b9      	bne.n	8007722 <_scanf_float+0x62>
 80077ae:	2c07      	cmp	r4, #7
 80077b0:	d1b7      	bne.n	8007722 <_scanf_float+0x62>
 80077b2:	2408      	movs	r4, #8
 80077b4:	e02c      	b.n	8007810 <_scanf_float+0x150>
 80077b6:	2b74      	cmp	r3, #116	; 0x74
 80077b8:	d075      	beq.n	80078a6 <_scanf_float+0x1e6>
 80077ba:	2b79      	cmp	r3, #121	; 0x79
 80077bc:	d0f7      	beq.n	80077ae <_scanf_float+0xee>
 80077be:	e7b0      	b.n	8007722 <_scanf_float+0x62>
 80077c0:	6831      	ldr	r1, [r6, #0]
 80077c2:	05c8      	lsls	r0, r1, #23
 80077c4:	d51c      	bpl.n	8007800 <_scanf_float+0x140>
 80077c6:	2380      	movs	r3, #128	; 0x80
 80077c8:	4399      	bics	r1, r3
 80077ca:	9b00      	ldr	r3, [sp, #0]
 80077cc:	6031      	str	r1, [r6, #0]
 80077ce:	3301      	adds	r3, #1
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	9b05      	ldr	r3, [sp, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <_scanf_float+0x120>
 80077d8:	3b01      	subs	r3, #1
 80077da:	3201      	adds	r2, #1
 80077dc:	9305      	str	r3, [sp, #20]
 80077de:	60b2      	str	r2, [r6, #8]
 80077e0:	68b3      	ldr	r3, [r6, #8]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	60b3      	str	r3, [r6, #8]
 80077e6:	6933      	ldr	r3, [r6, #16]
 80077e8:	3301      	adds	r3, #1
 80077ea:	6133      	str	r3, [r6, #16]
 80077ec:	686b      	ldr	r3, [r5, #4]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	606b      	str	r3, [r5, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	dc00      	bgt.n	80077f8 <_scanf_float+0x138>
 80077f6:	e086      	b.n	8007906 <_scanf_float+0x246>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	3301      	adds	r3, #1
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	e782      	b.n	8007706 <_scanf_float+0x46>
 8007800:	9a02      	ldr	r2, [sp, #8]
 8007802:	1912      	adds	r2, r2, r4
 8007804:	2a00      	cmp	r2, #0
 8007806:	d18c      	bne.n	8007722 <_scanf_float+0x62>
 8007808:	4a6d      	ldr	r2, [pc, #436]	; (80079c0 <_scanf_float+0x300>)
 800780a:	6831      	ldr	r1, [r6, #0]
 800780c:	400a      	ands	r2, r1
 800780e:	6032      	str	r2, [r6, #0]
 8007810:	703b      	strb	r3, [r7, #0]
 8007812:	3701      	adds	r7, #1
 8007814:	e7e4      	b.n	80077e0 <_scanf_float+0x120>
 8007816:	2180      	movs	r1, #128	; 0x80
 8007818:	6832      	ldr	r2, [r6, #0]
 800781a:	420a      	tst	r2, r1
 800781c:	d081      	beq.n	8007722 <_scanf_float+0x62>
 800781e:	438a      	bics	r2, r1
 8007820:	e7f5      	b.n	800780e <_scanf_float+0x14e>
 8007822:	9a02      	ldr	r2, [sp, #8]
 8007824:	2a00      	cmp	r2, #0
 8007826:	d10f      	bne.n	8007848 <_scanf_float+0x188>
 8007828:	9a00      	ldr	r2, [sp, #0]
 800782a:	2a00      	cmp	r2, #0
 800782c:	d10f      	bne.n	800784e <_scanf_float+0x18e>
 800782e:	6832      	ldr	r2, [r6, #0]
 8007830:	21e0      	movs	r1, #224	; 0xe0
 8007832:	0010      	movs	r0, r2
 8007834:	00c9      	lsls	r1, r1, #3
 8007836:	4008      	ands	r0, r1
 8007838:	4288      	cmp	r0, r1
 800783a:	d108      	bne.n	800784e <_scanf_float+0x18e>
 800783c:	4961      	ldr	r1, [pc, #388]	; (80079c4 <_scanf_float+0x304>)
 800783e:	400a      	ands	r2, r1
 8007840:	6032      	str	r2, [r6, #0]
 8007842:	2201      	movs	r2, #1
 8007844:	9202      	str	r2, [sp, #8]
 8007846:	e7e3      	b.n	8007810 <_scanf_float+0x150>
 8007848:	9a02      	ldr	r2, [sp, #8]
 800784a:	2a02      	cmp	r2, #2
 800784c:	d059      	beq.n	8007902 <_scanf_float+0x242>
 800784e:	2c01      	cmp	r4, #1
 8007850:	d002      	beq.n	8007858 <_scanf_float+0x198>
 8007852:	2c04      	cmp	r4, #4
 8007854:	d000      	beq.n	8007858 <_scanf_float+0x198>
 8007856:	e764      	b.n	8007722 <_scanf_float+0x62>
 8007858:	3401      	adds	r4, #1
 800785a:	b2e4      	uxtb	r4, r4
 800785c:	e7d8      	b.n	8007810 <_scanf_float+0x150>
 800785e:	9a02      	ldr	r2, [sp, #8]
 8007860:	2a01      	cmp	r2, #1
 8007862:	d000      	beq.n	8007866 <_scanf_float+0x1a6>
 8007864:	e75d      	b.n	8007722 <_scanf_float+0x62>
 8007866:	2202      	movs	r2, #2
 8007868:	e7ec      	b.n	8007844 <_scanf_float+0x184>
 800786a:	2c00      	cmp	r4, #0
 800786c:	d110      	bne.n	8007890 <_scanf_float+0x1d0>
 800786e:	9a00      	ldr	r2, [sp, #0]
 8007870:	2a00      	cmp	r2, #0
 8007872:	d000      	beq.n	8007876 <_scanf_float+0x1b6>
 8007874:	e758      	b.n	8007728 <_scanf_float+0x68>
 8007876:	6832      	ldr	r2, [r6, #0]
 8007878:	21e0      	movs	r1, #224	; 0xe0
 800787a:	0010      	movs	r0, r2
 800787c:	00c9      	lsls	r1, r1, #3
 800787e:	4008      	ands	r0, r1
 8007880:	4288      	cmp	r0, r1
 8007882:	d000      	beq.n	8007886 <_scanf_float+0x1c6>
 8007884:	e754      	b.n	8007730 <_scanf_float+0x70>
 8007886:	494f      	ldr	r1, [pc, #316]	; (80079c4 <_scanf_float+0x304>)
 8007888:	3401      	adds	r4, #1
 800788a:	400a      	ands	r2, r1
 800788c:	6032      	str	r2, [r6, #0]
 800788e:	e7bf      	b.n	8007810 <_scanf_float+0x150>
 8007890:	21fd      	movs	r1, #253	; 0xfd
 8007892:	1ee2      	subs	r2, r4, #3
 8007894:	420a      	tst	r2, r1
 8007896:	d000      	beq.n	800789a <_scanf_float+0x1da>
 8007898:	e743      	b.n	8007722 <_scanf_float+0x62>
 800789a:	e7dd      	b.n	8007858 <_scanf_float+0x198>
 800789c:	2c02      	cmp	r4, #2
 800789e:	d000      	beq.n	80078a2 <_scanf_float+0x1e2>
 80078a0:	e73f      	b.n	8007722 <_scanf_float+0x62>
 80078a2:	2403      	movs	r4, #3
 80078a4:	e7b4      	b.n	8007810 <_scanf_float+0x150>
 80078a6:	2c06      	cmp	r4, #6
 80078a8:	d000      	beq.n	80078ac <_scanf_float+0x1ec>
 80078aa:	e73a      	b.n	8007722 <_scanf_float+0x62>
 80078ac:	2407      	movs	r4, #7
 80078ae:	e7af      	b.n	8007810 <_scanf_float+0x150>
 80078b0:	6832      	ldr	r2, [r6, #0]
 80078b2:	0591      	lsls	r1, r2, #22
 80078b4:	d400      	bmi.n	80078b8 <_scanf_float+0x1f8>
 80078b6:	e734      	b.n	8007722 <_scanf_float+0x62>
 80078b8:	4943      	ldr	r1, [pc, #268]	; (80079c8 <_scanf_float+0x308>)
 80078ba:	400a      	ands	r2, r1
 80078bc:	6032      	str	r2, [r6, #0]
 80078be:	9a00      	ldr	r2, [sp, #0]
 80078c0:	9204      	str	r2, [sp, #16]
 80078c2:	e7a5      	b.n	8007810 <_scanf_float+0x150>
 80078c4:	21a0      	movs	r1, #160	; 0xa0
 80078c6:	2080      	movs	r0, #128	; 0x80
 80078c8:	6832      	ldr	r2, [r6, #0]
 80078ca:	00c9      	lsls	r1, r1, #3
 80078cc:	4011      	ands	r1, r2
 80078ce:	00c0      	lsls	r0, r0, #3
 80078d0:	4281      	cmp	r1, r0
 80078d2:	d006      	beq.n	80078e2 <_scanf_float+0x222>
 80078d4:	4202      	tst	r2, r0
 80078d6:	d100      	bne.n	80078da <_scanf_float+0x21a>
 80078d8:	e723      	b.n	8007722 <_scanf_float+0x62>
 80078da:	9900      	ldr	r1, [sp, #0]
 80078dc:	2900      	cmp	r1, #0
 80078de:	d100      	bne.n	80078e2 <_scanf_float+0x222>
 80078e0:	e726      	b.n	8007730 <_scanf_float+0x70>
 80078e2:	0591      	lsls	r1, r2, #22
 80078e4:	d404      	bmi.n	80078f0 <_scanf_float+0x230>
 80078e6:	9900      	ldr	r1, [sp, #0]
 80078e8:	9804      	ldr	r0, [sp, #16]
 80078ea:	9708      	str	r7, [sp, #32]
 80078ec:	1a09      	subs	r1, r1, r0
 80078ee:	9107      	str	r1, [sp, #28]
 80078f0:	4934      	ldr	r1, [pc, #208]	; (80079c4 <_scanf_float+0x304>)
 80078f2:	400a      	ands	r2, r1
 80078f4:	21c0      	movs	r1, #192	; 0xc0
 80078f6:	0049      	lsls	r1, r1, #1
 80078f8:	430a      	orrs	r2, r1
 80078fa:	6032      	str	r2, [r6, #0]
 80078fc:	2200      	movs	r2, #0
 80078fe:	9200      	str	r2, [sp, #0]
 8007900:	e786      	b.n	8007810 <_scanf_float+0x150>
 8007902:	2203      	movs	r2, #3
 8007904:	e79e      	b.n	8007844 <_scanf_float+0x184>
 8007906:	23c0      	movs	r3, #192	; 0xc0
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	0029      	movs	r1, r5
 800790c:	58f3      	ldr	r3, [r6, r3]
 800790e:	9801      	ldr	r0, [sp, #4]
 8007910:	4798      	blx	r3
 8007912:	2800      	cmp	r0, #0
 8007914:	d100      	bne.n	8007918 <_scanf_float+0x258>
 8007916:	e6f6      	b.n	8007706 <_scanf_float+0x46>
 8007918:	e703      	b.n	8007722 <_scanf_float+0x62>
 800791a:	3f01      	subs	r7, #1
 800791c:	5933      	ldr	r3, [r6, r4]
 800791e:	002a      	movs	r2, r5
 8007920:	7839      	ldrb	r1, [r7, #0]
 8007922:	9801      	ldr	r0, [sp, #4]
 8007924:	4798      	blx	r3
 8007926:	6933      	ldr	r3, [r6, #16]
 8007928:	3b01      	subs	r3, #1
 800792a:	6133      	str	r3, [r6, #16]
 800792c:	e707      	b.n	800773e <_scanf_float+0x7e>
 800792e:	1e63      	subs	r3, r4, #1
 8007930:	2b06      	cmp	r3, #6
 8007932:	d80e      	bhi.n	8007952 <_scanf_float+0x292>
 8007934:	9702      	str	r7, [sp, #8]
 8007936:	2c02      	cmp	r4, #2
 8007938:	d920      	bls.n	800797c <_scanf_float+0x2bc>
 800793a:	1be3      	subs	r3, r4, r7
 800793c:	b2db      	uxtb	r3, r3
 800793e:	9305      	str	r3, [sp, #20]
 8007940:	9b02      	ldr	r3, [sp, #8]
 8007942:	9a05      	ldr	r2, [sp, #20]
 8007944:	189b      	adds	r3, r3, r2
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b03      	cmp	r3, #3
 800794a:	d827      	bhi.n	800799c <_scanf_float+0x2dc>
 800794c:	3c03      	subs	r4, #3
 800794e:	b2e4      	uxtb	r4, r4
 8007950:	1b3f      	subs	r7, r7, r4
 8007952:	6833      	ldr	r3, [r6, #0]
 8007954:	05da      	lsls	r2, r3, #23
 8007956:	d554      	bpl.n	8007a02 <_scanf_float+0x342>
 8007958:	055b      	lsls	r3, r3, #21
 800795a:	d537      	bpl.n	80079cc <_scanf_float+0x30c>
 800795c:	24be      	movs	r4, #190	; 0xbe
 800795e:	0064      	lsls	r4, r4, #1
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	429f      	cmp	r7, r3
 8007964:	d800      	bhi.n	8007968 <_scanf_float+0x2a8>
 8007966:	e6ee      	b.n	8007746 <_scanf_float+0x86>
 8007968:	3f01      	subs	r7, #1
 800796a:	5933      	ldr	r3, [r6, r4]
 800796c:	002a      	movs	r2, r5
 800796e:	7839      	ldrb	r1, [r7, #0]
 8007970:	9801      	ldr	r0, [sp, #4]
 8007972:	4798      	blx	r3
 8007974:	6933      	ldr	r3, [r6, #16]
 8007976:	3b01      	subs	r3, #1
 8007978:	6133      	str	r3, [r6, #16]
 800797a:	e7f1      	b.n	8007960 <_scanf_float+0x2a0>
 800797c:	24be      	movs	r4, #190	; 0xbe
 800797e:	0064      	lsls	r4, r4, #1
 8007980:	9b03      	ldr	r3, [sp, #12]
 8007982:	429f      	cmp	r7, r3
 8007984:	d800      	bhi.n	8007988 <_scanf_float+0x2c8>
 8007986:	e6de      	b.n	8007746 <_scanf_float+0x86>
 8007988:	3f01      	subs	r7, #1
 800798a:	5933      	ldr	r3, [r6, r4]
 800798c:	002a      	movs	r2, r5
 800798e:	7839      	ldrb	r1, [r7, #0]
 8007990:	9801      	ldr	r0, [sp, #4]
 8007992:	4798      	blx	r3
 8007994:	6933      	ldr	r3, [r6, #16]
 8007996:	3b01      	subs	r3, #1
 8007998:	6133      	str	r3, [r6, #16]
 800799a:	e7f1      	b.n	8007980 <_scanf_float+0x2c0>
 800799c:	9b02      	ldr	r3, [sp, #8]
 800799e:	002a      	movs	r2, r5
 80079a0:	3b01      	subs	r3, #1
 80079a2:	7819      	ldrb	r1, [r3, #0]
 80079a4:	9302      	str	r3, [sp, #8]
 80079a6:	23be      	movs	r3, #190	; 0xbe
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	58f3      	ldr	r3, [r6, r3]
 80079ac:	9801      	ldr	r0, [sp, #4]
 80079ae:	9309      	str	r3, [sp, #36]	; 0x24
 80079b0:	4798      	blx	r3
 80079b2:	6933      	ldr	r3, [r6, #16]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	6133      	str	r3, [r6, #16]
 80079b8:	e7c2      	b.n	8007940 <_scanf_float+0x280>
 80079ba:	46c0      	nop			; (mov r8, r8)
 80079bc:	fffffeff 	.word	0xfffffeff
 80079c0:	fffffe7f 	.word	0xfffffe7f
 80079c4:	fffff87f 	.word	0xfffff87f
 80079c8:	fffffd7f 	.word	0xfffffd7f
 80079cc:	6933      	ldr	r3, [r6, #16]
 80079ce:	1e7c      	subs	r4, r7, #1
 80079d0:	7821      	ldrb	r1, [r4, #0]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	6133      	str	r3, [r6, #16]
 80079d6:	2965      	cmp	r1, #101	; 0x65
 80079d8:	d00c      	beq.n	80079f4 <_scanf_float+0x334>
 80079da:	2945      	cmp	r1, #69	; 0x45
 80079dc:	d00a      	beq.n	80079f4 <_scanf_float+0x334>
 80079de:	23be      	movs	r3, #190	; 0xbe
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	58f3      	ldr	r3, [r6, r3]
 80079e4:	002a      	movs	r2, r5
 80079e6:	9801      	ldr	r0, [sp, #4]
 80079e8:	4798      	blx	r3
 80079ea:	6933      	ldr	r3, [r6, #16]
 80079ec:	1ebc      	subs	r4, r7, #2
 80079ee:	3b01      	subs	r3, #1
 80079f0:	7821      	ldrb	r1, [r4, #0]
 80079f2:	6133      	str	r3, [r6, #16]
 80079f4:	23be      	movs	r3, #190	; 0xbe
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	002a      	movs	r2, r5
 80079fa:	58f3      	ldr	r3, [r6, r3]
 80079fc:	9801      	ldr	r0, [sp, #4]
 80079fe:	4798      	blx	r3
 8007a00:	0027      	movs	r7, r4
 8007a02:	6832      	ldr	r2, [r6, #0]
 8007a04:	2310      	movs	r3, #16
 8007a06:	0011      	movs	r1, r2
 8007a08:	4019      	ands	r1, r3
 8007a0a:	9102      	str	r1, [sp, #8]
 8007a0c:	421a      	tst	r2, r3
 8007a0e:	d158      	bne.n	8007ac2 <_scanf_float+0x402>
 8007a10:	23c0      	movs	r3, #192	; 0xc0
 8007a12:	7039      	strb	r1, [r7, #0]
 8007a14:	6832      	ldr	r2, [r6, #0]
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2280      	movs	r2, #128	; 0x80
 8007a1c:	00d2      	lsls	r2, r2, #3
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d11d      	bne.n	8007a5e <_scanf_float+0x39e>
 8007a22:	9b04      	ldr	r3, [sp, #16]
 8007a24:	9a00      	ldr	r2, [sp, #0]
 8007a26:	9900      	ldr	r1, [sp, #0]
 8007a28:	1a9a      	subs	r2, r3, r2
 8007a2a:	428b      	cmp	r3, r1
 8007a2c:	d124      	bne.n	8007a78 <_scanf_float+0x3b8>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	9903      	ldr	r1, [sp, #12]
 8007a32:	9801      	ldr	r0, [sp, #4]
 8007a34:	f000 feae 	bl	8008794 <_strtod_r>
 8007a38:	9b06      	ldr	r3, [sp, #24]
 8007a3a:	000d      	movs	r5, r1
 8007a3c:	6831      	ldr	r1, [r6, #0]
 8007a3e:	0004      	movs	r4, r0
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	078a      	lsls	r2, r1, #30
 8007a44:	d525      	bpl.n	8007a92 <_scanf_float+0x3d2>
 8007a46:	1d1a      	adds	r2, r3, #4
 8007a48:	9906      	ldr	r1, [sp, #24]
 8007a4a:	600a      	str	r2, [r1, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	601c      	str	r4, [r3, #0]
 8007a50:	605d      	str	r5, [r3, #4]
 8007a52:	68f3      	ldr	r3, [r6, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60f3      	str	r3, [r6, #12]
 8007a58:	9802      	ldr	r0, [sp, #8]
 8007a5a:	b00b      	add	sp, #44	; 0x2c
 8007a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a5e:	9b07      	ldr	r3, [sp, #28]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0e4      	beq.n	8007a2e <_scanf_float+0x36e>
 8007a64:	9b08      	ldr	r3, [sp, #32]
 8007a66:	9a02      	ldr	r2, [sp, #8]
 8007a68:	1c59      	adds	r1, r3, #1
 8007a6a:	9801      	ldr	r0, [sp, #4]
 8007a6c:	230a      	movs	r3, #10
 8007a6e:	f000 ff27 	bl	80088c0 <_strtol_r>
 8007a72:	9b07      	ldr	r3, [sp, #28]
 8007a74:	9f08      	ldr	r7, [sp, #32]
 8007a76:	1ac2      	subs	r2, r0, r3
 8007a78:	0033      	movs	r3, r6
 8007a7a:	3370      	adds	r3, #112	; 0x70
 8007a7c:	33ff      	adds	r3, #255	; 0xff
 8007a7e:	429f      	cmp	r7, r3
 8007a80:	d302      	bcc.n	8007a88 <_scanf_float+0x3c8>
 8007a82:	0037      	movs	r7, r6
 8007a84:	376f      	adds	r7, #111	; 0x6f
 8007a86:	37ff      	adds	r7, #255	; 0xff
 8007a88:	0038      	movs	r0, r7
 8007a8a:	490f      	ldr	r1, [pc, #60]	; (8007ac8 <_scanf_float+0x408>)
 8007a8c:	f000 f836 	bl	8007afc <siprintf>
 8007a90:	e7cd      	b.n	8007a2e <_scanf_float+0x36e>
 8007a92:	1d1a      	adds	r2, r3, #4
 8007a94:	0749      	lsls	r1, r1, #29
 8007a96:	d4d7      	bmi.n	8007a48 <_scanf_float+0x388>
 8007a98:	9906      	ldr	r1, [sp, #24]
 8007a9a:	0020      	movs	r0, r4
 8007a9c:	600a      	str	r2, [r1, #0]
 8007a9e:	681f      	ldr	r7, [r3, #0]
 8007aa0:	0022      	movs	r2, r4
 8007aa2:	002b      	movs	r3, r5
 8007aa4:	0029      	movs	r1, r5
 8007aa6:	f7fa fb95 	bl	80021d4 <__aeabi_dcmpun>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d004      	beq.n	8007ab8 <_scanf_float+0x3f8>
 8007aae:	4807      	ldr	r0, [pc, #28]	; (8007acc <_scanf_float+0x40c>)
 8007ab0:	f000 f820 	bl	8007af4 <nanf>
 8007ab4:	6038      	str	r0, [r7, #0]
 8007ab6:	e7cc      	b.n	8007a52 <_scanf_float+0x392>
 8007ab8:	0020      	movs	r0, r4
 8007aba:	0029      	movs	r1, r5
 8007abc:	f7fa fc34 	bl	8002328 <__aeabi_d2f>
 8007ac0:	e7f8      	b.n	8007ab4 <_scanf_float+0x3f4>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e640      	b.n	8007748 <_scanf_float+0x88>
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	0800b8a4 	.word	0x0800b8a4
 8007acc:	0800bbb0 	.word	0x0800bbb0

08007ad0 <_sbrk_r>:
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	b570      	push	{r4, r5, r6, lr}
 8007ad4:	4d06      	ldr	r5, [pc, #24]	; (8007af0 <_sbrk_r+0x20>)
 8007ad6:	0004      	movs	r4, r0
 8007ad8:	0008      	movs	r0, r1
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	f7fb fbb0 	bl	8003240 <_sbrk>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d103      	bne.n	8007aec <_sbrk_r+0x1c>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d000      	beq.n	8007aec <_sbrk_r+0x1c>
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	bd70      	pop	{r4, r5, r6, pc}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	20000438 	.word	0x20000438

08007af4 <nanf>:
 8007af4:	4800      	ldr	r0, [pc, #0]	; (8007af8 <nanf+0x4>)
 8007af6:	4770      	bx	lr
 8007af8:	7fc00000 	.word	0x7fc00000

08007afc <siprintf>:
 8007afc:	b40e      	push	{r1, r2, r3}
 8007afe:	b500      	push	{lr}
 8007b00:	490b      	ldr	r1, [pc, #44]	; (8007b30 <siprintf+0x34>)
 8007b02:	b09c      	sub	sp, #112	; 0x70
 8007b04:	ab1d      	add	r3, sp, #116	; 0x74
 8007b06:	9002      	str	r0, [sp, #8]
 8007b08:	9006      	str	r0, [sp, #24]
 8007b0a:	9107      	str	r1, [sp, #28]
 8007b0c:	9104      	str	r1, [sp, #16]
 8007b0e:	4809      	ldr	r0, [pc, #36]	; (8007b34 <siprintf+0x38>)
 8007b10:	4909      	ldr	r1, [pc, #36]	; (8007b38 <siprintf+0x3c>)
 8007b12:	cb04      	ldmia	r3!, {r2}
 8007b14:	9105      	str	r1, [sp, #20]
 8007b16:	6800      	ldr	r0, [r0, #0]
 8007b18:	a902      	add	r1, sp, #8
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	f002 fe78 	bl	800a810 <_svfiprintf_r>
 8007b20:	2300      	movs	r3, #0
 8007b22:	9a02      	ldr	r2, [sp, #8]
 8007b24:	7013      	strb	r3, [r2, #0]
 8007b26:	b01c      	add	sp, #112	; 0x70
 8007b28:	bc08      	pop	{r3}
 8007b2a:	b003      	add	sp, #12
 8007b2c:	4718      	bx	r3
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	7fffffff 	.word	0x7fffffff
 8007b34:	2000000c 	.word	0x2000000c
 8007b38:	ffff0208 	.word	0xffff0208

08007b3c <sulp>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	0016      	movs	r6, r2
 8007b40:	000d      	movs	r5, r1
 8007b42:	f002 fc91 	bl	800a468 <__ulp>
 8007b46:	2e00      	cmp	r6, #0
 8007b48:	d00d      	beq.n	8007b66 <sulp+0x2a>
 8007b4a:	236b      	movs	r3, #107	; 0x6b
 8007b4c:	006a      	lsls	r2, r5, #1
 8007b4e:	0d52      	lsrs	r2, r2, #21
 8007b50:	1a9b      	subs	r3, r3, r2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	dd07      	ble.n	8007b66 <sulp+0x2a>
 8007b56:	2400      	movs	r4, #0
 8007b58:	4a03      	ldr	r2, [pc, #12]	; (8007b68 <sulp+0x2c>)
 8007b5a:	051b      	lsls	r3, r3, #20
 8007b5c:	189d      	adds	r5, r3, r2
 8007b5e:	002b      	movs	r3, r5
 8007b60:	0022      	movs	r2, r4
 8007b62:	f7f9 fd39 	bl	80015d8 <__aeabi_dmul>
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	3ff00000 	.word	0x3ff00000

08007b6c <_strtod_l>:
 8007b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b6e:	001d      	movs	r5, r3
 8007b70:	2300      	movs	r3, #0
 8007b72:	b0a5      	sub	sp, #148	; 0x94
 8007b74:	9320      	str	r3, [sp, #128]	; 0x80
 8007b76:	4bac      	ldr	r3, [pc, #688]	; (8007e28 <_strtod_l+0x2bc>)
 8007b78:	9005      	str	r0, [sp, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	9108      	str	r1, [sp, #32]
 8007b7e:	0018      	movs	r0, r3
 8007b80:	9307      	str	r3, [sp, #28]
 8007b82:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b84:	f7f8 fabe 	bl	8000104 <strlen>
 8007b88:	2600      	movs	r6, #0
 8007b8a:	0004      	movs	r4, r0
 8007b8c:	2700      	movs	r7, #0
 8007b8e:	9b08      	ldr	r3, [sp, #32]
 8007b90:	931f      	str	r3, [sp, #124]	; 0x7c
 8007b92:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007b94:	7813      	ldrb	r3, [r2, #0]
 8007b96:	2b2b      	cmp	r3, #43	; 0x2b
 8007b98:	d058      	beq.n	8007c4c <_strtod_l+0xe0>
 8007b9a:	d844      	bhi.n	8007c26 <_strtod_l+0xba>
 8007b9c:	2b0d      	cmp	r3, #13
 8007b9e:	d83d      	bhi.n	8007c1c <_strtod_l+0xb0>
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d83d      	bhi.n	8007c20 <_strtod_l+0xb4>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d047      	beq.n	8007c38 <_strtod_l+0xcc>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	930e      	str	r3, [sp, #56]	; 0x38
 8007bac:	2200      	movs	r2, #0
 8007bae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bb0:	920a      	str	r2, [sp, #40]	; 0x28
 8007bb2:	9306      	str	r3, [sp, #24]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b30      	cmp	r3, #48	; 0x30
 8007bb8:	d000      	beq.n	8007bbc <_strtod_l+0x50>
 8007bba:	e07f      	b.n	8007cbc <_strtod_l+0x150>
 8007bbc:	9b06      	ldr	r3, [sp, #24]
 8007bbe:	3220      	adds	r2, #32
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	4393      	bics	r3, r2
 8007bc4:	2b58      	cmp	r3, #88	; 0x58
 8007bc6:	d000      	beq.n	8007bca <_strtod_l+0x5e>
 8007bc8:	e06e      	b.n	8007ca8 <_strtod_l+0x13c>
 8007bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bcc:	9502      	str	r5, [sp, #8]
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	ab20      	add	r3, sp, #128	; 0x80
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	4a95      	ldr	r2, [pc, #596]	; (8007e2c <_strtod_l+0x2c0>)
 8007bd6:	ab21      	add	r3, sp, #132	; 0x84
 8007bd8:	9805      	ldr	r0, [sp, #20]
 8007bda:	a91f      	add	r1, sp, #124	; 0x7c
 8007bdc:	f001 fd84 	bl	80096e8 <__gethex>
 8007be0:	2307      	movs	r3, #7
 8007be2:	0005      	movs	r5, r0
 8007be4:	0004      	movs	r4, r0
 8007be6:	401d      	ands	r5, r3
 8007be8:	4218      	tst	r0, r3
 8007bea:	d006      	beq.n	8007bfa <_strtod_l+0x8e>
 8007bec:	2d06      	cmp	r5, #6
 8007bee:	d12f      	bne.n	8007c50 <_strtod_l+0xe4>
 8007bf0:	9b06      	ldr	r3, [sp, #24]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	931f      	str	r3, [sp, #124]	; 0x7c
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8007bfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <_strtod_l+0x9a>
 8007c00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c02:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01c      	beq.n	8007c46 <_strtod_l+0xda>
 8007c0c:	2380      	movs	r3, #128	; 0x80
 8007c0e:	0032      	movs	r2, r6
 8007c10:	061b      	lsls	r3, r3, #24
 8007c12:	18fb      	adds	r3, r7, r3
 8007c14:	0010      	movs	r0, r2
 8007c16:	0019      	movs	r1, r3
 8007c18:	b025      	add	sp, #148	; 0x94
 8007c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c1c:	2b20      	cmp	r3, #32
 8007c1e:	d1c3      	bne.n	8007ba8 <_strtod_l+0x3c>
 8007c20:	3201      	adds	r2, #1
 8007c22:	921f      	str	r2, [sp, #124]	; 0x7c
 8007c24:	e7b5      	b.n	8007b92 <_strtod_l+0x26>
 8007c26:	2b2d      	cmp	r3, #45	; 0x2d
 8007c28:	d1be      	bne.n	8007ba8 <_strtod_l+0x3c>
 8007c2a:	3b2c      	subs	r3, #44	; 0x2c
 8007c2c:	930e      	str	r3, [sp, #56]	; 0x38
 8007c2e:	1c53      	adds	r3, r2, #1
 8007c30:	931f      	str	r3, [sp, #124]	; 0x7c
 8007c32:	7853      	ldrb	r3, [r2, #1]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1b9      	bne.n	8007bac <_strtod_l+0x40>
 8007c38:	9b08      	ldr	r3, [sp, #32]
 8007c3a:	931f      	str	r3, [sp, #124]	; 0x7c
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	930e      	str	r3, [sp, #56]	; 0x38
 8007c40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1dc      	bne.n	8007c00 <_strtod_l+0x94>
 8007c46:	0032      	movs	r2, r6
 8007c48:	003b      	movs	r3, r7
 8007c4a:	e7e3      	b.n	8007c14 <_strtod_l+0xa8>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e7ed      	b.n	8007c2c <_strtod_l+0xc0>
 8007c50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c52:	2a00      	cmp	r2, #0
 8007c54:	d007      	beq.n	8007c66 <_strtod_l+0xfa>
 8007c56:	2135      	movs	r1, #53	; 0x35
 8007c58:	a822      	add	r0, sp, #136	; 0x88
 8007c5a:	f002 fd06 	bl	800a66a <__copybits>
 8007c5e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007c60:	9805      	ldr	r0, [sp, #20]
 8007c62:	f002 f8c1 	bl	8009de8 <_Bfree>
 8007c66:	1e68      	subs	r0, r5, #1
 8007c68:	2804      	cmp	r0, #4
 8007c6a:	d806      	bhi.n	8007c7a <_strtod_l+0x10e>
 8007c6c:	f7f8 fa52 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007c70:	1816030b 	.word	0x1816030b
 8007c74:	0b          	.byte	0x0b
 8007c75:	00          	.byte	0x00
 8007c76:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007c78:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007c7a:	0723      	lsls	r3, r4, #28
 8007c7c:	d5bd      	bpl.n	8007bfa <_strtod_l+0x8e>
 8007c7e:	2380      	movs	r3, #128	; 0x80
 8007c80:	061b      	lsls	r3, r3, #24
 8007c82:	431f      	orrs	r7, r3
 8007c84:	e7b9      	b.n	8007bfa <_strtod_l+0x8e>
 8007c86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c88:	4a69      	ldr	r2, [pc, #420]	; (8007e30 <_strtod_l+0x2c4>)
 8007c8a:	496a      	ldr	r1, [pc, #424]	; (8007e34 <_strtod_l+0x2c8>)
 8007c8c:	401a      	ands	r2, r3
 8007c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c90:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007c92:	185b      	adds	r3, r3, r1
 8007c94:	051b      	lsls	r3, r3, #20
 8007c96:	431a      	orrs	r2, r3
 8007c98:	0017      	movs	r7, r2
 8007c9a:	e7ee      	b.n	8007c7a <_strtod_l+0x10e>
 8007c9c:	4f66      	ldr	r7, [pc, #408]	; (8007e38 <_strtod_l+0x2cc>)
 8007c9e:	e7ec      	b.n	8007c7a <_strtod_l+0x10e>
 8007ca0:	2601      	movs	r6, #1
 8007ca2:	4f66      	ldr	r7, [pc, #408]	; (8007e3c <_strtod_l+0x2d0>)
 8007ca4:	4276      	negs	r6, r6
 8007ca6:	e7e8      	b.n	8007c7a <_strtod_l+0x10e>
 8007ca8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	921f      	str	r2, [sp, #124]	; 0x7c
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b30      	cmp	r3, #48	; 0x30
 8007cb2:	d0f9      	beq.n	8007ca8 <_strtod_l+0x13c>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0a0      	beq.n	8007bfa <_strtod_l+0x8e>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	930a      	str	r3, [sp, #40]	; 0x28
 8007cbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cbe:	220a      	movs	r2, #10
 8007cc0:	9310      	str	r3, [sp, #64]	; 0x40
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007ccc:	7805      	ldrb	r5, [r0, #0]
 8007cce:	002b      	movs	r3, r5
 8007cd0:	3b30      	subs	r3, #48	; 0x30
 8007cd2:	b2d9      	uxtb	r1, r3
 8007cd4:	2909      	cmp	r1, #9
 8007cd6:	d927      	bls.n	8007d28 <_strtod_l+0x1bc>
 8007cd8:	0022      	movs	r2, r4
 8007cda:	9907      	ldr	r1, [sp, #28]
 8007cdc:	f002 fe9e 	bl	800aa1c <strncmp>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d033      	beq.n	8007d4c <_strtod_l+0x1e0>
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	002b      	movs	r3, r5
 8007ce8:	4684      	mov	ip, r0
 8007cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cec:	900c      	str	r0, [sp, #48]	; 0x30
 8007cee:	9206      	str	r2, [sp, #24]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	0019      	movs	r1, r3
 8007cf4:	4391      	bics	r1, r2
 8007cf6:	000a      	movs	r2, r1
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	9107      	str	r1, [sp, #28]
 8007cfc:	2a45      	cmp	r2, #69	; 0x45
 8007cfe:	d000      	beq.n	8007d02 <_strtod_l+0x196>
 8007d00:	e0c5      	b.n	8007e8e <_strtod_l+0x322>
 8007d02:	9b06      	ldr	r3, [sp, #24]
 8007d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d06:	4303      	orrs	r3, r0
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	428b      	cmp	r3, r1
 8007d0c:	d094      	beq.n	8007c38 <_strtod_l+0xcc>
 8007d0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d10:	9308      	str	r3, [sp, #32]
 8007d12:	3301      	adds	r3, #1
 8007d14:	931f      	str	r3, [sp, #124]	; 0x7c
 8007d16:	9b08      	ldr	r3, [sp, #32]
 8007d18:	785b      	ldrb	r3, [r3, #1]
 8007d1a:	2b2b      	cmp	r3, #43	; 0x2b
 8007d1c:	d076      	beq.n	8007e0c <_strtod_l+0x2a0>
 8007d1e:	000c      	movs	r4, r1
 8007d20:	2b2d      	cmp	r3, #45	; 0x2d
 8007d22:	d179      	bne.n	8007e18 <_strtod_l+0x2ac>
 8007d24:	2401      	movs	r4, #1
 8007d26:	e072      	b.n	8007e0e <_strtod_l+0x2a2>
 8007d28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d2a:	2908      	cmp	r1, #8
 8007d2c:	dc09      	bgt.n	8007d42 <_strtod_l+0x1d6>
 8007d2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d30:	4351      	muls	r1, r2
 8007d32:	185b      	adds	r3, r3, r1
 8007d34:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d38:	3001      	adds	r0, #1
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3e:	901f      	str	r0, [sp, #124]	; 0x7c
 8007d40:	e7c3      	b.n	8007cca <_strtod_l+0x15e>
 8007d42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d44:	4351      	muls	r1, r2
 8007d46:	185b      	adds	r3, r3, r1
 8007d48:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d4a:	e7f4      	b.n	8007d36 <_strtod_l+0x1ca>
 8007d4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d50:	191c      	adds	r4, r3, r4
 8007d52:	941f      	str	r4, [sp, #124]	; 0x7c
 8007d54:	7823      	ldrb	r3, [r4, #0]
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	d039      	beq.n	8007dce <_strtod_l+0x262>
 8007d5a:	900c      	str	r0, [sp, #48]	; 0x30
 8007d5c:	9206      	str	r2, [sp, #24]
 8007d5e:	001a      	movs	r2, r3
 8007d60:	3a30      	subs	r2, #48	; 0x30
 8007d62:	2a09      	cmp	r2, #9
 8007d64:	d912      	bls.n	8007d8c <_strtod_l+0x220>
 8007d66:	2201      	movs	r2, #1
 8007d68:	4694      	mov	ip, r2
 8007d6a:	e7c1      	b.n	8007cf0 <_strtod_l+0x184>
 8007d6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d6e:	3001      	adds	r0, #1
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	921f      	str	r2, [sp, #124]	; 0x7c
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	2b30      	cmp	r3, #48	; 0x30
 8007d78:	d0f8      	beq.n	8007d6c <_strtod_l+0x200>
 8007d7a:	001a      	movs	r2, r3
 8007d7c:	3a31      	subs	r2, #49	; 0x31
 8007d7e:	2a08      	cmp	r2, #8
 8007d80:	d83f      	bhi.n	8007e02 <_strtod_l+0x296>
 8007d82:	900c      	str	r0, [sp, #48]	; 0x30
 8007d84:	2000      	movs	r0, #0
 8007d86:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007d88:	9006      	str	r0, [sp, #24]
 8007d8a:	9210      	str	r2, [sp, #64]	; 0x40
 8007d8c:	001a      	movs	r2, r3
 8007d8e:	1c41      	adds	r1, r0, #1
 8007d90:	3a30      	subs	r2, #48	; 0x30
 8007d92:	2b30      	cmp	r3, #48	; 0x30
 8007d94:	d015      	beq.n	8007dc2 <_strtod_l+0x256>
 8007d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d98:	185b      	adds	r3, r3, r1
 8007d9a:	210a      	movs	r1, #10
 8007d9c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d9e:	9b06      	ldr	r3, [sp, #24]
 8007da0:	18c4      	adds	r4, r0, r3
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	d115      	bne.n	8007dd2 <_strtod_l+0x266>
 8007da6:	9906      	ldr	r1, [sp, #24]
 8007da8:	9b06      	ldr	r3, [sp, #24]
 8007daa:	3101      	adds	r1, #1
 8007dac:	1809      	adds	r1, r1, r0
 8007dae:	181b      	adds	r3, r3, r0
 8007db0:	9106      	str	r1, [sp, #24]
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	dc1b      	bgt.n	8007dee <_strtod_l+0x282>
 8007db6:	230a      	movs	r3, #10
 8007db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dba:	434b      	muls	r3, r1
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	18d3      	adds	r3, r2, r3
 8007dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007dc4:	0008      	movs	r0, r1
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	921f      	str	r2, [sp, #124]	; 0x7c
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	e7c7      	b.n	8007d5e <_strtod_l+0x1f2>
 8007dce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd0:	e7d1      	b.n	8007d76 <_strtod_l+0x20a>
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	dc04      	bgt.n	8007de0 <_strtod_l+0x274>
 8007dd6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007dd8:	434d      	muls	r5, r1
 8007dda:	950b      	str	r5, [sp, #44]	; 0x2c
 8007ddc:	3301      	adds	r3, #1
 8007dde:	e7e0      	b.n	8007da2 <_strtod_l+0x236>
 8007de0:	1c5d      	adds	r5, r3, #1
 8007de2:	2d10      	cmp	r5, #16
 8007de4:	dcfa      	bgt.n	8007ddc <_strtod_l+0x270>
 8007de6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007de8:	434d      	muls	r5, r1
 8007dea:	950f      	str	r5, [sp, #60]	; 0x3c
 8007dec:	e7f6      	b.n	8007ddc <_strtod_l+0x270>
 8007dee:	9b06      	ldr	r3, [sp, #24]
 8007df0:	2100      	movs	r1, #0
 8007df2:	2b10      	cmp	r3, #16
 8007df4:	dce5      	bgt.n	8007dc2 <_strtod_l+0x256>
 8007df6:	230a      	movs	r3, #10
 8007df8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007dfa:	4343      	muls	r3, r0
 8007dfc:	18d3      	adds	r3, r2, r3
 8007dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e00:	e7df      	b.n	8007dc2 <_strtod_l+0x256>
 8007e02:	2200      	movs	r2, #0
 8007e04:	920c      	str	r2, [sp, #48]	; 0x30
 8007e06:	9206      	str	r2, [sp, #24]
 8007e08:	3201      	adds	r2, #1
 8007e0a:	e7ad      	b.n	8007d68 <_strtod_l+0x1fc>
 8007e0c:	2400      	movs	r4, #0
 8007e0e:	9b08      	ldr	r3, [sp, #32]
 8007e10:	3302      	adds	r3, #2
 8007e12:	931f      	str	r3, [sp, #124]	; 0x7c
 8007e14:	9b08      	ldr	r3, [sp, #32]
 8007e16:	789b      	ldrb	r3, [r3, #2]
 8007e18:	001a      	movs	r2, r3
 8007e1a:	3a30      	subs	r2, #48	; 0x30
 8007e1c:	2a09      	cmp	r2, #9
 8007e1e:	d913      	bls.n	8007e48 <_strtod_l+0x2dc>
 8007e20:	9a08      	ldr	r2, [sp, #32]
 8007e22:	921f      	str	r2, [sp, #124]	; 0x7c
 8007e24:	2200      	movs	r2, #0
 8007e26:	e031      	b.n	8007e8c <_strtod_l+0x320>
 8007e28:	0800b9f8 	.word	0x0800b9f8
 8007e2c:	0800b8ac 	.word	0x0800b8ac
 8007e30:	ffefffff 	.word	0xffefffff
 8007e34:	00000433 	.word	0x00000433
 8007e38:	7ff00000 	.word	0x7ff00000
 8007e3c:	7fffffff 	.word	0x7fffffff
 8007e40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	921f      	str	r2, [sp, #124]	; 0x7c
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b30      	cmp	r3, #48	; 0x30
 8007e4a:	d0f9      	beq.n	8007e40 <_strtod_l+0x2d4>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	9207      	str	r2, [sp, #28]
 8007e50:	001a      	movs	r2, r3
 8007e52:	3a31      	subs	r2, #49	; 0x31
 8007e54:	2a08      	cmp	r2, #8
 8007e56:	d81a      	bhi.n	8007e8e <_strtod_l+0x322>
 8007e58:	3b30      	subs	r3, #48	; 0x30
 8007e5a:	001a      	movs	r2, r3
 8007e5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e5e:	9307      	str	r3, [sp, #28]
 8007e60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e62:	1c59      	adds	r1, r3, #1
 8007e64:	911f      	str	r1, [sp, #124]	; 0x7c
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	001d      	movs	r5, r3
 8007e6a:	3d30      	subs	r5, #48	; 0x30
 8007e6c:	2d09      	cmp	r5, #9
 8007e6e:	d939      	bls.n	8007ee4 <_strtod_l+0x378>
 8007e70:	9d07      	ldr	r5, [sp, #28]
 8007e72:	1b49      	subs	r1, r1, r5
 8007e74:	4db0      	ldr	r5, [pc, #704]	; (8008138 <_strtod_l+0x5cc>)
 8007e76:	9507      	str	r5, [sp, #28]
 8007e78:	2908      	cmp	r1, #8
 8007e7a:	dc03      	bgt.n	8007e84 <_strtod_l+0x318>
 8007e7c:	9207      	str	r2, [sp, #28]
 8007e7e:	42aa      	cmp	r2, r5
 8007e80:	dd00      	ble.n	8007e84 <_strtod_l+0x318>
 8007e82:	9507      	str	r5, [sp, #28]
 8007e84:	2c00      	cmp	r4, #0
 8007e86:	d002      	beq.n	8007e8e <_strtod_l+0x322>
 8007e88:	9a07      	ldr	r2, [sp, #28]
 8007e8a:	4252      	negs	r2, r2
 8007e8c:	9207      	str	r2, [sp, #28]
 8007e8e:	9a06      	ldr	r2, [sp, #24]
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	d14b      	bne.n	8007f2c <_strtod_l+0x3c0>
 8007e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e96:	4310      	orrs	r0, r2
 8007e98:	d000      	beq.n	8007e9c <_strtod_l+0x330>
 8007e9a:	e6ae      	b.n	8007bfa <_strtod_l+0x8e>
 8007e9c:	4662      	mov	r2, ip
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	d000      	beq.n	8007ea4 <_strtod_l+0x338>
 8007ea2:	e6c9      	b.n	8007c38 <_strtod_l+0xcc>
 8007ea4:	2b69      	cmp	r3, #105	; 0x69
 8007ea6:	d025      	beq.n	8007ef4 <_strtod_l+0x388>
 8007ea8:	dc21      	bgt.n	8007eee <_strtod_l+0x382>
 8007eaa:	2b49      	cmp	r3, #73	; 0x49
 8007eac:	d022      	beq.n	8007ef4 <_strtod_l+0x388>
 8007eae:	2b4e      	cmp	r3, #78	; 0x4e
 8007eb0:	d000      	beq.n	8007eb4 <_strtod_l+0x348>
 8007eb2:	e6c1      	b.n	8007c38 <_strtod_l+0xcc>
 8007eb4:	49a1      	ldr	r1, [pc, #644]	; (800813c <_strtod_l+0x5d0>)
 8007eb6:	a81f      	add	r0, sp, #124	; 0x7c
 8007eb8:	f001 fe64 	bl	8009b84 <__match>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d100      	bne.n	8007ec2 <_strtod_l+0x356>
 8007ec0:	e6ba      	b.n	8007c38 <_strtod_l+0xcc>
 8007ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b28      	cmp	r3, #40	; 0x28
 8007ec8:	d12a      	bne.n	8007f20 <_strtod_l+0x3b4>
 8007eca:	499d      	ldr	r1, [pc, #628]	; (8008140 <_strtod_l+0x5d4>)
 8007ecc:	aa22      	add	r2, sp, #136	; 0x88
 8007ece:	a81f      	add	r0, sp, #124	; 0x7c
 8007ed0:	f001 fe6c 	bl	8009bac <__hexnan>
 8007ed4:	2805      	cmp	r0, #5
 8007ed6:	d123      	bne.n	8007f20 <_strtod_l+0x3b4>
 8007ed8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007eda:	4a9a      	ldr	r2, [pc, #616]	; (8008144 <_strtod_l+0x5d8>)
 8007edc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	0017      	movs	r7, r2
 8007ee2:	e68a      	b.n	8007bfa <_strtod_l+0x8e>
 8007ee4:	210a      	movs	r1, #10
 8007ee6:	434a      	muls	r2, r1
 8007ee8:	18d2      	adds	r2, r2, r3
 8007eea:	3a30      	subs	r2, #48	; 0x30
 8007eec:	e7b8      	b.n	8007e60 <_strtod_l+0x2f4>
 8007eee:	2b6e      	cmp	r3, #110	; 0x6e
 8007ef0:	d0e0      	beq.n	8007eb4 <_strtod_l+0x348>
 8007ef2:	e6a1      	b.n	8007c38 <_strtod_l+0xcc>
 8007ef4:	4994      	ldr	r1, [pc, #592]	; (8008148 <_strtod_l+0x5dc>)
 8007ef6:	a81f      	add	r0, sp, #124	; 0x7c
 8007ef8:	f001 fe44 	bl	8009b84 <__match>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d100      	bne.n	8007f02 <_strtod_l+0x396>
 8007f00:	e69a      	b.n	8007c38 <_strtod_l+0xcc>
 8007f02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f04:	4991      	ldr	r1, [pc, #580]	; (800814c <_strtod_l+0x5e0>)
 8007f06:	3b01      	subs	r3, #1
 8007f08:	a81f      	add	r0, sp, #124	; 0x7c
 8007f0a:	931f      	str	r3, [sp, #124]	; 0x7c
 8007f0c:	f001 fe3a 	bl	8009b84 <__match>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d102      	bne.n	8007f1a <_strtod_l+0x3ae>
 8007f14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f16:	3301      	adds	r3, #1
 8007f18:	931f      	str	r3, [sp, #124]	; 0x7c
 8007f1a:	2600      	movs	r6, #0
 8007f1c:	4f89      	ldr	r7, [pc, #548]	; (8008144 <_strtod_l+0x5d8>)
 8007f1e:	e66c      	b.n	8007bfa <_strtod_l+0x8e>
 8007f20:	488b      	ldr	r0, [pc, #556]	; (8008150 <_strtod_l+0x5e4>)
 8007f22:	f002 fd75 	bl	800aa10 <nan>
 8007f26:	0006      	movs	r6, r0
 8007f28:	000f      	movs	r7, r1
 8007f2a:	e666      	b.n	8007bfa <_strtod_l+0x8e>
 8007f2c:	9b07      	ldr	r3, [sp, #28]
 8007f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f30:	1a9b      	subs	r3, r3, r2
 8007f32:	930a      	str	r3, [sp, #40]	; 0x28
 8007f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <_strtod_l+0x3d2>
 8007f3a:	9b06      	ldr	r3, [sp, #24]
 8007f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3e:	9c06      	ldr	r4, [sp, #24]
 8007f40:	2c10      	cmp	r4, #16
 8007f42:	dd00      	ble.n	8007f46 <_strtod_l+0x3da>
 8007f44:	2410      	movs	r4, #16
 8007f46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f48:	f7fa f9c8 	bl	80022dc <__aeabi_ui2d>
 8007f4c:	9b06      	ldr	r3, [sp, #24]
 8007f4e:	0006      	movs	r6, r0
 8007f50:	000f      	movs	r7, r1
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	dd15      	ble.n	8007f82 <_strtod_l+0x416>
 8007f56:	0022      	movs	r2, r4
 8007f58:	4b7e      	ldr	r3, [pc, #504]	; (8008154 <_strtod_l+0x5e8>)
 8007f5a:	3a09      	subs	r2, #9
 8007f5c:	00d2      	lsls	r2, r2, #3
 8007f5e:	189b      	adds	r3, r3, r2
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f7f9 fb38 	bl	80015d8 <__aeabi_dmul>
 8007f68:	0006      	movs	r6, r0
 8007f6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007f6c:	000f      	movs	r7, r1
 8007f6e:	f7fa f9b5 	bl	80022dc <__aeabi_ui2d>
 8007f72:	0002      	movs	r2, r0
 8007f74:	000b      	movs	r3, r1
 8007f76:	0030      	movs	r0, r6
 8007f78:	0039      	movs	r1, r7
 8007f7a:	f7f8 fbef 	bl	800075c <__aeabi_dadd>
 8007f7e:	0006      	movs	r6, r0
 8007f80:	000f      	movs	r7, r1
 8007f82:	9b06      	ldr	r3, [sp, #24]
 8007f84:	2b0f      	cmp	r3, #15
 8007f86:	dc39      	bgt.n	8007ffc <_strtod_l+0x490>
 8007f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d100      	bne.n	8007f90 <_strtod_l+0x424>
 8007f8e:	e634      	b.n	8007bfa <_strtod_l+0x8e>
 8007f90:	dd24      	ble.n	8007fdc <_strtod_l+0x470>
 8007f92:	2b16      	cmp	r3, #22
 8007f94:	dc09      	bgt.n	8007faa <_strtod_l+0x43e>
 8007f96:	496f      	ldr	r1, [pc, #444]	; (8008154 <_strtod_l+0x5e8>)
 8007f98:	00db      	lsls	r3, r3, #3
 8007f9a:	18c9      	adds	r1, r1, r3
 8007f9c:	0032      	movs	r2, r6
 8007f9e:	6808      	ldr	r0, [r1, #0]
 8007fa0:	6849      	ldr	r1, [r1, #4]
 8007fa2:	003b      	movs	r3, r7
 8007fa4:	f7f9 fb18 	bl	80015d8 <__aeabi_dmul>
 8007fa8:	e7bd      	b.n	8007f26 <_strtod_l+0x3ba>
 8007faa:	2325      	movs	r3, #37	; 0x25
 8007fac:	9a06      	ldr	r2, [sp, #24]
 8007fae:	1a9b      	subs	r3, r3, r2
 8007fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	db22      	blt.n	8007ffc <_strtod_l+0x490>
 8007fb6:	240f      	movs	r4, #15
 8007fb8:	9b06      	ldr	r3, [sp, #24]
 8007fba:	4d66      	ldr	r5, [pc, #408]	; (8008154 <_strtod_l+0x5e8>)
 8007fbc:	1ae4      	subs	r4, r4, r3
 8007fbe:	00e1      	lsls	r1, r4, #3
 8007fc0:	1869      	adds	r1, r5, r1
 8007fc2:	0032      	movs	r2, r6
 8007fc4:	6808      	ldr	r0, [r1, #0]
 8007fc6:	6849      	ldr	r1, [r1, #4]
 8007fc8:	003b      	movs	r3, r7
 8007fca:	f7f9 fb05 	bl	80015d8 <__aeabi_dmul>
 8007fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd0:	1b1c      	subs	r4, r3, r4
 8007fd2:	00e4      	lsls	r4, r4, #3
 8007fd4:	192c      	adds	r4, r5, r4
 8007fd6:	6822      	ldr	r2, [r4, #0]
 8007fd8:	6863      	ldr	r3, [r4, #4]
 8007fda:	e7e3      	b.n	8007fa4 <_strtod_l+0x438>
 8007fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fde:	3316      	adds	r3, #22
 8007fe0:	db0c      	blt.n	8007ffc <_strtod_l+0x490>
 8007fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fe4:	9a07      	ldr	r2, [sp, #28]
 8007fe6:	0030      	movs	r0, r6
 8007fe8:	1a9a      	subs	r2, r3, r2
 8007fea:	4b5a      	ldr	r3, [pc, #360]	; (8008154 <_strtod_l+0x5e8>)
 8007fec:	00d2      	lsls	r2, r2, #3
 8007fee:	189b      	adds	r3, r3, r2
 8007ff0:	0039      	movs	r1, r7
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f7f8 feed 	bl	8000dd4 <__aeabi_ddiv>
 8007ffa:	e794      	b.n	8007f26 <_strtod_l+0x3ba>
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	1b1c      	subs	r4, r3, r4
 8008000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008002:	18e4      	adds	r4, r4, r3
 8008004:	2c00      	cmp	r4, #0
 8008006:	dd72      	ble.n	80080ee <_strtod_l+0x582>
 8008008:	230f      	movs	r3, #15
 800800a:	0021      	movs	r1, r4
 800800c:	4019      	ands	r1, r3
 800800e:	421c      	tst	r4, r3
 8008010:	d00a      	beq.n	8008028 <_strtod_l+0x4bc>
 8008012:	00cb      	lsls	r3, r1, #3
 8008014:	494f      	ldr	r1, [pc, #316]	; (8008154 <_strtod_l+0x5e8>)
 8008016:	0032      	movs	r2, r6
 8008018:	18c9      	adds	r1, r1, r3
 800801a:	6808      	ldr	r0, [r1, #0]
 800801c:	6849      	ldr	r1, [r1, #4]
 800801e:	003b      	movs	r3, r7
 8008020:	f7f9 fada 	bl	80015d8 <__aeabi_dmul>
 8008024:	0006      	movs	r6, r0
 8008026:	000f      	movs	r7, r1
 8008028:	230f      	movs	r3, #15
 800802a:	439c      	bics	r4, r3
 800802c:	d04a      	beq.n	80080c4 <_strtod_l+0x558>
 800802e:	3326      	adds	r3, #38	; 0x26
 8008030:	33ff      	adds	r3, #255	; 0xff
 8008032:	429c      	cmp	r4, r3
 8008034:	dd22      	ble.n	800807c <_strtod_l+0x510>
 8008036:	2300      	movs	r3, #0
 8008038:	9306      	str	r3, [sp, #24]
 800803a:	9307      	str	r3, [sp, #28]
 800803c:	930b      	str	r3, [sp, #44]	; 0x2c
 800803e:	9309      	str	r3, [sp, #36]	; 0x24
 8008040:	2322      	movs	r3, #34	; 0x22
 8008042:	2600      	movs	r6, #0
 8008044:	9a05      	ldr	r2, [sp, #20]
 8008046:	4f3f      	ldr	r7, [pc, #252]	; (8008144 <_strtod_l+0x5d8>)
 8008048:	6013      	str	r3, [r2, #0]
 800804a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800804c:	42b3      	cmp	r3, r6
 800804e:	d100      	bne.n	8008052 <_strtod_l+0x4e6>
 8008050:	e5d3      	b.n	8007bfa <_strtod_l+0x8e>
 8008052:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008054:	9805      	ldr	r0, [sp, #20]
 8008056:	f001 fec7 	bl	8009de8 <_Bfree>
 800805a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800805c:	9805      	ldr	r0, [sp, #20]
 800805e:	f001 fec3 	bl	8009de8 <_Bfree>
 8008062:	9907      	ldr	r1, [sp, #28]
 8008064:	9805      	ldr	r0, [sp, #20]
 8008066:	f001 febf 	bl	8009de8 <_Bfree>
 800806a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800806c:	9805      	ldr	r0, [sp, #20]
 800806e:	f001 febb 	bl	8009de8 <_Bfree>
 8008072:	9906      	ldr	r1, [sp, #24]
 8008074:	9805      	ldr	r0, [sp, #20]
 8008076:	f001 feb7 	bl	8009de8 <_Bfree>
 800807a:	e5be      	b.n	8007bfa <_strtod_l+0x8e>
 800807c:	2300      	movs	r3, #0
 800807e:	0030      	movs	r0, r6
 8008080:	0039      	movs	r1, r7
 8008082:	4d35      	ldr	r5, [pc, #212]	; (8008158 <_strtod_l+0x5ec>)
 8008084:	1124      	asrs	r4, r4, #4
 8008086:	9308      	str	r3, [sp, #32]
 8008088:	2c01      	cmp	r4, #1
 800808a:	dc1e      	bgt.n	80080ca <_strtod_l+0x55e>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <_strtod_l+0x528>
 8008090:	0006      	movs	r6, r0
 8008092:	000f      	movs	r7, r1
 8008094:	4b31      	ldr	r3, [pc, #196]	; (800815c <_strtod_l+0x5f0>)
 8008096:	0032      	movs	r2, r6
 8008098:	18ff      	adds	r7, r7, r3
 800809a:	9b08      	ldr	r3, [sp, #32]
 800809c:	00dd      	lsls	r5, r3, #3
 800809e:	4b2e      	ldr	r3, [pc, #184]	; (8008158 <_strtod_l+0x5ec>)
 80080a0:	195d      	adds	r5, r3, r5
 80080a2:	6828      	ldr	r0, [r5, #0]
 80080a4:	6869      	ldr	r1, [r5, #4]
 80080a6:	003b      	movs	r3, r7
 80080a8:	f7f9 fa96 	bl	80015d8 <__aeabi_dmul>
 80080ac:	4b25      	ldr	r3, [pc, #148]	; (8008144 <_strtod_l+0x5d8>)
 80080ae:	4a2c      	ldr	r2, [pc, #176]	; (8008160 <_strtod_l+0x5f4>)
 80080b0:	0006      	movs	r6, r0
 80080b2:	400b      	ands	r3, r1
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d8be      	bhi.n	8008036 <_strtod_l+0x4ca>
 80080b8:	4a2a      	ldr	r2, [pc, #168]	; (8008164 <_strtod_l+0x5f8>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d913      	bls.n	80080e6 <_strtod_l+0x57a>
 80080be:	2601      	movs	r6, #1
 80080c0:	4f29      	ldr	r7, [pc, #164]	; (8008168 <_strtod_l+0x5fc>)
 80080c2:	4276      	negs	r6, r6
 80080c4:	2300      	movs	r3, #0
 80080c6:	9308      	str	r3, [sp, #32]
 80080c8:	e087      	b.n	80081da <_strtod_l+0x66e>
 80080ca:	2201      	movs	r2, #1
 80080cc:	4214      	tst	r4, r2
 80080ce:	d004      	beq.n	80080da <_strtod_l+0x56e>
 80080d0:	682a      	ldr	r2, [r5, #0]
 80080d2:	686b      	ldr	r3, [r5, #4]
 80080d4:	f7f9 fa80 	bl	80015d8 <__aeabi_dmul>
 80080d8:	2301      	movs	r3, #1
 80080da:	9a08      	ldr	r2, [sp, #32]
 80080dc:	1064      	asrs	r4, r4, #1
 80080de:	3201      	adds	r2, #1
 80080e0:	9208      	str	r2, [sp, #32]
 80080e2:	3508      	adds	r5, #8
 80080e4:	e7d0      	b.n	8008088 <_strtod_l+0x51c>
 80080e6:	23d4      	movs	r3, #212	; 0xd4
 80080e8:	049b      	lsls	r3, r3, #18
 80080ea:	18cf      	adds	r7, r1, r3
 80080ec:	e7ea      	b.n	80080c4 <_strtod_l+0x558>
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	d0e8      	beq.n	80080c4 <_strtod_l+0x558>
 80080f2:	4264      	negs	r4, r4
 80080f4:	220f      	movs	r2, #15
 80080f6:	0023      	movs	r3, r4
 80080f8:	4013      	ands	r3, r2
 80080fa:	4214      	tst	r4, r2
 80080fc:	d00a      	beq.n	8008114 <_strtod_l+0x5a8>
 80080fe:	00da      	lsls	r2, r3, #3
 8008100:	4b14      	ldr	r3, [pc, #80]	; (8008154 <_strtod_l+0x5e8>)
 8008102:	0030      	movs	r0, r6
 8008104:	189b      	adds	r3, r3, r2
 8008106:	0039      	movs	r1, r7
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f7f8 fe62 	bl	8000dd4 <__aeabi_ddiv>
 8008110:	0006      	movs	r6, r0
 8008112:	000f      	movs	r7, r1
 8008114:	1124      	asrs	r4, r4, #4
 8008116:	d0d5      	beq.n	80080c4 <_strtod_l+0x558>
 8008118:	2c1f      	cmp	r4, #31
 800811a:	dd27      	ble.n	800816c <_strtod_l+0x600>
 800811c:	2300      	movs	r3, #0
 800811e:	9306      	str	r3, [sp, #24]
 8008120:	9307      	str	r3, [sp, #28]
 8008122:	930b      	str	r3, [sp, #44]	; 0x2c
 8008124:	9309      	str	r3, [sp, #36]	; 0x24
 8008126:	2322      	movs	r3, #34	; 0x22
 8008128:	9a05      	ldr	r2, [sp, #20]
 800812a:	2600      	movs	r6, #0
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008130:	2700      	movs	r7, #0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d18d      	bne.n	8008052 <_strtod_l+0x4e6>
 8008136:	e560      	b.n	8007bfa <_strtod_l+0x8e>
 8008138:	00004e1f 	.word	0x00004e1f
 800813c:	0800b87d 	.word	0x0800b87d
 8008140:	0800b8c0 	.word	0x0800b8c0
 8008144:	7ff00000 	.word	0x7ff00000
 8008148:	0800b875 	.word	0x0800b875
 800814c:	0800b903 	.word	0x0800b903
 8008150:	0800bbb0 	.word	0x0800bbb0
 8008154:	0800ba90 	.word	0x0800ba90
 8008158:	0800ba68 	.word	0x0800ba68
 800815c:	fcb00000 	.word	0xfcb00000
 8008160:	7ca00000 	.word	0x7ca00000
 8008164:	7c900000 	.word	0x7c900000
 8008168:	7fefffff 	.word	0x7fefffff
 800816c:	2310      	movs	r3, #16
 800816e:	0022      	movs	r2, r4
 8008170:	401a      	ands	r2, r3
 8008172:	9208      	str	r2, [sp, #32]
 8008174:	421c      	tst	r4, r3
 8008176:	d001      	beq.n	800817c <_strtod_l+0x610>
 8008178:	335a      	adds	r3, #90	; 0x5a
 800817a:	9308      	str	r3, [sp, #32]
 800817c:	0030      	movs	r0, r6
 800817e:	0039      	movs	r1, r7
 8008180:	2300      	movs	r3, #0
 8008182:	4dc5      	ldr	r5, [pc, #788]	; (8008498 <_strtod_l+0x92c>)
 8008184:	2201      	movs	r2, #1
 8008186:	4214      	tst	r4, r2
 8008188:	d004      	beq.n	8008194 <_strtod_l+0x628>
 800818a:	682a      	ldr	r2, [r5, #0]
 800818c:	686b      	ldr	r3, [r5, #4]
 800818e:	f7f9 fa23 	bl	80015d8 <__aeabi_dmul>
 8008192:	2301      	movs	r3, #1
 8008194:	1064      	asrs	r4, r4, #1
 8008196:	3508      	adds	r5, #8
 8008198:	2c00      	cmp	r4, #0
 800819a:	d1f3      	bne.n	8008184 <_strtod_l+0x618>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <_strtod_l+0x638>
 80081a0:	0006      	movs	r6, r0
 80081a2:	000f      	movs	r7, r1
 80081a4:	9b08      	ldr	r3, [sp, #32]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00f      	beq.n	80081ca <_strtod_l+0x65e>
 80081aa:	236b      	movs	r3, #107	; 0x6b
 80081ac:	007a      	lsls	r2, r7, #1
 80081ae:	0d52      	lsrs	r2, r2, #21
 80081b0:	0039      	movs	r1, r7
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd08      	ble.n	80081ca <_strtod_l+0x65e>
 80081b8:	2b1f      	cmp	r3, #31
 80081ba:	dc00      	bgt.n	80081be <_strtod_l+0x652>
 80081bc:	e124      	b.n	8008408 <_strtod_l+0x89c>
 80081be:	2600      	movs	r6, #0
 80081c0:	2b34      	cmp	r3, #52	; 0x34
 80081c2:	dc00      	bgt.n	80081c6 <_strtod_l+0x65a>
 80081c4:	e119      	b.n	80083fa <_strtod_l+0x88e>
 80081c6:	27dc      	movs	r7, #220	; 0xdc
 80081c8:	04bf      	lsls	r7, r7, #18
 80081ca:	2200      	movs	r2, #0
 80081cc:	2300      	movs	r3, #0
 80081ce:	0030      	movs	r0, r6
 80081d0:	0039      	movs	r1, r7
 80081d2:	f7f8 f939 	bl	8000448 <__aeabi_dcmpeq>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d1a0      	bne.n	800811c <_strtod_l+0x5b0>
 80081da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80081e2:	9b06      	ldr	r3, [sp, #24]
 80081e4:	9805      	ldr	r0, [sp, #20]
 80081e6:	f001 fe67 	bl	8009eb8 <__s2b>
 80081ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d100      	bne.n	80081f2 <_strtod_l+0x686>
 80081f0:	e721      	b.n	8008036 <_strtod_l+0x4ca>
 80081f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f4:	9907      	ldr	r1, [sp, #28]
 80081f6:	17da      	asrs	r2, r3, #31
 80081f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081fa:	1a5b      	subs	r3, r3, r1
 80081fc:	401a      	ands	r2, r3
 80081fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008200:	9215      	str	r2, [sp, #84]	; 0x54
 8008202:	43db      	mvns	r3, r3
 8008204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008206:	17db      	asrs	r3, r3, #31
 8008208:	401a      	ands	r2, r3
 800820a:	2300      	movs	r3, #0
 800820c:	921a      	str	r2, [sp, #104]	; 0x68
 800820e:	9306      	str	r3, [sp, #24]
 8008210:	9307      	str	r3, [sp, #28]
 8008212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008214:	9805      	ldr	r0, [sp, #20]
 8008216:	6859      	ldr	r1, [r3, #4]
 8008218:	f001 fda2 	bl	8009d60 <_Balloc>
 800821c:	9009      	str	r0, [sp, #36]	; 0x24
 800821e:	2800      	cmp	r0, #0
 8008220:	d100      	bne.n	8008224 <_strtod_l+0x6b8>
 8008222:	e70d      	b.n	8008040 <_strtod_l+0x4d4>
 8008224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008226:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	310c      	adds	r1, #12
 800822c:	1c9a      	adds	r2, r3, #2
 800822e:	0092      	lsls	r2, r2, #2
 8008230:	300c      	adds	r0, #12
 8008232:	930c      	str	r3, [sp, #48]	; 0x30
 8008234:	f7fe fce2 	bl	8006bfc <memcpy>
 8008238:	ab22      	add	r3, sp, #136	; 0x88
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	ab21      	add	r3, sp, #132	; 0x84
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	0032      	movs	r2, r6
 8008242:	003b      	movs	r3, r7
 8008244:	9805      	ldr	r0, [sp, #20]
 8008246:	9612      	str	r6, [sp, #72]	; 0x48
 8008248:	9713      	str	r7, [sp, #76]	; 0x4c
 800824a:	f002 f981 	bl	800a550 <__d2b>
 800824e:	9020      	str	r0, [sp, #128]	; 0x80
 8008250:	2800      	cmp	r0, #0
 8008252:	d100      	bne.n	8008256 <_strtod_l+0x6ea>
 8008254:	e6f4      	b.n	8008040 <_strtod_l+0x4d4>
 8008256:	2101      	movs	r1, #1
 8008258:	9805      	ldr	r0, [sp, #20]
 800825a:	f001 fec1 	bl	8009fe0 <__i2b>
 800825e:	9007      	str	r0, [sp, #28]
 8008260:	2800      	cmp	r0, #0
 8008262:	d100      	bne.n	8008266 <_strtod_l+0x6fa>
 8008264:	e6ec      	b.n	8008040 <_strtod_l+0x4d4>
 8008266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008268:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800826a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800826c:	1ad4      	subs	r4, r2, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	db01      	blt.n	8008276 <_strtod_l+0x70a>
 8008272:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8008274:	195d      	adds	r5, r3, r5
 8008276:	9908      	ldr	r1, [sp, #32]
 8008278:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800827a:	1a5b      	subs	r3, r3, r1
 800827c:	2136      	movs	r1, #54	; 0x36
 800827e:	189b      	adds	r3, r3, r2
 8008280:	1a8a      	subs	r2, r1, r2
 8008282:	4986      	ldr	r1, [pc, #536]	; (800849c <_strtod_l+0x930>)
 8008284:	2001      	movs	r0, #1
 8008286:	468c      	mov	ip, r1
 8008288:	2100      	movs	r1, #0
 800828a:	3b01      	subs	r3, #1
 800828c:	9110      	str	r1, [sp, #64]	; 0x40
 800828e:	9014      	str	r0, [sp, #80]	; 0x50
 8008290:	4563      	cmp	r3, ip
 8008292:	da07      	bge.n	80082a4 <_strtod_l+0x738>
 8008294:	4661      	mov	r1, ip
 8008296:	1ac9      	subs	r1, r1, r3
 8008298:	1a52      	subs	r2, r2, r1
 800829a:	291f      	cmp	r1, #31
 800829c:	dd00      	ble.n	80082a0 <_strtod_l+0x734>
 800829e:	e0b8      	b.n	8008412 <_strtod_l+0x8a6>
 80082a0:	4088      	lsls	r0, r1
 80082a2:	9014      	str	r0, [sp, #80]	; 0x50
 80082a4:	18ab      	adds	r3, r5, r2
 80082a6:	930c      	str	r3, [sp, #48]	; 0x30
 80082a8:	18a4      	adds	r4, r4, r2
 80082aa:	9b08      	ldr	r3, [sp, #32]
 80082ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ae:	191c      	adds	r4, r3, r4
 80082b0:	002b      	movs	r3, r5
 80082b2:	4295      	cmp	r5, r2
 80082b4:	dd00      	ble.n	80082b8 <_strtod_l+0x74c>
 80082b6:	0013      	movs	r3, r2
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	dd00      	ble.n	80082be <_strtod_l+0x752>
 80082bc:	0023      	movs	r3, r4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	dd04      	ble.n	80082cc <_strtod_l+0x760>
 80082c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082c4:	1ae4      	subs	r4, r4, r3
 80082c6:	1ad2      	subs	r2, r2, r3
 80082c8:	920c      	str	r2, [sp, #48]	; 0x30
 80082ca:	1aed      	subs	r5, r5, r3
 80082cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dd17      	ble.n	8008302 <_strtod_l+0x796>
 80082d2:	001a      	movs	r2, r3
 80082d4:	9907      	ldr	r1, [sp, #28]
 80082d6:	9805      	ldr	r0, [sp, #20]
 80082d8:	f001 ff48 	bl	800a16c <__pow5mult>
 80082dc:	9007      	str	r0, [sp, #28]
 80082de:	2800      	cmp	r0, #0
 80082e0:	d100      	bne.n	80082e4 <_strtod_l+0x778>
 80082e2:	e6ad      	b.n	8008040 <_strtod_l+0x4d4>
 80082e4:	0001      	movs	r1, r0
 80082e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80082e8:	9805      	ldr	r0, [sp, #20]
 80082ea:	f001 fe8f 	bl	800a00c <__multiply>
 80082ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d100      	bne.n	80082f6 <_strtod_l+0x78a>
 80082f4:	e6a4      	b.n	8008040 <_strtod_l+0x4d4>
 80082f6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80082f8:	9805      	ldr	r0, [sp, #20]
 80082fa:	f001 fd75 	bl	8009de8 <_Bfree>
 80082fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008300:	9320      	str	r3, [sp, #128]	; 0x80
 8008302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008304:	2b00      	cmp	r3, #0
 8008306:	dd00      	ble.n	800830a <_strtod_l+0x79e>
 8008308:	e089      	b.n	800841e <_strtod_l+0x8b2>
 800830a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800830c:	2b00      	cmp	r3, #0
 800830e:	dd08      	ble.n	8008322 <_strtod_l+0x7b6>
 8008310:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008312:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008314:	9805      	ldr	r0, [sp, #20]
 8008316:	f001 ff29 	bl	800a16c <__pow5mult>
 800831a:	9009      	str	r0, [sp, #36]	; 0x24
 800831c:	2800      	cmp	r0, #0
 800831e:	d100      	bne.n	8008322 <_strtod_l+0x7b6>
 8008320:	e68e      	b.n	8008040 <_strtod_l+0x4d4>
 8008322:	2c00      	cmp	r4, #0
 8008324:	dd08      	ble.n	8008338 <_strtod_l+0x7cc>
 8008326:	0022      	movs	r2, r4
 8008328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800832a:	9805      	ldr	r0, [sp, #20]
 800832c:	f001 ff7a 	bl	800a224 <__lshift>
 8008330:	9009      	str	r0, [sp, #36]	; 0x24
 8008332:	2800      	cmp	r0, #0
 8008334:	d100      	bne.n	8008338 <_strtod_l+0x7cc>
 8008336:	e683      	b.n	8008040 <_strtod_l+0x4d4>
 8008338:	2d00      	cmp	r5, #0
 800833a:	dd08      	ble.n	800834e <_strtod_l+0x7e2>
 800833c:	002a      	movs	r2, r5
 800833e:	9907      	ldr	r1, [sp, #28]
 8008340:	9805      	ldr	r0, [sp, #20]
 8008342:	f001 ff6f 	bl	800a224 <__lshift>
 8008346:	9007      	str	r0, [sp, #28]
 8008348:	2800      	cmp	r0, #0
 800834a:	d100      	bne.n	800834e <_strtod_l+0x7e2>
 800834c:	e678      	b.n	8008040 <_strtod_l+0x4d4>
 800834e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008350:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008352:	9805      	ldr	r0, [sp, #20]
 8008354:	f001 fff0 	bl	800a338 <__mdiff>
 8008358:	9006      	str	r0, [sp, #24]
 800835a:	2800      	cmp	r0, #0
 800835c:	d100      	bne.n	8008360 <_strtod_l+0x7f4>
 800835e:	e66f      	b.n	8008040 <_strtod_l+0x4d4>
 8008360:	2200      	movs	r2, #0
 8008362:	68c3      	ldr	r3, [r0, #12]
 8008364:	9907      	ldr	r1, [sp, #28]
 8008366:	60c2      	str	r2, [r0, #12]
 8008368:	930f      	str	r3, [sp, #60]	; 0x3c
 800836a:	f001 ffc9 	bl	800a300 <__mcmp>
 800836e:	2800      	cmp	r0, #0
 8008370:	da5f      	bge.n	8008432 <_strtod_l+0x8c6>
 8008372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008374:	4333      	orrs	r3, r6
 8008376:	d000      	beq.n	800837a <_strtod_l+0x80e>
 8008378:	e08a      	b.n	8008490 <_strtod_l+0x924>
 800837a:	033b      	lsls	r3, r7, #12
 800837c:	d000      	beq.n	8008380 <_strtod_l+0x814>
 800837e:	e087      	b.n	8008490 <_strtod_l+0x924>
 8008380:	22d6      	movs	r2, #214	; 0xd6
 8008382:	4b47      	ldr	r3, [pc, #284]	; (80084a0 <_strtod_l+0x934>)
 8008384:	04d2      	lsls	r2, r2, #19
 8008386:	403b      	ands	r3, r7
 8008388:	4293      	cmp	r3, r2
 800838a:	d800      	bhi.n	800838e <_strtod_l+0x822>
 800838c:	e080      	b.n	8008490 <_strtod_l+0x924>
 800838e:	9b06      	ldr	r3, [sp, #24]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	930a      	str	r3, [sp, #40]	; 0x28
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <_strtod_l+0x836>
 8008398:	9b06      	ldr	r3, [sp, #24]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	930a      	str	r3, [sp, #40]	; 0x28
 800839e:	2b01      	cmp	r3, #1
 80083a0:	dd76      	ble.n	8008490 <_strtod_l+0x924>
 80083a2:	9906      	ldr	r1, [sp, #24]
 80083a4:	2201      	movs	r2, #1
 80083a6:	9805      	ldr	r0, [sp, #20]
 80083a8:	f001 ff3c 	bl	800a224 <__lshift>
 80083ac:	9907      	ldr	r1, [sp, #28]
 80083ae:	9006      	str	r0, [sp, #24]
 80083b0:	f001 ffa6 	bl	800a300 <__mcmp>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	dd6b      	ble.n	8008490 <_strtod_l+0x924>
 80083b8:	9908      	ldr	r1, [sp, #32]
 80083ba:	003b      	movs	r3, r7
 80083bc:	4a38      	ldr	r2, [pc, #224]	; (80084a0 <_strtod_l+0x934>)
 80083be:	2900      	cmp	r1, #0
 80083c0:	d100      	bne.n	80083c4 <_strtod_l+0x858>
 80083c2:	e092      	b.n	80084ea <_strtod_l+0x97e>
 80083c4:	0011      	movs	r1, r2
 80083c6:	20d6      	movs	r0, #214	; 0xd6
 80083c8:	4039      	ands	r1, r7
 80083ca:	04c0      	lsls	r0, r0, #19
 80083cc:	4281      	cmp	r1, r0
 80083ce:	dd00      	ble.n	80083d2 <_strtod_l+0x866>
 80083d0:	e08b      	b.n	80084ea <_strtod_l+0x97e>
 80083d2:	23dc      	movs	r3, #220	; 0xdc
 80083d4:	049b      	lsls	r3, r3, #18
 80083d6:	4299      	cmp	r1, r3
 80083d8:	dc00      	bgt.n	80083dc <_strtod_l+0x870>
 80083da:	e6a4      	b.n	8008126 <_strtod_l+0x5ba>
 80083dc:	0030      	movs	r0, r6
 80083de:	0039      	movs	r1, r7
 80083e0:	2200      	movs	r2, #0
 80083e2:	4b30      	ldr	r3, [pc, #192]	; (80084a4 <_strtod_l+0x938>)
 80083e4:	f7f9 f8f8 	bl	80015d8 <__aeabi_dmul>
 80083e8:	0006      	movs	r6, r0
 80083ea:	000f      	movs	r7, r1
 80083ec:	4308      	orrs	r0, r1
 80083ee:	d000      	beq.n	80083f2 <_strtod_l+0x886>
 80083f0:	e62f      	b.n	8008052 <_strtod_l+0x4e6>
 80083f2:	2322      	movs	r3, #34	; 0x22
 80083f4:	9a05      	ldr	r2, [sp, #20]
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	e62b      	b.n	8008052 <_strtod_l+0x4e6>
 80083fa:	234b      	movs	r3, #75	; 0x4b
 80083fc:	1a9a      	subs	r2, r3, r2
 80083fe:	3b4c      	subs	r3, #76	; 0x4c
 8008400:	4093      	lsls	r3, r2
 8008402:	4019      	ands	r1, r3
 8008404:	000f      	movs	r7, r1
 8008406:	e6e0      	b.n	80081ca <_strtod_l+0x65e>
 8008408:	2201      	movs	r2, #1
 800840a:	4252      	negs	r2, r2
 800840c:	409a      	lsls	r2, r3
 800840e:	4016      	ands	r6, r2
 8008410:	e6db      	b.n	80081ca <_strtod_l+0x65e>
 8008412:	4925      	ldr	r1, [pc, #148]	; (80084a8 <_strtod_l+0x93c>)
 8008414:	1acb      	subs	r3, r1, r3
 8008416:	0001      	movs	r1, r0
 8008418:	4099      	lsls	r1, r3
 800841a:	9110      	str	r1, [sp, #64]	; 0x40
 800841c:	e741      	b.n	80082a2 <_strtod_l+0x736>
 800841e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008420:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008422:	9805      	ldr	r0, [sp, #20]
 8008424:	f001 fefe 	bl	800a224 <__lshift>
 8008428:	9020      	str	r0, [sp, #128]	; 0x80
 800842a:	2800      	cmp	r0, #0
 800842c:	d000      	beq.n	8008430 <_strtod_l+0x8c4>
 800842e:	e76c      	b.n	800830a <_strtod_l+0x79e>
 8008430:	e606      	b.n	8008040 <_strtod_l+0x4d4>
 8008432:	970c      	str	r7, [sp, #48]	; 0x30
 8008434:	2800      	cmp	r0, #0
 8008436:	d176      	bne.n	8008526 <_strtod_l+0x9ba>
 8008438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800843a:	033b      	lsls	r3, r7, #12
 800843c:	0b1b      	lsrs	r3, r3, #12
 800843e:	2a00      	cmp	r2, #0
 8008440:	d038      	beq.n	80084b4 <_strtod_l+0x948>
 8008442:	4a1a      	ldr	r2, [pc, #104]	; (80084ac <_strtod_l+0x940>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d138      	bne.n	80084ba <_strtod_l+0x94e>
 8008448:	2201      	movs	r2, #1
 800844a:	9b08      	ldr	r3, [sp, #32]
 800844c:	4252      	negs	r2, r2
 800844e:	0031      	movs	r1, r6
 8008450:	0010      	movs	r0, r2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00b      	beq.n	800846e <_strtod_l+0x902>
 8008456:	24d4      	movs	r4, #212	; 0xd4
 8008458:	4b11      	ldr	r3, [pc, #68]	; (80084a0 <_strtod_l+0x934>)
 800845a:	0010      	movs	r0, r2
 800845c:	403b      	ands	r3, r7
 800845e:	04e4      	lsls	r4, r4, #19
 8008460:	42a3      	cmp	r3, r4
 8008462:	d804      	bhi.n	800846e <_strtod_l+0x902>
 8008464:	306c      	adds	r0, #108	; 0x6c
 8008466:	0d1b      	lsrs	r3, r3, #20
 8008468:	1ac3      	subs	r3, r0, r3
 800846a:	409a      	lsls	r2, r3
 800846c:	0010      	movs	r0, r2
 800846e:	4281      	cmp	r1, r0
 8008470:	d123      	bne.n	80084ba <_strtod_l+0x94e>
 8008472:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <_strtod_l+0x944>)
 8008474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008476:	429a      	cmp	r2, r3
 8008478:	d102      	bne.n	8008480 <_strtod_l+0x914>
 800847a:	1c4b      	adds	r3, r1, #1
 800847c:	d100      	bne.n	8008480 <_strtod_l+0x914>
 800847e:	e5df      	b.n	8008040 <_strtod_l+0x4d4>
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <_strtod_l+0x934>)
 8008482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008484:	2600      	movs	r6, #0
 8008486:	401a      	ands	r2, r3
 8008488:	0013      	movs	r3, r2
 800848a:	2280      	movs	r2, #128	; 0x80
 800848c:	0352      	lsls	r2, r2, #13
 800848e:	189f      	adds	r7, r3, r2
 8008490:	9b08      	ldr	r3, [sp, #32]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1a2      	bne.n	80083dc <_strtod_l+0x870>
 8008496:	e5dc      	b.n	8008052 <_strtod_l+0x4e6>
 8008498:	0800b8d8 	.word	0x0800b8d8
 800849c:	fffffc02 	.word	0xfffffc02
 80084a0:	7ff00000 	.word	0x7ff00000
 80084a4:	39500000 	.word	0x39500000
 80084a8:	fffffbe2 	.word	0xfffffbe2
 80084ac:	000fffff 	.word	0x000fffff
 80084b0:	7fefffff 	.word	0x7fefffff
 80084b4:	4333      	orrs	r3, r6
 80084b6:	d100      	bne.n	80084ba <_strtod_l+0x94e>
 80084b8:	e77e      	b.n	80083b8 <_strtod_l+0x84c>
 80084ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01d      	beq.n	80084fc <_strtod_l+0x990>
 80084c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084c4:	4213      	tst	r3, r2
 80084c6:	d0e3      	beq.n	8008490 <_strtod_l+0x924>
 80084c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084ca:	0030      	movs	r0, r6
 80084cc:	0039      	movs	r1, r7
 80084ce:	9a08      	ldr	r2, [sp, #32]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d017      	beq.n	8008504 <_strtod_l+0x998>
 80084d4:	f7ff fb32 	bl	8007b3c <sulp>
 80084d8:	0002      	movs	r2, r0
 80084da:	000b      	movs	r3, r1
 80084dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80084de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80084e0:	f7f8 f93c 	bl	800075c <__aeabi_dadd>
 80084e4:	0006      	movs	r6, r0
 80084e6:	000f      	movs	r7, r1
 80084e8:	e7d2      	b.n	8008490 <_strtod_l+0x924>
 80084ea:	2601      	movs	r6, #1
 80084ec:	4013      	ands	r3, r2
 80084ee:	4a99      	ldr	r2, [pc, #612]	; (8008754 <_strtod_l+0xbe8>)
 80084f0:	4276      	negs	r6, r6
 80084f2:	189b      	adds	r3, r3, r2
 80084f4:	4a98      	ldr	r2, [pc, #608]	; (8008758 <_strtod_l+0xbec>)
 80084f6:	431a      	orrs	r2, r3
 80084f8:	0017      	movs	r7, r2
 80084fa:	e7c9      	b.n	8008490 <_strtod_l+0x924>
 80084fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084fe:	4233      	tst	r3, r6
 8008500:	d0c6      	beq.n	8008490 <_strtod_l+0x924>
 8008502:	e7e1      	b.n	80084c8 <_strtod_l+0x95c>
 8008504:	f7ff fb1a 	bl	8007b3c <sulp>
 8008508:	0002      	movs	r2, r0
 800850a:	000b      	movs	r3, r1
 800850c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800850e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008510:	f7f9 face 	bl	8001ab0 <__aeabi_dsub>
 8008514:	2200      	movs	r2, #0
 8008516:	2300      	movs	r3, #0
 8008518:	0006      	movs	r6, r0
 800851a:	000f      	movs	r7, r1
 800851c:	f7f7 ff94 	bl	8000448 <__aeabi_dcmpeq>
 8008520:	2800      	cmp	r0, #0
 8008522:	d0b5      	beq.n	8008490 <_strtod_l+0x924>
 8008524:	e5ff      	b.n	8008126 <_strtod_l+0x5ba>
 8008526:	9907      	ldr	r1, [sp, #28]
 8008528:	9806      	ldr	r0, [sp, #24]
 800852a:	f002 f875 	bl	800a618 <__ratio>
 800852e:	2380      	movs	r3, #128	; 0x80
 8008530:	2200      	movs	r2, #0
 8008532:	05db      	lsls	r3, r3, #23
 8008534:	0004      	movs	r4, r0
 8008536:	000d      	movs	r5, r1
 8008538:	f7f7 ff96 	bl	8000468 <__aeabi_dcmple>
 800853c:	2800      	cmp	r0, #0
 800853e:	d075      	beq.n	800862c <_strtod_l+0xac0>
 8008540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d047      	beq.n	80085d6 <_strtod_l+0xa6a>
 8008546:	2300      	movs	r3, #0
 8008548:	4c84      	ldr	r4, [pc, #528]	; (800875c <_strtod_l+0xbf0>)
 800854a:	2500      	movs	r5, #0
 800854c:	9310      	str	r3, [sp, #64]	; 0x40
 800854e:	9411      	str	r4, [sp, #68]	; 0x44
 8008550:	4c82      	ldr	r4, [pc, #520]	; (800875c <_strtod_l+0xbf0>)
 8008552:	4a83      	ldr	r2, [pc, #524]	; (8008760 <_strtod_l+0xbf4>)
 8008554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008556:	4013      	ands	r3, r2
 8008558:	9314      	str	r3, [sp, #80]	; 0x50
 800855a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800855c:	4b81      	ldr	r3, [pc, #516]	; (8008764 <_strtod_l+0xbf8>)
 800855e:	429a      	cmp	r2, r3
 8008560:	d000      	beq.n	8008564 <_strtod_l+0x9f8>
 8008562:	e0ac      	b.n	80086be <_strtod_l+0xb52>
 8008564:	4a80      	ldr	r2, [pc, #512]	; (8008768 <_strtod_l+0xbfc>)
 8008566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008568:	4694      	mov	ip, r2
 800856a:	4463      	add	r3, ip
 800856c:	001f      	movs	r7, r3
 800856e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008572:	0030      	movs	r0, r6
 8008574:	0039      	movs	r1, r7
 8008576:	920c      	str	r2, [sp, #48]	; 0x30
 8008578:	930d      	str	r3, [sp, #52]	; 0x34
 800857a:	f001 ff75 	bl	800a468 <__ulp>
 800857e:	0002      	movs	r2, r0
 8008580:	000b      	movs	r3, r1
 8008582:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008584:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008586:	f7f9 f827 	bl	80015d8 <__aeabi_dmul>
 800858a:	0032      	movs	r2, r6
 800858c:	003b      	movs	r3, r7
 800858e:	f7f8 f8e5 	bl	800075c <__aeabi_dadd>
 8008592:	4a73      	ldr	r2, [pc, #460]	; (8008760 <_strtod_l+0xbf4>)
 8008594:	4b75      	ldr	r3, [pc, #468]	; (800876c <_strtod_l+0xc00>)
 8008596:	0006      	movs	r6, r0
 8008598:	400a      	ands	r2, r1
 800859a:	429a      	cmp	r2, r3
 800859c:	d95e      	bls.n	800865c <_strtod_l+0xaf0>
 800859e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085a0:	4b73      	ldr	r3, [pc, #460]	; (8008770 <_strtod_l+0xc04>)
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d103      	bne.n	80085ae <_strtod_l+0xa42>
 80085a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085a8:	3301      	adds	r3, #1
 80085aa:	d100      	bne.n	80085ae <_strtod_l+0xa42>
 80085ac:	e548      	b.n	8008040 <_strtod_l+0x4d4>
 80085ae:	2601      	movs	r6, #1
 80085b0:	4f6f      	ldr	r7, [pc, #444]	; (8008770 <_strtod_l+0xc04>)
 80085b2:	4276      	negs	r6, r6
 80085b4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80085b6:	9805      	ldr	r0, [sp, #20]
 80085b8:	f001 fc16 	bl	8009de8 <_Bfree>
 80085bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085be:	9805      	ldr	r0, [sp, #20]
 80085c0:	f001 fc12 	bl	8009de8 <_Bfree>
 80085c4:	9907      	ldr	r1, [sp, #28]
 80085c6:	9805      	ldr	r0, [sp, #20]
 80085c8:	f001 fc0e 	bl	8009de8 <_Bfree>
 80085cc:	9906      	ldr	r1, [sp, #24]
 80085ce:	9805      	ldr	r0, [sp, #20]
 80085d0:	f001 fc0a 	bl	8009de8 <_Bfree>
 80085d4:	e61d      	b.n	8008212 <_strtod_l+0x6a6>
 80085d6:	2e00      	cmp	r6, #0
 80085d8:	d11c      	bne.n	8008614 <_strtod_l+0xaa8>
 80085da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085dc:	031b      	lsls	r3, r3, #12
 80085de:	d11f      	bne.n	8008620 <_strtod_l+0xab4>
 80085e0:	2200      	movs	r2, #0
 80085e2:	0020      	movs	r0, r4
 80085e4:	0029      	movs	r1, r5
 80085e6:	4b5d      	ldr	r3, [pc, #372]	; (800875c <_strtod_l+0xbf0>)
 80085e8:	f7f7 ff34 	bl	8000454 <__aeabi_dcmplt>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d11a      	bne.n	8008626 <_strtod_l+0xaba>
 80085f0:	0020      	movs	r0, r4
 80085f2:	0029      	movs	r1, r5
 80085f4:	2200      	movs	r2, #0
 80085f6:	4b5f      	ldr	r3, [pc, #380]	; (8008774 <_strtod_l+0xc08>)
 80085f8:	f7f8 ffee 	bl	80015d8 <__aeabi_dmul>
 80085fc:	0005      	movs	r5, r0
 80085fe:	000c      	movs	r4, r1
 8008600:	2380      	movs	r3, #128	; 0x80
 8008602:	061b      	lsls	r3, r3, #24
 8008604:	18e3      	adds	r3, r4, r3
 8008606:	951c      	str	r5, [sp, #112]	; 0x70
 8008608:	931d      	str	r3, [sp, #116]	; 0x74
 800860a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800860c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800860e:	9210      	str	r2, [sp, #64]	; 0x40
 8008610:	9311      	str	r3, [sp, #68]	; 0x44
 8008612:	e79e      	b.n	8008552 <_strtod_l+0x9e6>
 8008614:	2e01      	cmp	r6, #1
 8008616:	d103      	bne.n	8008620 <_strtod_l+0xab4>
 8008618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800861a:	2b00      	cmp	r3, #0
 800861c:	d100      	bne.n	8008620 <_strtod_l+0xab4>
 800861e:	e582      	b.n	8008126 <_strtod_l+0x5ba>
 8008620:	2300      	movs	r3, #0
 8008622:	4c55      	ldr	r4, [pc, #340]	; (8008778 <_strtod_l+0xc0c>)
 8008624:	e791      	b.n	800854a <_strtod_l+0x9de>
 8008626:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008628:	4c52      	ldr	r4, [pc, #328]	; (8008774 <_strtod_l+0xc08>)
 800862a:	e7e9      	b.n	8008600 <_strtod_l+0xa94>
 800862c:	2200      	movs	r2, #0
 800862e:	0020      	movs	r0, r4
 8008630:	0029      	movs	r1, r5
 8008632:	4b50      	ldr	r3, [pc, #320]	; (8008774 <_strtod_l+0xc08>)
 8008634:	f7f8 ffd0 	bl	80015d8 <__aeabi_dmul>
 8008638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800863a:	0005      	movs	r5, r0
 800863c:	000b      	movs	r3, r1
 800863e:	000c      	movs	r4, r1
 8008640:	2a00      	cmp	r2, #0
 8008642:	d107      	bne.n	8008654 <_strtod_l+0xae8>
 8008644:	2280      	movs	r2, #128	; 0x80
 8008646:	0612      	lsls	r2, r2, #24
 8008648:	188b      	adds	r3, r1, r2
 800864a:	9016      	str	r0, [sp, #88]	; 0x58
 800864c:	9317      	str	r3, [sp, #92]	; 0x5c
 800864e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008652:	e7dc      	b.n	800860e <_strtod_l+0xaa2>
 8008654:	0002      	movs	r2, r0
 8008656:	9216      	str	r2, [sp, #88]	; 0x58
 8008658:	9317      	str	r3, [sp, #92]	; 0x5c
 800865a:	e7f8      	b.n	800864e <_strtod_l+0xae2>
 800865c:	23d4      	movs	r3, #212	; 0xd4
 800865e:	049b      	lsls	r3, r3, #18
 8008660:	18cf      	adds	r7, r1, r3
 8008662:	9b08      	ldr	r3, [sp, #32]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1a5      	bne.n	80085b4 <_strtod_l+0xa48>
 8008668:	4b3d      	ldr	r3, [pc, #244]	; (8008760 <_strtod_l+0xbf4>)
 800866a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800866c:	403b      	ands	r3, r7
 800866e:	429a      	cmp	r2, r3
 8008670:	d1a0      	bne.n	80085b4 <_strtod_l+0xa48>
 8008672:	0028      	movs	r0, r5
 8008674:	0021      	movs	r1, r4
 8008676:	f7f7 ff53 	bl	8000520 <__aeabi_d2lz>
 800867a:	f7f7 ff8d 	bl	8000598 <__aeabi_l2d>
 800867e:	0002      	movs	r2, r0
 8008680:	000b      	movs	r3, r1
 8008682:	0028      	movs	r0, r5
 8008684:	0021      	movs	r1, r4
 8008686:	f7f9 fa13 	bl	8001ab0 <__aeabi_dsub>
 800868a:	033b      	lsls	r3, r7, #12
 800868c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800868e:	0b1b      	lsrs	r3, r3, #12
 8008690:	4333      	orrs	r3, r6
 8008692:	4313      	orrs	r3, r2
 8008694:	0004      	movs	r4, r0
 8008696:	000d      	movs	r5, r1
 8008698:	4a38      	ldr	r2, [pc, #224]	; (800877c <_strtod_l+0xc10>)
 800869a:	2b00      	cmp	r3, #0
 800869c:	d055      	beq.n	800874a <_strtod_l+0xbde>
 800869e:	4b38      	ldr	r3, [pc, #224]	; (8008780 <_strtod_l+0xc14>)
 80086a0:	f7f7 fed8 	bl	8000454 <__aeabi_dcmplt>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d000      	beq.n	80086aa <_strtod_l+0xb3e>
 80086a8:	e4d3      	b.n	8008052 <_strtod_l+0x4e6>
 80086aa:	0020      	movs	r0, r4
 80086ac:	0029      	movs	r1, r5
 80086ae:	4a35      	ldr	r2, [pc, #212]	; (8008784 <_strtod_l+0xc18>)
 80086b0:	4b30      	ldr	r3, [pc, #192]	; (8008774 <_strtod_l+0xc08>)
 80086b2:	f7f7 fee3 	bl	800047c <__aeabi_dcmpgt>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d100      	bne.n	80086bc <_strtod_l+0xb50>
 80086ba:	e77b      	b.n	80085b4 <_strtod_l+0xa48>
 80086bc:	e4c9      	b.n	8008052 <_strtod_l+0x4e6>
 80086be:	9b08      	ldr	r3, [sp, #32]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d02b      	beq.n	800871c <_strtod_l+0xbb0>
 80086c4:	23d4      	movs	r3, #212	; 0xd4
 80086c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086c8:	04db      	lsls	r3, r3, #19
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d826      	bhi.n	800871c <_strtod_l+0xbb0>
 80086ce:	0028      	movs	r0, r5
 80086d0:	0021      	movs	r1, r4
 80086d2:	4a2d      	ldr	r2, [pc, #180]	; (8008788 <_strtod_l+0xc1c>)
 80086d4:	4b2d      	ldr	r3, [pc, #180]	; (800878c <_strtod_l+0xc20>)
 80086d6:	f7f7 fec7 	bl	8000468 <__aeabi_dcmple>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d017      	beq.n	800870e <_strtod_l+0xba2>
 80086de:	0028      	movs	r0, r5
 80086e0:	0021      	movs	r1, r4
 80086e2:	f7f7 feff 	bl	80004e4 <__aeabi_d2uiz>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d100      	bne.n	80086ec <_strtod_l+0xb80>
 80086ea:	3001      	adds	r0, #1
 80086ec:	f7f9 fdf6 	bl	80022dc <__aeabi_ui2d>
 80086f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086f2:	0005      	movs	r5, r0
 80086f4:	000b      	movs	r3, r1
 80086f6:	000c      	movs	r4, r1
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	d122      	bne.n	8008742 <_strtod_l+0xbd6>
 80086fc:	2280      	movs	r2, #128	; 0x80
 80086fe:	0612      	lsls	r2, r2, #24
 8008700:	188b      	adds	r3, r1, r2
 8008702:	9018      	str	r0, [sp, #96]	; 0x60
 8008704:	9319      	str	r3, [sp, #100]	; 0x64
 8008706:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008708:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800870a:	9210      	str	r2, [sp, #64]	; 0x40
 800870c:	9311      	str	r3, [sp, #68]	; 0x44
 800870e:	22d6      	movs	r2, #214	; 0xd6
 8008710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008712:	04d2      	lsls	r2, r2, #19
 8008714:	189b      	adds	r3, r3, r2
 8008716:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008718:	1a9b      	subs	r3, r3, r2
 800871a:	9311      	str	r3, [sp, #68]	; 0x44
 800871c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800871e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008720:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008722:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8008724:	f001 fea0 	bl	800a468 <__ulp>
 8008728:	0002      	movs	r2, r0
 800872a:	000b      	movs	r3, r1
 800872c:	0030      	movs	r0, r6
 800872e:	0039      	movs	r1, r7
 8008730:	f7f8 ff52 	bl	80015d8 <__aeabi_dmul>
 8008734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008736:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008738:	f7f8 f810 	bl	800075c <__aeabi_dadd>
 800873c:	0006      	movs	r6, r0
 800873e:	000f      	movs	r7, r1
 8008740:	e78f      	b.n	8008662 <_strtod_l+0xaf6>
 8008742:	0002      	movs	r2, r0
 8008744:	9218      	str	r2, [sp, #96]	; 0x60
 8008746:	9319      	str	r3, [sp, #100]	; 0x64
 8008748:	e7dd      	b.n	8008706 <_strtod_l+0xb9a>
 800874a:	4b11      	ldr	r3, [pc, #68]	; (8008790 <_strtod_l+0xc24>)
 800874c:	f7f7 fe82 	bl	8000454 <__aeabi_dcmplt>
 8008750:	e7b1      	b.n	80086b6 <_strtod_l+0xb4a>
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	fff00000 	.word	0xfff00000
 8008758:	000fffff 	.word	0x000fffff
 800875c:	3ff00000 	.word	0x3ff00000
 8008760:	7ff00000 	.word	0x7ff00000
 8008764:	7fe00000 	.word	0x7fe00000
 8008768:	fcb00000 	.word	0xfcb00000
 800876c:	7c9fffff 	.word	0x7c9fffff
 8008770:	7fefffff 	.word	0x7fefffff
 8008774:	3fe00000 	.word	0x3fe00000
 8008778:	bff00000 	.word	0xbff00000
 800877c:	94a03595 	.word	0x94a03595
 8008780:	3fdfffff 	.word	0x3fdfffff
 8008784:	35afe535 	.word	0x35afe535
 8008788:	ffc00000 	.word	0xffc00000
 800878c:	41dfffff 	.word	0x41dfffff
 8008790:	3fcfffff 	.word	0x3fcfffff

08008794 <_strtod_r>:
 8008794:	b510      	push	{r4, lr}
 8008796:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <_strtod_r+0xc>)
 8008798:	f7ff f9e8 	bl	8007b6c <_strtod_l>
 800879c:	bd10      	pop	{r4, pc}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	20000074 	.word	0x20000074

080087a4 <_strtol_l.constprop.0>:
 80087a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a6:	b087      	sub	sp, #28
 80087a8:	001e      	movs	r6, r3
 80087aa:	9005      	str	r0, [sp, #20]
 80087ac:	9101      	str	r1, [sp, #4]
 80087ae:	9202      	str	r2, [sp, #8]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d045      	beq.n	8008840 <_strtol_l.constprop.0+0x9c>
 80087b4:	000b      	movs	r3, r1
 80087b6:	2e24      	cmp	r6, #36	; 0x24
 80087b8:	d842      	bhi.n	8008840 <_strtol_l.constprop.0+0x9c>
 80087ba:	4a3f      	ldr	r2, [pc, #252]	; (80088b8 <_strtol_l.constprop.0+0x114>)
 80087bc:	2108      	movs	r1, #8
 80087be:	4694      	mov	ip, r2
 80087c0:	001a      	movs	r2, r3
 80087c2:	4660      	mov	r0, ip
 80087c4:	7814      	ldrb	r4, [r2, #0]
 80087c6:	3301      	adds	r3, #1
 80087c8:	5d00      	ldrb	r0, [r0, r4]
 80087ca:	001d      	movs	r5, r3
 80087cc:	0007      	movs	r7, r0
 80087ce:	400f      	ands	r7, r1
 80087d0:	4208      	tst	r0, r1
 80087d2:	d1f5      	bne.n	80087c0 <_strtol_l.constprop.0+0x1c>
 80087d4:	2c2d      	cmp	r4, #45	; 0x2d
 80087d6:	d13a      	bne.n	800884e <_strtol_l.constprop.0+0xaa>
 80087d8:	2701      	movs	r7, #1
 80087da:	781c      	ldrb	r4, [r3, #0]
 80087dc:	1c95      	adds	r5, r2, #2
 80087de:	2e00      	cmp	r6, #0
 80087e0:	d065      	beq.n	80088ae <_strtol_l.constprop.0+0x10a>
 80087e2:	2e10      	cmp	r6, #16
 80087e4:	d109      	bne.n	80087fa <_strtol_l.constprop.0+0x56>
 80087e6:	2c30      	cmp	r4, #48	; 0x30
 80087e8:	d107      	bne.n	80087fa <_strtol_l.constprop.0+0x56>
 80087ea:	2220      	movs	r2, #32
 80087ec:	782b      	ldrb	r3, [r5, #0]
 80087ee:	4393      	bics	r3, r2
 80087f0:	2b58      	cmp	r3, #88	; 0x58
 80087f2:	d157      	bne.n	80088a4 <_strtol_l.constprop.0+0x100>
 80087f4:	2610      	movs	r6, #16
 80087f6:	786c      	ldrb	r4, [r5, #1]
 80087f8:	3502      	adds	r5, #2
 80087fa:	4b30      	ldr	r3, [pc, #192]	; (80088bc <_strtol_l.constprop.0+0x118>)
 80087fc:	0031      	movs	r1, r6
 80087fe:	18fb      	adds	r3, r7, r3
 8008800:	0018      	movs	r0, r3
 8008802:	9303      	str	r3, [sp, #12]
 8008804:	f7f7 fd20 	bl	8000248 <__aeabi_uidivmod>
 8008808:	2300      	movs	r3, #0
 800880a:	2201      	movs	r2, #1
 800880c:	4684      	mov	ip, r0
 800880e:	0018      	movs	r0, r3
 8008810:	9104      	str	r1, [sp, #16]
 8008812:	4252      	negs	r2, r2
 8008814:	0021      	movs	r1, r4
 8008816:	3930      	subs	r1, #48	; 0x30
 8008818:	2909      	cmp	r1, #9
 800881a:	d81d      	bhi.n	8008858 <_strtol_l.constprop.0+0xb4>
 800881c:	000c      	movs	r4, r1
 800881e:	42a6      	cmp	r6, r4
 8008820:	dd28      	ble.n	8008874 <_strtol_l.constprop.0+0xd0>
 8008822:	2b00      	cmp	r3, #0
 8008824:	db24      	blt.n	8008870 <_strtol_l.constprop.0+0xcc>
 8008826:	0013      	movs	r3, r2
 8008828:	4584      	cmp	ip, r0
 800882a:	d306      	bcc.n	800883a <_strtol_l.constprop.0+0x96>
 800882c:	d102      	bne.n	8008834 <_strtol_l.constprop.0+0x90>
 800882e:	9904      	ldr	r1, [sp, #16]
 8008830:	42a1      	cmp	r1, r4
 8008832:	db02      	blt.n	800883a <_strtol_l.constprop.0+0x96>
 8008834:	2301      	movs	r3, #1
 8008836:	4370      	muls	r0, r6
 8008838:	1820      	adds	r0, r4, r0
 800883a:	782c      	ldrb	r4, [r5, #0]
 800883c:	3501      	adds	r5, #1
 800883e:	e7e9      	b.n	8008814 <_strtol_l.constprop.0+0x70>
 8008840:	f7fe f9a8 	bl	8006b94 <__errno>
 8008844:	2316      	movs	r3, #22
 8008846:	6003      	str	r3, [r0, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	b007      	add	sp, #28
 800884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800884e:	2c2b      	cmp	r4, #43	; 0x2b
 8008850:	d1c5      	bne.n	80087de <_strtol_l.constprop.0+0x3a>
 8008852:	781c      	ldrb	r4, [r3, #0]
 8008854:	1c95      	adds	r5, r2, #2
 8008856:	e7c2      	b.n	80087de <_strtol_l.constprop.0+0x3a>
 8008858:	0021      	movs	r1, r4
 800885a:	3941      	subs	r1, #65	; 0x41
 800885c:	2919      	cmp	r1, #25
 800885e:	d801      	bhi.n	8008864 <_strtol_l.constprop.0+0xc0>
 8008860:	3c37      	subs	r4, #55	; 0x37
 8008862:	e7dc      	b.n	800881e <_strtol_l.constprop.0+0x7a>
 8008864:	0021      	movs	r1, r4
 8008866:	3961      	subs	r1, #97	; 0x61
 8008868:	2919      	cmp	r1, #25
 800886a:	d803      	bhi.n	8008874 <_strtol_l.constprop.0+0xd0>
 800886c:	3c57      	subs	r4, #87	; 0x57
 800886e:	e7d6      	b.n	800881e <_strtol_l.constprop.0+0x7a>
 8008870:	0013      	movs	r3, r2
 8008872:	e7e2      	b.n	800883a <_strtol_l.constprop.0+0x96>
 8008874:	2b00      	cmp	r3, #0
 8008876:	da09      	bge.n	800888c <_strtol_l.constprop.0+0xe8>
 8008878:	2322      	movs	r3, #34	; 0x22
 800887a:	9a05      	ldr	r2, [sp, #20]
 800887c:	9803      	ldr	r0, [sp, #12]
 800887e:	6013      	str	r3, [r2, #0]
 8008880:	9b02      	ldr	r3, [sp, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0e1      	beq.n	800884a <_strtol_l.constprop.0+0xa6>
 8008886:	1e6b      	subs	r3, r5, #1
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	e007      	b.n	800889c <_strtol_l.constprop.0+0xf8>
 800888c:	2f00      	cmp	r7, #0
 800888e:	d000      	beq.n	8008892 <_strtol_l.constprop.0+0xee>
 8008890:	4240      	negs	r0, r0
 8008892:	9a02      	ldr	r2, [sp, #8]
 8008894:	2a00      	cmp	r2, #0
 8008896:	d0d8      	beq.n	800884a <_strtol_l.constprop.0+0xa6>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1f4      	bne.n	8008886 <_strtol_l.constprop.0+0xe2>
 800889c:	9b02      	ldr	r3, [sp, #8]
 800889e:	9a01      	ldr	r2, [sp, #4]
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	e7d2      	b.n	800884a <_strtol_l.constprop.0+0xa6>
 80088a4:	2430      	movs	r4, #48	; 0x30
 80088a6:	2e00      	cmp	r6, #0
 80088a8:	d1a7      	bne.n	80087fa <_strtol_l.constprop.0+0x56>
 80088aa:	3608      	adds	r6, #8
 80088ac:	e7a5      	b.n	80087fa <_strtol_l.constprop.0+0x56>
 80088ae:	2c30      	cmp	r4, #48	; 0x30
 80088b0:	d09b      	beq.n	80087ea <_strtol_l.constprop.0+0x46>
 80088b2:	260a      	movs	r6, #10
 80088b4:	e7a1      	b.n	80087fa <_strtol_l.constprop.0+0x56>
 80088b6:	46c0      	nop			; (mov r8, r8)
 80088b8:	0800b769 	.word	0x0800b769
 80088bc:	7fffffff 	.word	0x7fffffff

080088c0 <_strtol_r>:
 80088c0:	b510      	push	{r4, lr}
 80088c2:	f7ff ff6f 	bl	80087a4 <_strtol_l.constprop.0>
 80088c6:	bd10      	pop	{r4, pc}

080088c8 <quorem>:
 80088c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ca:	0006      	movs	r6, r0
 80088cc:	690b      	ldr	r3, [r1, #16]
 80088ce:	6932      	ldr	r2, [r6, #16]
 80088d0:	b087      	sub	sp, #28
 80088d2:	2000      	movs	r0, #0
 80088d4:	9103      	str	r1, [sp, #12]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	db65      	blt.n	80089a6 <quorem+0xde>
 80088da:	3b01      	subs	r3, #1
 80088dc:	009c      	lsls	r4, r3, #2
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	000b      	movs	r3, r1
 80088e2:	3314      	adds	r3, #20
 80088e4:	9305      	str	r3, [sp, #20]
 80088e6:	191b      	adds	r3, r3, r4
 80088e8:	9304      	str	r3, [sp, #16]
 80088ea:	0033      	movs	r3, r6
 80088ec:	3314      	adds	r3, #20
 80088ee:	9302      	str	r3, [sp, #8]
 80088f0:	191c      	adds	r4, r3, r4
 80088f2:	9b04      	ldr	r3, [sp, #16]
 80088f4:	6827      	ldr	r7, [r4, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	0038      	movs	r0, r7
 80088fa:	1c5d      	adds	r5, r3, #1
 80088fc:	0029      	movs	r1, r5
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	f7f7 fc1c 	bl	800013c <__udivsi3>
 8008904:	9001      	str	r0, [sp, #4]
 8008906:	42af      	cmp	r7, r5
 8008908:	d324      	bcc.n	8008954 <quorem+0x8c>
 800890a:	2500      	movs	r5, #0
 800890c:	46ac      	mov	ip, r5
 800890e:	9802      	ldr	r0, [sp, #8]
 8008910:	9f05      	ldr	r7, [sp, #20]
 8008912:	cf08      	ldmia	r7!, {r3}
 8008914:	9a01      	ldr	r2, [sp, #4]
 8008916:	b299      	uxth	r1, r3
 8008918:	4351      	muls	r1, r2
 800891a:	0c1b      	lsrs	r3, r3, #16
 800891c:	4353      	muls	r3, r2
 800891e:	1949      	adds	r1, r1, r5
 8008920:	0c0a      	lsrs	r2, r1, #16
 8008922:	189b      	adds	r3, r3, r2
 8008924:	6802      	ldr	r2, [r0, #0]
 8008926:	b289      	uxth	r1, r1
 8008928:	b292      	uxth	r2, r2
 800892a:	4462      	add	r2, ip
 800892c:	1a52      	subs	r2, r2, r1
 800892e:	6801      	ldr	r1, [r0, #0]
 8008930:	0c1d      	lsrs	r5, r3, #16
 8008932:	0c09      	lsrs	r1, r1, #16
 8008934:	b29b      	uxth	r3, r3
 8008936:	1acb      	subs	r3, r1, r3
 8008938:	1411      	asrs	r1, r2, #16
 800893a:	185b      	adds	r3, r3, r1
 800893c:	1419      	asrs	r1, r3, #16
 800893e:	b292      	uxth	r2, r2
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	431a      	orrs	r2, r3
 8008944:	9b04      	ldr	r3, [sp, #16]
 8008946:	468c      	mov	ip, r1
 8008948:	c004      	stmia	r0!, {r2}
 800894a:	42bb      	cmp	r3, r7
 800894c:	d2e1      	bcs.n	8008912 <quorem+0x4a>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d030      	beq.n	80089b6 <quorem+0xee>
 8008954:	0030      	movs	r0, r6
 8008956:	9903      	ldr	r1, [sp, #12]
 8008958:	f001 fcd2 	bl	800a300 <__mcmp>
 800895c:	2800      	cmp	r0, #0
 800895e:	db21      	blt.n	80089a4 <quorem+0xdc>
 8008960:	0030      	movs	r0, r6
 8008962:	2400      	movs	r4, #0
 8008964:	9b01      	ldr	r3, [sp, #4]
 8008966:	9903      	ldr	r1, [sp, #12]
 8008968:	3301      	adds	r3, #1
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	3014      	adds	r0, #20
 800896e:	3114      	adds	r1, #20
 8008970:	6803      	ldr	r3, [r0, #0]
 8008972:	c920      	ldmia	r1!, {r5}
 8008974:	b29a      	uxth	r2, r3
 8008976:	1914      	adds	r4, r2, r4
 8008978:	b2aa      	uxth	r2, r5
 800897a:	1aa2      	subs	r2, r4, r2
 800897c:	0c1b      	lsrs	r3, r3, #16
 800897e:	0c2d      	lsrs	r5, r5, #16
 8008980:	1414      	asrs	r4, r2, #16
 8008982:	1b5b      	subs	r3, r3, r5
 8008984:	191b      	adds	r3, r3, r4
 8008986:	141c      	asrs	r4, r3, #16
 8008988:	b292      	uxth	r2, r2
 800898a:	041b      	lsls	r3, r3, #16
 800898c:	4313      	orrs	r3, r2
 800898e:	c008      	stmia	r0!, {r3}
 8008990:	9b04      	ldr	r3, [sp, #16]
 8008992:	428b      	cmp	r3, r1
 8008994:	d2ec      	bcs.n	8008970 <quorem+0xa8>
 8008996:	9b00      	ldr	r3, [sp, #0]
 8008998:	9a02      	ldr	r2, [sp, #8]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	18d3      	adds	r3, r2, r3
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	d015      	beq.n	80089d0 <quorem+0x108>
 80089a4:	9801      	ldr	r0, [sp, #4]
 80089a6:	b007      	add	sp, #28
 80089a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <quorem+0xf6>
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	9b02      	ldr	r3, [sp, #8]
 80089b8:	3c04      	subs	r4, #4
 80089ba:	42a3      	cmp	r3, r4
 80089bc:	d3f5      	bcc.n	80089aa <quorem+0xe2>
 80089be:	9b00      	ldr	r3, [sp, #0]
 80089c0:	6133      	str	r3, [r6, #16]
 80089c2:	e7c7      	b.n	8008954 <quorem+0x8c>
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	d106      	bne.n	80089d8 <quorem+0x110>
 80089ca:	9a00      	ldr	r2, [sp, #0]
 80089cc:	3a01      	subs	r2, #1
 80089ce:	9200      	str	r2, [sp, #0]
 80089d0:	9a02      	ldr	r2, [sp, #8]
 80089d2:	3b04      	subs	r3, #4
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d3f5      	bcc.n	80089c4 <quorem+0xfc>
 80089d8:	9b00      	ldr	r3, [sp, #0]
 80089da:	6133      	str	r3, [r6, #16]
 80089dc:	e7e2      	b.n	80089a4 <quorem+0xdc>
	...

080089e0 <_dtoa_r>:
 80089e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e2:	b09d      	sub	sp, #116	; 0x74
 80089e4:	9202      	str	r2, [sp, #8]
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	9b02      	ldr	r3, [sp, #8]
 80089ea:	9c03      	ldr	r4, [sp, #12]
 80089ec:	9308      	str	r3, [sp, #32]
 80089ee:	9409      	str	r4, [sp, #36]	; 0x24
 80089f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80089f2:	0007      	movs	r7, r0
 80089f4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80089f6:	2c00      	cmp	r4, #0
 80089f8:	d10e      	bne.n	8008a18 <_dtoa_r+0x38>
 80089fa:	2010      	movs	r0, #16
 80089fc:	f7fe f8f4 	bl	8006be8 <malloc>
 8008a00:	1e02      	subs	r2, r0, #0
 8008a02:	6278      	str	r0, [r7, #36]	; 0x24
 8008a04:	d104      	bne.n	8008a10 <_dtoa_r+0x30>
 8008a06:	21ea      	movs	r1, #234	; 0xea
 8008a08:	4bc7      	ldr	r3, [pc, #796]	; (8008d28 <_dtoa_r+0x348>)
 8008a0a:	48c8      	ldr	r0, [pc, #800]	; (8008d2c <_dtoa_r+0x34c>)
 8008a0c:	f002 f826 	bl	800aa5c <__assert_func>
 8008a10:	6044      	str	r4, [r0, #4]
 8008a12:	6084      	str	r4, [r0, #8]
 8008a14:	6004      	str	r4, [r0, #0]
 8008a16:	60c4      	str	r4, [r0, #12]
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	6819      	ldr	r1, [r3, #0]
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	d00a      	beq.n	8008a36 <_dtoa_r+0x56>
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	2301      	movs	r3, #1
 8008a24:	4093      	lsls	r3, r2
 8008a26:	604a      	str	r2, [r1, #4]
 8008a28:	608b      	str	r3, [r1, #8]
 8008a2a:	0038      	movs	r0, r7
 8008a2c:	f001 f9dc 	bl	8009de8 <_Bfree>
 8008a30:	2200      	movs	r2, #0
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	da20      	bge.n	8008a7e <_dtoa_r+0x9e>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	085b      	lsrs	r3, r3, #1
 8008a46:	9309      	str	r3, [sp, #36]	; 0x24
 8008a48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a4a:	4bb9      	ldr	r3, [pc, #740]	; (8008d30 <_dtoa_r+0x350>)
 8008a4c:	4ab8      	ldr	r2, [pc, #736]	; (8008d30 <_dtoa_r+0x350>)
 8008a4e:	402b      	ands	r3, r5
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d117      	bne.n	8008a84 <_dtoa_r+0xa4>
 8008a54:	4bb7      	ldr	r3, [pc, #732]	; (8008d34 <_dtoa_r+0x354>)
 8008a56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a58:	0328      	lsls	r0, r5, #12
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	9b02      	ldr	r3, [sp, #8]
 8008a5e:	0b00      	lsrs	r0, r0, #12
 8008a60:	4318      	orrs	r0, r3
 8008a62:	d101      	bne.n	8008a68 <_dtoa_r+0x88>
 8008a64:	f000 fdbf 	bl	80095e6 <_dtoa_r+0xc06>
 8008a68:	48b3      	ldr	r0, [pc, #716]	; (8008d38 <_dtoa_r+0x358>)
 8008a6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a6c:	9006      	str	r0, [sp, #24]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <_dtoa_r+0x98>
 8008a72:	4bb2      	ldr	r3, [pc, #712]	; (8008d3c <_dtoa_r+0x35c>)
 8008a74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	9806      	ldr	r0, [sp, #24]
 8008a7a:	b01d      	add	sp, #116	; 0x74
 8008a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a7e:	2300      	movs	r3, #0
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	e7e1      	b.n	8008a48 <_dtoa_r+0x68>
 8008a84:	9b08      	ldr	r3, [sp, #32]
 8008a86:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008a88:	9312      	str	r3, [sp, #72]	; 0x48
 8008a8a:	9413      	str	r4, [sp, #76]	; 0x4c
 8008a8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a90:	2200      	movs	r2, #0
 8008a92:	2300      	movs	r3, #0
 8008a94:	f7f7 fcd8 	bl	8000448 <__aeabi_dcmpeq>
 8008a98:	1e04      	subs	r4, r0, #0
 8008a9a:	d009      	beq.n	8008ab0 <_dtoa_r+0xd0>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008aa0:	6013      	str	r3, [r2, #0]
 8008aa2:	4ba7      	ldr	r3, [pc, #668]	; (8008d40 <_dtoa_r+0x360>)
 8008aa4:	9306      	str	r3, [sp, #24]
 8008aa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d0e5      	beq.n	8008a78 <_dtoa_r+0x98>
 8008aac:	4ba5      	ldr	r3, [pc, #660]	; (8008d44 <_dtoa_r+0x364>)
 8008aae:	e7e1      	b.n	8008a74 <_dtoa_r+0x94>
 8008ab0:	ab1a      	add	r3, sp, #104	; 0x68
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	ab1b      	add	r3, sp, #108	; 0x6c
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	0038      	movs	r0, r7
 8008aba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008abe:	f001 fd47 	bl	800a550 <__d2b>
 8008ac2:	006e      	lsls	r6, r5, #1
 8008ac4:	9005      	str	r0, [sp, #20]
 8008ac6:	0d76      	lsrs	r6, r6, #21
 8008ac8:	d100      	bne.n	8008acc <_dtoa_r+0xec>
 8008aca:	e07c      	b.n	8008bc6 <_dtoa_r+0x1e6>
 8008acc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ace:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ad0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ad2:	4a9d      	ldr	r2, [pc, #628]	; (8008d48 <_dtoa_r+0x368>)
 8008ad4:	031b      	lsls	r3, r3, #12
 8008ad6:	0b1b      	lsrs	r3, r3, #12
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	0011      	movs	r1, r2
 8008adc:	4b9b      	ldr	r3, [pc, #620]	; (8008d4c <_dtoa_r+0x36c>)
 8008ade:	9418      	str	r4, [sp, #96]	; 0x60
 8008ae0:	18f6      	adds	r6, r6, r3
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	4b9a      	ldr	r3, [pc, #616]	; (8008d50 <_dtoa_r+0x370>)
 8008ae6:	f7f8 ffe3 	bl	8001ab0 <__aeabi_dsub>
 8008aea:	4a9a      	ldr	r2, [pc, #616]	; (8008d54 <_dtoa_r+0x374>)
 8008aec:	4b9a      	ldr	r3, [pc, #616]	; (8008d58 <_dtoa_r+0x378>)
 8008aee:	f7f8 fd73 	bl	80015d8 <__aeabi_dmul>
 8008af2:	4a9a      	ldr	r2, [pc, #616]	; (8008d5c <_dtoa_r+0x37c>)
 8008af4:	4b9a      	ldr	r3, [pc, #616]	; (8008d60 <_dtoa_r+0x380>)
 8008af6:	f7f7 fe31 	bl	800075c <__aeabi_dadd>
 8008afa:	0004      	movs	r4, r0
 8008afc:	0030      	movs	r0, r6
 8008afe:	000d      	movs	r5, r1
 8008b00:	f7f9 fbbc 	bl	800227c <__aeabi_i2d>
 8008b04:	4a97      	ldr	r2, [pc, #604]	; (8008d64 <_dtoa_r+0x384>)
 8008b06:	4b98      	ldr	r3, [pc, #608]	; (8008d68 <_dtoa_r+0x388>)
 8008b08:	f7f8 fd66 	bl	80015d8 <__aeabi_dmul>
 8008b0c:	0002      	movs	r2, r0
 8008b0e:	000b      	movs	r3, r1
 8008b10:	0020      	movs	r0, r4
 8008b12:	0029      	movs	r1, r5
 8008b14:	f7f7 fe22 	bl	800075c <__aeabi_dadd>
 8008b18:	0004      	movs	r4, r0
 8008b1a:	000d      	movs	r5, r1
 8008b1c:	f7f9 fb78 	bl	8002210 <__aeabi_d2iz>
 8008b20:	2200      	movs	r2, #0
 8008b22:	9002      	str	r0, [sp, #8]
 8008b24:	2300      	movs	r3, #0
 8008b26:	0020      	movs	r0, r4
 8008b28:	0029      	movs	r1, r5
 8008b2a:	f7f7 fc93 	bl	8000454 <__aeabi_dcmplt>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d00b      	beq.n	8008b4a <_dtoa_r+0x16a>
 8008b32:	9802      	ldr	r0, [sp, #8]
 8008b34:	f7f9 fba2 	bl	800227c <__aeabi_i2d>
 8008b38:	002b      	movs	r3, r5
 8008b3a:	0022      	movs	r2, r4
 8008b3c:	f7f7 fc84 	bl	8000448 <__aeabi_dcmpeq>
 8008b40:	4243      	negs	r3, r0
 8008b42:	4158      	adcs	r0, r3
 8008b44:	9b02      	ldr	r3, [sp, #8]
 8008b46:	1a1b      	subs	r3, r3, r0
 8008b48:	9302      	str	r3, [sp, #8]
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	9316      	str	r3, [sp, #88]	; 0x58
 8008b4e:	9b02      	ldr	r3, [sp, #8]
 8008b50:	2b16      	cmp	r3, #22
 8008b52:	d80f      	bhi.n	8008b74 <_dtoa_r+0x194>
 8008b54:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b56:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008b58:	00da      	lsls	r2, r3, #3
 8008b5a:	4b84      	ldr	r3, [pc, #528]	; (8008d6c <_dtoa_r+0x38c>)
 8008b5c:	189b      	adds	r3, r3, r2
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f7f7 fc77 	bl	8000454 <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d049      	beq.n	8008bfe <_dtoa_r+0x21e>
 8008b6a:	9b02      	ldr	r3, [sp, #8]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	9302      	str	r3, [sp, #8]
 8008b70:	2300      	movs	r3, #0
 8008b72:	9316      	str	r3, [sp, #88]	; 0x58
 8008b74:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008b76:	1b9e      	subs	r6, r3, r6
 8008b78:	2300      	movs	r3, #0
 8008b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b7c:	0033      	movs	r3, r6
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	930d      	str	r3, [sp, #52]	; 0x34
 8008b82:	d504      	bpl.n	8008b8e <_dtoa_r+0x1ae>
 8008b84:	2301      	movs	r3, #1
 8008b86:	1b9b      	subs	r3, r3, r6
 8008b88:	930a      	str	r3, [sp, #40]	; 0x28
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	930d      	str	r3, [sp, #52]	; 0x34
 8008b8e:	9b02      	ldr	r3, [sp, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	db36      	blt.n	8008c02 <_dtoa_r+0x222>
 8008b94:	9a02      	ldr	r2, [sp, #8]
 8008b96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b98:	4694      	mov	ip, r2
 8008b9a:	4463      	add	r3, ip
 8008b9c:	930d      	str	r3, [sp, #52]	; 0x34
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	9215      	str	r2, [sp, #84]	; 0x54
 8008ba2:	930e      	str	r3, [sp, #56]	; 0x38
 8008ba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ba6:	2401      	movs	r4, #1
 8008ba8:	2b09      	cmp	r3, #9
 8008baa:	d864      	bhi.n	8008c76 <_dtoa_r+0x296>
 8008bac:	2b05      	cmp	r3, #5
 8008bae:	dd02      	ble.n	8008bb6 <_dtoa_r+0x1d6>
 8008bb0:	2400      	movs	r4, #0
 8008bb2:	3b04      	subs	r3, #4
 8008bb4:	9322      	str	r3, [sp, #136]	; 0x88
 8008bb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bb8:	1e98      	subs	r0, r3, #2
 8008bba:	2803      	cmp	r0, #3
 8008bbc:	d864      	bhi.n	8008c88 <_dtoa_r+0x2a8>
 8008bbe:	f7f7 faa9 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008bc2:	3829      	.short	0x3829
 8008bc4:	5836      	.short	0x5836
 8008bc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008bc8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008bca:	189e      	adds	r6, r3, r2
 8008bcc:	4b68      	ldr	r3, [pc, #416]	; (8008d70 <_dtoa_r+0x390>)
 8008bce:	18f2      	adds	r2, r6, r3
 8008bd0:	2a20      	cmp	r2, #32
 8008bd2:	dd0f      	ble.n	8008bf4 <_dtoa_r+0x214>
 8008bd4:	2340      	movs	r3, #64	; 0x40
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	409d      	lsls	r5, r3
 8008bda:	4b66      	ldr	r3, [pc, #408]	; (8008d74 <_dtoa_r+0x394>)
 8008bdc:	9802      	ldr	r0, [sp, #8]
 8008bde:	18f3      	adds	r3, r6, r3
 8008be0:	40d8      	lsrs	r0, r3
 8008be2:	4328      	orrs	r0, r5
 8008be4:	f7f9 fb7a 	bl	80022dc <__aeabi_ui2d>
 8008be8:	2301      	movs	r3, #1
 8008bea:	4c63      	ldr	r4, [pc, #396]	; (8008d78 <_dtoa_r+0x398>)
 8008bec:	3e01      	subs	r6, #1
 8008bee:	1909      	adds	r1, r1, r4
 8008bf0:	9318      	str	r3, [sp, #96]	; 0x60
 8008bf2:	e776      	b.n	8008ae2 <_dtoa_r+0x102>
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	9802      	ldr	r0, [sp, #8]
 8008bf8:	1a9b      	subs	r3, r3, r2
 8008bfa:	4098      	lsls	r0, r3
 8008bfc:	e7f2      	b.n	8008be4 <_dtoa_r+0x204>
 8008bfe:	9016      	str	r0, [sp, #88]	; 0x58
 8008c00:	e7b8      	b.n	8008b74 <_dtoa_r+0x194>
 8008c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c04:	9a02      	ldr	r2, [sp, #8]
 8008c06:	1a9b      	subs	r3, r3, r2
 8008c08:	930a      	str	r3, [sp, #40]	; 0x28
 8008c0a:	4253      	negs	r3, r2
 8008c0c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c0e:	2300      	movs	r3, #0
 8008c10:	9315      	str	r3, [sp, #84]	; 0x54
 8008c12:	e7c7      	b.n	8008ba4 <_dtoa_r+0x1c4>
 8008c14:	2300      	movs	r3, #0
 8008c16:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c1c:	9307      	str	r3, [sp, #28]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dc13      	bgt.n	8008c4a <_dtoa_r+0x26a>
 8008c22:	2301      	movs	r3, #1
 8008c24:	001a      	movs	r2, r3
 8008c26:	930c      	str	r3, [sp, #48]	; 0x30
 8008c28:	9307      	str	r3, [sp, #28]
 8008c2a:	9223      	str	r2, [sp, #140]	; 0x8c
 8008c2c:	e00d      	b.n	8008c4a <_dtoa_r+0x26a>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e7f1      	b.n	8008c16 <_dtoa_r+0x236>
 8008c32:	2300      	movs	r3, #0
 8008c34:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c38:	4694      	mov	ip, r2
 8008c3a:	9b02      	ldr	r3, [sp, #8]
 8008c3c:	4463      	add	r3, ip
 8008c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c40:	3301      	adds	r3, #1
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dc00      	bgt.n	8008c4a <_dtoa_r+0x26a>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c4e:	6042      	str	r2, [r0, #4]
 8008c50:	3204      	adds	r2, #4
 8008c52:	0015      	movs	r5, r2
 8008c54:	3514      	adds	r5, #20
 8008c56:	6841      	ldr	r1, [r0, #4]
 8008c58:	429d      	cmp	r5, r3
 8008c5a:	d919      	bls.n	8008c90 <_dtoa_r+0x2b0>
 8008c5c:	0038      	movs	r0, r7
 8008c5e:	f001 f87f 	bl	8009d60 <_Balloc>
 8008c62:	9006      	str	r0, [sp, #24]
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d117      	bne.n	8008c98 <_dtoa_r+0x2b8>
 8008c68:	21d5      	movs	r1, #213	; 0xd5
 8008c6a:	0002      	movs	r2, r0
 8008c6c:	4b43      	ldr	r3, [pc, #268]	; (8008d7c <_dtoa_r+0x39c>)
 8008c6e:	0049      	lsls	r1, r1, #1
 8008c70:	e6cb      	b.n	8008a0a <_dtoa_r+0x2a>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e7de      	b.n	8008c34 <_dtoa_r+0x254>
 8008c76:	2300      	movs	r3, #0
 8008c78:	940f      	str	r4, [sp, #60]	; 0x3c
 8008c7a:	9322      	str	r3, [sp, #136]	; 0x88
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	2200      	movs	r2, #0
 8008c84:	3313      	adds	r3, #19
 8008c86:	e7d0      	b.n	8008c2a <_dtoa_r+0x24a>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c8c:	3b02      	subs	r3, #2
 8008c8e:	e7f6      	b.n	8008c7e <_dtoa_r+0x29e>
 8008c90:	3101      	adds	r1, #1
 8008c92:	6041      	str	r1, [r0, #4]
 8008c94:	0052      	lsls	r2, r2, #1
 8008c96:	e7dc      	b.n	8008c52 <_dtoa_r+0x272>
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	9a06      	ldr	r2, [sp, #24]
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	9b07      	ldr	r3, [sp, #28]
 8008ca0:	2b0e      	cmp	r3, #14
 8008ca2:	d900      	bls.n	8008ca6 <_dtoa_r+0x2c6>
 8008ca4:	e0eb      	b.n	8008e7e <_dtoa_r+0x49e>
 8008ca6:	2c00      	cmp	r4, #0
 8008ca8:	d100      	bne.n	8008cac <_dtoa_r+0x2cc>
 8008caa:	e0e8      	b.n	8008e7e <_dtoa_r+0x49e>
 8008cac:	9b02      	ldr	r3, [sp, #8]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	dd68      	ble.n	8008d84 <_dtoa_r+0x3a4>
 8008cb2:	001a      	movs	r2, r3
 8008cb4:	210f      	movs	r1, #15
 8008cb6:	4b2d      	ldr	r3, [pc, #180]	; (8008d6c <_dtoa_r+0x38c>)
 8008cb8:	400a      	ands	r2, r1
 8008cba:	00d2      	lsls	r2, r2, #3
 8008cbc:	189b      	adds	r3, r3, r2
 8008cbe:	681d      	ldr	r5, [r3, #0]
 8008cc0:	685e      	ldr	r6, [r3, #4]
 8008cc2:	9b02      	ldr	r3, [sp, #8]
 8008cc4:	111c      	asrs	r4, r3, #4
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	9310      	str	r3, [sp, #64]	; 0x40
 8008cca:	9b02      	ldr	r3, [sp, #8]
 8008ccc:	05db      	lsls	r3, r3, #23
 8008cce:	d50b      	bpl.n	8008ce8 <_dtoa_r+0x308>
 8008cd0:	4b2b      	ldr	r3, [pc, #172]	; (8008d80 <_dtoa_r+0x3a0>)
 8008cd2:	400c      	ands	r4, r1
 8008cd4:	6a1a      	ldr	r2, [r3, #32]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008cda:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008cdc:	f7f8 f87a 	bl	8000dd4 <__aeabi_ddiv>
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	9008      	str	r0, [sp, #32]
 8008ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8008ce6:	9310      	str	r3, [sp, #64]	; 0x40
 8008ce8:	4b25      	ldr	r3, [pc, #148]	; (8008d80 <_dtoa_r+0x3a0>)
 8008cea:	9314      	str	r3, [sp, #80]	; 0x50
 8008cec:	2c00      	cmp	r4, #0
 8008cee:	d108      	bne.n	8008d02 <_dtoa_r+0x322>
 8008cf0:	9808      	ldr	r0, [sp, #32]
 8008cf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cf4:	002a      	movs	r2, r5
 8008cf6:	0033      	movs	r3, r6
 8008cf8:	f7f8 f86c 	bl	8000dd4 <__aeabi_ddiv>
 8008cfc:	9008      	str	r0, [sp, #32]
 8008cfe:	9109      	str	r1, [sp, #36]	; 0x24
 8008d00:	e05c      	b.n	8008dbc <_dtoa_r+0x3dc>
 8008d02:	2301      	movs	r3, #1
 8008d04:	421c      	tst	r4, r3
 8008d06:	d00b      	beq.n	8008d20 <_dtoa_r+0x340>
 8008d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d0a:	0028      	movs	r0, r5
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	9310      	str	r3, [sp, #64]	; 0x40
 8008d10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d12:	0031      	movs	r1, r6
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f7f8 fc5e 	bl	80015d8 <__aeabi_dmul>
 8008d1c:	0005      	movs	r5, r0
 8008d1e:	000e      	movs	r6, r1
 8008d20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d22:	1064      	asrs	r4, r4, #1
 8008d24:	3308      	adds	r3, #8
 8008d26:	e7e0      	b.n	8008cea <_dtoa_r+0x30a>
 8008d28:	0800b90d 	.word	0x0800b90d
 8008d2c:	0800b924 	.word	0x0800b924
 8008d30:	7ff00000 	.word	0x7ff00000
 8008d34:	0000270f 	.word	0x0000270f
 8008d38:	0800b909 	.word	0x0800b909
 8008d3c:	0800b90c 	.word	0x0800b90c
 8008d40:	0800b880 	.word	0x0800b880
 8008d44:	0800b881 	.word	0x0800b881
 8008d48:	3ff00000 	.word	0x3ff00000
 8008d4c:	fffffc01 	.word	0xfffffc01
 8008d50:	3ff80000 	.word	0x3ff80000
 8008d54:	636f4361 	.word	0x636f4361
 8008d58:	3fd287a7 	.word	0x3fd287a7
 8008d5c:	8b60c8b3 	.word	0x8b60c8b3
 8008d60:	3fc68a28 	.word	0x3fc68a28
 8008d64:	509f79fb 	.word	0x509f79fb
 8008d68:	3fd34413 	.word	0x3fd34413
 8008d6c:	0800ba90 	.word	0x0800ba90
 8008d70:	00000432 	.word	0x00000432
 8008d74:	00000412 	.word	0x00000412
 8008d78:	fe100000 	.word	0xfe100000
 8008d7c:	0800b97f 	.word	0x0800b97f
 8008d80:	0800ba68 	.word	0x0800ba68
 8008d84:	2302      	movs	r3, #2
 8008d86:	9310      	str	r3, [sp, #64]	; 0x40
 8008d88:	9b02      	ldr	r3, [sp, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d016      	beq.n	8008dbc <_dtoa_r+0x3dc>
 8008d8e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008d90:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008d92:	425c      	negs	r4, r3
 8008d94:	230f      	movs	r3, #15
 8008d96:	4ab6      	ldr	r2, [pc, #728]	; (8009070 <_dtoa_r+0x690>)
 8008d98:	4023      	ands	r3, r4
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	18d3      	adds	r3, r2, r3
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f7f8 fc19 	bl	80015d8 <__aeabi_dmul>
 8008da6:	2601      	movs	r6, #1
 8008da8:	2300      	movs	r3, #0
 8008daa:	9008      	str	r0, [sp, #32]
 8008dac:	9109      	str	r1, [sp, #36]	; 0x24
 8008dae:	4db1      	ldr	r5, [pc, #708]	; (8009074 <_dtoa_r+0x694>)
 8008db0:	1124      	asrs	r4, r4, #4
 8008db2:	2c00      	cmp	r4, #0
 8008db4:	d000      	beq.n	8008db8 <_dtoa_r+0x3d8>
 8008db6:	e094      	b.n	8008ee2 <_dtoa_r+0x502>
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d19f      	bne.n	8008cfc <_dtoa_r+0x31c>
 8008dbc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d100      	bne.n	8008dc4 <_dtoa_r+0x3e4>
 8008dc2:	e09b      	b.n	8008efc <_dtoa_r+0x51c>
 8008dc4:	9c08      	ldr	r4, [sp, #32]
 8008dc6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008dc8:	2200      	movs	r2, #0
 8008dca:	0020      	movs	r0, r4
 8008dcc:	0029      	movs	r1, r5
 8008dce:	4baa      	ldr	r3, [pc, #680]	; (8009078 <_dtoa_r+0x698>)
 8008dd0:	f7f7 fb40 	bl	8000454 <__aeabi_dcmplt>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d100      	bne.n	8008dda <_dtoa_r+0x3fa>
 8008dd8:	e090      	b.n	8008efc <_dtoa_r+0x51c>
 8008dda:	9b07      	ldr	r3, [sp, #28]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d100      	bne.n	8008de2 <_dtoa_r+0x402>
 8008de0:	e08c      	b.n	8008efc <_dtoa_r+0x51c>
 8008de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	dd46      	ble.n	8008e76 <_dtoa_r+0x496>
 8008de8:	9b02      	ldr	r3, [sp, #8]
 8008dea:	2200      	movs	r2, #0
 8008dec:	0020      	movs	r0, r4
 8008dee:	0029      	movs	r1, r5
 8008df0:	1e5e      	subs	r6, r3, #1
 8008df2:	4ba2      	ldr	r3, [pc, #648]	; (800907c <_dtoa_r+0x69c>)
 8008df4:	f7f8 fbf0 	bl	80015d8 <__aeabi_dmul>
 8008df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dfa:	9008      	str	r0, [sp, #32]
 8008dfc:	9109      	str	r1, [sp, #36]	; 0x24
 8008dfe:	3301      	adds	r3, #1
 8008e00:	9310      	str	r3, [sp, #64]	; 0x40
 8008e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e04:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e06:	9c08      	ldr	r4, [sp, #32]
 8008e08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e0a:	9314      	str	r3, [sp, #80]	; 0x50
 8008e0c:	f7f9 fa36 	bl	800227c <__aeabi_i2d>
 8008e10:	0022      	movs	r2, r4
 8008e12:	002b      	movs	r3, r5
 8008e14:	f7f8 fbe0 	bl	80015d8 <__aeabi_dmul>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4b99      	ldr	r3, [pc, #612]	; (8009080 <_dtoa_r+0x6a0>)
 8008e1c:	f7f7 fc9e 	bl	800075c <__aeabi_dadd>
 8008e20:	9010      	str	r0, [sp, #64]	; 0x40
 8008e22:	9111      	str	r1, [sp, #68]	; 0x44
 8008e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e28:	9208      	str	r2, [sp, #32]
 8008e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e2c:	4a95      	ldr	r2, [pc, #596]	; (8009084 <_dtoa_r+0x6a4>)
 8008e2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e30:	4694      	mov	ip, r2
 8008e32:	4463      	add	r3, ip
 8008e34:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e36:	9309      	str	r3, [sp, #36]	; 0x24
 8008e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d161      	bne.n	8008f02 <_dtoa_r+0x522>
 8008e3e:	2200      	movs	r2, #0
 8008e40:	0020      	movs	r0, r4
 8008e42:	0029      	movs	r1, r5
 8008e44:	4b90      	ldr	r3, [pc, #576]	; (8009088 <_dtoa_r+0x6a8>)
 8008e46:	f7f8 fe33 	bl	8001ab0 <__aeabi_dsub>
 8008e4a:	9a08      	ldr	r2, [sp, #32]
 8008e4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e4e:	0004      	movs	r4, r0
 8008e50:	000d      	movs	r5, r1
 8008e52:	f7f7 fb13 	bl	800047c <__aeabi_dcmpgt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d000      	beq.n	8008e5c <_dtoa_r+0x47c>
 8008e5a:	e2af      	b.n	80093bc <_dtoa_r+0x9dc>
 8008e5c:	488b      	ldr	r0, [pc, #556]	; (800908c <_dtoa_r+0x6ac>)
 8008e5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e60:	4684      	mov	ip, r0
 8008e62:	4461      	add	r1, ip
 8008e64:	000b      	movs	r3, r1
 8008e66:	0020      	movs	r0, r4
 8008e68:	0029      	movs	r1, r5
 8008e6a:	9a08      	ldr	r2, [sp, #32]
 8008e6c:	f7f7 faf2 	bl	8000454 <__aeabi_dcmplt>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d000      	beq.n	8008e76 <_dtoa_r+0x496>
 8008e74:	e29f      	b.n	80093b6 <_dtoa_r+0x9d6>
 8008e76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008e7a:	9308      	str	r3, [sp, #32]
 8008e7c:	9409      	str	r4, [sp, #36]	; 0x24
 8008e7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	da00      	bge.n	8008e86 <_dtoa_r+0x4a6>
 8008e84:	e172      	b.n	800916c <_dtoa_r+0x78c>
 8008e86:	9a02      	ldr	r2, [sp, #8]
 8008e88:	2a0e      	cmp	r2, #14
 8008e8a:	dd00      	ble.n	8008e8e <_dtoa_r+0x4ae>
 8008e8c:	e16e      	b.n	800916c <_dtoa_r+0x78c>
 8008e8e:	4b78      	ldr	r3, [pc, #480]	; (8009070 <_dtoa_r+0x690>)
 8008e90:	00d2      	lsls	r2, r2, #3
 8008e92:	189b      	adds	r3, r3, r2
 8008e94:	685c      	ldr	r4, [r3, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	930a      	str	r3, [sp, #40]	; 0x28
 8008e9a:	940b      	str	r4, [sp, #44]	; 0x2c
 8008e9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	db00      	blt.n	8008ea4 <_dtoa_r+0x4c4>
 8008ea2:	e0f7      	b.n	8009094 <_dtoa_r+0x6b4>
 8008ea4:	9b07      	ldr	r3, [sp, #28]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	dd00      	ble.n	8008eac <_dtoa_r+0x4cc>
 8008eaa:	e0f3      	b.n	8009094 <_dtoa_r+0x6b4>
 8008eac:	d000      	beq.n	8008eb0 <_dtoa_r+0x4d0>
 8008eae:	e282      	b.n	80093b6 <_dtoa_r+0x9d6>
 8008eb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	4b74      	ldr	r3, [pc, #464]	; (8009088 <_dtoa_r+0x6a8>)
 8008eb8:	f7f8 fb8e 	bl	80015d8 <__aeabi_dmul>
 8008ebc:	9a08      	ldr	r2, [sp, #32]
 8008ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec0:	f7f7 fae6 	bl	8000490 <__aeabi_dcmpge>
 8008ec4:	9e07      	ldr	r6, [sp, #28]
 8008ec6:	0035      	movs	r5, r6
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d000      	beq.n	8008ece <_dtoa_r+0x4ee>
 8008ecc:	e259      	b.n	8009382 <_dtoa_r+0x9a2>
 8008ece:	9b06      	ldr	r3, [sp, #24]
 8008ed0:	9a06      	ldr	r2, [sp, #24]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	9308      	str	r3, [sp, #32]
 8008ed6:	2331      	movs	r3, #49	; 0x31
 8008ed8:	7013      	strb	r3, [r2, #0]
 8008eda:	9b02      	ldr	r3, [sp, #8]
 8008edc:	3301      	adds	r3, #1
 8008ede:	9302      	str	r3, [sp, #8]
 8008ee0:	e254      	b.n	800938c <_dtoa_r+0x9ac>
 8008ee2:	4234      	tst	r4, r6
 8008ee4:	d007      	beq.n	8008ef6 <_dtoa_r+0x516>
 8008ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ee8:	3301      	adds	r3, #1
 8008eea:	9310      	str	r3, [sp, #64]	; 0x40
 8008eec:	682a      	ldr	r2, [r5, #0]
 8008eee:	686b      	ldr	r3, [r5, #4]
 8008ef0:	f7f8 fb72 	bl	80015d8 <__aeabi_dmul>
 8008ef4:	0033      	movs	r3, r6
 8008ef6:	1064      	asrs	r4, r4, #1
 8008ef8:	3508      	adds	r5, #8
 8008efa:	e75a      	b.n	8008db2 <_dtoa_r+0x3d2>
 8008efc:	9e02      	ldr	r6, [sp, #8]
 8008efe:	9b07      	ldr	r3, [sp, #28]
 8008f00:	e780      	b.n	8008e04 <_dtoa_r+0x424>
 8008f02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f06:	1e5a      	subs	r2, r3, #1
 8008f08:	4b59      	ldr	r3, [pc, #356]	; (8009070 <_dtoa_r+0x690>)
 8008f0a:	00d2      	lsls	r2, r2, #3
 8008f0c:	189b      	adds	r3, r3, r2
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	2900      	cmp	r1, #0
 8008f14:	d051      	beq.n	8008fba <_dtoa_r+0x5da>
 8008f16:	2000      	movs	r0, #0
 8008f18:	495d      	ldr	r1, [pc, #372]	; (8009090 <_dtoa_r+0x6b0>)
 8008f1a:	f7f7 ff5b 	bl	8000dd4 <__aeabi_ddiv>
 8008f1e:	9a08      	ldr	r2, [sp, #32]
 8008f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f22:	f7f8 fdc5 	bl	8001ab0 <__aeabi_dsub>
 8008f26:	9a06      	ldr	r2, [sp, #24]
 8008f28:	9b06      	ldr	r3, [sp, #24]
 8008f2a:	4694      	mov	ip, r2
 8008f2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f30:	9010      	str	r0, [sp, #64]	; 0x40
 8008f32:	9111      	str	r1, [sp, #68]	; 0x44
 8008f34:	4463      	add	r3, ip
 8008f36:	9319      	str	r3, [sp, #100]	; 0x64
 8008f38:	0029      	movs	r1, r5
 8008f3a:	0020      	movs	r0, r4
 8008f3c:	f7f9 f968 	bl	8002210 <__aeabi_d2iz>
 8008f40:	9014      	str	r0, [sp, #80]	; 0x50
 8008f42:	f7f9 f99b 	bl	800227c <__aeabi_i2d>
 8008f46:	0002      	movs	r2, r0
 8008f48:	000b      	movs	r3, r1
 8008f4a:	0020      	movs	r0, r4
 8008f4c:	0029      	movs	r1, r5
 8008f4e:	f7f8 fdaf 	bl	8001ab0 <__aeabi_dsub>
 8008f52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f56:	3301      	adds	r3, #1
 8008f58:	9308      	str	r3, [sp, #32]
 8008f5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f5c:	0004      	movs	r4, r0
 8008f5e:	3330      	adds	r3, #48	; 0x30
 8008f60:	7013      	strb	r3, [r2, #0]
 8008f62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f66:	000d      	movs	r5, r1
 8008f68:	f7f7 fa74 	bl	8000454 <__aeabi_dcmplt>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d175      	bne.n	800905c <_dtoa_r+0x67c>
 8008f70:	0022      	movs	r2, r4
 8008f72:	002b      	movs	r3, r5
 8008f74:	2000      	movs	r0, #0
 8008f76:	4940      	ldr	r1, [pc, #256]	; (8009078 <_dtoa_r+0x698>)
 8008f78:	f7f8 fd9a 	bl	8001ab0 <__aeabi_dsub>
 8008f7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f80:	f7f7 fa68 	bl	8000454 <__aeabi_dcmplt>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d000      	beq.n	8008f8a <_dtoa_r+0x5aa>
 8008f88:	e0d2      	b.n	8009130 <_dtoa_r+0x750>
 8008f8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f8c:	9a08      	ldr	r2, [sp, #32]
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d100      	bne.n	8008f94 <_dtoa_r+0x5b4>
 8008f92:	e770      	b.n	8008e76 <_dtoa_r+0x496>
 8008f94:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f96:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4b38      	ldr	r3, [pc, #224]	; (800907c <_dtoa_r+0x69c>)
 8008f9c:	f7f8 fb1c 	bl	80015d8 <__aeabi_dmul>
 8008fa0:	4b36      	ldr	r3, [pc, #216]	; (800907c <_dtoa_r+0x69c>)
 8008fa2:	9010      	str	r0, [sp, #64]	; 0x40
 8008fa4:	9111      	str	r1, [sp, #68]	; 0x44
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	0020      	movs	r0, r4
 8008faa:	0029      	movs	r1, r5
 8008fac:	f7f8 fb14 	bl	80015d8 <__aeabi_dmul>
 8008fb0:	9b08      	ldr	r3, [sp, #32]
 8008fb2:	0004      	movs	r4, r0
 8008fb4:	000d      	movs	r5, r1
 8008fb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fb8:	e7be      	b.n	8008f38 <_dtoa_r+0x558>
 8008fba:	9808      	ldr	r0, [sp, #32]
 8008fbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fbe:	f7f8 fb0b 	bl	80015d8 <__aeabi_dmul>
 8008fc2:	9a06      	ldr	r2, [sp, #24]
 8008fc4:	9b06      	ldr	r3, [sp, #24]
 8008fc6:	4694      	mov	ip, r2
 8008fc8:	9308      	str	r3, [sp, #32]
 8008fca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fcc:	9010      	str	r0, [sp, #64]	; 0x40
 8008fce:	9111      	str	r1, [sp, #68]	; 0x44
 8008fd0:	4463      	add	r3, ip
 8008fd2:	9319      	str	r3, [sp, #100]	; 0x64
 8008fd4:	0029      	movs	r1, r5
 8008fd6:	0020      	movs	r0, r4
 8008fd8:	f7f9 f91a 	bl	8002210 <__aeabi_d2iz>
 8008fdc:	9017      	str	r0, [sp, #92]	; 0x5c
 8008fde:	f7f9 f94d 	bl	800227c <__aeabi_i2d>
 8008fe2:	0002      	movs	r2, r0
 8008fe4:	000b      	movs	r3, r1
 8008fe6:	0020      	movs	r0, r4
 8008fe8:	0029      	movs	r1, r5
 8008fea:	f7f8 fd61 	bl	8001ab0 <__aeabi_dsub>
 8008fee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ff0:	9a08      	ldr	r2, [sp, #32]
 8008ff2:	3330      	adds	r3, #48	; 0x30
 8008ff4:	7013      	strb	r3, [r2, #0]
 8008ff6:	0013      	movs	r3, r2
 8008ff8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	0004      	movs	r4, r0
 8008ffe:	000d      	movs	r5, r1
 8009000:	9308      	str	r3, [sp, #32]
 8009002:	4293      	cmp	r3, r2
 8009004:	d12c      	bne.n	8009060 <_dtoa_r+0x680>
 8009006:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009008:	9911      	ldr	r1, [sp, #68]	; 0x44
 800900a:	9a06      	ldr	r2, [sp, #24]
 800900c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800900e:	4694      	mov	ip, r2
 8009010:	4463      	add	r3, ip
 8009012:	2200      	movs	r2, #0
 8009014:	9308      	str	r3, [sp, #32]
 8009016:	4b1e      	ldr	r3, [pc, #120]	; (8009090 <_dtoa_r+0x6b0>)
 8009018:	f7f7 fba0 	bl	800075c <__aeabi_dadd>
 800901c:	0002      	movs	r2, r0
 800901e:	000b      	movs	r3, r1
 8009020:	0020      	movs	r0, r4
 8009022:	0029      	movs	r1, r5
 8009024:	f7f7 fa2a 	bl	800047c <__aeabi_dcmpgt>
 8009028:	2800      	cmp	r0, #0
 800902a:	d000      	beq.n	800902e <_dtoa_r+0x64e>
 800902c:	e080      	b.n	8009130 <_dtoa_r+0x750>
 800902e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009032:	2000      	movs	r0, #0
 8009034:	4916      	ldr	r1, [pc, #88]	; (8009090 <_dtoa_r+0x6b0>)
 8009036:	f7f8 fd3b 	bl	8001ab0 <__aeabi_dsub>
 800903a:	0002      	movs	r2, r0
 800903c:	000b      	movs	r3, r1
 800903e:	0020      	movs	r0, r4
 8009040:	0029      	movs	r1, r5
 8009042:	f7f7 fa07 	bl	8000454 <__aeabi_dcmplt>
 8009046:	2800      	cmp	r0, #0
 8009048:	d100      	bne.n	800904c <_dtoa_r+0x66c>
 800904a:	e714      	b.n	8008e76 <_dtoa_r+0x496>
 800904c:	9b08      	ldr	r3, [sp, #32]
 800904e:	001a      	movs	r2, r3
 8009050:	3a01      	subs	r2, #1
 8009052:	9208      	str	r2, [sp, #32]
 8009054:	7812      	ldrb	r2, [r2, #0]
 8009056:	2a30      	cmp	r2, #48	; 0x30
 8009058:	d0f8      	beq.n	800904c <_dtoa_r+0x66c>
 800905a:	9308      	str	r3, [sp, #32]
 800905c:	9602      	str	r6, [sp, #8]
 800905e:	e055      	b.n	800910c <_dtoa_r+0x72c>
 8009060:	2200      	movs	r2, #0
 8009062:	4b06      	ldr	r3, [pc, #24]	; (800907c <_dtoa_r+0x69c>)
 8009064:	f7f8 fab8 	bl	80015d8 <__aeabi_dmul>
 8009068:	0004      	movs	r4, r0
 800906a:	000d      	movs	r5, r1
 800906c:	e7b2      	b.n	8008fd4 <_dtoa_r+0x5f4>
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	0800ba90 	.word	0x0800ba90
 8009074:	0800ba68 	.word	0x0800ba68
 8009078:	3ff00000 	.word	0x3ff00000
 800907c:	40240000 	.word	0x40240000
 8009080:	401c0000 	.word	0x401c0000
 8009084:	fcc00000 	.word	0xfcc00000
 8009088:	40140000 	.word	0x40140000
 800908c:	7cc00000 	.word	0x7cc00000
 8009090:	3fe00000 	.word	0x3fe00000
 8009094:	9b07      	ldr	r3, [sp, #28]
 8009096:	9e06      	ldr	r6, [sp, #24]
 8009098:	3b01      	subs	r3, #1
 800909a:	199b      	adds	r3, r3, r6
 800909c:	930c      	str	r3, [sp, #48]	; 0x30
 800909e:	9c08      	ldr	r4, [sp, #32]
 80090a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80090a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a6:	0020      	movs	r0, r4
 80090a8:	0029      	movs	r1, r5
 80090aa:	f7f7 fe93 	bl	8000dd4 <__aeabi_ddiv>
 80090ae:	f7f9 f8af 	bl	8002210 <__aeabi_d2iz>
 80090b2:	9007      	str	r0, [sp, #28]
 80090b4:	f7f9 f8e2 	bl	800227c <__aeabi_i2d>
 80090b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090bc:	f7f8 fa8c 	bl	80015d8 <__aeabi_dmul>
 80090c0:	0002      	movs	r2, r0
 80090c2:	000b      	movs	r3, r1
 80090c4:	0020      	movs	r0, r4
 80090c6:	0029      	movs	r1, r5
 80090c8:	f7f8 fcf2 	bl	8001ab0 <__aeabi_dsub>
 80090cc:	0033      	movs	r3, r6
 80090ce:	9a07      	ldr	r2, [sp, #28]
 80090d0:	3601      	adds	r6, #1
 80090d2:	3230      	adds	r2, #48	; 0x30
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090d8:	9608      	str	r6, [sp, #32]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d139      	bne.n	8009152 <_dtoa_r+0x772>
 80090de:	0002      	movs	r2, r0
 80090e0:	000b      	movs	r3, r1
 80090e2:	f7f7 fb3b 	bl	800075c <__aeabi_dadd>
 80090e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ea:	0004      	movs	r4, r0
 80090ec:	000d      	movs	r5, r1
 80090ee:	f7f7 f9c5 	bl	800047c <__aeabi_dcmpgt>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d11b      	bne.n	800912e <_dtoa_r+0x74e>
 80090f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fa:	0020      	movs	r0, r4
 80090fc:	0029      	movs	r1, r5
 80090fe:	f7f7 f9a3 	bl	8000448 <__aeabi_dcmpeq>
 8009102:	2800      	cmp	r0, #0
 8009104:	d002      	beq.n	800910c <_dtoa_r+0x72c>
 8009106:	9b07      	ldr	r3, [sp, #28]
 8009108:	07db      	lsls	r3, r3, #31
 800910a:	d410      	bmi.n	800912e <_dtoa_r+0x74e>
 800910c:	0038      	movs	r0, r7
 800910e:	9905      	ldr	r1, [sp, #20]
 8009110:	f000 fe6a 	bl	8009de8 <_Bfree>
 8009114:	2300      	movs	r3, #0
 8009116:	9a08      	ldr	r2, [sp, #32]
 8009118:	9802      	ldr	r0, [sp, #8]
 800911a:	7013      	strb	r3, [r2, #0]
 800911c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800911e:	3001      	adds	r0, #1
 8009120:	6018      	str	r0, [r3, #0]
 8009122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009124:	2b00      	cmp	r3, #0
 8009126:	d100      	bne.n	800912a <_dtoa_r+0x74a>
 8009128:	e4a6      	b.n	8008a78 <_dtoa_r+0x98>
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	e4a4      	b.n	8008a78 <_dtoa_r+0x98>
 800912e:	9e02      	ldr	r6, [sp, #8]
 8009130:	9b08      	ldr	r3, [sp, #32]
 8009132:	9308      	str	r3, [sp, #32]
 8009134:	3b01      	subs	r3, #1
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	2a39      	cmp	r2, #57	; 0x39
 800913a:	d106      	bne.n	800914a <_dtoa_r+0x76a>
 800913c:	9a06      	ldr	r2, [sp, #24]
 800913e:	429a      	cmp	r2, r3
 8009140:	d1f7      	bne.n	8009132 <_dtoa_r+0x752>
 8009142:	2230      	movs	r2, #48	; 0x30
 8009144:	9906      	ldr	r1, [sp, #24]
 8009146:	3601      	adds	r6, #1
 8009148:	700a      	strb	r2, [r1, #0]
 800914a:	781a      	ldrb	r2, [r3, #0]
 800914c:	3201      	adds	r2, #1
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	e784      	b.n	800905c <_dtoa_r+0x67c>
 8009152:	2200      	movs	r2, #0
 8009154:	4baa      	ldr	r3, [pc, #680]	; (8009400 <_dtoa_r+0xa20>)
 8009156:	f7f8 fa3f 	bl	80015d8 <__aeabi_dmul>
 800915a:	2200      	movs	r2, #0
 800915c:	2300      	movs	r3, #0
 800915e:	0004      	movs	r4, r0
 8009160:	000d      	movs	r5, r1
 8009162:	f7f7 f971 	bl	8000448 <__aeabi_dcmpeq>
 8009166:	2800      	cmp	r0, #0
 8009168:	d09b      	beq.n	80090a2 <_dtoa_r+0x6c2>
 800916a:	e7cf      	b.n	800910c <_dtoa_r+0x72c>
 800916c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800916e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009170:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009172:	2d00      	cmp	r5, #0
 8009174:	d012      	beq.n	800919c <_dtoa_r+0x7bc>
 8009176:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009178:	2a01      	cmp	r2, #1
 800917a:	dc66      	bgt.n	800924a <_dtoa_r+0x86a>
 800917c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800917e:	2a00      	cmp	r2, #0
 8009180:	d05d      	beq.n	800923e <_dtoa_r+0x85e>
 8009182:	4aa0      	ldr	r2, [pc, #640]	; (8009404 <_dtoa_r+0xa24>)
 8009184:	189b      	adds	r3, r3, r2
 8009186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009188:	2101      	movs	r1, #1
 800918a:	18d2      	adds	r2, r2, r3
 800918c:	920a      	str	r2, [sp, #40]	; 0x28
 800918e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009190:	0038      	movs	r0, r7
 8009192:	18d3      	adds	r3, r2, r3
 8009194:	930d      	str	r3, [sp, #52]	; 0x34
 8009196:	f000 ff23 	bl	8009fe0 <__i2b>
 800919a:	0005      	movs	r5, r0
 800919c:	2c00      	cmp	r4, #0
 800919e:	dd0e      	ble.n	80091be <_dtoa_r+0x7de>
 80091a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dd0b      	ble.n	80091be <_dtoa_r+0x7de>
 80091a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091a8:	0023      	movs	r3, r4
 80091aa:	4294      	cmp	r4, r2
 80091ac:	dd00      	ble.n	80091b0 <_dtoa_r+0x7d0>
 80091ae:	0013      	movs	r3, r2
 80091b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091b2:	1ae4      	subs	r4, r4, r3
 80091b4:	1ad2      	subs	r2, r2, r3
 80091b6:	920a      	str	r2, [sp, #40]	; 0x28
 80091b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	930d      	str	r3, [sp, #52]	; 0x34
 80091be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01f      	beq.n	8009204 <_dtoa_r+0x824>
 80091c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d054      	beq.n	8009274 <_dtoa_r+0x894>
 80091ca:	2e00      	cmp	r6, #0
 80091cc:	dd11      	ble.n	80091f2 <_dtoa_r+0x812>
 80091ce:	0029      	movs	r1, r5
 80091d0:	0032      	movs	r2, r6
 80091d2:	0038      	movs	r0, r7
 80091d4:	f000 ffca 	bl	800a16c <__pow5mult>
 80091d8:	9a05      	ldr	r2, [sp, #20]
 80091da:	0001      	movs	r1, r0
 80091dc:	0005      	movs	r5, r0
 80091de:	0038      	movs	r0, r7
 80091e0:	f000 ff14 	bl	800a00c <__multiply>
 80091e4:	9905      	ldr	r1, [sp, #20]
 80091e6:	9014      	str	r0, [sp, #80]	; 0x50
 80091e8:	0038      	movs	r0, r7
 80091ea:	f000 fdfd 	bl	8009de8 <_Bfree>
 80091ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091f0:	9305      	str	r3, [sp, #20]
 80091f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091f4:	1b9a      	subs	r2, r3, r6
 80091f6:	42b3      	cmp	r3, r6
 80091f8:	d004      	beq.n	8009204 <_dtoa_r+0x824>
 80091fa:	0038      	movs	r0, r7
 80091fc:	9905      	ldr	r1, [sp, #20]
 80091fe:	f000 ffb5 	bl	800a16c <__pow5mult>
 8009202:	9005      	str	r0, [sp, #20]
 8009204:	2101      	movs	r1, #1
 8009206:	0038      	movs	r0, r7
 8009208:	f000 feea 	bl	8009fe0 <__i2b>
 800920c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800920e:	0006      	movs	r6, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	dd31      	ble.n	8009278 <_dtoa_r+0x898>
 8009214:	001a      	movs	r2, r3
 8009216:	0001      	movs	r1, r0
 8009218:	0038      	movs	r0, r7
 800921a:	f000 ffa7 	bl	800a16c <__pow5mult>
 800921e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009220:	0006      	movs	r6, r0
 8009222:	2b01      	cmp	r3, #1
 8009224:	dd2d      	ble.n	8009282 <_dtoa_r+0x8a2>
 8009226:	2300      	movs	r3, #0
 8009228:	930e      	str	r3, [sp, #56]	; 0x38
 800922a:	6933      	ldr	r3, [r6, #16]
 800922c:	3303      	adds	r3, #3
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	18f3      	adds	r3, r6, r3
 8009232:	6858      	ldr	r0, [r3, #4]
 8009234:	f000 fe8c 	bl	8009f50 <__hi0bits>
 8009238:	2320      	movs	r3, #32
 800923a:	1a18      	subs	r0, r3, r0
 800923c:	e039      	b.n	80092b2 <_dtoa_r+0x8d2>
 800923e:	2336      	movs	r3, #54	; 0x36
 8009240:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009242:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009244:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	e79d      	b.n	8009186 <_dtoa_r+0x7a6>
 800924a:	9b07      	ldr	r3, [sp, #28]
 800924c:	1e5e      	subs	r6, r3, #1
 800924e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009250:	42b3      	cmp	r3, r6
 8009252:	db07      	blt.n	8009264 <_dtoa_r+0x884>
 8009254:	1b9e      	subs	r6, r3, r6
 8009256:	9b07      	ldr	r3, [sp, #28]
 8009258:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800925a:	2b00      	cmp	r3, #0
 800925c:	da93      	bge.n	8009186 <_dtoa_r+0x7a6>
 800925e:	1ae4      	subs	r4, r4, r3
 8009260:	2300      	movs	r3, #0
 8009262:	e790      	b.n	8009186 <_dtoa_r+0x7a6>
 8009264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009266:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009268:	1af3      	subs	r3, r6, r3
 800926a:	18d3      	adds	r3, r2, r3
 800926c:	960e      	str	r6, [sp, #56]	; 0x38
 800926e:	9315      	str	r3, [sp, #84]	; 0x54
 8009270:	2600      	movs	r6, #0
 8009272:	e7f0      	b.n	8009256 <_dtoa_r+0x876>
 8009274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009276:	e7c0      	b.n	80091fa <_dtoa_r+0x81a>
 8009278:	2300      	movs	r3, #0
 800927a:	930e      	str	r3, [sp, #56]	; 0x38
 800927c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800927e:	2b01      	cmp	r3, #1
 8009280:	dc13      	bgt.n	80092aa <_dtoa_r+0x8ca>
 8009282:	2300      	movs	r3, #0
 8009284:	930e      	str	r3, [sp, #56]	; 0x38
 8009286:	9b08      	ldr	r3, [sp, #32]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10e      	bne.n	80092aa <_dtoa_r+0x8ca>
 800928c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928e:	031b      	lsls	r3, r3, #12
 8009290:	d10b      	bne.n	80092aa <_dtoa_r+0x8ca>
 8009292:	4b5d      	ldr	r3, [pc, #372]	; (8009408 <_dtoa_r+0xa28>)
 8009294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009296:	4213      	tst	r3, r2
 8009298:	d007      	beq.n	80092aa <_dtoa_r+0x8ca>
 800929a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800929c:	3301      	adds	r3, #1
 800929e:	930a      	str	r3, [sp, #40]	; 0x28
 80092a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092a2:	3301      	adds	r3, #1
 80092a4:	930d      	str	r3, [sp, #52]	; 0x34
 80092a6:	2301      	movs	r3, #1
 80092a8:	930e      	str	r3, [sp, #56]	; 0x38
 80092aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092ac:	2001      	movs	r0, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1bb      	bne.n	800922a <_dtoa_r+0x84a>
 80092b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b4:	221f      	movs	r2, #31
 80092b6:	1818      	adds	r0, r3, r0
 80092b8:	0003      	movs	r3, r0
 80092ba:	4013      	ands	r3, r2
 80092bc:	4210      	tst	r0, r2
 80092be:	d046      	beq.n	800934e <_dtoa_r+0x96e>
 80092c0:	3201      	adds	r2, #1
 80092c2:	1ad2      	subs	r2, r2, r3
 80092c4:	2a04      	cmp	r2, #4
 80092c6:	dd3f      	ble.n	8009348 <_dtoa_r+0x968>
 80092c8:	221c      	movs	r2, #28
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092ce:	18e4      	adds	r4, r4, r3
 80092d0:	18d2      	adds	r2, r2, r3
 80092d2:	920a      	str	r2, [sp, #40]	; 0x28
 80092d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092d6:	18d3      	adds	r3, r2, r3
 80092d8:	930d      	str	r3, [sp, #52]	; 0x34
 80092da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd05      	ble.n	80092ec <_dtoa_r+0x90c>
 80092e0:	001a      	movs	r2, r3
 80092e2:	0038      	movs	r0, r7
 80092e4:	9905      	ldr	r1, [sp, #20]
 80092e6:	f000 ff9d 	bl	800a224 <__lshift>
 80092ea:	9005      	str	r0, [sp, #20]
 80092ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dd05      	ble.n	80092fe <_dtoa_r+0x91e>
 80092f2:	0031      	movs	r1, r6
 80092f4:	001a      	movs	r2, r3
 80092f6:	0038      	movs	r0, r7
 80092f8:	f000 ff94 	bl	800a224 <__lshift>
 80092fc:	0006      	movs	r6, r0
 80092fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009300:	2b00      	cmp	r3, #0
 8009302:	d026      	beq.n	8009352 <_dtoa_r+0x972>
 8009304:	0031      	movs	r1, r6
 8009306:	9805      	ldr	r0, [sp, #20]
 8009308:	f000 fffa 	bl	800a300 <__mcmp>
 800930c:	2800      	cmp	r0, #0
 800930e:	da20      	bge.n	8009352 <_dtoa_r+0x972>
 8009310:	9b02      	ldr	r3, [sp, #8]
 8009312:	220a      	movs	r2, #10
 8009314:	3b01      	subs	r3, #1
 8009316:	9302      	str	r3, [sp, #8]
 8009318:	0038      	movs	r0, r7
 800931a:	2300      	movs	r3, #0
 800931c:	9905      	ldr	r1, [sp, #20]
 800931e:	f000 fd87 	bl	8009e30 <__multadd>
 8009322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009324:	9005      	str	r0, [sp, #20]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d100      	bne.n	800932c <_dtoa_r+0x94c>
 800932a:	e166      	b.n	80095fa <_dtoa_r+0xc1a>
 800932c:	2300      	movs	r3, #0
 800932e:	0029      	movs	r1, r5
 8009330:	220a      	movs	r2, #10
 8009332:	0038      	movs	r0, r7
 8009334:	f000 fd7c 	bl	8009e30 <__multadd>
 8009338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800933a:	0005      	movs	r5, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	dc47      	bgt.n	80093d0 <_dtoa_r+0x9f0>
 8009340:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009342:	2b02      	cmp	r3, #2
 8009344:	dc0d      	bgt.n	8009362 <_dtoa_r+0x982>
 8009346:	e043      	b.n	80093d0 <_dtoa_r+0x9f0>
 8009348:	2a04      	cmp	r2, #4
 800934a:	d0c6      	beq.n	80092da <_dtoa_r+0x8fa>
 800934c:	0013      	movs	r3, r2
 800934e:	331c      	adds	r3, #28
 8009350:	e7bc      	b.n	80092cc <_dtoa_r+0x8ec>
 8009352:	9b07      	ldr	r3, [sp, #28]
 8009354:	2b00      	cmp	r3, #0
 8009356:	dc35      	bgt.n	80093c4 <_dtoa_r+0x9e4>
 8009358:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800935a:	2b02      	cmp	r3, #2
 800935c:	dd32      	ble.n	80093c4 <_dtoa_r+0x9e4>
 800935e:	9b07      	ldr	r3, [sp, #28]
 8009360:	930c      	str	r3, [sp, #48]	; 0x30
 8009362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10c      	bne.n	8009382 <_dtoa_r+0x9a2>
 8009368:	0031      	movs	r1, r6
 800936a:	2205      	movs	r2, #5
 800936c:	0038      	movs	r0, r7
 800936e:	f000 fd5f 	bl	8009e30 <__multadd>
 8009372:	0006      	movs	r6, r0
 8009374:	0001      	movs	r1, r0
 8009376:	9805      	ldr	r0, [sp, #20]
 8009378:	f000 ffc2 	bl	800a300 <__mcmp>
 800937c:	2800      	cmp	r0, #0
 800937e:	dd00      	ble.n	8009382 <_dtoa_r+0x9a2>
 8009380:	e5a5      	b.n	8008ece <_dtoa_r+0x4ee>
 8009382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009384:	43db      	mvns	r3, r3
 8009386:	9302      	str	r3, [sp, #8]
 8009388:	9b06      	ldr	r3, [sp, #24]
 800938a:	9308      	str	r3, [sp, #32]
 800938c:	2400      	movs	r4, #0
 800938e:	0031      	movs	r1, r6
 8009390:	0038      	movs	r0, r7
 8009392:	f000 fd29 	bl	8009de8 <_Bfree>
 8009396:	2d00      	cmp	r5, #0
 8009398:	d100      	bne.n	800939c <_dtoa_r+0x9bc>
 800939a:	e6b7      	b.n	800910c <_dtoa_r+0x72c>
 800939c:	2c00      	cmp	r4, #0
 800939e:	d005      	beq.n	80093ac <_dtoa_r+0x9cc>
 80093a0:	42ac      	cmp	r4, r5
 80093a2:	d003      	beq.n	80093ac <_dtoa_r+0x9cc>
 80093a4:	0021      	movs	r1, r4
 80093a6:	0038      	movs	r0, r7
 80093a8:	f000 fd1e 	bl	8009de8 <_Bfree>
 80093ac:	0029      	movs	r1, r5
 80093ae:	0038      	movs	r0, r7
 80093b0:	f000 fd1a 	bl	8009de8 <_Bfree>
 80093b4:	e6aa      	b.n	800910c <_dtoa_r+0x72c>
 80093b6:	2600      	movs	r6, #0
 80093b8:	0035      	movs	r5, r6
 80093ba:	e7e2      	b.n	8009382 <_dtoa_r+0x9a2>
 80093bc:	9602      	str	r6, [sp, #8]
 80093be:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80093c0:	0035      	movs	r5, r6
 80093c2:	e584      	b.n	8008ece <_dtoa_r+0x4ee>
 80093c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d100      	bne.n	80093cc <_dtoa_r+0x9ec>
 80093ca:	e0ce      	b.n	800956a <_dtoa_r+0xb8a>
 80093cc:	9b07      	ldr	r3, [sp, #28]
 80093ce:	930c      	str	r3, [sp, #48]	; 0x30
 80093d0:	2c00      	cmp	r4, #0
 80093d2:	dd05      	ble.n	80093e0 <_dtoa_r+0xa00>
 80093d4:	0029      	movs	r1, r5
 80093d6:	0022      	movs	r2, r4
 80093d8:	0038      	movs	r0, r7
 80093da:	f000 ff23 	bl	800a224 <__lshift>
 80093de:	0005      	movs	r5, r0
 80093e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093e2:	0028      	movs	r0, r5
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d022      	beq.n	800942e <_dtoa_r+0xa4e>
 80093e8:	0038      	movs	r0, r7
 80093ea:	6869      	ldr	r1, [r5, #4]
 80093ec:	f000 fcb8 	bl	8009d60 <_Balloc>
 80093f0:	1e04      	subs	r4, r0, #0
 80093f2:	d10f      	bne.n	8009414 <_dtoa_r+0xa34>
 80093f4:	0002      	movs	r2, r0
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <_dtoa_r+0xa2c>)
 80093f8:	4905      	ldr	r1, [pc, #20]	; (8009410 <_dtoa_r+0xa30>)
 80093fa:	f7ff fb06 	bl	8008a0a <_dtoa_r+0x2a>
 80093fe:	46c0      	nop			; (mov r8, r8)
 8009400:	40240000 	.word	0x40240000
 8009404:	00000433 	.word	0x00000433
 8009408:	7ff00000 	.word	0x7ff00000
 800940c:	0800b97f 	.word	0x0800b97f
 8009410:	000002ea 	.word	0x000002ea
 8009414:	0029      	movs	r1, r5
 8009416:	692b      	ldr	r3, [r5, #16]
 8009418:	310c      	adds	r1, #12
 800941a:	1c9a      	adds	r2, r3, #2
 800941c:	0092      	lsls	r2, r2, #2
 800941e:	300c      	adds	r0, #12
 8009420:	f7fd fbec 	bl	8006bfc <memcpy>
 8009424:	2201      	movs	r2, #1
 8009426:	0021      	movs	r1, r4
 8009428:	0038      	movs	r0, r7
 800942a:	f000 fefb 	bl	800a224 <__lshift>
 800942e:	9b06      	ldr	r3, [sp, #24]
 8009430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009432:	930a      	str	r3, [sp, #40]	; 0x28
 8009434:	3b01      	subs	r3, #1
 8009436:	189b      	adds	r3, r3, r2
 8009438:	2201      	movs	r2, #1
 800943a:	002c      	movs	r4, r5
 800943c:	0005      	movs	r5, r0
 800943e:	9314      	str	r3, [sp, #80]	; 0x50
 8009440:	9b08      	ldr	r3, [sp, #32]
 8009442:	4013      	ands	r3, r2
 8009444:	930f      	str	r3, [sp, #60]	; 0x3c
 8009446:	0031      	movs	r1, r6
 8009448:	9805      	ldr	r0, [sp, #20]
 800944a:	f7ff fa3d 	bl	80088c8 <quorem>
 800944e:	0003      	movs	r3, r0
 8009450:	0021      	movs	r1, r4
 8009452:	3330      	adds	r3, #48	; 0x30
 8009454:	900d      	str	r0, [sp, #52]	; 0x34
 8009456:	9805      	ldr	r0, [sp, #20]
 8009458:	9307      	str	r3, [sp, #28]
 800945a:	f000 ff51 	bl	800a300 <__mcmp>
 800945e:	002a      	movs	r2, r5
 8009460:	900e      	str	r0, [sp, #56]	; 0x38
 8009462:	0031      	movs	r1, r6
 8009464:	0038      	movs	r0, r7
 8009466:	f000 ff67 	bl	800a338 <__mdiff>
 800946a:	68c3      	ldr	r3, [r0, #12]
 800946c:	9008      	str	r0, [sp, #32]
 800946e:	9310      	str	r3, [sp, #64]	; 0x40
 8009470:	2301      	movs	r3, #1
 8009472:	930c      	str	r3, [sp, #48]	; 0x30
 8009474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009476:	2b00      	cmp	r3, #0
 8009478:	d104      	bne.n	8009484 <_dtoa_r+0xaa4>
 800947a:	0001      	movs	r1, r0
 800947c:	9805      	ldr	r0, [sp, #20]
 800947e:	f000 ff3f 	bl	800a300 <__mcmp>
 8009482:	900c      	str	r0, [sp, #48]	; 0x30
 8009484:	0038      	movs	r0, r7
 8009486:	9908      	ldr	r1, [sp, #32]
 8009488:	f000 fcae 	bl	8009de8 <_Bfree>
 800948c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800948e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009490:	3301      	adds	r3, #1
 8009492:	9308      	str	r3, [sp, #32]
 8009494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009496:	4313      	orrs	r3, r2
 8009498:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800949a:	4313      	orrs	r3, r2
 800949c:	d10c      	bne.n	80094b8 <_dtoa_r+0xad8>
 800949e:	9b07      	ldr	r3, [sp, #28]
 80094a0:	2b39      	cmp	r3, #57	; 0x39
 80094a2:	d026      	beq.n	80094f2 <_dtoa_r+0xb12>
 80094a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dd02      	ble.n	80094b0 <_dtoa_r+0xad0>
 80094aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ac:	3331      	adds	r3, #49	; 0x31
 80094ae:	9307      	str	r3, [sp, #28]
 80094b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b2:	9a07      	ldr	r2, [sp, #28]
 80094b4:	701a      	strb	r2, [r3, #0]
 80094b6:	e76a      	b.n	800938e <_dtoa_r+0x9ae>
 80094b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	db04      	blt.n	80094c8 <_dtoa_r+0xae8>
 80094be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80094c0:	4313      	orrs	r3, r2
 80094c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094c4:	4313      	orrs	r3, r2
 80094c6:	d11f      	bne.n	8009508 <_dtoa_r+0xb28>
 80094c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	ddf0      	ble.n	80094b0 <_dtoa_r+0xad0>
 80094ce:	9905      	ldr	r1, [sp, #20]
 80094d0:	2201      	movs	r2, #1
 80094d2:	0038      	movs	r0, r7
 80094d4:	f000 fea6 	bl	800a224 <__lshift>
 80094d8:	0031      	movs	r1, r6
 80094da:	9005      	str	r0, [sp, #20]
 80094dc:	f000 ff10 	bl	800a300 <__mcmp>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	dc03      	bgt.n	80094ec <_dtoa_r+0xb0c>
 80094e4:	d1e4      	bne.n	80094b0 <_dtoa_r+0xad0>
 80094e6:	9b07      	ldr	r3, [sp, #28]
 80094e8:	07db      	lsls	r3, r3, #31
 80094ea:	d5e1      	bpl.n	80094b0 <_dtoa_r+0xad0>
 80094ec:	9b07      	ldr	r3, [sp, #28]
 80094ee:	2b39      	cmp	r3, #57	; 0x39
 80094f0:	d1db      	bne.n	80094aa <_dtoa_r+0xaca>
 80094f2:	2339      	movs	r3, #57	; 0x39
 80094f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094f6:	7013      	strb	r3, [r2, #0]
 80094f8:	9b08      	ldr	r3, [sp, #32]
 80094fa:	9308      	str	r3, [sp, #32]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	781a      	ldrb	r2, [r3, #0]
 8009500:	2a39      	cmp	r2, #57	; 0x39
 8009502:	d068      	beq.n	80095d6 <_dtoa_r+0xbf6>
 8009504:	3201      	adds	r2, #1
 8009506:	e7d5      	b.n	80094b4 <_dtoa_r+0xad4>
 8009508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800950a:	2b00      	cmp	r3, #0
 800950c:	dd07      	ble.n	800951e <_dtoa_r+0xb3e>
 800950e:	9b07      	ldr	r3, [sp, #28]
 8009510:	2b39      	cmp	r3, #57	; 0x39
 8009512:	d0ee      	beq.n	80094f2 <_dtoa_r+0xb12>
 8009514:	9b07      	ldr	r3, [sp, #28]
 8009516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009518:	3301      	adds	r3, #1
 800951a:	7013      	strb	r3, [r2, #0]
 800951c:	e737      	b.n	800938e <_dtoa_r+0x9ae>
 800951e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009520:	9a07      	ldr	r2, [sp, #28]
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009528:	4293      	cmp	r3, r2
 800952a:	d03e      	beq.n	80095aa <_dtoa_r+0xbca>
 800952c:	2300      	movs	r3, #0
 800952e:	220a      	movs	r2, #10
 8009530:	9905      	ldr	r1, [sp, #20]
 8009532:	0038      	movs	r0, r7
 8009534:	f000 fc7c 	bl	8009e30 <__multadd>
 8009538:	2300      	movs	r3, #0
 800953a:	9005      	str	r0, [sp, #20]
 800953c:	220a      	movs	r2, #10
 800953e:	0021      	movs	r1, r4
 8009540:	0038      	movs	r0, r7
 8009542:	42ac      	cmp	r4, r5
 8009544:	d106      	bne.n	8009554 <_dtoa_r+0xb74>
 8009546:	f000 fc73 	bl	8009e30 <__multadd>
 800954a:	0004      	movs	r4, r0
 800954c:	0005      	movs	r5, r0
 800954e:	9b08      	ldr	r3, [sp, #32]
 8009550:	930a      	str	r3, [sp, #40]	; 0x28
 8009552:	e778      	b.n	8009446 <_dtoa_r+0xa66>
 8009554:	f000 fc6c 	bl	8009e30 <__multadd>
 8009558:	0029      	movs	r1, r5
 800955a:	0004      	movs	r4, r0
 800955c:	2300      	movs	r3, #0
 800955e:	220a      	movs	r2, #10
 8009560:	0038      	movs	r0, r7
 8009562:	f000 fc65 	bl	8009e30 <__multadd>
 8009566:	0005      	movs	r5, r0
 8009568:	e7f1      	b.n	800954e <_dtoa_r+0xb6e>
 800956a:	9b07      	ldr	r3, [sp, #28]
 800956c:	930c      	str	r3, [sp, #48]	; 0x30
 800956e:	2400      	movs	r4, #0
 8009570:	0031      	movs	r1, r6
 8009572:	9805      	ldr	r0, [sp, #20]
 8009574:	f7ff f9a8 	bl	80088c8 <quorem>
 8009578:	9b06      	ldr	r3, [sp, #24]
 800957a:	3030      	adds	r0, #48	; 0x30
 800957c:	5518      	strb	r0, [r3, r4]
 800957e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009580:	3401      	adds	r4, #1
 8009582:	9007      	str	r0, [sp, #28]
 8009584:	42a3      	cmp	r3, r4
 8009586:	dd07      	ble.n	8009598 <_dtoa_r+0xbb8>
 8009588:	2300      	movs	r3, #0
 800958a:	220a      	movs	r2, #10
 800958c:	0038      	movs	r0, r7
 800958e:	9905      	ldr	r1, [sp, #20]
 8009590:	f000 fc4e 	bl	8009e30 <__multadd>
 8009594:	9005      	str	r0, [sp, #20]
 8009596:	e7eb      	b.n	8009570 <_dtoa_r+0xb90>
 8009598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800959a:	2001      	movs	r0, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	dd00      	ble.n	80095a2 <_dtoa_r+0xbc2>
 80095a0:	0018      	movs	r0, r3
 80095a2:	2400      	movs	r4, #0
 80095a4:	9b06      	ldr	r3, [sp, #24]
 80095a6:	181b      	adds	r3, r3, r0
 80095a8:	9308      	str	r3, [sp, #32]
 80095aa:	9905      	ldr	r1, [sp, #20]
 80095ac:	2201      	movs	r2, #1
 80095ae:	0038      	movs	r0, r7
 80095b0:	f000 fe38 	bl	800a224 <__lshift>
 80095b4:	0031      	movs	r1, r6
 80095b6:	9005      	str	r0, [sp, #20]
 80095b8:	f000 fea2 	bl	800a300 <__mcmp>
 80095bc:	2800      	cmp	r0, #0
 80095be:	dc9b      	bgt.n	80094f8 <_dtoa_r+0xb18>
 80095c0:	d102      	bne.n	80095c8 <_dtoa_r+0xbe8>
 80095c2:	9b07      	ldr	r3, [sp, #28]
 80095c4:	07db      	lsls	r3, r3, #31
 80095c6:	d497      	bmi.n	80094f8 <_dtoa_r+0xb18>
 80095c8:	9b08      	ldr	r3, [sp, #32]
 80095ca:	9308      	str	r3, [sp, #32]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	781a      	ldrb	r2, [r3, #0]
 80095d0:	2a30      	cmp	r2, #48	; 0x30
 80095d2:	d0fa      	beq.n	80095ca <_dtoa_r+0xbea>
 80095d4:	e6db      	b.n	800938e <_dtoa_r+0x9ae>
 80095d6:	9a06      	ldr	r2, [sp, #24]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d18e      	bne.n	80094fa <_dtoa_r+0xb1a>
 80095dc:	9b02      	ldr	r3, [sp, #8]
 80095de:	3301      	adds	r3, #1
 80095e0:	9302      	str	r3, [sp, #8]
 80095e2:	2331      	movs	r3, #49	; 0x31
 80095e4:	e799      	b.n	800951a <_dtoa_r+0xb3a>
 80095e6:	4b09      	ldr	r3, [pc, #36]	; (800960c <_dtoa_r+0xc2c>)
 80095e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095ea:	9306      	str	r3, [sp, #24]
 80095ec:	4b08      	ldr	r3, [pc, #32]	; (8009610 <_dtoa_r+0xc30>)
 80095ee:	2a00      	cmp	r2, #0
 80095f0:	d001      	beq.n	80095f6 <_dtoa_r+0xc16>
 80095f2:	f7ff fa3f 	bl	8008a74 <_dtoa_r+0x94>
 80095f6:	f7ff fa3f 	bl	8008a78 <_dtoa_r+0x98>
 80095fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dcb6      	bgt.n	800956e <_dtoa_r+0xb8e>
 8009600:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009602:	2b02      	cmp	r3, #2
 8009604:	dd00      	ble.n	8009608 <_dtoa_r+0xc28>
 8009606:	e6ac      	b.n	8009362 <_dtoa_r+0x982>
 8009608:	e7b1      	b.n	800956e <_dtoa_r+0xb8e>
 800960a:	46c0      	nop			; (mov r8, r8)
 800960c:	0800b900 	.word	0x0800b900
 8009610:	0800b908 	.word	0x0800b908

08009614 <rshift>:
 8009614:	0002      	movs	r2, r0
 8009616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009618:	6904      	ldr	r4, [r0, #16]
 800961a:	3214      	adds	r2, #20
 800961c:	0013      	movs	r3, r2
 800961e:	b085      	sub	sp, #20
 8009620:	114f      	asrs	r7, r1, #5
 8009622:	42bc      	cmp	r4, r7
 8009624:	dd31      	ble.n	800968a <rshift+0x76>
 8009626:	00bb      	lsls	r3, r7, #2
 8009628:	18d3      	adds	r3, r2, r3
 800962a:	261f      	movs	r6, #31
 800962c:	9301      	str	r3, [sp, #4]
 800962e:	000b      	movs	r3, r1
 8009630:	00a5      	lsls	r5, r4, #2
 8009632:	4033      	ands	r3, r6
 8009634:	1955      	adds	r5, r2, r5
 8009636:	9302      	str	r3, [sp, #8]
 8009638:	4231      	tst	r1, r6
 800963a:	d10c      	bne.n	8009656 <rshift+0x42>
 800963c:	0016      	movs	r6, r2
 800963e:	9901      	ldr	r1, [sp, #4]
 8009640:	428d      	cmp	r5, r1
 8009642:	d838      	bhi.n	80096b6 <rshift+0xa2>
 8009644:	9901      	ldr	r1, [sp, #4]
 8009646:	2300      	movs	r3, #0
 8009648:	3903      	subs	r1, #3
 800964a:	428d      	cmp	r5, r1
 800964c:	d301      	bcc.n	8009652 <rshift+0x3e>
 800964e:	1be3      	subs	r3, r4, r7
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	18d3      	adds	r3, r2, r3
 8009654:	e019      	b.n	800968a <rshift+0x76>
 8009656:	2120      	movs	r1, #32
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	9e01      	ldr	r6, [sp, #4]
 800965c:	1acb      	subs	r3, r1, r3
 800965e:	9303      	str	r3, [sp, #12]
 8009660:	ce02      	ldmia	r6!, {r1}
 8009662:	9b02      	ldr	r3, [sp, #8]
 8009664:	4694      	mov	ip, r2
 8009666:	40d9      	lsrs	r1, r3
 8009668:	9100      	str	r1, [sp, #0]
 800966a:	42b5      	cmp	r5, r6
 800966c:	d816      	bhi.n	800969c <rshift+0x88>
 800966e:	9e01      	ldr	r6, [sp, #4]
 8009670:	2300      	movs	r3, #0
 8009672:	3601      	adds	r6, #1
 8009674:	42b5      	cmp	r5, r6
 8009676:	d302      	bcc.n	800967e <rshift+0x6a>
 8009678:	1be3      	subs	r3, r4, r7
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	3b04      	subs	r3, #4
 800967e:	9900      	ldr	r1, [sp, #0]
 8009680:	18d3      	adds	r3, r2, r3
 8009682:	6019      	str	r1, [r3, #0]
 8009684:	2900      	cmp	r1, #0
 8009686:	d000      	beq.n	800968a <rshift+0x76>
 8009688:	3304      	adds	r3, #4
 800968a:	1a99      	subs	r1, r3, r2
 800968c:	1089      	asrs	r1, r1, #2
 800968e:	6101      	str	r1, [r0, #16]
 8009690:	4293      	cmp	r3, r2
 8009692:	d101      	bne.n	8009698 <rshift+0x84>
 8009694:	2300      	movs	r3, #0
 8009696:	6143      	str	r3, [r0, #20]
 8009698:	b005      	add	sp, #20
 800969a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800969c:	6833      	ldr	r3, [r6, #0]
 800969e:	9903      	ldr	r1, [sp, #12]
 80096a0:	408b      	lsls	r3, r1
 80096a2:	9900      	ldr	r1, [sp, #0]
 80096a4:	4319      	orrs	r1, r3
 80096a6:	4663      	mov	r3, ip
 80096a8:	c302      	stmia	r3!, {r1}
 80096aa:	469c      	mov	ip, r3
 80096ac:	ce02      	ldmia	r6!, {r1}
 80096ae:	9b02      	ldr	r3, [sp, #8]
 80096b0:	40d9      	lsrs	r1, r3
 80096b2:	9100      	str	r1, [sp, #0]
 80096b4:	e7d9      	b.n	800966a <rshift+0x56>
 80096b6:	c908      	ldmia	r1!, {r3}
 80096b8:	c608      	stmia	r6!, {r3}
 80096ba:	e7c1      	b.n	8009640 <rshift+0x2c>

080096bc <__hexdig_fun>:
 80096bc:	0002      	movs	r2, r0
 80096be:	3a30      	subs	r2, #48	; 0x30
 80096c0:	0003      	movs	r3, r0
 80096c2:	2a09      	cmp	r2, #9
 80096c4:	d802      	bhi.n	80096cc <__hexdig_fun+0x10>
 80096c6:	3b20      	subs	r3, #32
 80096c8:	b2d8      	uxtb	r0, r3
 80096ca:	4770      	bx	lr
 80096cc:	0002      	movs	r2, r0
 80096ce:	3a61      	subs	r2, #97	; 0x61
 80096d0:	2a05      	cmp	r2, #5
 80096d2:	d801      	bhi.n	80096d8 <__hexdig_fun+0x1c>
 80096d4:	3b47      	subs	r3, #71	; 0x47
 80096d6:	e7f7      	b.n	80096c8 <__hexdig_fun+0xc>
 80096d8:	001a      	movs	r2, r3
 80096da:	3a41      	subs	r2, #65	; 0x41
 80096dc:	2000      	movs	r0, #0
 80096de:	2a05      	cmp	r2, #5
 80096e0:	d8f3      	bhi.n	80096ca <__hexdig_fun+0xe>
 80096e2:	3b27      	subs	r3, #39	; 0x27
 80096e4:	e7f0      	b.n	80096c8 <__hexdig_fun+0xc>
	...

080096e8 <__gethex>:
 80096e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ea:	b08d      	sub	sp, #52	; 0x34
 80096ec:	930a      	str	r3, [sp, #40]	; 0x28
 80096ee:	4bbf      	ldr	r3, [pc, #764]	; (80099ec <__gethex+0x304>)
 80096f0:	9005      	str	r0, [sp, #20]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	9109      	str	r1, [sp, #36]	; 0x24
 80096f6:	0018      	movs	r0, r3
 80096f8:	9202      	str	r2, [sp, #8]
 80096fa:	9307      	str	r3, [sp, #28]
 80096fc:	f7f6 fd02 	bl	8000104 <strlen>
 8009700:	2202      	movs	r2, #2
 8009702:	9b07      	ldr	r3, [sp, #28]
 8009704:	4252      	negs	r2, r2
 8009706:	181b      	adds	r3, r3, r0
 8009708:	3b01      	subs	r3, #1
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	9003      	str	r0, [sp, #12]
 800970e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009712:	6819      	ldr	r1, [r3, #0]
 8009714:	1c8b      	adds	r3, r1, #2
 8009716:	1a52      	subs	r2, r2, r1
 8009718:	18d1      	adds	r1, r2, r3
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	9108      	str	r1, [sp, #32]
 800971e:	9901      	ldr	r1, [sp, #4]
 8009720:	3301      	adds	r3, #1
 8009722:	7808      	ldrb	r0, [r1, #0]
 8009724:	2830      	cmp	r0, #48	; 0x30
 8009726:	d0f7      	beq.n	8009718 <__gethex+0x30>
 8009728:	f7ff ffc8 	bl	80096bc <__hexdig_fun>
 800972c:	2300      	movs	r3, #0
 800972e:	001c      	movs	r4, r3
 8009730:	9304      	str	r3, [sp, #16]
 8009732:	4298      	cmp	r0, r3
 8009734:	d11f      	bne.n	8009776 <__gethex+0x8e>
 8009736:	9a03      	ldr	r2, [sp, #12]
 8009738:	9907      	ldr	r1, [sp, #28]
 800973a:	9801      	ldr	r0, [sp, #4]
 800973c:	f001 f96e 	bl	800aa1c <strncmp>
 8009740:	0007      	movs	r7, r0
 8009742:	42a0      	cmp	r0, r4
 8009744:	d000      	beq.n	8009748 <__gethex+0x60>
 8009746:	e06b      	b.n	8009820 <__gethex+0x138>
 8009748:	9b01      	ldr	r3, [sp, #4]
 800974a:	9a03      	ldr	r2, [sp, #12]
 800974c:	5c98      	ldrb	r0, [r3, r2]
 800974e:	189d      	adds	r5, r3, r2
 8009750:	f7ff ffb4 	bl	80096bc <__hexdig_fun>
 8009754:	2301      	movs	r3, #1
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	42a0      	cmp	r0, r4
 800975a:	d030      	beq.n	80097be <__gethex+0xd6>
 800975c:	9501      	str	r5, [sp, #4]
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	7818      	ldrb	r0, [r3, #0]
 8009762:	2830      	cmp	r0, #48	; 0x30
 8009764:	d009      	beq.n	800977a <__gethex+0x92>
 8009766:	f7ff ffa9 	bl	80096bc <__hexdig_fun>
 800976a:	4242      	negs	r2, r0
 800976c:	4142      	adcs	r2, r0
 800976e:	2301      	movs	r3, #1
 8009770:	002c      	movs	r4, r5
 8009772:	9204      	str	r2, [sp, #16]
 8009774:	9308      	str	r3, [sp, #32]
 8009776:	9d01      	ldr	r5, [sp, #4]
 8009778:	e004      	b.n	8009784 <__gethex+0x9c>
 800977a:	9b01      	ldr	r3, [sp, #4]
 800977c:	3301      	adds	r3, #1
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	e7ed      	b.n	800975e <__gethex+0x76>
 8009782:	3501      	adds	r5, #1
 8009784:	7828      	ldrb	r0, [r5, #0]
 8009786:	f7ff ff99 	bl	80096bc <__hexdig_fun>
 800978a:	1e07      	subs	r7, r0, #0
 800978c:	d1f9      	bne.n	8009782 <__gethex+0x9a>
 800978e:	0028      	movs	r0, r5
 8009790:	9a03      	ldr	r2, [sp, #12]
 8009792:	9907      	ldr	r1, [sp, #28]
 8009794:	f001 f942 	bl	800aa1c <strncmp>
 8009798:	2800      	cmp	r0, #0
 800979a:	d10e      	bne.n	80097ba <__gethex+0xd2>
 800979c:	2c00      	cmp	r4, #0
 800979e:	d107      	bne.n	80097b0 <__gethex+0xc8>
 80097a0:	9b03      	ldr	r3, [sp, #12]
 80097a2:	18ed      	adds	r5, r5, r3
 80097a4:	002c      	movs	r4, r5
 80097a6:	7828      	ldrb	r0, [r5, #0]
 80097a8:	f7ff ff88 	bl	80096bc <__hexdig_fun>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d102      	bne.n	80097b6 <__gethex+0xce>
 80097b0:	1b64      	subs	r4, r4, r5
 80097b2:	00a7      	lsls	r7, r4, #2
 80097b4:	e003      	b.n	80097be <__gethex+0xd6>
 80097b6:	3501      	adds	r5, #1
 80097b8:	e7f5      	b.n	80097a6 <__gethex+0xbe>
 80097ba:	2c00      	cmp	r4, #0
 80097bc:	d1f8      	bne.n	80097b0 <__gethex+0xc8>
 80097be:	2220      	movs	r2, #32
 80097c0:	782b      	ldrb	r3, [r5, #0]
 80097c2:	002e      	movs	r6, r5
 80097c4:	4393      	bics	r3, r2
 80097c6:	2b50      	cmp	r3, #80	; 0x50
 80097c8:	d11d      	bne.n	8009806 <__gethex+0x11e>
 80097ca:	786b      	ldrb	r3, [r5, #1]
 80097cc:	2b2b      	cmp	r3, #43	; 0x2b
 80097ce:	d02c      	beq.n	800982a <__gethex+0x142>
 80097d0:	2b2d      	cmp	r3, #45	; 0x2d
 80097d2:	d02e      	beq.n	8009832 <__gethex+0x14a>
 80097d4:	2300      	movs	r3, #0
 80097d6:	1c6e      	adds	r6, r5, #1
 80097d8:	9306      	str	r3, [sp, #24]
 80097da:	7830      	ldrb	r0, [r6, #0]
 80097dc:	f7ff ff6e 	bl	80096bc <__hexdig_fun>
 80097e0:	1e43      	subs	r3, r0, #1
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b18      	cmp	r3, #24
 80097e6:	d82b      	bhi.n	8009840 <__gethex+0x158>
 80097e8:	3810      	subs	r0, #16
 80097ea:	0004      	movs	r4, r0
 80097ec:	7870      	ldrb	r0, [r6, #1]
 80097ee:	f7ff ff65 	bl	80096bc <__hexdig_fun>
 80097f2:	1e43      	subs	r3, r0, #1
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	3601      	adds	r6, #1
 80097f8:	2b18      	cmp	r3, #24
 80097fa:	d91c      	bls.n	8009836 <__gethex+0x14e>
 80097fc:	9b06      	ldr	r3, [sp, #24]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d000      	beq.n	8009804 <__gethex+0x11c>
 8009802:	4264      	negs	r4, r4
 8009804:	193f      	adds	r7, r7, r4
 8009806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009808:	601e      	str	r6, [r3, #0]
 800980a:	9b04      	ldr	r3, [sp, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d019      	beq.n	8009844 <__gethex+0x15c>
 8009810:	2600      	movs	r6, #0
 8009812:	9b08      	ldr	r3, [sp, #32]
 8009814:	42b3      	cmp	r3, r6
 8009816:	d100      	bne.n	800981a <__gethex+0x132>
 8009818:	3606      	adds	r6, #6
 800981a:	0030      	movs	r0, r6
 800981c:	b00d      	add	sp, #52	; 0x34
 800981e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009820:	2301      	movs	r3, #1
 8009822:	2700      	movs	r7, #0
 8009824:	9d01      	ldr	r5, [sp, #4]
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	e7c9      	b.n	80097be <__gethex+0xd6>
 800982a:	2300      	movs	r3, #0
 800982c:	9306      	str	r3, [sp, #24]
 800982e:	1cae      	adds	r6, r5, #2
 8009830:	e7d3      	b.n	80097da <__gethex+0xf2>
 8009832:	2301      	movs	r3, #1
 8009834:	e7fa      	b.n	800982c <__gethex+0x144>
 8009836:	230a      	movs	r3, #10
 8009838:	435c      	muls	r4, r3
 800983a:	1824      	adds	r4, r4, r0
 800983c:	3c10      	subs	r4, #16
 800983e:	e7d5      	b.n	80097ec <__gethex+0x104>
 8009840:	002e      	movs	r6, r5
 8009842:	e7e0      	b.n	8009806 <__gethex+0x11e>
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	9904      	ldr	r1, [sp, #16]
 8009848:	1aeb      	subs	r3, r5, r3
 800984a:	3b01      	subs	r3, #1
 800984c:	2b07      	cmp	r3, #7
 800984e:	dc0a      	bgt.n	8009866 <__gethex+0x17e>
 8009850:	9805      	ldr	r0, [sp, #20]
 8009852:	f000 fa85 	bl	8009d60 <_Balloc>
 8009856:	1e04      	subs	r4, r0, #0
 8009858:	d108      	bne.n	800986c <__gethex+0x184>
 800985a:	0002      	movs	r2, r0
 800985c:	21de      	movs	r1, #222	; 0xde
 800985e:	4b64      	ldr	r3, [pc, #400]	; (80099f0 <__gethex+0x308>)
 8009860:	4864      	ldr	r0, [pc, #400]	; (80099f4 <__gethex+0x30c>)
 8009862:	f001 f8fb 	bl	800aa5c <__assert_func>
 8009866:	3101      	adds	r1, #1
 8009868:	105b      	asrs	r3, r3, #1
 800986a:	e7ef      	b.n	800984c <__gethex+0x164>
 800986c:	0003      	movs	r3, r0
 800986e:	3314      	adds	r3, #20
 8009870:	9304      	str	r3, [sp, #16]
 8009872:	9309      	str	r3, [sp, #36]	; 0x24
 8009874:	2300      	movs	r3, #0
 8009876:	001e      	movs	r6, r3
 8009878:	9306      	str	r3, [sp, #24]
 800987a:	9b01      	ldr	r3, [sp, #4]
 800987c:	42ab      	cmp	r3, r5
 800987e:	d340      	bcc.n	8009902 <__gethex+0x21a>
 8009880:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009882:	9b04      	ldr	r3, [sp, #16]
 8009884:	c540      	stmia	r5!, {r6}
 8009886:	1aed      	subs	r5, r5, r3
 8009888:	10ad      	asrs	r5, r5, #2
 800988a:	0030      	movs	r0, r6
 800988c:	6125      	str	r5, [r4, #16]
 800988e:	f000 fb5f 	bl	8009f50 <__hi0bits>
 8009892:	9b02      	ldr	r3, [sp, #8]
 8009894:	016d      	lsls	r5, r5, #5
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	1a2e      	subs	r6, r5, r0
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	429e      	cmp	r6, r3
 800989e:	dd5a      	ble.n	8009956 <__gethex+0x26e>
 80098a0:	1af6      	subs	r6, r6, r3
 80098a2:	0031      	movs	r1, r6
 80098a4:	0020      	movs	r0, r4
 80098a6:	f000 ff01 	bl	800a6ac <__any_on>
 80098aa:	1e05      	subs	r5, r0, #0
 80098ac:	d016      	beq.n	80098dc <__gethex+0x1f4>
 80098ae:	2501      	movs	r5, #1
 80098b0:	211f      	movs	r1, #31
 80098b2:	0028      	movs	r0, r5
 80098b4:	1e73      	subs	r3, r6, #1
 80098b6:	4019      	ands	r1, r3
 80098b8:	4088      	lsls	r0, r1
 80098ba:	0001      	movs	r1, r0
 80098bc:	115a      	asrs	r2, r3, #5
 80098be:	9804      	ldr	r0, [sp, #16]
 80098c0:	0092      	lsls	r2, r2, #2
 80098c2:	5812      	ldr	r2, [r2, r0]
 80098c4:	420a      	tst	r2, r1
 80098c6:	d009      	beq.n	80098dc <__gethex+0x1f4>
 80098c8:	42ab      	cmp	r3, r5
 80098ca:	dd06      	ble.n	80098da <__gethex+0x1f2>
 80098cc:	0020      	movs	r0, r4
 80098ce:	1eb1      	subs	r1, r6, #2
 80098d0:	f000 feec 	bl	800a6ac <__any_on>
 80098d4:	3502      	adds	r5, #2
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d100      	bne.n	80098dc <__gethex+0x1f4>
 80098da:	2502      	movs	r5, #2
 80098dc:	0031      	movs	r1, r6
 80098de:	0020      	movs	r0, r4
 80098e0:	f7ff fe98 	bl	8009614 <rshift>
 80098e4:	19bf      	adds	r7, r7, r6
 80098e6:	9b02      	ldr	r3, [sp, #8]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	9303      	str	r3, [sp, #12]
 80098ec:	42bb      	cmp	r3, r7
 80098ee:	da42      	bge.n	8009976 <__gethex+0x28e>
 80098f0:	0021      	movs	r1, r4
 80098f2:	9805      	ldr	r0, [sp, #20]
 80098f4:	f000 fa78 	bl	8009de8 <_Bfree>
 80098f8:	2300      	movs	r3, #0
 80098fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098fc:	26a3      	movs	r6, #163	; 0xa3
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	e78b      	b.n	800981a <__gethex+0x132>
 8009902:	1e6b      	subs	r3, r5, #1
 8009904:	9308      	str	r3, [sp, #32]
 8009906:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	4293      	cmp	r3, r2
 800990c:	d014      	beq.n	8009938 <__gethex+0x250>
 800990e:	9b06      	ldr	r3, [sp, #24]
 8009910:	2b20      	cmp	r3, #32
 8009912:	d104      	bne.n	800991e <__gethex+0x236>
 8009914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009916:	c340      	stmia	r3!, {r6}
 8009918:	2600      	movs	r6, #0
 800991a:	9309      	str	r3, [sp, #36]	; 0x24
 800991c:	9606      	str	r6, [sp, #24]
 800991e:	9b08      	ldr	r3, [sp, #32]
 8009920:	7818      	ldrb	r0, [r3, #0]
 8009922:	f7ff fecb 	bl	80096bc <__hexdig_fun>
 8009926:	230f      	movs	r3, #15
 8009928:	4018      	ands	r0, r3
 800992a:	9b06      	ldr	r3, [sp, #24]
 800992c:	9d08      	ldr	r5, [sp, #32]
 800992e:	4098      	lsls	r0, r3
 8009930:	3304      	adds	r3, #4
 8009932:	4306      	orrs	r6, r0
 8009934:	9306      	str	r3, [sp, #24]
 8009936:	e7a0      	b.n	800987a <__gethex+0x192>
 8009938:	2301      	movs	r3, #1
 800993a:	9a03      	ldr	r2, [sp, #12]
 800993c:	1a9d      	subs	r5, r3, r2
 800993e:	9b08      	ldr	r3, [sp, #32]
 8009940:	195d      	adds	r5, r3, r5
 8009942:	9b01      	ldr	r3, [sp, #4]
 8009944:	429d      	cmp	r5, r3
 8009946:	d3e2      	bcc.n	800990e <__gethex+0x226>
 8009948:	0028      	movs	r0, r5
 800994a:	9907      	ldr	r1, [sp, #28]
 800994c:	f001 f866 	bl	800aa1c <strncmp>
 8009950:	2800      	cmp	r0, #0
 8009952:	d1dc      	bne.n	800990e <__gethex+0x226>
 8009954:	e791      	b.n	800987a <__gethex+0x192>
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	2500      	movs	r5, #0
 800995a:	429e      	cmp	r6, r3
 800995c:	dac3      	bge.n	80098e6 <__gethex+0x1fe>
 800995e:	1b9e      	subs	r6, r3, r6
 8009960:	0021      	movs	r1, r4
 8009962:	0032      	movs	r2, r6
 8009964:	9805      	ldr	r0, [sp, #20]
 8009966:	f000 fc5d 	bl	800a224 <__lshift>
 800996a:	0003      	movs	r3, r0
 800996c:	3314      	adds	r3, #20
 800996e:	0004      	movs	r4, r0
 8009970:	1bbf      	subs	r7, r7, r6
 8009972:	9304      	str	r3, [sp, #16]
 8009974:	e7b7      	b.n	80098e6 <__gethex+0x1fe>
 8009976:	9b02      	ldr	r3, [sp, #8]
 8009978:	685e      	ldr	r6, [r3, #4]
 800997a:	42be      	cmp	r6, r7
 800997c:	dd71      	ble.n	8009a62 <__gethex+0x37a>
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	1bf6      	subs	r6, r6, r7
 8009982:	42b3      	cmp	r3, r6
 8009984:	dc38      	bgt.n	80099f8 <__gethex+0x310>
 8009986:	9b02      	ldr	r3, [sp, #8]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	2b02      	cmp	r3, #2
 800998c:	d026      	beq.n	80099dc <__gethex+0x2f4>
 800998e:	2b03      	cmp	r3, #3
 8009990:	d028      	beq.n	80099e4 <__gethex+0x2fc>
 8009992:	2b01      	cmp	r3, #1
 8009994:	d119      	bne.n	80099ca <__gethex+0x2e2>
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	42b3      	cmp	r3, r6
 800999a:	d116      	bne.n	80099ca <__gethex+0x2e2>
 800999c:	2b01      	cmp	r3, #1
 800999e:	d10d      	bne.n	80099bc <__gethex+0x2d4>
 80099a0:	9b02      	ldr	r3, [sp, #8]
 80099a2:	2662      	movs	r6, #98	; 0x62
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	9301      	str	r3, [sp, #4]
 80099a8:	9a01      	ldr	r2, [sp, #4]
 80099aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	2301      	movs	r3, #1
 80099b0:	9a04      	ldr	r2, [sp, #16]
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099b8:	601c      	str	r4, [r3, #0]
 80099ba:	e72e      	b.n	800981a <__gethex+0x132>
 80099bc:	9901      	ldr	r1, [sp, #4]
 80099be:	0020      	movs	r0, r4
 80099c0:	3901      	subs	r1, #1
 80099c2:	f000 fe73 	bl	800a6ac <__any_on>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d1ea      	bne.n	80099a0 <__gethex+0x2b8>
 80099ca:	0021      	movs	r1, r4
 80099cc:	9805      	ldr	r0, [sp, #20]
 80099ce:	f000 fa0b 	bl	8009de8 <_Bfree>
 80099d2:	2300      	movs	r3, #0
 80099d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099d6:	2650      	movs	r6, #80	; 0x50
 80099d8:	6013      	str	r3, [r2, #0]
 80099da:	e71e      	b.n	800981a <__gethex+0x132>
 80099dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1f3      	bne.n	80099ca <__gethex+0x2e2>
 80099e2:	e7dd      	b.n	80099a0 <__gethex+0x2b8>
 80099e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1da      	bne.n	80099a0 <__gethex+0x2b8>
 80099ea:	e7ee      	b.n	80099ca <__gethex+0x2e2>
 80099ec:	0800b9f8 	.word	0x0800b9f8
 80099f0:	0800b97f 	.word	0x0800b97f
 80099f4:	0800b990 	.word	0x0800b990
 80099f8:	1e77      	subs	r7, r6, #1
 80099fa:	2d00      	cmp	r5, #0
 80099fc:	d12f      	bne.n	8009a5e <__gethex+0x376>
 80099fe:	2f00      	cmp	r7, #0
 8009a00:	d004      	beq.n	8009a0c <__gethex+0x324>
 8009a02:	0039      	movs	r1, r7
 8009a04:	0020      	movs	r0, r4
 8009a06:	f000 fe51 	bl	800a6ac <__any_on>
 8009a0a:	0005      	movs	r5, r0
 8009a0c:	231f      	movs	r3, #31
 8009a0e:	117a      	asrs	r2, r7, #5
 8009a10:	401f      	ands	r7, r3
 8009a12:	3b1e      	subs	r3, #30
 8009a14:	40bb      	lsls	r3, r7
 8009a16:	9904      	ldr	r1, [sp, #16]
 8009a18:	0092      	lsls	r2, r2, #2
 8009a1a:	5852      	ldr	r2, [r2, r1]
 8009a1c:	421a      	tst	r2, r3
 8009a1e:	d001      	beq.n	8009a24 <__gethex+0x33c>
 8009a20:	2302      	movs	r3, #2
 8009a22:	431d      	orrs	r5, r3
 8009a24:	9b01      	ldr	r3, [sp, #4]
 8009a26:	0031      	movs	r1, r6
 8009a28:	1b9b      	subs	r3, r3, r6
 8009a2a:	2602      	movs	r6, #2
 8009a2c:	0020      	movs	r0, r4
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	f7ff fdf0 	bl	8009614 <rshift>
 8009a34:	9b02      	ldr	r3, [sp, #8]
 8009a36:	685f      	ldr	r7, [r3, #4]
 8009a38:	2d00      	cmp	r5, #0
 8009a3a:	d041      	beq.n	8009ac0 <__gethex+0x3d8>
 8009a3c:	9b02      	ldr	r3, [sp, #8]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d010      	beq.n	8009a66 <__gethex+0x37e>
 8009a44:	2b03      	cmp	r3, #3
 8009a46:	d012      	beq.n	8009a6e <__gethex+0x386>
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d106      	bne.n	8009a5a <__gethex+0x372>
 8009a4c:	07aa      	lsls	r2, r5, #30
 8009a4e:	d504      	bpl.n	8009a5a <__gethex+0x372>
 8009a50:	9a04      	ldr	r2, [sp, #16]
 8009a52:	6810      	ldr	r0, [r2, #0]
 8009a54:	4305      	orrs	r5, r0
 8009a56:	421d      	tst	r5, r3
 8009a58:	d10c      	bne.n	8009a74 <__gethex+0x38c>
 8009a5a:	2310      	movs	r3, #16
 8009a5c:	e02f      	b.n	8009abe <__gethex+0x3d6>
 8009a5e:	2501      	movs	r5, #1
 8009a60:	e7d4      	b.n	8009a0c <__gethex+0x324>
 8009a62:	2601      	movs	r6, #1
 8009a64:	e7e8      	b.n	8009a38 <__gethex+0x350>
 8009a66:	2301      	movs	r3, #1
 8009a68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a6a:	1a9b      	subs	r3, r3, r2
 8009a6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0f2      	beq.n	8009a5a <__gethex+0x372>
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	2000      	movs	r0, #0
 8009a78:	9303      	str	r3, [sp, #12]
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	0023      	movs	r3, r4
 8009a80:	9a04      	ldr	r2, [sp, #16]
 8009a82:	3314      	adds	r3, #20
 8009a84:	1899      	adds	r1, r3, r2
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	1c55      	adds	r5, r2, #1
 8009a8a:	d01e      	beq.n	8009aca <__gethex+0x3e2>
 8009a8c:	3201      	adds	r2, #1
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	0023      	movs	r3, r4
 8009a92:	3314      	adds	r3, #20
 8009a94:	2e02      	cmp	r6, #2
 8009a96:	d140      	bne.n	8009b1a <__gethex+0x432>
 8009a98:	9a02      	ldr	r2, [sp, #8]
 8009a9a:	9901      	ldr	r1, [sp, #4]
 8009a9c:	6812      	ldr	r2, [r2, #0]
 8009a9e:	3a01      	subs	r2, #1
 8009aa0:	428a      	cmp	r2, r1
 8009aa2:	d10b      	bne.n	8009abc <__gethex+0x3d4>
 8009aa4:	114a      	asrs	r2, r1, #5
 8009aa6:	211f      	movs	r1, #31
 8009aa8:	9801      	ldr	r0, [sp, #4]
 8009aaa:	0092      	lsls	r2, r2, #2
 8009aac:	4001      	ands	r1, r0
 8009aae:	2001      	movs	r0, #1
 8009ab0:	0005      	movs	r5, r0
 8009ab2:	408d      	lsls	r5, r1
 8009ab4:	58d3      	ldr	r3, [r2, r3]
 8009ab6:	422b      	tst	r3, r5
 8009ab8:	d000      	beq.n	8009abc <__gethex+0x3d4>
 8009aba:	2601      	movs	r6, #1
 8009abc:	2320      	movs	r3, #32
 8009abe:	431e      	orrs	r6, r3
 8009ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ac2:	601c      	str	r4, [r3, #0]
 8009ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac6:	601f      	str	r7, [r3, #0]
 8009ac8:	e6a7      	b.n	800981a <__gethex+0x132>
 8009aca:	c301      	stmia	r3!, {r0}
 8009acc:	4299      	cmp	r1, r3
 8009ace:	d8da      	bhi.n	8009a86 <__gethex+0x39e>
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	68a2      	ldr	r2, [r4, #8]
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	db17      	blt.n	8009b08 <__gethex+0x420>
 8009ad8:	6863      	ldr	r3, [r4, #4]
 8009ada:	9805      	ldr	r0, [sp, #20]
 8009adc:	1c59      	adds	r1, r3, #1
 8009ade:	f000 f93f 	bl	8009d60 <_Balloc>
 8009ae2:	1e05      	subs	r5, r0, #0
 8009ae4:	d103      	bne.n	8009aee <__gethex+0x406>
 8009ae6:	0002      	movs	r2, r0
 8009ae8:	2184      	movs	r1, #132	; 0x84
 8009aea:	4b1c      	ldr	r3, [pc, #112]	; (8009b5c <__gethex+0x474>)
 8009aec:	e6b8      	b.n	8009860 <__gethex+0x178>
 8009aee:	0021      	movs	r1, r4
 8009af0:	6923      	ldr	r3, [r4, #16]
 8009af2:	310c      	adds	r1, #12
 8009af4:	1c9a      	adds	r2, r3, #2
 8009af6:	0092      	lsls	r2, r2, #2
 8009af8:	300c      	adds	r0, #12
 8009afa:	f7fd f87f 	bl	8006bfc <memcpy>
 8009afe:	0021      	movs	r1, r4
 8009b00:	9805      	ldr	r0, [sp, #20]
 8009b02:	f000 f971 	bl	8009de8 <_Bfree>
 8009b06:	002c      	movs	r4, r5
 8009b08:	6923      	ldr	r3, [r4, #16]
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	6122      	str	r2, [r4, #16]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	3304      	adds	r3, #4
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	18e3      	adds	r3, r4, r3
 8009b16:	605a      	str	r2, [r3, #4]
 8009b18:	e7ba      	b.n	8009a90 <__gethex+0x3a8>
 8009b1a:	6922      	ldr	r2, [r4, #16]
 8009b1c:	9903      	ldr	r1, [sp, #12]
 8009b1e:	428a      	cmp	r2, r1
 8009b20:	dd09      	ble.n	8009b36 <__gethex+0x44e>
 8009b22:	2101      	movs	r1, #1
 8009b24:	0020      	movs	r0, r4
 8009b26:	f7ff fd75 	bl	8009614 <rshift>
 8009b2a:	9b02      	ldr	r3, [sp, #8]
 8009b2c:	3701      	adds	r7, #1
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	42bb      	cmp	r3, r7
 8009b32:	dac2      	bge.n	8009aba <__gethex+0x3d2>
 8009b34:	e6dc      	b.n	80098f0 <__gethex+0x208>
 8009b36:	221f      	movs	r2, #31
 8009b38:	9d01      	ldr	r5, [sp, #4]
 8009b3a:	9901      	ldr	r1, [sp, #4]
 8009b3c:	2601      	movs	r6, #1
 8009b3e:	4015      	ands	r5, r2
 8009b40:	4211      	tst	r1, r2
 8009b42:	d0bb      	beq.n	8009abc <__gethex+0x3d4>
 8009b44:	9a04      	ldr	r2, [sp, #16]
 8009b46:	189b      	adds	r3, r3, r2
 8009b48:	3b04      	subs	r3, #4
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	f000 fa00 	bl	8009f50 <__hi0bits>
 8009b50:	2320      	movs	r3, #32
 8009b52:	1b5d      	subs	r5, r3, r5
 8009b54:	42a8      	cmp	r0, r5
 8009b56:	dbe4      	blt.n	8009b22 <__gethex+0x43a>
 8009b58:	e7b0      	b.n	8009abc <__gethex+0x3d4>
 8009b5a:	46c0      	nop			; (mov r8, r8)
 8009b5c:	0800b97f 	.word	0x0800b97f

08009b60 <L_shift>:
 8009b60:	2308      	movs	r3, #8
 8009b62:	b570      	push	{r4, r5, r6, lr}
 8009b64:	2520      	movs	r5, #32
 8009b66:	1a9a      	subs	r2, r3, r2
 8009b68:	0092      	lsls	r2, r2, #2
 8009b6a:	1aad      	subs	r5, r5, r2
 8009b6c:	6843      	ldr	r3, [r0, #4]
 8009b6e:	6806      	ldr	r6, [r0, #0]
 8009b70:	001c      	movs	r4, r3
 8009b72:	40ac      	lsls	r4, r5
 8009b74:	40d3      	lsrs	r3, r2
 8009b76:	4334      	orrs	r4, r6
 8009b78:	6004      	str	r4, [r0, #0]
 8009b7a:	6043      	str	r3, [r0, #4]
 8009b7c:	3004      	adds	r0, #4
 8009b7e:	4288      	cmp	r0, r1
 8009b80:	d3f4      	bcc.n	8009b6c <L_shift+0xc>
 8009b82:	bd70      	pop	{r4, r5, r6, pc}

08009b84 <__match>:
 8009b84:	b530      	push	{r4, r5, lr}
 8009b86:	6803      	ldr	r3, [r0, #0]
 8009b88:	780c      	ldrb	r4, [r1, #0]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	2c00      	cmp	r4, #0
 8009b8e:	d102      	bne.n	8009b96 <__match+0x12>
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	2001      	movs	r0, #1
 8009b94:	bd30      	pop	{r4, r5, pc}
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	0015      	movs	r5, r2
 8009b9a:	3d41      	subs	r5, #65	; 0x41
 8009b9c:	2d19      	cmp	r5, #25
 8009b9e:	d800      	bhi.n	8009ba2 <__match+0x1e>
 8009ba0:	3220      	adds	r2, #32
 8009ba2:	3101      	adds	r1, #1
 8009ba4:	42a2      	cmp	r2, r4
 8009ba6:	d0ef      	beq.n	8009b88 <__match+0x4>
 8009ba8:	2000      	movs	r0, #0
 8009baa:	e7f3      	b.n	8009b94 <__match+0x10>

08009bac <__hexnan>:
 8009bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bae:	680b      	ldr	r3, [r1, #0]
 8009bb0:	b08b      	sub	sp, #44	; 0x2c
 8009bb2:	9201      	str	r2, [sp, #4]
 8009bb4:	9901      	ldr	r1, [sp, #4]
 8009bb6:	115a      	asrs	r2, r3, #5
 8009bb8:	0092      	lsls	r2, r2, #2
 8009bba:	188a      	adds	r2, r1, r2
 8009bbc:	9202      	str	r2, [sp, #8]
 8009bbe:	0019      	movs	r1, r3
 8009bc0:	221f      	movs	r2, #31
 8009bc2:	4011      	ands	r1, r2
 8009bc4:	9008      	str	r0, [sp, #32]
 8009bc6:	9106      	str	r1, [sp, #24]
 8009bc8:	4213      	tst	r3, r2
 8009bca:	d002      	beq.n	8009bd2 <__hexnan+0x26>
 8009bcc:	9b02      	ldr	r3, [sp, #8]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	9302      	str	r3, [sp, #8]
 8009bd2:	9b02      	ldr	r3, [sp, #8]
 8009bd4:	2500      	movs	r5, #0
 8009bd6:	1f1e      	subs	r6, r3, #4
 8009bd8:	0037      	movs	r7, r6
 8009bda:	0034      	movs	r4, r6
 8009bdc:	9b08      	ldr	r3, [sp, #32]
 8009bde:	6035      	str	r5, [r6, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	9507      	str	r5, [sp, #28]
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	9503      	str	r5, [sp, #12]
 8009be8:	9b05      	ldr	r3, [sp, #20]
 8009bea:	3301      	adds	r3, #1
 8009bec:	9309      	str	r3, [sp, #36]	; 0x24
 8009bee:	9b05      	ldr	r3, [sp, #20]
 8009bf0:	785b      	ldrb	r3, [r3, #1]
 8009bf2:	9304      	str	r3, [sp, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d028      	beq.n	8009c4a <__hexnan+0x9e>
 8009bf8:	9804      	ldr	r0, [sp, #16]
 8009bfa:	f7ff fd5f 	bl	80096bc <__hexdig_fun>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d154      	bne.n	8009cac <__hexnan+0x100>
 8009c02:	9b04      	ldr	r3, [sp, #16]
 8009c04:	2b20      	cmp	r3, #32
 8009c06:	d819      	bhi.n	8009c3c <__hexnan+0x90>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	9a07      	ldr	r2, [sp, #28]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	dd12      	ble.n	8009c36 <__hexnan+0x8a>
 8009c10:	42bc      	cmp	r4, r7
 8009c12:	d206      	bcs.n	8009c22 <__hexnan+0x76>
 8009c14:	2d07      	cmp	r5, #7
 8009c16:	dc04      	bgt.n	8009c22 <__hexnan+0x76>
 8009c18:	002a      	movs	r2, r5
 8009c1a:	0039      	movs	r1, r7
 8009c1c:	0020      	movs	r0, r4
 8009c1e:	f7ff ff9f 	bl	8009b60 <L_shift>
 8009c22:	9b01      	ldr	r3, [sp, #4]
 8009c24:	2508      	movs	r5, #8
 8009c26:	429c      	cmp	r4, r3
 8009c28:	d905      	bls.n	8009c36 <__hexnan+0x8a>
 8009c2a:	1f27      	subs	r7, r4, #4
 8009c2c:	2500      	movs	r5, #0
 8009c2e:	003c      	movs	r4, r7
 8009c30:	9b03      	ldr	r3, [sp, #12]
 8009c32:	603d      	str	r5, [r7, #0]
 8009c34:	9307      	str	r3, [sp, #28]
 8009c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	e7d5      	b.n	8009be8 <__hexnan+0x3c>
 8009c3c:	9b04      	ldr	r3, [sp, #16]
 8009c3e:	2b29      	cmp	r3, #41	; 0x29
 8009c40:	d159      	bne.n	8009cf6 <__hexnan+0x14a>
 8009c42:	9b05      	ldr	r3, [sp, #20]
 8009c44:	9a08      	ldr	r2, [sp, #32]
 8009c46:	3302      	adds	r3, #2
 8009c48:	6013      	str	r3, [r2, #0]
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d052      	beq.n	8009cf6 <__hexnan+0x14a>
 8009c50:	42bc      	cmp	r4, r7
 8009c52:	d206      	bcs.n	8009c62 <__hexnan+0xb6>
 8009c54:	2d07      	cmp	r5, #7
 8009c56:	dc04      	bgt.n	8009c62 <__hexnan+0xb6>
 8009c58:	002a      	movs	r2, r5
 8009c5a:	0039      	movs	r1, r7
 8009c5c:	0020      	movs	r0, r4
 8009c5e:	f7ff ff7f 	bl	8009b60 <L_shift>
 8009c62:	9b01      	ldr	r3, [sp, #4]
 8009c64:	429c      	cmp	r4, r3
 8009c66:	d935      	bls.n	8009cd4 <__hexnan+0x128>
 8009c68:	001a      	movs	r2, r3
 8009c6a:	0023      	movs	r3, r4
 8009c6c:	cb02      	ldmia	r3!, {r1}
 8009c6e:	c202      	stmia	r2!, {r1}
 8009c70:	429e      	cmp	r6, r3
 8009c72:	d2fb      	bcs.n	8009c6c <__hexnan+0xc0>
 8009c74:	9b02      	ldr	r3, [sp, #8]
 8009c76:	1c61      	adds	r1, r4, #1
 8009c78:	1eda      	subs	r2, r3, #3
 8009c7a:	2304      	movs	r3, #4
 8009c7c:	4291      	cmp	r1, r2
 8009c7e:	d805      	bhi.n	8009c8c <__hexnan+0xe0>
 8009c80:	9b02      	ldr	r3, [sp, #8]
 8009c82:	3b04      	subs	r3, #4
 8009c84:	1b1b      	subs	r3, r3, r4
 8009c86:	089b      	lsrs	r3, r3, #2
 8009c88:	3301      	adds	r3, #1
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	9a01      	ldr	r2, [sp, #4]
 8009c8e:	18d3      	adds	r3, r2, r3
 8009c90:	2200      	movs	r2, #0
 8009c92:	c304      	stmia	r3!, {r2}
 8009c94:	429e      	cmp	r6, r3
 8009c96:	d2fc      	bcs.n	8009c92 <__hexnan+0xe6>
 8009c98:	6833      	ldr	r3, [r6, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d104      	bne.n	8009ca8 <__hexnan+0xfc>
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	429e      	cmp	r6, r3
 8009ca2:	d126      	bne.n	8009cf2 <__hexnan+0x146>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	6033      	str	r3, [r6, #0]
 8009ca8:	2005      	movs	r0, #5
 8009caa:	e025      	b.n	8009cf8 <__hexnan+0x14c>
 8009cac:	9b03      	ldr	r3, [sp, #12]
 8009cae:	3501      	adds	r5, #1
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	9303      	str	r3, [sp, #12]
 8009cb4:	2d08      	cmp	r5, #8
 8009cb6:	dd06      	ble.n	8009cc6 <__hexnan+0x11a>
 8009cb8:	9b01      	ldr	r3, [sp, #4]
 8009cba:	429c      	cmp	r4, r3
 8009cbc:	d9bb      	bls.n	8009c36 <__hexnan+0x8a>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	2501      	movs	r5, #1
 8009cc2:	3c04      	subs	r4, #4
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	220f      	movs	r2, #15
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	4010      	ands	r0, r2
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	4318      	orrs	r0, r3
 8009cd0:	6020      	str	r0, [r4, #0]
 8009cd2:	e7b0      	b.n	8009c36 <__hexnan+0x8a>
 8009cd4:	9b06      	ldr	r3, [sp, #24]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0de      	beq.n	8009c98 <__hexnan+0xec>
 8009cda:	2120      	movs	r1, #32
 8009cdc:	9a06      	ldr	r2, [sp, #24]
 8009cde:	9b02      	ldr	r3, [sp, #8]
 8009ce0:	1a89      	subs	r1, r1, r2
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	4252      	negs	r2, r2
 8009ce6:	40ca      	lsrs	r2, r1
 8009ce8:	3b04      	subs	r3, #4
 8009cea:	6819      	ldr	r1, [r3, #0]
 8009cec:	400a      	ands	r2, r1
 8009cee:	601a      	str	r2, [r3, #0]
 8009cf0:	e7d2      	b.n	8009c98 <__hexnan+0xec>
 8009cf2:	3e04      	subs	r6, #4
 8009cf4:	e7d0      	b.n	8009c98 <__hexnan+0xec>
 8009cf6:	2004      	movs	r0, #4
 8009cf8:	b00b      	add	sp, #44	; 0x2c
 8009cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009cfc <_localeconv_r>:
 8009cfc:	4800      	ldr	r0, [pc, #0]	; (8009d00 <_localeconv_r+0x4>)
 8009cfe:	4770      	bx	lr
 8009d00:	20000164 	.word	0x20000164

08009d04 <__ascii_mbtowc>:
 8009d04:	b082      	sub	sp, #8
 8009d06:	2900      	cmp	r1, #0
 8009d08:	d100      	bne.n	8009d0c <__ascii_mbtowc+0x8>
 8009d0a:	a901      	add	r1, sp, #4
 8009d0c:	1e10      	subs	r0, r2, #0
 8009d0e:	d006      	beq.n	8009d1e <__ascii_mbtowc+0x1a>
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d006      	beq.n	8009d22 <__ascii_mbtowc+0x1e>
 8009d14:	7813      	ldrb	r3, [r2, #0]
 8009d16:	600b      	str	r3, [r1, #0]
 8009d18:	7810      	ldrb	r0, [r2, #0]
 8009d1a:	1e43      	subs	r3, r0, #1
 8009d1c:	4198      	sbcs	r0, r3
 8009d1e:	b002      	add	sp, #8
 8009d20:	4770      	bx	lr
 8009d22:	2002      	movs	r0, #2
 8009d24:	4240      	negs	r0, r0
 8009d26:	e7fa      	b.n	8009d1e <__ascii_mbtowc+0x1a>

08009d28 <memchr>:
 8009d28:	b2c9      	uxtb	r1, r1
 8009d2a:	1882      	adds	r2, r0, r2
 8009d2c:	4290      	cmp	r0, r2
 8009d2e:	d101      	bne.n	8009d34 <memchr+0xc>
 8009d30:	2000      	movs	r0, #0
 8009d32:	4770      	bx	lr
 8009d34:	7803      	ldrb	r3, [r0, #0]
 8009d36:	428b      	cmp	r3, r1
 8009d38:	d0fb      	beq.n	8009d32 <memchr+0xa>
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	e7f6      	b.n	8009d2c <memchr+0x4>
	...

08009d40 <__malloc_lock>:
 8009d40:	b510      	push	{r4, lr}
 8009d42:	4802      	ldr	r0, [pc, #8]	; (8009d4c <__malloc_lock+0xc>)
 8009d44:	f000 feb9 	bl	800aaba <__retarget_lock_acquire_recursive>
 8009d48:	bd10      	pop	{r4, pc}
 8009d4a:	46c0      	nop			; (mov r8, r8)
 8009d4c:	2000043c 	.word	0x2000043c

08009d50 <__malloc_unlock>:
 8009d50:	b510      	push	{r4, lr}
 8009d52:	4802      	ldr	r0, [pc, #8]	; (8009d5c <__malloc_unlock+0xc>)
 8009d54:	f000 feb2 	bl	800aabc <__retarget_lock_release_recursive>
 8009d58:	bd10      	pop	{r4, pc}
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	2000043c 	.word	0x2000043c

08009d60 <_Balloc>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d64:	0006      	movs	r6, r0
 8009d66:	000c      	movs	r4, r1
 8009d68:	2d00      	cmp	r5, #0
 8009d6a:	d10e      	bne.n	8009d8a <_Balloc+0x2a>
 8009d6c:	2010      	movs	r0, #16
 8009d6e:	f7fc ff3b 	bl	8006be8 <malloc>
 8009d72:	1e02      	subs	r2, r0, #0
 8009d74:	6270      	str	r0, [r6, #36]	; 0x24
 8009d76:	d104      	bne.n	8009d82 <_Balloc+0x22>
 8009d78:	2166      	movs	r1, #102	; 0x66
 8009d7a:	4b19      	ldr	r3, [pc, #100]	; (8009de0 <_Balloc+0x80>)
 8009d7c:	4819      	ldr	r0, [pc, #100]	; (8009de4 <_Balloc+0x84>)
 8009d7e:	f000 fe6d 	bl	800aa5c <__assert_func>
 8009d82:	6045      	str	r5, [r0, #4]
 8009d84:	6085      	str	r5, [r0, #8]
 8009d86:	6005      	str	r5, [r0, #0]
 8009d88:	60c5      	str	r5, [r0, #12]
 8009d8a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009d8c:	68eb      	ldr	r3, [r5, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d013      	beq.n	8009dba <_Balloc+0x5a>
 8009d92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009d94:	00a2      	lsls	r2, r4, #2
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	189b      	adds	r3, r3, r2
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d118      	bne.n	8009dd2 <_Balloc+0x72>
 8009da0:	2101      	movs	r1, #1
 8009da2:	000d      	movs	r5, r1
 8009da4:	40a5      	lsls	r5, r4
 8009da6:	1d6a      	adds	r2, r5, #5
 8009da8:	0030      	movs	r0, r6
 8009daa:	0092      	lsls	r2, r2, #2
 8009dac:	f000 fca1 	bl	800a6f2 <_calloc_r>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d00c      	beq.n	8009dce <_Balloc+0x6e>
 8009db4:	6044      	str	r4, [r0, #4]
 8009db6:	6085      	str	r5, [r0, #8]
 8009db8:	e00d      	b.n	8009dd6 <_Balloc+0x76>
 8009dba:	2221      	movs	r2, #33	; 0x21
 8009dbc:	2104      	movs	r1, #4
 8009dbe:	0030      	movs	r0, r6
 8009dc0:	f000 fc97 	bl	800a6f2 <_calloc_r>
 8009dc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009dc6:	60e8      	str	r0, [r5, #12]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e1      	bne.n	8009d92 <_Balloc+0x32>
 8009dce:	2000      	movs	r0, #0
 8009dd0:	bd70      	pop	{r4, r5, r6, pc}
 8009dd2:	6802      	ldr	r2, [r0, #0]
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6103      	str	r3, [r0, #16]
 8009dda:	60c3      	str	r3, [r0, #12]
 8009ddc:	e7f8      	b.n	8009dd0 <_Balloc+0x70>
 8009dde:	46c0      	nop			; (mov r8, r8)
 8009de0:	0800b90d 	.word	0x0800b90d
 8009de4:	0800ba0c 	.word	0x0800ba0c

08009de8 <_Bfree>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009dec:	0005      	movs	r5, r0
 8009dee:	000c      	movs	r4, r1
 8009df0:	2e00      	cmp	r6, #0
 8009df2:	d10e      	bne.n	8009e12 <_Bfree+0x2a>
 8009df4:	2010      	movs	r0, #16
 8009df6:	f7fc fef7 	bl	8006be8 <malloc>
 8009dfa:	1e02      	subs	r2, r0, #0
 8009dfc:	6268      	str	r0, [r5, #36]	; 0x24
 8009dfe:	d104      	bne.n	8009e0a <_Bfree+0x22>
 8009e00:	218a      	movs	r1, #138	; 0x8a
 8009e02:	4b09      	ldr	r3, [pc, #36]	; (8009e28 <_Bfree+0x40>)
 8009e04:	4809      	ldr	r0, [pc, #36]	; (8009e2c <_Bfree+0x44>)
 8009e06:	f000 fe29 	bl	800aa5c <__assert_func>
 8009e0a:	6046      	str	r6, [r0, #4]
 8009e0c:	6086      	str	r6, [r0, #8]
 8009e0e:	6006      	str	r6, [r0, #0]
 8009e10:	60c6      	str	r6, [r0, #12]
 8009e12:	2c00      	cmp	r4, #0
 8009e14:	d007      	beq.n	8009e26 <_Bfree+0x3e>
 8009e16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e18:	6862      	ldr	r2, [r4, #4]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	0092      	lsls	r2, r2, #2
 8009e1e:	189b      	adds	r3, r3, r2
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	6022      	str	r2, [r4, #0]
 8009e24:	601c      	str	r4, [r3, #0]
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	0800b90d 	.word	0x0800b90d
 8009e2c:	0800ba0c 	.word	0x0800ba0c

08009e30 <__multadd>:
 8009e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e32:	000e      	movs	r6, r1
 8009e34:	9001      	str	r0, [sp, #4]
 8009e36:	000c      	movs	r4, r1
 8009e38:	001d      	movs	r5, r3
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	690f      	ldr	r7, [r1, #16]
 8009e3e:	3614      	adds	r6, #20
 8009e40:	6833      	ldr	r3, [r6, #0]
 8009e42:	3001      	adds	r0, #1
 8009e44:	b299      	uxth	r1, r3
 8009e46:	4351      	muls	r1, r2
 8009e48:	0c1b      	lsrs	r3, r3, #16
 8009e4a:	4353      	muls	r3, r2
 8009e4c:	1949      	adds	r1, r1, r5
 8009e4e:	0c0d      	lsrs	r5, r1, #16
 8009e50:	195b      	adds	r3, r3, r5
 8009e52:	0c1d      	lsrs	r5, r3, #16
 8009e54:	b289      	uxth	r1, r1
 8009e56:	041b      	lsls	r3, r3, #16
 8009e58:	185b      	adds	r3, r3, r1
 8009e5a:	c608      	stmia	r6!, {r3}
 8009e5c:	4287      	cmp	r7, r0
 8009e5e:	dcef      	bgt.n	8009e40 <__multadd+0x10>
 8009e60:	2d00      	cmp	r5, #0
 8009e62:	d022      	beq.n	8009eaa <__multadd+0x7a>
 8009e64:	68a3      	ldr	r3, [r4, #8]
 8009e66:	42bb      	cmp	r3, r7
 8009e68:	dc19      	bgt.n	8009e9e <__multadd+0x6e>
 8009e6a:	6863      	ldr	r3, [r4, #4]
 8009e6c:	9801      	ldr	r0, [sp, #4]
 8009e6e:	1c59      	adds	r1, r3, #1
 8009e70:	f7ff ff76 	bl	8009d60 <_Balloc>
 8009e74:	1e06      	subs	r6, r0, #0
 8009e76:	d105      	bne.n	8009e84 <__multadd+0x54>
 8009e78:	0002      	movs	r2, r0
 8009e7a:	21b5      	movs	r1, #181	; 0xb5
 8009e7c:	4b0c      	ldr	r3, [pc, #48]	; (8009eb0 <__multadd+0x80>)
 8009e7e:	480d      	ldr	r0, [pc, #52]	; (8009eb4 <__multadd+0x84>)
 8009e80:	f000 fdec 	bl	800aa5c <__assert_func>
 8009e84:	0021      	movs	r1, r4
 8009e86:	6923      	ldr	r3, [r4, #16]
 8009e88:	310c      	adds	r1, #12
 8009e8a:	1c9a      	adds	r2, r3, #2
 8009e8c:	0092      	lsls	r2, r2, #2
 8009e8e:	300c      	adds	r0, #12
 8009e90:	f7fc feb4 	bl	8006bfc <memcpy>
 8009e94:	0021      	movs	r1, r4
 8009e96:	9801      	ldr	r0, [sp, #4]
 8009e98:	f7ff ffa6 	bl	8009de8 <_Bfree>
 8009e9c:	0034      	movs	r4, r6
 8009e9e:	1d3b      	adds	r3, r7, #4
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	18e3      	adds	r3, r4, r3
 8009ea4:	605d      	str	r5, [r3, #4]
 8009ea6:	1c7b      	adds	r3, r7, #1
 8009ea8:	6123      	str	r3, [r4, #16]
 8009eaa:	0020      	movs	r0, r4
 8009eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	0800b97f 	.word	0x0800b97f
 8009eb4:	0800ba0c 	.word	0x0800ba0c

08009eb8 <__s2b>:
 8009eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eba:	0006      	movs	r6, r0
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	000c      	movs	r4, r1
 8009ec0:	3008      	adds	r0, #8
 8009ec2:	2109      	movs	r1, #9
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	0015      	movs	r5, r2
 8009ec8:	f7f6 f9c2 	bl	8000250 <__divsi3>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	2100      	movs	r1, #0
 8009ed0:	4283      	cmp	r3, r0
 8009ed2:	db0a      	blt.n	8009eea <__s2b+0x32>
 8009ed4:	0030      	movs	r0, r6
 8009ed6:	f7ff ff43 	bl	8009d60 <_Balloc>
 8009eda:	1e01      	subs	r1, r0, #0
 8009edc:	d108      	bne.n	8009ef0 <__s2b+0x38>
 8009ede:	0002      	movs	r2, r0
 8009ee0:	4b19      	ldr	r3, [pc, #100]	; (8009f48 <__s2b+0x90>)
 8009ee2:	481a      	ldr	r0, [pc, #104]	; (8009f4c <__s2b+0x94>)
 8009ee4:	31ce      	adds	r1, #206	; 0xce
 8009ee6:	f000 fdb9 	bl	800aa5c <__assert_func>
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	3101      	adds	r1, #1
 8009eee:	e7ef      	b.n	8009ed0 <__s2b+0x18>
 8009ef0:	9b08      	ldr	r3, [sp, #32]
 8009ef2:	6143      	str	r3, [r0, #20]
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	6103      	str	r3, [r0, #16]
 8009ef8:	2d09      	cmp	r5, #9
 8009efa:	dd18      	ble.n	8009f2e <__s2b+0x76>
 8009efc:	0023      	movs	r3, r4
 8009efe:	3309      	adds	r3, #9
 8009f00:	001f      	movs	r7, r3
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	1964      	adds	r4, r4, r5
 8009f06:	783b      	ldrb	r3, [r7, #0]
 8009f08:	220a      	movs	r2, #10
 8009f0a:	0030      	movs	r0, r6
 8009f0c:	3b30      	subs	r3, #48	; 0x30
 8009f0e:	f7ff ff8f 	bl	8009e30 <__multadd>
 8009f12:	3701      	adds	r7, #1
 8009f14:	0001      	movs	r1, r0
 8009f16:	42a7      	cmp	r7, r4
 8009f18:	d1f5      	bne.n	8009f06 <__s2b+0x4e>
 8009f1a:	002c      	movs	r4, r5
 8009f1c:	9b00      	ldr	r3, [sp, #0]
 8009f1e:	3c08      	subs	r4, #8
 8009f20:	191c      	adds	r4, r3, r4
 8009f22:	002f      	movs	r7, r5
 8009f24:	9b01      	ldr	r3, [sp, #4]
 8009f26:	429f      	cmp	r7, r3
 8009f28:	db04      	blt.n	8009f34 <__s2b+0x7c>
 8009f2a:	0008      	movs	r0, r1
 8009f2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f2e:	2509      	movs	r5, #9
 8009f30:	340a      	adds	r4, #10
 8009f32:	e7f6      	b.n	8009f22 <__s2b+0x6a>
 8009f34:	1b63      	subs	r3, r4, r5
 8009f36:	5ddb      	ldrb	r3, [r3, r7]
 8009f38:	220a      	movs	r2, #10
 8009f3a:	0030      	movs	r0, r6
 8009f3c:	3b30      	subs	r3, #48	; 0x30
 8009f3e:	f7ff ff77 	bl	8009e30 <__multadd>
 8009f42:	3701      	adds	r7, #1
 8009f44:	0001      	movs	r1, r0
 8009f46:	e7ed      	b.n	8009f24 <__s2b+0x6c>
 8009f48:	0800b97f 	.word	0x0800b97f
 8009f4c:	0800ba0c 	.word	0x0800ba0c

08009f50 <__hi0bits>:
 8009f50:	0003      	movs	r3, r0
 8009f52:	0c02      	lsrs	r2, r0, #16
 8009f54:	2000      	movs	r0, #0
 8009f56:	4282      	cmp	r2, r0
 8009f58:	d101      	bne.n	8009f5e <__hi0bits+0xe>
 8009f5a:	041b      	lsls	r3, r3, #16
 8009f5c:	3010      	adds	r0, #16
 8009f5e:	0e1a      	lsrs	r2, r3, #24
 8009f60:	d101      	bne.n	8009f66 <__hi0bits+0x16>
 8009f62:	3008      	adds	r0, #8
 8009f64:	021b      	lsls	r3, r3, #8
 8009f66:	0f1a      	lsrs	r2, r3, #28
 8009f68:	d101      	bne.n	8009f6e <__hi0bits+0x1e>
 8009f6a:	3004      	adds	r0, #4
 8009f6c:	011b      	lsls	r3, r3, #4
 8009f6e:	0f9a      	lsrs	r2, r3, #30
 8009f70:	d101      	bne.n	8009f76 <__hi0bits+0x26>
 8009f72:	3002      	adds	r0, #2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	db03      	blt.n	8009f82 <__hi0bits+0x32>
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	d400      	bmi.n	8009f82 <__hi0bits+0x32>
 8009f80:	2020      	movs	r0, #32
 8009f82:	4770      	bx	lr

08009f84 <__lo0bits>:
 8009f84:	6803      	ldr	r3, [r0, #0]
 8009f86:	0002      	movs	r2, r0
 8009f88:	2107      	movs	r1, #7
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	4008      	ands	r0, r1
 8009f8e:	420b      	tst	r3, r1
 8009f90:	d00d      	beq.n	8009fae <__lo0bits+0x2a>
 8009f92:	3906      	subs	r1, #6
 8009f94:	2000      	movs	r0, #0
 8009f96:	420b      	tst	r3, r1
 8009f98:	d105      	bne.n	8009fa6 <__lo0bits+0x22>
 8009f9a:	3002      	adds	r0, #2
 8009f9c:	4203      	tst	r3, r0
 8009f9e:	d003      	beq.n	8009fa8 <__lo0bits+0x24>
 8009fa0:	40cb      	lsrs	r3, r1
 8009fa2:	0008      	movs	r0, r1
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	4770      	bx	lr
 8009fa8:	089b      	lsrs	r3, r3, #2
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	e7fb      	b.n	8009fa6 <__lo0bits+0x22>
 8009fae:	b299      	uxth	r1, r3
 8009fb0:	2900      	cmp	r1, #0
 8009fb2:	d101      	bne.n	8009fb8 <__lo0bits+0x34>
 8009fb4:	2010      	movs	r0, #16
 8009fb6:	0c1b      	lsrs	r3, r3, #16
 8009fb8:	b2d9      	uxtb	r1, r3
 8009fba:	2900      	cmp	r1, #0
 8009fbc:	d101      	bne.n	8009fc2 <__lo0bits+0x3e>
 8009fbe:	3008      	adds	r0, #8
 8009fc0:	0a1b      	lsrs	r3, r3, #8
 8009fc2:	0719      	lsls	r1, r3, #28
 8009fc4:	d101      	bne.n	8009fca <__lo0bits+0x46>
 8009fc6:	3004      	adds	r0, #4
 8009fc8:	091b      	lsrs	r3, r3, #4
 8009fca:	0799      	lsls	r1, r3, #30
 8009fcc:	d101      	bne.n	8009fd2 <__lo0bits+0x4e>
 8009fce:	3002      	adds	r0, #2
 8009fd0:	089b      	lsrs	r3, r3, #2
 8009fd2:	07d9      	lsls	r1, r3, #31
 8009fd4:	d4e9      	bmi.n	8009faa <__lo0bits+0x26>
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	085b      	lsrs	r3, r3, #1
 8009fda:	d1e6      	bne.n	8009faa <__lo0bits+0x26>
 8009fdc:	2020      	movs	r0, #32
 8009fde:	e7e2      	b.n	8009fa6 <__lo0bits+0x22>

08009fe0 <__i2b>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	000c      	movs	r4, r1
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	f7ff febb 	bl	8009d60 <_Balloc>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d106      	bne.n	8009ffc <__i2b+0x1c>
 8009fee:	21a0      	movs	r1, #160	; 0xa0
 8009ff0:	0002      	movs	r2, r0
 8009ff2:	4b04      	ldr	r3, [pc, #16]	; (800a004 <__i2b+0x24>)
 8009ff4:	4804      	ldr	r0, [pc, #16]	; (800a008 <__i2b+0x28>)
 8009ff6:	0049      	lsls	r1, r1, #1
 8009ff8:	f000 fd30 	bl	800aa5c <__assert_func>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	6144      	str	r4, [r0, #20]
 800a000:	6103      	str	r3, [r0, #16]
 800a002:	bd10      	pop	{r4, pc}
 800a004:	0800b97f 	.word	0x0800b97f
 800a008:	0800ba0c 	.word	0x0800ba0c

0800a00c <__multiply>:
 800a00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a00e:	690b      	ldr	r3, [r1, #16]
 800a010:	0014      	movs	r4, r2
 800a012:	6912      	ldr	r2, [r2, #16]
 800a014:	000d      	movs	r5, r1
 800a016:	b089      	sub	sp, #36	; 0x24
 800a018:	4293      	cmp	r3, r2
 800a01a:	da01      	bge.n	800a020 <__multiply+0x14>
 800a01c:	0025      	movs	r5, r4
 800a01e:	000c      	movs	r4, r1
 800a020:	692f      	ldr	r7, [r5, #16]
 800a022:	6926      	ldr	r6, [r4, #16]
 800a024:	6869      	ldr	r1, [r5, #4]
 800a026:	19bb      	adds	r3, r7, r6
 800a028:	9302      	str	r3, [sp, #8]
 800a02a:	68ab      	ldr	r3, [r5, #8]
 800a02c:	19ba      	adds	r2, r7, r6
 800a02e:	4293      	cmp	r3, r2
 800a030:	da00      	bge.n	800a034 <__multiply+0x28>
 800a032:	3101      	adds	r1, #1
 800a034:	f7ff fe94 	bl	8009d60 <_Balloc>
 800a038:	9001      	str	r0, [sp, #4]
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d106      	bne.n	800a04c <__multiply+0x40>
 800a03e:	215e      	movs	r1, #94	; 0x5e
 800a040:	0002      	movs	r2, r0
 800a042:	4b48      	ldr	r3, [pc, #288]	; (800a164 <__multiply+0x158>)
 800a044:	4848      	ldr	r0, [pc, #288]	; (800a168 <__multiply+0x15c>)
 800a046:	31ff      	adds	r1, #255	; 0xff
 800a048:	f000 fd08 	bl	800aa5c <__assert_func>
 800a04c:	9b01      	ldr	r3, [sp, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	3314      	adds	r3, #20
 800a052:	469c      	mov	ip, r3
 800a054:	19bb      	adds	r3, r7, r6
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4463      	add	r3, ip
 800a05a:	9303      	str	r3, [sp, #12]
 800a05c:	4663      	mov	r3, ip
 800a05e:	9903      	ldr	r1, [sp, #12]
 800a060:	428b      	cmp	r3, r1
 800a062:	d32c      	bcc.n	800a0be <__multiply+0xb2>
 800a064:	002b      	movs	r3, r5
 800a066:	0022      	movs	r2, r4
 800a068:	3314      	adds	r3, #20
 800a06a:	00bf      	lsls	r7, r7, #2
 800a06c:	3214      	adds	r2, #20
 800a06e:	9306      	str	r3, [sp, #24]
 800a070:	00b6      	lsls	r6, r6, #2
 800a072:	19db      	adds	r3, r3, r7
 800a074:	9304      	str	r3, [sp, #16]
 800a076:	1993      	adds	r3, r2, r6
 800a078:	9307      	str	r3, [sp, #28]
 800a07a:	2304      	movs	r3, #4
 800a07c:	9305      	str	r3, [sp, #20]
 800a07e:	002b      	movs	r3, r5
 800a080:	9904      	ldr	r1, [sp, #16]
 800a082:	3315      	adds	r3, #21
 800a084:	9200      	str	r2, [sp, #0]
 800a086:	4299      	cmp	r1, r3
 800a088:	d305      	bcc.n	800a096 <__multiply+0x8a>
 800a08a:	1b4b      	subs	r3, r1, r5
 800a08c:	3b15      	subs	r3, #21
 800a08e:	089b      	lsrs	r3, r3, #2
 800a090:	3301      	adds	r3, #1
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	9b07      	ldr	r3, [sp, #28]
 800a098:	9a00      	ldr	r2, [sp, #0]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d311      	bcc.n	800a0c2 <__multiply+0xb6>
 800a09e:	9b02      	ldr	r3, [sp, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	dd06      	ble.n	800a0b2 <__multiply+0xa6>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	3b04      	subs	r3, #4
 800a0a8:	9303      	str	r3, [sp, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d053      	beq.n	800a15a <__multiply+0x14e>
 800a0b2:	9b01      	ldr	r3, [sp, #4]
 800a0b4:	9a02      	ldr	r2, [sp, #8]
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	611a      	str	r2, [r3, #16]
 800a0ba:	b009      	add	sp, #36	; 0x24
 800a0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0be:	c304      	stmia	r3!, {r2}
 800a0c0:	e7cd      	b.n	800a05e <__multiply+0x52>
 800a0c2:	9b00      	ldr	r3, [sp, #0]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	b298      	uxth	r0, r3
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d01b      	beq.n	800a104 <__multiply+0xf8>
 800a0cc:	4667      	mov	r7, ip
 800a0ce:	2400      	movs	r4, #0
 800a0d0:	9e06      	ldr	r6, [sp, #24]
 800a0d2:	ce02      	ldmia	r6!, {r1}
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	b28b      	uxth	r3, r1
 800a0d8:	4343      	muls	r3, r0
 800a0da:	b292      	uxth	r2, r2
 800a0dc:	189b      	adds	r3, r3, r2
 800a0de:	191b      	adds	r3, r3, r4
 800a0e0:	0c0c      	lsrs	r4, r1, #16
 800a0e2:	4344      	muls	r4, r0
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	0c11      	lsrs	r1, r2, #16
 800a0e8:	1861      	adds	r1, r4, r1
 800a0ea:	0c1c      	lsrs	r4, r3, #16
 800a0ec:	1909      	adds	r1, r1, r4
 800a0ee:	0c0c      	lsrs	r4, r1, #16
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	0409      	lsls	r1, r1, #16
 800a0f4:	430b      	orrs	r3, r1
 800a0f6:	c708      	stmia	r7!, {r3}
 800a0f8:	9b04      	ldr	r3, [sp, #16]
 800a0fa:	42b3      	cmp	r3, r6
 800a0fc:	d8e9      	bhi.n	800a0d2 <__multiply+0xc6>
 800a0fe:	4663      	mov	r3, ip
 800a100:	9a05      	ldr	r2, [sp, #20]
 800a102:	509c      	str	r4, [r3, r2]
 800a104:	9b00      	ldr	r3, [sp, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	0c1e      	lsrs	r6, r3, #16
 800a10a:	d020      	beq.n	800a14e <__multiply+0x142>
 800a10c:	4663      	mov	r3, ip
 800a10e:	002c      	movs	r4, r5
 800a110:	4660      	mov	r0, ip
 800a112:	2700      	movs	r7, #0
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3414      	adds	r4, #20
 800a118:	6822      	ldr	r2, [r4, #0]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	b291      	uxth	r1, r2
 800a11e:	4371      	muls	r1, r6
 800a120:	6802      	ldr	r2, [r0, #0]
 800a122:	0c12      	lsrs	r2, r2, #16
 800a124:	1889      	adds	r1, r1, r2
 800a126:	19cf      	adds	r7, r1, r7
 800a128:	0439      	lsls	r1, r7, #16
 800a12a:	430b      	orrs	r3, r1
 800a12c:	6003      	str	r3, [r0, #0]
 800a12e:	cc02      	ldmia	r4!, {r1}
 800a130:	6843      	ldr	r3, [r0, #4]
 800a132:	0c09      	lsrs	r1, r1, #16
 800a134:	4371      	muls	r1, r6
 800a136:	b29b      	uxth	r3, r3
 800a138:	0c3f      	lsrs	r7, r7, #16
 800a13a:	18cb      	adds	r3, r1, r3
 800a13c:	9a04      	ldr	r2, [sp, #16]
 800a13e:	19db      	adds	r3, r3, r7
 800a140:	0c1f      	lsrs	r7, r3, #16
 800a142:	3004      	adds	r0, #4
 800a144:	42a2      	cmp	r2, r4
 800a146:	d8e7      	bhi.n	800a118 <__multiply+0x10c>
 800a148:	4662      	mov	r2, ip
 800a14a:	9905      	ldr	r1, [sp, #20]
 800a14c:	5053      	str	r3, [r2, r1]
 800a14e:	9b00      	ldr	r3, [sp, #0]
 800a150:	3304      	adds	r3, #4
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	2304      	movs	r3, #4
 800a156:	449c      	add	ip, r3
 800a158:	e79d      	b.n	800a096 <__multiply+0x8a>
 800a15a:	9b02      	ldr	r3, [sp, #8]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	9302      	str	r3, [sp, #8]
 800a160:	e79d      	b.n	800a09e <__multiply+0x92>
 800a162:	46c0      	nop			; (mov r8, r8)
 800a164:	0800b97f 	.word	0x0800b97f
 800a168:	0800ba0c 	.word	0x0800ba0c

0800a16c <__pow5mult>:
 800a16c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a16e:	2303      	movs	r3, #3
 800a170:	0015      	movs	r5, r2
 800a172:	0007      	movs	r7, r0
 800a174:	000e      	movs	r6, r1
 800a176:	401a      	ands	r2, r3
 800a178:	421d      	tst	r5, r3
 800a17a:	d008      	beq.n	800a18e <__pow5mult+0x22>
 800a17c:	4925      	ldr	r1, [pc, #148]	; (800a214 <__pow5mult+0xa8>)
 800a17e:	3a01      	subs	r2, #1
 800a180:	0092      	lsls	r2, r2, #2
 800a182:	5852      	ldr	r2, [r2, r1]
 800a184:	2300      	movs	r3, #0
 800a186:	0031      	movs	r1, r6
 800a188:	f7ff fe52 	bl	8009e30 <__multadd>
 800a18c:	0006      	movs	r6, r0
 800a18e:	10ad      	asrs	r5, r5, #2
 800a190:	d03d      	beq.n	800a20e <__pow5mult+0xa2>
 800a192:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a194:	2c00      	cmp	r4, #0
 800a196:	d10f      	bne.n	800a1b8 <__pow5mult+0x4c>
 800a198:	2010      	movs	r0, #16
 800a19a:	f7fc fd25 	bl	8006be8 <malloc>
 800a19e:	1e02      	subs	r2, r0, #0
 800a1a0:	6278      	str	r0, [r7, #36]	; 0x24
 800a1a2:	d105      	bne.n	800a1b0 <__pow5mult+0x44>
 800a1a4:	21d7      	movs	r1, #215	; 0xd7
 800a1a6:	4b1c      	ldr	r3, [pc, #112]	; (800a218 <__pow5mult+0xac>)
 800a1a8:	481c      	ldr	r0, [pc, #112]	; (800a21c <__pow5mult+0xb0>)
 800a1aa:	0049      	lsls	r1, r1, #1
 800a1ac:	f000 fc56 	bl	800aa5c <__assert_func>
 800a1b0:	6044      	str	r4, [r0, #4]
 800a1b2:	6084      	str	r4, [r0, #8]
 800a1b4:	6004      	str	r4, [r0, #0]
 800a1b6:	60c4      	str	r4, [r0, #12]
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	689c      	ldr	r4, [r3, #8]
 800a1bc:	9301      	str	r3, [sp, #4]
 800a1be:	2c00      	cmp	r4, #0
 800a1c0:	d108      	bne.n	800a1d4 <__pow5mult+0x68>
 800a1c2:	0038      	movs	r0, r7
 800a1c4:	4916      	ldr	r1, [pc, #88]	; (800a220 <__pow5mult+0xb4>)
 800a1c6:	f7ff ff0b 	bl	8009fe0 <__i2b>
 800a1ca:	9b01      	ldr	r3, [sp, #4]
 800a1cc:	0004      	movs	r4, r0
 800a1ce:	6098      	str	r0, [r3, #8]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	6003      	str	r3, [r0, #0]
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	421d      	tst	r5, r3
 800a1d8:	d00a      	beq.n	800a1f0 <__pow5mult+0x84>
 800a1da:	0031      	movs	r1, r6
 800a1dc:	0022      	movs	r2, r4
 800a1de:	0038      	movs	r0, r7
 800a1e0:	f7ff ff14 	bl	800a00c <__multiply>
 800a1e4:	0031      	movs	r1, r6
 800a1e6:	9001      	str	r0, [sp, #4]
 800a1e8:	0038      	movs	r0, r7
 800a1ea:	f7ff fdfd 	bl	8009de8 <_Bfree>
 800a1ee:	9e01      	ldr	r6, [sp, #4]
 800a1f0:	106d      	asrs	r5, r5, #1
 800a1f2:	d00c      	beq.n	800a20e <__pow5mult+0xa2>
 800a1f4:	6820      	ldr	r0, [r4, #0]
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d107      	bne.n	800a20a <__pow5mult+0x9e>
 800a1fa:	0022      	movs	r2, r4
 800a1fc:	0021      	movs	r1, r4
 800a1fe:	0038      	movs	r0, r7
 800a200:	f7ff ff04 	bl	800a00c <__multiply>
 800a204:	2300      	movs	r3, #0
 800a206:	6020      	str	r0, [r4, #0]
 800a208:	6003      	str	r3, [r0, #0]
 800a20a:	0004      	movs	r4, r0
 800a20c:	e7e2      	b.n	800a1d4 <__pow5mult+0x68>
 800a20e:	0030      	movs	r0, r6
 800a210:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a212:	46c0      	nop			; (mov r8, r8)
 800a214:	0800bb58 	.word	0x0800bb58
 800a218:	0800b90d 	.word	0x0800b90d
 800a21c:	0800ba0c 	.word	0x0800ba0c
 800a220:	00000271 	.word	0x00000271

0800a224 <__lshift>:
 800a224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a226:	000c      	movs	r4, r1
 800a228:	0017      	movs	r7, r2
 800a22a:	6923      	ldr	r3, [r4, #16]
 800a22c:	1155      	asrs	r5, r2, #5
 800a22e:	b087      	sub	sp, #28
 800a230:	18eb      	adds	r3, r5, r3
 800a232:	9302      	str	r3, [sp, #8]
 800a234:	3301      	adds	r3, #1
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	6849      	ldr	r1, [r1, #4]
 800a23a:	68a3      	ldr	r3, [r4, #8]
 800a23c:	9004      	str	r0, [sp, #16]
 800a23e:	9a01      	ldr	r2, [sp, #4]
 800a240:	4293      	cmp	r3, r2
 800a242:	db10      	blt.n	800a266 <__lshift+0x42>
 800a244:	9804      	ldr	r0, [sp, #16]
 800a246:	f7ff fd8b 	bl	8009d60 <_Balloc>
 800a24a:	2300      	movs	r3, #0
 800a24c:	0002      	movs	r2, r0
 800a24e:	0006      	movs	r6, r0
 800a250:	0019      	movs	r1, r3
 800a252:	3214      	adds	r2, #20
 800a254:	4298      	cmp	r0, r3
 800a256:	d10c      	bne.n	800a272 <__lshift+0x4e>
 800a258:	21da      	movs	r1, #218	; 0xda
 800a25a:	0002      	movs	r2, r0
 800a25c:	4b26      	ldr	r3, [pc, #152]	; (800a2f8 <__lshift+0xd4>)
 800a25e:	4827      	ldr	r0, [pc, #156]	; (800a2fc <__lshift+0xd8>)
 800a260:	31ff      	adds	r1, #255	; 0xff
 800a262:	f000 fbfb 	bl	800aa5c <__assert_func>
 800a266:	3101      	adds	r1, #1
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	e7e8      	b.n	800a23e <__lshift+0x1a>
 800a26c:	0098      	lsls	r0, r3, #2
 800a26e:	5011      	str	r1, [r2, r0]
 800a270:	3301      	adds	r3, #1
 800a272:	42ab      	cmp	r3, r5
 800a274:	dbfa      	blt.n	800a26c <__lshift+0x48>
 800a276:	43eb      	mvns	r3, r5
 800a278:	17db      	asrs	r3, r3, #31
 800a27a:	401d      	ands	r5, r3
 800a27c:	211f      	movs	r1, #31
 800a27e:	0023      	movs	r3, r4
 800a280:	0038      	movs	r0, r7
 800a282:	00ad      	lsls	r5, r5, #2
 800a284:	1955      	adds	r5, r2, r5
 800a286:	6922      	ldr	r2, [r4, #16]
 800a288:	3314      	adds	r3, #20
 800a28a:	0092      	lsls	r2, r2, #2
 800a28c:	4008      	ands	r0, r1
 800a28e:	4684      	mov	ip, r0
 800a290:	189a      	adds	r2, r3, r2
 800a292:	420f      	tst	r7, r1
 800a294:	d02a      	beq.n	800a2ec <__lshift+0xc8>
 800a296:	3101      	adds	r1, #1
 800a298:	1a09      	subs	r1, r1, r0
 800a29a:	9105      	str	r1, [sp, #20]
 800a29c:	2100      	movs	r1, #0
 800a29e:	9503      	str	r5, [sp, #12]
 800a2a0:	4667      	mov	r7, ip
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	40b8      	lsls	r0, r7
 800a2a6:	4301      	orrs	r1, r0
 800a2a8:	9803      	ldr	r0, [sp, #12]
 800a2aa:	c002      	stmia	r0!, {r1}
 800a2ac:	cb02      	ldmia	r3!, {r1}
 800a2ae:	9003      	str	r0, [sp, #12]
 800a2b0:	9805      	ldr	r0, [sp, #20]
 800a2b2:	40c1      	lsrs	r1, r0
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d8f3      	bhi.n	800a2a0 <__lshift+0x7c>
 800a2b8:	0020      	movs	r0, r4
 800a2ba:	3015      	adds	r0, #21
 800a2bc:	2304      	movs	r3, #4
 800a2be:	4282      	cmp	r2, r0
 800a2c0:	d304      	bcc.n	800a2cc <__lshift+0xa8>
 800a2c2:	1b13      	subs	r3, r2, r4
 800a2c4:	3b15      	subs	r3, #21
 800a2c6:	089b      	lsrs	r3, r3, #2
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	50e9      	str	r1, [r5, r3]
 800a2ce:	2900      	cmp	r1, #0
 800a2d0:	d002      	beq.n	800a2d8 <__lshift+0xb4>
 800a2d2:	9b02      	ldr	r3, [sp, #8]
 800a2d4:	3302      	adds	r3, #2
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	9b01      	ldr	r3, [sp, #4]
 800a2da:	9804      	ldr	r0, [sp, #16]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	0021      	movs	r1, r4
 800a2e0:	6133      	str	r3, [r6, #16]
 800a2e2:	f7ff fd81 	bl	8009de8 <_Bfree>
 800a2e6:	0030      	movs	r0, r6
 800a2e8:	b007      	add	sp, #28
 800a2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ec:	cb02      	ldmia	r3!, {r1}
 800a2ee:	c502      	stmia	r5!, {r1}
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d8fb      	bhi.n	800a2ec <__lshift+0xc8>
 800a2f4:	e7f0      	b.n	800a2d8 <__lshift+0xb4>
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	0800b97f 	.word	0x0800b97f
 800a2fc:	0800ba0c 	.word	0x0800ba0c

0800a300 <__mcmp>:
 800a300:	6902      	ldr	r2, [r0, #16]
 800a302:	690b      	ldr	r3, [r1, #16]
 800a304:	b530      	push	{r4, r5, lr}
 800a306:	0004      	movs	r4, r0
 800a308:	1ad0      	subs	r0, r2, r3
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d10d      	bne.n	800a32a <__mcmp+0x2a>
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	3414      	adds	r4, #20
 800a312:	3114      	adds	r1, #20
 800a314:	18e2      	adds	r2, r4, r3
 800a316:	18c9      	adds	r1, r1, r3
 800a318:	3a04      	subs	r2, #4
 800a31a:	3904      	subs	r1, #4
 800a31c:	6815      	ldr	r5, [r2, #0]
 800a31e:	680b      	ldr	r3, [r1, #0]
 800a320:	429d      	cmp	r5, r3
 800a322:	d003      	beq.n	800a32c <__mcmp+0x2c>
 800a324:	2001      	movs	r0, #1
 800a326:	429d      	cmp	r5, r3
 800a328:	d303      	bcc.n	800a332 <__mcmp+0x32>
 800a32a:	bd30      	pop	{r4, r5, pc}
 800a32c:	4294      	cmp	r4, r2
 800a32e:	d3f3      	bcc.n	800a318 <__mcmp+0x18>
 800a330:	e7fb      	b.n	800a32a <__mcmp+0x2a>
 800a332:	4240      	negs	r0, r0
 800a334:	e7f9      	b.n	800a32a <__mcmp+0x2a>
	...

0800a338 <__mdiff>:
 800a338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a33a:	000e      	movs	r6, r1
 800a33c:	0007      	movs	r7, r0
 800a33e:	0011      	movs	r1, r2
 800a340:	0030      	movs	r0, r6
 800a342:	b087      	sub	sp, #28
 800a344:	0014      	movs	r4, r2
 800a346:	f7ff ffdb 	bl	800a300 <__mcmp>
 800a34a:	1e05      	subs	r5, r0, #0
 800a34c:	d110      	bne.n	800a370 <__mdiff+0x38>
 800a34e:	0001      	movs	r1, r0
 800a350:	0038      	movs	r0, r7
 800a352:	f7ff fd05 	bl	8009d60 <_Balloc>
 800a356:	1e02      	subs	r2, r0, #0
 800a358:	d104      	bne.n	800a364 <__mdiff+0x2c>
 800a35a:	4b40      	ldr	r3, [pc, #256]	; (800a45c <__mdiff+0x124>)
 800a35c:	4940      	ldr	r1, [pc, #256]	; (800a460 <__mdiff+0x128>)
 800a35e:	4841      	ldr	r0, [pc, #260]	; (800a464 <__mdiff+0x12c>)
 800a360:	f000 fb7c 	bl	800aa5c <__assert_func>
 800a364:	2301      	movs	r3, #1
 800a366:	6145      	str	r5, [r0, #20]
 800a368:	6103      	str	r3, [r0, #16]
 800a36a:	0010      	movs	r0, r2
 800a36c:	b007      	add	sp, #28
 800a36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a370:	2301      	movs	r3, #1
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	2800      	cmp	r0, #0
 800a376:	db04      	blt.n	800a382 <__mdiff+0x4a>
 800a378:	0023      	movs	r3, r4
 800a37a:	0034      	movs	r4, r6
 800a37c:	001e      	movs	r6, r3
 800a37e:	2300      	movs	r3, #0
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	0038      	movs	r0, r7
 800a384:	6861      	ldr	r1, [r4, #4]
 800a386:	f7ff fceb 	bl	8009d60 <_Balloc>
 800a38a:	1e02      	subs	r2, r0, #0
 800a38c:	d103      	bne.n	800a396 <__mdiff+0x5e>
 800a38e:	2190      	movs	r1, #144	; 0x90
 800a390:	4b32      	ldr	r3, [pc, #200]	; (800a45c <__mdiff+0x124>)
 800a392:	0089      	lsls	r1, r1, #2
 800a394:	e7e3      	b.n	800a35e <__mdiff+0x26>
 800a396:	9b01      	ldr	r3, [sp, #4]
 800a398:	2700      	movs	r7, #0
 800a39a:	60c3      	str	r3, [r0, #12]
 800a39c:	6920      	ldr	r0, [r4, #16]
 800a39e:	3414      	adds	r4, #20
 800a3a0:	9401      	str	r4, [sp, #4]
 800a3a2:	9b01      	ldr	r3, [sp, #4]
 800a3a4:	0084      	lsls	r4, r0, #2
 800a3a6:	191b      	adds	r3, r3, r4
 800a3a8:	0034      	movs	r4, r6
 800a3aa:	9302      	str	r3, [sp, #8]
 800a3ac:	6933      	ldr	r3, [r6, #16]
 800a3ae:	3414      	adds	r4, #20
 800a3b0:	0099      	lsls	r1, r3, #2
 800a3b2:	1863      	adds	r3, r4, r1
 800a3b4:	9303      	str	r3, [sp, #12]
 800a3b6:	0013      	movs	r3, r2
 800a3b8:	3314      	adds	r3, #20
 800a3ba:	469c      	mov	ip, r3
 800a3bc:	9305      	str	r3, [sp, #20]
 800a3be:	9b01      	ldr	r3, [sp, #4]
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	9b04      	ldr	r3, [sp, #16]
 800a3c4:	cc02      	ldmia	r4!, {r1}
 800a3c6:	cb20      	ldmia	r3!, {r5}
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	b2ab      	uxth	r3, r5
 800a3cc:	19df      	adds	r7, r3, r7
 800a3ce:	b28b      	uxth	r3, r1
 800a3d0:	1afb      	subs	r3, r7, r3
 800a3d2:	0c09      	lsrs	r1, r1, #16
 800a3d4:	0c2d      	lsrs	r5, r5, #16
 800a3d6:	1a6d      	subs	r5, r5, r1
 800a3d8:	1419      	asrs	r1, r3, #16
 800a3da:	186d      	adds	r5, r5, r1
 800a3dc:	4661      	mov	r1, ip
 800a3de:	142f      	asrs	r7, r5, #16
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	042d      	lsls	r5, r5, #16
 800a3e4:	432b      	orrs	r3, r5
 800a3e6:	c108      	stmia	r1!, {r3}
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	468c      	mov	ip, r1
 800a3ec:	42a3      	cmp	r3, r4
 800a3ee:	d8e8      	bhi.n	800a3c2 <__mdiff+0x8a>
 800a3f0:	0031      	movs	r1, r6
 800a3f2:	9c03      	ldr	r4, [sp, #12]
 800a3f4:	3115      	adds	r1, #21
 800a3f6:	2304      	movs	r3, #4
 800a3f8:	428c      	cmp	r4, r1
 800a3fa:	d304      	bcc.n	800a406 <__mdiff+0xce>
 800a3fc:	1ba3      	subs	r3, r4, r6
 800a3fe:	3b15      	subs	r3, #21
 800a400:	089b      	lsrs	r3, r3, #2
 800a402:	3301      	adds	r3, #1
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	9901      	ldr	r1, [sp, #4]
 800a408:	18cc      	adds	r4, r1, r3
 800a40a:	9905      	ldr	r1, [sp, #20]
 800a40c:	0026      	movs	r6, r4
 800a40e:	18cb      	adds	r3, r1, r3
 800a410:	469c      	mov	ip, r3
 800a412:	9902      	ldr	r1, [sp, #8]
 800a414:	428e      	cmp	r6, r1
 800a416:	d310      	bcc.n	800a43a <__mdiff+0x102>
 800a418:	9e02      	ldr	r6, [sp, #8]
 800a41a:	1ee1      	subs	r1, r4, #3
 800a41c:	2500      	movs	r5, #0
 800a41e:	428e      	cmp	r6, r1
 800a420:	d304      	bcc.n	800a42c <__mdiff+0xf4>
 800a422:	0031      	movs	r1, r6
 800a424:	3103      	adds	r1, #3
 800a426:	1b0c      	subs	r4, r1, r4
 800a428:	08a4      	lsrs	r4, r4, #2
 800a42a:	00a5      	lsls	r5, r4, #2
 800a42c:	195b      	adds	r3, r3, r5
 800a42e:	3b04      	subs	r3, #4
 800a430:	6819      	ldr	r1, [r3, #0]
 800a432:	2900      	cmp	r1, #0
 800a434:	d00f      	beq.n	800a456 <__mdiff+0x11e>
 800a436:	6110      	str	r0, [r2, #16]
 800a438:	e797      	b.n	800a36a <__mdiff+0x32>
 800a43a:	ce02      	ldmia	r6!, {r1}
 800a43c:	b28d      	uxth	r5, r1
 800a43e:	19ed      	adds	r5, r5, r7
 800a440:	0c0f      	lsrs	r7, r1, #16
 800a442:	1429      	asrs	r1, r5, #16
 800a444:	1879      	adds	r1, r7, r1
 800a446:	140f      	asrs	r7, r1, #16
 800a448:	b2ad      	uxth	r5, r5
 800a44a:	0409      	lsls	r1, r1, #16
 800a44c:	430d      	orrs	r5, r1
 800a44e:	4661      	mov	r1, ip
 800a450:	c120      	stmia	r1!, {r5}
 800a452:	468c      	mov	ip, r1
 800a454:	e7dd      	b.n	800a412 <__mdiff+0xda>
 800a456:	3801      	subs	r0, #1
 800a458:	e7e9      	b.n	800a42e <__mdiff+0xf6>
 800a45a:	46c0      	nop			; (mov r8, r8)
 800a45c:	0800b97f 	.word	0x0800b97f
 800a460:	00000232 	.word	0x00000232
 800a464:	0800ba0c 	.word	0x0800ba0c

0800a468 <__ulp>:
 800a468:	4b0f      	ldr	r3, [pc, #60]	; (800a4a8 <__ulp+0x40>)
 800a46a:	4019      	ands	r1, r3
 800a46c:	4b0f      	ldr	r3, [pc, #60]	; (800a4ac <__ulp+0x44>)
 800a46e:	18c9      	adds	r1, r1, r3
 800a470:	2900      	cmp	r1, #0
 800a472:	dd04      	ble.n	800a47e <__ulp+0x16>
 800a474:	2200      	movs	r2, #0
 800a476:	000b      	movs	r3, r1
 800a478:	0010      	movs	r0, r2
 800a47a:	0019      	movs	r1, r3
 800a47c:	4770      	bx	lr
 800a47e:	4249      	negs	r1, r1
 800a480:	2200      	movs	r2, #0
 800a482:	2300      	movs	r3, #0
 800a484:	1509      	asrs	r1, r1, #20
 800a486:	2913      	cmp	r1, #19
 800a488:	dc04      	bgt.n	800a494 <__ulp+0x2c>
 800a48a:	2080      	movs	r0, #128	; 0x80
 800a48c:	0300      	lsls	r0, r0, #12
 800a48e:	4108      	asrs	r0, r1
 800a490:	0003      	movs	r3, r0
 800a492:	e7f1      	b.n	800a478 <__ulp+0x10>
 800a494:	3914      	subs	r1, #20
 800a496:	2001      	movs	r0, #1
 800a498:	291e      	cmp	r1, #30
 800a49a:	dc02      	bgt.n	800a4a2 <__ulp+0x3a>
 800a49c:	2080      	movs	r0, #128	; 0x80
 800a49e:	0600      	lsls	r0, r0, #24
 800a4a0:	40c8      	lsrs	r0, r1
 800a4a2:	0002      	movs	r2, r0
 800a4a4:	e7e8      	b.n	800a478 <__ulp+0x10>
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	7ff00000 	.word	0x7ff00000
 800a4ac:	fcc00000 	.word	0xfcc00000

0800a4b0 <__b2d>:
 800a4b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4b2:	0006      	movs	r6, r0
 800a4b4:	6903      	ldr	r3, [r0, #16]
 800a4b6:	3614      	adds	r6, #20
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	18f3      	adds	r3, r6, r3
 800a4bc:	1f1d      	subs	r5, r3, #4
 800a4be:	682c      	ldr	r4, [r5, #0]
 800a4c0:	000f      	movs	r7, r1
 800a4c2:	0020      	movs	r0, r4
 800a4c4:	9301      	str	r3, [sp, #4]
 800a4c6:	f7ff fd43 	bl	8009f50 <__hi0bits>
 800a4ca:	2320      	movs	r3, #32
 800a4cc:	1a1b      	subs	r3, r3, r0
 800a4ce:	491f      	ldr	r1, [pc, #124]	; (800a54c <__b2d+0x9c>)
 800a4d0:	603b      	str	r3, [r7, #0]
 800a4d2:	280a      	cmp	r0, #10
 800a4d4:	dc16      	bgt.n	800a504 <__b2d+0x54>
 800a4d6:	230b      	movs	r3, #11
 800a4d8:	0027      	movs	r7, r4
 800a4da:	1a1b      	subs	r3, r3, r0
 800a4dc:	40df      	lsrs	r7, r3
 800a4de:	4339      	orrs	r1, r7
 800a4e0:	469c      	mov	ip, r3
 800a4e2:	000b      	movs	r3, r1
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	42ae      	cmp	r6, r5
 800a4e8:	d202      	bcs.n	800a4f0 <__b2d+0x40>
 800a4ea:	9901      	ldr	r1, [sp, #4]
 800a4ec:	3908      	subs	r1, #8
 800a4ee:	6809      	ldr	r1, [r1, #0]
 800a4f0:	3015      	adds	r0, #21
 800a4f2:	4084      	lsls	r4, r0
 800a4f4:	4660      	mov	r0, ip
 800a4f6:	40c1      	lsrs	r1, r0
 800a4f8:	430c      	orrs	r4, r1
 800a4fa:	0022      	movs	r2, r4
 800a4fc:	0010      	movs	r0, r2
 800a4fe:	0019      	movs	r1, r3
 800a500:	b003      	add	sp, #12
 800a502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a504:	2700      	movs	r7, #0
 800a506:	42ae      	cmp	r6, r5
 800a508:	d202      	bcs.n	800a510 <__b2d+0x60>
 800a50a:	9d01      	ldr	r5, [sp, #4]
 800a50c:	3d08      	subs	r5, #8
 800a50e:	682f      	ldr	r7, [r5, #0]
 800a510:	230b      	movs	r3, #11
 800a512:	425b      	negs	r3, r3
 800a514:	469c      	mov	ip, r3
 800a516:	4484      	add	ip, r0
 800a518:	280b      	cmp	r0, #11
 800a51a:	d013      	beq.n	800a544 <__b2d+0x94>
 800a51c:	4663      	mov	r3, ip
 800a51e:	2020      	movs	r0, #32
 800a520:	409c      	lsls	r4, r3
 800a522:	1ac0      	subs	r0, r0, r3
 800a524:	003b      	movs	r3, r7
 800a526:	40c3      	lsrs	r3, r0
 800a528:	431c      	orrs	r4, r3
 800a52a:	4321      	orrs	r1, r4
 800a52c:	000b      	movs	r3, r1
 800a52e:	2100      	movs	r1, #0
 800a530:	42b5      	cmp	r5, r6
 800a532:	d901      	bls.n	800a538 <__b2d+0x88>
 800a534:	3d04      	subs	r5, #4
 800a536:	6829      	ldr	r1, [r5, #0]
 800a538:	4664      	mov	r4, ip
 800a53a:	40c1      	lsrs	r1, r0
 800a53c:	40a7      	lsls	r7, r4
 800a53e:	430f      	orrs	r7, r1
 800a540:	003a      	movs	r2, r7
 800a542:	e7db      	b.n	800a4fc <__b2d+0x4c>
 800a544:	4321      	orrs	r1, r4
 800a546:	000b      	movs	r3, r1
 800a548:	e7fa      	b.n	800a540 <__b2d+0x90>
 800a54a:	46c0      	nop			; (mov r8, r8)
 800a54c:	3ff00000 	.word	0x3ff00000

0800a550 <__d2b>:
 800a550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a552:	2101      	movs	r1, #1
 800a554:	0014      	movs	r4, r2
 800a556:	001e      	movs	r6, r3
 800a558:	9f08      	ldr	r7, [sp, #32]
 800a55a:	f7ff fc01 	bl	8009d60 <_Balloc>
 800a55e:	1e05      	subs	r5, r0, #0
 800a560:	d105      	bne.n	800a56e <__d2b+0x1e>
 800a562:	0002      	movs	r2, r0
 800a564:	4b26      	ldr	r3, [pc, #152]	; (800a600 <__d2b+0xb0>)
 800a566:	4927      	ldr	r1, [pc, #156]	; (800a604 <__d2b+0xb4>)
 800a568:	4827      	ldr	r0, [pc, #156]	; (800a608 <__d2b+0xb8>)
 800a56a:	f000 fa77 	bl	800aa5c <__assert_func>
 800a56e:	0333      	lsls	r3, r6, #12
 800a570:	0076      	lsls	r6, r6, #1
 800a572:	0b1b      	lsrs	r3, r3, #12
 800a574:	0d76      	lsrs	r6, r6, #21
 800a576:	d124      	bne.n	800a5c2 <__d2b+0x72>
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	2c00      	cmp	r4, #0
 800a57c:	d027      	beq.n	800a5ce <__d2b+0x7e>
 800a57e:	4668      	mov	r0, sp
 800a580:	9400      	str	r4, [sp, #0]
 800a582:	f7ff fcff 	bl	8009f84 <__lo0bits>
 800a586:	9c00      	ldr	r4, [sp, #0]
 800a588:	2800      	cmp	r0, #0
 800a58a:	d01e      	beq.n	800a5ca <__d2b+0x7a>
 800a58c:	9b01      	ldr	r3, [sp, #4]
 800a58e:	2120      	movs	r1, #32
 800a590:	001a      	movs	r2, r3
 800a592:	1a09      	subs	r1, r1, r0
 800a594:	408a      	lsls	r2, r1
 800a596:	40c3      	lsrs	r3, r0
 800a598:	4322      	orrs	r2, r4
 800a59a:	616a      	str	r2, [r5, #20]
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	9c01      	ldr	r4, [sp, #4]
 800a5a0:	61ac      	str	r4, [r5, #24]
 800a5a2:	1e63      	subs	r3, r4, #1
 800a5a4:	419c      	sbcs	r4, r3
 800a5a6:	3401      	adds	r4, #1
 800a5a8:	612c      	str	r4, [r5, #16]
 800a5aa:	2e00      	cmp	r6, #0
 800a5ac:	d018      	beq.n	800a5e0 <__d2b+0x90>
 800a5ae:	4b17      	ldr	r3, [pc, #92]	; (800a60c <__d2b+0xbc>)
 800a5b0:	18f6      	adds	r6, r6, r3
 800a5b2:	2335      	movs	r3, #53	; 0x35
 800a5b4:	1836      	adds	r6, r6, r0
 800a5b6:	1a18      	subs	r0, r3, r0
 800a5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ba:	603e      	str	r6, [r7, #0]
 800a5bc:	6018      	str	r0, [r3, #0]
 800a5be:	0028      	movs	r0, r5
 800a5c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5c2:	2280      	movs	r2, #128	; 0x80
 800a5c4:	0352      	lsls	r2, r2, #13
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	e7d6      	b.n	800a578 <__d2b+0x28>
 800a5ca:	616c      	str	r4, [r5, #20]
 800a5cc:	e7e7      	b.n	800a59e <__d2b+0x4e>
 800a5ce:	a801      	add	r0, sp, #4
 800a5d0:	f7ff fcd8 	bl	8009f84 <__lo0bits>
 800a5d4:	2401      	movs	r4, #1
 800a5d6:	9b01      	ldr	r3, [sp, #4]
 800a5d8:	612c      	str	r4, [r5, #16]
 800a5da:	616b      	str	r3, [r5, #20]
 800a5dc:	3020      	adds	r0, #32
 800a5de:	e7e4      	b.n	800a5aa <__d2b+0x5a>
 800a5e0:	4b0b      	ldr	r3, [pc, #44]	; (800a610 <__d2b+0xc0>)
 800a5e2:	18c0      	adds	r0, r0, r3
 800a5e4:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <__d2b+0xc4>)
 800a5e6:	6038      	str	r0, [r7, #0]
 800a5e8:	18e3      	adds	r3, r4, r3
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	18eb      	adds	r3, r5, r3
 800a5ee:	6958      	ldr	r0, [r3, #20]
 800a5f0:	f7ff fcae 	bl	8009f50 <__hi0bits>
 800a5f4:	0164      	lsls	r4, r4, #5
 800a5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f8:	1a24      	subs	r4, r4, r0
 800a5fa:	601c      	str	r4, [r3, #0]
 800a5fc:	e7df      	b.n	800a5be <__d2b+0x6e>
 800a5fe:	46c0      	nop			; (mov r8, r8)
 800a600:	0800b97f 	.word	0x0800b97f
 800a604:	0000030a 	.word	0x0000030a
 800a608:	0800ba0c 	.word	0x0800ba0c
 800a60c:	fffffbcd 	.word	0xfffffbcd
 800a610:	fffffbce 	.word	0xfffffbce
 800a614:	3fffffff 	.word	0x3fffffff

0800a618 <__ratio>:
 800a618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a61a:	b087      	sub	sp, #28
 800a61c:	000f      	movs	r7, r1
 800a61e:	a904      	add	r1, sp, #16
 800a620:	0006      	movs	r6, r0
 800a622:	f7ff ff45 	bl	800a4b0 <__b2d>
 800a626:	9000      	str	r0, [sp, #0]
 800a628:	9101      	str	r1, [sp, #4]
 800a62a:	9c00      	ldr	r4, [sp, #0]
 800a62c:	9d01      	ldr	r5, [sp, #4]
 800a62e:	0038      	movs	r0, r7
 800a630:	a905      	add	r1, sp, #20
 800a632:	f7ff ff3d 	bl	800a4b0 <__b2d>
 800a636:	9002      	str	r0, [sp, #8]
 800a638:	9103      	str	r1, [sp, #12]
 800a63a:	9a02      	ldr	r2, [sp, #8]
 800a63c:	9b03      	ldr	r3, [sp, #12]
 800a63e:	6931      	ldr	r1, [r6, #16]
 800a640:	6938      	ldr	r0, [r7, #16]
 800a642:	9e05      	ldr	r6, [sp, #20]
 800a644:	1a08      	subs	r0, r1, r0
 800a646:	9904      	ldr	r1, [sp, #16]
 800a648:	0140      	lsls	r0, r0, #5
 800a64a:	1b89      	subs	r1, r1, r6
 800a64c:	1841      	adds	r1, r0, r1
 800a64e:	0508      	lsls	r0, r1, #20
 800a650:	2900      	cmp	r1, #0
 800a652:	dd07      	ble.n	800a664 <__ratio+0x4c>
 800a654:	9901      	ldr	r1, [sp, #4]
 800a656:	1845      	adds	r5, r0, r1
 800a658:	0020      	movs	r0, r4
 800a65a:	0029      	movs	r1, r5
 800a65c:	f7f6 fbba 	bl	8000dd4 <__aeabi_ddiv>
 800a660:	b007      	add	sp, #28
 800a662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a664:	9903      	ldr	r1, [sp, #12]
 800a666:	1a0b      	subs	r3, r1, r0
 800a668:	e7f6      	b.n	800a658 <__ratio+0x40>

0800a66a <__copybits>:
 800a66a:	b570      	push	{r4, r5, r6, lr}
 800a66c:	0014      	movs	r4, r2
 800a66e:	0005      	movs	r5, r0
 800a670:	3901      	subs	r1, #1
 800a672:	6913      	ldr	r3, [r2, #16]
 800a674:	1149      	asrs	r1, r1, #5
 800a676:	3101      	adds	r1, #1
 800a678:	0089      	lsls	r1, r1, #2
 800a67a:	3414      	adds	r4, #20
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	1841      	adds	r1, r0, r1
 800a680:	18e3      	adds	r3, r4, r3
 800a682:	42a3      	cmp	r3, r4
 800a684:	d80d      	bhi.n	800a6a2 <__copybits+0x38>
 800a686:	0014      	movs	r4, r2
 800a688:	3411      	adds	r4, #17
 800a68a:	2500      	movs	r5, #0
 800a68c:	429c      	cmp	r4, r3
 800a68e:	d803      	bhi.n	800a698 <__copybits+0x2e>
 800a690:	1a9b      	subs	r3, r3, r2
 800a692:	3b11      	subs	r3, #17
 800a694:	089b      	lsrs	r3, r3, #2
 800a696:	009d      	lsls	r5, r3, #2
 800a698:	2300      	movs	r3, #0
 800a69a:	1940      	adds	r0, r0, r5
 800a69c:	4281      	cmp	r1, r0
 800a69e:	d803      	bhi.n	800a6a8 <__copybits+0x3e>
 800a6a0:	bd70      	pop	{r4, r5, r6, pc}
 800a6a2:	cc40      	ldmia	r4!, {r6}
 800a6a4:	c540      	stmia	r5!, {r6}
 800a6a6:	e7ec      	b.n	800a682 <__copybits+0x18>
 800a6a8:	c008      	stmia	r0!, {r3}
 800a6aa:	e7f7      	b.n	800a69c <__copybits+0x32>

0800a6ac <__any_on>:
 800a6ac:	0002      	movs	r2, r0
 800a6ae:	6900      	ldr	r0, [r0, #16]
 800a6b0:	b510      	push	{r4, lr}
 800a6b2:	3214      	adds	r2, #20
 800a6b4:	114b      	asrs	r3, r1, #5
 800a6b6:	4298      	cmp	r0, r3
 800a6b8:	db13      	blt.n	800a6e2 <__any_on+0x36>
 800a6ba:	dd0c      	ble.n	800a6d6 <__any_on+0x2a>
 800a6bc:	241f      	movs	r4, #31
 800a6be:	0008      	movs	r0, r1
 800a6c0:	4020      	ands	r0, r4
 800a6c2:	4221      	tst	r1, r4
 800a6c4:	d007      	beq.n	800a6d6 <__any_on+0x2a>
 800a6c6:	0099      	lsls	r1, r3, #2
 800a6c8:	588c      	ldr	r4, [r1, r2]
 800a6ca:	0021      	movs	r1, r4
 800a6cc:	40c1      	lsrs	r1, r0
 800a6ce:	4081      	lsls	r1, r0
 800a6d0:	2001      	movs	r0, #1
 800a6d2:	428c      	cmp	r4, r1
 800a6d4:	d104      	bne.n	800a6e0 <__any_on+0x34>
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	18d3      	adds	r3, r2, r3
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d803      	bhi.n	800a6e6 <__any_on+0x3a>
 800a6de:	2000      	movs	r0, #0
 800a6e0:	bd10      	pop	{r4, pc}
 800a6e2:	0003      	movs	r3, r0
 800a6e4:	e7f7      	b.n	800a6d6 <__any_on+0x2a>
 800a6e6:	3b04      	subs	r3, #4
 800a6e8:	6819      	ldr	r1, [r3, #0]
 800a6ea:	2900      	cmp	r1, #0
 800a6ec:	d0f5      	beq.n	800a6da <__any_on+0x2e>
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	e7f6      	b.n	800a6e0 <__any_on+0x34>

0800a6f2 <_calloc_r>:
 800a6f2:	b570      	push	{r4, r5, r6, lr}
 800a6f4:	0c13      	lsrs	r3, r2, #16
 800a6f6:	0c0d      	lsrs	r5, r1, #16
 800a6f8:	d11e      	bne.n	800a738 <_calloc_r+0x46>
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10c      	bne.n	800a718 <_calloc_r+0x26>
 800a6fe:	b289      	uxth	r1, r1
 800a700:	b294      	uxth	r4, r2
 800a702:	434c      	muls	r4, r1
 800a704:	0021      	movs	r1, r4
 800a706:	f7fc faf7 	bl	8006cf8 <_malloc_r>
 800a70a:	1e05      	subs	r5, r0, #0
 800a70c:	d01b      	beq.n	800a746 <_calloc_r+0x54>
 800a70e:	0022      	movs	r2, r4
 800a710:	2100      	movs	r1, #0
 800a712:	f7fc fa7c 	bl	8006c0e <memset>
 800a716:	e016      	b.n	800a746 <_calloc_r+0x54>
 800a718:	1c1d      	adds	r5, r3, #0
 800a71a:	1c0b      	adds	r3, r1, #0
 800a71c:	b292      	uxth	r2, r2
 800a71e:	b289      	uxth	r1, r1
 800a720:	b29c      	uxth	r4, r3
 800a722:	4351      	muls	r1, r2
 800a724:	b2ab      	uxth	r3, r5
 800a726:	4363      	muls	r3, r4
 800a728:	0c0c      	lsrs	r4, r1, #16
 800a72a:	191c      	adds	r4, r3, r4
 800a72c:	0c22      	lsrs	r2, r4, #16
 800a72e:	d107      	bne.n	800a740 <_calloc_r+0x4e>
 800a730:	0424      	lsls	r4, r4, #16
 800a732:	b289      	uxth	r1, r1
 800a734:	430c      	orrs	r4, r1
 800a736:	e7e5      	b.n	800a704 <_calloc_r+0x12>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d101      	bne.n	800a740 <_calloc_r+0x4e>
 800a73c:	1c13      	adds	r3, r2, #0
 800a73e:	e7ed      	b.n	800a71c <_calloc_r+0x2a>
 800a740:	230c      	movs	r3, #12
 800a742:	2500      	movs	r5, #0
 800a744:	6003      	str	r3, [r0, #0]
 800a746:	0028      	movs	r0, r5
 800a748:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a74c <__ssputs_r>:
 800a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74e:	688e      	ldr	r6, [r1, #8]
 800a750:	b085      	sub	sp, #20
 800a752:	0007      	movs	r7, r0
 800a754:	000c      	movs	r4, r1
 800a756:	9203      	str	r2, [sp, #12]
 800a758:	9301      	str	r3, [sp, #4]
 800a75a:	429e      	cmp	r6, r3
 800a75c:	d83c      	bhi.n	800a7d8 <__ssputs_r+0x8c>
 800a75e:	2390      	movs	r3, #144	; 0x90
 800a760:	898a      	ldrh	r2, [r1, #12]
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	421a      	tst	r2, r3
 800a766:	d034      	beq.n	800a7d2 <__ssputs_r+0x86>
 800a768:	6909      	ldr	r1, [r1, #16]
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	6960      	ldr	r0, [r4, #20]
 800a76e:	1a5b      	subs	r3, r3, r1
 800a770:	9302      	str	r3, [sp, #8]
 800a772:	2303      	movs	r3, #3
 800a774:	4343      	muls	r3, r0
 800a776:	0fdd      	lsrs	r5, r3, #31
 800a778:	18ed      	adds	r5, r5, r3
 800a77a:	9b01      	ldr	r3, [sp, #4]
 800a77c:	9802      	ldr	r0, [sp, #8]
 800a77e:	3301      	adds	r3, #1
 800a780:	181b      	adds	r3, r3, r0
 800a782:	106d      	asrs	r5, r5, #1
 800a784:	42ab      	cmp	r3, r5
 800a786:	d900      	bls.n	800a78a <__ssputs_r+0x3e>
 800a788:	001d      	movs	r5, r3
 800a78a:	0553      	lsls	r3, r2, #21
 800a78c:	d532      	bpl.n	800a7f4 <__ssputs_r+0xa8>
 800a78e:	0029      	movs	r1, r5
 800a790:	0038      	movs	r0, r7
 800a792:	f7fc fab1 	bl	8006cf8 <_malloc_r>
 800a796:	1e06      	subs	r6, r0, #0
 800a798:	d109      	bne.n	800a7ae <__ssputs_r+0x62>
 800a79a:	230c      	movs	r3, #12
 800a79c:	603b      	str	r3, [r7, #0]
 800a79e:	2340      	movs	r3, #64	; 0x40
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	89a2      	ldrh	r2, [r4, #12]
 800a7a4:	4240      	negs	r0, r0
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	b005      	add	sp, #20
 800a7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ae:	9a02      	ldr	r2, [sp, #8]
 800a7b0:	6921      	ldr	r1, [r4, #16]
 800a7b2:	f7fc fa23 	bl	8006bfc <memcpy>
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	4a14      	ldr	r2, [pc, #80]	; (800a80c <__ssputs_r+0xc0>)
 800a7ba:	401a      	ands	r2, r3
 800a7bc:	2380      	movs	r3, #128	; 0x80
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	81a3      	strh	r3, [r4, #12]
 800a7c2:	9b02      	ldr	r3, [sp, #8]
 800a7c4:	6126      	str	r6, [r4, #16]
 800a7c6:	18f6      	adds	r6, r6, r3
 800a7c8:	6026      	str	r6, [r4, #0]
 800a7ca:	6165      	str	r5, [r4, #20]
 800a7cc:	9e01      	ldr	r6, [sp, #4]
 800a7ce:	1aed      	subs	r5, r5, r3
 800a7d0:	60a5      	str	r5, [r4, #8]
 800a7d2:	9b01      	ldr	r3, [sp, #4]
 800a7d4:	429e      	cmp	r6, r3
 800a7d6:	d900      	bls.n	800a7da <__ssputs_r+0x8e>
 800a7d8:	9e01      	ldr	r6, [sp, #4]
 800a7da:	0032      	movs	r2, r6
 800a7dc:	9903      	ldr	r1, [sp, #12]
 800a7de:	6820      	ldr	r0, [r4, #0]
 800a7e0:	f000 f96d 	bl	800aabe <memmove>
 800a7e4:	68a3      	ldr	r3, [r4, #8]
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	1b9b      	subs	r3, r3, r6
 800a7ea:	60a3      	str	r3, [r4, #8]
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	199e      	adds	r6, r3, r6
 800a7f0:	6026      	str	r6, [r4, #0]
 800a7f2:	e7da      	b.n	800a7aa <__ssputs_r+0x5e>
 800a7f4:	002a      	movs	r2, r5
 800a7f6:	0038      	movs	r0, r7
 800a7f8:	f000 f974 	bl	800aae4 <_realloc_r>
 800a7fc:	1e06      	subs	r6, r0, #0
 800a7fe:	d1e0      	bne.n	800a7c2 <__ssputs_r+0x76>
 800a800:	0038      	movs	r0, r7
 800a802:	6921      	ldr	r1, [r4, #16]
 800a804:	f7fc fa0c 	bl	8006c20 <_free_r>
 800a808:	e7c7      	b.n	800a79a <__ssputs_r+0x4e>
 800a80a:	46c0      	nop			; (mov r8, r8)
 800a80c:	fffffb7f 	.word	0xfffffb7f

0800a810 <_svfiprintf_r>:
 800a810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a812:	b0a1      	sub	sp, #132	; 0x84
 800a814:	9003      	str	r0, [sp, #12]
 800a816:	001d      	movs	r5, r3
 800a818:	898b      	ldrh	r3, [r1, #12]
 800a81a:	000f      	movs	r7, r1
 800a81c:	0016      	movs	r6, r2
 800a81e:	061b      	lsls	r3, r3, #24
 800a820:	d511      	bpl.n	800a846 <_svfiprintf_r+0x36>
 800a822:	690b      	ldr	r3, [r1, #16]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10e      	bne.n	800a846 <_svfiprintf_r+0x36>
 800a828:	2140      	movs	r1, #64	; 0x40
 800a82a:	f7fc fa65 	bl	8006cf8 <_malloc_r>
 800a82e:	6038      	str	r0, [r7, #0]
 800a830:	6138      	str	r0, [r7, #16]
 800a832:	2800      	cmp	r0, #0
 800a834:	d105      	bne.n	800a842 <_svfiprintf_r+0x32>
 800a836:	230c      	movs	r3, #12
 800a838:	9a03      	ldr	r2, [sp, #12]
 800a83a:	3801      	subs	r0, #1
 800a83c:	6013      	str	r3, [r2, #0]
 800a83e:	b021      	add	sp, #132	; 0x84
 800a840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a842:	2340      	movs	r3, #64	; 0x40
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	2300      	movs	r3, #0
 800a848:	ac08      	add	r4, sp, #32
 800a84a:	6163      	str	r3, [r4, #20]
 800a84c:	3320      	adds	r3, #32
 800a84e:	7663      	strb	r3, [r4, #25]
 800a850:	3310      	adds	r3, #16
 800a852:	76a3      	strb	r3, [r4, #26]
 800a854:	9507      	str	r5, [sp, #28]
 800a856:	0035      	movs	r5, r6
 800a858:	782b      	ldrb	r3, [r5, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <_svfiprintf_r+0x52>
 800a85e:	2b25      	cmp	r3, #37	; 0x25
 800a860:	d147      	bne.n	800a8f2 <_svfiprintf_r+0xe2>
 800a862:	1bab      	subs	r3, r5, r6
 800a864:	9305      	str	r3, [sp, #20]
 800a866:	42b5      	cmp	r5, r6
 800a868:	d00c      	beq.n	800a884 <_svfiprintf_r+0x74>
 800a86a:	0032      	movs	r2, r6
 800a86c:	0039      	movs	r1, r7
 800a86e:	9803      	ldr	r0, [sp, #12]
 800a870:	f7ff ff6c 	bl	800a74c <__ssputs_r>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d100      	bne.n	800a87a <_svfiprintf_r+0x6a>
 800a878:	e0ae      	b.n	800a9d8 <_svfiprintf_r+0x1c8>
 800a87a:	6962      	ldr	r2, [r4, #20]
 800a87c:	9b05      	ldr	r3, [sp, #20]
 800a87e:	4694      	mov	ip, r2
 800a880:	4463      	add	r3, ip
 800a882:	6163      	str	r3, [r4, #20]
 800a884:	782b      	ldrb	r3, [r5, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d100      	bne.n	800a88c <_svfiprintf_r+0x7c>
 800a88a:	e0a5      	b.n	800a9d8 <_svfiprintf_r+0x1c8>
 800a88c:	2201      	movs	r2, #1
 800a88e:	2300      	movs	r3, #0
 800a890:	4252      	negs	r2, r2
 800a892:	6062      	str	r2, [r4, #4]
 800a894:	a904      	add	r1, sp, #16
 800a896:	3254      	adds	r2, #84	; 0x54
 800a898:	1852      	adds	r2, r2, r1
 800a89a:	1c6e      	adds	r6, r5, #1
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	60e3      	str	r3, [r4, #12]
 800a8a0:	60a3      	str	r3, [r4, #8]
 800a8a2:	7013      	strb	r3, [r2, #0]
 800a8a4:	65a3      	str	r3, [r4, #88]	; 0x58
 800a8a6:	2205      	movs	r2, #5
 800a8a8:	7831      	ldrb	r1, [r6, #0]
 800a8aa:	4854      	ldr	r0, [pc, #336]	; (800a9fc <_svfiprintf_r+0x1ec>)
 800a8ac:	f7ff fa3c 	bl	8009d28 <memchr>
 800a8b0:	1c75      	adds	r5, r6, #1
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d11f      	bne.n	800a8f6 <_svfiprintf_r+0xe6>
 800a8b6:	6822      	ldr	r2, [r4, #0]
 800a8b8:	06d3      	lsls	r3, r2, #27
 800a8ba:	d504      	bpl.n	800a8c6 <_svfiprintf_r+0xb6>
 800a8bc:	2353      	movs	r3, #83	; 0x53
 800a8be:	a904      	add	r1, sp, #16
 800a8c0:	185b      	adds	r3, r3, r1
 800a8c2:	2120      	movs	r1, #32
 800a8c4:	7019      	strb	r1, [r3, #0]
 800a8c6:	0713      	lsls	r3, r2, #28
 800a8c8:	d504      	bpl.n	800a8d4 <_svfiprintf_r+0xc4>
 800a8ca:	2353      	movs	r3, #83	; 0x53
 800a8cc:	a904      	add	r1, sp, #16
 800a8ce:	185b      	adds	r3, r3, r1
 800a8d0:	212b      	movs	r1, #43	; 0x2b
 800a8d2:	7019      	strb	r1, [r3, #0]
 800a8d4:	7833      	ldrb	r3, [r6, #0]
 800a8d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d8:	d016      	beq.n	800a908 <_svfiprintf_r+0xf8>
 800a8da:	0035      	movs	r5, r6
 800a8dc:	2100      	movs	r1, #0
 800a8de:	200a      	movs	r0, #10
 800a8e0:	68e3      	ldr	r3, [r4, #12]
 800a8e2:	782a      	ldrb	r2, [r5, #0]
 800a8e4:	1c6e      	adds	r6, r5, #1
 800a8e6:	3a30      	subs	r2, #48	; 0x30
 800a8e8:	2a09      	cmp	r2, #9
 800a8ea:	d94e      	bls.n	800a98a <_svfiprintf_r+0x17a>
 800a8ec:	2900      	cmp	r1, #0
 800a8ee:	d111      	bne.n	800a914 <_svfiprintf_r+0x104>
 800a8f0:	e017      	b.n	800a922 <_svfiprintf_r+0x112>
 800a8f2:	3501      	adds	r5, #1
 800a8f4:	e7b0      	b.n	800a858 <_svfiprintf_r+0x48>
 800a8f6:	4b41      	ldr	r3, [pc, #260]	; (800a9fc <_svfiprintf_r+0x1ec>)
 800a8f8:	6822      	ldr	r2, [r4, #0]
 800a8fa:	1ac0      	subs	r0, r0, r3
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	4083      	lsls	r3, r0
 800a900:	4313      	orrs	r3, r2
 800a902:	002e      	movs	r6, r5
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	e7ce      	b.n	800a8a6 <_svfiprintf_r+0x96>
 800a908:	9b07      	ldr	r3, [sp, #28]
 800a90a:	1d19      	adds	r1, r3, #4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	9107      	str	r1, [sp, #28]
 800a910:	2b00      	cmp	r3, #0
 800a912:	db01      	blt.n	800a918 <_svfiprintf_r+0x108>
 800a914:	930b      	str	r3, [sp, #44]	; 0x2c
 800a916:	e004      	b.n	800a922 <_svfiprintf_r+0x112>
 800a918:	425b      	negs	r3, r3
 800a91a:	60e3      	str	r3, [r4, #12]
 800a91c:	2302      	movs	r3, #2
 800a91e:	4313      	orrs	r3, r2
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	782b      	ldrb	r3, [r5, #0]
 800a924:	2b2e      	cmp	r3, #46	; 0x2e
 800a926:	d10a      	bne.n	800a93e <_svfiprintf_r+0x12e>
 800a928:	786b      	ldrb	r3, [r5, #1]
 800a92a:	2b2a      	cmp	r3, #42	; 0x2a
 800a92c:	d135      	bne.n	800a99a <_svfiprintf_r+0x18a>
 800a92e:	9b07      	ldr	r3, [sp, #28]
 800a930:	3502      	adds	r5, #2
 800a932:	1d1a      	adds	r2, r3, #4
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	9207      	str	r2, [sp, #28]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	db2b      	blt.n	800a994 <_svfiprintf_r+0x184>
 800a93c:	9309      	str	r3, [sp, #36]	; 0x24
 800a93e:	4e30      	ldr	r6, [pc, #192]	; (800aa00 <_svfiprintf_r+0x1f0>)
 800a940:	2203      	movs	r2, #3
 800a942:	0030      	movs	r0, r6
 800a944:	7829      	ldrb	r1, [r5, #0]
 800a946:	f7ff f9ef 	bl	8009d28 <memchr>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d006      	beq.n	800a95c <_svfiprintf_r+0x14c>
 800a94e:	2340      	movs	r3, #64	; 0x40
 800a950:	1b80      	subs	r0, r0, r6
 800a952:	4083      	lsls	r3, r0
 800a954:	6822      	ldr	r2, [r4, #0]
 800a956:	3501      	adds	r5, #1
 800a958:	4313      	orrs	r3, r2
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	7829      	ldrb	r1, [r5, #0]
 800a95e:	2206      	movs	r2, #6
 800a960:	4828      	ldr	r0, [pc, #160]	; (800aa04 <_svfiprintf_r+0x1f4>)
 800a962:	1c6e      	adds	r6, r5, #1
 800a964:	7621      	strb	r1, [r4, #24]
 800a966:	f7ff f9df 	bl	8009d28 <memchr>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d03c      	beq.n	800a9e8 <_svfiprintf_r+0x1d8>
 800a96e:	4b26      	ldr	r3, [pc, #152]	; (800aa08 <_svfiprintf_r+0x1f8>)
 800a970:	2b00      	cmp	r3, #0
 800a972:	d125      	bne.n	800a9c0 <_svfiprintf_r+0x1b0>
 800a974:	2207      	movs	r2, #7
 800a976:	9b07      	ldr	r3, [sp, #28]
 800a978:	3307      	adds	r3, #7
 800a97a:	4393      	bics	r3, r2
 800a97c:	3308      	adds	r3, #8
 800a97e:	9307      	str	r3, [sp, #28]
 800a980:	6963      	ldr	r3, [r4, #20]
 800a982:	9a04      	ldr	r2, [sp, #16]
 800a984:	189b      	adds	r3, r3, r2
 800a986:	6163      	str	r3, [r4, #20]
 800a988:	e765      	b.n	800a856 <_svfiprintf_r+0x46>
 800a98a:	4343      	muls	r3, r0
 800a98c:	0035      	movs	r5, r6
 800a98e:	2101      	movs	r1, #1
 800a990:	189b      	adds	r3, r3, r2
 800a992:	e7a6      	b.n	800a8e2 <_svfiprintf_r+0xd2>
 800a994:	2301      	movs	r3, #1
 800a996:	425b      	negs	r3, r3
 800a998:	e7d0      	b.n	800a93c <_svfiprintf_r+0x12c>
 800a99a:	2300      	movs	r3, #0
 800a99c:	200a      	movs	r0, #10
 800a99e:	001a      	movs	r2, r3
 800a9a0:	3501      	adds	r5, #1
 800a9a2:	6063      	str	r3, [r4, #4]
 800a9a4:	7829      	ldrb	r1, [r5, #0]
 800a9a6:	1c6e      	adds	r6, r5, #1
 800a9a8:	3930      	subs	r1, #48	; 0x30
 800a9aa:	2909      	cmp	r1, #9
 800a9ac:	d903      	bls.n	800a9b6 <_svfiprintf_r+0x1a6>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0c5      	beq.n	800a93e <_svfiprintf_r+0x12e>
 800a9b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9b4:	e7c3      	b.n	800a93e <_svfiprintf_r+0x12e>
 800a9b6:	4342      	muls	r2, r0
 800a9b8:	0035      	movs	r5, r6
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	1852      	adds	r2, r2, r1
 800a9be:	e7f1      	b.n	800a9a4 <_svfiprintf_r+0x194>
 800a9c0:	ab07      	add	r3, sp, #28
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	003a      	movs	r2, r7
 800a9c6:	0021      	movs	r1, r4
 800a9c8:	4b10      	ldr	r3, [pc, #64]	; (800aa0c <_svfiprintf_r+0x1fc>)
 800a9ca:	9803      	ldr	r0, [sp, #12]
 800a9cc:	f7fc fab4 	bl	8006f38 <_printf_float>
 800a9d0:	9004      	str	r0, [sp, #16]
 800a9d2:	9b04      	ldr	r3, [sp, #16]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	d1d3      	bne.n	800a980 <_svfiprintf_r+0x170>
 800a9d8:	89bb      	ldrh	r3, [r7, #12]
 800a9da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a9dc:	065b      	lsls	r3, r3, #25
 800a9de:	d400      	bmi.n	800a9e2 <_svfiprintf_r+0x1d2>
 800a9e0:	e72d      	b.n	800a83e <_svfiprintf_r+0x2e>
 800a9e2:	2001      	movs	r0, #1
 800a9e4:	4240      	negs	r0, r0
 800a9e6:	e72a      	b.n	800a83e <_svfiprintf_r+0x2e>
 800a9e8:	ab07      	add	r3, sp, #28
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	003a      	movs	r2, r7
 800a9ee:	0021      	movs	r1, r4
 800a9f0:	4b06      	ldr	r3, [pc, #24]	; (800aa0c <_svfiprintf_r+0x1fc>)
 800a9f2:	9803      	ldr	r0, [sp, #12]
 800a9f4:	f7fc fd52 	bl	800749c <_printf_i>
 800a9f8:	e7ea      	b.n	800a9d0 <_svfiprintf_r+0x1c0>
 800a9fa:	46c0      	nop			; (mov r8, r8)
 800a9fc:	0800bb64 	.word	0x0800bb64
 800aa00:	0800bb6a 	.word	0x0800bb6a
 800aa04:	0800bb6e 	.word	0x0800bb6e
 800aa08:	08006f39 	.word	0x08006f39
 800aa0c:	0800a74d 	.word	0x0800a74d

0800aa10 <nan>:
 800aa10:	2000      	movs	r0, #0
 800aa12:	4901      	ldr	r1, [pc, #4]	; (800aa18 <nan+0x8>)
 800aa14:	4770      	bx	lr
 800aa16:	46c0      	nop			; (mov r8, r8)
 800aa18:	7ff80000 	.word	0x7ff80000

0800aa1c <strncmp>:
 800aa1c:	b530      	push	{r4, r5, lr}
 800aa1e:	0005      	movs	r5, r0
 800aa20:	1e10      	subs	r0, r2, #0
 800aa22:	d008      	beq.n	800aa36 <strncmp+0x1a>
 800aa24:	2400      	movs	r4, #0
 800aa26:	3a01      	subs	r2, #1
 800aa28:	5d2b      	ldrb	r3, [r5, r4]
 800aa2a:	5d08      	ldrb	r0, [r1, r4]
 800aa2c:	4283      	cmp	r3, r0
 800aa2e:	d101      	bne.n	800aa34 <strncmp+0x18>
 800aa30:	4294      	cmp	r4, r2
 800aa32:	d101      	bne.n	800aa38 <strncmp+0x1c>
 800aa34:	1a18      	subs	r0, r3, r0
 800aa36:	bd30      	pop	{r4, r5, pc}
 800aa38:	3401      	adds	r4, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1f4      	bne.n	800aa28 <strncmp+0xc>
 800aa3e:	e7f9      	b.n	800aa34 <strncmp+0x18>

0800aa40 <__ascii_wctomb>:
 800aa40:	0003      	movs	r3, r0
 800aa42:	1e08      	subs	r0, r1, #0
 800aa44:	d005      	beq.n	800aa52 <__ascii_wctomb+0x12>
 800aa46:	2aff      	cmp	r2, #255	; 0xff
 800aa48:	d904      	bls.n	800aa54 <__ascii_wctomb+0x14>
 800aa4a:	228a      	movs	r2, #138	; 0x8a
 800aa4c:	2001      	movs	r0, #1
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	4240      	negs	r0, r0
 800aa52:	4770      	bx	lr
 800aa54:	2001      	movs	r0, #1
 800aa56:	700a      	strb	r2, [r1, #0]
 800aa58:	e7fb      	b.n	800aa52 <__ascii_wctomb+0x12>
	...

0800aa5c <__assert_func>:
 800aa5c:	b530      	push	{r4, r5, lr}
 800aa5e:	0014      	movs	r4, r2
 800aa60:	001a      	movs	r2, r3
 800aa62:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <__assert_func+0x2c>)
 800aa64:	0005      	movs	r5, r0
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	b085      	sub	sp, #20
 800aa6a:	68d8      	ldr	r0, [r3, #12]
 800aa6c:	4b07      	ldr	r3, [pc, #28]	; (800aa8c <__assert_func+0x30>)
 800aa6e:	2c00      	cmp	r4, #0
 800aa70:	d101      	bne.n	800aa76 <__assert_func+0x1a>
 800aa72:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <__assert_func+0x34>)
 800aa74:	001c      	movs	r4, r3
 800aa76:	9301      	str	r3, [sp, #4]
 800aa78:	9100      	str	r1, [sp, #0]
 800aa7a:	002b      	movs	r3, r5
 800aa7c:	4905      	ldr	r1, [pc, #20]	; (800aa94 <__assert_func+0x38>)
 800aa7e:	9402      	str	r4, [sp, #8]
 800aa80:	f000 f80a 	bl	800aa98 <fiprintf>
 800aa84:	f000 fa8c 	bl	800afa0 <abort>
 800aa88:	2000000c 	.word	0x2000000c
 800aa8c:	0800bb75 	.word	0x0800bb75
 800aa90:	0800bbb0 	.word	0x0800bbb0
 800aa94:	0800bb82 	.word	0x0800bb82

0800aa98 <fiprintf>:
 800aa98:	b40e      	push	{r1, r2, r3}
 800aa9a:	b503      	push	{r0, r1, lr}
 800aa9c:	0001      	movs	r1, r0
 800aa9e:	ab03      	add	r3, sp, #12
 800aaa0:	4804      	ldr	r0, [pc, #16]	; (800aab4 <fiprintf+0x1c>)
 800aaa2:	cb04      	ldmia	r3!, {r2}
 800aaa4:	6800      	ldr	r0, [r0, #0]
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	f000 f872 	bl	800ab90 <_vfiprintf_r>
 800aaac:	b002      	add	sp, #8
 800aaae:	bc08      	pop	{r3}
 800aab0:	b003      	add	sp, #12
 800aab2:	4718      	bx	r3
 800aab4:	2000000c 	.word	0x2000000c

0800aab8 <__retarget_lock_init_recursive>:
 800aab8:	4770      	bx	lr

0800aaba <__retarget_lock_acquire_recursive>:
 800aaba:	4770      	bx	lr

0800aabc <__retarget_lock_release_recursive>:
 800aabc:	4770      	bx	lr

0800aabe <memmove>:
 800aabe:	b510      	push	{r4, lr}
 800aac0:	4288      	cmp	r0, r1
 800aac2:	d902      	bls.n	800aaca <memmove+0xc>
 800aac4:	188b      	adds	r3, r1, r2
 800aac6:	4298      	cmp	r0, r3
 800aac8:	d303      	bcc.n	800aad2 <memmove+0x14>
 800aaca:	2300      	movs	r3, #0
 800aacc:	e007      	b.n	800aade <memmove+0x20>
 800aace:	5c8b      	ldrb	r3, [r1, r2]
 800aad0:	5483      	strb	r3, [r0, r2]
 800aad2:	3a01      	subs	r2, #1
 800aad4:	d2fb      	bcs.n	800aace <memmove+0x10>
 800aad6:	bd10      	pop	{r4, pc}
 800aad8:	5ccc      	ldrb	r4, [r1, r3]
 800aada:	54c4      	strb	r4, [r0, r3]
 800aadc:	3301      	adds	r3, #1
 800aade:	429a      	cmp	r2, r3
 800aae0:	d1fa      	bne.n	800aad8 <memmove+0x1a>
 800aae2:	e7f8      	b.n	800aad6 <memmove+0x18>

0800aae4 <_realloc_r>:
 800aae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aae6:	0007      	movs	r7, r0
 800aae8:	000e      	movs	r6, r1
 800aaea:	0014      	movs	r4, r2
 800aaec:	2900      	cmp	r1, #0
 800aaee:	d105      	bne.n	800aafc <_realloc_r+0x18>
 800aaf0:	0011      	movs	r1, r2
 800aaf2:	f7fc f901 	bl	8006cf8 <_malloc_r>
 800aaf6:	0005      	movs	r5, r0
 800aaf8:	0028      	movs	r0, r5
 800aafa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aafc:	2a00      	cmp	r2, #0
 800aafe:	d103      	bne.n	800ab08 <_realloc_r+0x24>
 800ab00:	f7fc f88e 	bl	8006c20 <_free_r>
 800ab04:	0025      	movs	r5, r4
 800ab06:	e7f7      	b.n	800aaf8 <_realloc_r+0x14>
 800ab08:	f000 fc8c 	bl	800b424 <_malloc_usable_size_r>
 800ab0c:	9001      	str	r0, [sp, #4]
 800ab0e:	4284      	cmp	r4, r0
 800ab10:	d803      	bhi.n	800ab1a <_realloc_r+0x36>
 800ab12:	0035      	movs	r5, r6
 800ab14:	0843      	lsrs	r3, r0, #1
 800ab16:	42a3      	cmp	r3, r4
 800ab18:	d3ee      	bcc.n	800aaf8 <_realloc_r+0x14>
 800ab1a:	0021      	movs	r1, r4
 800ab1c:	0038      	movs	r0, r7
 800ab1e:	f7fc f8eb 	bl	8006cf8 <_malloc_r>
 800ab22:	1e05      	subs	r5, r0, #0
 800ab24:	d0e8      	beq.n	800aaf8 <_realloc_r+0x14>
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	0022      	movs	r2, r4
 800ab2a:	429c      	cmp	r4, r3
 800ab2c:	d900      	bls.n	800ab30 <_realloc_r+0x4c>
 800ab2e:	001a      	movs	r2, r3
 800ab30:	0031      	movs	r1, r6
 800ab32:	0028      	movs	r0, r5
 800ab34:	f7fc f862 	bl	8006bfc <memcpy>
 800ab38:	0031      	movs	r1, r6
 800ab3a:	0038      	movs	r0, r7
 800ab3c:	f7fc f870 	bl	8006c20 <_free_r>
 800ab40:	e7da      	b.n	800aaf8 <_realloc_r+0x14>

0800ab42 <__sfputc_r>:
 800ab42:	6893      	ldr	r3, [r2, #8]
 800ab44:	b510      	push	{r4, lr}
 800ab46:	3b01      	subs	r3, #1
 800ab48:	6093      	str	r3, [r2, #8]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	da04      	bge.n	800ab58 <__sfputc_r+0x16>
 800ab4e:	6994      	ldr	r4, [r2, #24]
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	db07      	blt.n	800ab64 <__sfputc_r+0x22>
 800ab54:	290a      	cmp	r1, #10
 800ab56:	d005      	beq.n	800ab64 <__sfputc_r+0x22>
 800ab58:	6813      	ldr	r3, [r2, #0]
 800ab5a:	1c58      	adds	r0, r3, #1
 800ab5c:	6010      	str	r0, [r2, #0]
 800ab5e:	7019      	strb	r1, [r3, #0]
 800ab60:	0008      	movs	r0, r1
 800ab62:	bd10      	pop	{r4, pc}
 800ab64:	f000 f94e 	bl	800ae04 <__swbuf_r>
 800ab68:	0001      	movs	r1, r0
 800ab6a:	e7f9      	b.n	800ab60 <__sfputc_r+0x1e>

0800ab6c <__sfputs_r>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	0006      	movs	r6, r0
 800ab70:	000f      	movs	r7, r1
 800ab72:	0014      	movs	r4, r2
 800ab74:	18d5      	adds	r5, r2, r3
 800ab76:	42ac      	cmp	r4, r5
 800ab78:	d101      	bne.n	800ab7e <__sfputs_r+0x12>
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	e007      	b.n	800ab8e <__sfputs_r+0x22>
 800ab7e:	7821      	ldrb	r1, [r4, #0]
 800ab80:	003a      	movs	r2, r7
 800ab82:	0030      	movs	r0, r6
 800ab84:	f7ff ffdd 	bl	800ab42 <__sfputc_r>
 800ab88:	3401      	adds	r4, #1
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	d1f3      	bne.n	800ab76 <__sfputs_r+0xa>
 800ab8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab90 <_vfiprintf_r>:
 800ab90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab92:	b0a1      	sub	sp, #132	; 0x84
 800ab94:	0006      	movs	r6, r0
 800ab96:	000c      	movs	r4, r1
 800ab98:	001f      	movs	r7, r3
 800ab9a:	9203      	str	r2, [sp, #12]
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d004      	beq.n	800abaa <_vfiprintf_r+0x1a>
 800aba0:	6983      	ldr	r3, [r0, #24]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <_vfiprintf_r+0x1a>
 800aba6:	f000 fb31 	bl	800b20c <__sinit>
 800abaa:	4b8e      	ldr	r3, [pc, #568]	; (800ade4 <_vfiprintf_r+0x254>)
 800abac:	429c      	cmp	r4, r3
 800abae:	d11c      	bne.n	800abea <_vfiprintf_r+0x5a>
 800abb0:	6874      	ldr	r4, [r6, #4]
 800abb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abb4:	07db      	lsls	r3, r3, #31
 800abb6:	d405      	bmi.n	800abc4 <_vfiprintf_r+0x34>
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	059b      	lsls	r3, r3, #22
 800abbc:	d402      	bmi.n	800abc4 <_vfiprintf_r+0x34>
 800abbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abc0:	f7ff ff7b 	bl	800aaba <__retarget_lock_acquire_recursive>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	071b      	lsls	r3, r3, #28
 800abc8:	d502      	bpl.n	800abd0 <_vfiprintf_r+0x40>
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d11d      	bne.n	800ac0c <_vfiprintf_r+0x7c>
 800abd0:	0021      	movs	r1, r4
 800abd2:	0030      	movs	r0, r6
 800abd4:	f000 f96c 	bl	800aeb0 <__swsetup_r>
 800abd8:	2800      	cmp	r0, #0
 800abda:	d017      	beq.n	800ac0c <_vfiprintf_r+0x7c>
 800abdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abde:	07db      	lsls	r3, r3, #31
 800abe0:	d50d      	bpl.n	800abfe <_vfiprintf_r+0x6e>
 800abe2:	2001      	movs	r0, #1
 800abe4:	4240      	negs	r0, r0
 800abe6:	b021      	add	sp, #132	; 0x84
 800abe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abea:	4b7f      	ldr	r3, [pc, #508]	; (800ade8 <_vfiprintf_r+0x258>)
 800abec:	429c      	cmp	r4, r3
 800abee:	d101      	bne.n	800abf4 <_vfiprintf_r+0x64>
 800abf0:	68b4      	ldr	r4, [r6, #8]
 800abf2:	e7de      	b.n	800abb2 <_vfiprintf_r+0x22>
 800abf4:	4b7d      	ldr	r3, [pc, #500]	; (800adec <_vfiprintf_r+0x25c>)
 800abf6:	429c      	cmp	r4, r3
 800abf8:	d1db      	bne.n	800abb2 <_vfiprintf_r+0x22>
 800abfa:	68f4      	ldr	r4, [r6, #12]
 800abfc:	e7d9      	b.n	800abb2 <_vfiprintf_r+0x22>
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	059b      	lsls	r3, r3, #22
 800ac02:	d4ee      	bmi.n	800abe2 <_vfiprintf_r+0x52>
 800ac04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac06:	f7ff ff59 	bl	800aabc <__retarget_lock_release_recursive>
 800ac0a:	e7ea      	b.n	800abe2 <_vfiprintf_r+0x52>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	ad08      	add	r5, sp, #32
 800ac10:	616b      	str	r3, [r5, #20]
 800ac12:	3320      	adds	r3, #32
 800ac14:	766b      	strb	r3, [r5, #25]
 800ac16:	3310      	adds	r3, #16
 800ac18:	76ab      	strb	r3, [r5, #26]
 800ac1a:	9707      	str	r7, [sp, #28]
 800ac1c:	9f03      	ldr	r7, [sp, #12]
 800ac1e:	783b      	ldrb	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <_vfiprintf_r+0x98>
 800ac24:	2b25      	cmp	r3, #37	; 0x25
 800ac26:	d14e      	bne.n	800acc6 <_vfiprintf_r+0x136>
 800ac28:	9b03      	ldr	r3, [sp, #12]
 800ac2a:	1afb      	subs	r3, r7, r3
 800ac2c:	9305      	str	r3, [sp, #20]
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	429f      	cmp	r7, r3
 800ac32:	d00d      	beq.n	800ac50 <_vfiprintf_r+0xc0>
 800ac34:	9b05      	ldr	r3, [sp, #20]
 800ac36:	0021      	movs	r1, r4
 800ac38:	0030      	movs	r0, r6
 800ac3a:	9a03      	ldr	r2, [sp, #12]
 800ac3c:	f7ff ff96 	bl	800ab6c <__sfputs_r>
 800ac40:	1c43      	adds	r3, r0, #1
 800ac42:	d100      	bne.n	800ac46 <_vfiprintf_r+0xb6>
 800ac44:	e0b5      	b.n	800adb2 <_vfiprintf_r+0x222>
 800ac46:	696a      	ldr	r2, [r5, #20]
 800ac48:	9b05      	ldr	r3, [sp, #20]
 800ac4a:	4694      	mov	ip, r2
 800ac4c:	4463      	add	r3, ip
 800ac4e:	616b      	str	r3, [r5, #20]
 800ac50:	783b      	ldrb	r3, [r7, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d100      	bne.n	800ac58 <_vfiprintf_r+0xc8>
 800ac56:	e0ac      	b.n	800adb2 <_vfiprintf_r+0x222>
 800ac58:	2201      	movs	r2, #1
 800ac5a:	1c7b      	adds	r3, r7, #1
 800ac5c:	9303      	str	r3, [sp, #12]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	4252      	negs	r2, r2
 800ac62:	606a      	str	r2, [r5, #4]
 800ac64:	a904      	add	r1, sp, #16
 800ac66:	3254      	adds	r2, #84	; 0x54
 800ac68:	1852      	adds	r2, r2, r1
 800ac6a:	602b      	str	r3, [r5, #0]
 800ac6c:	60eb      	str	r3, [r5, #12]
 800ac6e:	60ab      	str	r3, [r5, #8]
 800ac70:	7013      	strb	r3, [r2, #0]
 800ac72:	65ab      	str	r3, [r5, #88]	; 0x58
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	2205      	movs	r2, #5
 800ac78:	7819      	ldrb	r1, [r3, #0]
 800ac7a:	485d      	ldr	r0, [pc, #372]	; (800adf0 <_vfiprintf_r+0x260>)
 800ac7c:	f7ff f854 	bl	8009d28 <memchr>
 800ac80:	9b03      	ldr	r3, [sp, #12]
 800ac82:	1c5f      	adds	r7, r3, #1
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d120      	bne.n	800acca <_vfiprintf_r+0x13a>
 800ac88:	682a      	ldr	r2, [r5, #0]
 800ac8a:	06d3      	lsls	r3, r2, #27
 800ac8c:	d504      	bpl.n	800ac98 <_vfiprintf_r+0x108>
 800ac8e:	2353      	movs	r3, #83	; 0x53
 800ac90:	a904      	add	r1, sp, #16
 800ac92:	185b      	adds	r3, r3, r1
 800ac94:	2120      	movs	r1, #32
 800ac96:	7019      	strb	r1, [r3, #0]
 800ac98:	0713      	lsls	r3, r2, #28
 800ac9a:	d504      	bpl.n	800aca6 <_vfiprintf_r+0x116>
 800ac9c:	2353      	movs	r3, #83	; 0x53
 800ac9e:	a904      	add	r1, sp, #16
 800aca0:	185b      	adds	r3, r3, r1
 800aca2:	212b      	movs	r1, #43	; 0x2b
 800aca4:	7019      	strb	r1, [r3, #0]
 800aca6:	9b03      	ldr	r3, [sp, #12]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	2b2a      	cmp	r3, #42	; 0x2a
 800acac:	d016      	beq.n	800acdc <_vfiprintf_r+0x14c>
 800acae:	2100      	movs	r1, #0
 800acb0:	68eb      	ldr	r3, [r5, #12]
 800acb2:	9f03      	ldr	r7, [sp, #12]
 800acb4:	783a      	ldrb	r2, [r7, #0]
 800acb6:	1c78      	adds	r0, r7, #1
 800acb8:	3a30      	subs	r2, #48	; 0x30
 800acba:	4684      	mov	ip, r0
 800acbc:	2a09      	cmp	r2, #9
 800acbe:	d94f      	bls.n	800ad60 <_vfiprintf_r+0x1d0>
 800acc0:	2900      	cmp	r1, #0
 800acc2:	d111      	bne.n	800ace8 <_vfiprintf_r+0x158>
 800acc4:	e017      	b.n	800acf6 <_vfiprintf_r+0x166>
 800acc6:	3701      	adds	r7, #1
 800acc8:	e7a9      	b.n	800ac1e <_vfiprintf_r+0x8e>
 800acca:	4b49      	ldr	r3, [pc, #292]	; (800adf0 <_vfiprintf_r+0x260>)
 800accc:	682a      	ldr	r2, [r5, #0]
 800acce:	1ac0      	subs	r0, r0, r3
 800acd0:	2301      	movs	r3, #1
 800acd2:	4083      	lsls	r3, r0
 800acd4:	4313      	orrs	r3, r2
 800acd6:	602b      	str	r3, [r5, #0]
 800acd8:	9703      	str	r7, [sp, #12]
 800acda:	e7cb      	b.n	800ac74 <_vfiprintf_r+0xe4>
 800acdc:	9b07      	ldr	r3, [sp, #28]
 800acde:	1d19      	adds	r1, r3, #4
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	9107      	str	r1, [sp, #28]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	db01      	blt.n	800acec <_vfiprintf_r+0x15c>
 800ace8:	930b      	str	r3, [sp, #44]	; 0x2c
 800acea:	e004      	b.n	800acf6 <_vfiprintf_r+0x166>
 800acec:	425b      	negs	r3, r3
 800acee:	60eb      	str	r3, [r5, #12]
 800acf0:	2302      	movs	r3, #2
 800acf2:	4313      	orrs	r3, r2
 800acf4:	602b      	str	r3, [r5, #0]
 800acf6:	783b      	ldrb	r3, [r7, #0]
 800acf8:	2b2e      	cmp	r3, #46	; 0x2e
 800acfa:	d10a      	bne.n	800ad12 <_vfiprintf_r+0x182>
 800acfc:	787b      	ldrb	r3, [r7, #1]
 800acfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ad00:	d137      	bne.n	800ad72 <_vfiprintf_r+0x1e2>
 800ad02:	9b07      	ldr	r3, [sp, #28]
 800ad04:	3702      	adds	r7, #2
 800ad06:	1d1a      	adds	r2, r3, #4
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	9207      	str	r2, [sp, #28]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	db2d      	blt.n	800ad6c <_vfiprintf_r+0x1dc>
 800ad10:	9309      	str	r3, [sp, #36]	; 0x24
 800ad12:	2203      	movs	r2, #3
 800ad14:	7839      	ldrb	r1, [r7, #0]
 800ad16:	4837      	ldr	r0, [pc, #220]	; (800adf4 <_vfiprintf_r+0x264>)
 800ad18:	f7ff f806 	bl	8009d28 <memchr>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d007      	beq.n	800ad30 <_vfiprintf_r+0x1a0>
 800ad20:	4b34      	ldr	r3, [pc, #208]	; (800adf4 <_vfiprintf_r+0x264>)
 800ad22:	682a      	ldr	r2, [r5, #0]
 800ad24:	1ac0      	subs	r0, r0, r3
 800ad26:	2340      	movs	r3, #64	; 0x40
 800ad28:	4083      	lsls	r3, r0
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	3701      	adds	r7, #1
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	7839      	ldrb	r1, [r7, #0]
 800ad32:	1c7b      	adds	r3, r7, #1
 800ad34:	2206      	movs	r2, #6
 800ad36:	4830      	ldr	r0, [pc, #192]	; (800adf8 <_vfiprintf_r+0x268>)
 800ad38:	9303      	str	r3, [sp, #12]
 800ad3a:	7629      	strb	r1, [r5, #24]
 800ad3c:	f7fe fff4 	bl	8009d28 <memchr>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d045      	beq.n	800add0 <_vfiprintf_r+0x240>
 800ad44:	4b2d      	ldr	r3, [pc, #180]	; (800adfc <_vfiprintf_r+0x26c>)
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d127      	bne.n	800ad9a <_vfiprintf_r+0x20a>
 800ad4a:	2207      	movs	r2, #7
 800ad4c:	9b07      	ldr	r3, [sp, #28]
 800ad4e:	3307      	adds	r3, #7
 800ad50:	4393      	bics	r3, r2
 800ad52:	3308      	adds	r3, #8
 800ad54:	9307      	str	r3, [sp, #28]
 800ad56:	696b      	ldr	r3, [r5, #20]
 800ad58:	9a04      	ldr	r2, [sp, #16]
 800ad5a:	189b      	adds	r3, r3, r2
 800ad5c:	616b      	str	r3, [r5, #20]
 800ad5e:	e75d      	b.n	800ac1c <_vfiprintf_r+0x8c>
 800ad60:	210a      	movs	r1, #10
 800ad62:	434b      	muls	r3, r1
 800ad64:	4667      	mov	r7, ip
 800ad66:	189b      	adds	r3, r3, r2
 800ad68:	3909      	subs	r1, #9
 800ad6a:	e7a3      	b.n	800acb4 <_vfiprintf_r+0x124>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	425b      	negs	r3, r3
 800ad70:	e7ce      	b.n	800ad10 <_vfiprintf_r+0x180>
 800ad72:	2300      	movs	r3, #0
 800ad74:	001a      	movs	r2, r3
 800ad76:	3701      	adds	r7, #1
 800ad78:	606b      	str	r3, [r5, #4]
 800ad7a:	7839      	ldrb	r1, [r7, #0]
 800ad7c:	1c78      	adds	r0, r7, #1
 800ad7e:	3930      	subs	r1, #48	; 0x30
 800ad80:	4684      	mov	ip, r0
 800ad82:	2909      	cmp	r1, #9
 800ad84:	d903      	bls.n	800ad8e <_vfiprintf_r+0x1fe>
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0c3      	beq.n	800ad12 <_vfiprintf_r+0x182>
 800ad8a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad8c:	e7c1      	b.n	800ad12 <_vfiprintf_r+0x182>
 800ad8e:	230a      	movs	r3, #10
 800ad90:	435a      	muls	r2, r3
 800ad92:	4667      	mov	r7, ip
 800ad94:	1852      	adds	r2, r2, r1
 800ad96:	3b09      	subs	r3, #9
 800ad98:	e7ef      	b.n	800ad7a <_vfiprintf_r+0x1ea>
 800ad9a:	ab07      	add	r3, sp, #28
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	0022      	movs	r2, r4
 800ada0:	0029      	movs	r1, r5
 800ada2:	0030      	movs	r0, r6
 800ada4:	4b16      	ldr	r3, [pc, #88]	; (800ae00 <_vfiprintf_r+0x270>)
 800ada6:	f7fc f8c7 	bl	8006f38 <_printf_float>
 800adaa:	9004      	str	r0, [sp, #16]
 800adac:	9b04      	ldr	r3, [sp, #16]
 800adae:	3301      	adds	r3, #1
 800adb0:	d1d1      	bne.n	800ad56 <_vfiprintf_r+0x1c6>
 800adb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adb4:	07db      	lsls	r3, r3, #31
 800adb6:	d405      	bmi.n	800adc4 <_vfiprintf_r+0x234>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	059b      	lsls	r3, r3, #22
 800adbc:	d402      	bmi.n	800adc4 <_vfiprintf_r+0x234>
 800adbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc0:	f7ff fe7c 	bl	800aabc <__retarget_lock_release_recursive>
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	065b      	lsls	r3, r3, #25
 800adc8:	d500      	bpl.n	800adcc <_vfiprintf_r+0x23c>
 800adca:	e70a      	b.n	800abe2 <_vfiprintf_r+0x52>
 800adcc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800adce:	e70a      	b.n	800abe6 <_vfiprintf_r+0x56>
 800add0:	ab07      	add	r3, sp, #28
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	0022      	movs	r2, r4
 800add6:	0029      	movs	r1, r5
 800add8:	0030      	movs	r0, r6
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <_vfiprintf_r+0x270>)
 800addc:	f7fc fb5e 	bl	800749c <_printf_i>
 800ade0:	e7e3      	b.n	800adaa <_vfiprintf_r+0x21a>
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	0800bbd4 	.word	0x0800bbd4
 800ade8:	0800bbf4 	.word	0x0800bbf4
 800adec:	0800bbb4 	.word	0x0800bbb4
 800adf0:	0800bb64 	.word	0x0800bb64
 800adf4:	0800bb6a 	.word	0x0800bb6a
 800adf8:	0800bb6e 	.word	0x0800bb6e
 800adfc:	08006f39 	.word	0x08006f39
 800ae00:	0800ab6d 	.word	0x0800ab6d

0800ae04 <__swbuf_r>:
 800ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae06:	0005      	movs	r5, r0
 800ae08:	000e      	movs	r6, r1
 800ae0a:	0014      	movs	r4, r2
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d004      	beq.n	800ae1a <__swbuf_r+0x16>
 800ae10:	6983      	ldr	r3, [r0, #24]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <__swbuf_r+0x16>
 800ae16:	f000 f9f9 	bl	800b20c <__sinit>
 800ae1a:	4b22      	ldr	r3, [pc, #136]	; (800aea4 <__swbuf_r+0xa0>)
 800ae1c:	429c      	cmp	r4, r3
 800ae1e:	d12e      	bne.n	800ae7e <__swbuf_r+0x7a>
 800ae20:	686c      	ldr	r4, [r5, #4]
 800ae22:	69a3      	ldr	r3, [r4, #24]
 800ae24:	60a3      	str	r3, [r4, #8]
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	071b      	lsls	r3, r3, #28
 800ae2a:	d532      	bpl.n	800ae92 <__swbuf_r+0x8e>
 800ae2c:	6923      	ldr	r3, [r4, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d02f      	beq.n	800ae92 <__swbuf_r+0x8e>
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	6922      	ldr	r2, [r4, #16]
 800ae36:	b2f7      	uxtb	r7, r6
 800ae38:	1a98      	subs	r0, r3, r2
 800ae3a:	6963      	ldr	r3, [r4, #20]
 800ae3c:	b2f6      	uxtb	r6, r6
 800ae3e:	4283      	cmp	r3, r0
 800ae40:	dc05      	bgt.n	800ae4e <__swbuf_r+0x4a>
 800ae42:	0021      	movs	r1, r4
 800ae44:	0028      	movs	r0, r5
 800ae46:	f000 f93f 	bl	800b0c8 <_fflush_r>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d127      	bne.n	800ae9e <__swbuf_r+0x9a>
 800ae4e:	68a3      	ldr	r3, [r4, #8]
 800ae50:	3001      	adds	r0, #1
 800ae52:	3b01      	subs	r3, #1
 800ae54:	60a3      	str	r3, [r4, #8]
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	1c5a      	adds	r2, r3, #1
 800ae5a:	6022      	str	r2, [r4, #0]
 800ae5c:	701f      	strb	r7, [r3, #0]
 800ae5e:	6963      	ldr	r3, [r4, #20]
 800ae60:	4283      	cmp	r3, r0
 800ae62:	d004      	beq.n	800ae6e <__swbuf_r+0x6a>
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	07db      	lsls	r3, r3, #31
 800ae68:	d507      	bpl.n	800ae7a <__swbuf_r+0x76>
 800ae6a:	2e0a      	cmp	r6, #10
 800ae6c:	d105      	bne.n	800ae7a <__swbuf_r+0x76>
 800ae6e:	0021      	movs	r1, r4
 800ae70:	0028      	movs	r0, r5
 800ae72:	f000 f929 	bl	800b0c8 <_fflush_r>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d111      	bne.n	800ae9e <__swbuf_r+0x9a>
 800ae7a:	0030      	movs	r0, r6
 800ae7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae7e:	4b0a      	ldr	r3, [pc, #40]	; (800aea8 <__swbuf_r+0xa4>)
 800ae80:	429c      	cmp	r4, r3
 800ae82:	d101      	bne.n	800ae88 <__swbuf_r+0x84>
 800ae84:	68ac      	ldr	r4, [r5, #8]
 800ae86:	e7cc      	b.n	800ae22 <__swbuf_r+0x1e>
 800ae88:	4b08      	ldr	r3, [pc, #32]	; (800aeac <__swbuf_r+0xa8>)
 800ae8a:	429c      	cmp	r4, r3
 800ae8c:	d1c9      	bne.n	800ae22 <__swbuf_r+0x1e>
 800ae8e:	68ec      	ldr	r4, [r5, #12]
 800ae90:	e7c7      	b.n	800ae22 <__swbuf_r+0x1e>
 800ae92:	0021      	movs	r1, r4
 800ae94:	0028      	movs	r0, r5
 800ae96:	f000 f80b 	bl	800aeb0 <__swsetup_r>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d0c9      	beq.n	800ae32 <__swbuf_r+0x2e>
 800ae9e:	2601      	movs	r6, #1
 800aea0:	4276      	negs	r6, r6
 800aea2:	e7ea      	b.n	800ae7a <__swbuf_r+0x76>
 800aea4:	0800bbd4 	.word	0x0800bbd4
 800aea8:	0800bbf4 	.word	0x0800bbf4
 800aeac:	0800bbb4 	.word	0x0800bbb4

0800aeb0 <__swsetup_r>:
 800aeb0:	4b37      	ldr	r3, [pc, #220]	; (800af90 <__swsetup_r+0xe0>)
 800aeb2:	b570      	push	{r4, r5, r6, lr}
 800aeb4:	681d      	ldr	r5, [r3, #0]
 800aeb6:	0006      	movs	r6, r0
 800aeb8:	000c      	movs	r4, r1
 800aeba:	2d00      	cmp	r5, #0
 800aebc:	d005      	beq.n	800aeca <__swsetup_r+0x1a>
 800aebe:	69ab      	ldr	r3, [r5, #24]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d102      	bne.n	800aeca <__swsetup_r+0x1a>
 800aec4:	0028      	movs	r0, r5
 800aec6:	f000 f9a1 	bl	800b20c <__sinit>
 800aeca:	4b32      	ldr	r3, [pc, #200]	; (800af94 <__swsetup_r+0xe4>)
 800aecc:	429c      	cmp	r4, r3
 800aece:	d10f      	bne.n	800aef0 <__swsetup_r+0x40>
 800aed0:	686c      	ldr	r4, [r5, #4]
 800aed2:	230c      	movs	r3, #12
 800aed4:	5ee2      	ldrsh	r2, [r4, r3]
 800aed6:	b293      	uxth	r3, r2
 800aed8:	0711      	lsls	r1, r2, #28
 800aeda:	d42d      	bmi.n	800af38 <__swsetup_r+0x88>
 800aedc:	06d9      	lsls	r1, r3, #27
 800aede:	d411      	bmi.n	800af04 <__swsetup_r+0x54>
 800aee0:	2309      	movs	r3, #9
 800aee2:	2001      	movs	r0, #1
 800aee4:	6033      	str	r3, [r6, #0]
 800aee6:	3337      	adds	r3, #55	; 0x37
 800aee8:	4313      	orrs	r3, r2
 800aeea:	81a3      	strh	r3, [r4, #12]
 800aeec:	4240      	negs	r0, r0
 800aeee:	bd70      	pop	{r4, r5, r6, pc}
 800aef0:	4b29      	ldr	r3, [pc, #164]	; (800af98 <__swsetup_r+0xe8>)
 800aef2:	429c      	cmp	r4, r3
 800aef4:	d101      	bne.n	800aefa <__swsetup_r+0x4a>
 800aef6:	68ac      	ldr	r4, [r5, #8]
 800aef8:	e7eb      	b.n	800aed2 <__swsetup_r+0x22>
 800aefa:	4b28      	ldr	r3, [pc, #160]	; (800af9c <__swsetup_r+0xec>)
 800aefc:	429c      	cmp	r4, r3
 800aefe:	d1e8      	bne.n	800aed2 <__swsetup_r+0x22>
 800af00:	68ec      	ldr	r4, [r5, #12]
 800af02:	e7e6      	b.n	800aed2 <__swsetup_r+0x22>
 800af04:	075b      	lsls	r3, r3, #29
 800af06:	d513      	bpl.n	800af30 <__swsetup_r+0x80>
 800af08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af0a:	2900      	cmp	r1, #0
 800af0c:	d008      	beq.n	800af20 <__swsetup_r+0x70>
 800af0e:	0023      	movs	r3, r4
 800af10:	3344      	adds	r3, #68	; 0x44
 800af12:	4299      	cmp	r1, r3
 800af14:	d002      	beq.n	800af1c <__swsetup_r+0x6c>
 800af16:	0030      	movs	r0, r6
 800af18:	f7fb fe82 	bl	8006c20 <_free_r>
 800af1c:	2300      	movs	r3, #0
 800af1e:	6363      	str	r3, [r4, #52]	; 0x34
 800af20:	2224      	movs	r2, #36	; 0x24
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	4393      	bics	r3, r2
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	2300      	movs	r3, #0
 800af2a:	6063      	str	r3, [r4, #4]
 800af2c:	6923      	ldr	r3, [r4, #16]
 800af2e:	6023      	str	r3, [r4, #0]
 800af30:	2308      	movs	r3, #8
 800af32:	89a2      	ldrh	r2, [r4, #12]
 800af34:	4313      	orrs	r3, r2
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	6923      	ldr	r3, [r4, #16]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10b      	bne.n	800af56 <__swsetup_r+0xa6>
 800af3e:	21a0      	movs	r1, #160	; 0xa0
 800af40:	2280      	movs	r2, #128	; 0x80
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	0089      	lsls	r1, r1, #2
 800af46:	0092      	lsls	r2, r2, #2
 800af48:	400b      	ands	r3, r1
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d003      	beq.n	800af56 <__swsetup_r+0xa6>
 800af4e:	0021      	movs	r1, r4
 800af50:	0030      	movs	r0, r6
 800af52:	f000 fa23 	bl	800b39c <__smakebuf_r>
 800af56:	220c      	movs	r2, #12
 800af58:	5ea3      	ldrsh	r3, [r4, r2]
 800af5a:	2001      	movs	r0, #1
 800af5c:	001a      	movs	r2, r3
 800af5e:	b299      	uxth	r1, r3
 800af60:	4002      	ands	r2, r0
 800af62:	4203      	tst	r3, r0
 800af64:	d00f      	beq.n	800af86 <__swsetup_r+0xd6>
 800af66:	2200      	movs	r2, #0
 800af68:	60a2      	str	r2, [r4, #8]
 800af6a:	6962      	ldr	r2, [r4, #20]
 800af6c:	4252      	negs	r2, r2
 800af6e:	61a2      	str	r2, [r4, #24]
 800af70:	2000      	movs	r0, #0
 800af72:	6922      	ldr	r2, [r4, #16]
 800af74:	4282      	cmp	r2, r0
 800af76:	d1ba      	bne.n	800aeee <__swsetup_r+0x3e>
 800af78:	060a      	lsls	r2, r1, #24
 800af7a:	d5b8      	bpl.n	800aeee <__swsetup_r+0x3e>
 800af7c:	2240      	movs	r2, #64	; 0x40
 800af7e:	4313      	orrs	r3, r2
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	3801      	subs	r0, #1
 800af84:	e7b3      	b.n	800aeee <__swsetup_r+0x3e>
 800af86:	0788      	lsls	r0, r1, #30
 800af88:	d400      	bmi.n	800af8c <__swsetup_r+0xdc>
 800af8a:	6962      	ldr	r2, [r4, #20]
 800af8c:	60a2      	str	r2, [r4, #8]
 800af8e:	e7ef      	b.n	800af70 <__swsetup_r+0xc0>
 800af90:	2000000c 	.word	0x2000000c
 800af94:	0800bbd4 	.word	0x0800bbd4
 800af98:	0800bbf4 	.word	0x0800bbf4
 800af9c:	0800bbb4 	.word	0x0800bbb4

0800afa0 <abort>:
 800afa0:	2006      	movs	r0, #6
 800afa2:	b510      	push	{r4, lr}
 800afa4:	f000 fa70 	bl	800b488 <raise>
 800afa8:	2001      	movs	r0, #1
 800afaa:	f7f8 f8d7 	bl	800315c <_exit>
	...

0800afb0 <__sflush_r>:
 800afb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afb2:	898b      	ldrh	r3, [r1, #12]
 800afb4:	0005      	movs	r5, r0
 800afb6:	000c      	movs	r4, r1
 800afb8:	071a      	lsls	r2, r3, #28
 800afba:	d45f      	bmi.n	800b07c <__sflush_r+0xcc>
 800afbc:	684a      	ldr	r2, [r1, #4]
 800afbe:	2a00      	cmp	r2, #0
 800afc0:	dc04      	bgt.n	800afcc <__sflush_r+0x1c>
 800afc2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800afc4:	2a00      	cmp	r2, #0
 800afc6:	dc01      	bgt.n	800afcc <__sflush_r+0x1c>
 800afc8:	2000      	movs	r0, #0
 800afca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800afcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800afce:	2f00      	cmp	r7, #0
 800afd0:	d0fa      	beq.n	800afc8 <__sflush_r+0x18>
 800afd2:	2200      	movs	r2, #0
 800afd4:	2180      	movs	r1, #128	; 0x80
 800afd6:	682e      	ldr	r6, [r5, #0]
 800afd8:	602a      	str	r2, [r5, #0]
 800afda:	001a      	movs	r2, r3
 800afdc:	0149      	lsls	r1, r1, #5
 800afde:	400a      	ands	r2, r1
 800afe0:	420b      	tst	r3, r1
 800afe2:	d034      	beq.n	800b04e <__sflush_r+0x9e>
 800afe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	075b      	lsls	r3, r3, #29
 800afea:	d506      	bpl.n	800affa <__sflush_r+0x4a>
 800afec:	6863      	ldr	r3, [r4, #4]
 800afee:	1ac0      	subs	r0, r0, r3
 800aff0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <__sflush_r+0x4a>
 800aff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aff8:	1ac0      	subs	r0, r0, r3
 800affa:	0002      	movs	r2, r0
 800affc:	6a21      	ldr	r1, [r4, #32]
 800affe:	2300      	movs	r3, #0
 800b000:	0028      	movs	r0, r5
 800b002:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b004:	47b8      	blx	r7
 800b006:	89a1      	ldrh	r1, [r4, #12]
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d106      	bne.n	800b01a <__sflush_r+0x6a>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	2b1d      	cmp	r3, #29
 800b010:	d831      	bhi.n	800b076 <__sflush_r+0xc6>
 800b012:	4a2c      	ldr	r2, [pc, #176]	; (800b0c4 <__sflush_r+0x114>)
 800b014:	40da      	lsrs	r2, r3
 800b016:	07d3      	lsls	r3, r2, #31
 800b018:	d52d      	bpl.n	800b076 <__sflush_r+0xc6>
 800b01a:	2300      	movs	r3, #0
 800b01c:	6063      	str	r3, [r4, #4]
 800b01e:	6923      	ldr	r3, [r4, #16]
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	04cb      	lsls	r3, r1, #19
 800b024:	d505      	bpl.n	800b032 <__sflush_r+0x82>
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	d102      	bne.n	800b030 <__sflush_r+0x80>
 800b02a:	682b      	ldr	r3, [r5, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d100      	bne.n	800b032 <__sflush_r+0x82>
 800b030:	6560      	str	r0, [r4, #84]	; 0x54
 800b032:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b034:	602e      	str	r6, [r5, #0]
 800b036:	2900      	cmp	r1, #0
 800b038:	d0c6      	beq.n	800afc8 <__sflush_r+0x18>
 800b03a:	0023      	movs	r3, r4
 800b03c:	3344      	adds	r3, #68	; 0x44
 800b03e:	4299      	cmp	r1, r3
 800b040:	d002      	beq.n	800b048 <__sflush_r+0x98>
 800b042:	0028      	movs	r0, r5
 800b044:	f7fb fdec 	bl	8006c20 <_free_r>
 800b048:	2000      	movs	r0, #0
 800b04a:	6360      	str	r0, [r4, #52]	; 0x34
 800b04c:	e7bd      	b.n	800afca <__sflush_r+0x1a>
 800b04e:	2301      	movs	r3, #1
 800b050:	0028      	movs	r0, r5
 800b052:	6a21      	ldr	r1, [r4, #32]
 800b054:	47b8      	blx	r7
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	d1c5      	bne.n	800afe6 <__sflush_r+0x36>
 800b05a:	682b      	ldr	r3, [r5, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0c2      	beq.n	800afe6 <__sflush_r+0x36>
 800b060:	2b1d      	cmp	r3, #29
 800b062:	d001      	beq.n	800b068 <__sflush_r+0xb8>
 800b064:	2b16      	cmp	r3, #22
 800b066:	d101      	bne.n	800b06c <__sflush_r+0xbc>
 800b068:	602e      	str	r6, [r5, #0]
 800b06a:	e7ad      	b.n	800afc8 <__sflush_r+0x18>
 800b06c:	2340      	movs	r3, #64	; 0x40
 800b06e:	89a2      	ldrh	r2, [r4, #12]
 800b070:	4313      	orrs	r3, r2
 800b072:	81a3      	strh	r3, [r4, #12]
 800b074:	e7a9      	b.n	800afca <__sflush_r+0x1a>
 800b076:	2340      	movs	r3, #64	; 0x40
 800b078:	430b      	orrs	r3, r1
 800b07a:	e7fa      	b.n	800b072 <__sflush_r+0xc2>
 800b07c:	690f      	ldr	r7, [r1, #16]
 800b07e:	2f00      	cmp	r7, #0
 800b080:	d0a2      	beq.n	800afc8 <__sflush_r+0x18>
 800b082:	680a      	ldr	r2, [r1, #0]
 800b084:	600f      	str	r7, [r1, #0]
 800b086:	1bd2      	subs	r2, r2, r7
 800b088:	9201      	str	r2, [sp, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	079b      	lsls	r3, r3, #30
 800b08e:	d100      	bne.n	800b092 <__sflush_r+0xe2>
 800b090:	694a      	ldr	r2, [r1, #20]
 800b092:	60a2      	str	r2, [r4, #8]
 800b094:	9b01      	ldr	r3, [sp, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	dc00      	bgt.n	800b09c <__sflush_r+0xec>
 800b09a:	e795      	b.n	800afc8 <__sflush_r+0x18>
 800b09c:	003a      	movs	r2, r7
 800b09e:	0028      	movs	r0, r5
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	6a21      	ldr	r1, [r4, #32]
 800b0a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0a6:	47b0      	blx	r6
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	dc06      	bgt.n	800b0ba <__sflush_r+0x10a>
 800b0ac:	2340      	movs	r3, #64	; 0x40
 800b0ae:	2001      	movs	r0, #1
 800b0b0:	89a2      	ldrh	r2, [r4, #12]
 800b0b2:	4240      	negs	r0, r0
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	81a3      	strh	r3, [r4, #12]
 800b0b8:	e787      	b.n	800afca <__sflush_r+0x1a>
 800b0ba:	9b01      	ldr	r3, [sp, #4]
 800b0bc:	183f      	adds	r7, r7, r0
 800b0be:	1a1b      	subs	r3, r3, r0
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	e7e7      	b.n	800b094 <__sflush_r+0xe4>
 800b0c4:	20400001 	.word	0x20400001

0800b0c8 <_fflush_r>:
 800b0c8:	690b      	ldr	r3, [r1, #16]
 800b0ca:	b570      	push	{r4, r5, r6, lr}
 800b0cc:	0005      	movs	r5, r0
 800b0ce:	000c      	movs	r4, r1
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d102      	bne.n	800b0da <_fflush_r+0x12>
 800b0d4:	2500      	movs	r5, #0
 800b0d6:	0028      	movs	r0, r5
 800b0d8:	bd70      	pop	{r4, r5, r6, pc}
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d004      	beq.n	800b0e8 <_fflush_r+0x20>
 800b0de:	6983      	ldr	r3, [r0, #24]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <_fflush_r+0x20>
 800b0e4:	f000 f892 	bl	800b20c <__sinit>
 800b0e8:	4b14      	ldr	r3, [pc, #80]	; (800b13c <_fflush_r+0x74>)
 800b0ea:	429c      	cmp	r4, r3
 800b0ec:	d11b      	bne.n	800b126 <_fflush_r+0x5e>
 800b0ee:	686c      	ldr	r4, [r5, #4]
 800b0f0:	220c      	movs	r2, #12
 800b0f2:	5ea3      	ldrsh	r3, [r4, r2]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d0ed      	beq.n	800b0d4 <_fflush_r+0xc>
 800b0f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0fa:	07d2      	lsls	r2, r2, #31
 800b0fc:	d404      	bmi.n	800b108 <_fflush_r+0x40>
 800b0fe:	059b      	lsls	r3, r3, #22
 800b100:	d402      	bmi.n	800b108 <_fflush_r+0x40>
 800b102:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b104:	f7ff fcd9 	bl	800aaba <__retarget_lock_acquire_recursive>
 800b108:	0028      	movs	r0, r5
 800b10a:	0021      	movs	r1, r4
 800b10c:	f7ff ff50 	bl	800afb0 <__sflush_r>
 800b110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b112:	0005      	movs	r5, r0
 800b114:	07db      	lsls	r3, r3, #31
 800b116:	d4de      	bmi.n	800b0d6 <_fflush_r+0xe>
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	059b      	lsls	r3, r3, #22
 800b11c:	d4db      	bmi.n	800b0d6 <_fflush_r+0xe>
 800b11e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b120:	f7ff fccc 	bl	800aabc <__retarget_lock_release_recursive>
 800b124:	e7d7      	b.n	800b0d6 <_fflush_r+0xe>
 800b126:	4b06      	ldr	r3, [pc, #24]	; (800b140 <_fflush_r+0x78>)
 800b128:	429c      	cmp	r4, r3
 800b12a:	d101      	bne.n	800b130 <_fflush_r+0x68>
 800b12c:	68ac      	ldr	r4, [r5, #8]
 800b12e:	e7df      	b.n	800b0f0 <_fflush_r+0x28>
 800b130:	4b04      	ldr	r3, [pc, #16]	; (800b144 <_fflush_r+0x7c>)
 800b132:	429c      	cmp	r4, r3
 800b134:	d1dc      	bne.n	800b0f0 <_fflush_r+0x28>
 800b136:	68ec      	ldr	r4, [r5, #12]
 800b138:	e7da      	b.n	800b0f0 <_fflush_r+0x28>
 800b13a:	46c0      	nop			; (mov r8, r8)
 800b13c:	0800bbd4 	.word	0x0800bbd4
 800b140:	0800bbf4 	.word	0x0800bbf4
 800b144:	0800bbb4 	.word	0x0800bbb4

0800b148 <std>:
 800b148:	2300      	movs	r3, #0
 800b14a:	b510      	push	{r4, lr}
 800b14c:	0004      	movs	r4, r0
 800b14e:	6003      	str	r3, [r0, #0]
 800b150:	6043      	str	r3, [r0, #4]
 800b152:	6083      	str	r3, [r0, #8]
 800b154:	8181      	strh	r1, [r0, #12]
 800b156:	6643      	str	r3, [r0, #100]	; 0x64
 800b158:	0019      	movs	r1, r3
 800b15a:	81c2      	strh	r2, [r0, #14]
 800b15c:	6103      	str	r3, [r0, #16]
 800b15e:	6143      	str	r3, [r0, #20]
 800b160:	6183      	str	r3, [r0, #24]
 800b162:	2208      	movs	r2, #8
 800b164:	305c      	adds	r0, #92	; 0x5c
 800b166:	f7fb fd52 	bl	8006c0e <memset>
 800b16a:	4b05      	ldr	r3, [pc, #20]	; (800b180 <std+0x38>)
 800b16c:	6224      	str	r4, [r4, #32]
 800b16e:	6263      	str	r3, [r4, #36]	; 0x24
 800b170:	4b04      	ldr	r3, [pc, #16]	; (800b184 <std+0x3c>)
 800b172:	62a3      	str	r3, [r4, #40]	; 0x28
 800b174:	4b04      	ldr	r3, [pc, #16]	; (800b188 <std+0x40>)
 800b176:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b178:	4b04      	ldr	r3, [pc, #16]	; (800b18c <std+0x44>)
 800b17a:	6323      	str	r3, [r4, #48]	; 0x30
 800b17c:	bd10      	pop	{r4, pc}
 800b17e:	46c0      	nop			; (mov r8, r8)
 800b180:	0800b4c9 	.word	0x0800b4c9
 800b184:	0800b4f1 	.word	0x0800b4f1
 800b188:	0800b529 	.word	0x0800b529
 800b18c:	0800b555 	.word	0x0800b555

0800b190 <_cleanup_r>:
 800b190:	b510      	push	{r4, lr}
 800b192:	4902      	ldr	r1, [pc, #8]	; (800b19c <_cleanup_r+0xc>)
 800b194:	f000 f8ba 	bl	800b30c <_fwalk_reent>
 800b198:	bd10      	pop	{r4, pc}
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	0800b0c9 	.word	0x0800b0c9

0800b1a0 <__sfmoreglue>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	2568      	movs	r5, #104	; 0x68
 800b1a4:	1e4a      	subs	r2, r1, #1
 800b1a6:	4355      	muls	r5, r2
 800b1a8:	000e      	movs	r6, r1
 800b1aa:	0029      	movs	r1, r5
 800b1ac:	3174      	adds	r1, #116	; 0x74
 800b1ae:	f7fb fda3 	bl	8006cf8 <_malloc_r>
 800b1b2:	1e04      	subs	r4, r0, #0
 800b1b4:	d008      	beq.n	800b1c8 <__sfmoreglue+0x28>
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	002a      	movs	r2, r5
 800b1ba:	6001      	str	r1, [r0, #0]
 800b1bc:	6046      	str	r6, [r0, #4]
 800b1be:	300c      	adds	r0, #12
 800b1c0:	60a0      	str	r0, [r4, #8]
 800b1c2:	3268      	adds	r2, #104	; 0x68
 800b1c4:	f7fb fd23 	bl	8006c0e <memset>
 800b1c8:	0020      	movs	r0, r4
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}

0800b1cc <__sfp_lock_acquire>:
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	4802      	ldr	r0, [pc, #8]	; (800b1d8 <__sfp_lock_acquire+0xc>)
 800b1d0:	f7ff fc73 	bl	800aaba <__retarget_lock_acquire_recursive>
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	46c0      	nop			; (mov r8, r8)
 800b1d8:	2000043d 	.word	0x2000043d

0800b1dc <__sfp_lock_release>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	4802      	ldr	r0, [pc, #8]	; (800b1e8 <__sfp_lock_release+0xc>)
 800b1e0:	f7ff fc6c 	bl	800aabc <__retarget_lock_release_recursive>
 800b1e4:	bd10      	pop	{r4, pc}
 800b1e6:	46c0      	nop			; (mov r8, r8)
 800b1e8:	2000043d 	.word	0x2000043d

0800b1ec <__sinit_lock_acquire>:
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	4802      	ldr	r0, [pc, #8]	; (800b1f8 <__sinit_lock_acquire+0xc>)
 800b1f0:	f7ff fc63 	bl	800aaba <__retarget_lock_acquire_recursive>
 800b1f4:	bd10      	pop	{r4, pc}
 800b1f6:	46c0      	nop			; (mov r8, r8)
 800b1f8:	2000043e 	.word	0x2000043e

0800b1fc <__sinit_lock_release>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	4802      	ldr	r0, [pc, #8]	; (800b208 <__sinit_lock_release+0xc>)
 800b200:	f7ff fc5c 	bl	800aabc <__retarget_lock_release_recursive>
 800b204:	bd10      	pop	{r4, pc}
 800b206:	46c0      	nop			; (mov r8, r8)
 800b208:	2000043e 	.word	0x2000043e

0800b20c <__sinit>:
 800b20c:	b513      	push	{r0, r1, r4, lr}
 800b20e:	0004      	movs	r4, r0
 800b210:	f7ff ffec 	bl	800b1ec <__sinit_lock_acquire>
 800b214:	69a3      	ldr	r3, [r4, #24]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d002      	beq.n	800b220 <__sinit+0x14>
 800b21a:	f7ff ffef 	bl	800b1fc <__sinit_lock_release>
 800b21e:	bd13      	pop	{r0, r1, r4, pc}
 800b220:	64a3      	str	r3, [r4, #72]	; 0x48
 800b222:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b224:	6523      	str	r3, [r4, #80]	; 0x50
 800b226:	4b13      	ldr	r3, [pc, #76]	; (800b274 <__sinit+0x68>)
 800b228:	4a13      	ldr	r2, [pc, #76]	; (800b278 <__sinit+0x6c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	42a3      	cmp	r3, r4
 800b232:	d101      	bne.n	800b238 <__sinit+0x2c>
 800b234:	2301      	movs	r3, #1
 800b236:	61a3      	str	r3, [r4, #24]
 800b238:	0020      	movs	r0, r4
 800b23a:	f000 f81f 	bl	800b27c <__sfp>
 800b23e:	6060      	str	r0, [r4, #4]
 800b240:	0020      	movs	r0, r4
 800b242:	f000 f81b 	bl	800b27c <__sfp>
 800b246:	60a0      	str	r0, [r4, #8]
 800b248:	0020      	movs	r0, r4
 800b24a:	f000 f817 	bl	800b27c <__sfp>
 800b24e:	2200      	movs	r2, #0
 800b250:	2104      	movs	r1, #4
 800b252:	60e0      	str	r0, [r4, #12]
 800b254:	6860      	ldr	r0, [r4, #4]
 800b256:	f7ff ff77 	bl	800b148 <std>
 800b25a:	2201      	movs	r2, #1
 800b25c:	2109      	movs	r1, #9
 800b25e:	68a0      	ldr	r0, [r4, #8]
 800b260:	f7ff ff72 	bl	800b148 <std>
 800b264:	2202      	movs	r2, #2
 800b266:	2112      	movs	r1, #18
 800b268:	68e0      	ldr	r0, [r4, #12]
 800b26a:	f7ff ff6d 	bl	800b148 <std>
 800b26e:	2301      	movs	r3, #1
 800b270:	61a3      	str	r3, [r4, #24]
 800b272:	e7d2      	b.n	800b21a <__sinit+0xe>
 800b274:	0800b86c 	.word	0x0800b86c
 800b278:	0800b191 	.word	0x0800b191

0800b27c <__sfp>:
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	0007      	movs	r7, r0
 800b280:	f7ff ffa4 	bl	800b1cc <__sfp_lock_acquire>
 800b284:	4b1f      	ldr	r3, [pc, #124]	; (800b304 <__sfp+0x88>)
 800b286:	681e      	ldr	r6, [r3, #0]
 800b288:	69b3      	ldr	r3, [r6, #24]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <__sfp+0x18>
 800b28e:	0030      	movs	r0, r6
 800b290:	f7ff ffbc 	bl	800b20c <__sinit>
 800b294:	3648      	adds	r6, #72	; 0x48
 800b296:	68b4      	ldr	r4, [r6, #8]
 800b298:	6873      	ldr	r3, [r6, #4]
 800b29a:	3b01      	subs	r3, #1
 800b29c:	d504      	bpl.n	800b2a8 <__sfp+0x2c>
 800b29e:	6833      	ldr	r3, [r6, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d022      	beq.n	800b2ea <__sfp+0x6e>
 800b2a4:	6836      	ldr	r6, [r6, #0]
 800b2a6:	e7f6      	b.n	800b296 <__sfp+0x1a>
 800b2a8:	220c      	movs	r2, #12
 800b2aa:	5ea5      	ldrsh	r5, [r4, r2]
 800b2ac:	2d00      	cmp	r5, #0
 800b2ae:	d11a      	bne.n	800b2e6 <__sfp+0x6a>
 800b2b0:	0020      	movs	r0, r4
 800b2b2:	4b15      	ldr	r3, [pc, #84]	; (800b308 <__sfp+0x8c>)
 800b2b4:	3058      	adds	r0, #88	; 0x58
 800b2b6:	60e3      	str	r3, [r4, #12]
 800b2b8:	6665      	str	r5, [r4, #100]	; 0x64
 800b2ba:	f7ff fbfd 	bl	800aab8 <__retarget_lock_init_recursive>
 800b2be:	f7ff ff8d 	bl	800b1dc <__sfp_lock_release>
 800b2c2:	0020      	movs	r0, r4
 800b2c4:	2208      	movs	r2, #8
 800b2c6:	0029      	movs	r1, r5
 800b2c8:	6025      	str	r5, [r4, #0]
 800b2ca:	60a5      	str	r5, [r4, #8]
 800b2cc:	6065      	str	r5, [r4, #4]
 800b2ce:	6125      	str	r5, [r4, #16]
 800b2d0:	6165      	str	r5, [r4, #20]
 800b2d2:	61a5      	str	r5, [r4, #24]
 800b2d4:	305c      	adds	r0, #92	; 0x5c
 800b2d6:	f7fb fc9a 	bl	8006c0e <memset>
 800b2da:	6365      	str	r5, [r4, #52]	; 0x34
 800b2dc:	63a5      	str	r5, [r4, #56]	; 0x38
 800b2de:	64a5      	str	r5, [r4, #72]	; 0x48
 800b2e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b2e2:	0020      	movs	r0, r4
 800b2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e6:	3468      	adds	r4, #104	; 0x68
 800b2e8:	e7d7      	b.n	800b29a <__sfp+0x1e>
 800b2ea:	2104      	movs	r1, #4
 800b2ec:	0038      	movs	r0, r7
 800b2ee:	f7ff ff57 	bl	800b1a0 <__sfmoreglue>
 800b2f2:	1e04      	subs	r4, r0, #0
 800b2f4:	6030      	str	r0, [r6, #0]
 800b2f6:	d1d5      	bne.n	800b2a4 <__sfp+0x28>
 800b2f8:	f7ff ff70 	bl	800b1dc <__sfp_lock_release>
 800b2fc:	230c      	movs	r3, #12
 800b2fe:	603b      	str	r3, [r7, #0]
 800b300:	e7ef      	b.n	800b2e2 <__sfp+0x66>
 800b302:	46c0      	nop			; (mov r8, r8)
 800b304:	0800b86c 	.word	0x0800b86c
 800b308:	ffff0001 	.word	0xffff0001

0800b30c <_fwalk_reent>:
 800b30c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b30e:	0004      	movs	r4, r0
 800b310:	0006      	movs	r6, r0
 800b312:	2700      	movs	r7, #0
 800b314:	9101      	str	r1, [sp, #4]
 800b316:	3448      	adds	r4, #72	; 0x48
 800b318:	6863      	ldr	r3, [r4, #4]
 800b31a:	68a5      	ldr	r5, [r4, #8]
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	9b00      	ldr	r3, [sp, #0]
 800b320:	3b01      	subs	r3, #1
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	d504      	bpl.n	800b330 <_fwalk_reent+0x24>
 800b326:	6824      	ldr	r4, [r4, #0]
 800b328:	2c00      	cmp	r4, #0
 800b32a:	d1f5      	bne.n	800b318 <_fwalk_reent+0xc>
 800b32c:	0038      	movs	r0, r7
 800b32e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b330:	89ab      	ldrh	r3, [r5, #12]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d908      	bls.n	800b348 <_fwalk_reent+0x3c>
 800b336:	220e      	movs	r2, #14
 800b338:	5eab      	ldrsh	r3, [r5, r2]
 800b33a:	3301      	adds	r3, #1
 800b33c:	d004      	beq.n	800b348 <_fwalk_reent+0x3c>
 800b33e:	0029      	movs	r1, r5
 800b340:	0030      	movs	r0, r6
 800b342:	9b01      	ldr	r3, [sp, #4]
 800b344:	4798      	blx	r3
 800b346:	4307      	orrs	r7, r0
 800b348:	3568      	adds	r5, #104	; 0x68
 800b34a:	e7e8      	b.n	800b31e <_fwalk_reent+0x12>

0800b34c <__swhatbuf_r>:
 800b34c:	b570      	push	{r4, r5, r6, lr}
 800b34e:	000e      	movs	r6, r1
 800b350:	001d      	movs	r5, r3
 800b352:	230e      	movs	r3, #14
 800b354:	5ec9      	ldrsh	r1, [r1, r3]
 800b356:	0014      	movs	r4, r2
 800b358:	b096      	sub	sp, #88	; 0x58
 800b35a:	2900      	cmp	r1, #0
 800b35c:	da08      	bge.n	800b370 <__swhatbuf_r+0x24>
 800b35e:	220c      	movs	r2, #12
 800b360:	5eb3      	ldrsh	r3, [r6, r2]
 800b362:	2200      	movs	r2, #0
 800b364:	602a      	str	r2, [r5, #0]
 800b366:	061b      	lsls	r3, r3, #24
 800b368:	d411      	bmi.n	800b38e <__swhatbuf_r+0x42>
 800b36a:	2380      	movs	r3, #128	; 0x80
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	e00f      	b.n	800b390 <__swhatbuf_r+0x44>
 800b370:	466a      	mov	r2, sp
 800b372:	f000 f91b 	bl	800b5ac <_fstat_r>
 800b376:	2800      	cmp	r0, #0
 800b378:	dbf1      	blt.n	800b35e <__swhatbuf_r+0x12>
 800b37a:	23f0      	movs	r3, #240	; 0xf0
 800b37c:	9901      	ldr	r1, [sp, #4]
 800b37e:	021b      	lsls	r3, r3, #8
 800b380:	4019      	ands	r1, r3
 800b382:	4b05      	ldr	r3, [pc, #20]	; (800b398 <__swhatbuf_r+0x4c>)
 800b384:	18c9      	adds	r1, r1, r3
 800b386:	424b      	negs	r3, r1
 800b388:	4159      	adcs	r1, r3
 800b38a:	6029      	str	r1, [r5, #0]
 800b38c:	e7ed      	b.n	800b36a <__swhatbuf_r+0x1e>
 800b38e:	2340      	movs	r3, #64	; 0x40
 800b390:	2000      	movs	r0, #0
 800b392:	6023      	str	r3, [r4, #0]
 800b394:	b016      	add	sp, #88	; 0x58
 800b396:	bd70      	pop	{r4, r5, r6, pc}
 800b398:	ffffe000 	.word	0xffffe000

0800b39c <__smakebuf_r>:
 800b39c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b39e:	2602      	movs	r6, #2
 800b3a0:	898b      	ldrh	r3, [r1, #12]
 800b3a2:	0005      	movs	r5, r0
 800b3a4:	000c      	movs	r4, r1
 800b3a6:	4233      	tst	r3, r6
 800b3a8:	d006      	beq.n	800b3b8 <__smakebuf_r+0x1c>
 800b3aa:	0023      	movs	r3, r4
 800b3ac:	3347      	adds	r3, #71	; 0x47
 800b3ae:	6023      	str	r3, [r4, #0]
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	6163      	str	r3, [r4, #20]
 800b3b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b3b8:	466a      	mov	r2, sp
 800b3ba:	ab01      	add	r3, sp, #4
 800b3bc:	f7ff ffc6 	bl	800b34c <__swhatbuf_r>
 800b3c0:	9900      	ldr	r1, [sp, #0]
 800b3c2:	0007      	movs	r7, r0
 800b3c4:	0028      	movs	r0, r5
 800b3c6:	f7fb fc97 	bl	8006cf8 <_malloc_r>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d108      	bne.n	800b3e0 <__smakebuf_r+0x44>
 800b3ce:	220c      	movs	r2, #12
 800b3d0:	5ea3      	ldrsh	r3, [r4, r2]
 800b3d2:	059a      	lsls	r2, r3, #22
 800b3d4:	d4ef      	bmi.n	800b3b6 <__smakebuf_r+0x1a>
 800b3d6:	2203      	movs	r2, #3
 800b3d8:	4393      	bics	r3, r2
 800b3da:	431e      	orrs	r6, r3
 800b3dc:	81a6      	strh	r6, [r4, #12]
 800b3de:	e7e4      	b.n	800b3aa <__smakebuf_r+0xe>
 800b3e0:	4b0f      	ldr	r3, [pc, #60]	; (800b420 <__smakebuf_r+0x84>)
 800b3e2:	62ab      	str	r3, [r5, #40]	; 0x28
 800b3e4:	2380      	movs	r3, #128	; 0x80
 800b3e6:	89a2      	ldrh	r2, [r4, #12]
 800b3e8:	6020      	str	r0, [r4, #0]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	9b00      	ldr	r3, [sp, #0]
 800b3f0:	6120      	str	r0, [r4, #16]
 800b3f2:	6163      	str	r3, [r4, #20]
 800b3f4:	9b01      	ldr	r3, [sp, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00d      	beq.n	800b416 <__smakebuf_r+0x7a>
 800b3fa:	0028      	movs	r0, r5
 800b3fc:	230e      	movs	r3, #14
 800b3fe:	5ee1      	ldrsh	r1, [r4, r3]
 800b400:	f000 f8e6 	bl	800b5d0 <_isatty_r>
 800b404:	2800      	cmp	r0, #0
 800b406:	d006      	beq.n	800b416 <__smakebuf_r+0x7a>
 800b408:	2203      	movs	r2, #3
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	4393      	bics	r3, r2
 800b40e:	001a      	movs	r2, r3
 800b410:	2301      	movs	r3, #1
 800b412:	4313      	orrs	r3, r2
 800b414:	81a3      	strh	r3, [r4, #12]
 800b416:	89a0      	ldrh	r0, [r4, #12]
 800b418:	4307      	orrs	r7, r0
 800b41a:	81a7      	strh	r7, [r4, #12]
 800b41c:	e7cb      	b.n	800b3b6 <__smakebuf_r+0x1a>
 800b41e:	46c0      	nop			; (mov r8, r8)
 800b420:	0800b191 	.word	0x0800b191

0800b424 <_malloc_usable_size_r>:
 800b424:	1f0b      	subs	r3, r1, #4
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	1f18      	subs	r0, r3, #4
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	da01      	bge.n	800b432 <_malloc_usable_size_r+0xe>
 800b42e:	580b      	ldr	r3, [r1, r0]
 800b430:	18c0      	adds	r0, r0, r3
 800b432:	4770      	bx	lr

0800b434 <_raise_r>:
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	0004      	movs	r4, r0
 800b438:	000d      	movs	r5, r1
 800b43a:	291f      	cmp	r1, #31
 800b43c:	d904      	bls.n	800b448 <_raise_r+0x14>
 800b43e:	2316      	movs	r3, #22
 800b440:	6003      	str	r3, [r0, #0]
 800b442:	2001      	movs	r0, #1
 800b444:	4240      	negs	r0, r0
 800b446:	bd70      	pop	{r4, r5, r6, pc}
 800b448:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d004      	beq.n	800b458 <_raise_r+0x24>
 800b44e:	008a      	lsls	r2, r1, #2
 800b450:	189b      	adds	r3, r3, r2
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	2a00      	cmp	r2, #0
 800b456:	d108      	bne.n	800b46a <_raise_r+0x36>
 800b458:	0020      	movs	r0, r4
 800b45a:	f000 f831 	bl	800b4c0 <_getpid_r>
 800b45e:	002a      	movs	r2, r5
 800b460:	0001      	movs	r1, r0
 800b462:	0020      	movs	r0, r4
 800b464:	f000 f81a 	bl	800b49c <_kill_r>
 800b468:	e7ed      	b.n	800b446 <_raise_r+0x12>
 800b46a:	2000      	movs	r0, #0
 800b46c:	2a01      	cmp	r2, #1
 800b46e:	d0ea      	beq.n	800b446 <_raise_r+0x12>
 800b470:	1c51      	adds	r1, r2, #1
 800b472:	d103      	bne.n	800b47c <_raise_r+0x48>
 800b474:	2316      	movs	r3, #22
 800b476:	3001      	adds	r0, #1
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	e7e4      	b.n	800b446 <_raise_r+0x12>
 800b47c:	2400      	movs	r4, #0
 800b47e:	0028      	movs	r0, r5
 800b480:	601c      	str	r4, [r3, #0]
 800b482:	4790      	blx	r2
 800b484:	0020      	movs	r0, r4
 800b486:	e7de      	b.n	800b446 <_raise_r+0x12>

0800b488 <raise>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	4b03      	ldr	r3, [pc, #12]	; (800b498 <raise+0x10>)
 800b48c:	0001      	movs	r1, r0
 800b48e:	6818      	ldr	r0, [r3, #0]
 800b490:	f7ff ffd0 	bl	800b434 <_raise_r>
 800b494:	bd10      	pop	{r4, pc}
 800b496:	46c0      	nop			; (mov r8, r8)
 800b498:	2000000c 	.word	0x2000000c

0800b49c <_kill_r>:
 800b49c:	2300      	movs	r3, #0
 800b49e:	b570      	push	{r4, r5, r6, lr}
 800b4a0:	4d06      	ldr	r5, [pc, #24]	; (800b4bc <_kill_r+0x20>)
 800b4a2:	0004      	movs	r4, r0
 800b4a4:	0008      	movs	r0, r1
 800b4a6:	0011      	movs	r1, r2
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	f7f7 fe47 	bl	800313c <_kill>
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	d103      	bne.n	800b4ba <_kill_r+0x1e>
 800b4b2:	682b      	ldr	r3, [r5, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d000      	beq.n	800b4ba <_kill_r+0x1e>
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	20000438 	.word	0x20000438

0800b4c0 <_getpid_r>:
 800b4c0:	b510      	push	{r4, lr}
 800b4c2:	f7f7 fe35 	bl	8003130 <_getpid>
 800b4c6:	bd10      	pop	{r4, pc}

0800b4c8 <__sread>:
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	000c      	movs	r4, r1
 800b4cc:	250e      	movs	r5, #14
 800b4ce:	5f49      	ldrsh	r1, [r1, r5]
 800b4d0:	f000 f8a4 	bl	800b61c <_read_r>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	db03      	blt.n	800b4e0 <__sread+0x18>
 800b4d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b4da:	181b      	adds	r3, r3, r0
 800b4dc:	6563      	str	r3, [r4, #84]	; 0x54
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	4a02      	ldr	r2, [pc, #8]	; (800b4ec <__sread+0x24>)
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	e7f9      	b.n	800b4de <__sread+0x16>
 800b4ea:	46c0      	nop			; (mov r8, r8)
 800b4ec:	ffffefff 	.word	0xffffefff

0800b4f0 <__swrite>:
 800b4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f2:	001f      	movs	r7, r3
 800b4f4:	898b      	ldrh	r3, [r1, #12]
 800b4f6:	0005      	movs	r5, r0
 800b4f8:	000c      	movs	r4, r1
 800b4fa:	0016      	movs	r6, r2
 800b4fc:	05db      	lsls	r3, r3, #23
 800b4fe:	d505      	bpl.n	800b50c <__swrite+0x1c>
 800b500:	230e      	movs	r3, #14
 800b502:	5ec9      	ldrsh	r1, [r1, r3]
 800b504:	2200      	movs	r2, #0
 800b506:	2302      	movs	r3, #2
 800b508:	f000 f874 	bl	800b5f4 <_lseek_r>
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	4a05      	ldr	r2, [pc, #20]	; (800b524 <__swrite+0x34>)
 800b510:	0028      	movs	r0, r5
 800b512:	4013      	ands	r3, r2
 800b514:	81a3      	strh	r3, [r4, #12]
 800b516:	0032      	movs	r2, r6
 800b518:	230e      	movs	r3, #14
 800b51a:	5ee1      	ldrsh	r1, [r4, r3]
 800b51c:	003b      	movs	r3, r7
 800b51e:	f000 f81f 	bl	800b560 <_write_r>
 800b522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b524:	ffffefff 	.word	0xffffefff

0800b528 <__sseek>:
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	000c      	movs	r4, r1
 800b52c:	250e      	movs	r5, #14
 800b52e:	5f49      	ldrsh	r1, [r1, r5]
 800b530:	f000 f860 	bl	800b5f4 <_lseek_r>
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	1c42      	adds	r2, r0, #1
 800b538:	d103      	bne.n	800b542 <__sseek+0x1a>
 800b53a:	4a05      	ldr	r2, [pc, #20]	; (800b550 <__sseek+0x28>)
 800b53c:	4013      	ands	r3, r2
 800b53e:	81a3      	strh	r3, [r4, #12]
 800b540:	bd70      	pop	{r4, r5, r6, pc}
 800b542:	2280      	movs	r2, #128	; 0x80
 800b544:	0152      	lsls	r2, r2, #5
 800b546:	4313      	orrs	r3, r2
 800b548:	81a3      	strh	r3, [r4, #12]
 800b54a:	6560      	str	r0, [r4, #84]	; 0x54
 800b54c:	e7f8      	b.n	800b540 <__sseek+0x18>
 800b54e:	46c0      	nop			; (mov r8, r8)
 800b550:	ffffefff 	.word	0xffffefff

0800b554 <__sclose>:
 800b554:	b510      	push	{r4, lr}
 800b556:	230e      	movs	r3, #14
 800b558:	5ec9      	ldrsh	r1, [r1, r3]
 800b55a:	f000 f815 	bl	800b588 <_close_r>
 800b55e:	bd10      	pop	{r4, pc}

0800b560 <_write_r>:
 800b560:	b570      	push	{r4, r5, r6, lr}
 800b562:	0004      	movs	r4, r0
 800b564:	0008      	movs	r0, r1
 800b566:	0011      	movs	r1, r2
 800b568:	001a      	movs	r2, r3
 800b56a:	2300      	movs	r3, #0
 800b56c:	4d05      	ldr	r5, [pc, #20]	; (800b584 <_write_r+0x24>)
 800b56e:	602b      	str	r3, [r5, #0]
 800b570:	f7f7 fe1d 	bl	80031ae <_write>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	d103      	bne.n	800b580 <_write_r+0x20>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d000      	beq.n	800b580 <_write_r+0x20>
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	bd70      	pop	{r4, r5, r6, pc}
 800b582:	46c0      	nop			; (mov r8, r8)
 800b584:	20000438 	.word	0x20000438

0800b588 <_close_r>:
 800b588:	2300      	movs	r3, #0
 800b58a:	b570      	push	{r4, r5, r6, lr}
 800b58c:	4d06      	ldr	r5, [pc, #24]	; (800b5a8 <_close_r+0x20>)
 800b58e:	0004      	movs	r4, r0
 800b590:	0008      	movs	r0, r1
 800b592:	602b      	str	r3, [r5, #0]
 800b594:	f7f7 fe27 	bl	80031e6 <_close>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d103      	bne.n	800b5a4 <_close_r+0x1c>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d000      	beq.n	800b5a4 <_close_r+0x1c>
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	bd70      	pop	{r4, r5, r6, pc}
 800b5a6:	46c0      	nop			; (mov r8, r8)
 800b5a8:	20000438 	.word	0x20000438

0800b5ac <_fstat_r>:
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	b570      	push	{r4, r5, r6, lr}
 800b5b0:	4d06      	ldr	r5, [pc, #24]	; (800b5cc <_fstat_r+0x20>)
 800b5b2:	0004      	movs	r4, r0
 800b5b4:	0008      	movs	r0, r1
 800b5b6:	0011      	movs	r1, r2
 800b5b8:	602b      	str	r3, [r5, #0]
 800b5ba:	f7f7 fe1e 	bl	80031fa <_fstat>
 800b5be:	1c43      	adds	r3, r0, #1
 800b5c0:	d103      	bne.n	800b5ca <_fstat_r+0x1e>
 800b5c2:	682b      	ldr	r3, [r5, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d000      	beq.n	800b5ca <_fstat_r+0x1e>
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	20000438 	.word	0x20000438

0800b5d0 <_isatty_r>:
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	b570      	push	{r4, r5, r6, lr}
 800b5d4:	4d06      	ldr	r5, [pc, #24]	; (800b5f0 <_isatty_r+0x20>)
 800b5d6:	0004      	movs	r4, r0
 800b5d8:	0008      	movs	r0, r1
 800b5da:	602b      	str	r3, [r5, #0]
 800b5dc:	f7f7 fe1b 	bl	8003216 <_isatty>
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	d103      	bne.n	800b5ec <_isatty_r+0x1c>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d000      	beq.n	800b5ec <_isatty_r+0x1c>
 800b5ea:	6023      	str	r3, [r4, #0]
 800b5ec:	bd70      	pop	{r4, r5, r6, pc}
 800b5ee:	46c0      	nop			; (mov r8, r8)
 800b5f0:	20000438 	.word	0x20000438

0800b5f4 <_lseek_r>:
 800b5f4:	b570      	push	{r4, r5, r6, lr}
 800b5f6:	0004      	movs	r4, r0
 800b5f8:	0008      	movs	r0, r1
 800b5fa:	0011      	movs	r1, r2
 800b5fc:	001a      	movs	r2, r3
 800b5fe:	2300      	movs	r3, #0
 800b600:	4d05      	ldr	r5, [pc, #20]	; (800b618 <_lseek_r+0x24>)
 800b602:	602b      	str	r3, [r5, #0]
 800b604:	f7f7 fe10 	bl	8003228 <_lseek>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d103      	bne.n	800b614 <_lseek_r+0x20>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d000      	beq.n	800b614 <_lseek_r+0x20>
 800b612:	6023      	str	r3, [r4, #0]
 800b614:	bd70      	pop	{r4, r5, r6, pc}
 800b616:	46c0      	nop			; (mov r8, r8)
 800b618:	20000438 	.word	0x20000438

0800b61c <_read_r>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	0004      	movs	r4, r0
 800b620:	0008      	movs	r0, r1
 800b622:	0011      	movs	r1, r2
 800b624:	001a      	movs	r2, r3
 800b626:	2300      	movs	r3, #0
 800b628:	4d05      	ldr	r5, [pc, #20]	; (800b640 <_read_r+0x24>)
 800b62a:	602b      	str	r3, [r5, #0]
 800b62c:	f7f7 fda2 	bl	8003174 <_read>
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	d103      	bne.n	800b63c <_read_r+0x20>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d000      	beq.n	800b63c <_read_r+0x20>
 800b63a:	6023      	str	r3, [r4, #0]
 800b63c:	bd70      	pop	{r4, r5, r6, pc}
 800b63e:	46c0      	nop			; (mov r8, r8)
 800b640:	20000438 	.word	0x20000438

0800b644 <_init>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	46c0      	nop			; (mov r8, r8)
 800b648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b64a:	bc08      	pop	{r3}
 800b64c:	469e      	mov	lr, r3
 800b64e:	4770      	bx	lr

0800b650 <_fini>:
 800b650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b652:	46c0      	nop			; (mov r8, r8)
 800b654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b656:	bc08      	pop	{r3}
 800b658:	469e      	mov	lr, r3
 800b65a:	4770      	bx	lr
