
brake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b674  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800b730  0800b730  0001b730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdcc  0800bdcc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdcc  0800bdcc  0001bdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdd4  0800bdd4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdd4  0800bdd4  0001bdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdd8  0800bdd8  0001bdd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001e0  0800bfbc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800bfbc  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bf05  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053a2  00000000  00000000  0004c10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00020d67  00000000  00000000  000514af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00072218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000037f8  00000000  00000000  00073470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c359  00000000  00000000  00076c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e090  00000000  00000000  00092fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a37e7  00000000  00000000  000c1051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164838  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f64  00000000  00000000  00164888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b718 	.word	0x0800b718

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800b718 	.word	0x0800b718

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fdb9 	bl	8001fb0 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fd09 	bl	8001e60 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fdab 	bl	8001fb0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fda1 	bl	8001fb0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd31 	bl	8001ee4 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd27 	bl	8001ee4 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fb2b 	bl	8000b08 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fab7 	bl	8000a30 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fb1d 	bl	8000b08 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb13 	bl	8000b08 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fac3 	bl	8000a7c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fab9 	bl	8000a7c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	; (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f88e 	bl	8000668 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_f2uiz>:
 8000558:	219e      	movs	r1, #158	; 0x9e
 800055a:	b510      	push	{r4, lr}
 800055c:	05c9      	lsls	r1, r1, #23
 800055e:	1c04      	adds	r4, r0, #0
 8000560:	f7ff ffd0 	bl	8000504 <__aeabi_fcmpge>
 8000564:	2800      	cmp	r0, #0
 8000566:	d103      	bne.n	8000570 <__aeabi_f2uiz+0x18>
 8000568:	1c20      	adds	r0, r4, #0
 800056a:	f000 fde5 	bl	8001138 <__aeabi_f2iz>
 800056e:	bd10      	pop	{r4, pc}
 8000570:	219e      	movs	r1, #158	; 0x9e
 8000572:	1c20      	adds	r0, r4, #0
 8000574:	05c9      	lsls	r1, r1, #23
 8000576:	f000 fc31 	bl	8000ddc <__aeabi_fsub>
 800057a:	f000 fddd 	bl	8001138 <__aeabi_f2iz>
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	061b      	lsls	r3, r3, #24
 8000582:	469c      	mov	ip, r3
 8000584:	4460      	add	r0, ip
 8000586:	e7f2      	b.n	800056e <__aeabi_f2uiz+0x16>

08000588 <__aeabi_d2uiz>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	2200      	movs	r2, #0
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <__aeabi_d2uiz+0x38>)
 800058e:	0004      	movs	r4, r0
 8000590:	000d      	movs	r5, r1
 8000592:	f7ff ff7d 	bl	8000490 <__aeabi_dcmpge>
 8000596:	2800      	cmp	r0, #0
 8000598:	d104      	bne.n	80005a4 <__aeabi_d2uiz+0x1c>
 800059a:	0020      	movs	r0, r4
 800059c:	0029      	movs	r1, r5
 800059e:	f002 fb87 	bl	8002cb0 <__aeabi_d2iz>
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_d2uiz+0x38>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	0020      	movs	r0, r4
 80005aa:	0029      	movs	r1, r5
 80005ac:	f001 ffd0 	bl	8002550 <__aeabi_dsub>
 80005b0:	f002 fb7e 	bl	8002cb0 <__aeabi_d2iz>
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	061b      	lsls	r3, r3, #24
 80005b8:	469c      	mov	ip, r3
 80005ba:	4460      	add	r0, ip
 80005bc:	e7f1      	b.n	80005a2 <__aeabi_d2uiz+0x1a>
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41e00000 	.word	0x41e00000

080005c4 <__aeabi_d2lz>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	0005      	movs	r5, r0
 80005c8:	000c      	movs	r4, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	2300      	movs	r3, #0
 80005ce:	0028      	movs	r0, r5
 80005d0:	0021      	movs	r1, r4
 80005d2:	f7ff ff3f 	bl	8000454 <__aeabi_dcmplt>
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d108      	bne.n	80005ec <__aeabi_d2lz+0x28>
 80005da:	0028      	movs	r0, r5
 80005dc:	0021      	movs	r1, r4
 80005de:	f000 f80f 	bl	8000600 <__aeabi_d2ulz>
 80005e2:	0002      	movs	r2, r0
 80005e4:	000b      	movs	r3, r1
 80005e6:	0010      	movs	r0, r2
 80005e8:	0019      	movs	r1, r3
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	061b      	lsls	r3, r3, #24
 80005f0:	18e1      	adds	r1, r4, r3
 80005f2:	0028      	movs	r0, r5
 80005f4:	f000 f804 	bl	8000600 <__aeabi_d2ulz>
 80005f8:	2300      	movs	r3, #0
 80005fa:	4242      	negs	r2, r0
 80005fc:	418b      	sbcs	r3, r1
 80005fe:	e7f2      	b.n	80005e6 <__aeabi_d2lz+0x22>

08000600 <__aeabi_d2ulz>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2200      	movs	r2, #0
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <__aeabi_d2ulz+0x34>)
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	f001 fd35 	bl	8002078 <__aeabi_dmul>
 800060e:	f7ff ffbb 	bl	8000588 <__aeabi_d2uiz>
 8000612:	0006      	movs	r6, r0
 8000614:	f002 fbb2 	bl	8002d7c <__aeabi_ui2d>
 8000618:	2200      	movs	r2, #0
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <__aeabi_d2ulz+0x38>)
 800061c:	f001 fd2c 	bl	8002078 <__aeabi_dmul>
 8000620:	0002      	movs	r2, r0
 8000622:	000b      	movs	r3, r1
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f001 ff92 	bl	8002550 <__aeabi_dsub>
 800062c:	f7ff ffac 	bl	8000588 <__aeabi_d2uiz>
 8000630:	0031      	movs	r1, r6
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	3df00000 	.word	0x3df00000
 8000638:	41f00000 	.word	0x41f00000

0800063c <__aeabi_l2d>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	0006      	movs	r6, r0
 8000640:	0008      	movs	r0, r1
 8000642:	f002 fb6b 	bl	8002d1c <__aeabi_i2d>
 8000646:	2200      	movs	r2, #0
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <__aeabi_l2d+0x28>)
 800064a:	f001 fd15 	bl	8002078 <__aeabi_dmul>
 800064e:	000d      	movs	r5, r1
 8000650:	0004      	movs	r4, r0
 8000652:	0030      	movs	r0, r6
 8000654:	f002 fb92 	bl	8002d7c <__aeabi_ui2d>
 8000658:	002b      	movs	r3, r5
 800065a:	0022      	movs	r2, r4
 800065c:	f000 fdce 	bl	80011fc <__aeabi_dadd>
 8000660:	bd70      	pop	{r4, r5, r6, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	41f00000 	.word	0x41f00000

08000668 <__udivmoddi4>:
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	4657      	mov	r7, sl
 800066c:	464e      	mov	r6, r9
 800066e:	4645      	mov	r5, r8
 8000670:	46de      	mov	lr, fp
 8000672:	b5e0      	push	{r5, r6, r7, lr}
 8000674:	0004      	movs	r4, r0
 8000676:	000d      	movs	r5, r1
 8000678:	4692      	mov	sl, r2
 800067a:	4699      	mov	r9, r3
 800067c:	b083      	sub	sp, #12
 800067e:	428b      	cmp	r3, r1
 8000680:	d830      	bhi.n	80006e4 <__udivmoddi4+0x7c>
 8000682:	d02d      	beq.n	80006e0 <__udivmoddi4+0x78>
 8000684:	4649      	mov	r1, r9
 8000686:	4650      	mov	r0, sl
 8000688:	f002 fc44 	bl	8002f14 <__clzdi2>
 800068c:	0029      	movs	r1, r5
 800068e:	0006      	movs	r6, r0
 8000690:	0020      	movs	r0, r4
 8000692:	f002 fc3f 	bl	8002f14 <__clzdi2>
 8000696:	1a33      	subs	r3, r6, r0
 8000698:	4698      	mov	r8, r3
 800069a:	3b20      	subs	r3, #32
 800069c:	469b      	mov	fp, r3
 800069e:	d433      	bmi.n	8000708 <__udivmoddi4+0xa0>
 80006a0:	465a      	mov	r2, fp
 80006a2:	4653      	mov	r3, sl
 80006a4:	4093      	lsls	r3, r2
 80006a6:	4642      	mov	r2, r8
 80006a8:	001f      	movs	r7, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	4093      	lsls	r3, r2
 80006ae:	001e      	movs	r6, r3
 80006b0:	42af      	cmp	r7, r5
 80006b2:	d83a      	bhi.n	800072a <__udivmoddi4+0xc2>
 80006b4:	42af      	cmp	r7, r5
 80006b6:	d100      	bne.n	80006ba <__udivmoddi4+0x52>
 80006b8:	e078      	b.n	80007ac <__udivmoddi4+0x144>
 80006ba:	465b      	mov	r3, fp
 80006bc:	1ba4      	subs	r4, r4, r6
 80006be:	41bd      	sbcs	r5, r7
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da00      	bge.n	80006c6 <__udivmoddi4+0x5e>
 80006c4:	e075      	b.n	80007b2 <__udivmoddi4+0x14a>
 80006c6:	2200      	movs	r2, #0
 80006c8:	2300      	movs	r3, #0
 80006ca:	9200      	str	r2, [sp, #0]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	465a      	mov	r2, fp
 80006d2:	4093      	lsls	r3, r2
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2301      	movs	r3, #1
 80006d8:	4642      	mov	r2, r8
 80006da:	4093      	lsls	r3, r2
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	e028      	b.n	8000732 <__udivmoddi4+0xca>
 80006e0:	4282      	cmp	r2, r0
 80006e2:	d9cf      	bls.n	8000684 <__udivmoddi4+0x1c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <__udivmoddi4+0x8e>
 80006f2:	601c      	str	r4, [r3, #0]
 80006f4:	605d      	str	r5, [r3, #4]
 80006f6:	9800      	ldr	r0, [sp, #0]
 80006f8:	9901      	ldr	r1, [sp, #4]
 80006fa:	b003      	add	sp, #12
 80006fc:	bcf0      	pop	{r4, r5, r6, r7}
 80006fe:	46bb      	mov	fp, r7
 8000700:	46b2      	mov	sl, r6
 8000702:	46a9      	mov	r9, r5
 8000704:	46a0      	mov	r8, r4
 8000706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000708:	4642      	mov	r2, r8
 800070a:	2320      	movs	r3, #32
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	4652      	mov	r2, sl
 8000710:	40da      	lsrs	r2, r3
 8000712:	4641      	mov	r1, r8
 8000714:	0013      	movs	r3, r2
 8000716:	464a      	mov	r2, r9
 8000718:	408a      	lsls	r2, r1
 800071a:	0017      	movs	r7, r2
 800071c:	4642      	mov	r2, r8
 800071e:	431f      	orrs	r7, r3
 8000720:	4653      	mov	r3, sl
 8000722:	4093      	lsls	r3, r2
 8000724:	001e      	movs	r6, r3
 8000726:	42af      	cmp	r7, r5
 8000728:	d9c4      	bls.n	80006b4 <__udivmoddi4+0x4c>
 800072a:	2200      	movs	r2, #0
 800072c:	2300      	movs	r3, #0
 800072e:	9200      	str	r2, [sp, #0]
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4643      	mov	r3, r8
 8000734:	2b00      	cmp	r3, #0
 8000736:	d0d9      	beq.n	80006ec <__udivmoddi4+0x84>
 8000738:	07fb      	lsls	r3, r7, #31
 800073a:	0872      	lsrs	r2, r6, #1
 800073c:	431a      	orrs	r2, r3
 800073e:	4646      	mov	r6, r8
 8000740:	087b      	lsrs	r3, r7, #1
 8000742:	e00e      	b.n	8000762 <__udivmoddi4+0xfa>
 8000744:	42ab      	cmp	r3, r5
 8000746:	d101      	bne.n	800074c <__udivmoddi4+0xe4>
 8000748:	42a2      	cmp	r2, r4
 800074a:	d80c      	bhi.n	8000766 <__udivmoddi4+0xfe>
 800074c:	1aa4      	subs	r4, r4, r2
 800074e:	419d      	sbcs	r5, r3
 8000750:	2001      	movs	r0, #1
 8000752:	1924      	adds	r4, r4, r4
 8000754:	416d      	adcs	r5, r5
 8000756:	2100      	movs	r1, #0
 8000758:	3e01      	subs	r6, #1
 800075a:	1824      	adds	r4, r4, r0
 800075c:	414d      	adcs	r5, r1
 800075e:	2e00      	cmp	r6, #0
 8000760:	d006      	beq.n	8000770 <__udivmoddi4+0x108>
 8000762:	42ab      	cmp	r3, r5
 8000764:	d9ee      	bls.n	8000744 <__udivmoddi4+0xdc>
 8000766:	3e01      	subs	r6, #1
 8000768:	1924      	adds	r4, r4, r4
 800076a:	416d      	adcs	r5, r5
 800076c:	2e00      	cmp	r6, #0
 800076e:	d1f8      	bne.n	8000762 <__udivmoddi4+0xfa>
 8000770:	9800      	ldr	r0, [sp, #0]
 8000772:	9901      	ldr	r1, [sp, #4]
 8000774:	465b      	mov	r3, fp
 8000776:	1900      	adds	r0, r0, r4
 8000778:	4169      	adcs	r1, r5
 800077a:	2b00      	cmp	r3, #0
 800077c:	db24      	blt.n	80007c8 <__udivmoddi4+0x160>
 800077e:	002b      	movs	r3, r5
 8000780:	465a      	mov	r2, fp
 8000782:	4644      	mov	r4, r8
 8000784:	40d3      	lsrs	r3, r2
 8000786:	002a      	movs	r2, r5
 8000788:	40e2      	lsrs	r2, r4
 800078a:	001c      	movs	r4, r3
 800078c:	465b      	mov	r3, fp
 800078e:	0015      	movs	r5, r2
 8000790:	2b00      	cmp	r3, #0
 8000792:	db2a      	blt.n	80007ea <__udivmoddi4+0x182>
 8000794:	0026      	movs	r6, r4
 8000796:	409e      	lsls	r6, r3
 8000798:	0033      	movs	r3, r6
 800079a:	0026      	movs	r6, r4
 800079c:	4647      	mov	r7, r8
 800079e:	40be      	lsls	r6, r7
 80007a0:	0032      	movs	r2, r6
 80007a2:	1a80      	subs	r0, r0, r2
 80007a4:	4199      	sbcs	r1, r3
 80007a6:	9000      	str	r0, [sp, #0]
 80007a8:	9101      	str	r1, [sp, #4]
 80007aa:	e79f      	b.n	80006ec <__udivmoddi4+0x84>
 80007ac:	42a3      	cmp	r3, r4
 80007ae:	d8bc      	bhi.n	800072a <__udivmoddi4+0xc2>
 80007b0:	e783      	b.n	80006ba <__udivmoddi4+0x52>
 80007b2:	4642      	mov	r2, r8
 80007b4:	2320      	movs	r3, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	2200      	movs	r2, #0
 80007bc:	9100      	str	r1, [sp, #0]
 80007be:	9201      	str	r2, [sp, #4]
 80007c0:	2201      	movs	r2, #1
 80007c2:	40da      	lsrs	r2, r3
 80007c4:	9201      	str	r2, [sp, #4]
 80007c6:	e786      	b.n	80006d6 <__udivmoddi4+0x6e>
 80007c8:	4642      	mov	r2, r8
 80007ca:	2320      	movs	r3, #32
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	002a      	movs	r2, r5
 80007d0:	4646      	mov	r6, r8
 80007d2:	409a      	lsls	r2, r3
 80007d4:	0023      	movs	r3, r4
 80007d6:	40f3      	lsrs	r3, r6
 80007d8:	4644      	mov	r4, r8
 80007da:	4313      	orrs	r3, r2
 80007dc:	002a      	movs	r2, r5
 80007de:	40e2      	lsrs	r2, r4
 80007e0:	001c      	movs	r4, r3
 80007e2:	465b      	mov	r3, fp
 80007e4:	0015      	movs	r5, r2
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	dad4      	bge.n	8000794 <__udivmoddi4+0x12c>
 80007ea:	4642      	mov	r2, r8
 80007ec:	002f      	movs	r7, r5
 80007ee:	2320      	movs	r3, #32
 80007f0:	0026      	movs	r6, r4
 80007f2:	4097      	lsls	r7, r2
 80007f4:	1a9b      	subs	r3, r3, r2
 80007f6:	40de      	lsrs	r6, r3
 80007f8:	003b      	movs	r3, r7
 80007fa:	4333      	orrs	r3, r6
 80007fc:	e7cd      	b.n	800079a <__udivmoddi4+0x132>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__aeabi_fdiv>:
 8000800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000802:	464f      	mov	r7, r9
 8000804:	4646      	mov	r6, r8
 8000806:	46d6      	mov	lr, sl
 8000808:	0245      	lsls	r5, r0, #9
 800080a:	b5c0      	push	{r6, r7, lr}
 800080c:	0047      	lsls	r7, r0, #1
 800080e:	1c0c      	adds	r4, r1, #0
 8000810:	0a6d      	lsrs	r5, r5, #9
 8000812:	0e3f      	lsrs	r7, r7, #24
 8000814:	0fc6      	lsrs	r6, r0, #31
 8000816:	2f00      	cmp	r7, #0
 8000818:	d100      	bne.n	800081c <__aeabi_fdiv+0x1c>
 800081a:	e070      	b.n	80008fe <__aeabi_fdiv+0xfe>
 800081c:	2fff      	cmp	r7, #255	; 0xff
 800081e:	d100      	bne.n	8000822 <__aeabi_fdiv+0x22>
 8000820:	e075      	b.n	800090e <__aeabi_fdiv+0x10e>
 8000822:	00eb      	lsls	r3, r5, #3
 8000824:	2580      	movs	r5, #128	; 0x80
 8000826:	04ed      	lsls	r5, r5, #19
 8000828:	431d      	orrs	r5, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4699      	mov	r9, r3
 800082e:	469a      	mov	sl, r3
 8000830:	3f7f      	subs	r7, #127	; 0x7f
 8000832:	0260      	lsls	r0, r4, #9
 8000834:	0a43      	lsrs	r3, r0, #9
 8000836:	4698      	mov	r8, r3
 8000838:	0063      	lsls	r3, r4, #1
 800083a:	0e1b      	lsrs	r3, r3, #24
 800083c:	0fe4      	lsrs	r4, r4, #31
 800083e:	2b00      	cmp	r3, #0
 8000840:	d04e      	beq.n	80008e0 <__aeabi_fdiv+0xe0>
 8000842:	2bff      	cmp	r3, #255	; 0xff
 8000844:	d046      	beq.n	80008d4 <__aeabi_fdiv+0xd4>
 8000846:	4642      	mov	r2, r8
 8000848:	00d0      	lsls	r0, r2, #3
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	04d2      	lsls	r2, r2, #19
 800084e:	4302      	orrs	r2, r0
 8000850:	4690      	mov	r8, r2
 8000852:	2200      	movs	r2, #0
 8000854:	3b7f      	subs	r3, #127	; 0x7f
 8000856:	0031      	movs	r1, r6
 8000858:	1aff      	subs	r7, r7, r3
 800085a:	464b      	mov	r3, r9
 800085c:	4061      	eors	r1, r4
 800085e:	b2c9      	uxtb	r1, r1
 8000860:	4313      	orrs	r3, r2
 8000862:	2b0f      	cmp	r3, #15
 8000864:	d900      	bls.n	8000868 <__aeabi_fdiv+0x68>
 8000866:	e0b5      	b.n	80009d4 <__aeabi_fdiv+0x1d4>
 8000868:	486e      	ldr	r0, [pc, #440]	; (8000a24 <__aeabi_fdiv+0x224>)
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	58c3      	ldr	r3, [r0, r3]
 800086e:	469f      	mov	pc, r3
 8000870:	2300      	movs	r3, #0
 8000872:	4698      	mov	r8, r3
 8000874:	0026      	movs	r6, r4
 8000876:	4645      	mov	r5, r8
 8000878:	4692      	mov	sl, r2
 800087a:	4653      	mov	r3, sl
 800087c:	2b02      	cmp	r3, #2
 800087e:	d100      	bne.n	8000882 <__aeabi_fdiv+0x82>
 8000880:	e089      	b.n	8000996 <__aeabi_fdiv+0x196>
 8000882:	2b03      	cmp	r3, #3
 8000884:	d100      	bne.n	8000888 <__aeabi_fdiv+0x88>
 8000886:	e09e      	b.n	80009c6 <__aeabi_fdiv+0x1c6>
 8000888:	2b01      	cmp	r3, #1
 800088a:	d018      	beq.n	80008be <__aeabi_fdiv+0xbe>
 800088c:	003b      	movs	r3, r7
 800088e:	337f      	adds	r3, #127	; 0x7f
 8000890:	2b00      	cmp	r3, #0
 8000892:	dd69      	ble.n	8000968 <__aeabi_fdiv+0x168>
 8000894:	076a      	lsls	r2, r5, #29
 8000896:	d004      	beq.n	80008a2 <__aeabi_fdiv+0xa2>
 8000898:	220f      	movs	r2, #15
 800089a:	402a      	ands	r2, r5
 800089c:	2a04      	cmp	r2, #4
 800089e:	d000      	beq.n	80008a2 <__aeabi_fdiv+0xa2>
 80008a0:	3504      	adds	r5, #4
 80008a2:	012a      	lsls	r2, r5, #4
 80008a4:	d503      	bpl.n	80008ae <__aeabi_fdiv+0xae>
 80008a6:	4b60      	ldr	r3, [pc, #384]	; (8000a28 <__aeabi_fdiv+0x228>)
 80008a8:	401d      	ands	r5, r3
 80008aa:	003b      	movs	r3, r7
 80008ac:	3380      	adds	r3, #128	; 0x80
 80008ae:	2bfe      	cmp	r3, #254	; 0xfe
 80008b0:	dd00      	ble.n	80008b4 <__aeabi_fdiv+0xb4>
 80008b2:	e070      	b.n	8000996 <__aeabi_fdiv+0x196>
 80008b4:	01ad      	lsls	r5, r5, #6
 80008b6:	0a6d      	lsrs	r5, r5, #9
 80008b8:	b2d8      	uxtb	r0, r3
 80008ba:	e002      	b.n	80008c2 <__aeabi_fdiv+0xc2>
 80008bc:	000e      	movs	r6, r1
 80008be:	2000      	movs	r0, #0
 80008c0:	2500      	movs	r5, #0
 80008c2:	05c0      	lsls	r0, r0, #23
 80008c4:	4328      	orrs	r0, r5
 80008c6:	07f6      	lsls	r6, r6, #31
 80008c8:	4330      	orrs	r0, r6
 80008ca:	bce0      	pop	{r5, r6, r7}
 80008cc:	46ba      	mov	sl, r7
 80008ce:	46b1      	mov	r9, r6
 80008d0:	46a8      	mov	r8, r5
 80008d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d4:	4643      	mov	r3, r8
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d13f      	bne.n	800095a <__aeabi_fdiv+0x15a>
 80008da:	2202      	movs	r2, #2
 80008dc:	3fff      	subs	r7, #255	; 0xff
 80008de:	e003      	b.n	80008e8 <__aeabi_fdiv+0xe8>
 80008e0:	4643      	mov	r3, r8
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d12d      	bne.n	8000942 <__aeabi_fdiv+0x142>
 80008e6:	2201      	movs	r2, #1
 80008e8:	0031      	movs	r1, r6
 80008ea:	464b      	mov	r3, r9
 80008ec:	4061      	eors	r1, r4
 80008ee:	b2c9      	uxtb	r1, r1
 80008f0:	4313      	orrs	r3, r2
 80008f2:	2b0f      	cmp	r3, #15
 80008f4:	d834      	bhi.n	8000960 <__aeabi_fdiv+0x160>
 80008f6:	484d      	ldr	r0, [pc, #308]	; (8000a2c <__aeabi_fdiv+0x22c>)
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	58c3      	ldr	r3, [r0, r3]
 80008fc:	469f      	mov	pc, r3
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d113      	bne.n	800092a <__aeabi_fdiv+0x12a>
 8000902:	2304      	movs	r3, #4
 8000904:	4699      	mov	r9, r3
 8000906:	3b03      	subs	r3, #3
 8000908:	2700      	movs	r7, #0
 800090a:	469a      	mov	sl, r3
 800090c:	e791      	b.n	8000832 <__aeabi_fdiv+0x32>
 800090e:	2d00      	cmp	r5, #0
 8000910:	d105      	bne.n	800091e <__aeabi_fdiv+0x11e>
 8000912:	2308      	movs	r3, #8
 8000914:	4699      	mov	r9, r3
 8000916:	3b06      	subs	r3, #6
 8000918:	27ff      	movs	r7, #255	; 0xff
 800091a:	469a      	mov	sl, r3
 800091c:	e789      	b.n	8000832 <__aeabi_fdiv+0x32>
 800091e:	230c      	movs	r3, #12
 8000920:	4699      	mov	r9, r3
 8000922:	3b09      	subs	r3, #9
 8000924:	27ff      	movs	r7, #255	; 0xff
 8000926:	469a      	mov	sl, r3
 8000928:	e783      	b.n	8000832 <__aeabi_fdiv+0x32>
 800092a:	0028      	movs	r0, r5
 800092c:	f002 fad4 	bl	8002ed8 <__clzsi2>
 8000930:	2776      	movs	r7, #118	; 0x76
 8000932:	1f43      	subs	r3, r0, #5
 8000934:	409d      	lsls	r5, r3
 8000936:	2300      	movs	r3, #0
 8000938:	427f      	negs	r7, r7
 800093a:	4699      	mov	r9, r3
 800093c:	469a      	mov	sl, r3
 800093e:	1a3f      	subs	r7, r7, r0
 8000940:	e777      	b.n	8000832 <__aeabi_fdiv+0x32>
 8000942:	4640      	mov	r0, r8
 8000944:	f002 fac8 	bl	8002ed8 <__clzsi2>
 8000948:	4642      	mov	r2, r8
 800094a:	1f43      	subs	r3, r0, #5
 800094c:	409a      	lsls	r2, r3
 800094e:	2376      	movs	r3, #118	; 0x76
 8000950:	425b      	negs	r3, r3
 8000952:	4690      	mov	r8, r2
 8000954:	1a1b      	subs	r3, r3, r0
 8000956:	2200      	movs	r2, #0
 8000958:	e77d      	b.n	8000856 <__aeabi_fdiv+0x56>
 800095a:	23ff      	movs	r3, #255	; 0xff
 800095c:	2203      	movs	r2, #3
 800095e:	e77a      	b.n	8000856 <__aeabi_fdiv+0x56>
 8000960:	000e      	movs	r6, r1
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	2500      	movs	r5, #0
 8000966:	e7ac      	b.n	80008c2 <__aeabi_fdiv+0xc2>
 8000968:	2001      	movs	r0, #1
 800096a:	1ac0      	subs	r0, r0, r3
 800096c:	281b      	cmp	r0, #27
 800096e:	dca6      	bgt.n	80008be <__aeabi_fdiv+0xbe>
 8000970:	379e      	adds	r7, #158	; 0x9e
 8000972:	002a      	movs	r2, r5
 8000974:	40bd      	lsls	r5, r7
 8000976:	40c2      	lsrs	r2, r0
 8000978:	1e6b      	subs	r3, r5, #1
 800097a:	419d      	sbcs	r5, r3
 800097c:	4315      	orrs	r5, r2
 800097e:	076b      	lsls	r3, r5, #29
 8000980:	d004      	beq.n	800098c <__aeabi_fdiv+0x18c>
 8000982:	230f      	movs	r3, #15
 8000984:	402b      	ands	r3, r5
 8000986:	2b04      	cmp	r3, #4
 8000988:	d000      	beq.n	800098c <__aeabi_fdiv+0x18c>
 800098a:	3504      	adds	r5, #4
 800098c:	016b      	lsls	r3, r5, #5
 800098e:	d544      	bpl.n	8000a1a <__aeabi_fdiv+0x21a>
 8000990:	2001      	movs	r0, #1
 8000992:	2500      	movs	r5, #0
 8000994:	e795      	b.n	80008c2 <__aeabi_fdiv+0xc2>
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	2500      	movs	r5, #0
 800099a:	e792      	b.n	80008c2 <__aeabi_fdiv+0xc2>
 800099c:	2580      	movs	r5, #128	; 0x80
 800099e:	2600      	movs	r6, #0
 80009a0:	20ff      	movs	r0, #255	; 0xff
 80009a2:	03ed      	lsls	r5, r5, #15
 80009a4:	e78d      	b.n	80008c2 <__aeabi_fdiv+0xc2>
 80009a6:	2300      	movs	r3, #0
 80009a8:	4698      	mov	r8, r3
 80009aa:	2080      	movs	r0, #128	; 0x80
 80009ac:	03c0      	lsls	r0, r0, #15
 80009ae:	4205      	tst	r5, r0
 80009b0:	d009      	beq.n	80009c6 <__aeabi_fdiv+0x1c6>
 80009b2:	4643      	mov	r3, r8
 80009b4:	4203      	tst	r3, r0
 80009b6:	d106      	bne.n	80009c6 <__aeabi_fdiv+0x1c6>
 80009b8:	4645      	mov	r5, r8
 80009ba:	4305      	orrs	r5, r0
 80009bc:	026d      	lsls	r5, r5, #9
 80009be:	0026      	movs	r6, r4
 80009c0:	20ff      	movs	r0, #255	; 0xff
 80009c2:	0a6d      	lsrs	r5, r5, #9
 80009c4:	e77d      	b.n	80008c2 <__aeabi_fdiv+0xc2>
 80009c6:	2080      	movs	r0, #128	; 0x80
 80009c8:	03c0      	lsls	r0, r0, #15
 80009ca:	4305      	orrs	r5, r0
 80009cc:	026d      	lsls	r5, r5, #9
 80009ce:	20ff      	movs	r0, #255	; 0xff
 80009d0:	0a6d      	lsrs	r5, r5, #9
 80009d2:	e776      	b.n	80008c2 <__aeabi_fdiv+0xc2>
 80009d4:	4642      	mov	r2, r8
 80009d6:	016b      	lsls	r3, r5, #5
 80009d8:	0150      	lsls	r0, r2, #5
 80009da:	4283      	cmp	r3, r0
 80009dc:	d219      	bcs.n	8000a12 <__aeabi_fdiv+0x212>
 80009de:	221b      	movs	r2, #27
 80009e0:	2500      	movs	r5, #0
 80009e2:	3f01      	subs	r7, #1
 80009e4:	2601      	movs	r6, #1
 80009e6:	001c      	movs	r4, r3
 80009e8:	006d      	lsls	r5, r5, #1
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	2c00      	cmp	r4, #0
 80009ee:	db01      	blt.n	80009f4 <__aeabi_fdiv+0x1f4>
 80009f0:	4298      	cmp	r0, r3
 80009f2:	d801      	bhi.n	80009f8 <__aeabi_fdiv+0x1f8>
 80009f4:	1a1b      	subs	r3, r3, r0
 80009f6:	4335      	orrs	r5, r6
 80009f8:	3a01      	subs	r2, #1
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	d1f3      	bne.n	80009e6 <__aeabi_fdiv+0x1e6>
 80009fe:	1e5a      	subs	r2, r3, #1
 8000a00:	4193      	sbcs	r3, r2
 8000a02:	431d      	orrs	r5, r3
 8000a04:	003b      	movs	r3, r7
 8000a06:	337f      	adds	r3, #127	; 0x7f
 8000a08:	000e      	movs	r6, r1
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	dd00      	ble.n	8000a10 <__aeabi_fdiv+0x210>
 8000a0e:	e741      	b.n	8000894 <__aeabi_fdiv+0x94>
 8000a10:	e7aa      	b.n	8000968 <__aeabi_fdiv+0x168>
 8000a12:	221a      	movs	r2, #26
 8000a14:	2501      	movs	r5, #1
 8000a16:	1a1b      	subs	r3, r3, r0
 8000a18:	e7e4      	b.n	80009e4 <__aeabi_fdiv+0x1e4>
 8000a1a:	01ad      	lsls	r5, r5, #6
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	0a6d      	lsrs	r5, r5, #9
 8000a20:	e74f      	b.n	80008c2 <__aeabi_fdiv+0xc2>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	0800b730 	.word	0x0800b730
 8000a28:	f7ffffff 	.word	0xf7ffffff
 8000a2c:	0800b770 	.word	0x0800b770

08000a30 <__eqsf2>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	0042      	lsls	r2, r0, #1
 8000a34:	0245      	lsls	r5, r0, #9
 8000a36:	024e      	lsls	r6, r1, #9
 8000a38:	004c      	lsls	r4, r1, #1
 8000a3a:	0fc3      	lsrs	r3, r0, #31
 8000a3c:	0a6d      	lsrs	r5, r5, #9
 8000a3e:	2001      	movs	r0, #1
 8000a40:	0e12      	lsrs	r2, r2, #24
 8000a42:	0a76      	lsrs	r6, r6, #9
 8000a44:	0e24      	lsrs	r4, r4, #24
 8000a46:	0fc9      	lsrs	r1, r1, #31
 8000a48:	2aff      	cmp	r2, #255	; 0xff
 8000a4a:	d006      	beq.n	8000a5a <__eqsf2+0x2a>
 8000a4c:	2cff      	cmp	r4, #255	; 0xff
 8000a4e:	d003      	beq.n	8000a58 <__eqsf2+0x28>
 8000a50:	42a2      	cmp	r2, r4
 8000a52:	d101      	bne.n	8000a58 <__eqsf2+0x28>
 8000a54:	42b5      	cmp	r5, r6
 8000a56:	d006      	beq.n	8000a66 <__eqsf2+0x36>
 8000a58:	bd70      	pop	{r4, r5, r6, pc}
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d1fc      	bne.n	8000a58 <__eqsf2+0x28>
 8000a5e:	2cff      	cmp	r4, #255	; 0xff
 8000a60:	d1fa      	bne.n	8000a58 <__eqsf2+0x28>
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d1f8      	bne.n	8000a58 <__eqsf2+0x28>
 8000a66:	428b      	cmp	r3, r1
 8000a68:	d006      	beq.n	8000a78 <__eqsf2+0x48>
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	d1f3      	bne.n	8000a58 <__eqsf2+0x28>
 8000a70:	0028      	movs	r0, r5
 8000a72:	1e43      	subs	r3, r0, #1
 8000a74:	4198      	sbcs	r0, r3
 8000a76:	e7ef      	b.n	8000a58 <__eqsf2+0x28>
 8000a78:	2000      	movs	r0, #0
 8000a7a:	e7ed      	b.n	8000a58 <__eqsf2+0x28>

08000a7c <__gesf2>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	0042      	lsls	r2, r0, #1
 8000a80:	0245      	lsls	r5, r0, #9
 8000a82:	024e      	lsls	r6, r1, #9
 8000a84:	004c      	lsls	r4, r1, #1
 8000a86:	0fc3      	lsrs	r3, r0, #31
 8000a88:	0a6d      	lsrs	r5, r5, #9
 8000a8a:	0e12      	lsrs	r2, r2, #24
 8000a8c:	0a76      	lsrs	r6, r6, #9
 8000a8e:	0e24      	lsrs	r4, r4, #24
 8000a90:	0fc8      	lsrs	r0, r1, #31
 8000a92:	2aff      	cmp	r2, #255	; 0xff
 8000a94:	d01b      	beq.n	8000ace <__gesf2+0x52>
 8000a96:	2cff      	cmp	r4, #255	; 0xff
 8000a98:	d00e      	beq.n	8000ab8 <__gesf2+0x3c>
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d11b      	bne.n	8000ad6 <__gesf2+0x5a>
 8000a9e:	2c00      	cmp	r4, #0
 8000aa0:	d101      	bne.n	8000aa6 <__gesf2+0x2a>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d01c      	beq.n	8000ae0 <__gesf2+0x64>
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d00c      	beq.n	8000ac4 <__gesf2+0x48>
 8000aaa:	4283      	cmp	r3, r0
 8000aac:	d01c      	beq.n	8000ae8 <__gesf2+0x6c>
 8000aae:	2102      	movs	r1, #2
 8000ab0:	1e58      	subs	r0, r3, #1
 8000ab2:	4008      	ands	r0, r1
 8000ab4:	3801      	subs	r0, #1
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d122      	bne.n	8000b02 <__gesf2+0x86>
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	d1f4      	bne.n	8000aaa <__gesf2+0x2e>
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d1f2      	bne.n	8000aaa <__gesf2+0x2e>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d1f6      	bne.n	8000ab6 <__gesf2+0x3a>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4240      	negs	r0, r0
 8000acc:	e7f3      	b.n	8000ab6 <__gesf2+0x3a>
 8000ace:	2d00      	cmp	r5, #0
 8000ad0:	d117      	bne.n	8000b02 <__gesf2+0x86>
 8000ad2:	2cff      	cmp	r4, #255	; 0xff
 8000ad4:	d0f0      	beq.n	8000ab8 <__gesf2+0x3c>
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d1e7      	bne.n	8000aaa <__gesf2+0x2e>
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d1e5      	bne.n	8000aaa <__gesf2+0x2e>
 8000ade:	e7e6      	b.n	8000aae <__gesf2+0x32>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d0e7      	beq.n	8000ab6 <__gesf2+0x3a>
 8000ae6:	e7e2      	b.n	8000aae <__gesf2+0x32>
 8000ae8:	42a2      	cmp	r2, r4
 8000aea:	dc05      	bgt.n	8000af8 <__gesf2+0x7c>
 8000aec:	dbea      	blt.n	8000ac4 <__gesf2+0x48>
 8000aee:	42b5      	cmp	r5, r6
 8000af0:	d802      	bhi.n	8000af8 <__gesf2+0x7c>
 8000af2:	d3e7      	bcc.n	8000ac4 <__gesf2+0x48>
 8000af4:	2000      	movs	r0, #0
 8000af6:	e7de      	b.n	8000ab6 <__gesf2+0x3a>
 8000af8:	4243      	negs	r3, r0
 8000afa:	4158      	adcs	r0, r3
 8000afc:	0040      	lsls	r0, r0, #1
 8000afe:	3801      	subs	r0, #1
 8000b00:	e7d9      	b.n	8000ab6 <__gesf2+0x3a>
 8000b02:	2002      	movs	r0, #2
 8000b04:	4240      	negs	r0, r0
 8000b06:	e7d6      	b.n	8000ab6 <__gesf2+0x3a>

08000b08 <__lesf2>:
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	0042      	lsls	r2, r0, #1
 8000b0c:	0245      	lsls	r5, r0, #9
 8000b0e:	024e      	lsls	r6, r1, #9
 8000b10:	004c      	lsls	r4, r1, #1
 8000b12:	0fc3      	lsrs	r3, r0, #31
 8000b14:	0a6d      	lsrs	r5, r5, #9
 8000b16:	0e12      	lsrs	r2, r2, #24
 8000b18:	0a76      	lsrs	r6, r6, #9
 8000b1a:	0e24      	lsrs	r4, r4, #24
 8000b1c:	0fc8      	lsrs	r0, r1, #31
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d00b      	beq.n	8000b3a <__lesf2+0x32>
 8000b22:	2cff      	cmp	r4, #255	; 0xff
 8000b24:	d00d      	beq.n	8000b42 <__lesf2+0x3a>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d11f      	bne.n	8000b6a <__lesf2+0x62>
 8000b2a:	2c00      	cmp	r4, #0
 8000b2c:	d116      	bne.n	8000b5c <__lesf2+0x54>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d114      	bne.n	8000b5c <__lesf2+0x54>
 8000b32:	2000      	movs	r0, #0
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d010      	beq.n	8000b5a <__lesf2+0x52>
 8000b38:	e009      	b.n	8000b4e <__lesf2+0x46>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d10c      	bne.n	8000b58 <__lesf2+0x50>
 8000b3e:	2cff      	cmp	r4, #255	; 0xff
 8000b40:	d113      	bne.n	8000b6a <__lesf2+0x62>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d108      	bne.n	8000b58 <__lesf2+0x50>
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	d008      	beq.n	8000b5c <__lesf2+0x54>
 8000b4a:	4283      	cmp	r3, r0
 8000b4c:	d012      	beq.n	8000b74 <__lesf2+0x6c>
 8000b4e:	2102      	movs	r1, #2
 8000b50:	1e58      	subs	r0, r3, #1
 8000b52:	4008      	ands	r0, r1
 8000b54:	3801      	subs	r0, #1
 8000b56:	e000      	b.n	8000b5a <__lesf2+0x52>
 8000b58:	2002      	movs	r0, #2
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d1f4      	bne.n	8000b4a <__lesf2+0x42>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d1fa      	bne.n	8000b5a <__lesf2+0x52>
 8000b64:	2001      	movs	r0, #1
 8000b66:	4240      	negs	r0, r0
 8000b68:	e7f7      	b.n	8000b5a <__lesf2+0x52>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d1ed      	bne.n	8000b4a <__lesf2+0x42>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d1eb      	bne.n	8000b4a <__lesf2+0x42>
 8000b72:	e7ec      	b.n	8000b4e <__lesf2+0x46>
 8000b74:	42a2      	cmp	r2, r4
 8000b76:	dc05      	bgt.n	8000b84 <__lesf2+0x7c>
 8000b78:	dbf2      	blt.n	8000b60 <__lesf2+0x58>
 8000b7a:	42b5      	cmp	r5, r6
 8000b7c:	d802      	bhi.n	8000b84 <__lesf2+0x7c>
 8000b7e:	d3ef      	bcc.n	8000b60 <__lesf2+0x58>
 8000b80:	2000      	movs	r0, #0
 8000b82:	e7ea      	b.n	8000b5a <__lesf2+0x52>
 8000b84:	4243      	negs	r3, r0
 8000b86:	4158      	adcs	r0, r3
 8000b88:	0040      	lsls	r0, r0, #1
 8000b8a:	3801      	subs	r0, #1
 8000b8c:	e7e5      	b.n	8000b5a <__lesf2+0x52>
 8000b8e:	46c0      	nop			; (mov r8, r8)

08000b90 <__aeabi_fmul>:
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	464f      	mov	r7, r9
 8000b94:	4646      	mov	r6, r8
 8000b96:	46d6      	mov	lr, sl
 8000b98:	0244      	lsls	r4, r0, #9
 8000b9a:	0045      	lsls	r5, r0, #1
 8000b9c:	b5c0      	push	{r6, r7, lr}
 8000b9e:	0a64      	lsrs	r4, r4, #9
 8000ba0:	1c0f      	adds	r7, r1, #0
 8000ba2:	0e2d      	lsrs	r5, r5, #24
 8000ba4:	0fc6      	lsrs	r6, r0, #31
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d100      	bne.n	8000bac <__aeabi_fmul+0x1c>
 8000baa:	e08d      	b.n	8000cc8 <__aeabi_fmul+0x138>
 8000bac:	2dff      	cmp	r5, #255	; 0xff
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_fmul+0x22>
 8000bb0:	e092      	b.n	8000cd8 <__aeabi_fmul+0x148>
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2080      	movs	r0, #128	; 0x80
 8000bb6:	4699      	mov	r9, r3
 8000bb8:	469a      	mov	sl, r3
 8000bba:	00e4      	lsls	r4, r4, #3
 8000bbc:	04c0      	lsls	r0, r0, #19
 8000bbe:	4304      	orrs	r4, r0
 8000bc0:	3d7f      	subs	r5, #127	; 0x7f
 8000bc2:	0278      	lsls	r0, r7, #9
 8000bc4:	0a43      	lsrs	r3, r0, #9
 8000bc6:	4698      	mov	r8, r3
 8000bc8:	007b      	lsls	r3, r7, #1
 8000bca:	0e1b      	lsrs	r3, r3, #24
 8000bcc:	0fff      	lsrs	r7, r7, #31
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fmul+0x44>
 8000bd2:	e070      	b.n	8000cb6 <__aeabi_fmul+0x126>
 8000bd4:	2bff      	cmp	r3, #255	; 0xff
 8000bd6:	d100      	bne.n	8000bda <__aeabi_fmul+0x4a>
 8000bd8:	e086      	b.n	8000ce8 <__aeabi_fmul+0x158>
 8000bda:	4642      	mov	r2, r8
 8000bdc:	00d0      	lsls	r0, r2, #3
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	3b7f      	subs	r3, #127	; 0x7f
 8000be2:	18ed      	adds	r5, r5, r3
 8000be4:	2300      	movs	r3, #0
 8000be6:	04d2      	lsls	r2, r2, #19
 8000be8:	4302      	orrs	r2, r0
 8000bea:	4690      	mov	r8, r2
 8000bec:	469c      	mov	ip, r3
 8000bee:	0031      	movs	r1, r6
 8000bf0:	464b      	mov	r3, r9
 8000bf2:	4079      	eors	r1, r7
 8000bf4:	1c68      	adds	r0, r5, #1
 8000bf6:	2b0f      	cmp	r3, #15
 8000bf8:	d81c      	bhi.n	8000c34 <__aeabi_fmul+0xa4>
 8000bfa:	4a76      	ldr	r2, [pc, #472]	; (8000dd4 <__aeabi_fmul+0x244>)
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	58d3      	ldr	r3, [r2, r3]
 8000c00:	469f      	mov	pc, r3
 8000c02:	0039      	movs	r1, r7
 8000c04:	4644      	mov	r4, r8
 8000c06:	46e2      	mov	sl, ip
 8000c08:	4653      	mov	r3, sl
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d00f      	beq.n	8000c2e <__aeabi_fmul+0x9e>
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fmul+0x84>
 8000c12:	e0d7      	b.n	8000dc4 <__aeabi_fmul+0x234>
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d137      	bne.n	8000c88 <__aeabi_fmul+0xf8>
 8000c18:	2000      	movs	r0, #0
 8000c1a:	2400      	movs	r4, #0
 8000c1c:	05c0      	lsls	r0, r0, #23
 8000c1e:	4320      	orrs	r0, r4
 8000c20:	07c9      	lsls	r1, r1, #31
 8000c22:	4308      	orrs	r0, r1
 8000c24:	bce0      	pop	{r5, r6, r7}
 8000c26:	46ba      	mov	sl, r7
 8000c28:	46b1      	mov	r9, r6
 8000c2a:	46a8      	mov	r8, r5
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2e:	20ff      	movs	r0, #255	; 0xff
 8000c30:	2400      	movs	r4, #0
 8000c32:	e7f3      	b.n	8000c1c <__aeabi_fmul+0x8c>
 8000c34:	0c26      	lsrs	r6, r4, #16
 8000c36:	0424      	lsls	r4, r4, #16
 8000c38:	0c22      	lsrs	r2, r4, #16
 8000c3a:	4644      	mov	r4, r8
 8000c3c:	0424      	lsls	r4, r4, #16
 8000c3e:	0c24      	lsrs	r4, r4, #16
 8000c40:	4643      	mov	r3, r8
 8000c42:	0027      	movs	r7, r4
 8000c44:	0c1b      	lsrs	r3, r3, #16
 8000c46:	4357      	muls	r7, r2
 8000c48:	4374      	muls	r4, r6
 8000c4a:	435a      	muls	r2, r3
 8000c4c:	435e      	muls	r6, r3
 8000c4e:	1912      	adds	r2, r2, r4
 8000c50:	0c3b      	lsrs	r3, r7, #16
 8000c52:	189b      	adds	r3, r3, r2
 8000c54:	429c      	cmp	r4, r3
 8000c56:	d903      	bls.n	8000c60 <__aeabi_fmul+0xd0>
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	0252      	lsls	r2, r2, #9
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	4466      	add	r6, ip
 8000c60:	043f      	lsls	r7, r7, #16
 8000c62:	041a      	lsls	r2, r3, #16
 8000c64:	0c3f      	lsrs	r7, r7, #16
 8000c66:	19d2      	adds	r2, r2, r7
 8000c68:	0194      	lsls	r4, r2, #6
 8000c6a:	1e67      	subs	r7, r4, #1
 8000c6c:	41bc      	sbcs	r4, r7
 8000c6e:	0c1b      	lsrs	r3, r3, #16
 8000c70:	0e92      	lsrs	r2, r2, #26
 8000c72:	199b      	adds	r3, r3, r6
 8000c74:	4314      	orrs	r4, r2
 8000c76:	019b      	lsls	r3, r3, #6
 8000c78:	431c      	orrs	r4, r3
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	d400      	bmi.n	8000c80 <__aeabi_fmul+0xf0>
 8000c7e:	e09b      	b.n	8000db8 <__aeabi_fmul+0x228>
 8000c80:	2301      	movs	r3, #1
 8000c82:	0862      	lsrs	r2, r4, #1
 8000c84:	401c      	ands	r4, r3
 8000c86:	4314      	orrs	r4, r2
 8000c88:	0002      	movs	r2, r0
 8000c8a:	327f      	adds	r2, #127	; 0x7f
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	dd64      	ble.n	8000d5a <__aeabi_fmul+0x1ca>
 8000c90:	0763      	lsls	r3, r4, #29
 8000c92:	d004      	beq.n	8000c9e <__aeabi_fmul+0x10e>
 8000c94:	230f      	movs	r3, #15
 8000c96:	4023      	ands	r3, r4
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fmul+0x10e>
 8000c9c:	3404      	adds	r4, #4
 8000c9e:	0123      	lsls	r3, r4, #4
 8000ca0:	d503      	bpl.n	8000caa <__aeabi_fmul+0x11a>
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	4b4c      	ldr	r3, [pc, #304]	; (8000dd8 <__aeabi_fmul+0x248>)
 8000ca6:	3280      	adds	r2, #128	; 0x80
 8000ca8:	401c      	ands	r4, r3
 8000caa:	2afe      	cmp	r2, #254	; 0xfe
 8000cac:	dcbf      	bgt.n	8000c2e <__aeabi_fmul+0x9e>
 8000cae:	01a4      	lsls	r4, r4, #6
 8000cb0:	0a64      	lsrs	r4, r4, #9
 8000cb2:	b2d0      	uxtb	r0, r2
 8000cb4:	e7b2      	b.n	8000c1c <__aeabi_fmul+0x8c>
 8000cb6:	4643      	mov	r3, r8
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d13d      	bne.n	8000d38 <__aeabi_fmul+0x1a8>
 8000cbc:	464a      	mov	r2, r9
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	4691      	mov	r9, r2
 8000cc4:	469c      	mov	ip, r3
 8000cc6:	e792      	b.n	8000bee <__aeabi_fmul+0x5e>
 8000cc8:	2c00      	cmp	r4, #0
 8000cca:	d129      	bne.n	8000d20 <__aeabi_fmul+0x190>
 8000ccc:	2304      	movs	r3, #4
 8000cce:	4699      	mov	r9, r3
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	2500      	movs	r5, #0
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	e774      	b.n	8000bc2 <__aeabi_fmul+0x32>
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d11b      	bne.n	8000d14 <__aeabi_fmul+0x184>
 8000cdc:	2308      	movs	r3, #8
 8000cde:	4699      	mov	r9, r3
 8000ce0:	3b06      	subs	r3, #6
 8000ce2:	25ff      	movs	r5, #255	; 0xff
 8000ce4:	469a      	mov	sl, r3
 8000ce6:	e76c      	b.n	8000bc2 <__aeabi_fmul+0x32>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	35ff      	adds	r5, #255	; 0xff
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10b      	bne.n	8000d08 <__aeabi_fmul+0x178>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	4691      	mov	r9, r2
 8000cf8:	469c      	mov	ip, r3
 8000cfa:	e778      	b.n	8000bee <__aeabi_fmul+0x5e>
 8000cfc:	4653      	mov	r3, sl
 8000cfe:	0031      	movs	r1, r6
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fmul+0x176>
 8000d04:	e783      	b.n	8000c0e <__aeabi_fmul+0x7e>
 8000d06:	e792      	b.n	8000c2e <__aeabi_fmul+0x9e>
 8000d08:	2303      	movs	r3, #3
 8000d0a:	464a      	mov	r2, r9
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	4691      	mov	r9, r2
 8000d10:	469c      	mov	ip, r3
 8000d12:	e76c      	b.n	8000bee <__aeabi_fmul+0x5e>
 8000d14:	230c      	movs	r3, #12
 8000d16:	4699      	mov	r9, r3
 8000d18:	3b09      	subs	r3, #9
 8000d1a:	25ff      	movs	r5, #255	; 0xff
 8000d1c:	469a      	mov	sl, r3
 8000d1e:	e750      	b.n	8000bc2 <__aeabi_fmul+0x32>
 8000d20:	0020      	movs	r0, r4
 8000d22:	f002 f8d9 	bl	8002ed8 <__clzsi2>
 8000d26:	2576      	movs	r5, #118	; 0x76
 8000d28:	1f43      	subs	r3, r0, #5
 8000d2a:	409c      	lsls	r4, r3
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	426d      	negs	r5, r5
 8000d30:	4699      	mov	r9, r3
 8000d32:	469a      	mov	sl, r3
 8000d34:	1a2d      	subs	r5, r5, r0
 8000d36:	e744      	b.n	8000bc2 <__aeabi_fmul+0x32>
 8000d38:	4640      	mov	r0, r8
 8000d3a:	f002 f8cd 	bl	8002ed8 <__clzsi2>
 8000d3e:	4642      	mov	r2, r8
 8000d40:	1f43      	subs	r3, r0, #5
 8000d42:	409a      	lsls	r2, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	1a2d      	subs	r5, r5, r0
 8000d48:	4690      	mov	r8, r2
 8000d4a:	469c      	mov	ip, r3
 8000d4c:	3d76      	subs	r5, #118	; 0x76
 8000d4e:	e74e      	b.n	8000bee <__aeabi_fmul+0x5e>
 8000d50:	2480      	movs	r4, #128	; 0x80
 8000d52:	2100      	movs	r1, #0
 8000d54:	20ff      	movs	r0, #255	; 0xff
 8000d56:	03e4      	lsls	r4, r4, #15
 8000d58:	e760      	b.n	8000c1c <__aeabi_fmul+0x8c>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	2b1b      	cmp	r3, #27
 8000d60:	dd00      	ble.n	8000d64 <__aeabi_fmul+0x1d4>
 8000d62:	e759      	b.n	8000c18 <__aeabi_fmul+0x88>
 8000d64:	0022      	movs	r2, r4
 8000d66:	309e      	adds	r0, #158	; 0x9e
 8000d68:	40da      	lsrs	r2, r3
 8000d6a:	4084      	lsls	r4, r0
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	1e62      	subs	r2, r4, #1
 8000d70:	4194      	sbcs	r4, r2
 8000d72:	431c      	orrs	r4, r3
 8000d74:	0763      	lsls	r3, r4, #29
 8000d76:	d004      	beq.n	8000d82 <__aeabi_fmul+0x1f2>
 8000d78:	230f      	movs	r3, #15
 8000d7a:	4023      	ands	r3, r4
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d000      	beq.n	8000d82 <__aeabi_fmul+0x1f2>
 8000d80:	3404      	adds	r4, #4
 8000d82:	0163      	lsls	r3, r4, #5
 8000d84:	d51a      	bpl.n	8000dbc <__aeabi_fmul+0x22c>
 8000d86:	2001      	movs	r0, #1
 8000d88:	2400      	movs	r4, #0
 8000d8a:	e747      	b.n	8000c1c <__aeabi_fmul+0x8c>
 8000d8c:	2080      	movs	r0, #128	; 0x80
 8000d8e:	03c0      	lsls	r0, r0, #15
 8000d90:	4204      	tst	r4, r0
 8000d92:	d009      	beq.n	8000da8 <__aeabi_fmul+0x218>
 8000d94:	4643      	mov	r3, r8
 8000d96:	4203      	tst	r3, r0
 8000d98:	d106      	bne.n	8000da8 <__aeabi_fmul+0x218>
 8000d9a:	4644      	mov	r4, r8
 8000d9c:	4304      	orrs	r4, r0
 8000d9e:	0264      	lsls	r4, r4, #9
 8000da0:	0039      	movs	r1, r7
 8000da2:	20ff      	movs	r0, #255	; 0xff
 8000da4:	0a64      	lsrs	r4, r4, #9
 8000da6:	e739      	b.n	8000c1c <__aeabi_fmul+0x8c>
 8000da8:	2080      	movs	r0, #128	; 0x80
 8000daa:	03c0      	lsls	r0, r0, #15
 8000dac:	4304      	orrs	r4, r0
 8000dae:	0264      	lsls	r4, r4, #9
 8000db0:	0031      	movs	r1, r6
 8000db2:	20ff      	movs	r0, #255	; 0xff
 8000db4:	0a64      	lsrs	r4, r4, #9
 8000db6:	e731      	b.n	8000c1c <__aeabi_fmul+0x8c>
 8000db8:	0028      	movs	r0, r5
 8000dba:	e765      	b.n	8000c88 <__aeabi_fmul+0xf8>
 8000dbc:	01a4      	lsls	r4, r4, #6
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	0a64      	lsrs	r4, r4, #9
 8000dc2:	e72b      	b.n	8000c1c <__aeabi_fmul+0x8c>
 8000dc4:	2080      	movs	r0, #128	; 0x80
 8000dc6:	03c0      	lsls	r0, r0, #15
 8000dc8:	4304      	orrs	r4, r0
 8000dca:	0264      	lsls	r4, r4, #9
 8000dcc:	20ff      	movs	r0, #255	; 0xff
 8000dce:	0a64      	lsrs	r4, r4, #9
 8000dd0:	e724      	b.n	8000c1c <__aeabi_fmul+0x8c>
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	0800b7b0 	.word	0x0800b7b0
 8000dd8:	f7ffffff 	.word	0xf7ffffff

08000ddc <__aeabi_fsub>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	46ce      	mov	lr, r9
 8000de0:	4647      	mov	r7, r8
 8000de2:	0243      	lsls	r3, r0, #9
 8000de4:	0a5b      	lsrs	r3, r3, #9
 8000de6:	024e      	lsls	r6, r1, #9
 8000de8:	00da      	lsls	r2, r3, #3
 8000dea:	4694      	mov	ip, r2
 8000dec:	0a72      	lsrs	r2, r6, #9
 8000dee:	4691      	mov	r9, r2
 8000df0:	0045      	lsls	r5, r0, #1
 8000df2:	004a      	lsls	r2, r1, #1
 8000df4:	b580      	push	{r7, lr}
 8000df6:	0e2d      	lsrs	r5, r5, #24
 8000df8:	001f      	movs	r7, r3
 8000dfa:	0fc4      	lsrs	r4, r0, #31
 8000dfc:	0e12      	lsrs	r2, r2, #24
 8000dfe:	0fc9      	lsrs	r1, r1, #31
 8000e00:	09b6      	lsrs	r6, r6, #6
 8000e02:	2aff      	cmp	r2, #255	; 0xff
 8000e04:	d05b      	beq.n	8000ebe <__aeabi_fsub+0xe2>
 8000e06:	2001      	movs	r0, #1
 8000e08:	4041      	eors	r1, r0
 8000e0a:	428c      	cmp	r4, r1
 8000e0c:	d039      	beq.n	8000e82 <__aeabi_fsub+0xa6>
 8000e0e:	1aa8      	subs	r0, r5, r2
 8000e10:	2800      	cmp	r0, #0
 8000e12:	dd5a      	ble.n	8000eca <__aeabi_fsub+0xee>
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	d06a      	beq.n	8000eee <__aeabi_fsub+0x112>
 8000e18:	2dff      	cmp	r5, #255	; 0xff
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fsub+0x42>
 8000e1c:	e0d9      	b.n	8000fd2 <__aeabi_fsub+0x1f6>
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	04d2      	lsls	r2, r2, #19
 8000e22:	4316      	orrs	r6, r2
 8000e24:	281b      	cmp	r0, #27
 8000e26:	dc00      	bgt.n	8000e2a <__aeabi_fsub+0x4e>
 8000e28:	e0e9      	b.n	8000ffe <__aeabi_fsub+0x222>
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	4663      	mov	r3, ip
 8000e2e:	1a18      	subs	r0, r3, r0
 8000e30:	0143      	lsls	r3, r0, #5
 8000e32:	d400      	bmi.n	8000e36 <__aeabi_fsub+0x5a>
 8000e34:	e0b4      	b.n	8000fa0 <__aeabi_fsub+0x1c4>
 8000e36:	0180      	lsls	r0, r0, #6
 8000e38:	0987      	lsrs	r7, r0, #6
 8000e3a:	0038      	movs	r0, r7
 8000e3c:	f002 f84c 	bl	8002ed8 <__clzsi2>
 8000e40:	3805      	subs	r0, #5
 8000e42:	4087      	lsls	r7, r0
 8000e44:	4285      	cmp	r5, r0
 8000e46:	dc00      	bgt.n	8000e4a <__aeabi_fsub+0x6e>
 8000e48:	e0cc      	b.n	8000fe4 <__aeabi_fsub+0x208>
 8000e4a:	1a2d      	subs	r5, r5, r0
 8000e4c:	48b5      	ldr	r0, [pc, #724]	; (8001124 <__aeabi_fsub+0x348>)
 8000e4e:	4038      	ands	r0, r7
 8000e50:	0743      	lsls	r3, r0, #29
 8000e52:	d004      	beq.n	8000e5e <__aeabi_fsub+0x82>
 8000e54:	230f      	movs	r3, #15
 8000e56:	4003      	ands	r3, r0
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d000      	beq.n	8000e5e <__aeabi_fsub+0x82>
 8000e5c:	3004      	adds	r0, #4
 8000e5e:	0143      	lsls	r3, r0, #5
 8000e60:	d400      	bmi.n	8000e64 <__aeabi_fsub+0x88>
 8000e62:	e0a0      	b.n	8000fa6 <__aeabi_fsub+0x1ca>
 8000e64:	1c6a      	adds	r2, r5, #1
 8000e66:	2dfe      	cmp	r5, #254	; 0xfe
 8000e68:	d100      	bne.n	8000e6c <__aeabi_fsub+0x90>
 8000e6a:	e08d      	b.n	8000f88 <__aeabi_fsub+0x1ac>
 8000e6c:	0180      	lsls	r0, r0, #6
 8000e6e:	0a47      	lsrs	r7, r0, #9
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	05d0      	lsls	r0, r2, #23
 8000e74:	4338      	orrs	r0, r7
 8000e76:	07e4      	lsls	r4, r4, #31
 8000e78:	4320      	orrs	r0, r4
 8000e7a:	bcc0      	pop	{r6, r7}
 8000e7c:	46b9      	mov	r9, r7
 8000e7e:	46b0      	mov	r8, r6
 8000e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e82:	1aa8      	subs	r0, r5, r2
 8000e84:	4680      	mov	r8, r0
 8000e86:	2800      	cmp	r0, #0
 8000e88:	dd45      	ble.n	8000f16 <__aeabi_fsub+0x13a>
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d070      	beq.n	8000f70 <__aeabi_fsub+0x194>
 8000e8e:	2dff      	cmp	r5, #255	; 0xff
 8000e90:	d100      	bne.n	8000e94 <__aeabi_fsub+0xb8>
 8000e92:	e09e      	b.n	8000fd2 <__aeabi_fsub+0x1f6>
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	04db      	lsls	r3, r3, #19
 8000e98:	431e      	orrs	r6, r3
 8000e9a:	4643      	mov	r3, r8
 8000e9c:	2b1b      	cmp	r3, #27
 8000e9e:	dc00      	bgt.n	8000ea2 <__aeabi_fsub+0xc6>
 8000ea0:	e0d2      	b.n	8001048 <__aeabi_fsub+0x26c>
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4460      	add	r0, ip
 8000ea6:	0143      	lsls	r3, r0, #5
 8000ea8:	d57a      	bpl.n	8000fa0 <__aeabi_fsub+0x1c4>
 8000eaa:	3501      	adds	r5, #1
 8000eac:	2dff      	cmp	r5, #255	; 0xff
 8000eae:	d06b      	beq.n	8000f88 <__aeabi_fsub+0x1ac>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	4a9d      	ldr	r2, [pc, #628]	; (8001128 <__aeabi_fsub+0x34c>)
 8000eb4:	4003      	ands	r3, r0
 8000eb6:	0840      	lsrs	r0, r0, #1
 8000eb8:	4010      	ands	r0, r2
 8000eba:	4318      	orrs	r0, r3
 8000ebc:	e7c8      	b.n	8000e50 <__aeabi_fsub+0x74>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	d020      	beq.n	8000f04 <__aeabi_fsub+0x128>
 8000ec2:	428c      	cmp	r4, r1
 8000ec4:	d023      	beq.n	8000f0e <__aeabi_fsub+0x132>
 8000ec6:	0028      	movs	r0, r5
 8000ec8:	38ff      	subs	r0, #255	; 0xff
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d039      	beq.n	8000f42 <__aeabi_fsub+0x166>
 8000ece:	1b57      	subs	r7, r2, r5
 8000ed0:	2d00      	cmp	r5, #0
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_fsub+0xfa>
 8000ed4:	e09d      	b.n	8001012 <__aeabi_fsub+0x236>
 8000ed6:	4663      	mov	r3, ip
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x102>
 8000edc:	e0db      	b.n	8001096 <__aeabi_fsub+0x2ba>
 8000ede:	1e7b      	subs	r3, r7, #1
 8000ee0:	2f01      	cmp	r7, #1
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fsub+0x10a>
 8000ee4:	e10d      	b.n	8001102 <__aeabi_fsub+0x326>
 8000ee6:	2fff      	cmp	r7, #255	; 0xff
 8000ee8:	d071      	beq.n	8000fce <__aeabi_fsub+0x1f2>
 8000eea:	001f      	movs	r7, r3
 8000eec:	e098      	b.n	8001020 <__aeabi_fsub+0x244>
 8000eee:	2e00      	cmp	r6, #0
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_fsub+0x118>
 8000ef2:	e0a7      	b.n	8001044 <__aeabi_fsub+0x268>
 8000ef4:	1e42      	subs	r2, r0, #1
 8000ef6:	2801      	cmp	r0, #1
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x120>
 8000efa:	e0e6      	b.n	80010ca <__aeabi_fsub+0x2ee>
 8000efc:	28ff      	cmp	r0, #255	; 0xff
 8000efe:	d068      	beq.n	8000fd2 <__aeabi_fsub+0x1f6>
 8000f00:	0010      	movs	r0, r2
 8000f02:	e78f      	b.n	8000e24 <__aeabi_fsub+0x48>
 8000f04:	2001      	movs	r0, #1
 8000f06:	4041      	eors	r1, r0
 8000f08:	42a1      	cmp	r1, r4
 8000f0a:	d000      	beq.n	8000f0e <__aeabi_fsub+0x132>
 8000f0c:	e77f      	b.n	8000e0e <__aeabi_fsub+0x32>
 8000f0e:	20ff      	movs	r0, #255	; 0xff
 8000f10:	4240      	negs	r0, r0
 8000f12:	4680      	mov	r8, r0
 8000f14:	44a8      	add	r8, r5
 8000f16:	4640      	mov	r0, r8
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d038      	beq.n	8000f8e <__aeabi_fsub+0x1b2>
 8000f1c:	1b51      	subs	r1, r2, r5
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_fsub+0x148>
 8000f22:	e0ae      	b.n	8001082 <__aeabi_fsub+0x2a6>
 8000f24:	2aff      	cmp	r2, #255	; 0xff
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fsub+0x14e>
 8000f28:	e0df      	b.n	80010ea <__aeabi_fsub+0x30e>
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	04db      	lsls	r3, r3, #19
 8000f30:	4318      	orrs	r0, r3
 8000f32:	4684      	mov	ip, r0
 8000f34:	291b      	cmp	r1, #27
 8000f36:	dc00      	bgt.n	8000f3a <__aeabi_fsub+0x15e>
 8000f38:	e0d9      	b.n	80010ee <__aeabi_fsub+0x312>
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	0015      	movs	r5, r2
 8000f3e:	1980      	adds	r0, r0, r6
 8000f40:	e7b1      	b.n	8000ea6 <__aeabi_fsub+0xca>
 8000f42:	20fe      	movs	r0, #254	; 0xfe
 8000f44:	1c6a      	adds	r2, r5, #1
 8000f46:	4210      	tst	r0, r2
 8000f48:	d171      	bne.n	800102e <__aeabi_fsub+0x252>
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	d000      	beq.n	8000f50 <__aeabi_fsub+0x174>
 8000f4e:	e0a6      	b.n	800109e <__aeabi_fsub+0x2c2>
 8000f50:	4663      	mov	r3, ip
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d100      	bne.n	8000f58 <__aeabi_fsub+0x17c>
 8000f56:	e0d9      	b.n	800110c <__aeabi_fsub+0x330>
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2e00      	cmp	r6, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fsub+0x184>
 8000f5e:	e788      	b.n	8000e72 <__aeabi_fsub+0x96>
 8000f60:	1b98      	subs	r0, r3, r6
 8000f62:	0143      	lsls	r3, r0, #5
 8000f64:	d400      	bmi.n	8000f68 <__aeabi_fsub+0x18c>
 8000f66:	e0e1      	b.n	800112c <__aeabi_fsub+0x350>
 8000f68:	4663      	mov	r3, ip
 8000f6a:	000c      	movs	r4, r1
 8000f6c:	1af0      	subs	r0, r6, r3
 8000f6e:	e76f      	b.n	8000e50 <__aeabi_fsub+0x74>
 8000f70:	2e00      	cmp	r6, #0
 8000f72:	d100      	bne.n	8000f76 <__aeabi_fsub+0x19a>
 8000f74:	e0b7      	b.n	80010e6 <__aeabi_fsub+0x30a>
 8000f76:	0002      	movs	r2, r0
 8000f78:	3a01      	subs	r2, #1
 8000f7a:	2801      	cmp	r0, #1
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0x1a4>
 8000f7e:	e09c      	b.n	80010ba <__aeabi_fsub+0x2de>
 8000f80:	28ff      	cmp	r0, #255	; 0xff
 8000f82:	d026      	beq.n	8000fd2 <__aeabi_fsub+0x1f6>
 8000f84:	4690      	mov	r8, r2
 8000f86:	e788      	b.n	8000e9a <__aeabi_fsub+0xbe>
 8000f88:	22ff      	movs	r2, #255	; 0xff
 8000f8a:	2700      	movs	r7, #0
 8000f8c:	e771      	b.n	8000e72 <__aeabi_fsub+0x96>
 8000f8e:	20fe      	movs	r0, #254	; 0xfe
 8000f90:	1c6a      	adds	r2, r5, #1
 8000f92:	4210      	tst	r0, r2
 8000f94:	d064      	beq.n	8001060 <__aeabi_fsub+0x284>
 8000f96:	2aff      	cmp	r2, #255	; 0xff
 8000f98:	d0f6      	beq.n	8000f88 <__aeabi_fsub+0x1ac>
 8000f9a:	0015      	movs	r5, r2
 8000f9c:	4466      	add	r6, ip
 8000f9e:	0870      	lsrs	r0, r6, #1
 8000fa0:	0743      	lsls	r3, r0, #29
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_fsub+0x1ca>
 8000fa4:	e756      	b.n	8000e54 <__aeabi_fsub+0x78>
 8000fa6:	08c3      	lsrs	r3, r0, #3
 8000fa8:	2dff      	cmp	r5, #255	; 0xff
 8000faa:	d012      	beq.n	8000fd2 <__aeabi_fsub+0x1f6>
 8000fac:	025b      	lsls	r3, r3, #9
 8000fae:	0a5f      	lsrs	r7, r3, #9
 8000fb0:	b2ea      	uxtb	r2, r5
 8000fb2:	e75e      	b.n	8000e72 <__aeabi_fsub+0x96>
 8000fb4:	4662      	mov	r2, ip
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_fsub+0x1e0>
 8000fba:	e096      	b.n	80010ea <__aeabi_fsub+0x30e>
 8000fbc:	2e00      	cmp	r6, #0
 8000fbe:	d008      	beq.n	8000fd2 <__aeabi_fsub+0x1f6>
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	03d2      	lsls	r2, r2, #15
 8000fc4:	4213      	tst	r3, r2
 8000fc6:	d004      	beq.n	8000fd2 <__aeabi_fsub+0x1f6>
 8000fc8:	4648      	mov	r0, r9
 8000fca:	4210      	tst	r0, r2
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_fsub+0x1f6>
 8000fce:	000c      	movs	r4, r1
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0d8      	beq.n	8000f88 <__aeabi_fsub+0x1ac>
 8000fd6:	2780      	movs	r7, #128	; 0x80
 8000fd8:	03ff      	lsls	r7, r7, #15
 8000fda:	431f      	orrs	r7, r3
 8000fdc:	027f      	lsls	r7, r7, #9
 8000fde:	22ff      	movs	r2, #255	; 0xff
 8000fe0:	0a7f      	lsrs	r7, r7, #9
 8000fe2:	e746      	b.n	8000e72 <__aeabi_fsub+0x96>
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	003a      	movs	r2, r7
 8000fe8:	1b45      	subs	r5, r0, r5
 8000fea:	0038      	movs	r0, r7
 8000fec:	3501      	adds	r5, #1
 8000fee:	40ea      	lsrs	r2, r5
 8000ff0:	1b5d      	subs	r5, r3, r5
 8000ff2:	40a8      	lsls	r0, r5
 8000ff4:	1e43      	subs	r3, r0, #1
 8000ff6:	4198      	sbcs	r0, r3
 8000ff8:	2500      	movs	r5, #0
 8000ffa:	4310      	orrs	r0, r2
 8000ffc:	e728      	b.n	8000e50 <__aeabi_fsub+0x74>
 8000ffe:	2320      	movs	r3, #32
 8001000:	1a1b      	subs	r3, r3, r0
 8001002:	0032      	movs	r2, r6
 8001004:	409e      	lsls	r6, r3
 8001006:	40c2      	lsrs	r2, r0
 8001008:	0030      	movs	r0, r6
 800100a:	1e43      	subs	r3, r0, #1
 800100c:	4198      	sbcs	r0, r3
 800100e:	4310      	orrs	r0, r2
 8001010:	e70c      	b.n	8000e2c <__aeabi_fsub+0x50>
 8001012:	2aff      	cmp	r2, #255	; 0xff
 8001014:	d0db      	beq.n	8000fce <__aeabi_fsub+0x1f2>
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	4660      	mov	r0, ip
 800101a:	04db      	lsls	r3, r3, #19
 800101c:	4318      	orrs	r0, r3
 800101e:	4684      	mov	ip, r0
 8001020:	2f1b      	cmp	r7, #27
 8001022:	dd56      	ble.n	80010d2 <__aeabi_fsub+0x2f6>
 8001024:	2001      	movs	r0, #1
 8001026:	000c      	movs	r4, r1
 8001028:	0015      	movs	r5, r2
 800102a:	1a30      	subs	r0, r6, r0
 800102c:	e700      	b.n	8000e30 <__aeabi_fsub+0x54>
 800102e:	4663      	mov	r3, ip
 8001030:	1b9f      	subs	r7, r3, r6
 8001032:	017b      	lsls	r3, r7, #5
 8001034:	d43d      	bmi.n	80010b2 <__aeabi_fsub+0x2d6>
 8001036:	2f00      	cmp	r7, #0
 8001038:	d000      	beq.n	800103c <__aeabi_fsub+0x260>
 800103a:	e6fe      	b.n	8000e3a <__aeabi_fsub+0x5e>
 800103c:	2400      	movs	r4, #0
 800103e:	2200      	movs	r2, #0
 8001040:	2700      	movs	r7, #0
 8001042:	e716      	b.n	8000e72 <__aeabi_fsub+0x96>
 8001044:	0005      	movs	r5, r0
 8001046:	e7af      	b.n	8000fa8 <__aeabi_fsub+0x1cc>
 8001048:	0032      	movs	r2, r6
 800104a:	4643      	mov	r3, r8
 800104c:	4641      	mov	r1, r8
 800104e:	40da      	lsrs	r2, r3
 8001050:	2320      	movs	r3, #32
 8001052:	1a5b      	subs	r3, r3, r1
 8001054:	409e      	lsls	r6, r3
 8001056:	0030      	movs	r0, r6
 8001058:	1e43      	subs	r3, r0, #1
 800105a:	4198      	sbcs	r0, r3
 800105c:	4310      	orrs	r0, r2
 800105e:	e721      	b.n	8000ea4 <__aeabi_fsub+0xc8>
 8001060:	2d00      	cmp	r5, #0
 8001062:	d1a7      	bne.n	8000fb4 <__aeabi_fsub+0x1d8>
 8001064:	4663      	mov	r3, ip
 8001066:	2b00      	cmp	r3, #0
 8001068:	d059      	beq.n	800111e <__aeabi_fsub+0x342>
 800106a:	2200      	movs	r2, #0
 800106c:	2e00      	cmp	r6, #0
 800106e:	d100      	bne.n	8001072 <__aeabi_fsub+0x296>
 8001070:	e6ff      	b.n	8000e72 <__aeabi_fsub+0x96>
 8001072:	0030      	movs	r0, r6
 8001074:	4460      	add	r0, ip
 8001076:	0143      	lsls	r3, r0, #5
 8001078:	d592      	bpl.n	8000fa0 <__aeabi_fsub+0x1c4>
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <__aeabi_fsub+0x348>)
 800107c:	3501      	adds	r5, #1
 800107e:	4018      	ands	r0, r3
 8001080:	e78e      	b.n	8000fa0 <__aeabi_fsub+0x1c4>
 8001082:	4663      	mov	r3, ip
 8001084:	2b00      	cmp	r3, #0
 8001086:	d047      	beq.n	8001118 <__aeabi_fsub+0x33c>
 8001088:	1e4b      	subs	r3, r1, #1
 800108a:	2901      	cmp	r1, #1
 800108c:	d015      	beq.n	80010ba <__aeabi_fsub+0x2de>
 800108e:	29ff      	cmp	r1, #255	; 0xff
 8001090:	d02b      	beq.n	80010ea <__aeabi_fsub+0x30e>
 8001092:	0019      	movs	r1, r3
 8001094:	e74e      	b.n	8000f34 <__aeabi_fsub+0x158>
 8001096:	000c      	movs	r4, r1
 8001098:	464b      	mov	r3, r9
 800109a:	003d      	movs	r5, r7
 800109c:	e784      	b.n	8000fa8 <__aeabi_fsub+0x1cc>
 800109e:	4662      	mov	r2, ip
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d18b      	bne.n	8000fbc <__aeabi_fsub+0x1e0>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	d192      	bne.n	8000fce <__aeabi_fsub+0x1f2>
 80010a8:	2780      	movs	r7, #128	; 0x80
 80010aa:	2400      	movs	r4, #0
 80010ac:	22ff      	movs	r2, #255	; 0xff
 80010ae:	03ff      	lsls	r7, r7, #15
 80010b0:	e6df      	b.n	8000e72 <__aeabi_fsub+0x96>
 80010b2:	4663      	mov	r3, ip
 80010b4:	000c      	movs	r4, r1
 80010b6:	1af7      	subs	r7, r6, r3
 80010b8:	e6bf      	b.n	8000e3a <__aeabi_fsub+0x5e>
 80010ba:	0030      	movs	r0, r6
 80010bc:	4460      	add	r0, ip
 80010be:	2501      	movs	r5, #1
 80010c0:	0143      	lsls	r3, r0, #5
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_fsub+0x2ea>
 80010c4:	e76c      	b.n	8000fa0 <__aeabi_fsub+0x1c4>
 80010c6:	2502      	movs	r5, #2
 80010c8:	e6f2      	b.n	8000eb0 <__aeabi_fsub+0xd4>
 80010ca:	4663      	mov	r3, ip
 80010cc:	2501      	movs	r5, #1
 80010ce:	1b98      	subs	r0, r3, r6
 80010d0:	e6ae      	b.n	8000e30 <__aeabi_fsub+0x54>
 80010d2:	2320      	movs	r3, #32
 80010d4:	4664      	mov	r4, ip
 80010d6:	4660      	mov	r0, ip
 80010d8:	40fc      	lsrs	r4, r7
 80010da:	1bdf      	subs	r7, r3, r7
 80010dc:	40b8      	lsls	r0, r7
 80010de:	1e43      	subs	r3, r0, #1
 80010e0:	4198      	sbcs	r0, r3
 80010e2:	4320      	orrs	r0, r4
 80010e4:	e79f      	b.n	8001026 <__aeabi_fsub+0x24a>
 80010e6:	0005      	movs	r5, r0
 80010e8:	e75e      	b.n	8000fa8 <__aeabi_fsub+0x1cc>
 80010ea:	464b      	mov	r3, r9
 80010ec:	e771      	b.n	8000fd2 <__aeabi_fsub+0x1f6>
 80010ee:	2320      	movs	r3, #32
 80010f0:	4665      	mov	r5, ip
 80010f2:	4660      	mov	r0, ip
 80010f4:	40cd      	lsrs	r5, r1
 80010f6:	1a59      	subs	r1, r3, r1
 80010f8:	4088      	lsls	r0, r1
 80010fa:	1e43      	subs	r3, r0, #1
 80010fc:	4198      	sbcs	r0, r3
 80010fe:	4328      	orrs	r0, r5
 8001100:	e71c      	b.n	8000f3c <__aeabi_fsub+0x160>
 8001102:	4663      	mov	r3, ip
 8001104:	000c      	movs	r4, r1
 8001106:	2501      	movs	r5, #1
 8001108:	1af0      	subs	r0, r6, r3
 800110a:	e691      	b.n	8000e30 <__aeabi_fsub+0x54>
 800110c:	2e00      	cmp	r6, #0
 800110e:	d095      	beq.n	800103c <__aeabi_fsub+0x260>
 8001110:	000c      	movs	r4, r1
 8001112:	464f      	mov	r7, r9
 8001114:	2200      	movs	r2, #0
 8001116:	e6ac      	b.n	8000e72 <__aeabi_fsub+0x96>
 8001118:	464b      	mov	r3, r9
 800111a:	000d      	movs	r5, r1
 800111c:	e744      	b.n	8000fa8 <__aeabi_fsub+0x1cc>
 800111e:	464f      	mov	r7, r9
 8001120:	2200      	movs	r2, #0
 8001122:	e6a6      	b.n	8000e72 <__aeabi_fsub+0x96>
 8001124:	fbffffff 	.word	0xfbffffff
 8001128:	7dffffff 	.word	0x7dffffff
 800112c:	2800      	cmp	r0, #0
 800112e:	d000      	beq.n	8001132 <__aeabi_fsub+0x356>
 8001130:	e736      	b.n	8000fa0 <__aeabi_fsub+0x1c4>
 8001132:	2400      	movs	r4, #0
 8001134:	2700      	movs	r7, #0
 8001136:	e69c      	b.n	8000e72 <__aeabi_fsub+0x96>

08001138 <__aeabi_f2iz>:
 8001138:	0241      	lsls	r1, r0, #9
 800113a:	0042      	lsls	r2, r0, #1
 800113c:	0fc3      	lsrs	r3, r0, #31
 800113e:	0a49      	lsrs	r1, r1, #9
 8001140:	2000      	movs	r0, #0
 8001142:	0e12      	lsrs	r2, r2, #24
 8001144:	2a7e      	cmp	r2, #126	; 0x7e
 8001146:	dd03      	ble.n	8001150 <__aeabi_f2iz+0x18>
 8001148:	2a9d      	cmp	r2, #157	; 0x9d
 800114a:	dd02      	ble.n	8001152 <__aeabi_f2iz+0x1a>
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <__aeabi_f2iz+0x3c>)
 800114e:	1898      	adds	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	2080      	movs	r0, #128	; 0x80
 8001154:	0400      	lsls	r0, r0, #16
 8001156:	4301      	orrs	r1, r0
 8001158:	2a95      	cmp	r2, #149	; 0x95
 800115a:	dc07      	bgt.n	800116c <__aeabi_f2iz+0x34>
 800115c:	2096      	movs	r0, #150	; 0x96
 800115e:	1a82      	subs	r2, r0, r2
 8001160:	40d1      	lsrs	r1, r2
 8001162:	4248      	negs	r0, r1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f3      	bne.n	8001150 <__aeabi_f2iz+0x18>
 8001168:	0008      	movs	r0, r1
 800116a:	e7f1      	b.n	8001150 <__aeabi_f2iz+0x18>
 800116c:	3a96      	subs	r2, #150	; 0x96
 800116e:	4091      	lsls	r1, r2
 8001170:	e7f7      	b.n	8001162 <__aeabi_f2iz+0x2a>
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	7fffffff 	.word	0x7fffffff

08001178 <__aeabi_ui2f>:
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	1e05      	subs	r5, r0, #0
 800117c:	d00e      	beq.n	800119c <__aeabi_ui2f+0x24>
 800117e:	f001 feab 	bl	8002ed8 <__clzsi2>
 8001182:	239e      	movs	r3, #158	; 0x9e
 8001184:	0004      	movs	r4, r0
 8001186:	1a1b      	subs	r3, r3, r0
 8001188:	2b96      	cmp	r3, #150	; 0x96
 800118a:	dc0c      	bgt.n	80011a6 <__aeabi_ui2f+0x2e>
 800118c:	2808      	cmp	r0, #8
 800118e:	dd01      	ble.n	8001194 <__aeabi_ui2f+0x1c>
 8001190:	3c08      	subs	r4, #8
 8001192:	40a5      	lsls	r5, r4
 8001194:	026d      	lsls	r5, r5, #9
 8001196:	0a6d      	lsrs	r5, r5, #9
 8001198:	b2d8      	uxtb	r0, r3
 800119a:	e001      	b.n	80011a0 <__aeabi_ui2f+0x28>
 800119c:	2000      	movs	r0, #0
 800119e:	2500      	movs	r5, #0
 80011a0:	05c0      	lsls	r0, r0, #23
 80011a2:	4328      	orrs	r0, r5
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
 80011a6:	2b99      	cmp	r3, #153	; 0x99
 80011a8:	dd09      	ble.n	80011be <__aeabi_ui2f+0x46>
 80011aa:	0002      	movs	r2, r0
 80011ac:	0029      	movs	r1, r5
 80011ae:	321b      	adds	r2, #27
 80011b0:	4091      	lsls	r1, r2
 80011b2:	1e4a      	subs	r2, r1, #1
 80011b4:	4191      	sbcs	r1, r2
 80011b6:	2205      	movs	r2, #5
 80011b8:	1a12      	subs	r2, r2, r0
 80011ba:	40d5      	lsrs	r5, r2
 80011bc:	430d      	orrs	r5, r1
 80011be:	2c05      	cmp	r4, #5
 80011c0:	dc12      	bgt.n	80011e8 <__aeabi_ui2f+0x70>
 80011c2:	0029      	movs	r1, r5
 80011c4:	4e0c      	ldr	r6, [pc, #48]	; (80011f8 <__aeabi_ui2f+0x80>)
 80011c6:	4031      	ands	r1, r6
 80011c8:	076a      	lsls	r2, r5, #29
 80011ca:	d009      	beq.n	80011e0 <__aeabi_ui2f+0x68>
 80011cc:	200f      	movs	r0, #15
 80011ce:	4028      	ands	r0, r5
 80011d0:	2804      	cmp	r0, #4
 80011d2:	d005      	beq.n	80011e0 <__aeabi_ui2f+0x68>
 80011d4:	3104      	adds	r1, #4
 80011d6:	014a      	lsls	r2, r1, #5
 80011d8:	d502      	bpl.n	80011e0 <__aeabi_ui2f+0x68>
 80011da:	239f      	movs	r3, #159	; 0x9f
 80011dc:	4031      	ands	r1, r6
 80011de:	1b1b      	subs	r3, r3, r4
 80011e0:	0189      	lsls	r1, r1, #6
 80011e2:	0a4d      	lsrs	r5, r1, #9
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	e7db      	b.n	80011a0 <__aeabi_ui2f+0x28>
 80011e8:	1f62      	subs	r2, r4, #5
 80011ea:	4095      	lsls	r5, r2
 80011ec:	0029      	movs	r1, r5
 80011ee:	4e02      	ldr	r6, [pc, #8]	; (80011f8 <__aeabi_ui2f+0x80>)
 80011f0:	4031      	ands	r1, r6
 80011f2:	076a      	lsls	r2, r5, #29
 80011f4:	d0f4      	beq.n	80011e0 <__aeabi_ui2f+0x68>
 80011f6:	e7e9      	b.n	80011cc <__aeabi_ui2f+0x54>
 80011f8:	fbffffff 	.word	0xfbffffff

080011fc <__aeabi_dadd>:
 80011fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fe:	464f      	mov	r7, r9
 8001200:	4646      	mov	r6, r8
 8001202:	46d6      	mov	lr, sl
 8001204:	000d      	movs	r5, r1
 8001206:	0004      	movs	r4, r0
 8001208:	b5c0      	push	{r6, r7, lr}
 800120a:	001f      	movs	r7, r3
 800120c:	0011      	movs	r1, r2
 800120e:	0328      	lsls	r0, r5, #12
 8001210:	0f62      	lsrs	r2, r4, #29
 8001212:	0a40      	lsrs	r0, r0, #9
 8001214:	4310      	orrs	r0, r2
 8001216:	007a      	lsls	r2, r7, #1
 8001218:	0d52      	lsrs	r2, r2, #21
 800121a:	00e3      	lsls	r3, r4, #3
 800121c:	033c      	lsls	r4, r7, #12
 800121e:	4691      	mov	r9, r2
 8001220:	0a64      	lsrs	r4, r4, #9
 8001222:	0ffa      	lsrs	r2, r7, #31
 8001224:	0f4f      	lsrs	r7, r1, #29
 8001226:	006e      	lsls	r6, r5, #1
 8001228:	4327      	orrs	r7, r4
 800122a:	4692      	mov	sl, r2
 800122c:	46b8      	mov	r8, r7
 800122e:	0d76      	lsrs	r6, r6, #21
 8001230:	0fed      	lsrs	r5, r5, #31
 8001232:	00c9      	lsls	r1, r1, #3
 8001234:	4295      	cmp	r5, r2
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x3e>
 8001238:	e099      	b.n	800136e <__aeabi_dadd+0x172>
 800123a:	464c      	mov	r4, r9
 800123c:	1b34      	subs	r4, r6, r4
 800123e:	46a4      	mov	ip, r4
 8001240:	2c00      	cmp	r4, #0
 8001242:	dc00      	bgt.n	8001246 <__aeabi_dadd+0x4a>
 8001244:	e07c      	b.n	8001340 <__aeabi_dadd+0x144>
 8001246:	464a      	mov	r2, r9
 8001248:	2a00      	cmp	r2, #0
 800124a:	d100      	bne.n	800124e <__aeabi_dadd+0x52>
 800124c:	e0b8      	b.n	80013c0 <__aeabi_dadd+0x1c4>
 800124e:	4ac5      	ldr	r2, [pc, #788]	; (8001564 <__aeabi_dadd+0x368>)
 8001250:	4296      	cmp	r6, r2
 8001252:	d100      	bne.n	8001256 <__aeabi_dadd+0x5a>
 8001254:	e11c      	b.n	8001490 <__aeabi_dadd+0x294>
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	003c      	movs	r4, r7
 800125a:	0412      	lsls	r2, r2, #16
 800125c:	4314      	orrs	r4, r2
 800125e:	46a0      	mov	r8, r4
 8001260:	4662      	mov	r2, ip
 8001262:	2a38      	cmp	r2, #56	; 0x38
 8001264:	dd00      	ble.n	8001268 <__aeabi_dadd+0x6c>
 8001266:	e161      	b.n	800152c <__aeabi_dadd+0x330>
 8001268:	2a1f      	cmp	r2, #31
 800126a:	dd00      	ble.n	800126e <__aeabi_dadd+0x72>
 800126c:	e1cc      	b.n	8001608 <__aeabi_dadd+0x40c>
 800126e:	4664      	mov	r4, ip
 8001270:	2220      	movs	r2, #32
 8001272:	1b12      	subs	r2, r2, r4
 8001274:	4644      	mov	r4, r8
 8001276:	4094      	lsls	r4, r2
 8001278:	000f      	movs	r7, r1
 800127a:	46a1      	mov	r9, r4
 800127c:	4664      	mov	r4, ip
 800127e:	4091      	lsls	r1, r2
 8001280:	40e7      	lsrs	r7, r4
 8001282:	464c      	mov	r4, r9
 8001284:	1e4a      	subs	r2, r1, #1
 8001286:	4191      	sbcs	r1, r2
 8001288:	433c      	orrs	r4, r7
 800128a:	4642      	mov	r2, r8
 800128c:	4321      	orrs	r1, r4
 800128e:	4664      	mov	r4, ip
 8001290:	40e2      	lsrs	r2, r4
 8001292:	1a80      	subs	r0, r0, r2
 8001294:	1a5c      	subs	r4, r3, r1
 8001296:	42a3      	cmp	r3, r4
 8001298:	419b      	sbcs	r3, r3
 800129a:	425f      	negs	r7, r3
 800129c:	1bc7      	subs	r7, r0, r7
 800129e:	023b      	lsls	r3, r7, #8
 80012a0:	d400      	bmi.n	80012a4 <__aeabi_dadd+0xa8>
 80012a2:	e0d0      	b.n	8001446 <__aeabi_dadd+0x24a>
 80012a4:	027f      	lsls	r7, r7, #9
 80012a6:	0a7f      	lsrs	r7, r7, #9
 80012a8:	2f00      	cmp	r7, #0
 80012aa:	d100      	bne.n	80012ae <__aeabi_dadd+0xb2>
 80012ac:	e0ff      	b.n	80014ae <__aeabi_dadd+0x2b2>
 80012ae:	0038      	movs	r0, r7
 80012b0:	f001 fe12 	bl	8002ed8 <__clzsi2>
 80012b4:	0001      	movs	r1, r0
 80012b6:	3908      	subs	r1, #8
 80012b8:	2320      	movs	r3, #32
 80012ba:	0022      	movs	r2, r4
 80012bc:	1a5b      	subs	r3, r3, r1
 80012be:	408f      	lsls	r7, r1
 80012c0:	40da      	lsrs	r2, r3
 80012c2:	408c      	lsls	r4, r1
 80012c4:	4317      	orrs	r7, r2
 80012c6:	42b1      	cmp	r1, r6
 80012c8:	da00      	bge.n	80012cc <__aeabi_dadd+0xd0>
 80012ca:	e0ff      	b.n	80014cc <__aeabi_dadd+0x2d0>
 80012cc:	1b89      	subs	r1, r1, r6
 80012ce:	1c4b      	adds	r3, r1, #1
 80012d0:	2b1f      	cmp	r3, #31
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_dadd+0xda>
 80012d4:	e0a8      	b.n	8001428 <__aeabi_dadd+0x22c>
 80012d6:	2220      	movs	r2, #32
 80012d8:	0039      	movs	r1, r7
 80012da:	1ad2      	subs	r2, r2, r3
 80012dc:	0020      	movs	r0, r4
 80012de:	4094      	lsls	r4, r2
 80012e0:	4091      	lsls	r1, r2
 80012e2:	40d8      	lsrs	r0, r3
 80012e4:	1e62      	subs	r2, r4, #1
 80012e6:	4194      	sbcs	r4, r2
 80012e8:	40df      	lsrs	r7, r3
 80012ea:	2600      	movs	r6, #0
 80012ec:	4301      	orrs	r1, r0
 80012ee:	430c      	orrs	r4, r1
 80012f0:	0763      	lsls	r3, r4, #29
 80012f2:	d009      	beq.n	8001308 <__aeabi_dadd+0x10c>
 80012f4:	230f      	movs	r3, #15
 80012f6:	4023      	ands	r3, r4
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d005      	beq.n	8001308 <__aeabi_dadd+0x10c>
 80012fc:	1d23      	adds	r3, r4, #4
 80012fe:	42a3      	cmp	r3, r4
 8001300:	41a4      	sbcs	r4, r4
 8001302:	4264      	negs	r4, r4
 8001304:	193f      	adds	r7, r7, r4
 8001306:	001c      	movs	r4, r3
 8001308:	023b      	lsls	r3, r7, #8
 800130a:	d400      	bmi.n	800130e <__aeabi_dadd+0x112>
 800130c:	e09e      	b.n	800144c <__aeabi_dadd+0x250>
 800130e:	4b95      	ldr	r3, [pc, #596]	; (8001564 <__aeabi_dadd+0x368>)
 8001310:	3601      	adds	r6, #1
 8001312:	429e      	cmp	r6, r3
 8001314:	d100      	bne.n	8001318 <__aeabi_dadd+0x11c>
 8001316:	e0b7      	b.n	8001488 <__aeabi_dadd+0x28c>
 8001318:	4a93      	ldr	r2, [pc, #588]	; (8001568 <__aeabi_dadd+0x36c>)
 800131a:	08e4      	lsrs	r4, r4, #3
 800131c:	4017      	ands	r7, r2
 800131e:	077b      	lsls	r3, r7, #29
 8001320:	0571      	lsls	r1, r6, #21
 8001322:	027f      	lsls	r7, r7, #9
 8001324:	4323      	orrs	r3, r4
 8001326:	0b3f      	lsrs	r7, r7, #12
 8001328:	0d4a      	lsrs	r2, r1, #21
 800132a:	0512      	lsls	r2, r2, #20
 800132c:	433a      	orrs	r2, r7
 800132e:	07ed      	lsls	r5, r5, #31
 8001330:	432a      	orrs	r2, r5
 8001332:	0018      	movs	r0, r3
 8001334:	0011      	movs	r1, r2
 8001336:	bce0      	pop	{r5, r6, r7}
 8001338:	46ba      	mov	sl, r7
 800133a:	46b1      	mov	r9, r6
 800133c:	46a8      	mov	r8, r5
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001340:	2c00      	cmp	r4, #0
 8001342:	d04b      	beq.n	80013dc <__aeabi_dadd+0x1e0>
 8001344:	464c      	mov	r4, r9
 8001346:	1ba4      	subs	r4, r4, r6
 8001348:	46a4      	mov	ip, r4
 800134a:	2e00      	cmp	r6, #0
 800134c:	d000      	beq.n	8001350 <__aeabi_dadd+0x154>
 800134e:	e123      	b.n	8001598 <__aeabi_dadd+0x39c>
 8001350:	0004      	movs	r4, r0
 8001352:	431c      	orrs	r4, r3
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x15c>
 8001356:	e1af      	b.n	80016b8 <__aeabi_dadd+0x4bc>
 8001358:	4662      	mov	r2, ip
 800135a:	1e54      	subs	r4, r2, #1
 800135c:	2a01      	cmp	r2, #1
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x166>
 8001360:	e215      	b.n	800178e <__aeabi_dadd+0x592>
 8001362:	4d80      	ldr	r5, [pc, #512]	; (8001564 <__aeabi_dadd+0x368>)
 8001364:	45ac      	cmp	ip, r5
 8001366:	d100      	bne.n	800136a <__aeabi_dadd+0x16e>
 8001368:	e1c8      	b.n	80016fc <__aeabi_dadd+0x500>
 800136a:	46a4      	mov	ip, r4
 800136c:	e11b      	b.n	80015a6 <__aeabi_dadd+0x3aa>
 800136e:	464a      	mov	r2, r9
 8001370:	1ab2      	subs	r2, r6, r2
 8001372:	4694      	mov	ip, r2
 8001374:	2a00      	cmp	r2, #0
 8001376:	dc00      	bgt.n	800137a <__aeabi_dadd+0x17e>
 8001378:	e0ac      	b.n	80014d4 <__aeabi_dadd+0x2d8>
 800137a:	464a      	mov	r2, r9
 800137c:	2a00      	cmp	r2, #0
 800137e:	d043      	beq.n	8001408 <__aeabi_dadd+0x20c>
 8001380:	4a78      	ldr	r2, [pc, #480]	; (8001564 <__aeabi_dadd+0x368>)
 8001382:	4296      	cmp	r6, r2
 8001384:	d100      	bne.n	8001388 <__aeabi_dadd+0x18c>
 8001386:	e1af      	b.n	80016e8 <__aeabi_dadd+0x4ec>
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	003c      	movs	r4, r7
 800138c:	0412      	lsls	r2, r2, #16
 800138e:	4314      	orrs	r4, r2
 8001390:	46a0      	mov	r8, r4
 8001392:	4662      	mov	r2, ip
 8001394:	2a38      	cmp	r2, #56	; 0x38
 8001396:	dc67      	bgt.n	8001468 <__aeabi_dadd+0x26c>
 8001398:	2a1f      	cmp	r2, #31
 800139a:	dc00      	bgt.n	800139e <__aeabi_dadd+0x1a2>
 800139c:	e15f      	b.n	800165e <__aeabi_dadd+0x462>
 800139e:	4647      	mov	r7, r8
 80013a0:	3a20      	subs	r2, #32
 80013a2:	40d7      	lsrs	r7, r2
 80013a4:	4662      	mov	r2, ip
 80013a6:	2a20      	cmp	r2, #32
 80013a8:	d005      	beq.n	80013b6 <__aeabi_dadd+0x1ba>
 80013aa:	4664      	mov	r4, ip
 80013ac:	2240      	movs	r2, #64	; 0x40
 80013ae:	1b12      	subs	r2, r2, r4
 80013b0:	4644      	mov	r4, r8
 80013b2:	4094      	lsls	r4, r2
 80013b4:	4321      	orrs	r1, r4
 80013b6:	1e4a      	subs	r2, r1, #1
 80013b8:	4191      	sbcs	r1, r2
 80013ba:	000c      	movs	r4, r1
 80013bc:	433c      	orrs	r4, r7
 80013be:	e057      	b.n	8001470 <__aeabi_dadd+0x274>
 80013c0:	003a      	movs	r2, r7
 80013c2:	430a      	orrs	r2, r1
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dadd+0x1cc>
 80013c6:	e105      	b.n	80015d4 <__aeabi_dadd+0x3d8>
 80013c8:	0022      	movs	r2, r4
 80013ca:	3a01      	subs	r2, #1
 80013cc:	2c01      	cmp	r4, #1
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dadd+0x1d6>
 80013d0:	e182      	b.n	80016d8 <__aeabi_dadd+0x4dc>
 80013d2:	4c64      	ldr	r4, [pc, #400]	; (8001564 <__aeabi_dadd+0x368>)
 80013d4:	45a4      	cmp	ip, r4
 80013d6:	d05b      	beq.n	8001490 <__aeabi_dadd+0x294>
 80013d8:	4694      	mov	ip, r2
 80013da:	e741      	b.n	8001260 <__aeabi_dadd+0x64>
 80013dc:	4c63      	ldr	r4, [pc, #396]	; (800156c <__aeabi_dadd+0x370>)
 80013de:	1c77      	adds	r7, r6, #1
 80013e0:	4227      	tst	r7, r4
 80013e2:	d000      	beq.n	80013e6 <__aeabi_dadd+0x1ea>
 80013e4:	e0c4      	b.n	8001570 <__aeabi_dadd+0x374>
 80013e6:	0004      	movs	r4, r0
 80013e8:	431c      	orrs	r4, r3
 80013ea:	2e00      	cmp	r6, #0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_dadd+0x1f4>
 80013ee:	e169      	b.n	80016c4 <__aeabi_dadd+0x4c8>
 80013f0:	2c00      	cmp	r4, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dadd+0x1fa>
 80013f4:	e1bf      	b.n	8001776 <__aeabi_dadd+0x57a>
 80013f6:	4644      	mov	r4, r8
 80013f8:	430c      	orrs	r4, r1
 80013fa:	d000      	beq.n	80013fe <__aeabi_dadd+0x202>
 80013fc:	e1d0      	b.n	80017a0 <__aeabi_dadd+0x5a4>
 80013fe:	0742      	lsls	r2, r0, #29
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	4313      	orrs	r3, r2
 8001404:	08c0      	lsrs	r0, r0, #3
 8001406:	e029      	b.n	800145c <__aeabi_dadd+0x260>
 8001408:	003a      	movs	r2, r7
 800140a:	430a      	orrs	r2, r1
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x214>
 800140e:	e170      	b.n	80016f2 <__aeabi_dadd+0x4f6>
 8001410:	4662      	mov	r2, ip
 8001412:	4664      	mov	r4, ip
 8001414:	3a01      	subs	r2, #1
 8001416:	2c01      	cmp	r4, #1
 8001418:	d100      	bne.n	800141c <__aeabi_dadd+0x220>
 800141a:	e0e0      	b.n	80015de <__aeabi_dadd+0x3e2>
 800141c:	4c51      	ldr	r4, [pc, #324]	; (8001564 <__aeabi_dadd+0x368>)
 800141e:	45a4      	cmp	ip, r4
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x228>
 8001422:	e161      	b.n	80016e8 <__aeabi_dadd+0x4ec>
 8001424:	4694      	mov	ip, r2
 8001426:	e7b4      	b.n	8001392 <__aeabi_dadd+0x196>
 8001428:	003a      	movs	r2, r7
 800142a:	391f      	subs	r1, #31
 800142c:	40ca      	lsrs	r2, r1
 800142e:	0011      	movs	r1, r2
 8001430:	2b20      	cmp	r3, #32
 8001432:	d003      	beq.n	800143c <__aeabi_dadd+0x240>
 8001434:	2240      	movs	r2, #64	; 0x40
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	409f      	lsls	r7, r3
 800143a:	433c      	orrs	r4, r7
 800143c:	1e63      	subs	r3, r4, #1
 800143e:	419c      	sbcs	r4, r3
 8001440:	2700      	movs	r7, #0
 8001442:	2600      	movs	r6, #0
 8001444:	430c      	orrs	r4, r1
 8001446:	0763      	lsls	r3, r4, #29
 8001448:	d000      	beq.n	800144c <__aeabi_dadd+0x250>
 800144a:	e753      	b.n	80012f4 <__aeabi_dadd+0xf8>
 800144c:	46b4      	mov	ip, r6
 800144e:	08e4      	lsrs	r4, r4, #3
 8001450:	077b      	lsls	r3, r7, #29
 8001452:	4323      	orrs	r3, r4
 8001454:	08f8      	lsrs	r0, r7, #3
 8001456:	4a43      	ldr	r2, [pc, #268]	; (8001564 <__aeabi_dadd+0x368>)
 8001458:	4594      	cmp	ip, r2
 800145a:	d01d      	beq.n	8001498 <__aeabi_dadd+0x29c>
 800145c:	4662      	mov	r2, ip
 800145e:	0307      	lsls	r7, r0, #12
 8001460:	0552      	lsls	r2, r2, #21
 8001462:	0b3f      	lsrs	r7, r7, #12
 8001464:	0d52      	lsrs	r2, r2, #21
 8001466:	e760      	b.n	800132a <__aeabi_dadd+0x12e>
 8001468:	4644      	mov	r4, r8
 800146a:	430c      	orrs	r4, r1
 800146c:	1e62      	subs	r2, r4, #1
 800146e:	4194      	sbcs	r4, r2
 8001470:	18e4      	adds	r4, r4, r3
 8001472:	429c      	cmp	r4, r3
 8001474:	419b      	sbcs	r3, r3
 8001476:	425f      	negs	r7, r3
 8001478:	183f      	adds	r7, r7, r0
 800147a:	023b      	lsls	r3, r7, #8
 800147c:	d5e3      	bpl.n	8001446 <__aeabi_dadd+0x24a>
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <__aeabi_dadd+0x368>)
 8001480:	3601      	adds	r6, #1
 8001482:	429e      	cmp	r6, r3
 8001484:	d000      	beq.n	8001488 <__aeabi_dadd+0x28c>
 8001486:	e0b5      	b.n	80015f4 <__aeabi_dadd+0x3f8>
 8001488:	0032      	movs	r2, r6
 800148a:	2700      	movs	r7, #0
 800148c:	2300      	movs	r3, #0
 800148e:	e74c      	b.n	800132a <__aeabi_dadd+0x12e>
 8001490:	0742      	lsls	r2, r0, #29
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	4313      	orrs	r3, r2
 8001496:	08c0      	lsrs	r0, r0, #3
 8001498:	001a      	movs	r2, r3
 800149a:	4302      	orrs	r2, r0
 800149c:	d100      	bne.n	80014a0 <__aeabi_dadd+0x2a4>
 800149e:	e1e1      	b.n	8001864 <__aeabi_dadd+0x668>
 80014a0:	2780      	movs	r7, #128	; 0x80
 80014a2:	033f      	lsls	r7, r7, #12
 80014a4:	4307      	orrs	r7, r0
 80014a6:	033f      	lsls	r7, r7, #12
 80014a8:	4a2e      	ldr	r2, [pc, #184]	; (8001564 <__aeabi_dadd+0x368>)
 80014aa:	0b3f      	lsrs	r7, r7, #12
 80014ac:	e73d      	b.n	800132a <__aeabi_dadd+0x12e>
 80014ae:	0020      	movs	r0, r4
 80014b0:	f001 fd12 	bl	8002ed8 <__clzsi2>
 80014b4:	0001      	movs	r1, r0
 80014b6:	3118      	adds	r1, #24
 80014b8:	291f      	cmp	r1, #31
 80014ba:	dc00      	bgt.n	80014be <__aeabi_dadd+0x2c2>
 80014bc:	e6fc      	b.n	80012b8 <__aeabi_dadd+0xbc>
 80014be:	3808      	subs	r0, #8
 80014c0:	4084      	lsls	r4, r0
 80014c2:	0027      	movs	r7, r4
 80014c4:	2400      	movs	r4, #0
 80014c6:	42b1      	cmp	r1, r6
 80014c8:	db00      	blt.n	80014cc <__aeabi_dadd+0x2d0>
 80014ca:	e6ff      	b.n	80012cc <__aeabi_dadd+0xd0>
 80014cc:	4a26      	ldr	r2, [pc, #152]	; (8001568 <__aeabi_dadd+0x36c>)
 80014ce:	1a76      	subs	r6, r6, r1
 80014d0:	4017      	ands	r7, r2
 80014d2:	e70d      	b.n	80012f0 <__aeabi_dadd+0xf4>
 80014d4:	2a00      	cmp	r2, #0
 80014d6:	d02f      	beq.n	8001538 <__aeabi_dadd+0x33c>
 80014d8:	464a      	mov	r2, r9
 80014da:	1b92      	subs	r2, r2, r6
 80014dc:	4694      	mov	ip, r2
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dadd+0x2e8>
 80014e2:	e0ad      	b.n	8001640 <__aeabi_dadd+0x444>
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <__aeabi_dadd+0x368>)
 80014e6:	4591      	cmp	r9, r2
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x2f0>
 80014ea:	e10f      	b.n	800170c <__aeabi_dadd+0x510>
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0412      	lsls	r2, r2, #16
 80014f0:	4310      	orrs	r0, r2
 80014f2:	4662      	mov	r2, ip
 80014f4:	2a38      	cmp	r2, #56	; 0x38
 80014f6:	dd00      	ble.n	80014fa <__aeabi_dadd+0x2fe>
 80014f8:	e10f      	b.n	800171a <__aeabi_dadd+0x51e>
 80014fa:	2a1f      	cmp	r2, #31
 80014fc:	dd00      	ble.n	8001500 <__aeabi_dadd+0x304>
 80014fe:	e180      	b.n	8001802 <__aeabi_dadd+0x606>
 8001500:	4664      	mov	r4, ip
 8001502:	2220      	movs	r2, #32
 8001504:	001e      	movs	r6, r3
 8001506:	1b12      	subs	r2, r2, r4
 8001508:	4667      	mov	r7, ip
 800150a:	0004      	movs	r4, r0
 800150c:	4093      	lsls	r3, r2
 800150e:	4094      	lsls	r4, r2
 8001510:	40fe      	lsrs	r6, r7
 8001512:	1e5a      	subs	r2, r3, #1
 8001514:	4193      	sbcs	r3, r2
 8001516:	40f8      	lsrs	r0, r7
 8001518:	4334      	orrs	r4, r6
 800151a:	431c      	orrs	r4, r3
 800151c:	4480      	add	r8, r0
 800151e:	1864      	adds	r4, r4, r1
 8001520:	428c      	cmp	r4, r1
 8001522:	41bf      	sbcs	r7, r7
 8001524:	427f      	negs	r7, r7
 8001526:	464e      	mov	r6, r9
 8001528:	4447      	add	r7, r8
 800152a:	e7a6      	b.n	800147a <__aeabi_dadd+0x27e>
 800152c:	4642      	mov	r2, r8
 800152e:	430a      	orrs	r2, r1
 8001530:	0011      	movs	r1, r2
 8001532:	1e4a      	subs	r2, r1, #1
 8001534:	4191      	sbcs	r1, r2
 8001536:	e6ad      	b.n	8001294 <__aeabi_dadd+0x98>
 8001538:	4c0c      	ldr	r4, [pc, #48]	; (800156c <__aeabi_dadd+0x370>)
 800153a:	1c72      	adds	r2, r6, #1
 800153c:	4222      	tst	r2, r4
 800153e:	d000      	beq.n	8001542 <__aeabi_dadd+0x346>
 8001540:	e0a1      	b.n	8001686 <__aeabi_dadd+0x48a>
 8001542:	0002      	movs	r2, r0
 8001544:	431a      	orrs	r2, r3
 8001546:	2e00      	cmp	r6, #0
 8001548:	d000      	beq.n	800154c <__aeabi_dadd+0x350>
 800154a:	e0fa      	b.n	8001742 <__aeabi_dadd+0x546>
 800154c:	2a00      	cmp	r2, #0
 800154e:	d100      	bne.n	8001552 <__aeabi_dadd+0x356>
 8001550:	e145      	b.n	80017de <__aeabi_dadd+0x5e2>
 8001552:	003a      	movs	r2, r7
 8001554:	430a      	orrs	r2, r1
 8001556:	d000      	beq.n	800155a <__aeabi_dadd+0x35e>
 8001558:	e146      	b.n	80017e8 <__aeabi_dadd+0x5ec>
 800155a:	0742      	lsls	r2, r0, #29
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	4313      	orrs	r3, r2
 8001560:	08c0      	lsrs	r0, r0, #3
 8001562:	e77b      	b.n	800145c <__aeabi_dadd+0x260>
 8001564:	000007ff 	.word	0x000007ff
 8001568:	ff7fffff 	.word	0xff7fffff
 800156c:	000007fe 	.word	0x000007fe
 8001570:	4647      	mov	r7, r8
 8001572:	1a5c      	subs	r4, r3, r1
 8001574:	1bc2      	subs	r2, r0, r7
 8001576:	42a3      	cmp	r3, r4
 8001578:	41bf      	sbcs	r7, r7
 800157a:	427f      	negs	r7, r7
 800157c:	46b9      	mov	r9, r7
 800157e:	0017      	movs	r7, r2
 8001580:	464a      	mov	r2, r9
 8001582:	1abf      	subs	r7, r7, r2
 8001584:	023a      	lsls	r2, r7, #8
 8001586:	d500      	bpl.n	800158a <__aeabi_dadd+0x38e>
 8001588:	e08d      	b.n	80016a6 <__aeabi_dadd+0x4aa>
 800158a:	0023      	movs	r3, r4
 800158c:	433b      	orrs	r3, r7
 800158e:	d000      	beq.n	8001592 <__aeabi_dadd+0x396>
 8001590:	e68a      	b.n	80012a8 <__aeabi_dadd+0xac>
 8001592:	2000      	movs	r0, #0
 8001594:	2500      	movs	r5, #0
 8001596:	e761      	b.n	800145c <__aeabi_dadd+0x260>
 8001598:	4cb4      	ldr	r4, [pc, #720]	; (800186c <__aeabi_dadd+0x670>)
 800159a:	45a1      	cmp	r9, r4
 800159c:	d100      	bne.n	80015a0 <__aeabi_dadd+0x3a4>
 800159e:	e0ad      	b.n	80016fc <__aeabi_dadd+0x500>
 80015a0:	2480      	movs	r4, #128	; 0x80
 80015a2:	0424      	lsls	r4, r4, #16
 80015a4:	4320      	orrs	r0, r4
 80015a6:	4664      	mov	r4, ip
 80015a8:	2c38      	cmp	r4, #56	; 0x38
 80015aa:	dc3d      	bgt.n	8001628 <__aeabi_dadd+0x42c>
 80015ac:	4662      	mov	r2, ip
 80015ae:	2c1f      	cmp	r4, #31
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dadd+0x3b8>
 80015b2:	e0b7      	b.n	8001724 <__aeabi_dadd+0x528>
 80015b4:	2520      	movs	r5, #32
 80015b6:	001e      	movs	r6, r3
 80015b8:	1b2d      	subs	r5, r5, r4
 80015ba:	0004      	movs	r4, r0
 80015bc:	40ab      	lsls	r3, r5
 80015be:	40ac      	lsls	r4, r5
 80015c0:	40d6      	lsrs	r6, r2
 80015c2:	40d0      	lsrs	r0, r2
 80015c4:	4642      	mov	r2, r8
 80015c6:	1e5d      	subs	r5, r3, #1
 80015c8:	41ab      	sbcs	r3, r5
 80015ca:	4334      	orrs	r4, r6
 80015cc:	1a12      	subs	r2, r2, r0
 80015ce:	4690      	mov	r8, r2
 80015d0:	4323      	orrs	r3, r4
 80015d2:	e02c      	b.n	800162e <__aeabi_dadd+0x432>
 80015d4:	0742      	lsls	r2, r0, #29
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	4313      	orrs	r3, r2
 80015da:	08c0      	lsrs	r0, r0, #3
 80015dc:	e73b      	b.n	8001456 <__aeabi_dadd+0x25a>
 80015de:	185c      	adds	r4, r3, r1
 80015e0:	429c      	cmp	r4, r3
 80015e2:	419b      	sbcs	r3, r3
 80015e4:	4440      	add	r0, r8
 80015e6:	425b      	negs	r3, r3
 80015e8:	18c7      	adds	r7, r0, r3
 80015ea:	2601      	movs	r6, #1
 80015ec:	023b      	lsls	r3, r7, #8
 80015ee:	d400      	bmi.n	80015f2 <__aeabi_dadd+0x3f6>
 80015f0:	e729      	b.n	8001446 <__aeabi_dadd+0x24a>
 80015f2:	2602      	movs	r6, #2
 80015f4:	4a9e      	ldr	r2, [pc, #632]	; (8001870 <__aeabi_dadd+0x674>)
 80015f6:	0863      	lsrs	r3, r4, #1
 80015f8:	4017      	ands	r7, r2
 80015fa:	2201      	movs	r2, #1
 80015fc:	4014      	ands	r4, r2
 80015fe:	431c      	orrs	r4, r3
 8001600:	07fb      	lsls	r3, r7, #31
 8001602:	431c      	orrs	r4, r3
 8001604:	087f      	lsrs	r7, r7, #1
 8001606:	e673      	b.n	80012f0 <__aeabi_dadd+0xf4>
 8001608:	4644      	mov	r4, r8
 800160a:	3a20      	subs	r2, #32
 800160c:	40d4      	lsrs	r4, r2
 800160e:	4662      	mov	r2, ip
 8001610:	2a20      	cmp	r2, #32
 8001612:	d005      	beq.n	8001620 <__aeabi_dadd+0x424>
 8001614:	4667      	mov	r7, ip
 8001616:	2240      	movs	r2, #64	; 0x40
 8001618:	1bd2      	subs	r2, r2, r7
 800161a:	4647      	mov	r7, r8
 800161c:	4097      	lsls	r7, r2
 800161e:	4339      	orrs	r1, r7
 8001620:	1e4a      	subs	r2, r1, #1
 8001622:	4191      	sbcs	r1, r2
 8001624:	4321      	orrs	r1, r4
 8001626:	e635      	b.n	8001294 <__aeabi_dadd+0x98>
 8001628:	4303      	orrs	r3, r0
 800162a:	1e58      	subs	r0, r3, #1
 800162c:	4183      	sbcs	r3, r0
 800162e:	1acc      	subs	r4, r1, r3
 8001630:	42a1      	cmp	r1, r4
 8001632:	41bf      	sbcs	r7, r7
 8001634:	4643      	mov	r3, r8
 8001636:	427f      	negs	r7, r7
 8001638:	4655      	mov	r5, sl
 800163a:	464e      	mov	r6, r9
 800163c:	1bdf      	subs	r7, r3, r7
 800163e:	e62e      	b.n	800129e <__aeabi_dadd+0xa2>
 8001640:	0002      	movs	r2, r0
 8001642:	431a      	orrs	r2, r3
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x44c>
 8001646:	e0bd      	b.n	80017c4 <__aeabi_dadd+0x5c8>
 8001648:	4662      	mov	r2, ip
 800164a:	4664      	mov	r4, ip
 800164c:	3a01      	subs	r2, #1
 800164e:	2c01      	cmp	r4, #1
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x458>
 8001652:	e0e5      	b.n	8001820 <__aeabi_dadd+0x624>
 8001654:	4c85      	ldr	r4, [pc, #532]	; (800186c <__aeabi_dadd+0x670>)
 8001656:	45a4      	cmp	ip, r4
 8001658:	d058      	beq.n	800170c <__aeabi_dadd+0x510>
 800165a:	4694      	mov	ip, r2
 800165c:	e749      	b.n	80014f2 <__aeabi_dadd+0x2f6>
 800165e:	4664      	mov	r4, ip
 8001660:	2220      	movs	r2, #32
 8001662:	1b12      	subs	r2, r2, r4
 8001664:	4644      	mov	r4, r8
 8001666:	4094      	lsls	r4, r2
 8001668:	000f      	movs	r7, r1
 800166a:	46a1      	mov	r9, r4
 800166c:	4664      	mov	r4, ip
 800166e:	4091      	lsls	r1, r2
 8001670:	40e7      	lsrs	r7, r4
 8001672:	464c      	mov	r4, r9
 8001674:	1e4a      	subs	r2, r1, #1
 8001676:	4191      	sbcs	r1, r2
 8001678:	433c      	orrs	r4, r7
 800167a:	4642      	mov	r2, r8
 800167c:	430c      	orrs	r4, r1
 800167e:	4661      	mov	r1, ip
 8001680:	40ca      	lsrs	r2, r1
 8001682:	1880      	adds	r0, r0, r2
 8001684:	e6f4      	b.n	8001470 <__aeabi_dadd+0x274>
 8001686:	4c79      	ldr	r4, [pc, #484]	; (800186c <__aeabi_dadd+0x670>)
 8001688:	42a2      	cmp	r2, r4
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x492>
 800168c:	e6fd      	b.n	800148a <__aeabi_dadd+0x28e>
 800168e:	1859      	adds	r1, r3, r1
 8001690:	4299      	cmp	r1, r3
 8001692:	419b      	sbcs	r3, r3
 8001694:	4440      	add	r0, r8
 8001696:	425f      	negs	r7, r3
 8001698:	19c7      	adds	r7, r0, r7
 800169a:	07fc      	lsls	r4, r7, #31
 800169c:	0849      	lsrs	r1, r1, #1
 800169e:	0016      	movs	r6, r2
 80016a0:	430c      	orrs	r4, r1
 80016a2:	087f      	lsrs	r7, r7, #1
 80016a4:	e6cf      	b.n	8001446 <__aeabi_dadd+0x24a>
 80016a6:	1acc      	subs	r4, r1, r3
 80016a8:	42a1      	cmp	r1, r4
 80016aa:	41bf      	sbcs	r7, r7
 80016ac:	4643      	mov	r3, r8
 80016ae:	427f      	negs	r7, r7
 80016b0:	1a18      	subs	r0, r3, r0
 80016b2:	4655      	mov	r5, sl
 80016b4:	1bc7      	subs	r7, r0, r7
 80016b6:	e5f7      	b.n	80012a8 <__aeabi_dadd+0xac>
 80016b8:	08c9      	lsrs	r1, r1, #3
 80016ba:	077b      	lsls	r3, r7, #29
 80016bc:	4655      	mov	r5, sl
 80016be:	430b      	orrs	r3, r1
 80016c0:	08f8      	lsrs	r0, r7, #3
 80016c2:	e6c8      	b.n	8001456 <__aeabi_dadd+0x25a>
 80016c4:	2c00      	cmp	r4, #0
 80016c6:	d000      	beq.n	80016ca <__aeabi_dadd+0x4ce>
 80016c8:	e081      	b.n	80017ce <__aeabi_dadd+0x5d2>
 80016ca:	4643      	mov	r3, r8
 80016cc:	430b      	orrs	r3, r1
 80016ce:	d115      	bne.n	80016fc <__aeabi_dadd+0x500>
 80016d0:	2080      	movs	r0, #128	; 0x80
 80016d2:	2500      	movs	r5, #0
 80016d4:	0300      	lsls	r0, r0, #12
 80016d6:	e6e3      	b.n	80014a0 <__aeabi_dadd+0x2a4>
 80016d8:	1a5c      	subs	r4, r3, r1
 80016da:	42a3      	cmp	r3, r4
 80016dc:	419b      	sbcs	r3, r3
 80016de:	1bc7      	subs	r7, r0, r7
 80016e0:	425b      	negs	r3, r3
 80016e2:	2601      	movs	r6, #1
 80016e4:	1aff      	subs	r7, r7, r3
 80016e6:	e5da      	b.n	800129e <__aeabi_dadd+0xa2>
 80016e8:	0742      	lsls	r2, r0, #29
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	08c0      	lsrs	r0, r0, #3
 80016f0:	e6d2      	b.n	8001498 <__aeabi_dadd+0x29c>
 80016f2:	0742      	lsls	r2, r0, #29
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	08c0      	lsrs	r0, r0, #3
 80016fa:	e6ac      	b.n	8001456 <__aeabi_dadd+0x25a>
 80016fc:	4643      	mov	r3, r8
 80016fe:	4642      	mov	r2, r8
 8001700:	08c9      	lsrs	r1, r1, #3
 8001702:	075b      	lsls	r3, r3, #29
 8001704:	4655      	mov	r5, sl
 8001706:	430b      	orrs	r3, r1
 8001708:	08d0      	lsrs	r0, r2, #3
 800170a:	e6c5      	b.n	8001498 <__aeabi_dadd+0x29c>
 800170c:	4643      	mov	r3, r8
 800170e:	4642      	mov	r2, r8
 8001710:	075b      	lsls	r3, r3, #29
 8001712:	08c9      	lsrs	r1, r1, #3
 8001714:	430b      	orrs	r3, r1
 8001716:	08d0      	lsrs	r0, r2, #3
 8001718:	e6be      	b.n	8001498 <__aeabi_dadd+0x29c>
 800171a:	4303      	orrs	r3, r0
 800171c:	001c      	movs	r4, r3
 800171e:	1e63      	subs	r3, r4, #1
 8001720:	419c      	sbcs	r4, r3
 8001722:	e6fc      	b.n	800151e <__aeabi_dadd+0x322>
 8001724:	0002      	movs	r2, r0
 8001726:	3c20      	subs	r4, #32
 8001728:	40e2      	lsrs	r2, r4
 800172a:	0014      	movs	r4, r2
 800172c:	4662      	mov	r2, ip
 800172e:	2a20      	cmp	r2, #32
 8001730:	d003      	beq.n	800173a <__aeabi_dadd+0x53e>
 8001732:	2540      	movs	r5, #64	; 0x40
 8001734:	1aad      	subs	r5, r5, r2
 8001736:	40a8      	lsls	r0, r5
 8001738:	4303      	orrs	r3, r0
 800173a:	1e58      	subs	r0, r3, #1
 800173c:	4183      	sbcs	r3, r0
 800173e:	4323      	orrs	r3, r4
 8001740:	e775      	b.n	800162e <__aeabi_dadd+0x432>
 8001742:	2a00      	cmp	r2, #0
 8001744:	d0e2      	beq.n	800170c <__aeabi_dadd+0x510>
 8001746:	003a      	movs	r2, r7
 8001748:	430a      	orrs	r2, r1
 800174a:	d0cd      	beq.n	80016e8 <__aeabi_dadd+0x4ec>
 800174c:	0742      	lsls	r2, r0, #29
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	4313      	orrs	r3, r2
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	08c0      	lsrs	r0, r0, #3
 8001756:	0312      	lsls	r2, r2, #12
 8001758:	4210      	tst	r0, r2
 800175a:	d006      	beq.n	800176a <__aeabi_dadd+0x56e>
 800175c:	08fc      	lsrs	r4, r7, #3
 800175e:	4214      	tst	r4, r2
 8001760:	d103      	bne.n	800176a <__aeabi_dadd+0x56e>
 8001762:	0020      	movs	r0, r4
 8001764:	08cb      	lsrs	r3, r1, #3
 8001766:	077a      	lsls	r2, r7, #29
 8001768:	4313      	orrs	r3, r2
 800176a:	0f5a      	lsrs	r2, r3, #29
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	0752      	lsls	r2, r2, #29
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	4313      	orrs	r3, r2
 8001774:	e690      	b.n	8001498 <__aeabi_dadd+0x29c>
 8001776:	4643      	mov	r3, r8
 8001778:	430b      	orrs	r3, r1
 800177a:	d100      	bne.n	800177e <__aeabi_dadd+0x582>
 800177c:	e709      	b.n	8001592 <__aeabi_dadd+0x396>
 800177e:	4643      	mov	r3, r8
 8001780:	4642      	mov	r2, r8
 8001782:	08c9      	lsrs	r1, r1, #3
 8001784:	075b      	lsls	r3, r3, #29
 8001786:	4655      	mov	r5, sl
 8001788:	430b      	orrs	r3, r1
 800178a:	08d0      	lsrs	r0, r2, #3
 800178c:	e666      	b.n	800145c <__aeabi_dadd+0x260>
 800178e:	1acc      	subs	r4, r1, r3
 8001790:	42a1      	cmp	r1, r4
 8001792:	4189      	sbcs	r1, r1
 8001794:	1a3f      	subs	r7, r7, r0
 8001796:	4249      	negs	r1, r1
 8001798:	4655      	mov	r5, sl
 800179a:	2601      	movs	r6, #1
 800179c:	1a7f      	subs	r7, r7, r1
 800179e:	e57e      	b.n	800129e <__aeabi_dadd+0xa2>
 80017a0:	4642      	mov	r2, r8
 80017a2:	1a5c      	subs	r4, r3, r1
 80017a4:	1a87      	subs	r7, r0, r2
 80017a6:	42a3      	cmp	r3, r4
 80017a8:	4192      	sbcs	r2, r2
 80017aa:	4252      	negs	r2, r2
 80017ac:	1abf      	subs	r7, r7, r2
 80017ae:	023a      	lsls	r2, r7, #8
 80017b0:	d53d      	bpl.n	800182e <__aeabi_dadd+0x632>
 80017b2:	1acc      	subs	r4, r1, r3
 80017b4:	42a1      	cmp	r1, r4
 80017b6:	4189      	sbcs	r1, r1
 80017b8:	4643      	mov	r3, r8
 80017ba:	4249      	negs	r1, r1
 80017bc:	1a1f      	subs	r7, r3, r0
 80017be:	4655      	mov	r5, sl
 80017c0:	1a7f      	subs	r7, r7, r1
 80017c2:	e595      	b.n	80012f0 <__aeabi_dadd+0xf4>
 80017c4:	077b      	lsls	r3, r7, #29
 80017c6:	08c9      	lsrs	r1, r1, #3
 80017c8:	430b      	orrs	r3, r1
 80017ca:	08f8      	lsrs	r0, r7, #3
 80017cc:	e643      	b.n	8001456 <__aeabi_dadd+0x25a>
 80017ce:	4644      	mov	r4, r8
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	430c      	orrs	r4, r1
 80017d4:	d130      	bne.n	8001838 <__aeabi_dadd+0x63c>
 80017d6:	0742      	lsls	r2, r0, #29
 80017d8:	4313      	orrs	r3, r2
 80017da:	08c0      	lsrs	r0, r0, #3
 80017dc:	e65c      	b.n	8001498 <__aeabi_dadd+0x29c>
 80017de:	077b      	lsls	r3, r7, #29
 80017e0:	08c9      	lsrs	r1, r1, #3
 80017e2:	430b      	orrs	r3, r1
 80017e4:	08f8      	lsrs	r0, r7, #3
 80017e6:	e639      	b.n	800145c <__aeabi_dadd+0x260>
 80017e8:	185c      	adds	r4, r3, r1
 80017ea:	429c      	cmp	r4, r3
 80017ec:	419b      	sbcs	r3, r3
 80017ee:	4440      	add	r0, r8
 80017f0:	425b      	negs	r3, r3
 80017f2:	18c7      	adds	r7, r0, r3
 80017f4:	023b      	lsls	r3, r7, #8
 80017f6:	d400      	bmi.n	80017fa <__aeabi_dadd+0x5fe>
 80017f8:	e625      	b.n	8001446 <__aeabi_dadd+0x24a>
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <__aeabi_dadd+0x674>)
 80017fc:	2601      	movs	r6, #1
 80017fe:	401f      	ands	r7, r3
 8001800:	e621      	b.n	8001446 <__aeabi_dadd+0x24a>
 8001802:	0004      	movs	r4, r0
 8001804:	3a20      	subs	r2, #32
 8001806:	40d4      	lsrs	r4, r2
 8001808:	4662      	mov	r2, ip
 800180a:	2a20      	cmp	r2, #32
 800180c:	d004      	beq.n	8001818 <__aeabi_dadd+0x61c>
 800180e:	2240      	movs	r2, #64	; 0x40
 8001810:	4666      	mov	r6, ip
 8001812:	1b92      	subs	r2, r2, r6
 8001814:	4090      	lsls	r0, r2
 8001816:	4303      	orrs	r3, r0
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	4193      	sbcs	r3, r2
 800181c:	431c      	orrs	r4, r3
 800181e:	e67e      	b.n	800151e <__aeabi_dadd+0x322>
 8001820:	185c      	adds	r4, r3, r1
 8001822:	428c      	cmp	r4, r1
 8001824:	4189      	sbcs	r1, r1
 8001826:	4440      	add	r0, r8
 8001828:	4249      	negs	r1, r1
 800182a:	1847      	adds	r7, r0, r1
 800182c:	e6dd      	b.n	80015ea <__aeabi_dadd+0x3ee>
 800182e:	0023      	movs	r3, r4
 8001830:	433b      	orrs	r3, r7
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x63a>
 8001834:	e6ad      	b.n	8001592 <__aeabi_dadd+0x396>
 8001836:	e606      	b.n	8001446 <__aeabi_dadd+0x24a>
 8001838:	0744      	lsls	r4, r0, #29
 800183a:	4323      	orrs	r3, r4
 800183c:	2480      	movs	r4, #128	; 0x80
 800183e:	08c0      	lsrs	r0, r0, #3
 8001840:	0324      	lsls	r4, r4, #12
 8001842:	4220      	tst	r0, r4
 8001844:	d008      	beq.n	8001858 <__aeabi_dadd+0x65c>
 8001846:	4642      	mov	r2, r8
 8001848:	08d6      	lsrs	r6, r2, #3
 800184a:	4226      	tst	r6, r4
 800184c:	d104      	bne.n	8001858 <__aeabi_dadd+0x65c>
 800184e:	4655      	mov	r5, sl
 8001850:	0030      	movs	r0, r6
 8001852:	08cb      	lsrs	r3, r1, #3
 8001854:	0751      	lsls	r1, r2, #29
 8001856:	430b      	orrs	r3, r1
 8001858:	0f5a      	lsrs	r2, r3, #29
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	0752      	lsls	r2, r2, #29
 8001860:	4313      	orrs	r3, r2
 8001862:	e619      	b.n	8001498 <__aeabi_dadd+0x29c>
 8001864:	2300      	movs	r3, #0
 8001866:	4a01      	ldr	r2, [pc, #4]	; (800186c <__aeabi_dadd+0x670>)
 8001868:	001f      	movs	r7, r3
 800186a:	e55e      	b.n	800132a <__aeabi_dadd+0x12e>
 800186c:	000007ff 	.word	0x000007ff
 8001870:	ff7fffff 	.word	0xff7fffff

08001874 <__aeabi_ddiv>:
 8001874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001876:	4657      	mov	r7, sl
 8001878:	464e      	mov	r6, r9
 800187a:	4645      	mov	r5, r8
 800187c:	46de      	mov	lr, fp
 800187e:	b5e0      	push	{r5, r6, r7, lr}
 8001880:	4681      	mov	r9, r0
 8001882:	0005      	movs	r5, r0
 8001884:	030c      	lsls	r4, r1, #12
 8001886:	0048      	lsls	r0, r1, #1
 8001888:	4692      	mov	sl, r2
 800188a:	001f      	movs	r7, r3
 800188c:	b085      	sub	sp, #20
 800188e:	0b24      	lsrs	r4, r4, #12
 8001890:	0d40      	lsrs	r0, r0, #21
 8001892:	0fce      	lsrs	r6, r1, #31
 8001894:	2800      	cmp	r0, #0
 8001896:	d100      	bne.n	800189a <__aeabi_ddiv+0x26>
 8001898:	e156      	b.n	8001b48 <__aeabi_ddiv+0x2d4>
 800189a:	4bd4      	ldr	r3, [pc, #848]	; (8001bec <__aeabi_ddiv+0x378>)
 800189c:	4298      	cmp	r0, r3
 800189e:	d100      	bne.n	80018a2 <__aeabi_ddiv+0x2e>
 80018a0:	e172      	b.n	8001b88 <__aeabi_ddiv+0x314>
 80018a2:	0f6b      	lsrs	r3, r5, #29
 80018a4:	00e4      	lsls	r4, r4, #3
 80018a6:	431c      	orrs	r4, r3
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	4323      	orrs	r3, r4
 80018ae:	4698      	mov	r8, r3
 80018b0:	4bcf      	ldr	r3, [pc, #828]	; (8001bf0 <__aeabi_ddiv+0x37c>)
 80018b2:	00ed      	lsls	r5, r5, #3
 80018b4:	469b      	mov	fp, r3
 80018b6:	2300      	movs	r3, #0
 80018b8:	4699      	mov	r9, r3
 80018ba:	4483      	add	fp, r0
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	033c      	lsls	r4, r7, #12
 80018c0:	007b      	lsls	r3, r7, #1
 80018c2:	4650      	mov	r0, sl
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	0d5b      	lsrs	r3, r3, #21
 80018c8:	0fff      	lsrs	r7, r7, #31
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d100      	bne.n	80018d0 <__aeabi_ddiv+0x5c>
 80018ce:	e11f      	b.n	8001b10 <__aeabi_ddiv+0x29c>
 80018d0:	4ac6      	ldr	r2, [pc, #792]	; (8001bec <__aeabi_ddiv+0x378>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d100      	bne.n	80018d8 <__aeabi_ddiv+0x64>
 80018d6:	e162      	b.n	8001b9e <__aeabi_ddiv+0x32a>
 80018d8:	49c5      	ldr	r1, [pc, #788]	; (8001bf0 <__aeabi_ddiv+0x37c>)
 80018da:	0f42      	lsrs	r2, r0, #29
 80018dc:	468c      	mov	ip, r1
 80018de:	00e4      	lsls	r4, r4, #3
 80018e0:	4659      	mov	r1, fp
 80018e2:	4314      	orrs	r4, r2
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	4463      	add	r3, ip
 80018e8:	0412      	lsls	r2, r2, #16
 80018ea:	1acb      	subs	r3, r1, r3
 80018ec:	4314      	orrs	r4, r2
 80018ee:	469b      	mov	fp, r3
 80018f0:	00c2      	lsls	r2, r0, #3
 80018f2:	2000      	movs	r0, #0
 80018f4:	0033      	movs	r3, r6
 80018f6:	407b      	eors	r3, r7
 80018f8:	469a      	mov	sl, r3
 80018fa:	464b      	mov	r3, r9
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d827      	bhi.n	8001950 <__aeabi_ddiv+0xdc>
 8001900:	49bc      	ldr	r1, [pc, #752]	; (8001bf4 <__aeabi_ddiv+0x380>)
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	58cb      	ldr	r3, [r1, r3]
 8001906:	469f      	mov	pc, r3
 8001908:	46b2      	mov	sl, r6
 800190a:	9b00      	ldr	r3, [sp, #0]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d016      	beq.n	800193e <__aeabi_ddiv+0xca>
 8001910:	2b03      	cmp	r3, #3
 8001912:	d100      	bne.n	8001916 <__aeabi_ddiv+0xa2>
 8001914:	e28e      	b.n	8001e34 <__aeabi_ddiv+0x5c0>
 8001916:	2b01      	cmp	r3, #1
 8001918:	d000      	beq.n	800191c <__aeabi_ddiv+0xa8>
 800191a:	e0d9      	b.n	8001ad0 <__aeabi_ddiv+0x25c>
 800191c:	2300      	movs	r3, #0
 800191e:	2400      	movs	r4, #0
 8001920:	2500      	movs	r5, #0
 8001922:	4652      	mov	r2, sl
 8001924:	051b      	lsls	r3, r3, #20
 8001926:	4323      	orrs	r3, r4
 8001928:	07d2      	lsls	r2, r2, #31
 800192a:	4313      	orrs	r3, r2
 800192c:	0028      	movs	r0, r5
 800192e:	0019      	movs	r1, r3
 8001930:	b005      	add	sp, #20
 8001932:	bcf0      	pop	{r4, r5, r6, r7}
 8001934:	46bb      	mov	fp, r7
 8001936:	46b2      	mov	sl, r6
 8001938:	46a9      	mov	r9, r5
 800193a:	46a0      	mov	r8, r4
 800193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193e:	2400      	movs	r4, #0
 8001940:	2500      	movs	r5, #0
 8001942:	4baa      	ldr	r3, [pc, #680]	; (8001bec <__aeabi_ddiv+0x378>)
 8001944:	e7ed      	b.n	8001922 <__aeabi_ddiv+0xae>
 8001946:	46ba      	mov	sl, r7
 8001948:	46a0      	mov	r8, r4
 800194a:	0015      	movs	r5, r2
 800194c:	9000      	str	r0, [sp, #0]
 800194e:	e7dc      	b.n	800190a <__aeabi_ddiv+0x96>
 8001950:	4544      	cmp	r4, r8
 8001952:	d200      	bcs.n	8001956 <__aeabi_ddiv+0xe2>
 8001954:	e1c7      	b.n	8001ce6 <__aeabi_ddiv+0x472>
 8001956:	d100      	bne.n	800195a <__aeabi_ddiv+0xe6>
 8001958:	e1c2      	b.n	8001ce0 <__aeabi_ddiv+0x46c>
 800195a:	2301      	movs	r3, #1
 800195c:	425b      	negs	r3, r3
 800195e:	469c      	mov	ip, r3
 8001960:	002e      	movs	r6, r5
 8001962:	4640      	mov	r0, r8
 8001964:	2500      	movs	r5, #0
 8001966:	44e3      	add	fp, ip
 8001968:	0223      	lsls	r3, r4, #8
 800196a:	0e14      	lsrs	r4, r2, #24
 800196c:	431c      	orrs	r4, r3
 800196e:	0c1b      	lsrs	r3, r3, #16
 8001970:	4699      	mov	r9, r3
 8001972:	0423      	lsls	r3, r4, #16
 8001974:	0c1f      	lsrs	r7, r3, #16
 8001976:	0212      	lsls	r2, r2, #8
 8001978:	4649      	mov	r1, r9
 800197a:	9200      	str	r2, [sp, #0]
 800197c:	9701      	str	r7, [sp, #4]
 800197e:	f7fe fc63 	bl	8000248 <__aeabi_uidivmod>
 8001982:	0002      	movs	r2, r0
 8001984:	437a      	muls	r2, r7
 8001986:	040b      	lsls	r3, r1, #16
 8001988:	0c31      	lsrs	r1, r6, #16
 800198a:	4680      	mov	r8, r0
 800198c:	4319      	orrs	r1, r3
 800198e:	428a      	cmp	r2, r1
 8001990:	d907      	bls.n	80019a2 <__aeabi_ddiv+0x12e>
 8001992:	2301      	movs	r3, #1
 8001994:	425b      	negs	r3, r3
 8001996:	469c      	mov	ip, r3
 8001998:	1909      	adds	r1, r1, r4
 800199a:	44e0      	add	r8, ip
 800199c:	428c      	cmp	r4, r1
 800199e:	d800      	bhi.n	80019a2 <__aeabi_ddiv+0x12e>
 80019a0:	e207      	b.n	8001db2 <__aeabi_ddiv+0x53e>
 80019a2:	1a88      	subs	r0, r1, r2
 80019a4:	4649      	mov	r1, r9
 80019a6:	f7fe fc4f 	bl	8000248 <__aeabi_uidivmod>
 80019aa:	0409      	lsls	r1, r1, #16
 80019ac:	468c      	mov	ip, r1
 80019ae:	0431      	lsls	r1, r6, #16
 80019b0:	4666      	mov	r6, ip
 80019b2:	9a01      	ldr	r2, [sp, #4]
 80019b4:	0c09      	lsrs	r1, r1, #16
 80019b6:	4342      	muls	r2, r0
 80019b8:	0003      	movs	r3, r0
 80019ba:	4331      	orrs	r1, r6
 80019bc:	428a      	cmp	r2, r1
 80019be:	d904      	bls.n	80019ca <__aeabi_ddiv+0x156>
 80019c0:	1909      	adds	r1, r1, r4
 80019c2:	3b01      	subs	r3, #1
 80019c4:	428c      	cmp	r4, r1
 80019c6:	d800      	bhi.n	80019ca <__aeabi_ddiv+0x156>
 80019c8:	e1ed      	b.n	8001da6 <__aeabi_ddiv+0x532>
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	4642      	mov	r2, r8
 80019ce:	0412      	lsls	r2, r2, #16
 80019d0:	431a      	orrs	r2, r3
 80019d2:	4690      	mov	r8, r2
 80019d4:	4641      	mov	r1, r8
 80019d6:	9b00      	ldr	r3, [sp, #0]
 80019d8:	040e      	lsls	r6, r1, #16
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	001f      	movs	r7, r3
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	9b00      	ldr	r3, [sp, #0]
 80019e2:	0c36      	lsrs	r6, r6, #16
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	0c19      	lsrs	r1, r3, #16
 80019e8:	000b      	movs	r3, r1
 80019ea:	4373      	muls	r3, r6
 80019ec:	0c12      	lsrs	r2, r2, #16
 80019ee:	437e      	muls	r6, r7
 80019f0:	9103      	str	r1, [sp, #12]
 80019f2:	4351      	muls	r1, r2
 80019f4:	437a      	muls	r2, r7
 80019f6:	0c1f      	lsrs	r7, r3, #16
 80019f8:	46bc      	mov	ip, r7
 80019fa:	1876      	adds	r6, r6, r1
 80019fc:	4466      	add	r6, ip
 80019fe:	42b1      	cmp	r1, r6
 8001a00:	d903      	bls.n	8001a0a <__aeabi_ddiv+0x196>
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	0249      	lsls	r1, r1, #9
 8001a06:	468c      	mov	ip, r1
 8001a08:	4462      	add	r2, ip
 8001a0a:	0c31      	lsrs	r1, r6, #16
 8001a0c:	188a      	adds	r2, r1, r2
 8001a0e:	0431      	lsls	r1, r6, #16
 8001a10:	041e      	lsls	r6, r3, #16
 8001a12:	0c36      	lsrs	r6, r6, #16
 8001a14:	198e      	adds	r6, r1, r6
 8001a16:	4290      	cmp	r0, r2
 8001a18:	d302      	bcc.n	8001a20 <__aeabi_ddiv+0x1ac>
 8001a1a:	d112      	bne.n	8001a42 <__aeabi_ddiv+0x1ce>
 8001a1c:	42b5      	cmp	r5, r6
 8001a1e:	d210      	bcs.n	8001a42 <__aeabi_ddiv+0x1ce>
 8001a20:	4643      	mov	r3, r8
 8001a22:	1e59      	subs	r1, r3, #1
 8001a24:	9b00      	ldr	r3, [sp, #0]
 8001a26:	469c      	mov	ip, r3
 8001a28:	4465      	add	r5, ip
 8001a2a:	001f      	movs	r7, r3
 8001a2c:	429d      	cmp	r5, r3
 8001a2e:	419b      	sbcs	r3, r3
 8001a30:	425b      	negs	r3, r3
 8001a32:	191b      	adds	r3, r3, r4
 8001a34:	18c0      	adds	r0, r0, r3
 8001a36:	4284      	cmp	r4, r0
 8001a38:	d200      	bcs.n	8001a3c <__aeabi_ddiv+0x1c8>
 8001a3a:	e1a0      	b.n	8001d7e <__aeabi_ddiv+0x50a>
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_ddiv+0x1cc>
 8001a3e:	e19b      	b.n	8001d78 <__aeabi_ddiv+0x504>
 8001a40:	4688      	mov	r8, r1
 8001a42:	1bae      	subs	r6, r5, r6
 8001a44:	42b5      	cmp	r5, r6
 8001a46:	41ad      	sbcs	r5, r5
 8001a48:	1a80      	subs	r0, r0, r2
 8001a4a:	426d      	negs	r5, r5
 8001a4c:	1b40      	subs	r0, r0, r5
 8001a4e:	4284      	cmp	r4, r0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_ddiv+0x1e0>
 8001a52:	e1d5      	b.n	8001e00 <__aeabi_ddiv+0x58c>
 8001a54:	4649      	mov	r1, r9
 8001a56:	f7fe fbf7 	bl	8000248 <__aeabi_uidivmod>
 8001a5a:	9a01      	ldr	r2, [sp, #4]
 8001a5c:	040b      	lsls	r3, r1, #16
 8001a5e:	4342      	muls	r2, r0
 8001a60:	0c31      	lsrs	r1, r6, #16
 8001a62:	0005      	movs	r5, r0
 8001a64:	4319      	orrs	r1, r3
 8001a66:	428a      	cmp	r2, r1
 8001a68:	d900      	bls.n	8001a6c <__aeabi_ddiv+0x1f8>
 8001a6a:	e16c      	b.n	8001d46 <__aeabi_ddiv+0x4d2>
 8001a6c:	1a88      	subs	r0, r1, r2
 8001a6e:	4649      	mov	r1, r9
 8001a70:	f7fe fbea 	bl	8000248 <__aeabi_uidivmod>
 8001a74:	9a01      	ldr	r2, [sp, #4]
 8001a76:	0436      	lsls	r6, r6, #16
 8001a78:	4342      	muls	r2, r0
 8001a7a:	0409      	lsls	r1, r1, #16
 8001a7c:	0c36      	lsrs	r6, r6, #16
 8001a7e:	0003      	movs	r3, r0
 8001a80:	430e      	orrs	r6, r1
 8001a82:	42b2      	cmp	r2, r6
 8001a84:	d900      	bls.n	8001a88 <__aeabi_ddiv+0x214>
 8001a86:	e153      	b.n	8001d30 <__aeabi_ddiv+0x4bc>
 8001a88:	9803      	ldr	r0, [sp, #12]
 8001a8a:	1ab6      	subs	r6, r6, r2
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	042d      	lsls	r5, r5, #16
 8001a90:	431d      	orrs	r5, r3
 8001a92:	9f02      	ldr	r7, [sp, #8]
 8001a94:	042b      	lsls	r3, r5, #16
 8001a96:	0c1b      	lsrs	r3, r3, #16
 8001a98:	435a      	muls	r2, r3
 8001a9a:	437b      	muls	r3, r7
 8001a9c:	469c      	mov	ip, r3
 8001a9e:	0c29      	lsrs	r1, r5, #16
 8001aa0:	4348      	muls	r0, r1
 8001aa2:	0c13      	lsrs	r3, r2, #16
 8001aa4:	4484      	add	ip, r0
 8001aa6:	4463      	add	r3, ip
 8001aa8:	4379      	muls	r1, r7
 8001aaa:	4298      	cmp	r0, r3
 8001aac:	d903      	bls.n	8001ab6 <__aeabi_ddiv+0x242>
 8001aae:	2080      	movs	r0, #128	; 0x80
 8001ab0:	0240      	lsls	r0, r0, #9
 8001ab2:	4684      	mov	ip, r0
 8001ab4:	4461      	add	r1, ip
 8001ab6:	0c18      	lsrs	r0, r3, #16
 8001ab8:	0412      	lsls	r2, r2, #16
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	0c12      	lsrs	r2, r2, #16
 8001abe:	1841      	adds	r1, r0, r1
 8001ac0:	189b      	adds	r3, r3, r2
 8001ac2:	428e      	cmp	r6, r1
 8001ac4:	d200      	bcs.n	8001ac8 <__aeabi_ddiv+0x254>
 8001ac6:	e0ff      	b.n	8001cc8 <__aeabi_ddiv+0x454>
 8001ac8:	d100      	bne.n	8001acc <__aeabi_ddiv+0x258>
 8001aca:	e0fa      	b.n	8001cc2 <__aeabi_ddiv+0x44e>
 8001acc:	2301      	movs	r3, #1
 8001ace:	431d      	orrs	r5, r3
 8001ad0:	4a49      	ldr	r2, [pc, #292]	; (8001bf8 <__aeabi_ddiv+0x384>)
 8001ad2:	445a      	add	r2, fp
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	dc00      	bgt.n	8001ada <__aeabi_ddiv+0x266>
 8001ad8:	e0aa      	b.n	8001c30 <__aeabi_ddiv+0x3bc>
 8001ada:	076b      	lsls	r3, r5, #29
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_ddiv+0x26c>
 8001ade:	e13d      	b.n	8001d5c <__aeabi_ddiv+0x4e8>
 8001ae0:	08ed      	lsrs	r5, r5, #3
 8001ae2:	4643      	mov	r3, r8
 8001ae4:	01db      	lsls	r3, r3, #7
 8001ae6:	d506      	bpl.n	8001af6 <__aeabi_ddiv+0x282>
 8001ae8:	4642      	mov	r2, r8
 8001aea:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <__aeabi_ddiv+0x388>)
 8001aec:	401a      	ands	r2, r3
 8001aee:	4690      	mov	r8, r2
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	00d2      	lsls	r2, r2, #3
 8001af4:	445a      	add	r2, fp
 8001af6:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <__aeabi_ddiv+0x38c>)
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dd00      	ble.n	8001afe <__aeabi_ddiv+0x28a>
 8001afc:	e71f      	b.n	800193e <__aeabi_ddiv+0xca>
 8001afe:	4643      	mov	r3, r8
 8001b00:	075b      	lsls	r3, r3, #29
 8001b02:	431d      	orrs	r5, r3
 8001b04:	4643      	mov	r3, r8
 8001b06:	0552      	lsls	r2, r2, #21
 8001b08:	025c      	lsls	r4, r3, #9
 8001b0a:	0b24      	lsrs	r4, r4, #12
 8001b0c:	0d53      	lsrs	r3, r2, #21
 8001b0e:	e708      	b.n	8001922 <__aeabi_ddiv+0xae>
 8001b10:	4652      	mov	r2, sl
 8001b12:	4322      	orrs	r2, r4
 8001b14:	d100      	bne.n	8001b18 <__aeabi_ddiv+0x2a4>
 8001b16:	e07b      	b.n	8001c10 <__aeabi_ddiv+0x39c>
 8001b18:	2c00      	cmp	r4, #0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_ddiv+0x2aa>
 8001b1c:	e0fa      	b.n	8001d14 <__aeabi_ddiv+0x4a0>
 8001b1e:	0020      	movs	r0, r4
 8001b20:	f001 f9da 	bl	8002ed8 <__clzsi2>
 8001b24:	0002      	movs	r2, r0
 8001b26:	3a0b      	subs	r2, #11
 8001b28:	231d      	movs	r3, #29
 8001b2a:	0001      	movs	r1, r0
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	4652      	mov	r2, sl
 8001b30:	3908      	subs	r1, #8
 8001b32:	40da      	lsrs	r2, r3
 8001b34:	408c      	lsls	r4, r1
 8001b36:	4314      	orrs	r4, r2
 8001b38:	4652      	mov	r2, sl
 8001b3a:	408a      	lsls	r2, r1
 8001b3c:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <__aeabi_ddiv+0x390>)
 8001b3e:	4458      	add	r0, fp
 8001b40:	469b      	mov	fp, r3
 8001b42:	4483      	add	fp, r0
 8001b44:	2000      	movs	r0, #0
 8001b46:	e6d5      	b.n	80018f4 <__aeabi_ddiv+0x80>
 8001b48:	464b      	mov	r3, r9
 8001b4a:	4323      	orrs	r3, r4
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	d044      	beq.n	8001bda <__aeabi_ddiv+0x366>
 8001b50:	2c00      	cmp	r4, #0
 8001b52:	d100      	bne.n	8001b56 <__aeabi_ddiv+0x2e2>
 8001b54:	e0ce      	b.n	8001cf4 <__aeabi_ddiv+0x480>
 8001b56:	0020      	movs	r0, r4
 8001b58:	f001 f9be 	bl	8002ed8 <__clzsi2>
 8001b5c:	0001      	movs	r1, r0
 8001b5e:	0002      	movs	r2, r0
 8001b60:	390b      	subs	r1, #11
 8001b62:	231d      	movs	r3, #29
 8001b64:	1a5b      	subs	r3, r3, r1
 8001b66:	4649      	mov	r1, r9
 8001b68:	0010      	movs	r0, r2
 8001b6a:	40d9      	lsrs	r1, r3
 8001b6c:	3808      	subs	r0, #8
 8001b6e:	4084      	lsls	r4, r0
 8001b70:	000b      	movs	r3, r1
 8001b72:	464d      	mov	r5, r9
 8001b74:	4323      	orrs	r3, r4
 8001b76:	4698      	mov	r8, r3
 8001b78:	4085      	lsls	r5, r0
 8001b7a:	4823      	ldr	r0, [pc, #140]	; (8001c08 <__aeabi_ddiv+0x394>)
 8001b7c:	1a83      	subs	r3, r0, r2
 8001b7e:	469b      	mov	fp, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	4699      	mov	r9, r3
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	e69a      	b.n	80018be <__aeabi_ddiv+0x4a>
 8001b88:	464b      	mov	r3, r9
 8001b8a:	4323      	orrs	r3, r4
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	d11d      	bne.n	8001bcc <__aeabi_ddiv+0x358>
 8001b90:	2308      	movs	r3, #8
 8001b92:	4699      	mov	r9, r3
 8001b94:	3b06      	subs	r3, #6
 8001b96:	2500      	movs	r5, #0
 8001b98:	4683      	mov	fp, r0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	e68f      	b.n	80018be <__aeabi_ddiv+0x4a>
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	4322      	orrs	r2, r4
 8001ba2:	d109      	bne.n	8001bb8 <__aeabi_ddiv+0x344>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	4649      	mov	r1, r9
 8001ba8:	4319      	orrs	r1, r3
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <__aeabi_ddiv+0x398>)
 8001bac:	4689      	mov	r9, r1
 8001bae:	469c      	mov	ip, r3
 8001bb0:	2400      	movs	r4, #0
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	44e3      	add	fp, ip
 8001bb6:	e69d      	b.n	80018f4 <__aeabi_ddiv+0x80>
 8001bb8:	2303      	movs	r3, #3
 8001bba:	464a      	mov	r2, r9
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <__aeabi_ddiv+0x398>)
 8001bc0:	4691      	mov	r9, r2
 8001bc2:	469c      	mov	ip, r3
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	44e3      	add	fp, ip
 8001bca:	e693      	b.n	80018f4 <__aeabi_ddiv+0x80>
 8001bcc:	230c      	movs	r3, #12
 8001bce:	4699      	mov	r9, r3
 8001bd0:	3b09      	subs	r3, #9
 8001bd2:	46a0      	mov	r8, r4
 8001bd4:	4683      	mov	fp, r0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	e671      	b.n	80018be <__aeabi_ddiv+0x4a>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	4699      	mov	r9, r3
 8001bde:	2300      	movs	r3, #0
 8001be0:	469b      	mov	fp, r3
 8001be2:	3301      	adds	r3, #1
 8001be4:	2500      	movs	r5, #0
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	e669      	b.n	80018be <__aeabi_ddiv+0x4a>
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	000007ff 	.word	0x000007ff
 8001bf0:	fffffc01 	.word	0xfffffc01
 8001bf4:	0800b7f0 	.word	0x0800b7f0
 8001bf8:	000003ff 	.word	0x000003ff
 8001bfc:	feffffff 	.word	0xfeffffff
 8001c00:	000007fe 	.word	0x000007fe
 8001c04:	000003f3 	.word	0x000003f3
 8001c08:	fffffc0d 	.word	0xfffffc0d
 8001c0c:	fffff801 	.word	0xfffff801
 8001c10:	4649      	mov	r1, r9
 8001c12:	2301      	movs	r3, #1
 8001c14:	4319      	orrs	r1, r3
 8001c16:	4689      	mov	r9, r1
 8001c18:	2400      	movs	r4, #0
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	e66a      	b.n	80018f4 <__aeabi_ddiv+0x80>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2480      	movs	r4, #128	; 0x80
 8001c22:	469a      	mov	sl, r3
 8001c24:	2500      	movs	r5, #0
 8001c26:	4b8a      	ldr	r3, [pc, #552]	; (8001e50 <__aeabi_ddiv+0x5dc>)
 8001c28:	0324      	lsls	r4, r4, #12
 8001c2a:	e67a      	b.n	8001922 <__aeabi_ddiv+0xae>
 8001c2c:	2501      	movs	r5, #1
 8001c2e:	426d      	negs	r5, r5
 8001c30:	2301      	movs	r3, #1
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	2b38      	cmp	r3, #56	; 0x38
 8001c36:	dd00      	ble.n	8001c3a <__aeabi_ddiv+0x3c6>
 8001c38:	e670      	b.n	800191c <__aeabi_ddiv+0xa8>
 8001c3a:	2b1f      	cmp	r3, #31
 8001c3c:	dc00      	bgt.n	8001c40 <__aeabi_ddiv+0x3cc>
 8001c3e:	e0bf      	b.n	8001dc0 <__aeabi_ddiv+0x54c>
 8001c40:	211f      	movs	r1, #31
 8001c42:	4249      	negs	r1, r1
 8001c44:	1a8a      	subs	r2, r1, r2
 8001c46:	4641      	mov	r1, r8
 8001c48:	40d1      	lsrs	r1, r2
 8001c4a:	000a      	movs	r2, r1
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d004      	beq.n	8001c5a <__aeabi_ddiv+0x3e6>
 8001c50:	4641      	mov	r1, r8
 8001c52:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <__aeabi_ddiv+0x5e0>)
 8001c54:	445b      	add	r3, fp
 8001c56:	4099      	lsls	r1, r3
 8001c58:	430d      	orrs	r5, r1
 8001c5a:	1e6b      	subs	r3, r5, #1
 8001c5c:	419d      	sbcs	r5, r3
 8001c5e:	2307      	movs	r3, #7
 8001c60:	432a      	orrs	r2, r5
 8001c62:	001d      	movs	r5, r3
 8001c64:	2400      	movs	r4, #0
 8001c66:	4015      	ands	r5, r2
 8001c68:	4213      	tst	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_ddiv+0x3fa>
 8001c6c:	e0d4      	b.n	8001e18 <__aeabi_ddiv+0x5a4>
 8001c6e:	210f      	movs	r1, #15
 8001c70:	2300      	movs	r3, #0
 8001c72:	4011      	ands	r1, r2
 8001c74:	2904      	cmp	r1, #4
 8001c76:	d100      	bne.n	8001c7a <__aeabi_ddiv+0x406>
 8001c78:	e0cb      	b.n	8001e12 <__aeabi_ddiv+0x59e>
 8001c7a:	1d11      	adds	r1, r2, #4
 8001c7c:	4291      	cmp	r1, r2
 8001c7e:	4192      	sbcs	r2, r2
 8001c80:	4252      	negs	r2, r2
 8001c82:	189b      	adds	r3, r3, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	0219      	lsls	r1, r3, #8
 8001c88:	d400      	bmi.n	8001c8c <__aeabi_ddiv+0x418>
 8001c8a:	e0c2      	b.n	8001e12 <__aeabi_ddiv+0x59e>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	2400      	movs	r4, #0
 8001c90:	2500      	movs	r5, #0
 8001c92:	e646      	b.n	8001922 <__aeabi_ddiv+0xae>
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	4641      	mov	r1, r8
 8001c98:	031b      	lsls	r3, r3, #12
 8001c9a:	4219      	tst	r1, r3
 8001c9c:	d008      	beq.n	8001cb0 <__aeabi_ddiv+0x43c>
 8001c9e:	421c      	tst	r4, r3
 8001ca0:	d106      	bne.n	8001cb0 <__aeabi_ddiv+0x43c>
 8001ca2:	431c      	orrs	r4, r3
 8001ca4:	0324      	lsls	r4, r4, #12
 8001ca6:	46ba      	mov	sl, r7
 8001ca8:	0015      	movs	r5, r2
 8001caa:	4b69      	ldr	r3, [pc, #420]	; (8001e50 <__aeabi_ddiv+0x5dc>)
 8001cac:	0b24      	lsrs	r4, r4, #12
 8001cae:	e638      	b.n	8001922 <__aeabi_ddiv+0xae>
 8001cb0:	2480      	movs	r4, #128	; 0x80
 8001cb2:	4643      	mov	r3, r8
 8001cb4:	0324      	lsls	r4, r4, #12
 8001cb6:	431c      	orrs	r4, r3
 8001cb8:	0324      	lsls	r4, r4, #12
 8001cba:	46b2      	mov	sl, r6
 8001cbc:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <__aeabi_ddiv+0x5dc>)
 8001cbe:	0b24      	lsrs	r4, r4, #12
 8001cc0:	e62f      	b.n	8001922 <__aeabi_ddiv+0xae>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_ddiv+0x454>
 8001cc6:	e703      	b.n	8001ad0 <__aeabi_ddiv+0x25c>
 8001cc8:	19a6      	adds	r6, r4, r6
 8001cca:	1e68      	subs	r0, r5, #1
 8001ccc:	42a6      	cmp	r6, r4
 8001cce:	d200      	bcs.n	8001cd2 <__aeabi_ddiv+0x45e>
 8001cd0:	e08d      	b.n	8001dee <__aeabi_ddiv+0x57a>
 8001cd2:	428e      	cmp	r6, r1
 8001cd4:	d200      	bcs.n	8001cd8 <__aeabi_ddiv+0x464>
 8001cd6:	e0a3      	b.n	8001e20 <__aeabi_ddiv+0x5ac>
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_ddiv+0x468>
 8001cda:	e0b3      	b.n	8001e44 <__aeabi_ddiv+0x5d0>
 8001cdc:	0005      	movs	r5, r0
 8001cde:	e6f5      	b.n	8001acc <__aeabi_ddiv+0x258>
 8001ce0:	42aa      	cmp	r2, r5
 8001ce2:	d900      	bls.n	8001ce6 <__aeabi_ddiv+0x472>
 8001ce4:	e639      	b.n	800195a <__aeabi_ddiv+0xe6>
 8001ce6:	4643      	mov	r3, r8
 8001ce8:	07de      	lsls	r6, r3, #31
 8001cea:	0858      	lsrs	r0, r3, #1
 8001cec:	086b      	lsrs	r3, r5, #1
 8001cee:	431e      	orrs	r6, r3
 8001cf0:	07ed      	lsls	r5, r5, #31
 8001cf2:	e639      	b.n	8001968 <__aeabi_ddiv+0xf4>
 8001cf4:	4648      	mov	r0, r9
 8001cf6:	f001 f8ef 	bl	8002ed8 <__clzsi2>
 8001cfa:	0001      	movs	r1, r0
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	3115      	adds	r1, #21
 8001d00:	3220      	adds	r2, #32
 8001d02:	291c      	cmp	r1, #28
 8001d04:	dc00      	bgt.n	8001d08 <__aeabi_ddiv+0x494>
 8001d06:	e72c      	b.n	8001b62 <__aeabi_ddiv+0x2ee>
 8001d08:	464b      	mov	r3, r9
 8001d0a:	3808      	subs	r0, #8
 8001d0c:	4083      	lsls	r3, r0
 8001d0e:	2500      	movs	r5, #0
 8001d10:	4698      	mov	r8, r3
 8001d12:	e732      	b.n	8001b7a <__aeabi_ddiv+0x306>
 8001d14:	f001 f8e0 	bl	8002ed8 <__clzsi2>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	3215      	adds	r2, #21
 8001d1e:	3020      	adds	r0, #32
 8001d20:	2a1c      	cmp	r2, #28
 8001d22:	dc00      	bgt.n	8001d26 <__aeabi_ddiv+0x4b2>
 8001d24:	e700      	b.n	8001b28 <__aeabi_ddiv+0x2b4>
 8001d26:	4654      	mov	r4, sl
 8001d28:	3b08      	subs	r3, #8
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	409c      	lsls	r4, r3
 8001d2e:	e705      	b.n	8001b3c <__aeabi_ddiv+0x2c8>
 8001d30:	1936      	adds	r6, r6, r4
 8001d32:	3b01      	subs	r3, #1
 8001d34:	42b4      	cmp	r4, r6
 8001d36:	d900      	bls.n	8001d3a <__aeabi_ddiv+0x4c6>
 8001d38:	e6a6      	b.n	8001a88 <__aeabi_ddiv+0x214>
 8001d3a:	42b2      	cmp	r2, r6
 8001d3c:	d800      	bhi.n	8001d40 <__aeabi_ddiv+0x4cc>
 8001d3e:	e6a3      	b.n	8001a88 <__aeabi_ddiv+0x214>
 8001d40:	1e83      	subs	r3, r0, #2
 8001d42:	1936      	adds	r6, r6, r4
 8001d44:	e6a0      	b.n	8001a88 <__aeabi_ddiv+0x214>
 8001d46:	1909      	adds	r1, r1, r4
 8001d48:	3d01      	subs	r5, #1
 8001d4a:	428c      	cmp	r4, r1
 8001d4c:	d900      	bls.n	8001d50 <__aeabi_ddiv+0x4dc>
 8001d4e:	e68d      	b.n	8001a6c <__aeabi_ddiv+0x1f8>
 8001d50:	428a      	cmp	r2, r1
 8001d52:	d800      	bhi.n	8001d56 <__aeabi_ddiv+0x4e2>
 8001d54:	e68a      	b.n	8001a6c <__aeabi_ddiv+0x1f8>
 8001d56:	1e85      	subs	r5, r0, #2
 8001d58:	1909      	adds	r1, r1, r4
 8001d5a:	e687      	b.n	8001a6c <__aeabi_ddiv+0x1f8>
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	402b      	ands	r3, r5
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_ddiv+0x4f2>
 8001d64:	e6bc      	b.n	8001ae0 <__aeabi_ddiv+0x26c>
 8001d66:	2305      	movs	r3, #5
 8001d68:	425b      	negs	r3, r3
 8001d6a:	42ab      	cmp	r3, r5
 8001d6c:	419b      	sbcs	r3, r3
 8001d6e:	3504      	adds	r5, #4
 8001d70:	425b      	negs	r3, r3
 8001d72:	08ed      	lsrs	r5, r5, #3
 8001d74:	4498      	add	r8, r3
 8001d76:	e6b4      	b.n	8001ae2 <__aeabi_ddiv+0x26e>
 8001d78:	42af      	cmp	r7, r5
 8001d7a:	d900      	bls.n	8001d7e <__aeabi_ddiv+0x50a>
 8001d7c:	e660      	b.n	8001a40 <__aeabi_ddiv+0x1cc>
 8001d7e:	4282      	cmp	r2, r0
 8001d80:	d804      	bhi.n	8001d8c <__aeabi_ddiv+0x518>
 8001d82:	d000      	beq.n	8001d86 <__aeabi_ddiv+0x512>
 8001d84:	e65c      	b.n	8001a40 <__aeabi_ddiv+0x1cc>
 8001d86:	42ae      	cmp	r6, r5
 8001d88:	d800      	bhi.n	8001d8c <__aeabi_ddiv+0x518>
 8001d8a:	e659      	b.n	8001a40 <__aeabi_ddiv+0x1cc>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	425b      	negs	r3, r3
 8001d90:	469c      	mov	ip, r3
 8001d92:	9b00      	ldr	r3, [sp, #0]
 8001d94:	44e0      	add	r8, ip
 8001d96:	469c      	mov	ip, r3
 8001d98:	4465      	add	r5, ip
 8001d9a:	429d      	cmp	r5, r3
 8001d9c:	419b      	sbcs	r3, r3
 8001d9e:	425b      	negs	r3, r3
 8001da0:	191b      	adds	r3, r3, r4
 8001da2:	18c0      	adds	r0, r0, r3
 8001da4:	e64d      	b.n	8001a42 <__aeabi_ddiv+0x1ce>
 8001da6:	428a      	cmp	r2, r1
 8001da8:	d800      	bhi.n	8001dac <__aeabi_ddiv+0x538>
 8001daa:	e60e      	b.n	80019ca <__aeabi_ddiv+0x156>
 8001dac:	1e83      	subs	r3, r0, #2
 8001dae:	1909      	adds	r1, r1, r4
 8001db0:	e60b      	b.n	80019ca <__aeabi_ddiv+0x156>
 8001db2:	428a      	cmp	r2, r1
 8001db4:	d800      	bhi.n	8001db8 <__aeabi_ddiv+0x544>
 8001db6:	e5f4      	b.n	80019a2 <__aeabi_ddiv+0x12e>
 8001db8:	1e83      	subs	r3, r0, #2
 8001dba:	4698      	mov	r8, r3
 8001dbc:	1909      	adds	r1, r1, r4
 8001dbe:	e5f0      	b.n	80019a2 <__aeabi_ddiv+0x12e>
 8001dc0:	4925      	ldr	r1, [pc, #148]	; (8001e58 <__aeabi_ddiv+0x5e4>)
 8001dc2:	0028      	movs	r0, r5
 8001dc4:	4459      	add	r1, fp
 8001dc6:	408d      	lsls	r5, r1
 8001dc8:	4642      	mov	r2, r8
 8001dca:	408a      	lsls	r2, r1
 8001dcc:	1e69      	subs	r1, r5, #1
 8001dce:	418d      	sbcs	r5, r1
 8001dd0:	4641      	mov	r1, r8
 8001dd2:	40d8      	lsrs	r0, r3
 8001dd4:	40d9      	lsrs	r1, r3
 8001dd6:	4302      	orrs	r2, r0
 8001dd8:	432a      	orrs	r2, r5
 8001dda:	000b      	movs	r3, r1
 8001ddc:	0751      	lsls	r1, r2, #29
 8001dde:	d100      	bne.n	8001de2 <__aeabi_ddiv+0x56e>
 8001de0:	e751      	b.n	8001c86 <__aeabi_ddiv+0x412>
 8001de2:	210f      	movs	r1, #15
 8001de4:	4011      	ands	r1, r2
 8001de6:	2904      	cmp	r1, #4
 8001de8:	d000      	beq.n	8001dec <__aeabi_ddiv+0x578>
 8001dea:	e746      	b.n	8001c7a <__aeabi_ddiv+0x406>
 8001dec:	e74b      	b.n	8001c86 <__aeabi_ddiv+0x412>
 8001dee:	0005      	movs	r5, r0
 8001df0:	428e      	cmp	r6, r1
 8001df2:	d000      	beq.n	8001df6 <__aeabi_ddiv+0x582>
 8001df4:	e66a      	b.n	8001acc <__aeabi_ddiv+0x258>
 8001df6:	9a00      	ldr	r2, [sp, #0]
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d000      	beq.n	8001dfe <__aeabi_ddiv+0x58a>
 8001dfc:	e666      	b.n	8001acc <__aeabi_ddiv+0x258>
 8001dfe:	e667      	b.n	8001ad0 <__aeabi_ddiv+0x25c>
 8001e00:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <__aeabi_ddiv+0x5e8>)
 8001e02:	445a      	add	r2, fp
 8001e04:	2a00      	cmp	r2, #0
 8001e06:	dc00      	bgt.n	8001e0a <__aeabi_ddiv+0x596>
 8001e08:	e710      	b.n	8001c2c <__aeabi_ddiv+0x3b8>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	4498      	add	r8, r3
 8001e10:	e667      	b.n	8001ae2 <__aeabi_ddiv+0x26e>
 8001e12:	075d      	lsls	r5, r3, #29
 8001e14:	025b      	lsls	r3, r3, #9
 8001e16:	0b1c      	lsrs	r4, r3, #12
 8001e18:	08d2      	lsrs	r2, r2, #3
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	4315      	orrs	r5, r2
 8001e1e:	e580      	b.n	8001922 <__aeabi_ddiv+0xae>
 8001e20:	9800      	ldr	r0, [sp, #0]
 8001e22:	3d02      	subs	r5, #2
 8001e24:	0042      	lsls	r2, r0, #1
 8001e26:	4282      	cmp	r2, r0
 8001e28:	41bf      	sbcs	r7, r7
 8001e2a:	427f      	negs	r7, r7
 8001e2c:	193c      	adds	r4, r7, r4
 8001e2e:	1936      	adds	r6, r6, r4
 8001e30:	9200      	str	r2, [sp, #0]
 8001e32:	e7dd      	b.n	8001df0 <__aeabi_ddiv+0x57c>
 8001e34:	2480      	movs	r4, #128	; 0x80
 8001e36:	4643      	mov	r3, r8
 8001e38:	0324      	lsls	r4, r4, #12
 8001e3a:	431c      	orrs	r4, r3
 8001e3c:	0324      	lsls	r4, r4, #12
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <__aeabi_ddiv+0x5dc>)
 8001e40:	0b24      	lsrs	r4, r4, #12
 8001e42:	e56e      	b.n	8001922 <__aeabi_ddiv+0xae>
 8001e44:	9a00      	ldr	r2, [sp, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3ea      	bcc.n	8001e20 <__aeabi_ddiv+0x5ac>
 8001e4a:	0005      	movs	r5, r0
 8001e4c:	e7d3      	b.n	8001df6 <__aeabi_ddiv+0x582>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	0000043e 	.word	0x0000043e
 8001e58:	0000041e 	.word	0x0000041e
 8001e5c:	000003ff 	.word	0x000003ff

08001e60 <__eqdf2>:
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	464e      	mov	r6, r9
 8001e64:	4645      	mov	r5, r8
 8001e66:	46de      	mov	lr, fp
 8001e68:	4657      	mov	r7, sl
 8001e6a:	4690      	mov	r8, r2
 8001e6c:	b5e0      	push	{r5, r6, r7, lr}
 8001e6e:	0017      	movs	r7, r2
 8001e70:	031a      	lsls	r2, r3, #12
 8001e72:	0b12      	lsrs	r2, r2, #12
 8001e74:	0005      	movs	r5, r0
 8001e76:	4684      	mov	ip, r0
 8001e78:	4819      	ldr	r0, [pc, #100]	; (8001ee0 <__eqdf2+0x80>)
 8001e7a:	030e      	lsls	r6, r1, #12
 8001e7c:	004c      	lsls	r4, r1, #1
 8001e7e:	4691      	mov	r9, r2
 8001e80:	005a      	lsls	r2, r3, #1
 8001e82:	0fdb      	lsrs	r3, r3, #31
 8001e84:	469b      	mov	fp, r3
 8001e86:	0b36      	lsrs	r6, r6, #12
 8001e88:	0d64      	lsrs	r4, r4, #21
 8001e8a:	0fc9      	lsrs	r1, r1, #31
 8001e8c:	0d52      	lsrs	r2, r2, #21
 8001e8e:	4284      	cmp	r4, r0
 8001e90:	d019      	beq.n	8001ec6 <__eqdf2+0x66>
 8001e92:	4282      	cmp	r2, r0
 8001e94:	d010      	beq.n	8001eb8 <__eqdf2+0x58>
 8001e96:	2001      	movs	r0, #1
 8001e98:	4294      	cmp	r4, r2
 8001e9a:	d10e      	bne.n	8001eba <__eqdf2+0x5a>
 8001e9c:	454e      	cmp	r6, r9
 8001e9e:	d10c      	bne.n	8001eba <__eqdf2+0x5a>
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	45c4      	cmp	ip, r8
 8001ea4:	d109      	bne.n	8001eba <__eqdf2+0x5a>
 8001ea6:	4559      	cmp	r1, fp
 8001ea8:	d017      	beq.n	8001eda <__eqdf2+0x7a>
 8001eaa:	2c00      	cmp	r4, #0
 8001eac:	d105      	bne.n	8001eba <__eqdf2+0x5a>
 8001eae:	0030      	movs	r0, r6
 8001eb0:	4328      	orrs	r0, r5
 8001eb2:	1e43      	subs	r3, r0, #1
 8001eb4:	4198      	sbcs	r0, r3
 8001eb6:	e000      	b.n	8001eba <__eqdf2+0x5a>
 8001eb8:	2001      	movs	r0, #1
 8001eba:	bcf0      	pop	{r4, r5, r6, r7}
 8001ebc:	46bb      	mov	fp, r7
 8001ebe:	46b2      	mov	sl, r6
 8001ec0:	46a9      	mov	r9, r5
 8001ec2:	46a0      	mov	r8, r4
 8001ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec6:	0033      	movs	r3, r6
 8001ec8:	2001      	movs	r0, #1
 8001eca:	432b      	orrs	r3, r5
 8001ecc:	d1f5      	bne.n	8001eba <__eqdf2+0x5a>
 8001ece:	42a2      	cmp	r2, r4
 8001ed0:	d1f3      	bne.n	8001eba <__eqdf2+0x5a>
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	d1f0      	bne.n	8001eba <__eqdf2+0x5a>
 8001ed8:	e7e2      	b.n	8001ea0 <__eqdf2+0x40>
 8001eda:	2000      	movs	r0, #0
 8001edc:	e7ed      	b.n	8001eba <__eqdf2+0x5a>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000007ff 	.word	0x000007ff

08001ee4 <__gedf2>:
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	4647      	mov	r7, r8
 8001ee8:	46ce      	mov	lr, r9
 8001eea:	0004      	movs	r4, r0
 8001eec:	0018      	movs	r0, r3
 8001eee:	0016      	movs	r6, r2
 8001ef0:	031b      	lsls	r3, r3, #12
 8001ef2:	0b1b      	lsrs	r3, r3, #12
 8001ef4:	4d2d      	ldr	r5, [pc, #180]	; (8001fac <__gedf2+0xc8>)
 8001ef6:	004a      	lsls	r2, r1, #1
 8001ef8:	4699      	mov	r9, r3
 8001efa:	b580      	push	{r7, lr}
 8001efc:	0043      	lsls	r3, r0, #1
 8001efe:	030f      	lsls	r7, r1, #12
 8001f00:	46a4      	mov	ip, r4
 8001f02:	46b0      	mov	r8, r6
 8001f04:	0b3f      	lsrs	r7, r7, #12
 8001f06:	0d52      	lsrs	r2, r2, #21
 8001f08:	0fc9      	lsrs	r1, r1, #31
 8001f0a:	0d5b      	lsrs	r3, r3, #21
 8001f0c:	0fc0      	lsrs	r0, r0, #31
 8001f0e:	42aa      	cmp	r2, r5
 8001f10:	d021      	beq.n	8001f56 <__gedf2+0x72>
 8001f12:	42ab      	cmp	r3, r5
 8001f14:	d013      	beq.n	8001f3e <__gedf2+0x5a>
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d122      	bne.n	8001f60 <__gedf2+0x7c>
 8001f1a:	433c      	orrs	r4, r7
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <__gedf2+0x42>
 8001f20:	464d      	mov	r5, r9
 8001f22:	432e      	orrs	r6, r5
 8001f24:	d022      	beq.n	8001f6c <__gedf2+0x88>
 8001f26:	2c00      	cmp	r4, #0
 8001f28:	d010      	beq.n	8001f4c <__gedf2+0x68>
 8001f2a:	4281      	cmp	r1, r0
 8001f2c:	d022      	beq.n	8001f74 <__gedf2+0x90>
 8001f2e:	2002      	movs	r0, #2
 8001f30:	3901      	subs	r1, #1
 8001f32:	4008      	ands	r0, r1
 8001f34:	3801      	subs	r0, #1
 8001f36:	bcc0      	pop	{r6, r7}
 8001f38:	46b9      	mov	r9, r7
 8001f3a:	46b0      	mov	r8, r6
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3e:	464d      	mov	r5, r9
 8001f40:	432e      	orrs	r6, r5
 8001f42:	d129      	bne.n	8001f98 <__gedf2+0xb4>
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d1f0      	bne.n	8001f2a <__gedf2+0x46>
 8001f48:	433c      	orrs	r4, r7
 8001f4a:	d1ee      	bne.n	8001f2a <__gedf2+0x46>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d1f2      	bne.n	8001f36 <__gedf2+0x52>
 8001f50:	2001      	movs	r0, #1
 8001f52:	4240      	negs	r0, r0
 8001f54:	e7ef      	b.n	8001f36 <__gedf2+0x52>
 8001f56:	003d      	movs	r5, r7
 8001f58:	4325      	orrs	r5, r4
 8001f5a:	d11d      	bne.n	8001f98 <__gedf2+0xb4>
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d0ee      	beq.n	8001f3e <__gedf2+0x5a>
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e2      	bne.n	8001f2a <__gedf2+0x46>
 8001f64:	464c      	mov	r4, r9
 8001f66:	4326      	orrs	r6, r4
 8001f68:	d1df      	bne.n	8001f2a <__gedf2+0x46>
 8001f6a:	e7e0      	b.n	8001f2e <__gedf2+0x4a>
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	2c00      	cmp	r4, #0
 8001f70:	d0e1      	beq.n	8001f36 <__gedf2+0x52>
 8001f72:	e7dc      	b.n	8001f2e <__gedf2+0x4a>
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dc0a      	bgt.n	8001f8e <__gedf2+0xaa>
 8001f78:	dbe8      	blt.n	8001f4c <__gedf2+0x68>
 8001f7a:	454f      	cmp	r7, r9
 8001f7c:	d8d7      	bhi.n	8001f2e <__gedf2+0x4a>
 8001f7e:	d00e      	beq.n	8001f9e <__gedf2+0xba>
 8001f80:	2000      	movs	r0, #0
 8001f82:	454f      	cmp	r7, r9
 8001f84:	d2d7      	bcs.n	8001f36 <__gedf2+0x52>
 8001f86:	2900      	cmp	r1, #0
 8001f88:	d0e2      	beq.n	8001f50 <__gedf2+0x6c>
 8001f8a:	0008      	movs	r0, r1
 8001f8c:	e7d3      	b.n	8001f36 <__gedf2+0x52>
 8001f8e:	4243      	negs	r3, r0
 8001f90:	4158      	adcs	r0, r3
 8001f92:	0040      	lsls	r0, r0, #1
 8001f94:	3801      	subs	r0, #1
 8001f96:	e7ce      	b.n	8001f36 <__gedf2+0x52>
 8001f98:	2002      	movs	r0, #2
 8001f9a:	4240      	negs	r0, r0
 8001f9c:	e7cb      	b.n	8001f36 <__gedf2+0x52>
 8001f9e:	45c4      	cmp	ip, r8
 8001fa0:	d8c5      	bhi.n	8001f2e <__gedf2+0x4a>
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	45c4      	cmp	ip, r8
 8001fa6:	d2c6      	bcs.n	8001f36 <__gedf2+0x52>
 8001fa8:	e7ed      	b.n	8001f86 <__gedf2+0xa2>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	000007ff 	.word	0x000007ff

08001fb0 <__ledf2>:
 8001fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb2:	4647      	mov	r7, r8
 8001fb4:	46ce      	mov	lr, r9
 8001fb6:	0004      	movs	r4, r0
 8001fb8:	0018      	movs	r0, r3
 8001fba:	0016      	movs	r6, r2
 8001fbc:	031b      	lsls	r3, r3, #12
 8001fbe:	0b1b      	lsrs	r3, r3, #12
 8001fc0:	4d2c      	ldr	r5, [pc, #176]	; (8002074 <__ledf2+0xc4>)
 8001fc2:	004a      	lsls	r2, r1, #1
 8001fc4:	4699      	mov	r9, r3
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	0043      	lsls	r3, r0, #1
 8001fca:	030f      	lsls	r7, r1, #12
 8001fcc:	46a4      	mov	ip, r4
 8001fce:	46b0      	mov	r8, r6
 8001fd0:	0b3f      	lsrs	r7, r7, #12
 8001fd2:	0d52      	lsrs	r2, r2, #21
 8001fd4:	0fc9      	lsrs	r1, r1, #31
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	0fc0      	lsrs	r0, r0, #31
 8001fda:	42aa      	cmp	r2, r5
 8001fdc:	d00d      	beq.n	8001ffa <__ledf2+0x4a>
 8001fde:	42ab      	cmp	r3, r5
 8001fe0:	d010      	beq.n	8002004 <__ledf2+0x54>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d127      	bne.n	8002036 <__ledf2+0x86>
 8001fe6:	433c      	orrs	r4, r7
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d111      	bne.n	8002010 <__ledf2+0x60>
 8001fec:	464d      	mov	r5, r9
 8001fee:	432e      	orrs	r6, r5
 8001ff0:	d10e      	bne.n	8002010 <__ledf2+0x60>
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	2c00      	cmp	r4, #0
 8001ff6:	d015      	beq.n	8002024 <__ledf2+0x74>
 8001ff8:	e00e      	b.n	8002018 <__ledf2+0x68>
 8001ffa:	003d      	movs	r5, r7
 8001ffc:	4325      	orrs	r5, r4
 8001ffe:	d110      	bne.n	8002022 <__ledf2+0x72>
 8002000:	4293      	cmp	r3, r2
 8002002:	d118      	bne.n	8002036 <__ledf2+0x86>
 8002004:	464d      	mov	r5, r9
 8002006:	432e      	orrs	r6, r5
 8002008:	d10b      	bne.n	8002022 <__ledf2+0x72>
 800200a:	2a00      	cmp	r2, #0
 800200c:	d102      	bne.n	8002014 <__ledf2+0x64>
 800200e:	433c      	orrs	r4, r7
 8002010:	2c00      	cmp	r4, #0
 8002012:	d00b      	beq.n	800202c <__ledf2+0x7c>
 8002014:	4281      	cmp	r1, r0
 8002016:	d014      	beq.n	8002042 <__ledf2+0x92>
 8002018:	2002      	movs	r0, #2
 800201a:	3901      	subs	r1, #1
 800201c:	4008      	ands	r0, r1
 800201e:	3801      	subs	r0, #1
 8002020:	e000      	b.n	8002024 <__ledf2+0x74>
 8002022:	2002      	movs	r0, #2
 8002024:	bcc0      	pop	{r6, r7}
 8002026:	46b9      	mov	r9, r7
 8002028:	46b0      	mov	r8, r6
 800202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800202c:	2800      	cmp	r0, #0
 800202e:	d1f9      	bne.n	8002024 <__ledf2+0x74>
 8002030:	2001      	movs	r0, #1
 8002032:	4240      	negs	r0, r0
 8002034:	e7f6      	b.n	8002024 <__ledf2+0x74>
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ec      	bne.n	8002014 <__ledf2+0x64>
 800203a:	464c      	mov	r4, r9
 800203c:	4326      	orrs	r6, r4
 800203e:	d1e9      	bne.n	8002014 <__ledf2+0x64>
 8002040:	e7ea      	b.n	8002018 <__ledf2+0x68>
 8002042:	429a      	cmp	r2, r3
 8002044:	dd04      	ble.n	8002050 <__ledf2+0xa0>
 8002046:	4243      	negs	r3, r0
 8002048:	4158      	adcs	r0, r3
 800204a:	0040      	lsls	r0, r0, #1
 800204c:	3801      	subs	r0, #1
 800204e:	e7e9      	b.n	8002024 <__ledf2+0x74>
 8002050:	429a      	cmp	r2, r3
 8002052:	dbeb      	blt.n	800202c <__ledf2+0x7c>
 8002054:	454f      	cmp	r7, r9
 8002056:	d8df      	bhi.n	8002018 <__ledf2+0x68>
 8002058:	d006      	beq.n	8002068 <__ledf2+0xb8>
 800205a:	2000      	movs	r0, #0
 800205c:	454f      	cmp	r7, r9
 800205e:	d2e1      	bcs.n	8002024 <__ledf2+0x74>
 8002060:	2900      	cmp	r1, #0
 8002062:	d0e5      	beq.n	8002030 <__ledf2+0x80>
 8002064:	0008      	movs	r0, r1
 8002066:	e7dd      	b.n	8002024 <__ledf2+0x74>
 8002068:	45c4      	cmp	ip, r8
 800206a:	d8d5      	bhi.n	8002018 <__ledf2+0x68>
 800206c:	2000      	movs	r0, #0
 800206e:	45c4      	cmp	ip, r8
 8002070:	d2d8      	bcs.n	8002024 <__ledf2+0x74>
 8002072:	e7f5      	b.n	8002060 <__ledf2+0xb0>
 8002074:	000007ff 	.word	0x000007ff

08002078 <__aeabi_dmul>:
 8002078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207a:	4657      	mov	r7, sl
 800207c:	464e      	mov	r6, r9
 800207e:	4645      	mov	r5, r8
 8002080:	46de      	mov	lr, fp
 8002082:	b5e0      	push	{r5, r6, r7, lr}
 8002084:	4698      	mov	r8, r3
 8002086:	030c      	lsls	r4, r1, #12
 8002088:	004b      	lsls	r3, r1, #1
 800208a:	0006      	movs	r6, r0
 800208c:	4692      	mov	sl, r2
 800208e:	b087      	sub	sp, #28
 8002090:	0b24      	lsrs	r4, r4, #12
 8002092:	0d5b      	lsrs	r3, r3, #21
 8002094:	0fcf      	lsrs	r7, r1, #31
 8002096:	2b00      	cmp	r3, #0
 8002098:	d100      	bne.n	800209c <__aeabi_dmul+0x24>
 800209a:	e15c      	b.n	8002356 <__aeabi_dmul+0x2de>
 800209c:	4ad9      	ldr	r2, [pc, #868]	; (8002404 <__aeabi_dmul+0x38c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dmul+0x2c>
 80020a2:	e175      	b.n	8002390 <__aeabi_dmul+0x318>
 80020a4:	0f42      	lsrs	r2, r0, #29
 80020a6:	00e4      	lsls	r4, r4, #3
 80020a8:	4314      	orrs	r4, r2
 80020aa:	2280      	movs	r2, #128	; 0x80
 80020ac:	0412      	lsls	r2, r2, #16
 80020ae:	4314      	orrs	r4, r2
 80020b0:	4ad5      	ldr	r2, [pc, #852]	; (8002408 <__aeabi_dmul+0x390>)
 80020b2:	00c5      	lsls	r5, r0, #3
 80020b4:	4694      	mov	ip, r2
 80020b6:	4463      	add	r3, ip
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2300      	movs	r3, #0
 80020bc:	4699      	mov	r9, r3
 80020be:	469b      	mov	fp, r3
 80020c0:	4643      	mov	r3, r8
 80020c2:	4642      	mov	r2, r8
 80020c4:	031e      	lsls	r6, r3, #12
 80020c6:	0fd2      	lsrs	r2, r2, #31
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4650      	mov	r0, sl
 80020cc:	4690      	mov	r8, r2
 80020ce:	0b36      	lsrs	r6, r6, #12
 80020d0:	0d5b      	lsrs	r3, r3, #21
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dmul+0x5e>
 80020d4:	e120      	b.n	8002318 <__aeabi_dmul+0x2a0>
 80020d6:	4acb      	ldr	r2, [pc, #812]	; (8002404 <__aeabi_dmul+0x38c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d100      	bne.n	80020de <__aeabi_dmul+0x66>
 80020dc:	e162      	b.n	80023a4 <__aeabi_dmul+0x32c>
 80020de:	49ca      	ldr	r1, [pc, #808]	; (8002408 <__aeabi_dmul+0x390>)
 80020e0:	0f42      	lsrs	r2, r0, #29
 80020e2:	468c      	mov	ip, r1
 80020e4:	9900      	ldr	r1, [sp, #0]
 80020e6:	4463      	add	r3, ip
 80020e8:	00f6      	lsls	r6, r6, #3
 80020ea:	468c      	mov	ip, r1
 80020ec:	4316      	orrs	r6, r2
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	449c      	add	ip, r3
 80020f2:	0412      	lsls	r2, r2, #16
 80020f4:	4663      	mov	r3, ip
 80020f6:	4316      	orrs	r6, r2
 80020f8:	00c2      	lsls	r2, r0, #3
 80020fa:	2000      	movs	r0, #0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	9900      	ldr	r1, [sp, #0]
 8002100:	4643      	mov	r3, r8
 8002102:	3101      	adds	r1, #1
 8002104:	468c      	mov	ip, r1
 8002106:	4649      	mov	r1, r9
 8002108:	407b      	eors	r3, r7
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	290f      	cmp	r1, #15
 800210e:	d826      	bhi.n	800215e <__aeabi_dmul+0xe6>
 8002110:	4bbe      	ldr	r3, [pc, #760]	; (800240c <__aeabi_dmul+0x394>)
 8002112:	0089      	lsls	r1, r1, #2
 8002114:	5859      	ldr	r1, [r3, r1]
 8002116:	468f      	mov	pc, r1
 8002118:	4643      	mov	r3, r8
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	0034      	movs	r4, r6
 800211e:	0015      	movs	r5, r2
 8002120:	4683      	mov	fp, r0
 8002122:	465b      	mov	r3, fp
 8002124:	2b02      	cmp	r3, #2
 8002126:	d016      	beq.n	8002156 <__aeabi_dmul+0xde>
 8002128:	2b03      	cmp	r3, #3
 800212a:	d100      	bne.n	800212e <__aeabi_dmul+0xb6>
 800212c:	e203      	b.n	8002536 <__aeabi_dmul+0x4be>
 800212e:	2b01      	cmp	r3, #1
 8002130:	d000      	beq.n	8002134 <__aeabi_dmul+0xbc>
 8002132:	e0cd      	b.n	80022d0 <__aeabi_dmul+0x258>
 8002134:	2200      	movs	r2, #0
 8002136:	2400      	movs	r4, #0
 8002138:	2500      	movs	r5, #0
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	0512      	lsls	r2, r2, #20
 800213e:	4322      	orrs	r2, r4
 8002140:	07db      	lsls	r3, r3, #31
 8002142:	431a      	orrs	r2, r3
 8002144:	0028      	movs	r0, r5
 8002146:	0011      	movs	r1, r2
 8002148:	b007      	add	sp, #28
 800214a:	bcf0      	pop	{r4, r5, r6, r7}
 800214c:	46bb      	mov	fp, r7
 800214e:	46b2      	mov	sl, r6
 8002150:	46a9      	mov	r9, r5
 8002152:	46a0      	mov	r8, r4
 8002154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002156:	2400      	movs	r4, #0
 8002158:	2500      	movs	r5, #0
 800215a:	4aaa      	ldr	r2, [pc, #680]	; (8002404 <__aeabi_dmul+0x38c>)
 800215c:	e7ed      	b.n	800213a <__aeabi_dmul+0xc2>
 800215e:	0c28      	lsrs	r0, r5, #16
 8002160:	042d      	lsls	r5, r5, #16
 8002162:	0c2d      	lsrs	r5, r5, #16
 8002164:	002b      	movs	r3, r5
 8002166:	0c11      	lsrs	r1, r2, #16
 8002168:	0412      	lsls	r2, r2, #16
 800216a:	0c12      	lsrs	r2, r2, #16
 800216c:	4353      	muls	r3, r2
 800216e:	4698      	mov	r8, r3
 8002170:	0013      	movs	r3, r2
 8002172:	002f      	movs	r7, r5
 8002174:	4343      	muls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	434f      	muls	r7, r1
 800217a:	444f      	add	r7, r9
 800217c:	46bb      	mov	fp, r7
 800217e:	4647      	mov	r7, r8
 8002180:	000b      	movs	r3, r1
 8002182:	0c3f      	lsrs	r7, r7, #16
 8002184:	46ba      	mov	sl, r7
 8002186:	4343      	muls	r3, r0
 8002188:	44da      	add	sl, fp
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	45d1      	cmp	r9, sl
 800218e:	d904      	bls.n	800219a <__aeabi_dmul+0x122>
 8002190:	2780      	movs	r7, #128	; 0x80
 8002192:	027f      	lsls	r7, r7, #9
 8002194:	46b9      	mov	r9, r7
 8002196:	444b      	add	r3, r9
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	4653      	mov	r3, sl
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	469b      	mov	fp, r3
 80021a0:	4653      	mov	r3, sl
 80021a2:	041f      	lsls	r7, r3, #16
 80021a4:	4643      	mov	r3, r8
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	4698      	mov	r8, r3
 80021ac:	003b      	movs	r3, r7
 80021ae:	4443      	add	r3, r8
 80021b0:	9304      	str	r3, [sp, #16]
 80021b2:	0c33      	lsrs	r3, r6, #16
 80021b4:	0436      	lsls	r6, r6, #16
 80021b6:	0c36      	lsrs	r6, r6, #16
 80021b8:	4698      	mov	r8, r3
 80021ba:	0033      	movs	r3, r6
 80021bc:	4343      	muls	r3, r0
 80021be:	4699      	mov	r9, r3
 80021c0:	4643      	mov	r3, r8
 80021c2:	4343      	muls	r3, r0
 80021c4:	002f      	movs	r7, r5
 80021c6:	469a      	mov	sl, r3
 80021c8:	4643      	mov	r3, r8
 80021ca:	4377      	muls	r7, r6
 80021cc:	435d      	muls	r5, r3
 80021ce:	0c38      	lsrs	r0, r7, #16
 80021d0:	444d      	add	r5, r9
 80021d2:	1945      	adds	r5, r0, r5
 80021d4:	45a9      	cmp	r9, r5
 80021d6:	d903      	bls.n	80021e0 <__aeabi_dmul+0x168>
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	025b      	lsls	r3, r3, #9
 80021dc:	4699      	mov	r9, r3
 80021de:	44ca      	add	sl, r9
 80021e0:	043f      	lsls	r7, r7, #16
 80021e2:	0c28      	lsrs	r0, r5, #16
 80021e4:	0c3f      	lsrs	r7, r7, #16
 80021e6:	042d      	lsls	r5, r5, #16
 80021e8:	19ed      	adds	r5, r5, r7
 80021ea:	0c27      	lsrs	r7, r4, #16
 80021ec:	0424      	lsls	r4, r4, #16
 80021ee:	0c24      	lsrs	r4, r4, #16
 80021f0:	0003      	movs	r3, r0
 80021f2:	0020      	movs	r0, r4
 80021f4:	4350      	muls	r0, r2
 80021f6:	437a      	muls	r2, r7
 80021f8:	4691      	mov	r9, r2
 80021fa:	003a      	movs	r2, r7
 80021fc:	4453      	add	r3, sl
 80021fe:	9305      	str	r3, [sp, #20]
 8002200:	0c03      	lsrs	r3, r0, #16
 8002202:	469a      	mov	sl, r3
 8002204:	434a      	muls	r2, r1
 8002206:	4361      	muls	r1, r4
 8002208:	4449      	add	r1, r9
 800220a:	4451      	add	r1, sl
 800220c:	44ab      	add	fp, r5
 800220e:	4589      	cmp	r9, r1
 8002210:	d903      	bls.n	800221a <__aeabi_dmul+0x1a2>
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	025b      	lsls	r3, r3, #9
 8002216:	4699      	mov	r9, r3
 8002218:	444a      	add	r2, r9
 800221a:	0400      	lsls	r0, r0, #16
 800221c:	0c0b      	lsrs	r3, r1, #16
 800221e:	0c00      	lsrs	r0, r0, #16
 8002220:	0409      	lsls	r1, r1, #16
 8002222:	1809      	adds	r1, r1, r0
 8002224:	0020      	movs	r0, r4
 8002226:	4699      	mov	r9, r3
 8002228:	4643      	mov	r3, r8
 800222a:	4370      	muls	r0, r6
 800222c:	435c      	muls	r4, r3
 800222e:	437e      	muls	r6, r7
 8002230:	435f      	muls	r7, r3
 8002232:	0c03      	lsrs	r3, r0, #16
 8002234:	4698      	mov	r8, r3
 8002236:	19a4      	adds	r4, r4, r6
 8002238:	4444      	add	r4, r8
 800223a:	444a      	add	r2, r9
 800223c:	9703      	str	r7, [sp, #12]
 800223e:	42a6      	cmp	r6, r4
 8002240:	d904      	bls.n	800224c <__aeabi_dmul+0x1d4>
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	025b      	lsls	r3, r3, #9
 8002246:	4698      	mov	r8, r3
 8002248:	4447      	add	r7, r8
 800224a:	9703      	str	r7, [sp, #12]
 800224c:	0423      	lsls	r3, r4, #16
 800224e:	9e02      	ldr	r6, [sp, #8]
 8002250:	469a      	mov	sl, r3
 8002252:	9b05      	ldr	r3, [sp, #20]
 8002254:	445e      	add	r6, fp
 8002256:	4698      	mov	r8, r3
 8002258:	42ae      	cmp	r6, r5
 800225a:	41ad      	sbcs	r5, r5
 800225c:	1876      	adds	r6, r6, r1
 800225e:	428e      	cmp	r6, r1
 8002260:	4189      	sbcs	r1, r1
 8002262:	0400      	lsls	r0, r0, #16
 8002264:	0c00      	lsrs	r0, r0, #16
 8002266:	4450      	add	r0, sl
 8002268:	4440      	add	r0, r8
 800226a:	426d      	negs	r5, r5
 800226c:	1947      	adds	r7, r0, r5
 800226e:	46b8      	mov	r8, r7
 8002270:	4693      	mov	fp, r2
 8002272:	4249      	negs	r1, r1
 8002274:	4689      	mov	r9, r1
 8002276:	44c3      	add	fp, r8
 8002278:	44d9      	add	r9, fp
 800227a:	4298      	cmp	r0, r3
 800227c:	4180      	sbcs	r0, r0
 800227e:	45a8      	cmp	r8, r5
 8002280:	41ad      	sbcs	r5, r5
 8002282:	4593      	cmp	fp, r2
 8002284:	4192      	sbcs	r2, r2
 8002286:	4589      	cmp	r9, r1
 8002288:	4189      	sbcs	r1, r1
 800228a:	426d      	negs	r5, r5
 800228c:	4240      	negs	r0, r0
 800228e:	4328      	orrs	r0, r5
 8002290:	0c24      	lsrs	r4, r4, #16
 8002292:	4252      	negs	r2, r2
 8002294:	4249      	negs	r1, r1
 8002296:	430a      	orrs	r2, r1
 8002298:	9b03      	ldr	r3, [sp, #12]
 800229a:	1900      	adds	r0, r0, r4
 800229c:	1880      	adds	r0, r0, r2
 800229e:	18c7      	adds	r7, r0, r3
 80022a0:	464b      	mov	r3, r9
 80022a2:	0ddc      	lsrs	r4, r3, #23
 80022a4:	9b04      	ldr	r3, [sp, #16]
 80022a6:	0275      	lsls	r5, r6, #9
 80022a8:	431d      	orrs	r5, r3
 80022aa:	1e6a      	subs	r2, r5, #1
 80022ac:	4195      	sbcs	r5, r2
 80022ae:	464b      	mov	r3, r9
 80022b0:	0df6      	lsrs	r6, r6, #23
 80022b2:	027f      	lsls	r7, r7, #9
 80022b4:	4335      	orrs	r5, r6
 80022b6:	025a      	lsls	r2, r3, #9
 80022b8:	433c      	orrs	r4, r7
 80022ba:	4315      	orrs	r5, r2
 80022bc:	01fb      	lsls	r3, r7, #7
 80022be:	d400      	bmi.n	80022c2 <__aeabi_dmul+0x24a>
 80022c0:	e11c      	b.n	80024fc <__aeabi_dmul+0x484>
 80022c2:	2101      	movs	r1, #1
 80022c4:	086a      	lsrs	r2, r5, #1
 80022c6:	400d      	ands	r5, r1
 80022c8:	4315      	orrs	r5, r2
 80022ca:	07e2      	lsls	r2, r4, #31
 80022cc:	4315      	orrs	r5, r2
 80022ce:	0864      	lsrs	r4, r4, #1
 80022d0:	494f      	ldr	r1, [pc, #316]	; (8002410 <__aeabi_dmul+0x398>)
 80022d2:	4461      	add	r1, ip
 80022d4:	2900      	cmp	r1, #0
 80022d6:	dc00      	bgt.n	80022da <__aeabi_dmul+0x262>
 80022d8:	e0b0      	b.n	800243c <__aeabi_dmul+0x3c4>
 80022da:	076b      	lsls	r3, r5, #29
 80022dc:	d009      	beq.n	80022f2 <__aeabi_dmul+0x27a>
 80022de:	220f      	movs	r2, #15
 80022e0:	402a      	ands	r2, r5
 80022e2:	2a04      	cmp	r2, #4
 80022e4:	d005      	beq.n	80022f2 <__aeabi_dmul+0x27a>
 80022e6:	1d2a      	adds	r2, r5, #4
 80022e8:	42aa      	cmp	r2, r5
 80022ea:	41ad      	sbcs	r5, r5
 80022ec:	426d      	negs	r5, r5
 80022ee:	1964      	adds	r4, r4, r5
 80022f0:	0015      	movs	r5, r2
 80022f2:	01e3      	lsls	r3, r4, #7
 80022f4:	d504      	bpl.n	8002300 <__aeabi_dmul+0x288>
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	4a46      	ldr	r2, [pc, #280]	; (8002414 <__aeabi_dmul+0x39c>)
 80022fa:	00c9      	lsls	r1, r1, #3
 80022fc:	4014      	ands	r4, r2
 80022fe:	4461      	add	r1, ip
 8002300:	4a45      	ldr	r2, [pc, #276]	; (8002418 <__aeabi_dmul+0x3a0>)
 8002302:	4291      	cmp	r1, r2
 8002304:	dd00      	ble.n	8002308 <__aeabi_dmul+0x290>
 8002306:	e726      	b.n	8002156 <__aeabi_dmul+0xde>
 8002308:	0762      	lsls	r2, r4, #29
 800230a:	08ed      	lsrs	r5, r5, #3
 800230c:	0264      	lsls	r4, r4, #9
 800230e:	0549      	lsls	r1, r1, #21
 8002310:	4315      	orrs	r5, r2
 8002312:	0b24      	lsrs	r4, r4, #12
 8002314:	0d4a      	lsrs	r2, r1, #21
 8002316:	e710      	b.n	800213a <__aeabi_dmul+0xc2>
 8002318:	4652      	mov	r2, sl
 800231a:	4332      	orrs	r2, r6
 800231c:	d100      	bne.n	8002320 <__aeabi_dmul+0x2a8>
 800231e:	e07f      	b.n	8002420 <__aeabi_dmul+0x3a8>
 8002320:	2e00      	cmp	r6, #0
 8002322:	d100      	bne.n	8002326 <__aeabi_dmul+0x2ae>
 8002324:	e0dc      	b.n	80024e0 <__aeabi_dmul+0x468>
 8002326:	0030      	movs	r0, r6
 8002328:	f000 fdd6 	bl	8002ed8 <__clzsi2>
 800232c:	0002      	movs	r2, r0
 800232e:	3a0b      	subs	r2, #11
 8002330:	231d      	movs	r3, #29
 8002332:	0001      	movs	r1, r0
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	4652      	mov	r2, sl
 8002338:	3908      	subs	r1, #8
 800233a:	40da      	lsrs	r2, r3
 800233c:	408e      	lsls	r6, r1
 800233e:	4316      	orrs	r6, r2
 8002340:	4652      	mov	r2, sl
 8002342:	408a      	lsls	r2, r1
 8002344:	9b00      	ldr	r3, [sp, #0]
 8002346:	4935      	ldr	r1, [pc, #212]	; (800241c <__aeabi_dmul+0x3a4>)
 8002348:	1a18      	subs	r0, r3, r0
 800234a:	0003      	movs	r3, r0
 800234c:	468c      	mov	ip, r1
 800234e:	4463      	add	r3, ip
 8002350:	2000      	movs	r0, #0
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	e6d3      	b.n	80020fe <__aeabi_dmul+0x86>
 8002356:	0025      	movs	r5, r4
 8002358:	4305      	orrs	r5, r0
 800235a:	d04a      	beq.n	80023f2 <__aeabi_dmul+0x37a>
 800235c:	2c00      	cmp	r4, #0
 800235e:	d100      	bne.n	8002362 <__aeabi_dmul+0x2ea>
 8002360:	e0b0      	b.n	80024c4 <__aeabi_dmul+0x44c>
 8002362:	0020      	movs	r0, r4
 8002364:	f000 fdb8 	bl	8002ed8 <__clzsi2>
 8002368:	0001      	movs	r1, r0
 800236a:	0002      	movs	r2, r0
 800236c:	390b      	subs	r1, #11
 800236e:	231d      	movs	r3, #29
 8002370:	0010      	movs	r0, r2
 8002372:	1a5b      	subs	r3, r3, r1
 8002374:	0031      	movs	r1, r6
 8002376:	0035      	movs	r5, r6
 8002378:	3808      	subs	r0, #8
 800237a:	4084      	lsls	r4, r0
 800237c:	40d9      	lsrs	r1, r3
 800237e:	4085      	lsls	r5, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	4826      	ldr	r0, [pc, #152]	; (800241c <__aeabi_dmul+0x3a4>)
 8002384:	1a83      	subs	r3, r0, r2
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2300      	movs	r3, #0
 800238a:	4699      	mov	r9, r3
 800238c:	469b      	mov	fp, r3
 800238e:	e697      	b.n	80020c0 <__aeabi_dmul+0x48>
 8002390:	0005      	movs	r5, r0
 8002392:	4325      	orrs	r5, r4
 8002394:	d126      	bne.n	80023e4 <__aeabi_dmul+0x36c>
 8002396:	2208      	movs	r2, #8
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2302      	movs	r3, #2
 800239c:	2400      	movs	r4, #0
 800239e:	4691      	mov	r9, r2
 80023a0:	469b      	mov	fp, r3
 80023a2:	e68d      	b.n	80020c0 <__aeabi_dmul+0x48>
 80023a4:	4652      	mov	r2, sl
 80023a6:	9b00      	ldr	r3, [sp, #0]
 80023a8:	4332      	orrs	r2, r6
 80023aa:	d110      	bne.n	80023ce <__aeabi_dmul+0x356>
 80023ac:	4915      	ldr	r1, [pc, #84]	; (8002404 <__aeabi_dmul+0x38c>)
 80023ae:	2600      	movs	r6, #0
 80023b0:	468c      	mov	ip, r1
 80023b2:	4463      	add	r3, ip
 80023b4:	4649      	mov	r1, r9
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2302      	movs	r3, #2
 80023ba:	4319      	orrs	r1, r3
 80023bc:	4689      	mov	r9, r1
 80023be:	2002      	movs	r0, #2
 80023c0:	e69d      	b.n	80020fe <__aeabi_dmul+0x86>
 80023c2:	465b      	mov	r3, fp
 80023c4:	9701      	str	r7, [sp, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d000      	beq.n	80023cc <__aeabi_dmul+0x354>
 80023ca:	e6ad      	b.n	8002128 <__aeabi_dmul+0xb0>
 80023cc:	e6c3      	b.n	8002156 <__aeabi_dmul+0xde>
 80023ce:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <__aeabi_dmul+0x38c>)
 80023d0:	2003      	movs	r0, #3
 80023d2:	4694      	mov	ip, r2
 80023d4:	4463      	add	r3, ip
 80023d6:	464a      	mov	r2, r9
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2303      	movs	r3, #3
 80023dc:	431a      	orrs	r2, r3
 80023de:	4691      	mov	r9, r2
 80023e0:	4652      	mov	r2, sl
 80023e2:	e68c      	b.n	80020fe <__aeabi_dmul+0x86>
 80023e4:	220c      	movs	r2, #12
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2303      	movs	r3, #3
 80023ea:	0005      	movs	r5, r0
 80023ec:	4691      	mov	r9, r2
 80023ee:	469b      	mov	fp, r3
 80023f0:	e666      	b.n	80020c0 <__aeabi_dmul+0x48>
 80023f2:	2304      	movs	r3, #4
 80023f4:	4699      	mov	r9, r3
 80023f6:	2300      	movs	r3, #0
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	2400      	movs	r4, #0
 80023fe:	469b      	mov	fp, r3
 8002400:	e65e      	b.n	80020c0 <__aeabi_dmul+0x48>
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	000007ff 	.word	0x000007ff
 8002408:	fffffc01 	.word	0xfffffc01
 800240c:	0800b830 	.word	0x0800b830
 8002410:	000003ff 	.word	0x000003ff
 8002414:	feffffff 	.word	0xfeffffff
 8002418:	000007fe 	.word	0x000007fe
 800241c:	fffffc0d 	.word	0xfffffc0d
 8002420:	4649      	mov	r1, r9
 8002422:	2301      	movs	r3, #1
 8002424:	4319      	orrs	r1, r3
 8002426:	4689      	mov	r9, r1
 8002428:	2600      	movs	r6, #0
 800242a:	2001      	movs	r0, #1
 800242c:	e667      	b.n	80020fe <__aeabi_dmul+0x86>
 800242e:	2300      	movs	r3, #0
 8002430:	2480      	movs	r4, #128	; 0x80
 8002432:	2500      	movs	r5, #0
 8002434:	4a43      	ldr	r2, [pc, #268]	; (8002544 <__aeabi_dmul+0x4cc>)
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	0324      	lsls	r4, r4, #12
 800243a:	e67e      	b.n	800213a <__aeabi_dmul+0xc2>
 800243c:	2001      	movs	r0, #1
 800243e:	1a40      	subs	r0, r0, r1
 8002440:	2838      	cmp	r0, #56	; 0x38
 8002442:	dd00      	ble.n	8002446 <__aeabi_dmul+0x3ce>
 8002444:	e676      	b.n	8002134 <__aeabi_dmul+0xbc>
 8002446:	281f      	cmp	r0, #31
 8002448:	dd5b      	ble.n	8002502 <__aeabi_dmul+0x48a>
 800244a:	221f      	movs	r2, #31
 800244c:	0023      	movs	r3, r4
 800244e:	4252      	negs	r2, r2
 8002450:	1a51      	subs	r1, r2, r1
 8002452:	40cb      	lsrs	r3, r1
 8002454:	0019      	movs	r1, r3
 8002456:	2820      	cmp	r0, #32
 8002458:	d003      	beq.n	8002462 <__aeabi_dmul+0x3ea>
 800245a:	4a3b      	ldr	r2, [pc, #236]	; (8002548 <__aeabi_dmul+0x4d0>)
 800245c:	4462      	add	r2, ip
 800245e:	4094      	lsls	r4, r2
 8002460:	4325      	orrs	r5, r4
 8002462:	1e6a      	subs	r2, r5, #1
 8002464:	4195      	sbcs	r5, r2
 8002466:	002a      	movs	r2, r5
 8002468:	430a      	orrs	r2, r1
 800246a:	2107      	movs	r1, #7
 800246c:	000d      	movs	r5, r1
 800246e:	2400      	movs	r4, #0
 8002470:	4015      	ands	r5, r2
 8002472:	4211      	tst	r1, r2
 8002474:	d05b      	beq.n	800252e <__aeabi_dmul+0x4b6>
 8002476:	210f      	movs	r1, #15
 8002478:	2400      	movs	r4, #0
 800247a:	4011      	ands	r1, r2
 800247c:	2904      	cmp	r1, #4
 800247e:	d053      	beq.n	8002528 <__aeabi_dmul+0x4b0>
 8002480:	1d11      	adds	r1, r2, #4
 8002482:	4291      	cmp	r1, r2
 8002484:	4192      	sbcs	r2, r2
 8002486:	4252      	negs	r2, r2
 8002488:	18a4      	adds	r4, r4, r2
 800248a:	000a      	movs	r2, r1
 800248c:	0223      	lsls	r3, r4, #8
 800248e:	d54b      	bpl.n	8002528 <__aeabi_dmul+0x4b0>
 8002490:	2201      	movs	r2, #1
 8002492:	2400      	movs	r4, #0
 8002494:	2500      	movs	r5, #0
 8002496:	e650      	b.n	800213a <__aeabi_dmul+0xc2>
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	031b      	lsls	r3, r3, #12
 800249c:	421c      	tst	r4, r3
 800249e:	d009      	beq.n	80024b4 <__aeabi_dmul+0x43c>
 80024a0:	421e      	tst	r6, r3
 80024a2:	d107      	bne.n	80024b4 <__aeabi_dmul+0x43c>
 80024a4:	4333      	orrs	r3, r6
 80024a6:	031c      	lsls	r4, r3, #12
 80024a8:	4643      	mov	r3, r8
 80024aa:	0015      	movs	r5, r2
 80024ac:	0b24      	lsrs	r4, r4, #12
 80024ae:	4a25      	ldr	r2, [pc, #148]	; (8002544 <__aeabi_dmul+0x4cc>)
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	e642      	b.n	800213a <__aeabi_dmul+0xc2>
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	0312      	lsls	r2, r2, #12
 80024b8:	4314      	orrs	r4, r2
 80024ba:	0324      	lsls	r4, r4, #12
 80024bc:	4a21      	ldr	r2, [pc, #132]	; (8002544 <__aeabi_dmul+0x4cc>)
 80024be:	0b24      	lsrs	r4, r4, #12
 80024c0:	9701      	str	r7, [sp, #4]
 80024c2:	e63a      	b.n	800213a <__aeabi_dmul+0xc2>
 80024c4:	f000 fd08 	bl	8002ed8 <__clzsi2>
 80024c8:	0001      	movs	r1, r0
 80024ca:	0002      	movs	r2, r0
 80024cc:	3115      	adds	r1, #21
 80024ce:	3220      	adds	r2, #32
 80024d0:	291c      	cmp	r1, #28
 80024d2:	dc00      	bgt.n	80024d6 <__aeabi_dmul+0x45e>
 80024d4:	e74b      	b.n	800236e <__aeabi_dmul+0x2f6>
 80024d6:	0034      	movs	r4, r6
 80024d8:	3808      	subs	r0, #8
 80024da:	2500      	movs	r5, #0
 80024dc:	4084      	lsls	r4, r0
 80024de:	e750      	b.n	8002382 <__aeabi_dmul+0x30a>
 80024e0:	f000 fcfa 	bl	8002ed8 <__clzsi2>
 80024e4:	0003      	movs	r3, r0
 80024e6:	001a      	movs	r2, r3
 80024e8:	3215      	adds	r2, #21
 80024ea:	3020      	adds	r0, #32
 80024ec:	2a1c      	cmp	r2, #28
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dmul+0x47a>
 80024f0:	e71e      	b.n	8002330 <__aeabi_dmul+0x2b8>
 80024f2:	4656      	mov	r6, sl
 80024f4:	3b08      	subs	r3, #8
 80024f6:	2200      	movs	r2, #0
 80024f8:	409e      	lsls	r6, r3
 80024fa:	e723      	b.n	8002344 <__aeabi_dmul+0x2cc>
 80024fc:	9b00      	ldr	r3, [sp, #0]
 80024fe:	469c      	mov	ip, r3
 8002500:	e6e6      	b.n	80022d0 <__aeabi_dmul+0x258>
 8002502:	4912      	ldr	r1, [pc, #72]	; (800254c <__aeabi_dmul+0x4d4>)
 8002504:	0022      	movs	r2, r4
 8002506:	4461      	add	r1, ip
 8002508:	002e      	movs	r6, r5
 800250a:	408d      	lsls	r5, r1
 800250c:	408a      	lsls	r2, r1
 800250e:	40c6      	lsrs	r6, r0
 8002510:	1e69      	subs	r1, r5, #1
 8002512:	418d      	sbcs	r5, r1
 8002514:	4332      	orrs	r2, r6
 8002516:	432a      	orrs	r2, r5
 8002518:	40c4      	lsrs	r4, r0
 800251a:	0753      	lsls	r3, r2, #29
 800251c:	d0b6      	beq.n	800248c <__aeabi_dmul+0x414>
 800251e:	210f      	movs	r1, #15
 8002520:	4011      	ands	r1, r2
 8002522:	2904      	cmp	r1, #4
 8002524:	d1ac      	bne.n	8002480 <__aeabi_dmul+0x408>
 8002526:	e7b1      	b.n	800248c <__aeabi_dmul+0x414>
 8002528:	0765      	lsls	r5, r4, #29
 800252a:	0264      	lsls	r4, r4, #9
 800252c:	0b24      	lsrs	r4, r4, #12
 800252e:	08d2      	lsrs	r2, r2, #3
 8002530:	4315      	orrs	r5, r2
 8002532:	2200      	movs	r2, #0
 8002534:	e601      	b.n	800213a <__aeabi_dmul+0xc2>
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	0312      	lsls	r2, r2, #12
 800253a:	4314      	orrs	r4, r2
 800253c:	0324      	lsls	r4, r4, #12
 800253e:	4a01      	ldr	r2, [pc, #4]	; (8002544 <__aeabi_dmul+0x4cc>)
 8002540:	0b24      	lsrs	r4, r4, #12
 8002542:	e5fa      	b.n	800213a <__aeabi_dmul+0xc2>
 8002544:	000007ff 	.word	0x000007ff
 8002548:	0000043e 	.word	0x0000043e
 800254c:	0000041e 	.word	0x0000041e

08002550 <__aeabi_dsub>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	4657      	mov	r7, sl
 8002554:	464e      	mov	r6, r9
 8002556:	4645      	mov	r5, r8
 8002558:	46de      	mov	lr, fp
 800255a:	b5e0      	push	{r5, r6, r7, lr}
 800255c:	001e      	movs	r6, r3
 800255e:	0017      	movs	r7, r2
 8002560:	004a      	lsls	r2, r1, #1
 8002562:	030b      	lsls	r3, r1, #12
 8002564:	0d52      	lsrs	r2, r2, #21
 8002566:	0a5b      	lsrs	r3, r3, #9
 8002568:	4690      	mov	r8, r2
 800256a:	0f42      	lsrs	r2, r0, #29
 800256c:	431a      	orrs	r2, r3
 800256e:	0fcd      	lsrs	r5, r1, #31
 8002570:	4ccd      	ldr	r4, [pc, #820]	; (80028a8 <__aeabi_dsub+0x358>)
 8002572:	0331      	lsls	r1, r6, #12
 8002574:	00c3      	lsls	r3, r0, #3
 8002576:	4694      	mov	ip, r2
 8002578:	0070      	lsls	r0, r6, #1
 800257a:	0f7a      	lsrs	r2, r7, #29
 800257c:	0a49      	lsrs	r1, r1, #9
 800257e:	00ff      	lsls	r7, r7, #3
 8002580:	469a      	mov	sl, r3
 8002582:	46b9      	mov	r9, r7
 8002584:	0d40      	lsrs	r0, r0, #21
 8002586:	0ff6      	lsrs	r6, r6, #31
 8002588:	4311      	orrs	r1, r2
 800258a:	42a0      	cmp	r0, r4
 800258c:	d100      	bne.n	8002590 <__aeabi_dsub+0x40>
 800258e:	e0b1      	b.n	80026f4 <__aeabi_dsub+0x1a4>
 8002590:	2201      	movs	r2, #1
 8002592:	4056      	eors	r6, r2
 8002594:	46b3      	mov	fp, r6
 8002596:	42b5      	cmp	r5, r6
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x4c>
 800259a:	e088      	b.n	80026ae <__aeabi_dsub+0x15e>
 800259c:	4642      	mov	r2, r8
 800259e:	1a12      	subs	r2, r2, r0
 80025a0:	2a00      	cmp	r2, #0
 80025a2:	dc00      	bgt.n	80025a6 <__aeabi_dsub+0x56>
 80025a4:	e0ae      	b.n	8002704 <__aeabi_dsub+0x1b4>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x5c>
 80025aa:	e0c1      	b.n	8002730 <__aeabi_dsub+0x1e0>
 80025ac:	48be      	ldr	r0, [pc, #760]	; (80028a8 <__aeabi_dsub+0x358>)
 80025ae:	4580      	cmp	r8, r0
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x64>
 80025b2:	e151      	b.n	8002858 <__aeabi_dsub+0x308>
 80025b4:	2080      	movs	r0, #128	; 0x80
 80025b6:	0400      	lsls	r0, r0, #16
 80025b8:	4301      	orrs	r1, r0
 80025ba:	2a38      	cmp	r2, #56	; 0x38
 80025bc:	dd00      	ble.n	80025c0 <__aeabi_dsub+0x70>
 80025be:	e17b      	b.n	80028b8 <__aeabi_dsub+0x368>
 80025c0:	2a1f      	cmp	r2, #31
 80025c2:	dd00      	ble.n	80025c6 <__aeabi_dsub+0x76>
 80025c4:	e1ee      	b.n	80029a4 <__aeabi_dsub+0x454>
 80025c6:	2020      	movs	r0, #32
 80025c8:	003e      	movs	r6, r7
 80025ca:	1a80      	subs	r0, r0, r2
 80025cc:	000c      	movs	r4, r1
 80025ce:	40d6      	lsrs	r6, r2
 80025d0:	40d1      	lsrs	r1, r2
 80025d2:	4087      	lsls	r7, r0
 80025d4:	4662      	mov	r2, ip
 80025d6:	4084      	lsls	r4, r0
 80025d8:	1a52      	subs	r2, r2, r1
 80025da:	1e78      	subs	r0, r7, #1
 80025dc:	4187      	sbcs	r7, r0
 80025de:	4694      	mov	ip, r2
 80025e0:	4334      	orrs	r4, r6
 80025e2:	4327      	orrs	r7, r4
 80025e4:	1bdc      	subs	r4, r3, r7
 80025e6:	42a3      	cmp	r3, r4
 80025e8:	419b      	sbcs	r3, r3
 80025ea:	4662      	mov	r2, ip
 80025ec:	425b      	negs	r3, r3
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	4699      	mov	r9, r3
 80025f2:	464b      	mov	r3, r9
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	d400      	bmi.n	80025fa <__aeabi_dsub+0xaa>
 80025f8:	e118      	b.n	800282c <__aeabi_dsub+0x2dc>
 80025fa:	464b      	mov	r3, r9
 80025fc:	0258      	lsls	r0, r3, #9
 80025fe:	0a43      	lsrs	r3, r0, #9
 8002600:	4699      	mov	r9, r3
 8002602:	464b      	mov	r3, r9
 8002604:	2b00      	cmp	r3, #0
 8002606:	d100      	bne.n	800260a <__aeabi_dsub+0xba>
 8002608:	e137      	b.n	800287a <__aeabi_dsub+0x32a>
 800260a:	4648      	mov	r0, r9
 800260c:	f000 fc64 	bl	8002ed8 <__clzsi2>
 8002610:	0001      	movs	r1, r0
 8002612:	3908      	subs	r1, #8
 8002614:	2320      	movs	r3, #32
 8002616:	0022      	movs	r2, r4
 8002618:	4648      	mov	r0, r9
 800261a:	1a5b      	subs	r3, r3, r1
 800261c:	40da      	lsrs	r2, r3
 800261e:	4088      	lsls	r0, r1
 8002620:	408c      	lsls	r4, r1
 8002622:	4643      	mov	r3, r8
 8002624:	4310      	orrs	r0, r2
 8002626:	4588      	cmp	r8, r1
 8002628:	dd00      	ble.n	800262c <__aeabi_dsub+0xdc>
 800262a:	e136      	b.n	800289a <__aeabi_dsub+0x34a>
 800262c:	1ac9      	subs	r1, r1, r3
 800262e:	1c4b      	adds	r3, r1, #1
 8002630:	2b1f      	cmp	r3, #31
 8002632:	dd00      	ble.n	8002636 <__aeabi_dsub+0xe6>
 8002634:	e0ea      	b.n	800280c <__aeabi_dsub+0x2bc>
 8002636:	2220      	movs	r2, #32
 8002638:	0026      	movs	r6, r4
 800263a:	1ad2      	subs	r2, r2, r3
 800263c:	0001      	movs	r1, r0
 800263e:	4094      	lsls	r4, r2
 8002640:	40de      	lsrs	r6, r3
 8002642:	40d8      	lsrs	r0, r3
 8002644:	2300      	movs	r3, #0
 8002646:	4091      	lsls	r1, r2
 8002648:	1e62      	subs	r2, r4, #1
 800264a:	4194      	sbcs	r4, r2
 800264c:	4681      	mov	r9, r0
 800264e:	4698      	mov	r8, r3
 8002650:	4331      	orrs	r1, r6
 8002652:	430c      	orrs	r4, r1
 8002654:	0763      	lsls	r3, r4, #29
 8002656:	d009      	beq.n	800266c <__aeabi_dsub+0x11c>
 8002658:	230f      	movs	r3, #15
 800265a:	4023      	ands	r3, r4
 800265c:	2b04      	cmp	r3, #4
 800265e:	d005      	beq.n	800266c <__aeabi_dsub+0x11c>
 8002660:	1d23      	adds	r3, r4, #4
 8002662:	42a3      	cmp	r3, r4
 8002664:	41a4      	sbcs	r4, r4
 8002666:	4264      	negs	r4, r4
 8002668:	44a1      	add	r9, r4
 800266a:	001c      	movs	r4, r3
 800266c:	464b      	mov	r3, r9
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	d400      	bmi.n	8002674 <__aeabi_dsub+0x124>
 8002672:	e0de      	b.n	8002832 <__aeabi_dsub+0x2e2>
 8002674:	4641      	mov	r1, r8
 8002676:	4b8c      	ldr	r3, [pc, #560]	; (80028a8 <__aeabi_dsub+0x358>)
 8002678:	3101      	adds	r1, #1
 800267a:	4299      	cmp	r1, r3
 800267c:	d100      	bne.n	8002680 <__aeabi_dsub+0x130>
 800267e:	e0e7      	b.n	8002850 <__aeabi_dsub+0x300>
 8002680:	464b      	mov	r3, r9
 8002682:	488a      	ldr	r0, [pc, #552]	; (80028ac <__aeabi_dsub+0x35c>)
 8002684:	08e4      	lsrs	r4, r4, #3
 8002686:	4003      	ands	r3, r0
 8002688:	0018      	movs	r0, r3
 800268a:	0549      	lsls	r1, r1, #21
 800268c:	075b      	lsls	r3, r3, #29
 800268e:	0240      	lsls	r0, r0, #9
 8002690:	4323      	orrs	r3, r4
 8002692:	0d4a      	lsrs	r2, r1, #21
 8002694:	0b04      	lsrs	r4, r0, #12
 8002696:	0512      	lsls	r2, r2, #20
 8002698:	07ed      	lsls	r5, r5, #31
 800269a:	4322      	orrs	r2, r4
 800269c:	432a      	orrs	r2, r5
 800269e:	0018      	movs	r0, r3
 80026a0:	0011      	movs	r1, r2
 80026a2:	bcf0      	pop	{r4, r5, r6, r7}
 80026a4:	46bb      	mov	fp, r7
 80026a6:	46b2      	mov	sl, r6
 80026a8:	46a9      	mov	r9, r5
 80026aa:	46a0      	mov	r8, r4
 80026ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ae:	4642      	mov	r2, r8
 80026b0:	1a12      	subs	r2, r2, r0
 80026b2:	2a00      	cmp	r2, #0
 80026b4:	dd52      	ble.n	800275c <__aeabi_dsub+0x20c>
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d100      	bne.n	80026bc <__aeabi_dsub+0x16c>
 80026ba:	e09c      	b.n	80027f6 <__aeabi_dsub+0x2a6>
 80026bc:	45a0      	cmp	r8, r4
 80026be:	d100      	bne.n	80026c2 <__aeabi_dsub+0x172>
 80026c0:	e0ca      	b.n	8002858 <__aeabi_dsub+0x308>
 80026c2:	2080      	movs	r0, #128	; 0x80
 80026c4:	0400      	lsls	r0, r0, #16
 80026c6:	4301      	orrs	r1, r0
 80026c8:	2a38      	cmp	r2, #56	; 0x38
 80026ca:	dd00      	ble.n	80026ce <__aeabi_dsub+0x17e>
 80026cc:	e149      	b.n	8002962 <__aeabi_dsub+0x412>
 80026ce:	2a1f      	cmp	r2, #31
 80026d0:	dc00      	bgt.n	80026d4 <__aeabi_dsub+0x184>
 80026d2:	e197      	b.n	8002a04 <__aeabi_dsub+0x4b4>
 80026d4:	0010      	movs	r0, r2
 80026d6:	000e      	movs	r6, r1
 80026d8:	3820      	subs	r0, #32
 80026da:	40c6      	lsrs	r6, r0
 80026dc:	2a20      	cmp	r2, #32
 80026de:	d004      	beq.n	80026ea <__aeabi_dsub+0x19a>
 80026e0:	2040      	movs	r0, #64	; 0x40
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	4091      	lsls	r1, r2
 80026e6:	430f      	orrs	r7, r1
 80026e8:	46b9      	mov	r9, r7
 80026ea:	464c      	mov	r4, r9
 80026ec:	1e62      	subs	r2, r4, #1
 80026ee:	4194      	sbcs	r4, r2
 80026f0:	4334      	orrs	r4, r6
 80026f2:	e13a      	b.n	800296a <__aeabi_dsub+0x41a>
 80026f4:	000a      	movs	r2, r1
 80026f6:	433a      	orrs	r2, r7
 80026f8:	d028      	beq.n	800274c <__aeabi_dsub+0x1fc>
 80026fa:	46b3      	mov	fp, r6
 80026fc:	42b5      	cmp	r5, r6
 80026fe:	d02b      	beq.n	8002758 <__aeabi_dsub+0x208>
 8002700:	4a6b      	ldr	r2, [pc, #428]	; (80028b0 <__aeabi_dsub+0x360>)
 8002702:	4442      	add	r2, r8
 8002704:	2a00      	cmp	r2, #0
 8002706:	d05d      	beq.n	80027c4 <__aeabi_dsub+0x274>
 8002708:	4642      	mov	r2, r8
 800270a:	4644      	mov	r4, r8
 800270c:	1a82      	subs	r2, r0, r2
 800270e:	2c00      	cmp	r4, #0
 8002710:	d000      	beq.n	8002714 <__aeabi_dsub+0x1c4>
 8002712:	e0f5      	b.n	8002900 <__aeabi_dsub+0x3b0>
 8002714:	4665      	mov	r5, ip
 8002716:	431d      	orrs	r5, r3
 8002718:	d100      	bne.n	800271c <__aeabi_dsub+0x1cc>
 800271a:	e19c      	b.n	8002a56 <__aeabi_dsub+0x506>
 800271c:	1e55      	subs	r5, r2, #1
 800271e:	2a01      	cmp	r2, #1
 8002720:	d100      	bne.n	8002724 <__aeabi_dsub+0x1d4>
 8002722:	e1fb      	b.n	8002b1c <__aeabi_dsub+0x5cc>
 8002724:	4c60      	ldr	r4, [pc, #384]	; (80028a8 <__aeabi_dsub+0x358>)
 8002726:	42a2      	cmp	r2, r4
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x1dc>
 800272a:	e1bd      	b.n	8002aa8 <__aeabi_dsub+0x558>
 800272c:	002a      	movs	r2, r5
 800272e:	e0f0      	b.n	8002912 <__aeabi_dsub+0x3c2>
 8002730:	0008      	movs	r0, r1
 8002732:	4338      	orrs	r0, r7
 8002734:	d100      	bne.n	8002738 <__aeabi_dsub+0x1e8>
 8002736:	e0c3      	b.n	80028c0 <__aeabi_dsub+0x370>
 8002738:	1e50      	subs	r0, r2, #1
 800273a:	2a01      	cmp	r2, #1
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x1f0>
 800273e:	e1a8      	b.n	8002a92 <__aeabi_dsub+0x542>
 8002740:	4c59      	ldr	r4, [pc, #356]	; (80028a8 <__aeabi_dsub+0x358>)
 8002742:	42a2      	cmp	r2, r4
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x1f8>
 8002746:	e087      	b.n	8002858 <__aeabi_dsub+0x308>
 8002748:	0002      	movs	r2, r0
 800274a:	e736      	b.n	80025ba <__aeabi_dsub+0x6a>
 800274c:	2201      	movs	r2, #1
 800274e:	4056      	eors	r6, r2
 8002750:	46b3      	mov	fp, r6
 8002752:	42b5      	cmp	r5, r6
 8002754:	d000      	beq.n	8002758 <__aeabi_dsub+0x208>
 8002756:	e721      	b.n	800259c <__aeabi_dsub+0x4c>
 8002758:	4a55      	ldr	r2, [pc, #340]	; (80028b0 <__aeabi_dsub+0x360>)
 800275a:	4442      	add	r2, r8
 800275c:	2a00      	cmp	r2, #0
 800275e:	d100      	bne.n	8002762 <__aeabi_dsub+0x212>
 8002760:	e0b5      	b.n	80028ce <__aeabi_dsub+0x37e>
 8002762:	4642      	mov	r2, r8
 8002764:	4644      	mov	r4, r8
 8002766:	1a82      	subs	r2, r0, r2
 8002768:	2c00      	cmp	r4, #0
 800276a:	d100      	bne.n	800276e <__aeabi_dsub+0x21e>
 800276c:	e138      	b.n	80029e0 <__aeabi_dsub+0x490>
 800276e:	4e4e      	ldr	r6, [pc, #312]	; (80028a8 <__aeabi_dsub+0x358>)
 8002770:	42b0      	cmp	r0, r6
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x226>
 8002774:	e1de      	b.n	8002b34 <__aeabi_dsub+0x5e4>
 8002776:	2680      	movs	r6, #128	; 0x80
 8002778:	4664      	mov	r4, ip
 800277a:	0436      	lsls	r6, r6, #16
 800277c:	4334      	orrs	r4, r6
 800277e:	46a4      	mov	ip, r4
 8002780:	2a38      	cmp	r2, #56	; 0x38
 8002782:	dd00      	ble.n	8002786 <__aeabi_dsub+0x236>
 8002784:	e196      	b.n	8002ab4 <__aeabi_dsub+0x564>
 8002786:	2a1f      	cmp	r2, #31
 8002788:	dd00      	ble.n	800278c <__aeabi_dsub+0x23c>
 800278a:	e224      	b.n	8002bd6 <__aeabi_dsub+0x686>
 800278c:	2620      	movs	r6, #32
 800278e:	1ab4      	subs	r4, r6, r2
 8002790:	46a2      	mov	sl, r4
 8002792:	4664      	mov	r4, ip
 8002794:	4656      	mov	r6, sl
 8002796:	40b4      	lsls	r4, r6
 8002798:	46a1      	mov	r9, r4
 800279a:	001c      	movs	r4, r3
 800279c:	464e      	mov	r6, r9
 800279e:	40d4      	lsrs	r4, r2
 80027a0:	4326      	orrs	r6, r4
 80027a2:	0034      	movs	r4, r6
 80027a4:	4656      	mov	r6, sl
 80027a6:	40b3      	lsls	r3, r6
 80027a8:	1e5e      	subs	r6, r3, #1
 80027aa:	41b3      	sbcs	r3, r6
 80027ac:	431c      	orrs	r4, r3
 80027ae:	4663      	mov	r3, ip
 80027b0:	40d3      	lsrs	r3, r2
 80027b2:	18c9      	adds	r1, r1, r3
 80027b4:	19e4      	adds	r4, r4, r7
 80027b6:	42bc      	cmp	r4, r7
 80027b8:	41bf      	sbcs	r7, r7
 80027ba:	427f      	negs	r7, r7
 80027bc:	46b9      	mov	r9, r7
 80027be:	4680      	mov	r8, r0
 80027c0:	4489      	add	r9, r1
 80027c2:	e0d8      	b.n	8002976 <__aeabi_dsub+0x426>
 80027c4:	4640      	mov	r0, r8
 80027c6:	4c3b      	ldr	r4, [pc, #236]	; (80028b4 <__aeabi_dsub+0x364>)
 80027c8:	3001      	adds	r0, #1
 80027ca:	4220      	tst	r0, r4
 80027cc:	d000      	beq.n	80027d0 <__aeabi_dsub+0x280>
 80027ce:	e0b4      	b.n	800293a <__aeabi_dsub+0x3ea>
 80027d0:	4640      	mov	r0, r8
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d000      	beq.n	80027d8 <__aeabi_dsub+0x288>
 80027d6:	e144      	b.n	8002a62 <__aeabi_dsub+0x512>
 80027d8:	4660      	mov	r0, ip
 80027da:	4318      	orrs	r0, r3
 80027dc:	d100      	bne.n	80027e0 <__aeabi_dsub+0x290>
 80027de:	e190      	b.n	8002b02 <__aeabi_dsub+0x5b2>
 80027e0:	0008      	movs	r0, r1
 80027e2:	4338      	orrs	r0, r7
 80027e4:	d000      	beq.n	80027e8 <__aeabi_dsub+0x298>
 80027e6:	e1aa      	b.n	8002b3e <__aeabi_dsub+0x5ee>
 80027e8:	4661      	mov	r1, ip
 80027ea:	08db      	lsrs	r3, r3, #3
 80027ec:	0749      	lsls	r1, r1, #29
 80027ee:	430b      	orrs	r3, r1
 80027f0:	4661      	mov	r1, ip
 80027f2:	08cc      	lsrs	r4, r1, #3
 80027f4:	e027      	b.n	8002846 <__aeabi_dsub+0x2f6>
 80027f6:	0008      	movs	r0, r1
 80027f8:	4338      	orrs	r0, r7
 80027fa:	d061      	beq.n	80028c0 <__aeabi_dsub+0x370>
 80027fc:	1e50      	subs	r0, r2, #1
 80027fe:	2a01      	cmp	r2, #1
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x2b4>
 8002802:	e139      	b.n	8002a78 <__aeabi_dsub+0x528>
 8002804:	42a2      	cmp	r2, r4
 8002806:	d027      	beq.n	8002858 <__aeabi_dsub+0x308>
 8002808:	0002      	movs	r2, r0
 800280a:	e75d      	b.n	80026c8 <__aeabi_dsub+0x178>
 800280c:	0002      	movs	r2, r0
 800280e:	391f      	subs	r1, #31
 8002810:	40ca      	lsrs	r2, r1
 8002812:	0011      	movs	r1, r2
 8002814:	2b20      	cmp	r3, #32
 8002816:	d003      	beq.n	8002820 <__aeabi_dsub+0x2d0>
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	4098      	lsls	r0, r3
 800281e:	4304      	orrs	r4, r0
 8002820:	1e63      	subs	r3, r4, #1
 8002822:	419c      	sbcs	r4, r3
 8002824:	2300      	movs	r3, #0
 8002826:	4699      	mov	r9, r3
 8002828:	4698      	mov	r8, r3
 800282a:	430c      	orrs	r4, r1
 800282c:	0763      	lsls	r3, r4, #29
 800282e:	d000      	beq.n	8002832 <__aeabi_dsub+0x2e2>
 8002830:	e712      	b.n	8002658 <__aeabi_dsub+0x108>
 8002832:	464b      	mov	r3, r9
 8002834:	464a      	mov	r2, r9
 8002836:	08e4      	lsrs	r4, r4, #3
 8002838:	075b      	lsls	r3, r3, #29
 800283a:	4323      	orrs	r3, r4
 800283c:	08d4      	lsrs	r4, r2, #3
 800283e:	4642      	mov	r2, r8
 8002840:	4919      	ldr	r1, [pc, #100]	; (80028a8 <__aeabi_dsub+0x358>)
 8002842:	428a      	cmp	r2, r1
 8002844:	d00e      	beq.n	8002864 <__aeabi_dsub+0x314>
 8002846:	0324      	lsls	r4, r4, #12
 8002848:	0552      	lsls	r2, r2, #21
 800284a:	0b24      	lsrs	r4, r4, #12
 800284c:	0d52      	lsrs	r2, r2, #21
 800284e:	e722      	b.n	8002696 <__aeabi_dsub+0x146>
 8002850:	000a      	movs	r2, r1
 8002852:	2400      	movs	r4, #0
 8002854:	2300      	movs	r3, #0
 8002856:	e71e      	b.n	8002696 <__aeabi_dsub+0x146>
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	4662      	mov	r2, ip
 800285c:	0752      	lsls	r2, r2, #29
 800285e:	4313      	orrs	r3, r2
 8002860:	4662      	mov	r2, ip
 8002862:	08d4      	lsrs	r4, r2, #3
 8002864:	001a      	movs	r2, r3
 8002866:	4322      	orrs	r2, r4
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x31c>
 800286a:	e1fc      	b.n	8002c66 <__aeabi_dsub+0x716>
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	0312      	lsls	r2, r2, #12
 8002870:	4314      	orrs	r4, r2
 8002872:	0324      	lsls	r4, r4, #12
 8002874:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <__aeabi_dsub+0x358>)
 8002876:	0b24      	lsrs	r4, r4, #12
 8002878:	e70d      	b.n	8002696 <__aeabi_dsub+0x146>
 800287a:	0020      	movs	r0, r4
 800287c:	f000 fb2c 	bl	8002ed8 <__clzsi2>
 8002880:	0001      	movs	r1, r0
 8002882:	3118      	adds	r1, #24
 8002884:	291f      	cmp	r1, #31
 8002886:	dc00      	bgt.n	800288a <__aeabi_dsub+0x33a>
 8002888:	e6c4      	b.n	8002614 <__aeabi_dsub+0xc4>
 800288a:	3808      	subs	r0, #8
 800288c:	4084      	lsls	r4, r0
 800288e:	4643      	mov	r3, r8
 8002890:	0020      	movs	r0, r4
 8002892:	2400      	movs	r4, #0
 8002894:	4588      	cmp	r8, r1
 8002896:	dc00      	bgt.n	800289a <__aeabi_dsub+0x34a>
 8002898:	e6c8      	b.n	800262c <__aeabi_dsub+0xdc>
 800289a:	4a04      	ldr	r2, [pc, #16]	; (80028ac <__aeabi_dsub+0x35c>)
 800289c:	1a5b      	subs	r3, r3, r1
 800289e:	4010      	ands	r0, r2
 80028a0:	4698      	mov	r8, r3
 80028a2:	4681      	mov	r9, r0
 80028a4:	e6d6      	b.n	8002654 <__aeabi_dsub+0x104>
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	000007ff 	.word	0x000007ff
 80028ac:	ff7fffff 	.word	0xff7fffff
 80028b0:	fffff801 	.word	0xfffff801
 80028b4:	000007fe 	.word	0x000007fe
 80028b8:	430f      	orrs	r7, r1
 80028ba:	1e7a      	subs	r2, r7, #1
 80028bc:	4197      	sbcs	r7, r2
 80028be:	e691      	b.n	80025e4 <__aeabi_dsub+0x94>
 80028c0:	4661      	mov	r1, ip
 80028c2:	08db      	lsrs	r3, r3, #3
 80028c4:	0749      	lsls	r1, r1, #29
 80028c6:	430b      	orrs	r3, r1
 80028c8:	4661      	mov	r1, ip
 80028ca:	08cc      	lsrs	r4, r1, #3
 80028cc:	e7b8      	b.n	8002840 <__aeabi_dsub+0x2f0>
 80028ce:	4640      	mov	r0, r8
 80028d0:	4cd3      	ldr	r4, [pc, #844]	; (8002c20 <__aeabi_dsub+0x6d0>)
 80028d2:	3001      	adds	r0, #1
 80028d4:	4220      	tst	r0, r4
 80028d6:	d000      	beq.n	80028da <__aeabi_dsub+0x38a>
 80028d8:	e0a2      	b.n	8002a20 <__aeabi_dsub+0x4d0>
 80028da:	4640      	mov	r0, r8
 80028dc:	2800      	cmp	r0, #0
 80028de:	d000      	beq.n	80028e2 <__aeabi_dsub+0x392>
 80028e0:	e101      	b.n	8002ae6 <__aeabi_dsub+0x596>
 80028e2:	4660      	mov	r0, ip
 80028e4:	4318      	orrs	r0, r3
 80028e6:	d100      	bne.n	80028ea <__aeabi_dsub+0x39a>
 80028e8:	e15e      	b.n	8002ba8 <__aeabi_dsub+0x658>
 80028ea:	0008      	movs	r0, r1
 80028ec:	4338      	orrs	r0, r7
 80028ee:	d000      	beq.n	80028f2 <__aeabi_dsub+0x3a2>
 80028f0:	e15f      	b.n	8002bb2 <__aeabi_dsub+0x662>
 80028f2:	4661      	mov	r1, ip
 80028f4:	08db      	lsrs	r3, r3, #3
 80028f6:	0749      	lsls	r1, r1, #29
 80028f8:	430b      	orrs	r3, r1
 80028fa:	4661      	mov	r1, ip
 80028fc:	08cc      	lsrs	r4, r1, #3
 80028fe:	e7a2      	b.n	8002846 <__aeabi_dsub+0x2f6>
 8002900:	4dc8      	ldr	r5, [pc, #800]	; (8002c24 <__aeabi_dsub+0x6d4>)
 8002902:	42a8      	cmp	r0, r5
 8002904:	d100      	bne.n	8002908 <__aeabi_dsub+0x3b8>
 8002906:	e0cf      	b.n	8002aa8 <__aeabi_dsub+0x558>
 8002908:	2580      	movs	r5, #128	; 0x80
 800290a:	4664      	mov	r4, ip
 800290c:	042d      	lsls	r5, r5, #16
 800290e:	432c      	orrs	r4, r5
 8002910:	46a4      	mov	ip, r4
 8002912:	2a38      	cmp	r2, #56	; 0x38
 8002914:	dc56      	bgt.n	80029c4 <__aeabi_dsub+0x474>
 8002916:	2a1f      	cmp	r2, #31
 8002918:	dd00      	ble.n	800291c <__aeabi_dsub+0x3cc>
 800291a:	e0d1      	b.n	8002ac0 <__aeabi_dsub+0x570>
 800291c:	2520      	movs	r5, #32
 800291e:	001e      	movs	r6, r3
 8002920:	1aad      	subs	r5, r5, r2
 8002922:	4664      	mov	r4, ip
 8002924:	40ab      	lsls	r3, r5
 8002926:	40ac      	lsls	r4, r5
 8002928:	40d6      	lsrs	r6, r2
 800292a:	1e5d      	subs	r5, r3, #1
 800292c:	41ab      	sbcs	r3, r5
 800292e:	4334      	orrs	r4, r6
 8002930:	4323      	orrs	r3, r4
 8002932:	4664      	mov	r4, ip
 8002934:	40d4      	lsrs	r4, r2
 8002936:	1b09      	subs	r1, r1, r4
 8002938:	e049      	b.n	80029ce <__aeabi_dsub+0x47e>
 800293a:	4660      	mov	r0, ip
 800293c:	1bdc      	subs	r4, r3, r7
 800293e:	1a46      	subs	r6, r0, r1
 8002940:	42a3      	cmp	r3, r4
 8002942:	4180      	sbcs	r0, r0
 8002944:	4240      	negs	r0, r0
 8002946:	4681      	mov	r9, r0
 8002948:	0030      	movs	r0, r6
 800294a:	464e      	mov	r6, r9
 800294c:	1b80      	subs	r0, r0, r6
 800294e:	4681      	mov	r9, r0
 8002950:	0200      	lsls	r0, r0, #8
 8002952:	d476      	bmi.n	8002a42 <__aeabi_dsub+0x4f2>
 8002954:	464b      	mov	r3, r9
 8002956:	4323      	orrs	r3, r4
 8002958:	d000      	beq.n	800295c <__aeabi_dsub+0x40c>
 800295a:	e652      	b.n	8002602 <__aeabi_dsub+0xb2>
 800295c:	2400      	movs	r4, #0
 800295e:	2500      	movs	r5, #0
 8002960:	e771      	b.n	8002846 <__aeabi_dsub+0x2f6>
 8002962:	4339      	orrs	r1, r7
 8002964:	000c      	movs	r4, r1
 8002966:	1e62      	subs	r2, r4, #1
 8002968:	4194      	sbcs	r4, r2
 800296a:	18e4      	adds	r4, r4, r3
 800296c:	429c      	cmp	r4, r3
 800296e:	419b      	sbcs	r3, r3
 8002970:	425b      	negs	r3, r3
 8002972:	4463      	add	r3, ip
 8002974:	4699      	mov	r9, r3
 8002976:	464b      	mov	r3, r9
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	d400      	bmi.n	800297e <__aeabi_dsub+0x42e>
 800297c:	e756      	b.n	800282c <__aeabi_dsub+0x2dc>
 800297e:	2301      	movs	r3, #1
 8002980:	469c      	mov	ip, r3
 8002982:	4ba8      	ldr	r3, [pc, #672]	; (8002c24 <__aeabi_dsub+0x6d4>)
 8002984:	44e0      	add	r8, ip
 8002986:	4598      	cmp	r8, r3
 8002988:	d038      	beq.n	80029fc <__aeabi_dsub+0x4ac>
 800298a:	464b      	mov	r3, r9
 800298c:	48a6      	ldr	r0, [pc, #664]	; (8002c28 <__aeabi_dsub+0x6d8>)
 800298e:	2201      	movs	r2, #1
 8002990:	4003      	ands	r3, r0
 8002992:	0018      	movs	r0, r3
 8002994:	0863      	lsrs	r3, r4, #1
 8002996:	4014      	ands	r4, r2
 8002998:	431c      	orrs	r4, r3
 800299a:	07c3      	lsls	r3, r0, #31
 800299c:	431c      	orrs	r4, r3
 800299e:	0843      	lsrs	r3, r0, #1
 80029a0:	4699      	mov	r9, r3
 80029a2:	e657      	b.n	8002654 <__aeabi_dsub+0x104>
 80029a4:	0010      	movs	r0, r2
 80029a6:	000e      	movs	r6, r1
 80029a8:	3820      	subs	r0, #32
 80029aa:	40c6      	lsrs	r6, r0
 80029ac:	2a20      	cmp	r2, #32
 80029ae:	d004      	beq.n	80029ba <__aeabi_dsub+0x46a>
 80029b0:	2040      	movs	r0, #64	; 0x40
 80029b2:	1a82      	subs	r2, r0, r2
 80029b4:	4091      	lsls	r1, r2
 80029b6:	430f      	orrs	r7, r1
 80029b8:	46b9      	mov	r9, r7
 80029ba:	464f      	mov	r7, r9
 80029bc:	1e7a      	subs	r2, r7, #1
 80029be:	4197      	sbcs	r7, r2
 80029c0:	4337      	orrs	r7, r6
 80029c2:	e60f      	b.n	80025e4 <__aeabi_dsub+0x94>
 80029c4:	4662      	mov	r2, ip
 80029c6:	431a      	orrs	r2, r3
 80029c8:	0013      	movs	r3, r2
 80029ca:	1e5a      	subs	r2, r3, #1
 80029cc:	4193      	sbcs	r3, r2
 80029ce:	1afc      	subs	r4, r7, r3
 80029d0:	42a7      	cmp	r7, r4
 80029d2:	41bf      	sbcs	r7, r7
 80029d4:	427f      	negs	r7, r7
 80029d6:	1bcb      	subs	r3, r1, r7
 80029d8:	4699      	mov	r9, r3
 80029da:	465d      	mov	r5, fp
 80029dc:	4680      	mov	r8, r0
 80029de:	e608      	b.n	80025f2 <__aeabi_dsub+0xa2>
 80029e0:	4666      	mov	r6, ip
 80029e2:	431e      	orrs	r6, r3
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x498>
 80029e6:	e0be      	b.n	8002b66 <__aeabi_dsub+0x616>
 80029e8:	1e56      	subs	r6, r2, #1
 80029ea:	2a01      	cmp	r2, #1
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x4a0>
 80029ee:	e109      	b.n	8002c04 <__aeabi_dsub+0x6b4>
 80029f0:	4c8c      	ldr	r4, [pc, #560]	; (8002c24 <__aeabi_dsub+0x6d4>)
 80029f2:	42a2      	cmp	r2, r4
 80029f4:	d100      	bne.n	80029f8 <__aeabi_dsub+0x4a8>
 80029f6:	e119      	b.n	8002c2c <__aeabi_dsub+0x6dc>
 80029f8:	0032      	movs	r2, r6
 80029fa:	e6c1      	b.n	8002780 <__aeabi_dsub+0x230>
 80029fc:	4642      	mov	r2, r8
 80029fe:	2400      	movs	r4, #0
 8002a00:	2300      	movs	r3, #0
 8002a02:	e648      	b.n	8002696 <__aeabi_dsub+0x146>
 8002a04:	2020      	movs	r0, #32
 8002a06:	000c      	movs	r4, r1
 8002a08:	1a80      	subs	r0, r0, r2
 8002a0a:	003e      	movs	r6, r7
 8002a0c:	4087      	lsls	r7, r0
 8002a0e:	4084      	lsls	r4, r0
 8002a10:	40d6      	lsrs	r6, r2
 8002a12:	1e78      	subs	r0, r7, #1
 8002a14:	4187      	sbcs	r7, r0
 8002a16:	40d1      	lsrs	r1, r2
 8002a18:	4334      	orrs	r4, r6
 8002a1a:	433c      	orrs	r4, r7
 8002a1c:	448c      	add	ip, r1
 8002a1e:	e7a4      	b.n	800296a <__aeabi_dsub+0x41a>
 8002a20:	4a80      	ldr	r2, [pc, #512]	; (8002c24 <__aeabi_dsub+0x6d4>)
 8002a22:	4290      	cmp	r0, r2
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x4d8>
 8002a26:	e0e9      	b.n	8002bfc <__aeabi_dsub+0x6ac>
 8002a28:	19df      	adds	r7, r3, r7
 8002a2a:	429f      	cmp	r7, r3
 8002a2c:	419b      	sbcs	r3, r3
 8002a2e:	4461      	add	r1, ip
 8002a30:	425b      	negs	r3, r3
 8002a32:	18c9      	adds	r1, r1, r3
 8002a34:	07cc      	lsls	r4, r1, #31
 8002a36:	087f      	lsrs	r7, r7, #1
 8002a38:	084b      	lsrs	r3, r1, #1
 8002a3a:	4699      	mov	r9, r3
 8002a3c:	4680      	mov	r8, r0
 8002a3e:	433c      	orrs	r4, r7
 8002a40:	e6f4      	b.n	800282c <__aeabi_dsub+0x2dc>
 8002a42:	1afc      	subs	r4, r7, r3
 8002a44:	42a7      	cmp	r7, r4
 8002a46:	41bf      	sbcs	r7, r7
 8002a48:	4663      	mov	r3, ip
 8002a4a:	427f      	negs	r7, r7
 8002a4c:	1ac9      	subs	r1, r1, r3
 8002a4e:	1bcb      	subs	r3, r1, r7
 8002a50:	4699      	mov	r9, r3
 8002a52:	465d      	mov	r5, fp
 8002a54:	e5d5      	b.n	8002602 <__aeabi_dsub+0xb2>
 8002a56:	08ff      	lsrs	r7, r7, #3
 8002a58:	074b      	lsls	r3, r1, #29
 8002a5a:	465d      	mov	r5, fp
 8002a5c:	433b      	orrs	r3, r7
 8002a5e:	08cc      	lsrs	r4, r1, #3
 8002a60:	e6ee      	b.n	8002840 <__aeabi_dsub+0x2f0>
 8002a62:	4662      	mov	r2, ip
 8002a64:	431a      	orrs	r2, r3
 8002a66:	d000      	beq.n	8002a6a <__aeabi_dsub+0x51a>
 8002a68:	e082      	b.n	8002b70 <__aeabi_dsub+0x620>
 8002a6a:	000b      	movs	r3, r1
 8002a6c:	433b      	orrs	r3, r7
 8002a6e:	d11b      	bne.n	8002aa8 <__aeabi_dsub+0x558>
 8002a70:	2480      	movs	r4, #128	; 0x80
 8002a72:	2500      	movs	r5, #0
 8002a74:	0324      	lsls	r4, r4, #12
 8002a76:	e6f9      	b.n	800286c <__aeabi_dsub+0x31c>
 8002a78:	19dc      	adds	r4, r3, r7
 8002a7a:	429c      	cmp	r4, r3
 8002a7c:	419b      	sbcs	r3, r3
 8002a7e:	4461      	add	r1, ip
 8002a80:	4689      	mov	r9, r1
 8002a82:	425b      	negs	r3, r3
 8002a84:	4499      	add	r9, r3
 8002a86:	464b      	mov	r3, r9
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	d444      	bmi.n	8002b16 <__aeabi_dsub+0x5c6>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	4698      	mov	r8, r3
 8002a90:	e6cc      	b.n	800282c <__aeabi_dsub+0x2dc>
 8002a92:	1bdc      	subs	r4, r3, r7
 8002a94:	4662      	mov	r2, ip
 8002a96:	42a3      	cmp	r3, r4
 8002a98:	419b      	sbcs	r3, r3
 8002a9a:	1a51      	subs	r1, r2, r1
 8002a9c:	425b      	negs	r3, r3
 8002a9e:	1acb      	subs	r3, r1, r3
 8002aa0:	4699      	mov	r9, r3
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	4698      	mov	r8, r3
 8002aa6:	e5a4      	b.n	80025f2 <__aeabi_dsub+0xa2>
 8002aa8:	08ff      	lsrs	r7, r7, #3
 8002aaa:	074b      	lsls	r3, r1, #29
 8002aac:	465d      	mov	r5, fp
 8002aae:	433b      	orrs	r3, r7
 8002ab0:	08cc      	lsrs	r4, r1, #3
 8002ab2:	e6d7      	b.n	8002864 <__aeabi_dsub+0x314>
 8002ab4:	4662      	mov	r2, ip
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	0014      	movs	r4, r2
 8002aba:	1e63      	subs	r3, r4, #1
 8002abc:	419c      	sbcs	r4, r3
 8002abe:	e679      	b.n	80027b4 <__aeabi_dsub+0x264>
 8002ac0:	0015      	movs	r5, r2
 8002ac2:	4664      	mov	r4, ip
 8002ac4:	3d20      	subs	r5, #32
 8002ac6:	40ec      	lsrs	r4, r5
 8002ac8:	46a0      	mov	r8, r4
 8002aca:	2a20      	cmp	r2, #32
 8002acc:	d005      	beq.n	8002ada <__aeabi_dsub+0x58a>
 8002ace:	2540      	movs	r5, #64	; 0x40
 8002ad0:	4664      	mov	r4, ip
 8002ad2:	1aaa      	subs	r2, r5, r2
 8002ad4:	4094      	lsls	r4, r2
 8002ad6:	4323      	orrs	r3, r4
 8002ad8:	469a      	mov	sl, r3
 8002ada:	4654      	mov	r4, sl
 8002adc:	1e63      	subs	r3, r4, #1
 8002ade:	419c      	sbcs	r4, r3
 8002ae0:	4643      	mov	r3, r8
 8002ae2:	4323      	orrs	r3, r4
 8002ae4:	e773      	b.n	80029ce <__aeabi_dsub+0x47e>
 8002ae6:	4662      	mov	r2, ip
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	d023      	beq.n	8002b34 <__aeabi_dsub+0x5e4>
 8002aec:	000a      	movs	r2, r1
 8002aee:	433a      	orrs	r2, r7
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x5a4>
 8002af2:	e0a0      	b.n	8002c36 <__aeabi_dsub+0x6e6>
 8002af4:	4662      	mov	r2, ip
 8002af6:	08db      	lsrs	r3, r3, #3
 8002af8:	0752      	lsls	r2, r2, #29
 8002afa:	4313      	orrs	r3, r2
 8002afc:	4662      	mov	r2, ip
 8002afe:	08d4      	lsrs	r4, r2, #3
 8002b00:	e6b0      	b.n	8002864 <__aeabi_dsub+0x314>
 8002b02:	000b      	movs	r3, r1
 8002b04:	433b      	orrs	r3, r7
 8002b06:	d100      	bne.n	8002b0a <__aeabi_dsub+0x5ba>
 8002b08:	e728      	b.n	800295c <__aeabi_dsub+0x40c>
 8002b0a:	08ff      	lsrs	r7, r7, #3
 8002b0c:	074b      	lsls	r3, r1, #29
 8002b0e:	465d      	mov	r5, fp
 8002b10:	433b      	orrs	r3, r7
 8002b12:	08cc      	lsrs	r4, r1, #3
 8002b14:	e697      	b.n	8002846 <__aeabi_dsub+0x2f6>
 8002b16:	2302      	movs	r3, #2
 8002b18:	4698      	mov	r8, r3
 8002b1a:	e736      	b.n	800298a <__aeabi_dsub+0x43a>
 8002b1c:	1afc      	subs	r4, r7, r3
 8002b1e:	42a7      	cmp	r7, r4
 8002b20:	41bf      	sbcs	r7, r7
 8002b22:	4663      	mov	r3, ip
 8002b24:	427f      	negs	r7, r7
 8002b26:	1ac9      	subs	r1, r1, r3
 8002b28:	1bcb      	subs	r3, r1, r7
 8002b2a:	4699      	mov	r9, r3
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	465d      	mov	r5, fp
 8002b30:	4698      	mov	r8, r3
 8002b32:	e55e      	b.n	80025f2 <__aeabi_dsub+0xa2>
 8002b34:	074b      	lsls	r3, r1, #29
 8002b36:	08ff      	lsrs	r7, r7, #3
 8002b38:	433b      	orrs	r3, r7
 8002b3a:	08cc      	lsrs	r4, r1, #3
 8002b3c:	e692      	b.n	8002864 <__aeabi_dsub+0x314>
 8002b3e:	1bdc      	subs	r4, r3, r7
 8002b40:	4660      	mov	r0, ip
 8002b42:	42a3      	cmp	r3, r4
 8002b44:	41b6      	sbcs	r6, r6
 8002b46:	1a40      	subs	r0, r0, r1
 8002b48:	4276      	negs	r6, r6
 8002b4a:	1b80      	subs	r0, r0, r6
 8002b4c:	4681      	mov	r9, r0
 8002b4e:	0200      	lsls	r0, r0, #8
 8002b50:	d560      	bpl.n	8002c14 <__aeabi_dsub+0x6c4>
 8002b52:	1afc      	subs	r4, r7, r3
 8002b54:	42a7      	cmp	r7, r4
 8002b56:	41bf      	sbcs	r7, r7
 8002b58:	4663      	mov	r3, ip
 8002b5a:	427f      	negs	r7, r7
 8002b5c:	1ac9      	subs	r1, r1, r3
 8002b5e:	1bcb      	subs	r3, r1, r7
 8002b60:	4699      	mov	r9, r3
 8002b62:	465d      	mov	r5, fp
 8002b64:	e576      	b.n	8002654 <__aeabi_dsub+0x104>
 8002b66:	08ff      	lsrs	r7, r7, #3
 8002b68:	074b      	lsls	r3, r1, #29
 8002b6a:	433b      	orrs	r3, r7
 8002b6c:	08cc      	lsrs	r4, r1, #3
 8002b6e:	e667      	b.n	8002840 <__aeabi_dsub+0x2f0>
 8002b70:	000a      	movs	r2, r1
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	433a      	orrs	r2, r7
 8002b76:	d100      	bne.n	8002b7a <__aeabi_dsub+0x62a>
 8002b78:	e66f      	b.n	800285a <__aeabi_dsub+0x30a>
 8002b7a:	4662      	mov	r2, ip
 8002b7c:	0752      	lsls	r2, r2, #29
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	4662      	mov	r2, ip
 8002b82:	08d4      	lsrs	r4, r2, #3
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	4214      	tst	r4, r2
 8002b8a:	d007      	beq.n	8002b9c <__aeabi_dsub+0x64c>
 8002b8c:	08c8      	lsrs	r0, r1, #3
 8002b8e:	4210      	tst	r0, r2
 8002b90:	d104      	bne.n	8002b9c <__aeabi_dsub+0x64c>
 8002b92:	465d      	mov	r5, fp
 8002b94:	0004      	movs	r4, r0
 8002b96:	08fb      	lsrs	r3, r7, #3
 8002b98:	0749      	lsls	r1, r1, #29
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	0f5a      	lsrs	r2, r3, #29
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	08db      	lsrs	r3, r3, #3
 8002ba2:	0752      	lsls	r2, r2, #29
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	e65d      	b.n	8002864 <__aeabi_dsub+0x314>
 8002ba8:	074b      	lsls	r3, r1, #29
 8002baa:	08ff      	lsrs	r7, r7, #3
 8002bac:	433b      	orrs	r3, r7
 8002bae:	08cc      	lsrs	r4, r1, #3
 8002bb0:	e649      	b.n	8002846 <__aeabi_dsub+0x2f6>
 8002bb2:	19dc      	adds	r4, r3, r7
 8002bb4:	429c      	cmp	r4, r3
 8002bb6:	419b      	sbcs	r3, r3
 8002bb8:	4461      	add	r1, ip
 8002bba:	4689      	mov	r9, r1
 8002bbc:	425b      	negs	r3, r3
 8002bbe:	4499      	add	r9, r3
 8002bc0:	464b      	mov	r3, r9
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	d400      	bmi.n	8002bc8 <__aeabi_dsub+0x678>
 8002bc6:	e631      	b.n	800282c <__aeabi_dsub+0x2dc>
 8002bc8:	464a      	mov	r2, r9
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <__aeabi_dsub+0x6d8>)
 8002bcc:	401a      	ands	r2, r3
 8002bce:	2301      	movs	r3, #1
 8002bd0:	4691      	mov	r9, r2
 8002bd2:	4698      	mov	r8, r3
 8002bd4:	e62a      	b.n	800282c <__aeabi_dsub+0x2dc>
 8002bd6:	0016      	movs	r6, r2
 8002bd8:	4664      	mov	r4, ip
 8002bda:	3e20      	subs	r6, #32
 8002bdc:	40f4      	lsrs	r4, r6
 8002bde:	46a0      	mov	r8, r4
 8002be0:	2a20      	cmp	r2, #32
 8002be2:	d005      	beq.n	8002bf0 <__aeabi_dsub+0x6a0>
 8002be4:	2640      	movs	r6, #64	; 0x40
 8002be6:	4664      	mov	r4, ip
 8002be8:	1ab2      	subs	r2, r6, r2
 8002bea:	4094      	lsls	r4, r2
 8002bec:	4323      	orrs	r3, r4
 8002bee:	469a      	mov	sl, r3
 8002bf0:	4654      	mov	r4, sl
 8002bf2:	1e63      	subs	r3, r4, #1
 8002bf4:	419c      	sbcs	r4, r3
 8002bf6:	4643      	mov	r3, r8
 8002bf8:	431c      	orrs	r4, r3
 8002bfa:	e5db      	b.n	80027b4 <__aeabi_dsub+0x264>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	2400      	movs	r4, #0
 8002c00:	2300      	movs	r3, #0
 8002c02:	e548      	b.n	8002696 <__aeabi_dsub+0x146>
 8002c04:	19dc      	adds	r4, r3, r7
 8002c06:	42bc      	cmp	r4, r7
 8002c08:	41bf      	sbcs	r7, r7
 8002c0a:	4461      	add	r1, ip
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	427f      	negs	r7, r7
 8002c10:	44b9      	add	r9, r7
 8002c12:	e738      	b.n	8002a86 <__aeabi_dsub+0x536>
 8002c14:	464b      	mov	r3, r9
 8002c16:	4323      	orrs	r3, r4
 8002c18:	d100      	bne.n	8002c1c <__aeabi_dsub+0x6cc>
 8002c1a:	e69f      	b.n	800295c <__aeabi_dsub+0x40c>
 8002c1c:	e606      	b.n	800282c <__aeabi_dsub+0x2dc>
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	000007fe 	.word	0x000007fe
 8002c24:	000007ff 	.word	0x000007ff
 8002c28:	ff7fffff 	.word	0xff7fffff
 8002c2c:	08ff      	lsrs	r7, r7, #3
 8002c2e:	074b      	lsls	r3, r1, #29
 8002c30:	433b      	orrs	r3, r7
 8002c32:	08cc      	lsrs	r4, r1, #3
 8002c34:	e616      	b.n	8002864 <__aeabi_dsub+0x314>
 8002c36:	4662      	mov	r2, ip
 8002c38:	08db      	lsrs	r3, r3, #3
 8002c3a:	0752      	lsls	r2, r2, #29
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	4662      	mov	r2, ip
 8002c40:	08d4      	lsrs	r4, r2, #3
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	0312      	lsls	r2, r2, #12
 8002c46:	4214      	tst	r4, r2
 8002c48:	d007      	beq.n	8002c5a <__aeabi_dsub+0x70a>
 8002c4a:	08c8      	lsrs	r0, r1, #3
 8002c4c:	4210      	tst	r0, r2
 8002c4e:	d104      	bne.n	8002c5a <__aeabi_dsub+0x70a>
 8002c50:	465d      	mov	r5, fp
 8002c52:	0004      	movs	r4, r0
 8002c54:	08fb      	lsrs	r3, r7, #3
 8002c56:	0749      	lsls	r1, r1, #29
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	0f5a      	lsrs	r2, r3, #29
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	0752      	lsls	r2, r2, #29
 8002c60:	08db      	lsrs	r3, r3, #3
 8002c62:	4313      	orrs	r3, r2
 8002c64:	e5fe      	b.n	8002864 <__aeabi_dsub+0x314>
 8002c66:	2300      	movs	r3, #0
 8002c68:	4a01      	ldr	r2, [pc, #4]	; (8002c70 <__aeabi_dsub+0x720>)
 8002c6a:	001c      	movs	r4, r3
 8002c6c:	e513      	b.n	8002696 <__aeabi_dsub+0x146>
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	000007ff 	.word	0x000007ff

08002c74 <__aeabi_dcmpun>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	0005      	movs	r5, r0
 8002c78:	480c      	ldr	r0, [pc, #48]	; (8002cac <__aeabi_dcmpun+0x38>)
 8002c7a:	031c      	lsls	r4, r3, #12
 8002c7c:	0016      	movs	r6, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	030a      	lsls	r2, r1, #12
 8002c82:	0049      	lsls	r1, r1, #1
 8002c84:	0b12      	lsrs	r2, r2, #12
 8002c86:	0d49      	lsrs	r1, r1, #21
 8002c88:	0b24      	lsrs	r4, r4, #12
 8002c8a:	0d5b      	lsrs	r3, r3, #21
 8002c8c:	4281      	cmp	r1, r0
 8002c8e:	d008      	beq.n	8002ca2 <__aeabi_dcmpun+0x2e>
 8002c90:	4a06      	ldr	r2, [pc, #24]	; (8002cac <__aeabi_dcmpun+0x38>)
 8002c92:	2000      	movs	r0, #0
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d103      	bne.n	8002ca0 <__aeabi_dcmpun+0x2c>
 8002c98:	0020      	movs	r0, r4
 8002c9a:	4330      	orrs	r0, r6
 8002c9c:	1e43      	subs	r3, r0, #1
 8002c9e:	4198      	sbcs	r0, r3
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	432a      	orrs	r2, r5
 8002ca6:	d1fb      	bne.n	8002ca0 <__aeabi_dcmpun+0x2c>
 8002ca8:	e7f2      	b.n	8002c90 <__aeabi_dcmpun+0x1c>
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	000007ff 	.word	0x000007ff

08002cb0 <__aeabi_d2iz>:
 8002cb0:	000a      	movs	r2, r1
 8002cb2:	b530      	push	{r4, r5, lr}
 8002cb4:	4c13      	ldr	r4, [pc, #76]	; (8002d04 <__aeabi_d2iz+0x54>)
 8002cb6:	0053      	lsls	r3, r2, #1
 8002cb8:	0309      	lsls	r1, r1, #12
 8002cba:	0005      	movs	r5, r0
 8002cbc:	0b09      	lsrs	r1, r1, #12
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	0d5b      	lsrs	r3, r3, #21
 8002cc2:	0fd2      	lsrs	r2, r2, #31
 8002cc4:	42a3      	cmp	r3, r4
 8002cc6:	dd04      	ble.n	8002cd2 <__aeabi_d2iz+0x22>
 8002cc8:	480f      	ldr	r0, [pc, #60]	; (8002d08 <__aeabi_d2iz+0x58>)
 8002cca:	4283      	cmp	r3, r0
 8002ccc:	dd02      	ble.n	8002cd4 <__aeabi_d2iz+0x24>
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <__aeabi_d2iz+0x5c>)
 8002cd0:	18d0      	adds	r0, r2, r3
 8002cd2:	bd30      	pop	{r4, r5, pc}
 8002cd4:	2080      	movs	r0, #128	; 0x80
 8002cd6:	0340      	lsls	r0, r0, #13
 8002cd8:	4301      	orrs	r1, r0
 8002cda:	480d      	ldr	r0, [pc, #52]	; (8002d10 <__aeabi_d2iz+0x60>)
 8002cdc:	1ac0      	subs	r0, r0, r3
 8002cde:	281f      	cmp	r0, #31
 8002ce0:	dd08      	ble.n	8002cf4 <__aeabi_d2iz+0x44>
 8002ce2:	480c      	ldr	r0, [pc, #48]	; (8002d14 <__aeabi_d2iz+0x64>)
 8002ce4:	1ac3      	subs	r3, r0, r3
 8002ce6:	40d9      	lsrs	r1, r3
 8002ce8:	000b      	movs	r3, r1
 8002cea:	4258      	negs	r0, r3
 8002cec:	2a00      	cmp	r2, #0
 8002cee:	d1f0      	bne.n	8002cd2 <__aeabi_d2iz+0x22>
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	e7ee      	b.n	8002cd2 <__aeabi_d2iz+0x22>
 8002cf4:	4c08      	ldr	r4, [pc, #32]	; (8002d18 <__aeabi_d2iz+0x68>)
 8002cf6:	40c5      	lsrs	r5, r0
 8002cf8:	46a4      	mov	ip, r4
 8002cfa:	4463      	add	r3, ip
 8002cfc:	4099      	lsls	r1, r3
 8002cfe:	000b      	movs	r3, r1
 8002d00:	432b      	orrs	r3, r5
 8002d02:	e7f2      	b.n	8002cea <__aeabi_d2iz+0x3a>
 8002d04:	000003fe 	.word	0x000003fe
 8002d08:	0000041d 	.word	0x0000041d
 8002d0c:	7fffffff 	.word	0x7fffffff
 8002d10:	00000433 	.word	0x00000433
 8002d14:	00000413 	.word	0x00000413
 8002d18:	fffffbed 	.word	0xfffffbed

08002d1c <__aeabi_i2d>:
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d016      	beq.n	8002d50 <__aeabi_i2d+0x34>
 8002d22:	17c3      	asrs	r3, r0, #31
 8002d24:	18c5      	adds	r5, r0, r3
 8002d26:	405d      	eors	r5, r3
 8002d28:	0fc4      	lsrs	r4, r0, #31
 8002d2a:	0028      	movs	r0, r5
 8002d2c:	f000 f8d4 	bl	8002ed8 <__clzsi2>
 8002d30:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <__aeabi_i2d+0x5c>)
 8002d32:	1a12      	subs	r2, r2, r0
 8002d34:	280a      	cmp	r0, #10
 8002d36:	dc16      	bgt.n	8002d66 <__aeabi_i2d+0x4a>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	002e      	movs	r6, r5
 8002d3c:	3315      	adds	r3, #21
 8002d3e:	409e      	lsls	r6, r3
 8002d40:	230b      	movs	r3, #11
 8002d42:	1a18      	subs	r0, r3, r0
 8002d44:	40c5      	lsrs	r5, r0
 8002d46:	0552      	lsls	r2, r2, #21
 8002d48:	032d      	lsls	r5, r5, #12
 8002d4a:	0b2d      	lsrs	r5, r5, #12
 8002d4c:	0d53      	lsrs	r3, r2, #21
 8002d4e:	e003      	b.n	8002d58 <__aeabi_i2d+0x3c>
 8002d50:	2400      	movs	r4, #0
 8002d52:	2300      	movs	r3, #0
 8002d54:	2500      	movs	r5, #0
 8002d56:	2600      	movs	r6, #0
 8002d58:	051b      	lsls	r3, r3, #20
 8002d5a:	432b      	orrs	r3, r5
 8002d5c:	07e4      	lsls	r4, r4, #31
 8002d5e:	4323      	orrs	r3, r4
 8002d60:	0030      	movs	r0, r6
 8002d62:	0019      	movs	r1, r3
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
 8002d66:	380b      	subs	r0, #11
 8002d68:	4085      	lsls	r5, r0
 8002d6a:	0552      	lsls	r2, r2, #21
 8002d6c:	032d      	lsls	r5, r5, #12
 8002d6e:	2600      	movs	r6, #0
 8002d70:	0b2d      	lsrs	r5, r5, #12
 8002d72:	0d53      	lsrs	r3, r2, #21
 8002d74:	e7f0      	b.n	8002d58 <__aeabi_i2d+0x3c>
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	0000041e 	.word	0x0000041e

08002d7c <__aeabi_ui2d>:
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	1e04      	subs	r4, r0, #0
 8002d80:	d010      	beq.n	8002da4 <__aeabi_ui2d+0x28>
 8002d82:	f000 f8a9 	bl	8002ed8 <__clzsi2>
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <__aeabi_ui2d+0x48>)
 8002d88:	1a1b      	subs	r3, r3, r0
 8002d8a:	280a      	cmp	r0, #10
 8002d8c:	dc11      	bgt.n	8002db2 <__aeabi_ui2d+0x36>
 8002d8e:	220b      	movs	r2, #11
 8002d90:	0021      	movs	r1, r4
 8002d92:	1a12      	subs	r2, r2, r0
 8002d94:	40d1      	lsrs	r1, r2
 8002d96:	3015      	adds	r0, #21
 8002d98:	030a      	lsls	r2, r1, #12
 8002d9a:	055b      	lsls	r3, r3, #21
 8002d9c:	4084      	lsls	r4, r0
 8002d9e:	0b12      	lsrs	r2, r2, #12
 8002da0:	0d5b      	lsrs	r3, r3, #21
 8002da2:	e001      	b.n	8002da8 <__aeabi_ui2d+0x2c>
 8002da4:	2300      	movs	r3, #0
 8002da6:	2200      	movs	r2, #0
 8002da8:	051b      	lsls	r3, r3, #20
 8002daa:	4313      	orrs	r3, r2
 8002dac:	0020      	movs	r0, r4
 8002dae:	0019      	movs	r1, r3
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	0022      	movs	r2, r4
 8002db4:	380b      	subs	r0, #11
 8002db6:	4082      	lsls	r2, r0
 8002db8:	055b      	lsls	r3, r3, #21
 8002dba:	0312      	lsls	r2, r2, #12
 8002dbc:	2400      	movs	r4, #0
 8002dbe:	0b12      	lsrs	r2, r2, #12
 8002dc0:	0d5b      	lsrs	r3, r3, #21
 8002dc2:	e7f1      	b.n	8002da8 <__aeabi_ui2d+0x2c>
 8002dc4:	0000041e 	.word	0x0000041e

08002dc8 <__aeabi_d2f>:
 8002dc8:	0002      	movs	r2, r0
 8002dca:	004b      	lsls	r3, r1, #1
 8002dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dce:	0d5b      	lsrs	r3, r3, #21
 8002dd0:	030c      	lsls	r4, r1, #12
 8002dd2:	4e3d      	ldr	r6, [pc, #244]	; (8002ec8 <__aeabi_d2f+0x100>)
 8002dd4:	0a64      	lsrs	r4, r4, #9
 8002dd6:	0f40      	lsrs	r0, r0, #29
 8002dd8:	1c5f      	adds	r7, r3, #1
 8002dda:	0fc9      	lsrs	r1, r1, #31
 8002ddc:	4304      	orrs	r4, r0
 8002dde:	00d5      	lsls	r5, r2, #3
 8002de0:	4237      	tst	r7, r6
 8002de2:	d00a      	beq.n	8002dfa <__aeabi_d2f+0x32>
 8002de4:	4839      	ldr	r0, [pc, #228]	; (8002ecc <__aeabi_d2f+0x104>)
 8002de6:	181e      	adds	r6, r3, r0
 8002de8:	2efe      	cmp	r6, #254	; 0xfe
 8002dea:	dd16      	ble.n	8002e1a <__aeabi_d2f+0x52>
 8002dec:	20ff      	movs	r0, #255	; 0xff
 8002dee:	2400      	movs	r4, #0
 8002df0:	05c0      	lsls	r0, r0, #23
 8002df2:	4320      	orrs	r0, r4
 8002df4:	07c9      	lsls	r1, r1, #31
 8002df6:	4308      	orrs	r0, r1
 8002df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <__aeabi_d2f+0x44>
 8002dfe:	432c      	orrs	r4, r5
 8002e00:	d026      	beq.n	8002e50 <__aeabi_d2f+0x88>
 8002e02:	2205      	movs	r2, #5
 8002e04:	0192      	lsls	r2, r2, #6
 8002e06:	0a54      	lsrs	r4, r2, #9
 8002e08:	b2d8      	uxtb	r0, r3
 8002e0a:	e7f1      	b.n	8002df0 <__aeabi_d2f+0x28>
 8002e0c:	4325      	orrs	r5, r4
 8002e0e:	d0ed      	beq.n	8002dec <__aeabi_d2f+0x24>
 8002e10:	2080      	movs	r0, #128	; 0x80
 8002e12:	03c0      	lsls	r0, r0, #15
 8002e14:	4304      	orrs	r4, r0
 8002e16:	20ff      	movs	r0, #255	; 0xff
 8002e18:	e7ea      	b.n	8002df0 <__aeabi_d2f+0x28>
 8002e1a:	2e00      	cmp	r6, #0
 8002e1c:	dd1b      	ble.n	8002e56 <__aeabi_d2f+0x8e>
 8002e1e:	0192      	lsls	r2, r2, #6
 8002e20:	1e53      	subs	r3, r2, #1
 8002e22:	419a      	sbcs	r2, r3
 8002e24:	00e4      	lsls	r4, r4, #3
 8002e26:	0f6d      	lsrs	r5, r5, #29
 8002e28:	4322      	orrs	r2, r4
 8002e2a:	432a      	orrs	r2, r5
 8002e2c:	0753      	lsls	r3, r2, #29
 8002e2e:	d048      	beq.n	8002ec2 <__aeabi_d2f+0xfa>
 8002e30:	230f      	movs	r3, #15
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d000      	beq.n	8002e3a <__aeabi_d2f+0x72>
 8002e38:	3204      	adds	r2, #4
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	04db      	lsls	r3, r3, #19
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d03f      	beq.n	8002ec2 <__aeabi_d2f+0xfa>
 8002e42:	1c70      	adds	r0, r6, #1
 8002e44:	2efe      	cmp	r6, #254	; 0xfe
 8002e46:	d0d1      	beq.n	8002dec <__aeabi_d2f+0x24>
 8002e48:	0192      	lsls	r2, r2, #6
 8002e4a:	0a54      	lsrs	r4, r2, #9
 8002e4c:	b2c0      	uxtb	r0, r0
 8002e4e:	e7cf      	b.n	8002df0 <__aeabi_d2f+0x28>
 8002e50:	2000      	movs	r0, #0
 8002e52:	2400      	movs	r4, #0
 8002e54:	e7cc      	b.n	8002df0 <__aeabi_d2f+0x28>
 8002e56:	0032      	movs	r2, r6
 8002e58:	3217      	adds	r2, #23
 8002e5a:	db22      	blt.n	8002ea2 <__aeabi_d2f+0xda>
 8002e5c:	2080      	movs	r0, #128	; 0x80
 8002e5e:	0400      	lsls	r0, r0, #16
 8002e60:	4320      	orrs	r0, r4
 8002e62:	241e      	movs	r4, #30
 8002e64:	1ba4      	subs	r4, r4, r6
 8002e66:	2c1f      	cmp	r4, #31
 8002e68:	dd1d      	ble.n	8002ea6 <__aeabi_d2f+0xde>
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4252      	negs	r2, r2
 8002e6e:	1b96      	subs	r6, r2, r6
 8002e70:	0002      	movs	r2, r0
 8002e72:	40f2      	lsrs	r2, r6
 8002e74:	0016      	movs	r6, r2
 8002e76:	2c20      	cmp	r4, #32
 8002e78:	d004      	beq.n	8002e84 <__aeabi_d2f+0xbc>
 8002e7a:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <__aeabi_d2f+0x108>)
 8002e7c:	4694      	mov	ip, r2
 8002e7e:	4463      	add	r3, ip
 8002e80:	4098      	lsls	r0, r3
 8002e82:	4305      	orrs	r5, r0
 8002e84:	002a      	movs	r2, r5
 8002e86:	1e53      	subs	r3, r2, #1
 8002e88:	419a      	sbcs	r2, r3
 8002e8a:	4332      	orrs	r2, r6
 8002e8c:	2600      	movs	r6, #0
 8002e8e:	0753      	lsls	r3, r2, #29
 8002e90:	d1ce      	bne.n	8002e30 <__aeabi_d2f+0x68>
 8002e92:	2480      	movs	r4, #128	; 0x80
 8002e94:	0013      	movs	r3, r2
 8002e96:	04e4      	lsls	r4, r4, #19
 8002e98:	2001      	movs	r0, #1
 8002e9a:	4023      	ands	r3, r4
 8002e9c:	4222      	tst	r2, r4
 8002e9e:	d1d3      	bne.n	8002e48 <__aeabi_d2f+0x80>
 8002ea0:	e7b0      	b.n	8002e04 <__aeabi_d2f+0x3c>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e7ad      	b.n	8002e02 <__aeabi_d2f+0x3a>
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <__aeabi_d2f+0x10c>)
 8002ea8:	4694      	mov	ip, r2
 8002eaa:	002a      	movs	r2, r5
 8002eac:	40e2      	lsrs	r2, r4
 8002eae:	0014      	movs	r4, r2
 8002eb0:	002a      	movs	r2, r5
 8002eb2:	4463      	add	r3, ip
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	4098      	lsls	r0, r3
 8002eb8:	1e55      	subs	r5, r2, #1
 8002eba:	41aa      	sbcs	r2, r5
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4322      	orrs	r2, r4
 8002ec0:	e7e4      	b.n	8002e8c <__aeabi_d2f+0xc4>
 8002ec2:	0033      	movs	r3, r6
 8002ec4:	e79e      	b.n	8002e04 <__aeabi_d2f+0x3c>
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	000007fe 	.word	0x000007fe
 8002ecc:	fffffc80 	.word	0xfffffc80
 8002ed0:	fffffca2 	.word	0xfffffca2
 8002ed4:	fffffc82 	.word	0xfffffc82

08002ed8 <__clzsi2>:
 8002ed8:	211c      	movs	r1, #28
 8002eda:	2301      	movs	r3, #1
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	4298      	cmp	r0, r3
 8002ee0:	d301      	bcc.n	8002ee6 <__clzsi2+0xe>
 8002ee2:	0c00      	lsrs	r0, r0, #16
 8002ee4:	3910      	subs	r1, #16
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	4298      	cmp	r0, r3
 8002eea:	d301      	bcc.n	8002ef0 <__clzsi2+0x18>
 8002eec:	0a00      	lsrs	r0, r0, #8
 8002eee:	3908      	subs	r1, #8
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	4298      	cmp	r0, r3
 8002ef4:	d301      	bcc.n	8002efa <__clzsi2+0x22>
 8002ef6:	0900      	lsrs	r0, r0, #4
 8002ef8:	3904      	subs	r1, #4
 8002efa:	a202      	add	r2, pc, #8	; (adr r2, 8002f04 <__clzsi2+0x2c>)
 8002efc:	5c10      	ldrb	r0, [r2, r0]
 8002efe:	1840      	adds	r0, r0, r1
 8002f00:	4770      	bx	lr
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	02020304 	.word	0x02020304
 8002f08:	01010101 	.word	0x01010101
	...

08002f14 <__clzdi2>:
 8002f14:	b510      	push	{r4, lr}
 8002f16:	2900      	cmp	r1, #0
 8002f18:	d103      	bne.n	8002f22 <__clzdi2+0xe>
 8002f1a:	f7ff ffdd 	bl	8002ed8 <__clzsi2>
 8002f1e:	3020      	adds	r0, #32
 8002f20:	e002      	b.n	8002f28 <__clzdi2+0x14>
 8002f22:	0008      	movs	r0, r1
 8002f24:	f7ff ffd8 	bl	8002ed8 <__clzsi2>
 8002f28:	bd10      	pop	{r4, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)

08002f2c <new_adc_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hadc is the adc and _total_ranks are the total ranks.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ADCSensor object
ADCSensor *new_adc_sensor(ADC_HandleTypeDef *hadc, uint8_t _total_ranks) {
 8002f2c:	b570      	push	{r4, r5, r6, lr}
 8002f2e:	0006      	movs	r6, r0
    ADCSensor *adc_sensor = (ADCSensor*) malloc(sizeof(ADCSensor));
 8002f30:	201c      	movs	r0, #28
ADCSensor *new_adc_sensor(ADC_HandleTypeDef *hadc, uint8_t _total_ranks) {
 8002f32:	000c      	movs	r4, r1
    ADCSensor *adc_sensor = (ADCSensor*) malloc(sizeof(ADCSensor));
 8002f34:	f003 feb6 	bl	8006ca4 <malloc>
 8002f38:	0005      	movs	r5, r0
    adc_sensor->adc = hadc;
 8002f3a:	6006      	str	r6, [r0, #0]
    adc_sensor->total_ranks = _total_ranks;
 8002f3c:	7104      	strb	r4, [r0, #4]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 8002f3e:	2c00      	cmp	r4, #0
 8002f40:	d004      	beq.n	8002f4c <new_adc_sensor+0x20>
        adc_sensor->values[i] = 0;
 8002f42:	2100      	movs	r1, #0
 8002f44:	0062      	lsls	r2, r4, #1
 8002f46:	3006      	adds	r0, #6
 8002f48:	f003 febf 	bl	8006cca <memset>
    }
    return adc_sensor;
}
 8002f4c:	0028      	movs	r0, r5
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}

08002f50 <get_adc_sensor_value>:
// REQUIRES: adc_sensor is an ADCSensor object and rank is the index
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint16_t get_adc_sensor_value(ADCSensor *adc_sensor, uint8_t rank) {
    return adc_sensor->values[rank];
 8002f50:	0049      	lsls	r1, r1, #1
 8002f52:	1840      	adds	r0, r0, r1
 8002f54:	88c0      	ldrh	r0, [r0, #6]
}
 8002f56:	4770      	bx	lr

08002f58 <update_adc_sensor_values>:

// REQUIRES: adc_sensor is an ADCSensor object
// MODIFIES: values
// EFFECTS: Updates the stored value of value.
void update_adc_sensor_values(ADCSensor *adc_sensor) {
 8002f58:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 8002f5a:	7902      	ldrb	r2, [r0, #4]
void update_adc_sensor_values(ADCSensor *adc_sensor) {
 8002f5c:	0005      	movs	r5, r0
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 8002f5e:	2400      	movs	r4, #0
		HAL_ADC_Start_DMA(adc_sensor->adc, adc_sensor->values, adc_sensor->total_ranks);
 8002f60:	1d86      	adds	r6, r0, #6
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	d007      	beq.n	8002f76 <update_adc_sensor_values+0x1e>
		HAL_ADC_Start_DMA(adc_sensor->adc, adc_sensor->values, adc_sensor->total_ranks);
 8002f66:	0031      	movs	r1, r6
 8002f68:	6828      	ldr	r0, [r5, #0]
 8002f6a:	f001 fcc9 	bl	8004900 <HAL_ADC_Start_DMA>
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 8002f6e:	792a      	ldrb	r2, [r5, #4]
 8002f70:	3401      	adds	r4, #1
 8002f72:	42a2      	cmp	r2, r4
 8002f74:	dcf7      	bgt.n	8002f66 <update_adc_sensor_values+0xe>
	}
}
 8002f76:	bd70      	pop	{r4, r5, r6, pc}

08002f78 <new_battery_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created BatterySensor object
BatterySensor *new_battery_sensor(ADCSensor *_adc_sensor, uint8_t _rank) {
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	0005      	movs	r5, r0
	BatterySensor *battery_sensor = (BatterySensor*) malloc(sizeof(BatterySensor));
 8002f7c:	2008      	movs	r0, #8
BatterySensor *new_battery_sensor(ADCSensor *_adc_sensor, uint8_t _rank) {
 8002f7e:	000c      	movs	r4, r1
	BatterySensor *battery_sensor = (BatterySensor*) malloc(sizeof(BatterySensor));
 8002f80:	f003 fe90 	bl	8006ca4 <malloc>
	battery_sensor->adc_sensor = _adc_sensor;
 8002f84:	6005      	str	r5, [r0, #0]
	battery_sensor->rank = _rank;
 8002f86:	7104      	strb	r4, [r0, #4]
	return battery_sensor;
}
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)

08002f8c <get_battery_sensor_data>:

// REQUIRES: battery_sensor is a BatterySensor object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value battery sensor data.
uint8_t get_battery_sensor_data(BatterySensor *battery_sensor) {
 8002f8c:	b510      	push	{r4, lr}
    uint32_t raw_value = get_adc_sensor_value(battery_sensor->adc_sensor, battery_sensor->rank);
 8002f8e:	7901      	ldrb	r1, [r0, #4]
 8002f90:	6800      	ldr	r0, [r0, #0]
 8002f92:	f7ff ffdd 	bl	8002f50 <get_adc_sensor_value>
    float voltage = raw_value * 3.3f / 64.0;
 8002f96:	f7fe f8ef 	bl	8001178 <__aeabi_ui2f>
 8002f9a:	490f      	ldr	r1, [pc, #60]	; (8002fd8 <get_battery_sensor_data+0x4c>)
 8002f9c:	f7fd fdf8 	bl	8000b90 <__aeabi_fmul>
 8002fa0:	21f2      	movs	r1, #242	; 0xf2
 8002fa2:	0589      	lsls	r1, r1, #22
 8002fa4:	f7fd fdf4 	bl	8000b90 <__aeabi_fmul>
    if (voltage > BATTERY_SENSOR_FIVE_BATTERY) {
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <get_battery_sensor_data+0x50>)
    float voltage = raw_value * 3.3f / 64.0;
 8002faa:	1c04      	adds	r4, r0, #0
    if (voltage > BATTERY_SENSOR_FIVE_BATTERY) {
 8002fac:	f7fd faa0 	bl	80004f0 <__aeabi_fcmpgt>
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d10c      	bne.n	8002fce <get_battery_sensor_data+0x42>
    	return 5;
    }
    else if (voltage > BATTERY_SENSOR_THREE_BATTERY) {
 8002fb4:	490a      	ldr	r1, [pc, #40]	; (8002fe0 <get_battery_sensor_data+0x54>)
 8002fb6:	1c20      	adds	r0, r4, #0
 8002fb8:	f7fd fa9a 	bl	80004f0 <__aeabi_fcmpgt>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d108      	bne.n	8002fd2 <get_battery_sensor_data+0x46>
//    	return 3;
    	return 2; // This is done temporarily to make noise for the controller. (It only makes noise at 2 or less).
    }
    else if (voltage > BATTERY_SENSOR_TWO_BATTERY) {
 8002fc0:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <get_battery_sensor_data+0x58>)
 8002fc2:	1c20      	adds	r0, r4, #0
 8002fc4:	f7fd fa94 	bl	80004f0 <__aeabi_fcmpgt>
    	return 5;
 8002fc8:	1e43      	subs	r3, r0, #1
 8002fca:	4198      	sbcs	r0, r3
//    	return 2;
    	return 1; // This is done temporarily to make noise for the controller. (It only makes noise at 2 or less).
    }
    return 0;
}
 8002fcc:	bd10      	pop	{r4, pc}
    	return 5;
 8002fce:	2005      	movs	r0, #5
 8002fd0:	e7fc      	b.n	8002fcc <get_battery_sensor_data+0x40>
    	return 2; // This is done temporarily to make noise for the controller. (It only makes noise at 2 or less).
 8002fd2:	2002      	movs	r0, #2
 8002fd4:	e7fa      	b.n	8002fcc <get_battery_sensor_data+0x40>
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	40533333 	.word	0x40533333
 8002fdc:	3faccccd 	.word	0x3faccccd
 8002fe0:	3f8ccccd 	.word	0x3f8ccccd
 8002fe4:	3f333333 	.word	0x3f333333

08002fe8 <new_wireless>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: huart is a UART channel
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Wireless object
Wireless *new_wireless(UART_HandleTypeDef *huart) {
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	0004      	movs	r4, r0
	Wireless *wireless = (Wireless*) malloc(sizeof(Wireless));
 8002fec:	2018      	movs	r0, #24
 8002fee:	f003 fe59 	bl	8006ca4 <malloc>
	wireless->uart = huart;
 8002ff2:	6004      	str	r4, [r0, #0]
	return wireless;
}
 8002ff4:	bd10      	pop	{r4, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)

08002ff8 <refresh_wireless_status>:
// REQUIRES: wireless is a Wireless object
// MODIFIES: Nothing
// EFFECTS: Increases ms_since_comms.
// Assumes function is called every 2 ms
void refresh_wireless_status(Wireless *wireless) {
	wireless->ms_since_comms += 2;
 8002ff8:	6943      	ldr	r3, [r0, #20]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	6143      	str	r3, [r0, #20]
}
 8002ffe:	4770      	bx	lr

08003000 <is_wireless_comms_lost>:

// REQUIRES: wireless is a Wireless object
// MODIFIES: Nothing
// EFFECTS: Returns whether or not wireless comms were lost
bool is_wireless_comms_lost(Wireless *wireless) {
	return wireless->ms_since_comms >= TIME_INDICATING_WIRELESS_COMMS_LOST_MS;
 8003000:	6943      	ldr	r3, [r0, #20]
 8003002:	4802      	ldr	r0, [pc, #8]	; (800300c <is_wireless_comms_lost+0xc>)
 8003004:	4298      	cmp	r0, r3
 8003006:	4180      	sbcs	r0, r0
 8003008:	4240      	negs	r0, r0
}
 800300a:	4770      	bx	lr
 800300c:	00000bb7 	.word	0x00000bb7

08003010 <send_wireless_speed>:

// REQUIRES: wireless is a Wireless object
// and speed is the speed data
// MODIFIES: Nothing
// EFFECTS: Sends speed data over wireless
void send_wireless_speed(Wireless *wireless, int speed) {
 8003010:	b510      	push	{r4, lr}
 8003012:	0004      	movs	r4, r0
 8003014:	b084      	sub	sp, #16
 8003016:	000a      	movs	r2, r1
	char string[sizeof(wireless->uart_buffer)];
	sprintf((char *)string, "S%iES%iE", speed, speed);
 8003018:	000b      	movs	r3, r1
 800301a:	a801      	add	r0, sp, #4
 800301c:	4908      	ldr	r1, [pc, #32]	; (8003040 <send_wireless_speed+0x30>)
 800301e:	f004 fdcb 	bl	8007bb8 <siprintf>
// REQUIRES: wireless is a Wireless object
// and string is an array of 10 characters.
// MODIFIES: Nothing
// EFFECTS: Sends the character array over wireless
void send_wireless_string_10(Wireless *wireless, char string[10]) {
	HAL_Delay(50);
 8003022:	2032      	movs	r0, #50	; 0x32
 8003024:	f001 f93e 	bl	80042a4 <HAL_Delay>
	HAL_UART_Transmit(wireless->uart, (uint8_t *)string, sizeof(wireless->uart_buffer), 200);
 8003028:	23c8      	movs	r3, #200	; 0xc8
 800302a:	220a      	movs	r2, #10
 800302c:	a901      	add	r1, sp, #4
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	f003 fc0a 	bl	8006848 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003034:	2032      	movs	r0, #50	; 0x32
 8003036:	f001 f935 	bl	80042a4 <HAL_Delay>
}
 800303a:	b004      	add	sp, #16
 800303c:	bd10      	pop	{r4, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	0800b870 	.word	0x0800b870

08003044 <send_wireless_detect_skater_status>:
void send_wireless_detect_skater_status(Wireless *wireless, uint8_t skater_status) {
 8003044:	b510      	push	{r4, lr}
 8003046:	0004      	movs	r4, r0
 8003048:	b084      	sub	sp, #16
 800304a:	000a      	movs	r2, r1
	sprintf((char *)string, "D%iED%iE", skater_status, skater_status);
 800304c:	000b      	movs	r3, r1
 800304e:	a801      	add	r0, sp, #4
 8003050:	4908      	ldr	r1, [pc, #32]	; (8003074 <send_wireless_detect_skater_status+0x30>)
 8003052:	f004 fdb1 	bl	8007bb8 <siprintf>
	HAL_Delay(50);
 8003056:	2032      	movs	r0, #50	; 0x32
 8003058:	f001 f924 	bl	80042a4 <HAL_Delay>
	HAL_UART_Transmit(wireless->uart, (uint8_t *)string, sizeof(wireless->uart_buffer), 200);
 800305c:	23c8      	movs	r3, #200	; 0xc8
 800305e:	220a      	movs	r2, #10
 8003060:	a901      	add	r1, sp, #4
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	f003 fbf0 	bl	8006848 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003068:	2032      	movs	r0, #50	; 0x32
 800306a:	f001 f91b 	bl	80042a4 <HAL_Delay>
}
 800306e:	b004      	add	sp, #16
 8003070:	bd10      	pop	{r4, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	0800b87c 	.word	0x0800b87c

08003078 <send_wireless_battery_data>:
void send_wireless_battery_data(Wireless *wireless, int battery_data) {
 8003078:	b510      	push	{r4, lr}
 800307a:	0004      	movs	r4, r0
 800307c:	b084      	sub	sp, #16
 800307e:	000a      	movs	r2, r1
	sprintf((char *)string, "B%iEB%iE", battery_data, battery_data);
 8003080:	000b      	movs	r3, r1
 8003082:	a801      	add	r0, sp, #4
 8003084:	4908      	ldr	r1, [pc, #32]	; (80030a8 <send_wireless_battery_data+0x30>)
 8003086:	f004 fd97 	bl	8007bb8 <siprintf>
	HAL_Delay(50);
 800308a:	2032      	movs	r0, #50	; 0x32
 800308c:	f001 f90a 	bl	80042a4 <HAL_Delay>
	HAL_UART_Transmit(wireless->uart, (uint8_t *)string, sizeof(wireless->uart_buffer), 200);
 8003090:	23c8      	movs	r3, #200	; 0xc8
 8003092:	220a      	movs	r2, #10
 8003094:	a901      	add	r1, sp, #4
 8003096:	6820      	ldr	r0, [r4, #0]
 8003098:	f003 fbd6 	bl	8006848 <HAL_UART_Transmit>
	HAL_Delay(50);
 800309c:	2032      	movs	r0, #50	; 0x32
 800309e:	f001 f901 	bl	80042a4 <HAL_Delay>
}
 80030a2:	b004      	add	sp, #16
 80030a4:	bd10      	pop	{r4, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	0800b888 	.word	0x0800b888

080030ac <parse_wireless_message>:
bool parse_wireless_message(Wireless *wireless, char start_char) {
 80030ac:	b530      	push	{r4, r5, lr}
		if (wireless->uart_buffer[i] == start_char && isdigit((unsigned char)wireless->uart_buffer[i + 1])) {
 80030ae:	7903      	ldrb	r3, [r0, #4]
bool parse_wireless_message(Wireless *wireless, char start_char) {
 80030b0:	0004      	movs	r4, r0
		if (wireless->uart_buffer[i] == start_char && isdigit((unsigned char)wireless->uart_buffer[i + 1])) {
 80030b2:	7942      	ldrb	r2, [r0, #5]
bool parse_wireless_message(Wireless *wireless, char start_char) {
 80030b4:	b083      	sub	sp, #12
		if (wireless->uart_buffer[i] == start_char && isdigit((unsigned char)wireless->uart_buffer[i + 1])) {
 80030b6:	428b      	cmp	r3, r1
 80030b8:	d021      	beq.n	80030fe <parse_wireless_message+0x52>
 80030ba:	428a      	cmp	r2, r1
 80030bc:	d100      	bne.n	80030c0 <parse_wireless_message+0x14>
 80030be:	e078      	b.n	80031b2 <parse_wireless_message+0x106>
 80030c0:	79a2      	ldrb	r2, [r4, #6]
 80030c2:	428a      	cmp	r2, r1
 80030c4:	d100      	bne.n	80030c8 <parse_wireless_message+0x1c>
 80030c6:	e07c      	b.n	80031c2 <parse_wireless_message+0x116>
 80030c8:	79e2      	ldrb	r2, [r4, #7]
 80030ca:	428a      	cmp	r2, r1
 80030cc:	d100      	bne.n	80030d0 <parse_wireless_message+0x24>
 80030ce:	e080      	b.n	80031d2 <parse_wireless_message+0x126>
 80030d0:	7a22      	ldrb	r2, [r4, #8]
 80030d2:	428a      	cmp	r2, r1
 80030d4:	d100      	bne.n	80030d8 <parse_wireless_message+0x2c>
 80030d6:	e084      	b.n	80031e2 <parse_wireless_message+0x136>
 80030d8:	7a62      	ldrb	r2, [r4, #9]
 80030da:	428a      	cmp	r2, r1
 80030dc:	d100      	bne.n	80030e0 <parse_wireless_message+0x34>
 80030de:	e088      	b.n	80031f2 <parse_wireless_message+0x146>
 80030e0:	7aa2      	ldrb	r2, [r4, #10]
 80030e2:	428a      	cmp	r2, r1
 80030e4:	d100      	bne.n	80030e8 <parse_wireless_message+0x3c>
 80030e6:	e08c      	b.n	8003202 <parse_wireless_message+0x156>
 80030e8:	7ae2      	ldrb	r2, [r4, #11]
 80030ea:	428a      	cmp	r2, r1
 80030ec:	d100      	bne.n	80030f0 <parse_wireless_message+0x44>
 80030ee:	e090      	b.n	8003212 <parse_wireless_message+0x166>
 80030f0:	7b22      	ldrb	r2, [r4, #12]
	if (start_of_transmit == -1) return false;
 80030f2:	2000      	movs	r0, #0
		if (wireless->uart_buffer[i] == start_char && isdigit((unsigned char)wireless->uart_buffer[i + 1])) {
 80030f4:	428a      	cmp	r2, r1
 80030f6:	d100      	bne.n	80030fa <parse_wireless_message+0x4e>
 80030f8:	e093      	b.n	8003222 <parse_wireless_message+0x176>
}
 80030fa:	b003      	add	sp, #12
 80030fc:	bd30      	pop	{r4, r5, pc}
		if (wireless->uart_buffer[i] == start_char && isdigit((unsigned char)wireless->uart_buffer[i + 1])) {
 80030fe:	4b54      	ldr	r3, [pc, #336]	; (8003250 <parse_wireless_message+0x1a4>)
 8003100:	5c98      	ldrb	r0, [r3, r2]
 8003102:	0740      	lsls	r0, r0, #29
 8003104:	d5d9      	bpl.n	80030ba <parse_wireless_message+0xe>
 8003106:	2101      	movs	r1, #1
		if (wireless->uart_buffer[i] == 'E') {
 8003108:	1862      	adds	r2, r4, r1
 800310a:	7912      	ldrb	r2, [r2, #4]
 800310c:	2a45      	cmp	r2, #69	; 0x45
 800310e:	d100      	bne.n	8003112 <parse_wireless_message+0x66>
 8003110:	e09c      	b.n	800324c <parse_wireless_message+0x1a0>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 8003112:	1c4a      	adds	r2, r1, #1
 8003114:	2909      	cmp	r1, #9
 8003116:	d04a      	beq.n	80031ae <parse_wireless_message+0x102>
		if (wireless->uart_buffer[i] == 'E') {
 8003118:	18a0      	adds	r0, r4, r2
 800311a:	7900      	ldrb	r0, [r0, #4]
 800311c:	2845      	cmp	r0, #69	; 0x45
 800311e:	d100      	bne.n	8003122 <parse_wireless_message+0x76>
 8003120:	e088      	b.n	8003234 <parse_wireless_message+0x188>
			if (!isdigit(wireless->uart_buffer[i])) return false;
 8003122:	5c1a      	ldrb	r2, [r3, r0]
 8003124:	2004      	movs	r0, #4
 8003126:	4210      	tst	r0, r2
 8003128:	d041      	beq.n	80031ae <parse_wireless_message+0x102>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 800312a:	1c8a      	adds	r2, r1, #2
 800312c:	2908      	cmp	r1, #8
 800312e:	d03e      	beq.n	80031ae <parse_wireless_message+0x102>
		if (wireless->uart_buffer[i] == 'E') {
 8003130:	18a5      	adds	r5, r4, r2
 8003132:	792d      	ldrb	r5, [r5, #4]
 8003134:	2d45      	cmp	r5, #69	; 0x45
 8003136:	d07d      	beq.n	8003234 <parse_wireless_message+0x188>
			if (!isdigit(wireless->uart_buffer[i])) return false;
 8003138:	5d5a      	ldrb	r2, [r3, r5]
 800313a:	4210      	tst	r0, r2
 800313c:	d037      	beq.n	80031ae <parse_wireless_message+0x102>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 800313e:	1cca      	adds	r2, r1, #3
 8003140:	2907      	cmp	r1, #7
 8003142:	d034      	beq.n	80031ae <parse_wireless_message+0x102>
		if (wireless->uart_buffer[i] == 'E') {
 8003144:	18a5      	adds	r5, r4, r2
 8003146:	792d      	ldrb	r5, [r5, #4]
 8003148:	2d45      	cmp	r5, #69	; 0x45
 800314a:	d073      	beq.n	8003234 <parse_wireless_message+0x188>
			if (!isdigit(wireless->uart_buffer[i])) return false;
 800314c:	5d5a      	ldrb	r2, [r3, r5]
 800314e:	4210      	tst	r0, r2
 8003150:	d02d      	beq.n	80031ae <parse_wireless_message+0x102>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 8003152:	1d0a      	adds	r2, r1, #4
 8003154:	2906      	cmp	r1, #6
 8003156:	d02a      	beq.n	80031ae <parse_wireless_message+0x102>
		if (wireless->uart_buffer[i] == 'E') {
 8003158:	18a0      	adds	r0, r4, r2
 800315a:	7900      	ldrb	r0, [r0, #4]
 800315c:	2845      	cmp	r0, #69	; 0x45
 800315e:	d069      	beq.n	8003234 <parse_wireless_message+0x188>
			if (!isdigit(wireless->uart_buffer[i])) return false;
 8003160:	5c1a      	ldrb	r2, [r3, r0]
 8003162:	2004      	movs	r0, #4
 8003164:	4210      	tst	r0, r2
 8003166:	d022      	beq.n	80031ae <parse_wireless_message+0x102>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 8003168:	1d4a      	adds	r2, r1, #5
 800316a:	2905      	cmp	r1, #5
 800316c:	d01f      	beq.n	80031ae <parse_wireless_message+0x102>
		if (wireless->uart_buffer[i] == 'E') {
 800316e:	18a5      	adds	r5, r4, r2
 8003170:	792d      	ldrb	r5, [r5, #4]
 8003172:	2d45      	cmp	r5, #69	; 0x45
 8003174:	d05e      	beq.n	8003234 <parse_wireless_message+0x188>
			if (!isdigit(wireless->uart_buffer[i])) return false;
 8003176:	5d5a      	ldrb	r2, [r3, r5]
 8003178:	4210      	tst	r0, r2
 800317a:	d018      	beq.n	80031ae <parse_wireless_message+0x102>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 800317c:	1d8a      	adds	r2, r1, #6
 800317e:	2904      	cmp	r1, #4
 8003180:	d015      	beq.n	80031ae <parse_wireless_message+0x102>
		if (wireless->uart_buffer[i] == 'E') {
 8003182:	18a5      	adds	r5, r4, r2
 8003184:	792d      	ldrb	r5, [r5, #4]
 8003186:	2d45      	cmp	r5, #69	; 0x45
 8003188:	d054      	beq.n	8003234 <parse_wireless_message+0x188>
			if (!isdigit(wireless->uart_buffer[i])) return false;
 800318a:	5d5a      	ldrb	r2, [r3, r5]
 800318c:	4210      	tst	r0, r2
 800318e:	d00e      	beq.n	80031ae <parse_wireless_message+0x102>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 8003190:	1dca      	adds	r2, r1, #7
 8003192:	2903      	cmp	r1, #3
 8003194:	d00b      	beq.n	80031ae <parse_wireless_message+0x102>
		if (wireless->uart_buffer[i] == 'E') {
 8003196:	18a0      	adds	r0, r4, r2
 8003198:	7900      	ldrb	r0, [r0, #4]
 800319a:	2845      	cmp	r0, #69	; 0x45
 800319c:	d04a      	beq.n	8003234 <parse_wireless_message+0x188>
			if (!isdigit(wireless->uart_buffer[i])) return false;
 800319e:	5c1b      	ldrb	r3, [r3, r0]
 80031a0:	075b      	lsls	r3, r3, #29
 80031a2:	d504      	bpl.n	80031ae <parse_wireless_message+0x102>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 80031a4:	2901      	cmp	r1, #1
 80031a6:	d102      	bne.n	80031ae <parse_wireless_message+0x102>
		if (wireless->uart_buffer[i] == 'E') {
 80031a8:	7b63      	ldrb	r3, [r4, #13]
 80031aa:	2b45      	cmp	r3, #69	; 0x45
 80031ac:	d041      	beq.n	8003232 <parse_wireless_message+0x186>
	if (start_of_transmit == -1) return false;
 80031ae:	2000      	movs	r0, #0
 80031b0:	e7a3      	b.n	80030fa <parse_wireless_message+0x4e>
		if (wireless->uart_buffer[i] == start_char && isdigit((unsigned char)wireless->uart_buffer[i + 1])) {
 80031b2:	79a2      	ldrb	r2, [r4, #6]
 80031b4:	4b26      	ldr	r3, [pc, #152]	; (8003250 <parse_wireless_message+0x1a4>)
 80031b6:	5c98      	ldrb	r0, [r3, r2]
 80031b8:	0740      	lsls	r0, r0, #29
 80031ba:	d400      	bmi.n	80031be <parse_wireless_message+0x112>
 80031bc:	e781      	b.n	80030c2 <parse_wireless_message+0x16>
 80031be:	2102      	movs	r1, #2
 80031c0:	e7a2      	b.n	8003108 <parse_wireless_message+0x5c>
 80031c2:	79e2      	ldrb	r2, [r4, #7]
 80031c4:	4b22      	ldr	r3, [pc, #136]	; (8003250 <parse_wireless_message+0x1a4>)
 80031c6:	5c98      	ldrb	r0, [r3, r2]
 80031c8:	0740      	lsls	r0, r0, #29
 80031ca:	d400      	bmi.n	80031ce <parse_wireless_message+0x122>
 80031cc:	e77d      	b.n	80030ca <parse_wireless_message+0x1e>
 80031ce:	2103      	movs	r1, #3
 80031d0:	e79a      	b.n	8003108 <parse_wireless_message+0x5c>
 80031d2:	7a22      	ldrb	r2, [r4, #8]
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <parse_wireless_message+0x1a4>)
 80031d6:	5c98      	ldrb	r0, [r3, r2]
 80031d8:	0740      	lsls	r0, r0, #29
 80031da:	d400      	bmi.n	80031de <parse_wireless_message+0x132>
 80031dc:	e779      	b.n	80030d2 <parse_wireless_message+0x26>
 80031de:	2104      	movs	r1, #4
 80031e0:	e792      	b.n	8003108 <parse_wireless_message+0x5c>
 80031e2:	7a62      	ldrb	r2, [r4, #9]
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <parse_wireless_message+0x1a4>)
 80031e6:	5c98      	ldrb	r0, [r3, r2]
 80031e8:	0740      	lsls	r0, r0, #29
 80031ea:	d400      	bmi.n	80031ee <parse_wireless_message+0x142>
 80031ec:	e775      	b.n	80030da <parse_wireless_message+0x2e>
 80031ee:	2105      	movs	r1, #5
 80031f0:	e78a      	b.n	8003108 <parse_wireless_message+0x5c>
 80031f2:	7aa2      	ldrb	r2, [r4, #10]
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <parse_wireless_message+0x1a4>)
 80031f6:	5c98      	ldrb	r0, [r3, r2]
 80031f8:	0740      	lsls	r0, r0, #29
 80031fa:	d400      	bmi.n	80031fe <parse_wireless_message+0x152>
 80031fc:	e771      	b.n	80030e2 <parse_wireless_message+0x36>
 80031fe:	2106      	movs	r1, #6
 8003200:	e782      	b.n	8003108 <parse_wireless_message+0x5c>
 8003202:	7ae2      	ldrb	r2, [r4, #11]
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <parse_wireless_message+0x1a4>)
 8003206:	5c98      	ldrb	r0, [r3, r2]
 8003208:	0740      	lsls	r0, r0, #29
 800320a:	d400      	bmi.n	800320e <parse_wireless_message+0x162>
 800320c:	e76d      	b.n	80030ea <parse_wireless_message+0x3e>
 800320e:	2107      	movs	r1, #7
 8003210:	e77a      	b.n	8003108 <parse_wireless_message+0x5c>
 8003212:	7b22      	ldrb	r2, [r4, #12]
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <parse_wireless_message+0x1a4>)
 8003216:	5c98      	ldrb	r0, [r3, r2]
 8003218:	0740      	lsls	r0, r0, #29
 800321a:	d400      	bmi.n	800321e <parse_wireless_message+0x172>
 800321c:	e769      	b.n	80030f2 <parse_wireless_message+0x46>
 800321e:	2108      	movs	r1, #8
 8003220:	e772      	b.n	8003108 <parse_wireless_message+0x5c>
 8003222:	7b62      	ldrb	r2, [r4, #13]
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <parse_wireless_message+0x1a4>)
 8003226:	5c9a      	ldrb	r2, [r3, r2]
 8003228:	0752      	lsls	r2, r2, #29
 800322a:	d400      	bmi.n	800322e <parse_wireless_message+0x182>
 800322c:	e765      	b.n	80030fa <parse_wireless_message+0x4e>
 800322e:	2109      	movs	r1, #9
 8003230:	e76a      	b.n	8003108 <parse_wireless_message+0x5c>
 8003232:	2209      	movs	r2, #9
	memcpy(contents_string, wireless->uart_buffer + start_of_transmit, length);
 8003234:	1d23      	adds	r3, r4, #4
	int length = end_of_transmit - start_of_transmit;
 8003236:	1a52      	subs	r2, r2, r1
	memcpy(contents_string, wireless->uart_buffer + start_of_transmit, length);
 8003238:	4668      	mov	r0, sp
 800323a:	1859      	adds	r1, r3, r1
 800323c:	f003 fd3c 	bl	8006cb8 <memcpy>
	int content = atoi(contents_string);
 8003240:	4668      	mov	r0, sp
 8003242:	f003 fcff 	bl	8006c44 <atoi>
	wireless->message_contents = content;
 8003246:	6120      	str	r0, [r4, #16]
	return true;
 8003248:	2001      	movs	r0, #1
 800324a:	e756      	b.n	80030fa <parse_wireless_message+0x4e>
		if (wireless->uart_buffer[i] == 'E') {
 800324c:	000a      	movs	r2, r1
 800324e:	e7f1      	b.n	8003234 <parse_wireless_message+0x188>
 8003250:	0800b921 	.word	0x0800b921

08003254 <receive_wireless>:
void receive_wireless(Wireless *wireless, Skater* skater, Joint* joint) {
 8003254:	b570      	push	{r4, r5, r6, lr}
 8003256:	000d      	movs	r5, r1
	HAL_UART_Receive_DMA(wireless->uart, (uint8_t *)wireless->uart_buffer, sizeof(wireless->uart_buffer));
 8003258:	0001      	movs	r1, r0
void receive_wireless(Wireless *wireless, Skater* skater, Joint* joint) {
 800325a:	0004      	movs	r4, r0
 800325c:	0016      	movs	r6, r2
	HAL_UART_Receive_DMA(wireless->uart, (uint8_t *)wireless->uart_buffer, sizeof(wireless->uart_buffer));
 800325e:	c901      	ldmia	r1!, {r0}
 8003260:	220a      	movs	r2, #10
 8003262:	f002 ffad 	bl	80061c0 <HAL_UART_Receive_DMA>
	bool target_success = parse_wireless_message(wireless, 'T');
 8003266:	2154      	movs	r1, #84	; 0x54
 8003268:	0020      	movs	r0, r4
 800326a:	f7ff ff1f 	bl	80030ac <parse_wireless_message>
	if (target_success) {
 800326e:	2800      	cmp	r0, #0
 8003270:	d10a      	bne.n	8003288 <receive_wireless+0x34>
	bool calib_success = parse_wireless_message(wireless, 'C');
 8003272:	2143      	movs	r1, #67	; 0x43
 8003274:	0020      	movs	r0, r4
 8003276:	f7ff ff19 	bl	80030ac <parse_wireless_message>
	if (calib_success) {
 800327a:	2800      	cmp	r0, #0
 800327c:	d100      	bne.n	8003280 <receive_wireless+0x2c>
}
 800327e:	bd70      	pop	{r4, r5, r6, pc}
		calibrate_skater_threshold(skater);
 8003280:	0028      	movs	r0, r5
 8003282:	f000 fd41 	bl	8003d08 <calibrate_skater_threshold>
 8003286:	e7fa      	b.n	800327e <receive_wireless+0x2a>
		wireless->ms_since_comms = 0;
 8003288:	2300      	movs	r3, #0
		bool is_skater_here = !has_skater_recently_left_board(skater);
 800328a:	0028      	movs	r0, r5
		wireless->ms_since_comms = 0;
 800328c:	6163      	str	r3, [r4, #20]
		bool is_skater_here = !has_skater_recently_left_board(skater);
 800328e:	f000 fd09 	bl	8003ca4 <has_skater_recently_left_board>
		if (is_skater_here) {
 8003292:	2800      	cmp	r0, #0
 8003294:	d1f3      	bne.n	800327e <receive_wireless+0x2a>
			int trigger_val = wireless->message_contents;
 8003296:	6923      	ldr	r3, [r4, #16]
			else if (trigger_val < 32) {
 8003298:	2b1f      	cmp	r3, #31
 800329a:	dd0b      	ble.n	80032b4 <receive_wireless+0x60>
			else if (trigger_val < 63) {
 800329c:	2b3e      	cmp	r3, #62	; 0x3e
 800329e:	dc0e      	bgt.n	80032be <receive_wireless+0x6a>
				desired_steps = (trigger_val - 32) * (MAX_BRAKING_STEPS - RIGHT_BEFORE_BRAKING_STEPS) / 32 + RIGHT_BEFORE_BRAKING_STEPS;
 80032a0:	3b20      	subs	r3, #32
 80032a2:	0159      	lsls	r1, r3, #5
 80032a4:	1ac9      	subs	r1, r1, r3
 80032a6:	0089      	lsls	r1, r1, #2
 80032a8:	18c9      	adds	r1, r1, r3
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <receive_wireless+0x80>)
 80032ac:	0089      	lsls	r1, r1, #2
 80032ae:	469c      	mov	ip, r3
 80032b0:	4461      	add	r1, ip
 80032b2:	e000      	b.n	80032b6 <receive_wireless+0x62>
				desired_steps = RIGHT_BEFORE_BRAKING_STEPS;
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <receive_wireless+0x80>)
			set_joint_target(joint, desired_steps);
 80032b6:	0030      	movs	r0, r6
 80032b8:	f000 f930 	bl	800351c <set_joint_target>
 80032bc:	e7df      	b.n	800327e <receive_wireless+0x2a>
				desired_steps = MAX_BRAKING_STEPS;
 80032be:	3b3f      	subs	r3, #63	; 0x3f
 80032c0:	1e5a      	subs	r2, r3, #1
 80032c2:	4193      	sbcs	r3, r2
 80032c4:	4259      	negs	r1, r3
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <receive_wireless+0x84>)
 80032c8:	4019      	ands	r1, r3
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <receive_wireless+0x88>)
 80032cc:	469c      	mov	ip, r3
 80032ce:	4461      	add	r1, ip
 80032d0:	e7f1      	b.n	80032b6 <receive_wireless+0x62>
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	00002710 	.word	0x00002710
 80032d8:	ffffc180 	.word	0xffffc180
 80032dc:	00006590 	.word	0x00006590

080032e0 <new_force_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ForceSensor object
ForceSensor *new_force_sensor(ADCSensor *_adc_sensor, uint8_t _rank) {
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	0005      	movs	r5, r0
    ForceSensor *force_sensor = (ForceSensor*) malloc(sizeof(ForceSensor));
 80032e4:	2008      	movs	r0, #8
ForceSensor *new_force_sensor(ADCSensor *_adc_sensor, uint8_t _rank) {
 80032e6:	000c      	movs	r4, r1
    ForceSensor *force_sensor = (ForceSensor*) malloc(sizeof(ForceSensor));
 80032e8:	f003 fcdc 	bl	8006ca4 <malloc>
	force_sensor->adc_sensor = _adc_sensor;
 80032ec:	6005      	str	r5, [r0, #0]
    force_sensor->rank = _rank;
 80032ee:	7104      	strb	r4, [r0, #4]
	return force_sensor;
}
 80032f0:	bd70      	pop	{r4, r5, r6, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)

080032f4 <get_force_sensor_data>:

// REQUIRES: ForceSensor is a force_sensor object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value force sensor voltage output.
uint16_t get_force_sensor_data(ForceSensor *force_sensor) {
 80032f4:	b510      	push	{r4, lr}
    return get_adc_sensor_value(force_sensor->adc_sensor, force_sensor->rank);
 80032f6:	7901      	ldrb	r1, [r0, #4]
 80032f8:	6800      	ldr	r0, [r0, #0]
 80032fa:	f7ff fe29 	bl	8002f50 <get_adc_sensor_value>
}
 80032fe:	bd10      	pop	{r4, pc}

08003300 <new_i2c_mux>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hi2c is the i2c channel
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a new I2C mux
I2CMux *new_i2c_mux(I2C_HandleTypeDef *hi2c) {
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	0005      	movs	r5, r0
	I2CMux *i2c_mux = (I2CMux*) malloc(sizeof(I2CMux));
 8003304:	2030      	movs	r0, #48	; 0x30
 8003306:	f003 fccd 	bl	8006ca4 <malloc>
	i2c_mux->i2c = hi2c;
	for (size_t i = 0; i < 8; ++i) {
		i2c_mux->channels_register_data[i] = 0b1 << i;
 800330a:	2301      	movs	r3, #1
	I2CMux *i2c_mux = (I2CMux*) malloc(sizeof(I2CMux));
 800330c:	0004      	movs	r4, r0
		i2c_mux->channels_register_data[i] = 0b1 << i;
 800330e:	6043      	str	r3, [r0, #4]
 8003310:	3301      	adds	r3, #1
 8003312:	6083      	str	r3, [r0, #8]
 8003314:	3302      	adds	r3, #2
 8003316:	60c3      	str	r3, [r0, #12]
 8003318:	3304      	adds	r3, #4
 800331a:	6103      	str	r3, [r0, #16]
 800331c:	3308      	adds	r3, #8
 800331e:	6143      	str	r3, [r0, #20]
 8003320:	3310      	adds	r3, #16
 8003322:	6183      	str	r3, [r0, #24]
 8003324:	3320      	adds	r3, #32
 8003326:	61c3      	str	r3, [r0, #28]
 8003328:	3340      	adds	r3, #64	; 0x40
	i2c_mux->i2c = hi2c;
 800332a:	6005      	str	r5, [r0, #0]
		i2c_mux->channels_register_data[i] = 0b1 << i;
 800332c:	6203      	str	r3, [r0, #32]
	}
	for (size_t i = 0; i < 10; ++i) {
		i2c_mux->buffer[i] = 0;
 800332e:	220a      	movs	r2, #10
 8003330:	2100      	movs	r1, #0
 8003332:	3024      	adds	r0, #36	; 0x24
 8003334:	f003 fcc9 	bl	8006cca <memset>
	}
	return i2c_mux;
}
 8003338:	0020      	movs	r0, r4
 800333a:	bd70      	pop	{r4, r5, r6, pc}

0800333c <activate_i2c_mux_channel>:

// REQUIRES: i2c_mux is the mux and channel is an integer [0, 7]
// MODIFIES: nothing
// EFFECTS: Activates an i2c mux channel
void activate_i2c_mux_channel(I2CMux *i2c_mux, uint8_t channel) {
	i2c_mux->buffer[0] = I2C_MUX_SELECT_CMD;
 800333c:	2324      	movs	r3, #36	; 0x24
 800333e:	22cc      	movs	r2, #204	; 0xcc
	i2c_mux->buffer[1] = i2c_mux->channels_register_data[channel];
 8003340:	0089      	lsls	r1, r1, #2
void activate_i2c_mux_channel(I2CMux *i2c_mux, uint8_t channel) {
 8003342:	b500      	push	{lr}
	i2c_mux->buffer[1] = i2c_mux->channels_register_data[channel];
 8003344:	1841      	adds	r1, r0, r1
	i2c_mux->buffer[0] = I2C_MUX_SELECT_CMD;
 8003346:	54c2      	strb	r2, [r0, r3]
	i2c_mux->buffer[1] = i2c_mux->channels_register_data[channel];
 8003348:	684a      	ldr	r2, [r1, #4]
 800334a:	3301      	adds	r3, #1
 800334c:	54c2      	strb	r2, [r0, r3]
	HAL_I2C_Master_Transmit(
		i2c_mux->i2c,
		I2C_MUX_ADDRESS << 1,
		i2c_mux->buffer,
 800334e:	0002      	movs	r2, r0
void activate_i2c_mux_channel(I2CMux *i2c_mux, uint8_t channel) {
 8003350:	b083      	sub	sp, #12
	HAL_I2C_Master_Transmit(
 8003352:	3b20      	subs	r3, #32
 8003354:	21e0      	movs	r1, #224	; 0xe0
 8003356:	6800      	ldr	r0, [r0, #0]
		i2c_mux->buffer,
 8003358:	3224      	adds	r2, #36	; 0x24
	HAL_I2C_Master_Transmit(
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	3b03      	subs	r3, #3
 800335e:	f001 ff09 	bl	8005174 <HAL_I2C_Master_Transmit>
		2,
		5);
}
 8003362:	b003      	add	sp, #12
 8003364:	bd00      	pop	{pc}
 8003366:	46c0      	nop			; (mov r8, r8)

08003368 <new_imu>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hi2c is the i2c channel
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created IMU object
IMU *new_imu(I2C_HandleTypeDef *hi2c, I2CMux *_i2c_mux, uint8_t _channel) {
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	0007      	movs	r7, r0
	IMU *imu = (IMU*) malloc(sizeof(IMU));
 800336c:	2020      	movs	r0, #32
IMU *new_imu(I2C_HandleTypeDef *hi2c, I2CMux *_i2c_mux, uint8_t _channel) {
 800336e:	000e      	movs	r6, r1
 8003370:	0015      	movs	r5, r2
	IMU *imu = (IMU*) malloc(sizeof(IMU));
 8003372:	f003 fc97 	bl	8006ca4 <malloc>
	imu->i2c = hi2c;
	imu->addr = ADDRESS_511_ACCEL;
 8003376:	2319      	movs	r3, #25
 8003378:	7103      	strb	r3, [r0, #4]
	imu->accel_values[0] = 0.0;
 800337a:	2300      	movs	r3, #0
 800337c:	80c3      	strh	r3, [r0, #6]
	imu->accel_values[1] = 0.0;
 800337e:	23c0      	movs	r3, #192	; 0xc0
	IMU *imu = (IMU*) malloc(sizeof(IMU));
 8003380:	0004      	movs	r4, r0
	imu->accel_values[1] = 0.0;
 8003382:	061b      	lsls	r3, r3, #24
	imu->i2c = hi2c;
 8003384:	6007      	str	r7, [r0, #0]
	imu->accel_values[1] = 0.0;
 8003386:	6083      	str	r3, [r0, #8]
	imu->accel_values[2] = (IMU_Z_ACCEL_GRAVITY_GS) / CONVERT_RAW_IMU_TO_GS;
	for (size_t i = 0; i < 10; ++i) {
		imu->buffer[i] = 0;
 8003388:	220a      	movs	r2, #10
 800338a:	2100      	movs	r1, #0
 800338c:	300c      	adds	r0, #12
 800338e:	f003 fc9c 	bl	8006cca <memset>
	}
	imu->i2c_mux = _i2c_mux;
	imu->mux_channel = _channel;
	return imu;
}
 8003392:	0020      	movs	r0, r4
	imu->i2c_mux = _i2c_mux;
 8003394:	61a6      	str	r6, [r4, #24]
	imu->mux_channel = _channel;
 8003396:	7725      	strb	r5, [r4, #28]
}
 8003398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)

0800339c <init_imu>:

// REQUIRES: IMU is an IMU object
// MODIFIES: nothing
// EFFECTS: Initializes the IMU
void init_imu(IMU* imu) {
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	0004      	movs	r4, r0
 80033a0:	0025      	movs	r5, r4
// MODIFIES: nothing
// EFFECTS: Writes data to a particular register
void write_imu_register(IMU* imu, uint8_t reg, uint8_t data) {
	imu->buffer[0] = reg;
	imu->buffer[1] = data;
	HAL_I2C_Master_Transmit(
 80033a2:	2605      	movs	r6, #5
void init_imu(IMU* imu) {
 80033a4:	b082      	sub	sp, #8
	activate_i2c_mux_channel(imu->i2c_mux, imu->mux_channel);
 80033a6:	7f01      	ldrb	r1, [r0, #28]
 80033a8:	6980      	ldr	r0, [r0, #24]
 80033aa:	f7ff ffc7 	bl	800333c <activate_i2c_mux_channel>
		imu->i2c,
		imu->addr << 1,
 80033ae:	7921      	ldrb	r1, [r4, #4]
	imu->buffer[0] = reg;
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <init_imu+0xb8>)
 80033b2:	350c      	adds	r5, #12
	HAL_I2C_Master_Transmit(
 80033b4:	002a      	movs	r2, r5
	imu->buffer[0] = reg;
 80033b6:	81a3      	strh	r3, [r4, #12]
	HAL_I2C_Master_Transmit(
 80033b8:	6820      	ldr	r0, [r4, #0]
 80033ba:	2302      	movs	r3, #2
 80033bc:	0049      	lsls	r1, r1, #1
 80033be:	9600      	str	r6, [sp, #0]
 80033c0:	f001 fed8 	bl	8005174 <HAL_I2C_Master_Transmit>
	imu->buffer[0] = reg;
 80033c4:	2321      	movs	r3, #33	; 0x21
		imu->addr << 1,
 80033c6:	7921      	ldrb	r1, [r4, #4]
	HAL_I2C_Master_Transmit(
 80033c8:	002a      	movs	r2, r5
	imu->buffer[0] = reg;
 80033ca:	81a3      	strh	r3, [r4, #12]
	HAL_I2C_Master_Transmit(
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	0049      	lsls	r1, r1, #1
 80033d0:	9600      	str	r6, [sp, #0]
 80033d2:	3b1f      	subs	r3, #31
 80033d4:	f001 fece 	bl	8005174 <HAL_I2C_Master_Transmit>
		imu->addr << 1,
 80033d8:	7921      	ldrb	r1, [r4, #4]
	imu->buffer[0] = reg;
 80033da:	4b1f      	ldr	r3, [pc, #124]	; (8003458 <init_imu+0xbc>)
	HAL_I2C_Master_Transmit(
 80033dc:	002a      	movs	r2, r5
	imu->buffer[0] = reg;
 80033de:	81a3      	strh	r3, [r4, #12]
	HAL_I2C_Master_Transmit(
 80033e0:	6820      	ldr	r0, [r4, #0]
 80033e2:	2302      	movs	r3, #2
 80033e4:	0049      	lsls	r1, r1, #1
 80033e6:	9600      	str	r6, [sp, #0]
 80033e8:	f001 fec4 	bl	8005174 <HAL_I2C_Master_Transmit>
		imu->addr << 1,
 80033ec:	7921      	ldrb	r1, [r4, #4]
	imu->buffer[0] = reg;
 80033ee:	4b1b      	ldr	r3, [pc, #108]	; (800345c <init_imu+0xc0>)
	HAL_I2C_Master_Transmit(
 80033f0:	002a      	movs	r2, r5
	imu->buffer[0] = reg;
 80033f2:	81a3      	strh	r3, [r4, #12]
	HAL_I2C_Master_Transmit(
 80033f4:	6820      	ldr	r0, [r4, #0]
 80033f6:	2302      	movs	r3, #2
 80033f8:	0049      	lsls	r1, r1, #1
 80033fa:	9600      	str	r6, [sp, #0]
 80033fc:	f001 feba 	bl	8005174 <HAL_I2C_Master_Transmit>
		imu->addr << 1,
 8003400:	7921      	ldrb	r1, [r4, #4]
	imu->buffer[0] = reg;
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <init_imu+0xc4>)
	HAL_I2C_Master_Transmit(
 8003404:	002a      	movs	r2, r5
	imu->buffer[0] = reg;
 8003406:	81a3      	strh	r3, [r4, #12]
	HAL_I2C_Master_Transmit(
 8003408:	6820      	ldr	r0, [r4, #0]
 800340a:	2302      	movs	r3, #2
 800340c:	0049      	lsls	r1, r1, #1
 800340e:	9600      	str	r6, [sp, #0]
 8003410:	f001 feb0 	bl	8005174 <HAL_I2C_Master_Transmit>
		imu->addr << 1,
 8003414:	7921      	ldrb	r1, [r4, #4]
	imu->buffer[0] = reg;
 8003416:	4b13      	ldr	r3, [pc, #76]	; (8003464 <init_imu+0xc8>)
	HAL_I2C_Master_Transmit(
 8003418:	002a      	movs	r2, r5
	imu->buffer[0] = reg;
 800341a:	81a3      	strh	r3, [r4, #12]
	HAL_I2C_Master_Transmit(
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	2302      	movs	r3, #2
 8003420:	0049      	lsls	r1, r1, #1
 8003422:	9600      	str	r6, [sp, #0]
 8003424:	f001 fea6 	bl	8005174 <HAL_I2C_Master_Transmit>
		imu->addr << 1,
 8003428:	7921      	ldrb	r1, [r4, #4]
	imu->buffer[0] = reg;
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <init_imu+0xcc>)
	HAL_I2C_Master_Transmit(
 800342c:	002a      	movs	r2, r5
	imu->buffer[0] = reg;
 800342e:	81a3      	strh	r3, [r4, #12]
	HAL_I2C_Master_Transmit(
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	2302      	movs	r3, #2
 8003434:	0049      	lsls	r1, r1, #1
 8003436:	9600      	str	r6, [sp, #0]
 8003438:	f001 fe9c 	bl	8005174 <HAL_I2C_Master_Transmit>
	imu->buffer[0] = reg;
 800343c:	2333      	movs	r3, #51	; 0x33
		imu->addr << 1,
 800343e:	7921      	ldrb	r1, [r4, #4]
	imu->buffer[0] = reg;
 8003440:	81a3      	strh	r3, [r4, #12]
	HAL_I2C_Master_Transmit(
 8003442:	002a      	movs	r2, r5
 8003444:	6820      	ldr	r0, [r4, #0]
 8003446:	0049      	lsls	r1, r1, #1
 8003448:	9600      	str	r6, [sp, #0]
 800344a:	3b31      	subs	r3, #49	; 0x31
 800344c:	f001 fe92 	bl	8005174 <HAL_I2C_Master_Transmit>
}
 8003450:	b002      	add	sp, #8
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	00004720 	.word	0x00004720
 8003458:	00004422 	.word	0x00004422
 800345c:	00004823 	.word	0x00004823
 8003460:	ffff8024 	.word	0xffff8024
 8003464:	00002030 	.word	0x00002030
 8003468:	ffffe032 	.word	0xffffe032

0800346c <new_interrupt_timer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _timer corresponds to timer
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created InterruptTimer object
InterruptTimer *new_interrupt_timer(TIM_HandleTypeDef *_timer) {
 800346c:	b510      	push	{r4, lr}
 800346e:	0004      	movs	r4, r0
	InterruptTimer *interrupt_timer = (InterruptTimer*) malloc(sizeof(InterruptTimer));
 8003470:	2004      	movs	r0, #4
 8003472:	f003 fc17 	bl	8006ca4 <malloc>
	interrupt_timer->timer = _timer;
 8003476:	6004      	str	r4, [r0, #0]
	return interrupt_timer;
}
 8003478:	bd10      	pop	{r4, pc}
 800347a:	46c0      	nop			; (mov r8, r8)

0800347c <start_interrupt_timer>:

// REQUIRES: interrupt_timer is an InterruptTimer object
// MODIFIES: nothing
// EFFECTS: Enables interrupts for the interrupt timer
void start_interrupt_timer(InterruptTimer *interrupt_timer) {
 800347c:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start_IT(interrupt_timer->timer);
 800347e:	6800      	ldr	r0, [r0, #0]
 8003480:	f002 fda2 	bl	8005fc8 <HAL_TIM_Base_Start_IT>
}
 8003484:	bd10      	pop	{r4, pc}
 8003486:	46c0      	nop			; (mov r8, r8)

08003488 <new_joint>:

// REQUIRES: _motor is a Motor object,
// and _rest_limit_switch_pin and _brake_limit_switch_pin is a PinData object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Joint object
Joint *new_joint(Motor* _motor, PinData* _rest_limit_switch_pin, PinData* _brake_limit_switch_pin) {
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	0006      	movs	r6, r0
	Joint *joint = (Joint*) malloc(sizeof(Joint));
 800348c:	2018      	movs	r0, #24
Joint *new_joint(Motor* _motor, PinData* _rest_limit_switch_pin, PinData* _brake_limit_switch_pin) {
 800348e:	000d      	movs	r5, r1
 8003490:	0014      	movs	r4, r2
	Joint *joint = (Joint*) malloc(sizeof(Joint));
 8003492:	f003 fc07 	bl	8006ca4 <malloc>
	joint->motor = _motor;
    joint->rest_limit_switch_pin = _rest_limit_switch_pin;
    joint->brake_limit_switch_pin = _brake_limit_switch_pin;
    joint->current_angle_steps = CALIBRATION_POINT_REST_STEPS;
    joint->desired_angle_steps = CALIBRATION_POINT_REST_STEPS;
	joint->is_calibrated = false;
 8003496:	2280      	movs	r2, #128	; 0x80
    joint->current_angle_steps = CALIBRATION_POINT_REST_STEPS;
 8003498:	2300      	movs	r3, #0
	joint->is_calibrated = false;
 800349a:	0052      	lsls	r2, r2, #1
	joint->motor = _motor;
 800349c:	6006      	str	r6, [r0, #0]
    joint->rest_limit_switch_pin = _rest_limit_switch_pin;
 800349e:	6045      	str	r5, [r0, #4]
    joint->brake_limit_switch_pin = _brake_limit_switch_pin;
 80034a0:	6084      	str	r4, [r0, #8]
    joint->current_angle_steps = CALIBRATION_POINT_REST_STEPS;
 80034a2:	60c3      	str	r3, [r0, #12]
    joint->desired_angle_steps = CALIBRATION_POINT_REST_STEPS;
 80034a4:	6103      	str	r3, [r0, #16]
	joint->is_calibrated = false;
 80034a6:	8282      	strh	r2, [r0, #20]
	joint->is_rest_limit_switch_activated = true;
	joint->is_brake_limit_switch_activated = false;
 80034a8:	7583      	strb	r3, [r0, #22]
	return joint;
}
 80034aa:	bd70      	pop	{r4, r5, r6, pc}

080034ac <is_joint_close_enough_to_target>:

// REQUIRES: joint is a Joint object
// MODIFIES: Nothing
// EFFECTS: Returns whether or not current joint angle is close enough to desired angle
bool is_joint_close_enough_to_target(Joint *joint) {
 80034ac:	0003      	movs	r3, r0
	return joint->desired_angle_steps == joint->current_angle_steps;
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	6900      	ldr	r0, [r0, #16]
 80034b2:	1ac0      	subs	r0, r0, r3
 80034b4:	4243      	negs	r3, r0
 80034b6:	4158      	adcs	r0, r3
 80034b8:	b2c0      	uxtb	r0, r0
}
 80034ba:	4770      	bx	lr

080034bc <move_joint_to_target>:

// REQUIRES: joint is a Joint object
// MODIFIES: Nothing
// EFFECTS: Moves the motor based on current steps and desired steps
void move_joint_to_target(Joint *joint) {
 80034bc:	b570      	push	{r4, r5, r6, lr}
	return joint->desired_angle_steps == joint->current_angle_steps;
 80034be:	6906      	ldr	r6, [r0, #16]
 80034c0:	68c5      	ldr	r5, [r0, #12]
void move_joint_to_target(Joint *joint) {
 80034c2:	0004      	movs	r4, r0
	if (!is_joint_close_enough_to_target(joint)) {
 80034c4:	42ae      	cmp	r6, r5
 80034c6:	d100      	bne.n	80034ca <move_joint_to_target+0xe>
		bool direction = !((is_difference_steps_positive) ^ IS_MOTOR_CORRECT_DIRECTION);
		step_motor_direction(joint->motor, direction);
		int8_t steps = is_difference_steps_positive ? 1 : -1;
		joint->current_angle_steps += steps;
	}
}
 80034c8:	bd70      	pop	{r4, r5, r6, pc}
		bool direction = !((is_difference_steps_positive) ^ IS_MOTOR_CORRECT_DIRECTION);
 80034ca:	17eb      	asrs	r3, r5, #31
 80034cc:	0ff1      	lsrs	r1, r6, #31
 80034ce:	42b5      	cmp	r5, r6
 80034d0:	4159      	adcs	r1, r3
		step_motor_direction(joint->motor, direction);
 80034d2:	6800      	ldr	r0, [r0, #0]
 80034d4:	b2c9      	uxtb	r1, r1
 80034d6:	f000 fba1 	bl	8003c1c <step_motor_direction>
		int8_t steps = is_difference_steps_positive ? 1 : -1;
 80034da:	2301      	movs	r3, #1
 80034dc:	42ae      	cmp	r6, r5
 80034de:	dc00      	bgt.n	80034e2 <move_joint_to_target+0x26>
 80034e0:	3b02      	subs	r3, #2
		joint->current_angle_steps += steps;
 80034e2:	68e2      	ldr	r2, [r4, #12]
 80034e4:	4694      	mov	ip, r2
 80034e6:	4463      	add	r3, ip
 80034e8:	60e3      	str	r3, [r4, #12]
}
 80034ea:	e7ed      	b.n	80034c8 <move_joint_to_target+0xc>

080034ec <refresh_joint_limit_switch>:

// REQUIRES: joint is a Joint object
// MODIFIES: is_rest_limit_switch_activated and is_brake_limit_switch_activated
// EFFECTS: Updates joint limit switch value
void refresh_joint_limit_switch(Joint *joint) {
 80034ec:	b510      	push	{r4, lr}
 80034ee:	0004      	movs	r4, r0
	bool raw_rest_pin_value = get_pin_value(joint->rest_limit_switch_pin);
 80034f0:	6840      	ldr	r0, [r0, #4]
 80034f2:	f000 fbb9 	bl	8003c68 <get_pin_value>
	joint->is_rest_limit_switch_activated = raw_rest_pin_value;
 80034f6:	7560      	strb	r0, [r4, #21]
	if (joint->is_rest_limit_switch_activated) {
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d004      	beq.n	8003506 <refresh_joint_limit_switch+0x1a>
		joint->is_calibrated = true;
 80034fc:	2301      	movs	r3, #1
 80034fe:	7523      	strb	r3, [r4, #20]

// REQUIRES: joint is a Joint object
// MODIFIES: potentiometer_error
// EFFECTS: Zeros the joint
void zero_joint(Joint *joint) {
	joint->current_angle_steps = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	60e3      	str	r3, [r4, #12]
}
 8003504:	bd10      	pop	{r4, pc}
		bool raw_brake_pin_value = get_pin_value(joint->brake_limit_switch_pin);
 8003506:	68a0      	ldr	r0, [r4, #8]
 8003508:	f000 fbae 	bl	8003c68 <get_pin_value>
		joint->is_brake_limit_switch_activated = raw_brake_pin_value;
 800350c:	75a0      	strb	r0, [r4, #22]
		if (joint->is_brake_limit_switch_activated) {
 800350e:	2800      	cmp	r0, #0
 8003510:	d0f8      	beq.n	8003504 <refresh_joint_limit_switch+0x18>
			joint->current_angle_steps = MAX_BRAKING_STEPS;
 8003512:	4b01      	ldr	r3, [pc, #4]	; (8003518 <refresh_joint_limit_switch+0x2c>)
 8003514:	60e3      	str	r3, [r4, #12]
}
 8003516:	e7f5      	b.n	8003504 <refresh_joint_limit_switch+0x18>
 8003518:	00006590 	.word	0x00006590

0800351c <set_joint_target>:
	if (joint->is_calibrated) {
 800351c:	7d03      	ldrb	r3, [r0, #20]
		joint->desired_angle_steps = CALIBRATION_POINT_REST_STEPS;
 800351e:	1e5a      	subs	r2, r3, #1
 8003520:	4193      	sbcs	r3, r2
 8003522:	425b      	negs	r3, r3
 8003524:	400b      	ands	r3, r1
 8003526:	6103      	str	r3, [r0, #16]
}
 8003528:	4770      	bx	lr
 800352a:	46c0      	nop			; (mov r8, r8)

0800352c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	receive_wireless(wireless, skater, joint);
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <HAL_UART_RxCpltCallback+0x14>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800352e:	b510      	push	{r4, lr}
	receive_wireless(wireless, skater, joint);
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <HAL_UART_RxCpltCallback+0x18>)
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_UART_RxCpltCallback+0x1c>)
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	f7ff fe8b 	bl	8003254 <receive_wireless>
}
 800353e:	bd10      	pop	{r4, pc}
 8003540:	20000510 	.word	0x20000510
 8003544:	20000524 	.word	0x20000524
 8003548:	20000534 	.word	0x20000534

0800354c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800354c:	b510      	push	{r4, lr}
    if(GPIO_Pin == PA5_FRONT_IMU_INT_Pin)
 800354e:	2820      	cmp	r0, #32
 8003550:	d002      	beq.n	8003558 <HAL_GPIO_EXTI_Rising_Callback+0xc>
    {
    	trigger_speed_sensor_interrupt(speed_sensor, true);
    }
    else if (GPIO_Pin == PB0_BACK_IMU_INT_Pin) {
 8003552:	2801      	cmp	r0, #1
 8003554:	d006      	beq.n	8003564 <HAL_GPIO_EXTI_Rising_Callback+0x18>
    	trigger_speed_sensor_interrupt(speed_sensor, false);
    }
}
 8003556:	bd10      	pop	{r4, pc}
    	trigger_speed_sensor_interrupt(speed_sensor, true);
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 800355a:	2101      	movs	r1, #1
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	f000 fbfb 	bl	8003d58 <trigger_speed_sensor_interrupt>
 8003562:	e7f8      	b.n	8003556 <HAL_GPIO_EXTI_Rising_Callback+0xa>
    	trigger_speed_sensor_interrupt(speed_sensor, false);
 8003564:	4b02      	ldr	r3, [pc, #8]	; (8003570 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8003566:	2100      	movs	r1, #0
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	f000 fbf5 	bl	8003d58 <trigger_speed_sensor_interrupt>
}
 800356e:	e7f2      	b.n	8003556 <HAL_GPIO_EXTI_Rising_Callback+0xa>
 8003570:	2000052c 	.word	0x2000052c

08003574 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim == fast_interrupt_timer->timer) {
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x98>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003576:	b570      	push	{r4, r5, r6, lr}
	if (htim == fast_interrupt_timer->timer) {
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4283      	cmp	r3, r0
 800357e:	d005      	beq.n	800358c <HAL_TIM_PeriodElapsedCallback+0x18>
		// 50 us
		move_joint_to_target(joint);
//		set_pin_value(debug_pin_1, 0);

	}
	else if (htim == slow_interrupt_timer->timer) {
 8003580:	4b23      	ldr	r3, [pc, #140]	; (8003610 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4283      	cmp	r3, r0
 8003588:	d005      	beq.n	8003596 <HAL_TIM_PeriodElapsedCallback+0x22>
		refresh_speed_sensor_logic(speed_sensor);
//		}

		refresh_wireless_status(wireless);
	}
}
 800358a:	bd70      	pop	{r4, r5, r6, pc}
		move_joint_to_target(joint);
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	f7ff ff94 	bl	80034bc <move_joint_to_target>
 8003594:	e7f9      	b.n	800358a <HAL_TIM_PeriodElapsedCallback+0x16>
		update_adc_sensor_values(adc_sensor);
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	f7ff fcdd 	bl	8002f58 <update_adc_sensor_values>
			refresh_skater_status(skater);
 800359e:	4c1f      	ldr	r4, [pc, #124]	; (800361c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80035a0:	6820      	ldr	r0, [r4, #0]
 80035a2:	f000 fb95 	bl	8003cd0 <refresh_skater_status>
			bool motor_thinks_is_at_rest_max = joint->current_angle_steps == MAX_REST_STEPS;
 80035a6:	4d1b      	ldr	r5, [pc, #108]	; (8003614 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80035a8:	6828      	ldr	r0, [r5, #0]
 80035aa:	68c3      	ldr	r3, [r0, #12]
			if (motor_thinks_is_at_rest_max && !joint->is_rest_limit_switch_activated) {
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d116      	bne.n	80035de <HAL_TIM_PeriodElapsedCallback+0x6a>
 80035b0:	7d43      	ldrb	r3, [r0, #21]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d027      	beq.n	8003606 <HAL_TIM_PeriodElapsedCallback+0x92>
			refresh_joint_limit_switch(joint);
 80035b6:	f7ff ff99 	bl	80034ec <refresh_joint_limit_switch>
		if (has_skater_recently_left_board(skater)) {
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	f000 fb72 	bl	8003ca4 <has_skater_recently_left_board>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d015      	beq.n	80035f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
				set_joint_target(joint, MAX_BRAKING_STEPS);
 80035c4:	6828      	ldr	r0, [r5, #0]
 80035c6:	4916      	ldr	r1, [pc, #88]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80035c8:	f7ff ffa8 	bl	800351c <set_joint_target>
 80035cc:	4c15      	ldr	r4, [pc, #84]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		refresh_speed_sensor_logic(speed_sensor);
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	f000 fbb5 	bl	8003d40 <refresh_speed_sensor_logic>
		refresh_wireless_status(wireless);
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	f7ff fd0e 	bl	8002ff8 <refresh_wireless_status>
}
 80035dc:	e7d5      	b.n	800358a <HAL_TIM_PeriodElapsedCallback+0x16>
				if (motor_thinks_is_at_brake_max && !joint->is_brake_limit_switch_activated) {
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d1e8      	bne.n	80035b6 <HAL_TIM_PeriodElapsedCallback+0x42>
 80035e4:	7d83      	ldrb	r3, [r0, #22]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e5      	bne.n	80035b6 <HAL_TIM_PeriodElapsedCallback+0x42>
					joint->current_angle_steps -= ARBITRARY_ADD_ANGLE_FOR_LIMIT_SWITCH_STEPS;
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80035ec:	60c3      	str	r3, [r0, #12]
 80035ee:	e7e2      	b.n	80035b6 <HAL_TIM_PeriodElapsedCallback+0x42>
		else if (USE_WIRELESS_COMMS_WATCHDOG && is_wireless_comms_lost(wireless)) {
 80035f0:	4c0c      	ldr	r4, [pc, #48]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	f7ff fd04 	bl	8003000 <is_wireless_comms_lost>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d0e8      	beq.n	80035ce <HAL_TIM_PeriodElapsedCallback+0x5a>
			set_joint_target(joint, RIGHT_BEFORE_BRAKING_STEPS);
 80035fc:	6828      	ldr	r0, [r5, #0]
 80035fe:	490c      	ldr	r1, [pc, #48]	; (8003630 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003600:	f7ff ff8c 	bl	800351c <set_joint_target>
 8003604:	e7e3      	b.n	80035ce <HAL_TIM_PeriodElapsedCallback+0x5a>
				joint->current_angle_steps += ARBITRARY_ADD_ANGLE_FOR_LIMIT_SWITCH_STEPS;
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003608:	60c3      	str	r3, [r0, #12]
 800360a:	e7d4      	b.n	80035b6 <HAL_TIM_PeriodElapsedCallback+0x42>
 800360c:	20000210 	.word	0x20000210
 8003610:	20000528 	.word	0x20000528
 8003614:	20000510 	.word	0x20000510
 8003618:	200001fc 	.word	0x200001fc
 800361c:	20000524 	.word	0x20000524
 8003620:	00006590 	.word	0x00006590
 8003624:	20000534 	.word	0x20000534
 8003628:	2000052c 	.word	0x2000052c
 800362c:	00005fb4 	.word	0x00005fb4
 8003630:	00002710 	.word	0x00002710
 8003634:	000005dc 	.word	0x000005dc

08003638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003638:	b500      	push	{lr}
 800363a:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800363c:	2238      	movs	r2, #56	; 0x38
 800363e:	2100      	movs	r1, #0
 8003640:	a804      	add	r0, sp, #16
 8003642:	f003 fb42 	bl	8006cca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003646:	2210      	movs	r2, #16
 8003648:	2100      	movs	r1, #0
 800364a:	4668      	mov	r0, sp
 800364c:	f003 fb3d 	bl	8006cca <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003650:	2080      	movs	r0, #128	; 0x80
 8003652:	0080      	lsls	r0, r0, #2
 8003654:	f001 ff80 	bl	8005558 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003658:	2302      	movs	r3, #2
 800365a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800365c:	33fe      	adds	r3, #254	; 0xfe
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800365e:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003660:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003662:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003664:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003666:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003668:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800366a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800366c:	f001 ffa4 	bl	80055b8 <HAL_RCC_OscConfig>
 8003670:	2800      	cmp	r0, #0
 8003672:	d001      	beq.n	8003678 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003674:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003676:	e7fe      	b.n	8003676 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003678:	2207      	movs	r2, #7
 800367a:	2300      	movs	r3, #0
 800367c:	9200      	str	r2, [sp, #0]
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003684:	2100      	movs	r1, #0
 8003686:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003688:	9202      	str	r2, [sp, #8]
 800368a:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800368c:	f002 fa4e 	bl	8005b2c <HAL_RCC_ClockConfig>
 8003690:	2800      	cmp	r0, #0
 8003692:	d001      	beq.n	8003698 <SystemClock_Config+0x60>
 8003694:	b672      	cpsid	i
  while (1)
 8003696:	e7fe      	b.n	8003696 <SystemClock_Config+0x5e>
}
 8003698:	b013      	add	sp, #76	; 0x4c
 800369a:	bd00      	pop	{pc}

0800369c <main>:
{
 800369c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369e:	46de      	mov	lr, fp
 80036a0:	4657      	mov	r7, sl
 80036a2:	464e      	mov	r6, r9
 80036a4:	4645      	mov	r5, r8
 80036a6:	b5e0      	push	{r5, r6, r7, lr}
	adc_sensor = new_adc_sensor(&hadc1, 3);
 80036a8:	2103      	movs	r1, #3
{
 80036aa:	b08b      	sub	sp, #44	; 0x2c
	adc_sensor = new_adc_sensor(&hadc1, 3);
 80036ac:	48e2      	ldr	r0, [pc, #904]	; (8003a38 <main+0x39c>)
 80036ae:	f7ff fc3d 	bl	8002f2c <new_adc_sensor>
	i2c_mux = new_i2c_mux(&hi2c2);
 80036b2:	4ce2      	ldr	r4, [pc, #904]	; (8003a3c <main+0x3a0>)
	adc_sensor = new_adc_sensor(&hadc1, 3);
 80036b4:	4de2      	ldr	r5, [pc, #904]	; (8003a40 <main+0x3a4>)
 80036b6:	6028      	str	r0, [r5, #0]
	i2c_mux = new_i2c_mux(&hi2c2);
 80036b8:	0020      	movs	r0, r4
 80036ba:	f7ff fe21 	bl	8003300 <new_i2c_mux>
 80036be:	4ee1      	ldr	r6, [pc, #900]	; (8003a44 <main+0x3a8>)
 80036c0:	0001      	movs	r1, r0
 80036c2:	6030      	str	r0, [r6, #0]
	front_imu = new_imu(&hi2c2, i2c_mux, 0);
 80036c4:	2200      	movs	r2, #0
 80036c6:	0020      	movs	r0, r4
 80036c8:	f7ff fe4e 	bl	8003368 <new_imu>
 80036cc:	4bde      	ldr	r3, [pc, #888]	; (8003a48 <main+0x3ac>)
	back_imu = new_imu(&hi2c2, i2c_mux, 1);
 80036ce:	6831      	ldr	r1, [r6, #0]
	front_imu = new_imu(&hi2c2, i2c_mux, 0);
 80036d0:	6018      	str	r0, [r3, #0]
	back_imu = new_imu(&hi2c2, i2c_mux, 1);
 80036d2:	2201      	movs	r2, #1
 80036d4:	0020      	movs	r0, r4
	front_imu = new_imu(&hi2c2, i2c_mux, 0);
 80036d6:	4699      	mov	r9, r3
	back_imu = new_imu(&hi2c2, i2c_mux, 1);
 80036d8:	f7ff fe46 	bl	8003368 <new_imu>
 80036dc:	4bdb      	ldr	r3, [pc, #876]	; (8003a4c <main+0x3b0>)
	motor_direction_pin = new_pin_data(DRV8825_DIR_GPIO_Port, DRV8825_DIR_Pin, PIN_IS_OUTPUT);
 80036de:	2201      	movs	r2, #1
	back_imu = new_imu(&hi2c2, i2c_mux, 1);
 80036e0:	6018      	str	r0, [r3, #0]
	motor_direction_pin = new_pin_data(DRV8825_DIR_GPIO_Port, DRV8825_DIR_Pin, PIN_IS_OUTPUT);
 80036e2:	20a0      	movs	r0, #160	; 0xa0
 80036e4:	2180      	movs	r1, #128	; 0x80
 80036e6:	05c0      	lsls	r0, r0, #23
	back_imu = new_imu(&hi2c2, i2c_mux, 1);
 80036e8:	4698      	mov	r8, r3
	motor_direction_pin = new_pin_data(DRV8825_DIR_GPIO_Port, DRV8825_DIR_Pin, PIN_IS_OUTPUT);
 80036ea:	f000 faa5 	bl	8003c38 <new_pin_data>
 80036ee:	4bd8      	ldr	r3, [pc, #864]	; (8003a50 <main+0x3b4>)
	motor_step_pin = new_pin_data(DRV8825_STP_GPIO_Port, DRV8825_STP_Pin, PIN_IS_OUTPUT);
 80036f0:	2201      	movs	r2, #1
	motor_direction_pin = new_pin_data(DRV8825_DIR_GPIO_Port, DRV8825_DIR_Pin, PIN_IS_OUTPUT);
 80036f2:	6018      	str	r0, [r3, #0]
	motor_step_pin = new_pin_data(DRV8825_STP_GPIO_Port, DRV8825_STP_Pin, PIN_IS_OUTPUT);
 80036f4:	20a0      	movs	r0, #160	; 0xa0
 80036f6:	2140      	movs	r1, #64	; 0x40
 80036f8:	05c0      	lsls	r0, r0, #23
	motor_direction_pin = new_pin_data(DRV8825_DIR_GPIO_Port, DRV8825_DIR_Pin, PIN_IS_OUTPUT);
 80036fa:	469a      	mov	sl, r3
	motor_step_pin = new_pin_data(DRV8825_STP_GPIO_Port, DRV8825_STP_Pin, PIN_IS_OUTPUT);
 80036fc:	f000 fa9c 	bl	8003c38 <new_pin_data>
 8003700:	4bd4      	ldr	r3, [pc, #848]	; (8003a54 <main+0x3b8>)
	rest_limit_switch_pin = new_pin_data(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, PIN_IS_INPUT);
 8003702:	2200      	movs	r2, #0
	motor_step_pin = new_pin_data(DRV8825_STP_GPIO_Port, DRV8825_STP_Pin, PIN_IS_OUTPUT);
 8003704:	6018      	str	r0, [r3, #0]
	rest_limit_switch_pin = new_pin_data(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, PIN_IS_INPUT);
 8003706:	20a0      	movs	r0, #160	; 0xa0
 8003708:	2102      	movs	r1, #2
 800370a:	05c0      	lsls	r0, r0, #23
	motor_step_pin = new_pin_data(DRV8825_STP_GPIO_Port, DRV8825_STP_Pin, PIN_IS_OUTPUT);
 800370c:	469b      	mov	fp, r3
	rest_limit_switch_pin = new_pin_data(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, PIN_IS_INPUT);
 800370e:	f000 fa93 	bl	8003c38 <new_pin_data>
	brake_limit_switch_pin = new_pin_data(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, PIN_IS_INPUT);
 8003712:	2180      	movs	r1, #128	; 0x80
	rest_limit_switch_pin = new_pin_data(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, PIN_IS_INPUT);
 8003714:	4ed0      	ldr	r6, [pc, #832]	; (8003a58 <main+0x3bc>)
	brake_limit_switch_pin = new_pin_data(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, PIN_IS_INPUT);
 8003716:	2200      	movs	r2, #0
	rest_limit_switch_pin = new_pin_data(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, PIN_IS_INPUT);
 8003718:	6030      	str	r0, [r6, #0]
	brake_limit_switch_pin = new_pin_data(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, PIN_IS_INPUT);
 800371a:	0089      	lsls	r1, r1, #2
 800371c:	48cf      	ldr	r0, [pc, #828]	; (8003a5c <main+0x3c0>)
 800371e:	f000 fa8b 	bl	8003c38 <new_pin_data>
 8003722:	4fcf      	ldr	r7, [pc, #828]	; (8003a60 <main+0x3c4>)
	debug_led = new_pin_data(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, PIN_IS_OUTPUT);
 8003724:	2201      	movs	r2, #1
	brake_limit_switch_pin = new_pin_data(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, PIN_IS_INPUT);
 8003726:	6038      	str	r0, [r7, #0]
	debug_led = new_pin_data(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, PIN_IS_OUTPUT);
 8003728:	2104      	movs	r1, #4
 800372a:	48ce      	ldr	r0, [pc, #824]	; (8003a64 <main+0x3c8>)
 800372c:	f000 fa84 	bl	8003c38 <new_pin_data>
 8003730:	4bcd      	ldr	r3, [pc, #820]	; (8003a68 <main+0x3cc>)
 8003732:	6018      	str	r0, [r3, #0]
	motor = new_motor(motor_direction_pin, motor_step_pin);
 8003734:	465b      	mov	r3, fp
 8003736:	6819      	ldr	r1, [r3, #0]
 8003738:	4653      	mov	r3, sl
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	f000 fa64 	bl	8003c08 <new_motor>
 8003740:	4bca      	ldr	r3, [pc, #808]	; (8003a6c <main+0x3d0>)
 8003742:	6018      	str	r0, [r3, #0]
	slow_interrupt_timer = new_interrupt_timer(&htim14);
 8003744:	48ca      	ldr	r0, [pc, #808]	; (8003a70 <main+0x3d4>)
	motor = new_motor(motor_direction_pin, motor_step_pin);
 8003746:	469a      	mov	sl, r3
	slow_interrupt_timer = new_interrupt_timer(&htim14);
 8003748:	f7ff fe90 	bl	800346c <new_interrupt_timer>
 800374c:	4bc9      	ldr	r3, [pc, #804]	; (8003a74 <main+0x3d8>)
 800374e:	6018      	str	r0, [r3, #0]
	fast_interrupt_timer = new_interrupt_timer(&htim16);
 8003750:	48c9      	ldr	r0, [pc, #804]	; (8003a78 <main+0x3dc>)
 8003752:	f7ff fe8b 	bl	800346c <new_interrupt_timer>
 8003756:	4bc9      	ldr	r3, [pc, #804]	; (8003a7c <main+0x3e0>)
 8003758:	6018      	str	r0, [r3, #0]
	imu_interrupt_timer = new_interrupt_timer(&htim17);
 800375a:	48c9      	ldr	r0, [pc, #804]	; (8003a80 <main+0x3e4>)
 800375c:	f7ff fe86 	bl	800346c <new_interrupt_timer>
 8003760:	4bc8      	ldr	r3, [pc, #800]	; (8003a84 <main+0x3e8>)
	joint = new_joint(motor, rest_limit_switch_pin, brake_limit_switch_pin);
 8003762:	683a      	ldr	r2, [r7, #0]
	imu_interrupt_timer = new_interrupt_timer(&htim17);
 8003764:	6018      	str	r0, [r3, #0]
	joint = new_joint(motor, rest_limit_switch_pin, brake_limit_switch_pin);
 8003766:	4653      	mov	r3, sl
 8003768:	6831      	ldr	r1, [r6, #0]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	f7ff fe8c 	bl	8003488 <new_joint>
 8003770:	4bc5      	ldr	r3, [pc, #788]	; (8003a88 <main+0x3ec>)
	force_sensor = new_force_sensor(adc_sensor, 0);
 8003772:	2100      	movs	r1, #0
	joint = new_joint(motor, rest_limit_switch_pin, brake_limit_switch_pin);
 8003774:	6018      	str	r0, [r3, #0]
	force_sensor = new_force_sensor(adc_sensor, 0);
 8003776:	6828      	ldr	r0, [r5, #0]
 8003778:	f7ff fdb2 	bl	80032e0 <new_force_sensor>
 800377c:	4ec3      	ldr	r6, [pc, #780]	; (8003a8c <main+0x3f0>)
	thermistor = new_thermistor(adc_sensor, 1);
 800377e:	2101      	movs	r1, #1
	force_sensor = new_force_sensor(adc_sensor, 0);
 8003780:	6030      	str	r0, [r6, #0]
	thermistor = new_thermistor(adc_sensor, 1);
 8003782:	6828      	ldr	r0, [r5, #0]
 8003784:	f000 fd06 	bl	8004194 <new_thermistor>
 8003788:	4fc1      	ldr	r7, [pc, #772]	; (8003a90 <main+0x3f4>)
	battery_sensor = new_battery_sensor(adc_sensor, 2);
 800378a:	2102      	movs	r1, #2
	thermistor = new_thermistor(adc_sensor, 1);
 800378c:	6038      	str	r0, [r7, #0]
	battery_sensor = new_battery_sensor(adc_sensor, 2);
 800378e:	6828      	ldr	r0, [r5, #0]
 8003790:	f7ff fbf2 	bl	8002f78 <new_battery_sensor>
 8003794:	4bbf      	ldr	r3, [pc, #764]	; (8003a94 <main+0x3f8>)
	skater = new_skater(force_sensor, thermistor);
 8003796:	6839      	ldr	r1, [r7, #0]
	battery_sensor = new_battery_sensor(adc_sensor, 2);
 8003798:	6018      	str	r0, [r3, #0]
	skater = new_skater(force_sensor, thermistor);
 800379a:	6830      	ldr	r0, [r6, #0]
 800379c:	f000 fa72 	bl	8003c84 <new_skater>
 80037a0:	4bbd      	ldr	r3, [pc, #756]	; (8003a98 <main+0x3fc>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a2:	4dbe      	ldr	r5, [pc, #760]	; (8003a9c <main+0x400>)
	skater = new_skater(force_sensor, thermistor);
 80037a4:	6018      	str	r0, [r3, #0]
	wireless = new_wireless(&huart1);
 80037a6:	4bbe      	ldr	r3, [pc, #760]	; (8003aa0 <main+0x404>)
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin;
 80037a8:	2602      	movs	r6, #2
	wireless = new_wireless(&huart1);
 80037aa:	0018      	movs	r0, r3
 80037ac:	469b      	mov	fp, r3
 80037ae:	f7ff fc1b 	bl	8002fe8 <new_wireless>
 80037b2:	4bbc      	ldr	r3, [pc, #752]	; (8003aa4 <main+0x408>)
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin;
 80037b4:	2700      	movs	r7, #0
	wireless = new_wireless(&huart1);
 80037b6:	6018      	str	r0, [r3, #0]
	speed_sensor = new_speed_sensor(front_imu, back_imu);
 80037b8:	4643      	mov	r3, r8
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	464b      	mov	r3, r9
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	f000 fab0 	bl	8003d24 <new_speed_sensor>
 80037c4:	4bb8      	ldr	r3, [pc, #736]	; (8003aa8 <main+0x40c>)
 80037c6:	6018      	str	r0, [r3, #0]
  HAL_Init();
 80037c8:	f000 fd46 	bl	8004258 <HAL_Init>
  SystemClock_Config();
 80037cc:	f7ff ff34 	bl	8003638 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	2214      	movs	r2, #20
 80037d2:	2100      	movs	r1, #0
 80037d4:	a804      	add	r0, sp, #16
 80037d6:	f003 fa78 	bl	8006cca <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037da:	2302      	movs	r3, #2
 80037dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, GPIO_PIN_RESET);
 80037de:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e0:	431a      	orrs	r2, r3
 80037e2:	636a      	str	r2, [r5, #52]	; 0x34
 80037e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, GPIO_PIN_RESET);
 80037e6:	489d      	ldr	r0, [pc, #628]	; (8003a5c <main+0x3c0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e8:	4013      	ands	r3, r2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037ea:	2220      	movs	r2, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, GPIO_PIN_RESET);
 80037f2:	0089      	lsls	r1, r1, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037f4:	4313      	orrs	r3, r2
 80037f6:	636b      	str	r3, [r5, #52]	; 0x34
 80037f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80037fa:	4013      	ands	r3, r2
 80037fc:	9302      	str	r3, [sp, #8]
 80037fe:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003800:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003802:	3a1f      	subs	r2, #31
 8003804:	4313      	orrs	r3, r2
 8003806:	636b      	str	r3, [r5, #52]	; 0x34
 8003808:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800380a:	4692      	mov	sl, r2
 800380c:	4013      	ands	r3, r2
 800380e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, GPIO_PIN_RESET);
 8003810:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, GPIO_PIN_RESET);
 8003814:	f001 fb76 	bl	8004f04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8003818:	2200      	movs	r2, #0
 800381a:	2104      	movs	r1, #4
 800381c:	4891      	ldr	r0, [pc, #580]	; (8003a64 <main+0x3c8>)
 800381e:	f001 fb71 	bl	8004f04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LIMIT_SWITCH_2_Pin|DRV8825_STP_Pin|DRV8825_DIR_Pin, GPIO_PIN_RESET);
 8003822:	20a0      	movs	r0, #160	; 0xa0
 8003824:	2200      	movs	r2, #0
 8003826:	21c2      	movs	r1, #194	; 0xc2
 8003828:	05c0      	lsls	r0, r0, #23
 800382a:	f001 fb6b 	bl	8004f04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin;
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	2301      	movs	r3, #1
 8003832:	0092      	lsls	r2, r2, #2
  HAL_GPIO_Init(LIMIT_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8003834:	4889      	ldr	r0, [pc, #548]	; (8003a5c <main+0x3c0>)
 8003836:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin;
 8003838:	9204      	str	r2, [sp, #16]
 800383a:	9305      	str	r3, [sp, #20]
 800383c:	9606      	str	r6, [sp, #24]
 800383e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LIMIT_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8003840:	f001 fa4c 	bl	8004cdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8003844:	2204      	movs	r2, #4
 8003846:	2301      	movs	r3, #1
 8003848:	9204      	str	r2, [sp, #16]
 800384a:	9305      	str	r3, [sp, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2300      	movs	r3, #0
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8003850:	4884      	ldr	r0, [pc, #528]	; (8003a64 <main+0x3c8>)
 8003852:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8003854:	9206      	str	r2, [sp, #24]
 8003856:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8003858:	f001 fa40 	bl	8004cdc <HAL_GPIO_Init>
  HAL_GPIO_Init(LIMIT_SWITCH_2_GPIO_Port, &GPIO_InitStruct);
 800385c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LIMIT_SWITCH_2_Pin;
 800385e:	2202      	movs	r2, #2
 8003860:	2301      	movs	r3, #1
  HAL_GPIO_Init(LIMIT_SWITCH_2_GPIO_Port, &GPIO_InitStruct);
 8003862:	a904      	add	r1, sp, #16
 8003864:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LIMIT_SWITCH_2_Pin;
 8003866:	9204      	str	r2, [sp, #16]
 8003868:	9305      	str	r3, [sp, #20]
 800386a:	9606      	str	r6, [sp, #24]
 800386c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LIMIT_SWITCH_2_GPIO_Port, &GPIO_InitStruct);
 800386e:	f001 fa35 	bl	8004cdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PA5_FRONT_IMU_INT_Pin;
 8003872:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(PA5_FRONT_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8003874:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = PA5_FRONT_IMU_INT_Pin;
 8003878:	2220      	movs	r2, #32
 800387a:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(PA5_FRONT_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800387c:	a904      	add	r1, sp, #16
 800387e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = PA5_FRONT_IMU_INT_Pin;
 8003880:	9204      	str	r2, [sp, #16]
 8003882:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(PA5_FRONT_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8003886:	f001 fa29 	bl	8004cdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DRV8825_STP_Pin|DRV8825_DIR_Pin;
 800388a:	22c0      	movs	r2, #192	; 0xc0
 800388c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388e:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DRV8825_STP_Pin|DRV8825_DIR_Pin;
 8003890:	9204      	str	r2, [sp, #16]
 8003892:	9305      	str	r3, [sp, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003898:	a904      	add	r1, sp, #16
 800389a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DRV8825_STP_Pin|DRV8825_DIR_Pin;
 800389c:	9206      	str	r2, [sp, #24]
 800389e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a0:	f001 fa1c 	bl	8004cdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PB0_BACK_IMU_INT_Pin;
 80038a4:	2388      	movs	r3, #136	; 0x88
 80038a6:	2201      	movs	r2, #1
 80038a8:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(PB0_BACK_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80038aa:	486c      	ldr	r0, [pc, #432]	; (8003a5c <main+0x3c0>)
 80038ac:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = PB0_BACK_IMU_INT_Pin;
 80038ae:	9204      	str	r2, [sp, #16]
 80038b0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(PB0_BACK_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80038b4:	f001 fa12 	bl	8004cdc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80038b8:	2200      	movs	r2, #0
 80038ba:	2100      	movs	r1, #0
 80038bc:	2005      	movs	r0, #5
 80038be:	f001 f879 	bl	80049b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80038c2:	2005      	movs	r0, #5
 80038c4:	f001 f8a8 	bl	8004a18 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80038c8:	2200      	movs	r2, #0
 80038ca:	2100      	movs	r1, #0
 80038cc:	2007      	movs	r0, #7
 80038ce:	f001 f871 	bl	80049b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80038d2:	2007      	movs	r0, #7
 80038d4:	f001 f8a0 	bl	8004a18 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038d8:	4652      	mov	r2, sl
 80038da:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038dc:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038de:	4313      	orrs	r3, r2
 80038e0:	63ab      	str	r3, [r5, #56]	; 0x38
 80038e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038e4:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038e6:	4013      	ands	r3, r2
 80038e8:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038ea:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038ec:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038ee:	f001 f861 	bl	80049b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80038f2:	2009      	movs	r0, #9
 80038f4:	f001 f890 	bl	8004a18 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80038f8:	2200      	movs	r2, #0
 80038fa:	2100      	movs	r1, #0
 80038fc:	200a      	movs	r0, #10
 80038fe:	f001 f859 	bl	80049b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003902:	200a      	movs	r0, #10
 8003904:	f001 f888 	bl	8004a18 <HAL_NVIC_EnableIRQ>
  hi2c2.Instance = I2C2;
 8003908:	4b68      	ldr	r3, [pc, #416]	; (8003aac <main+0x410>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800390a:	0020      	movs	r0, r4
  hi2c2.Instance = I2C2;
 800390c:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800390e:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <main+0x414>)
  hi2c2.Init.OwnAddress1 = 0;
 8003910:	60a6      	str	r6, [r4, #8]
  hi2c2.Init.Timing = 0x00303D5B;
 8003912:	6063      	str	r3, [r4, #4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003914:	4653      	mov	r3, sl
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003916:	6126      	str	r6, [r4, #16]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003918:	60e3      	str	r3, [r4, #12]
  hi2c2.Init.OwnAddress2 = 0;
 800391a:	6166      	str	r6, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800391c:	61a6      	str	r6, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800391e:	61e6      	str	r6, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003920:	6226      	str	r6, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003922:	f001 fbcd 	bl	80050c0 <HAL_I2C_Init>
 8003926:	2800      	cmp	r0, #0
 8003928:	d001      	beq.n	800392e <main+0x292>
 800392a:	b672      	cpsid	i
  while (1)
 800392c:	e7fe      	b.n	800392c <main+0x290>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800392e:	2100      	movs	r1, #0
 8003930:	0020      	movs	r0, r4
 8003932:	f001 fdc3 	bl	80054bc <HAL_I2CEx_ConfigAnalogFilter>
 8003936:	1e01      	subs	r1, r0, #0
 8003938:	d001      	beq.n	800393e <main+0x2a2>
 800393a:	b672      	cpsid	i
  while (1)
 800393c:	e7fe      	b.n	800393c <main+0x2a0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800393e:	0020      	movs	r0, r4
 8003940:	f001 fde4 	bl	800550c <HAL_I2CEx_ConfigDigitalFilter>
 8003944:	2800      	cmp	r0, #0
 8003946:	d001      	beq.n	800394c <main+0x2b0>
 8003948:	b672      	cpsid	i
  while (1)
 800394a:	e7fe      	b.n	800394a <main+0x2ae>
  huart1.Instance = USART1;
 800394c:	465a      	mov	r2, fp
 800394e:	4b59      	ldr	r3, [pc, #356]	; (8003ab4 <main+0x418>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003950:	250c      	movs	r5, #12
  huart1.Instance = USART1;
 8003952:	6013      	str	r3, [r2, #0]
  huart1.Init.BaudRate = 9600;
 8003954:	2396      	movs	r3, #150	; 0x96
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003956:	6090      	str	r0, [r2, #8]
  huart1.Init.BaudRate = 9600;
 8003958:	019b      	lsls	r3, r3, #6
  huart1.Init.StopBits = UART_STOPBITS_1;
 800395a:	60d0      	str	r0, [r2, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800395c:	6110      	str	r0, [r2, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395e:	6190      	str	r0, [r2, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003960:	61d0      	str	r0, [r2, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003962:	6210      	str	r0, [r2, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003964:	6250      	str	r0, [r2, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003966:	6290      	str	r0, [r2, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003968:	4658      	mov	r0, fp
  huart1.Init.BaudRate = 9600;
 800396a:	6053      	str	r3, [r2, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800396c:	6155      	str	r5, [r2, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800396e:	f003 f83f 	bl	80069f0 <HAL_UART_Init>
 8003972:	1e01      	subs	r1, r0, #0
 8003974:	d001      	beq.n	800397a <main+0x2de>
 8003976:	b672      	cpsid	i
  while (1)
 8003978:	e7fe      	b.n	8003978 <main+0x2dc>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800397a:	4658      	mov	r0, fp
 800397c:	f003 f8c0 	bl	8006b00 <HAL_UARTEx_SetTxFifoThreshold>
 8003980:	1e01      	subs	r1, r0, #0
 8003982:	d001      	beq.n	8003988 <main+0x2ec>
 8003984:	b672      	cpsid	i
  while (1)
 8003986:	e7fe      	b.n	8003986 <main+0x2ea>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003988:	4658      	mov	r0, fp
 800398a:	f003 f909 	bl	8006ba0 <HAL_UARTEx_SetRxFifoThreshold>
 800398e:	2800      	cmp	r0, #0
 8003990:	d001      	beq.n	8003996 <main+0x2fa>
 8003992:	b672      	cpsid	i
  while (1)
 8003994:	e7fe      	b.n	8003994 <main+0x2f8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003996:	4658      	mov	r0, fp
 8003998:	f003 f896 	bl	8006ac8 <HAL_UARTEx_DisableFifoMode>
 800399c:	1e04      	subs	r4, r0, #0
 800399e:	d001      	beq.n	80039a4 <main+0x308>
 80039a0:	b672      	cpsid	i
  while (1)
 80039a2:	e7fe      	b.n	80039a2 <main+0x306>
  ADC_ChannelConfTypeDef sConfig = {0};
 80039a4:	0001      	movs	r1, r0
 80039a6:	002a      	movs	r2, r5
 80039a8:	a804      	add	r0, sp, #16
 80039aa:	f003 f98e 	bl	8006cca <memset>
  hadc1.Instance = ADC1;
 80039ae:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <main+0x39c>)
 80039b0:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <main+0x41c>)
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80039b2:	4651      	mov	r1, sl
  hadc1.Instance = ADC1;
 80039b4:	6013      	str	r3, [r2, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	05db      	lsls	r3, r3, #23
 80039ba:	6053      	str	r3, [r2, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 80039bc:	2318      	movs	r3, #24
 80039be:	6093      	str	r3, [r2, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	039b      	lsls	r3, r3, #14
 80039c4:	6113      	str	r3, [r2, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039c6:	2304      	movs	r3, #4
 80039c8:	6153      	str	r3, [r2, #20]
  hadc1.Init.NbrOfConversion = 3;
 80039ca:	2303      	movs	r3, #3
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039cc:	60d4      	str	r4, [r2, #12]
  hadc1.Init.NbrOfConversion = 3;
 80039ce:	61d3      	str	r3, [r2, #28]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80039d0:	8314      	strh	r4, [r2, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80039d2:	0013      	movs	r3, r2
  hadc1.Init.ContinuousConvMode = DISABLE;
 80039d4:	7694      	strb	r4, [r2, #26]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80039d6:	2220      	movs	r2, #32
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039d8:	625c      	str	r4, [r3, #36]	; 0x24
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80039da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039dc:	629c      	str	r4, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80039de:	232c      	movs	r3, #44	; 0x2c
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <main+0x39c>)
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80039e2:	0011      	movs	r1, r2
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80039e4:	54d4      	strb	r4, [r2, r3]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80039e6:	2300      	movs	r3, #0
 80039e8:	2200      	movs	r2, #0
 80039ea:	630a      	str	r2, [r1, #48]	; 0x30
 80039ec:	634b      	str	r3, [r1, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80039ee:	233c      	movs	r3, #60	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039f0:	0008      	movs	r0, r1
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80039f2:	638c      	str	r4, [r1, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80039f4:	54cc      	strb	r4, [r1, r3]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80039f6:	64cc      	str	r4, [r1, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039f8:	f000 fc66 	bl	80042c8 <HAL_ADC_Init>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d001      	beq.n	8003a04 <main+0x368>
 8003a00:	b672      	cpsid	i
  while (1)
 8003a02:	e7fe      	b.n	8003a02 <main+0x366>
  sConfig.Channel = ADC_CHANNEL_0;
 8003a04:	2201      	movs	r2, #1
 8003a06:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003a08:	9006      	str	r0, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a0a:	a904      	add	r1, sp, #16
 8003a0c:	480a      	ldr	r0, [pc, #40]	; (8003a38 <main+0x39c>)
  sConfig.Channel = ADC_CHANNEL_0;
 8003a0e:	9204      	str	r2, [sp, #16]
 8003a10:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a12:	f000 fdd5 	bl	80045c0 <HAL_ADC_ConfigChannel>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d001      	beq.n	8003a1e <main+0x382>
 8003a1a:	b672      	cpsid	i
  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <main+0x380>
  sConfig.Channel = ADC_CHANNEL_2;
 8003a1e:	2304      	movs	r3, #4
 8003a20:	4a26      	ldr	r2, [pc, #152]	; (8003abc <main+0x420>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a22:	4805      	ldr	r0, [pc, #20]	; (8003a38 <main+0x39c>)
 8003a24:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_2;
 8003a26:	9204      	str	r2, [sp, #16]
 8003a28:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a2a:	f000 fdc9 	bl	80045c0 <HAL_ADC_ConfigChannel>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d046      	beq.n	8003ac0 <main+0x424>
 8003a32:	b672      	cpsid	i
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <main+0x398>
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	20000220 	.word	0x20000220
 8003a3c:	2000033c 	.word	0x2000033c
 8003a40:	200001fc 	.word	0x200001fc
 8003a44:	20000508 	.word	0x20000508
 8003a48:	20000218 	.word	0x20000218
 8003a4c:	20000200 	.word	0x20000200
 8003a50:	20000518 	.word	0x20000518
 8003a54:	2000051c 	.word	0x2000051c
 8003a58:	20000520 	.word	0x20000520
 8003a5c:	50000400 	.word	0x50000400
 8003a60:	20000208 	.word	0x20000208
 8003a64:	50001400 	.word	0x50001400
 8003a68:	2000020c 	.word	0x2000020c
 8003a6c:	20000514 	.word	0x20000514
 8003a70:	20000390 	.word	0x20000390
 8003a74:	20000528 	.word	0x20000528
 8003a78:	200003dc 	.word	0x200003dc
 8003a7c:	20000210 	.word	0x20000210
 8003a80:	20000428 	.word	0x20000428
 8003a84:	2000050c 	.word	0x2000050c
 8003a88:	20000510 	.word	0x20000510
 8003a8c:	20000214 	.word	0x20000214
 8003a90:	20000530 	.word	0x20000530
 8003a94:	20000204 	.word	0x20000204
 8003a98:	20000524 	.word	0x20000524
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	20000474 	.word	0x20000474
 8003aa4:	20000534 	.word	0x20000534
 8003aa8:	2000052c 	.word	0x2000052c
 8003aac:	40005800 	.word	0x40005800
 8003ab0:	00303d5b 	.word	0x00303d5b
 8003ab4:	40013800 	.word	0x40013800
 8003ab8:	40012400 	.word	0x40012400
 8003abc:	08000004 	.word	0x08000004
  sConfig.Channel = ADC_CHANNEL_3;
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	4a40      	ldr	r2, [pc, #256]	; (8003bc4 <main+0x528>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ac4:	4840      	ldr	r0, [pc, #256]	; (8003bc8 <main+0x52c>)
 8003ac6:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_3;
 8003ac8:	9204      	str	r2, [sp, #16]
 8003aca:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003acc:	f000 fd78 	bl	80045c0 <HAL_ADC_ConfigChannel>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d001      	beq.n	8003ad8 <main+0x43c>
 8003ad4:	b672      	cpsid	i
  while (1)
 8003ad6:	e7fe      	b.n	8003ad6 <main+0x43a>
  htim14.Instance = TIM14;
 8003ad8:	4a3c      	ldr	r2, [pc, #240]	; (8003bcc <main+0x530>)
 8003ada:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <main+0x534>)
  htim14.Init.Prescaler = 15;
 8003adc:	240f      	movs	r4, #15
  htim14.Instance = TIM14;
 8003ade:	6013      	str	r3, [r2, #0]
  htim14.Init.Period = SLOW_PERIOD;
 8003ae0:	23fa      	movs	r3, #250	; 0xfa
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae2:	6090      	str	r0, [r2, #8]
  htim14.Init.Period = SLOW_PERIOD;
 8003ae4:	00db      	lsls	r3, r3, #3
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae6:	6110      	str	r0, [r2, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae8:	6190      	str	r0, [r2, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003aea:	0010      	movs	r0, r2
  htim14.Init.Prescaler = 15;
 8003aec:	6054      	str	r4, [r2, #4]
  htim14.Init.Period = SLOW_PERIOD;
 8003aee:	60d3      	str	r3, [r2, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003af0:	f002 f9ee 	bl	8005ed0 <HAL_TIM_Base_Init>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d001      	beq.n	8003afc <main+0x460>
 8003af8:	b672      	cpsid	i
  while (1)
 8003afa:	e7fe      	b.n	8003afa <main+0x45e>
  htim16.Instance = TIM16;
 8003afc:	4a35      	ldr	r2, [pc, #212]	; (8003bd4 <main+0x538>)
 8003afe:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <main+0x53c>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b00:	6090      	str	r0, [r2, #8]
  htim16.Instance = TIM16;
 8003b02:	6013      	str	r3, [r2, #0]
  htim16.Init.Period = FAST_PERIOD;
 8003b04:	2332      	movs	r3, #50	; 0x32
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b06:	6110      	str	r0, [r2, #16]
  htim16.Init.RepetitionCounter = 0;
 8003b08:	6150      	str	r0, [r2, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b0a:	6190      	str	r0, [r2, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003b0c:	0010      	movs	r0, r2
  htim16.Init.Prescaler = 15;
 8003b0e:	6054      	str	r4, [r2, #4]
  htim16.Init.Period = FAST_PERIOD;
 8003b10:	60d3      	str	r3, [r2, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003b12:	f002 f9dd 	bl	8005ed0 <HAL_TIM_Base_Init>
 8003b16:	2800      	cmp	r0, #0
 8003b18:	d001      	beq.n	8003b1e <main+0x482>
 8003b1a:	b672      	cpsid	i
  while (1)
 8003b1c:	e7fe      	b.n	8003b1c <main+0x480>
  htim17.Instance = TIM17;
 8003b1e:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <main+0x540>)
 8003b20:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <main+0x544>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b22:	6090      	str	r0, [r2, #8]
  htim17.Instance = TIM17;
 8003b24:	6013      	str	r3, [r2, #0]
  htim17.Init.Prescaler = 127;
 8003b26:	237f      	movs	r3, #127	; 0x7f
 8003b28:	6053      	str	r3, [r2, #4]
  htim17.Init.Period = IMU_PERIOD;
 8003b2a:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <main+0x548>)
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b2c:	6110      	str	r0, [r2, #16]
  htim17.Init.RepetitionCounter = 0;
 8003b2e:	6150      	str	r0, [r2, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b30:	6190      	str	r0, [r2, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003b32:	0010      	movs	r0, r2
  htim17.Init.Period = IMU_PERIOD;
 8003b34:	60d3      	str	r3, [r2, #12]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003b36:	f002 f9cb 	bl	8005ed0 <HAL_TIM_Base_Init>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d001      	beq.n	8003b42 <main+0x4a6>
 8003b3e:	b672      	cpsid	i
  while (1)
 8003b40:	e7fe      	b.n	8003b40 <main+0x4a4>
	  init_imu(front_imu);
 8003b42:	464b      	mov	r3, r9
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	f7ff fc29 	bl	800339c <init_imu>
	  init_imu(back_imu);
 8003b4a:	4643      	mov	r3, r8
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	f7ff fc25 	bl	800339c <init_imu>
  start_interrupt_timer(fast_interrupt_timer);
 8003b52:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <main+0x54c>)
	  HAL_Delay(250);
 8003b54:	25fa      	movs	r5, #250	; 0xfa
  start_interrupt_timer(fast_interrupt_timer);
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	f7ff fc90 	bl	800347c <start_interrupt_timer>
  start_interrupt_timer(slow_interrupt_timer);
 8003b5c:	4b23      	ldr	r3, [pc, #140]	; (8003bec <main+0x550>)
		  uint8_t is_skater_detected = !is_skater_gone(skater);
 8003b5e:	2401      	movs	r4, #1
  start_interrupt_timer(slow_interrupt_timer);
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	f7ff fc8b 	bl	800347c <start_interrupt_timer>
  receive_wireless(wireless, skater, joint);
 8003b66:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <main+0x554>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <main+0x558>)
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <main+0x55c>)
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	f7ff fb6f 	bl	8003254 <receive_wireless>
	  HAL_Delay(250);
 8003b76:	0028      	movs	r0, r5
 8003b78:	f000 fb94 	bl	80042a4 <HAL_Delay>
	  if (is_joint_close_enough_to_target(joint)) {
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <main+0x554>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	f7ff fc94 	bl	80034ac <is_joint_close_enough_to_target>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d0f6      	beq.n	8003b76 <main+0x4da>
		  uint8_t current_speed = get_speed_sensor_data(speed_sensor);
 8003b88:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <main+0x560>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	f000 f906 	bl	8003d9c <get_speed_sensor_data>
		  send_wireless_speed(wireless, current_speed);
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <main+0x55c>)
		  uint8_t current_speed = get_speed_sensor_data(speed_sensor);
 8003b92:	0001      	movs	r1, r0
		  send_wireless_speed(wireless, current_speed);
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	f7ff fa3b 	bl	8003010 <send_wireless_speed>
		  uint8_t battery_data = get_battery_sensor_data(battery_sensor);
 8003b9a:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <main+0x564>)
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	f7ff f9f5 	bl	8002f8c <get_battery_sensor_data>
		  send_wireless_battery_data(wireless, battery_data);
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <main+0x55c>)
		  uint8_t battery_data = get_battery_sensor_data(battery_sensor);
 8003ba4:	0001      	movs	r1, r0
		  send_wireless_battery_data(wireless, battery_data);
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	f7ff fa66 	bl	8003078 <send_wireless_battery_data>
		  uint8_t is_skater_detected = !is_skater_gone(skater);
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <main+0x558>)
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	f000 f886 	bl	8003cc0 <is_skater_gone>
 8003bb4:	0001      	movs	r1, r0
		  send_wireless_detect_skater_status(wireless, is_skater_detected);
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <main+0x55c>)
		  uint8_t is_skater_detected = !is_skater_gone(skater);
 8003bb8:	4061      	eors	r1, r4
		  send_wireless_detect_skater_status(wireless, is_skater_detected);
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	b2c9      	uxtb	r1, r1
 8003bbe:	f7ff fa41 	bl	8003044 <send_wireless_detect_skater_status>
 8003bc2:	e7d8      	b.n	8003b76 <main+0x4da>
 8003bc4:	0c000008 	.word	0x0c000008
 8003bc8:	20000220 	.word	0x20000220
 8003bcc:	20000390 	.word	0x20000390
 8003bd0:	40002000 	.word	0x40002000
 8003bd4:	200003dc 	.word	0x200003dc
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	20000428 	.word	0x20000428
 8003be0:	40014800 	.word	0x40014800
 8003be4:	0000c350 	.word	0x0000c350
 8003be8:	20000210 	.word	0x20000210
 8003bec:	20000528 	.word	0x20000528
 8003bf0:	20000510 	.word	0x20000510
 8003bf4:	20000524 	.word	0x20000524
 8003bf8:	20000534 	.word	0x20000534
 8003bfc:	2000052c 	.word	0x2000052c
 8003c00:	20000204 	.word	0x20000204

08003c04 <Error_Handler>:
 8003c04:	b672      	cpsid	i
  while (1)
 8003c06:	e7fe      	b.n	8003c06 <Error_Handler+0x2>

08003c08 <new_motor>:
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Motor object
Motor *new_motor(
	PinData *_dir_pin,
	PinData *_stp_pin
) {
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	0005      	movs	r5, r0
    Motor *motor = (Motor*) malloc(sizeof(Motor));
 8003c0c:	2008      	movs	r0, #8
) {
 8003c0e:	000c      	movs	r4, r1
    Motor *motor = (Motor*) malloc(sizeof(Motor));
 8003c10:	f003 f848 	bl	8006ca4 <malloc>
    motor->dir_pin = _dir_pin;
 8003c14:	6005      	str	r5, [r0, #0]
    motor->stp_pin = _stp_pin;
 8003c16:	6044      	str	r4, [r0, #4]
	return motor;
}
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	46c0      	nop			; (mov r8, r8)

08003c1c <step_motor_direction>:

// REQUIRES: motor is a Motor object
// and direction is a bool that dictates direction
// MODIFIES: nothing
// EFFECTS: Moves the motor a certain by a certain amount of steps
void step_motor_direction(Motor *motor, bool dir) {
 8003c1c:	b510      	push	{r4, lr}
 8003c1e:	0004      	movs	r4, r0
	set_pin_value(motor->dir_pin, dir);
 8003c20:	6800      	ldr	r0, [r0, #0]
 8003c22:	f000 f815 	bl	8003c50 <set_pin_value>
	set_pin_value(motor->stp_pin, GPIO_PIN_SET);
 8003c26:	6860      	ldr	r0, [r4, #4]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	f000 f811 	bl	8003c50 <set_pin_value>
//	for (uint8_t i = 0; i < 10; ++i);
	set_pin_value(motor->stp_pin, GPIO_PIN_RESET);
 8003c2e:	2100      	movs	r1, #0
 8003c30:	6860      	ldr	r0, [r4, #4]
 8003c32:	f000 f80d 	bl	8003c50 <set_pin_value>
}
 8003c36:	bd10      	pop	{r4, pc}

08003c38 <new_pin_data>:
// REQUIRES: _port and _pin corresponds to
// the port and pin and _is_output is boolean
// that is true if the pin is an output pin.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created PinData object
PinData *new_pin_data(GPIO_TypeDef *_port, uint16_t _pin, bool _is_output) {
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	0006      	movs	r6, r0
    PinData *pin_data = (PinData*) malloc(sizeof(PinData));
 8003c3c:	2008      	movs	r0, #8
PinData *new_pin_data(GPIO_TypeDef *_port, uint16_t _pin, bool _is_output) {
 8003c3e:	000d      	movs	r5, r1
 8003c40:	0014      	movs	r4, r2
    PinData *pin_data = (PinData*) malloc(sizeof(PinData));
 8003c42:	f003 f82f 	bl	8006ca4 <malloc>
	pin_data->port = _port;
 8003c46:	6006      	str	r6, [r0, #0]
    pin_data->pin = _pin;
 8003c48:	8085      	strh	r5, [r0, #4]
    pin_data->is_output = _is_output;
 8003c4a:	7184      	strb	r4, [r0, #6]
	return pin_data;
}
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)

08003c50 <set_pin_value>:

// REQUIRES: pin_data is PinData and value is 0 or 1
// MODIFIES: nothing
// EFFECTS: Sets pin to value
void set_pin_value(PinData *pin_data, uint8_t value) {
 8003c50:	b510      	push	{r4, lr}
	if (!pin_data->is_output) {
 8003c52:	7983      	ldrb	r3, [r0, #6]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d006      	beq.n	8003c66 <set_pin_value+0x16>
		return;
	}
	HAL_GPIO_WritePin(pin_data->port, pin_data->pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003c58:	1e4b      	subs	r3, r1, #1
 8003c5a:	4199      	sbcs	r1, r3
 8003c5c:	b2ca      	uxtb	r2, r1
 8003c5e:	8881      	ldrh	r1, [r0, #4]
 8003c60:	6800      	ldr	r0, [r0, #0]
 8003c62:	f001 f94f 	bl	8004f04 <HAL_GPIO_WritePin>
}
 8003c66:	bd10      	pop	{r4, pc}

08003c68 <get_pin_value>:

// REQUIRES: pin_data is PinData
// MODIFIES: nothing
// EFFECTS: Returns value of pin
bool get_pin_value(PinData *pin_data) {
 8003c68:	b510      	push	{r4, lr}
	if (pin_data->is_output) {
 8003c6a:	7982      	ldrb	r2, [r0, #6]
bool get_pin_value(PinData *pin_data) {
 8003c6c:	0003      	movs	r3, r0
		return false;
 8003c6e:	2000      	movs	r0, #0
	if (pin_data->is_output) {
 8003c70:	2a00      	cmp	r2, #0
 8003c72:	d106      	bne.n	8003c82 <get_pin_value+0x1a>
	}
	bool value = HAL_GPIO_ReadPin(pin_data->port, pin_data->pin);
 8003c74:	8899      	ldrh	r1, [r3, #4]
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	f001 f93e 	bl	8004ef8 <HAL_GPIO_ReadPin>
 8003c7c:	1e43      	subs	r3, r0, #1
 8003c7e:	4198      	sbcs	r0, r3
 8003c80:	b2c0      	uxtb	r0, r0
	return value;
}
 8003c82:	bd10      	pop	{r4, pc}

08003c84 <new_skater>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _force_sensor is a ForceSensor object and _thermistor is a Thermistor object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Skater object
Skater *new_skater(ForceSensor *_force_sensor, Thermistor *_thermistor) {
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	0005      	movs	r5, r0
	Skater *skater = (Skater*) malloc(sizeof(Skater));
 8003c88:	2014      	movs	r0, #20
Skater *new_skater(ForceSensor *_force_sensor, Thermistor *_thermistor) {
 8003c8a:	000c      	movs	r4, r1
	Skater *skater = (Skater*) malloc(sizeof(Skater));
 8003c8c:	f003 f80a 	bl	8006ca4 <malloc>
	skater->force_sensor = _force_sensor;
	skater->ms_since_skater_detected = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	6043      	str	r3, [r0, #4]
	skater->raw_value_indicating_skater_presence = ROOM_TEMP_SKATER_PRESENCE_VALUE;
 8003c94:	332b      	adds	r3, #43	; 0x2b
 8003c96:	8103      	strh	r3, [r0, #8]
	skater->thermistor = _thermistor;
	skater->use_temperature_to_adjust_force_sensor = true;
 8003c98:	3b2a      	subs	r3, #42	; 0x2a
	skater->force_sensor = _force_sensor;
 8003c9a:	6005      	str	r5, [r0, #0]
	skater->thermistor = _thermistor;
 8003c9c:	60c4      	str	r4, [r0, #12]
	skater->use_temperature_to_adjust_force_sensor = true;
 8003c9e:	7403      	strb	r3, [r0, #16]
	return skater;
}
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)

08003ca4 <has_skater_recently_left_board>:

// REQUIRES: skater is a Skater object
// MODIFIES: nothing
// EFFECTS: Returns whether skater has recently left board
bool has_skater_recently_left_board(Skater *skater) {
	return 1000 <= skater->ms_since_skater_detected && skater->ms_since_skater_detected <= TIME_TO_RELEASE_BRAKE_AFTER_SKATER_NOT_DETECTED;
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <has_skater_recently_left_board+0x14>)
 8003ca6:	6843      	ldr	r3, [r0, #4]
 8003ca8:	4694      	mov	ip, r2
 8003caa:	2000      	movs	r0, #0
 8003cac:	4a03      	ldr	r2, [pc, #12]	; (8003cbc <has_skater_recently_left_board+0x18>)
 8003cae:	4463      	add	r3, ip
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	4140      	adcs	r0, r0
 8003cb4:	b2c0      	uxtb	r0, r0
}
 8003cb6:	4770      	bx	lr
 8003cb8:	fffffc18 	.word	0xfffffc18
 8003cbc:	00000bb8 	.word	0x00000bb8

08003cc0 <is_skater_gone>:

// REQUIRES: skater is a Skater object
// MODIFIES: nothing
// EFFECTS: Returns whether skater is gone or not
bool is_skater_gone(Skater *skater) {
	return 1000 < skater->ms_since_skater_detected;
 8003cc0:	6843      	ldr	r3, [r0, #4]
 8003cc2:	20fa      	movs	r0, #250	; 0xfa
 8003cc4:	0080      	lsls	r0, r0, #2
 8003cc6:	4298      	cmp	r0, r3
 8003cc8:	4180      	sbcs	r0, r0
 8003cca:	4240      	negs	r0, r0
}
 8003ccc:	4770      	bx	lr
 8003cce:	46c0      	nop			; (mov r8, r8)

08003cd0 <refresh_skater_status>:

// REQUIRES: skater is a Skater object
// MODIFIES: ms_since_skater_detected
// EFFECTS: Updates the value of ms_since_skater_detected
// This function is expected to be called every 2 ms.
void refresh_skater_status(Skater *skater) {
 8003cd0:	b510      	push	{r4, lr}

	if (skater->use_temperature_to_adjust_force_sensor) {
 8003cd2:	7c03      	ldrb	r3, [r0, #16]
void refresh_skater_status(Skater *skater) {
 8003cd4:	0004      	movs	r4, r0
	if (skater->use_temperature_to_adjust_force_sensor) {
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <refresh_skater_status+0x20>
			// COLD
			skater->raw_value_indicating_skater_presence = COLD_TEMP_SKATER_PRESENCE_VALUE;
		}
	}

	uint16_t raw_force_value = get_force_sensor_data(skater->force_sensor);
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	f7ff fb0a 	bl	80032f4 <get_force_sensor_data>
	bool is_skater_detected = raw_force_value < skater->raw_value_indicating_skater_presence;

	// If skater is detected, reset value to 0.
	// If skater is not detected, then keep incrementing ms_since_skater_detected.
	if (is_skater_detected) {
 8003ce0:	8922      	ldrh	r2, [r4, #8]
		skater->ms_since_skater_detected = 0;
 8003ce2:	2300      	movs	r3, #0
	if (is_skater_detected) {
 8003ce4:	4282      	cmp	r2, r0
 8003ce6:	d801      	bhi.n	8003cec <refresh_skater_status+0x1c>
	}
	else {
		skater->ms_since_skater_detected += 2;
 8003ce8:	6863      	ldr	r3, [r4, #4]
 8003cea:	3302      	adds	r3, #2
 8003cec:	6063      	str	r3, [r4, #4]
	}
}
 8003cee:	bd10      	pop	{r4, pc}
		uint8_t raw_temp_value = get_thermistor_data(skater->thermistor);
 8003cf0:	68c0      	ldr	r0, [r0, #12]
 8003cf2:	f000 fa59 	bl	80041a8 <get_thermistor_data>
		if (raw_temp_value > ROOM_TEMP_RAW_THERM_VALUE_INDICATING_SKATER) {
 8003cf6:	281e      	cmp	r0, #30
 8003cf8:	d902      	bls.n	8003d00 <refresh_skater_status+0x30>
			skater->raw_value_indicating_skater_presence = ROOM_TEMP_SKATER_PRESENCE_VALUE;
 8003cfa:	232b      	movs	r3, #43	; 0x2b
 8003cfc:	8123      	strh	r3, [r4, #8]
 8003cfe:	e7ec      	b.n	8003cda <refresh_skater_status+0xa>
			skater->raw_value_indicating_skater_presence = COLD_TEMP_SKATER_PRESENCE_VALUE;
 8003d00:	2329      	movs	r3, #41	; 0x29
 8003d02:	8123      	strh	r3, [r4, #8]
 8003d04:	e7e9      	b.n	8003cda <refresh_skater_status+0xa>
 8003d06:	46c0      	nop			; (mov r8, r8)

08003d08 <calibrate_skater_threshold>:

// REQUIRES: skater is a Skater object
// MODIFIES: raw_value_indicating_skater_presence
// EFFECTS: Calibrates skater threshold value, assuming current value means no skater
void calibrate_skater_threshold(Skater *skater) {
	skater->use_temperature_to_adjust_force_sensor = false;
 8003d08:	2300      	movs	r3, #0
void calibrate_skater_threshold(Skater *skater) {
 8003d0a:	b510      	push	{r4, lr}
 8003d0c:	0004      	movs	r4, r0
	skater->use_temperature_to_adjust_force_sensor = false;
 8003d0e:	7403      	strb	r3, [r0, #16]
	uint16_t current_raw_force_value = get_force_sensor_data(skater->force_sensor);
 8003d10:	6800      	ldr	r0, [r0, #0]
 8003d12:	f7ff faef 	bl	80032f4 <get_force_sensor_data>
	if (current_raw_force_value > 2) {
 8003d16:	2802      	cmp	r0, #2
 8003d18:	d902      	bls.n	8003d20 <calibrate_skater_threshold+0x18>
		skater->raw_value_indicating_skater_presence = skater->raw_value_indicating_skater_presence - 2;
 8003d1a:	8923      	ldrh	r3, [r4, #8]
 8003d1c:	3b02      	subs	r3, #2
 8003d1e:	8123      	strh	r3, [r4, #8]
	}
}
 8003d20:	bd10      	pop	{r4, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)

08003d24 <new_speed_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _front_imu and _back_imu are IMU objects
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created SpeedSensor object
SpeedSensor *new_speed_sensor(IMU *_front_imu, IMU *_back_imu) {
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	0005      	movs	r5, r0
	SpeedSensor *speed_sensor = (SpeedSensor*) malloc(sizeof(SpeedSensor));
 8003d28:	2010      	movs	r0, #16
SpeedSensor *new_speed_sensor(IMU *_front_imu, IMU *_back_imu) {
 8003d2a:	000c      	movs	r4, r1
	SpeedSensor *speed_sensor = (SpeedSensor*) malloc(sizeof(SpeedSensor));
 8003d2c:	f002 ffba 	bl	8006ca4 <malloc>
	speed_sensor->front_imu = _front_imu;
	speed_sensor->back_imu = _back_imu;
	speed_sensor->speed = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	7203      	strb	r3, [r0, #8]
	speed_sensor->ms_since_front_imu_spiked = 0xFFFFFFFF;
 8003d34:	3b01      	subs	r3, #1
	speed_sensor->front_imu = _front_imu;
 8003d36:	6005      	str	r5, [r0, #0]
	speed_sensor->back_imu = _back_imu;
 8003d38:	6044      	str	r4, [r0, #4]
	speed_sensor->ms_since_front_imu_spiked = 0xFFFFFFFF;
 8003d3a:	60c3      	str	r3, [r0, #12]
	return speed_sensor;
}
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)

08003d40 <refresh_speed_sensor_logic>:
// REQUIRES: SpeedSensor is a speed_sensor object
// MODIFIES: speed
// EFFECTS: Returns the currently stored speed value of the speed sensor
// Assumes this function is called every 2ms.
void refresh_speed_sensor_logic(SpeedSensor *speed_sensor) {
	speed_sensor->ms_since_front_imu_spiked += 2;
 8003d40:	68c3      	ldr	r3, [r0, #12]
	if (speed_sensor->ms_since_front_imu_spiked > SPEED_SENSOR_TOO_LONG_SO_SET_SPEED_TO_0) {
 8003d42:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <refresh_speed_sensor_logic+0x14>)
	speed_sensor->ms_since_front_imu_spiked += 2;
 8003d44:	3302      	adds	r3, #2
 8003d46:	60c3      	str	r3, [r0, #12]
	if (speed_sensor->ms_since_front_imu_spiked > SPEED_SENSOR_TOO_LONG_SO_SET_SPEED_TO_0) {
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <refresh_speed_sensor_logic+0x10>
		speed_sensor->speed = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	7203      	strb	r3, [r0, #8]
	}
}
 8003d50:	4770      	bx	lr
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	00001388 	.word	0x00001388

08003d58 <trigger_speed_sensor_interrupt>:

// REQUIRES: SpeedSensor is a speed_sensor object
// MODIFIES: speed
// EFFECTS: Updates the speed logic depending on if the front imu or back imu triggered
// this interrupt. This function should ONLY be called if an interrupt is triggered.
void trigger_speed_sensor_interrupt(SpeedSensor* speed_sensor, bool is_front) {
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	0004      	movs	r4, r0
	if (is_front) {
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d002      	beq.n	8003d66 <trigger_speed_sensor_interrupt+0xe>
		speed_sensor->ms_since_front_imu_spiked = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60c3      	str	r3, [r0, #12]
//		if (mph > 99.0f) {
//			mph = 99.0f;
//		}
		speed_sensor->speed = mph;
	}
}
 8003d64:	bd70      	pop	{r4, r5, r6, pc}
		float meters_per_second = LENGTH_OF_BOARD_M * 1000.0f / speed_sensor->ms_since_front_imu_spiked;
 8003d66:	68c0      	ldr	r0, [r0, #12]
 8003d68:	f7fd fa06 	bl	8001178 <__aeabi_ui2f>
 8003d6c:	1c01      	adds	r1, r0, #0
 8003d6e:	4808      	ldr	r0, [pc, #32]	; (8003d90 <trigger_speed_sensor_interrupt+0x38>)
 8003d70:	f7fc fd46 	bl	8000800 <__aeabi_fdiv>
		float mph = meters_per_second * MPH_TO_MPS_RATIO;
 8003d74:	4907      	ldr	r1, [pc, #28]	; (8003d94 <trigger_speed_sensor_interrupt+0x3c>)
 8003d76:	f7fc ff0b 	bl	8000b90 <__aeabi_fmul>
		if (mph > 15.0f) {
 8003d7a:	4907      	ldr	r1, [pc, #28]	; (8003d98 <trigger_speed_sensor_interrupt+0x40>)
		float mph = meters_per_second * MPH_TO_MPS_RATIO;
 8003d7c:	1c05      	adds	r5, r0, #0
		if (mph > 15.0f) {
 8003d7e:	f7fc fbb7 	bl	80004f0 <__aeabi_fcmpgt>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d1ee      	bne.n	8003d64 <trigger_speed_sensor_interrupt+0xc>
		speed_sensor->speed = mph;
 8003d86:	1c28      	adds	r0, r5, #0
 8003d88:	f7fc fbe6 	bl	8000558 <__aeabi_f2uiz>
 8003d8c:	7220      	strb	r0, [r4, #8]
 8003d8e:	e7e9      	b.n	8003d64 <trigger_speed_sensor_interrupt+0xc>
 8003d90:	44048000 	.word	0x44048000
 8003d94:	400f2a06 	.word	0x400f2a06
 8003d98:	41700000 	.word	0x41700000

08003d9c <get_speed_sensor_data>:

// REQUIRES: SpeedSensor is a speed_sensor object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored speed value of the speed sensor
uint8_t get_speed_sensor_data(SpeedSensor *speed_sensor) {
	return speed_sensor->speed;
 8003d9c:	7a00      	ldrb	r0, [r0, #8]
}
 8003d9e:	4770      	bx	lr

08003da0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da0:	2201      	movs	r2, #1
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_MspInit+0x2c>)
{
 8003da4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003da8:	4311      	orrs	r1, r2
 8003daa:	6419      	str	r1, [r3, #64]	; 0x40
 8003dac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003dae:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003db0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db2:	9200      	str	r2, [sp, #0]
 8003db4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db8:	0549      	lsls	r1, r1, #21
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	400b      	ands	r3, r1
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dc6:	b002      	add	sp, #8
 8003dc8:	4770      	bx	lr
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	0004      	movs	r4, r0
 8003dd4:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd6:	2214      	movs	r2, #20
 8003dd8:	2100      	movs	r1, #0
 8003dda:	a802      	add	r0, sp, #8
 8003ddc:	f002 ff75 	bl	8006cca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003de0:	2228      	movs	r2, #40	; 0x28
 8003de2:	2100      	movs	r1, #0
 8003de4:	a808      	add	r0, sp, #32
 8003de6:	f002 ff70 	bl	8006cca <memset>
  if(hadc->Instance==ADC1)
 8003dea:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <HAL_ADC_MspInit+0xb0>)
 8003dec:	6822      	ldr	r2, [r4, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d001      	beq.n	8003df6 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003df2:	b012      	add	sp, #72	; 0x48
 8003df4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003df6:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003df8:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003dfa:	01db      	lsls	r3, r3, #7
 8003dfc:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dfe:	f001 ff71 	bl	8005ce4 <HAL_RCCEx_PeriphCLKConfig>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d135      	bne.n	8003e72 <HAL_ADC_MspInit+0xa2>
    __HAL_RCC_ADC_CLK_ENABLE();
 8003e06:	2080      	movs	r0, #128	; 0x80
 8003e08:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <HAL_ADC_MspInit+0xb4>)
 8003e0a:	0340      	lsls	r0, r0, #13
 8003e0c:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8003e10:	4301      	orrs	r1, r0
 8003e12:	6419      	str	r1, [r3, #64]	; 0x40
 8003e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e16:	4002      	ands	r2, r0
 8003e18:	9200      	str	r2, [sp, #0]
 8003e1a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e20:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e22:	4311      	orrs	r1, r2
 8003e24:	6359      	str	r1, [r3, #52]	; 0x34
 8003e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e28:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	9201      	str	r2, [sp, #4]
 8003e2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FORCE_SENSOR_Pin|POTENTIOMETER_Pin|BATTERYDATA_Pin;
 8003e30:	220d      	movs	r2, #13
 8003e32:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e34:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = FORCE_SENSOR_Pin|POTENTIOMETER_Pin|BATTERYDATA_Pin;
 8003e36:	9202      	str	r2, [sp, #8]
 8003e38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e3c:	f000 ff4e 	bl	8004cdc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8003e40:	4d11      	ldr	r5, [pc, #68]	; (8003e88 <HAL_ADC_MspInit+0xb8>)
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_ADC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e44:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 8003e46:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003e48:	2305      	movs	r3, #5
 8003e4a:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e4c:	337b      	adds	r3, #123	; 0x7b
 8003e4e:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e50:	3380      	adds	r3, #128	; 0x80
 8003e52:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e5a:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e5c:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e5e:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e60:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e62:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e64:	f000 fdfe 	bl	8004a64 <HAL_DMA_Init>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e6c:	6525      	str	r5, [r4, #80]	; 0x50
 8003e6e:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8003e70:	e7bf      	b.n	8003df2 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8003e72:	f7ff fec7 	bl	8003c04 <Error_Handler>
 8003e76:	e7c6      	b.n	8003e06 <HAL_ADC_MspInit+0x36>
      Error_Handler();
 8003e78:	f7ff fec4 	bl	8003c04 <Error_Handler>
 8003e7c:	e7f6      	b.n	8003e6c <HAL_ADC_MspInit+0x9c>
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	40012400 	.word	0x40012400
 8003e84:	40021000 	.word	0x40021000
 8003e88:	20000284 	.word	0x20000284
 8003e8c:	40020008 	.word	0x40020008

08003e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e90:	b510      	push	{r4, lr}
 8003e92:	0004      	movs	r4, r0
 8003e94:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e96:	2214      	movs	r2, #20
 8003e98:	2100      	movs	r1, #0
 8003e9a:	a802      	add	r0, sp, #8
 8003e9c:	f002 ff15 	bl	8006cca <memset>
  if(hi2c->Instance==I2C2)
 8003ea0:	4b12      	ldr	r3, [pc, #72]	; (8003eec <HAL_I2C_MspInit+0x5c>)
 8003ea2:	6822      	ldr	r2, [r4, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ea8:	b008      	add	sp, #32
 8003eaa:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eac:	2301      	movs	r3, #1
 8003eae:	4c10      	ldr	r4, [pc, #64]	; (8003ef0 <HAL_I2C_MspInit+0x60>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	6362      	str	r2, [r4, #52]	; 0x34
 8003eba:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ebc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8003ec2:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8003ec6:	2312      	movs	r3, #18
 8003ec8:	0152      	lsls	r2, r2, #5
 8003eca:	9202      	str	r2, [sp, #8]
 8003ecc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003ece:	2306      	movs	r3, #6
 8003ed0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed2:	f000 ff03 	bl	8004cdc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ed6:	2180      	movs	r1, #128	; 0x80
 8003ed8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003eda:	03c9      	lsls	r1, r1, #15
 8003edc:	430a      	orrs	r2, r1
 8003ede:	63e2      	str	r2, [r4, #60]	; 0x3c
 8003ee0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ee2:	400b      	ands	r3, r1
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	9b01      	ldr	r3, [sp, #4]
}
 8003ee8:	e7de      	b.n	8003ea8 <HAL_I2C_MspInit+0x18>
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	40005800 	.word	0x40005800
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ef4:	b500      	push	{lr}
  if(htim_base->Instance==TIM14)
 8003ef6:	6803      	ldr	r3, [r0, #0]
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <HAL_TIM_Base_MspInit+0x90>)
{
 8003efa:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM14)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_TIM_Base_MspInit+0x94>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d017      	beq.n	8003f36 <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 8003f06:	4a21      	ldr	r2, [pc, #132]	; (8003f8c <HAL_TIM_Base_MspInit+0x98>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d027      	beq.n	8003f5c <HAL_TIM_Base_MspInit+0x68>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003f0c:	b005      	add	sp, #20
 8003f0e:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003f10:	2080      	movs	r0, #128	; 0x80
 8003f12:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <HAL_TIM_Base_MspInit+0x9c>)
 8003f14:	0200      	lsls	r0, r0, #8
 8003f16:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003f18:	4301      	orrs	r1, r0
 8003f1a:	6411      	str	r1, [r2, #64]	; 0x40
 8003f1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003f1e:	2100      	movs	r1, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003f20:	4003      	ands	r3, r0
 8003f22:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003f24:	2200      	movs	r2, #0
 8003f26:	2013      	movs	r0, #19
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003f28:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003f2a:	f000 fd43 	bl	80049b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003f2e:	2013      	movs	r0, #19
 8003f30:	f000 fd72 	bl	8004a18 <HAL_NVIC_EnableIRQ>
 8003f34:	e7ea      	b.n	8003f0c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003f36:	2080      	movs	r0, #128	; 0x80
 8003f38:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <HAL_TIM_Base_MspInit+0x9c>)
 8003f3a:	0280      	lsls	r0, r0, #10
 8003f3c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003f3e:	4301      	orrs	r1, r0
 8003f40:	6411      	str	r1, [r2, #64]	; 0x40
 8003f42:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003f44:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003f46:	4003      	ands	r3, r0
 8003f48:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003f4e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003f50:	f000 fd30 	bl	80049b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003f54:	2015      	movs	r0, #21
 8003f56:	f000 fd5f 	bl	8004a18 <HAL_NVIC_EnableIRQ>
 8003f5a:	e7d7      	b.n	8003f0c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003f5c:	2080      	movs	r0, #128	; 0x80
 8003f5e:	4a0c      	ldr	r2, [pc, #48]	; (8003f90 <HAL_TIM_Base_MspInit+0x9c>)
 8003f60:	02c0      	lsls	r0, r0, #11
 8003f62:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003f64:	4301      	orrs	r1, r0
 8003f66:	6411      	str	r1, [r2, #64]	; 0x40
 8003f68:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003f6a:	2100      	movs	r1, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003f6c:	4003      	ands	r3, r0
 8003f6e:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003f74:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003f76:	f000 fd1d 	bl	80049b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003f7a:	2016      	movs	r0, #22
 8003f7c:	f000 fd4c 	bl	8004a18 <HAL_NVIC_EnableIRQ>
}
 8003f80:	e7c4      	b.n	8003f0c <HAL_TIM_Base_MspInit+0x18>
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	40002000 	.word	0x40002000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800
 8003f90:	40021000 	.word	0x40021000

08003f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	0004      	movs	r4, r0
 8003f98:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9a:	2214      	movs	r2, #20
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	a802      	add	r0, sp, #8
 8003fa0:	f002 fe93 	bl	8006cca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fa4:	2228      	movs	r2, #40	; 0x28
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	a808      	add	r0, sp, #32
 8003faa:	f002 fe8e 	bl	8006cca <memset>
  if(huart->Instance==USART1)
 8003fae:	4b25      	ldr	r3, [pc, #148]	; (8004044 <HAL_UART_MspInit+0xb0>)
 8003fb0:	6822      	ldr	r2, [r4, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d001      	beq.n	8003fba <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003fb6:	b012      	add	sp, #72	; 0x48
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003fba:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fbc:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003fbe:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fc0:	f001 fe90 	bl	8005ce4 <HAL_RCCEx_PeriphCLKConfig>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d136      	bne.n	8004036 <HAL_UART_MspInit+0xa2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fc8:	2080      	movs	r0, #128	; 0x80
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_UART_MspInit+0xb4>)
 8003fcc:	01c0      	lsls	r0, r0, #7
 8003fce:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003fd0:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fd2:	4301      	orrs	r1, r0
 8003fd4:	6419      	str	r1, [r3, #64]	; 0x40
 8003fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd8:	4002      	ands	r2, r0
 8003fda:	9200      	str	r2, [sp, #0]
 8003fdc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fde:	2202      	movs	r2, #2
 8003fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe2:	481a      	ldr	r0, [pc, #104]	; (800404c <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe4:	4311      	orrs	r1, r2
 8003fe6:	6359      	str	r1, [r3, #52]	; 0x34
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fea:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fec:	401a      	ands	r2, r3
 8003fee:	9201      	str	r2, [sp, #4]
 8003ff0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BLUETOOTH_UART_RX_Pin|BLUETOOTH_UART_TX_Pin;
 8003ff2:	22c0      	movs	r2, #192	; 0xc0
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	9202      	str	r2, [sp, #8]
 8003ff8:	9303      	str	r3, [sp, #12]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003ffe:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = BLUETOOTH_UART_RX_Pin|BLUETOOTH_UART_TX_Pin;
 8004000:	9204      	str	r2, [sp, #16]
 8004002:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004004:	f000 fe6a 	bl	8004cdc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8004008:	4d11      	ldr	r5, [pc, #68]	; (8004050 <HAL_UART_MspInit+0xbc>)
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_UART_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800400c:	0028      	movs	r0, r5
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800400e:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004010:	2332      	movs	r3, #50	; 0x32
 8004012:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004014:	334e      	adds	r3, #78	; 0x4e
 8004016:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004018:	3b60      	subs	r3, #96	; 0x60
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800401a:	60ae      	str	r6, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800401c:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800401e:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004020:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004022:	61eb      	str	r3, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004024:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004026:	f000 fd1d 	bl	8004a64 <HAL_DMA_Init>
 800402a:	2800      	cmp	r0, #0
 800402c:	d106      	bne.n	800403c <HAL_UART_MspInit+0xa8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	62ac      	str	r4, [r5, #40]	; 0x28
 8004032:	50e5      	str	r5, [r4, r3]
}
 8004034:	e7bf      	b.n	8003fb6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8004036:	f7ff fde5 	bl	8003c04 <Error_Handler>
 800403a:	e7c5      	b.n	8003fc8 <HAL_UART_MspInit+0x34>
      Error_Handler();
 800403c:	f7ff fde2 	bl	8003c04 <Error_Handler>
 8004040:	e7f5      	b.n	800402e <HAL_UART_MspInit+0x9a>
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	40013800 	.word	0x40013800
 8004048:	40021000 	.word	0x40021000
 800404c:	50000400 	.word	0x50000400
 8004050:	200002e0 	.word	0x200002e0
 8004054:	4002001c 	.word	0x4002001c

08004058 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004058:	e7fe      	b.n	8004058 <NMI_Handler>
 800405a:	46c0      	nop			; (mov r8, r8)

0800405c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800405c:	e7fe      	b.n	800405c <HardFault_Handler>
 800405e:	46c0      	nop			; (mov r8, r8)

08004060 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004060:	4770      	bx	lr
 8004062:	46c0      	nop			; (mov r8, r8)

08004064 <PendSV_Handler>:
 8004064:	4770      	bx	lr
 8004066:	46c0      	nop			; (mov r8, r8)

08004068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004068:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800406a:	f000 f909 	bl	8004280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800406e:	bd10      	pop	{r4, pc}

08004070 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004070:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_BACK_IMU_INT_Pin);
 8004072:	2001      	movs	r0, #1
 8004074:	f000 ff4e 	bl	8004f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004078:	bd10      	pop	{r4, pc}
 800407a:	46c0      	nop			; (mov r8, r8)

0800407c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800407c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PA5_FRONT_IMU_INT_Pin);
 800407e:	2020      	movs	r0, #32
 8004080:	f000 ff48 	bl	8004f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004084:	bd10      	pop	{r4, pc}
 8004086:	46c0      	nop			; (mov r8, r8)

08004088 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004088:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800408a:	4802      	ldr	r0, [pc, #8]	; (8004094 <DMA1_Channel1_IRQHandler+0xc>)
 800408c:	f000 fdca 	bl	8004c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004090:	bd10      	pop	{r4, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	20000284 	.word	0x20000284

08004098 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004098:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800409a:	4802      	ldr	r0, [pc, #8]	; (80040a4 <DMA1_Channel2_3_IRQHandler+0xc>)
 800409c:	f000 fdc2 	bl	8004c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80040a0:	bd10      	pop	{r4, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	200002e0 	.word	0x200002e0

080040a8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80040a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80040aa:	4802      	ldr	r0, [pc, #8]	; (80040b4 <TIM14_IRQHandler+0xc>)
 80040ac:	f001 ffc6 	bl	800603c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80040b0:	bd10      	pop	{r4, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	20000390 	.word	0x20000390

080040b8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80040b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80040ba:	4802      	ldr	r0, [pc, #8]	; (80040c4 <TIM16_IRQHandler+0xc>)
 80040bc:	f001 ffbe 	bl	800603c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80040c0:	bd10      	pop	{r4, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	200003dc 	.word	0x200003dc

080040c8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80040c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80040ca:	4802      	ldr	r0, [pc, #8]	; (80040d4 <TIM17_IRQHandler+0xc>)
 80040cc:	f001 ffb6 	bl	800603c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80040d0:	bd10      	pop	{r4, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	20000428 	.word	0x20000428

080040d8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80040d8:	2001      	movs	r0, #1
 80040da:	4770      	bx	lr

080040dc <_kill>:

int _kill(int pid, int sig)
{
 80040dc:	b510      	push	{r4, lr}
	errno = EINVAL;
 80040de:	f002 fdb7 	bl	8006c50 <__errno>
 80040e2:	2316      	movs	r3, #22
 80040e4:	6003      	str	r3, [r0, #0]
	return -1;
 80040e6:	2001      	movs	r0, #1
}
 80040e8:	4240      	negs	r0, r0
 80040ea:	bd10      	pop	{r4, pc}

080040ec <_exit>:

void _exit (int status)
{
 80040ec:	b510      	push	{r4, lr}
	errno = EINVAL;
 80040ee:	f002 fdaf 	bl	8006c50 <__errno>
 80040f2:	2316      	movs	r3, #22
 80040f4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80040f6:	e7fe      	b.n	80040f6 <_exit+0xa>

080040f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fc:	dd07      	ble.n	800410e <_read+0x16>
 80040fe:	000c      	movs	r4, r1
 8004100:	188d      	adds	r5, r1, r2
	{
		*ptr++ = __io_getchar();
 8004102:	e000      	b.n	8004106 <_read+0xe>
 8004104:	bf00      	nop
 8004106:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004108:	3401      	adds	r4, #1
 800410a:	42ac      	cmp	r4, r5
 800410c:	d1f9      	bne.n	8004102 <_read+0xa>
	}

return len;
}
 800410e:	0030      	movs	r0, r6
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	46c0      	nop			; (mov r8, r8)

08004114 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004118:	dd07      	ble.n	800412a <_write+0x16>
 800411a:	000c      	movs	r4, r1
 800411c:	188d      	adds	r5, r1, r2
	{
		__io_putchar(*ptr++);
 800411e:	7820      	ldrb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004120:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8004122:	e000      	b.n	8004126 <_write+0x12>
 8004124:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004126:	42ac      	cmp	r4, r5
 8004128:	d1f9      	bne.n	800411e <_write+0xa>
	}
	return len;
}
 800412a:	0030      	movs	r0, r6
 800412c:	bd70      	pop	{r4, r5, r6, pc}
 800412e:	46c0      	nop			; (mov r8, r8)

08004130 <_close>:

int _close(int file)
{
	return -1;
 8004130:	2001      	movs	r0, #1
}
 8004132:	4240      	negs	r0, r0
 8004134:	4770      	bx	lr
 8004136:	46c0      	nop			; (mov r8, r8)

08004138 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	019b      	lsls	r3, r3, #6
	return 0;
}
 800413c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800413e:	604b      	str	r3, [r1, #4]
}
 8004140:	4770      	bx	lr
 8004142:	46c0      	nop			; (mov r8, r8)

08004144 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004144:	2001      	movs	r0, #1
 8004146:	4770      	bx	lr

08004148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004148:	2000      	movs	r0, #0
 800414a:	4770      	bx	lr

0800414c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800414c:	490c      	ldr	r1, [pc, #48]	; (8004180 <_sbrk+0x34>)
 800414e:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <_sbrk+0x38>)
{
 8004150:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004152:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004154:	490c      	ldr	r1, [pc, #48]	; (8004188 <_sbrk+0x3c>)
{
 8004156:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8004158:	6808      	ldr	r0, [r1, #0]
 800415a:	2800      	cmp	r0, #0
 800415c:	d004      	beq.n	8004168 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800415e:	18c3      	adds	r3, r0, r3
 8004160:	4293      	cmp	r3, r2
 8004162:	d806      	bhi.n	8004172 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004164:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8004166:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004168:	4808      	ldr	r0, [pc, #32]	; (800418c <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 800416a:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 800416c:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800416e:	4293      	cmp	r3, r2
 8004170:	d9f8      	bls.n	8004164 <_sbrk+0x18>
    errno = ENOMEM;
 8004172:	f002 fd6d 	bl	8006c50 <__errno>
 8004176:	230c      	movs	r3, #12
 8004178:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800417a:	2001      	movs	r0, #1
 800417c:	4240      	negs	r0, r0
 800417e:	e7f2      	b.n	8004166 <_sbrk+0x1a>
 8004180:	00000400 	.word	0x00000400
 8004184:	20002000 	.word	0x20002000
 8004188:	20000538 	.word	0x20000538
 800418c:	20000550 	.word	0x20000550

08004190 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004190:	4770      	bx	lr
 8004192:	46c0      	nop			; (mov r8, r8)

08004194 <new_thermistor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Thermistor object
Thermistor *new_thermistor(ADCSensor *_adc_sensor, uint8_t _rank) {
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	0005      	movs	r5, r0
	Thermistor *thermistor = (Thermistor*) malloc(sizeof(Thermistor));
 8004198:	2008      	movs	r0, #8
Thermistor *new_thermistor(ADCSensor *_adc_sensor, uint8_t _rank) {
 800419a:	000c      	movs	r4, r1
	Thermistor *thermistor = (Thermistor*) malloc(sizeof(Thermistor));
 800419c:	f002 fd82 	bl	8006ca4 <malloc>
	thermistor->adc_sensor = _adc_sensor;
 80041a0:	6005      	str	r5, [r0, #0]
	thermistor->rank = _rank;
 80041a2:	7104      	strb	r4, [r0, #4]
	return thermistor;
}
 80041a4:	bd70      	pop	{r4, r5, r6, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)

080041a8 <get_thermistor_data>:

// REQUIRES: thermistor is a Thermistor object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value thermistor data.
uint8_t get_thermistor_data(Thermistor *thermistor) {
 80041a8:	b510      	push	{r4, lr}
    uint32_t raw_value = get_adc_sensor_value(thermistor->adc_sensor, thermistor->rank);
 80041aa:	7901      	ldrb	r1, [r0, #4]
 80041ac:	6800      	ldr	r0, [r0, #0]
 80041ae:	f7fe fecf 	bl	8002f50 <get_adc_sensor_value>
    return raw_value;
 80041b2:	b2c0      	uxtb	r0, r0
}
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)

080041b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80041b8:	480d      	ldr	r0, [pc, #52]	; (80041f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80041ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80041bc:	f7ff ffe8 	bl	8004190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041c0:	480c      	ldr	r0, [pc, #48]	; (80041f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80041c2:	490d      	ldr	r1, [pc, #52]	; (80041f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80041c4:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <LoopForever+0xe>)
  movs r3, #0
 80041c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041c8:	e002      	b.n	80041d0 <LoopCopyDataInit>

080041ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ce:	3304      	adds	r3, #4

080041d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041d4:	d3f9      	bcc.n	80041ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041d6:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041d8:	4c0a      	ldr	r4, [pc, #40]	; (8004204 <LoopForever+0x16>)
  movs r3, #0
 80041da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041dc:	e001      	b.n	80041e2 <LoopFillZerobss>

080041de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041e0:	3204      	adds	r2, #4

080041e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041e4:	d3fb      	bcc.n	80041de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80041e6:	f002 fd39 	bl	8006c5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80041ea:	f7ff fa57 	bl	800369c <main>

080041ee <LoopForever>:

LoopForever:
  b LoopForever
 80041ee:	e7fe      	b.n	80041ee <LoopForever>
  ldr   r0, =_estack
 80041f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80041f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80041fc:	0800bddc 	.word	0x0800bddc
  ldr r2, =_sbss
 8004200:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004204:	20000550 	.word	0x20000550

08004208 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004208:	e7fe      	b.n	8004208 <ADC1_IRQHandler>
	...

0800420c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800420c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <HAL_InitTick+0x40>)
{
 8004210:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8004212:	7819      	ldrb	r1, [r3, #0]
 8004214:	2900      	cmp	r1, #0
 8004216:	d101      	bne.n	800421c <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004218:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800421a:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800421c:	20fa      	movs	r0, #250	; 0xfa
 800421e:	0080      	lsls	r0, r0, #2
 8004220:	f7fb ff8c 	bl	800013c <__udivsi3>
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_InitTick+0x44>)
 8004226:	0001      	movs	r1, r0
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	f7fb ff87 	bl	800013c <__udivsi3>
 800422e:	f000 fbff 	bl	8004a30 <HAL_SYSTICK_Config>
 8004232:	2800      	cmp	r0, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004236:	2c03      	cmp	r4, #3
 8004238:	d8ee      	bhi.n	8004218 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800423a:	3801      	subs	r0, #1
 800423c:	2200      	movs	r2, #0
 800423e:	0021      	movs	r1, r4
 8004240:	f000 fbb8 	bl	80049b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <HAL_InitTick+0x48>)
 8004246:	2000      	movs	r0, #0
 8004248:	601c      	str	r4, [r3, #0]
  return status;
 800424a:	e7e6      	b.n	800421a <HAL_InitTick+0xe>
 800424c:	20000004 	.word	0x20000004
 8004250:	20000000 	.word	0x20000000
 8004254:	20000008 	.word	0x20000008

08004258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	4a08      	ldr	r2, [pc, #32]	; (800427c <HAL_Init+0x24>)
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	6811      	ldr	r1, [r2, #0]
{
 8004260:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004262:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004264:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004266:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004268:	f7ff ffd0 	bl	800420c <HAL_InitTick>
 800426c:	1e04      	subs	r4, r0, #0
 800426e:	d002      	beq.n	8004276 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8004270:	2401      	movs	r4, #1
}
 8004272:	0020      	movs	r0, r4
 8004274:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8004276:	f7ff fd93 	bl	8003da0 <HAL_MspInit>
 800427a:	e7fa      	b.n	8004272 <HAL_Init+0x1a>
 800427c:	40022000 	.word	0x40022000

08004280 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004280:	4a03      	ldr	r2, [pc, #12]	; (8004290 <HAL_IncTick+0x10>)
 8004282:	4b04      	ldr	r3, [pc, #16]	; (8004294 <HAL_IncTick+0x14>)
 8004284:	6811      	ldr	r1, [r2, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	185b      	adds	r3, r3, r1
 800428a:	6013      	str	r3, [r2, #0]
}
 800428c:	4770      	bx	lr
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	2000053c 	.word	0x2000053c
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004298:	4b01      	ldr	r3, [pc, #4]	; (80042a0 <HAL_GetTick+0x8>)
 800429a:	6818      	ldr	r0, [r3, #0]
}
 800429c:	4770      	bx	lr
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	2000053c 	.word	0x2000053c

080042a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80042a8:	f7ff fff6 	bl	8004298 <HAL_GetTick>
 80042ac:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ae:	1c63      	adds	r3, r4, #1
 80042b0:	d002      	beq.n	80042b8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <HAL_Delay+0x20>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042b8:	f7ff ffee 	bl	8004298 <HAL_GetTick>
 80042bc:	1b40      	subs	r0, r0, r5
 80042be:	42a0      	cmp	r0, r4
 80042c0:	d3fa      	bcc.n	80042b8 <HAL_Delay+0x14>
  {
  }
}
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
 80042c4:	20000004 	.word	0x20000004

080042c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ca:	46c6      	mov	lr, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042cc:	2300      	movs	r3, #0
{
 80042ce:	b500      	push	{lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 80042d4:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80042d6:	d100      	bne.n	80042da <HAL_ADC_Init+0x12>
 80042d8:	e0db      	b.n	8004492 <HAL_ADC_Init+0x1ca>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042da:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80042dc:	2d00      	cmp	r5, #0
 80042de:	d100      	bne.n	80042e2 <HAL_ADC_Init+0x1a>
 80042e0:	e0ab      	b.n	800443a <HAL_ADC_Init+0x172>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042e2:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042e4:	6825      	ldr	r5, [r4, #0]
 80042e6:	055b      	lsls	r3, r3, #21
 80042e8:	68aa      	ldr	r2, [r5, #8]
 80042ea:	421a      	tst	r2, r3
 80042ec:	d115      	bne.n	800431a <HAL_ADC_Init+0x52>
  MODIFY_REG(ADCx->CR,
 80042ee:	68aa      	ldr	r2, [r5, #8]
 80042f0:	497e      	ldr	r1, [pc, #504]	; (80044ec <HAL_ADC_Init+0x224>)
 80042f2:	400a      	ands	r2, r1
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042f8:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <HAL_ADC_Init+0x228>)
 80042fa:	497e      	ldr	r1, [pc, #504]	; (80044f4 <HAL_ADC_Init+0x22c>)
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f7fb ff1d 	bl	800013c <__udivsi3>
 8004302:	3001      	adds	r0, #1
 8004304:	0040      	lsls	r0, r0, #1
 8004306:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8004308:	9b01      	ldr	r3, [sp, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_ADC_Init+0x52>
    {
      wait_loop_index--;
 800430e:	9b01      	ldr	r3, [sp, #4]
 8004310:	3b01      	subs	r3, #1
 8004312:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004314:	9b01      	ldr	r3, [sp, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f9      	bne.n	800430e <HAL_ADC_Init+0x46>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800431a:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800431c:	2000      	movs	r0, #0
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	d400      	bmi.n	8004324 <HAL_ADC_Init+0x5c>
 8004322:	e07d      	b.n	8004420 <HAL_ADC_Init+0x158>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004324:	68ab      	ldr	r3, [r5, #8]
 8004326:	075b      	lsls	r3, r3, #29
 8004328:	d509      	bpl.n	800433e <HAL_ADC_Init+0x76>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800432a:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432c:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 800432e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004330:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004332:	4313      	orrs	r3, r2
 8004334:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 8004336:	b002      	add	sp, #8
 8004338:	bc80      	pop	{r7}
 800433a:	46b8      	mov	r8, r7
 800433c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800433e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004340:	06db      	lsls	r3, r3, #27
 8004342:	d4f3      	bmi.n	800432c <HAL_ADC_Init+0x64>
    ADC_STATE_CLR_SET(hadc->State,
 8004344:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004346:	4a6c      	ldr	r2, [pc, #432]	; (80044f8 <HAL_ADC_Init+0x230>)
 8004348:	4013      	ands	r3, r2
 800434a:	3206      	adds	r2, #6
 800434c:	32ff      	adds	r2, #255	; 0xff
 800434e:	4313      	orrs	r3, r2
 8004350:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004352:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004354:	07db      	lsls	r3, r3, #31
 8004356:	d476      	bmi.n	8004446 <HAL_ADC_Init+0x17e>
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004358:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800435a:	7e63      	ldrb	r3, [r4, #25]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800435c:	0377      	lsls	r7, r6, #13
 800435e:	46bc      	mov	ip, r7
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004360:	7e21      	ldrb	r1, [r4, #24]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004362:	6b27      	ldr	r7, [r4, #48]	; 0x30
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004364:	03db      	lsls	r3, r3, #15
 8004366:	4698      	mov	r8, r3
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004368:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800436a:	0389      	lsls	r1, r1, #14
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800436c:	2f00      	cmp	r7, #0
 800436e:	d001      	beq.n	8004374 <HAL_ADC_Init+0xac>
 8004370:	2780      	movs	r7, #128	; 0x80
 8004372:	017f      	lsls	r7, r7, #5
 8004374:	68e3      	ldr	r3, [r4, #12]
 8004376:	431a      	orrs	r2, r3
 8004378:	4643      	mov	r3, r8
 800437a:	430a      	orrs	r2, r1
 800437c:	431a      	orrs	r2, r3
 800437e:	4663      	mov	r3, ip
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004380:	6921      	ldr	r1, [r4, #16]
 8004382:	431a      	orrs	r2, r3
 8004384:	2900      	cmp	r1, #0
 8004386:	da00      	bge.n	800438a <HAL_ADC_Init+0xc2>
 8004388:	e09f      	b.n	80044ca <HAL_ADC_Init+0x202>
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	039b      	lsls	r3, r3, #14
 800438e:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004390:	232c      	movs	r3, #44	; 0x2c
 8004392:	5ce3      	ldrb	r3, [r4, r3]
 8004394:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004396:	4313      	orrs	r3, r2
 8004398:	433b      	orrs	r3, r7
 800439a:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800439c:	2720      	movs	r7, #32
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800439e:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043a0:	5de2      	ldrb	r2, [r4, r7]
 80043a2:	2a01      	cmp	r2, #1
 80043a4:	d100      	bne.n	80043a8 <HAL_ADC_Init+0xe0>
 80043a6:	e094      	b.n	80044d2 <HAL_ADC_Init+0x20a>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d005      	beq.n	80043ba <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80043ae:	26e0      	movs	r6, #224	; 0xe0
 80043b0:	0076      	lsls	r6, r6, #1
 80043b2:	4032      	ands	r2, r6
 80043b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043b6:	4332      	orrs	r2, r6
 80043b8:	4313      	orrs	r3, r2
      MODIFY_REG(hadc->Instance->CFGR1,
 80043ba:	68ea      	ldr	r2, [r5, #12]
 80043bc:	4e4f      	ldr	r6, [pc, #316]	; (80044fc <HAL_ADC_Init+0x234>)
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80043be:	6867      	ldr	r7, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 80043c0:	4032      	ands	r2, r6
 80043c2:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80043c4:	0fbe      	lsrs	r6, r7, #30
 80043c6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR1,
 80043c8:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80043ca:	07b3      	lsls	r3, r6, #30
 80043cc:	4698      	mov	r8, r3
 80043ce:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80043d0:	233c      	movs	r3, #60	; 0x3c
 80043d2:	5ce3      	ldrb	r3, [r4, r3]
 80043d4:	469c      	mov	ip, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d109      	bne.n	80043ee <HAL_ADC_Init+0x126>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80043da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043dc:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80043de:	4333      	orrs	r3, r6
 80043e0:	4313      	orrs	r3, r2
 80043e2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80043e4:	4313      	orrs	r3, r2
 80043e6:	4642      	mov	r2, r8
 80043e8:	4313      	orrs	r3, r2
 80043ea:	4662      	mov	r2, ip
 80043ec:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 80043ee:	692b      	ldr	r3, [r5, #16]
 80043f0:	4e43      	ldr	r6, [pc, #268]	; (8004500 <HAL_ADC_Init+0x238>)
 80043f2:	4033      	ands	r3, r6
 80043f4:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80043f6:	2280      	movs	r2, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 80043f8:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80043fa:	007b      	lsls	r3, r7, #1
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	05d2      	lsls	r2, r2, #23
 8004400:	4293      	cmp	r3, r2
 8004402:	d021      	beq.n	8004448 <HAL_ADC_Init+0x180>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	429f      	cmp	r7, r3
 800440a:	d01d      	beq.n	8004448 <HAL_ADC_Init+0x180>
        MODIFY_REG(ADC1_COMMON->CCR,
 800440c:	4a3d      	ldr	r2, [pc, #244]	; (8004504 <HAL_ADC_Init+0x23c>)
 800440e:	4e3e      	ldr	r6, [pc, #248]	; (8004508 <HAL_ADC_Init+0x240>)
 8004410:	6813      	ldr	r3, [r2, #0]
 8004412:	4033      	ands	r3, r6
 8004414:	26f0      	movs	r6, #240	; 0xf0
 8004416:	03b6      	lsls	r6, r6, #14
 8004418:	4037      	ands	r7, r6
 800441a:	431f      	orrs	r7, r3
 800441c:	6017      	str	r7, [r2, #0]
 800441e:	e013      	b.n	8004448 <HAL_ADC_Init+0x180>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004420:	2210      	movs	r2, #16
 8004422:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8004424:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004426:	4313      	orrs	r3, r2
 8004428:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800442c:	3a0f      	subs	r2, #15
 800442e:	4313      	orrs	r3, r2
 8004430:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004432:	68ab      	ldr	r3, [r5, #8]
 8004434:	075b      	lsls	r3, r3, #29
 8004436:	d582      	bpl.n	800433e <HAL_ADC_Init+0x76>
 8004438:	e777      	b.n	800432a <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 800443a:	f7ff fcc9 	bl	8003dd0 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 800443e:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8004440:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8004442:	54e5      	strb	r5, [r4, r3]
 8004444:	e74d      	b.n	80042e2 <HAL_ADC_Init+0x1a>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004446:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(ADCx->SMPR,
 8004448:	2207      	movs	r2, #7
 800444a:	2770      	movs	r7, #112	; 0x70
 800444c:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800444e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8004450:	4393      	bics	r3, r2
 8004452:	4333      	orrs	r3, r6
 8004454:	616b      	str	r3, [r5, #20]
 8004456:	696a      	ldr	r2, [r5, #20]
 8004458:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800445a:	43ba      	bics	r2, r7
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	4313      	orrs	r3, r2
 8004460:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004462:	2900      	cmp	r1, #0
 8004464:	d117      	bne.n	8004496 <HAL_ADC_Init+0x1ce>
      SET_BIT(hadc->Instance->CHSELR,
 8004466:	2310      	movs	r3, #16
 8004468:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800446a:	425b      	negs	r3, r3
 800446c:	4313      	orrs	r3, r2
 800446e:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004470:	2307      	movs	r3, #7
 8004472:	696a      	ldr	r2, [r5, #20]
 8004474:	4013      	ands	r3, r2
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004476:	429e      	cmp	r6, r3
 8004478:	d01e      	beq.n	80044b8 <HAL_ADC_Init+0x1f0>
      ADC_STATE_CLR_SET(hadc->State,
 800447a:	2212      	movs	r2, #18
 800447c:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 800447e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8004480:	4393      	bics	r3, r2
 8004482:	3a02      	subs	r2, #2
 8004484:	4313      	orrs	r3, r2
 8004486:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004488:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800448a:	3a0f      	subs	r2, #15
 800448c:	4313      	orrs	r3, r2
 800448e:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8004490:	e751      	b.n	8004336 <HAL_ADC_Init+0x6e>
    return HAL_ERROR;
 8004492:	2001      	movs	r0, #1
 8004494:	e74f      	b.n	8004336 <HAL_ADC_Init+0x6e>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	039b      	lsls	r3, r3, #14
 800449a:	4299      	cmp	r1, r3
 800449c:	d1e8      	bne.n	8004470 <HAL_ADC_Init+0x1a8>
      MODIFY_REG(hadc->Instance->CHSELR,
 800449e:	221c      	movs	r2, #28
 80044a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80044a2:	69e3      	ldr	r3, [r4, #28]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	401a      	ands	r2, r3
 80044aa:	2310      	movs	r3, #16
 80044ac:	425b      	negs	r3, r3
 80044ae:	4093      	lsls	r3, r2
 80044b0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80044b2:	4313      	orrs	r3, r2
 80044b4:	62ab      	str	r3, [r5, #40]	; 0x28
 80044b6:	e7db      	b.n	8004470 <HAL_ADC_Init+0x1a8>
      ADC_CLEAR_ERRORCODE(hadc);
 80044b8:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80044ba:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80044bc:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80044be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044c0:	4393      	bics	r3, r2
 80044c2:	3a02      	subs	r2, #2
 80044c4:	4313      	orrs	r3, r2
 80044c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80044c8:	e735      	b.n	8004336 <HAL_ADC_Init+0x6e>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80044ca:	004b      	lsls	r3, r1, #1
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	469c      	mov	ip, r3
 80044d0:	e75e      	b.n	8004390 <HAL_ADC_Init+0xc8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80044d2:	2e00      	cmp	r6, #0
 80044d4:	d103      	bne.n	80044de <HAL_ADC_Init+0x216>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80044d6:	2280      	movs	r2, #128	; 0x80
 80044d8:	0252      	lsls	r2, r2, #9
 80044da:	4313      	orrs	r3, r2
 80044dc:	e764      	b.n	80043a8 <HAL_ADC_Init+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044de:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80044e0:	4337      	orrs	r7, r6
 80044e2:	65a7      	str	r7, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044e4:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 80044e6:	4332      	orrs	r2, r6
 80044e8:	65e2      	str	r2, [r4, #92]	; 0x5c
 80044ea:	e75d      	b.n	80043a8 <HAL_ADC_Init+0xe0>
 80044ec:	6fffffe8 	.word	0x6fffffe8
 80044f0:	20000000 	.word	0x20000000
 80044f4:	00030d40 	.word	0x00030d40
 80044f8:	fffffefd 	.word	0xfffffefd
 80044fc:	fffe0201 	.word	0xfffe0201
 8004500:	1ffffc02 	.word	0x1ffffc02
 8004504:	40012708 	.word	0x40012708
 8004508:	ffc3ffff 	.word	0xffc3ffff

0800450c <HAL_ADC_ConvCpltCallback>:
 800450c:	4770      	bx	lr
 800450e:	46c0      	nop			; (mov r8, r8)

08004510 <HAL_ADC_ConvHalfCpltCallback>:
 8004510:	4770      	bx	lr
 8004512:	46c0      	nop			; (mov r8, r8)

08004514 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004514:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004516:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004518:	f7ff fffa 	bl	8004510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800451c:	bd10      	pop	{r4, pc}
 800451e:	46c0      	nop			; (mov r8, r8)

08004520 <HAL_ADC_ErrorCallback>:
 8004520:	4770      	bx	lr
 8004522:	46c0      	nop			; (mov r8, r8)

08004524 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004524:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004526:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004528:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800452a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800452c:	4313      	orrs	r3, r2
 800452e:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004530:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004532:	3a3c      	subs	r2, #60	; 0x3c
 8004534:	4313      	orrs	r3, r2
 8004536:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004538:	f7ff fff2 	bl	8004520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800453c:	bd10      	pop	{r4, pc}
 800453e:	46c0      	nop			; (mov r8, r8)

08004540 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004540:	2150      	movs	r1, #80	; 0x50
{
 8004542:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004544:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004546:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004548:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800454a:	4211      	tst	r1, r2
 800454c:	d10d      	bne.n	800456a <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004556:	22c0      	movs	r2, #192	; 0xc0
 8004558:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800455a:	6803      	ldr	r3, [r0, #0]
 800455c:	0112      	lsls	r2, r2, #4
 800455e:	68d9      	ldr	r1, [r3, #12]
 8004560:	4211      	tst	r1, r2
 8004562:	d00a      	beq.n	800457a <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8004564:	f7ff ffd2 	bl	800450c <HAL_ADC_ConvCpltCallback>
}
 8004568:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800456a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800456c:	06d2      	lsls	r2, r2, #27
 800456e:	d416      	bmi.n	800459e <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004570:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004572:	0018      	movs	r0, r3
 8004574:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004576:	4790      	blx	r2
}
 8004578:	e7f6      	b.n	8004568 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800457a:	7e82      	ldrb	r2, [r0, #26]
 800457c:	2a00      	cmp	r2, #0
 800457e:	d1f1      	bne.n	8004564 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	0712      	lsls	r2, r2, #28
 8004584:	d5ee      	bpl.n	8004564 <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	0752      	lsls	r2, r2, #29
 800458a:	d50b      	bpl.n	80045a4 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800458c:	2220      	movs	r2, #32
 800458e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004590:	4313      	orrs	r3, r2
 8004592:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004594:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004596:	3a1f      	subs	r2, #31
 8004598:	4313      	orrs	r3, r2
 800459a:	65c3      	str	r3, [r0, #92]	; 0x5c
 800459c:	e7e2      	b.n	8004564 <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 800459e:	f7ff ffbf 	bl	8004520 <HAL_ADC_ErrorCallback>
 80045a2:	e7e1      	b.n	8004568 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80045a4:	210c      	movs	r1, #12
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	438a      	bics	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80045ac:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80045ae:	4a03      	ldr	r2, [pc, #12]	; (80045bc <ADC_DMAConvCplt+0x7c>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	3204      	adds	r2, #4
 80045b4:	32ff      	adds	r2, #255	; 0xff
 80045b6:	4313      	orrs	r3, r2
 80045b8:	6583      	str	r3, [r0, #88]	; 0x58
 80045ba:	e7d3      	b.n	8004564 <ADC_DMAConvCplt+0x24>
 80045bc:	fffffefe 	.word	0xfffffefe

080045c0 <HAL_ADC_ConfigChannel>:
{
 80045c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c2:	4645      	mov	r5, r8
 80045c4:	46de      	mov	lr, fp
 80045c6:	4657      	mov	r7, sl
 80045c8:	464e      	mov	r6, r9
  __IO uint32_t wait_loop_index = 0UL;
 80045ca:	2300      	movs	r3, #0
{
 80045cc:	b5e0      	push	{r5, r6, r7, lr}
 80045ce:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 80045d0:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 80045d2:	3354      	adds	r3, #84	; 0x54
 80045d4:	5cc2      	ldrb	r2, [r0, r3]
{
 80045d6:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80045d8:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 80045da:	2a01      	cmp	r2, #1
 80045dc:	d100      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x20>
 80045de:	e091      	b.n	8004704 <HAL_ADC_ConfigChannel+0x144>
 80045e0:	2001      	movs	r0, #1
 80045e2:	2204      	movs	r2, #4
 80045e4:	54e0      	strb	r0, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	689e      	ldr	r6, [r3, #8]
 80045ea:	4232      	tst	r2, r6
 80045ec:	d00d      	beq.n	800460a <HAL_ADC_ConfigChannel+0x4a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045f0:	321c      	adds	r2, #28
 80045f2:	4313      	orrs	r3, r2
 80045f4:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80045f6:	2354      	movs	r3, #84	; 0x54
 80045f8:	2200      	movs	r2, #0
 80045fa:	54e2      	strb	r2, [r4, r3]
}
 80045fc:	b005      	add	sp, #20
 80045fe:	bcf0      	pop	{r4, r5, r6, r7}
 8004600:	46bb      	mov	fp, r7
 8004602:	46b2      	mov	sl, r6
 8004604:	46a9      	mov	r9, r5
 8004606:	46a0      	mov	r8, r4
 8004608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 800460a:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800460c:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 800460e:	2e02      	cmp	r6, #2
 8004610:	d05c      	beq.n	80046cc <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004612:	2780      	movs	r7, #128	; 0x80
 8004614:	063f      	lsls	r7, r7, #24
 8004616:	42bd      	cmp	r5, r7
 8004618:	d051      	beq.n	80046be <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800461a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800461c:	270f      	movs	r7, #15
 800461e:	46aa      	mov	sl, r5
 8004620:	251f      	movs	r5, #31
 8004622:	46ac      	mov	ip, r5
 8004624:	4035      	ands	r5, r6
 8004626:	40af      	lsls	r7, r5
 8004628:	46a9      	mov	r9, r5
 800462a:	43fd      	mvns	r5, r7
 800462c:	9500      	str	r5, [sp, #0]
 800462e:	4655      	mov	r5, sl
 8004630:	43bd      	bics	r5, r7
 8004632:	46a8      	mov	r8, r5
 8004634:	680d      	ldr	r5, [r1, #0]
 8004636:	9701      	str	r7, [sp, #4]
 8004638:	036f      	lsls	r7, r5, #13
 800463a:	d16c      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x156>
 800463c:	4660      	mov	r0, ip
 800463e:	0eaa      	lsrs	r2, r5, #26
 8004640:	4010      	ands	r0, r2
 8004642:	0002      	movs	r2, r0
 8004644:	4648      	mov	r0, r9
 8004646:	4082      	lsls	r2, r0
 8004648:	4640      	mov	r0, r8
 800464a:	4310      	orrs	r0, r2
 800464c:	4680      	mov	r8, r0
 800464e:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004650:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004652:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004654:	69e2      	ldr	r2, [r4, #28]
 8004656:	3601      	adds	r6, #1
 8004658:	4296      	cmp	r6, r2
 800465a:	d808      	bhi.n	800466e <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 800465c:	464e      	mov	r6, r9
 800465e:	00aa      	lsls	r2, r5, #2
 8004660:	0f12      	lsrs	r2, r2, #28
 8004662:	40b2      	lsls	r2, r6
 8004664:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004666:	9e00      	ldr	r6, [sp, #0]
 8004668:	4030      	ands	r0, r6
 800466a:	4302      	orrs	r2, r0
 800466c:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 800466e:	0228      	lsls	r0, r5, #8
 8004670:	688a      	ldr	r2, [r1, #8]
 8004672:	0001      	movs	r1, r0
 8004674:	695e      	ldr	r6, [r3, #20]
 8004676:	4002      	ands	r2, r0
 8004678:	4866      	ldr	r0, [pc, #408]	; (8004814 <HAL_ADC_ConfigChannel+0x254>)
 800467a:	438e      	bics	r6, r1
 800467c:	4002      	ands	r2, r0
 800467e:	4332      	orrs	r2, r6
 8004680:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004682:	2d00      	cmp	r5, #0
 8004684:	db01      	blt.n	800468a <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004686:	2000      	movs	r0, #0
}
 8004688:	e7b5      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800468a:	21e0      	movs	r1, #224	; 0xe0
 800468c:	4862      	ldr	r0, [pc, #392]	; (8004818 <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800468e:	4a63      	ldr	r2, [pc, #396]	; (800481c <HAL_ADC_ConfigChannel+0x25c>)
 8004690:	6803      	ldr	r3, [r0, #0]
 8004692:	0449      	lsls	r1, r1, #17
 8004694:	4019      	ands	r1, r3
 8004696:	4295      	cmp	r5, r2
 8004698:	d051      	beq.n	800473e <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800469a:	4a61      	ldr	r2, [pc, #388]	; (8004820 <HAL_ADC_ConfigChannel+0x260>)
 800469c:	4295      	cmp	r5, r2
 800469e:	d045      	beq.n	800472c <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80046a0:	4a60      	ldr	r2, [pc, #384]	; (8004824 <HAL_ADC_ConfigChannel+0x264>)
 80046a2:	4295      	cmp	r5, r2
 80046a4:	d1ef      	bne.n	8004686 <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046a6:	2580      	movs	r5, #128	; 0x80
 80046a8:	03ed      	lsls	r5, r5, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80046aa:	422b      	tst	r3, r5
 80046ac:	d1eb      	bne.n	8004686 <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80046ae:	6802      	ldr	r2, [r0, #0]
 80046b0:	4b5d      	ldr	r3, [pc, #372]	; (8004828 <HAL_ADC_ConfigChannel+0x268>)
 80046b2:	401a      	ands	r2, r3
 80046b4:	430a      	orrs	r2, r1
 80046b6:	4315      	orrs	r5, r2
 80046b8:	6005      	str	r5, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ba:	2000      	movs	r0, #0
}
 80046bc:	e79b      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80046be:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80046c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80046c2:	036a      	lsls	r2, r5, #13
 80046c4:	0b52      	lsrs	r2, r2, #13
 80046c6:	4302      	orrs	r2, r0
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046ca:	e7d0      	b.n	800466e <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046cc:	2280      	movs	r2, #128	; 0x80
 80046ce:	0612      	lsls	r2, r2, #24
 80046d0:	4295      	cmp	r5, r2
 80046d2:	d019      	beq.n	8004708 <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80046d4:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046d6:	2a00      	cmp	r2, #0
 80046d8:	dad5      	bge.n	8004686 <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80046da:	494f      	ldr	r1, [pc, #316]	; (8004818 <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046dc:	484f      	ldr	r0, [pc, #316]	; (800481c <HAL_ADC_ConfigChannel+0x25c>)
 80046de:	680b      	ldr	r3, [r1, #0]
 80046e0:	4282      	cmp	r2, r0
 80046e2:	d029      	beq.n	8004738 <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80046e4:	484e      	ldr	r0, [pc, #312]	; (8004820 <HAL_ADC_ConfigChannel+0x260>)
 80046e6:	4282      	cmp	r2, r0
 80046e8:	d04c      	beq.n	8004784 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046ea:	484e      	ldr	r0, [pc, #312]	; (8004824 <HAL_ADC_ConfigChannel+0x264>)
 80046ec:	4282      	cmp	r2, r0
 80046ee:	d1ca      	bne.n	8004686 <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046f0:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80046f2:	680a      	ldr	r2, [r1, #0]
 80046f4:	0440      	lsls	r0, r0, #17
 80046f6:	4003      	ands	r3, r0
 80046f8:	484b      	ldr	r0, [pc, #300]	; (8004828 <HAL_ADC_ConfigChannel+0x268>)
 80046fa:	4002      	ands	r2, r0
 80046fc:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fe:	2000      	movs	r0, #0
 8004700:	600b      	str	r3, [r1, #0]
 8004702:	e778      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 8004704:	2002      	movs	r0, #2
 8004706:	e779      	b.n	80045fc <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004708:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800470a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800470c:	0350      	lsls	r0, r2, #13
 800470e:	0b40      	lsrs	r0, r0, #13
 8004710:	4381      	bics	r1, r0
 8004712:	6299      	str	r1, [r3, #40]	; 0x28
}
 8004714:	e7df      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004716:	4228      	tst	r0, r5
 8004718:	d199      	bne.n	800464e <HAL_ADC_ConfigChannel+0x8e>
 800471a:	2702      	movs	r7, #2
 800471c:	422f      	tst	r7, r5
 800471e:	d02d      	beq.n	800477c <HAL_ADC_ConfigChannel+0x1bc>
 8004720:	464a      	mov	r2, r9
 8004722:	4090      	lsls	r0, r2
 8004724:	4642      	mov	r2, r8
 8004726:	4302      	orrs	r2, r0
 8004728:	4690      	mov	r8, r2
 800472a:	e790      	b.n	800464e <HAL_ADC_ConfigChannel+0x8e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800472c:	2580      	movs	r5, #128	; 0x80
 800472e:	046d      	lsls	r5, r5, #17
 8004730:	422b      	tst	r3, r5
 8004732:	d0bc      	beq.n	80046ae <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004734:	2000      	movs	r0, #0
 8004736:	e75e      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004738:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800473a:	680a      	ldr	r2, [r1, #0]
 800473c:	e7da      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800473e:	2580      	movs	r5, #128	; 0x80
 8004740:	042d      	lsls	r5, r5, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004742:	422b      	tst	r3, r5
 8004744:	d19f      	bne.n	8004686 <HAL_ADC_ConfigChannel+0xc6>
 8004746:	6802      	ldr	r2, [r0, #0]
 8004748:	4b37      	ldr	r3, [pc, #220]	; (8004828 <HAL_ADC_ConfigChannel+0x268>)
 800474a:	401a      	ands	r2, r3
 800474c:	430a      	orrs	r2, r1
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800474e:	4b37      	ldr	r3, [pc, #220]	; (800482c <HAL_ADC_ConfigChannel+0x26c>)
 8004750:	4315      	orrs	r5, r2
 8004752:	6005      	str	r5, [r0, #0]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	4936      	ldr	r1, [pc, #216]	; (8004830 <HAL_ADC_ConfigChannel+0x270>)
 8004758:	f7fb fcf0 	bl	800013c <__udivsi3>
 800475c:	3001      	adds	r0, #1
 800475e:	0043      	lsls	r3, r0, #1
 8004760:	181b      	adds	r3, r3, r0
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8004766:	9b03      	ldr	r3, [sp, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d08c      	beq.n	8004686 <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	3b01      	subs	r3, #1
 8004770:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8004772:	9b03      	ldr	r3, [sp, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f9      	bne.n	800476c <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004778:	2000      	movs	r0, #0
 800477a:	e73c      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800477c:	422a      	tst	r2, r5
 800477e:	d005      	beq.n	800478c <HAL_ADC_ConfigChannel+0x1cc>
 8004780:	003a      	movs	r2, r7
 8004782:	e75f      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004784:	20c0      	movs	r0, #192	; 0xc0
 8004786:	680a      	ldr	r2, [r1, #0]
 8004788:	0400      	lsls	r0, r0, #16
 800478a:	e7b4      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800478c:	072a      	lsls	r2, r5, #28
 800478e:	d501      	bpl.n	8004794 <HAL_ADC_ConfigChannel+0x1d4>
 8004790:	2203      	movs	r2, #3
 8004792:	e757      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 8004794:	06ea      	lsls	r2, r5, #27
 8004796:	d501      	bpl.n	800479c <HAL_ADC_ConfigChannel+0x1dc>
 8004798:	2204      	movs	r2, #4
 800479a:	e753      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 800479c:	06aa      	lsls	r2, r5, #26
 800479e:	d501      	bpl.n	80047a4 <HAL_ADC_ConfigChannel+0x1e4>
 80047a0:	2205      	movs	r2, #5
 80047a2:	e74f      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 80047a4:	066a      	lsls	r2, r5, #25
 80047a6:	d501      	bpl.n	80047ac <HAL_ADC_ConfigChannel+0x1ec>
 80047a8:	2206      	movs	r2, #6
 80047aa:	e74b      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 80047ac:	062a      	lsls	r2, r5, #24
 80047ae:	d501      	bpl.n	80047b4 <HAL_ADC_ConfigChannel+0x1f4>
 80047b0:	2207      	movs	r2, #7
 80047b2:	e747      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 80047b4:	05ea      	lsls	r2, r5, #23
 80047b6:	d501      	bpl.n	80047bc <HAL_ADC_ConfigChannel+0x1fc>
 80047b8:	2208      	movs	r2, #8
 80047ba:	e743      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 80047bc:	05aa      	lsls	r2, r5, #22
 80047be:	d501      	bpl.n	80047c4 <HAL_ADC_ConfigChannel+0x204>
 80047c0:	2209      	movs	r2, #9
 80047c2:	e73f      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 80047c4:	056a      	lsls	r2, r5, #21
 80047c6:	d501      	bpl.n	80047cc <HAL_ADC_ConfigChannel+0x20c>
 80047c8:	220a      	movs	r2, #10
 80047ca:	e73b      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 80047cc:	052a      	lsls	r2, r5, #20
 80047ce:	d501      	bpl.n	80047d4 <HAL_ADC_ConfigChannel+0x214>
 80047d0:	220b      	movs	r2, #11
 80047d2:	e737      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 80047d4:	04ea      	lsls	r2, r5, #19
 80047d6:	d501      	bpl.n	80047dc <HAL_ADC_ConfigChannel+0x21c>
 80047d8:	220c      	movs	r2, #12
 80047da:	e733      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 80047dc:	04aa      	lsls	r2, r5, #18
 80047de:	d501      	bpl.n	80047e4 <HAL_ADC_ConfigChannel+0x224>
 80047e0:	220d      	movs	r2, #13
 80047e2:	e72f      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 80047e4:	046a      	lsls	r2, r5, #17
 80047e6:	d501      	bpl.n	80047ec <HAL_ADC_ConfigChannel+0x22c>
 80047e8:	220e      	movs	r2, #14
 80047ea:	e72b      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 80047ec:	042a      	lsls	r2, r5, #16
 80047ee:	d504      	bpl.n	80047fa <HAL_ADC_ConfigChannel+0x23a>
 80047f0:	4652      	mov	r2, sl
 80047f2:	9801      	ldr	r0, [sp, #4]
 80047f4:	4302      	orrs	r2, r0
 80047f6:	4690      	mov	r8, r2
 80047f8:	e729      	b.n	800464e <HAL_ADC_ConfigChannel+0x8e>
 80047fa:	03ea      	lsls	r2, r5, #15
 80047fc:	d501      	bpl.n	8004802 <HAL_ADC_ConfigChannel+0x242>
 80047fe:	2210      	movs	r2, #16
 8004800:	e720      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 8004802:	03aa      	lsls	r2, r5, #14
 8004804:	d501      	bpl.n	800480a <HAL_ADC_ConfigChannel+0x24a>
 8004806:	2211      	movs	r2, #17
 8004808:	e71c      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 800480a:	036a      	lsls	r2, r5, #13
 800480c:	d400      	bmi.n	8004810 <HAL_ADC_ConfigChannel+0x250>
 800480e:	e71e      	b.n	800464e <HAL_ADC_ConfigChannel+0x8e>
 8004810:	2212      	movs	r2, #18
 8004812:	e717      	b.n	8004644 <HAL_ADC_ConfigChannel+0x84>
 8004814:	07ffff00 	.word	0x07ffff00
 8004818:	40012708 	.word	0x40012708
 800481c:	b0001000 	.word	0xb0001000
 8004820:	b8004000 	.word	0xb8004000
 8004824:	b4002000 	.word	0xb4002000
 8004828:	fe3fffff 	.word	0xfe3fffff
 800482c:	20000000 	.word	0x20000000
 8004830:	00030d40 	.word	0x00030d40

08004834 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8004834:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004836:	2201      	movs	r2, #1
{
 8004838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800483a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800483c:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800483e:	6803      	ldr	r3, [r0, #0]
{
 8004840:	0004      	movs	r4, r0
 8004842:	6899      	ldr	r1, [r3, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004844:	420a      	tst	r2, r1
 8004846:	d11f      	bne.n	8004888 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004848:	6898      	ldr	r0, [r3, #8]
 800484a:	4928      	ldr	r1, [pc, #160]	; (80048ec <ADC_Enable+0xb8>)
 800484c:	4208      	tst	r0, r1
 800484e:	d11e      	bne.n	800488e <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8004850:	6899      	ldr	r1, [r3, #8]
 8004852:	4827      	ldr	r0, [pc, #156]	; (80048f0 <ADC_Enable+0xbc>)
 8004854:	4001      	ands	r1, r0
 8004856:	430a      	orrs	r2, r1
 8004858:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800485a:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <ADC_Enable+0xc0>)
 800485c:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	d50f      	bpl.n	8004882 <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004862:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <ADC_Enable+0xc4>)
 8004864:	4925      	ldr	r1, [pc, #148]	; (80048fc <ADC_Enable+0xc8>)
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	f7fb fc68 	bl	800013c <__udivsi3>
 800486c:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800486e:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8004870:	9b01      	ldr	r3, [sp, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <ADC_Enable+0x4e>
        wait_loop_index--;
 8004876:	9b01      	ldr	r3, [sp, #4]
 8004878:	3b01      	subs	r3, #1
 800487a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800487c:	9b01      	ldr	r3, [sp, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f9      	bne.n	8004876 <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004882:	7e63      	ldrb	r3, [r4, #25]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d10b      	bne.n	80048a0 <ADC_Enable+0x6c>
  return HAL_OK;
 8004888:	2000      	movs	r0, #0
}
 800488a:	b003      	add	sp, #12
 800488c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800488e:	2110      	movs	r1, #16
 8004890:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8004892:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004894:	430b      	orrs	r3, r1
 8004896:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004898:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800489a:	431a      	orrs	r2, r3
 800489c:	65e2      	str	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800489e:	e7f4      	b.n	800488a <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 80048a0:	f7ff fcfa 	bl	8004298 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a4:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80048a6:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	07d2      	lsls	r2, r2, #31
 80048ac:	d4ec      	bmi.n	8004888 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048ae:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 80048b0:	4f0f      	ldr	r7, [pc, #60]	; (80048f0 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048b2:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048b4:	4215      	tst	r5, r2
 80048b6:	d103      	bne.n	80048c0 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	403a      	ands	r2, r7
 80048bc:	432a      	orrs	r2, r5
 80048be:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048c0:	f7ff fcea 	bl	8004298 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048c4:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048c6:	1b80      	subs	r0, r0, r6
 80048c8:	2802      	cmp	r0, #2
 80048ca:	d902      	bls.n	80048d2 <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4215      	tst	r5, r2
 80048d0:	d003      	beq.n	80048da <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4215      	tst	r5, r2
 80048d6:	d0ec      	beq.n	80048b2 <ADC_Enable+0x7e>
 80048d8:	e7d6      	b.n	8004888 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048da:	2210      	movs	r2, #16
 80048dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 80048de:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e0:	4313      	orrs	r3, r2
 80048e2:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048e6:	431d      	orrs	r5, r3
 80048e8:	65e5      	str	r5, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80048ea:	e7ce      	b.n	800488a <ADC_Enable+0x56>
 80048ec:	80000017 	.word	0x80000017
 80048f0:	7fffffe8 	.word	0x7fffffe8
 80048f4:	40012708 	.word	0x40012708
 80048f8:	20000000 	.word	0x20000000
 80048fc:	00030d40 	.word	0x00030d40

08004900 <HAL_ADC_Start_DMA>:
{
 8004900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004902:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004904:	6805      	ldr	r5, [r0, #0]
{
 8004906:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004908:	68ae      	ldr	r6, [r5, #8]
 800490a:	4688      	mov	r8, r1
 800490c:	0017      	movs	r7, r2
    tmp_hal_status = HAL_BUSY;
 800490e:	2002      	movs	r0, #2
{
 8004910:	b500      	push	{lr}
 8004912:	0773      	lsls	r3, r6, #29
 8004914:	d414      	bmi.n	8004940 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 8004916:	2254      	movs	r2, #84	; 0x54
 8004918:	5ca3      	ldrb	r3, [r4, r2]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d010      	beq.n	8004940 <HAL_ADC_Start_DMA+0x40>
 800491e:	2301      	movs	r3, #1
 8004920:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8004922:	68ea      	ldr	r2, [r5, #12]
 8004924:	4213      	tst	r3, r2
 8004926:	d106      	bne.n	8004936 <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004928:	68aa      	ldr	r2, [r5, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800492a:	4213      	tst	r3, r2
 800492c:	d131      	bne.n	8004992 <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800492e:	2201      	movs	r2, #1
 8004930:	68eb      	ldr	r3, [r5, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8004936:	0020      	movs	r0, r4
 8004938:	f7ff ff7c 	bl	8004834 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800493c:	2800      	cmp	r0, #0
 800493e:	d002      	beq.n	8004946 <HAL_ADC_Start_DMA+0x46>
}
 8004940:	bc80      	pop	{r7}
 8004942:	46b8      	mov	r8, r7
 8004944:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8004946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800494a:	6d25      	ldr	r5, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 800494c:	401a      	ands	r2, r3
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4313      	orrs	r3, r2
 8004954:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8004958:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800495a:	62eb      	str	r3, [r5, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800495c:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800495e:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004960:	632b      	str	r3, [r5, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004964:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004966:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004968:	231c      	movs	r3, #28
 800496a:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 800496c:	3338      	adds	r3, #56	; 0x38
 800496e:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004970:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004972:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004978:	4642      	mov	r2, r8
 800497a:	003b      	movs	r3, r7
 800497c:	3140      	adds	r1, #64	; 0x40
 800497e:	f000 f8e9 	bl	8004b54 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004982:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004984:	490a      	ldr	r1, [pc, #40]	; (80049b0 <HAL_ADC_Start_DMA+0xb0>)
 8004986:	6893      	ldr	r3, [r2, #8]
 8004988:	400b      	ands	r3, r1
 800498a:	2104      	movs	r1, #4
 800498c:	430b      	orrs	r3, r1
 800498e:	6093      	str	r3, [r2, #8]
}
 8004990:	e7d6      	b.n	8004940 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 8004992:	68ab      	ldr	r3, [r5, #8]
 8004994:	4a06      	ldr	r2, [pc, #24]	; (80049b0 <HAL_ADC_Start_DMA+0xb0>)
 8004996:	4013      	ands	r3, r2
 8004998:	4318      	orrs	r0, r3
 800499a:	60a8      	str	r0, [r5, #8]
}
 800499c:	e7c7      	b.n	800492e <HAL_ADC_Start_DMA+0x2e>
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	fffff0fe 	.word	0xfffff0fe
 80049a4:	08004541 	.word	0x08004541
 80049a8:	08004515 	.word	0x08004515
 80049ac:	08004525 	.word	0x08004525
 80049b0:	7fffffe8 	.word	0x7fffffe8

080049b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b4:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80049b6:	2800      	cmp	r0, #0
 80049b8:	db14      	blt.n	80049e4 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <HAL_NVIC_SetPriority+0x5c>)
 80049bc:	2203      	movs	r2, #3
 80049be:	469c      	mov	ip, r3
 80049c0:	23ff      	movs	r3, #255	; 0xff
 80049c2:	0884      	lsrs	r4, r0, #2
 80049c4:	4010      	ands	r0, r2
 80049c6:	001a      	movs	r2, r3
 80049c8:	26c0      	movs	r6, #192	; 0xc0
 80049ca:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049cc:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049ce:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049d0:	400b      	ands	r3, r1
 80049d2:	4083      	lsls	r3, r0
 80049d4:	00a4      	lsls	r4, r4, #2
 80049d6:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049d8:	00b6      	lsls	r6, r6, #2
 80049da:	59a5      	ldr	r5, [r4, r6]
 80049dc:	4395      	bics	r5, r2
 80049de:	432b      	orrs	r3, r5
 80049e0:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049e4:	4a0b      	ldr	r2, [pc, #44]	; (8004a14 <HAL_NVIC_SetPriority+0x60>)
 80049e6:	230f      	movs	r3, #15
 80049e8:	4694      	mov	ip, r2
 80049ea:	2203      	movs	r2, #3
 80049ec:	4003      	ands	r3, r0
 80049ee:	4010      	ands	r0, r2
 80049f0:	32fc      	adds	r2, #252	; 0xfc
 80049f2:	0015      	movs	r5, r2
 80049f4:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049f6:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049f8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049fa:	400a      	ands	r2, r1
 80049fc:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049fe:	3b08      	subs	r3, #8
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4463      	add	r3, ip
 8004a06:	69dc      	ldr	r4, [r3, #28]
 8004a08:	43ac      	bics	r4, r5
 8004a0a:	4322      	orrs	r2, r4
 8004a0c:	61da      	str	r2, [r3, #28]
 8004a0e:	e7e8      	b.n	80049e2 <HAL_NVIC_SetPriority+0x2e>
 8004a10:	e000e100 	.word	0xe000e100
 8004a14:	e000ed00 	.word	0xe000ed00

08004a18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	db05      	blt.n	8004a28 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1c:	231f      	movs	r3, #31
 8004a1e:	4018      	ands	r0, r3
 8004a20:	3b1e      	subs	r3, #30
 8004a22:	4083      	lsls	r3, r0
 8004a24:	4a01      	ldr	r2, [pc, #4]	; (8004a2c <HAL_NVIC_EnableIRQ+0x14>)
 8004a26:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a28:	4770      	bx	lr
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	e000e100 	.word	0xe000e100

08004a30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	1e43      	subs	r3, r0, #1
 8004a34:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a36:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d20e      	bcs.n	8004a5a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a3c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a3e:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a40:	4807      	ldr	r0, [pc, #28]	; (8004a60 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a42:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a44:	6a03      	ldr	r3, [r0, #32]
 8004a46:	0609      	lsls	r1, r1, #24
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	0a1b      	lsrs	r3, r3, #8
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a50:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a52:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a54:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a56:	3307      	adds	r3, #7
 8004a58:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8004a5a:	4770      	bx	lr
 8004a5c:	e000e010 	.word	0xe000e010
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a66:	46c6      	mov	lr, r8
 8004a68:	0004      	movs	r4, r0
 8004a6a:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d062      	beq.n	8004b36 <HAL_DMA_Init+0xd2>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a70:	6805      	ldr	r5, [r0, #0]
 8004a72:	4b32      	ldr	r3, [pc, #200]	; (8004b3c <HAL_DMA_Init+0xd8>)
 8004a74:	2114      	movs	r1, #20
 8004a76:	18e8      	adds	r0, r5, r3
 8004a78:	f7fb fb60 	bl	800013c <__udivsi3>
 8004a7c:	0083      	lsls	r3, r0, #2
 8004a7e:	6423      	str	r3, [r4, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a80:	2202      	movs	r2, #2
 8004a82:	2325      	movs	r3, #37	; 0x25
 8004a84:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a86:	682b      	ldr	r3, [r5, #0]
 8004a88:	4a2d      	ldr	r2, [pc, #180]	; (8004b40 <HAL_DMA_Init+0xdc>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004a8a:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004a90:	68e3      	ldr	r3, [r4, #12]
 8004a92:	6921      	ldr	r1, [r4, #16]
 8004a94:	4333      	orrs	r3, r6
 8004a96:	430b      	orrs	r3, r1
 8004a98:	6961      	ldr	r1, [r4, #20]
 8004a9a:	682a      	ldr	r2, [r5, #0]
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	69a1      	ldr	r1, [r4, #24]
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	69e1      	ldr	r1, [r4, #28]
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6a21      	ldr	r1, [r4, #32]
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004aae:	4b25      	ldr	r3, [pc, #148]	; (8004b44 <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ab0:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004ab2:	469c      	mov	ip, r3
 8004ab4:	4460      	add	r0, ip
 8004ab6:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ab8:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004aba:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004abc:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004abe:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004ac0:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ac2:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ac4:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ac6:	f7fb fb39 	bl	800013c <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004aca:	231f      	movs	r3, #31
 8004acc:	2201      	movs	r2, #1
 8004ace:	4003      	ands	r3, r0
 8004ad0:	0010      	movs	r0, r2
 8004ad2:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ad4:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ad6:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ad8:	01db      	lsls	r3, r3, #7
 8004ada:	429e      	cmp	r6, r3
 8004adc:	d021      	beq.n	8004b22 <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ade:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ae0:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ae2:	6861      	ldr	r1, [r4, #4]
 8004ae4:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ae6:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ae8:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aea:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004aec:	2903      	cmp	r1, #3
 8004aee:	d81d      	bhi.n	8004b2c <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004af0:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004af2:	4916      	ldr	r1, [pc, #88]	; (8004b4c <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004af4:	4d16      	ldr	r5, [pc, #88]	; (8004b50 <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004af6:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004af8:	3b01      	subs	r3, #1
 8004afa:	4003      	ands	r3, r0
 8004afc:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004afe:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b00:	0089      	lsls	r1, r1, #2
 8004b02:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b04:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b06:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b08:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b0a:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b0c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004b0e:	2225      	movs	r2, #37	; 0x25
 8004b10:	2101      	movs	r1, #1
  return HAL_OK;
 8004b12:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b14:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004b16:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8004b18:	3a01      	subs	r2, #1
 8004b1a:	54a3      	strb	r3, [r4, r2]
}
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	46b8      	mov	r8, r7
 8004b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b22:	2300      	movs	r3, #0
 8004b24:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b26:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b28:	4643      	mov	r3, r8
 8004b2a:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b30:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b32:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b34:	e7ea      	b.n	8004b0c <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 8004b36:	2001      	movs	r0, #1
 8004b38:	e7f0      	b.n	8004b1c <HAL_DMA_Init+0xb8>
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	bffdfff8 	.word	0xbffdfff8
 8004b40:	ffff800f 	.word	0xffff800f
 8004b44:	10008200 	.word	0x10008200
 8004b48:	40020880 	.word	0x40020880
 8004b4c:	1000823f 	.word	0x1000823f
 8004b50:	40020940 	.word	0x40020940

08004b54 <HAL_DMA_Start_IT>:
{
 8004b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b56:	46c6      	mov	lr, r8
  __HAL_LOCK(hdma);
 8004b58:	2424      	movs	r4, #36	; 0x24
{
 8004b5a:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 8004b5c:	5d05      	ldrb	r5, [r0, r4]
 8004b5e:	2d01      	cmp	r5, #1
 8004b60:	d04f      	beq.n	8004c02 <HAL_DMA_Start_IT+0xae>
 8004b62:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8004b64:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 8004b66:	5505      	strb	r5, [r0, r4]
  if (hdma->State == HAL_DMA_STATE_READY)
 8004b68:	5d85      	ldrb	r5, [r0, r6]
 8004b6a:	b2ef      	uxtb	r7, r5
 8004b6c:	2d01      	cmp	r5, #1
 8004b6e:	d007      	beq.n	8004b80 <HAL_DMA_Start_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004b74:	2300      	movs	r3, #0
 8004b76:	5503      	strb	r3, [r0, r4]
    status = HAL_ERROR;
 8004b78:	2001      	movs	r0, #1
}
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	46b8      	mov	r8, r7
 8004b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b80:	3c22      	subs	r4, #34	; 0x22
 8004b82:	5584      	strb	r4, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b84:	2400      	movs	r4, #0
 8004b86:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004b88:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b8a:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8004b8c:	6825      	ldr	r5, [r4, #0]
 8004b8e:	43bd      	bics	r5, r7
 8004b90:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b92:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8004b94:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8004b96:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8004b98:	2e00      	cmp	r6, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b9c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8004b9e:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8004ba0:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004ba2:	271c      	movs	r7, #28
 8004ba4:	4d1e      	ldr	r5, [pc, #120]	; (8004c20 <HAL_DMA_Start_IT+0xcc>)
 8004ba6:	46ac      	mov	ip, r5
 8004ba8:	686d      	ldr	r5, [r5, #4]
 8004baa:	46a8      	mov	r8, r5
 8004bac:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004bae:	402f      	ands	r7, r5
 8004bb0:	2501      	movs	r5, #1
 8004bb2:	40bd      	lsls	r5, r7
 8004bb4:	4647      	mov	r7, r8
 8004bb6:	433d      	orrs	r5, r7
 8004bb8:	4667      	mov	r7, ip
 8004bba:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8004bbc:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bbe:	6883      	ldr	r3, [r0, #8]
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d020      	beq.n	8004c06 <HAL_DMA_Start_IT+0xb2>
    hdma->Instance->CPAR = SrcAddress;
 8004bc4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bc6:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8004bc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01e      	beq.n	8004c0c <HAL_DMA_Start_IT+0xb8>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bce:	220e      	movs	r2, #14
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004bd6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	03d2      	lsls	r2, r2, #15
 8004bdc:	d504      	bpl.n	8004be8 <HAL_DMA_Start_IT+0x94>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004bde:	2280      	movs	r2, #128	; 0x80
 8004be0:	6819      	ldr	r1, [r3, #0]
 8004be2:	0052      	lsls	r2, r2, #1
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004be8:	2e00      	cmp	r6, #0
 8004bea:	d004      	beq.n	8004bf6 <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	6832      	ldr	r2, [r6, #0]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfa:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	6023      	str	r3, [r4, #0]
 8004c00:	e7bb      	b.n	8004b7a <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8004c02:	2002      	movs	r0, #2
 8004c04:	e7b9      	b.n	8004b7a <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 8004c06:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004c08:	60e1      	str	r1, [r4, #12]
 8004c0a:	e7dd      	b.n	8004bc8 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	4393      	bics	r3, r2
 8004c12:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	3206      	adds	r2, #6
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	6023      	str	r3, [r4, #0]
 8004c1c:	e7db      	b.n	8004bd6 <HAL_DMA_Start_IT+0x82>
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	40020000 	.word	0x40020000

08004c24 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = DMA1->ISR;
 8004c24:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <HAL_DMA_IRQHandler+0xb4>)
{
 8004c26:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8004c28:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c2a:	2504      	movs	r5, #4
 8004c2c:	231c      	movs	r3, #28
 8004c2e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8004c30:	6801      	ldr	r1, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c32:	4023      	ands	r3, r4
 8004c34:	002c      	movs	r4, r5
 8004c36:	409c      	lsls	r4, r3
  uint32_t source_it = hdma->Instance->CCR;
 8004c38:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c3a:	4222      	tst	r2, r4
 8004c3c:	d010      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x3c>
 8004c3e:	4235      	tst	r5, r6
 8004c40:	d00e      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c42:	680b      	ldr	r3, [r1, #0]
 8004c44:	069b      	lsls	r3, r3, #26
 8004c46:	d402      	bmi.n	8004c4e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c48:	680b      	ldr	r3, [r1, #0]
 8004c4a:	43ab      	bics	r3, r5
 8004c4c:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <HAL_DMA_IRQHandler+0xb4>)
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4314      	orrs	r4, r2
 8004c54:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004c56:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d000      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8004c5c:	4798      	blx	r3
}
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004c60:	2502      	movs	r5, #2
 8004c62:	002c      	movs	r4, r5
 8004c64:	409c      	lsls	r4, r3
 8004c66:	4222      	tst	r2, r4
 8004c68:	d017      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x76>
 8004c6a:	4235      	tst	r5, r6
 8004c6c:	d015      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c6e:	680b      	ldr	r3, [r1, #0]
 8004c70:	069b      	lsls	r3, r3, #26
 8004c72:	d406      	bmi.n	8004c82 <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c74:	220a      	movs	r2, #10
 8004c76:	680b      	ldr	r3, [r1, #0]
 8004c78:	4393      	bics	r3, r2
 8004c7a:	600b      	str	r3, [r1, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004c7c:	2325      	movs	r3, #37	; 0x25
 8004c7e:	3a09      	subs	r2, #9
 8004c80:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <HAL_DMA_IRQHandler+0xb4>)
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	4314      	orrs	r4, r2
 8004c88:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2324      	movs	r3, #36	; 0x24
 8004c8e:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8004c90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0e3      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8004c96:	4798      	blx	r3
  return;
 8004c98:	e7e1      	b.n	8004c5e <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004c9a:	2408      	movs	r4, #8
 8004c9c:	0025      	movs	r5, r4
 8004c9e:	409d      	lsls	r5, r3
 8004ca0:	422a      	tst	r2, r5
 8004ca2:	d0dc      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x3a>
 8004ca4:	4234      	tst	r4, r6
 8004ca6:	d0da      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ca8:	680a      	ldr	r2, [r1, #0]
 8004caa:	3406      	adds	r4, #6
 8004cac:	43a2      	bics	r2, r4
 8004cae:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	0015      	movs	r5, r2
 8004cb4:	409d      	lsls	r5, r3
 8004cb6:	002b      	movs	r3, r5
 8004cb8:	4907      	ldr	r1, [pc, #28]	; (8004cd8 <HAL_DMA_IRQHandler+0xb4>)
 8004cba:	684c      	ldr	r4, [r1, #4]
 8004cbc:	4323      	orrs	r3, r4
 8004cbe:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004cc0:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cc2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004cc4:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8004ccc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0c5      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8004cd2:	4798      	blx	r3
  return;
 8004cd4:	e7c3      	b.n	8004c5e <HAL_DMA_IRQHandler+0x3a>
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	40020000 	.word	0x40020000

08004cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cde:	46de      	mov	lr, fp
 8004ce0:	4657      	mov	r7, sl
 8004ce2:	464e      	mov	r6, r9
 8004ce4:	4645      	mov	r5, r8
 8004ce6:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ce8:	680c      	ldr	r4, [r1, #0]
{
 8004cea:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cec:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8004cee:	2300      	movs	r3, #0
{
 8004cf0:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cf2:	2c00      	cmp	r4, #0
 8004cf4:	d100      	bne.n	8004cf8 <HAL_GPIO_Init+0x1c>
 8004cf6:	e080      	b.n	8004dfa <HAL_GPIO_Init+0x11e>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cf8:	497b      	ldr	r1, [pc, #492]	; (8004ee8 <HAL_GPIO_Init+0x20c>)
 8004cfa:	468b      	mov	fp, r1
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cfc:	4661      	mov	r1, ip
 8004cfe:	9101      	str	r1, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d00:	2601      	movs	r6, #1
 8004d02:	0021      	movs	r1, r4
 8004d04:	409e      	lsls	r6, r3
 8004d06:	4031      	ands	r1, r6
 8004d08:	468a      	mov	sl, r1
    if (iocurrent != 0x00u)
 8004d0a:	4234      	tst	r4, r6
 8004d0c:	d06f      	beq.n	8004dee <HAL_GPIO_Init+0x112>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d0e:	9d01      	ldr	r5, [sp, #4]
 8004d10:	6869      	ldr	r1, [r5, #4]
 8004d12:	2503      	movs	r5, #3
 8004d14:	400d      	ands	r5, r1
 8004d16:	46ac      	mov	ip, r5
 8004d18:	3d01      	subs	r5, #1
 8004d1a:	2d01      	cmp	r5, #1
 8004d1c:	d800      	bhi.n	8004d20 <HAL_GPIO_Init+0x44>
 8004d1e:	e073      	b.n	8004e08 <HAL_GPIO_Init+0x12c>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d20:	4665      	mov	r5, ip
 8004d22:	2d03      	cmp	r5, #3
 8004d24:	d000      	beq.n	8004d28 <HAL_GPIO_Init+0x4c>
 8004d26:	e0b7      	b.n	8004e98 <HAL_GPIO_Init+0x1bc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d28:	4666      	mov	r6, ip
 8004d2a:	4096      	lsls	r6, r2
 8004d2c:	43f5      	mvns	r5, r6
 8004d2e:	9500      	str	r5, [sp, #0]
      temp = GPIOx->MODER;
 8004d30:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d32:	9d00      	ldr	r5, [sp, #0]
 8004d34:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d36:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8004d38:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d3a:	25c0      	movs	r5, #192	; 0xc0
 8004d3c:	02ad      	lsls	r5, r5, #10
 8004d3e:	4229      	tst	r1, r5
 8004d40:	d055      	beq.n	8004dee <HAL_GPIO_Init+0x112>
        temp = EXTI->EXTICR[position >> 2u];
 8004d42:	4e69      	ldr	r6, [pc, #420]	; (8004ee8 <HAL_GPIO_Init+0x20c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004d44:	2703      	movs	r7, #3
 8004d46:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 8004d48:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004d4a:	401f      	ands	r7, r3
 8004d4c:	00ff      	lsls	r7, r7, #3
 8004d4e:	00ad      	lsls	r5, r5, #2
 8004d50:	4465      	add	r5, ip
 8004d52:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 8004d54:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004d56:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 8004d58:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004d5a:	4666      	mov	r6, ip
 8004d5c:	40b7      	lsls	r7, r6
 8004d5e:	003e      	movs	r6, r7
 8004d60:	464f      	mov	r7, r9
 8004d62:	43b7      	bics	r7, r6
 8004d64:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004d66:	27a0      	movs	r7, #160	; 0xa0
 8004d68:	05ff      	lsls	r7, r7, #23
 8004d6a:	42b8      	cmp	r0, r7
 8004d6c:	d012      	beq.n	8004d94 <HAL_GPIO_Init+0xb8>
 8004d6e:	4f5f      	ldr	r7, [pc, #380]	; (8004eec <HAL_GPIO_Init+0x210>)
 8004d70:	42b8      	cmp	r0, r7
 8004d72:	d100      	bne.n	8004d76 <HAL_GPIO_Init+0x9a>
 8004d74:	e0a8      	b.n	8004ec8 <HAL_GPIO_Init+0x1ec>
 8004d76:	4f5e      	ldr	r7, [pc, #376]	; (8004ef0 <HAL_GPIO_Init+0x214>)
 8004d78:	42b8      	cmp	r0, r7
 8004d7a:	d100      	bne.n	8004d7e <HAL_GPIO_Init+0xa2>
 8004d7c:	e0ac      	b.n	8004ed8 <HAL_GPIO_Init+0x1fc>
 8004d7e:	4f5d      	ldr	r7, [pc, #372]	; (8004ef4 <HAL_GPIO_Init+0x218>)
 8004d80:	42b8      	cmp	r0, r7
 8004d82:	d100      	bne.n	8004d86 <HAL_GPIO_Init+0xaa>
 8004d84:	e099      	b.n	8004eba <HAL_GPIO_Init+0x1de>
 8004d86:	4666      	mov	r6, ip
 8004d88:	2705      	movs	r7, #5
 8004d8a:	40b7      	lsls	r7, r6
 8004d8c:	003e      	movs	r6, r7
 8004d8e:	464f      	mov	r7, r9
 8004d90:	4337      	orrs	r7, r6
 8004d92:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8004d94:	464e      	mov	r6, r9
 8004d96:	662e      	str	r6, [r5, #96]	; 0x60
        temp &= ~(iocurrent);
 8004d98:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d9a:	2780      	movs	r7, #128	; 0x80
        temp = EXTI->RTSR1;
 8004d9c:	465d      	mov	r5, fp
        temp &= ~(iocurrent);
 8004d9e:	43f6      	mvns	r6, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004da0:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8004da2:	46b0      	mov	r8, r6
        temp = EXTI->RTSR1;
 8004da4:	682d      	ldr	r5, [r5, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004da6:	4239      	tst	r1, r7
 8004da8:	d000      	beq.n	8004dac <HAL_GPIO_Init+0xd0>
 8004daa:	e083      	b.n	8004eb4 <HAL_GPIO_Init+0x1d8>
        temp &= ~(iocurrent);
 8004dac:	4035      	ands	r5, r6
        EXTI->RTSR1 = temp;
 8004dae:	465f      	mov	r7, fp
 8004db0:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 8004db2:	687d      	ldr	r5, [r7, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004db4:	2780      	movs	r7, #128	; 0x80
 8004db6:	03bf      	lsls	r7, r7, #14
 8004db8:	4239      	tst	r1, r7
 8004dba:	d000      	beq.n	8004dbe <HAL_GPIO_Init+0xe2>
 8004dbc:	e077      	b.n	8004eae <HAL_GPIO_Init+0x1d2>
        temp &= ~(iocurrent);
 8004dbe:	4646      	mov	r6, r8
 8004dc0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004dc2:	465f      	mov	r7, fp
 8004dc4:	607d      	str	r5, [r7, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004dc6:	2584      	movs	r5, #132	; 0x84
 8004dc8:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dca:	038e      	lsls	r6, r1, #14
 8004dcc:	d46c      	bmi.n	8004ea8 <HAL_GPIO_Init+0x1cc>
        temp &= ~(iocurrent);
 8004dce:	4646      	mov	r6, r8
 8004dd0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004dd2:	2784      	movs	r7, #132	; 0x84
 8004dd4:	46bc      	mov	ip, r7
 8004dd6:	465f      	mov	r7, fp
 8004dd8:	4666      	mov	r6, ip
 8004dda:	51bd      	str	r5, [r7, r6]

        temp = EXTI->IMR1;
 8004ddc:	2580      	movs	r5, #128	; 0x80
 8004dde:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004de0:	03c9      	lsls	r1, r1, #15
 8004de2:	d45e      	bmi.n	8004ea2 <HAL_GPIO_Init+0x1c6>
        temp &= ~(iocurrent);
 8004de4:	4646      	mov	r6, r8
 8004de6:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8004de8:	2580      	movs	r5, #128	; 0x80
 8004dea:	4659      	mov	r1, fp
 8004dec:	514e      	str	r6, [r1, r5]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dee:	0021      	movs	r1, r4
      }
    }

    position++;
 8004df0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004df2:	40d9      	lsrs	r1, r3
 8004df4:	3202      	adds	r2, #2
 8004df6:	2900      	cmp	r1, #0
 8004df8:	d182      	bne.n	8004d00 <HAL_GPIO_Init+0x24>
  }
}
 8004dfa:	b003      	add	sp, #12
 8004dfc:	bcf0      	pop	{r4, r5, r6, r7}
 8004dfe:	46bb      	mov	fp, r7
 8004e00:	46b2      	mov	sl, r6
 8004e02:	46a9      	mov	r9, r5
 8004e04:	46a0      	mov	r8, r4
 8004e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8004e08:	6885      	ldr	r5, [r0, #8]
 8004e0a:	46a8      	mov	r8, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e0c:	2503      	movs	r5, #3
 8004e0e:	4095      	lsls	r5, r2
 8004e10:	43ef      	mvns	r7, r5
 8004e12:	9700      	str	r7, [sp, #0]
 8004e14:	4647      	mov	r7, r8
 8004e16:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e18:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e1a:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e1c:	68ef      	ldr	r7, [r5, #12]
 8004e1e:	4097      	lsls	r7, r2
 8004e20:	46b8      	mov	r8, r7
 8004e22:	464f      	mov	r7, r9
 8004e24:	4645      	mov	r5, r8
 8004e26:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8004e28:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004e2a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e2c:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e2e:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e30:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e32:	090e      	lsrs	r6, r1, #4
 8004e34:	402e      	ands	r6, r5
 8004e36:	409e      	lsls	r6, r3
 8004e38:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8004e3a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8004e3c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e3e:	9d00      	ldr	r5, [sp, #0]
 8004e40:	402e      	ands	r6, r5
 8004e42:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e44:	9d01      	ldr	r5, [sp, #4]
 8004e46:	4647      	mov	r7, r8
 8004e48:	68ae      	ldr	r6, [r5, #8]
 8004e4a:	4096      	lsls	r6, r2
 8004e4c:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8004e4e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e50:	4667      	mov	r7, ip
 8004e52:	4666      	mov	r6, ip
 8004e54:	4096      	lsls	r6, r2
 8004e56:	2f02      	cmp	r7, #2
 8004e58:	d000      	beq.n	8004e5c <HAL_GPIO_Init+0x180>
 8004e5a:	e769      	b.n	8004d30 <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3u];
 8004e5c:	08dd      	lsrs	r5, r3, #3
 8004e5e:	00ad      	lsls	r5, r5, #2
 8004e60:	46ac      	mov	ip, r5
 8004e62:	4484      	add	ip, r0
 8004e64:	4665      	mov	r5, ip
 8004e66:	6a2d      	ldr	r5, [r5, #32]
 8004e68:	46a9      	mov	r9, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e6a:	2507      	movs	r5, #7
 8004e6c:	002f      	movs	r7, r5
 8004e6e:	401f      	ands	r7, r3
 8004e70:	00bd      	lsls	r5, r7, #2
 8004e72:	270f      	movs	r7, #15
 8004e74:	46a8      	mov	r8, r5
 8004e76:	40af      	lsls	r7, r5
 8004e78:	464d      	mov	r5, r9
 8004e7a:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e7c:	4647      	mov	r7, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e7e:	46a9      	mov	r9, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e80:	9d01      	ldr	r5, [sp, #4]
 8004e82:	692d      	ldr	r5, [r5, #16]
 8004e84:	40bd      	lsls	r5, r7
 8004e86:	46a8      	mov	r8, r5
 8004e88:	464d      	mov	r5, r9
 8004e8a:	4647      	mov	r7, r8
 8004e8c:	433d      	orrs	r5, r7
 8004e8e:	46a9      	mov	r9, r5
        GPIOx->AFR[position >> 3u] = temp;
 8004e90:	4665      	mov	r5, ip
 8004e92:	464f      	mov	r7, r9
 8004e94:	622f      	str	r7, [r5, #32]
 8004e96:	e74b      	b.n	8004d30 <HAL_GPIO_Init+0x54>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e98:	2503      	movs	r5, #3
 8004e9a:	4095      	lsls	r5, r2
 8004e9c:	43ed      	mvns	r5, r5
 8004e9e:	9500      	str	r5, [sp, #0]
 8004ea0:	e7cc      	b.n	8004e3c <HAL_GPIO_Init+0x160>
          temp |= iocurrent;
 8004ea2:	4656      	mov	r6, sl
 8004ea4:	432e      	orrs	r6, r5
 8004ea6:	e79f      	b.n	8004de8 <HAL_GPIO_Init+0x10c>
          temp |= iocurrent;
 8004ea8:	4656      	mov	r6, sl
 8004eaa:	4335      	orrs	r5, r6
 8004eac:	e791      	b.n	8004dd2 <HAL_GPIO_Init+0xf6>
          temp |= iocurrent;
 8004eae:	4656      	mov	r6, sl
 8004eb0:	4335      	orrs	r5, r6
 8004eb2:	e786      	b.n	8004dc2 <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 8004eb4:	4656      	mov	r6, sl
 8004eb6:	4335      	orrs	r5, r6
 8004eb8:	e779      	b.n	8004dae <HAL_GPIO_Init+0xd2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004eba:	4667      	mov	r7, ip
 8004ebc:	2603      	movs	r6, #3
 8004ebe:	40be      	lsls	r6, r7
 8004ec0:	464f      	mov	r7, r9
 8004ec2:	4337      	orrs	r7, r6
 8004ec4:	46b9      	mov	r9, r7
 8004ec6:	e765      	b.n	8004d94 <HAL_GPIO_Init+0xb8>
 8004ec8:	4666      	mov	r6, ip
 8004eca:	2701      	movs	r7, #1
 8004ecc:	40b7      	lsls	r7, r6
 8004ece:	003e      	movs	r6, r7
 8004ed0:	464f      	mov	r7, r9
 8004ed2:	4337      	orrs	r7, r6
 8004ed4:	46b9      	mov	r9, r7
 8004ed6:	e75d      	b.n	8004d94 <HAL_GPIO_Init+0xb8>
 8004ed8:	4667      	mov	r7, ip
 8004eda:	2602      	movs	r6, #2
 8004edc:	40be      	lsls	r6, r7
 8004ede:	464f      	mov	r7, r9
 8004ee0:	4337      	orrs	r7, r6
 8004ee2:	46b9      	mov	r9, r7
 8004ee4:	e756      	b.n	8004d94 <HAL_GPIO_Init+0xb8>
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	40021800 	.word	0x40021800
 8004eec:	50000400 	.word	0x50000400
 8004ef0:	50000800 	.word	0x50000800
 8004ef4:	50000c00 	.word	0x50000c00

08004ef8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004ef8:	6900      	ldr	r0, [r0, #16]
 8004efa:	4008      	ands	r0, r1
 8004efc:	1e43      	subs	r3, r0, #1
 8004efe:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8004f00:	b2c0      	uxtb	r0, r0
}
 8004f02:	4770      	bx	lr

08004f04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f08:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f0a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f0c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004f0e:	e7fc      	b.n	8004f0a <HAL_GPIO_WritePin+0x6>

08004f10 <HAL_GPIO_EXTI_Falling_Callback>:
 8004f10:	4770      	bx	lr
 8004f12:	46c0      	nop			; (mov r8, r8)

08004f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_GPIO_EXTI_IRQHandler+0x30>)
{
 8004f16:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004f18:	68da      	ldr	r2, [r3, #12]
{
 8004f1a:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004f1c:	4210      	tst	r0, r2
 8004f1e:	d104      	bne.n	8004f2a <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004f20:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	4222      	tst	r2, r4
 8004f26:	d107      	bne.n	8004f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 8004f28:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004f2a:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004f2c:	f7fe fb0e 	bl	800354c <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	4222      	tst	r2, r4
 8004f36:	d0f7      	beq.n	8004f28 <HAL_GPIO_EXTI_IRQHandler+0x14>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004f38:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004f3a:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004f3c:	f7ff ffe8 	bl	8004f10 <HAL_GPIO_EXTI_Falling_Callback>
}
 8004f40:	e7f2      	b.n	8004f28 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	40021800 	.word	0x40021800

08004f48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	46de      	mov	lr, fp
 8004f4c:	4657      	mov	r7, sl
 8004f4e:	464e      	mov	r6, r9
 8004f50:	4645      	mov	r5, r8
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f52:	2310      	movs	r3, #16
{
 8004f54:	b5e0      	push	{r5, r6, r7, lr}
 8004f56:	4693      	mov	fp, r2
 8004f58:	0005      	movs	r5, r0
 8004f5a:	000e      	movs	r6, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f5c:	2420      	movs	r4, #32
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f5e:	469a      	mov	sl, r3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f60:	0021      	movs	r1, r4
 8004f62:	682b      	ldr	r3, [r5, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	4011      	ands	r1, r2
 8004f68:	4688      	mov	r8, r1
 8004f6a:	4214      	tst	r4, r2
 8004f6c:	d000      	beq.n	8004f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
 8004f6e:	e09e      	b.n	80050ae <I2C_WaitOnSTOPFlagUntilTimeout+0x166>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f70:	4652      	mov	r2, sl
 8004f72:	4650      	mov	r0, sl
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f74:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2700      	movs	r7, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f78:	400a      	ands	r2, r1
 8004f7a:	4208      	tst	r0, r1
 8004f7c:	d015      	beq.n	8004faa <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2200      	movs	r2, #0
  uint32_t tickstart = Tickstart;
 8004f80:	465f      	mov	r7, fp
  HAL_StatusTypeDef status = HAL_OK;
 8004f82:	4691      	mov	r9, r2
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f84:	61d8      	str	r0, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f86:	1c72      	adds	r2, r6, #1
 8004f88:	d15b      	bne.n	8005042 <I2C_WaitOnSTOPFlagUntilTimeout+0xfa>
 8004f8a:	699a      	ldr	r2, [r3, #24]
 8004f8c:	4214      	tst	r4, r2
 8004f8e:	d000      	beq.n	8004f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
 8004f90:	e08f      	b.n	80050b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16a>
 8004f92:	464a      	mov	r2, r9
 8004f94:	2a00      	cmp	r2, #0
 8004f96:	d103      	bne.n	8004fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	4214      	tst	r4, r2
 8004f9c:	d0fc      	beq.n	8004f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f9e:	61dc      	str	r4, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	4641      	mov	r1, r8
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	000a      	movs	r2, r1

    status = HAL_ERROR;
 8004fa8:	2701      	movs	r7, #1
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004faa:	2080      	movs	r0, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8004fac:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fae:	0040      	lsls	r0, r0, #1
 8004fb0:	4201      	tst	r1, r0
 8004fb2:	d032      	beq.n	800501a <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004fb4:	2401      	movs	r4, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fb6:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8004fb8:	4322      	orrs	r2, r4

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fba:	0548      	lsls	r0, r1, #21
 8004fbc:	d504      	bpl.n	8004fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fbe:	2008      	movs	r0, #8
 8004fc0:	4302      	orrs	r2, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fc2:	2080      	movs	r0, #128	; 0x80
 8004fc4:	00c0      	lsls	r0, r0, #3
 8004fc6:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fc8:	0589      	lsls	r1, r1, #22
 8004fca:	d504      	bpl.n	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x8e>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fcc:	2102      	movs	r1, #2
 8004fce:	430a      	orrs	r2, r1

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fd0:	31ff      	adds	r1, #255	; 0xff
 8004fd2:	31ff      	adds	r1, #255	; 0xff
 8004fd4:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fd6:	6999      	ldr	r1, [r3, #24]
 8004fd8:	0789      	lsls	r1, r1, #30
 8004fda:	d501      	bpl.n	8004fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x98>
    hi2c->Instance->TXDR = 0x00U;
 8004fdc:	2100      	movs	r1, #0
 8004fde:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	6998      	ldr	r0, [r3, #24]
 8004fe4:	4201      	tst	r1, r0
 8004fe6:	d102      	bne.n	8004fee <I2C_WaitOnSTOPFlagUntilTimeout+0xa6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fe8:	6998      	ldr	r0, [r3, #24]
 8004fea:	4301      	orrs	r1, r0
 8004fec:	6199      	str	r1, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fee:	6859      	ldr	r1, [r3, #4]
 8004ff0:	4832      	ldr	r0, [pc, #200]	; (80050bc <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
 8004ff2:	4001      	ands	r1, r0
 8004ff4:	6059      	str	r1, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004ff6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	646a      	str	r2, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ffc:	2341      	movs	r3, #65	; 0x41
 8004ffe:	2220      	movs	r2, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8005000:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005002:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8005004:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005006:	3222      	adds	r2, #34	; 0x22
 8005008:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 800500a:	3a02      	subs	r2, #2
 800500c:	54ab      	strb	r3, [r5, r2]
}
 800500e:	bcf0      	pop	{r4, r5, r6, r7}
 8005010:	46bb      	mov	fp, r7
 8005012:	46b2      	mov	sl, r6
 8005014:	46a9      	mov	r9, r5
 8005016:	46a0      	mov	r8, r4
 8005018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800501a:	0548      	lsls	r0, r1, #21
 800501c:	d4cf      	bmi.n	8004fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800501e:	0589      	lsls	r1, r1, #22
 8005020:	d4d4      	bmi.n	8004fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
  if (status != HAL_OK)
 8005022:	2f00      	cmp	r7, #0
 8005024:	d1d7      	bne.n	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x8e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7ff f937 	bl	8004298 <HAL_GetTick>
 800502a:	465b      	mov	r3, fp
 800502c:	1ac0      	subs	r0, r0, r3
 800502e:	42b0      	cmp	r0, r6
 8005030:	d801      	bhi.n	8005036 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
 8005032:	2e00      	cmp	r6, #0
 8005034:	d194      	bne.n	8004f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005036:	2220      	movs	r2, #32
 8005038:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800503a:	4313      	orrs	r3, r2
 800503c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800503e:	2341      	movs	r3, #65	; 0x41
 8005040:	e7de      	b.n	8005000 <I2C_WaitOnSTOPFlagUntilTimeout+0xb8>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	4214      	tst	r4, r2
 8005046:	d134      	bne.n	80050b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16a>
 8005048:	464a      	mov	r2, r9
 800504a:	2a00      	cmp	r2, #0
 800504c:	d1a8      	bne.n	8004fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7ff f923 	bl	8004298 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005052:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005054:	1bc0      	subs	r0, r0, r7
 8005056:	4286      	cmp	r6, r0
 8005058:	d301      	bcc.n	800505e <I2C_WaitOnSTOPFlagUntilTimeout+0x116>
 800505a:	2e00      	cmp	r6, #0
 800505c:	d193      	bne.n	8004f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
          tmp2 = hi2c->Mode;
 800505e:	2242      	movs	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005060:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8005062:	5caa      	ldrb	r2, [r5, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005064:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800506a:	2280      	movs	r2, #128	; 0x80
 800506c:	0212      	lsls	r2, r2, #8
 800506e:	4211      	tst	r1, r2
 8005070:	d003      	beq.n	800507a <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005072:	2180      	movs	r1, #128	; 0x80
 8005074:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005076:	4208      	tst	r0, r1
 8005078:	d00e      	beq.n	8005098 <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	4214      	tst	r4, r2
 800507e:	d000      	beq.n	8005082 <I2C_WaitOnSTOPFlagUntilTimeout+0x13a>
 8005080:	e781      	b.n	8004f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005082:	f7ff f909 	bl	8004298 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005086:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005088:	1bc0      	subs	r0, r0, r7
 800508a:	2819      	cmp	r0, #25
 800508c:	d9f5      	bls.n	800507a <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800508e:	2220      	movs	r2, #32
 8005090:	4690      	mov	r8, r2
              status = HAL_ERROR;
 8005092:	3a1f      	subs	r2, #31
 8005094:	4691      	mov	r9, r2
 8005096:	e776      	b.n	8004f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
              (tmp1 != I2C_CR2_STOP) && \
 8005098:	4662      	mov	r2, ip
 800509a:	2a20      	cmp	r2, #32
 800509c:	d0ed      	beq.n	800507a <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	4311      	orrs	r1, r2
 80050a2:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 80050a4:	f7ff f8f8 	bl	8004298 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a8:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80050aa:	0007      	movs	r7, r0
 80050ac:	e7e5      	b.n	800507a <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
  return HAL_OK;
 80050ae:	2000      	movs	r0, #0
 80050b0:	e7ad      	b.n	800500e <I2C_WaitOnSTOPFlagUntilTimeout+0xc6>
    if (status == HAL_OK)
 80050b2:	464a      	mov	r2, r9
 80050b4:	2a00      	cmp	r2, #0
 80050b6:	d100      	bne.n	80050ba <I2C_WaitOnSTOPFlagUntilTimeout+0x172>
 80050b8:	e771      	b.n	8004f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
 80050ba:	e771      	b.n	8004fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
 80050bc:	fe00e800 	.word	0xfe00e800

080050c0 <HAL_I2C_Init>:
{
 80050c0:	b510      	push	{r4, lr}
 80050c2:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80050c4:	d04d      	beq.n	8005162 <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050c6:	2341      	movs	r3, #65	; 0x41
 80050c8:	5cc3      	ldrb	r3, [r0, r3]
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d043      	beq.n	8005158 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80050d0:	2341      	movs	r3, #65	; 0x41
 80050d2:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80050d4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80050d6:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	438a      	bics	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050e0:	6861      	ldr	r1, [r4, #4]
 80050e2:	4a21      	ldr	r2, [pc, #132]	; (8005168 <HAL_I2C_Init+0xa8>)
 80050e4:	400a      	ands	r2, r1
 80050e6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	4920      	ldr	r1, [pc, #128]	; (800516c <HAL_I2C_Init+0xac>)
 80050ec:	400a      	ands	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050f0:	68e2      	ldr	r2, [r4, #12]
 80050f2:	2a01      	cmp	r2, #1
 80050f4:	d02a      	beq.n	800514c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050f6:	2184      	movs	r1, #132	; 0x84
 80050f8:	68a0      	ldr	r0, [r4, #8]
 80050fa:	0209      	lsls	r1, r1, #8
 80050fc:	4301      	orrs	r1, r0
 80050fe:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005100:	2a02      	cmp	r2, #2
 8005102:	d102      	bne.n	800510a <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005104:	2280      	movs	r2, #128	; 0x80
 8005106:	0112      	lsls	r2, r2, #4
 8005108:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	4a18      	ldr	r2, [pc, #96]	; (8005170 <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 800510e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	4915      	ldr	r1, [pc, #84]	; (800516c <HAL_I2C_Init+0xac>)
 8005118:	400a      	ands	r2, r1
 800511a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800511c:	6961      	ldr	r1, [r4, #20]
 800511e:	6922      	ldr	r2, [r4, #16]
 8005120:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005122:	69a1      	ldr	r1, [r4, #24]
 8005124:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005126:	430a      	orrs	r2, r1
 8005128:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800512a:	6a21      	ldr	r1, [r4, #32]
 800512c:	69e2      	ldr	r2, [r4, #28]
 800512e:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8005130:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005132:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800513a:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800513c:	2241      	movs	r2, #65	; 0x41
 800513e:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005140:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005142:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005144:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8005146:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005148:	54a3      	strb	r3, [r4, r2]
}
 800514a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800514c:	2280      	movs	r2, #128	; 0x80
 800514e:	68a1      	ldr	r1, [r4, #8]
 8005150:	0212      	lsls	r2, r2, #8
 8005152:	430a      	orrs	r2, r1
 8005154:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005156:	e7d8      	b.n	800510a <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8005158:	3340      	adds	r3, #64	; 0x40
 800515a:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 800515c:	f7fe fe98 	bl	8003e90 <HAL_I2C_MspInit>
 8005160:	e7b6      	b.n	80050d0 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8005162:	2001      	movs	r0, #1
 8005164:	e7f1      	b.n	800514a <HAL_I2C_Init+0x8a>
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	f0ffffff 	.word	0xf0ffffff
 800516c:	ffff7fff 	.word	0xffff7fff
 8005170:	02008000 	.word	0x02008000

08005174 <HAL_I2C_Master_Transmit>:
{
 8005174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005176:	4645      	mov	r5, r8
 8005178:	46de      	mov	lr, fp
 800517a:	4657      	mov	r7, sl
 800517c:	464e      	mov	r6, r9
 800517e:	b5e0      	push	{r5, r6, r7, lr}
 8005180:	b083      	sub	sp, #12
 8005182:	001f      	movs	r7, r3
 8005184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005186:	0005      	movs	r5, r0
 8005188:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800518a:	2341      	movs	r3, #65	; 0x41
 800518c:	5cc3      	ldrb	r3, [r0, r3]
{
 800518e:	000e      	movs	r6, r1
 8005190:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005192:	2b20      	cmp	r3, #32
 8005194:	d000      	beq.n	8005198 <HAL_I2C_Master_Transmit+0x24>
 8005196:	e099      	b.n	80052cc <HAL_I2C_Master_Transmit+0x158>
    __HAL_LOCK(hi2c);
 8005198:	3320      	adds	r3, #32
 800519a:	5cc2      	ldrb	r2, [r0, r3]
 800519c:	2a01      	cmp	r2, #1
 800519e:	d100      	bne.n	80051a2 <HAL_I2C_Master_Transmit+0x2e>
 80051a0:	e094      	b.n	80052cc <HAL_I2C_Master_Transmit+0x158>
 80051a2:	2201      	movs	r2, #1
 80051a4:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80051a6:	f7ff f877 	bl	8004298 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051aa:	2480      	movs	r4, #128	; 0x80
 80051ac:	46b1      	mov	r9, r6
 80051ae:	0224      	lsls	r4, r4, #8
 80051b0:	0006      	movs	r6, r0
 80051b2:	e005      	b.n	80051c0 <HAL_I2C_Master_Transmit+0x4c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b4:	f7ff f870 	bl	8004298 <HAL_GetTick>
 80051b8:	1b80      	subs	r0, r0, r6
 80051ba:	2819      	cmp	r0, #25
 80051bc:	d900      	bls.n	80051c0 <HAL_I2C_Master_Transmit+0x4c>
 80051be:	e08d      	b.n	80052dc <HAL_I2C_Master_Transmit+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c0:	6828      	ldr	r0, [r5, #0]
 80051c2:	6983      	ldr	r3, [r0, #24]
 80051c4:	001a      	movs	r2, r3
 80051c6:	4022      	ands	r2, r4
 80051c8:	4223      	tst	r3, r4
 80051ca:	d1f3      	bne.n	80051b4 <HAL_I2C_Master_Transmit+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051cc:	2341      	movs	r3, #65	; 0x41
 80051ce:	2121      	movs	r1, #33	; 0x21
 80051d0:	54e9      	strb	r1, [r5, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051d2:	3301      	adds	r3, #1
 80051d4:	3911      	subs	r1, #17
 80051d6:	54e9      	strb	r1, [r5, r3]
    hi2c->pBuffPtr  = pData;
 80051d8:	4643      	mov	r3, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051da:	646a      	str	r2, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 80051dc:	856f      	strh	r7, [r5, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80051de:	626b      	str	r3, [r5, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051e0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051e2:	46b2      	mov	sl, r6
    hi2c->XferISR   = NULL;
 80051e4:	636a      	str	r2, [r5, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051e6:	464e      	mov	r6, r9
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051e8:	2bff      	cmp	r3, #255	; 0xff
 80051ea:	d900      	bls.n	80051ee <HAL_I2C_Master_Transmit+0x7a>
 80051ec:	e083      	b.n	80052f6 <HAL_I2C_Master_Transmit+0x182>
      hi2c->XferSize = hi2c->XferCount;
 80051ee:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051f0:	4cac      	ldr	r4, [pc, #688]	; (80054a4 <HAL_I2C_Master_Transmit+0x330>)
 80051f2:	6841      	ldr	r1, [r0, #4]
      hi2c->XferSize = hi2c->XferCount;
 80051f4:	b29b      	uxth	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051f6:	05b2      	lsls	r2, r6, #22
      hi2c->XferSize = hi2c->XferCount;
 80051f8:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051fa:	9201      	str	r2, [sp, #4]
  MODIFY_REG(hi2c->Instance->CR2, \
 80051fc:	4021      	ands	r1, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051fe:	0d92      	lsrs	r2, r2, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005200:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8005202:	430a      	orrs	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005204:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005206:	4313      	orrs	r3, r2
 8005208:	4aa7      	ldr	r2, [pc, #668]	; (80054a8 <HAL_I2C_Master_Transmit+0x334>)
 800520a:	4313      	orrs	r3, r2
 800520c:	6043      	str	r3, [r0, #4]
    while (hi2c->XferCount > 0U)
 800520e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005210:	2420      	movs	r4, #32
 8005212:	465e      	mov	r6, fp
    while (hi2c->XferCount > 0U)
 8005214:	2b00      	cmp	r3, #0
 8005216:	d100      	bne.n	800521a <HAL_I2C_Master_Transmit+0xa6>
 8005218:	e0f2      	b.n	8005400 <HAL_I2C_Master_Transmit+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800521a:	2302      	movs	r3, #2
 800521c:	46a8      	mov	r8, r5
 800521e:	469b      	mov	fp, r3
 8005220:	465d      	mov	r5, fp
 8005222:	465a      	mov	r2, fp
 8005224:	6983      	ldr	r3, [r0, #24]
 8005226:	401d      	ands	r5, r3
 8005228:	421a      	tst	r2, r3
 800522a:	d000      	beq.n	800522e <HAL_I2C_Master_Transmit+0xba>
 800522c:	e0cf      	b.n	80053ce <HAL_I2C_Master_Transmit+0x25a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800522e:	2210      	movs	r2, #16
 8005230:	0013      	movs	r3, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005232:	6981      	ldr	r1, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2700      	movs	r7, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005236:	400b      	ands	r3, r1
 8005238:	420a      	tst	r2, r1
 800523a:	d013      	beq.n	8005264 <HAL_I2C_Master_Transmit+0xf0>
  HAL_StatusTypeDef status = HAL_OK;
 800523c:	2300      	movs	r3, #0
  uint32_t tickstart = Tickstart;
 800523e:	4657      	mov	r7, sl
  HAL_StatusTypeDef status = HAL_OK;
 8005240:	4699      	mov	r9, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005242:	61c2      	str	r2, [r0, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005244:	1c73      	adds	r3, r6, #1
 8005246:	d167      	bne.n	8005318 <HAL_I2C_Master_Transmit+0x1a4>
 8005248:	6983      	ldr	r3, [r0, #24]
 800524a:	421c      	tst	r4, r3
 800524c:	d000      	beq.n	8005250 <HAL_I2C_Master_Transmit+0xdc>
 800524e:	e110      	b.n	8005472 <HAL_I2C_Master_Transmit+0x2fe>
 8005250:	464b      	mov	r3, r9
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <HAL_I2C_Master_Transmit+0xea>
 8005256:	6983      	ldr	r3, [r0, #24]
 8005258:	421c      	tst	r4, r3
 800525a:	d0fc      	beq.n	8005256 <HAL_I2C_Master_Transmit+0xe2>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800525c:	61c4      	str	r4, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800525e:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8005260:	2701      	movs	r7, #1
    error_code |= HAL_I2C_ERROR_AF;
 8005262:	432b      	orrs	r3, r5
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005264:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8005266:	6982      	ldr	r2, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005268:	0049      	lsls	r1, r1, #1
 800526a:	420a      	tst	r2, r1
 800526c:	d050      	beq.n	8005310 <HAL_I2C_Master_Transmit+0x19c>
    error_code |= HAL_I2C_ERROR_BERR;
 800526e:	2401      	movs	r4, #1
 8005270:	4645      	mov	r5, r8
 8005272:	4323      	orrs	r3, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005274:	61c1      	str	r1, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005276:	0551      	lsls	r1, r2, #21
 8005278:	d504      	bpl.n	8005284 <HAL_I2C_Master_Transmit+0x110>
    error_code |= HAL_I2C_ERROR_OVR;
 800527a:	2108      	movs	r1, #8
 800527c:	430b      	orrs	r3, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	00c9      	lsls	r1, r1, #3
 8005282:	61c1      	str	r1, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005284:	0592      	lsls	r2, r2, #22
 8005286:	d504      	bpl.n	8005292 <HAL_I2C_Master_Transmit+0x11e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8005288:	2202      	movs	r2, #2
 800528a:	4313      	orrs	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800528c:	32ff      	adds	r2, #255	; 0xff
 800528e:	32ff      	adds	r2, #255	; 0xff
 8005290:	61c2      	str	r2, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005292:	6982      	ldr	r2, [r0, #24]
 8005294:	0792      	lsls	r2, r2, #30
 8005296:	d501      	bpl.n	800529c <HAL_I2C_Master_Transmit+0x128>
    hi2c->Instance->TXDR = 0x00U;
 8005298:	2200      	movs	r2, #0
 800529a:	6282      	str	r2, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800529c:	2201      	movs	r2, #1
 800529e:	6981      	ldr	r1, [r0, #24]
 80052a0:	420a      	tst	r2, r1
 80052a2:	d102      	bne.n	80052aa <HAL_I2C_Master_Transmit+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052a4:	6981      	ldr	r1, [r0, #24]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	6182      	str	r2, [r0, #24]
    I2C_RESET_CR2(hi2c);
 80052aa:	6842      	ldr	r2, [r0, #4]
 80052ac:	497f      	ldr	r1, [pc, #508]	; (80054ac <HAL_I2C_Master_Transmit+0x338>)
 80052ae:	400a      	ands	r2, r1
 80052b0:	6042      	str	r2, [r0, #4]
    hi2c->ErrorCode |= error_code;
 80052b2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80052b4:	4313      	orrs	r3, r2
 80052b6:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052b8:	2220      	movs	r2, #32
 80052ba:	2341      	movs	r3, #65	; 0x41
 80052bc:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052be:	2300      	movs	r3, #0
 80052c0:	3222      	adds	r2, #34	; 0x22
 80052c2:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 80052c4:	3a02      	subs	r2, #2
 80052c6:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 80052c8:	2001      	movs	r0, #1
 80052ca:	e000      	b.n	80052ce <HAL_I2C_Master_Transmit+0x15a>
    return HAL_BUSY;
 80052cc:	2002      	movs	r0, #2
}
 80052ce:	b003      	add	sp, #12
 80052d0:	bcf0      	pop	{r4, r5, r6, r7}
 80052d2:	46bb      	mov	fp, r7
 80052d4:	46b2      	mov	sl, r6
 80052d6:	46a9      	mov	r9, r5
 80052d8:	46a0      	mov	r8, r4
 80052da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052dc:	2220      	movs	r2, #32
 80052de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        return HAL_ERROR;
 80052e0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052e2:	4313      	orrs	r3, r2
 80052e4:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	2341      	movs	r3, #65	; 0x41
    hi2c->State = HAL_I2C_STATE_READY;
 80052e8:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	3222      	adds	r2, #34	; 0x22
 80052ee:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 80052f0:	3a02      	subs	r2, #2
 80052f2:	54ab      	strb	r3, [r5, r2]
  return status;
 80052f4:	e7eb      	b.n	80052ce <HAL_I2C_Master_Transmit+0x15a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052f6:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80052f8:	6842      	ldr	r2, [r0, #4]
 80052fa:	496a      	ldr	r1, [pc, #424]	; (80054a4 <HAL_I2C_Master_Transmit+0x330>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052fc:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052fe:	05b3      	lsls	r3, r6, #22
 8005300:	9301      	str	r3, [sp, #4]
  MODIFY_REG(hi2c->Instance->CR2, \
 8005302:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005304:	0d9b      	lsrs	r3, r3, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005306:	431a      	orrs	r2, r3
 8005308:	4b69      	ldr	r3, [pc, #420]	; (80054b0 <HAL_I2C_Master_Transmit+0x33c>)
 800530a:	4313      	orrs	r3, r2
 800530c:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800530e:	e77e      	b.n	800520e <HAL_I2C_Master_Transmit+0x9a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005310:	0551      	lsls	r1, r2, #21
 8005312:	d512      	bpl.n	800533a <HAL_I2C_Master_Transmit+0x1c6>
 8005314:	4645      	mov	r5, r8
 8005316:	e7b0      	b.n	800527a <HAL_I2C_Master_Transmit+0x106>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005318:	6983      	ldr	r3, [r0, #24]
 800531a:	421c      	tst	r4, r3
 800531c:	d000      	beq.n	8005320 <HAL_I2C_Master_Transmit+0x1ac>
 800531e:	e0a8      	b.n	8005472 <HAL_I2C_Master_Transmit+0x2fe>
 8005320:	464b      	mov	r3, r9
 8005322:	2b00      	cmp	r3, #0
 8005324:	d19b      	bne.n	800525e <HAL_I2C_Master_Transmit+0xea>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fe ffb7 	bl	8004298 <HAL_GetTick>
 800532a:	1bc0      	subs	r0, r0, r7
 800532c:	4286      	cmp	r6, r0
 800532e:	d319      	bcc.n	8005364 <HAL_I2C_Master_Transmit+0x1f0>
 8005330:	2e00      	cmp	r6, #0
 8005332:	d017      	beq.n	8005364 <HAL_I2C_Master_Transmit+0x1f0>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005334:	4643      	mov	r3, r8
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	e784      	b.n	8005244 <HAL_I2C_Master_Transmit+0xd0>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800533a:	0592      	lsls	r2, r2, #22
 800533c:	d501      	bpl.n	8005342 <HAL_I2C_Master_Transmit+0x1ce>
 800533e:	4645      	mov	r5, r8
 8005340:	e7a2      	b.n	8005288 <HAL_I2C_Master_Transmit+0x114>
  if (status != HAL_OK)
 8005342:	2f00      	cmp	r7, #0
 8005344:	d000      	beq.n	8005348 <HAL_I2C_Master_Transmit+0x1d4>
 8005346:	e099      	b.n	800547c <HAL_I2C_Master_Transmit+0x308>
    if (Timeout != HAL_MAX_DELAY)
 8005348:	1c73      	adds	r3, r6, #1
 800534a:	d100      	bne.n	800534e <HAL_I2C_Master_Transmit+0x1da>
 800534c:	e768      	b.n	8005220 <HAL_I2C_Master_Transmit+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fe ffa3 	bl	8004298 <HAL_GetTick>
 8005352:	4653      	mov	r3, sl
 8005354:	4645      	mov	r5, r8
 8005356:	1ac0      	subs	r0, r0, r3
 8005358:	4286      	cmp	r6, r0
 800535a:	d3bf      	bcc.n	80052dc <HAL_I2C_Master_Transmit+0x168>
 800535c:	2e00      	cmp	r6, #0
 800535e:	d0bd      	beq.n	80052dc <HAL_I2C_Master_Transmit+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005360:	6828      	ldr	r0, [r5, #0]
 8005362:	e75a      	b.n	800521a <HAL_I2C_Master_Transmit+0xa6>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005364:	4643      	mov	r3, r8
          tmp2 = hi2c->Mode;
 8005366:	2242      	movs	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 800536c:	5c9b      	ldrb	r3, [r3, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800536e:	6982      	ldr	r2, [r0, #24]
          tmp2 = hi2c->Mode;
 8005370:	b2db      	uxtb	r3, r3
 8005372:	469c      	mov	ip, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	421a      	tst	r2, r3
 800537a:	d01e      	beq.n	80053ba <HAL_I2C_Master_Transmit+0x246>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800537c:	2280      	movs	r2, #128	; 0x80
 800537e:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005380:	4211      	tst	r1, r2
 8005382:	d11a      	bne.n	80053ba <HAL_I2C_Master_Transmit+0x246>
              (tmp1 != I2C_CR2_STOP) && \
 8005384:	4663      	mov	r3, ip
 8005386:	2b20      	cmp	r3, #32
 8005388:	d017      	beq.n	80053ba <HAL_I2C_Master_Transmit+0x246>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800538a:	6843      	ldr	r3, [r0, #4]
 800538c:	431a      	orrs	r2, r3
 800538e:	6042      	str	r2, [r0, #4]
            tickstart = HAL_GetTick();
 8005390:	f7fe ff82 	bl	8004298 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005394:	4643      	mov	r3, r8
            tickstart = HAL_GetTick();
 8005396:	0007      	movs	r7, r0
 8005398:	46a8      	mov	r8, r5
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	001d      	movs	r5, r3
 800539e:	e005      	b.n	80053ac <HAL_I2C_Master_Transmit+0x238>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053a0:	f7fe ff7a 	bl	8004298 <HAL_GetTick>
 80053a4:	1bc0      	subs	r0, r0, r7
 80053a6:	2819      	cmp	r0, #25
 80053a8:	d80b      	bhi.n	80053c2 <HAL_I2C_Master_Transmit+0x24e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053aa:	6828      	ldr	r0, [r5, #0]
 80053ac:	6983      	ldr	r3, [r0, #24]
 80053ae:	421c      	tst	r4, r3
 80053b0:	d0f6      	beq.n	80053a0 <HAL_I2C_Master_Transmit+0x22c>
 80053b2:	002b      	movs	r3, r5
 80053b4:	4645      	mov	r5, r8
 80053b6:	4698      	mov	r8, r3
 80053b8:	e744      	b.n	8005244 <HAL_I2C_Master_Transmit+0xd0>
 80053ba:	4643      	mov	r3, r8
 80053bc:	46a8      	mov	r8, r5
 80053be:	001d      	movs	r5, r3
 80053c0:	e7f4      	b.n	80053ac <HAL_I2C_Master_Transmit+0x238>
              status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053c4:	46a8      	mov	r8, r5
 80053c6:	6828      	ldr	r0, [r5, #0]
              status = HAL_ERROR;
 80053c8:	4699      	mov	r9, r3
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80053ca:	2520      	movs	r5, #32
 80053cc:	e73a      	b.n	8005244 <HAL_I2C_Master_Transmit+0xd0>
 80053ce:	4645      	mov	r5, r8
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053d2:	781a      	ldrb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80053d4:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053d6:	6282      	str	r2, [r0, #40]	; 0x28
      hi2c->pBuffPtr++;
 80053d8:	626b      	str	r3, [r5, #36]	; 0x24
      hi2c->XferCount--;
 80053da:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29b      	uxth	r3, r3
 80053e0:	856b      	strh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80053e2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053e4:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	d002      	beq.n	80053f6 <HAL_I2C_Master_Transmit+0x282>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053f0:	2780      	movs	r7, #128	; 0x80
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d028      	beq.n	8005448 <HAL_I2C_Master_Transmit+0x2d4>
    while (hi2c->XferCount > 0U)
 80053f6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d000      	beq.n	80053fe <HAL_I2C_Master_Transmit+0x28a>
 80053fc:	e70d      	b.n	800521a <HAL_I2C_Master_Transmit+0xa6>
 80053fe:	46b3      	mov	fp, r6
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005400:	4652      	mov	r2, sl
 8005402:	4659      	mov	r1, fp
 8005404:	0028      	movs	r0, r5
 8005406:	f7ff fd9f 	bl	8004f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800540a:	2800      	cmp	r0, #0
 800540c:	d000      	beq.n	8005410 <HAL_I2C_Master_Transmit+0x29c>
 800540e:	e75b      	b.n	80052c8 <HAL_I2C_Master_Transmit+0x154>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005410:	2120      	movs	r1, #32
 8005412:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8005414:	4c25      	ldr	r4, [pc, #148]	; (80054ac <HAL_I2C_Master_Transmit+0x338>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005416:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	4022      	ands	r2, r4
 800541c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800541e:	2341      	movs	r3, #65	; 0x41
 8005420:	54e9      	strb	r1, [r5, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005422:	3301      	adds	r3, #1
 8005424:	54e8      	strb	r0, [r5, r3]
    __HAL_UNLOCK(hi2c);
 8005426:	3b02      	subs	r3, #2
 8005428:	54e8      	strb	r0, [r5, r3]
    return HAL_OK;
 800542a:	e750      	b.n	80052ce <HAL_I2C_Master_Transmit+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800542c:	6983      	ldr	r3, [r0, #24]
 800542e:	421f      	tst	r7, r3
 8005430:	d110      	bne.n	8005454 <HAL_I2C_Master_Transmit+0x2e0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005432:	f7fe ff31 	bl	8004298 <HAL_GetTick>
 8005436:	4653      	mov	r3, sl
 8005438:	1ac0      	subs	r0, r0, r3
 800543a:	4286      	cmp	r6, r0
 800543c:	d200      	bcs.n	8005440 <HAL_I2C_Master_Transmit+0x2cc>
 800543e:	e74d      	b.n	80052dc <HAL_I2C_Master_Transmit+0x168>
 8005440:	2e00      	cmp	r6, #0
 8005442:	d100      	bne.n	8005446 <HAL_I2C_Master_Transmit+0x2d2>
 8005444:	e74a      	b.n	80052dc <HAL_I2C_Master_Transmit+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005446:	6828      	ldr	r0, [r5, #0]
 8005448:	1c73      	adds	r3, r6, #1
 800544a:	d1ef      	bne.n	800542c <HAL_I2C_Master_Transmit+0x2b8>
 800544c:	2280      	movs	r2, #128	; 0x80
 800544e:	6983      	ldr	r3, [r0, #24]
 8005450:	421a      	tst	r2, r3
 8005452:	d0fc      	beq.n	800544e <HAL_I2C_Master_Transmit+0x2da>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005454:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8005456:	2bff      	cmp	r3, #255	; 0xff
 8005458:	d912      	bls.n	8005480 <HAL_I2C_Master_Transmit+0x30c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800545a:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800545c:	6842      	ldr	r2, [r0, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800545e:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8005460:	4914      	ldr	r1, [pc, #80]	; (80054b4 <HAL_I2C_Master_Transmit+0x340>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005462:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(hi2c->Instance->CR2, \
 8005464:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005466:	0d9b      	lsrs	r3, r3, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005468:	4313      	orrs	r3, r2
 800546a:	4a13      	ldr	r2, [pc, #76]	; (80054b8 <HAL_I2C_Master_Transmit+0x344>)
 800546c:	4313      	orrs	r3, r2
 800546e:	6043      	str	r3, [r0, #4]
}
 8005470:	e7c1      	b.n	80053f6 <HAL_I2C_Master_Transmit+0x282>
    if (status == HAL_OK)
 8005472:	464b      	mov	r3, r9
 8005474:	2b00      	cmp	r3, #0
 8005476:	d100      	bne.n	800547a <HAL_I2C_Master_Transmit+0x306>
 8005478:	e6f0      	b.n	800525c <HAL_I2C_Master_Transmit+0xe8>
 800547a:	e6f0      	b.n	800525e <HAL_I2C_Master_Transmit+0xea>
 800547c:	4645      	mov	r5, r8
 800547e:	e708      	b.n	8005292 <HAL_I2C_Master_Transmit+0x11e>
          hi2c->XferSize = hi2c->XferCount;
 8005480:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005482:	9a01      	ldr	r2, [sp, #4]
  MODIFY_REG(hi2c->Instance->CR2, \
 8005484:	6841      	ldr	r1, [r0, #4]
 8005486:	4f0b      	ldr	r7, [pc, #44]	; (80054b4 <HAL_I2C_Master_Transmit+0x340>)
          hi2c->XferSize = hi2c->XferCount;
 8005488:	b29b      	uxth	r3, r3
 800548a:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800548c:	0d92      	lsrs	r2, r2, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 800548e:	4039      	ands	r1, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005490:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8005492:	430a      	orrs	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005494:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005496:	4313      	orrs	r3, r2
 8005498:	2280      	movs	r2, #128	; 0x80
 800549a:	0492      	lsls	r2, r2, #18
 800549c:	4313      	orrs	r3, r2
 800549e:	6043      	str	r3, [r0, #4]
}
 80054a0:	e7a9      	b.n	80053f6 <HAL_I2C_Master_Transmit+0x282>
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	fc009800 	.word	0xfc009800
 80054a8:	02002000 	.word	0x02002000
 80054ac:	fe00e800 	.word	0xfe00e800
 80054b0:	01ff2000 	.word	0x01ff2000
 80054b4:	fc009c00 	.word	0xfc009c00
 80054b8:	01ff0000 	.word	0x01ff0000

080054bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054be:	2541      	movs	r5, #65	; 0x41
 80054c0:	5d43      	ldrb	r3, [r0, r5]
{
 80054c2:	000a      	movs	r2, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c4:	b2de      	uxtb	r6, r3
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d11b      	bne.n	8005502 <HAL_I2CEx_ConfigAnalogFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ca:	2740      	movs	r7, #64	; 0x40
 80054cc:	5dc3      	ldrb	r3, [r0, r7]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d017      	beq.n	8005502 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054d2:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80054d4:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80054d6:	468c      	mov	ip, r1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80054d8:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 80054da:	6803      	ldr	r3, [r0, #0]
 80054dc:	681c      	ldr	r4, [r3, #0]
 80054de:	438c      	bics	r4, r1
 80054e0:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054e2:	681c      	ldr	r4, [r3, #0]
 80054e4:	4908      	ldr	r1, [pc, #32]	; (8005508 <HAL_I2CEx_ConfigAnalogFilter+0x4c>)
 80054e6:	400c      	ands	r4, r1
 80054e8:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054ea:	6819      	ldr	r1, [r3, #0]
 80054ec:	4311      	orrs	r1, r2
 80054ee:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054f0:	4661      	mov	r1, ip
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 80054fc:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 80054fe:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005502:	2002      	movs	r0, #2
 8005504:	e7fc      	b.n	8005500 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	ffffefff 	.word	0xffffefff

0800550c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800550c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550e:	2541      	movs	r5, #65	; 0x41
 8005510:	5d43      	ldrb	r3, [r0, r5]
 8005512:	b2de      	uxtb	r6, r3
 8005514:	2b20      	cmp	r3, #32
 8005516:	d11a      	bne.n	800554e <HAL_I2CEx_ConfigDigitalFilter+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005518:	2740      	movs	r7, #64	; 0x40
 800551a:	5dc3      	ldrb	r3, [r0, r7]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d016      	beq.n	800554e <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005520:	2324      	movs	r3, #36	; 0x24
 8005522:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005524:	3b23      	subs	r3, #35	; 0x23
 8005526:	469c      	mov	ip, r3
 8005528:	6804      	ldr	r4, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800552a:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	439a      	bics	r2, r3
 8005530:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 8005532:	6822      	ldr	r2, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8005534:	4b07      	ldr	r3, [pc, #28]	; (8005554 <HAL_I2CEx_ConfigDigitalFilter+0x48>)
 8005536:	401a      	ands	r2, r3
    tmpreg |= DigitalFilter << 8U;
 8005538:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

    __HAL_I2C_ENABLE(hi2c);
 800553a:	4662      	mov	r2, ip
    hi2c->Instance->CR1 = tmpreg;
 800553c:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	4313      	orrs	r3, r2
 8005542:	6023      	str	r3, [r4, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005544:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005546:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8005548:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 800554a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800554e:	2002      	movs	r0, #2
 8005550:	e7fc      	b.n	800554c <HAL_I2CEx_ConfigDigitalFilter+0x40>
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	fffff0ff 	.word	0xfffff0ff

08005558 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005558:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800555a:	4c13      	ldr	r4, [pc, #76]	; (80055a8 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x54>)
 800555e:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005560:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005562:	4013      	ands	r3, r2
 8005564:	4303      	orrs	r3, r0
 8005566:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4298      	cmp	r0, r3
 800556e:	d001      	beq.n	8005574 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8005570:	0028      	movs	r0, r5
 8005572:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8005576:	490f      	ldr	r1, [pc, #60]	; (80055b4 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	0058      	lsls	r0, r3, #1
 800557c:	18c0      	adds	r0, r0, r3
 800557e:	0040      	lsls	r0, r0, #1
 8005580:	f7fa fddc 	bl	800013c <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005584:	2280      	movs	r2, #128	; 0x80
 8005586:	6963      	ldr	r3, [r4, #20]
 8005588:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800558a:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800558c:	4213      	tst	r3, r2
 800558e:	d102      	bne.n	8005596 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8005590:	e7ee      	b.n	8005570 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8005592:	2800      	cmp	r0, #0
 8005594:	d005      	beq.n	80055a2 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005596:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8005598:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800559a:	4213      	tst	r3, r2
 800559c:	d1f9      	bne.n	8005592 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 800559e:	2500      	movs	r5, #0
 80055a0:	e7e6      	b.n	8005570 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80055a2:	2503      	movs	r5, #3
 80055a4:	e7e4      	b.n	8005570 <HAL_PWREx_ControlVoltageScaling+0x18>
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	40007000 	.word	0x40007000
 80055ac:	fffff9ff 	.word	0xfffff9ff
 80055b0:	20000000 	.word	0x20000000
 80055b4:	000f4240 	.word	0x000f4240

080055b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ba:	46ce      	mov	lr, r9
 80055bc:	4647      	mov	r7, r8
 80055be:	b580      	push	{r7, lr}
 80055c0:	0004      	movs	r4, r0
 80055c2:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d100      	bne.n	80055ca <HAL_RCC_OscConfig+0x12>
 80055c8:	e0f5      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ca:	6803      	ldr	r3, [r0, #0]
 80055cc:	07da      	lsls	r2, r3, #31
 80055ce:	d531      	bpl.n	8005634 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055d0:	2238      	movs	r2, #56	; 0x38
 80055d2:	49c8      	ldr	r1, [pc, #800]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 80055d4:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055d6:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055d8:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80055da:	2a10      	cmp	r2, #16
 80055dc:	d100      	bne.n	80055e0 <HAL_RCC_OscConfig+0x28>
 80055de:	e0f0      	b.n	80057c2 <HAL_RCC_OscConfig+0x20a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80055e0:	2a08      	cmp	r2, #8
 80055e2:	d100      	bne.n	80055e6 <HAL_RCC_OscConfig+0x2e>
 80055e4:	e0f1      	b.n	80057ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e6:	2280      	movs	r2, #128	; 0x80
 80055e8:	6863      	ldr	r3, [r4, #4]
 80055ea:	0252      	lsls	r2, r2, #9
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d100      	bne.n	80055f2 <HAL_RCC_OscConfig+0x3a>
 80055f0:	e0fe      	b.n	80057f0 <HAL_RCC_OscConfig+0x238>
 80055f2:	21a0      	movs	r1, #160	; 0xa0
 80055f4:	02c9      	lsls	r1, r1, #11
 80055f6:	428b      	cmp	r3, r1
 80055f8:	d100      	bne.n	80055fc <HAL_RCC_OscConfig+0x44>
 80055fa:	e1d9      	b.n	80059b0 <HAL_RCC_OscConfig+0x3f8>
 80055fc:	4dbd      	ldr	r5, [pc, #756]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 80055fe:	49be      	ldr	r1, [pc, #760]	; (80058f8 <HAL_RCC_OscConfig+0x340>)
 8005600:	682a      	ldr	r2, [r5, #0]
 8005602:	400a      	ands	r2, r1
 8005604:	602a      	str	r2, [r5, #0]
 8005606:	682a      	ldr	r2, [r5, #0]
 8005608:	49bc      	ldr	r1, [pc, #752]	; (80058fc <HAL_RCC_OscConfig+0x344>)
 800560a:	400a      	ands	r2, r1
 800560c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800560e:	2b00      	cmp	r3, #0
 8005610:	d000      	beq.n	8005614 <HAL_RCC_OscConfig+0x5c>
 8005612:	e0f1      	b.n	80057f8 <HAL_RCC_OscConfig+0x240>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fe fe40 	bl	8004298 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005618:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800561a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800561c:	02bf      	lsls	r7, r7, #10
 800561e:	e005      	b.n	800562c <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005620:	f7fe fe3a 	bl	8004298 <HAL_GetTick>
 8005624:	1b80      	subs	r0, r0, r6
 8005626:	2864      	cmp	r0, #100	; 0x64
 8005628:	d900      	bls.n	800562c <HAL_RCC_OscConfig+0x74>
 800562a:	e139      	b.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	423b      	tst	r3, r7
 8005630:	d1f6      	bne.n	8005620 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	079a      	lsls	r2, r3, #30
 8005636:	d52c      	bpl.n	8005692 <HAL_RCC_OscConfig+0xda>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005638:	2338      	movs	r3, #56	; 0x38
 800563a:	4aae      	ldr	r2, [pc, #696]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 800563c:	6891      	ldr	r1, [r2, #8]
 800563e:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005640:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005642:	2b10      	cmp	r3, #16
 8005644:	d100      	bne.n	8005648 <HAL_RCC_OscConfig+0x90>
 8005646:	e0e8      	b.n	800581a <HAL_RCC_OscConfig+0x262>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005648:	2b00      	cmp	r3, #0
 800564a:	d000      	beq.n	800564e <HAL_RCC_OscConfig+0x96>
 800564c:	e0ea      	b.n	8005824 <HAL_RCC_OscConfig+0x26c>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	055b      	lsls	r3, r3, #21
 8005652:	d500      	bpl.n	8005656 <HAL_RCC_OscConfig+0x9e>
 8005654:	e0ab      	b.n	80057ae <HAL_RCC_OscConfig+0x1f6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005656:	6851      	ldr	r1, [r2, #4]
 8005658:	6963      	ldr	r3, [r4, #20]
 800565a:	48a9      	ldr	r0, [pc, #676]	; (8005900 <HAL_RCC_OscConfig+0x348>)
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	4001      	ands	r1, r0
 8005660:	430b      	orrs	r3, r1
 8005662:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005664:	4aa3      	ldr	r2, [pc, #652]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 8005666:	49a7      	ldr	r1, [pc, #668]	; (8005904 <HAL_RCC_OscConfig+0x34c>)
 8005668:	6813      	ldr	r3, [r2, #0]
 800566a:	400b      	ands	r3, r1
 800566c:	6921      	ldr	r1, [r4, #16]
 800566e:	430b      	orrs	r3, r1
 8005670:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005672:	6813      	ldr	r3, [r2, #0]
 8005674:	4aa4      	ldr	r2, [pc, #656]	; (8005908 <HAL_RCC_OscConfig+0x350>)
 8005676:	049b      	lsls	r3, r3, #18
 8005678:	0f5b      	lsrs	r3, r3, #29
 800567a:	40da      	lsrs	r2, r3
 800567c:	0013      	movs	r3, r2
 800567e:	4aa3      	ldr	r2, [pc, #652]	; (800590c <HAL_RCC_OscConfig+0x354>)
 8005680:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005682:	4ba3      	ldr	r3, [pc, #652]	; (8005910 <HAL_RCC_OscConfig+0x358>)
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	f7fe fdc1 	bl	800420c <HAL_InitTick>
 800568a:	2800      	cmp	r0, #0
 800568c:	d000      	beq.n	8005690 <HAL_RCC_OscConfig+0xd8>
 800568e:	e092      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	071a      	lsls	r2, r3, #28
 8005694:	d46d      	bmi.n	8005772 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005696:	075b      	lsls	r3, r3, #29
 8005698:	d545      	bpl.n	8005726 <HAL_RCC_OscConfig+0x16e>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800569a:	2338      	movs	r3, #56	; 0x38
 800569c:	4a95      	ldr	r2, [pc, #596]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 800569e:	6891      	ldr	r1, [r2, #8]
 80056a0:	400b      	ands	r3, r1
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d100      	bne.n	80056a8 <HAL_RCC_OscConfig+0xf0>
 80056a6:	e0e3      	b.n	8005870 <HAL_RCC_OscConfig+0x2b8>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056a8:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80056aa:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80056ae:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80056b0:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056b2:	4219      	tst	r1, r3
 80056b4:	d108      	bne.n	80056c8 <HAL_RCC_OscConfig+0x110>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80056b6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80056b8:	4319      	orrs	r1, r3
 80056ba:	63d1      	str	r1, [r2, #60]	; 0x3c
 80056bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056be:	4013      	ands	r3, r2
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80056c4:	2301      	movs	r3, #1
 80056c6:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c8:	2780      	movs	r7, #128	; 0x80
 80056ca:	4e92      	ldr	r6, [pc, #584]	; (8005914 <HAL_RCC_OscConfig+0x35c>)
 80056cc:	007f      	lsls	r7, r7, #1
 80056ce:	6833      	ldr	r3, [r6, #0]
 80056d0:	423b      	tst	r3, r7
 80056d2:	d100      	bne.n	80056d6 <HAL_RCC_OscConfig+0x11e>
 80056d4:	e0d5      	b.n	8005882 <HAL_RCC_OscConfig+0x2ca>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d6:	68a3      	ldr	r3, [r4, #8]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d100      	bne.n	80056de <HAL_RCC_OscConfig+0x126>
 80056dc:	e124      	b.n	8005928 <HAL_RCC_OscConfig+0x370>
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d100      	bne.n	80056e4 <HAL_RCC_OscConfig+0x12c>
 80056e2:	e1c4      	b.n	8005a6e <HAL_RCC_OscConfig+0x4b6>
 80056e4:	2101      	movs	r1, #1
 80056e6:	4e83      	ldr	r6, [pc, #524]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 80056e8:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80056ea:	438a      	bics	r2, r1
 80056ec:	65f2      	str	r2, [r6, #92]	; 0x5c
 80056ee:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80056f0:	3103      	adds	r1, #3
 80056f2:	438a      	bics	r2, r1
 80056f4:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d000      	beq.n	80056fc <HAL_RCC_OscConfig+0x144>
 80056fa:	e119      	b.n	8005930 <HAL_RCC_OscConfig+0x378>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fc:	f7fe fdcc 	bl	8004298 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005700:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8005702:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005704:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005706:	4d84      	ldr	r5, [pc, #528]	; (8005918 <HAL_RCC_OscConfig+0x360>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005708:	e005      	b.n	8005716 <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570a:	f7fe fdc5 	bl	8004298 <HAL_GetTick>
 800570e:	1bc0      	subs	r0, r0, r7
 8005710:	42a8      	cmp	r0, r5
 8005712:	d900      	bls.n	8005716 <HAL_RCC_OscConfig+0x15e>
 8005714:	e0c4      	b.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005716:	4642      	mov	r2, r8
 8005718:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800571a:	421a      	tst	r2, r3
 800571c:	d1f5      	bne.n	800570a <HAL_RCC_OscConfig+0x152>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800571e:	464b      	mov	r3, r9
 8005720:	2b01      	cmp	r3, #1
 8005722:	d100      	bne.n	8005726 <HAL_RCC_OscConfig+0x16e>
 8005724:	e15d      	b.n	80059e2 <HAL_RCC_OscConfig+0x42a>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005726:	69e3      	ldr	r3, [r4, #28]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d020      	beq.n	800576e <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800572c:	2238      	movs	r2, #56	; 0x38
 800572e:	4d71      	ldr	r5, [pc, #452]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 8005730:	68a9      	ldr	r1, [r5, #8]
 8005732:	400a      	ands	r2, r1
 8005734:	2a10      	cmp	r2, #16
 8005736:	d100      	bne.n	800573a <HAL_RCC_OscConfig+0x182>
 8005738:	e10c      	b.n	8005954 <HAL_RCC_OscConfig+0x39c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800573a:	2b02      	cmp	r3, #2
 800573c:	d100      	bne.n	8005740 <HAL_RCC_OscConfig+0x188>
 800573e:	e156      	b.n	80059ee <HAL_RCC_OscConfig+0x436>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	4a76      	ldr	r2, [pc, #472]	; (800591c <HAL_RCC_OscConfig+0x364>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005744:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005746:	4013      	ands	r3, r2
 8005748:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800574a:	f7fe fda5 	bl	8004298 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574e:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8005750:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005752:	e005      	b.n	8005760 <HAL_RCC_OscConfig+0x1a8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005754:	f7fe fda0 	bl	8004298 <HAL_GetTick>
 8005758:	1b00      	subs	r0, r0, r4
 800575a:	2802      	cmp	r0, #2
 800575c:	d900      	bls.n	8005760 <HAL_RCC_OscConfig+0x1a8>
 800575e:	e09f      	b.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	4233      	tst	r3, r6
 8005764:	d1f6      	bne.n	8005754 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005766:	68eb      	ldr	r3, [r5, #12]
 8005768:	4a6d      	ldr	r2, [pc, #436]	; (8005920 <HAL_RCC_OscConfig+0x368>)
 800576a:	4013      	ands	r3, r2
 800576c:	60eb      	str	r3, [r5, #12]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800576e:	2000      	movs	r0, #0
 8005770:	e022      	b.n	80057b8 <HAL_RCC_OscConfig+0x200>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005772:	2238      	movs	r2, #56	; 0x38
 8005774:	4d5f      	ldr	r5, [pc, #380]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 8005776:	68a9      	ldr	r1, [r5, #8]
 8005778:	400a      	ands	r2, r1
 800577a:	2a18      	cmp	r2, #24
 800577c:	d02f      	beq.n	80057de <HAL_RCC_OscConfig+0x226>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800577e:	69a3      	ldr	r3, [r4, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d100      	bne.n	8005786 <HAL_RCC_OscConfig+0x1ce>
 8005784:	e08e      	b.n	80058a4 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_LSI_ENABLE();
 8005786:	2201      	movs	r2, #1
 8005788:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800578a:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 800578c:	4313      	orrs	r3, r2
 800578e:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005790:	f7fe fd82 	bl	8004298 <HAL_GetTick>
 8005794:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005796:	e005      	b.n	80057a4 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005798:	f7fe fd7e 	bl	8004298 <HAL_GetTick>
 800579c:	1b80      	subs	r0, r0, r6
 800579e:	2802      	cmp	r0, #2
 80057a0:	d900      	bls.n	80057a4 <HAL_RCC_OscConfig+0x1ec>
 80057a2:	e07d      	b.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057a4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80057a6:	421f      	tst	r7, r3
 80057a8:	d0f6      	beq.n	8005798 <HAL_RCC_OscConfig+0x1e0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	e773      	b.n	8005696 <HAL_RCC_OscConfig+0xde>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ae:	68e3      	ldr	r3, [r4, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d000      	beq.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
 80057b4:	e74f      	b.n	8005656 <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 80057b6:	2001      	movs	r0, #1
}
 80057b8:	b003      	add	sp, #12
 80057ba:	bcc0      	pop	{r6, r7}
 80057bc:	46b9      	mov	r9, r7
 80057be:	46b0      	mov	r8, r6
 80057c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057c2:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80057c4:	078a      	lsls	r2, r1, #30
 80057c6:	d000      	beq.n	80057ca <HAL_RCC_OscConfig+0x212>
 80057c8:	e70d      	b.n	80055e6 <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ca:	4a4a      	ldr	r2, [pc, #296]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	0392      	lsls	r2, r2, #14
 80057d0:	d400      	bmi.n	80057d4 <HAL_RCC_OscConfig+0x21c>
 80057d2:	e72f      	b.n	8005634 <HAL_RCC_OscConfig+0x7c>
 80057d4:	6862      	ldr	r2, [r4, #4]
 80057d6:	2a00      	cmp	r2, #0
 80057d8:	d000      	beq.n	80057dc <HAL_RCC_OscConfig+0x224>
 80057da:	e72b      	b.n	8005634 <HAL_RCC_OscConfig+0x7c>
 80057dc:	e7eb      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80057de:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80057e0:	0792      	lsls	r2, r2, #30
 80057e2:	d400      	bmi.n	80057e6 <HAL_RCC_OscConfig+0x22e>
 80057e4:	e757      	b.n	8005696 <HAL_RCC_OscConfig+0xde>
 80057e6:	69a2      	ldr	r2, [r4, #24]
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	d000      	beq.n	80057ee <HAL_RCC_OscConfig+0x236>
 80057ec:	e753      	b.n	8005696 <HAL_RCC_OscConfig+0xde>
 80057ee:	e7e2      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f0:	4a40      	ldr	r2, [pc, #256]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 80057f2:	6811      	ldr	r1, [r2, #0]
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80057f8:	f7fe fd4e 	bl	8004298 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057fc:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80057fe:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005800:	4f3c      	ldr	r7, [pc, #240]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
 8005802:	02b6      	lsls	r6, r6, #10
 8005804:	e004      	b.n	8005810 <HAL_RCC_OscConfig+0x258>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005806:	f7fe fd47 	bl	8004298 <HAL_GetTick>
 800580a:	1b40      	subs	r0, r0, r5
 800580c:	2864      	cmp	r0, #100	; 0x64
 800580e:	d847      	bhi.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	4233      	tst	r3, r6
 8005814:	d0f7      	beq.n	8005806 <HAL_RCC_OscConfig+0x24e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	e70c      	b.n	8005634 <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800581a:	3b0d      	subs	r3, #13
 800581c:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800581e:	2b02      	cmp	r3, #2
 8005820:	d100      	bne.n	8005824 <HAL_RCC_OscConfig+0x26c>
 8005822:	e0cf      	b.n	80059c4 <HAL_RCC_OscConfig+0x40c>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005824:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005826:	4d33      	ldr	r5, [pc, #204]	; (80058f4 <HAL_RCC_OscConfig+0x33c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005828:	2b00      	cmp	r3, #0
 800582a:	d04e      	beq.n	80058ca <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	4a35      	ldr	r2, [pc, #212]	; (8005904 <HAL_RCC_OscConfig+0x34c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005830:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005832:	4013      	ands	r3, r2
 8005834:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005836:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005838:	4313      	orrs	r3, r2
 800583a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	682a      	ldr	r2, [r5, #0]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	4313      	orrs	r3, r2
 8005844:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005846:	f7fe fd27 	bl	8004298 <HAL_GetTick>
 800584a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800584c:	e004      	b.n	8005858 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800584e:	f7fe fd23 	bl	8004298 <HAL_GetTick>
 8005852:	1b80      	subs	r0, r0, r6
 8005854:	2802      	cmp	r0, #2
 8005856:	d823      	bhi.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	423b      	tst	r3, r7
 800585c:	d0f7      	beq.n	800584e <HAL_RCC_OscConfig+0x296>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585e:	686a      	ldr	r2, [r5, #4]
 8005860:	6963      	ldr	r3, [r4, #20]
 8005862:	4927      	ldr	r1, [pc, #156]	; (8005900 <HAL_RCC_OscConfig+0x348>)
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	400a      	ands	r2, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	e710      	b.n	8005692 <HAL_RCC_OscConfig+0xda>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005870:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8005872:	079b      	lsls	r3, r3, #30
 8005874:	d400      	bmi.n	8005878 <HAL_RCC_OscConfig+0x2c0>
 8005876:	e756      	b.n	8005726 <HAL_RCC_OscConfig+0x16e>
 8005878:	68a3      	ldr	r3, [r4, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d000      	beq.n	8005880 <HAL_RCC_OscConfig+0x2c8>
 800587e:	e752      	b.n	8005726 <HAL_RCC_OscConfig+0x16e>
 8005880:	e799      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005882:	6833      	ldr	r3, [r6, #0]
 8005884:	433b      	orrs	r3, r7
 8005886:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005888:	f7fe fd06 	bl	8004298 <HAL_GetTick>
 800588c:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800588e:	6833      	ldr	r3, [r6, #0]
 8005890:	423b      	tst	r3, r7
 8005892:	d000      	beq.n	8005896 <HAL_RCC_OscConfig+0x2de>
 8005894:	e71f      	b.n	80056d6 <HAL_RCC_OscConfig+0x11e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005896:	f7fe fcff 	bl	8004298 <HAL_GetTick>
 800589a:	1b40      	subs	r0, r0, r5
 800589c:	2802      	cmp	r0, #2
 800589e:	d9f6      	bls.n	800588e <HAL_RCC_OscConfig+0x2d6>
            return HAL_TIMEOUT;
 80058a0:	2003      	movs	r0, #3
 80058a2:	e789      	b.n	80057b8 <HAL_RCC_OscConfig+0x200>
        __HAL_RCC_LSI_DISABLE();
 80058a4:	2201      	movs	r2, #1
 80058a6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058a8:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80058aa:	4393      	bics	r3, r2
 80058ac:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80058ae:	f7fe fcf3 	bl	8004298 <HAL_GetTick>
 80058b2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058b4:	e004      	b.n	80058c0 <HAL_RCC_OscConfig+0x308>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b6:	f7fe fcef 	bl	8004298 <HAL_GetTick>
 80058ba:	1b80      	subs	r0, r0, r6
 80058bc:	2802      	cmp	r0, #2
 80058be:	d8ef      	bhi.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058c0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80058c2:	421f      	tst	r7, r3
 80058c4:	d1f7      	bne.n	80058b6 <HAL_RCC_OscConfig+0x2fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	e6e5      	b.n	8005696 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 80058ca:	682b      	ldr	r3, [r5, #0]
 80058cc:	4a15      	ldr	r2, [pc, #84]	; (8005924 <HAL_RCC_OscConfig+0x36c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058ce:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 80058d0:	4013      	ands	r3, r2
 80058d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80058d4:	f7fe fce0 	bl	8004298 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058d8:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80058da:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058dc:	e004      	b.n	80058e8 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058de:	f7fe fcdb 	bl	8004298 <HAL_GetTick>
 80058e2:	1b80      	subs	r0, r0, r6
 80058e4:	2802      	cmp	r0, #2
 80058e6:	d8db      	bhi.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	423b      	tst	r3, r7
 80058ec:	d1f7      	bne.n	80058de <HAL_RCC_OscConfig+0x326>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	e6cf      	b.n	8005692 <HAL_RCC_OscConfig+0xda>
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	40021000 	.word	0x40021000
 80058f8:	fffeffff 	.word	0xfffeffff
 80058fc:	fffbffff 	.word	0xfffbffff
 8005900:	ffff80ff 	.word	0xffff80ff
 8005904:	ffffc7ff 	.word	0xffffc7ff
 8005908:	00f42400 	.word	0x00f42400
 800590c:	20000000 	.word	0x20000000
 8005910:	20000008 	.word	0x20000008
 8005914:	40007000 	.word	0x40007000
 8005918:	00001388 	.word	0x00001388
 800591c:	feffffff 	.word	0xfeffffff
 8005920:	eefefffc 	.word	0xeefefffc
 8005924:	fffffeff 	.word	0xfffffeff
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005928:	4956      	ldr	r1, [pc, #344]	; (8005a84 <HAL_RCC_OscConfig+0x4cc>)
 800592a:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800592c:	4313      	orrs	r3, r2
 800592e:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8005930:	f7fe fcb2 	bl	8004298 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005934:	4b53      	ldr	r3, [pc, #332]	; (8005a84 <HAL_RCC_OscConfig+0x4cc>)
        tickstart = HAL_GetTick();
 8005936:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005938:	4698      	mov	r8, r3
 800593a:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593c:	4d52      	ldr	r5, [pc, #328]	; (8005a88 <HAL_RCC_OscConfig+0x4d0>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800593e:	e004      	b.n	800594a <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005940:	f7fe fcaa 	bl	8004298 <HAL_GetTick>
 8005944:	1b80      	subs	r0, r0, r6
 8005946:	42a8      	cmp	r0, r5
 8005948:	d8aa      	bhi.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594a:	4643      	mov	r3, r8
 800594c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594e:	421f      	tst	r7, r3
 8005950:	d0f6      	beq.n	8005940 <HAL_RCC_OscConfig+0x388>
 8005952:	e6e4      	b.n	800571e <HAL_RCC_OscConfig+0x166>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005954:	2b01      	cmp	r3, #1
 8005956:	d100      	bne.n	800595a <HAL_RCC_OscConfig+0x3a2>
 8005958:	e72d      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595a:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 800595c:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595e:	6a21      	ldr	r1, [r4, #32]
 8005960:	4013      	ands	r3, r2
 8005962:	428b      	cmp	r3, r1
 8005964:	d000      	beq.n	8005968 <HAL_RCC_OscConfig+0x3b0>
 8005966:	e726      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005968:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800596c:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596e:	428b      	cmp	r3, r1
 8005970:	d000      	beq.n	8005974 <HAL_RCC_OscConfig+0x3bc>
 8005972:	e720      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005974:	21fe      	movs	r1, #254	; 0xfe
 8005976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005978:	01c9      	lsls	r1, r1, #7
 800597a:	4011      	ands	r1, r2
 800597c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800597e:	4299      	cmp	r1, r3
 8005980:	d000      	beq.n	8005984 <HAL_RCC_OscConfig+0x3cc>
 8005982:	e718      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005984:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005986:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005988:	039b      	lsls	r3, r3, #14
 800598a:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800598c:	428b      	cmp	r3, r1
 800598e:	d000      	beq.n	8005992 <HAL_RCC_OscConfig+0x3da>
 8005990:	e711      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005992:	23e0      	movs	r3, #224	; 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005994:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005996:	051b      	lsls	r3, r3, #20
 8005998:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800599a:	428b      	cmp	r3, r1
 800599c:	d000      	beq.n	80059a0 <HAL_RCC_OscConfig+0x3e8>
 800599e:	e70a      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80059a2:	0f52      	lsrs	r2, r2, #29
 80059a4:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d000      	beq.n	80059ac <HAL_RCC_OscConfig+0x3f4>
 80059aa:	e704      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
  return HAL_OK;
 80059ac:	2000      	movs	r0, #0
 80059ae:	e703      	b.n	80057b8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <HAL_RCC_OscConfig+0x4cc>)
 80059b4:	02c9      	lsls	r1, r1, #11
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	4301      	orrs	r1, r0
 80059ba:	6019      	str	r1, [r3, #0]
 80059bc:	6819      	ldr	r1, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059c2:	e719      	b.n	80057f8 <HAL_RCC_OscConfig+0x240>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059c4:	6813      	ldr	r3, [r2, #0]
 80059c6:	055b      	lsls	r3, r3, #21
 80059c8:	d503      	bpl.n	80059d2 <HAL_RCC_OscConfig+0x41a>
 80059ca:	68e3      	ldr	r3, [r4, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d100      	bne.n	80059d2 <HAL_RCC_OscConfig+0x41a>
 80059d0:	e6f1      	b.n	80057b6 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d2:	6851      	ldr	r1, [r2, #4]
 80059d4:	6963      	ldr	r3, [r4, #20]
 80059d6:	482d      	ldr	r0, [pc, #180]	; (8005a8c <HAL_RCC_OscConfig+0x4d4>)
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	4001      	ands	r1, r0
 80059dc:	430b      	orrs	r3, r1
 80059de:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059e0:	e64f      	b.n	8005682 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PWR_CLK_DISABLE();
 80059e2:	4a28      	ldr	r2, [pc, #160]	; (8005a84 <HAL_RCC_OscConfig+0x4cc>)
 80059e4:	492a      	ldr	r1, [pc, #168]	; (8005a90 <HAL_RCC_OscConfig+0x4d8>)
 80059e6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80059e8:	400b      	ands	r3, r1
 80059ea:	63d3      	str	r3, [r2, #60]	; 0x3c
 80059ec:	e69b      	b.n	8005726 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL_DISABLE();
 80059ee:	682b      	ldr	r3, [r5, #0]
 80059f0:	4a28      	ldr	r2, [pc, #160]	; (8005a94 <HAL_RCC_OscConfig+0x4dc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059f2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80059f4:	4013      	ands	r3, r2
 80059f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80059f8:	f7fe fc4e 	bl	8004298 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fc:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80059fe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a00:	e005      	b.n	8005a0e <HAL_RCC_OscConfig+0x456>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a02:	f7fe fc49 	bl	8004298 <HAL_GetTick>
 8005a06:	1b80      	subs	r0, r0, r6
 8005a08:	2802      	cmp	r0, #2
 8005a0a:	d900      	bls.n	8005a0e <HAL_RCC_OscConfig+0x456>
 8005a0c:	e748      	b.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	423b      	tst	r3, r7
 8005a12:	d1f6      	bne.n	8005a02 <HAL_RCC_OscConfig+0x44a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a16:	6a23      	ldr	r3, [r4, #32]
 8005a18:	68ea      	ldr	r2, [r5, #12]
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	491e      	ldr	r1, [pc, #120]	; (8005a98 <HAL_RCC_OscConfig+0x4e0>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a1e:	4e19      	ldr	r6, [pc, #100]	; (8005a84 <HAL_RCC_OscConfig+0x4cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a20:	400a      	ands	r2, r1
 8005a22:	4313      	orrs	r3, r2
 8005a24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a26:	4313      	orrs	r3, r2
 8005a28:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a32:	0212      	lsls	r2, r2, #8
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005a38:	2380      	movs	r3, #128	; 0x80
 8005a3a:	682a      	ldr	r2, [r5, #0]
 8005a3c:	045b      	lsls	r3, r3, #17
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	68ea      	ldr	r2, [r5, #12]
 8005a46:	055b      	lsls	r3, r3, #21
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005a4c:	f7fe fc24 	bl	8004298 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a50:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8005a52:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a54:	04ad      	lsls	r5, r5, #18
 8005a56:	e005      	b.n	8005a64 <HAL_RCC_OscConfig+0x4ac>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a58:	f7fe fc1e 	bl	8004298 <HAL_GetTick>
 8005a5c:	1b00      	subs	r0, r0, r4
 8005a5e:	2802      	cmp	r0, #2
 8005a60:	d900      	bls.n	8005a64 <HAL_RCC_OscConfig+0x4ac>
 8005a62:	e71d      	b.n	80058a0 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a64:	6833      	ldr	r3, [r6, #0]
 8005a66:	422b      	tst	r3, r5
 8005a68:	d0f6      	beq.n	8005a58 <HAL_RCC_OscConfig+0x4a0>
  return HAL_OK;
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e6a4      	b.n	80057b8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a6e:	2104      	movs	r1, #4
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <HAL_RCC_OscConfig+0x4cc>)
 8005a72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a74:	430a      	orrs	r2, r1
 8005a76:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a7a:	3903      	subs	r1, #3
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a80:	e756      	b.n	8005930 <HAL_RCC_OscConfig+0x378>
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	40021000 	.word	0x40021000
 8005a88:	00001388 	.word	0x00001388
 8005a8c:	ffff80ff 	.word	0xffff80ff
 8005a90:	efffffff 	.word	0xefffffff
 8005a94:	feffffff 	.word	0xfeffffff
 8005a98:	11c1808c 	.word	0x11c1808c

08005a9c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a9c:	2338      	movs	r3, #56	; 0x38
 8005a9e:	4a20      	ldr	r2, [pc, #128]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8005aa0:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005aa2:	6891      	ldr	r1, [r2, #8]
 8005aa4:	420b      	tst	r3, r1
 8005aa6:	d105      	bne.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005aa8:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005aaa:	481e      	ldr	r0, [pc, #120]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x88>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005aac:	049b      	lsls	r3, r3, #18
 8005aae:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005ab0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8005ab2:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ab4:	6891      	ldr	r1, [r2, #8]
 8005ab6:	4019      	ands	r1, r3
 8005ab8:	2908      	cmp	r1, #8
 8005aba:	d011      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005abc:	6891      	ldr	r1, [r2, #8]
 8005abe:	4019      	ands	r1, r3
 8005ac0:	2910      	cmp	r1, #16
 8005ac2:	d00f      	beq.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005ac4:	6891      	ldr	r1, [r2, #8]
 8005ac6:	4019      	ands	r1, r3
 8005ac8:	2920      	cmp	r1, #32
 8005aca:	d021      	beq.n	8005b10 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005acc:	6890      	ldr	r0, [r2, #8]
 8005ace:	4018      	ands	r0, r3
    sysclockfreq = 0U;
 8005ad0:	3818      	subs	r0, #24
 8005ad2:	4243      	negs	r3, r0
 8005ad4:	4158      	adcs	r0, r3
 8005ad6:	23fa      	movs	r3, #250	; 0xfa
 8005ad8:	4240      	negs	r0, r0
 8005ada:	01db      	lsls	r3, r3, #7
 8005adc:	4018      	ands	r0, r3
 8005ade:	e7e8      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8005ae0:	4811      	ldr	r0, [pc, #68]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x8c>)
 8005ae2:	e7e6      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ae4:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ae6:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ae8:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005aea:	68d0      	ldr	r0, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aec:	0649      	lsls	r1, r1, #25
 8005aee:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005af0:	0440      	lsls	r0, r0, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005af2:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005af4:	0e44      	lsrs	r4, r0, #25
    switch (pllsource)
 8005af6:	079b      	lsls	r3, r3, #30
 8005af8:	d00d      	beq.n	8005b16 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005afa:	480a      	ldr	r0, [pc, #40]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x88>)
 8005afc:	f7fa fb1e 	bl	800013c <__udivsi3>
 8005b00:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x84>)
 8005b04:	68d9      	ldr	r1, [r3, #12]
 8005b06:	0f49      	lsrs	r1, r1, #29
 8005b08:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8005b0a:	f7fa fb17 	bl	800013c <__udivsi3>
  return sysclockfreq;
 8005b0e:	e7d0      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8005b10:	2080      	movs	r0, #128	; 0x80
 8005b12:	0200      	lsls	r0, r0, #8
 8005b14:	e7cd      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b16:	4804      	ldr	r0, [pc, #16]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x8c>)
 8005b18:	f7fa fb10 	bl	800013c <__udivsi3>
 8005b1c:	4360      	muls	r0, r4
        break;
 8005b1e:	e7f0      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x66>
 8005b20:	40021000 	.word	0x40021000
 8005b24:	00f42400 	.word	0x00f42400
 8005b28:	007a1200 	.word	0x007a1200

08005b2c <HAL_RCC_ClockConfig>:
{
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	46ce      	mov	lr, r9
 8005b30:	4647      	mov	r7, r8
 8005b32:	0005      	movs	r5, r0
 8005b34:	000c      	movs	r4, r1
 8005b36:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d026      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b3c:	2207      	movs	r2, #7
 8005b3e:	4e57      	ldr	r6, [pc, #348]	; (8005c9c <HAL_RCC_ClockConfig+0x170>)
 8005b40:	6833      	ldr	r3, [r6, #0]
 8005b42:	4013      	ands	r3, r2
 8005b44:	428b      	cmp	r3, r1
 8005b46:	d35e      	bcc.n	8005c06 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	079a      	lsls	r2, r3, #30
 8005b4c:	d50e      	bpl.n	8005b6c <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b4e:	075a      	lsls	r2, r3, #29
 8005b50:	d505      	bpl.n	8005b5e <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b52:	22e0      	movs	r2, #224	; 0xe0
 8005b54:	4952      	ldr	r1, [pc, #328]	; (8005ca0 <HAL_RCC_ClockConfig+0x174>)
 8005b56:	01d2      	lsls	r2, r2, #7
 8005b58:	6888      	ldr	r0, [r1, #8]
 8005b5a:	4302      	orrs	r2, r0
 8005b5c:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b5e:	4950      	ldr	r1, [pc, #320]	; (8005ca0 <HAL_RCC_ClockConfig+0x174>)
 8005b60:	4850      	ldr	r0, [pc, #320]	; (8005ca4 <HAL_RCC_ClockConfig+0x178>)
 8005b62:	688a      	ldr	r2, [r1, #8]
 8005b64:	4002      	ands	r2, r0
 8005b66:	68a8      	ldr	r0, [r5, #8]
 8005b68:	4302      	orrs	r2, r0
 8005b6a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b6c:	07db      	lsls	r3, r3, #31
 8005b6e:	d52b      	bpl.n	8005bc8 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b70:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b72:	4a4b      	ldr	r2, [pc, #300]	; (8005ca0 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d100      	bne.n	8005b7a <HAL_RCC_ClockConfig+0x4e>
 8005b78:	e07c      	b.n	8005c74 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d007      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d000      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x58>
 8005b82:	e07d      	b.n	8005c80 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	0552      	lsls	r2, r2, #21
 8005b88:	d404      	bmi.n	8005b94 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	e037      	b.n	8005bfe <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	0192      	lsls	r2, r2, #6
 8005b92:	d5fa      	bpl.n	8005b8a <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b94:	2107      	movs	r1, #7
 8005b96:	4e42      	ldr	r6, [pc, #264]	; (8005ca0 <HAL_RCC_ClockConfig+0x174>)
 8005b98:	68b2      	ldr	r2, [r6, #8]
 8005b9a:	438a      	bics	r2, r1
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005ba0:	f7fe fb7a 	bl	8004298 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba4:	2338      	movs	r3, #56	; 0x38
 8005ba6:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba8:	4b3f      	ldr	r3, [pc, #252]	; (8005ca8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8005baa:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bac:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bae:	e004      	b.n	8005bba <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb0:	f7fe fb72 	bl	8004298 <HAL_GetTick>
 8005bb4:	1bc0      	subs	r0, r0, r7
 8005bb6:	4548      	cmp	r0, r9
 8005bb8:	d83b      	bhi.n	8005c32 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bba:	4643      	mov	r3, r8
 8005bbc:	68b2      	ldr	r2, [r6, #8]
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	686b      	ldr	r3, [r5, #4]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d1f3      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc8:	2207      	movs	r2, #7
 8005bca:	4e34      	ldr	r6, [pc, #208]	; (8005c9c <HAL_RCC_ClockConfig+0x170>)
 8005bcc:	6833      	ldr	r3, [r6, #0]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	d838      	bhi.n	8005c46 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	075b      	lsls	r3, r3, #29
 8005bd8:	d42d      	bmi.n	8005c36 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005bda:	f7ff ff5f 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
 8005bde:	4b30      	ldr	r3, [pc, #192]	; (8005ca0 <HAL_RCC_ClockConfig+0x174>)
 8005be0:	4a32      	ldr	r2, [pc, #200]	; (8005cac <HAL_RCC_ClockConfig+0x180>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	051b      	lsls	r3, r3, #20
 8005be6:	0f1b      	lsrs	r3, r3, #28
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	589b      	ldr	r3, [r3, r2]
 8005bec:	221f      	movs	r2, #31
 8005bee:	4013      	ands	r3, r2
 8005bf0:	40d8      	lsrs	r0, r3
 8005bf2:	4b2f      	ldr	r3, [pc, #188]	; (8005cb0 <HAL_RCC_ClockConfig+0x184>)
 8005bf4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8005bf6:	4b2f      	ldr	r3, [pc, #188]	; (8005cb4 <HAL_RCC_ClockConfig+0x188>)
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	f7fe fb07 	bl	800420c <HAL_InitTick>
}
 8005bfe:	bcc0      	pop	{r6, r7}
 8005c00:	46b9      	mov	r9, r7
 8005c02:	46b0      	mov	r8, r6
 8005c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	6833      	ldr	r3, [r6, #0]
 8005c08:	4393      	bics	r3, r2
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005c0e:	f7fe fb43 	bl	8004298 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c12:	2307      	movs	r3, #7
 8005c14:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c16:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8005c18:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c1a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	6833      	ldr	r3, [r6, #0]
 8005c20:	4013      	ands	r3, r2
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	d100      	bne.n	8005c28 <HAL_RCC_ClockConfig+0xfc>
 8005c26:	e78f      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c28:	f7fe fb36 	bl	8004298 <HAL_GetTick>
 8005c2c:	1bc0      	subs	r0, r0, r7
 8005c2e:	4548      	cmp	r0, r9
 8005c30:	d9f4      	bls.n	8005c1c <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8005c32:	2003      	movs	r0, #3
 8005c34:	e7e3      	b.n	8005bfe <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c36:	4a1a      	ldr	r2, [pc, #104]	; (8005ca0 <HAL_RCC_ClockConfig+0x174>)
 8005c38:	491f      	ldr	r1, [pc, #124]	; (8005cb8 <HAL_RCC_ClockConfig+0x18c>)
 8005c3a:	6893      	ldr	r3, [r2, #8]
 8005c3c:	400b      	ands	r3, r1
 8005c3e:	68e9      	ldr	r1, [r5, #12]
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6093      	str	r3, [r2, #8]
 8005c44:	e7c9      	b.n	8005bda <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c46:	6833      	ldr	r3, [r6, #0]
 8005c48:	4393      	bics	r3, r2
 8005c4a:	4323      	orrs	r3, r4
 8005c4c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005c4e:	f7fe fb23 	bl	8004298 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c52:	2307      	movs	r3, #7
 8005c54:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c56:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8005c58:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c5a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	6833      	ldr	r3, [r6, #0]
 8005c60:	4013      	ands	r3, r2
 8005c62:	42a3      	cmp	r3, r4
 8005c64:	d0b6      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c66:	f7fe fb17 	bl	8004298 <HAL_GetTick>
 8005c6a:	1bc0      	subs	r0, r0, r7
 8005c6c:	4548      	cmp	r0, r9
 8005c6e:	d9f5      	bls.n	8005c5c <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8005c70:	2003      	movs	r0, #3
 8005c72:	e7c4      	b.n	8005bfe <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	0392      	lsls	r2, r2, #14
 8005c78:	d500      	bpl.n	8005c7c <HAL_RCC_ClockConfig+0x150>
 8005c7a:	e78b      	b.n	8005b94 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	e7be      	b.n	8005bfe <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c84:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c86:	0792      	lsls	r2, r2, #30
 8005c88:	d500      	bpl.n	8005c8c <HAL_RCC_ClockConfig+0x160>
 8005c8a:	e783      	b.n	8005b94 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	e7b6      	b.n	8005bfe <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c90:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005c92:	0792      	lsls	r2, r2, #30
 8005c94:	d500      	bpl.n	8005c98 <HAL_RCC_ClockConfig+0x16c>
 8005c96:	e77d      	b.n	8005b94 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8005c98:	2001      	movs	r0, #1
 8005c9a:	e7b0      	b.n	8005bfe <HAL_RCC_ClockConfig+0xd2>
 8005c9c:	40022000 	.word	0x40022000
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	fffff0ff 	.word	0xfffff0ff
 8005ca8:	00001388 	.word	0x00001388
 8005cac:	0800b894 	.word	0x0800b894
 8005cb0:	20000000 	.word	0x20000000
 8005cb4:	20000008 	.word	0x20000008
 8005cb8:	ffff8fff 	.word	0xffff8fff

08005cbc <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005cbe:	4a07      	ldr	r2, [pc, #28]	; (8005cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	045b      	lsls	r3, r3, #17
 8005cc4:	0f5b      	lsrs	r3, r3, #29
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	589b      	ldr	r3, [r3, r2]
 8005cca:	221f      	movs	r2, #31
 8005ccc:	4013      	ands	r3, r2
 8005cce:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cd0:	6810      	ldr	r0, [r2, #0]
 8005cd2:	40d8      	lsrs	r0, r3
}
 8005cd4:	4770      	bx	lr
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	0800b8d4 	.word	0x0800b8d4
 8005ce0:	20000000 	.word	0x20000000

08005ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce6:	46ce      	mov	lr, r9
 8005ce8:	4647      	mov	r7, r8
 8005cea:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cec:	6803      	ldr	r3, [r0, #0]
{
 8005cee:	0004      	movs	r4, r0
 8005cf0:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cf2:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cf4:	039a      	lsls	r2, r3, #14
 8005cf6:	d551      	bpl.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cf8:	2280      	movs	r2, #128	; 0x80
 8005cfa:	4b69      	ldr	r3, [pc, #420]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005cfc:	0552      	lsls	r2, r2, #21
 8005cfe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8005d00:	4680      	mov	r8, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d02:	4211      	tst	r1, r2
 8005d04:	d100      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005d06:	e0a2      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d08:	2780      	movs	r7, #128	; 0x80
 8005d0a:	4d66      	ldr	r5, [pc, #408]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d0c:	007f      	lsls	r7, r7, #1
 8005d0e:	682b      	ldr	r3, [r5, #0]
 8005d10:	433b      	orrs	r3, r7
 8005d12:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d14:	f7fe fac0 	bl	8004298 <HAL_GetTick>
 8005d18:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d1a:	e005      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1c:	f7fe fabc 	bl	8004298 <HAL_GetTick>
 8005d20:	1b80      	subs	r0, r0, r6
 8005d22:	2802      	cmp	r0, #2
 8005d24:	d900      	bls.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d26:	e09c      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	423b      	tst	r3, r7
 8005d2c:	d0f6      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x38>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d2e:	4d5c      	ldr	r5, [pc, #368]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d30:	23c0      	movs	r3, #192	; 0xc0
 8005d32:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	0011      	movs	r1, r2
 8005d38:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d3a:	421a      	tst	r2, r3
 8005d3c:	d022      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005d3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d40:	4288      	cmp	r0, r1
 8005d42:	d020      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d44:	2280      	movs	r2, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d46:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d48:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 8005d4a:	0252      	lsls	r2, r2, #9
 8005d4c:	4332      	orrs	r2, r6
 8005d4e:	65ea      	str	r2, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d50:	6dea      	ldr	r2, [r5, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d52:	4b55      	ldr	r3, [pc, #340]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d54:	4e55      	ldr	r6, [pc, #340]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d56:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d58:	4032      	ands	r2, r6
 8005d5a:	65ea      	str	r2, [r5, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d5c:	65eb      	str	r3, [r5, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d5e:	07cb      	lsls	r3, r1, #31
 8005d60:	d400      	bmi.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8005d62:	e09b      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fe fa98 	bl	8004298 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d68:	4b51      	ldr	r3, [pc, #324]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
        tickstart = HAL_GetTick();
 8005d6a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d6c:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6e:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d70:	e005      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d72:	f7fe fa91 	bl	8004298 <HAL_GetTick>
 8005d76:	1b80      	subs	r0, r0, r6
 8005d78:	4548      	cmp	r0, r9
 8005d7a:	d900      	bls.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8005d7c:	e071      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d7e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8005d80:	421f      	tst	r7, r3
 8005d82:	d0f6      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d86:	4a46      	ldr	r2, [pc, #280]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d88:	4847      	ldr	r0, [pc, #284]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d8a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8005d8c:	4003      	ands	r3, r0
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d92:	4643      	mov	r3, r8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d94:	2000      	movs	r0, #0
    if (pwrclkchanged == SET)
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d067      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x186>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	07da      	lsls	r2, r3, #31
 8005d9e:	d506      	bpl.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005da0:	2503      	movs	r5, #3
 8005da2:	493f      	ldr	r1, [pc, #252]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005da4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005da6:	43aa      	bics	r2, r5
 8005da8:	6865      	ldr	r5, [r4, #4]
 8005daa:	432a      	orrs	r2, r5
 8005dac:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dae:	06da      	lsls	r2, r3, #27
 8005db0:	d506      	bpl.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db2:	493b      	ldr	r1, [pc, #236]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db4:	4d3f      	ldr	r5, [pc, #252]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005db6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005db8:	402a      	ands	r2, r5
 8005dba:	68a5      	ldr	r5, [r4, #8]
 8005dbc:	432a      	orrs	r2, r5
 8005dbe:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dc0:	059a      	lsls	r2, r3, #22
 8005dc2:	d506      	bpl.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dc4:	4936      	ldr	r1, [pc, #216]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dc6:	4d3c      	ldr	r5, [pc, #240]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dc8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005dca:	402a      	ands	r2, r5
 8005dcc:	6965      	ldr	r5, [r4, #20]
 8005dce:	432a      	orrs	r2, r5
 8005dd0:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dd2:	055a      	lsls	r2, r3, #21
 8005dd4:	d506      	bpl.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dd6:	4932      	ldr	r1, [pc, #200]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dd8:	4d38      	ldr	r5, [pc, #224]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dda:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005ddc:	402a      	ands	r2, r5
 8005dde:	69a5      	ldr	r5, [r4, #24]
 8005de0:	432a      	orrs	r2, r5
 8005de2:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005de4:	069a      	lsls	r2, r3, #26
 8005de6:	d506      	bpl.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005de8:	492d      	ldr	r1, [pc, #180]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dea:	4d35      	ldr	r5, [pc, #212]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005dec:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005dee:	402a      	ands	r2, r5
 8005df0:	68e5      	ldr	r5, [r4, #12]
 8005df2:	432a      	orrs	r2, r5
 8005df4:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005df6:	045a      	lsls	r2, r3, #17
 8005df8:	d50a      	bpl.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dfa:	4929      	ldr	r1, [pc, #164]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dfc:	69e5      	ldr	r5, [r4, #28]
 8005dfe:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005e00:	0092      	lsls	r2, r2, #2
 8005e02:	0892      	lsrs	r2, r2, #2
 8005e04:	432a      	orrs	r2, r5
 8005e06:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005e08:	2280      	movs	r2, #128	; 0x80
 8005e0a:	05d2      	lsls	r2, r2, #23
 8005e0c:	4295      	cmp	r5, r2
 8005e0e:	d033      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x194>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e10:	029a      	lsls	r2, r3, #10
 8005e12:	d50a      	bpl.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e14:	4922      	ldr	r1, [pc, #136]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e16:	4e2b      	ldr	r6, [pc, #172]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e18:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005e1a:	6a25      	ldr	r5, [r4, #32]
 8005e1c:	4032      	ands	r2, r6
 8005e1e:	432a      	orrs	r2, r5
 8005e20:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005e22:	2280      	movs	r2, #128	; 0x80
 8005e24:	03d2      	lsls	r2, r2, #15
 8005e26:	4295      	cmp	r5, r2
 8005e28:	d02c      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005e2a:	051b      	lsls	r3, r3, #20
 8005e2c:	d50a      	bpl.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e30:	6921      	ldr	r1, [r4, #16]
 8005e32:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005e34:	4c24      	ldr	r4, [pc, #144]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005e36:	4023      	ands	r3, r4
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	01db      	lsls	r3, r3, #7
 8005e40:	4299      	cmp	r1, r3
 8005e42:	d025      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8005e44:	b003      	add	sp, #12
 8005e46:	bcc0      	pop	{r6, r7}
 8005e48:	46b9      	mov	r9, r7
 8005e4a:	46b0      	mov	r8, r6
 8005e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005e50:	4311      	orrs	r1, r2
 8005e52:	63d9      	str	r1, [r3, #60]	; 0x3c
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	401a      	ands	r2, r3
 8005e58:	9201      	str	r2, [sp, #4]
 8005e5a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	4698      	mov	r8, r3
 8005e60:	e752      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if (pwrclkchanged == SET)
 8005e62:	4643      	mov	r3, r8
        ret = HAL_TIMEOUT;
 8005e64:	2003      	movs	r0, #3
    if (pwrclkchanged == SET)
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d197      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e6a:	4a0d      	ldr	r2, [pc, #52]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e6c:	4917      	ldr	r1, [pc, #92]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005e6e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005e70:	400b      	ands	r3, r1
 8005e72:	63d3      	str	r3, [r2, #60]	; 0x3c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	e791      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e78:	2280      	movs	r2, #128	; 0x80
 8005e7a:	68cd      	ldr	r5, [r1, #12]
 8005e7c:	0252      	lsls	r2, r2, #9
 8005e7e:	432a      	orrs	r2, r5
 8005e80:	60ca      	str	r2, [r1, #12]
 8005e82:	e7c5      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005e84:	2280      	movs	r2, #128	; 0x80
 8005e86:	68cd      	ldr	r5, [r1, #12]
 8005e88:	0452      	lsls	r2, r2, #17
 8005e8a:	432a      	orrs	r2, r5
 8005e8c:	60ca      	str	r2, [r1, #12]
 8005e8e:	e7cc      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e90:	2380      	movs	r3, #128	; 0x80
 8005e92:	68d1      	ldr	r1, [r2, #12]
 8005e94:	025b      	lsls	r3, r3, #9
 8005e96:	430b      	orrs	r3, r1
 8005e98:	60d3      	str	r3, [r2, #12]
  return status;
 8005e9a:	e7d3      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005e9c:	0001      	movs	r1, r0
 8005e9e:	e772      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	40007000 	.word	0x40007000
 8005ea8:	fffffcff 	.word	0xfffffcff
 8005eac:	fffeffff 	.word	0xfffeffff
 8005eb0:	00001388 	.word	0x00001388
 8005eb4:	fffff3ff 	.word	0xfffff3ff
 8005eb8:	fff3ffff 	.word	0xfff3ffff
 8005ebc:	ffcfffff 	.word	0xffcfffff
 8005ec0:	ffffcfff 	.word	0xffffcfff
 8005ec4:	ffbfffff 	.word	0xffbfffff
 8005ec8:	ffff3fff 	.word	0xffff3fff
 8005ecc:	efffffff 	.word	0xefffffff

08005ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed4:	d06a      	beq.n	8005fac <HAL_TIM_Base_Init+0xdc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed6:	233d      	movs	r3, #61	; 0x3d
 8005ed8:	5cc3      	ldrb	r3, [r0, r3]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d045      	beq.n	8005f6c <HAL_TIM_Base_Init+0x9c>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	233d      	movs	r3, #61	; 0x3d
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ee8:	4931      	ldr	r1, [pc, #196]	; (8005fb0 <HAL_TIM_Base_Init+0xe0>)
  tmpcr1 = TIMx->CR1;
 8005eea:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eec:	428a      	cmp	r2, r1
 8005eee:	d049      	beq.n	8005f84 <HAL_TIM_Base_Init+0xb4>
 8005ef0:	2180      	movs	r1, #128	; 0x80
 8005ef2:	05c9      	lsls	r1, r1, #23
 8005ef4:	428a      	cmp	r2, r1
 8005ef6:	d030      	beq.n	8005f5a <HAL_TIM_Base_Init+0x8a>
 8005ef8:	492e      	ldr	r1, [pc, #184]	; (8005fb4 <HAL_TIM_Base_Init+0xe4>)
 8005efa:	428a      	cmp	r2, r1
 8005efc:	d02d      	beq.n	8005f5a <HAL_TIM_Base_Init+0x8a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005efe:	492e      	ldr	r1, [pc, #184]	; (8005fb8 <HAL_TIM_Base_Init+0xe8>)
 8005f00:	428a      	cmp	r2, r1
 8005f02:	d02e      	beq.n	8005f62 <HAL_TIM_Base_Init+0x92>
 8005f04:	492d      	ldr	r1, [pc, #180]	; (8005fbc <HAL_TIM_Base_Init+0xec>)
 8005f06:	428a      	cmp	r2, r1
 8005f08:	d040      	beq.n	8005f8c <HAL_TIM_Base_Init+0xbc>
 8005f0a:	492d      	ldr	r1, [pc, #180]	; (8005fc0 <HAL_TIM_Base_Init+0xf0>)
 8005f0c:	428a      	cmp	r2, r1
 8005f0e:	d03d      	beq.n	8005f8c <HAL_TIM_Base_Init+0xbc>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f10:	2180      	movs	r1, #128	; 0x80
 8005f12:	438b      	bics	r3, r1
 8005f14:	69a1      	ldr	r1, [r4, #24]
 8005f16:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8005f18:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f1a:	68e3      	ldr	r3, [r4, #12]
 8005f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f22:	2301      	movs	r3, #1
 8005f24:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f26:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 8005f28:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f2a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2c:	3a0a      	subs	r2, #10
 8005f2e:	54a3      	strb	r3, [r4, r2]
 8005f30:	3201      	adds	r2, #1
 8005f32:	54a3      	strb	r3, [r4, r2]
 8005f34:	3201      	adds	r2, #1
 8005f36:	54a3      	strb	r3, [r4, r2]
 8005f38:	3201      	adds	r2, #1
 8005f3a:	54a3      	strb	r3, [r4, r2]
 8005f3c:	3201      	adds	r2, #1
 8005f3e:	54a3      	strb	r3, [r4, r2]
 8005f40:	3201      	adds	r2, #1
 8005f42:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	3201      	adds	r2, #1
 8005f46:	54a3      	strb	r3, [r4, r2]
 8005f48:	3201      	adds	r2, #1
 8005f4a:	54a3      	strb	r3, [r4, r2]
 8005f4c:	3201      	adds	r2, #1
 8005f4e:	54a3      	strb	r3, [r4, r2]
 8005f50:	3201      	adds	r2, #1
 8005f52:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	3a0a      	subs	r2, #10
 8005f56:	54a3      	strb	r3, [r4, r2]
}
 8005f58:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f5a:	2170      	movs	r1, #112	; 0x70
 8005f5c:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8005f5e:	68a1      	ldr	r1, [r4, #8]
 8005f60:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f62:	4918      	ldr	r1, [pc, #96]	; (8005fc4 <HAL_TIM_Base_Init+0xf4>)
 8005f64:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f66:	6921      	ldr	r1, [r4, #16]
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	e7d1      	b.n	8005f10 <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8005f6c:	333c      	adds	r3, #60	; 0x3c
 8005f6e:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8005f70:	f7fd ffc0 	bl	8003ef4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	233d      	movs	r3, #61	; 0x3d
 8005f76:	2202      	movs	r2, #2
 8005f78:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f7a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f7c:	490c      	ldr	r1, [pc, #48]	; (8005fb0 <HAL_TIM_Base_Init+0xe0>)
  tmpcr1 = TIMx->CR1;
 8005f7e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f80:	428a      	cmp	r2, r1
 8005f82:	d1b5      	bne.n	8005ef0 <HAL_TIM_Base_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f84:	2170      	movs	r1, #112	; 0x70
 8005f86:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8005f88:	68a1      	ldr	r1, [r4, #8]
 8005f8a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8c:	490d      	ldr	r1, [pc, #52]	; (8005fc4 <HAL_TIM_Base_Init+0xf4>)
 8005f8e:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f90:	6921      	ldr	r1, [r4, #16]
 8005f92:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	438b      	bics	r3, r1
 8005f98:	69a1      	ldr	r1, [r4, #24]
 8005f9a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005f9c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f9e:	68e3      	ldr	r3, [r4, #12]
 8005fa0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005fa6:	6963      	ldr	r3, [r4, #20]
 8005fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8005faa:	e7ba      	b.n	8005f22 <HAL_TIM_Base_Init+0x52>
    return HAL_ERROR;
 8005fac:	2001      	movs	r0, #1
 8005fae:	e7d3      	b.n	8005f58 <HAL_TIM_Base_Init+0x88>
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40002000 	.word	0x40002000
 8005fbc:	40014400 	.word	0x40014400
 8005fc0:	40014800 	.word	0x40014800
 8005fc4:	fffffcff 	.word	0xfffffcff

08005fc8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005fc8:	223d      	movs	r2, #61	; 0x3d
 8005fca:	5c81      	ldrb	r1, [r0, r2]
{
 8005fcc:	0003      	movs	r3, r0
    return HAL_ERROR;
 8005fce:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd0:	2901      	cmp	r1, #1
 8005fd2:	d113      	bne.n	8005ffc <HAL_TIM_Base_Start_IT+0x34>
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	3101      	adds	r1, #1
 8005fd6:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	4302      	orrs	r2, r0
 8005fde:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe0:	4a0f      	ldr	r2, [pc, #60]	; (8006020 <HAL_TIM_Base_Start_IT+0x58>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00b      	beq.n	8005ffe <HAL_TIM_Base_Start_IT+0x36>
 8005fe6:	2280      	movs	r2, #128	; 0x80
 8005fe8:	05d2      	lsls	r2, r2, #23
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d007      	beq.n	8005ffe <HAL_TIM_Base_Start_IT+0x36>
 8005fee:	4a0d      	ldr	r2, [pc, #52]	; (8006024 <HAL_TIM_Base_Start_IT+0x5c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <HAL_TIM_Base_Start_IT+0x36>
    __HAL_TIM_ENABLE(htim);
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4310      	orrs	r0, r2
 8005ff8:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8005ffa:	2000      	movs	r0, #0
}
 8005ffc:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	4909      	ldr	r1, [pc, #36]	; (8006028 <HAL_TIM_Base_Start_IT+0x60>)
 8006002:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006004:	2a06      	cmp	r2, #6
 8006006:	d008      	beq.n	800601a <HAL_TIM_Base_Start_IT+0x52>
 8006008:	3907      	subs	r1, #7
 800600a:	428a      	cmp	r2, r1
 800600c:	d005      	beq.n	800601a <HAL_TIM_Base_Start_IT+0x52>
      __HAL_TIM_ENABLE(htim);
 800600e:	2101      	movs	r1, #1
 8006010:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8006012:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8006014:	430a      	orrs	r2, r1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e7f0      	b.n	8005ffc <HAL_TIM_Base_Start_IT+0x34>
  return HAL_OK;
 800601a:	2000      	movs	r0, #0
 800601c:	e7ee      	b.n	8005ffc <HAL_TIM_Base_Start_IT+0x34>
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40000400 	.word	0x40000400
 8006028:	00010007 	.word	0x00010007

0800602c <HAL_TIM_OC_DelayElapsedCallback>:
 800602c:	4770      	bx	lr
 800602e:	46c0      	nop			; (mov r8, r8)

08006030 <HAL_TIM_IC_CaptureCallback>:
 8006030:	4770      	bx	lr
 8006032:	46c0      	nop			; (mov r8, r8)

08006034 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006034:	4770      	bx	lr
 8006036:	46c0      	nop			; (mov r8, r8)

08006038 <HAL_TIM_TriggerCallback>:
 8006038:	4770      	bx	lr
 800603a:	46c0      	nop			; (mov r8, r8)

0800603c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800603c:	2202      	movs	r2, #2
 800603e:	6803      	ldr	r3, [r0, #0]
{
 8006040:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006042:	6919      	ldr	r1, [r3, #16]
{
 8006044:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006046:	420a      	tst	r2, r1
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x16>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800604a:	68d9      	ldr	r1, [r3, #12]
 800604c:	420a      	tst	r2, r1
 800604e:	d000      	beq.n	8006052 <HAL_TIM_IRQHandler+0x16>
 8006050:	e06e      	b.n	8006130 <HAL_TIM_IRQHandler+0xf4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006052:	2204      	movs	r2, #4
 8006054:	6919      	ldr	r1, [r3, #16]
 8006056:	420a      	tst	r2, r1
 8006058:	d002      	beq.n	8006060 <HAL_TIM_IRQHandler+0x24>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800605a:	68d9      	ldr	r1, [r3, #12]
 800605c:	420a      	tst	r2, r1
 800605e:	d154      	bne.n	800610a <HAL_TIM_IRQHandler+0xce>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006060:	2208      	movs	r2, #8
 8006062:	6919      	ldr	r1, [r3, #16]
 8006064:	420a      	tst	r2, r1
 8006066:	d002      	beq.n	800606e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006068:	68d9      	ldr	r1, [r3, #12]
 800606a:	420a      	tst	r2, r1
 800606c:	d13c      	bne.n	80060e8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800606e:	2210      	movs	r2, #16
 8006070:	6919      	ldr	r1, [r3, #16]
 8006072:	420a      	tst	r2, r1
 8006074:	d002      	beq.n	800607c <HAL_TIM_IRQHandler+0x40>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006076:	68d9      	ldr	r1, [r3, #12]
 8006078:	420a      	tst	r2, r1
 800607a:	d122      	bne.n	80060c2 <HAL_TIM_IRQHandler+0x86>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800607c:	2201      	movs	r2, #1
 800607e:	6919      	ldr	r1, [r3, #16]
 8006080:	420a      	tst	r2, r1
 8006082:	d002      	beq.n	800608a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006084:	68d9      	ldr	r1, [r3, #12]
 8006086:	420a      	tst	r2, r1
 8006088:	d168      	bne.n	800615c <HAL_TIM_IRQHandler+0x120>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800608a:	2280      	movs	r2, #128	; 0x80
 800608c:	6919      	ldr	r1, [r3, #16]
 800608e:	420a      	tst	r2, r1
 8006090:	d002      	beq.n	8006098 <HAL_TIM_IRQHandler+0x5c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006092:	68d9      	ldr	r1, [r3, #12]
 8006094:	420a      	tst	r2, r1
 8006096:	d168      	bne.n	800616a <HAL_TIM_IRQHandler+0x12e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006098:	691a      	ldr	r2, [r3, #16]
 800609a:	05d2      	lsls	r2, r2, #23
 800609c:	d502      	bpl.n	80060a4 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	0612      	lsls	r2, r2, #24
 80060a2:	d46a      	bmi.n	800617a <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060a4:	2240      	movs	r2, #64	; 0x40
 80060a6:	6919      	ldr	r1, [r3, #16]
 80060a8:	420a      	tst	r2, r1
 80060aa:	d002      	beq.n	80060b2 <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ac:	68d9      	ldr	r1, [r3, #12]
 80060ae:	420a      	tst	r2, r1
 80060b0:	d16a      	bne.n	8006188 <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060b2:	2220      	movs	r2, #32
 80060b4:	6919      	ldr	r1, [r3, #16]
 80060b6:	420a      	tst	r2, r1
 80060b8:	d002      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060ba:	68d9      	ldr	r1, [r3, #12]
 80060bc:	420a      	tst	r2, r1
 80060be:	d147      	bne.n	8006150 <HAL_TIM_IRQHandler+0x114>
}
 80060c0:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060c2:	3a21      	subs	r2, #33	; 0x21
 80060c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c6:	3219      	adds	r2, #25
 80060c8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	23c0      	movs	r3, #192	; 0xc0
 80060ce:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80060d0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060d2:	421a      	tst	r2, r3
 80060d4:	d168      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x16c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d6:	f7ff ffa9 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060da:	0020      	movs	r0, r4
 80060dc:	f7ff ffaa 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e0:	2300      	movs	r3, #0
 80060e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	e7c9      	b.n	800607c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060e8:	3a11      	subs	r2, #17
 80060ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ec:	320d      	adds	r2, #13
 80060ee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060f0:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060f4:	079b      	lsls	r3, r3, #30
 80060f6:	d154      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x166>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f8:	f7ff ff98 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	0020      	movs	r0, r4
 80060fe:	f7ff ff99 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	2300      	movs	r3, #0
 8006104:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	e7b1      	b.n	800606e <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800610a:	3a09      	subs	r2, #9
 800610c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610e:	3207      	adds	r2, #7
 8006110:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	23c0      	movs	r3, #192	; 0xc0
 8006116:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8006118:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800611a:	421a      	tst	r2, r3
 800611c:	d13e      	bne.n	800619c <HAL_TIM_IRQHandler+0x160>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800611e:	f7ff ff85 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006122:	0020      	movs	r0, r4
 8006124:	f7ff ff86 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006128:	2300      	movs	r3, #0
 800612a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	e797      	b.n	8006060 <HAL_TIM_IRQHandler+0x24>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006130:	3a05      	subs	r2, #5
 8006132:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006134:	3204      	adds	r2, #4
 8006136:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	079b      	lsls	r3, r3, #30
 800613c:	d12b      	bne.n	8006196 <HAL_TIM_IRQHandler+0x15a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800613e:	f7ff ff75 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006142:	0020      	movs	r0, r4
 8006144:	f7ff ff76 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006148:	2300      	movs	r3, #0
 800614a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	e780      	b.n	8006052 <HAL_TIM_IRQHandler+0x16>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006150:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8006152:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006154:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006156:	f000 f82d 	bl	80061b4 <HAL_TIMEx_CommutCallback>
}
 800615a:	e7b1      	b.n	80060c0 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800615c:	3a03      	subs	r2, #3
 800615e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006160:	0020      	movs	r0, r4
 8006162:	f7fd fa07 	bl	8003574 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	e78f      	b.n	800608a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800616a:	3a02      	subs	r2, #2
 800616c:	3aff      	subs	r2, #255	; 0xff
 800616e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006170:	0020      	movs	r0, r4
 8006172:	f000 f821 	bl	80061b8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	e78e      	b.n	8006098 <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800617a:	4a0d      	ldr	r2, [pc, #52]	; (80061b0 <HAL_TIM_IRQHandler+0x174>)
      HAL_TIMEx_Break2Callback(htim);
 800617c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800617e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006180:	f000 f81c 	bl	80061bc <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	e78d      	b.n	80060a4 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006188:	3a81      	subs	r2, #129	; 0x81
 800618a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800618c:	0020      	movs	r0, r4
 800618e:	f7ff ff53 	bl	8006038 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	e78d      	b.n	80060b2 <HAL_TIM_IRQHandler+0x76>
          HAL_TIM_IC_CaptureCallback(htim);
 8006196:	f7ff ff4b 	bl	8006030 <HAL_TIM_IC_CaptureCallback>
 800619a:	e7d5      	b.n	8006148 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 800619c:	f7ff ff48 	bl	8006030 <HAL_TIM_IC_CaptureCallback>
 80061a0:	e7c2      	b.n	8006128 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	f7ff ff45 	bl	8006030 <HAL_TIM_IC_CaptureCallback>
 80061a6:	e7ac      	b.n	8006102 <HAL_TIM_IRQHandler+0xc6>
        HAL_TIM_IC_CaptureCallback(htim);
 80061a8:	f7ff ff42 	bl	8006030 <HAL_TIM_IC_CaptureCallback>
 80061ac:	e798      	b.n	80060e0 <HAL_TIM_IRQHandler+0xa4>
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	fffffeff 	.word	0xfffffeff

080061b4 <HAL_TIMEx_CommutCallback>:
 80061b4:	4770      	bx	lr
 80061b6:	46c0      	nop			; (mov r8, r8)

080061b8 <HAL_TIMEx_BreakCallback>:
 80061b8:	4770      	bx	lr
 80061ba:	46c0      	nop			; (mov r8, r8)

080061bc <HAL_TIMEx_Break2Callback>:
 80061bc:	4770      	bx	lr
 80061be:	46c0      	nop			; (mov r8, r8)

080061c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	0004      	movs	r4, r0
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061c4:	208c      	movs	r0, #140	; 0x8c
 80061c6:	5820      	ldr	r0, [r4, r0]
 80061c8:	2820      	cmp	r0, #32
 80061ca:	d000      	beq.n	80061ce <HAL_UART_Receive_DMA+0xe>
 80061cc:	e070      	b.n	80062b0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ce:	2900      	cmp	r1, #0
 80061d0:	d045      	beq.n	800625e <HAL_UART_Receive_DMA+0x9e>
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d043      	beq.n	800625e <HAL_UART_Receive_DMA+0x9e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	68a0      	ldr	r0, [r4, #8]
 80061da:	015b      	lsls	r3, r3, #5
 80061dc:	4298      	cmp	r0, r3
 80061de:	d105      	bne.n	80061ec <HAL_UART_Receive_DMA+0x2c>
 80061e0:	6923      	ldr	r3, [r4, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_UART_Receive_DMA+0x2c>
      return HAL_ERROR;
 80061e6:	2001      	movs	r0, #1
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80061e8:	07cb      	lsls	r3, r1, #31
 80061ea:	d439      	bmi.n	8006260 <HAL_UART_Receive_DMA+0xa0>
        return  HAL_ERROR;
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ec:	2300      	movs	r3, #0

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061ee:	4831      	ldr	r0, [pc, #196]	; (80062b4 <HAL_UART_Receive_DMA+0xf4>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	4283      	cmp	r3, r0
 80061f6:	d00f      	beq.n	8006218 <HAL_UART_Receive_DMA+0x58>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	d50c      	bpl.n	8006218 <HAL_UART_Receive_DMA+0x58>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fe:	f3ef 8510 	mrs	r5, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006202:	2301      	movs	r3, #1
 8006204:	f383 8810 	msr	PRIMASK, r3
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	04db      	lsls	r3, r3, #19
 800620e:	6806      	ldr	r6, [r0, #0]
 8006210:	4333      	orrs	r3, r6
 8006212:	6003      	str	r3, [r0, #0]
 8006214:	f385 8810 	msr	PRIMASK, r5
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr = pData;
  huart->RxXferSize = Size;
 8006218:	235c      	movs	r3, #92	; 0x5c
  huart->pRxBuffPtr = pData;
 800621a:	65a1      	str	r1, [r4, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800621c:	2022      	movs	r0, #34	; 0x22
  huart->RxXferSize = Size;
 800621e:	52e2      	strh	r2, [r4, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006220:	2690      	movs	r6, #144	; 0x90
 8006222:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006224:	258c      	movs	r5, #140	; 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006226:	51a3      	str	r3, [r4, r6]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006228:	5160      	str	r0, [r4, r5]

  if (huart->hdmarx != NULL)
 800622a:	305e      	adds	r0, #94	; 0x5e
 800622c:	5820      	ldr	r0, [r4, r0]
 800622e:	2800      	cmp	r0, #0
 8006230:	d017      	beq.n	8006262 <HAL_UART_Receive_DMA+0xa2>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006232:	4f21      	ldr	r7, [pc, #132]	; (80062b8 <HAL_UART_Receive_DMA+0xf8>)

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006234:	6383      	str	r3, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006236:	62c7      	str	r7, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006238:	4f20      	ldr	r7, [pc, #128]	; (80062bc <HAL_UART_Receive_DMA+0xfc>)

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800623a:	0013      	movs	r3, r2
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800623c:	6307      	str	r7, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800623e:	4f20      	ldr	r7, [pc, #128]	; (80062c0 <HAL_UART_Receive_DMA+0x100>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006240:	000a      	movs	r2, r1
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006242:	6347      	str	r7, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006244:	6827      	ldr	r7, [r4, #0]
 8006246:	3724      	adds	r7, #36	; 0x24
 8006248:	0039      	movs	r1, r7
 800624a:	f7fe fc83 	bl	8004b54 <HAL_DMA_Start_IT>
 800624e:	2800      	cmp	r0, #0
 8006250:	d007      	beq.n	8006262 <HAL_UART_Receive_DMA+0xa2>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006252:	2310      	movs	r3, #16
 8006254:	51a3      	str	r3, [r4, r6]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006256:	3310      	adds	r3, #16

      return HAL_ERROR;
 8006258:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800625a:	5163      	str	r3, [r4, r5]
      return HAL_ERROR;
 800625c:	e000      	b.n	8006260 <HAL_UART_Receive_DMA+0xa0>
      return HAL_ERROR;
 800625e:	2001      	movs	r0, #1
}
 8006260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006262:	6923      	ldr	r3, [r4, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00b      	beq.n	8006280 <HAL_UART_Receive_DMA+0xc0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006268:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626c:	2301      	movs	r3, #1
 800626e:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	33ff      	adds	r3, #255	; 0xff
 8006276:	6810      	ldr	r0, [r2, #0]
 8006278:	4303      	orrs	r3, r0
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006280:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006284:	2301      	movs	r3, #1
 8006286:	f383 8810 	msr	PRIMASK, r3
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628a:	6821      	ldr	r1, [r4, #0]
 800628c:	688a      	ldr	r2, [r1, #8]
 800628e:	431a      	orrs	r2, r3
 8006290:	608a      	str	r2, [r1, #8]
 8006292:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006296:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629a:	f383 8810 	msr	PRIMASK, r3

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629e:	2040      	movs	r0, #64	; 0x40
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	6893      	ldr	r3, [r2, #8]
 80062a4:	4303      	orrs	r3, r0
 80062a6:	6093      	str	r3, [r2, #8]
 80062a8:	f381 8810 	msr	PRIMASK, r1

  return HAL_OK;
 80062ac:	2000      	movs	r0, #0
 80062ae:	e7d7      	b.n	8006260 <HAL_UART_Receive_DMA+0xa0>
    return HAL_BUSY;
 80062b0:	2002      	movs	r0, #2
 80062b2:	e7d5      	b.n	8006260 <HAL_UART_Receive_DMA+0xa0>
 80062b4:	40008000 	.word	0x40008000
 80062b8:	080063c9 	.word	0x080063c9
 80062bc:	080063a9 	.word	0x080063a9
 80062c0:	080062cd 	.word	0x080062cd

080062c4 <HAL_UART_RxHalfCpltCallback>:
 80062c4:	4770      	bx	lr
 80062c6:	46c0      	nop			; (mov r8, r8)

080062c8 <HAL_UART_ErrorCallback>:
 80062c8:	4770      	bx	lr
 80062ca:	46c0      	nop			; (mov r8, r8)

080062cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062ce:	2288      	movs	r2, #136	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062d0:	238c      	movs	r3, #140	; 0x8c
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062d4:	5885      	ldr	r5, [r0, r2]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062d6:	58c4      	ldr	r4, [r0, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80062d8:	6803      	ldr	r3, [r0, #0]
 80062da:	6899      	ldr	r1, [r3, #8]
 80062dc:	0609      	lsls	r1, r1, #24
 80062de:	d501      	bpl.n	80062e4 <UART_DMAError+0x18>
 80062e0:	2d21      	cmp	r5, #33	; 0x21
 80062e2:	d00c      	beq.n	80062fe <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	065b      	lsls	r3, r3, #25
 80062e8:	d501      	bpl.n	80062ee <UART_DMAError+0x22>
 80062ea:	2c22      	cmp	r4, #34	; 0x22
 80062ec:	d025      	beq.n	800633a <UART_DMAError+0x6e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062ee:	2290      	movs	r2, #144	; 0x90
 80062f0:	2110      	movs	r1, #16
 80062f2:	5883      	ldr	r3, [r0, r2]
 80062f4:	430b      	orrs	r3, r1
 80062f6:	5083      	str	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062f8:	f7ff ffe6 	bl	80062c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->TxXferCount = 0U;
 80062fe:	2356      	movs	r3, #86	; 0x56
 8006300:	2100      	movs	r1, #0
 8006302:	52c1      	strh	r1, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006304:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006308:	3101      	adds	r1, #1
 800630a:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800630e:	27c0      	movs	r7, #192	; 0xc0
 8006310:	6805      	ldr	r5, [r0, #0]
 8006312:	682b      	ldr	r3, [r5, #0]
 8006314:	43bb      	bics	r3, r7
 8006316:	602b      	str	r3, [r5, #0]
 8006318:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800631c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006320:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006324:	6801      	ldr	r1, [r0, #0]
 8006326:	4e1c      	ldr	r6, [pc, #112]	; (8006398 <UART_DMAError+0xcc>)
 8006328:	688b      	ldr	r3, [r1, #8]
 800632a:	4033      	ands	r3, r6
 800632c:	608b      	str	r3, [r1, #8]
 800632e:	f385 8810 	msr	PRIMASK, r5
  huart->gState = HAL_UART_STATE_READY;
 8006332:	2320      	movs	r3, #32
 8006334:	5083      	str	r3, [r0, r2]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006336:	6803      	ldr	r3, [r0, #0]
}
 8006338:	e7d4      	b.n	80062e4 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800633a:	235e      	movs	r3, #94	; 0x5e
 800633c:	2200      	movs	r2, #0
 800633e:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006340:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006344:	3201      	adds	r2, #1
 8006346:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800634a:	6801      	ldr	r1, [r0, #0]
 800634c:	4d13      	ldr	r5, [pc, #76]	; (800639c <UART_DMAError+0xd0>)
 800634e:	680b      	ldr	r3, [r1, #0]
 8006350:	402b      	ands	r3, r5
 8006352:	600b      	str	r3, [r1, #0]
 8006354:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006358:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006360:	6802      	ldr	r2, [r0, #0]
 8006362:	4c0f      	ldr	r4, [pc, #60]	; (80063a0 <UART_DMAError+0xd4>)
 8006364:	6893      	ldr	r3, [r2, #8]
 8006366:	4023      	ands	r3, r4
 8006368:	6093      	str	r3, [r2, #8]
 800636a:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d10a      	bne.n	800638a <UART_DMAError+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006374:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006378:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637c:	2410      	movs	r4, #16
 800637e:	6802      	ldr	r2, [r0, #0]
 8006380:	6813      	ldr	r3, [r2, #0]
 8006382:	43a3      	bics	r3, r4
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800638a:	238c      	movs	r3, #140	; 0x8c
 800638c:	2220      	movs	r2, #32
 800638e:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	2300      	movs	r3, #0
 8006392:	66c3      	str	r3, [r0, #108]	; 0x6c
  huart->RxISR = NULL;
 8006394:	6743      	str	r3, [r0, #116]	; 0x74
}
 8006396:	e7aa      	b.n	80062ee <UART_DMAError+0x22>
 8006398:	ff7fffff 	.word	0xff7fffff
 800639c:	fffffedf 	.word	0xfffffedf
 80063a0:	effffffe 	.word	0xeffffffe

080063a4 <HAL_UARTEx_RxEventCallback>:
}
 80063a4:	4770      	bx	lr
 80063a6:	46c0      	nop			; (mov r8, r8)

080063a8 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80063a8:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80063ac:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80063ae:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d002      	beq.n	80063bc <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 80063b6:	f7ff ff85 	bl	80062c4 <HAL_UART_RxHalfCpltCallback>
}
 80063ba:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80063bc:	335b      	adds	r3, #91	; 0x5b
 80063be:	5ac1      	ldrh	r1, [r0, r3]
 80063c0:	0849      	lsrs	r1, r1, #1
 80063c2:	f7ff ffef 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
 80063c6:	e7f8      	b.n	80063ba <UART_DMARxHalfCplt+0x12>

080063c8 <UART_DMAReceiveCplt>:
{
 80063c8:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063ca:	681b      	ldr	r3, [r3, #0]
{
 80063cc:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	2320      	movs	r3, #32
 80063d2:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063d6:	4011      	ands	r1, r2
 80063d8:	4213      	tst	r3, r2
 80063da:	d127      	bne.n	800642c <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 80063dc:	225e      	movs	r2, #94	; 0x5e
 80063de:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e4:	3a5d      	subs	r2, #93	; 0x5d
 80063e6:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ea:	6804      	ldr	r4, [r0, #0]
 80063ec:	4e1c      	ldr	r6, [pc, #112]	; (8006460 <UART_DMAReceiveCplt+0x98>)
 80063ee:	6821      	ldr	r1, [r4, #0]
 80063f0:	4031      	ands	r1, r6
 80063f2:	6021      	str	r1, [r4, #0]
 80063f4:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fc:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006400:	6804      	ldr	r4, [r0, #0]
 8006402:	68a1      	ldr	r1, [r4, #8]
 8006404:	4391      	bics	r1, r2
 8006406:	60a1      	str	r1, [r4, #8]
 8006408:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800640c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006410:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006414:	2540      	movs	r5, #64	; 0x40
 8006416:	6801      	ldr	r1, [r0, #0]
 8006418:	688a      	ldr	r2, [r1, #8]
 800641a:	43aa      	bics	r2, r5
 800641c:	608a      	str	r2, [r1, #8]
 800641e:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 8006422:	228c      	movs	r2, #140	; 0x8c
 8006424:	5083      	str	r3, [r0, r2]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006426:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d00c      	beq.n	8006446 <UART_DMAReceiveCplt+0x7e>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800642c:	2300      	movs	r3, #0
 800642e:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006430:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006432:	2b01      	cmp	r3, #1
 8006434:	d002      	beq.n	800643c <UART_DMAReceiveCplt+0x74>
    HAL_UART_RxCpltCallback(huart);
 8006436:	f7fd f879 	bl	800352c <HAL_UART_RxCpltCallback>
}
 800643a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800643c:	335b      	adds	r3, #91	; 0x5b
 800643e:	5ac1      	ldrh	r1, [r0, r3]
 8006440:	f7ff ffb0 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
 8006444:	e7f9      	b.n	800643a <UART_DMAReceiveCplt+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006446:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644e:	2410      	movs	r4, #16
 8006450:	6802      	ldr	r2, [r0, #0]
 8006452:	6813      	ldr	r3, [r2, #0]
 8006454:	43a3      	bics	r3, r4
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	f381 8810 	msr	PRIMASK, r1
}
 800645c:	e7e6      	b.n	800642c <UART_DMAReceiveCplt+0x64>
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	fffffeff 	.word	0xfffffeff

08006464 <UART_SetConfig>:
{
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006468:	6925      	ldr	r5, [r4, #16]
 800646a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800646c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800646e:	432a      	orrs	r2, r5
 8006470:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006472:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006474:	69c0      	ldr	r0, [r0, #28]
 8006476:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006478:	4d75      	ldr	r5, [pc, #468]	; (8006650 <UART_SetConfig+0x1ec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800647a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800647c:	4029      	ands	r1, r5
 800647e:	430a      	orrs	r2, r1
 8006480:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	4973      	ldr	r1, [pc, #460]	; (8006654 <UART_SetConfig+0x1f0>)
 8006486:	400a      	ands	r2, r1
 8006488:	68e1      	ldr	r1, [r4, #12]
 800648a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800648c:	4972      	ldr	r1, [pc, #456]	; (8006658 <UART_SetConfig+0x1f4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800648e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006490:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006492:	428b      	cmp	r3, r1
 8006494:	d04c      	beq.n	8006530 <UART_SetConfig+0xcc>
    tmpreg |= huart->Init.OneBitSampling;
 8006496:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006498:	6899      	ldr	r1, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800649a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800649c:	4d6f      	ldr	r5, [pc, #444]	; (800665c <UART_SetConfig+0x1f8>)
 800649e:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064a0:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064aa:	43aa      	bics	r2, r5
 80064ac:	430a      	orrs	r2, r1
 80064ae:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064b0:	4a6b      	ldr	r2, [pc, #428]	; (8006660 <UART_SetConfig+0x1fc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d009      	beq.n	80064ca <UART_SetConfig+0x66>
 80064b6:	4a6b      	ldr	r2, [pc, #428]	; (8006664 <UART_SetConfig+0x200>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d01c      	beq.n	80064f6 <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 80064bc:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 80064be:	4b6a      	ldr	r3, [pc, #424]	; (8006668 <UART_SetConfig+0x204>)
 80064c0:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80064c6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80064c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ca:	4b68      	ldr	r3, [pc, #416]	; (800666c <UART_SetConfig+0x208>)
 80064cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ce:	2303      	movs	r3, #3
 80064d0:	4013      	ands	r3, r2
 80064d2:	3b01      	subs	r3, #1
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d80e      	bhi.n	80064f6 <UART_SetConfig+0x92>
 80064d8:	4a65      	ldr	r2, [pc, #404]	; (8006670 <UART_SetConfig+0x20c>)
 80064da:	5cd2      	ldrb	r2, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064dc:	2380      	movs	r3, #128	; 0x80
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	4298      	cmp	r0, r3
 80064e2:	d100      	bne.n	80064e6 <UART_SetConfig+0x82>
 80064e4:	e0a4      	b.n	8006630 <UART_SetConfig+0x1cc>
    switch (clocksource)
 80064e6:	2a04      	cmp	r2, #4
 80064e8:	d100      	bne.n	80064ec <UART_SetConfig+0x88>
 80064ea:	e07c      	b.n	80065e6 <UART_SetConfig+0x182>
 80064ec:	d974      	bls.n	80065d8 <UART_SetConfig+0x174>
 80064ee:	0018      	movs	r0, r3
 80064f0:	2a08      	cmp	r2, #8
 80064f2:	d009      	beq.n	8006508 <UART_SetConfig+0xa4>
 80064f4:	e7e2      	b.n	80064bc <UART_SetConfig+0x58>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064f6:	2380      	movs	r3, #128	; 0x80
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	4298      	cmp	r0, r3
 80064fc:	d078      	beq.n	80065f0 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80064fe:	f7ff fbdd 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006502:	2800      	cmp	r0, #0
 8006504:	d012      	beq.n	800652c <UART_SetConfig+0xc8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006506:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006508:	4b5a      	ldr	r3, [pc, #360]	; (8006674 <UART_SetConfig+0x210>)
 800650a:	0049      	lsls	r1, r1, #1
 800650c:	5ac9      	ldrh	r1, [r1, r3]
 800650e:	f7f9 fe15 	bl	800013c <__udivsi3>
 8006512:	6865      	ldr	r5, [r4, #4]
 8006514:	086b      	lsrs	r3, r5, #1
 8006516:	18c0      	adds	r0, r0, r3
 8006518:	0029      	movs	r1, r5
 800651a:	f7f9 fe0f 	bl	800013c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800651e:	0002      	movs	r2, r0
 8006520:	4b55      	ldr	r3, [pc, #340]	; (8006678 <UART_SetConfig+0x214>)
 8006522:	3a10      	subs	r2, #16
 8006524:	429a      	cmp	r2, r3
 8006526:	d8c9      	bhi.n	80064bc <UART_SetConfig+0x58>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	60d8      	str	r0, [r3, #12]
 800652c:	2000      	movs	r0, #0
 800652e:	e7c6      	b.n	80064be <UART_SetConfig+0x5a>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006530:	6899      	ldr	r1, [r3, #8]
 8006532:	484a      	ldr	r0, [pc, #296]	; (800665c <UART_SetConfig+0x1f8>)
 8006534:	4001      	ands	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006536:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006538:	430a      	orrs	r2, r1
 800653a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800653c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006540:	4382      	bics	r2, r0
 8006542:	430a      	orrs	r2, r1
 8006544:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006546:	22c0      	movs	r2, #192	; 0xc0
 8006548:	2080      	movs	r0, #128	; 0x80
 800654a:	4b48      	ldr	r3, [pc, #288]	; (800666c <UART_SetConfig+0x208>)
 800654c:	0112      	lsls	r2, r2, #4
 800654e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006550:	0100      	lsls	r0, r0, #4
 8006552:	4013      	ands	r3, r2
 8006554:	4283      	cmp	r3, r0
 8006556:	d049      	beq.n	80065ec <UART_SetConfig+0x188>
 8006558:	d809      	bhi.n	800656e <UART_SetConfig+0x10a>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d035      	beq.n	80065ca <UART_SetConfig+0x166>
 800655e:	2280      	movs	r2, #128	; 0x80
 8006560:	00d2      	lsls	r2, r2, #3
 8006562:	4293      	cmp	r3, r2
 8006564:	d1aa      	bne.n	80064bc <UART_SetConfig+0x58>
        pclk = HAL_RCC_GetSysClockFreq();
 8006566:	f7ff fa99 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
 800656a:	0005      	movs	r5, r0
        break;
 800656c:	e030      	b.n	80065d0 <UART_SetConfig+0x16c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800656e:	4293      	cmp	r3, r2
 8006570:	d1a4      	bne.n	80064bc <UART_SetConfig+0x58>
        pclk = (uint32_t) LSE_VALUE;
 8006572:	2580      	movs	r5, #128	; 0x80
 8006574:	022d      	lsls	r5, r5, #8
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006576:	4b3f      	ldr	r3, [pc, #252]	; (8006674 <UART_SetConfig+0x210>)
 8006578:	0049      	lsls	r1, r1, #1
 800657a:	5acf      	ldrh	r7, [r1, r3]
 800657c:	0028      	movs	r0, r5
 800657e:	0039      	movs	r1, r7
 8006580:	f7f9 fddc 	bl	800013c <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006584:	6866      	ldr	r6, [r4, #4]
 8006586:	0073      	lsls	r3, r6, #1
 8006588:	199b      	adds	r3, r3, r6
 800658a:	4283      	cmp	r3, r0
 800658c:	d900      	bls.n	8006590 <UART_SetConfig+0x12c>
 800658e:	e795      	b.n	80064bc <UART_SetConfig+0x58>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006590:	0333      	lsls	r3, r6, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006592:	4283      	cmp	r3, r0
 8006594:	d200      	bcs.n	8006598 <UART_SetConfig+0x134>
 8006596:	e791      	b.n	80064bc <UART_SetConfig+0x58>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006598:	003a      	movs	r2, r7
 800659a:	2300      	movs	r3, #0
 800659c:	0028      	movs	r0, r5
 800659e:	2100      	movs	r1, #0
 80065a0:	f7f9 ffba 	bl	8000518 <__aeabi_uldivmod>
 80065a4:	020b      	lsls	r3, r1, #8
 80065a6:	2100      	movs	r1, #0
 80065a8:	0e05      	lsrs	r5, r0, #24
 80065aa:	0202      	lsls	r2, r0, #8
 80065ac:	432b      	orrs	r3, r5
 80065ae:	0870      	lsrs	r0, r6, #1
 80065b0:	1880      	adds	r0, r0, r2
 80065b2:	4159      	adcs	r1, r3
 80065b4:	0032      	movs	r2, r6
 80065b6:	2300      	movs	r3, #0
 80065b8:	f7f9 ffae 	bl	8000518 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065bc:	4b2f      	ldr	r3, [pc, #188]	; (800667c <UART_SetConfig+0x218>)
 80065be:	18c2      	adds	r2, r0, r3
 80065c0:	4b2f      	ldr	r3, [pc, #188]	; (8006680 <UART_SetConfig+0x21c>)
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d900      	bls.n	80065c8 <UART_SetConfig+0x164>
 80065c6:	e779      	b.n	80064bc <UART_SetConfig+0x58>
 80065c8:	e7ae      	b.n	8006528 <UART_SetConfig+0xc4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ca:	f7ff fb77 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 80065ce:	0005      	movs	r5, r0
    if (pclk != 0U)
 80065d0:	2d00      	cmp	r5, #0
 80065d2:	d0ab      	beq.n	800652c <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065d6:	e7ce      	b.n	8006576 <UART_SetConfig+0x112>
    switch (clocksource)
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d090      	beq.n	80064fe <UART_SetConfig+0x9a>
 80065dc:	2a02      	cmp	r2, #2
 80065de:	d000      	beq.n	80065e2 <UART_SetConfig+0x17e>
 80065e0:	e76c      	b.n	80064bc <UART_SetConfig+0x58>
        pclk = (uint32_t) HSI_VALUE;
 80065e2:	4828      	ldr	r0, [pc, #160]	; (8006684 <UART_SetConfig+0x220>)
 80065e4:	e790      	b.n	8006508 <UART_SetConfig+0xa4>
        pclk = HAL_RCC_GetSysClockFreq();
 80065e6:	f7ff fa59 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
        break;
 80065ea:	e78a      	b.n	8006502 <UART_SetConfig+0x9e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ec:	4d25      	ldr	r5, [pc, #148]	; (8006684 <UART_SetConfig+0x220>)
 80065ee:	e7c2      	b.n	8006576 <UART_SetConfig+0x112>
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f0:	f7ff fb64 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d099      	beq.n	800652c <UART_SetConfig+0xc8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065fa:	4b1e      	ldr	r3, [pc, #120]	; (8006674 <UART_SetConfig+0x210>)
 80065fc:	0049      	lsls	r1, r1, #1
 80065fe:	5ac9      	ldrh	r1, [r1, r3]
 8006600:	f7f9 fd9c 	bl	800013c <__udivsi3>
 8006604:	6865      	ldr	r5, [r4, #4]
 8006606:	0040      	lsls	r0, r0, #1
 8006608:	086b      	lsrs	r3, r5, #1
 800660a:	18c0      	adds	r0, r0, r3
 800660c:	0029      	movs	r1, r5
 800660e:	f7f9 fd95 	bl	800013c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006612:	0002      	movs	r2, r0
 8006614:	4b18      	ldr	r3, [pc, #96]	; (8006678 <UART_SetConfig+0x214>)
 8006616:	3a10      	subs	r2, #16
 8006618:	429a      	cmp	r2, r3
 800661a:	d900      	bls.n	800661e <UART_SetConfig+0x1ba>
 800661c:	e74e      	b.n	80064bc <UART_SetConfig+0x58>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800661e:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <UART_SetConfig+0x224>)
        huart->Instance->BRR = brrtemp;
 8006620:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006622:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006624:	0700      	lsls	r0, r0, #28
 8006626:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8006628:	4318      	orrs	r0, r3
 800662a:	60d0      	str	r0, [r2, #12]
 800662c:	2000      	movs	r0, #0
 800662e:	e746      	b.n	80064be <UART_SetConfig+0x5a>
    switch (clocksource)
 8006630:	2a04      	cmp	r2, #4
 8006632:	d007      	beq.n	8006644 <UART_SetConfig+0x1e0>
 8006634:	d809      	bhi.n	800664a <UART_SetConfig+0x1e6>
 8006636:	2a00      	cmp	r2, #0
 8006638:	d0da      	beq.n	80065f0 <UART_SetConfig+0x18c>
 800663a:	2a02      	cmp	r2, #2
 800663c:	d000      	beq.n	8006640 <UART_SetConfig+0x1dc>
 800663e:	e73d      	b.n	80064bc <UART_SetConfig+0x58>
        pclk = (uint32_t) HSI_VALUE;
 8006640:	4810      	ldr	r0, [pc, #64]	; (8006684 <UART_SetConfig+0x220>)
 8006642:	e7da      	b.n	80065fa <UART_SetConfig+0x196>
        pclk = HAL_RCC_GetSysClockFreq();
 8006644:	f7ff fa2a 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
        break;
 8006648:	e7d4      	b.n	80065f4 <UART_SetConfig+0x190>
    switch (clocksource)
 800664a:	2a08      	cmp	r2, #8
 800664c:	d0d5      	beq.n	80065fa <UART_SetConfig+0x196>
 800664e:	e735      	b.n	80064bc <UART_SetConfig+0x58>
 8006650:	cfff69f3 	.word	0xcfff69f3
 8006654:	ffffcfff 	.word	0xffffcfff
 8006658:	40008000 	.word	0x40008000
 800665c:	11fff4ff 	.word	0x11fff4ff
 8006660:	40013800 	.word	0x40013800
 8006664:	40004400 	.word	0x40004400
 8006668:	00010001 	.word	0x00010001
 800666c:	40021000 	.word	0x40021000
 8006670:	0800b8f4 	.word	0x0800b8f4
 8006674:	0800b8f8 	.word	0x0800b8f8
 8006678:	0000ffef 	.word	0x0000ffef
 800667c:	fffffd00 	.word	0xfffffd00
 8006680:	000ffcff 	.word	0x000ffcff
 8006684:	00f42400 	.word	0x00f42400
 8006688:	0000fff0 	.word	0x0000fff0

0800668c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800668c:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800668e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006690:	07da      	lsls	r2, r3, #31
 8006692:	d506      	bpl.n	80066a2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006694:	6801      	ldr	r1, [r0, #0]
 8006696:	4c28      	ldr	r4, [pc, #160]	; (8006738 <UART_AdvFeatureConfig+0xac>)
 8006698:	684a      	ldr	r2, [r1, #4]
 800669a:	4022      	ands	r2, r4
 800669c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800669e:	4322      	orrs	r2, r4
 80066a0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066a2:	079a      	lsls	r2, r3, #30
 80066a4:	d506      	bpl.n	80066b4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066a6:	6801      	ldr	r1, [r0, #0]
 80066a8:	4c24      	ldr	r4, [pc, #144]	; (800673c <UART_AdvFeatureConfig+0xb0>)
 80066aa:	684a      	ldr	r2, [r1, #4]
 80066ac:	4022      	ands	r2, r4
 80066ae:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80066b0:	4322      	orrs	r2, r4
 80066b2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b4:	075a      	lsls	r2, r3, #29
 80066b6:	d506      	bpl.n	80066c6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066b8:	6801      	ldr	r1, [r0, #0]
 80066ba:	4c21      	ldr	r4, [pc, #132]	; (8006740 <UART_AdvFeatureConfig+0xb4>)
 80066bc:	684a      	ldr	r2, [r1, #4]
 80066be:	4022      	ands	r2, r4
 80066c0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80066c2:	4322      	orrs	r2, r4
 80066c4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066c6:	071a      	lsls	r2, r3, #28
 80066c8:	d506      	bpl.n	80066d8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066ca:	6801      	ldr	r1, [r0, #0]
 80066cc:	4c1d      	ldr	r4, [pc, #116]	; (8006744 <UART_AdvFeatureConfig+0xb8>)
 80066ce:	684a      	ldr	r2, [r1, #4]
 80066d0:	4022      	ands	r2, r4
 80066d2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80066d4:	4322      	orrs	r2, r4
 80066d6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066d8:	06da      	lsls	r2, r3, #27
 80066da:	d506      	bpl.n	80066ea <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066dc:	6801      	ldr	r1, [r0, #0]
 80066de:	4c1a      	ldr	r4, [pc, #104]	; (8006748 <UART_AdvFeatureConfig+0xbc>)
 80066e0:	688a      	ldr	r2, [r1, #8]
 80066e2:	4022      	ands	r2, r4
 80066e4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80066e6:	4322      	orrs	r2, r4
 80066e8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ea:	069a      	lsls	r2, r3, #26
 80066ec:	d506      	bpl.n	80066fc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ee:	6801      	ldr	r1, [r0, #0]
 80066f0:	4c16      	ldr	r4, [pc, #88]	; (800674c <UART_AdvFeatureConfig+0xc0>)
 80066f2:	688a      	ldr	r2, [r1, #8]
 80066f4:	4022      	ands	r2, r4
 80066f6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80066f8:	4322      	orrs	r2, r4
 80066fa:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066fc:	065a      	lsls	r2, r3, #25
 80066fe:	d50a      	bpl.n	8006716 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006700:	6801      	ldr	r1, [r0, #0]
 8006702:	4d13      	ldr	r5, [pc, #76]	; (8006750 <UART_AdvFeatureConfig+0xc4>)
 8006704:	684a      	ldr	r2, [r1, #4]
 8006706:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006708:	402a      	ands	r2, r5
 800670a:	4322      	orrs	r2, r4
 800670c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800670e:	2280      	movs	r2, #128	; 0x80
 8006710:	0352      	lsls	r2, r2, #13
 8006712:	4294      	cmp	r4, r2
 8006714:	d009      	beq.n	800672a <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006716:	061b      	lsls	r3, r3, #24
 8006718:	d506      	bpl.n	8006728 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800671a:	6802      	ldr	r2, [r0, #0]
 800671c:	490d      	ldr	r1, [pc, #52]	; (8006754 <UART_AdvFeatureConfig+0xc8>)
 800671e:	6853      	ldr	r3, [r2, #4]
 8006720:	400b      	ands	r3, r1
 8006722:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006724:	430b      	orrs	r3, r1
 8006726:	6053      	str	r3, [r2, #4]
}
 8006728:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800672a:	684a      	ldr	r2, [r1, #4]
 800672c:	4c0a      	ldr	r4, [pc, #40]	; (8006758 <UART_AdvFeatureConfig+0xcc>)
 800672e:	4022      	ands	r2, r4
 8006730:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006732:	4322      	orrs	r2, r4
 8006734:	604a      	str	r2, [r1, #4]
 8006736:	e7ee      	b.n	8006716 <UART_AdvFeatureConfig+0x8a>
 8006738:	fffdffff 	.word	0xfffdffff
 800673c:	fffeffff 	.word	0xfffeffff
 8006740:	fffbffff 	.word	0xfffbffff
 8006744:	ffff7fff 	.word	0xffff7fff
 8006748:	ffffefff 	.word	0xffffefff
 800674c:	ffffdfff 	.word	0xffffdfff
 8006750:	ffefffff 	.word	0xffefffff
 8006754:	fff7ffff 	.word	0xfff7ffff
 8006758:	ff9fffff 	.word	0xff9fffff

0800675c <UART_WaitOnFlagUntilTimeout>:
{
 800675c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675e:	4646      	mov	r6, r8
 8006760:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006762:	2304      	movs	r3, #4
{
 8006764:	464f      	mov	r7, r9
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006766:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006768:	2380      	movs	r3, #128	; 0x80
{
 800676a:	46d6      	mov	lr, sl
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800676c:	011b      	lsls	r3, r3, #4
{
 800676e:	b5c0      	push	{r6, r7, lr}
 8006770:	0015      	movs	r5, r2
 8006772:	0007      	movs	r7, r0
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006774:	469a      	mov	sl, r3
{
 8006776:	000c      	movs	r4, r1
 8006778:	9e08      	ldr	r6, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677a:	6801      	ldr	r1, [r0, #0]
 800677c:	1c73      	adds	r3, r6, #1
 800677e:	d10c      	bne.n	800679a <UART_WaitOnFlagUntilTimeout+0x3e>
 8006780:	69cb      	ldr	r3, [r1, #28]
 8006782:	4023      	ands	r3, r4
 8006784:	1b1b      	subs	r3, r3, r4
 8006786:	425a      	negs	r2, r3
 8006788:	4153      	adcs	r3, r2
 800678a:	42ab      	cmp	r3, r5
 800678c:	d0f8      	beq.n	8006780 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800678e:	2000      	movs	r0, #0
}
 8006790:	bce0      	pop	{r5, r6, r7}
 8006792:	46ba      	mov	sl, r7
 8006794:	46b1      	mov	r9, r6
 8006796:	46a8      	mov	r8, r5
 8006798:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679a:	69cb      	ldr	r3, [r1, #28]
 800679c:	4023      	ands	r3, r4
 800679e:	1b1b      	subs	r3, r3, r4
 80067a0:	425a      	negs	r2, r3
 80067a2:	4153      	adcs	r3, r2
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	d1f2      	bne.n	800678e <UART_WaitOnFlagUntilTimeout+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a8:	f7fd fd76 	bl	8004298 <HAL_GetTick>
 80067ac:	4643      	mov	r3, r8
 80067ae:	1ac0      	subs	r0, r0, r3
 80067b0:	42b0      	cmp	r0, r6
 80067b2:	d82d      	bhi.n	8006810 <UART_WaitOnFlagUntilTimeout+0xb4>
 80067b4:	2e00      	cmp	r6, #0
 80067b6:	d02b      	beq.n	8006810 <UART_WaitOnFlagUntilTimeout+0xb4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067b8:	464a      	mov	r2, r9
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	680b      	ldr	r3, [r1, #0]
 80067be:	421a      	tst	r2, r3
 80067c0:	d0dc      	beq.n	800677c <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067c2:	4652      	mov	r2, sl
 80067c4:	69cb      	ldr	r3, [r1, #28]
 80067c6:	4213      	tst	r3, r2
 80067c8:	d0d8      	beq.n	800677c <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ca:	620a      	str	r2, [r1, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067cc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d0:	2201      	movs	r2, #1
 80067d2:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	4c1a      	ldr	r4, [pc, #104]	; (8006844 <UART_WaitOnFlagUntilTimeout+0xe8>)
 80067da:	680b      	ldr	r3, [r1, #0]
 80067dc:	4023      	ands	r3, r4
 80067de:	600b      	str	r3, [r1, #0]
 80067e0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e8:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	688b      	ldr	r3, [r1, #8]
 80067f0:	4393      	bics	r3, r2
 80067f2:	608b      	str	r3, [r1, #8]
 80067f4:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80067f8:	2320      	movs	r3, #32
 80067fa:	3287      	adds	r2, #135	; 0x87
 80067fc:	50bb      	str	r3, [r7, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80067fe:	3204      	adds	r2, #4
 8006800:	50bb      	str	r3, [r7, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006802:	3204      	adds	r2, #4
 8006804:	50bb      	str	r3, [r7, r2]
          __HAL_UNLOCK(huart);
 8006806:	2200      	movs	r2, #0
 8006808:	3364      	adds	r3, #100	; 0x64
          return HAL_TIMEOUT;
 800680a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800680c:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 800680e:	e7bf      	b.n	8006790 <UART_WaitOnFlagUntilTimeout+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006810:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006814:	2201      	movs	r2, #1
 8006816:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	4c09      	ldr	r4, [pc, #36]	; (8006844 <UART_WaitOnFlagUntilTimeout+0xe8>)
 800681e:	680b      	ldr	r3, [r1, #0]
 8006820:	4023      	ands	r3, r4
 8006822:	600b      	str	r3, [r1, #0]
 8006824:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006828:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800682c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	688b      	ldr	r3, [r1, #8]
 8006834:	4393      	bics	r3, r2
 8006836:	608b      	str	r3, [r1, #8]
 8006838:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800683c:	2320      	movs	r3, #32
 800683e:	3287      	adds	r2, #135	; 0x87
 8006840:	e7de      	b.n	8006800 <UART_WaitOnFlagUntilTimeout+0xa4>
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	fffffe5f 	.word	0xfffffe5f

08006848 <HAL_UART_Transmit>:
{
 8006848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800684a:	4657      	mov	r7, sl
 800684c:	464e      	mov	r6, r9
 800684e:	4645      	mov	r5, r8
 8006850:	46de      	mov	lr, fp
 8006852:	b5e0      	push	{r5, r6, r7, lr}
 8006854:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006856:	2388      	movs	r3, #136	; 0x88
 8006858:	58c3      	ldr	r3, [r0, r3]
{
 800685a:	0005      	movs	r5, r0
 800685c:	000f      	movs	r7, r1
 800685e:	0014      	movs	r4, r2
 8006860:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8006862:	2b20      	cmp	r3, #32
 8006864:	d000      	beq.n	8006868 <HAL_UART_Transmit+0x20>
 8006866:	e096      	b.n	8006996 <HAL_UART_Transmit+0x14e>
    if ((pData == NULL) || (Size == 0U))
 8006868:	2900      	cmp	r1, #0
 800686a:	d049      	beq.n	8006900 <HAL_UART_Transmit+0xb8>
 800686c:	2a00      	cmp	r2, #0
 800686e:	d047      	beq.n	8006900 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006870:	2380      	movs	r3, #128	; 0x80
 8006872:	6882      	ldr	r2, [r0, #8]
 8006874:	015b      	lsls	r3, r3, #5
 8006876:	429a      	cmp	r2, r3
 8006878:	d104      	bne.n	8006884 <HAL_UART_Transmit+0x3c>
 800687a:	6903      	ldr	r3, [r0, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_UART_Transmit+0x3c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006880:	07cb      	lsls	r3, r1, #31
 8006882:	d43d      	bmi.n	8006900 <HAL_UART_Transmit+0xb8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006884:	2390      	movs	r3, #144	; 0x90
 8006886:	2200      	movs	r2, #0
 8006888:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800688a:	3b08      	subs	r3, #8
 800688c:	3221      	adds	r2, #33	; 0x21
 800688e:	50ea      	str	r2, [r5, r3]
    tickstart = HAL_GetTick();
 8006890:	f7fd fd02 	bl	8004298 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8006894:	2354      	movs	r3, #84	; 0x54
      pdata16bits = NULL;
 8006896:	2200      	movs	r2, #0
    huart->TxXferSize  = Size;
 8006898:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 800689a:	3302      	adds	r3, #2
 800689c:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800689e:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 80068a0:	4693      	mov	fp, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a2:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 80068a4:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a6:	015b      	lsls	r3, r3, #5
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d100      	bne.n	80068ae <HAL_UART_Transmit+0x66>
 80068ac:	e095      	b.n	80069da <HAL_UART_Transmit+0x192>
    while (huart->TxXferCount > 0U)
 80068ae:	2356      	movs	r3, #86	; 0x56
 80068b0:	5aeb      	ldrh	r3, [r5, r3]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d016      	beq.n	80068e4 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b6:	2480      	movs	r4, #128	; 0x80
 80068b8:	682a      	ldr	r2, [r5, #0]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068ba:	2380      	movs	r3, #128	; 0x80
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	4698      	mov	r8, r3
 80068c0:	1c73      	adds	r3, r6, #1
 80068c2:	d125      	bne.n	8006910 <HAL_UART_Transmit+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c4:	69d3      	ldr	r3, [r2, #28]
 80068c6:	421c      	tst	r4, r3
 80068c8:	d0fc      	beq.n	80068c4 <HAL_UART_Transmit+0x7c>
      if (pdata8bits == NULL)
 80068ca:	2f00      	cmp	r7, #0
 80068cc:	d05a      	beq.n	8006984 <HAL_UART_Transmit+0x13c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068ce:	783b      	ldrb	r3, [r7, #0]
        pdata8bits++;
 80068d0:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068d2:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80068d4:	2156      	movs	r1, #86	; 0x56
 80068d6:	5a6b      	ldrh	r3, [r5, r1]
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29b      	uxth	r3, r3
 80068dc:	526b      	strh	r3, [r5, r1]
    while (huart->TxXferCount > 0U)
 80068de:	5a6b      	ldrh	r3, [r5, r1]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1ea      	bne.n	80068ba <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068e4:	464b      	mov	r3, r9
 80068e6:	2200      	movs	r2, #0
 80068e8:	2140      	movs	r1, #64	; 0x40
 80068ea:	0028      	movs	r0, r5
 80068ec:	9600      	str	r6, [sp, #0]
 80068ee:	f7ff ff35 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d000      	beq.n	80068f8 <HAL_UART_Transmit+0xb0>
 80068f6:	e077      	b.n	80069e8 <HAL_UART_Transmit+0x1a0>
    huart->gState = HAL_UART_STATE_READY;
 80068f8:	2388      	movs	r3, #136	; 0x88
 80068fa:	2220      	movs	r2, #32
 80068fc:	50ea      	str	r2, [r5, r3]
    return HAL_OK;
 80068fe:	e000      	b.n	8006902 <HAL_UART_Transmit+0xba>
      return  HAL_ERROR;
 8006900:	2001      	movs	r0, #1
}
 8006902:	b003      	add	sp, #12
 8006904:	bcf0      	pop	{r4, r5, r6, r7}
 8006906:	46bb      	mov	fp, r7
 8006908:	46b2      	mov	sl, r6
 800690a:	46a9      	mov	r9, r5
 800690c:	46a0      	mov	r8, r4
 800690e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006910:	0021      	movs	r1, r4
 8006912:	69d3      	ldr	r3, [r2, #28]
 8006914:	4019      	ands	r1, r3
 8006916:	468a      	mov	sl, r1
 8006918:	421c      	tst	r4, r3
 800691a:	d1d6      	bne.n	80068ca <HAL_UART_Transmit+0x82>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691c:	f7fd fcbc 	bl	8004298 <HAL_GetTick>
 8006920:	464b      	mov	r3, r9
 8006922:	1ac0      	subs	r0, r0, r3
 8006924:	4286      	cmp	r6, r0
 8006926:	d338      	bcc.n	800699a <HAL_UART_Transmit+0x152>
 8006928:	2e00      	cmp	r6, #0
 800692a:	d036      	beq.n	800699a <HAL_UART_Transmit+0x152>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800692c:	2104      	movs	r1, #4
 800692e:	682a      	ldr	r2, [r5, #0]
 8006930:	6813      	ldr	r3, [r2, #0]
 8006932:	4219      	tst	r1, r3
 8006934:	d0c4      	beq.n	80068c0 <HAL_UART_Transmit+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006936:	4641      	mov	r1, r8
 8006938:	69d3      	ldr	r3, [r2, #28]
 800693a:	420b      	tst	r3, r1
 800693c:	d0c0      	beq.n	80068c0 <HAL_UART_Transmit+0x78>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800693e:	6211      	str	r1, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006940:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006944:	2201      	movs	r2, #1
 8006946:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800694a:	6829      	ldr	r1, [r5, #0]
 800694c:	4c27      	ldr	r4, [pc, #156]	; (80069ec <HAL_UART_Transmit+0x1a4>)
 800694e:	680b      	ldr	r3, [r1, #0]
 8006950:	4023      	ands	r3, r4
 8006952:	600b      	str	r3, [r1, #0]
 8006954:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006958:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800695c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006960:	6829      	ldr	r1, [r5, #0]
 8006962:	688b      	ldr	r3, [r1, #8]
 8006964:	4393      	bics	r3, r2
 8006966:	608b      	str	r3, [r1, #8]
 8006968:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800696c:	2320      	movs	r3, #32
 800696e:	3287      	adds	r2, #135	; 0x87
 8006970:	50ab      	str	r3, [r5, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006972:	3204      	adds	r2, #4
 8006974:	50ab      	str	r3, [r5, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006976:	3204      	adds	r2, #4
 8006978:	50ab      	str	r3, [r5, r2]
          __HAL_UNLOCK(huart);
 800697a:	4652      	mov	r2, sl
 800697c:	3364      	adds	r3, #100	; 0x64
        return HAL_TIMEOUT;
 800697e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8006980:	54ea      	strb	r2, [r5, r3]
          return HAL_TIMEOUT;
 8006982:	e7be      	b.n	8006902 <HAL_UART_Transmit+0xba>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006984:	465b      	mov	r3, fp
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	05db      	lsls	r3, r3, #23
 800698a:	0ddb      	lsrs	r3, r3, #23
 800698c:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800698e:	2302      	movs	r3, #2
 8006990:	469c      	mov	ip, r3
 8006992:	44e3      	add	fp, ip
      huart->TxXferCount--;
 8006994:	e79e      	b.n	80068d4 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 8006996:	2002      	movs	r0, #2
 8006998:	e7b3      	b.n	8006902 <HAL_UART_Transmit+0xba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699e:	2201      	movs	r2, #1
 80069a0:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069a4:	6829      	ldr	r1, [r5, #0]
 80069a6:	4c11      	ldr	r4, [pc, #68]	; (80069ec <HAL_UART_Transmit+0x1a4>)
 80069a8:	680b      	ldr	r3, [r1, #0]
 80069aa:	4023      	ands	r3, r4
 80069ac:	600b      	str	r3, [r1, #0]
 80069ae:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	6829      	ldr	r1, [r5, #0]
 80069bc:	688b      	ldr	r3, [r1, #8]
 80069be:	4393      	bics	r3, r2
 80069c0:	608b      	str	r3, [r1, #8]
 80069c2:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80069c6:	2320      	movs	r3, #32
 80069c8:	3287      	adds	r2, #135	; 0x87
 80069ca:	50ab      	str	r3, [r5, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80069cc:	3204      	adds	r2, #4
 80069ce:	50ab      	str	r3, [r5, r2]
        __HAL_UNLOCK(huart);
 80069d0:	2200      	movs	r2, #0
 80069d2:	3364      	adds	r3, #100	; 0x64
        return HAL_TIMEOUT;
 80069d4:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 80069d6:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 80069d8:	e793      	b.n	8006902 <HAL_UART_Transmit+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069da:	692b      	ldr	r3, [r5, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d000      	beq.n	80069e2 <HAL_UART_Transmit+0x19a>
 80069e0:	e765      	b.n	80068ae <HAL_UART_Transmit+0x66>
 80069e2:	46bb      	mov	fp, r7
      pdata8bits  = NULL;
 80069e4:	2700      	movs	r7, #0
 80069e6:	e762      	b.n	80068ae <HAL_UART_Transmit+0x66>
      return HAL_TIMEOUT;
 80069e8:	2003      	movs	r0, #3
 80069ea:	e78a      	b.n	8006902 <HAL_UART_Transmit+0xba>
 80069ec:	fffffe5f 	.word	0xfffffe5f

080069f0 <HAL_UART_Init>:
{
 80069f0:	b530      	push	{r4, r5, lr}
 80069f2:	0004      	movs	r4, r0
 80069f4:	b083      	sub	sp, #12
  if (huart == NULL)
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d04e      	beq.n	8006a98 <HAL_UART_Init+0xa8>
  if (huart->gState == HAL_UART_STATE_RESET)
 80069fa:	2388      	movs	r3, #136	; 0x88
 80069fc:	58c3      	ldr	r3, [r0, r3]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d04c      	beq.n	8006a9c <HAL_UART_Init+0xac>
  huart->gState = HAL_UART_STATE_BUSY;
 8006a02:	2388      	movs	r3, #136	; 0x88
 8006a04:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006a06:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006a08:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8006a0a:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a0c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8006a0e:	6813      	ldr	r3, [r2, #0]
 8006a10:	438b      	bics	r3, r1
 8006a12:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a14:	f7ff fd26 	bl	8006464 <UART_SetConfig>
 8006a18:	2801      	cmp	r0, #1
 8006a1a:	d03d      	beq.n	8006a98 <HAL_UART_Init+0xa8>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d136      	bne.n	8006a90 <HAL_UART_Init+0xa0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	4926      	ldr	r1, [pc, #152]	; (8006ac0 <HAL_UART_Init+0xd0>)
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a2a:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	438a      	bics	r2, r1
 8006a32:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	3929      	subs	r1, #41	; 0x29
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3c:	2390      	movs	r3, #144	; 0x90
 8006a3e:	2200      	movs	r2, #0
 8006a40:	50e2      	str	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8006a42:	f7fd fc29 	bl	8004298 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a46:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006a48:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	0712      	lsls	r2, r2, #28
 8006a4e:	d40f      	bmi.n	8006a70 <HAL_UART_Init+0x80>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	075b      	lsls	r3, r3, #29
 8006a54:	d427      	bmi.n	8006aa6 <HAL_UART_Init+0xb6>
  huart->gState = HAL_UART_STATE_READY;
 8006a56:	2320      	movs	r3, #32
 8006a58:	2288      	movs	r2, #136	; 0x88
 8006a5a:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	3204      	adds	r2, #4
 8006a5e:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a60:	2300      	movs	r3, #0
  return HAL_OK;
 8006a62:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8006a64:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a68:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8006a6a:	54a3      	strb	r3, [r4, r2]
}
 8006a6c:	b003      	add	sp, #12
 8006a6e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a70:	2180      	movs	r1, #128	; 0x80
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <HAL_UART_Init+0xd4>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	0389      	lsls	r1, r1, #14
 8006a7a:	0003      	movs	r3, r0
 8006a7c:	0020      	movs	r0, r4
 8006a7e:	f7ff fe6d 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d11a      	bne.n	8006abc <HAL_UART_Init+0xcc>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	075b      	lsls	r3, r3, #29
 8006a8c:	d5e3      	bpl.n	8006a56 <HAL_UART_Init+0x66>
 8006a8e:	e00a      	b.n	8006aa6 <HAL_UART_Init+0xb6>
    UART_AdvFeatureConfig(huart);
 8006a90:	0020      	movs	r0, r4
 8006a92:	f7ff fdfb 	bl	800668c <UART_AdvFeatureConfig>
 8006a96:	e7c4      	b.n	8006a22 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8006a98:	2001      	movs	r0, #1
 8006a9a:	e7e7      	b.n	8006a6c <HAL_UART_Init+0x7c>
    huart->Lock = HAL_UNLOCKED;
 8006a9c:	2284      	movs	r2, #132	; 0x84
 8006a9e:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8006aa0:	f7fd fa78 	bl	8003f94 <HAL_UART_MspInit>
 8006aa4:	e7ad      	b.n	8006a02 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa6:	2180      	movs	r1, #128	; 0x80
 8006aa8:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <HAL_UART_Init+0xd4>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	0020      	movs	r0, r4
 8006ab0:	002b      	movs	r3, r5
 8006ab2:	03c9      	lsls	r1, r1, #15
 8006ab4:	f7ff fe52 	bl	800675c <UART_WaitOnFlagUntilTimeout>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d0cc      	beq.n	8006a56 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8006abc:	2003      	movs	r0, #3
 8006abe:	e7d5      	b.n	8006a6c <HAL_UART_Init+0x7c>
 8006ac0:	ffffb7ff 	.word	0xffffb7ff
 8006ac4:	01ffffff 	.word	0x01ffffff

08006ac8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ac8:	b570      	push	{r4, r5, r6, lr}

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aca:	2484      	movs	r4, #132	; 0x84
 8006acc:	5d03      	ldrb	r3, [r0, r4]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d012      	beq.n	8006af8 <HAL_UARTEx_DisableFifoMode+0x30>

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad2:	2588      	movs	r5, #136	; 0x88
 8006ad4:	2324      	movs	r3, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ad6:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006ad8:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ada:	6803      	ldr	r3, [r0, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	43b1      	bics	r1, r6
 8006ae2:	6019      	str	r1, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ae4:	4905      	ldr	r1, [pc, #20]	; (8006afc <HAL_UARTEx_DisableFifoMode+0x34>)
 8006ae6:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ae8:	2100      	movs	r1, #0
 8006aea:	6641      	str	r1, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aee:	2320      	movs	r3, #32
 8006af0:	5143      	str	r3, [r0, r5]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006af2:	5501      	strb	r1, [r0, r4]

  return HAL_OK;
 8006af4:	2000      	movs	r0, #0
}
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8006af8:	2002      	movs	r0, #2
 8006afa:	e7fc      	b.n	8006af6 <HAL_UARTEx_DisableFifoMode+0x2e>
 8006afc:	dfffffff 	.word	0xdfffffff

08006b00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b02:	46d6      	mov	lr, sl
 8006b04:	464f      	mov	r7, r9
 8006b06:	4646      	mov	r6, r8
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b08:	2384      	movs	r3, #132	; 0x84
{
 8006b0a:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 8006b0c:	5cc3      	ldrb	r3, [r0, r3]
{
 8006b0e:	0004      	movs	r4, r0
 8006b10:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d03d      	beq.n	8006b92 <HAL_UARTEx_SetTxFifoThreshold+0x92>

  huart->gState = HAL_UART_STATE_BUSY;
 8006b16:	2388      	movs	r3, #136	; 0x88
 8006b18:	2124      	movs	r1, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b1a:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006b1c:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b1e:	682e      	ldr	r6, [r5, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	3923      	subs	r1, #35	; 0x23
 8006b24:	438b      	bics	r3, r1
 8006b26:	602b      	str	r3, [r5, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b28:	68ab      	ldr	r3, [r5, #8]
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	08d9      	lsrs	r1, r3, #3
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b2e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b30:	4311      	orrs	r1, r2
 8006b32:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d029      	beq.n	8006b8c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b38:	68ab      	ldr	r3, [r5, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b3a:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <HAL_UARTEx_SetTxFifoThreshold+0x98>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b3c:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b3e:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b40:	68ab      	ldr	r3, [r5, #8]
 8006b42:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b44:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b46:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b48:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b4a:	5cd1      	ldrb	r1, [r2, r3]
 8006b4c:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b4e:	f7f9 fb7f 	bl	8000250 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b52:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b54:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b56:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b58:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b5a:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b5c:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b5e:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b60:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b62:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b64:	f7f9 fb74 	bl	8000250 <__divsi3>
 8006b68:	b280      	uxth	r0, r0
 8006b6a:	2368      	movs	r3, #104	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	52e0      	strh	r0, [r4, r3]
 8006b70:	3302      	adds	r3, #2
 8006b72:	52e7      	strh	r7, [r4, r3]
 8006b74:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b76:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b78:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8006b7a:	2200      	movs	r2, #0
  return HAL_OK;
 8006b7c:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8006b7e:	3b04      	subs	r3, #4
 8006b80:	54e2      	strb	r2, [r4, r3]
}
 8006b82:	bce0      	pop	{r5, r6, r7}
 8006b84:	46ba      	mov	sl, r7
 8006b86:	46b1      	mov	r9, r6
 8006b88:	46a8      	mov	r8, r5
 8006b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 8006b8c:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 8006b8e:	2701      	movs	r7, #1
 8006b90:	e7eb      	b.n	8006b6a <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8006b92:	2002      	movs	r0, #2
 8006b94:	e7f5      	b.n	8006b82 <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	0800b918 	.word	0x0800b918
 8006b9c:	0800b910 	.word	0x0800b910

08006ba0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ba2:	46d6      	mov	lr, sl
 8006ba4:	464f      	mov	r7, r9
 8006ba6:	4646      	mov	r6, r8
  __HAL_LOCK(huart);
 8006ba8:	2384      	movs	r3, #132	; 0x84
{
 8006baa:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 8006bac:	5cc3      	ldrb	r3, [r0, r3]
{
 8006bae:	0004      	movs	r4, r0
 8006bb0:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d03d      	beq.n	8006c32 <HAL_UARTEx_SetRxFifoThreshold+0x92>
  huart->gState = HAL_UART_STATE_BUSY;
 8006bb6:	2388      	movs	r3, #136	; 0x88
 8006bb8:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bba:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006bbc:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bbe:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	3923      	subs	r1, #35	; 0x23
 8006bc4:	438b      	bics	r3, r1
 8006bc6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bc8:	68a9      	ldr	r1, [r5, #8]
 8006bca:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <HAL_UARTEx_SetRxFifoThreshold+0x98>)
 8006bcc:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bce:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bd0:	4311      	orrs	r1, r2
 8006bd2:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d029      	beq.n	8006c2c <HAL_UARTEx_SetRxFifoThreshold+0x8c>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bd8:	68ab      	ldr	r3, [r5, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bda:	4a18      	ldr	r2, [pc, #96]	; (8006c3c <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bdc:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bde:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006be0:	68ab      	ldr	r3, [r5, #8]
 8006be2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006be4:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006be6:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006be8:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bea:	5cd1      	ldrb	r1, [r2, r3]
 8006bec:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bee:	f7f9 fb2f 	bl	8000250 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bf2:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bf4:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bf6:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bf8:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bfa:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bfc:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bfe:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c00:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c02:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c04:	f7f9 fb24 	bl	8000250 <__divsi3>
 8006c08:	b280      	uxth	r0, r0
 8006c0a:	2368      	movs	r3, #104	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	52e0      	strh	r0, [r4, r3]
 8006c10:	3302      	adds	r3, #2
 8006c12:	52e7      	strh	r7, [r4, r3]
 8006c14:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c16:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006c18:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8006c1a:	2200      	movs	r2, #0
  return HAL_OK;
 8006c1c:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8006c1e:	3b04      	subs	r3, #4
 8006c20:	54e2      	strb	r2, [r4, r3]
}
 8006c22:	bce0      	pop	{r5, r6, r7}
 8006c24:	46ba      	mov	sl, r7
 8006c26:	46b1      	mov	r9, r6
 8006c28:	46a8      	mov	r8, r5
 8006c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 8006c2c:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 8006c2e:	2701      	movs	r7, #1
 8006c30:	e7eb      	b.n	8006c0a <HAL_UARTEx_SetRxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8006c32:	2002      	movs	r0, #2
 8006c34:	e7f5      	b.n	8006c22 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	f1ffffff 	.word	0xf1ffffff
 8006c3c:	0800b918 	.word	0x0800b918
 8006c40:	0800b910 	.word	0x0800b910

08006c44 <atoi>:
 8006c44:	b510      	push	{r4, lr}
 8006c46:	220a      	movs	r2, #10
 8006c48:	2100      	movs	r1, #0
 8006c4a:	f001 fe9b 	bl	8008984 <strtol>
 8006c4e:	bd10      	pop	{r4, pc}

08006c50 <__errno>:
 8006c50:	4b01      	ldr	r3, [pc, #4]	; (8006c58 <__errno+0x8>)
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	4770      	bx	lr
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	2000000c 	.word	0x2000000c

08006c5c <__libc_init_array>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	2600      	movs	r6, #0
 8006c60:	4d0c      	ldr	r5, [pc, #48]	; (8006c94 <__libc_init_array+0x38>)
 8006c62:	4c0d      	ldr	r4, [pc, #52]	; (8006c98 <__libc_init_array+0x3c>)
 8006c64:	1b64      	subs	r4, r4, r5
 8006c66:	10a4      	asrs	r4, r4, #2
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	d109      	bne.n	8006c80 <__libc_init_array+0x24>
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	f004 fd53 	bl	800b718 <_init>
 8006c72:	4d0a      	ldr	r5, [pc, #40]	; (8006c9c <__libc_init_array+0x40>)
 8006c74:	4c0a      	ldr	r4, [pc, #40]	; (8006ca0 <__libc_init_array+0x44>)
 8006c76:	1b64      	subs	r4, r4, r5
 8006c78:	10a4      	asrs	r4, r4, #2
 8006c7a:	42a6      	cmp	r6, r4
 8006c7c:	d105      	bne.n	8006c8a <__libc_init_array+0x2e>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	00b3      	lsls	r3, r6, #2
 8006c82:	58eb      	ldr	r3, [r5, r3]
 8006c84:	4798      	blx	r3
 8006c86:	3601      	adds	r6, #1
 8006c88:	e7ee      	b.n	8006c68 <__libc_init_array+0xc>
 8006c8a:	00b3      	lsls	r3, r6, #2
 8006c8c:	58eb      	ldr	r3, [r5, r3]
 8006c8e:	4798      	blx	r3
 8006c90:	3601      	adds	r6, #1
 8006c92:	e7f2      	b.n	8006c7a <__libc_init_array+0x1e>
 8006c94:	0800bdd4 	.word	0x0800bdd4
 8006c98:	0800bdd4 	.word	0x0800bdd4
 8006c9c:	0800bdd4 	.word	0x0800bdd4
 8006ca0:	0800bdd8 	.word	0x0800bdd8

08006ca4 <malloc>:
 8006ca4:	b510      	push	{r4, lr}
 8006ca6:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <malloc+0x10>)
 8006ca8:	0001      	movs	r1, r0
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	f000 f882 	bl	8006db4 <_malloc_r>
 8006cb0:	bd10      	pop	{r4, pc}
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	2000000c 	.word	0x2000000c

08006cb8 <memcpy>:
 8006cb8:	2300      	movs	r3, #0
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d100      	bne.n	8006cc2 <memcpy+0xa>
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	5ccc      	ldrb	r4, [r1, r3]
 8006cc4:	54c4      	strb	r4, [r0, r3]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	e7f8      	b.n	8006cbc <memcpy+0x4>

08006cca <memset>:
 8006cca:	0003      	movs	r3, r0
 8006ccc:	1882      	adds	r2, r0, r2
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d100      	bne.n	8006cd4 <memset+0xa>
 8006cd2:	4770      	bx	lr
 8006cd4:	7019      	strb	r1, [r3, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	e7f9      	b.n	8006cce <memset+0x4>
	...

08006cdc <_free_r>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	0005      	movs	r5, r0
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	d010      	beq.n	8006d06 <_free_r+0x2a>
 8006ce4:	1f0c      	subs	r4, r1, #4
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	da00      	bge.n	8006cee <_free_r+0x12>
 8006cec:	18e4      	adds	r4, r4, r3
 8006cee:	0028      	movs	r0, r5
 8006cf0:	f003 f890 	bl	8009e14 <__malloc_lock>
 8006cf4:	4a1d      	ldr	r2, [pc, #116]	; (8006d6c <_free_r+0x90>)
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d105      	bne.n	8006d08 <_free_r+0x2c>
 8006cfc:	6063      	str	r3, [r4, #4]
 8006cfe:	6014      	str	r4, [r2, #0]
 8006d00:	0028      	movs	r0, r5
 8006d02:	f003 f88f 	bl	8009e24 <__malloc_unlock>
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	d908      	bls.n	8006d1e <_free_r+0x42>
 8006d0c:	6821      	ldr	r1, [r4, #0]
 8006d0e:	1860      	adds	r0, r4, r1
 8006d10:	4283      	cmp	r3, r0
 8006d12:	d1f3      	bne.n	8006cfc <_free_r+0x20>
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	1841      	adds	r1, r0, r1
 8006d1a:	6021      	str	r1, [r4, #0]
 8006d1c:	e7ee      	b.n	8006cfc <_free_r+0x20>
 8006d1e:	001a      	movs	r2, r3
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <_free_r+0x4e>
 8006d26:	42a3      	cmp	r3, r4
 8006d28:	d9f9      	bls.n	8006d1e <_free_r+0x42>
 8006d2a:	6811      	ldr	r1, [r2, #0]
 8006d2c:	1850      	adds	r0, r2, r1
 8006d2e:	42a0      	cmp	r0, r4
 8006d30:	d10b      	bne.n	8006d4a <_free_r+0x6e>
 8006d32:	6820      	ldr	r0, [r4, #0]
 8006d34:	1809      	adds	r1, r1, r0
 8006d36:	1850      	adds	r0, r2, r1
 8006d38:	6011      	str	r1, [r2, #0]
 8006d3a:	4283      	cmp	r3, r0
 8006d3c:	d1e0      	bne.n	8006d00 <_free_r+0x24>
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	1841      	adds	r1, r0, r1
 8006d44:	6011      	str	r1, [r2, #0]
 8006d46:	6053      	str	r3, [r2, #4]
 8006d48:	e7da      	b.n	8006d00 <_free_r+0x24>
 8006d4a:	42a0      	cmp	r0, r4
 8006d4c:	d902      	bls.n	8006d54 <_free_r+0x78>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	e7d5      	b.n	8006d00 <_free_r+0x24>
 8006d54:	6821      	ldr	r1, [r4, #0]
 8006d56:	1860      	adds	r0, r4, r1
 8006d58:	4283      	cmp	r3, r0
 8006d5a:	d103      	bne.n	8006d64 <_free_r+0x88>
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	1841      	adds	r1, r0, r1
 8006d62:	6021      	str	r1, [r4, #0]
 8006d64:	6063      	str	r3, [r4, #4]
 8006d66:	6054      	str	r4, [r2, #4]
 8006d68:	e7ca      	b.n	8006d00 <_free_r+0x24>
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	20000540 	.word	0x20000540

08006d70 <sbrk_aligned>:
 8006d70:	b570      	push	{r4, r5, r6, lr}
 8006d72:	4e0f      	ldr	r6, [pc, #60]	; (8006db0 <sbrk_aligned+0x40>)
 8006d74:	000d      	movs	r5, r1
 8006d76:	6831      	ldr	r1, [r6, #0]
 8006d78:	0004      	movs	r4, r0
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	d102      	bne.n	8006d84 <sbrk_aligned+0x14>
 8006d7e:	f000 ff05 	bl	8007b8c <_sbrk_r>
 8006d82:	6030      	str	r0, [r6, #0]
 8006d84:	0029      	movs	r1, r5
 8006d86:	0020      	movs	r0, r4
 8006d88:	f000 ff00 	bl	8007b8c <_sbrk_r>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d00a      	beq.n	8006da6 <sbrk_aligned+0x36>
 8006d90:	2303      	movs	r3, #3
 8006d92:	1cc5      	adds	r5, r0, #3
 8006d94:	439d      	bics	r5, r3
 8006d96:	42a8      	cmp	r0, r5
 8006d98:	d007      	beq.n	8006daa <sbrk_aligned+0x3a>
 8006d9a:	1a29      	subs	r1, r5, r0
 8006d9c:	0020      	movs	r0, r4
 8006d9e:	f000 fef5 	bl	8007b8c <_sbrk_r>
 8006da2:	1c43      	adds	r3, r0, #1
 8006da4:	d101      	bne.n	8006daa <sbrk_aligned+0x3a>
 8006da6:	2501      	movs	r5, #1
 8006da8:	426d      	negs	r5, r5
 8006daa:	0028      	movs	r0, r5
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	20000544 	.word	0x20000544

08006db4 <_malloc_r>:
 8006db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006db6:	2203      	movs	r2, #3
 8006db8:	1ccb      	adds	r3, r1, #3
 8006dba:	4393      	bics	r3, r2
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	0006      	movs	r6, r0
 8006dc0:	001f      	movs	r7, r3
 8006dc2:	2b0c      	cmp	r3, #12
 8006dc4:	d232      	bcs.n	8006e2c <_malloc_r+0x78>
 8006dc6:	270c      	movs	r7, #12
 8006dc8:	42b9      	cmp	r1, r7
 8006dca:	d831      	bhi.n	8006e30 <_malloc_r+0x7c>
 8006dcc:	0030      	movs	r0, r6
 8006dce:	f003 f821 	bl	8009e14 <__malloc_lock>
 8006dd2:	4d32      	ldr	r5, [pc, #200]	; (8006e9c <_malloc_r+0xe8>)
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	001c      	movs	r4, r3
 8006dd8:	2c00      	cmp	r4, #0
 8006dda:	d12e      	bne.n	8006e3a <_malloc_r+0x86>
 8006ddc:	0039      	movs	r1, r7
 8006dde:	0030      	movs	r0, r6
 8006de0:	f7ff ffc6 	bl	8006d70 <sbrk_aligned>
 8006de4:	0004      	movs	r4, r0
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	d11e      	bne.n	8006e28 <_malloc_r+0x74>
 8006dea:	682c      	ldr	r4, [r5, #0]
 8006dec:	0025      	movs	r5, r4
 8006dee:	2d00      	cmp	r5, #0
 8006df0:	d14a      	bne.n	8006e88 <_malloc_r+0xd4>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	0029      	movs	r1, r5
 8006df6:	18e3      	adds	r3, r4, r3
 8006df8:	0030      	movs	r0, r6
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	f000 fec6 	bl	8007b8c <_sbrk_r>
 8006e00:	9b01      	ldr	r3, [sp, #4]
 8006e02:	4283      	cmp	r3, r0
 8006e04:	d143      	bne.n	8006e8e <_malloc_r+0xda>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	3703      	adds	r7, #3
 8006e0a:	1aff      	subs	r7, r7, r3
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	439f      	bics	r7, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	2f0c      	cmp	r7, #12
 8006e14:	d200      	bcs.n	8006e18 <_malloc_r+0x64>
 8006e16:	270c      	movs	r7, #12
 8006e18:	0039      	movs	r1, r7
 8006e1a:	0030      	movs	r0, r6
 8006e1c:	f7ff ffa8 	bl	8006d70 <sbrk_aligned>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d034      	beq.n	8006e8e <_malloc_r+0xda>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	19df      	adds	r7, r3, r7
 8006e28:	6027      	str	r7, [r4, #0]
 8006e2a:	e013      	b.n	8006e54 <_malloc_r+0xa0>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	dacb      	bge.n	8006dc8 <_malloc_r+0x14>
 8006e30:	230c      	movs	r3, #12
 8006e32:	2500      	movs	r5, #0
 8006e34:	6033      	str	r3, [r6, #0]
 8006e36:	0028      	movs	r0, r5
 8006e38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	1bd1      	subs	r1, r2, r7
 8006e3e:	d420      	bmi.n	8006e82 <_malloc_r+0xce>
 8006e40:	290b      	cmp	r1, #11
 8006e42:	d917      	bls.n	8006e74 <_malloc_r+0xc0>
 8006e44:	19e2      	adds	r2, r4, r7
 8006e46:	6027      	str	r7, [r4, #0]
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d111      	bne.n	8006e70 <_malloc_r+0xbc>
 8006e4c:	602a      	str	r2, [r5, #0]
 8006e4e:	6863      	ldr	r3, [r4, #4]
 8006e50:	6011      	str	r1, [r2, #0]
 8006e52:	6053      	str	r3, [r2, #4]
 8006e54:	0030      	movs	r0, r6
 8006e56:	0025      	movs	r5, r4
 8006e58:	f002 ffe4 	bl	8009e24 <__malloc_unlock>
 8006e5c:	2207      	movs	r2, #7
 8006e5e:	350b      	adds	r5, #11
 8006e60:	1d23      	adds	r3, r4, #4
 8006e62:	4395      	bics	r5, r2
 8006e64:	1aea      	subs	r2, r5, r3
 8006e66:	429d      	cmp	r5, r3
 8006e68:	d0e5      	beq.n	8006e36 <_malloc_r+0x82>
 8006e6a:	1b5b      	subs	r3, r3, r5
 8006e6c:	50a3      	str	r3, [r4, r2]
 8006e6e:	e7e2      	b.n	8006e36 <_malloc_r+0x82>
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	e7ec      	b.n	8006e4e <_malloc_r+0x9a>
 8006e74:	6862      	ldr	r2, [r4, #4]
 8006e76:	42a3      	cmp	r3, r4
 8006e78:	d101      	bne.n	8006e7e <_malloc_r+0xca>
 8006e7a:	602a      	str	r2, [r5, #0]
 8006e7c:	e7ea      	b.n	8006e54 <_malloc_r+0xa0>
 8006e7e:	605a      	str	r2, [r3, #4]
 8006e80:	e7e8      	b.n	8006e54 <_malloc_r+0xa0>
 8006e82:	0023      	movs	r3, r4
 8006e84:	6864      	ldr	r4, [r4, #4]
 8006e86:	e7a7      	b.n	8006dd8 <_malloc_r+0x24>
 8006e88:	002c      	movs	r4, r5
 8006e8a:	686d      	ldr	r5, [r5, #4]
 8006e8c:	e7af      	b.n	8006dee <_malloc_r+0x3a>
 8006e8e:	230c      	movs	r3, #12
 8006e90:	0030      	movs	r0, r6
 8006e92:	6033      	str	r3, [r6, #0]
 8006e94:	f002 ffc6 	bl	8009e24 <__malloc_unlock>
 8006e98:	e7cd      	b.n	8006e36 <_malloc_r+0x82>
 8006e9a:	46c0      	nop			; (mov r8, r8)
 8006e9c:	20000540 	.word	0x20000540

08006ea0 <__cvt>:
 8006ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ea2:	001e      	movs	r6, r3
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	0014      	movs	r4, r2
 8006ea8:	b08b      	sub	sp, #44	; 0x2c
 8006eaa:	429e      	cmp	r6, r3
 8006eac:	da04      	bge.n	8006eb8 <__cvt+0x18>
 8006eae:	2180      	movs	r1, #128	; 0x80
 8006eb0:	0609      	lsls	r1, r1, #24
 8006eb2:	1873      	adds	r3, r6, r1
 8006eb4:	001e      	movs	r6, r3
 8006eb6:	232d      	movs	r3, #45	; 0x2d
 8006eb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006eba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006ebc:	7013      	strb	r3, [r2, #0]
 8006ebe:	2320      	movs	r3, #32
 8006ec0:	2203      	movs	r2, #3
 8006ec2:	439f      	bics	r7, r3
 8006ec4:	2f46      	cmp	r7, #70	; 0x46
 8006ec6:	d007      	beq.n	8006ed8 <__cvt+0x38>
 8006ec8:	003b      	movs	r3, r7
 8006eca:	3b45      	subs	r3, #69	; 0x45
 8006ecc:	4259      	negs	r1, r3
 8006ece:	414b      	adcs	r3, r1
 8006ed0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006ed2:	3a01      	subs	r2, #1
 8006ed4:	18cb      	adds	r3, r1, r3
 8006ed6:	9310      	str	r3, [sp, #64]	; 0x40
 8006ed8:	ab09      	add	r3, sp, #36	; 0x24
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	ab08      	add	r3, sp, #32
 8006ede:	9303      	str	r3, [sp, #12]
 8006ee0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ee2:	9200      	str	r2, [sp, #0]
 8006ee4:	9302      	str	r3, [sp, #8]
 8006ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ee8:	0022      	movs	r2, r4
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	0033      	movs	r3, r6
 8006eee:	f001 fde1 	bl	8008ab4 <_dtoa_r>
 8006ef2:	0005      	movs	r5, r0
 8006ef4:	2f47      	cmp	r7, #71	; 0x47
 8006ef6:	d102      	bne.n	8006efe <__cvt+0x5e>
 8006ef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006efa:	07db      	lsls	r3, r3, #31
 8006efc:	d528      	bpl.n	8006f50 <__cvt+0xb0>
 8006efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f00:	18eb      	adds	r3, r5, r3
 8006f02:	9307      	str	r3, [sp, #28]
 8006f04:	2f46      	cmp	r7, #70	; 0x46
 8006f06:	d114      	bne.n	8006f32 <__cvt+0x92>
 8006f08:	782b      	ldrb	r3, [r5, #0]
 8006f0a:	2b30      	cmp	r3, #48	; 0x30
 8006f0c:	d10c      	bne.n	8006f28 <__cvt+0x88>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2300      	movs	r3, #0
 8006f12:	0020      	movs	r0, r4
 8006f14:	0031      	movs	r1, r6
 8006f16:	f7f9 fa97 	bl	8000448 <__aeabi_dcmpeq>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d104      	bne.n	8006f28 <__cvt+0x88>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f22:	1a9b      	subs	r3, r3, r2
 8006f24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f2a:	9a07      	ldr	r2, [sp, #28]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	18d3      	adds	r3, r2, r3
 8006f30:	9307      	str	r3, [sp, #28]
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	0020      	movs	r0, r4
 8006f38:	0031      	movs	r1, r6
 8006f3a:	f7f9 fa85 	bl	8000448 <__aeabi_dcmpeq>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d001      	beq.n	8006f46 <__cvt+0xa6>
 8006f42:	9b07      	ldr	r3, [sp, #28]
 8006f44:	9309      	str	r3, [sp, #36]	; 0x24
 8006f46:	2230      	movs	r2, #48	; 0x30
 8006f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f4a:	9907      	ldr	r1, [sp, #28]
 8006f4c:	428b      	cmp	r3, r1
 8006f4e:	d306      	bcc.n	8006f5e <__cvt+0xbe>
 8006f50:	0028      	movs	r0, r5
 8006f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f54:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f56:	1b5b      	subs	r3, r3, r5
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	b00b      	add	sp, #44	; 0x2c
 8006f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f5e:	1c59      	adds	r1, r3, #1
 8006f60:	9109      	str	r1, [sp, #36]	; 0x24
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	e7f0      	b.n	8006f48 <__cvt+0xa8>

08006f66 <__exponent>:
 8006f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f68:	1c83      	adds	r3, r0, #2
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	9303      	str	r3, [sp, #12]
 8006f6e:	0005      	movs	r5, r0
 8006f70:	000c      	movs	r4, r1
 8006f72:	232b      	movs	r3, #43	; 0x2b
 8006f74:	7002      	strb	r2, [r0, #0]
 8006f76:	2900      	cmp	r1, #0
 8006f78:	da01      	bge.n	8006f7e <__exponent+0x18>
 8006f7a:	424c      	negs	r4, r1
 8006f7c:	3302      	adds	r3, #2
 8006f7e:	706b      	strb	r3, [r5, #1]
 8006f80:	2c09      	cmp	r4, #9
 8006f82:	dd31      	ble.n	8006fe8 <__exponent+0x82>
 8006f84:	270a      	movs	r7, #10
 8006f86:	ab04      	add	r3, sp, #16
 8006f88:	1dde      	adds	r6, r3, #7
 8006f8a:	0020      	movs	r0, r4
 8006f8c:	0039      	movs	r1, r7
 8006f8e:	9601      	str	r6, [sp, #4]
 8006f90:	f7f9 fa44 	bl	800041c <__aeabi_idivmod>
 8006f94:	3e01      	subs	r6, #1
 8006f96:	3130      	adds	r1, #48	; 0x30
 8006f98:	0020      	movs	r0, r4
 8006f9a:	7031      	strb	r1, [r6, #0]
 8006f9c:	0039      	movs	r1, r7
 8006f9e:	9402      	str	r4, [sp, #8]
 8006fa0:	f7f9 f956 	bl	8000250 <__divsi3>
 8006fa4:	9b02      	ldr	r3, [sp, #8]
 8006fa6:	0004      	movs	r4, r0
 8006fa8:	2b63      	cmp	r3, #99	; 0x63
 8006faa:	dcee      	bgt.n	8006f8a <__exponent+0x24>
 8006fac:	9b01      	ldr	r3, [sp, #4]
 8006fae:	3430      	adds	r4, #48	; 0x30
 8006fb0:	1e9a      	subs	r2, r3, #2
 8006fb2:	0013      	movs	r3, r2
 8006fb4:	9903      	ldr	r1, [sp, #12]
 8006fb6:	7014      	strb	r4, [r2, #0]
 8006fb8:	a804      	add	r0, sp, #16
 8006fba:	3007      	adds	r0, #7
 8006fbc:	4298      	cmp	r0, r3
 8006fbe:	d80e      	bhi.n	8006fde <__exponent+0x78>
 8006fc0:	ab04      	add	r3, sp, #16
 8006fc2:	3307      	adds	r3, #7
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d804      	bhi.n	8006fd4 <__exponent+0x6e>
 8006fca:	ab04      	add	r3, sp, #16
 8006fcc:	3009      	adds	r0, #9
 8006fce:	18c0      	adds	r0, r0, r3
 8006fd0:	9b01      	ldr	r3, [sp, #4]
 8006fd2:	1ac0      	subs	r0, r0, r3
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	1818      	adds	r0, r3, r0
 8006fd8:	1b40      	subs	r0, r0, r5
 8006fda:	b007      	add	sp, #28
 8006fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fde:	7818      	ldrb	r0, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	7008      	strb	r0, [r1, #0]
 8006fe4:	3101      	adds	r1, #1
 8006fe6:	e7e7      	b.n	8006fb8 <__exponent+0x52>
 8006fe8:	2330      	movs	r3, #48	; 0x30
 8006fea:	18e4      	adds	r4, r4, r3
 8006fec:	70ab      	strb	r3, [r5, #2]
 8006fee:	1d28      	adds	r0, r5, #4
 8006ff0:	70ec      	strb	r4, [r5, #3]
 8006ff2:	e7f1      	b.n	8006fd8 <__exponent+0x72>

08006ff4 <_printf_float>:
 8006ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff6:	b095      	sub	sp, #84	; 0x54
 8006ff8:	000c      	movs	r4, r1
 8006ffa:	9209      	str	r2, [sp, #36]	; 0x24
 8006ffc:	001e      	movs	r6, r3
 8006ffe:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007000:	0007      	movs	r7, r0
 8007002:	f002 fee5 	bl	8009dd0 <_localeconv_r>
 8007006:	6803      	ldr	r3, [r0, #0]
 8007008:	0018      	movs	r0, r3
 800700a:	930c      	str	r3, [sp, #48]	; 0x30
 800700c:	f7f9 f87a 	bl	8000104 <strlen>
 8007010:	2300      	movs	r3, #0
 8007012:	9312      	str	r3, [sp, #72]	; 0x48
 8007014:	7e23      	ldrb	r3, [r4, #24]
 8007016:	2207      	movs	r2, #7
 8007018:	930a      	str	r3, [sp, #40]	; 0x28
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	900e      	str	r0, [sp, #56]	; 0x38
 800701e:	930d      	str	r3, [sp, #52]	; 0x34
 8007020:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007022:	682b      	ldr	r3, [r5, #0]
 8007024:	05c9      	lsls	r1, r1, #23
 8007026:	d547      	bpl.n	80070b8 <_printf_float+0xc4>
 8007028:	189b      	adds	r3, r3, r2
 800702a:	4393      	bics	r3, r2
 800702c:	001a      	movs	r2, r3
 800702e:	3208      	adds	r2, #8
 8007030:	602a      	str	r2, [r5, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	64a2      	str	r2, [r4, #72]	; 0x48
 8007038:	64e3      	str	r3, [r4, #76]	; 0x4c
 800703a:	2201      	movs	r2, #1
 800703c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800703e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007040:	930b      	str	r3, [sp, #44]	; 0x2c
 8007042:	006b      	lsls	r3, r5, #1
 8007044:	085b      	lsrs	r3, r3, #1
 8007046:	930f      	str	r3, [sp, #60]	; 0x3c
 8007048:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800704a:	4ba7      	ldr	r3, [pc, #668]	; (80072e8 <_printf_float+0x2f4>)
 800704c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800704e:	4252      	negs	r2, r2
 8007050:	f7fb fe10 	bl	8002c74 <__aeabi_dcmpun>
 8007054:	2800      	cmp	r0, #0
 8007056:	d131      	bne.n	80070bc <_printf_float+0xc8>
 8007058:	2201      	movs	r2, #1
 800705a:	4ba3      	ldr	r3, [pc, #652]	; (80072e8 <_printf_float+0x2f4>)
 800705c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800705e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007060:	4252      	negs	r2, r2
 8007062:	f7f9 fa01 	bl	8000468 <__aeabi_dcmple>
 8007066:	2800      	cmp	r0, #0
 8007068:	d128      	bne.n	80070bc <_printf_float+0xc8>
 800706a:	2200      	movs	r2, #0
 800706c:	2300      	movs	r3, #0
 800706e:	0029      	movs	r1, r5
 8007070:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007072:	f7f9 f9ef 	bl	8000454 <__aeabi_dcmplt>
 8007076:	2800      	cmp	r0, #0
 8007078:	d003      	beq.n	8007082 <_printf_float+0x8e>
 800707a:	0023      	movs	r3, r4
 800707c:	222d      	movs	r2, #45	; 0x2d
 800707e:	3343      	adds	r3, #67	; 0x43
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007084:	4d99      	ldr	r5, [pc, #612]	; (80072ec <_printf_float+0x2f8>)
 8007086:	2b47      	cmp	r3, #71	; 0x47
 8007088:	d900      	bls.n	800708c <_printf_float+0x98>
 800708a:	4d99      	ldr	r5, [pc, #612]	; (80072f0 <_printf_float+0x2fc>)
 800708c:	2303      	movs	r3, #3
 800708e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007090:	6123      	str	r3, [r4, #16]
 8007092:	3301      	adds	r3, #1
 8007094:	439a      	bics	r2, r3
 8007096:	2300      	movs	r3, #0
 8007098:	6022      	str	r2, [r4, #0]
 800709a:	930b      	str	r3, [sp, #44]	; 0x2c
 800709c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709e:	0021      	movs	r1, r4
 80070a0:	0038      	movs	r0, r7
 80070a2:	9600      	str	r6, [sp, #0]
 80070a4:	aa13      	add	r2, sp, #76	; 0x4c
 80070a6:	f000 f9e7 	bl	8007478 <_printf_common>
 80070aa:	1c43      	adds	r3, r0, #1
 80070ac:	d000      	beq.n	80070b0 <_printf_float+0xbc>
 80070ae:	e0a2      	b.n	80071f6 <_printf_float+0x202>
 80070b0:	2001      	movs	r0, #1
 80070b2:	4240      	negs	r0, r0
 80070b4:	b015      	add	sp, #84	; 0x54
 80070b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b8:	3307      	adds	r3, #7
 80070ba:	e7b6      	b.n	800702a <_printf_float+0x36>
 80070bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070be:	002b      	movs	r3, r5
 80070c0:	0010      	movs	r0, r2
 80070c2:	0029      	movs	r1, r5
 80070c4:	f7fb fdd6 	bl	8002c74 <__aeabi_dcmpun>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d00b      	beq.n	80070e4 <_printf_float+0xf0>
 80070cc:	2d00      	cmp	r5, #0
 80070ce:	da03      	bge.n	80070d8 <_printf_float+0xe4>
 80070d0:	0023      	movs	r3, r4
 80070d2:	222d      	movs	r2, #45	; 0x2d
 80070d4:	3343      	adds	r3, #67	; 0x43
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070da:	4d86      	ldr	r5, [pc, #536]	; (80072f4 <_printf_float+0x300>)
 80070dc:	2b47      	cmp	r3, #71	; 0x47
 80070de:	d9d5      	bls.n	800708c <_printf_float+0x98>
 80070e0:	4d85      	ldr	r5, [pc, #532]	; (80072f8 <_printf_float+0x304>)
 80070e2:	e7d3      	b.n	800708c <_printf_float+0x98>
 80070e4:	2220      	movs	r2, #32
 80070e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070e8:	6863      	ldr	r3, [r4, #4]
 80070ea:	4391      	bics	r1, r2
 80070ec:	910f      	str	r1, [sp, #60]	; 0x3c
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	d149      	bne.n	8007186 <_printf_float+0x192>
 80070f2:	3307      	adds	r3, #7
 80070f4:	6063      	str	r3, [r4, #4]
 80070f6:	2380      	movs	r3, #128	; 0x80
 80070f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	4313      	orrs	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	9206      	str	r2, [sp, #24]
 8007102:	aa12      	add	r2, sp, #72	; 0x48
 8007104:	9205      	str	r2, [sp, #20]
 8007106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007108:	a908      	add	r1, sp, #32
 800710a:	9204      	str	r2, [sp, #16]
 800710c:	aa11      	add	r2, sp, #68	; 0x44
 800710e:	9203      	str	r2, [sp, #12]
 8007110:	2223      	movs	r2, #35	; 0x23
 8007112:	6023      	str	r3, [r4, #0]
 8007114:	9301      	str	r3, [sp, #4]
 8007116:	6863      	ldr	r3, [r4, #4]
 8007118:	1852      	adds	r2, r2, r1
 800711a:	9202      	str	r2, [sp, #8]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	0038      	movs	r0, r7
 8007120:	002b      	movs	r3, r5
 8007122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007124:	f7ff febc 	bl	8006ea0 <__cvt>
 8007128:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800712a:	0005      	movs	r5, r0
 800712c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800712e:	2b47      	cmp	r3, #71	; 0x47
 8007130:	d108      	bne.n	8007144 <_printf_float+0x150>
 8007132:	1ccb      	adds	r3, r1, #3
 8007134:	db02      	blt.n	800713c <_printf_float+0x148>
 8007136:	6863      	ldr	r3, [r4, #4]
 8007138:	4299      	cmp	r1, r3
 800713a:	dd48      	ble.n	80071ce <_printf_float+0x1da>
 800713c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800713e:	3b02      	subs	r3, #2
 8007140:	b2db      	uxtb	r3, r3
 8007142:	930a      	str	r3, [sp, #40]	; 0x28
 8007144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007146:	2b65      	cmp	r3, #101	; 0x65
 8007148:	d824      	bhi.n	8007194 <_printf_float+0x1a0>
 800714a:	0020      	movs	r0, r4
 800714c:	001a      	movs	r2, r3
 800714e:	3901      	subs	r1, #1
 8007150:	3050      	adds	r0, #80	; 0x50
 8007152:	9111      	str	r1, [sp, #68]	; 0x44
 8007154:	f7ff ff07 	bl	8006f66 <__exponent>
 8007158:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800715a:	900b      	str	r0, [sp, #44]	; 0x2c
 800715c:	1813      	adds	r3, r2, r0
 800715e:	6123      	str	r3, [r4, #16]
 8007160:	2a01      	cmp	r2, #1
 8007162:	dc02      	bgt.n	800716a <_printf_float+0x176>
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	07d2      	lsls	r2, r2, #31
 8007168:	d501      	bpl.n	800716e <_printf_float+0x17a>
 800716a:	3301      	adds	r3, #1
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	2323      	movs	r3, #35	; 0x23
 8007170:	aa08      	add	r2, sp, #32
 8007172:	189b      	adds	r3, r3, r2
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d100      	bne.n	800717c <_printf_float+0x188>
 800717a:	e78f      	b.n	800709c <_printf_float+0xa8>
 800717c:	0023      	movs	r3, r4
 800717e:	222d      	movs	r2, #45	; 0x2d
 8007180:	3343      	adds	r3, #67	; 0x43
 8007182:	701a      	strb	r2, [r3, #0]
 8007184:	e78a      	b.n	800709c <_printf_float+0xa8>
 8007186:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007188:	2a47      	cmp	r2, #71	; 0x47
 800718a:	d1b4      	bne.n	80070f6 <_printf_float+0x102>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1b2      	bne.n	80070f6 <_printf_float+0x102>
 8007190:	3301      	adds	r3, #1
 8007192:	e7af      	b.n	80070f4 <_printf_float+0x100>
 8007194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007196:	2b66      	cmp	r3, #102	; 0x66
 8007198:	d11b      	bne.n	80071d2 <_printf_float+0x1de>
 800719a:	6863      	ldr	r3, [r4, #4]
 800719c:	2900      	cmp	r1, #0
 800719e:	dd0d      	ble.n	80071bc <_printf_float+0x1c8>
 80071a0:	6121      	str	r1, [r4, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d102      	bne.n	80071ac <_printf_float+0x1b8>
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	07d2      	lsls	r2, r2, #31
 80071aa:	d502      	bpl.n	80071b2 <_printf_float+0x1be>
 80071ac:	3301      	adds	r3, #1
 80071ae:	1859      	adds	r1, r3, r1
 80071b0:	6121      	str	r1, [r4, #16]
 80071b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80071b6:	2300      	movs	r3, #0
 80071b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ba:	e7d8      	b.n	800716e <_printf_float+0x17a>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <_printf_float+0x1d4>
 80071c0:	2201      	movs	r2, #1
 80071c2:	6821      	ldr	r1, [r4, #0]
 80071c4:	4211      	tst	r1, r2
 80071c6:	d000      	beq.n	80071ca <_printf_float+0x1d6>
 80071c8:	1c9a      	adds	r2, r3, #2
 80071ca:	6122      	str	r2, [r4, #16]
 80071cc:	e7f1      	b.n	80071b2 <_printf_float+0x1be>
 80071ce:	2367      	movs	r3, #103	; 0x67
 80071d0:	930a      	str	r3, [sp, #40]	; 0x28
 80071d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071d6:	4293      	cmp	r3, r2
 80071d8:	db06      	blt.n	80071e8 <_printf_float+0x1f4>
 80071da:	6822      	ldr	r2, [r4, #0]
 80071dc:	6123      	str	r3, [r4, #16]
 80071de:	07d2      	lsls	r2, r2, #31
 80071e0:	d5e7      	bpl.n	80071b2 <_printf_float+0x1be>
 80071e2:	3301      	adds	r3, #1
 80071e4:	6123      	str	r3, [r4, #16]
 80071e6:	e7e4      	b.n	80071b2 <_printf_float+0x1be>
 80071e8:	2101      	movs	r1, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dc01      	bgt.n	80071f2 <_printf_float+0x1fe>
 80071ee:	1849      	adds	r1, r1, r1
 80071f0:	1ac9      	subs	r1, r1, r3
 80071f2:	1852      	adds	r2, r2, r1
 80071f4:	e7e9      	b.n	80071ca <_printf_float+0x1d6>
 80071f6:	6822      	ldr	r2, [r4, #0]
 80071f8:	0553      	lsls	r3, r2, #21
 80071fa:	d407      	bmi.n	800720c <_printf_float+0x218>
 80071fc:	6923      	ldr	r3, [r4, #16]
 80071fe:	002a      	movs	r2, r5
 8007200:	0038      	movs	r0, r7
 8007202:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007204:	47b0      	blx	r6
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	d128      	bne.n	800725c <_printf_float+0x268>
 800720a:	e751      	b.n	80070b0 <_printf_float+0xbc>
 800720c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720e:	2b65      	cmp	r3, #101	; 0x65
 8007210:	d800      	bhi.n	8007214 <_printf_float+0x220>
 8007212:	e0e1      	b.n	80073d8 <_printf_float+0x3e4>
 8007214:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007216:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007218:	2200      	movs	r2, #0
 800721a:	2300      	movs	r3, #0
 800721c:	f7f9 f914 	bl	8000448 <__aeabi_dcmpeq>
 8007220:	2800      	cmp	r0, #0
 8007222:	d031      	beq.n	8007288 <_printf_float+0x294>
 8007224:	2301      	movs	r3, #1
 8007226:	0038      	movs	r0, r7
 8007228:	4a34      	ldr	r2, [pc, #208]	; (80072fc <_printf_float+0x308>)
 800722a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800722c:	47b0      	blx	r6
 800722e:	1c43      	adds	r3, r0, #1
 8007230:	d100      	bne.n	8007234 <_printf_float+0x240>
 8007232:	e73d      	b.n	80070b0 <_printf_float+0xbc>
 8007234:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007236:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007238:	4293      	cmp	r3, r2
 800723a:	db02      	blt.n	8007242 <_printf_float+0x24e>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	07db      	lsls	r3, r3, #31
 8007240:	d50c      	bpl.n	800725c <_printf_float+0x268>
 8007242:	0038      	movs	r0, r7
 8007244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007248:	9909      	ldr	r1, [sp, #36]	; 0x24
 800724a:	47b0      	blx	r6
 800724c:	2500      	movs	r5, #0
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d100      	bne.n	8007254 <_printf_float+0x260>
 8007252:	e72d      	b.n	80070b0 <_printf_float+0xbc>
 8007254:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007256:	3b01      	subs	r3, #1
 8007258:	42ab      	cmp	r3, r5
 800725a:	dc0a      	bgt.n	8007272 <_printf_float+0x27e>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	079b      	lsls	r3, r3, #30
 8007260:	d500      	bpl.n	8007264 <_printf_float+0x270>
 8007262:	e106      	b.n	8007472 <_printf_float+0x47e>
 8007264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007266:	68e0      	ldr	r0, [r4, #12]
 8007268:	4298      	cmp	r0, r3
 800726a:	db00      	blt.n	800726e <_printf_float+0x27a>
 800726c:	e722      	b.n	80070b4 <_printf_float+0xc0>
 800726e:	0018      	movs	r0, r3
 8007270:	e720      	b.n	80070b4 <_printf_float+0xc0>
 8007272:	0022      	movs	r2, r4
 8007274:	2301      	movs	r3, #1
 8007276:	0038      	movs	r0, r7
 8007278:	9909      	ldr	r1, [sp, #36]	; 0x24
 800727a:	321a      	adds	r2, #26
 800727c:	47b0      	blx	r6
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	d100      	bne.n	8007284 <_printf_float+0x290>
 8007282:	e715      	b.n	80070b0 <_printf_float+0xbc>
 8007284:	3501      	adds	r5, #1
 8007286:	e7e5      	b.n	8007254 <_printf_float+0x260>
 8007288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800728a:	2b00      	cmp	r3, #0
 800728c:	dc38      	bgt.n	8007300 <_printf_float+0x30c>
 800728e:	2301      	movs	r3, #1
 8007290:	0038      	movs	r0, r7
 8007292:	4a1a      	ldr	r2, [pc, #104]	; (80072fc <_printf_float+0x308>)
 8007294:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007296:	47b0      	blx	r6
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d100      	bne.n	800729e <_printf_float+0x2aa>
 800729c:	e708      	b.n	80070b0 <_printf_float+0xbc>
 800729e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072a2:	4313      	orrs	r3, r2
 80072a4:	d102      	bne.n	80072ac <_printf_float+0x2b8>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	07db      	lsls	r3, r3, #31
 80072aa:	d5d7      	bpl.n	800725c <_printf_float+0x268>
 80072ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ae:	0038      	movs	r0, r7
 80072b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072b4:	47b0      	blx	r6
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	d100      	bne.n	80072bc <_printf_float+0x2c8>
 80072ba:	e6f9      	b.n	80070b0 <_printf_float+0xbc>
 80072bc:	2300      	movs	r3, #0
 80072be:	930a      	str	r3, [sp, #40]	; 0x28
 80072c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072c4:	425b      	negs	r3, r3
 80072c6:	4293      	cmp	r3, r2
 80072c8:	dc01      	bgt.n	80072ce <_printf_float+0x2da>
 80072ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072cc:	e797      	b.n	80071fe <_printf_float+0x20a>
 80072ce:	0022      	movs	r2, r4
 80072d0:	2301      	movs	r3, #1
 80072d2:	0038      	movs	r0, r7
 80072d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072d6:	321a      	adds	r2, #26
 80072d8:	47b0      	blx	r6
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	d100      	bne.n	80072e0 <_printf_float+0x2ec>
 80072de:	e6e7      	b.n	80070b0 <_printf_float+0xbc>
 80072e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e2:	3301      	adds	r3, #1
 80072e4:	e7eb      	b.n	80072be <_printf_float+0x2ca>
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	7fefffff 	.word	0x7fefffff
 80072ec:	0800ba28 	.word	0x0800ba28
 80072f0:	0800ba2c 	.word	0x0800ba2c
 80072f4:	0800ba30 	.word	0x0800ba30
 80072f8:	0800ba34 	.word	0x0800ba34
 80072fc:	0800ba38 	.word	0x0800ba38
 8007300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007304:	920a      	str	r2, [sp, #40]	; 0x28
 8007306:	429a      	cmp	r2, r3
 8007308:	dd00      	ble.n	800730c <_printf_float+0x318>
 800730a:	930a      	str	r3, [sp, #40]	; 0x28
 800730c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	dc3c      	bgt.n	800738c <_printf_float+0x398>
 8007312:	2300      	movs	r3, #0
 8007314:	930d      	str	r3, [sp, #52]	; 0x34
 8007316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007318:	43db      	mvns	r3, r3
 800731a:	17db      	asrs	r3, r3, #31
 800731c:	930f      	str	r3, [sp, #60]	; 0x3c
 800731e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007320:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007322:	930b      	str	r3, [sp, #44]	; 0x2c
 8007324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007326:	4013      	ands	r3, r2
 8007328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800732e:	4293      	cmp	r3, r2
 8007330:	dc34      	bgt.n	800739c <_printf_float+0x3a8>
 8007332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007336:	4293      	cmp	r3, r2
 8007338:	db3d      	blt.n	80073b6 <_printf_float+0x3c2>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	07db      	lsls	r3, r3, #31
 800733e:	d43a      	bmi.n	80073b6 <_printf_float+0x3c2>
 8007340:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007344:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	1a52      	subs	r2, r2, r1
 800734a:	920a      	str	r2, [sp, #40]	; 0x28
 800734c:	429a      	cmp	r2, r3
 800734e:	dd00      	ble.n	8007352 <_printf_float+0x35e>
 8007350:	930a      	str	r3, [sp, #40]	; 0x28
 8007352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007354:	2b00      	cmp	r3, #0
 8007356:	dc36      	bgt.n	80073c6 <_printf_float+0x3d2>
 8007358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735a:	2500      	movs	r5, #0
 800735c:	43db      	mvns	r3, r3
 800735e:	17db      	asrs	r3, r3, #31
 8007360:	930b      	str	r3, [sp, #44]	; 0x2c
 8007362:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007364:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007366:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007368:	1a9b      	subs	r3, r3, r2
 800736a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736c:	400a      	ands	r2, r1
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	42ab      	cmp	r3, r5
 8007372:	dc00      	bgt.n	8007376 <_printf_float+0x382>
 8007374:	e772      	b.n	800725c <_printf_float+0x268>
 8007376:	0022      	movs	r2, r4
 8007378:	2301      	movs	r3, #1
 800737a:	0038      	movs	r0, r7
 800737c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800737e:	321a      	adds	r2, #26
 8007380:	47b0      	blx	r6
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d100      	bne.n	8007388 <_printf_float+0x394>
 8007386:	e693      	b.n	80070b0 <_printf_float+0xbc>
 8007388:	3501      	adds	r5, #1
 800738a:	e7ea      	b.n	8007362 <_printf_float+0x36e>
 800738c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738e:	002a      	movs	r2, r5
 8007390:	0038      	movs	r0, r7
 8007392:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007394:	47b0      	blx	r6
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	d1bb      	bne.n	8007312 <_printf_float+0x31e>
 800739a:	e689      	b.n	80070b0 <_printf_float+0xbc>
 800739c:	0022      	movs	r2, r4
 800739e:	2301      	movs	r3, #1
 80073a0:	0038      	movs	r0, r7
 80073a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073a4:	321a      	adds	r2, #26
 80073a6:	47b0      	blx	r6
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d100      	bne.n	80073ae <_printf_float+0x3ba>
 80073ac:	e680      	b.n	80070b0 <_printf_float+0xbc>
 80073ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073b0:	3301      	adds	r3, #1
 80073b2:	930d      	str	r3, [sp, #52]	; 0x34
 80073b4:	e7b3      	b.n	800731e <_printf_float+0x32a>
 80073b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073b8:	0038      	movs	r0, r7
 80073ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073be:	47b0      	blx	r6
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d1bd      	bne.n	8007340 <_printf_float+0x34c>
 80073c4:	e674      	b.n	80070b0 <_printf_float+0xbc>
 80073c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c8:	0038      	movs	r0, r7
 80073ca:	18ea      	adds	r2, r5, r3
 80073cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d0:	47b0      	blx	r6
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	d1c0      	bne.n	8007358 <_printf_float+0x364>
 80073d6:	e66b      	b.n	80070b0 <_printf_float+0xbc>
 80073d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073da:	2b01      	cmp	r3, #1
 80073dc:	dc02      	bgt.n	80073e4 <_printf_float+0x3f0>
 80073de:	2301      	movs	r3, #1
 80073e0:	421a      	tst	r2, r3
 80073e2:	d034      	beq.n	800744e <_printf_float+0x45a>
 80073e4:	2301      	movs	r3, #1
 80073e6:	002a      	movs	r2, r5
 80073e8:	0038      	movs	r0, r7
 80073ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ec:	47b0      	blx	r6
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	d100      	bne.n	80073f4 <_printf_float+0x400>
 80073f2:	e65d      	b.n	80070b0 <_printf_float+0xbc>
 80073f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073f6:	0038      	movs	r0, r7
 80073f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073fc:	47b0      	blx	r6
 80073fe:	1c43      	adds	r3, r0, #1
 8007400:	d100      	bne.n	8007404 <_printf_float+0x410>
 8007402:	e655      	b.n	80070b0 <_printf_float+0xbc>
 8007404:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007406:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007408:	2200      	movs	r2, #0
 800740a:	2300      	movs	r3, #0
 800740c:	f7f9 f81c 	bl	8000448 <__aeabi_dcmpeq>
 8007410:	2800      	cmp	r0, #0
 8007412:	d11a      	bne.n	800744a <_printf_float+0x456>
 8007414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007416:	1c6a      	adds	r2, r5, #1
 8007418:	3b01      	subs	r3, #1
 800741a:	0038      	movs	r0, r7
 800741c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800741e:	47b0      	blx	r6
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d10e      	bne.n	8007442 <_printf_float+0x44e>
 8007424:	e644      	b.n	80070b0 <_printf_float+0xbc>
 8007426:	0022      	movs	r2, r4
 8007428:	2301      	movs	r3, #1
 800742a:	0038      	movs	r0, r7
 800742c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800742e:	321a      	adds	r2, #26
 8007430:	47b0      	blx	r6
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	d100      	bne.n	8007438 <_printf_float+0x444>
 8007436:	e63b      	b.n	80070b0 <_printf_float+0xbc>
 8007438:	3501      	adds	r5, #1
 800743a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800743c:	3b01      	subs	r3, #1
 800743e:	42ab      	cmp	r3, r5
 8007440:	dcf1      	bgt.n	8007426 <_printf_float+0x432>
 8007442:	0022      	movs	r2, r4
 8007444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007446:	3250      	adds	r2, #80	; 0x50
 8007448:	e6da      	b.n	8007200 <_printf_float+0x20c>
 800744a:	2500      	movs	r5, #0
 800744c:	e7f5      	b.n	800743a <_printf_float+0x446>
 800744e:	002a      	movs	r2, r5
 8007450:	e7e3      	b.n	800741a <_printf_float+0x426>
 8007452:	0022      	movs	r2, r4
 8007454:	2301      	movs	r3, #1
 8007456:	0038      	movs	r0, r7
 8007458:	9909      	ldr	r1, [sp, #36]	; 0x24
 800745a:	3219      	adds	r2, #25
 800745c:	47b0      	blx	r6
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	d100      	bne.n	8007464 <_printf_float+0x470>
 8007462:	e625      	b.n	80070b0 <_printf_float+0xbc>
 8007464:	3501      	adds	r5, #1
 8007466:	68e3      	ldr	r3, [r4, #12]
 8007468:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800746a:	1a9b      	subs	r3, r3, r2
 800746c:	42ab      	cmp	r3, r5
 800746e:	dcf0      	bgt.n	8007452 <_printf_float+0x45e>
 8007470:	e6f8      	b.n	8007264 <_printf_float+0x270>
 8007472:	2500      	movs	r5, #0
 8007474:	e7f7      	b.n	8007466 <_printf_float+0x472>
 8007476:	46c0      	nop			; (mov r8, r8)

08007478 <_printf_common>:
 8007478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800747a:	0015      	movs	r5, r2
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	688a      	ldr	r2, [r1, #8]
 8007480:	690b      	ldr	r3, [r1, #16]
 8007482:	000c      	movs	r4, r1
 8007484:	9000      	str	r0, [sp, #0]
 8007486:	4293      	cmp	r3, r2
 8007488:	da00      	bge.n	800748c <_printf_common+0x14>
 800748a:	0013      	movs	r3, r2
 800748c:	0022      	movs	r2, r4
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	3243      	adds	r2, #67	; 0x43
 8007492:	7812      	ldrb	r2, [r2, #0]
 8007494:	2a00      	cmp	r2, #0
 8007496:	d001      	beq.n	800749c <_printf_common+0x24>
 8007498:	3301      	adds	r3, #1
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	069b      	lsls	r3, r3, #26
 80074a0:	d502      	bpl.n	80074a8 <_printf_common+0x30>
 80074a2:	682b      	ldr	r3, [r5, #0]
 80074a4:	3302      	adds	r3, #2
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	6822      	ldr	r2, [r4, #0]
 80074aa:	2306      	movs	r3, #6
 80074ac:	0017      	movs	r7, r2
 80074ae:	401f      	ands	r7, r3
 80074b0:	421a      	tst	r2, r3
 80074b2:	d027      	beq.n	8007504 <_printf_common+0x8c>
 80074b4:	0023      	movs	r3, r4
 80074b6:	3343      	adds	r3, #67	; 0x43
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	1e5a      	subs	r2, r3, #1
 80074bc:	4193      	sbcs	r3, r2
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	0692      	lsls	r2, r2, #26
 80074c2:	d430      	bmi.n	8007526 <_printf_common+0xae>
 80074c4:	0022      	movs	r2, r4
 80074c6:	9901      	ldr	r1, [sp, #4]
 80074c8:	9800      	ldr	r0, [sp, #0]
 80074ca:	9e08      	ldr	r6, [sp, #32]
 80074cc:	3243      	adds	r2, #67	; 0x43
 80074ce:	47b0      	blx	r6
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d025      	beq.n	8007520 <_printf_common+0xa8>
 80074d4:	2306      	movs	r3, #6
 80074d6:	6820      	ldr	r0, [r4, #0]
 80074d8:	682a      	ldr	r2, [r5, #0]
 80074da:	68e1      	ldr	r1, [r4, #12]
 80074dc:	2500      	movs	r5, #0
 80074de:	4003      	ands	r3, r0
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d103      	bne.n	80074ec <_printf_common+0x74>
 80074e4:	1a8d      	subs	r5, r1, r2
 80074e6:	43eb      	mvns	r3, r5
 80074e8:	17db      	asrs	r3, r3, #31
 80074ea:	401d      	ands	r5, r3
 80074ec:	68a3      	ldr	r3, [r4, #8]
 80074ee:	6922      	ldr	r2, [r4, #16]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	dd01      	ble.n	80074f8 <_printf_common+0x80>
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	18ed      	adds	r5, r5, r3
 80074f8:	2700      	movs	r7, #0
 80074fa:	42bd      	cmp	r5, r7
 80074fc:	d120      	bne.n	8007540 <_printf_common+0xc8>
 80074fe:	2000      	movs	r0, #0
 8007500:	e010      	b.n	8007524 <_printf_common+0xac>
 8007502:	3701      	adds	r7, #1
 8007504:	68e3      	ldr	r3, [r4, #12]
 8007506:	682a      	ldr	r2, [r5, #0]
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	42bb      	cmp	r3, r7
 800750c:	ddd2      	ble.n	80074b4 <_printf_common+0x3c>
 800750e:	0022      	movs	r2, r4
 8007510:	2301      	movs	r3, #1
 8007512:	9901      	ldr	r1, [sp, #4]
 8007514:	9800      	ldr	r0, [sp, #0]
 8007516:	9e08      	ldr	r6, [sp, #32]
 8007518:	3219      	adds	r2, #25
 800751a:	47b0      	blx	r6
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d1f0      	bne.n	8007502 <_printf_common+0x8a>
 8007520:	2001      	movs	r0, #1
 8007522:	4240      	negs	r0, r0
 8007524:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007526:	2030      	movs	r0, #48	; 0x30
 8007528:	18e1      	adds	r1, r4, r3
 800752a:	3143      	adds	r1, #67	; 0x43
 800752c:	7008      	strb	r0, [r1, #0]
 800752e:	0021      	movs	r1, r4
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	3145      	adds	r1, #69	; 0x45
 8007534:	7809      	ldrb	r1, [r1, #0]
 8007536:	18a2      	adds	r2, r4, r2
 8007538:	3243      	adds	r2, #67	; 0x43
 800753a:	3302      	adds	r3, #2
 800753c:	7011      	strb	r1, [r2, #0]
 800753e:	e7c1      	b.n	80074c4 <_printf_common+0x4c>
 8007540:	0022      	movs	r2, r4
 8007542:	2301      	movs	r3, #1
 8007544:	9901      	ldr	r1, [sp, #4]
 8007546:	9800      	ldr	r0, [sp, #0]
 8007548:	9e08      	ldr	r6, [sp, #32]
 800754a:	321a      	adds	r2, #26
 800754c:	47b0      	blx	r6
 800754e:	1c43      	adds	r3, r0, #1
 8007550:	d0e6      	beq.n	8007520 <_printf_common+0xa8>
 8007552:	3701      	adds	r7, #1
 8007554:	e7d1      	b.n	80074fa <_printf_common+0x82>
	...

08007558 <_printf_i>:
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	b08b      	sub	sp, #44	; 0x2c
 800755c:	9206      	str	r2, [sp, #24]
 800755e:	000a      	movs	r2, r1
 8007560:	3243      	adds	r2, #67	; 0x43
 8007562:	9307      	str	r3, [sp, #28]
 8007564:	9005      	str	r0, [sp, #20]
 8007566:	9204      	str	r2, [sp, #16]
 8007568:	7e0a      	ldrb	r2, [r1, #24]
 800756a:	000c      	movs	r4, r1
 800756c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800756e:	2a78      	cmp	r2, #120	; 0x78
 8007570:	d807      	bhi.n	8007582 <_printf_i+0x2a>
 8007572:	2a62      	cmp	r2, #98	; 0x62
 8007574:	d809      	bhi.n	800758a <_printf_i+0x32>
 8007576:	2a00      	cmp	r2, #0
 8007578:	d100      	bne.n	800757c <_printf_i+0x24>
 800757a:	e0c1      	b.n	8007700 <_printf_i+0x1a8>
 800757c:	2a58      	cmp	r2, #88	; 0x58
 800757e:	d100      	bne.n	8007582 <_printf_i+0x2a>
 8007580:	e08c      	b.n	800769c <_printf_i+0x144>
 8007582:	0026      	movs	r6, r4
 8007584:	3642      	adds	r6, #66	; 0x42
 8007586:	7032      	strb	r2, [r6, #0]
 8007588:	e022      	b.n	80075d0 <_printf_i+0x78>
 800758a:	0010      	movs	r0, r2
 800758c:	3863      	subs	r0, #99	; 0x63
 800758e:	2815      	cmp	r0, #21
 8007590:	d8f7      	bhi.n	8007582 <_printf_i+0x2a>
 8007592:	f7f8 fdc9 	bl	8000128 <__gnu_thumb1_case_shi>
 8007596:	0016      	.short	0x0016
 8007598:	fff6001f 	.word	0xfff6001f
 800759c:	fff6fff6 	.word	0xfff6fff6
 80075a0:	001ffff6 	.word	0x001ffff6
 80075a4:	fff6fff6 	.word	0xfff6fff6
 80075a8:	fff6fff6 	.word	0xfff6fff6
 80075ac:	003600a8 	.word	0x003600a8
 80075b0:	fff6009a 	.word	0xfff6009a
 80075b4:	00b9fff6 	.word	0x00b9fff6
 80075b8:	0036fff6 	.word	0x0036fff6
 80075bc:	fff6fff6 	.word	0xfff6fff6
 80075c0:	009e      	.short	0x009e
 80075c2:	0026      	movs	r6, r4
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	3642      	adds	r6, #66	; 0x42
 80075c8:	1d11      	adds	r1, r2, #4
 80075ca:	6019      	str	r1, [r3, #0]
 80075cc:	6813      	ldr	r3, [r2, #0]
 80075ce:	7033      	strb	r3, [r6, #0]
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0a7      	b.n	8007724 <_printf_i+0x1cc>
 80075d4:	6808      	ldr	r0, [r1, #0]
 80075d6:	6819      	ldr	r1, [r3, #0]
 80075d8:	1d0a      	adds	r2, r1, #4
 80075da:	0605      	lsls	r5, r0, #24
 80075dc:	d50b      	bpl.n	80075f6 <_printf_i+0x9e>
 80075de:	680d      	ldr	r5, [r1, #0]
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	2d00      	cmp	r5, #0
 80075e4:	da03      	bge.n	80075ee <_printf_i+0x96>
 80075e6:	232d      	movs	r3, #45	; 0x2d
 80075e8:	9a04      	ldr	r2, [sp, #16]
 80075ea:	426d      	negs	r5, r5
 80075ec:	7013      	strb	r3, [r2, #0]
 80075ee:	4b61      	ldr	r3, [pc, #388]	; (8007774 <_printf_i+0x21c>)
 80075f0:	270a      	movs	r7, #10
 80075f2:	9303      	str	r3, [sp, #12]
 80075f4:	e01b      	b.n	800762e <_printf_i+0xd6>
 80075f6:	680d      	ldr	r5, [r1, #0]
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	0641      	lsls	r1, r0, #25
 80075fc:	d5f1      	bpl.n	80075e2 <_printf_i+0x8a>
 80075fe:	b22d      	sxth	r5, r5
 8007600:	e7ef      	b.n	80075e2 <_printf_i+0x8a>
 8007602:	680d      	ldr	r5, [r1, #0]
 8007604:	6819      	ldr	r1, [r3, #0]
 8007606:	1d08      	adds	r0, r1, #4
 8007608:	6018      	str	r0, [r3, #0]
 800760a:	062e      	lsls	r6, r5, #24
 800760c:	d501      	bpl.n	8007612 <_printf_i+0xba>
 800760e:	680d      	ldr	r5, [r1, #0]
 8007610:	e003      	b.n	800761a <_printf_i+0xc2>
 8007612:	066d      	lsls	r5, r5, #25
 8007614:	d5fb      	bpl.n	800760e <_printf_i+0xb6>
 8007616:	680d      	ldr	r5, [r1, #0]
 8007618:	b2ad      	uxth	r5, r5
 800761a:	4b56      	ldr	r3, [pc, #344]	; (8007774 <_printf_i+0x21c>)
 800761c:	2708      	movs	r7, #8
 800761e:	9303      	str	r3, [sp, #12]
 8007620:	2a6f      	cmp	r2, #111	; 0x6f
 8007622:	d000      	beq.n	8007626 <_printf_i+0xce>
 8007624:	3702      	adds	r7, #2
 8007626:	0023      	movs	r3, r4
 8007628:	2200      	movs	r2, #0
 800762a:	3343      	adds	r3, #67	; 0x43
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	6863      	ldr	r3, [r4, #4]
 8007630:	60a3      	str	r3, [r4, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	db03      	blt.n	800763e <_printf_i+0xe6>
 8007636:	2204      	movs	r2, #4
 8007638:	6821      	ldr	r1, [r4, #0]
 800763a:	4391      	bics	r1, r2
 800763c:	6021      	str	r1, [r4, #0]
 800763e:	2d00      	cmp	r5, #0
 8007640:	d102      	bne.n	8007648 <_printf_i+0xf0>
 8007642:	9e04      	ldr	r6, [sp, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00c      	beq.n	8007662 <_printf_i+0x10a>
 8007648:	9e04      	ldr	r6, [sp, #16]
 800764a:	0028      	movs	r0, r5
 800764c:	0039      	movs	r1, r7
 800764e:	f7f8 fdfb 	bl	8000248 <__aeabi_uidivmod>
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	3e01      	subs	r6, #1
 8007656:	5c5b      	ldrb	r3, [r3, r1]
 8007658:	7033      	strb	r3, [r6, #0]
 800765a:	002b      	movs	r3, r5
 800765c:	0005      	movs	r5, r0
 800765e:	429f      	cmp	r7, r3
 8007660:	d9f3      	bls.n	800764a <_printf_i+0xf2>
 8007662:	2f08      	cmp	r7, #8
 8007664:	d109      	bne.n	800767a <_printf_i+0x122>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	07db      	lsls	r3, r3, #31
 800766a:	d506      	bpl.n	800767a <_printf_i+0x122>
 800766c:	6863      	ldr	r3, [r4, #4]
 800766e:	6922      	ldr	r2, [r4, #16]
 8007670:	4293      	cmp	r3, r2
 8007672:	dc02      	bgt.n	800767a <_printf_i+0x122>
 8007674:	2330      	movs	r3, #48	; 0x30
 8007676:	3e01      	subs	r6, #1
 8007678:	7033      	strb	r3, [r6, #0]
 800767a:	9b04      	ldr	r3, [sp, #16]
 800767c:	1b9b      	subs	r3, r3, r6
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	9b07      	ldr	r3, [sp, #28]
 8007682:	0021      	movs	r1, r4
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	9805      	ldr	r0, [sp, #20]
 8007688:	9b06      	ldr	r3, [sp, #24]
 800768a:	aa09      	add	r2, sp, #36	; 0x24
 800768c:	f7ff fef4 	bl	8007478 <_printf_common>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d14c      	bne.n	800772e <_printf_i+0x1d6>
 8007694:	2001      	movs	r0, #1
 8007696:	4240      	negs	r0, r0
 8007698:	b00b      	add	sp, #44	; 0x2c
 800769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769c:	3145      	adds	r1, #69	; 0x45
 800769e:	700a      	strb	r2, [r1, #0]
 80076a0:	4a34      	ldr	r2, [pc, #208]	; (8007774 <_printf_i+0x21c>)
 80076a2:	9203      	str	r2, [sp, #12]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	ca20      	ldmia	r2!, {r5}
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	0608      	lsls	r0, r1, #24
 80076ae:	d516      	bpl.n	80076de <_printf_i+0x186>
 80076b0:	07cb      	lsls	r3, r1, #31
 80076b2:	d502      	bpl.n	80076ba <_printf_i+0x162>
 80076b4:	2320      	movs	r3, #32
 80076b6:	4319      	orrs	r1, r3
 80076b8:	6021      	str	r1, [r4, #0]
 80076ba:	2710      	movs	r7, #16
 80076bc:	2d00      	cmp	r5, #0
 80076be:	d1b2      	bne.n	8007626 <_printf_i+0xce>
 80076c0:	2320      	movs	r3, #32
 80076c2:	6822      	ldr	r2, [r4, #0]
 80076c4:	439a      	bics	r2, r3
 80076c6:	6022      	str	r2, [r4, #0]
 80076c8:	e7ad      	b.n	8007626 <_printf_i+0xce>
 80076ca:	2220      	movs	r2, #32
 80076cc:	6809      	ldr	r1, [r1, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	6022      	str	r2, [r4, #0]
 80076d2:	0022      	movs	r2, r4
 80076d4:	2178      	movs	r1, #120	; 0x78
 80076d6:	3245      	adds	r2, #69	; 0x45
 80076d8:	7011      	strb	r1, [r2, #0]
 80076da:	4a27      	ldr	r2, [pc, #156]	; (8007778 <_printf_i+0x220>)
 80076dc:	e7e1      	b.n	80076a2 <_printf_i+0x14a>
 80076de:	0648      	lsls	r0, r1, #25
 80076e0:	d5e6      	bpl.n	80076b0 <_printf_i+0x158>
 80076e2:	b2ad      	uxth	r5, r5
 80076e4:	e7e4      	b.n	80076b0 <_printf_i+0x158>
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	680d      	ldr	r5, [r1, #0]
 80076ea:	1d10      	adds	r0, r2, #4
 80076ec:	6949      	ldr	r1, [r1, #20]
 80076ee:	6018      	str	r0, [r3, #0]
 80076f0:	6813      	ldr	r3, [r2, #0]
 80076f2:	062e      	lsls	r6, r5, #24
 80076f4:	d501      	bpl.n	80076fa <_printf_i+0x1a2>
 80076f6:	6019      	str	r1, [r3, #0]
 80076f8:	e002      	b.n	8007700 <_printf_i+0x1a8>
 80076fa:	066d      	lsls	r5, r5, #25
 80076fc:	d5fb      	bpl.n	80076f6 <_printf_i+0x19e>
 80076fe:	8019      	strh	r1, [r3, #0]
 8007700:	2300      	movs	r3, #0
 8007702:	9e04      	ldr	r6, [sp, #16]
 8007704:	6123      	str	r3, [r4, #16]
 8007706:	e7bb      	b.n	8007680 <_printf_i+0x128>
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	1d11      	adds	r1, r2, #4
 800770c:	6019      	str	r1, [r3, #0]
 800770e:	6816      	ldr	r6, [r2, #0]
 8007710:	2100      	movs	r1, #0
 8007712:	0030      	movs	r0, r6
 8007714:	6862      	ldr	r2, [r4, #4]
 8007716:	f002 fb71 	bl	8009dfc <memchr>
 800771a:	2800      	cmp	r0, #0
 800771c:	d001      	beq.n	8007722 <_printf_i+0x1ca>
 800771e:	1b80      	subs	r0, r0, r6
 8007720:	6060      	str	r0, [r4, #4]
 8007722:	6863      	ldr	r3, [r4, #4]
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	2300      	movs	r3, #0
 8007728:	9a04      	ldr	r2, [sp, #16]
 800772a:	7013      	strb	r3, [r2, #0]
 800772c:	e7a8      	b.n	8007680 <_printf_i+0x128>
 800772e:	6923      	ldr	r3, [r4, #16]
 8007730:	0032      	movs	r2, r6
 8007732:	9906      	ldr	r1, [sp, #24]
 8007734:	9805      	ldr	r0, [sp, #20]
 8007736:	9d07      	ldr	r5, [sp, #28]
 8007738:	47a8      	blx	r5
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d0aa      	beq.n	8007694 <_printf_i+0x13c>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	079b      	lsls	r3, r3, #30
 8007742:	d415      	bmi.n	8007770 <_printf_i+0x218>
 8007744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007746:	68e0      	ldr	r0, [r4, #12]
 8007748:	4298      	cmp	r0, r3
 800774a:	daa5      	bge.n	8007698 <_printf_i+0x140>
 800774c:	0018      	movs	r0, r3
 800774e:	e7a3      	b.n	8007698 <_printf_i+0x140>
 8007750:	0022      	movs	r2, r4
 8007752:	2301      	movs	r3, #1
 8007754:	9906      	ldr	r1, [sp, #24]
 8007756:	9805      	ldr	r0, [sp, #20]
 8007758:	9e07      	ldr	r6, [sp, #28]
 800775a:	3219      	adds	r2, #25
 800775c:	47b0      	blx	r6
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	d098      	beq.n	8007694 <_printf_i+0x13c>
 8007762:	3501      	adds	r5, #1
 8007764:	68e3      	ldr	r3, [r4, #12]
 8007766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	42ab      	cmp	r3, r5
 800776c:	dcf0      	bgt.n	8007750 <_printf_i+0x1f8>
 800776e:	e7e9      	b.n	8007744 <_printf_i+0x1ec>
 8007770:	2500      	movs	r5, #0
 8007772:	e7f7      	b.n	8007764 <_printf_i+0x20c>
 8007774:	0800ba3a 	.word	0x0800ba3a
 8007778:	0800ba4b 	.word	0x0800ba4b

0800777c <_scanf_float>:
 800777c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777e:	b08b      	sub	sp, #44	; 0x2c
 8007780:	0015      	movs	r5, r2
 8007782:	9001      	str	r0, [sp, #4]
 8007784:	22ae      	movs	r2, #174	; 0xae
 8007786:	2000      	movs	r0, #0
 8007788:	9306      	str	r3, [sp, #24]
 800778a:	688b      	ldr	r3, [r1, #8]
 800778c:	000e      	movs	r6, r1
 800778e:	1e59      	subs	r1, r3, #1
 8007790:	0052      	lsls	r2, r2, #1
 8007792:	9005      	str	r0, [sp, #20]
 8007794:	4291      	cmp	r1, r2
 8007796:	d905      	bls.n	80077a4 <_scanf_float+0x28>
 8007798:	3b5e      	subs	r3, #94	; 0x5e
 800779a:	3bff      	subs	r3, #255	; 0xff
 800779c:	9305      	str	r3, [sp, #20]
 800779e:	235e      	movs	r3, #94	; 0x5e
 80077a0:	33ff      	adds	r3, #255	; 0xff
 80077a2:	60b3      	str	r3, [r6, #8]
 80077a4:	23f0      	movs	r3, #240	; 0xf0
 80077a6:	6832      	ldr	r2, [r6, #0]
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4313      	orrs	r3, r2
 80077ac:	6033      	str	r3, [r6, #0]
 80077ae:	0033      	movs	r3, r6
 80077b0:	2400      	movs	r4, #0
 80077b2:	331c      	adds	r3, #28
 80077b4:	001f      	movs	r7, r3
 80077b6:	9303      	str	r3, [sp, #12]
 80077b8:	9402      	str	r4, [sp, #8]
 80077ba:	9408      	str	r4, [sp, #32]
 80077bc:	9407      	str	r4, [sp, #28]
 80077be:	9400      	str	r4, [sp, #0]
 80077c0:	9404      	str	r4, [sp, #16]
 80077c2:	68b2      	ldr	r2, [r6, #8]
 80077c4:	2a00      	cmp	r2, #0
 80077c6:	d00a      	beq.n	80077de <_scanf_float+0x62>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b4e      	cmp	r3, #78	; 0x4e
 80077ce:	d844      	bhi.n	800785a <_scanf_float+0xde>
 80077d0:	0018      	movs	r0, r3
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d82c      	bhi.n	8007830 <_scanf_float+0xb4>
 80077d6:	382b      	subs	r0, #43	; 0x2b
 80077d8:	b2c1      	uxtb	r1, r0
 80077da:	290e      	cmp	r1, #14
 80077dc:	d92a      	bls.n	8007834 <_scanf_float+0xb8>
 80077de:	9b00      	ldr	r3, [sp, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <_scanf_float+0x70>
 80077e4:	6832      	ldr	r2, [r6, #0]
 80077e6:	4ba4      	ldr	r3, [pc, #656]	; (8007a78 <_scanf_float+0x2fc>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	6033      	str	r3, [r6, #0]
 80077ec:	9b02      	ldr	r3, [sp, #8]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d900      	bls.n	80077f6 <_scanf_float+0x7a>
 80077f4:	e0f9      	b.n	80079ea <_scanf_float+0x26e>
 80077f6:	24be      	movs	r4, #190	; 0xbe
 80077f8:	0064      	lsls	r4, r4, #1
 80077fa:	9b03      	ldr	r3, [sp, #12]
 80077fc:	429f      	cmp	r7, r3
 80077fe:	d900      	bls.n	8007802 <_scanf_float+0x86>
 8007800:	e0e9      	b.n	80079d6 <_scanf_float+0x25a>
 8007802:	2301      	movs	r3, #1
 8007804:	9302      	str	r3, [sp, #8]
 8007806:	e185      	b.n	8007b14 <_scanf_float+0x398>
 8007808:	0018      	movs	r0, r3
 800780a:	3861      	subs	r0, #97	; 0x61
 800780c:	280d      	cmp	r0, #13
 800780e:	d8e6      	bhi.n	80077de <_scanf_float+0x62>
 8007810:	f7f8 fc8a 	bl	8000128 <__gnu_thumb1_case_shi>
 8007814:	ffe50083 	.word	0xffe50083
 8007818:	ffe5ffe5 	.word	0xffe5ffe5
 800781c:	00a200b6 	.word	0x00a200b6
 8007820:	ffe5ffe5 	.word	0xffe5ffe5
 8007824:	ffe50089 	.word	0xffe50089
 8007828:	ffe5ffe5 	.word	0xffe5ffe5
 800782c:	0065ffe5 	.word	0x0065ffe5
 8007830:	3841      	subs	r0, #65	; 0x41
 8007832:	e7eb      	b.n	800780c <_scanf_float+0x90>
 8007834:	280e      	cmp	r0, #14
 8007836:	d8d2      	bhi.n	80077de <_scanf_float+0x62>
 8007838:	f7f8 fc76 	bl	8000128 <__gnu_thumb1_case_shi>
 800783c:	ffd1004b 	.word	0xffd1004b
 8007840:	0098004b 	.word	0x0098004b
 8007844:	0020ffd1 	.word	0x0020ffd1
 8007848:	00400040 	.word	0x00400040
 800784c:	00400040 	.word	0x00400040
 8007850:	00400040 	.word	0x00400040
 8007854:	00400040 	.word	0x00400040
 8007858:	0040      	.short	0x0040
 800785a:	2b6e      	cmp	r3, #110	; 0x6e
 800785c:	d809      	bhi.n	8007872 <_scanf_float+0xf6>
 800785e:	2b60      	cmp	r3, #96	; 0x60
 8007860:	d8d2      	bhi.n	8007808 <_scanf_float+0x8c>
 8007862:	2b54      	cmp	r3, #84	; 0x54
 8007864:	d07d      	beq.n	8007962 <_scanf_float+0x1e6>
 8007866:	2b59      	cmp	r3, #89	; 0x59
 8007868:	d1b9      	bne.n	80077de <_scanf_float+0x62>
 800786a:	2c07      	cmp	r4, #7
 800786c:	d1b7      	bne.n	80077de <_scanf_float+0x62>
 800786e:	2408      	movs	r4, #8
 8007870:	e02c      	b.n	80078cc <_scanf_float+0x150>
 8007872:	2b74      	cmp	r3, #116	; 0x74
 8007874:	d075      	beq.n	8007962 <_scanf_float+0x1e6>
 8007876:	2b79      	cmp	r3, #121	; 0x79
 8007878:	d0f7      	beq.n	800786a <_scanf_float+0xee>
 800787a:	e7b0      	b.n	80077de <_scanf_float+0x62>
 800787c:	6831      	ldr	r1, [r6, #0]
 800787e:	05c8      	lsls	r0, r1, #23
 8007880:	d51c      	bpl.n	80078bc <_scanf_float+0x140>
 8007882:	2380      	movs	r3, #128	; 0x80
 8007884:	4399      	bics	r1, r3
 8007886:	9b00      	ldr	r3, [sp, #0]
 8007888:	6031      	str	r1, [r6, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	9b05      	ldr	r3, [sp, #20]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <_scanf_float+0x120>
 8007894:	3b01      	subs	r3, #1
 8007896:	3201      	adds	r2, #1
 8007898:	9305      	str	r3, [sp, #20]
 800789a:	60b2      	str	r2, [r6, #8]
 800789c:	68b3      	ldr	r3, [r6, #8]
 800789e:	3b01      	subs	r3, #1
 80078a0:	60b3      	str	r3, [r6, #8]
 80078a2:	6933      	ldr	r3, [r6, #16]
 80078a4:	3301      	adds	r3, #1
 80078a6:	6133      	str	r3, [r6, #16]
 80078a8:	686b      	ldr	r3, [r5, #4]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	606b      	str	r3, [r5, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	dc00      	bgt.n	80078b4 <_scanf_float+0x138>
 80078b2:	e086      	b.n	80079c2 <_scanf_float+0x246>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	3301      	adds	r3, #1
 80078b8:	602b      	str	r3, [r5, #0]
 80078ba:	e782      	b.n	80077c2 <_scanf_float+0x46>
 80078bc:	9a02      	ldr	r2, [sp, #8]
 80078be:	1912      	adds	r2, r2, r4
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	d18c      	bne.n	80077de <_scanf_float+0x62>
 80078c4:	4a6d      	ldr	r2, [pc, #436]	; (8007a7c <_scanf_float+0x300>)
 80078c6:	6831      	ldr	r1, [r6, #0]
 80078c8:	400a      	ands	r2, r1
 80078ca:	6032      	str	r2, [r6, #0]
 80078cc:	703b      	strb	r3, [r7, #0]
 80078ce:	3701      	adds	r7, #1
 80078d0:	e7e4      	b.n	800789c <_scanf_float+0x120>
 80078d2:	2180      	movs	r1, #128	; 0x80
 80078d4:	6832      	ldr	r2, [r6, #0]
 80078d6:	420a      	tst	r2, r1
 80078d8:	d081      	beq.n	80077de <_scanf_float+0x62>
 80078da:	438a      	bics	r2, r1
 80078dc:	e7f5      	b.n	80078ca <_scanf_float+0x14e>
 80078de:	9a02      	ldr	r2, [sp, #8]
 80078e0:	2a00      	cmp	r2, #0
 80078e2:	d10f      	bne.n	8007904 <_scanf_float+0x188>
 80078e4:	9a00      	ldr	r2, [sp, #0]
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	d10f      	bne.n	800790a <_scanf_float+0x18e>
 80078ea:	6832      	ldr	r2, [r6, #0]
 80078ec:	21e0      	movs	r1, #224	; 0xe0
 80078ee:	0010      	movs	r0, r2
 80078f0:	00c9      	lsls	r1, r1, #3
 80078f2:	4008      	ands	r0, r1
 80078f4:	4288      	cmp	r0, r1
 80078f6:	d108      	bne.n	800790a <_scanf_float+0x18e>
 80078f8:	4961      	ldr	r1, [pc, #388]	; (8007a80 <_scanf_float+0x304>)
 80078fa:	400a      	ands	r2, r1
 80078fc:	6032      	str	r2, [r6, #0]
 80078fe:	2201      	movs	r2, #1
 8007900:	9202      	str	r2, [sp, #8]
 8007902:	e7e3      	b.n	80078cc <_scanf_float+0x150>
 8007904:	9a02      	ldr	r2, [sp, #8]
 8007906:	2a02      	cmp	r2, #2
 8007908:	d059      	beq.n	80079be <_scanf_float+0x242>
 800790a:	2c01      	cmp	r4, #1
 800790c:	d002      	beq.n	8007914 <_scanf_float+0x198>
 800790e:	2c04      	cmp	r4, #4
 8007910:	d000      	beq.n	8007914 <_scanf_float+0x198>
 8007912:	e764      	b.n	80077de <_scanf_float+0x62>
 8007914:	3401      	adds	r4, #1
 8007916:	b2e4      	uxtb	r4, r4
 8007918:	e7d8      	b.n	80078cc <_scanf_float+0x150>
 800791a:	9a02      	ldr	r2, [sp, #8]
 800791c:	2a01      	cmp	r2, #1
 800791e:	d000      	beq.n	8007922 <_scanf_float+0x1a6>
 8007920:	e75d      	b.n	80077de <_scanf_float+0x62>
 8007922:	2202      	movs	r2, #2
 8007924:	e7ec      	b.n	8007900 <_scanf_float+0x184>
 8007926:	2c00      	cmp	r4, #0
 8007928:	d110      	bne.n	800794c <_scanf_float+0x1d0>
 800792a:	9a00      	ldr	r2, [sp, #0]
 800792c:	2a00      	cmp	r2, #0
 800792e:	d000      	beq.n	8007932 <_scanf_float+0x1b6>
 8007930:	e758      	b.n	80077e4 <_scanf_float+0x68>
 8007932:	6832      	ldr	r2, [r6, #0]
 8007934:	21e0      	movs	r1, #224	; 0xe0
 8007936:	0010      	movs	r0, r2
 8007938:	00c9      	lsls	r1, r1, #3
 800793a:	4008      	ands	r0, r1
 800793c:	4288      	cmp	r0, r1
 800793e:	d000      	beq.n	8007942 <_scanf_float+0x1c6>
 8007940:	e754      	b.n	80077ec <_scanf_float+0x70>
 8007942:	494f      	ldr	r1, [pc, #316]	; (8007a80 <_scanf_float+0x304>)
 8007944:	3401      	adds	r4, #1
 8007946:	400a      	ands	r2, r1
 8007948:	6032      	str	r2, [r6, #0]
 800794a:	e7bf      	b.n	80078cc <_scanf_float+0x150>
 800794c:	21fd      	movs	r1, #253	; 0xfd
 800794e:	1ee2      	subs	r2, r4, #3
 8007950:	420a      	tst	r2, r1
 8007952:	d000      	beq.n	8007956 <_scanf_float+0x1da>
 8007954:	e743      	b.n	80077de <_scanf_float+0x62>
 8007956:	e7dd      	b.n	8007914 <_scanf_float+0x198>
 8007958:	2c02      	cmp	r4, #2
 800795a:	d000      	beq.n	800795e <_scanf_float+0x1e2>
 800795c:	e73f      	b.n	80077de <_scanf_float+0x62>
 800795e:	2403      	movs	r4, #3
 8007960:	e7b4      	b.n	80078cc <_scanf_float+0x150>
 8007962:	2c06      	cmp	r4, #6
 8007964:	d000      	beq.n	8007968 <_scanf_float+0x1ec>
 8007966:	e73a      	b.n	80077de <_scanf_float+0x62>
 8007968:	2407      	movs	r4, #7
 800796a:	e7af      	b.n	80078cc <_scanf_float+0x150>
 800796c:	6832      	ldr	r2, [r6, #0]
 800796e:	0591      	lsls	r1, r2, #22
 8007970:	d400      	bmi.n	8007974 <_scanf_float+0x1f8>
 8007972:	e734      	b.n	80077de <_scanf_float+0x62>
 8007974:	4943      	ldr	r1, [pc, #268]	; (8007a84 <_scanf_float+0x308>)
 8007976:	400a      	ands	r2, r1
 8007978:	6032      	str	r2, [r6, #0]
 800797a:	9a00      	ldr	r2, [sp, #0]
 800797c:	9204      	str	r2, [sp, #16]
 800797e:	e7a5      	b.n	80078cc <_scanf_float+0x150>
 8007980:	21a0      	movs	r1, #160	; 0xa0
 8007982:	2080      	movs	r0, #128	; 0x80
 8007984:	6832      	ldr	r2, [r6, #0]
 8007986:	00c9      	lsls	r1, r1, #3
 8007988:	4011      	ands	r1, r2
 800798a:	00c0      	lsls	r0, r0, #3
 800798c:	4281      	cmp	r1, r0
 800798e:	d006      	beq.n	800799e <_scanf_float+0x222>
 8007990:	4202      	tst	r2, r0
 8007992:	d100      	bne.n	8007996 <_scanf_float+0x21a>
 8007994:	e723      	b.n	80077de <_scanf_float+0x62>
 8007996:	9900      	ldr	r1, [sp, #0]
 8007998:	2900      	cmp	r1, #0
 800799a:	d100      	bne.n	800799e <_scanf_float+0x222>
 800799c:	e726      	b.n	80077ec <_scanf_float+0x70>
 800799e:	0591      	lsls	r1, r2, #22
 80079a0:	d404      	bmi.n	80079ac <_scanf_float+0x230>
 80079a2:	9900      	ldr	r1, [sp, #0]
 80079a4:	9804      	ldr	r0, [sp, #16]
 80079a6:	9708      	str	r7, [sp, #32]
 80079a8:	1a09      	subs	r1, r1, r0
 80079aa:	9107      	str	r1, [sp, #28]
 80079ac:	4934      	ldr	r1, [pc, #208]	; (8007a80 <_scanf_float+0x304>)
 80079ae:	400a      	ands	r2, r1
 80079b0:	21c0      	movs	r1, #192	; 0xc0
 80079b2:	0049      	lsls	r1, r1, #1
 80079b4:	430a      	orrs	r2, r1
 80079b6:	6032      	str	r2, [r6, #0]
 80079b8:	2200      	movs	r2, #0
 80079ba:	9200      	str	r2, [sp, #0]
 80079bc:	e786      	b.n	80078cc <_scanf_float+0x150>
 80079be:	2203      	movs	r2, #3
 80079c0:	e79e      	b.n	8007900 <_scanf_float+0x184>
 80079c2:	23c0      	movs	r3, #192	; 0xc0
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	0029      	movs	r1, r5
 80079c8:	58f3      	ldr	r3, [r6, r3]
 80079ca:	9801      	ldr	r0, [sp, #4]
 80079cc:	4798      	blx	r3
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d100      	bne.n	80079d4 <_scanf_float+0x258>
 80079d2:	e6f6      	b.n	80077c2 <_scanf_float+0x46>
 80079d4:	e703      	b.n	80077de <_scanf_float+0x62>
 80079d6:	3f01      	subs	r7, #1
 80079d8:	5933      	ldr	r3, [r6, r4]
 80079da:	002a      	movs	r2, r5
 80079dc:	7839      	ldrb	r1, [r7, #0]
 80079de:	9801      	ldr	r0, [sp, #4]
 80079e0:	4798      	blx	r3
 80079e2:	6933      	ldr	r3, [r6, #16]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	6133      	str	r3, [r6, #16]
 80079e8:	e707      	b.n	80077fa <_scanf_float+0x7e>
 80079ea:	1e63      	subs	r3, r4, #1
 80079ec:	2b06      	cmp	r3, #6
 80079ee:	d80e      	bhi.n	8007a0e <_scanf_float+0x292>
 80079f0:	9702      	str	r7, [sp, #8]
 80079f2:	2c02      	cmp	r4, #2
 80079f4:	d920      	bls.n	8007a38 <_scanf_float+0x2bc>
 80079f6:	1be3      	subs	r3, r4, r7
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	9305      	str	r3, [sp, #20]
 80079fc:	9b02      	ldr	r3, [sp, #8]
 80079fe:	9a05      	ldr	r2, [sp, #20]
 8007a00:	189b      	adds	r3, r3, r2
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d827      	bhi.n	8007a58 <_scanf_float+0x2dc>
 8007a08:	3c03      	subs	r4, #3
 8007a0a:	b2e4      	uxtb	r4, r4
 8007a0c:	1b3f      	subs	r7, r7, r4
 8007a0e:	6833      	ldr	r3, [r6, #0]
 8007a10:	05da      	lsls	r2, r3, #23
 8007a12:	d554      	bpl.n	8007abe <_scanf_float+0x342>
 8007a14:	055b      	lsls	r3, r3, #21
 8007a16:	d537      	bpl.n	8007a88 <_scanf_float+0x30c>
 8007a18:	24be      	movs	r4, #190	; 0xbe
 8007a1a:	0064      	lsls	r4, r4, #1
 8007a1c:	9b03      	ldr	r3, [sp, #12]
 8007a1e:	429f      	cmp	r7, r3
 8007a20:	d800      	bhi.n	8007a24 <_scanf_float+0x2a8>
 8007a22:	e6ee      	b.n	8007802 <_scanf_float+0x86>
 8007a24:	3f01      	subs	r7, #1
 8007a26:	5933      	ldr	r3, [r6, r4]
 8007a28:	002a      	movs	r2, r5
 8007a2a:	7839      	ldrb	r1, [r7, #0]
 8007a2c:	9801      	ldr	r0, [sp, #4]
 8007a2e:	4798      	blx	r3
 8007a30:	6933      	ldr	r3, [r6, #16]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	6133      	str	r3, [r6, #16]
 8007a36:	e7f1      	b.n	8007a1c <_scanf_float+0x2a0>
 8007a38:	24be      	movs	r4, #190	; 0xbe
 8007a3a:	0064      	lsls	r4, r4, #1
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	429f      	cmp	r7, r3
 8007a40:	d800      	bhi.n	8007a44 <_scanf_float+0x2c8>
 8007a42:	e6de      	b.n	8007802 <_scanf_float+0x86>
 8007a44:	3f01      	subs	r7, #1
 8007a46:	5933      	ldr	r3, [r6, r4]
 8007a48:	002a      	movs	r2, r5
 8007a4a:	7839      	ldrb	r1, [r7, #0]
 8007a4c:	9801      	ldr	r0, [sp, #4]
 8007a4e:	4798      	blx	r3
 8007a50:	6933      	ldr	r3, [r6, #16]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	6133      	str	r3, [r6, #16]
 8007a56:	e7f1      	b.n	8007a3c <_scanf_float+0x2c0>
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	002a      	movs	r2, r5
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	7819      	ldrb	r1, [r3, #0]
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	23be      	movs	r3, #190	; 0xbe
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	58f3      	ldr	r3, [r6, r3]
 8007a68:	9801      	ldr	r0, [sp, #4]
 8007a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a6c:	4798      	blx	r3
 8007a6e:	6933      	ldr	r3, [r6, #16]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	6133      	str	r3, [r6, #16]
 8007a74:	e7c2      	b.n	80079fc <_scanf_float+0x280>
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	fffffeff 	.word	0xfffffeff
 8007a7c:	fffffe7f 	.word	0xfffffe7f
 8007a80:	fffff87f 	.word	0xfffff87f
 8007a84:	fffffd7f 	.word	0xfffffd7f
 8007a88:	6933      	ldr	r3, [r6, #16]
 8007a8a:	1e7c      	subs	r4, r7, #1
 8007a8c:	7821      	ldrb	r1, [r4, #0]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	6133      	str	r3, [r6, #16]
 8007a92:	2965      	cmp	r1, #101	; 0x65
 8007a94:	d00c      	beq.n	8007ab0 <_scanf_float+0x334>
 8007a96:	2945      	cmp	r1, #69	; 0x45
 8007a98:	d00a      	beq.n	8007ab0 <_scanf_float+0x334>
 8007a9a:	23be      	movs	r3, #190	; 0xbe
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	58f3      	ldr	r3, [r6, r3]
 8007aa0:	002a      	movs	r2, r5
 8007aa2:	9801      	ldr	r0, [sp, #4]
 8007aa4:	4798      	blx	r3
 8007aa6:	6933      	ldr	r3, [r6, #16]
 8007aa8:	1ebc      	subs	r4, r7, #2
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	7821      	ldrb	r1, [r4, #0]
 8007aae:	6133      	str	r3, [r6, #16]
 8007ab0:	23be      	movs	r3, #190	; 0xbe
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	002a      	movs	r2, r5
 8007ab6:	58f3      	ldr	r3, [r6, r3]
 8007ab8:	9801      	ldr	r0, [sp, #4]
 8007aba:	4798      	blx	r3
 8007abc:	0027      	movs	r7, r4
 8007abe:	6832      	ldr	r2, [r6, #0]
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	0011      	movs	r1, r2
 8007ac4:	4019      	ands	r1, r3
 8007ac6:	9102      	str	r1, [sp, #8]
 8007ac8:	421a      	tst	r2, r3
 8007aca:	d158      	bne.n	8007b7e <_scanf_float+0x402>
 8007acc:	23c0      	movs	r3, #192	; 0xc0
 8007ace:	7039      	strb	r1, [r7, #0]
 8007ad0:	6832      	ldr	r2, [r6, #0]
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	2280      	movs	r2, #128	; 0x80
 8007ad8:	00d2      	lsls	r2, r2, #3
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d11d      	bne.n	8007b1a <_scanf_float+0x39e>
 8007ade:	9b04      	ldr	r3, [sp, #16]
 8007ae0:	9a00      	ldr	r2, [sp, #0]
 8007ae2:	9900      	ldr	r1, [sp, #0]
 8007ae4:	1a9a      	subs	r2, r3, r2
 8007ae6:	428b      	cmp	r3, r1
 8007ae8:	d124      	bne.n	8007b34 <_scanf_float+0x3b8>
 8007aea:	2200      	movs	r2, #0
 8007aec:	9903      	ldr	r1, [sp, #12]
 8007aee:	9801      	ldr	r0, [sp, #4]
 8007af0:	f000 feae 	bl	8008850 <_strtod_r>
 8007af4:	9b06      	ldr	r3, [sp, #24]
 8007af6:	000d      	movs	r5, r1
 8007af8:	6831      	ldr	r1, [r6, #0]
 8007afa:	0004      	movs	r4, r0
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	078a      	lsls	r2, r1, #30
 8007b00:	d525      	bpl.n	8007b4e <_scanf_float+0x3d2>
 8007b02:	1d1a      	adds	r2, r3, #4
 8007b04:	9906      	ldr	r1, [sp, #24]
 8007b06:	600a      	str	r2, [r1, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	601c      	str	r4, [r3, #0]
 8007b0c:	605d      	str	r5, [r3, #4]
 8007b0e:	68f3      	ldr	r3, [r6, #12]
 8007b10:	3301      	adds	r3, #1
 8007b12:	60f3      	str	r3, [r6, #12]
 8007b14:	9802      	ldr	r0, [sp, #8]
 8007b16:	b00b      	add	sp, #44	; 0x2c
 8007b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b1a:	9b07      	ldr	r3, [sp, #28]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0e4      	beq.n	8007aea <_scanf_float+0x36e>
 8007b20:	9b08      	ldr	r3, [sp, #32]
 8007b22:	9a02      	ldr	r2, [sp, #8]
 8007b24:	1c59      	adds	r1, r3, #1
 8007b26:	9801      	ldr	r0, [sp, #4]
 8007b28:	230a      	movs	r3, #10
 8007b2a:	f000 ff27 	bl	800897c <_strtol_r>
 8007b2e:	9b07      	ldr	r3, [sp, #28]
 8007b30:	9f08      	ldr	r7, [sp, #32]
 8007b32:	1ac2      	subs	r2, r0, r3
 8007b34:	0033      	movs	r3, r6
 8007b36:	3370      	adds	r3, #112	; 0x70
 8007b38:	33ff      	adds	r3, #255	; 0xff
 8007b3a:	429f      	cmp	r7, r3
 8007b3c:	d302      	bcc.n	8007b44 <_scanf_float+0x3c8>
 8007b3e:	0037      	movs	r7, r6
 8007b40:	376f      	adds	r7, #111	; 0x6f
 8007b42:	37ff      	adds	r7, #255	; 0xff
 8007b44:	0038      	movs	r0, r7
 8007b46:	490f      	ldr	r1, [pc, #60]	; (8007b84 <_scanf_float+0x408>)
 8007b48:	f000 f836 	bl	8007bb8 <siprintf>
 8007b4c:	e7cd      	b.n	8007aea <_scanf_float+0x36e>
 8007b4e:	1d1a      	adds	r2, r3, #4
 8007b50:	0749      	lsls	r1, r1, #29
 8007b52:	d4d7      	bmi.n	8007b04 <_scanf_float+0x388>
 8007b54:	9906      	ldr	r1, [sp, #24]
 8007b56:	0020      	movs	r0, r4
 8007b58:	600a      	str	r2, [r1, #0]
 8007b5a:	681f      	ldr	r7, [r3, #0]
 8007b5c:	0022      	movs	r2, r4
 8007b5e:	002b      	movs	r3, r5
 8007b60:	0029      	movs	r1, r5
 8007b62:	f7fb f887 	bl	8002c74 <__aeabi_dcmpun>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d004      	beq.n	8007b74 <_scanf_float+0x3f8>
 8007b6a:	4807      	ldr	r0, [pc, #28]	; (8007b88 <_scanf_float+0x40c>)
 8007b6c:	f000 f820 	bl	8007bb0 <nanf>
 8007b70:	6038      	str	r0, [r7, #0]
 8007b72:	e7cc      	b.n	8007b0e <_scanf_float+0x392>
 8007b74:	0020      	movs	r0, r4
 8007b76:	0029      	movs	r1, r5
 8007b78:	f7fb f926 	bl	8002dc8 <__aeabi_d2f>
 8007b7c:	e7f8      	b.n	8007b70 <_scanf_float+0x3f4>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e640      	b.n	8007804 <_scanf_float+0x88>
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	0800ba5c 	.word	0x0800ba5c
 8007b88:	0800bd68 	.word	0x0800bd68

08007b8c <_sbrk_r>:
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	b570      	push	{r4, r5, r6, lr}
 8007b90:	4d06      	ldr	r5, [pc, #24]	; (8007bac <_sbrk_r+0x20>)
 8007b92:	0004      	movs	r4, r0
 8007b94:	0008      	movs	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7fc fad8 	bl	800414c <_sbrk>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d103      	bne.n	8007ba8 <_sbrk_r+0x1c>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d000      	beq.n	8007ba8 <_sbrk_r+0x1c>
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	bd70      	pop	{r4, r5, r6, pc}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	20000548 	.word	0x20000548

08007bb0 <nanf>:
 8007bb0:	4800      	ldr	r0, [pc, #0]	; (8007bb4 <nanf+0x4>)
 8007bb2:	4770      	bx	lr
 8007bb4:	7fc00000 	.word	0x7fc00000

08007bb8 <siprintf>:
 8007bb8:	b40e      	push	{r1, r2, r3}
 8007bba:	b500      	push	{lr}
 8007bbc:	490b      	ldr	r1, [pc, #44]	; (8007bec <siprintf+0x34>)
 8007bbe:	b09c      	sub	sp, #112	; 0x70
 8007bc0:	ab1d      	add	r3, sp, #116	; 0x74
 8007bc2:	9002      	str	r0, [sp, #8]
 8007bc4:	9006      	str	r0, [sp, #24]
 8007bc6:	9107      	str	r1, [sp, #28]
 8007bc8:	9104      	str	r1, [sp, #16]
 8007bca:	4809      	ldr	r0, [pc, #36]	; (8007bf0 <siprintf+0x38>)
 8007bcc:	4909      	ldr	r1, [pc, #36]	; (8007bf4 <siprintf+0x3c>)
 8007bce:	cb04      	ldmia	r3!, {r2}
 8007bd0:	9105      	str	r1, [sp, #20]
 8007bd2:	6800      	ldr	r0, [r0, #0]
 8007bd4:	a902      	add	r1, sp, #8
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	f002 fe84 	bl	800a8e4 <_svfiprintf_r>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9a02      	ldr	r2, [sp, #8]
 8007be0:	7013      	strb	r3, [r2, #0]
 8007be2:	b01c      	add	sp, #112	; 0x70
 8007be4:	bc08      	pop	{r3}
 8007be6:	b003      	add	sp, #12
 8007be8:	4718      	bx	r3
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	7fffffff 	.word	0x7fffffff
 8007bf0:	2000000c 	.word	0x2000000c
 8007bf4:	ffff0208 	.word	0xffff0208

08007bf8 <sulp>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	0016      	movs	r6, r2
 8007bfc:	000d      	movs	r5, r1
 8007bfe:	f002 fc9d 	bl	800a53c <__ulp>
 8007c02:	2e00      	cmp	r6, #0
 8007c04:	d00d      	beq.n	8007c22 <sulp+0x2a>
 8007c06:	236b      	movs	r3, #107	; 0x6b
 8007c08:	006a      	lsls	r2, r5, #1
 8007c0a:	0d52      	lsrs	r2, r2, #21
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dd07      	ble.n	8007c22 <sulp+0x2a>
 8007c12:	2400      	movs	r4, #0
 8007c14:	4a03      	ldr	r2, [pc, #12]	; (8007c24 <sulp+0x2c>)
 8007c16:	051b      	lsls	r3, r3, #20
 8007c18:	189d      	adds	r5, r3, r2
 8007c1a:	002b      	movs	r3, r5
 8007c1c:	0022      	movs	r2, r4
 8007c1e:	f7fa fa2b 	bl	8002078 <__aeabi_dmul>
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	3ff00000 	.word	0x3ff00000

08007c28 <_strtod_l>:
 8007c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c2a:	001d      	movs	r5, r3
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	b0a5      	sub	sp, #148	; 0x94
 8007c30:	9320      	str	r3, [sp, #128]	; 0x80
 8007c32:	4bac      	ldr	r3, [pc, #688]	; (8007ee4 <_strtod_l+0x2bc>)
 8007c34:	9005      	str	r0, [sp, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	9108      	str	r1, [sp, #32]
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	9307      	str	r3, [sp, #28]
 8007c3e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c40:	f7f8 fa60 	bl	8000104 <strlen>
 8007c44:	2600      	movs	r6, #0
 8007c46:	0004      	movs	r4, r0
 8007c48:	2700      	movs	r7, #0
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	931f      	str	r3, [sp, #124]	; 0x7c
 8007c4e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007c50:	7813      	ldrb	r3, [r2, #0]
 8007c52:	2b2b      	cmp	r3, #43	; 0x2b
 8007c54:	d058      	beq.n	8007d08 <_strtod_l+0xe0>
 8007c56:	d844      	bhi.n	8007ce2 <_strtod_l+0xba>
 8007c58:	2b0d      	cmp	r3, #13
 8007c5a:	d83d      	bhi.n	8007cd8 <_strtod_l+0xb0>
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d83d      	bhi.n	8007cdc <_strtod_l+0xb4>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d047      	beq.n	8007cf4 <_strtod_l+0xcc>
 8007c64:	2300      	movs	r3, #0
 8007c66:	930e      	str	r3, [sp, #56]	; 0x38
 8007c68:	2200      	movs	r2, #0
 8007c6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c6c:	920a      	str	r2, [sp, #40]	; 0x28
 8007c6e:	9306      	str	r3, [sp, #24]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b30      	cmp	r3, #48	; 0x30
 8007c74:	d000      	beq.n	8007c78 <_strtod_l+0x50>
 8007c76:	e07f      	b.n	8007d78 <_strtod_l+0x150>
 8007c78:	9b06      	ldr	r3, [sp, #24]
 8007c7a:	3220      	adds	r2, #32
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	4393      	bics	r3, r2
 8007c80:	2b58      	cmp	r3, #88	; 0x58
 8007c82:	d000      	beq.n	8007c86 <_strtod_l+0x5e>
 8007c84:	e06e      	b.n	8007d64 <_strtod_l+0x13c>
 8007c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c88:	9502      	str	r5, [sp, #8]
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	ab20      	add	r3, sp, #128	; 0x80
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	4a95      	ldr	r2, [pc, #596]	; (8007ee8 <_strtod_l+0x2c0>)
 8007c92:	ab21      	add	r3, sp, #132	; 0x84
 8007c94:	9805      	ldr	r0, [sp, #20]
 8007c96:	a91f      	add	r1, sp, #124	; 0x7c
 8007c98:	f001 fd90 	bl	80097bc <__gethex>
 8007c9c:	2307      	movs	r3, #7
 8007c9e:	0005      	movs	r5, r0
 8007ca0:	0004      	movs	r4, r0
 8007ca2:	401d      	ands	r5, r3
 8007ca4:	4218      	tst	r0, r3
 8007ca6:	d006      	beq.n	8007cb6 <_strtod_l+0x8e>
 8007ca8:	2d06      	cmp	r5, #6
 8007caa:	d12f      	bne.n	8007d0c <_strtod_l+0xe4>
 8007cac:	9b06      	ldr	r3, [sp, #24]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	931f      	str	r3, [sp, #124]	; 0x7c
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	930e      	str	r3, [sp, #56]	; 0x38
 8007cb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <_strtod_l+0x9a>
 8007cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cbe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01c      	beq.n	8007d02 <_strtod_l+0xda>
 8007cc8:	2380      	movs	r3, #128	; 0x80
 8007cca:	0032      	movs	r2, r6
 8007ccc:	061b      	lsls	r3, r3, #24
 8007cce:	18fb      	adds	r3, r7, r3
 8007cd0:	0010      	movs	r0, r2
 8007cd2:	0019      	movs	r1, r3
 8007cd4:	b025      	add	sp, #148	; 0x94
 8007cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d1c3      	bne.n	8007c64 <_strtod_l+0x3c>
 8007cdc:	3201      	adds	r2, #1
 8007cde:	921f      	str	r2, [sp, #124]	; 0x7c
 8007ce0:	e7b5      	b.n	8007c4e <_strtod_l+0x26>
 8007ce2:	2b2d      	cmp	r3, #45	; 0x2d
 8007ce4:	d1be      	bne.n	8007c64 <_strtod_l+0x3c>
 8007ce6:	3b2c      	subs	r3, #44	; 0x2c
 8007ce8:	930e      	str	r3, [sp, #56]	; 0x38
 8007cea:	1c53      	adds	r3, r2, #1
 8007cec:	931f      	str	r3, [sp, #124]	; 0x7c
 8007cee:	7853      	ldrb	r3, [r2, #1]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1b9      	bne.n	8007c68 <_strtod_l+0x40>
 8007cf4:	9b08      	ldr	r3, [sp, #32]
 8007cf6:	931f      	str	r3, [sp, #124]	; 0x7c
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	930e      	str	r3, [sp, #56]	; 0x38
 8007cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1dc      	bne.n	8007cbc <_strtod_l+0x94>
 8007d02:	0032      	movs	r2, r6
 8007d04:	003b      	movs	r3, r7
 8007d06:	e7e3      	b.n	8007cd0 <_strtod_l+0xa8>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e7ed      	b.n	8007ce8 <_strtod_l+0xc0>
 8007d0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d0e:	2a00      	cmp	r2, #0
 8007d10:	d007      	beq.n	8007d22 <_strtod_l+0xfa>
 8007d12:	2135      	movs	r1, #53	; 0x35
 8007d14:	a822      	add	r0, sp, #136	; 0x88
 8007d16:	f002 fd12 	bl	800a73e <__copybits>
 8007d1a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007d1c:	9805      	ldr	r0, [sp, #20]
 8007d1e:	f002 f8cd 	bl	8009ebc <_Bfree>
 8007d22:	1e68      	subs	r0, r5, #1
 8007d24:	2804      	cmp	r0, #4
 8007d26:	d806      	bhi.n	8007d36 <_strtod_l+0x10e>
 8007d28:	f7f8 f9f4 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007d2c:	1816030b 	.word	0x1816030b
 8007d30:	0b          	.byte	0x0b
 8007d31:	00          	.byte	0x00
 8007d32:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007d34:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007d36:	0723      	lsls	r3, r4, #28
 8007d38:	d5bd      	bpl.n	8007cb6 <_strtod_l+0x8e>
 8007d3a:	2380      	movs	r3, #128	; 0x80
 8007d3c:	061b      	lsls	r3, r3, #24
 8007d3e:	431f      	orrs	r7, r3
 8007d40:	e7b9      	b.n	8007cb6 <_strtod_l+0x8e>
 8007d42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d44:	4a69      	ldr	r2, [pc, #420]	; (8007eec <_strtod_l+0x2c4>)
 8007d46:	496a      	ldr	r1, [pc, #424]	; (8007ef0 <_strtod_l+0x2c8>)
 8007d48:	401a      	ands	r2, r3
 8007d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d4c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007d4e:	185b      	adds	r3, r3, r1
 8007d50:	051b      	lsls	r3, r3, #20
 8007d52:	431a      	orrs	r2, r3
 8007d54:	0017      	movs	r7, r2
 8007d56:	e7ee      	b.n	8007d36 <_strtod_l+0x10e>
 8007d58:	4f66      	ldr	r7, [pc, #408]	; (8007ef4 <_strtod_l+0x2cc>)
 8007d5a:	e7ec      	b.n	8007d36 <_strtod_l+0x10e>
 8007d5c:	2601      	movs	r6, #1
 8007d5e:	4f66      	ldr	r7, [pc, #408]	; (8007ef8 <_strtod_l+0x2d0>)
 8007d60:	4276      	negs	r6, r6
 8007d62:	e7e8      	b.n	8007d36 <_strtod_l+0x10e>
 8007d64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	921f      	str	r2, [sp, #124]	; 0x7c
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b30      	cmp	r3, #48	; 0x30
 8007d6e:	d0f9      	beq.n	8007d64 <_strtod_l+0x13c>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0a0      	beq.n	8007cb6 <_strtod_l+0x8e>
 8007d74:	2301      	movs	r3, #1
 8007d76:	930a      	str	r3, [sp, #40]	; 0x28
 8007d78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d7a:	220a      	movs	r2, #10
 8007d7c:	9310      	str	r3, [sp, #64]	; 0x40
 8007d7e:	2300      	movs	r3, #0
 8007d80:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d82:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d84:	9309      	str	r3, [sp, #36]	; 0x24
 8007d86:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007d88:	7805      	ldrb	r5, [r0, #0]
 8007d8a:	002b      	movs	r3, r5
 8007d8c:	3b30      	subs	r3, #48	; 0x30
 8007d8e:	b2d9      	uxtb	r1, r3
 8007d90:	2909      	cmp	r1, #9
 8007d92:	d927      	bls.n	8007de4 <_strtod_l+0x1bc>
 8007d94:	0022      	movs	r2, r4
 8007d96:	9907      	ldr	r1, [sp, #28]
 8007d98:	f002 feaa 	bl	800aaf0 <strncmp>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d033      	beq.n	8007e08 <_strtod_l+0x1e0>
 8007da0:	2000      	movs	r0, #0
 8007da2:	002b      	movs	r3, r5
 8007da4:	4684      	mov	ip, r0
 8007da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da8:	900c      	str	r0, [sp, #48]	; 0x30
 8007daa:	9206      	str	r2, [sp, #24]
 8007dac:	2220      	movs	r2, #32
 8007dae:	0019      	movs	r1, r3
 8007db0:	4391      	bics	r1, r2
 8007db2:	000a      	movs	r2, r1
 8007db4:	2100      	movs	r1, #0
 8007db6:	9107      	str	r1, [sp, #28]
 8007db8:	2a45      	cmp	r2, #69	; 0x45
 8007dba:	d000      	beq.n	8007dbe <_strtod_l+0x196>
 8007dbc:	e0c5      	b.n	8007f4a <_strtod_l+0x322>
 8007dbe:	9b06      	ldr	r3, [sp, #24]
 8007dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dc2:	4303      	orrs	r3, r0
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	428b      	cmp	r3, r1
 8007dc8:	d094      	beq.n	8007cf4 <_strtod_l+0xcc>
 8007dca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007dcc:	9308      	str	r3, [sp, #32]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	931f      	str	r3, [sp, #124]	; 0x7c
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	785b      	ldrb	r3, [r3, #1]
 8007dd6:	2b2b      	cmp	r3, #43	; 0x2b
 8007dd8:	d076      	beq.n	8007ec8 <_strtod_l+0x2a0>
 8007dda:	000c      	movs	r4, r1
 8007ddc:	2b2d      	cmp	r3, #45	; 0x2d
 8007dde:	d179      	bne.n	8007ed4 <_strtod_l+0x2ac>
 8007de0:	2401      	movs	r4, #1
 8007de2:	e072      	b.n	8007eca <_strtod_l+0x2a2>
 8007de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007de6:	2908      	cmp	r1, #8
 8007de8:	dc09      	bgt.n	8007dfe <_strtod_l+0x1d6>
 8007dea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dec:	4351      	muls	r1, r2
 8007dee:	185b      	adds	r3, r3, r1
 8007df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df4:	3001      	adds	r0, #1
 8007df6:	3301      	adds	r3, #1
 8007df8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfa:	901f      	str	r0, [sp, #124]	; 0x7c
 8007dfc:	e7c3      	b.n	8007d86 <_strtod_l+0x15e>
 8007dfe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e00:	4351      	muls	r1, r2
 8007e02:	185b      	adds	r3, r3, r1
 8007e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e06:	e7f4      	b.n	8007df2 <_strtod_l+0x1ca>
 8007e08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e0c:	191c      	adds	r4, r3, r4
 8007e0e:	941f      	str	r4, [sp, #124]	; 0x7c
 8007e10:	7823      	ldrb	r3, [r4, #0]
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	d039      	beq.n	8007e8a <_strtod_l+0x262>
 8007e16:	900c      	str	r0, [sp, #48]	; 0x30
 8007e18:	9206      	str	r2, [sp, #24]
 8007e1a:	001a      	movs	r2, r3
 8007e1c:	3a30      	subs	r2, #48	; 0x30
 8007e1e:	2a09      	cmp	r2, #9
 8007e20:	d912      	bls.n	8007e48 <_strtod_l+0x220>
 8007e22:	2201      	movs	r2, #1
 8007e24:	4694      	mov	ip, r2
 8007e26:	e7c1      	b.n	8007dac <_strtod_l+0x184>
 8007e28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007e30:	785b      	ldrb	r3, [r3, #1]
 8007e32:	2b30      	cmp	r3, #48	; 0x30
 8007e34:	d0f8      	beq.n	8007e28 <_strtod_l+0x200>
 8007e36:	001a      	movs	r2, r3
 8007e38:	3a31      	subs	r2, #49	; 0x31
 8007e3a:	2a08      	cmp	r2, #8
 8007e3c:	d83f      	bhi.n	8007ebe <_strtod_l+0x296>
 8007e3e:	900c      	str	r0, [sp, #48]	; 0x30
 8007e40:	2000      	movs	r0, #0
 8007e42:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007e44:	9006      	str	r0, [sp, #24]
 8007e46:	9210      	str	r2, [sp, #64]	; 0x40
 8007e48:	001a      	movs	r2, r3
 8007e4a:	1c41      	adds	r1, r0, #1
 8007e4c:	3a30      	subs	r2, #48	; 0x30
 8007e4e:	2b30      	cmp	r3, #48	; 0x30
 8007e50:	d015      	beq.n	8007e7e <_strtod_l+0x256>
 8007e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e54:	185b      	adds	r3, r3, r1
 8007e56:	210a      	movs	r1, #10
 8007e58:	930c      	str	r3, [sp, #48]	; 0x30
 8007e5a:	9b06      	ldr	r3, [sp, #24]
 8007e5c:	18c4      	adds	r4, r0, r3
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	d115      	bne.n	8007e8e <_strtod_l+0x266>
 8007e62:	9906      	ldr	r1, [sp, #24]
 8007e64:	9b06      	ldr	r3, [sp, #24]
 8007e66:	3101      	adds	r1, #1
 8007e68:	1809      	adds	r1, r1, r0
 8007e6a:	181b      	adds	r3, r3, r0
 8007e6c:	9106      	str	r1, [sp, #24]
 8007e6e:	2b08      	cmp	r3, #8
 8007e70:	dc1b      	bgt.n	8007eaa <_strtod_l+0x282>
 8007e72:	230a      	movs	r3, #10
 8007e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e76:	434b      	muls	r3, r1
 8007e78:	2100      	movs	r1, #0
 8007e7a:	18d3      	adds	r3, r2, r3
 8007e7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e80:	0008      	movs	r0, r1
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	921f      	str	r2, [sp, #124]	; 0x7c
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	e7c7      	b.n	8007e1a <_strtod_l+0x1f2>
 8007e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e8c:	e7d1      	b.n	8007e32 <_strtod_l+0x20a>
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	dc04      	bgt.n	8007e9c <_strtod_l+0x274>
 8007e92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007e94:	434d      	muls	r5, r1
 8007e96:	950b      	str	r5, [sp, #44]	; 0x2c
 8007e98:	3301      	adds	r3, #1
 8007e9a:	e7e0      	b.n	8007e5e <_strtod_l+0x236>
 8007e9c:	1c5d      	adds	r5, r3, #1
 8007e9e:	2d10      	cmp	r5, #16
 8007ea0:	dcfa      	bgt.n	8007e98 <_strtod_l+0x270>
 8007ea2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ea4:	434d      	muls	r5, r1
 8007ea6:	950f      	str	r5, [sp, #60]	; 0x3c
 8007ea8:	e7f6      	b.n	8007e98 <_strtod_l+0x270>
 8007eaa:	9b06      	ldr	r3, [sp, #24]
 8007eac:	2100      	movs	r1, #0
 8007eae:	2b10      	cmp	r3, #16
 8007eb0:	dce5      	bgt.n	8007e7e <_strtod_l+0x256>
 8007eb2:	230a      	movs	r3, #10
 8007eb4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007eb6:	4343      	muls	r3, r0
 8007eb8:	18d3      	adds	r3, r2, r3
 8007eba:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ebc:	e7df      	b.n	8007e7e <_strtod_l+0x256>
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	920c      	str	r2, [sp, #48]	; 0x30
 8007ec2:	9206      	str	r2, [sp, #24]
 8007ec4:	3201      	adds	r2, #1
 8007ec6:	e7ad      	b.n	8007e24 <_strtod_l+0x1fc>
 8007ec8:	2400      	movs	r4, #0
 8007eca:	9b08      	ldr	r3, [sp, #32]
 8007ecc:	3302      	adds	r3, #2
 8007ece:	931f      	str	r3, [sp, #124]	; 0x7c
 8007ed0:	9b08      	ldr	r3, [sp, #32]
 8007ed2:	789b      	ldrb	r3, [r3, #2]
 8007ed4:	001a      	movs	r2, r3
 8007ed6:	3a30      	subs	r2, #48	; 0x30
 8007ed8:	2a09      	cmp	r2, #9
 8007eda:	d913      	bls.n	8007f04 <_strtod_l+0x2dc>
 8007edc:	9a08      	ldr	r2, [sp, #32]
 8007ede:	921f      	str	r2, [sp, #124]	; 0x7c
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	e031      	b.n	8007f48 <_strtod_l+0x320>
 8007ee4:	0800bbb0 	.word	0x0800bbb0
 8007ee8:	0800ba64 	.word	0x0800ba64
 8007eec:	ffefffff 	.word	0xffefffff
 8007ef0:	00000433 	.word	0x00000433
 8007ef4:	7ff00000 	.word	0x7ff00000
 8007ef8:	7fffffff 	.word	0x7fffffff
 8007efc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	921f      	str	r2, [sp, #124]	; 0x7c
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	2b30      	cmp	r3, #48	; 0x30
 8007f06:	d0f9      	beq.n	8007efc <_strtod_l+0x2d4>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	9207      	str	r2, [sp, #28]
 8007f0c:	001a      	movs	r2, r3
 8007f0e:	3a31      	subs	r2, #49	; 0x31
 8007f10:	2a08      	cmp	r2, #8
 8007f12:	d81a      	bhi.n	8007f4a <_strtod_l+0x322>
 8007f14:	3b30      	subs	r3, #48	; 0x30
 8007f16:	001a      	movs	r2, r3
 8007f18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f1a:	9307      	str	r3, [sp, #28]
 8007f1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f1e:	1c59      	adds	r1, r3, #1
 8007f20:	911f      	str	r1, [sp, #124]	; 0x7c
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	001d      	movs	r5, r3
 8007f26:	3d30      	subs	r5, #48	; 0x30
 8007f28:	2d09      	cmp	r5, #9
 8007f2a:	d939      	bls.n	8007fa0 <_strtod_l+0x378>
 8007f2c:	9d07      	ldr	r5, [sp, #28]
 8007f2e:	1b49      	subs	r1, r1, r5
 8007f30:	4db0      	ldr	r5, [pc, #704]	; (80081f4 <_strtod_l+0x5cc>)
 8007f32:	9507      	str	r5, [sp, #28]
 8007f34:	2908      	cmp	r1, #8
 8007f36:	dc03      	bgt.n	8007f40 <_strtod_l+0x318>
 8007f38:	9207      	str	r2, [sp, #28]
 8007f3a:	42aa      	cmp	r2, r5
 8007f3c:	dd00      	ble.n	8007f40 <_strtod_l+0x318>
 8007f3e:	9507      	str	r5, [sp, #28]
 8007f40:	2c00      	cmp	r4, #0
 8007f42:	d002      	beq.n	8007f4a <_strtod_l+0x322>
 8007f44:	9a07      	ldr	r2, [sp, #28]
 8007f46:	4252      	negs	r2, r2
 8007f48:	9207      	str	r2, [sp, #28]
 8007f4a:	9a06      	ldr	r2, [sp, #24]
 8007f4c:	2a00      	cmp	r2, #0
 8007f4e:	d14b      	bne.n	8007fe8 <_strtod_l+0x3c0>
 8007f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f52:	4310      	orrs	r0, r2
 8007f54:	d000      	beq.n	8007f58 <_strtod_l+0x330>
 8007f56:	e6ae      	b.n	8007cb6 <_strtod_l+0x8e>
 8007f58:	4662      	mov	r2, ip
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	d000      	beq.n	8007f60 <_strtod_l+0x338>
 8007f5e:	e6c9      	b.n	8007cf4 <_strtod_l+0xcc>
 8007f60:	2b69      	cmp	r3, #105	; 0x69
 8007f62:	d025      	beq.n	8007fb0 <_strtod_l+0x388>
 8007f64:	dc21      	bgt.n	8007faa <_strtod_l+0x382>
 8007f66:	2b49      	cmp	r3, #73	; 0x49
 8007f68:	d022      	beq.n	8007fb0 <_strtod_l+0x388>
 8007f6a:	2b4e      	cmp	r3, #78	; 0x4e
 8007f6c:	d000      	beq.n	8007f70 <_strtod_l+0x348>
 8007f6e:	e6c1      	b.n	8007cf4 <_strtod_l+0xcc>
 8007f70:	49a1      	ldr	r1, [pc, #644]	; (80081f8 <_strtod_l+0x5d0>)
 8007f72:	a81f      	add	r0, sp, #124	; 0x7c
 8007f74:	f001 fe70 	bl	8009c58 <__match>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d100      	bne.n	8007f7e <_strtod_l+0x356>
 8007f7c:	e6ba      	b.n	8007cf4 <_strtod_l+0xcc>
 8007f7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b28      	cmp	r3, #40	; 0x28
 8007f84:	d12a      	bne.n	8007fdc <_strtod_l+0x3b4>
 8007f86:	499d      	ldr	r1, [pc, #628]	; (80081fc <_strtod_l+0x5d4>)
 8007f88:	aa22      	add	r2, sp, #136	; 0x88
 8007f8a:	a81f      	add	r0, sp, #124	; 0x7c
 8007f8c:	f001 fe78 	bl	8009c80 <__hexnan>
 8007f90:	2805      	cmp	r0, #5
 8007f92:	d123      	bne.n	8007fdc <_strtod_l+0x3b4>
 8007f94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f96:	4a9a      	ldr	r2, [pc, #616]	; (8008200 <_strtod_l+0x5d8>)
 8007f98:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	0017      	movs	r7, r2
 8007f9e:	e68a      	b.n	8007cb6 <_strtod_l+0x8e>
 8007fa0:	210a      	movs	r1, #10
 8007fa2:	434a      	muls	r2, r1
 8007fa4:	18d2      	adds	r2, r2, r3
 8007fa6:	3a30      	subs	r2, #48	; 0x30
 8007fa8:	e7b8      	b.n	8007f1c <_strtod_l+0x2f4>
 8007faa:	2b6e      	cmp	r3, #110	; 0x6e
 8007fac:	d0e0      	beq.n	8007f70 <_strtod_l+0x348>
 8007fae:	e6a1      	b.n	8007cf4 <_strtod_l+0xcc>
 8007fb0:	4994      	ldr	r1, [pc, #592]	; (8008204 <_strtod_l+0x5dc>)
 8007fb2:	a81f      	add	r0, sp, #124	; 0x7c
 8007fb4:	f001 fe50 	bl	8009c58 <__match>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d100      	bne.n	8007fbe <_strtod_l+0x396>
 8007fbc:	e69a      	b.n	8007cf4 <_strtod_l+0xcc>
 8007fbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fc0:	4991      	ldr	r1, [pc, #580]	; (8008208 <_strtod_l+0x5e0>)
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	a81f      	add	r0, sp, #124	; 0x7c
 8007fc6:	931f      	str	r3, [sp, #124]	; 0x7c
 8007fc8:	f001 fe46 	bl	8009c58 <__match>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d102      	bne.n	8007fd6 <_strtod_l+0x3ae>
 8007fd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	931f      	str	r3, [sp, #124]	; 0x7c
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	4f89      	ldr	r7, [pc, #548]	; (8008200 <_strtod_l+0x5d8>)
 8007fda:	e66c      	b.n	8007cb6 <_strtod_l+0x8e>
 8007fdc:	488b      	ldr	r0, [pc, #556]	; (800820c <_strtod_l+0x5e4>)
 8007fde:	f002 fd81 	bl	800aae4 <nan>
 8007fe2:	0006      	movs	r6, r0
 8007fe4:	000f      	movs	r7, r1
 8007fe6:	e666      	b.n	8007cb6 <_strtod_l+0x8e>
 8007fe8:	9b07      	ldr	r3, [sp, #28]
 8007fea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <_strtod_l+0x3d2>
 8007ff6:	9b06      	ldr	r3, [sp, #24]
 8007ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8007ffa:	9c06      	ldr	r4, [sp, #24]
 8007ffc:	2c10      	cmp	r4, #16
 8007ffe:	dd00      	ble.n	8008002 <_strtod_l+0x3da>
 8008000:	2410      	movs	r4, #16
 8008002:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008004:	f7fa feba 	bl	8002d7c <__aeabi_ui2d>
 8008008:	9b06      	ldr	r3, [sp, #24]
 800800a:	0006      	movs	r6, r0
 800800c:	000f      	movs	r7, r1
 800800e:	2b09      	cmp	r3, #9
 8008010:	dd15      	ble.n	800803e <_strtod_l+0x416>
 8008012:	0022      	movs	r2, r4
 8008014:	4b7e      	ldr	r3, [pc, #504]	; (8008210 <_strtod_l+0x5e8>)
 8008016:	3a09      	subs	r2, #9
 8008018:	00d2      	lsls	r2, r2, #3
 800801a:	189b      	adds	r3, r3, r2
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f7fa f82a 	bl	8002078 <__aeabi_dmul>
 8008024:	0006      	movs	r6, r0
 8008026:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008028:	000f      	movs	r7, r1
 800802a:	f7fa fea7 	bl	8002d7c <__aeabi_ui2d>
 800802e:	0002      	movs	r2, r0
 8008030:	000b      	movs	r3, r1
 8008032:	0030      	movs	r0, r6
 8008034:	0039      	movs	r1, r7
 8008036:	f7f9 f8e1 	bl	80011fc <__aeabi_dadd>
 800803a:	0006      	movs	r6, r0
 800803c:	000f      	movs	r7, r1
 800803e:	9b06      	ldr	r3, [sp, #24]
 8008040:	2b0f      	cmp	r3, #15
 8008042:	dc39      	bgt.n	80080b8 <_strtod_l+0x490>
 8008044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008046:	2b00      	cmp	r3, #0
 8008048:	d100      	bne.n	800804c <_strtod_l+0x424>
 800804a:	e634      	b.n	8007cb6 <_strtod_l+0x8e>
 800804c:	dd24      	ble.n	8008098 <_strtod_l+0x470>
 800804e:	2b16      	cmp	r3, #22
 8008050:	dc09      	bgt.n	8008066 <_strtod_l+0x43e>
 8008052:	496f      	ldr	r1, [pc, #444]	; (8008210 <_strtod_l+0x5e8>)
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	18c9      	adds	r1, r1, r3
 8008058:	0032      	movs	r2, r6
 800805a:	6808      	ldr	r0, [r1, #0]
 800805c:	6849      	ldr	r1, [r1, #4]
 800805e:	003b      	movs	r3, r7
 8008060:	f7fa f80a 	bl	8002078 <__aeabi_dmul>
 8008064:	e7bd      	b.n	8007fe2 <_strtod_l+0x3ba>
 8008066:	2325      	movs	r3, #37	; 0x25
 8008068:	9a06      	ldr	r2, [sp, #24]
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800806e:	4293      	cmp	r3, r2
 8008070:	db22      	blt.n	80080b8 <_strtod_l+0x490>
 8008072:	240f      	movs	r4, #15
 8008074:	9b06      	ldr	r3, [sp, #24]
 8008076:	4d66      	ldr	r5, [pc, #408]	; (8008210 <_strtod_l+0x5e8>)
 8008078:	1ae4      	subs	r4, r4, r3
 800807a:	00e1      	lsls	r1, r4, #3
 800807c:	1869      	adds	r1, r5, r1
 800807e:	0032      	movs	r2, r6
 8008080:	6808      	ldr	r0, [r1, #0]
 8008082:	6849      	ldr	r1, [r1, #4]
 8008084:	003b      	movs	r3, r7
 8008086:	f7f9 fff7 	bl	8002078 <__aeabi_dmul>
 800808a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800808c:	1b1c      	subs	r4, r3, r4
 800808e:	00e4      	lsls	r4, r4, #3
 8008090:	192c      	adds	r4, r5, r4
 8008092:	6822      	ldr	r2, [r4, #0]
 8008094:	6863      	ldr	r3, [r4, #4]
 8008096:	e7e3      	b.n	8008060 <_strtod_l+0x438>
 8008098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809a:	3316      	adds	r3, #22
 800809c:	db0c      	blt.n	80080b8 <_strtod_l+0x490>
 800809e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080a0:	9a07      	ldr	r2, [sp, #28]
 80080a2:	0030      	movs	r0, r6
 80080a4:	1a9a      	subs	r2, r3, r2
 80080a6:	4b5a      	ldr	r3, [pc, #360]	; (8008210 <_strtod_l+0x5e8>)
 80080a8:	00d2      	lsls	r2, r2, #3
 80080aa:	189b      	adds	r3, r3, r2
 80080ac:	0039      	movs	r1, r7
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f7f9 fbdf 	bl	8001874 <__aeabi_ddiv>
 80080b6:	e794      	b.n	8007fe2 <_strtod_l+0x3ba>
 80080b8:	9b06      	ldr	r3, [sp, #24]
 80080ba:	1b1c      	subs	r4, r3, r4
 80080bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080be:	18e4      	adds	r4, r4, r3
 80080c0:	2c00      	cmp	r4, #0
 80080c2:	dd72      	ble.n	80081aa <_strtod_l+0x582>
 80080c4:	230f      	movs	r3, #15
 80080c6:	0021      	movs	r1, r4
 80080c8:	4019      	ands	r1, r3
 80080ca:	421c      	tst	r4, r3
 80080cc:	d00a      	beq.n	80080e4 <_strtod_l+0x4bc>
 80080ce:	00cb      	lsls	r3, r1, #3
 80080d0:	494f      	ldr	r1, [pc, #316]	; (8008210 <_strtod_l+0x5e8>)
 80080d2:	0032      	movs	r2, r6
 80080d4:	18c9      	adds	r1, r1, r3
 80080d6:	6808      	ldr	r0, [r1, #0]
 80080d8:	6849      	ldr	r1, [r1, #4]
 80080da:	003b      	movs	r3, r7
 80080dc:	f7f9 ffcc 	bl	8002078 <__aeabi_dmul>
 80080e0:	0006      	movs	r6, r0
 80080e2:	000f      	movs	r7, r1
 80080e4:	230f      	movs	r3, #15
 80080e6:	439c      	bics	r4, r3
 80080e8:	d04a      	beq.n	8008180 <_strtod_l+0x558>
 80080ea:	3326      	adds	r3, #38	; 0x26
 80080ec:	33ff      	adds	r3, #255	; 0xff
 80080ee:	429c      	cmp	r4, r3
 80080f0:	dd22      	ble.n	8008138 <_strtod_l+0x510>
 80080f2:	2300      	movs	r3, #0
 80080f4:	9306      	str	r3, [sp, #24]
 80080f6:	9307      	str	r3, [sp, #28]
 80080f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80080fa:	9309      	str	r3, [sp, #36]	; 0x24
 80080fc:	2322      	movs	r3, #34	; 0x22
 80080fe:	2600      	movs	r6, #0
 8008100:	9a05      	ldr	r2, [sp, #20]
 8008102:	4f3f      	ldr	r7, [pc, #252]	; (8008200 <_strtod_l+0x5d8>)
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008108:	42b3      	cmp	r3, r6
 800810a:	d100      	bne.n	800810e <_strtod_l+0x4e6>
 800810c:	e5d3      	b.n	8007cb6 <_strtod_l+0x8e>
 800810e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008110:	9805      	ldr	r0, [sp, #20]
 8008112:	f001 fed3 	bl	8009ebc <_Bfree>
 8008116:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008118:	9805      	ldr	r0, [sp, #20]
 800811a:	f001 fecf 	bl	8009ebc <_Bfree>
 800811e:	9907      	ldr	r1, [sp, #28]
 8008120:	9805      	ldr	r0, [sp, #20]
 8008122:	f001 fecb 	bl	8009ebc <_Bfree>
 8008126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008128:	9805      	ldr	r0, [sp, #20]
 800812a:	f001 fec7 	bl	8009ebc <_Bfree>
 800812e:	9906      	ldr	r1, [sp, #24]
 8008130:	9805      	ldr	r0, [sp, #20]
 8008132:	f001 fec3 	bl	8009ebc <_Bfree>
 8008136:	e5be      	b.n	8007cb6 <_strtod_l+0x8e>
 8008138:	2300      	movs	r3, #0
 800813a:	0030      	movs	r0, r6
 800813c:	0039      	movs	r1, r7
 800813e:	4d35      	ldr	r5, [pc, #212]	; (8008214 <_strtod_l+0x5ec>)
 8008140:	1124      	asrs	r4, r4, #4
 8008142:	9308      	str	r3, [sp, #32]
 8008144:	2c01      	cmp	r4, #1
 8008146:	dc1e      	bgt.n	8008186 <_strtod_l+0x55e>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <_strtod_l+0x528>
 800814c:	0006      	movs	r6, r0
 800814e:	000f      	movs	r7, r1
 8008150:	4b31      	ldr	r3, [pc, #196]	; (8008218 <_strtod_l+0x5f0>)
 8008152:	0032      	movs	r2, r6
 8008154:	18ff      	adds	r7, r7, r3
 8008156:	9b08      	ldr	r3, [sp, #32]
 8008158:	00dd      	lsls	r5, r3, #3
 800815a:	4b2e      	ldr	r3, [pc, #184]	; (8008214 <_strtod_l+0x5ec>)
 800815c:	195d      	adds	r5, r3, r5
 800815e:	6828      	ldr	r0, [r5, #0]
 8008160:	6869      	ldr	r1, [r5, #4]
 8008162:	003b      	movs	r3, r7
 8008164:	f7f9 ff88 	bl	8002078 <__aeabi_dmul>
 8008168:	4b25      	ldr	r3, [pc, #148]	; (8008200 <_strtod_l+0x5d8>)
 800816a:	4a2c      	ldr	r2, [pc, #176]	; (800821c <_strtod_l+0x5f4>)
 800816c:	0006      	movs	r6, r0
 800816e:	400b      	ands	r3, r1
 8008170:	4293      	cmp	r3, r2
 8008172:	d8be      	bhi.n	80080f2 <_strtod_l+0x4ca>
 8008174:	4a2a      	ldr	r2, [pc, #168]	; (8008220 <_strtod_l+0x5f8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d913      	bls.n	80081a2 <_strtod_l+0x57a>
 800817a:	2601      	movs	r6, #1
 800817c:	4f29      	ldr	r7, [pc, #164]	; (8008224 <_strtod_l+0x5fc>)
 800817e:	4276      	negs	r6, r6
 8008180:	2300      	movs	r3, #0
 8008182:	9308      	str	r3, [sp, #32]
 8008184:	e087      	b.n	8008296 <_strtod_l+0x66e>
 8008186:	2201      	movs	r2, #1
 8008188:	4214      	tst	r4, r2
 800818a:	d004      	beq.n	8008196 <_strtod_l+0x56e>
 800818c:	682a      	ldr	r2, [r5, #0]
 800818e:	686b      	ldr	r3, [r5, #4]
 8008190:	f7f9 ff72 	bl	8002078 <__aeabi_dmul>
 8008194:	2301      	movs	r3, #1
 8008196:	9a08      	ldr	r2, [sp, #32]
 8008198:	1064      	asrs	r4, r4, #1
 800819a:	3201      	adds	r2, #1
 800819c:	9208      	str	r2, [sp, #32]
 800819e:	3508      	adds	r5, #8
 80081a0:	e7d0      	b.n	8008144 <_strtod_l+0x51c>
 80081a2:	23d4      	movs	r3, #212	; 0xd4
 80081a4:	049b      	lsls	r3, r3, #18
 80081a6:	18cf      	adds	r7, r1, r3
 80081a8:	e7ea      	b.n	8008180 <_strtod_l+0x558>
 80081aa:	2c00      	cmp	r4, #0
 80081ac:	d0e8      	beq.n	8008180 <_strtod_l+0x558>
 80081ae:	4264      	negs	r4, r4
 80081b0:	220f      	movs	r2, #15
 80081b2:	0023      	movs	r3, r4
 80081b4:	4013      	ands	r3, r2
 80081b6:	4214      	tst	r4, r2
 80081b8:	d00a      	beq.n	80081d0 <_strtod_l+0x5a8>
 80081ba:	00da      	lsls	r2, r3, #3
 80081bc:	4b14      	ldr	r3, [pc, #80]	; (8008210 <_strtod_l+0x5e8>)
 80081be:	0030      	movs	r0, r6
 80081c0:	189b      	adds	r3, r3, r2
 80081c2:	0039      	movs	r1, r7
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f7f9 fb54 	bl	8001874 <__aeabi_ddiv>
 80081cc:	0006      	movs	r6, r0
 80081ce:	000f      	movs	r7, r1
 80081d0:	1124      	asrs	r4, r4, #4
 80081d2:	d0d5      	beq.n	8008180 <_strtod_l+0x558>
 80081d4:	2c1f      	cmp	r4, #31
 80081d6:	dd27      	ble.n	8008228 <_strtod_l+0x600>
 80081d8:	2300      	movs	r3, #0
 80081da:	9306      	str	r3, [sp, #24]
 80081dc:	9307      	str	r3, [sp, #28]
 80081de:	930b      	str	r3, [sp, #44]	; 0x2c
 80081e0:	9309      	str	r3, [sp, #36]	; 0x24
 80081e2:	2322      	movs	r3, #34	; 0x22
 80081e4:	9a05      	ldr	r2, [sp, #20]
 80081e6:	2600      	movs	r6, #0
 80081e8:	6013      	str	r3, [r2, #0]
 80081ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ec:	2700      	movs	r7, #0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d18d      	bne.n	800810e <_strtod_l+0x4e6>
 80081f2:	e560      	b.n	8007cb6 <_strtod_l+0x8e>
 80081f4:	00004e1f 	.word	0x00004e1f
 80081f8:	0800ba35 	.word	0x0800ba35
 80081fc:	0800ba78 	.word	0x0800ba78
 8008200:	7ff00000 	.word	0x7ff00000
 8008204:	0800ba2d 	.word	0x0800ba2d
 8008208:	0800babb 	.word	0x0800babb
 800820c:	0800bd68 	.word	0x0800bd68
 8008210:	0800bc48 	.word	0x0800bc48
 8008214:	0800bc20 	.word	0x0800bc20
 8008218:	fcb00000 	.word	0xfcb00000
 800821c:	7ca00000 	.word	0x7ca00000
 8008220:	7c900000 	.word	0x7c900000
 8008224:	7fefffff 	.word	0x7fefffff
 8008228:	2310      	movs	r3, #16
 800822a:	0022      	movs	r2, r4
 800822c:	401a      	ands	r2, r3
 800822e:	9208      	str	r2, [sp, #32]
 8008230:	421c      	tst	r4, r3
 8008232:	d001      	beq.n	8008238 <_strtod_l+0x610>
 8008234:	335a      	adds	r3, #90	; 0x5a
 8008236:	9308      	str	r3, [sp, #32]
 8008238:	0030      	movs	r0, r6
 800823a:	0039      	movs	r1, r7
 800823c:	2300      	movs	r3, #0
 800823e:	4dc5      	ldr	r5, [pc, #788]	; (8008554 <_strtod_l+0x92c>)
 8008240:	2201      	movs	r2, #1
 8008242:	4214      	tst	r4, r2
 8008244:	d004      	beq.n	8008250 <_strtod_l+0x628>
 8008246:	682a      	ldr	r2, [r5, #0]
 8008248:	686b      	ldr	r3, [r5, #4]
 800824a:	f7f9 ff15 	bl	8002078 <__aeabi_dmul>
 800824e:	2301      	movs	r3, #1
 8008250:	1064      	asrs	r4, r4, #1
 8008252:	3508      	adds	r5, #8
 8008254:	2c00      	cmp	r4, #0
 8008256:	d1f3      	bne.n	8008240 <_strtod_l+0x618>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <_strtod_l+0x638>
 800825c:	0006      	movs	r6, r0
 800825e:	000f      	movs	r7, r1
 8008260:	9b08      	ldr	r3, [sp, #32]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00f      	beq.n	8008286 <_strtod_l+0x65e>
 8008266:	236b      	movs	r3, #107	; 0x6b
 8008268:	007a      	lsls	r2, r7, #1
 800826a:	0d52      	lsrs	r2, r2, #21
 800826c:	0039      	movs	r1, r7
 800826e:	1a9b      	subs	r3, r3, r2
 8008270:	2b00      	cmp	r3, #0
 8008272:	dd08      	ble.n	8008286 <_strtod_l+0x65e>
 8008274:	2b1f      	cmp	r3, #31
 8008276:	dc00      	bgt.n	800827a <_strtod_l+0x652>
 8008278:	e124      	b.n	80084c4 <_strtod_l+0x89c>
 800827a:	2600      	movs	r6, #0
 800827c:	2b34      	cmp	r3, #52	; 0x34
 800827e:	dc00      	bgt.n	8008282 <_strtod_l+0x65a>
 8008280:	e119      	b.n	80084b6 <_strtod_l+0x88e>
 8008282:	27dc      	movs	r7, #220	; 0xdc
 8008284:	04bf      	lsls	r7, r7, #18
 8008286:	2200      	movs	r2, #0
 8008288:	2300      	movs	r3, #0
 800828a:	0030      	movs	r0, r6
 800828c:	0039      	movs	r1, r7
 800828e:	f7f8 f8db 	bl	8000448 <__aeabi_dcmpeq>
 8008292:	2800      	cmp	r0, #0
 8008294:	d1a0      	bne.n	80081d8 <_strtod_l+0x5b0>
 8008296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	9805      	ldr	r0, [sp, #20]
 80082a2:	f001 fe73 	bl	8009f8c <__s2b>
 80082a6:	900b      	str	r0, [sp, #44]	; 0x2c
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d100      	bne.n	80082ae <_strtod_l+0x686>
 80082ac:	e721      	b.n	80080f2 <_strtod_l+0x4ca>
 80082ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b0:	9907      	ldr	r1, [sp, #28]
 80082b2:	17da      	asrs	r2, r3, #31
 80082b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082b6:	1a5b      	subs	r3, r3, r1
 80082b8:	401a      	ands	r2, r3
 80082ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082bc:	9215      	str	r2, [sp, #84]	; 0x54
 80082be:	43db      	mvns	r3, r3
 80082c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082c2:	17db      	asrs	r3, r3, #31
 80082c4:	401a      	ands	r2, r3
 80082c6:	2300      	movs	r3, #0
 80082c8:	921a      	str	r2, [sp, #104]	; 0x68
 80082ca:	9306      	str	r3, [sp, #24]
 80082cc:	9307      	str	r3, [sp, #28]
 80082ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082d0:	9805      	ldr	r0, [sp, #20]
 80082d2:	6859      	ldr	r1, [r3, #4]
 80082d4:	f001 fdae 	bl	8009e34 <_Balloc>
 80082d8:	9009      	str	r0, [sp, #36]	; 0x24
 80082da:	2800      	cmp	r0, #0
 80082dc:	d100      	bne.n	80082e0 <_strtod_l+0x6b8>
 80082de:	e70d      	b.n	80080fc <_strtod_l+0x4d4>
 80082e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	310c      	adds	r1, #12
 80082e8:	1c9a      	adds	r2, r3, #2
 80082ea:	0092      	lsls	r2, r2, #2
 80082ec:	300c      	adds	r0, #12
 80082ee:	930c      	str	r3, [sp, #48]	; 0x30
 80082f0:	f7fe fce2 	bl	8006cb8 <memcpy>
 80082f4:	ab22      	add	r3, sp, #136	; 0x88
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	ab21      	add	r3, sp, #132	; 0x84
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	0032      	movs	r2, r6
 80082fe:	003b      	movs	r3, r7
 8008300:	9805      	ldr	r0, [sp, #20]
 8008302:	9612      	str	r6, [sp, #72]	; 0x48
 8008304:	9713      	str	r7, [sp, #76]	; 0x4c
 8008306:	f002 f98d 	bl	800a624 <__d2b>
 800830a:	9020      	str	r0, [sp, #128]	; 0x80
 800830c:	2800      	cmp	r0, #0
 800830e:	d100      	bne.n	8008312 <_strtod_l+0x6ea>
 8008310:	e6f4      	b.n	80080fc <_strtod_l+0x4d4>
 8008312:	2101      	movs	r1, #1
 8008314:	9805      	ldr	r0, [sp, #20]
 8008316:	f001 fecd 	bl	800a0b4 <__i2b>
 800831a:	9007      	str	r0, [sp, #28]
 800831c:	2800      	cmp	r0, #0
 800831e:	d100      	bne.n	8008322 <_strtod_l+0x6fa>
 8008320:	e6ec      	b.n	80080fc <_strtod_l+0x4d4>
 8008322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008324:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008326:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008328:	1ad4      	subs	r4, r2, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	db01      	blt.n	8008332 <_strtod_l+0x70a>
 800832e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8008330:	195d      	adds	r5, r3, r5
 8008332:	9908      	ldr	r1, [sp, #32]
 8008334:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008336:	1a5b      	subs	r3, r3, r1
 8008338:	2136      	movs	r1, #54	; 0x36
 800833a:	189b      	adds	r3, r3, r2
 800833c:	1a8a      	subs	r2, r1, r2
 800833e:	4986      	ldr	r1, [pc, #536]	; (8008558 <_strtod_l+0x930>)
 8008340:	2001      	movs	r0, #1
 8008342:	468c      	mov	ip, r1
 8008344:	2100      	movs	r1, #0
 8008346:	3b01      	subs	r3, #1
 8008348:	9110      	str	r1, [sp, #64]	; 0x40
 800834a:	9014      	str	r0, [sp, #80]	; 0x50
 800834c:	4563      	cmp	r3, ip
 800834e:	da07      	bge.n	8008360 <_strtod_l+0x738>
 8008350:	4661      	mov	r1, ip
 8008352:	1ac9      	subs	r1, r1, r3
 8008354:	1a52      	subs	r2, r2, r1
 8008356:	291f      	cmp	r1, #31
 8008358:	dd00      	ble.n	800835c <_strtod_l+0x734>
 800835a:	e0b8      	b.n	80084ce <_strtod_l+0x8a6>
 800835c:	4088      	lsls	r0, r1
 800835e:	9014      	str	r0, [sp, #80]	; 0x50
 8008360:	18ab      	adds	r3, r5, r2
 8008362:	930c      	str	r3, [sp, #48]	; 0x30
 8008364:	18a4      	adds	r4, r4, r2
 8008366:	9b08      	ldr	r3, [sp, #32]
 8008368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800836a:	191c      	adds	r4, r3, r4
 800836c:	002b      	movs	r3, r5
 800836e:	4295      	cmp	r5, r2
 8008370:	dd00      	ble.n	8008374 <_strtod_l+0x74c>
 8008372:	0013      	movs	r3, r2
 8008374:	42a3      	cmp	r3, r4
 8008376:	dd00      	ble.n	800837a <_strtod_l+0x752>
 8008378:	0023      	movs	r3, r4
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd04      	ble.n	8008388 <_strtod_l+0x760>
 800837e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008380:	1ae4      	subs	r4, r4, r3
 8008382:	1ad2      	subs	r2, r2, r3
 8008384:	920c      	str	r2, [sp, #48]	; 0x30
 8008386:	1aed      	subs	r5, r5, r3
 8008388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800838a:	2b00      	cmp	r3, #0
 800838c:	dd17      	ble.n	80083be <_strtod_l+0x796>
 800838e:	001a      	movs	r2, r3
 8008390:	9907      	ldr	r1, [sp, #28]
 8008392:	9805      	ldr	r0, [sp, #20]
 8008394:	f001 ff54 	bl	800a240 <__pow5mult>
 8008398:	9007      	str	r0, [sp, #28]
 800839a:	2800      	cmp	r0, #0
 800839c:	d100      	bne.n	80083a0 <_strtod_l+0x778>
 800839e:	e6ad      	b.n	80080fc <_strtod_l+0x4d4>
 80083a0:	0001      	movs	r1, r0
 80083a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80083a4:	9805      	ldr	r0, [sp, #20]
 80083a6:	f001 fe9b 	bl	800a0e0 <__multiply>
 80083aa:	900f      	str	r0, [sp, #60]	; 0x3c
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d100      	bne.n	80083b2 <_strtod_l+0x78a>
 80083b0:	e6a4      	b.n	80080fc <_strtod_l+0x4d4>
 80083b2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80083b4:	9805      	ldr	r0, [sp, #20]
 80083b6:	f001 fd81 	bl	8009ebc <_Bfree>
 80083ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083bc:	9320      	str	r3, [sp, #128]	; 0x80
 80083be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	dd00      	ble.n	80083c6 <_strtod_l+0x79e>
 80083c4:	e089      	b.n	80084da <_strtod_l+0x8b2>
 80083c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	dd08      	ble.n	80083de <_strtod_l+0x7b6>
 80083cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083d0:	9805      	ldr	r0, [sp, #20]
 80083d2:	f001 ff35 	bl	800a240 <__pow5mult>
 80083d6:	9009      	str	r0, [sp, #36]	; 0x24
 80083d8:	2800      	cmp	r0, #0
 80083da:	d100      	bne.n	80083de <_strtod_l+0x7b6>
 80083dc:	e68e      	b.n	80080fc <_strtod_l+0x4d4>
 80083de:	2c00      	cmp	r4, #0
 80083e0:	dd08      	ble.n	80083f4 <_strtod_l+0x7cc>
 80083e2:	0022      	movs	r2, r4
 80083e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e6:	9805      	ldr	r0, [sp, #20]
 80083e8:	f001 ff86 	bl	800a2f8 <__lshift>
 80083ec:	9009      	str	r0, [sp, #36]	; 0x24
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d100      	bne.n	80083f4 <_strtod_l+0x7cc>
 80083f2:	e683      	b.n	80080fc <_strtod_l+0x4d4>
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	dd08      	ble.n	800840a <_strtod_l+0x7e2>
 80083f8:	002a      	movs	r2, r5
 80083fa:	9907      	ldr	r1, [sp, #28]
 80083fc:	9805      	ldr	r0, [sp, #20]
 80083fe:	f001 ff7b 	bl	800a2f8 <__lshift>
 8008402:	9007      	str	r0, [sp, #28]
 8008404:	2800      	cmp	r0, #0
 8008406:	d100      	bne.n	800840a <_strtod_l+0x7e2>
 8008408:	e678      	b.n	80080fc <_strtod_l+0x4d4>
 800840a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800840c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800840e:	9805      	ldr	r0, [sp, #20]
 8008410:	f001 fffc 	bl	800a40c <__mdiff>
 8008414:	9006      	str	r0, [sp, #24]
 8008416:	2800      	cmp	r0, #0
 8008418:	d100      	bne.n	800841c <_strtod_l+0x7f4>
 800841a:	e66f      	b.n	80080fc <_strtod_l+0x4d4>
 800841c:	2200      	movs	r2, #0
 800841e:	68c3      	ldr	r3, [r0, #12]
 8008420:	9907      	ldr	r1, [sp, #28]
 8008422:	60c2      	str	r2, [r0, #12]
 8008424:	930f      	str	r3, [sp, #60]	; 0x3c
 8008426:	f001 ffd5 	bl	800a3d4 <__mcmp>
 800842a:	2800      	cmp	r0, #0
 800842c:	da5f      	bge.n	80084ee <_strtod_l+0x8c6>
 800842e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008430:	4333      	orrs	r3, r6
 8008432:	d000      	beq.n	8008436 <_strtod_l+0x80e>
 8008434:	e08a      	b.n	800854c <_strtod_l+0x924>
 8008436:	033b      	lsls	r3, r7, #12
 8008438:	d000      	beq.n	800843c <_strtod_l+0x814>
 800843a:	e087      	b.n	800854c <_strtod_l+0x924>
 800843c:	22d6      	movs	r2, #214	; 0xd6
 800843e:	4b47      	ldr	r3, [pc, #284]	; (800855c <_strtod_l+0x934>)
 8008440:	04d2      	lsls	r2, r2, #19
 8008442:	403b      	ands	r3, r7
 8008444:	4293      	cmp	r3, r2
 8008446:	d800      	bhi.n	800844a <_strtod_l+0x822>
 8008448:	e080      	b.n	800854c <_strtod_l+0x924>
 800844a:	9b06      	ldr	r3, [sp, #24]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	930a      	str	r3, [sp, #40]	; 0x28
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <_strtod_l+0x836>
 8008454:	9b06      	ldr	r3, [sp, #24]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	930a      	str	r3, [sp, #40]	; 0x28
 800845a:	2b01      	cmp	r3, #1
 800845c:	dd76      	ble.n	800854c <_strtod_l+0x924>
 800845e:	9906      	ldr	r1, [sp, #24]
 8008460:	2201      	movs	r2, #1
 8008462:	9805      	ldr	r0, [sp, #20]
 8008464:	f001 ff48 	bl	800a2f8 <__lshift>
 8008468:	9907      	ldr	r1, [sp, #28]
 800846a:	9006      	str	r0, [sp, #24]
 800846c:	f001 ffb2 	bl	800a3d4 <__mcmp>
 8008470:	2800      	cmp	r0, #0
 8008472:	dd6b      	ble.n	800854c <_strtod_l+0x924>
 8008474:	9908      	ldr	r1, [sp, #32]
 8008476:	003b      	movs	r3, r7
 8008478:	4a38      	ldr	r2, [pc, #224]	; (800855c <_strtod_l+0x934>)
 800847a:	2900      	cmp	r1, #0
 800847c:	d100      	bne.n	8008480 <_strtod_l+0x858>
 800847e:	e092      	b.n	80085a6 <_strtod_l+0x97e>
 8008480:	0011      	movs	r1, r2
 8008482:	20d6      	movs	r0, #214	; 0xd6
 8008484:	4039      	ands	r1, r7
 8008486:	04c0      	lsls	r0, r0, #19
 8008488:	4281      	cmp	r1, r0
 800848a:	dd00      	ble.n	800848e <_strtod_l+0x866>
 800848c:	e08b      	b.n	80085a6 <_strtod_l+0x97e>
 800848e:	23dc      	movs	r3, #220	; 0xdc
 8008490:	049b      	lsls	r3, r3, #18
 8008492:	4299      	cmp	r1, r3
 8008494:	dc00      	bgt.n	8008498 <_strtod_l+0x870>
 8008496:	e6a4      	b.n	80081e2 <_strtod_l+0x5ba>
 8008498:	0030      	movs	r0, r6
 800849a:	0039      	movs	r1, r7
 800849c:	2200      	movs	r2, #0
 800849e:	4b30      	ldr	r3, [pc, #192]	; (8008560 <_strtod_l+0x938>)
 80084a0:	f7f9 fdea 	bl	8002078 <__aeabi_dmul>
 80084a4:	0006      	movs	r6, r0
 80084a6:	000f      	movs	r7, r1
 80084a8:	4308      	orrs	r0, r1
 80084aa:	d000      	beq.n	80084ae <_strtod_l+0x886>
 80084ac:	e62f      	b.n	800810e <_strtod_l+0x4e6>
 80084ae:	2322      	movs	r3, #34	; 0x22
 80084b0:	9a05      	ldr	r2, [sp, #20]
 80084b2:	6013      	str	r3, [r2, #0]
 80084b4:	e62b      	b.n	800810e <_strtod_l+0x4e6>
 80084b6:	234b      	movs	r3, #75	; 0x4b
 80084b8:	1a9a      	subs	r2, r3, r2
 80084ba:	3b4c      	subs	r3, #76	; 0x4c
 80084bc:	4093      	lsls	r3, r2
 80084be:	4019      	ands	r1, r3
 80084c0:	000f      	movs	r7, r1
 80084c2:	e6e0      	b.n	8008286 <_strtod_l+0x65e>
 80084c4:	2201      	movs	r2, #1
 80084c6:	4252      	negs	r2, r2
 80084c8:	409a      	lsls	r2, r3
 80084ca:	4016      	ands	r6, r2
 80084cc:	e6db      	b.n	8008286 <_strtod_l+0x65e>
 80084ce:	4925      	ldr	r1, [pc, #148]	; (8008564 <_strtod_l+0x93c>)
 80084d0:	1acb      	subs	r3, r1, r3
 80084d2:	0001      	movs	r1, r0
 80084d4:	4099      	lsls	r1, r3
 80084d6:	9110      	str	r1, [sp, #64]	; 0x40
 80084d8:	e741      	b.n	800835e <_strtod_l+0x736>
 80084da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80084de:	9805      	ldr	r0, [sp, #20]
 80084e0:	f001 ff0a 	bl	800a2f8 <__lshift>
 80084e4:	9020      	str	r0, [sp, #128]	; 0x80
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d000      	beq.n	80084ec <_strtod_l+0x8c4>
 80084ea:	e76c      	b.n	80083c6 <_strtod_l+0x79e>
 80084ec:	e606      	b.n	80080fc <_strtod_l+0x4d4>
 80084ee:	970c      	str	r7, [sp, #48]	; 0x30
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d176      	bne.n	80085e2 <_strtod_l+0x9ba>
 80084f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084f6:	033b      	lsls	r3, r7, #12
 80084f8:	0b1b      	lsrs	r3, r3, #12
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	d038      	beq.n	8008570 <_strtod_l+0x948>
 80084fe:	4a1a      	ldr	r2, [pc, #104]	; (8008568 <_strtod_l+0x940>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d138      	bne.n	8008576 <_strtod_l+0x94e>
 8008504:	2201      	movs	r2, #1
 8008506:	9b08      	ldr	r3, [sp, #32]
 8008508:	4252      	negs	r2, r2
 800850a:	0031      	movs	r1, r6
 800850c:	0010      	movs	r0, r2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <_strtod_l+0x902>
 8008512:	24d4      	movs	r4, #212	; 0xd4
 8008514:	4b11      	ldr	r3, [pc, #68]	; (800855c <_strtod_l+0x934>)
 8008516:	0010      	movs	r0, r2
 8008518:	403b      	ands	r3, r7
 800851a:	04e4      	lsls	r4, r4, #19
 800851c:	42a3      	cmp	r3, r4
 800851e:	d804      	bhi.n	800852a <_strtod_l+0x902>
 8008520:	306c      	adds	r0, #108	; 0x6c
 8008522:	0d1b      	lsrs	r3, r3, #20
 8008524:	1ac3      	subs	r3, r0, r3
 8008526:	409a      	lsls	r2, r3
 8008528:	0010      	movs	r0, r2
 800852a:	4281      	cmp	r1, r0
 800852c:	d123      	bne.n	8008576 <_strtod_l+0x94e>
 800852e:	4b0f      	ldr	r3, [pc, #60]	; (800856c <_strtod_l+0x944>)
 8008530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008532:	429a      	cmp	r2, r3
 8008534:	d102      	bne.n	800853c <_strtod_l+0x914>
 8008536:	1c4b      	adds	r3, r1, #1
 8008538:	d100      	bne.n	800853c <_strtod_l+0x914>
 800853a:	e5df      	b.n	80080fc <_strtod_l+0x4d4>
 800853c:	4b07      	ldr	r3, [pc, #28]	; (800855c <_strtod_l+0x934>)
 800853e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008540:	2600      	movs	r6, #0
 8008542:	401a      	ands	r2, r3
 8008544:	0013      	movs	r3, r2
 8008546:	2280      	movs	r2, #128	; 0x80
 8008548:	0352      	lsls	r2, r2, #13
 800854a:	189f      	adds	r7, r3, r2
 800854c:	9b08      	ldr	r3, [sp, #32]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1a2      	bne.n	8008498 <_strtod_l+0x870>
 8008552:	e5dc      	b.n	800810e <_strtod_l+0x4e6>
 8008554:	0800ba90 	.word	0x0800ba90
 8008558:	fffffc02 	.word	0xfffffc02
 800855c:	7ff00000 	.word	0x7ff00000
 8008560:	39500000 	.word	0x39500000
 8008564:	fffffbe2 	.word	0xfffffbe2
 8008568:	000fffff 	.word	0x000fffff
 800856c:	7fefffff 	.word	0x7fefffff
 8008570:	4333      	orrs	r3, r6
 8008572:	d100      	bne.n	8008576 <_strtod_l+0x94e>
 8008574:	e77e      	b.n	8008474 <_strtod_l+0x84c>
 8008576:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01d      	beq.n	80085b8 <_strtod_l+0x990>
 800857c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800857e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008580:	4213      	tst	r3, r2
 8008582:	d0e3      	beq.n	800854c <_strtod_l+0x924>
 8008584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008586:	0030      	movs	r0, r6
 8008588:	0039      	movs	r1, r7
 800858a:	9a08      	ldr	r2, [sp, #32]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d017      	beq.n	80085c0 <_strtod_l+0x998>
 8008590:	f7ff fb32 	bl	8007bf8 <sulp>
 8008594:	0002      	movs	r2, r0
 8008596:	000b      	movs	r3, r1
 8008598:	9812      	ldr	r0, [sp, #72]	; 0x48
 800859a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800859c:	f7f8 fe2e 	bl	80011fc <__aeabi_dadd>
 80085a0:	0006      	movs	r6, r0
 80085a2:	000f      	movs	r7, r1
 80085a4:	e7d2      	b.n	800854c <_strtod_l+0x924>
 80085a6:	2601      	movs	r6, #1
 80085a8:	4013      	ands	r3, r2
 80085aa:	4a99      	ldr	r2, [pc, #612]	; (8008810 <_strtod_l+0xbe8>)
 80085ac:	4276      	negs	r6, r6
 80085ae:	189b      	adds	r3, r3, r2
 80085b0:	4a98      	ldr	r2, [pc, #608]	; (8008814 <_strtod_l+0xbec>)
 80085b2:	431a      	orrs	r2, r3
 80085b4:	0017      	movs	r7, r2
 80085b6:	e7c9      	b.n	800854c <_strtod_l+0x924>
 80085b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085ba:	4233      	tst	r3, r6
 80085bc:	d0c6      	beq.n	800854c <_strtod_l+0x924>
 80085be:	e7e1      	b.n	8008584 <_strtod_l+0x95c>
 80085c0:	f7ff fb1a 	bl	8007bf8 <sulp>
 80085c4:	0002      	movs	r2, r0
 80085c6:	000b      	movs	r3, r1
 80085c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80085ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80085cc:	f7f9 ffc0 	bl	8002550 <__aeabi_dsub>
 80085d0:	2200      	movs	r2, #0
 80085d2:	2300      	movs	r3, #0
 80085d4:	0006      	movs	r6, r0
 80085d6:	000f      	movs	r7, r1
 80085d8:	f7f7 ff36 	bl	8000448 <__aeabi_dcmpeq>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d0b5      	beq.n	800854c <_strtod_l+0x924>
 80085e0:	e5ff      	b.n	80081e2 <_strtod_l+0x5ba>
 80085e2:	9907      	ldr	r1, [sp, #28]
 80085e4:	9806      	ldr	r0, [sp, #24]
 80085e6:	f002 f881 	bl	800a6ec <__ratio>
 80085ea:	2380      	movs	r3, #128	; 0x80
 80085ec:	2200      	movs	r2, #0
 80085ee:	05db      	lsls	r3, r3, #23
 80085f0:	0004      	movs	r4, r0
 80085f2:	000d      	movs	r5, r1
 80085f4:	f7f7 ff38 	bl	8000468 <__aeabi_dcmple>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d075      	beq.n	80086e8 <_strtod_l+0xac0>
 80085fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d047      	beq.n	8008692 <_strtod_l+0xa6a>
 8008602:	2300      	movs	r3, #0
 8008604:	4c84      	ldr	r4, [pc, #528]	; (8008818 <_strtod_l+0xbf0>)
 8008606:	2500      	movs	r5, #0
 8008608:	9310      	str	r3, [sp, #64]	; 0x40
 800860a:	9411      	str	r4, [sp, #68]	; 0x44
 800860c:	4c82      	ldr	r4, [pc, #520]	; (8008818 <_strtod_l+0xbf0>)
 800860e:	4a83      	ldr	r2, [pc, #524]	; (800881c <_strtod_l+0xbf4>)
 8008610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008612:	4013      	ands	r3, r2
 8008614:	9314      	str	r3, [sp, #80]	; 0x50
 8008616:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008618:	4b81      	ldr	r3, [pc, #516]	; (8008820 <_strtod_l+0xbf8>)
 800861a:	429a      	cmp	r2, r3
 800861c:	d000      	beq.n	8008620 <_strtod_l+0x9f8>
 800861e:	e0ac      	b.n	800877a <_strtod_l+0xb52>
 8008620:	4a80      	ldr	r2, [pc, #512]	; (8008824 <_strtod_l+0xbfc>)
 8008622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008624:	4694      	mov	ip, r2
 8008626:	4463      	add	r3, ip
 8008628:	001f      	movs	r7, r3
 800862a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800862c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800862e:	0030      	movs	r0, r6
 8008630:	0039      	movs	r1, r7
 8008632:	920c      	str	r2, [sp, #48]	; 0x30
 8008634:	930d      	str	r3, [sp, #52]	; 0x34
 8008636:	f001 ff81 	bl	800a53c <__ulp>
 800863a:	0002      	movs	r2, r0
 800863c:	000b      	movs	r3, r1
 800863e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008640:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008642:	f7f9 fd19 	bl	8002078 <__aeabi_dmul>
 8008646:	0032      	movs	r2, r6
 8008648:	003b      	movs	r3, r7
 800864a:	f7f8 fdd7 	bl	80011fc <__aeabi_dadd>
 800864e:	4a73      	ldr	r2, [pc, #460]	; (800881c <_strtod_l+0xbf4>)
 8008650:	4b75      	ldr	r3, [pc, #468]	; (8008828 <_strtod_l+0xc00>)
 8008652:	0006      	movs	r6, r0
 8008654:	400a      	ands	r2, r1
 8008656:	429a      	cmp	r2, r3
 8008658:	d95e      	bls.n	8008718 <_strtod_l+0xaf0>
 800865a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800865c:	4b73      	ldr	r3, [pc, #460]	; (800882c <_strtod_l+0xc04>)
 800865e:	429a      	cmp	r2, r3
 8008660:	d103      	bne.n	800866a <_strtod_l+0xa42>
 8008662:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008664:	3301      	adds	r3, #1
 8008666:	d100      	bne.n	800866a <_strtod_l+0xa42>
 8008668:	e548      	b.n	80080fc <_strtod_l+0x4d4>
 800866a:	2601      	movs	r6, #1
 800866c:	4f6f      	ldr	r7, [pc, #444]	; (800882c <_strtod_l+0xc04>)
 800866e:	4276      	negs	r6, r6
 8008670:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008672:	9805      	ldr	r0, [sp, #20]
 8008674:	f001 fc22 	bl	8009ebc <_Bfree>
 8008678:	9909      	ldr	r1, [sp, #36]	; 0x24
 800867a:	9805      	ldr	r0, [sp, #20]
 800867c:	f001 fc1e 	bl	8009ebc <_Bfree>
 8008680:	9907      	ldr	r1, [sp, #28]
 8008682:	9805      	ldr	r0, [sp, #20]
 8008684:	f001 fc1a 	bl	8009ebc <_Bfree>
 8008688:	9906      	ldr	r1, [sp, #24]
 800868a:	9805      	ldr	r0, [sp, #20]
 800868c:	f001 fc16 	bl	8009ebc <_Bfree>
 8008690:	e61d      	b.n	80082ce <_strtod_l+0x6a6>
 8008692:	2e00      	cmp	r6, #0
 8008694:	d11c      	bne.n	80086d0 <_strtod_l+0xaa8>
 8008696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008698:	031b      	lsls	r3, r3, #12
 800869a:	d11f      	bne.n	80086dc <_strtod_l+0xab4>
 800869c:	2200      	movs	r2, #0
 800869e:	0020      	movs	r0, r4
 80086a0:	0029      	movs	r1, r5
 80086a2:	4b5d      	ldr	r3, [pc, #372]	; (8008818 <_strtod_l+0xbf0>)
 80086a4:	f7f7 fed6 	bl	8000454 <__aeabi_dcmplt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d11a      	bne.n	80086e2 <_strtod_l+0xaba>
 80086ac:	0020      	movs	r0, r4
 80086ae:	0029      	movs	r1, r5
 80086b0:	2200      	movs	r2, #0
 80086b2:	4b5f      	ldr	r3, [pc, #380]	; (8008830 <_strtod_l+0xc08>)
 80086b4:	f7f9 fce0 	bl	8002078 <__aeabi_dmul>
 80086b8:	0005      	movs	r5, r0
 80086ba:	000c      	movs	r4, r1
 80086bc:	2380      	movs	r3, #128	; 0x80
 80086be:	061b      	lsls	r3, r3, #24
 80086c0:	18e3      	adds	r3, r4, r3
 80086c2:	951c      	str	r5, [sp, #112]	; 0x70
 80086c4:	931d      	str	r3, [sp, #116]	; 0x74
 80086c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80086c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086ca:	9210      	str	r2, [sp, #64]	; 0x40
 80086cc:	9311      	str	r3, [sp, #68]	; 0x44
 80086ce:	e79e      	b.n	800860e <_strtod_l+0x9e6>
 80086d0:	2e01      	cmp	r6, #1
 80086d2:	d103      	bne.n	80086dc <_strtod_l+0xab4>
 80086d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d100      	bne.n	80086dc <_strtod_l+0xab4>
 80086da:	e582      	b.n	80081e2 <_strtod_l+0x5ba>
 80086dc:	2300      	movs	r3, #0
 80086de:	4c55      	ldr	r4, [pc, #340]	; (8008834 <_strtod_l+0xc0c>)
 80086e0:	e791      	b.n	8008606 <_strtod_l+0x9de>
 80086e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086e4:	4c52      	ldr	r4, [pc, #328]	; (8008830 <_strtod_l+0xc08>)
 80086e6:	e7e9      	b.n	80086bc <_strtod_l+0xa94>
 80086e8:	2200      	movs	r2, #0
 80086ea:	0020      	movs	r0, r4
 80086ec:	0029      	movs	r1, r5
 80086ee:	4b50      	ldr	r3, [pc, #320]	; (8008830 <_strtod_l+0xc08>)
 80086f0:	f7f9 fcc2 	bl	8002078 <__aeabi_dmul>
 80086f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086f6:	0005      	movs	r5, r0
 80086f8:	000b      	movs	r3, r1
 80086fa:	000c      	movs	r4, r1
 80086fc:	2a00      	cmp	r2, #0
 80086fe:	d107      	bne.n	8008710 <_strtod_l+0xae8>
 8008700:	2280      	movs	r2, #128	; 0x80
 8008702:	0612      	lsls	r2, r2, #24
 8008704:	188b      	adds	r3, r1, r2
 8008706:	9016      	str	r0, [sp, #88]	; 0x58
 8008708:	9317      	str	r3, [sp, #92]	; 0x5c
 800870a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800870c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800870e:	e7dc      	b.n	80086ca <_strtod_l+0xaa2>
 8008710:	0002      	movs	r2, r0
 8008712:	9216      	str	r2, [sp, #88]	; 0x58
 8008714:	9317      	str	r3, [sp, #92]	; 0x5c
 8008716:	e7f8      	b.n	800870a <_strtod_l+0xae2>
 8008718:	23d4      	movs	r3, #212	; 0xd4
 800871a:	049b      	lsls	r3, r3, #18
 800871c:	18cf      	adds	r7, r1, r3
 800871e:	9b08      	ldr	r3, [sp, #32]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1a5      	bne.n	8008670 <_strtod_l+0xa48>
 8008724:	4b3d      	ldr	r3, [pc, #244]	; (800881c <_strtod_l+0xbf4>)
 8008726:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008728:	403b      	ands	r3, r7
 800872a:	429a      	cmp	r2, r3
 800872c:	d1a0      	bne.n	8008670 <_strtod_l+0xa48>
 800872e:	0028      	movs	r0, r5
 8008730:	0021      	movs	r1, r4
 8008732:	f7f7 ff47 	bl	80005c4 <__aeabi_d2lz>
 8008736:	f7f7 ff81 	bl	800063c <__aeabi_l2d>
 800873a:	0002      	movs	r2, r0
 800873c:	000b      	movs	r3, r1
 800873e:	0028      	movs	r0, r5
 8008740:	0021      	movs	r1, r4
 8008742:	f7f9 ff05 	bl	8002550 <__aeabi_dsub>
 8008746:	033b      	lsls	r3, r7, #12
 8008748:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800874a:	0b1b      	lsrs	r3, r3, #12
 800874c:	4333      	orrs	r3, r6
 800874e:	4313      	orrs	r3, r2
 8008750:	0004      	movs	r4, r0
 8008752:	000d      	movs	r5, r1
 8008754:	4a38      	ldr	r2, [pc, #224]	; (8008838 <_strtod_l+0xc10>)
 8008756:	2b00      	cmp	r3, #0
 8008758:	d055      	beq.n	8008806 <_strtod_l+0xbde>
 800875a:	4b38      	ldr	r3, [pc, #224]	; (800883c <_strtod_l+0xc14>)
 800875c:	f7f7 fe7a 	bl	8000454 <__aeabi_dcmplt>
 8008760:	2800      	cmp	r0, #0
 8008762:	d000      	beq.n	8008766 <_strtod_l+0xb3e>
 8008764:	e4d3      	b.n	800810e <_strtod_l+0x4e6>
 8008766:	0020      	movs	r0, r4
 8008768:	0029      	movs	r1, r5
 800876a:	4a35      	ldr	r2, [pc, #212]	; (8008840 <_strtod_l+0xc18>)
 800876c:	4b30      	ldr	r3, [pc, #192]	; (8008830 <_strtod_l+0xc08>)
 800876e:	f7f7 fe85 	bl	800047c <__aeabi_dcmpgt>
 8008772:	2800      	cmp	r0, #0
 8008774:	d100      	bne.n	8008778 <_strtod_l+0xb50>
 8008776:	e77b      	b.n	8008670 <_strtod_l+0xa48>
 8008778:	e4c9      	b.n	800810e <_strtod_l+0x4e6>
 800877a:	9b08      	ldr	r3, [sp, #32]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d02b      	beq.n	80087d8 <_strtod_l+0xbb0>
 8008780:	23d4      	movs	r3, #212	; 0xd4
 8008782:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008784:	04db      	lsls	r3, r3, #19
 8008786:	429a      	cmp	r2, r3
 8008788:	d826      	bhi.n	80087d8 <_strtod_l+0xbb0>
 800878a:	0028      	movs	r0, r5
 800878c:	0021      	movs	r1, r4
 800878e:	4a2d      	ldr	r2, [pc, #180]	; (8008844 <_strtod_l+0xc1c>)
 8008790:	4b2d      	ldr	r3, [pc, #180]	; (8008848 <_strtod_l+0xc20>)
 8008792:	f7f7 fe69 	bl	8000468 <__aeabi_dcmple>
 8008796:	2800      	cmp	r0, #0
 8008798:	d017      	beq.n	80087ca <_strtod_l+0xba2>
 800879a:	0028      	movs	r0, r5
 800879c:	0021      	movs	r1, r4
 800879e:	f7f7 fef3 	bl	8000588 <__aeabi_d2uiz>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d100      	bne.n	80087a8 <_strtod_l+0xb80>
 80087a6:	3001      	adds	r0, #1
 80087a8:	f7fa fae8 	bl	8002d7c <__aeabi_ui2d>
 80087ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087ae:	0005      	movs	r5, r0
 80087b0:	000b      	movs	r3, r1
 80087b2:	000c      	movs	r4, r1
 80087b4:	2a00      	cmp	r2, #0
 80087b6:	d122      	bne.n	80087fe <_strtod_l+0xbd6>
 80087b8:	2280      	movs	r2, #128	; 0x80
 80087ba:	0612      	lsls	r2, r2, #24
 80087bc:	188b      	adds	r3, r1, r2
 80087be:	9018      	str	r0, [sp, #96]	; 0x60
 80087c0:	9319      	str	r3, [sp, #100]	; 0x64
 80087c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80087c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087c6:	9210      	str	r2, [sp, #64]	; 0x40
 80087c8:	9311      	str	r3, [sp, #68]	; 0x44
 80087ca:	22d6      	movs	r2, #214	; 0xd6
 80087cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ce:	04d2      	lsls	r2, r2, #19
 80087d0:	189b      	adds	r3, r3, r2
 80087d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087d4:	1a9b      	subs	r3, r3, r2
 80087d6:	9311      	str	r3, [sp, #68]	; 0x44
 80087d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80087da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80087dc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80087de:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80087e0:	f001 feac 	bl	800a53c <__ulp>
 80087e4:	0002      	movs	r2, r0
 80087e6:	000b      	movs	r3, r1
 80087e8:	0030      	movs	r0, r6
 80087ea:	0039      	movs	r1, r7
 80087ec:	f7f9 fc44 	bl	8002078 <__aeabi_dmul>
 80087f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087f4:	f7f8 fd02 	bl	80011fc <__aeabi_dadd>
 80087f8:	0006      	movs	r6, r0
 80087fa:	000f      	movs	r7, r1
 80087fc:	e78f      	b.n	800871e <_strtod_l+0xaf6>
 80087fe:	0002      	movs	r2, r0
 8008800:	9218      	str	r2, [sp, #96]	; 0x60
 8008802:	9319      	str	r3, [sp, #100]	; 0x64
 8008804:	e7dd      	b.n	80087c2 <_strtod_l+0xb9a>
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <_strtod_l+0xc24>)
 8008808:	f7f7 fe24 	bl	8000454 <__aeabi_dcmplt>
 800880c:	e7b1      	b.n	8008772 <_strtod_l+0xb4a>
 800880e:	46c0      	nop			; (mov r8, r8)
 8008810:	fff00000 	.word	0xfff00000
 8008814:	000fffff 	.word	0x000fffff
 8008818:	3ff00000 	.word	0x3ff00000
 800881c:	7ff00000 	.word	0x7ff00000
 8008820:	7fe00000 	.word	0x7fe00000
 8008824:	fcb00000 	.word	0xfcb00000
 8008828:	7c9fffff 	.word	0x7c9fffff
 800882c:	7fefffff 	.word	0x7fefffff
 8008830:	3fe00000 	.word	0x3fe00000
 8008834:	bff00000 	.word	0xbff00000
 8008838:	94a03595 	.word	0x94a03595
 800883c:	3fdfffff 	.word	0x3fdfffff
 8008840:	35afe535 	.word	0x35afe535
 8008844:	ffc00000 	.word	0xffc00000
 8008848:	41dfffff 	.word	0x41dfffff
 800884c:	3fcfffff 	.word	0x3fcfffff

08008850 <_strtod_r>:
 8008850:	b510      	push	{r4, lr}
 8008852:	4b02      	ldr	r3, [pc, #8]	; (800885c <_strtod_r+0xc>)
 8008854:	f7ff f9e8 	bl	8007c28 <_strtod_l>
 8008858:	bd10      	pop	{r4, pc}
 800885a:	46c0      	nop			; (mov r8, r8)
 800885c:	20000074 	.word	0x20000074

08008860 <_strtol_l.constprop.0>:
 8008860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008862:	b087      	sub	sp, #28
 8008864:	001e      	movs	r6, r3
 8008866:	9005      	str	r0, [sp, #20]
 8008868:	9101      	str	r1, [sp, #4]
 800886a:	9202      	str	r2, [sp, #8]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d045      	beq.n	80088fc <_strtol_l.constprop.0+0x9c>
 8008870:	000b      	movs	r3, r1
 8008872:	2e24      	cmp	r6, #36	; 0x24
 8008874:	d842      	bhi.n	80088fc <_strtol_l.constprop.0+0x9c>
 8008876:	4a3f      	ldr	r2, [pc, #252]	; (8008974 <_strtol_l.constprop.0+0x114>)
 8008878:	2108      	movs	r1, #8
 800887a:	4694      	mov	ip, r2
 800887c:	001a      	movs	r2, r3
 800887e:	4660      	mov	r0, ip
 8008880:	7814      	ldrb	r4, [r2, #0]
 8008882:	3301      	adds	r3, #1
 8008884:	5d00      	ldrb	r0, [r0, r4]
 8008886:	001d      	movs	r5, r3
 8008888:	0007      	movs	r7, r0
 800888a:	400f      	ands	r7, r1
 800888c:	4208      	tst	r0, r1
 800888e:	d1f5      	bne.n	800887c <_strtol_l.constprop.0+0x1c>
 8008890:	2c2d      	cmp	r4, #45	; 0x2d
 8008892:	d13a      	bne.n	800890a <_strtol_l.constprop.0+0xaa>
 8008894:	2701      	movs	r7, #1
 8008896:	781c      	ldrb	r4, [r3, #0]
 8008898:	1c95      	adds	r5, r2, #2
 800889a:	2e00      	cmp	r6, #0
 800889c:	d065      	beq.n	800896a <_strtol_l.constprop.0+0x10a>
 800889e:	2e10      	cmp	r6, #16
 80088a0:	d109      	bne.n	80088b6 <_strtol_l.constprop.0+0x56>
 80088a2:	2c30      	cmp	r4, #48	; 0x30
 80088a4:	d107      	bne.n	80088b6 <_strtol_l.constprop.0+0x56>
 80088a6:	2220      	movs	r2, #32
 80088a8:	782b      	ldrb	r3, [r5, #0]
 80088aa:	4393      	bics	r3, r2
 80088ac:	2b58      	cmp	r3, #88	; 0x58
 80088ae:	d157      	bne.n	8008960 <_strtol_l.constprop.0+0x100>
 80088b0:	2610      	movs	r6, #16
 80088b2:	786c      	ldrb	r4, [r5, #1]
 80088b4:	3502      	adds	r5, #2
 80088b6:	4b30      	ldr	r3, [pc, #192]	; (8008978 <_strtol_l.constprop.0+0x118>)
 80088b8:	0031      	movs	r1, r6
 80088ba:	18fb      	adds	r3, r7, r3
 80088bc:	0018      	movs	r0, r3
 80088be:	9303      	str	r3, [sp, #12]
 80088c0:	f7f7 fcc2 	bl	8000248 <__aeabi_uidivmod>
 80088c4:	2300      	movs	r3, #0
 80088c6:	2201      	movs	r2, #1
 80088c8:	4684      	mov	ip, r0
 80088ca:	0018      	movs	r0, r3
 80088cc:	9104      	str	r1, [sp, #16]
 80088ce:	4252      	negs	r2, r2
 80088d0:	0021      	movs	r1, r4
 80088d2:	3930      	subs	r1, #48	; 0x30
 80088d4:	2909      	cmp	r1, #9
 80088d6:	d81d      	bhi.n	8008914 <_strtol_l.constprop.0+0xb4>
 80088d8:	000c      	movs	r4, r1
 80088da:	42a6      	cmp	r6, r4
 80088dc:	dd28      	ble.n	8008930 <_strtol_l.constprop.0+0xd0>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	db24      	blt.n	800892c <_strtol_l.constprop.0+0xcc>
 80088e2:	0013      	movs	r3, r2
 80088e4:	4584      	cmp	ip, r0
 80088e6:	d306      	bcc.n	80088f6 <_strtol_l.constprop.0+0x96>
 80088e8:	d102      	bne.n	80088f0 <_strtol_l.constprop.0+0x90>
 80088ea:	9904      	ldr	r1, [sp, #16]
 80088ec:	42a1      	cmp	r1, r4
 80088ee:	db02      	blt.n	80088f6 <_strtol_l.constprop.0+0x96>
 80088f0:	2301      	movs	r3, #1
 80088f2:	4370      	muls	r0, r6
 80088f4:	1820      	adds	r0, r4, r0
 80088f6:	782c      	ldrb	r4, [r5, #0]
 80088f8:	3501      	adds	r5, #1
 80088fa:	e7e9      	b.n	80088d0 <_strtol_l.constprop.0+0x70>
 80088fc:	f7fe f9a8 	bl	8006c50 <__errno>
 8008900:	2316      	movs	r3, #22
 8008902:	6003      	str	r3, [r0, #0]
 8008904:	2000      	movs	r0, #0
 8008906:	b007      	add	sp, #28
 8008908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800890a:	2c2b      	cmp	r4, #43	; 0x2b
 800890c:	d1c5      	bne.n	800889a <_strtol_l.constprop.0+0x3a>
 800890e:	781c      	ldrb	r4, [r3, #0]
 8008910:	1c95      	adds	r5, r2, #2
 8008912:	e7c2      	b.n	800889a <_strtol_l.constprop.0+0x3a>
 8008914:	0021      	movs	r1, r4
 8008916:	3941      	subs	r1, #65	; 0x41
 8008918:	2919      	cmp	r1, #25
 800891a:	d801      	bhi.n	8008920 <_strtol_l.constprop.0+0xc0>
 800891c:	3c37      	subs	r4, #55	; 0x37
 800891e:	e7dc      	b.n	80088da <_strtol_l.constprop.0+0x7a>
 8008920:	0021      	movs	r1, r4
 8008922:	3961      	subs	r1, #97	; 0x61
 8008924:	2919      	cmp	r1, #25
 8008926:	d803      	bhi.n	8008930 <_strtol_l.constprop.0+0xd0>
 8008928:	3c57      	subs	r4, #87	; 0x57
 800892a:	e7d6      	b.n	80088da <_strtol_l.constprop.0+0x7a>
 800892c:	0013      	movs	r3, r2
 800892e:	e7e2      	b.n	80088f6 <_strtol_l.constprop.0+0x96>
 8008930:	2b00      	cmp	r3, #0
 8008932:	da09      	bge.n	8008948 <_strtol_l.constprop.0+0xe8>
 8008934:	2322      	movs	r3, #34	; 0x22
 8008936:	9a05      	ldr	r2, [sp, #20]
 8008938:	9803      	ldr	r0, [sp, #12]
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	9b02      	ldr	r3, [sp, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0e1      	beq.n	8008906 <_strtol_l.constprop.0+0xa6>
 8008942:	1e6b      	subs	r3, r5, #1
 8008944:	9301      	str	r3, [sp, #4]
 8008946:	e007      	b.n	8008958 <_strtol_l.constprop.0+0xf8>
 8008948:	2f00      	cmp	r7, #0
 800894a:	d000      	beq.n	800894e <_strtol_l.constprop.0+0xee>
 800894c:	4240      	negs	r0, r0
 800894e:	9a02      	ldr	r2, [sp, #8]
 8008950:	2a00      	cmp	r2, #0
 8008952:	d0d8      	beq.n	8008906 <_strtol_l.constprop.0+0xa6>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1f4      	bne.n	8008942 <_strtol_l.constprop.0+0xe2>
 8008958:	9b02      	ldr	r3, [sp, #8]
 800895a:	9a01      	ldr	r2, [sp, #4]
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	e7d2      	b.n	8008906 <_strtol_l.constprop.0+0xa6>
 8008960:	2430      	movs	r4, #48	; 0x30
 8008962:	2e00      	cmp	r6, #0
 8008964:	d1a7      	bne.n	80088b6 <_strtol_l.constprop.0+0x56>
 8008966:	3608      	adds	r6, #8
 8008968:	e7a5      	b.n	80088b6 <_strtol_l.constprop.0+0x56>
 800896a:	2c30      	cmp	r4, #48	; 0x30
 800896c:	d09b      	beq.n	80088a6 <_strtol_l.constprop.0+0x46>
 800896e:	260a      	movs	r6, #10
 8008970:	e7a1      	b.n	80088b6 <_strtol_l.constprop.0+0x56>
 8008972:	46c0      	nop			; (mov r8, r8)
 8008974:	0800b921 	.word	0x0800b921
 8008978:	7fffffff 	.word	0x7fffffff

0800897c <_strtol_r>:
 800897c:	b510      	push	{r4, lr}
 800897e:	f7ff ff6f 	bl	8008860 <_strtol_l.constprop.0>
 8008982:	bd10      	pop	{r4, pc}

08008984 <strtol>:
 8008984:	b510      	push	{r4, lr}
 8008986:	0013      	movs	r3, r2
 8008988:	000a      	movs	r2, r1
 800898a:	0001      	movs	r1, r0
 800898c:	4802      	ldr	r0, [pc, #8]	; (8008998 <strtol+0x14>)
 800898e:	6800      	ldr	r0, [r0, #0]
 8008990:	f7ff ff66 	bl	8008860 <_strtol_l.constprop.0>
 8008994:	bd10      	pop	{r4, pc}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	2000000c 	.word	0x2000000c

0800899c <quorem>:
 800899c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800899e:	0006      	movs	r6, r0
 80089a0:	690b      	ldr	r3, [r1, #16]
 80089a2:	6932      	ldr	r2, [r6, #16]
 80089a4:	b087      	sub	sp, #28
 80089a6:	2000      	movs	r0, #0
 80089a8:	9103      	str	r1, [sp, #12]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	db65      	blt.n	8008a7a <quorem+0xde>
 80089ae:	3b01      	subs	r3, #1
 80089b0:	009c      	lsls	r4, r3, #2
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	000b      	movs	r3, r1
 80089b6:	3314      	adds	r3, #20
 80089b8:	9305      	str	r3, [sp, #20]
 80089ba:	191b      	adds	r3, r3, r4
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	0033      	movs	r3, r6
 80089c0:	3314      	adds	r3, #20
 80089c2:	9302      	str	r3, [sp, #8]
 80089c4:	191c      	adds	r4, r3, r4
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	6827      	ldr	r7, [r4, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	0038      	movs	r0, r7
 80089ce:	1c5d      	adds	r5, r3, #1
 80089d0:	0029      	movs	r1, r5
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	f7f7 fbb2 	bl	800013c <__udivsi3>
 80089d8:	9001      	str	r0, [sp, #4]
 80089da:	42af      	cmp	r7, r5
 80089dc:	d324      	bcc.n	8008a28 <quorem+0x8c>
 80089de:	2500      	movs	r5, #0
 80089e0:	46ac      	mov	ip, r5
 80089e2:	9802      	ldr	r0, [sp, #8]
 80089e4:	9f05      	ldr	r7, [sp, #20]
 80089e6:	cf08      	ldmia	r7!, {r3}
 80089e8:	9a01      	ldr	r2, [sp, #4]
 80089ea:	b299      	uxth	r1, r3
 80089ec:	4351      	muls	r1, r2
 80089ee:	0c1b      	lsrs	r3, r3, #16
 80089f0:	4353      	muls	r3, r2
 80089f2:	1949      	adds	r1, r1, r5
 80089f4:	0c0a      	lsrs	r2, r1, #16
 80089f6:	189b      	adds	r3, r3, r2
 80089f8:	6802      	ldr	r2, [r0, #0]
 80089fa:	b289      	uxth	r1, r1
 80089fc:	b292      	uxth	r2, r2
 80089fe:	4462      	add	r2, ip
 8008a00:	1a52      	subs	r2, r2, r1
 8008a02:	6801      	ldr	r1, [r0, #0]
 8008a04:	0c1d      	lsrs	r5, r3, #16
 8008a06:	0c09      	lsrs	r1, r1, #16
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	1acb      	subs	r3, r1, r3
 8008a0c:	1411      	asrs	r1, r2, #16
 8008a0e:	185b      	adds	r3, r3, r1
 8008a10:	1419      	asrs	r1, r3, #16
 8008a12:	b292      	uxth	r2, r2
 8008a14:	041b      	lsls	r3, r3, #16
 8008a16:	431a      	orrs	r2, r3
 8008a18:	9b04      	ldr	r3, [sp, #16]
 8008a1a:	468c      	mov	ip, r1
 8008a1c:	c004      	stmia	r0!, {r2}
 8008a1e:	42bb      	cmp	r3, r7
 8008a20:	d2e1      	bcs.n	80089e6 <quorem+0x4a>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d030      	beq.n	8008a8a <quorem+0xee>
 8008a28:	0030      	movs	r0, r6
 8008a2a:	9903      	ldr	r1, [sp, #12]
 8008a2c:	f001 fcd2 	bl	800a3d4 <__mcmp>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	db21      	blt.n	8008a78 <quorem+0xdc>
 8008a34:	0030      	movs	r0, r6
 8008a36:	2400      	movs	r4, #0
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	9903      	ldr	r1, [sp, #12]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	9301      	str	r3, [sp, #4]
 8008a40:	3014      	adds	r0, #20
 8008a42:	3114      	adds	r1, #20
 8008a44:	6803      	ldr	r3, [r0, #0]
 8008a46:	c920      	ldmia	r1!, {r5}
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	1914      	adds	r4, r2, r4
 8008a4c:	b2aa      	uxth	r2, r5
 8008a4e:	1aa2      	subs	r2, r4, r2
 8008a50:	0c1b      	lsrs	r3, r3, #16
 8008a52:	0c2d      	lsrs	r5, r5, #16
 8008a54:	1414      	asrs	r4, r2, #16
 8008a56:	1b5b      	subs	r3, r3, r5
 8008a58:	191b      	adds	r3, r3, r4
 8008a5a:	141c      	asrs	r4, r3, #16
 8008a5c:	b292      	uxth	r2, r2
 8008a5e:	041b      	lsls	r3, r3, #16
 8008a60:	4313      	orrs	r3, r2
 8008a62:	c008      	stmia	r0!, {r3}
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	428b      	cmp	r3, r1
 8008a68:	d2ec      	bcs.n	8008a44 <quorem+0xa8>
 8008a6a:	9b00      	ldr	r3, [sp, #0]
 8008a6c:	9a02      	ldr	r2, [sp, #8]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	18d3      	adds	r3, r2, r3
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	d015      	beq.n	8008aa4 <quorem+0x108>
 8008a78:	9801      	ldr	r0, [sp, #4]
 8008a7a:	b007      	add	sp, #28
 8008a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d106      	bne.n	8008a92 <quorem+0xf6>
 8008a84:	9b00      	ldr	r3, [sp, #0]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	9b02      	ldr	r3, [sp, #8]
 8008a8c:	3c04      	subs	r4, #4
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	d3f5      	bcc.n	8008a7e <quorem+0xe2>
 8008a92:	9b00      	ldr	r3, [sp, #0]
 8008a94:	6133      	str	r3, [r6, #16]
 8008a96:	e7c7      	b.n	8008a28 <quorem+0x8c>
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	d106      	bne.n	8008aac <quorem+0x110>
 8008a9e:	9a00      	ldr	r2, [sp, #0]
 8008aa0:	3a01      	subs	r2, #1
 8008aa2:	9200      	str	r2, [sp, #0]
 8008aa4:	9a02      	ldr	r2, [sp, #8]
 8008aa6:	3b04      	subs	r3, #4
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d3f5      	bcc.n	8008a98 <quorem+0xfc>
 8008aac:	9b00      	ldr	r3, [sp, #0]
 8008aae:	6133      	str	r3, [r6, #16]
 8008ab0:	e7e2      	b.n	8008a78 <quorem+0xdc>
	...

08008ab4 <_dtoa_r>:
 8008ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ab6:	b09d      	sub	sp, #116	; 0x74
 8008ab8:	9202      	str	r2, [sp, #8]
 8008aba:	9303      	str	r3, [sp, #12]
 8008abc:	9b02      	ldr	r3, [sp, #8]
 8008abe:	9c03      	ldr	r4, [sp, #12]
 8008ac0:	9308      	str	r3, [sp, #32]
 8008ac2:	9409      	str	r4, [sp, #36]	; 0x24
 8008ac4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ac6:	0007      	movs	r7, r0
 8008ac8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008aca:	2c00      	cmp	r4, #0
 8008acc:	d10e      	bne.n	8008aec <_dtoa_r+0x38>
 8008ace:	2010      	movs	r0, #16
 8008ad0:	f7fe f8e8 	bl	8006ca4 <malloc>
 8008ad4:	1e02      	subs	r2, r0, #0
 8008ad6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ad8:	d104      	bne.n	8008ae4 <_dtoa_r+0x30>
 8008ada:	21ea      	movs	r1, #234	; 0xea
 8008adc:	4bc7      	ldr	r3, [pc, #796]	; (8008dfc <_dtoa_r+0x348>)
 8008ade:	48c8      	ldr	r0, [pc, #800]	; (8008e00 <_dtoa_r+0x34c>)
 8008ae0:	f002 f826 	bl	800ab30 <__assert_func>
 8008ae4:	6044      	str	r4, [r0, #4]
 8008ae6:	6084      	str	r4, [r0, #8]
 8008ae8:	6004      	str	r4, [r0, #0]
 8008aea:	60c4      	str	r4, [r0, #12]
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	6819      	ldr	r1, [r3, #0]
 8008af0:	2900      	cmp	r1, #0
 8008af2:	d00a      	beq.n	8008b0a <_dtoa_r+0x56>
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	2301      	movs	r3, #1
 8008af8:	4093      	lsls	r3, r2
 8008afa:	604a      	str	r2, [r1, #4]
 8008afc:	608b      	str	r3, [r1, #8]
 8008afe:	0038      	movs	r0, r7
 8008b00:	f001 f9dc 	bl	8009ebc <_Bfree>
 8008b04:	2200      	movs	r2, #0
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	601a      	str	r2, [r3, #0]
 8008b0a:	9b03      	ldr	r3, [sp, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	da20      	bge.n	8008b52 <_dtoa_r+0x9e>
 8008b10:	2301      	movs	r3, #1
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	085b      	lsrs	r3, r3, #1
 8008b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b1e:	4bb9      	ldr	r3, [pc, #740]	; (8008e04 <_dtoa_r+0x350>)
 8008b20:	4ab8      	ldr	r2, [pc, #736]	; (8008e04 <_dtoa_r+0x350>)
 8008b22:	402b      	ands	r3, r5
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d117      	bne.n	8008b58 <_dtoa_r+0xa4>
 8008b28:	4bb7      	ldr	r3, [pc, #732]	; (8008e08 <_dtoa_r+0x354>)
 8008b2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b2c:	0328      	lsls	r0, r5, #12
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	9b02      	ldr	r3, [sp, #8]
 8008b32:	0b00      	lsrs	r0, r0, #12
 8008b34:	4318      	orrs	r0, r3
 8008b36:	d101      	bne.n	8008b3c <_dtoa_r+0x88>
 8008b38:	f000 fdbf 	bl	80096ba <_dtoa_r+0xc06>
 8008b3c:	48b3      	ldr	r0, [pc, #716]	; (8008e0c <_dtoa_r+0x358>)
 8008b3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b40:	9006      	str	r0, [sp, #24]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <_dtoa_r+0x98>
 8008b46:	4bb2      	ldr	r3, [pc, #712]	; (8008e10 <_dtoa_r+0x35c>)
 8008b48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	9806      	ldr	r0, [sp, #24]
 8008b4e:	b01d      	add	sp, #116	; 0x74
 8008b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b52:	2300      	movs	r3, #0
 8008b54:	602b      	str	r3, [r5, #0]
 8008b56:	e7e1      	b.n	8008b1c <_dtoa_r+0x68>
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008b5c:	9312      	str	r3, [sp, #72]	; 0x48
 8008b5e:	9413      	str	r4, [sp, #76]	; 0x4c
 8008b60:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b62:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008b64:	2200      	movs	r2, #0
 8008b66:	2300      	movs	r3, #0
 8008b68:	f7f7 fc6e 	bl	8000448 <__aeabi_dcmpeq>
 8008b6c:	1e04      	subs	r4, r0, #0
 8008b6e:	d009      	beq.n	8008b84 <_dtoa_r+0xd0>
 8008b70:	2301      	movs	r3, #1
 8008b72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	4ba7      	ldr	r3, [pc, #668]	; (8008e14 <_dtoa_r+0x360>)
 8008b78:	9306      	str	r3, [sp, #24]
 8008b7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d0e5      	beq.n	8008b4c <_dtoa_r+0x98>
 8008b80:	4ba5      	ldr	r3, [pc, #660]	; (8008e18 <_dtoa_r+0x364>)
 8008b82:	e7e1      	b.n	8008b48 <_dtoa_r+0x94>
 8008b84:	ab1a      	add	r3, sp, #104	; 0x68
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	ab1b      	add	r3, sp, #108	; 0x6c
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	0038      	movs	r0, r7
 8008b8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b92:	f001 fd47 	bl	800a624 <__d2b>
 8008b96:	006e      	lsls	r6, r5, #1
 8008b98:	9005      	str	r0, [sp, #20]
 8008b9a:	0d76      	lsrs	r6, r6, #21
 8008b9c:	d100      	bne.n	8008ba0 <_dtoa_r+0xec>
 8008b9e:	e07c      	b.n	8008c9a <_dtoa_r+0x1e6>
 8008ba0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ba2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ba6:	4a9d      	ldr	r2, [pc, #628]	; (8008e1c <_dtoa_r+0x368>)
 8008ba8:	031b      	lsls	r3, r3, #12
 8008baa:	0b1b      	lsrs	r3, r3, #12
 8008bac:	431a      	orrs	r2, r3
 8008bae:	0011      	movs	r1, r2
 8008bb0:	4b9b      	ldr	r3, [pc, #620]	; (8008e20 <_dtoa_r+0x36c>)
 8008bb2:	9418      	str	r4, [sp, #96]	; 0x60
 8008bb4:	18f6      	adds	r6, r6, r3
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	4b9a      	ldr	r3, [pc, #616]	; (8008e24 <_dtoa_r+0x370>)
 8008bba:	f7f9 fcc9 	bl	8002550 <__aeabi_dsub>
 8008bbe:	4a9a      	ldr	r2, [pc, #616]	; (8008e28 <_dtoa_r+0x374>)
 8008bc0:	4b9a      	ldr	r3, [pc, #616]	; (8008e2c <_dtoa_r+0x378>)
 8008bc2:	f7f9 fa59 	bl	8002078 <__aeabi_dmul>
 8008bc6:	4a9a      	ldr	r2, [pc, #616]	; (8008e30 <_dtoa_r+0x37c>)
 8008bc8:	4b9a      	ldr	r3, [pc, #616]	; (8008e34 <_dtoa_r+0x380>)
 8008bca:	f7f8 fb17 	bl	80011fc <__aeabi_dadd>
 8008bce:	0004      	movs	r4, r0
 8008bd0:	0030      	movs	r0, r6
 8008bd2:	000d      	movs	r5, r1
 8008bd4:	f7fa f8a2 	bl	8002d1c <__aeabi_i2d>
 8008bd8:	4a97      	ldr	r2, [pc, #604]	; (8008e38 <_dtoa_r+0x384>)
 8008bda:	4b98      	ldr	r3, [pc, #608]	; (8008e3c <_dtoa_r+0x388>)
 8008bdc:	f7f9 fa4c 	bl	8002078 <__aeabi_dmul>
 8008be0:	0002      	movs	r2, r0
 8008be2:	000b      	movs	r3, r1
 8008be4:	0020      	movs	r0, r4
 8008be6:	0029      	movs	r1, r5
 8008be8:	f7f8 fb08 	bl	80011fc <__aeabi_dadd>
 8008bec:	0004      	movs	r4, r0
 8008bee:	000d      	movs	r5, r1
 8008bf0:	f7fa f85e 	bl	8002cb0 <__aeabi_d2iz>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	9002      	str	r0, [sp, #8]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	0020      	movs	r0, r4
 8008bfc:	0029      	movs	r1, r5
 8008bfe:	f7f7 fc29 	bl	8000454 <__aeabi_dcmplt>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d00b      	beq.n	8008c1e <_dtoa_r+0x16a>
 8008c06:	9802      	ldr	r0, [sp, #8]
 8008c08:	f7fa f888 	bl	8002d1c <__aeabi_i2d>
 8008c0c:	002b      	movs	r3, r5
 8008c0e:	0022      	movs	r2, r4
 8008c10:	f7f7 fc1a 	bl	8000448 <__aeabi_dcmpeq>
 8008c14:	4243      	negs	r3, r0
 8008c16:	4158      	adcs	r0, r3
 8008c18:	9b02      	ldr	r3, [sp, #8]
 8008c1a:	1a1b      	subs	r3, r3, r0
 8008c1c:	9302      	str	r3, [sp, #8]
 8008c1e:	2301      	movs	r3, #1
 8008c20:	9316      	str	r3, [sp, #88]	; 0x58
 8008c22:	9b02      	ldr	r3, [sp, #8]
 8008c24:	2b16      	cmp	r3, #22
 8008c26:	d80f      	bhi.n	8008c48 <_dtoa_r+0x194>
 8008c28:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008c2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c2c:	00da      	lsls	r2, r3, #3
 8008c2e:	4b84      	ldr	r3, [pc, #528]	; (8008e40 <_dtoa_r+0x38c>)
 8008c30:	189b      	adds	r3, r3, r2
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f7f7 fc0d 	bl	8000454 <__aeabi_dcmplt>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d049      	beq.n	8008cd2 <_dtoa_r+0x21e>
 8008c3e:	9b02      	ldr	r3, [sp, #8]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	9302      	str	r3, [sp, #8]
 8008c44:	2300      	movs	r3, #0
 8008c46:	9316      	str	r3, [sp, #88]	; 0x58
 8008c48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008c4a:	1b9e      	subs	r6, r3, r6
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c50:	0033      	movs	r3, r6
 8008c52:	3b01      	subs	r3, #1
 8008c54:	930d      	str	r3, [sp, #52]	; 0x34
 8008c56:	d504      	bpl.n	8008c62 <_dtoa_r+0x1ae>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	1b9b      	subs	r3, r3, r6
 8008c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8008c5e:	2300      	movs	r3, #0
 8008c60:	930d      	str	r3, [sp, #52]	; 0x34
 8008c62:	9b02      	ldr	r3, [sp, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	db36      	blt.n	8008cd6 <_dtoa_r+0x222>
 8008c68:	9a02      	ldr	r2, [sp, #8]
 8008c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c6c:	4694      	mov	ip, r2
 8008c6e:	4463      	add	r3, ip
 8008c70:	930d      	str	r3, [sp, #52]	; 0x34
 8008c72:	2300      	movs	r3, #0
 8008c74:	9215      	str	r2, [sp, #84]	; 0x54
 8008c76:	930e      	str	r3, [sp, #56]	; 0x38
 8008c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c7a:	2401      	movs	r4, #1
 8008c7c:	2b09      	cmp	r3, #9
 8008c7e:	d864      	bhi.n	8008d4a <_dtoa_r+0x296>
 8008c80:	2b05      	cmp	r3, #5
 8008c82:	dd02      	ble.n	8008c8a <_dtoa_r+0x1d6>
 8008c84:	2400      	movs	r4, #0
 8008c86:	3b04      	subs	r3, #4
 8008c88:	9322      	str	r3, [sp, #136]	; 0x88
 8008c8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c8c:	1e98      	subs	r0, r3, #2
 8008c8e:	2803      	cmp	r0, #3
 8008c90:	d864      	bhi.n	8008d5c <_dtoa_r+0x2a8>
 8008c92:	f7f7 fa3f 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008c96:	3829      	.short	0x3829
 8008c98:	5836      	.short	0x5836
 8008c9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008c9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c9e:	189e      	adds	r6, r3, r2
 8008ca0:	4b68      	ldr	r3, [pc, #416]	; (8008e44 <_dtoa_r+0x390>)
 8008ca2:	18f2      	adds	r2, r6, r3
 8008ca4:	2a20      	cmp	r2, #32
 8008ca6:	dd0f      	ble.n	8008cc8 <_dtoa_r+0x214>
 8008ca8:	2340      	movs	r3, #64	; 0x40
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	409d      	lsls	r5, r3
 8008cae:	4b66      	ldr	r3, [pc, #408]	; (8008e48 <_dtoa_r+0x394>)
 8008cb0:	9802      	ldr	r0, [sp, #8]
 8008cb2:	18f3      	adds	r3, r6, r3
 8008cb4:	40d8      	lsrs	r0, r3
 8008cb6:	4328      	orrs	r0, r5
 8008cb8:	f7fa f860 	bl	8002d7c <__aeabi_ui2d>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4c63      	ldr	r4, [pc, #396]	; (8008e4c <_dtoa_r+0x398>)
 8008cc0:	3e01      	subs	r6, #1
 8008cc2:	1909      	adds	r1, r1, r4
 8008cc4:	9318      	str	r3, [sp, #96]	; 0x60
 8008cc6:	e776      	b.n	8008bb6 <_dtoa_r+0x102>
 8008cc8:	2320      	movs	r3, #32
 8008cca:	9802      	ldr	r0, [sp, #8]
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	4098      	lsls	r0, r3
 8008cd0:	e7f2      	b.n	8008cb8 <_dtoa_r+0x204>
 8008cd2:	9016      	str	r0, [sp, #88]	; 0x58
 8008cd4:	e7b8      	b.n	8008c48 <_dtoa_r+0x194>
 8008cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd8:	9a02      	ldr	r2, [sp, #8]
 8008cda:	1a9b      	subs	r3, r3, r2
 8008cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8008cde:	4253      	negs	r3, r2
 8008ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9315      	str	r3, [sp, #84]	; 0x54
 8008ce6:	e7c7      	b.n	8008c78 <_dtoa_r+0x1c4>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cee:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf0:	9307      	str	r3, [sp, #28]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	dc13      	bgt.n	8008d1e <_dtoa_r+0x26a>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	001a      	movs	r2, r3
 8008cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8008cfc:	9307      	str	r3, [sp, #28]
 8008cfe:	9223      	str	r2, [sp, #140]	; 0x8c
 8008d00:	e00d      	b.n	8008d1e <_dtoa_r+0x26a>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e7f1      	b.n	8008cea <_dtoa_r+0x236>
 8008d06:	2300      	movs	r3, #0
 8008d08:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008d0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d0c:	4694      	mov	ip, r2
 8008d0e:	9b02      	ldr	r3, [sp, #8]
 8008d10:	4463      	add	r3, ip
 8008d12:	930c      	str	r3, [sp, #48]	; 0x30
 8008d14:	3301      	adds	r3, #1
 8008d16:	9307      	str	r3, [sp, #28]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dc00      	bgt.n	8008d1e <_dtoa_r+0x26a>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d22:	6042      	str	r2, [r0, #4]
 8008d24:	3204      	adds	r2, #4
 8008d26:	0015      	movs	r5, r2
 8008d28:	3514      	adds	r5, #20
 8008d2a:	6841      	ldr	r1, [r0, #4]
 8008d2c:	429d      	cmp	r5, r3
 8008d2e:	d919      	bls.n	8008d64 <_dtoa_r+0x2b0>
 8008d30:	0038      	movs	r0, r7
 8008d32:	f001 f87f 	bl	8009e34 <_Balloc>
 8008d36:	9006      	str	r0, [sp, #24]
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d117      	bne.n	8008d6c <_dtoa_r+0x2b8>
 8008d3c:	21d5      	movs	r1, #213	; 0xd5
 8008d3e:	0002      	movs	r2, r0
 8008d40:	4b43      	ldr	r3, [pc, #268]	; (8008e50 <_dtoa_r+0x39c>)
 8008d42:	0049      	lsls	r1, r1, #1
 8008d44:	e6cb      	b.n	8008ade <_dtoa_r+0x2a>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e7de      	b.n	8008d08 <_dtoa_r+0x254>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	940f      	str	r4, [sp, #60]	; 0x3c
 8008d4e:	9322      	str	r3, [sp, #136]	; 0x88
 8008d50:	3b01      	subs	r3, #1
 8008d52:	930c      	str	r3, [sp, #48]	; 0x30
 8008d54:	9307      	str	r3, [sp, #28]
 8008d56:	2200      	movs	r2, #0
 8008d58:	3313      	adds	r3, #19
 8008d5a:	e7d0      	b.n	8008cfe <_dtoa_r+0x24a>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d60:	3b02      	subs	r3, #2
 8008d62:	e7f6      	b.n	8008d52 <_dtoa_r+0x29e>
 8008d64:	3101      	adds	r1, #1
 8008d66:	6041      	str	r1, [r0, #4]
 8008d68:	0052      	lsls	r2, r2, #1
 8008d6a:	e7dc      	b.n	8008d26 <_dtoa_r+0x272>
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	9a06      	ldr	r2, [sp, #24]
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	9b07      	ldr	r3, [sp, #28]
 8008d74:	2b0e      	cmp	r3, #14
 8008d76:	d900      	bls.n	8008d7a <_dtoa_r+0x2c6>
 8008d78:	e0eb      	b.n	8008f52 <_dtoa_r+0x49e>
 8008d7a:	2c00      	cmp	r4, #0
 8008d7c:	d100      	bne.n	8008d80 <_dtoa_r+0x2cc>
 8008d7e:	e0e8      	b.n	8008f52 <_dtoa_r+0x49e>
 8008d80:	9b02      	ldr	r3, [sp, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dd68      	ble.n	8008e58 <_dtoa_r+0x3a4>
 8008d86:	001a      	movs	r2, r3
 8008d88:	210f      	movs	r1, #15
 8008d8a:	4b2d      	ldr	r3, [pc, #180]	; (8008e40 <_dtoa_r+0x38c>)
 8008d8c:	400a      	ands	r2, r1
 8008d8e:	00d2      	lsls	r2, r2, #3
 8008d90:	189b      	adds	r3, r3, r2
 8008d92:	681d      	ldr	r5, [r3, #0]
 8008d94:	685e      	ldr	r6, [r3, #4]
 8008d96:	9b02      	ldr	r3, [sp, #8]
 8008d98:	111c      	asrs	r4, r3, #4
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	9310      	str	r3, [sp, #64]	; 0x40
 8008d9e:	9b02      	ldr	r3, [sp, #8]
 8008da0:	05db      	lsls	r3, r3, #23
 8008da2:	d50b      	bpl.n	8008dbc <_dtoa_r+0x308>
 8008da4:	4b2b      	ldr	r3, [pc, #172]	; (8008e54 <_dtoa_r+0x3a0>)
 8008da6:	400c      	ands	r4, r1
 8008da8:	6a1a      	ldr	r2, [r3, #32]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008dae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008db0:	f7f8 fd60 	bl	8001874 <__aeabi_ddiv>
 8008db4:	2303      	movs	r3, #3
 8008db6:	9008      	str	r0, [sp, #32]
 8008db8:	9109      	str	r1, [sp, #36]	; 0x24
 8008dba:	9310      	str	r3, [sp, #64]	; 0x40
 8008dbc:	4b25      	ldr	r3, [pc, #148]	; (8008e54 <_dtoa_r+0x3a0>)
 8008dbe:	9314      	str	r3, [sp, #80]	; 0x50
 8008dc0:	2c00      	cmp	r4, #0
 8008dc2:	d108      	bne.n	8008dd6 <_dtoa_r+0x322>
 8008dc4:	9808      	ldr	r0, [sp, #32]
 8008dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dc8:	002a      	movs	r2, r5
 8008dca:	0033      	movs	r3, r6
 8008dcc:	f7f8 fd52 	bl	8001874 <__aeabi_ddiv>
 8008dd0:	9008      	str	r0, [sp, #32]
 8008dd2:	9109      	str	r1, [sp, #36]	; 0x24
 8008dd4:	e05c      	b.n	8008e90 <_dtoa_r+0x3dc>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	421c      	tst	r4, r3
 8008dda:	d00b      	beq.n	8008df4 <_dtoa_r+0x340>
 8008ddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dde:	0028      	movs	r0, r5
 8008de0:	3301      	adds	r3, #1
 8008de2:	9310      	str	r3, [sp, #64]	; 0x40
 8008de4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008de6:	0031      	movs	r1, r6
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f7f9 f944 	bl	8002078 <__aeabi_dmul>
 8008df0:	0005      	movs	r5, r0
 8008df2:	000e      	movs	r6, r1
 8008df4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008df6:	1064      	asrs	r4, r4, #1
 8008df8:	3308      	adds	r3, #8
 8008dfa:	e7e0      	b.n	8008dbe <_dtoa_r+0x30a>
 8008dfc:	0800bac5 	.word	0x0800bac5
 8008e00:	0800badc 	.word	0x0800badc
 8008e04:	7ff00000 	.word	0x7ff00000
 8008e08:	0000270f 	.word	0x0000270f
 8008e0c:	0800bac1 	.word	0x0800bac1
 8008e10:	0800bac4 	.word	0x0800bac4
 8008e14:	0800ba38 	.word	0x0800ba38
 8008e18:	0800ba39 	.word	0x0800ba39
 8008e1c:	3ff00000 	.word	0x3ff00000
 8008e20:	fffffc01 	.word	0xfffffc01
 8008e24:	3ff80000 	.word	0x3ff80000
 8008e28:	636f4361 	.word	0x636f4361
 8008e2c:	3fd287a7 	.word	0x3fd287a7
 8008e30:	8b60c8b3 	.word	0x8b60c8b3
 8008e34:	3fc68a28 	.word	0x3fc68a28
 8008e38:	509f79fb 	.word	0x509f79fb
 8008e3c:	3fd34413 	.word	0x3fd34413
 8008e40:	0800bc48 	.word	0x0800bc48
 8008e44:	00000432 	.word	0x00000432
 8008e48:	00000412 	.word	0x00000412
 8008e4c:	fe100000 	.word	0xfe100000
 8008e50:	0800bb37 	.word	0x0800bb37
 8008e54:	0800bc20 	.word	0x0800bc20
 8008e58:	2302      	movs	r3, #2
 8008e5a:	9310      	str	r3, [sp, #64]	; 0x40
 8008e5c:	9b02      	ldr	r3, [sp, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d016      	beq.n	8008e90 <_dtoa_r+0x3dc>
 8008e62:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e64:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008e66:	425c      	negs	r4, r3
 8008e68:	230f      	movs	r3, #15
 8008e6a:	4ab6      	ldr	r2, [pc, #728]	; (8009144 <_dtoa_r+0x690>)
 8008e6c:	4023      	ands	r3, r4
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	18d3      	adds	r3, r2, r3
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f7f9 f8ff 	bl	8002078 <__aeabi_dmul>
 8008e7a:	2601      	movs	r6, #1
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9008      	str	r0, [sp, #32]
 8008e80:	9109      	str	r1, [sp, #36]	; 0x24
 8008e82:	4db1      	ldr	r5, [pc, #708]	; (8009148 <_dtoa_r+0x694>)
 8008e84:	1124      	asrs	r4, r4, #4
 8008e86:	2c00      	cmp	r4, #0
 8008e88:	d000      	beq.n	8008e8c <_dtoa_r+0x3d8>
 8008e8a:	e094      	b.n	8008fb6 <_dtoa_r+0x502>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d19f      	bne.n	8008dd0 <_dtoa_r+0x31c>
 8008e90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d100      	bne.n	8008e98 <_dtoa_r+0x3e4>
 8008e96:	e09b      	b.n	8008fd0 <_dtoa_r+0x51c>
 8008e98:	9c08      	ldr	r4, [sp, #32]
 8008e9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	0020      	movs	r0, r4
 8008ea0:	0029      	movs	r1, r5
 8008ea2:	4baa      	ldr	r3, [pc, #680]	; (800914c <_dtoa_r+0x698>)
 8008ea4:	f7f7 fad6 	bl	8000454 <__aeabi_dcmplt>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d100      	bne.n	8008eae <_dtoa_r+0x3fa>
 8008eac:	e090      	b.n	8008fd0 <_dtoa_r+0x51c>
 8008eae:	9b07      	ldr	r3, [sp, #28]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d100      	bne.n	8008eb6 <_dtoa_r+0x402>
 8008eb4:	e08c      	b.n	8008fd0 <_dtoa_r+0x51c>
 8008eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	dd46      	ble.n	8008f4a <_dtoa_r+0x496>
 8008ebc:	9b02      	ldr	r3, [sp, #8]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	0020      	movs	r0, r4
 8008ec2:	0029      	movs	r1, r5
 8008ec4:	1e5e      	subs	r6, r3, #1
 8008ec6:	4ba2      	ldr	r3, [pc, #648]	; (8009150 <_dtoa_r+0x69c>)
 8008ec8:	f7f9 f8d6 	bl	8002078 <__aeabi_dmul>
 8008ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ece:	9008      	str	r0, [sp, #32]
 8008ed0:	9109      	str	r1, [sp, #36]	; 0x24
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	9310      	str	r3, [sp, #64]	; 0x40
 8008ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ed8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008eda:	9c08      	ldr	r4, [sp, #32]
 8008edc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ede:	9314      	str	r3, [sp, #80]	; 0x50
 8008ee0:	f7f9 ff1c 	bl	8002d1c <__aeabi_i2d>
 8008ee4:	0022      	movs	r2, r4
 8008ee6:	002b      	movs	r3, r5
 8008ee8:	f7f9 f8c6 	bl	8002078 <__aeabi_dmul>
 8008eec:	2200      	movs	r2, #0
 8008eee:	4b99      	ldr	r3, [pc, #612]	; (8009154 <_dtoa_r+0x6a0>)
 8008ef0:	f7f8 f984 	bl	80011fc <__aeabi_dadd>
 8008ef4:	9010      	str	r0, [sp, #64]	; 0x40
 8008ef6:	9111      	str	r1, [sp, #68]	; 0x44
 8008ef8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008efa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008efc:	9208      	str	r2, [sp, #32]
 8008efe:	9309      	str	r3, [sp, #36]	; 0x24
 8008f00:	4a95      	ldr	r2, [pc, #596]	; (8009158 <_dtoa_r+0x6a4>)
 8008f02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f04:	4694      	mov	ip, r2
 8008f06:	4463      	add	r3, ip
 8008f08:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d161      	bne.n	8008fd6 <_dtoa_r+0x522>
 8008f12:	2200      	movs	r2, #0
 8008f14:	0020      	movs	r0, r4
 8008f16:	0029      	movs	r1, r5
 8008f18:	4b90      	ldr	r3, [pc, #576]	; (800915c <_dtoa_r+0x6a8>)
 8008f1a:	f7f9 fb19 	bl	8002550 <__aeabi_dsub>
 8008f1e:	9a08      	ldr	r2, [sp, #32]
 8008f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f22:	0004      	movs	r4, r0
 8008f24:	000d      	movs	r5, r1
 8008f26:	f7f7 faa9 	bl	800047c <__aeabi_dcmpgt>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d000      	beq.n	8008f30 <_dtoa_r+0x47c>
 8008f2e:	e2af      	b.n	8009490 <_dtoa_r+0x9dc>
 8008f30:	488b      	ldr	r0, [pc, #556]	; (8009160 <_dtoa_r+0x6ac>)
 8008f32:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f34:	4684      	mov	ip, r0
 8008f36:	4461      	add	r1, ip
 8008f38:	000b      	movs	r3, r1
 8008f3a:	0020      	movs	r0, r4
 8008f3c:	0029      	movs	r1, r5
 8008f3e:	9a08      	ldr	r2, [sp, #32]
 8008f40:	f7f7 fa88 	bl	8000454 <__aeabi_dcmplt>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d000      	beq.n	8008f4a <_dtoa_r+0x496>
 8008f48:	e29f      	b.n	800948a <_dtoa_r+0x9d6>
 8008f4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008f4e:	9308      	str	r3, [sp, #32]
 8008f50:	9409      	str	r4, [sp, #36]	; 0x24
 8008f52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	da00      	bge.n	8008f5a <_dtoa_r+0x4a6>
 8008f58:	e172      	b.n	8009240 <_dtoa_r+0x78c>
 8008f5a:	9a02      	ldr	r2, [sp, #8]
 8008f5c:	2a0e      	cmp	r2, #14
 8008f5e:	dd00      	ble.n	8008f62 <_dtoa_r+0x4ae>
 8008f60:	e16e      	b.n	8009240 <_dtoa_r+0x78c>
 8008f62:	4b78      	ldr	r3, [pc, #480]	; (8009144 <_dtoa_r+0x690>)
 8008f64:	00d2      	lsls	r2, r2, #3
 8008f66:	189b      	adds	r3, r3, r2
 8008f68:	685c      	ldr	r4, [r3, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8008f6e:	940b      	str	r4, [sp, #44]	; 0x2c
 8008f70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	db00      	blt.n	8008f78 <_dtoa_r+0x4c4>
 8008f76:	e0f7      	b.n	8009168 <_dtoa_r+0x6b4>
 8008f78:	9b07      	ldr	r3, [sp, #28]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dd00      	ble.n	8008f80 <_dtoa_r+0x4cc>
 8008f7e:	e0f3      	b.n	8009168 <_dtoa_r+0x6b4>
 8008f80:	d000      	beq.n	8008f84 <_dtoa_r+0x4d0>
 8008f82:	e282      	b.n	800948a <_dtoa_r+0x9d6>
 8008f84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4b74      	ldr	r3, [pc, #464]	; (800915c <_dtoa_r+0x6a8>)
 8008f8c:	f7f9 f874 	bl	8002078 <__aeabi_dmul>
 8008f90:	9a08      	ldr	r2, [sp, #32]
 8008f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f94:	f7f7 fa7c 	bl	8000490 <__aeabi_dcmpge>
 8008f98:	9e07      	ldr	r6, [sp, #28]
 8008f9a:	0035      	movs	r5, r6
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d000      	beq.n	8008fa2 <_dtoa_r+0x4ee>
 8008fa0:	e259      	b.n	8009456 <_dtoa_r+0x9a2>
 8008fa2:	9b06      	ldr	r3, [sp, #24]
 8008fa4:	9a06      	ldr	r2, [sp, #24]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	9308      	str	r3, [sp, #32]
 8008faa:	2331      	movs	r3, #49	; 0x31
 8008fac:	7013      	strb	r3, [r2, #0]
 8008fae:	9b02      	ldr	r3, [sp, #8]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	e254      	b.n	8009460 <_dtoa_r+0x9ac>
 8008fb6:	4234      	tst	r4, r6
 8008fb8:	d007      	beq.n	8008fca <_dtoa_r+0x516>
 8008fba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	9310      	str	r3, [sp, #64]	; 0x40
 8008fc0:	682a      	ldr	r2, [r5, #0]
 8008fc2:	686b      	ldr	r3, [r5, #4]
 8008fc4:	f7f9 f858 	bl	8002078 <__aeabi_dmul>
 8008fc8:	0033      	movs	r3, r6
 8008fca:	1064      	asrs	r4, r4, #1
 8008fcc:	3508      	adds	r5, #8
 8008fce:	e75a      	b.n	8008e86 <_dtoa_r+0x3d2>
 8008fd0:	9e02      	ldr	r6, [sp, #8]
 8008fd2:	9b07      	ldr	r3, [sp, #28]
 8008fd4:	e780      	b.n	8008ed8 <_dtoa_r+0x424>
 8008fd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008fda:	1e5a      	subs	r2, r3, #1
 8008fdc:	4b59      	ldr	r3, [pc, #356]	; (8009144 <_dtoa_r+0x690>)
 8008fde:	00d2      	lsls	r2, r2, #3
 8008fe0:	189b      	adds	r3, r3, r2
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	2900      	cmp	r1, #0
 8008fe8:	d051      	beq.n	800908e <_dtoa_r+0x5da>
 8008fea:	2000      	movs	r0, #0
 8008fec:	495d      	ldr	r1, [pc, #372]	; (8009164 <_dtoa_r+0x6b0>)
 8008fee:	f7f8 fc41 	bl	8001874 <__aeabi_ddiv>
 8008ff2:	9a08      	ldr	r2, [sp, #32]
 8008ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff6:	f7f9 faab 	bl	8002550 <__aeabi_dsub>
 8008ffa:	9a06      	ldr	r2, [sp, #24]
 8008ffc:	9b06      	ldr	r3, [sp, #24]
 8008ffe:	4694      	mov	ip, r2
 8009000:	9317      	str	r3, [sp, #92]	; 0x5c
 8009002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009004:	9010      	str	r0, [sp, #64]	; 0x40
 8009006:	9111      	str	r1, [sp, #68]	; 0x44
 8009008:	4463      	add	r3, ip
 800900a:	9319      	str	r3, [sp, #100]	; 0x64
 800900c:	0029      	movs	r1, r5
 800900e:	0020      	movs	r0, r4
 8009010:	f7f9 fe4e 	bl	8002cb0 <__aeabi_d2iz>
 8009014:	9014      	str	r0, [sp, #80]	; 0x50
 8009016:	f7f9 fe81 	bl	8002d1c <__aeabi_i2d>
 800901a:	0002      	movs	r2, r0
 800901c:	000b      	movs	r3, r1
 800901e:	0020      	movs	r0, r4
 8009020:	0029      	movs	r1, r5
 8009022:	f7f9 fa95 	bl	8002550 <__aeabi_dsub>
 8009026:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009028:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800902a:	3301      	adds	r3, #1
 800902c:	9308      	str	r3, [sp, #32]
 800902e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009030:	0004      	movs	r4, r0
 8009032:	3330      	adds	r3, #48	; 0x30
 8009034:	7013      	strb	r3, [r2, #0]
 8009036:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800903a:	000d      	movs	r5, r1
 800903c:	f7f7 fa0a 	bl	8000454 <__aeabi_dcmplt>
 8009040:	2800      	cmp	r0, #0
 8009042:	d175      	bne.n	8009130 <_dtoa_r+0x67c>
 8009044:	0022      	movs	r2, r4
 8009046:	002b      	movs	r3, r5
 8009048:	2000      	movs	r0, #0
 800904a:	4940      	ldr	r1, [pc, #256]	; (800914c <_dtoa_r+0x698>)
 800904c:	f7f9 fa80 	bl	8002550 <__aeabi_dsub>
 8009050:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009054:	f7f7 f9fe 	bl	8000454 <__aeabi_dcmplt>
 8009058:	2800      	cmp	r0, #0
 800905a:	d000      	beq.n	800905e <_dtoa_r+0x5aa>
 800905c:	e0d2      	b.n	8009204 <_dtoa_r+0x750>
 800905e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009060:	9a08      	ldr	r2, [sp, #32]
 8009062:	4293      	cmp	r3, r2
 8009064:	d100      	bne.n	8009068 <_dtoa_r+0x5b4>
 8009066:	e770      	b.n	8008f4a <_dtoa_r+0x496>
 8009068:	9810      	ldr	r0, [sp, #64]	; 0x40
 800906a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800906c:	2200      	movs	r2, #0
 800906e:	4b38      	ldr	r3, [pc, #224]	; (8009150 <_dtoa_r+0x69c>)
 8009070:	f7f9 f802 	bl	8002078 <__aeabi_dmul>
 8009074:	4b36      	ldr	r3, [pc, #216]	; (8009150 <_dtoa_r+0x69c>)
 8009076:	9010      	str	r0, [sp, #64]	; 0x40
 8009078:	9111      	str	r1, [sp, #68]	; 0x44
 800907a:	2200      	movs	r2, #0
 800907c:	0020      	movs	r0, r4
 800907e:	0029      	movs	r1, r5
 8009080:	f7f8 fffa 	bl	8002078 <__aeabi_dmul>
 8009084:	9b08      	ldr	r3, [sp, #32]
 8009086:	0004      	movs	r4, r0
 8009088:	000d      	movs	r5, r1
 800908a:	9317      	str	r3, [sp, #92]	; 0x5c
 800908c:	e7be      	b.n	800900c <_dtoa_r+0x558>
 800908e:	9808      	ldr	r0, [sp, #32]
 8009090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009092:	f7f8 fff1 	bl	8002078 <__aeabi_dmul>
 8009096:	9a06      	ldr	r2, [sp, #24]
 8009098:	9b06      	ldr	r3, [sp, #24]
 800909a:	4694      	mov	ip, r2
 800909c:	9308      	str	r3, [sp, #32]
 800909e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090a0:	9010      	str	r0, [sp, #64]	; 0x40
 80090a2:	9111      	str	r1, [sp, #68]	; 0x44
 80090a4:	4463      	add	r3, ip
 80090a6:	9319      	str	r3, [sp, #100]	; 0x64
 80090a8:	0029      	movs	r1, r5
 80090aa:	0020      	movs	r0, r4
 80090ac:	f7f9 fe00 	bl	8002cb0 <__aeabi_d2iz>
 80090b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80090b2:	f7f9 fe33 	bl	8002d1c <__aeabi_i2d>
 80090b6:	0002      	movs	r2, r0
 80090b8:	000b      	movs	r3, r1
 80090ba:	0020      	movs	r0, r4
 80090bc:	0029      	movs	r1, r5
 80090be:	f7f9 fa47 	bl	8002550 <__aeabi_dsub>
 80090c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090c4:	9a08      	ldr	r2, [sp, #32]
 80090c6:	3330      	adds	r3, #48	; 0x30
 80090c8:	7013      	strb	r3, [r2, #0]
 80090ca:	0013      	movs	r3, r2
 80090cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80090ce:	3301      	adds	r3, #1
 80090d0:	0004      	movs	r4, r0
 80090d2:	000d      	movs	r5, r1
 80090d4:	9308      	str	r3, [sp, #32]
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d12c      	bne.n	8009134 <_dtoa_r+0x680>
 80090da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80090dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80090de:	9a06      	ldr	r2, [sp, #24]
 80090e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090e2:	4694      	mov	ip, r2
 80090e4:	4463      	add	r3, ip
 80090e6:	2200      	movs	r2, #0
 80090e8:	9308      	str	r3, [sp, #32]
 80090ea:	4b1e      	ldr	r3, [pc, #120]	; (8009164 <_dtoa_r+0x6b0>)
 80090ec:	f7f8 f886 	bl	80011fc <__aeabi_dadd>
 80090f0:	0002      	movs	r2, r0
 80090f2:	000b      	movs	r3, r1
 80090f4:	0020      	movs	r0, r4
 80090f6:	0029      	movs	r1, r5
 80090f8:	f7f7 f9c0 	bl	800047c <__aeabi_dcmpgt>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d000      	beq.n	8009102 <_dtoa_r+0x64e>
 8009100:	e080      	b.n	8009204 <_dtoa_r+0x750>
 8009102:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009104:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009106:	2000      	movs	r0, #0
 8009108:	4916      	ldr	r1, [pc, #88]	; (8009164 <_dtoa_r+0x6b0>)
 800910a:	f7f9 fa21 	bl	8002550 <__aeabi_dsub>
 800910e:	0002      	movs	r2, r0
 8009110:	000b      	movs	r3, r1
 8009112:	0020      	movs	r0, r4
 8009114:	0029      	movs	r1, r5
 8009116:	f7f7 f99d 	bl	8000454 <__aeabi_dcmplt>
 800911a:	2800      	cmp	r0, #0
 800911c:	d100      	bne.n	8009120 <_dtoa_r+0x66c>
 800911e:	e714      	b.n	8008f4a <_dtoa_r+0x496>
 8009120:	9b08      	ldr	r3, [sp, #32]
 8009122:	001a      	movs	r2, r3
 8009124:	3a01      	subs	r2, #1
 8009126:	9208      	str	r2, [sp, #32]
 8009128:	7812      	ldrb	r2, [r2, #0]
 800912a:	2a30      	cmp	r2, #48	; 0x30
 800912c:	d0f8      	beq.n	8009120 <_dtoa_r+0x66c>
 800912e:	9308      	str	r3, [sp, #32]
 8009130:	9602      	str	r6, [sp, #8]
 8009132:	e055      	b.n	80091e0 <_dtoa_r+0x72c>
 8009134:	2200      	movs	r2, #0
 8009136:	4b06      	ldr	r3, [pc, #24]	; (8009150 <_dtoa_r+0x69c>)
 8009138:	f7f8 ff9e 	bl	8002078 <__aeabi_dmul>
 800913c:	0004      	movs	r4, r0
 800913e:	000d      	movs	r5, r1
 8009140:	e7b2      	b.n	80090a8 <_dtoa_r+0x5f4>
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	0800bc48 	.word	0x0800bc48
 8009148:	0800bc20 	.word	0x0800bc20
 800914c:	3ff00000 	.word	0x3ff00000
 8009150:	40240000 	.word	0x40240000
 8009154:	401c0000 	.word	0x401c0000
 8009158:	fcc00000 	.word	0xfcc00000
 800915c:	40140000 	.word	0x40140000
 8009160:	7cc00000 	.word	0x7cc00000
 8009164:	3fe00000 	.word	0x3fe00000
 8009168:	9b07      	ldr	r3, [sp, #28]
 800916a:	9e06      	ldr	r6, [sp, #24]
 800916c:	3b01      	subs	r3, #1
 800916e:	199b      	adds	r3, r3, r6
 8009170:	930c      	str	r3, [sp, #48]	; 0x30
 8009172:	9c08      	ldr	r4, [sp, #32]
 8009174:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009176:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800917a:	0020      	movs	r0, r4
 800917c:	0029      	movs	r1, r5
 800917e:	f7f8 fb79 	bl	8001874 <__aeabi_ddiv>
 8009182:	f7f9 fd95 	bl	8002cb0 <__aeabi_d2iz>
 8009186:	9007      	str	r0, [sp, #28]
 8009188:	f7f9 fdc8 	bl	8002d1c <__aeabi_i2d>
 800918c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800918e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009190:	f7f8 ff72 	bl	8002078 <__aeabi_dmul>
 8009194:	0002      	movs	r2, r0
 8009196:	000b      	movs	r3, r1
 8009198:	0020      	movs	r0, r4
 800919a:	0029      	movs	r1, r5
 800919c:	f7f9 f9d8 	bl	8002550 <__aeabi_dsub>
 80091a0:	0033      	movs	r3, r6
 80091a2:	9a07      	ldr	r2, [sp, #28]
 80091a4:	3601      	adds	r6, #1
 80091a6:	3230      	adds	r2, #48	; 0x30
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091ac:	9608      	str	r6, [sp, #32]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d139      	bne.n	8009226 <_dtoa_r+0x772>
 80091b2:	0002      	movs	r2, r0
 80091b4:	000b      	movs	r3, r1
 80091b6:	f7f8 f821 	bl	80011fc <__aeabi_dadd>
 80091ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091be:	0004      	movs	r4, r0
 80091c0:	000d      	movs	r5, r1
 80091c2:	f7f7 f95b 	bl	800047c <__aeabi_dcmpgt>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d11b      	bne.n	8009202 <_dtoa_r+0x74e>
 80091ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ce:	0020      	movs	r0, r4
 80091d0:	0029      	movs	r1, r5
 80091d2:	f7f7 f939 	bl	8000448 <__aeabi_dcmpeq>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d002      	beq.n	80091e0 <_dtoa_r+0x72c>
 80091da:	9b07      	ldr	r3, [sp, #28]
 80091dc:	07db      	lsls	r3, r3, #31
 80091de:	d410      	bmi.n	8009202 <_dtoa_r+0x74e>
 80091e0:	0038      	movs	r0, r7
 80091e2:	9905      	ldr	r1, [sp, #20]
 80091e4:	f000 fe6a 	bl	8009ebc <_Bfree>
 80091e8:	2300      	movs	r3, #0
 80091ea:	9a08      	ldr	r2, [sp, #32]
 80091ec:	9802      	ldr	r0, [sp, #8]
 80091ee:	7013      	strb	r3, [r2, #0]
 80091f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80091f2:	3001      	adds	r0, #1
 80091f4:	6018      	str	r0, [r3, #0]
 80091f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d100      	bne.n	80091fe <_dtoa_r+0x74a>
 80091fc:	e4a6      	b.n	8008b4c <_dtoa_r+0x98>
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	e4a4      	b.n	8008b4c <_dtoa_r+0x98>
 8009202:	9e02      	ldr	r6, [sp, #8]
 8009204:	9b08      	ldr	r3, [sp, #32]
 8009206:	9308      	str	r3, [sp, #32]
 8009208:	3b01      	subs	r3, #1
 800920a:	781a      	ldrb	r2, [r3, #0]
 800920c:	2a39      	cmp	r2, #57	; 0x39
 800920e:	d106      	bne.n	800921e <_dtoa_r+0x76a>
 8009210:	9a06      	ldr	r2, [sp, #24]
 8009212:	429a      	cmp	r2, r3
 8009214:	d1f7      	bne.n	8009206 <_dtoa_r+0x752>
 8009216:	2230      	movs	r2, #48	; 0x30
 8009218:	9906      	ldr	r1, [sp, #24]
 800921a:	3601      	adds	r6, #1
 800921c:	700a      	strb	r2, [r1, #0]
 800921e:	781a      	ldrb	r2, [r3, #0]
 8009220:	3201      	adds	r2, #1
 8009222:	701a      	strb	r2, [r3, #0]
 8009224:	e784      	b.n	8009130 <_dtoa_r+0x67c>
 8009226:	2200      	movs	r2, #0
 8009228:	4baa      	ldr	r3, [pc, #680]	; (80094d4 <_dtoa_r+0xa20>)
 800922a:	f7f8 ff25 	bl	8002078 <__aeabi_dmul>
 800922e:	2200      	movs	r2, #0
 8009230:	2300      	movs	r3, #0
 8009232:	0004      	movs	r4, r0
 8009234:	000d      	movs	r5, r1
 8009236:	f7f7 f907 	bl	8000448 <__aeabi_dcmpeq>
 800923a:	2800      	cmp	r0, #0
 800923c:	d09b      	beq.n	8009176 <_dtoa_r+0x6c2>
 800923e:	e7cf      	b.n	80091e0 <_dtoa_r+0x72c>
 8009240:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009242:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009244:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009246:	2d00      	cmp	r5, #0
 8009248:	d012      	beq.n	8009270 <_dtoa_r+0x7bc>
 800924a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800924c:	2a01      	cmp	r2, #1
 800924e:	dc66      	bgt.n	800931e <_dtoa_r+0x86a>
 8009250:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009252:	2a00      	cmp	r2, #0
 8009254:	d05d      	beq.n	8009312 <_dtoa_r+0x85e>
 8009256:	4aa0      	ldr	r2, [pc, #640]	; (80094d8 <_dtoa_r+0xa24>)
 8009258:	189b      	adds	r3, r3, r2
 800925a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800925c:	2101      	movs	r1, #1
 800925e:	18d2      	adds	r2, r2, r3
 8009260:	920a      	str	r2, [sp, #40]	; 0x28
 8009262:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009264:	0038      	movs	r0, r7
 8009266:	18d3      	adds	r3, r2, r3
 8009268:	930d      	str	r3, [sp, #52]	; 0x34
 800926a:	f000 ff23 	bl	800a0b4 <__i2b>
 800926e:	0005      	movs	r5, r0
 8009270:	2c00      	cmp	r4, #0
 8009272:	dd0e      	ble.n	8009292 <_dtoa_r+0x7de>
 8009274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009276:	2b00      	cmp	r3, #0
 8009278:	dd0b      	ble.n	8009292 <_dtoa_r+0x7de>
 800927a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800927c:	0023      	movs	r3, r4
 800927e:	4294      	cmp	r4, r2
 8009280:	dd00      	ble.n	8009284 <_dtoa_r+0x7d0>
 8009282:	0013      	movs	r3, r2
 8009284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009286:	1ae4      	subs	r4, r4, r3
 8009288:	1ad2      	subs	r2, r2, r3
 800928a:	920a      	str	r2, [sp, #40]	; 0x28
 800928c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	930d      	str	r3, [sp, #52]	; 0x34
 8009292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009294:	2b00      	cmp	r3, #0
 8009296:	d01f      	beq.n	80092d8 <_dtoa_r+0x824>
 8009298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800929a:	2b00      	cmp	r3, #0
 800929c:	d054      	beq.n	8009348 <_dtoa_r+0x894>
 800929e:	2e00      	cmp	r6, #0
 80092a0:	dd11      	ble.n	80092c6 <_dtoa_r+0x812>
 80092a2:	0029      	movs	r1, r5
 80092a4:	0032      	movs	r2, r6
 80092a6:	0038      	movs	r0, r7
 80092a8:	f000 ffca 	bl	800a240 <__pow5mult>
 80092ac:	9a05      	ldr	r2, [sp, #20]
 80092ae:	0001      	movs	r1, r0
 80092b0:	0005      	movs	r5, r0
 80092b2:	0038      	movs	r0, r7
 80092b4:	f000 ff14 	bl	800a0e0 <__multiply>
 80092b8:	9905      	ldr	r1, [sp, #20]
 80092ba:	9014      	str	r0, [sp, #80]	; 0x50
 80092bc:	0038      	movs	r0, r7
 80092be:	f000 fdfd 	bl	8009ebc <_Bfree>
 80092c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092c4:	9305      	str	r3, [sp, #20]
 80092c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092c8:	1b9a      	subs	r2, r3, r6
 80092ca:	42b3      	cmp	r3, r6
 80092cc:	d004      	beq.n	80092d8 <_dtoa_r+0x824>
 80092ce:	0038      	movs	r0, r7
 80092d0:	9905      	ldr	r1, [sp, #20]
 80092d2:	f000 ffb5 	bl	800a240 <__pow5mult>
 80092d6:	9005      	str	r0, [sp, #20]
 80092d8:	2101      	movs	r1, #1
 80092da:	0038      	movs	r0, r7
 80092dc:	f000 feea 	bl	800a0b4 <__i2b>
 80092e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092e2:	0006      	movs	r6, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dd31      	ble.n	800934c <_dtoa_r+0x898>
 80092e8:	001a      	movs	r2, r3
 80092ea:	0001      	movs	r1, r0
 80092ec:	0038      	movs	r0, r7
 80092ee:	f000 ffa7 	bl	800a240 <__pow5mult>
 80092f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092f4:	0006      	movs	r6, r0
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	dd2d      	ble.n	8009356 <_dtoa_r+0x8a2>
 80092fa:	2300      	movs	r3, #0
 80092fc:	930e      	str	r3, [sp, #56]	; 0x38
 80092fe:	6933      	ldr	r3, [r6, #16]
 8009300:	3303      	adds	r3, #3
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	18f3      	adds	r3, r6, r3
 8009306:	6858      	ldr	r0, [r3, #4]
 8009308:	f000 fe8c 	bl	800a024 <__hi0bits>
 800930c:	2320      	movs	r3, #32
 800930e:	1a18      	subs	r0, r3, r0
 8009310:	e039      	b.n	8009386 <_dtoa_r+0x8d2>
 8009312:	2336      	movs	r3, #54	; 0x36
 8009314:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009316:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009318:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800931a:	1a9b      	subs	r3, r3, r2
 800931c:	e79d      	b.n	800925a <_dtoa_r+0x7a6>
 800931e:	9b07      	ldr	r3, [sp, #28]
 8009320:	1e5e      	subs	r6, r3, #1
 8009322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009324:	42b3      	cmp	r3, r6
 8009326:	db07      	blt.n	8009338 <_dtoa_r+0x884>
 8009328:	1b9e      	subs	r6, r3, r6
 800932a:	9b07      	ldr	r3, [sp, #28]
 800932c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800932e:	2b00      	cmp	r3, #0
 8009330:	da93      	bge.n	800925a <_dtoa_r+0x7a6>
 8009332:	1ae4      	subs	r4, r4, r3
 8009334:	2300      	movs	r3, #0
 8009336:	e790      	b.n	800925a <_dtoa_r+0x7a6>
 8009338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800933a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800933c:	1af3      	subs	r3, r6, r3
 800933e:	18d3      	adds	r3, r2, r3
 8009340:	960e      	str	r6, [sp, #56]	; 0x38
 8009342:	9315      	str	r3, [sp, #84]	; 0x54
 8009344:	2600      	movs	r6, #0
 8009346:	e7f0      	b.n	800932a <_dtoa_r+0x876>
 8009348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800934a:	e7c0      	b.n	80092ce <_dtoa_r+0x81a>
 800934c:	2300      	movs	r3, #0
 800934e:	930e      	str	r3, [sp, #56]	; 0x38
 8009350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009352:	2b01      	cmp	r3, #1
 8009354:	dc13      	bgt.n	800937e <_dtoa_r+0x8ca>
 8009356:	2300      	movs	r3, #0
 8009358:	930e      	str	r3, [sp, #56]	; 0x38
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10e      	bne.n	800937e <_dtoa_r+0x8ca>
 8009360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009362:	031b      	lsls	r3, r3, #12
 8009364:	d10b      	bne.n	800937e <_dtoa_r+0x8ca>
 8009366:	4b5d      	ldr	r3, [pc, #372]	; (80094dc <_dtoa_r+0xa28>)
 8009368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800936a:	4213      	tst	r3, r2
 800936c:	d007      	beq.n	800937e <_dtoa_r+0x8ca>
 800936e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009370:	3301      	adds	r3, #1
 8009372:	930a      	str	r3, [sp, #40]	; 0x28
 8009374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009376:	3301      	adds	r3, #1
 8009378:	930d      	str	r3, [sp, #52]	; 0x34
 800937a:	2301      	movs	r3, #1
 800937c:	930e      	str	r3, [sp, #56]	; 0x38
 800937e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009380:	2001      	movs	r0, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1bb      	bne.n	80092fe <_dtoa_r+0x84a>
 8009386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009388:	221f      	movs	r2, #31
 800938a:	1818      	adds	r0, r3, r0
 800938c:	0003      	movs	r3, r0
 800938e:	4013      	ands	r3, r2
 8009390:	4210      	tst	r0, r2
 8009392:	d046      	beq.n	8009422 <_dtoa_r+0x96e>
 8009394:	3201      	adds	r2, #1
 8009396:	1ad2      	subs	r2, r2, r3
 8009398:	2a04      	cmp	r2, #4
 800939a:	dd3f      	ble.n	800941c <_dtoa_r+0x968>
 800939c:	221c      	movs	r2, #28
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093a2:	18e4      	adds	r4, r4, r3
 80093a4:	18d2      	adds	r2, r2, r3
 80093a6:	920a      	str	r2, [sp, #40]	; 0x28
 80093a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093aa:	18d3      	adds	r3, r2, r3
 80093ac:	930d      	str	r3, [sp, #52]	; 0x34
 80093ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dd05      	ble.n	80093c0 <_dtoa_r+0x90c>
 80093b4:	001a      	movs	r2, r3
 80093b6:	0038      	movs	r0, r7
 80093b8:	9905      	ldr	r1, [sp, #20]
 80093ba:	f000 ff9d 	bl	800a2f8 <__lshift>
 80093be:	9005      	str	r0, [sp, #20]
 80093c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dd05      	ble.n	80093d2 <_dtoa_r+0x91e>
 80093c6:	0031      	movs	r1, r6
 80093c8:	001a      	movs	r2, r3
 80093ca:	0038      	movs	r0, r7
 80093cc:	f000 ff94 	bl	800a2f8 <__lshift>
 80093d0:	0006      	movs	r6, r0
 80093d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d026      	beq.n	8009426 <_dtoa_r+0x972>
 80093d8:	0031      	movs	r1, r6
 80093da:	9805      	ldr	r0, [sp, #20]
 80093dc:	f000 fffa 	bl	800a3d4 <__mcmp>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	da20      	bge.n	8009426 <_dtoa_r+0x972>
 80093e4:	9b02      	ldr	r3, [sp, #8]
 80093e6:	220a      	movs	r2, #10
 80093e8:	3b01      	subs	r3, #1
 80093ea:	9302      	str	r3, [sp, #8]
 80093ec:	0038      	movs	r0, r7
 80093ee:	2300      	movs	r3, #0
 80093f0:	9905      	ldr	r1, [sp, #20]
 80093f2:	f000 fd87 	bl	8009f04 <__multadd>
 80093f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093f8:	9005      	str	r0, [sp, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d100      	bne.n	8009400 <_dtoa_r+0x94c>
 80093fe:	e166      	b.n	80096ce <_dtoa_r+0xc1a>
 8009400:	2300      	movs	r3, #0
 8009402:	0029      	movs	r1, r5
 8009404:	220a      	movs	r2, #10
 8009406:	0038      	movs	r0, r7
 8009408:	f000 fd7c 	bl	8009f04 <__multadd>
 800940c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800940e:	0005      	movs	r5, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	dc47      	bgt.n	80094a4 <_dtoa_r+0x9f0>
 8009414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009416:	2b02      	cmp	r3, #2
 8009418:	dc0d      	bgt.n	8009436 <_dtoa_r+0x982>
 800941a:	e043      	b.n	80094a4 <_dtoa_r+0x9f0>
 800941c:	2a04      	cmp	r2, #4
 800941e:	d0c6      	beq.n	80093ae <_dtoa_r+0x8fa>
 8009420:	0013      	movs	r3, r2
 8009422:	331c      	adds	r3, #28
 8009424:	e7bc      	b.n	80093a0 <_dtoa_r+0x8ec>
 8009426:	9b07      	ldr	r3, [sp, #28]
 8009428:	2b00      	cmp	r3, #0
 800942a:	dc35      	bgt.n	8009498 <_dtoa_r+0x9e4>
 800942c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800942e:	2b02      	cmp	r3, #2
 8009430:	dd32      	ble.n	8009498 <_dtoa_r+0x9e4>
 8009432:	9b07      	ldr	r3, [sp, #28]
 8009434:	930c      	str	r3, [sp, #48]	; 0x30
 8009436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10c      	bne.n	8009456 <_dtoa_r+0x9a2>
 800943c:	0031      	movs	r1, r6
 800943e:	2205      	movs	r2, #5
 8009440:	0038      	movs	r0, r7
 8009442:	f000 fd5f 	bl	8009f04 <__multadd>
 8009446:	0006      	movs	r6, r0
 8009448:	0001      	movs	r1, r0
 800944a:	9805      	ldr	r0, [sp, #20]
 800944c:	f000 ffc2 	bl	800a3d4 <__mcmp>
 8009450:	2800      	cmp	r0, #0
 8009452:	dd00      	ble.n	8009456 <_dtoa_r+0x9a2>
 8009454:	e5a5      	b.n	8008fa2 <_dtoa_r+0x4ee>
 8009456:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009458:	43db      	mvns	r3, r3
 800945a:	9302      	str	r3, [sp, #8]
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	9308      	str	r3, [sp, #32]
 8009460:	2400      	movs	r4, #0
 8009462:	0031      	movs	r1, r6
 8009464:	0038      	movs	r0, r7
 8009466:	f000 fd29 	bl	8009ebc <_Bfree>
 800946a:	2d00      	cmp	r5, #0
 800946c:	d100      	bne.n	8009470 <_dtoa_r+0x9bc>
 800946e:	e6b7      	b.n	80091e0 <_dtoa_r+0x72c>
 8009470:	2c00      	cmp	r4, #0
 8009472:	d005      	beq.n	8009480 <_dtoa_r+0x9cc>
 8009474:	42ac      	cmp	r4, r5
 8009476:	d003      	beq.n	8009480 <_dtoa_r+0x9cc>
 8009478:	0021      	movs	r1, r4
 800947a:	0038      	movs	r0, r7
 800947c:	f000 fd1e 	bl	8009ebc <_Bfree>
 8009480:	0029      	movs	r1, r5
 8009482:	0038      	movs	r0, r7
 8009484:	f000 fd1a 	bl	8009ebc <_Bfree>
 8009488:	e6aa      	b.n	80091e0 <_dtoa_r+0x72c>
 800948a:	2600      	movs	r6, #0
 800948c:	0035      	movs	r5, r6
 800948e:	e7e2      	b.n	8009456 <_dtoa_r+0x9a2>
 8009490:	9602      	str	r6, [sp, #8]
 8009492:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009494:	0035      	movs	r5, r6
 8009496:	e584      	b.n	8008fa2 <_dtoa_r+0x4ee>
 8009498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800949a:	2b00      	cmp	r3, #0
 800949c:	d100      	bne.n	80094a0 <_dtoa_r+0x9ec>
 800949e:	e0ce      	b.n	800963e <_dtoa_r+0xb8a>
 80094a0:	9b07      	ldr	r3, [sp, #28]
 80094a2:	930c      	str	r3, [sp, #48]	; 0x30
 80094a4:	2c00      	cmp	r4, #0
 80094a6:	dd05      	ble.n	80094b4 <_dtoa_r+0xa00>
 80094a8:	0029      	movs	r1, r5
 80094aa:	0022      	movs	r2, r4
 80094ac:	0038      	movs	r0, r7
 80094ae:	f000 ff23 	bl	800a2f8 <__lshift>
 80094b2:	0005      	movs	r5, r0
 80094b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094b6:	0028      	movs	r0, r5
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d022      	beq.n	8009502 <_dtoa_r+0xa4e>
 80094bc:	0038      	movs	r0, r7
 80094be:	6869      	ldr	r1, [r5, #4]
 80094c0:	f000 fcb8 	bl	8009e34 <_Balloc>
 80094c4:	1e04      	subs	r4, r0, #0
 80094c6:	d10f      	bne.n	80094e8 <_dtoa_r+0xa34>
 80094c8:	0002      	movs	r2, r0
 80094ca:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <_dtoa_r+0xa2c>)
 80094cc:	4905      	ldr	r1, [pc, #20]	; (80094e4 <_dtoa_r+0xa30>)
 80094ce:	f7ff fb06 	bl	8008ade <_dtoa_r+0x2a>
 80094d2:	46c0      	nop			; (mov r8, r8)
 80094d4:	40240000 	.word	0x40240000
 80094d8:	00000433 	.word	0x00000433
 80094dc:	7ff00000 	.word	0x7ff00000
 80094e0:	0800bb37 	.word	0x0800bb37
 80094e4:	000002ea 	.word	0x000002ea
 80094e8:	0029      	movs	r1, r5
 80094ea:	692b      	ldr	r3, [r5, #16]
 80094ec:	310c      	adds	r1, #12
 80094ee:	1c9a      	adds	r2, r3, #2
 80094f0:	0092      	lsls	r2, r2, #2
 80094f2:	300c      	adds	r0, #12
 80094f4:	f7fd fbe0 	bl	8006cb8 <memcpy>
 80094f8:	2201      	movs	r2, #1
 80094fa:	0021      	movs	r1, r4
 80094fc:	0038      	movs	r0, r7
 80094fe:	f000 fefb 	bl	800a2f8 <__lshift>
 8009502:	9b06      	ldr	r3, [sp, #24]
 8009504:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009506:	930a      	str	r3, [sp, #40]	; 0x28
 8009508:	3b01      	subs	r3, #1
 800950a:	189b      	adds	r3, r3, r2
 800950c:	2201      	movs	r2, #1
 800950e:	002c      	movs	r4, r5
 8009510:	0005      	movs	r5, r0
 8009512:	9314      	str	r3, [sp, #80]	; 0x50
 8009514:	9b08      	ldr	r3, [sp, #32]
 8009516:	4013      	ands	r3, r2
 8009518:	930f      	str	r3, [sp, #60]	; 0x3c
 800951a:	0031      	movs	r1, r6
 800951c:	9805      	ldr	r0, [sp, #20]
 800951e:	f7ff fa3d 	bl	800899c <quorem>
 8009522:	0003      	movs	r3, r0
 8009524:	0021      	movs	r1, r4
 8009526:	3330      	adds	r3, #48	; 0x30
 8009528:	900d      	str	r0, [sp, #52]	; 0x34
 800952a:	9805      	ldr	r0, [sp, #20]
 800952c:	9307      	str	r3, [sp, #28]
 800952e:	f000 ff51 	bl	800a3d4 <__mcmp>
 8009532:	002a      	movs	r2, r5
 8009534:	900e      	str	r0, [sp, #56]	; 0x38
 8009536:	0031      	movs	r1, r6
 8009538:	0038      	movs	r0, r7
 800953a:	f000 ff67 	bl	800a40c <__mdiff>
 800953e:	68c3      	ldr	r3, [r0, #12]
 8009540:	9008      	str	r0, [sp, #32]
 8009542:	9310      	str	r3, [sp, #64]	; 0x40
 8009544:	2301      	movs	r3, #1
 8009546:	930c      	str	r3, [sp, #48]	; 0x30
 8009548:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800954a:	2b00      	cmp	r3, #0
 800954c:	d104      	bne.n	8009558 <_dtoa_r+0xaa4>
 800954e:	0001      	movs	r1, r0
 8009550:	9805      	ldr	r0, [sp, #20]
 8009552:	f000 ff3f 	bl	800a3d4 <__mcmp>
 8009556:	900c      	str	r0, [sp, #48]	; 0x30
 8009558:	0038      	movs	r0, r7
 800955a:	9908      	ldr	r1, [sp, #32]
 800955c:	f000 fcae 	bl	8009ebc <_Bfree>
 8009560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009564:	3301      	adds	r3, #1
 8009566:	9308      	str	r3, [sp, #32]
 8009568:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800956a:	4313      	orrs	r3, r2
 800956c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800956e:	4313      	orrs	r3, r2
 8009570:	d10c      	bne.n	800958c <_dtoa_r+0xad8>
 8009572:	9b07      	ldr	r3, [sp, #28]
 8009574:	2b39      	cmp	r3, #57	; 0x39
 8009576:	d026      	beq.n	80095c6 <_dtoa_r+0xb12>
 8009578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800957a:	2b00      	cmp	r3, #0
 800957c:	dd02      	ble.n	8009584 <_dtoa_r+0xad0>
 800957e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009580:	3331      	adds	r3, #49	; 0x31
 8009582:	9307      	str	r3, [sp, #28]
 8009584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009586:	9a07      	ldr	r2, [sp, #28]
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	e76a      	b.n	8009462 <_dtoa_r+0x9ae>
 800958c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800958e:	2b00      	cmp	r3, #0
 8009590:	db04      	blt.n	800959c <_dtoa_r+0xae8>
 8009592:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009594:	4313      	orrs	r3, r2
 8009596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009598:	4313      	orrs	r3, r2
 800959a:	d11f      	bne.n	80095dc <_dtoa_r+0xb28>
 800959c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800959e:	2b00      	cmp	r3, #0
 80095a0:	ddf0      	ble.n	8009584 <_dtoa_r+0xad0>
 80095a2:	9905      	ldr	r1, [sp, #20]
 80095a4:	2201      	movs	r2, #1
 80095a6:	0038      	movs	r0, r7
 80095a8:	f000 fea6 	bl	800a2f8 <__lshift>
 80095ac:	0031      	movs	r1, r6
 80095ae:	9005      	str	r0, [sp, #20]
 80095b0:	f000 ff10 	bl	800a3d4 <__mcmp>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	dc03      	bgt.n	80095c0 <_dtoa_r+0xb0c>
 80095b8:	d1e4      	bne.n	8009584 <_dtoa_r+0xad0>
 80095ba:	9b07      	ldr	r3, [sp, #28]
 80095bc:	07db      	lsls	r3, r3, #31
 80095be:	d5e1      	bpl.n	8009584 <_dtoa_r+0xad0>
 80095c0:	9b07      	ldr	r3, [sp, #28]
 80095c2:	2b39      	cmp	r3, #57	; 0x39
 80095c4:	d1db      	bne.n	800957e <_dtoa_r+0xaca>
 80095c6:	2339      	movs	r3, #57	; 0x39
 80095c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ca:	7013      	strb	r3, [r2, #0]
 80095cc:	9b08      	ldr	r3, [sp, #32]
 80095ce:	9308      	str	r3, [sp, #32]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	781a      	ldrb	r2, [r3, #0]
 80095d4:	2a39      	cmp	r2, #57	; 0x39
 80095d6:	d068      	beq.n	80096aa <_dtoa_r+0xbf6>
 80095d8:	3201      	adds	r2, #1
 80095da:	e7d5      	b.n	8009588 <_dtoa_r+0xad4>
 80095dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095de:	2b00      	cmp	r3, #0
 80095e0:	dd07      	ble.n	80095f2 <_dtoa_r+0xb3e>
 80095e2:	9b07      	ldr	r3, [sp, #28]
 80095e4:	2b39      	cmp	r3, #57	; 0x39
 80095e6:	d0ee      	beq.n	80095c6 <_dtoa_r+0xb12>
 80095e8:	9b07      	ldr	r3, [sp, #28]
 80095ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ec:	3301      	adds	r3, #1
 80095ee:	7013      	strb	r3, [r2, #0]
 80095f0:	e737      	b.n	8009462 <_dtoa_r+0x9ae>
 80095f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f4:	9a07      	ldr	r2, [sp, #28]
 80095f6:	701a      	strb	r2, [r3, #0]
 80095f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d03e      	beq.n	800967e <_dtoa_r+0xbca>
 8009600:	2300      	movs	r3, #0
 8009602:	220a      	movs	r2, #10
 8009604:	9905      	ldr	r1, [sp, #20]
 8009606:	0038      	movs	r0, r7
 8009608:	f000 fc7c 	bl	8009f04 <__multadd>
 800960c:	2300      	movs	r3, #0
 800960e:	9005      	str	r0, [sp, #20]
 8009610:	220a      	movs	r2, #10
 8009612:	0021      	movs	r1, r4
 8009614:	0038      	movs	r0, r7
 8009616:	42ac      	cmp	r4, r5
 8009618:	d106      	bne.n	8009628 <_dtoa_r+0xb74>
 800961a:	f000 fc73 	bl	8009f04 <__multadd>
 800961e:	0004      	movs	r4, r0
 8009620:	0005      	movs	r5, r0
 8009622:	9b08      	ldr	r3, [sp, #32]
 8009624:	930a      	str	r3, [sp, #40]	; 0x28
 8009626:	e778      	b.n	800951a <_dtoa_r+0xa66>
 8009628:	f000 fc6c 	bl	8009f04 <__multadd>
 800962c:	0029      	movs	r1, r5
 800962e:	0004      	movs	r4, r0
 8009630:	2300      	movs	r3, #0
 8009632:	220a      	movs	r2, #10
 8009634:	0038      	movs	r0, r7
 8009636:	f000 fc65 	bl	8009f04 <__multadd>
 800963a:	0005      	movs	r5, r0
 800963c:	e7f1      	b.n	8009622 <_dtoa_r+0xb6e>
 800963e:	9b07      	ldr	r3, [sp, #28]
 8009640:	930c      	str	r3, [sp, #48]	; 0x30
 8009642:	2400      	movs	r4, #0
 8009644:	0031      	movs	r1, r6
 8009646:	9805      	ldr	r0, [sp, #20]
 8009648:	f7ff f9a8 	bl	800899c <quorem>
 800964c:	9b06      	ldr	r3, [sp, #24]
 800964e:	3030      	adds	r0, #48	; 0x30
 8009650:	5518      	strb	r0, [r3, r4]
 8009652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009654:	3401      	adds	r4, #1
 8009656:	9007      	str	r0, [sp, #28]
 8009658:	42a3      	cmp	r3, r4
 800965a:	dd07      	ble.n	800966c <_dtoa_r+0xbb8>
 800965c:	2300      	movs	r3, #0
 800965e:	220a      	movs	r2, #10
 8009660:	0038      	movs	r0, r7
 8009662:	9905      	ldr	r1, [sp, #20]
 8009664:	f000 fc4e 	bl	8009f04 <__multadd>
 8009668:	9005      	str	r0, [sp, #20]
 800966a:	e7eb      	b.n	8009644 <_dtoa_r+0xb90>
 800966c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800966e:	2001      	movs	r0, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	dd00      	ble.n	8009676 <_dtoa_r+0xbc2>
 8009674:	0018      	movs	r0, r3
 8009676:	2400      	movs	r4, #0
 8009678:	9b06      	ldr	r3, [sp, #24]
 800967a:	181b      	adds	r3, r3, r0
 800967c:	9308      	str	r3, [sp, #32]
 800967e:	9905      	ldr	r1, [sp, #20]
 8009680:	2201      	movs	r2, #1
 8009682:	0038      	movs	r0, r7
 8009684:	f000 fe38 	bl	800a2f8 <__lshift>
 8009688:	0031      	movs	r1, r6
 800968a:	9005      	str	r0, [sp, #20]
 800968c:	f000 fea2 	bl	800a3d4 <__mcmp>
 8009690:	2800      	cmp	r0, #0
 8009692:	dc9b      	bgt.n	80095cc <_dtoa_r+0xb18>
 8009694:	d102      	bne.n	800969c <_dtoa_r+0xbe8>
 8009696:	9b07      	ldr	r3, [sp, #28]
 8009698:	07db      	lsls	r3, r3, #31
 800969a:	d497      	bmi.n	80095cc <_dtoa_r+0xb18>
 800969c:	9b08      	ldr	r3, [sp, #32]
 800969e:	9308      	str	r3, [sp, #32]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	781a      	ldrb	r2, [r3, #0]
 80096a4:	2a30      	cmp	r2, #48	; 0x30
 80096a6:	d0fa      	beq.n	800969e <_dtoa_r+0xbea>
 80096a8:	e6db      	b.n	8009462 <_dtoa_r+0x9ae>
 80096aa:	9a06      	ldr	r2, [sp, #24]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d18e      	bne.n	80095ce <_dtoa_r+0xb1a>
 80096b0:	9b02      	ldr	r3, [sp, #8]
 80096b2:	3301      	adds	r3, #1
 80096b4:	9302      	str	r3, [sp, #8]
 80096b6:	2331      	movs	r3, #49	; 0x31
 80096b8:	e799      	b.n	80095ee <_dtoa_r+0xb3a>
 80096ba:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <_dtoa_r+0xc2c>)
 80096bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80096be:	9306      	str	r3, [sp, #24]
 80096c0:	4b08      	ldr	r3, [pc, #32]	; (80096e4 <_dtoa_r+0xc30>)
 80096c2:	2a00      	cmp	r2, #0
 80096c4:	d001      	beq.n	80096ca <_dtoa_r+0xc16>
 80096c6:	f7ff fa3f 	bl	8008b48 <_dtoa_r+0x94>
 80096ca:	f7ff fa3f 	bl	8008b4c <_dtoa_r+0x98>
 80096ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dcb6      	bgt.n	8009642 <_dtoa_r+0xb8e>
 80096d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	dd00      	ble.n	80096dc <_dtoa_r+0xc28>
 80096da:	e6ac      	b.n	8009436 <_dtoa_r+0x982>
 80096dc:	e7b1      	b.n	8009642 <_dtoa_r+0xb8e>
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	0800bab8 	.word	0x0800bab8
 80096e4:	0800bac0 	.word	0x0800bac0

080096e8 <rshift>:
 80096e8:	0002      	movs	r2, r0
 80096ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ec:	6904      	ldr	r4, [r0, #16]
 80096ee:	3214      	adds	r2, #20
 80096f0:	0013      	movs	r3, r2
 80096f2:	b085      	sub	sp, #20
 80096f4:	114f      	asrs	r7, r1, #5
 80096f6:	42bc      	cmp	r4, r7
 80096f8:	dd31      	ble.n	800975e <rshift+0x76>
 80096fa:	00bb      	lsls	r3, r7, #2
 80096fc:	18d3      	adds	r3, r2, r3
 80096fe:	261f      	movs	r6, #31
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	000b      	movs	r3, r1
 8009704:	00a5      	lsls	r5, r4, #2
 8009706:	4033      	ands	r3, r6
 8009708:	1955      	adds	r5, r2, r5
 800970a:	9302      	str	r3, [sp, #8]
 800970c:	4231      	tst	r1, r6
 800970e:	d10c      	bne.n	800972a <rshift+0x42>
 8009710:	0016      	movs	r6, r2
 8009712:	9901      	ldr	r1, [sp, #4]
 8009714:	428d      	cmp	r5, r1
 8009716:	d838      	bhi.n	800978a <rshift+0xa2>
 8009718:	9901      	ldr	r1, [sp, #4]
 800971a:	2300      	movs	r3, #0
 800971c:	3903      	subs	r1, #3
 800971e:	428d      	cmp	r5, r1
 8009720:	d301      	bcc.n	8009726 <rshift+0x3e>
 8009722:	1be3      	subs	r3, r4, r7
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	18d3      	adds	r3, r2, r3
 8009728:	e019      	b.n	800975e <rshift+0x76>
 800972a:	2120      	movs	r1, #32
 800972c:	9b02      	ldr	r3, [sp, #8]
 800972e:	9e01      	ldr	r6, [sp, #4]
 8009730:	1acb      	subs	r3, r1, r3
 8009732:	9303      	str	r3, [sp, #12]
 8009734:	ce02      	ldmia	r6!, {r1}
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	4694      	mov	ip, r2
 800973a:	40d9      	lsrs	r1, r3
 800973c:	9100      	str	r1, [sp, #0]
 800973e:	42b5      	cmp	r5, r6
 8009740:	d816      	bhi.n	8009770 <rshift+0x88>
 8009742:	9e01      	ldr	r6, [sp, #4]
 8009744:	2300      	movs	r3, #0
 8009746:	3601      	adds	r6, #1
 8009748:	42b5      	cmp	r5, r6
 800974a:	d302      	bcc.n	8009752 <rshift+0x6a>
 800974c:	1be3      	subs	r3, r4, r7
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	3b04      	subs	r3, #4
 8009752:	9900      	ldr	r1, [sp, #0]
 8009754:	18d3      	adds	r3, r2, r3
 8009756:	6019      	str	r1, [r3, #0]
 8009758:	2900      	cmp	r1, #0
 800975a:	d000      	beq.n	800975e <rshift+0x76>
 800975c:	3304      	adds	r3, #4
 800975e:	1a99      	subs	r1, r3, r2
 8009760:	1089      	asrs	r1, r1, #2
 8009762:	6101      	str	r1, [r0, #16]
 8009764:	4293      	cmp	r3, r2
 8009766:	d101      	bne.n	800976c <rshift+0x84>
 8009768:	2300      	movs	r3, #0
 800976a:	6143      	str	r3, [r0, #20]
 800976c:	b005      	add	sp, #20
 800976e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009770:	6833      	ldr	r3, [r6, #0]
 8009772:	9903      	ldr	r1, [sp, #12]
 8009774:	408b      	lsls	r3, r1
 8009776:	9900      	ldr	r1, [sp, #0]
 8009778:	4319      	orrs	r1, r3
 800977a:	4663      	mov	r3, ip
 800977c:	c302      	stmia	r3!, {r1}
 800977e:	469c      	mov	ip, r3
 8009780:	ce02      	ldmia	r6!, {r1}
 8009782:	9b02      	ldr	r3, [sp, #8]
 8009784:	40d9      	lsrs	r1, r3
 8009786:	9100      	str	r1, [sp, #0]
 8009788:	e7d9      	b.n	800973e <rshift+0x56>
 800978a:	c908      	ldmia	r1!, {r3}
 800978c:	c608      	stmia	r6!, {r3}
 800978e:	e7c1      	b.n	8009714 <rshift+0x2c>

08009790 <__hexdig_fun>:
 8009790:	0002      	movs	r2, r0
 8009792:	3a30      	subs	r2, #48	; 0x30
 8009794:	0003      	movs	r3, r0
 8009796:	2a09      	cmp	r2, #9
 8009798:	d802      	bhi.n	80097a0 <__hexdig_fun+0x10>
 800979a:	3b20      	subs	r3, #32
 800979c:	b2d8      	uxtb	r0, r3
 800979e:	4770      	bx	lr
 80097a0:	0002      	movs	r2, r0
 80097a2:	3a61      	subs	r2, #97	; 0x61
 80097a4:	2a05      	cmp	r2, #5
 80097a6:	d801      	bhi.n	80097ac <__hexdig_fun+0x1c>
 80097a8:	3b47      	subs	r3, #71	; 0x47
 80097aa:	e7f7      	b.n	800979c <__hexdig_fun+0xc>
 80097ac:	001a      	movs	r2, r3
 80097ae:	3a41      	subs	r2, #65	; 0x41
 80097b0:	2000      	movs	r0, #0
 80097b2:	2a05      	cmp	r2, #5
 80097b4:	d8f3      	bhi.n	800979e <__hexdig_fun+0xe>
 80097b6:	3b27      	subs	r3, #39	; 0x27
 80097b8:	e7f0      	b.n	800979c <__hexdig_fun+0xc>
	...

080097bc <__gethex>:
 80097bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097be:	b08d      	sub	sp, #52	; 0x34
 80097c0:	930a      	str	r3, [sp, #40]	; 0x28
 80097c2:	4bbf      	ldr	r3, [pc, #764]	; (8009ac0 <__gethex+0x304>)
 80097c4:	9005      	str	r0, [sp, #20]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9109      	str	r1, [sp, #36]	; 0x24
 80097ca:	0018      	movs	r0, r3
 80097cc:	9202      	str	r2, [sp, #8]
 80097ce:	9307      	str	r3, [sp, #28]
 80097d0:	f7f6 fc98 	bl	8000104 <strlen>
 80097d4:	2202      	movs	r2, #2
 80097d6:	9b07      	ldr	r3, [sp, #28]
 80097d8:	4252      	negs	r2, r2
 80097da:	181b      	adds	r3, r3, r0
 80097dc:	3b01      	subs	r3, #1
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	9003      	str	r0, [sp, #12]
 80097e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80097e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e6:	6819      	ldr	r1, [r3, #0]
 80097e8:	1c8b      	adds	r3, r1, #2
 80097ea:	1a52      	subs	r2, r2, r1
 80097ec:	18d1      	adds	r1, r2, r3
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	9108      	str	r1, [sp, #32]
 80097f2:	9901      	ldr	r1, [sp, #4]
 80097f4:	3301      	adds	r3, #1
 80097f6:	7808      	ldrb	r0, [r1, #0]
 80097f8:	2830      	cmp	r0, #48	; 0x30
 80097fa:	d0f7      	beq.n	80097ec <__gethex+0x30>
 80097fc:	f7ff ffc8 	bl	8009790 <__hexdig_fun>
 8009800:	2300      	movs	r3, #0
 8009802:	001c      	movs	r4, r3
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	4298      	cmp	r0, r3
 8009808:	d11f      	bne.n	800984a <__gethex+0x8e>
 800980a:	9a03      	ldr	r2, [sp, #12]
 800980c:	9907      	ldr	r1, [sp, #28]
 800980e:	9801      	ldr	r0, [sp, #4]
 8009810:	f001 f96e 	bl	800aaf0 <strncmp>
 8009814:	0007      	movs	r7, r0
 8009816:	42a0      	cmp	r0, r4
 8009818:	d000      	beq.n	800981c <__gethex+0x60>
 800981a:	e06b      	b.n	80098f4 <__gethex+0x138>
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	9a03      	ldr	r2, [sp, #12]
 8009820:	5c98      	ldrb	r0, [r3, r2]
 8009822:	189d      	adds	r5, r3, r2
 8009824:	f7ff ffb4 	bl	8009790 <__hexdig_fun>
 8009828:	2301      	movs	r3, #1
 800982a:	9304      	str	r3, [sp, #16]
 800982c:	42a0      	cmp	r0, r4
 800982e:	d030      	beq.n	8009892 <__gethex+0xd6>
 8009830:	9501      	str	r5, [sp, #4]
 8009832:	9b01      	ldr	r3, [sp, #4]
 8009834:	7818      	ldrb	r0, [r3, #0]
 8009836:	2830      	cmp	r0, #48	; 0x30
 8009838:	d009      	beq.n	800984e <__gethex+0x92>
 800983a:	f7ff ffa9 	bl	8009790 <__hexdig_fun>
 800983e:	4242      	negs	r2, r0
 8009840:	4142      	adcs	r2, r0
 8009842:	2301      	movs	r3, #1
 8009844:	002c      	movs	r4, r5
 8009846:	9204      	str	r2, [sp, #16]
 8009848:	9308      	str	r3, [sp, #32]
 800984a:	9d01      	ldr	r5, [sp, #4]
 800984c:	e004      	b.n	8009858 <__gethex+0x9c>
 800984e:	9b01      	ldr	r3, [sp, #4]
 8009850:	3301      	adds	r3, #1
 8009852:	9301      	str	r3, [sp, #4]
 8009854:	e7ed      	b.n	8009832 <__gethex+0x76>
 8009856:	3501      	adds	r5, #1
 8009858:	7828      	ldrb	r0, [r5, #0]
 800985a:	f7ff ff99 	bl	8009790 <__hexdig_fun>
 800985e:	1e07      	subs	r7, r0, #0
 8009860:	d1f9      	bne.n	8009856 <__gethex+0x9a>
 8009862:	0028      	movs	r0, r5
 8009864:	9a03      	ldr	r2, [sp, #12]
 8009866:	9907      	ldr	r1, [sp, #28]
 8009868:	f001 f942 	bl	800aaf0 <strncmp>
 800986c:	2800      	cmp	r0, #0
 800986e:	d10e      	bne.n	800988e <__gethex+0xd2>
 8009870:	2c00      	cmp	r4, #0
 8009872:	d107      	bne.n	8009884 <__gethex+0xc8>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	18ed      	adds	r5, r5, r3
 8009878:	002c      	movs	r4, r5
 800987a:	7828      	ldrb	r0, [r5, #0]
 800987c:	f7ff ff88 	bl	8009790 <__hexdig_fun>
 8009880:	2800      	cmp	r0, #0
 8009882:	d102      	bne.n	800988a <__gethex+0xce>
 8009884:	1b64      	subs	r4, r4, r5
 8009886:	00a7      	lsls	r7, r4, #2
 8009888:	e003      	b.n	8009892 <__gethex+0xd6>
 800988a:	3501      	adds	r5, #1
 800988c:	e7f5      	b.n	800987a <__gethex+0xbe>
 800988e:	2c00      	cmp	r4, #0
 8009890:	d1f8      	bne.n	8009884 <__gethex+0xc8>
 8009892:	2220      	movs	r2, #32
 8009894:	782b      	ldrb	r3, [r5, #0]
 8009896:	002e      	movs	r6, r5
 8009898:	4393      	bics	r3, r2
 800989a:	2b50      	cmp	r3, #80	; 0x50
 800989c:	d11d      	bne.n	80098da <__gethex+0x11e>
 800989e:	786b      	ldrb	r3, [r5, #1]
 80098a0:	2b2b      	cmp	r3, #43	; 0x2b
 80098a2:	d02c      	beq.n	80098fe <__gethex+0x142>
 80098a4:	2b2d      	cmp	r3, #45	; 0x2d
 80098a6:	d02e      	beq.n	8009906 <__gethex+0x14a>
 80098a8:	2300      	movs	r3, #0
 80098aa:	1c6e      	adds	r6, r5, #1
 80098ac:	9306      	str	r3, [sp, #24]
 80098ae:	7830      	ldrb	r0, [r6, #0]
 80098b0:	f7ff ff6e 	bl	8009790 <__hexdig_fun>
 80098b4:	1e43      	subs	r3, r0, #1
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b18      	cmp	r3, #24
 80098ba:	d82b      	bhi.n	8009914 <__gethex+0x158>
 80098bc:	3810      	subs	r0, #16
 80098be:	0004      	movs	r4, r0
 80098c0:	7870      	ldrb	r0, [r6, #1]
 80098c2:	f7ff ff65 	bl	8009790 <__hexdig_fun>
 80098c6:	1e43      	subs	r3, r0, #1
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	3601      	adds	r6, #1
 80098cc:	2b18      	cmp	r3, #24
 80098ce:	d91c      	bls.n	800990a <__gethex+0x14e>
 80098d0:	9b06      	ldr	r3, [sp, #24]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d000      	beq.n	80098d8 <__gethex+0x11c>
 80098d6:	4264      	negs	r4, r4
 80098d8:	193f      	adds	r7, r7, r4
 80098da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098dc:	601e      	str	r6, [r3, #0]
 80098de:	9b04      	ldr	r3, [sp, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d019      	beq.n	8009918 <__gethex+0x15c>
 80098e4:	2600      	movs	r6, #0
 80098e6:	9b08      	ldr	r3, [sp, #32]
 80098e8:	42b3      	cmp	r3, r6
 80098ea:	d100      	bne.n	80098ee <__gethex+0x132>
 80098ec:	3606      	adds	r6, #6
 80098ee:	0030      	movs	r0, r6
 80098f0:	b00d      	add	sp, #52	; 0x34
 80098f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f4:	2301      	movs	r3, #1
 80098f6:	2700      	movs	r7, #0
 80098f8:	9d01      	ldr	r5, [sp, #4]
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	e7c9      	b.n	8009892 <__gethex+0xd6>
 80098fe:	2300      	movs	r3, #0
 8009900:	9306      	str	r3, [sp, #24]
 8009902:	1cae      	adds	r6, r5, #2
 8009904:	e7d3      	b.n	80098ae <__gethex+0xf2>
 8009906:	2301      	movs	r3, #1
 8009908:	e7fa      	b.n	8009900 <__gethex+0x144>
 800990a:	230a      	movs	r3, #10
 800990c:	435c      	muls	r4, r3
 800990e:	1824      	adds	r4, r4, r0
 8009910:	3c10      	subs	r4, #16
 8009912:	e7d5      	b.n	80098c0 <__gethex+0x104>
 8009914:	002e      	movs	r6, r5
 8009916:	e7e0      	b.n	80098da <__gethex+0x11e>
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	9904      	ldr	r1, [sp, #16]
 800991c:	1aeb      	subs	r3, r5, r3
 800991e:	3b01      	subs	r3, #1
 8009920:	2b07      	cmp	r3, #7
 8009922:	dc0a      	bgt.n	800993a <__gethex+0x17e>
 8009924:	9805      	ldr	r0, [sp, #20]
 8009926:	f000 fa85 	bl	8009e34 <_Balloc>
 800992a:	1e04      	subs	r4, r0, #0
 800992c:	d108      	bne.n	8009940 <__gethex+0x184>
 800992e:	0002      	movs	r2, r0
 8009930:	21de      	movs	r1, #222	; 0xde
 8009932:	4b64      	ldr	r3, [pc, #400]	; (8009ac4 <__gethex+0x308>)
 8009934:	4864      	ldr	r0, [pc, #400]	; (8009ac8 <__gethex+0x30c>)
 8009936:	f001 f8fb 	bl	800ab30 <__assert_func>
 800993a:	3101      	adds	r1, #1
 800993c:	105b      	asrs	r3, r3, #1
 800993e:	e7ef      	b.n	8009920 <__gethex+0x164>
 8009940:	0003      	movs	r3, r0
 8009942:	3314      	adds	r3, #20
 8009944:	9304      	str	r3, [sp, #16]
 8009946:	9309      	str	r3, [sp, #36]	; 0x24
 8009948:	2300      	movs	r3, #0
 800994a:	001e      	movs	r6, r3
 800994c:	9306      	str	r3, [sp, #24]
 800994e:	9b01      	ldr	r3, [sp, #4]
 8009950:	42ab      	cmp	r3, r5
 8009952:	d340      	bcc.n	80099d6 <__gethex+0x21a>
 8009954:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	c540      	stmia	r5!, {r6}
 800995a:	1aed      	subs	r5, r5, r3
 800995c:	10ad      	asrs	r5, r5, #2
 800995e:	0030      	movs	r0, r6
 8009960:	6125      	str	r5, [r4, #16]
 8009962:	f000 fb5f 	bl	800a024 <__hi0bits>
 8009966:	9b02      	ldr	r3, [sp, #8]
 8009968:	016d      	lsls	r5, r5, #5
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	1a2e      	subs	r6, r5, r0
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	429e      	cmp	r6, r3
 8009972:	dd5a      	ble.n	8009a2a <__gethex+0x26e>
 8009974:	1af6      	subs	r6, r6, r3
 8009976:	0031      	movs	r1, r6
 8009978:	0020      	movs	r0, r4
 800997a:	f000 ff01 	bl	800a780 <__any_on>
 800997e:	1e05      	subs	r5, r0, #0
 8009980:	d016      	beq.n	80099b0 <__gethex+0x1f4>
 8009982:	2501      	movs	r5, #1
 8009984:	211f      	movs	r1, #31
 8009986:	0028      	movs	r0, r5
 8009988:	1e73      	subs	r3, r6, #1
 800998a:	4019      	ands	r1, r3
 800998c:	4088      	lsls	r0, r1
 800998e:	0001      	movs	r1, r0
 8009990:	115a      	asrs	r2, r3, #5
 8009992:	9804      	ldr	r0, [sp, #16]
 8009994:	0092      	lsls	r2, r2, #2
 8009996:	5812      	ldr	r2, [r2, r0]
 8009998:	420a      	tst	r2, r1
 800999a:	d009      	beq.n	80099b0 <__gethex+0x1f4>
 800999c:	42ab      	cmp	r3, r5
 800999e:	dd06      	ble.n	80099ae <__gethex+0x1f2>
 80099a0:	0020      	movs	r0, r4
 80099a2:	1eb1      	subs	r1, r6, #2
 80099a4:	f000 feec 	bl	800a780 <__any_on>
 80099a8:	3502      	adds	r5, #2
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d100      	bne.n	80099b0 <__gethex+0x1f4>
 80099ae:	2502      	movs	r5, #2
 80099b0:	0031      	movs	r1, r6
 80099b2:	0020      	movs	r0, r4
 80099b4:	f7ff fe98 	bl	80096e8 <rshift>
 80099b8:	19bf      	adds	r7, r7, r6
 80099ba:	9b02      	ldr	r3, [sp, #8]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	9303      	str	r3, [sp, #12]
 80099c0:	42bb      	cmp	r3, r7
 80099c2:	da42      	bge.n	8009a4a <__gethex+0x28e>
 80099c4:	0021      	movs	r1, r4
 80099c6:	9805      	ldr	r0, [sp, #20]
 80099c8:	f000 fa78 	bl	8009ebc <_Bfree>
 80099cc:	2300      	movs	r3, #0
 80099ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099d0:	26a3      	movs	r6, #163	; 0xa3
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	e78b      	b.n	80098ee <__gethex+0x132>
 80099d6:	1e6b      	subs	r3, r5, #1
 80099d8:	9308      	str	r3, [sp, #32]
 80099da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	4293      	cmp	r3, r2
 80099e0:	d014      	beq.n	8009a0c <__gethex+0x250>
 80099e2:	9b06      	ldr	r3, [sp, #24]
 80099e4:	2b20      	cmp	r3, #32
 80099e6:	d104      	bne.n	80099f2 <__gethex+0x236>
 80099e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ea:	c340      	stmia	r3!, {r6}
 80099ec:	2600      	movs	r6, #0
 80099ee:	9309      	str	r3, [sp, #36]	; 0x24
 80099f0:	9606      	str	r6, [sp, #24]
 80099f2:	9b08      	ldr	r3, [sp, #32]
 80099f4:	7818      	ldrb	r0, [r3, #0]
 80099f6:	f7ff fecb 	bl	8009790 <__hexdig_fun>
 80099fa:	230f      	movs	r3, #15
 80099fc:	4018      	ands	r0, r3
 80099fe:	9b06      	ldr	r3, [sp, #24]
 8009a00:	9d08      	ldr	r5, [sp, #32]
 8009a02:	4098      	lsls	r0, r3
 8009a04:	3304      	adds	r3, #4
 8009a06:	4306      	orrs	r6, r0
 8009a08:	9306      	str	r3, [sp, #24]
 8009a0a:	e7a0      	b.n	800994e <__gethex+0x192>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	9a03      	ldr	r2, [sp, #12]
 8009a10:	1a9d      	subs	r5, r3, r2
 8009a12:	9b08      	ldr	r3, [sp, #32]
 8009a14:	195d      	adds	r5, r3, r5
 8009a16:	9b01      	ldr	r3, [sp, #4]
 8009a18:	429d      	cmp	r5, r3
 8009a1a:	d3e2      	bcc.n	80099e2 <__gethex+0x226>
 8009a1c:	0028      	movs	r0, r5
 8009a1e:	9907      	ldr	r1, [sp, #28]
 8009a20:	f001 f866 	bl	800aaf0 <strncmp>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d1dc      	bne.n	80099e2 <__gethex+0x226>
 8009a28:	e791      	b.n	800994e <__gethex+0x192>
 8009a2a:	9b01      	ldr	r3, [sp, #4]
 8009a2c:	2500      	movs	r5, #0
 8009a2e:	429e      	cmp	r6, r3
 8009a30:	dac3      	bge.n	80099ba <__gethex+0x1fe>
 8009a32:	1b9e      	subs	r6, r3, r6
 8009a34:	0021      	movs	r1, r4
 8009a36:	0032      	movs	r2, r6
 8009a38:	9805      	ldr	r0, [sp, #20]
 8009a3a:	f000 fc5d 	bl	800a2f8 <__lshift>
 8009a3e:	0003      	movs	r3, r0
 8009a40:	3314      	adds	r3, #20
 8009a42:	0004      	movs	r4, r0
 8009a44:	1bbf      	subs	r7, r7, r6
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	e7b7      	b.n	80099ba <__gethex+0x1fe>
 8009a4a:	9b02      	ldr	r3, [sp, #8]
 8009a4c:	685e      	ldr	r6, [r3, #4]
 8009a4e:	42be      	cmp	r6, r7
 8009a50:	dd71      	ble.n	8009b36 <__gethex+0x37a>
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	1bf6      	subs	r6, r6, r7
 8009a56:	42b3      	cmp	r3, r6
 8009a58:	dc38      	bgt.n	8009acc <__gethex+0x310>
 8009a5a:	9b02      	ldr	r3, [sp, #8]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d026      	beq.n	8009ab0 <__gethex+0x2f4>
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d028      	beq.n	8009ab8 <__gethex+0x2fc>
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d119      	bne.n	8009a9e <__gethex+0x2e2>
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	42b3      	cmp	r3, r6
 8009a6e:	d116      	bne.n	8009a9e <__gethex+0x2e2>
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d10d      	bne.n	8009a90 <__gethex+0x2d4>
 8009a74:	9b02      	ldr	r3, [sp, #8]
 8009a76:	2662      	movs	r6, #98	; 0x62
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	9a01      	ldr	r2, [sp, #4]
 8009a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	2301      	movs	r3, #1
 8009a84:	9a04      	ldr	r2, [sp, #16]
 8009a86:	6123      	str	r3, [r4, #16]
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a8c:	601c      	str	r4, [r3, #0]
 8009a8e:	e72e      	b.n	80098ee <__gethex+0x132>
 8009a90:	9901      	ldr	r1, [sp, #4]
 8009a92:	0020      	movs	r0, r4
 8009a94:	3901      	subs	r1, #1
 8009a96:	f000 fe73 	bl	800a780 <__any_on>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d1ea      	bne.n	8009a74 <__gethex+0x2b8>
 8009a9e:	0021      	movs	r1, r4
 8009aa0:	9805      	ldr	r0, [sp, #20]
 8009aa2:	f000 fa0b 	bl	8009ebc <_Bfree>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009aaa:	2650      	movs	r6, #80	; 0x50
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	e71e      	b.n	80098ee <__gethex+0x132>
 8009ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1f3      	bne.n	8009a9e <__gethex+0x2e2>
 8009ab6:	e7dd      	b.n	8009a74 <__gethex+0x2b8>
 8009ab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1da      	bne.n	8009a74 <__gethex+0x2b8>
 8009abe:	e7ee      	b.n	8009a9e <__gethex+0x2e2>
 8009ac0:	0800bbb0 	.word	0x0800bbb0
 8009ac4:	0800bb37 	.word	0x0800bb37
 8009ac8:	0800bb48 	.word	0x0800bb48
 8009acc:	1e77      	subs	r7, r6, #1
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	d12f      	bne.n	8009b32 <__gethex+0x376>
 8009ad2:	2f00      	cmp	r7, #0
 8009ad4:	d004      	beq.n	8009ae0 <__gethex+0x324>
 8009ad6:	0039      	movs	r1, r7
 8009ad8:	0020      	movs	r0, r4
 8009ada:	f000 fe51 	bl	800a780 <__any_on>
 8009ade:	0005      	movs	r5, r0
 8009ae0:	231f      	movs	r3, #31
 8009ae2:	117a      	asrs	r2, r7, #5
 8009ae4:	401f      	ands	r7, r3
 8009ae6:	3b1e      	subs	r3, #30
 8009ae8:	40bb      	lsls	r3, r7
 8009aea:	9904      	ldr	r1, [sp, #16]
 8009aec:	0092      	lsls	r2, r2, #2
 8009aee:	5852      	ldr	r2, [r2, r1]
 8009af0:	421a      	tst	r2, r3
 8009af2:	d001      	beq.n	8009af8 <__gethex+0x33c>
 8009af4:	2302      	movs	r3, #2
 8009af6:	431d      	orrs	r5, r3
 8009af8:	9b01      	ldr	r3, [sp, #4]
 8009afa:	0031      	movs	r1, r6
 8009afc:	1b9b      	subs	r3, r3, r6
 8009afe:	2602      	movs	r6, #2
 8009b00:	0020      	movs	r0, r4
 8009b02:	9301      	str	r3, [sp, #4]
 8009b04:	f7ff fdf0 	bl	80096e8 <rshift>
 8009b08:	9b02      	ldr	r3, [sp, #8]
 8009b0a:	685f      	ldr	r7, [r3, #4]
 8009b0c:	2d00      	cmp	r5, #0
 8009b0e:	d041      	beq.n	8009b94 <__gethex+0x3d8>
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d010      	beq.n	8009b3a <__gethex+0x37e>
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d012      	beq.n	8009b42 <__gethex+0x386>
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d106      	bne.n	8009b2e <__gethex+0x372>
 8009b20:	07aa      	lsls	r2, r5, #30
 8009b22:	d504      	bpl.n	8009b2e <__gethex+0x372>
 8009b24:	9a04      	ldr	r2, [sp, #16]
 8009b26:	6810      	ldr	r0, [r2, #0]
 8009b28:	4305      	orrs	r5, r0
 8009b2a:	421d      	tst	r5, r3
 8009b2c:	d10c      	bne.n	8009b48 <__gethex+0x38c>
 8009b2e:	2310      	movs	r3, #16
 8009b30:	e02f      	b.n	8009b92 <__gethex+0x3d6>
 8009b32:	2501      	movs	r5, #1
 8009b34:	e7d4      	b.n	8009ae0 <__gethex+0x324>
 8009b36:	2601      	movs	r6, #1
 8009b38:	e7e8      	b.n	8009b0c <__gethex+0x350>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b3e:	1a9b      	subs	r3, r3, r2
 8009b40:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0f2      	beq.n	8009b2e <__gethex+0x372>
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	9303      	str	r3, [sp, #12]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	0023      	movs	r3, r4
 8009b54:	9a04      	ldr	r2, [sp, #16]
 8009b56:	3314      	adds	r3, #20
 8009b58:	1899      	adds	r1, r3, r2
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	1c55      	adds	r5, r2, #1
 8009b5e:	d01e      	beq.n	8009b9e <__gethex+0x3e2>
 8009b60:	3201      	adds	r2, #1
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	0023      	movs	r3, r4
 8009b66:	3314      	adds	r3, #20
 8009b68:	2e02      	cmp	r6, #2
 8009b6a:	d140      	bne.n	8009bee <__gethex+0x432>
 8009b6c:	9a02      	ldr	r2, [sp, #8]
 8009b6e:	9901      	ldr	r1, [sp, #4]
 8009b70:	6812      	ldr	r2, [r2, #0]
 8009b72:	3a01      	subs	r2, #1
 8009b74:	428a      	cmp	r2, r1
 8009b76:	d10b      	bne.n	8009b90 <__gethex+0x3d4>
 8009b78:	114a      	asrs	r2, r1, #5
 8009b7a:	211f      	movs	r1, #31
 8009b7c:	9801      	ldr	r0, [sp, #4]
 8009b7e:	0092      	lsls	r2, r2, #2
 8009b80:	4001      	ands	r1, r0
 8009b82:	2001      	movs	r0, #1
 8009b84:	0005      	movs	r5, r0
 8009b86:	408d      	lsls	r5, r1
 8009b88:	58d3      	ldr	r3, [r2, r3]
 8009b8a:	422b      	tst	r3, r5
 8009b8c:	d000      	beq.n	8009b90 <__gethex+0x3d4>
 8009b8e:	2601      	movs	r6, #1
 8009b90:	2320      	movs	r3, #32
 8009b92:	431e      	orrs	r6, r3
 8009b94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b96:	601c      	str	r4, [r3, #0]
 8009b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b9a:	601f      	str	r7, [r3, #0]
 8009b9c:	e6a7      	b.n	80098ee <__gethex+0x132>
 8009b9e:	c301      	stmia	r3!, {r0}
 8009ba0:	4299      	cmp	r1, r3
 8009ba2:	d8da      	bhi.n	8009b5a <__gethex+0x39e>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	68a2      	ldr	r2, [r4, #8]
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	db17      	blt.n	8009bdc <__gethex+0x420>
 8009bac:	6863      	ldr	r3, [r4, #4]
 8009bae:	9805      	ldr	r0, [sp, #20]
 8009bb0:	1c59      	adds	r1, r3, #1
 8009bb2:	f000 f93f 	bl	8009e34 <_Balloc>
 8009bb6:	1e05      	subs	r5, r0, #0
 8009bb8:	d103      	bne.n	8009bc2 <__gethex+0x406>
 8009bba:	0002      	movs	r2, r0
 8009bbc:	2184      	movs	r1, #132	; 0x84
 8009bbe:	4b1c      	ldr	r3, [pc, #112]	; (8009c30 <__gethex+0x474>)
 8009bc0:	e6b8      	b.n	8009934 <__gethex+0x178>
 8009bc2:	0021      	movs	r1, r4
 8009bc4:	6923      	ldr	r3, [r4, #16]
 8009bc6:	310c      	adds	r1, #12
 8009bc8:	1c9a      	adds	r2, r3, #2
 8009bca:	0092      	lsls	r2, r2, #2
 8009bcc:	300c      	adds	r0, #12
 8009bce:	f7fd f873 	bl	8006cb8 <memcpy>
 8009bd2:	0021      	movs	r1, r4
 8009bd4:	9805      	ldr	r0, [sp, #20]
 8009bd6:	f000 f971 	bl	8009ebc <_Bfree>
 8009bda:	002c      	movs	r4, r5
 8009bdc:	6923      	ldr	r3, [r4, #16]
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	6122      	str	r2, [r4, #16]
 8009be2:	2201      	movs	r2, #1
 8009be4:	3304      	adds	r3, #4
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	18e3      	adds	r3, r4, r3
 8009bea:	605a      	str	r2, [r3, #4]
 8009bec:	e7ba      	b.n	8009b64 <__gethex+0x3a8>
 8009bee:	6922      	ldr	r2, [r4, #16]
 8009bf0:	9903      	ldr	r1, [sp, #12]
 8009bf2:	428a      	cmp	r2, r1
 8009bf4:	dd09      	ble.n	8009c0a <__gethex+0x44e>
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	0020      	movs	r0, r4
 8009bfa:	f7ff fd75 	bl	80096e8 <rshift>
 8009bfe:	9b02      	ldr	r3, [sp, #8]
 8009c00:	3701      	adds	r7, #1
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	42bb      	cmp	r3, r7
 8009c06:	dac2      	bge.n	8009b8e <__gethex+0x3d2>
 8009c08:	e6dc      	b.n	80099c4 <__gethex+0x208>
 8009c0a:	221f      	movs	r2, #31
 8009c0c:	9d01      	ldr	r5, [sp, #4]
 8009c0e:	9901      	ldr	r1, [sp, #4]
 8009c10:	2601      	movs	r6, #1
 8009c12:	4015      	ands	r5, r2
 8009c14:	4211      	tst	r1, r2
 8009c16:	d0bb      	beq.n	8009b90 <__gethex+0x3d4>
 8009c18:	9a04      	ldr	r2, [sp, #16]
 8009c1a:	189b      	adds	r3, r3, r2
 8009c1c:	3b04      	subs	r3, #4
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	f000 fa00 	bl	800a024 <__hi0bits>
 8009c24:	2320      	movs	r3, #32
 8009c26:	1b5d      	subs	r5, r3, r5
 8009c28:	42a8      	cmp	r0, r5
 8009c2a:	dbe4      	blt.n	8009bf6 <__gethex+0x43a>
 8009c2c:	e7b0      	b.n	8009b90 <__gethex+0x3d4>
 8009c2e:	46c0      	nop			; (mov r8, r8)
 8009c30:	0800bb37 	.word	0x0800bb37

08009c34 <L_shift>:
 8009c34:	2308      	movs	r3, #8
 8009c36:	b570      	push	{r4, r5, r6, lr}
 8009c38:	2520      	movs	r5, #32
 8009c3a:	1a9a      	subs	r2, r3, r2
 8009c3c:	0092      	lsls	r2, r2, #2
 8009c3e:	1aad      	subs	r5, r5, r2
 8009c40:	6843      	ldr	r3, [r0, #4]
 8009c42:	6806      	ldr	r6, [r0, #0]
 8009c44:	001c      	movs	r4, r3
 8009c46:	40ac      	lsls	r4, r5
 8009c48:	40d3      	lsrs	r3, r2
 8009c4a:	4334      	orrs	r4, r6
 8009c4c:	6004      	str	r4, [r0, #0]
 8009c4e:	6043      	str	r3, [r0, #4]
 8009c50:	3004      	adds	r0, #4
 8009c52:	4288      	cmp	r0, r1
 8009c54:	d3f4      	bcc.n	8009c40 <L_shift+0xc>
 8009c56:	bd70      	pop	{r4, r5, r6, pc}

08009c58 <__match>:
 8009c58:	b530      	push	{r4, r5, lr}
 8009c5a:	6803      	ldr	r3, [r0, #0]
 8009c5c:	780c      	ldrb	r4, [r1, #0]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	2c00      	cmp	r4, #0
 8009c62:	d102      	bne.n	8009c6a <__match+0x12>
 8009c64:	6003      	str	r3, [r0, #0]
 8009c66:	2001      	movs	r0, #1
 8009c68:	bd30      	pop	{r4, r5, pc}
 8009c6a:	781a      	ldrb	r2, [r3, #0]
 8009c6c:	0015      	movs	r5, r2
 8009c6e:	3d41      	subs	r5, #65	; 0x41
 8009c70:	2d19      	cmp	r5, #25
 8009c72:	d800      	bhi.n	8009c76 <__match+0x1e>
 8009c74:	3220      	adds	r2, #32
 8009c76:	3101      	adds	r1, #1
 8009c78:	42a2      	cmp	r2, r4
 8009c7a:	d0ef      	beq.n	8009c5c <__match+0x4>
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e7f3      	b.n	8009c68 <__match+0x10>

08009c80 <__hexnan>:
 8009c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c82:	680b      	ldr	r3, [r1, #0]
 8009c84:	b08b      	sub	sp, #44	; 0x2c
 8009c86:	9201      	str	r2, [sp, #4]
 8009c88:	9901      	ldr	r1, [sp, #4]
 8009c8a:	115a      	asrs	r2, r3, #5
 8009c8c:	0092      	lsls	r2, r2, #2
 8009c8e:	188a      	adds	r2, r1, r2
 8009c90:	9202      	str	r2, [sp, #8]
 8009c92:	0019      	movs	r1, r3
 8009c94:	221f      	movs	r2, #31
 8009c96:	4011      	ands	r1, r2
 8009c98:	9008      	str	r0, [sp, #32]
 8009c9a:	9106      	str	r1, [sp, #24]
 8009c9c:	4213      	tst	r3, r2
 8009c9e:	d002      	beq.n	8009ca6 <__hexnan+0x26>
 8009ca0:	9b02      	ldr	r3, [sp, #8]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	9302      	str	r3, [sp, #8]
 8009ca6:	9b02      	ldr	r3, [sp, #8]
 8009ca8:	2500      	movs	r5, #0
 8009caa:	1f1e      	subs	r6, r3, #4
 8009cac:	0037      	movs	r7, r6
 8009cae:	0034      	movs	r4, r6
 8009cb0:	9b08      	ldr	r3, [sp, #32]
 8009cb2:	6035      	str	r5, [r6, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	9507      	str	r5, [sp, #28]
 8009cb8:	9305      	str	r3, [sp, #20]
 8009cba:	9503      	str	r5, [sp, #12]
 8009cbc:	9b05      	ldr	r3, [sp, #20]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc2:	9b05      	ldr	r3, [sp, #20]
 8009cc4:	785b      	ldrb	r3, [r3, #1]
 8009cc6:	9304      	str	r3, [sp, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d028      	beq.n	8009d1e <__hexnan+0x9e>
 8009ccc:	9804      	ldr	r0, [sp, #16]
 8009cce:	f7ff fd5f 	bl	8009790 <__hexdig_fun>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d154      	bne.n	8009d80 <__hexnan+0x100>
 8009cd6:	9b04      	ldr	r3, [sp, #16]
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	d819      	bhi.n	8009d10 <__hexnan+0x90>
 8009cdc:	9b03      	ldr	r3, [sp, #12]
 8009cde:	9a07      	ldr	r2, [sp, #28]
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	dd12      	ble.n	8009d0a <__hexnan+0x8a>
 8009ce4:	42bc      	cmp	r4, r7
 8009ce6:	d206      	bcs.n	8009cf6 <__hexnan+0x76>
 8009ce8:	2d07      	cmp	r5, #7
 8009cea:	dc04      	bgt.n	8009cf6 <__hexnan+0x76>
 8009cec:	002a      	movs	r2, r5
 8009cee:	0039      	movs	r1, r7
 8009cf0:	0020      	movs	r0, r4
 8009cf2:	f7ff ff9f 	bl	8009c34 <L_shift>
 8009cf6:	9b01      	ldr	r3, [sp, #4]
 8009cf8:	2508      	movs	r5, #8
 8009cfa:	429c      	cmp	r4, r3
 8009cfc:	d905      	bls.n	8009d0a <__hexnan+0x8a>
 8009cfe:	1f27      	subs	r7, r4, #4
 8009d00:	2500      	movs	r5, #0
 8009d02:	003c      	movs	r4, r7
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	603d      	str	r5, [r7, #0]
 8009d08:	9307      	str	r3, [sp, #28]
 8009d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0c:	9305      	str	r3, [sp, #20]
 8009d0e:	e7d5      	b.n	8009cbc <__hexnan+0x3c>
 8009d10:	9b04      	ldr	r3, [sp, #16]
 8009d12:	2b29      	cmp	r3, #41	; 0x29
 8009d14:	d159      	bne.n	8009dca <__hexnan+0x14a>
 8009d16:	9b05      	ldr	r3, [sp, #20]
 8009d18:	9a08      	ldr	r2, [sp, #32]
 8009d1a:	3302      	adds	r3, #2
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	9b03      	ldr	r3, [sp, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d052      	beq.n	8009dca <__hexnan+0x14a>
 8009d24:	42bc      	cmp	r4, r7
 8009d26:	d206      	bcs.n	8009d36 <__hexnan+0xb6>
 8009d28:	2d07      	cmp	r5, #7
 8009d2a:	dc04      	bgt.n	8009d36 <__hexnan+0xb6>
 8009d2c:	002a      	movs	r2, r5
 8009d2e:	0039      	movs	r1, r7
 8009d30:	0020      	movs	r0, r4
 8009d32:	f7ff ff7f 	bl	8009c34 <L_shift>
 8009d36:	9b01      	ldr	r3, [sp, #4]
 8009d38:	429c      	cmp	r4, r3
 8009d3a:	d935      	bls.n	8009da8 <__hexnan+0x128>
 8009d3c:	001a      	movs	r2, r3
 8009d3e:	0023      	movs	r3, r4
 8009d40:	cb02      	ldmia	r3!, {r1}
 8009d42:	c202      	stmia	r2!, {r1}
 8009d44:	429e      	cmp	r6, r3
 8009d46:	d2fb      	bcs.n	8009d40 <__hexnan+0xc0>
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	1c61      	adds	r1, r4, #1
 8009d4c:	1eda      	subs	r2, r3, #3
 8009d4e:	2304      	movs	r3, #4
 8009d50:	4291      	cmp	r1, r2
 8009d52:	d805      	bhi.n	8009d60 <__hexnan+0xe0>
 8009d54:	9b02      	ldr	r3, [sp, #8]
 8009d56:	3b04      	subs	r3, #4
 8009d58:	1b1b      	subs	r3, r3, r4
 8009d5a:	089b      	lsrs	r3, r3, #2
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	9a01      	ldr	r2, [sp, #4]
 8009d62:	18d3      	adds	r3, r2, r3
 8009d64:	2200      	movs	r2, #0
 8009d66:	c304      	stmia	r3!, {r2}
 8009d68:	429e      	cmp	r6, r3
 8009d6a:	d2fc      	bcs.n	8009d66 <__hexnan+0xe6>
 8009d6c:	6833      	ldr	r3, [r6, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d104      	bne.n	8009d7c <__hexnan+0xfc>
 8009d72:	9b01      	ldr	r3, [sp, #4]
 8009d74:	429e      	cmp	r6, r3
 8009d76:	d126      	bne.n	8009dc6 <__hexnan+0x146>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	6033      	str	r3, [r6, #0]
 8009d7c:	2005      	movs	r0, #5
 8009d7e:	e025      	b.n	8009dcc <__hexnan+0x14c>
 8009d80:	9b03      	ldr	r3, [sp, #12]
 8009d82:	3501      	adds	r5, #1
 8009d84:	3301      	adds	r3, #1
 8009d86:	9303      	str	r3, [sp, #12]
 8009d88:	2d08      	cmp	r5, #8
 8009d8a:	dd06      	ble.n	8009d9a <__hexnan+0x11a>
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	429c      	cmp	r4, r3
 8009d90:	d9bb      	bls.n	8009d0a <__hexnan+0x8a>
 8009d92:	2300      	movs	r3, #0
 8009d94:	2501      	movs	r5, #1
 8009d96:	3c04      	subs	r4, #4
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	220f      	movs	r2, #15
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	4010      	ands	r0, r2
 8009da0:	011b      	lsls	r3, r3, #4
 8009da2:	4318      	orrs	r0, r3
 8009da4:	6020      	str	r0, [r4, #0]
 8009da6:	e7b0      	b.n	8009d0a <__hexnan+0x8a>
 8009da8:	9b06      	ldr	r3, [sp, #24]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d0de      	beq.n	8009d6c <__hexnan+0xec>
 8009dae:	2120      	movs	r1, #32
 8009db0:	9a06      	ldr	r2, [sp, #24]
 8009db2:	9b02      	ldr	r3, [sp, #8]
 8009db4:	1a89      	subs	r1, r1, r2
 8009db6:	2201      	movs	r2, #1
 8009db8:	4252      	negs	r2, r2
 8009dba:	40ca      	lsrs	r2, r1
 8009dbc:	3b04      	subs	r3, #4
 8009dbe:	6819      	ldr	r1, [r3, #0]
 8009dc0:	400a      	ands	r2, r1
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	e7d2      	b.n	8009d6c <__hexnan+0xec>
 8009dc6:	3e04      	subs	r6, #4
 8009dc8:	e7d0      	b.n	8009d6c <__hexnan+0xec>
 8009dca:	2004      	movs	r0, #4
 8009dcc:	b00b      	add	sp, #44	; 0x2c
 8009dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009dd0 <_localeconv_r>:
 8009dd0:	4800      	ldr	r0, [pc, #0]	; (8009dd4 <_localeconv_r+0x4>)
 8009dd2:	4770      	bx	lr
 8009dd4:	20000164 	.word	0x20000164

08009dd8 <__ascii_mbtowc>:
 8009dd8:	b082      	sub	sp, #8
 8009dda:	2900      	cmp	r1, #0
 8009ddc:	d100      	bne.n	8009de0 <__ascii_mbtowc+0x8>
 8009dde:	a901      	add	r1, sp, #4
 8009de0:	1e10      	subs	r0, r2, #0
 8009de2:	d006      	beq.n	8009df2 <__ascii_mbtowc+0x1a>
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d006      	beq.n	8009df6 <__ascii_mbtowc+0x1e>
 8009de8:	7813      	ldrb	r3, [r2, #0]
 8009dea:	600b      	str	r3, [r1, #0]
 8009dec:	7810      	ldrb	r0, [r2, #0]
 8009dee:	1e43      	subs	r3, r0, #1
 8009df0:	4198      	sbcs	r0, r3
 8009df2:	b002      	add	sp, #8
 8009df4:	4770      	bx	lr
 8009df6:	2002      	movs	r0, #2
 8009df8:	4240      	negs	r0, r0
 8009dfa:	e7fa      	b.n	8009df2 <__ascii_mbtowc+0x1a>

08009dfc <memchr>:
 8009dfc:	b2c9      	uxtb	r1, r1
 8009dfe:	1882      	adds	r2, r0, r2
 8009e00:	4290      	cmp	r0, r2
 8009e02:	d101      	bne.n	8009e08 <memchr+0xc>
 8009e04:	2000      	movs	r0, #0
 8009e06:	4770      	bx	lr
 8009e08:	7803      	ldrb	r3, [r0, #0]
 8009e0a:	428b      	cmp	r3, r1
 8009e0c:	d0fb      	beq.n	8009e06 <memchr+0xa>
 8009e0e:	3001      	adds	r0, #1
 8009e10:	e7f6      	b.n	8009e00 <memchr+0x4>
	...

08009e14 <__malloc_lock>:
 8009e14:	b510      	push	{r4, lr}
 8009e16:	4802      	ldr	r0, [pc, #8]	; (8009e20 <__malloc_lock+0xc>)
 8009e18:	f000 feb9 	bl	800ab8e <__retarget_lock_acquire_recursive>
 8009e1c:	bd10      	pop	{r4, pc}
 8009e1e:	46c0      	nop			; (mov r8, r8)
 8009e20:	2000054c 	.word	0x2000054c

08009e24 <__malloc_unlock>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	4802      	ldr	r0, [pc, #8]	; (8009e30 <__malloc_unlock+0xc>)
 8009e28:	f000 feb2 	bl	800ab90 <__retarget_lock_release_recursive>
 8009e2c:	bd10      	pop	{r4, pc}
 8009e2e:	46c0      	nop			; (mov r8, r8)
 8009e30:	2000054c 	.word	0x2000054c

08009e34 <_Balloc>:
 8009e34:	b570      	push	{r4, r5, r6, lr}
 8009e36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e38:	0006      	movs	r6, r0
 8009e3a:	000c      	movs	r4, r1
 8009e3c:	2d00      	cmp	r5, #0
 8009e3e:	d10e      	bne.n	8009e5e <_Balloc+0x2a>
 8009e40:	2010      	movs	r0, #16
 8009e42:	f7fc ff2f 	bl	8006ca4 <malloc>
 8009e46:	1e02      	subs	r2, r0, #0
 8009e48:	6270      	str	r0, [r6, #36]	; 0x24
 8009e4a:	d104      	bne.n	8009e56 <_Balloc+0x22>
 8009e4c:	2166      	movs	r1, #102	; 0x66
 8009e4e:	4b19      	ldr	r3, [pc, #100]	; (8009eb4 <_Balloc+0x80>)
 8009e50:	4819      	ldr	r0, [pc, #100]	; (8009eb8 <_Balloc+0x84>)
 8009e52:	f000 fe6d 	bl	800ab30 <__assert_func>
 8009e56:	6045      	str	r5, [r0, #4]
 8009e58:	6085      	str	r5, [r0, #8]
 8009e5a:	6005      	str	r5, [r0, #0]
 8009e5c:	60c5      	str	r5, [r0, #12]
 8009e5e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009e60:	68eb      	ldr	r3, [r5, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d013      	beq.n	8009e8e <_Balloc+0x5a>
 8009e66:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009e68:	00a2      	lsls	r2, r4, #2
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	189b      	adds	r3, r3, r2
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d118      	bne.n	8009ea6 <_Balloc+0x72>
 8009e74:	2101      	movs	r1, #1
 8009e76:	000d      	movs	r5, r1
 8009e78:	40a5      	lsls	r5, r4
 8009e7a:	1d6a      	adds	r2, r5, #5
 8009e7c:	0030      	movs	r0, r6
 8009e7e:	0092      	lsls	r2, r2, #2
 8009e80:	f000 fca1 	bl	800a7c6 <_calloc_r>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d00c      	beq.n	8009ea2 <_Balloc+0x6e>
 8009e88:	6044      	str	r4, [r0, #4]
 8009e8a:	6085      	str	r5, [r0, #8]
 8009e8c:	e00d      	b.n	8009eaa <_Balloc+0x76>
 8009e8e:	2221      	movs	r2, #33	; 0x21
 8009e90:	2104      	movs	r1, #4
 8009e92:	0030      	movs	r0, r6
 8009e94:	f000 fc97 	bl	800a7c6 <_calloc_r>
 8009e98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009e9a:	60e8      	str	r0, [r5, #12]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e1      	bne.n	8009e66 <_Balloc+0x32>
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	bd70      	pop	{r4, r5, r6, pc}
 8009ea6:	6802      	ldr	r2, [r0, #0]
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	6103      	str	r3, [r0, #16]
 8009eae:	60c3      	str	r3, [r0, #12]
 8009eb0:	e7f8      	b.n	8009ea4 <_Balloc+0x70>
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	0800bac5 	.word	0x0800bac5
 8009eb8:	0800bbc4 	.word	0x0800bbc4

08009ebc <_Bfree>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ec0:	0005      	movs	r5, r0
 8009ec2:	000c      	movs	r4, r1
 8009ec4:	2e00      	cmp	r6, #0
 8009ec6:	d10e      	bne.n	8009ee6 <_Bfree+0x2a>
 8009ec8:	2010      	movs	r0, #16
 8009eca:	f7fc feeb 	bl	8006ca4 <malloc>
 8009ece:	1e02      	subs	r2, r0, #0
 8009ed0:	6268      	str	r0, [r5, #36]	; 0x24
 8009ed2:	d104      	bne.n	8009ede <_Bfree+0x22>
 8009ed4:	218a      	movs	r1, #138	; 0x8a
 8009ed6:	4b09      	ldr	r3, [pc, #36]	; (8009efc <_Bfree+0x40>)
 8009ed8:	4809      	ldr	r0, [pc, #36]	; (8009f00 <_Bfree+0x44>)
 8009eda:	f000 fe29 	bl	800ab30 <__assert_func>
 8009ede:	6046      	str	r6, [r0, #4]
 8009ee0:	6086      	str	r6, [r0, #8]
 8009ee2:	6006      	str	r6, [r0, #0]
 8009ee4:	60c6      	str	r6, [r0, #12]
 8009ee6:	2c00      	cmp	r4, #0
 8009ee8:	d007      	beq.n	8009efa <_Bfree+0x3e>
 8009eea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009eec:	6862      	ldr	r2, [r4, #4]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	0092      	lsls	r2, r2, #2
 8009ef2:	189b      	adds	r3, r3, r2
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	6022      	str	r2, [r4, #0]
 8009ef8:	601c      	str	r4, [r3, #0]
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	0800bac5 	.word	0x0800bac5
 8009f00:	0800bbc4 	.word	0x0800bbc4

08009f04 <__multadd>:
 8009f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f06:	000e      	movs	r6, r1
 8009f08:	9001      	str	r0, [sp, #4]
 8009f0a:	000c      	movs	r4, r1
 8009f0c:	001d      	movs	r5, r3
 8009f0e:	2000      	movs	r0, #0
 8009f10:	690f      	ldr	r7, [r1, #16]
 8009f12:	3614      	adds	r6, #20
 8009f14:	6833      	ldr	r3, [r6, #0]
 8009f16:	3001      	adds	r0, #1
 8009f18:	b299      	uxth	r1, r3
 8009f1a:	4351      	muls	r1, r2
 8009f1c:	0c1b      	lsrs	r3, r3, #16
 8009f1e:	4353      	muls	r3, r2
 8009f20:	1949      	adds	r1, r1, r5
 8009f22:	0c0d      	lsrs	r5, r1, #16
 8009f24:	195b      	adds	r3, r3, r5
 8009f26:	0c1d      	lsrs	r5, r3, #16
 8009f28:	b289      	uxth	r1, r1
 8009f2a:	041b      	lsls	r3, r3, #16
 8009f2c:	185b      	adds	r3, r3, r1
 8009f2e:	c608      	stmia	r6!, {r3}
 8009f30:	4287      	cmp	r7, r0
 8009f32:	dcef      	bgt.n	8009f14 <__multadd+0x10>
 8009f34:	2d00      	cmp	r5, #0
 8009f36:	d022      	beq.n	8009f7e <__multadd+0x7a>
 8009f38:	68a3      	ldr	r3, [r4, #8]
 8009f3a:	42bb      	cmp	r3, r7
 8009f3c:	dc19      	bgt.n	8009f72 <__multadd+0x6e>
 8009f3e:	6863      	ldr	r3, [r4, #4]
 8009f40:	9801      	ldr	r0, [sp, #4]
 8009f42:	1c59      	adds	r1, r3, #1
 8009f44:	f7ff ff76 	bl	8009e34 <_Balloc>
 8009f48:	1e06      	subs	r6, r0, #0
 8009f4a:	d105      	bne.n	8009f58 <__multadd+0x54>
 8009f4c:	0002      	movs	r2, r0
 8009f4e:	21b5      	movs	r1, #181	; 0xb5
 8009f50:	4b0c      	ldr	r3, [pc, #48]	; (8009f84 <__multadd+0x80>)
 8009f52:	480d      	ldr	r0, [pc, #52]	; (8009f88 <__multadd+0x84>)
 8009f54:	f000 fdec 	bl	800ab30 <__assert_func>
 8009f58:	0021      	movs	r1, r4
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	310c      	adds	r1, #12
 8009f5e:	1c9a      	adds	r2, r3, #2
 8009f60:	0092      	lsls	r2, r2, #2
 8009f62:	300c      	adds	r0, #12
 8009f64:	f7fc fea8 	bl	8006cb8 <memcpy>
 8009f68:	0021      	movs	r1, r4
 8009f6a:	9801      	ldr	r0, [sp, #4]
 8009f6c:	f7ff ffa6 	bl	8009ebc <_Bfree>
 8009f70:	0034      	movs	r4, r6
 8009f72:	1d3b      	adds	r3, r7, #4
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	18e3      	adds	r3, r4, r3
 8009f78:	605d      	str	r5, [r3, #4]
 8009f7a:	1c7b      	adds	r3, r7, #1
 8009f7c:	6123      	str	r3, [r4, #16]
 8009f7e:	0020      	movs	r0, r4
 8009f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f82:	46c0      	nop			; (mov r8, r8)
 8009f84:	0800bb37 	.word	0x0800bb37
 8009f88:	0800bbc4 	.word	0x0800bbc4

08009f8c <__s2b>:
 8009f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f8e:	0006      	movs	r6, r0
 8009f90:	0018      	movs	r0, r3
 8009f92:	000c      	movs	r4, r1
 8009f94:	3008      	adds	r0, #8
 8009f96:	2109      	movs	r1, #9
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	0015      	movs	r5, r2
 8009f9c:	f7f6 f958 	bl	8000250 <__divsi3>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	4283      	cmp	r3, r0
 8009fa6:	db0a      	blt.n	8009fbe <__s2b+0x32>
 8009fa8:	0030      	movs	r0, r6
 8009faa:	f7ff ff43 	bl	8009e34 <_Balloc>
 8009fae:	1e01      	subs	r1, r0, #0
 8009fb0:	d108      	bne.n	8009fc4 <__s2b+0x38>
 8009fb2:	0002      	movs	r2, r0
 8009fb4:	4b19      	ldr	r3, [pc, #100]	; (800a01c <__s2b+0x90>)
 8009fb6:	481a      	ldr	r0, [pc, #104]	; (800a020 <__s2b+0x94>)
 8009fb8:	31ce      	adds	r1, #206	; 0xce
 8009fba:	f000 fdb9 	bl	800ab30 <__assert_func>
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	3101      	adds	r1, #1
 8009fc2:	e7ef      	b.n	8009fa4 <__s2b+0x18>
 8009fc4:	9b08      	ldr	r3, [sp, #32]
 8009fc6:	6143      	str	r3, [r0, #20]
 8009fc8:	2301      	movs	r3, #1
 8009fca:	6103      	str	r3, [r0, #16]
 8009fcc:	2d09      	cmp	r5, #9
 8009fce:	dd18      	ble.n	800a002 <__s2b+0x76>
 8009fd0:	0023      	movs	r3, r4
 8009fd2:	3309      	adds	r3, #9
 8009fd4:	001f      	movs	r7, r3
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	1964      	adds	r4, r4, r5
 8009fda:	783b      	ldrb	r3, [r7, #0]
 8009fdc:	220a      	movs	r2, #10
 8009fde:	0030      	movs	r0, r6
 8009fe0:	3b30      	subs	r3, #48	; 0x30
 8009fe2:	f7ff ff8f 	bl	8009f04 <__multadd>
 8009fe6:	3701      	adds	r7, #1
 8009fe8:	0001      	movs	r1, r0
 8009fea:	42a7      	cmp	r7, r4
 8009fec:	d1f5      	bne.n	8009fda <__s2b+0x4e>
 8009fee:	002c      	movs	r4, r5
 8009ff0:	9b00      	ldr	r3, [sp, #0]
 8009ff2:	3c08      	subs	r4, #8
 8009ff4:	191c      	adds	r4, r3, r4
 8009ff6:	002f      	movs	r7, r5
 8009ff8:	9b01      	ldr	r3, [sp, #4]
 8009ffa:	429f      	cmp	r7, r3
 8009ffc:	db04      	blt.n	800a008 <__s2b+0x7c>
 8009ffe:	0008      	movs	r0, r1
 800a000:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a002:	2509      	movs	r5, #9
 800a004:	340a      	adds	r4, #10
 800a006:	e7f6      	b.n	8009ff6 <__s2b+0x6a>
 800a008:	1b63      	subs	r3, r4, r5
 800a00a:	5ddb      	ldrb	r3, [r3, r7]
 800a00c:	220a      	movs	r2, #10
 800a00e:	0030      	movs	r0, r6
 800a010:	3b30      	subs	r3, #48	; 0x30
 800a012:	f7ff ff77 	bl	8009f04 <__multadd>
 800a016:	3701      	adds	r7, #1
 800a018:	0001      	movs	r1, r0
 800a01a:	e7ed      	b.n	8009ff8 <__s2b+0x6c>
 800a01c:	0800bb37 	.word	0x0800bb37
 800a020:	0800bbc4 	.word	0x0800bbc4

0800a024 <__hi0bits>:
 800a024:	0003      	movs	r3, r0
 800a026:	0c02      	lsrs	r2, r0, #16
 800a028:	2000      	movs	r0, #0
 800a02a:	4282      	cmp	r2, r0
 800a02c:	d101      	bne.n	800a032 <__hi0bits+0xe>
 800a02e:	041b      	lsls	r3, r3, #16
 800a030:	3010      	adds	r0, #16
 800a032:	0e1a      	lsrs	r2, r3, #24
 800a034:	d101      	bne.n	800a03a <__hi0bits+0x16>
 800a036:	3008      	adds	r0, #8
 800a038:	021b      	lsls	r3, r3, #8
 800a03a:	0f1a      	lsrs	r2, r3, #28
 800a03c:	d101      	bne.n	800a042 <__hi0bits+0x1e>
 800a03e:	3004      	adds	r0, #4
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	0f9a      	lsrs	r2, r3, #30
 800a044:	d101      	bne.n	800a04a <__hi0bits+0x26>
 800a046:	3002      	adds	r0, #2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	db03      	blt.n	800a056 <__hi0bits+0x32>
 800a04e:	3001      	adds	r0, #1
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	d400      	bmi.n	800a056 <__hi0bits+0x32>
 800a054:	2020      	movs	r0, #32
 800a056:	4770      	bx	lr

0800a058 <__lo0bits>:
 800a058:	6803      	ldr	r3, [r0, #0]
 800a05a:	0002      	movs	r2, r0
 800a05c:	2107      	movs	r1, #7
 800a05e:	0018      	movs	r0, r3
 800a060:	4008      	ands	r0, r1
 800a062:	420b      	tst	r3, r1
 800a064:	d00d      	beq.n	800a082 <__lo0bits+0x2a>
 800a066:	3906      	subs	r1, #6
 800a068:	2000      	movs	r0, #0
 800a06a:	420b      	tst	r3, r1
 800a06c:	d105      	bne.n	800a07a <__lo0bits+0x22>
 800a06e:	3002      	adds	r0, #2
 800a070:	4203      	tst	r3, r0
 800a072:	d003      	beq.n	800a07c <__lo0bits+0x24>
 800a074:	40cb      	lsrs	r3, r1
 800a076:	0008      	movs	r0, r1
 800a078:	6013      	str	r3, [r2, #0]
 800a07a:	4770      	bx	lr
 800a07c:	089b      	lsrs	r3, r3, #2
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	e7fb      	b.n	800a07a <__lo0bits+0x22>
 800a082:	b299      	uxth	r1, r3
 800a084:	2900      	cmp	r1, #0
 800a086:	d101      	bne.n	800a08c <__lo0bits+0x34>
 800a088:	2010      	movs	r0, #16
 800a08a:	0c1b      	lsrs	r3, r3, #16
 800a08c:	b2d9      	uxtb	r1, r3
 800a08e:	2900      	cmp	r1, #0
 800a090:	d101      	bne.n	800a096 <__lo0bits+0x3e>
 800a092:	3008      	adds	r0, #8
 800a094:	0a1b      	lsrs	r3, r3, #8
 800a096:	0719      	lsls	r1, r3, #28
 800a098:	d101      	bne.n	800a09e <__lo0bits+0x46>
 800a09a:	3004      	adds	r0, #4
 800a09c:	091b      	lsrs	r3, r3, #4
 800a09e:	0799      	lsls	r1, r3, #30
 800a0a0:	d101      	bne.n	800a0a6 <__lo0bits+0x4e>
 800a0a2:	3002      	adds	r0, #2
 800a0a4:	089b      	lsrs	r3, r3, #2
 800a0a6:	07d9      	lsls	r1, r3, #31
 800a0a8:	d4e9      	bmi.n	800a07e <__lo0bits+0x26>
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	085b      	lsrs	r3, r3, #1
 800a0ae:	d1e6      	bne.n	800a07e <__lo0bits+0x26>
 800a0b0:	2020      	movs	r0, #32
 800a0b2:	e7e2      	b.n	800a07a <__lo0bits+0x22>

0800a0b4 <__i2b>:
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	000c      	movs	r4, r1
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	f7ff febb 	bl	8009e34 <_Balloc>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d106      	bne.n	800a0d0 <__i2b+0x1c>
 800a0c2:	21a0      	movs	r1, #160	; 0xa0
 800a0c4:	0002      	movs	r2, r0
 800a0c6:	4b04      	ldr	r3, [pc, #16]	; (800a0d8 <__i2b+0x24>)
 800a0c8:	4804      	ldr	r0, [pc, #16]	; (800a0dc <__i2b+0x28>)
 800a0ca:	0049      	lsls	r1, r1, #1
 800a0cc:	f000 fd30 	bl	800ab30 <__assert_func>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	6144      	str	r4, [r0, #20]
 800a0d4:	6103      	str	r3, [r0, #16]
 800a0d6:	bd10      	pop	{r4, pc}
 800a0d8:	0800bb37 	.word	0x0800bb37
 800a0dc:	0800bbc4 	.word	0x0800bbc4

0800a0e0 <__multiply>:
 800a0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0e2:	690b      	ldr	r3, [r1, #16]
 800a0e4:	0014      	movs	r4, r2
 800a0e6:	6912      	ldr	r2, [r2, #16]
 800a0e8:	000d      	movs	r5, r1
 800a0ea:	b089      	sub	sp, #36	; 0x24
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	da01      	bge.n	800a0f4 <__multiply+0x14>
 800a0f0:	0025      	movs	r5, r4
 800a0f2:	000c      	movs	r4, r1
 800a0f4:	692f      	ldr	r7, [r5, #16]
 800a0f6:	6926      	ldr	r6, [r4, #16]
 800a0f8:	6869      	ldr	r1, [r5, #4]
 800a0fa:	19bb      	adds	r3, r7, r6
 800a0fc:	9302      	str	r3, [sp, #8]
 800a0fe:	68ab      	ldr	r3, [r5, #8]
 800a100:	19ba      	adds	r2, r7, r6
 800a102:	4293      	cmp	r3, r2
 800a104:	da00      	bge.n	800a108 <__multiply+0x28>
 800a106:	3101      	adds	r1, #1
 800a108:	f7ff fe94 	bl	8009e34 <_Balloc>
 800a10c:	9001      	str	r0, [sp, #4]
 800a10e:	2800      	cmp	r0, #0
 800a110:	d106      	bne.n	800a120 <__multiply+0x40>
 800a112:	215e      	movs	r1, #94	; 0x5e
 800a114:	0002      	movs	r2, r0
 800a116:	4b48      	ldr	r3, [pc, #288]	; (800a238 <__multiply+0x158>)
 800a118:	4848      	ldr	r0, [pc, #288]	; (800a23c <__multiply+0x15c>)
 800a11a:	31ff      	adds	r1, #255	; 0xff
 800a11c:	f000 fd08 	bl	800ab30 <__assert_func>
 800a120:	9b01      	ldr	r3, [sp, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	3314      	adds	r3, #20
 800a126:	469c      	mov	ip, r3
 800a128:	19bb      	adds	r3, r7, r6
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4463      	add	r3, ip
 800a12e:	9303      	str	r3, [sp, #12]
 800a130:	4663      	mov	r3, ip
 800a132:	9903      	ldr	r1, [sp, #12]
 800a134:	428b      	cmp	r3, r1
 800a136:	d32c      	bcc.n	800a192 <__multiply+0xb2>
 800a138:	002b      	movs	r3, r5
 800a13a:	0022      	movs	r2, r4
 800a13c:	3314      	adds	r3, #20
 800a13e:	00bf      	lsls	r7, r7, #2
 800a140:	3214      	adds	r2, #20
 800a142:	9306      	str	r3, [sp, #24]
 800a144:	00b6      	lsls	r6, r6, #2
 800a146:	19db      	adds	r3, r3, r7
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	1993      	adds	r3, r2, r6
 800a14c:	9307      	str	r3, [sp, #28]
 800a14e:	2304      	movs	r3, #4
 800a150:	9305      	str	r3, [sp, #20]
 800a152:	002b      	movs	r3, r5
 800a154:	9904      	ldr	r1, [sp, #16]
 800a156:	3315      	adds	r3, #21
 800a158:	9200      	str	r2, [sp, #0]
 800a15a:	4299      	cmp	r1, r3
 800a15c:	d305      	bcc.n	800a16a <__multiply+0x8a>
 800a15e:	1b4b      	subs	r3, r1, r5
 800a160:	3b15      	subs	r3, #21
 800a162:	089b      	lsrs	r3, r3, #2
 800a164:	3301      	adds	r3, #1
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	9305      	str	r3, [sp, #20]
 800a16a:	9b07      	ldr	r3, [sp, #28]
 800a16c:	9a00      	ldr	r2, [sp, #0]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d311      	bcc.n	800a196 <__multiply+0xb6>
 800a172:	9b02      	ldr	r3, [sp, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	dd06      	ble.n	800a186 <__multiply+0xa6>
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	3b04      	subs	r3, #4
 800a17c:	9303      	str	r3, [sp, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d053      	beq.n	800a22e <__multiply+0x14e>
 800a186:	9b01      	ldr	r3, [sp, #4]
 800a188:	9a02      	ldr	r2, [sp, #8]
 800a18a:	0018      	movs	r0, r3
 800a18c:	611a      	str	r2, [r3, #16]
 800a18e:	b009      	add	sp, #36	; 0x24
 800a190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a192:	c304      	stmia	r3!, {r2}
 800a194:	e7cd      	b.n	800a132 <__multiply+0x52>
 800a196:	9b00      	ldr	r3, [sp, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	b298      	uxth	r0, r3
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d01b      	beq.n	800a1d8 <__multiply+0xf8>
 800a1a0:	4667      	mov	r7, ip
 800a1a2:	2400      	movs	r4, #0
 800a1a4:	9e06      	ldr	r6, [sp, #24]
 800a1a6:	ce02      	ldmia	r6!, {r1}
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	b28b      	uxth	r3, r1
 800a1ac:	4343      	muls	r3, r0
 800a1ae:	b292      	uxth	r2, r2
 800a1b0:	189b      	adds	r3, r3, r2
 800a1b2:	191b      	adds	r3, r3, r4
 800a1b4:	0c0c      	lsrs	r4, r1, #16
 800a1b6:	4344      	muls	r4, r0
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	0c11      	lsrs	r1, r2, #16
 800a1bc:	1861      	adds	r1, r4, r1
 800a1be:	0c1c      	lsrs	r4, r3, #16
 800a1c0:	1909      	adds	r1, r1, r4
 800a1c2:	0c0c      	lsrs	r4, r1, #16
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	0409      	lsls	r1, r1, #16
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	c708      	stmia	r7!, {r3}
 800a1cc:	9b04      	ldr	r3, [sp, #16]
 800a1ce:	42b3      	cmp	r3, r6
 800a1d0:	d8e9      	bhi.n	800a1a6 <__multiply+0xc6>
 800a1d2:	4663      	mov	r3, ip
 800a1d4:	9a05      	ldr	r2, [sp, #20]
 800a1d6:	509c      	str	r4, [r3, r2]
 800a1d8:	9b00      	ldr	r3, [sp, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	0c1e      	lsrs	r6, r3, #16
 800a1de:	d020      	beq.n	800a222 <__multiply+0x142>
 800a1e0:	4663      	mov	r3, ip
 800a1e2:	002c      	movs	r4, r5
 800a1e4:	4660      	mov	r0, ip
 800a1e6:	2700      	movs	r7, #0
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3414      	adds	r4, #20
 800a1ec:	6822      	ldr	r2, [r4, #0]
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	b291      	uxth	r1, r2
 800a1f2:	4371      	muls	r1, r6
 800a1f4:	6802      	ldr	r2, [r0, #0]
 800a1f6:	0c12      	lsrs	r2, r2, #16
 800a1f8:	1889      	adds	r1, r1, r2
 800a1fa:	19cf      	adds	r7, r1, r7
 800a1fc:	0439      	lsls	r1, r7, #16
 800a1fe:	430b      	orrs	r3, r1
 800a200:	6003      	str	r3, [r0, #0]
 800a202:	cc02      	ldmia	r4!, {r1}
 800a204:	6843      	ldr	r3, [r0, #4]
 800a206:	0c09      	lsrs	r1, r1, #16
 800a208:	4371      	muls	r1, r6
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	0c3f      	lsrs	r7, r7, #16
 800a20e:	18cb      	adds	r3, r1, r3
 800a210:	9a04      	ldr	r2, [sp, #16]
 800a212:	19db      	adds	r3, r3, r7
 800a214:	0c1f      	lsrs	r7, r3, #16
 800a216:	3004      	adds	r0, #4
 800a218:	42a2      	cmp	r2, r4
 800a21a:	d8e7      	bhi.n	800a1ec <__multiply+0x10c>
 800a21c:	4662      	mov	r2, ip
 800a21e:	9905      	ldr	r1, [sp, #20]
 800a220:	5053      	str	r3, [r2, r1]
 800a222:	9b00      	ldr	r3, [sp, #0]
 800a224:	3304      	adds	r3, #4
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	2304      	movs	r3, #4
 800a22a:	449c      	add	ip, r3
 800a22c:	e79d      	b.n	800a16a <__multiply+0x8a>
 800a22e:	9b02      	ldr	r3, [sp, #8]
 800a230:	3b01      	subs	r3, #1
 800a232:	9302      	str	r3, [sp, #8]
 800a234:	e79d      	b.n	800a172 <__multiply+0x92>
 800a236:	46c0      	nop			; (mov r8, r8)
 800a238:	0800bb37 	.word	0x0800bb37
 800a23c:	0800bbc4 	.word	0x0800bbc4

0800a240 <__pow5mult>:
 800a240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a242:	2303      	movs	r3, #3
 800a244:	0015      	movs	r5, r2
 800a246:	0007      	movs	r7, r0
 800a248:	000e      	movs	r6, r1
 800a24a:	401a      	ands	r2, r3
 800a24c:	421d      	tst	r5, r3
 800a24e:	d008      	beq.n	800a262 <__pow5mult+0x22>
 800a250:	4925      	ldr	r1, [pc, #148]	; (800a2e8 <__pow5mult+0xa8>)
 800a252:	3a01      	subs	r2, #1
 800a254:	0092      	lsls	r2, r2, #2
 800a256:	5852      	ldr	r2, [r2, r1]
 800a258:	2300      	movs	r3, #0
 800a25a:	0031      	movs	r1, r6
 800a25c:	f7ff fe52 	bl	8009f04 <__multadd>
 800a260:	0006      	movs	r6, r0
 800a262:	10ad      	asrs	r5, r5, #2
 800a264:	d03d      	beq.n	800a2e2 <__pow5mult+0xa2>
 800a266:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a268:	2c00      	cmp	r4, #0
 800a26a:	d10f      	bne.n	800a28c <__pow5mult+0x4c>
 800a26c:	2010      	movs	r0, #16
 800a26e:	f7fc fd19 	bl	8006ca4 <malloc>
 800a272:	1e02      	subs	r2, r0, #0
 800a274:	6278      	str	r0, [r7, #36]	; 0x24
 800a276:	d105      	bne.n	800a284 <__pow5mult+0x44>
 800a278:	21d7      	movs	r1, #215	; 0xd7
 800a27a:	4b1c      	ldr	r3, [pc, #112]	; (800a2ec <__pow5mult+0xac>)
 800a27c:	481c      	ldr	r0, [pc, #112]	; (800a2f0 <__pow5mult+0xb0>)
 800a27e:	0049      	lsls	r1, r1, #1
 800a280:	f000 fc56 	bl	800ab30 <__assert_func>
 800a284:	6044      	str	r4, [r0, #4]
 800a286:	6084      	str	r4, [r0, #8]
 800a288:	6004      	str	r4, [r0, #0]
 800a28a:	60c4      	str	r4, [r0, #12]
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	689c      	ldr	r4, [r3, #8]
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	2c00      	cmp	r4, #0
 800a294:	d108      	bne.n	800a2a8 <__pow5mult+0x68>
 800a296:	0038      	movs	r0, r7
 800a298:	4916      	ldr	r1, [pc, #88]	; (800a2f4 <__pow5mult+0xb4>)
 800a29a:	f7ff ff0b 	bl	800a0b4 <__i2b>
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	0004      	movs	r4, r0
 800a2a2:	6098      	str	r0, [r3, #8]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	6003      	str	r3, [r0, #0]
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	421d      	tst	r5, r3
 800a2ac:	d00a      	beq.n	800a2c4 <__pow5mult+0x84>
 800a2ae:	0031      	movs	r1, r6
 800a2b0:	0022      	movs	r2, r4
 800a2b2:	0038      	movs	r0, r7
 800a2b4:	f7ff ff14 	bl	800a0e0 <__multiply>
 800a2b8:	0031      	movs	r1, r6
 800a2ba:	9001      	str	r0, [sp, #4]
 800a2bc:	0038      	movs	r0, r7
 800a2be:	f7ff fdfd 	bl	8009ebc <_Bfree>
 800a2c2:	9e01      	ldr	r6, [sp, #4]
 800a2c4:	106d      	asrs	r5, r5, #1
 800a2c6:	d00c      	beq.n	800a2e2 <__pow5mult+0xa2>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d107      	bne.n	800a2de <__pow5mult+0x9e>
 800a2ce:	0022      	movs	r2, r4
 800a2d0:	0021      	movs	r1, r4
 800a2d2:	0038      	movs	r0, r7
 800a2d4:	f7ff ff04 	bl	800a0e0 <__multiply>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	6020      	str	r0, [r4, #0]
 800a2dc:	6003      	str	r3, [r0, #0]
 800a2de:	0004      	movs	r4, r0
 800a2e0:	e7e2      	b.n	800a2a8 <__pow5mult+0x68>
 800a2e2:	0030      	movs	r0, r6
 800a2e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	0800bd10 	.word	0x0800bd10
 800a2ec:	0800bac5 	.word	0x0800bac5
 800a2f0:	0800bbc4 	.word	0x0800bbc4
 800a2f4:	00000271 	.word	0x00000271

0800a2f8 <__lshift>:
 800a2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fa:	000c      	movs	r4, r1
 800a2fc:	0017      	movs	r7, r2
 800a2fe:	6923      	ldr	r3, [r4, #16]
 800a300:	1155      	asrs	r5, r2, #5
 800a302:	b087      	sub	sp, #28
 800a304:	18eb      	adds	r3, r5, r3
 800a306:	9302      	str	r3, [sp, #8]
 800a308:	3301      	adds	r3, #1
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	6849      	ldr	r1, [r1, #4]
 800a30e:	68a3      	ldr	r3, [r4, #8]
 800a310:	9004      	str	r0, [sp, #16]
 800a312:	9a01      	ldr	r2, [sp, #4]
 800a314:	4293      	cmp	r3, r2
 800a316:	db10      	blt.n	800a33a <__lshift+0x42>
 800a318:	9804      	ldr	r0, [sp, #16]
 800a31a:	f7ff fd8b 	bl	8009e34 <_Balloc>
 800a31e:	2300      	movs	r3, #0
 800a320:	0002      	movs	r2, r0
 800a322:	0006      	movs	r6, r0
 800a324:	0019      	movs	r1, r3
 800a326:	3214      	adds	r2, #20
 800a328:	4298      	cmp	r0, r3
 800a32a:	d10c      	bne.n	800a346 <__lshift+0x4e>
 800a32c:	21da      	movs	r1, #218	; 0xda
 800a32e:	0002      	movs	r2, r0
 800a330:	4b26      	ldr	r3, [pc, #152]	; (800a3cc <__lshift+0xd4>)
 800a332:	4827      	ldr	r0, [pc, #156]	; (800a3d0 <__lshift+0xd8>)
 800a334:	31ff      	adds	r1, #255	; 0xff
 800a336:	f000 fbfb 	bl	800ab30 <__assert_func>
 800a33a:	3101      	adds	r1, #1
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	e7e8      	b.n	800a312 <__lshift+0x1a>
 800a340:	0098      	lsls	r0, r3, #2
 800a342:	5011      	str	r1, [r2, r0]
 800a344:	3301      	adds	r3, #1
 800a346:	42ab      	cmp	r3, r5
 800a348:	dbfa      	blt.n	800a340 <__lshift+0x48>
 800a34a:	43eb      	mvns	r3, r5
 800a34c:	17db      	asrs	r3, r3, #31
 800a34e:	401d      	ands	r5, r3
 800a350:	211f      	movs	r1, #31
 800a352:	0023      	movs	r3, r4
 800a354:	0038      	movs	r0, r7
 800a356:	00ad      	lsls	r5, r5, #2
 800a358:	1955      	adds	r5, r2, r5
 800a35a:	6922      	ldr	r2, [r4, #16]
 800a35c:	3314      	adds	r3, #20
 800a35e:	0092      	lsls	r2, r2, #2
 800a360:	4008      	ands	r0, r1
 800a362:	4684      	mov	ip, r0
 800a364:	189a      	adds	r2, r3, r2
 800a366:	420f      	tst	r7, r1
 800a368:	d02a      	beq.n	800a3c0 <__lshift+0xc8>
 800a36a:	3101      	adds	r1, #1
 800a36c:	1a09      	subs	r1, r1, r0
 800a36e:	9105      	str	r1, [sp, #20]
 800a370:	2100      	movs	r1, #0
 800a372:	9503      	str	r5, [sp, #12]
 800a374:	4667      	mov	r7, ip
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	40b8      	lsls	r0, r7
 800a37a:	4301      	orrs	r1, r0
 800a37c:	9803      	ldr	r0, [sp, #12]
 800a37e:	c002      	stmia	r0!, {r1}
 800a380:	cb02      	ldmia	r3!, {r1}
 800a382:	9003      	str	r0, [sp, #12]
 800a384:	9805      	ldr	r0, [sp, #20]
 800a386:	40c1      	lsrs	r1, r0
 800a388:	429a      	cmp	r2, r3
 800a38a:	d8f3      	bhi.n	800a374 <__lshift+0x7c>
 800a38c:	0020      	movs	r0, r4
 800a38e:	3015      	adds	r0, #21
 800a390:	2304      	movs	r3, #4
 800a392:	4282      	cmp	r2, r0
 800a394:	d304      	bcc.n	800a3a0 <__lshift+0xa8>
 800a396:	1b13      	subs	r3, r2, r4
 800a398:	3b15      	subs	r3, #21
 800a39a:	089b      	lsrs	r3, r3, #2
 800a39c:	3301      	adds	r3, #1
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	50e9      	str	r1, [r5, r3]
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	d002      	beq.n	800a3ac <__lshift+0xb4>
 800a3a6:	9b02      	ldr	r3, [sp, #8]
 800a3a8:	3302      	adds	r3, #2
 800a3aa:	9301      	str	r3, [sp, #4]
 800a3ac:	9b01      	ldr	r3, [sp, #4]
 800a3ae:	9804      	ldr	r0, [sp, #16]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	0021      	movs	r1, r4
 800a3b4:	6133      	str	r3, [r6, #16]
 800a3b6:	f7ff fd81 	bl	8009ebc <_Bfree>
 800a3ba:	0030      	movs	r0, r6
 800a3bc:	b007      	add	sp, #28
 800a3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c0:	cb02      	ldmia	r3!, {r1}
 800a3c2:	c502      	stmia	r5!, {r1}
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d8fb      	bhi.n	800a3c0 <__lshift+0xc8>
 800a3c8:	e7f0      	b.n	800a3ac <__lshift+0xb4>
 800a3ca:	46c0      	nop			; (mov r8, r8)
 800a3cc:	0800bb37 	.word	0x0800bb37
 800a3d0:	0800bbc4 	.word	0x0800bbc4

0800a3d4 <__mcmp>:
 800a3d4:	6902      	ldr	r2, [r0, #16]
 800a3d6:	690b      	ldr	r3, [r1, #16]
 800a3d8:	b530      	push	{r4, r5, lr}
 800a3da:	0004      	movs	r4, r0
 800a3dc:	1ad0      	subs	r0, r2, r3
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d10d      	bne.n	800a3fe <__mcmp+0x2a>
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	3414      	adds	r4, #20
 800a3e6:	3114      	adds	r1, #20
 800a3e8:	18e2      	adds	r2, r4, r3
 800a3ea:	18c9      	adds	r1, r1, r3
 800a3ec:	3a04      	subs	r2, #4
 800a3ee:	3904      	subs	r1, #4
 800a3f0:	6815      	ldr	r5, [r2, #0]
 800a3f2:	680b      	ldr	r3, [r1, #0]
 800a3f4:	429d      	cmp	r5, r3
 800a3f6:	d003      	beq.n	800a400 <__mcmp+0x2c>
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	429d      	cmp	r5, r3
 800a3fc:	d303      	bcc.n	800a406 <__mcmp+0x32>
 800a3fe:	bd30      	pop	{r4, r5, pc}
 800a400:	4294      	cmp	r4, r2
 800a402:	d3f3      	bcc.n	800a3ec <__mcmp+0x18>
 800a404:	e7fb      	b.n	800a3fe <__mcmp+0x2a>
 800a406:	4240      	negs	r0, r0
 800a408:	e7f9      	b.n	800a3fe <__mcmp+0x2a>
	...

0800a40c <__mdiff>:
 800a40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a40e:	000e      	movs	r6, r1
 800a410:	0007      	movs	r7, r0
 800a412:	0011      	movs	r1, r2
 800a414:	0030      	movs	r0, r6
 800a416:	b087      	sub	sp, #28
 800a418:	0014      	movs	r4, r2
 800a41a:	f7ff ffdb 	bl	800a3d4 <__mcmp>
 800a41e:	1e05      	subs	r5, r0, #0
 800a420:	d110      	bne.n	800a444 <__mdiff+0x38>
 800a422:	0001      	movs	r1, r0
 800a424:	0038      	movs	r0, r7
 800a426:	f7ff fd05 	bl	8009e34 <_Balloc>
 800a42a:	1e02      	subs	r2, r0, #0
 800a42c:	d104      	bne.n	800a438 <__mdiff+0x2c>
 800a42e:	4b40      	ldr	r3, [pc, #256]	; (800a530 <__mdiff+0x124>)
 800a430:	4940      	ldr	r1, [pc, #256]	; (800a534 <__mdiff+0x128>)
 800a432:	4841      	ldr	r0, [pc, #260]	; (800a538 <__mdiff+0x12c>)
 800a434:	f000 fb7c 	bl	800ab30 <__assert_func>
 800a438:	2301      	movs	r3, #1
 800a43a:	6145      	str	r5, [r0, #20]
 800a43c:	6103      	str	r3, [r0, #16]
 800a43e:	0010      	movs	r0, r2
 800a440:	b007      	add	sp, #28
 800a442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a444:	2301      	movs	r3, #1
 800a446:	9301      	str	r3, [sp, #4]
 800a448:	2800      	cmp	r0, #0
 800a44a:	db04      	blt.n	800a456 <__mdiff+0x4a>
 800a44c:	0023      	movs	r3, r4
 800a44e:	0034      	movs	r4, r6
 800a450:	001e      	movs	r6, r3
 800a452:	2300      	movs	r3, #0
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	0038      	movs	r0, r7
 800a458:	6861      	ldr	r1, [r4, #4]
 800a45a:	f7ff fceb 	bl	8009e34 <_Balloc>
 800a45e:	1e02      	subs	r2, r0, #0
 800a460:	d103      	bne.n	800a46a <__mdiff+0x5e>
 800a462:	2190      	movs	r1, #144	; 0x90
 800a464:	4b32      	ldr	r3, [pc, #200]	; (800a530 <__mdiff+0x124>)
 800a466:	0089      	lsls	r1, r1, #2
 800a468:	e7e3      	b.n	800a432 <__mdiff+0x26>
 800a46a:	9b01      	ldr	r3, [sp, #4]
 800a46c:	2700      	movs	r7, #0
 800a46e:	60c3      	str	r3, [r0, #12]
 800a470:	6920      	ldr	r0, [r4, #16]
 800a472:	3414      	adds	r4, #20
 800a474:	9401      	str	r4, [sp, #4]
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	0084      	lsls	r4, r0, #2
 800a47a:	191b      	adds	r3, r3, r4
 800a47c:	0034      	movs	r4, r6
 800a47e:	9302      	str	r3, [sp, #8]
 800a480:	6933      	ldr	r3, [r6, #16]
 800a482:	3414      	adds	r4, #20
 800a484:	0099      	lsls	r1, r3, #2
 800a486:	1863      	adds	r3, r4, r1
 800a488:	9303      	str	r3, [sp, #12]
 800a48a:	0013      	movs	r3, r2
 800a48c:	3314      	adds	r3, #20
 800a48e:	469c      	mov	ip, r3
 800a490:	9305      	str	r3, [sp, #20]
 800a492:	9b01      	ldr	r3, [sp, #4]
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	9b04      	ldr	r3, [sp, #16]
 800a498:	cc02      	ldmia	r4!, {r1}
 800a49a:	cb20      	ldmia	r3!, {r5}
 800a49c:	9304      	str	r3, [sp, #16]
 800a49e:	b2ab      	uxth	r3, r5
 800a4a0:	19df      	adds	r7, r3, r7
 800a4a2:	b28b      	uxth	r3, r1
 800a4a4:	1afb      	subs	r3, r7, r3
 800a4a6:	0c09      	lsrs	r1, r1, #16
 800a4a8:	0c2d      	lsrs	r5, r5, #16
 800a4aa:	1a6d      	subs	r5, r5, r1
 800a4ac:	1419      	asrs	r1, r3, #16
 800a4ae:	186d      	adds	r5, r5, r1
 800a4b0:	4661      	mov	r1, ip
 800a4b2:	142f      	asrs	r7, r5, #16
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	042d      	lsls	r5, r5, #16
 800a4b8:	432b      	orrs	r3, r5
 800a4ba:	c108      	stmia	r1!, {r3}
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	468c      	mov	ip, r1
 800a4c0:	42a3      	cmp	r3, r4
 800a4c2:	d8e8      	bhi.n	800a496 <__mdiff+0x8a>
 800a4c4:	0031      	movs	r1, r6
 800a4c6:	9c03      	ldr	r4, [sp, #12]
 800a4c8:	3115      	adds	r1, #21
 800a4ca:	2304      	movs	r3, #4
 800a4cc:	428c      	cmp	r4, r1
 800a4ce:	d304      	bcc.n	800a4da <__mdiff+0xce>
 800a4d0:	1ba3      	subs	r3, r4, r6
 800a4d2:	3b15      	subs	r3, #21
 800a4d4:	089b      	lsrs	r3, r3, #2
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	9901      	ldr	r1, [sp, #4]
 800a4dc:	18cc      	adds	r4, r1, r3
 800a4de:	9905      	ldr	r1, [sp, #20]
 800a4e0:	0026      	movs	r6, r4
 800a4e2:	18cb      	adds	r3, r1, r3
 800a4e4:	469c      	mov	ip, r3
 800a4e6:	9902      	ldr	r1, [sp, #8]
 800a4e8:	428e      	cmp	r6, r1
 800a4ea:	d310      	bcc.n	800a50e <__mdiff+0x102>
 800a4ec:	9e02      	ldr	r6, [sp, #8]
 800a4ee:	1ee1      	subs	r1, r4, #3
 800a4f0:	2500      	movs	r5, #0
 800a4f2:	428e      	cmp	r6, r1
 800a4f4:	d304      	bcc.n	800a500 <__mdiff+0xf4>
 800a4f6:	0031      	movs	r1, r6
 800a4f8:	3103      	adds	r1, #3
 800a4fa:	1b0c      	subs	r4, r1, r4
 800a4fc:	08a4      	lsrs	r4, r4, #2
 800a4fe:	00a5      	lsls	r5, r4, #2
 800a500:	195b      	adds	r3, r3, r5
 800a502:	3b04      	subs	r3, #4
 800a504:	6819      	ldr	r1, [r3, #0]
 800a506:	2900      	cmp	r1, #0
 800a508:	d00f      	beq.n	800a52a <__mdiff+0x11e>
 800a50a:	6110      	str	r0, [r2, #16]
 800a50c:	e797      	b.n	800a43e <__mdiff+0x32>
 800a50e:	ce02      	ldmia	r6!, {r1}
 800a510:	b28d      	uxth	r5, r1
 800a512:	19ed      	adds	r5, r5, r7
 800a514:	0c0f      	lsrs	r7, r1, #16
 800a516:	1429      	asrs	r1, r5, #16
 800a518:	1879      	adds	r1, r7, r1
 800a51a:	140f      	asrs	r7, r1, #16
 800a51c:	b2ad      	uxth	r5, r5
 800a51e:	0409      	lsls	r1, r1, #16
 800a520:	430d      	orrs	r5, r1
 800a522:	4661      	mov	r1, ip
 800a524:	c120      	stmia	r1!, {r5}
 800a526:	468c      	mov	ip, r1
 800a528:	e7dd      	b.n	800a4e6 <__mdiff+0xda>
 800a52a:	3801      	subs	r0, #1
 800a52c:	e7e9      	b.n	800a502 <__mdiff+0xf6>
 800a52e:	46c0      	nop			; (mov r8, r8)
 800a530:	0800bb37 	.word	0x0800bb37
 800a534:	00000232 	.word	0x00000232
 800a538:	0800bbc4 	.word	0x0800bbc4

0800a53c <__ulp>:
 800a53c:	4b0f      	ldr	r3, [pc, #60]	; (800a57c <__ulp+0x40>)
 800a53e:	4019      	ands	r1, r3
 800a540:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <__ulp+0x44>)
 800a542:	18c9      	adds	r1, r1, r3
 800a544:	2900      	cmp	r1, #0
 800a546:	dd04      	ble.n	800a552 <__ulp+0x16>
 800a548:	2200      	movs	r2, #0
 800a54a:	000b      	movs	r3, r1
 800a54c:	0010      	movs	r0, r2
 800a54e:	0019      	movs	r1, r3
 800a550:	4770      	bx	lr
 800a552:	4249      	negs	r1, r1
 800a554:	2200      	movs	r2, #0
 800a556:	2300      	movs	r3, #0
 800a558:	1509      	asrs	r1, r1, #20
 800a55a:	2913      	cmp	r1, #19
 800a55c:	dc04      	bgt.n	800a568 <__ulp+0x2c>
 800a55e:	2080      	movs	r0, #128	; 0x80
 800a560:	0300      	lsls	r0, r0, #12
 800a562:	4108      	asrs	r0, r1
 800a564:	0003      	movs	r3, r0
 800a566:	e7f1      	b.n	800a54c <__ulp+0x10>
 800a568:	3914      	subs	r1, #20
 800a56a:	2001      	movs	r0, #1
 800a56c:	291e      	cmp	r1, #30
 800a56e:	dc02      	bgt.n	800a576 <__ulp+0x3a>
 800a570:	2080      	movs	r0, #128	; 0x80
 800a572:	0600      	lsls	r0, r0, #24
 800a574:	40c8      	lsrs	r0, r1
 800a576:	0002      	movs	r2, r0
 800a578:	e7e8      	b.n	800a54c <__ulp+0x10>
 800a57a:	46c0      	nop			; (mov r8, r8)
 800a57c:	7ff00000 	.word	0x7ff00000
 800a580:	fcc00000 	.word	0xfcc00000

0800a584 <__b2d>:
 800a584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a586:	0006      	movs	r6, r0
 800a588:	6903      	ldr	r3, [r0, #16]
 800a58a:	3614      	adds	r6, #20
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	18f3      	adds	r3, r6, r3
 800a590:	1f1d      	subs	r5, r3, #4
 800a592:	682c      	ldr	r4, [r5, #0]
 800a594:	000f      	movs	r7, r1
 800a596:	0020      	movs	r0, r4
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	f7ff fd43 	bl	800a024 <__hi0bits>
 800a59e:	2320      	movs	r3, #32
 800a5a0:	1a1b      	subs	r3, r3, r0
 800a5a2:	491f      	ldr	r1, [pc, #124]	; (800a620 <__b2d+0x9c>)
 800a5a4:	603b      	str	r3, [r7, #0]
 800a5a6:	280a      	cmp	r0, #10
 800a5a8:	dc16      	bgt.n	800a5d8 <__b2d+0x54>
 800a5aa:	230b      	movs	r3, #11
 800a5ac:	0027      	movs	r7, r4
 800a5ae:	1a1b      	subs	r3, r3, r0
 800a5b0:	40df      	lsrs	r7, r3
 800a5b2:	4339      	orrs	r1, r7
 800a5b4:	469c      	mov	ip, r3
 800a5b6:	000b      	movs	r3, r1
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	42ae      	cmp	r6, r5
 800a5bc:	d202      	bcs.n	800a5c4 <__b2d+0x40>
 800a5be:	9901      	ldr	r1, [sp, #4]
 800a5c0:	3908      	subs	r1, #8
 800a5c2:	6809      	ldr	r1, [r1, #0]
 800a5c4:	3015      	adds	r0, #21
 800a5c6:	4084      	lsls	r4, r0
 800a5c8:	4660      	mov	r0, ip
 800a5ca:	40c1      	lsrs	r1, r0
 800a5cc:	430c      	orrs	r4, r1
 800a5ce:	0022      	movs	r2, r4
 800a5d0:	0010      	movs	r0, r2
 800a5d2:	0019      	movs	r1, r3
 800a5d4:	b003      	add	sp, #12
 800a5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5d8:	2700      	movs	r7, #0
 800a5da:	42ae      	cmp	r6, r5
 800a5dc:	d202      	bcs.n	800a5e4 <__b2d+0x60>
 800a5de:	9d01      	ldr	r5, [sp, #4]
 800a5e0:	3d08      	subs	r5, #8
 800a5e2:	682f      	ldr	r7, [r5, #0]
 800a5e4:	230b      	movs	r3, #11
 800a5e6:	425b      	negs	r3, r3
 800a5e8:	469c      	mov	ip, r3
 800a5ea:	4484      	add	ip, r0
 800a5ec:	280b      	cmp	r0, #11
 800a5ee:	d013      	beq.n	800a618 <__b2d+0x94>
 800a5f0:	4663      	mov	r3, ip
 800a5f2:	2020      	movs	r0, #32
 800a5f4:	409c      	lsls	r4, r3
 800a5f6:	1ac0      	subs	r0, r0, r3
 800a5f8:	003b      	movs	r3, r7
 800a5fa:	40c3      	lsrs	r3, r0
 800a5fc:	431c      	orrs	r4, r3
 800a5fe:	4321      	orrs	r1, r4
 800a600:	000b      	movs	r3, r1
 800a602:	2100      	movs	r1, #0
 800a604:	42b5      	cmp	r5, r6
 800a606:	d901      	bls.n	800a60c <__b2d+0x88>
 800a608:	3d04      	subs	r5, #4
 800a60a:	6829      	ldr	r1, [r5, #0]
 800a60c:	4664      	mov	r4, ip
 800a60e:	40c1      	lsrs	r1, r0
 800a610:	40a7      	lsls	r7, r4
 800a612:	430f      	orrs	r7, r1
 800a614:	003a      	movs	r2, r7
 800a616:	e7db      	b.n	800a5d0 <__b2d+0x4c>
 800a618:	4321      	orrs	r1, r4
 800a61a:	000b      	movs	r3, r1
 800a61c:	e7fa      	b.n	800a614 <__b2d+0x90>
 800a61e:	46c0      	nop			; (mov r8, r8)
 800a620:	3ff00000 	.word	0x3ff00000

0800a624 <__d2b>:
 800a624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a626:	2101      	movs	r1, #1
 800a628:	0014      	movs	r4, r2
 800a62a:	001e      	movs	r6, r3
 800a62c:	9f08      	ldr	r7, [sp, #32]
 800a62e:	f7ff fc01 	bl	8009e34 <_Balloc>
 800a632:	1e05      	subs	r5, r0, #0
 800a634:	d105      	bne.n	800a642 <__d2b+0x1e>
 800a636:	0002      	movs	r2, r0
 800a638:	4b26      	ldr	r3, [pc, #152]	; (800a6d4 <__d2b+0xb0>)
 800a63a:	4927      	ldr	r1, [pc, #156]	; (800a6d8 <__d2b+0xb4>)
 800a63c:	4827      	ldr	r0, [pc, #156]	; (800a6dc <__d2b+0xb8>)
 800a63e:	f000 fa77 	bl	800ab30 <__assert_func>
 800a642:	0333      	lsls	r3, r6, #12
 800a644:	0076      	lsls	r6, r6, #1
 800a646:	0b1b      	lsrs	r3, r3, #12
 800a648:	0d76      	lsrs	r6, r6, #21
 800a64a:	d124      	bne.n	800a696 <__d2b+0x72>
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	2c00      	cmp	r4, #0
 800a650:	d027      	beq.n	800a6a2 <__d2b+0x7e>
 800a652:	4668      	mov	r0, sp
 800a654:	9400      	str	r4, [sp, #0]
 800a656:	f7ff fcff 	bl	800a058 <__lo0bits>
 800a65a:	9c00      	ldr	r4, [sp, #0]
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d01e      	beq.n	800a69e <__d2b+0x7a>
 800a660:	9b01      	ldr	r3, [sp, #4]
 800a662:	2120      	movs	r1, #32
 800a664:	001a      	movs	r2, r3
 800a666:	1a09      	subs	r1, r1, r0
 800a668:	408a      	lsls	r2, r1
 800a66a:	40c3      	lsrs	r3, r0
 800a66c:	4322      	orrs	r2, r4
 800a66e:	616a      	str	r2, [r5, #20]
 800a670:	9301      	str	r3, [sp, #4]
 800a672:	9c01      	ldr	r4, [sp, #4]
 800a674:	61ac      	str	r4, [r5, #24]
 800a676:	1e63      	subs	r3, r4, #1
 800a678:	419c      	sbcs	r4, r3
 800a67a:	3401      	adds	r4, #1
 800a67c:	612c      	str	r4, [r5, #16]
 800a67e:	2e00      	cmp	r6, #0
 800a680:	d018      	beq.n	800a6b4 <__d2b+0x90>
 800a682:	4b17      	ldr	r3, [pc, #92]	; (800a6e0 <__d2b+0xbc>)
 800a684:	18f6      	adds	r6, r6, r3
 800a686:	2335      	movs	r3, #53	; 0x35
 800a688:	1836      	adds	r6, r6, r0
 800a68a:	1a18      	subs	r0, r3, r0
 800a68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68e:	603e      	str	r6, [r7, #0]
 800a690:	6018      	str	r0, [r3, #0]
 800a692:	0028      	movs	r0, r5
 800a694:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a696:	2280      	movs	r2, #128	; 0x80
 800a698:	0352      	lsls	r2, r2, #13
 800a69a:	4313      	orrs	r3, r2
 800a69c:	e7d6      	b.n	800a64c <__d2b+0x28>
 800a69e:	616c      	str	r4, [r5, #20]
 800a6a0:	e7e7      	b.n	800a672 <__d2b+0x4e>
 800a6a2:	a801      	add	r0, sp, #4
 800a6a4:	f7ff fcd8 	bl	800a058 <__lo0bits>
 800a6a8:	2401      	movs	r4, #1
 800a6aa:	9b01      	ldr	r3, [sp, #4]
 800a6ac:	612c      	str	r4, [r5, #16]
 800a6ae:	616b      	str	r3, [r5, #20]
 800a6b0:	3020      	adds	r0, #32
 800a6b2:	e7e4      	b.n	800a67e <__d2b+0x5a>
 800a6b4:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <__d2b+0xc0>)
 800a6b6:	18c0      	adds	r0, r0, r3
 800a6b8:	4b0b      	ldr	r3, [pc, #44]	; (800a6e8 <__d2b+0xc4>)
 800a6ba:	6038      	str	r0, [r7, #0]
 800a6bc:	18e3      	adds	r3, r4, r3
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	18eb      	adds	r3, r5, r3
 800a6c2:	6958      	ldr	r0, [r3, #20]
 800a6c4:	f7ff fcae 	bl	800a024 <__hi0bits>
 800a6c8:	0164      	lsls	r4, r4, #5
 800a6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6cc:	1a24      	subs	r4, r4, r0
 800a6ce:	601c      	str	r4, [r3, #0]
 800a6d0:	e7df      	b.n	800a692 <__d2b+0x6e>
 800a6d2:	46c0      	nop			; (mov r8, r8)
 800a6d4:	0800bb37 	.word	0x0800bb37
 800a6d8:	0000030a 	.word	0x0000030a
 800a6dc:	0800bbc4 	.word	0x0800bbc4
 800a6e0:	fffffbcd 	.word	0xfffffbcd
 800a6e4:	fffffbce 	.word	0xfffffbce
 800a6e8:	3fffffff 	.word	0x3fffffff

0800a6ec <__ratio>:
 800a6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ee:	b087      	sub	sp, #28
 800a6f0:	000f      	movs	r7, r1
 800a6f2:	a904      	add	r1, sp, #16
 800a6f4:	0006      	movs	r6, r0
 800a6f6:	f7ff ff45 	bl	800a584 <__b2d>
 800a6fa:	9000      	str	r0, [sp, #0]
 800a6fc:	9101      	str	r1, [sp, #4]
 800a6fe:	9c00      	ldr	r4, [sp, #0]
 800a700:	9d01      	ldr	r5, [sp, #4]
 800a702:	0038      	movs	r0, r7
 800a704:	a905      	add	r1, sp, #20
 800a706:	f7ff ff3d 	bl	800a584 <__b2d>
 800a70a:	9002      	str	r0, [sp, #8]
 800a70c:	9103      	str	r1, [sp, #12]
 800a70e:	9a02      	ldr	r2, [sp, #8]
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	6931      	ldr	r1, [r6, #16]
 800a714:	6938      	ldr	r0, [r7, #16]
 800a716:	9e05      	ldr	r6, [sp, #20]
 800a718:	1a08      	subs	r0, r1, r0
 800a71a:	9904      	ldr	r1, [sp, #16]
 800a71c:	0140      	lsls	r0, r0, #5
 800a71e:	1b89      	subs	r1, r1, r6
 800a720:	1841      	adds	r1, r0, r1
 800a722:	0508      	lsls	r0, r1, #20
 800a724:	2900      	cmp	r1, #0
 800a726:	dd07      	ble.n	800a738 <__ratio+0x4c>
 800a728:	9901      	ldr	r1, [sp, #4]
 800a72a:	1845      	adds	r5, r0, r1
 800a72c:	0020      	movs	r0, r4
 800a72e:	0029      	movs	r1, r5
 800a730:	f7f7 f8a0 	bl	8001874 <__aeabi_ddiv>
 800a734:	b007      	add	sp, #28
 800a736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a738:	9903      	ldr	r1, [sp, #12]
 800a73a:	1a0b      	subs	r3, r1, r0
 800a73c:	e7f6      	b.n	800a72c <__ratio+0x40>

0800a73e <__copybits>:
 800a73e:	b570      	push	{r4, r5, r6, lr}
 800a740:	0014      	movs	r4, r2
 800a742:	0005      	movs	r5, r0
 800a744:	3901      	subs	r1, #1
 800a746:	6913      	ldr	r3, [r2, #16]
 800a748:	1149      	asrs	r1, r1, #5
 800a74a:	3101      	adds	r1, #1
 800a74c:	0089      	lsls	r1, r1, #2
 800a74e:	3414      	adds	r4, #20
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	1841      	adds	r1, r0, r1
 800a754:	18e3      	adds	r3, r4, r3
 800a756:	42a3      	cmp	r3, r4
 800a758:	d80d      	bhi.n	800a776 <__copybits+0x38>
 800a75a:	0014      	movs	r4, r2
 800a75c:	3411      	adds	r4, #17
 800a75e:	2500      	movs	r5, #0
 800a760:	429c      	cmp	r4, r3
 800a762:	d803      	bhi.n	800a76c <__copybits+0x2e>
 800a764:	1a9b      	subs	r3, r3, r2
 800a766:	3b11      	subs	r3, #17
 800a768:	089b      	lsrs	r3, r3, #2
 800a76a:	009d      	lsls	r5, r3, #2
 800a76c:	2300      	movs	r3, #0
 800a76e:	1940      	adds	r0, r0, r5
 800a770:	4281      	cmp	r1, r0
 800a772:	d803      	bhi.n	800a77c <__copybits+0x3e>
 800a774:	bd70      	pop	{r4, r5, r6, pc}
 800a776:	cc40      	ldmia	r4!, {r6}
 800a778:	c540      	stmia	r5!, {r6}
 800a77a:	e7ec      	b.n	800a756 <__copybits+0x18>
 800a77c:	c008      	stmia	r0!, {r3}
 800a77e:	e7f7      	b.n	800a770 <__copybits+0x32>

0800a780 <__any_on>:
 800a780:	0002      	movs	r2, r0
 800a782:	6900      	ldr	r0, [r0, #16]
 800a784:	b510      	push	{r4, lr}
 800a786:	3214      	adds	r2, #20
 800a788:	114b      	asrs	r3, r1, #5
 800a78a:	4298      	cmp	r0, r3
 800a78c:	db13      	blt.n	800a7b6 <__any_on+0x36>
 800a78e:	dd0c      	ble.n	800a7aa <__any_on+0x2a>
 800a790:	241f      	movs	r4, #31
 800a792:	0008      	movs	r0, r1
 800a794:	4020      	ands	r0, r4
 800a796:	4221      	tst	r1, r4
 800a798:	d007      	beq.n	800a7aa <__any_on+0x2a>
 800a79a:	0099      	lsls	r1, r3, #2
 800a79c:	588c      	ldr	r4, [r1, r2]
 800a79e:	0021      	movs	r1, r4
 800a7a0:	40c1      	lsrs	r1, r0
 800a7a2:	4081      	lsls	r1, r0
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	428c      	cmp	r4, r1
 800a7a8:	d104      	bne.n	800a7b4 <__any_on+0x34>
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	18d3      	adds	r3, r2, r3
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d803      	bhi.n	800a7ba <__any_on+0x3a>
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	bd10      	pop	{r4, pc}
 800a7b6:	0003      	movs	r3, r0
 800a7b8:	e7f7      	b.n	800a7aa <__any_on+0x2a>
 800a7ba:	3b04      	subs	r3, #4
 800a7bc:	6819      	ldr	r1, [r3, #0]
 800a7be:	2900      	cmp	r1, #0
 800a7c0:	d0f5      	beq.n	800a7ae <__any_on+0x2e>
 800a7c2:	2001      	movs	r0, #1
 800a7c4:	e7f6      	b.n	800a7b4 <__any_on+0x34>

0800a7c6 <_calloc_r>:
 800a7c6:	b570      	push	{r4, r5, r6, lr}
 800a7c8:	0c13      	lsrs	r3, r2, #16
 800a7ca:	0c0d      	lsrs	r5, r1, #16
 800a7cc:	d11e      	bne.n	800a80c <_calloc_r+0x46>
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10c      	bne.n	800a7ec <_calloc_r+0x26>
 800a7d2:	b289      	uxth	r1, r1
 800a7d4:	b294      	uxth	r4, r2
 800a7d6:	434c      	muls	r4, r1
 800a7d8:	0021      	movs	r1, r4
 800a7da:	f7fc faeb 	bl	8006db4 <_malloc_r>
 800a7de:	1e05      	subs	r5, r0, #0
 800a7e0:	d01b      	beq.n	800a81a <_calloc_r+0x54>
 800a7e2:	0022      	movs	r2, r4
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	f7fc fa70 	bl	8006cca <memset>
 800a7ea:	e016      	b.n	800a81a <_calloc_r+0x54>
 800a7ec:	1c1d      	adds	r5, r3, #0
 800a7ee:	1c0b      	adds	r3, r1, #0
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	b289      	uxth	r1, r1
 800a7f4:	b29c      	uxth	r4, r3
 800a7f6:	4351      	muls	r1, r2
 800a7f8:	b2ab      	uxth	r3, r5
 800a7fa:	4363      	muls	r3, r4
 800a7fc:	0c0c      	lsrs	r4, r1, #16
 800a7fe:	191c      	adds	r4, r3, r4
 800a800:	0c22      	lsrs	r2, r4, #16
 800a802:	d107      	bne.n	800a814 <_calloc_r+0x4e>
 800a804:	0424      	lsls	r4, r4, #16
 800a806:	b289      	uxth	r1, r1
 800a808:	430c      	orrs	r4, r1
 800a80a:	e7e5      	b.n	800a7d8 <_calloc_r+0x12>
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <_calloc_r+0x4e>
 800a810:	1c13      	adds	r3, r2, #0
 800a812:	e7ed      	b.n	800a7f0 <_calloc_r+0x2a>
 800a814:	230c      	movs	r3, #12
 800a816:	2500      	movs	r5, #0
 800a818:	6003      	str	r3, [r0, #0]
 800a81a:	0028      	movs	r0, r5
 800a81c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a820 <__ssputs_r>:
 800a820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a822:	688e      	ldr	r6, [r1, #8]
 800a824:	b085      	sub	sp, #20
 800a826:	0007      	movs	r7, r0
 800a828:	000c      	movs	r4, r1
 800a82a:	9203      	str	r2, [sp, #12]
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	429e      	cmp	r6, r3
 800a830:	d83c      	bhi.n	800a8ac <__ssputs_r+0x8c>
 800a832:	2390      	movs	r3, #144	; 0x90
 800a834:	898a      	ldrh	r2, [r1, #12]
 800a836:	00db      	lsls	r3, r3, #3
 800a838:	421a      	tst	r2, r3
 800a83a:	d034      	beq.n	800a8a6 <__ssputs_r+0x86>
 800a83c:	6909      	ldr	r1, [r1, #16]
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	6960      	ldr	r0, [r4, #20]
 800a842:	1a5b      	subs	r3, r3, r1
 800a844:	9302      	str	r3, [sp, #8]
 800a846:	2303      	movs	r3, #3
 800a848:	4343      	muls	r3, r0
 800a84a:	0fdd      	lsrs	r5, r3, #31
 800a84c:	18ed      	adds	r5, r5, r3
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	9802      	ldr	r0, [sp, #8]
 800a852:	3301      	adds	r3, #1
 800a854:	181b      	adds	r3, r3, r0
 800a856:	106d      	asrs	r5, r5, #1
 800a858:	42ab      	cmp	r3, r5
 800a85a:	d900      	bls.n	800a85e <__ssputs_r+0x3e>
 800a85c:	001d      	movs	r5, r3
 800a85e:	0553      	lsls	r3, r2, #21
 800a860:	d532      	bpl.n	800a8c8 <__ssputs_r+0xa8>
 800a862:	0029      	movs	r1, r5
 800a864:	0038      	movs	r0, r7
 800a866:	f7fc faa5 	bl	8006db4 <_malloc_r>
 800a86a:	1e06      	subs	r6, r0, #0
 800a86c:	d109      	bne.n	800a882 <__ssputs_r+0x62>
 800a86e:	230c      	movs	r3, #12
 800a870:	603b      	str	r3, [r7, #0]
 800a872:	2340      	movs	r3, #64	; 0x40
 800a874:	2001      	movs	r0, #1
 800a876:	89a2      	ldrh	r2, [r4, #12]
 800a878:	4240      	negs	r0, r0
 800a87a:	4313      	orrs	r3, r2
 800a87c:	81a3      	strh	r3, [r4, #12]
 800a87e:	b005      	add	sp, #20
 800a880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a882:	9a02      	ldr	r2, [sp, #8]
 800a884:	6921      	ldr	r1, [r4, #16]
 800a886:	f7fc fa17 	bl	8006cb8 <memcpy>
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	4a14      	ldr	r2, [pc, #80]	; (800a8e0 <__ssputs_r+0xc0>)
 800a88e:	401a      	ands	r2, r3
 800a890:	2380      	movs	r3, #128	; 0x80
 800a892:	4313      	orrs	r3, r2
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	9b02      	ldr	r3, [sp, #8]
 800a898:	6126      	str	r6, [r4, #16]
 800a89a:	18f6      	adds	r6, r6, r3
 800a89c:	6026      	str	r6, [r4, #0]
 800a89e:	6165      	str	r5, [r4, #20]
 800a8a0:	9e01      	ldr	r6, [sp, #4]
 800a8a2:	1aed      	subs	r5, r5, r3
 800a8a4:	60a5      	str	r5, [r4, #8]
 800a8a6:	9b01      	ldr	r3, [sp, #4]
 800a8a8:	429e      	cmp	r6, r3
 800a8aa:	d900      	bls.n	800a8ae <__ssputs_r+0x8e>
 800a8ac:	9e01      	ldr	r6, [sp, #4]
 800a8ae:	0032      	movs	r2, r6
 800a8b0:	9903      	ldr	r1, [sp, #12]
 800a8b2:	6820      	ldr	r0, [r4, #0]
 800a8b4:	f000 f96d 	bl	800ab92 <memmove>
 800a8b8:	68a3      	ldr	r3, [r4, #8]
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	1b9b      	subs	r3, r3, r6
 800a8be:	60a3      	str	r3, [r4, #8]
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	199e      	adds	r6, r3, r6
 800a8c4:	6026      	str	r6, [r4, #0]
 800a8c6:	e7da      	b.n	800a87e <__ssputs_r+0x5e>
 800a8c8:	002a      	movs	r2, r5
 800a8ca:	0038      	movs	r0, r7
 800a8cc:	f000 f974 	bl	800abb8 <_realloc_r>
 800a8d0:	1e06      	subs	r6, r0, #0
 800a8d2:	d1e0      	bne.n	800a896 <__ssputs_r+0x76>
 800a8d4:	0038      	movs	r0, r7
 800a8d6:	6921      	ldr	r1, [r4, #16]
 800a8d8:	f7fc fa00 	bl	8006cdc <_free_r>
 800a8dc:	e7c7      	b.n	800a86e <__ssputs_r+0x4e>
 800a8de:	46c0      	nop			; (mov r8, r8)
 800a8e0:	fffffb7f 	.word	0xfffffb7f

0800a8e4 <_svfiprintf_r>:
 800a8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8e6:	b0a1      	sub	sp, #132	; 0x84
 800a8e8:	9003      	str	r0, [sp, #12]
 800a8ea:	001d      	movs	r5, r3
 800a8ec:	898b      	ldrh	r3, [r1, #12]
 800a8ee:	000f      	movs	r7, r1
 800a8f0:	0016      	movs	r6, r2
 800a8f2:	061b      	lsls	r3, r3, #24
 800a8f4:	d511      	bpl.n	800a91a <_svfiprintf_r+0x36>
 800a8f6:	690b      	ldr	r3, [r1, #16]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10e      	bne.n	800a91a <_svfiprintf_r+0x36>
 800a8fc:	2140      	movs	r1, #64	; 0x40
 800a8fe:	f7fc fa59 	bl	8006db4 <_malloc_r>
 800a902:	6038      	str	r0, [r7, #0]
 800a904:	6138      	str	r0, [r7, #16]
 800a906:	2800      	cmp	r0, #0
 800a908:	d105      	bne.n	800a916 <_svfiprintf_r+0x32>
 800a90a:	230c      	movs	r3, #12
 800a90c:	9a03      	ldr	r2, [sp, #12]
 800a90e:	3801      	subs	r0, #1
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	b021      	add	sp, #132	; 0x84
 800a914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a916:	2340      	movs	r3, #64	; 0x40
 800a918:	617b      	str	r3, [r7, #20]
 800a91a:	2300      	movs	r3, #0
 800a91c:	ac08      	add	r4, sp, #32
 800a91e:	6163      	str	r3, [r4, #20]
 800a920:	3320      	adds	r3, #32
 800a922:	7663      	strb	r3, [r4, #25]
 800a924:	3310      	adds	r3, #16
 800a926:	76a3      	strb	r3, [r4, #26]
 800a928:	9507      	str	r5, [sp, #28]
 800a92a:	0035      	movs	r5, r6
 800a92c:	782b      	ldrb	r3, [r5, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <_svfiprintf_r+0x52>
 800a932:	2b25      	cmp	r3, #37	; 0x25
 800a934:	d147      	bne.n	800a9c6 <_svfiprintf_r+0xe2>
 800a936:	1bab      	subs	r3, r5, r6
 800a938:	9305      	str	r3, [sp, #20]
 800a93a:	42b5      	cmp	r5, r6
 800a93c:	d00c      	beq.n	800a958 <_svfiprintf_r+0x74>
 800a93e:	0032      	movs	r2, r6
 800a940:	0039      	movs	r1, r7
 800a942:	9803      	ldr	r0, [sp, #12]
 800a944:	f7ff ff6c 	bl	800a820 <__ssputs_r>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d100      	bne.n	800a94e <_svfiprintf_r+0x6a>
 800a94c:	e0ae      	b.n	800aaac <_svfiprintf_r+0x1c8>
 800a94e:	6962      	ldr	r2, [r4, #20]
 800a950:	9b05      	ldr	r3, [sp, #20]
 800a952:	4694      	mov	ip, r2
 800a954:	4463      	add	r3, ip
 800a956:	6163      	str	r3, [r4, #20]
 800a958:	782b      	ldrb	r3, [r5, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d100      	bne.n	800a960 <_svfiprintf_r+0x7c>
 800a95e:	e0a5      	b.n	800aaac <_svfiprintf_r+0x1c8>
 800a960:	2201      	movs	r2, #1
 800a962:	2300      	movs	r3, #0
 800a964:	4252      	negs	r2, r2
 800a966:	6062      	str	r2, [r4, #4]
 800a968:	a904      	add	r1, sp, #16
 800a96a:	3254      	adds	r2, #84	; 0x54
 800a96c:	1852      	adds	r2, r2, r1
 800a96e:	1c6e      	adds	r6, r5, #1
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	60e3      	str	r3, [r4, #12]
 800a974:	60a3      	str	r3, [r4, #8]
 800a976:	7013      	strb	r3, [r2, #0]
 800a978:	65a3      	str	r3, [r4, #88]	; 0x58
 800a97a:	2205      	movs	r2, #5
 800a97c:	7831      	ldrb	r1, [r6, #0]
 800a97e:	4854      	ldr	r0, [pc, #336]	; (800aad0 <_svfiprintf_r+0x1ec>)
 800a980:	f7ff fa3c 	bl	8009dfc <memchr>
 800a984:	1c75      	adds	r5, r6, #1
 800a986:	2800      	cmp	r0, #0
 800a988:	d11f      	bne.n	800a9ca <_svfiprintf_r+0xe6>
 800a98a:	6822      	ldr	r2, [r4, #0]
 800a98c:	06d3      	lsls	r3, r2, #27
 800a98e:	d504      	bpl.n	800a99a <_svfiprintf_r+0xb6>
 800a990:	2353      	movs	r3, #83	; 0x53
 800a992:	a904      	add	r1, sp, #16
 800a994:	185b      	adds	r3, r3, r1
 800a996:	2120      	movs	r1, #32
 800a998:	7019      	strb	r1, [r3, #0]
 800a99a:	0713      	lsls	r3, r2, #28
 800a99c:	d504      	bpl.n	800a9a8 <_svfiprintf_r+0xc4>
 800a99e:	2353      	movs	r3, #83	; 0x53
 800a9a0:	a904      	add	r1, sp, #16
 800a9a2:	185b      	adds	r3, r3, r1
 800a9a4:	212b      	movs	r1, #43	; 0x2b
 800a9a6:	7019      	strb	r1, [r3, #0]
 800a9a8:	7833      	ldrb	r3, [r6, #0]
 800a9aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ac:	d016      	beq.n	800a9dc <_svfiprintf_r+0xf8>
 800a9ae:	0035      	movs	r5, r6
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	200a      	movs	r0, #10
 800a9b4:	68e3      	ldr	r3, [r4, #12]
 800a9b6:	782a      	ldrb	r2, [r5, #0]
 800a9b8:	1c6e      	adds	r6, r5, #1
 800a9ba:	3a30      	subs	r2, #48	; 0x30
 800a9bc:	2a09      	cmp	r2, #9
 800a9be:	d94e      	bls.n	800aa5e <_svfiprintf_r+0x17a>
 800a9c0:	2900      	cmp	r1, #0
 800a9c2:	d111      	bne.n	800a9e8 <_svfiprintf_r+0x104>
 800a9c4:	e017      	b.n	800a9f6 <_svfiprintf_r+0x112>
 800a9c6:	3501      	adds	r5, #1
 800a9c8:	e7b0      	b.n	800a92c <_svfiprintf_r+0x48>
 800a9ca:	4b41      	ldr	r3, [pc, #260]	; (800aad0 <_svfiprintf_r+0x1ec>)
 800a9cc:	6822      	ldr	r2, [r4, #0]
 800a9ce:	1ac0      	subs	r0, r0, r3
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	4083      	lsls	r3, r0
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	002e      	movs	r6, r5
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	e7ce      	b.n	800a97a <_svfiprintf_r+0x96>
 800a9dc:	9b07      	ldr	r3, [sp, #28]
 800a9de:	1d19      	adds	r1, r3, #4
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	9107      	str	r1, [sp, #28]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	db01      	blt.n	800a9ec <_svfiprintf_r+0x108>
 800a9e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9ea:	e004      	b.n	800a9f6 <_svfiprintf_r+0x112>
 800a9ec:	425b      	negs	r3, r3
 800a9ee:	60e3      	str	r3, [r4, #12]
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	782b      	ldrb	r3, [r5, #0]
 800a9f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a9fa:	d10a      	bne.n	800aa12 <_svfiprintf_r+0x12e>
 800a9fc:	786b      	ldrb	r3, [r5, #1]
 800a9fe:	2b2a      	cmp	r3, #42	; 0x2a
 800aa00:	d135      	bne.n	800aa6e <_svfiprintf_r+0x18a>
 800aa02:	9b07      	ldr	r3, [sp, #28]
 800aa04:	3502      	adds	r5, #2
 800aa06:	1d1a      	adds	r2, r3, #4
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	9207      	str	r2, [sp, #28]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	db2b      	blt.n	800aa68 <_svfiprintf_r+0x184>
 800aa10:	9309      	str	r3, [sp, #36]	; 0x24
 800aa12:	4e30      	ldr	r6, [pc, #192]	; (800aad4 <_svfiprintf_r+0x1f0>)
 800aa14:	2203      	movs	r2, #3
 800aa16:	0030      	movs	r0, r6
 800aa18:	7829      	ldrb	r1, [r5, #0]
 800aa1a:	f7ff f9ef 	bl	8009dfc <memchr>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d006      	beq.n	800aa30 <_svfiprintf_r+0x14c>
 800aa22:	2340      	movs	r3, #64	; 0x40
 800aa24:	1b80      	subs	r0, r0, r6
 800aa26:	4083      	lsls	r3, r0
 800aa28:	6822      	ldr	r2, [r4, #0]
 800aa2a:	3501      	adds	r5, #1
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	6023      	str	r3, [r4, #0]
 800aa30:	7829      	ldrb	r1, [r5, #0]
 800aa32:	2206      	movs	r2, #6
 800aa34:	4828      	ldr	r0, [pc, #160]	; (800aad8 <_svfiprintf_r+0x1f4>)
 800aa36:	1c6e      	adds	r6, r5, #1
 800aa38:	7621      	strb	r1, [r4, #24]
 800aa3a:	f7ff f9df 	bl	8009dfc <memchr>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d03c      	beq.n	800aabc <_svfiprintf_r+0x1d8>
 800aa42:	4b26      	ldr	r3, [pc, #152]	; (800aadc <_svfiprintf_r+0x1f8>)
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d125      	bne.n	800aa94 <_svfiprintf_r+0x1b0>
 800aa48:	2207      	movs	r2, #7
 800aa4a:	9b07      	ldr	r3, [sp, #28]
 800aa4c:	3307      	adds	r3, #7
 800aa4e:	4393      	bics	r3, r2
 800aa50:	3308      	adds	r3, #8
 800aa52:	9307      	str	r3, [sp, #28]
 800aa54:	6963      	ldr	r3, [r4, #20]
 800aa56:	9a04      	ldr	r2, [sp, #16]
 800aa58:	189b      	adds	r3, r3, r2
 800aa5a:	6163      	str	r3, [r4, #20]
 800aa5c:	e765      	b.n	800a92a <_svfiprintf_r+0x46>
 800aa5e:	4343      	muls	r3, r0
 800aa60:	0035      	movs	r5, r6
 800aa62:	2101      	movs	r1, #1
 800aa64:	189b      	adds	r3, r3, r2
 800aa66:	e7a6      	b.n	800a9b6 <_svfiprintf_r+0xd2>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	425b      	negs	r3, r3
 800aa6c:	e7d0      	b.n	800aa10 <_svfiprintf_r+0x12c>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	200a      	movs	r0, #10
 800aa72:	001a      	movs	r2, r3
 800aa74:	3501      	adds	r5, #1
 800aa76:	6063      	str	r3, [r4, #4]
 800aa78:	7829      	ldrb	r1, [r5, #0]
 800aa7a:	1c6e      	adds	r6, r5, #1
 800aa7c:	3930      	subs	r1, #48	; 0x30
 800aa7e:	2909      	cmp	r1, #9
 800aa80:	d903      	bls.n	800aa8a <_svfiprintf_r+0x1a6>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d0c5      	beq.n	800aa12 <_svfiprintf_r+0x12e>
 800aa86:	9209      	str	r2, [sp, #36]	; 0x24
 800aa88:	e7c3      	b.n	800aa12 <_svfiprintf_r+0x12e>
 800aa8a:	4342      	muls	r2, r0
 800aa8c:	0035      	movs	r5, r6
 800aa8e:	2301      	movs	r3, #1
 800aa90:	1852      	adds	r2, r2, r1
 800aa92:	e7f1      	b.n	800aa78 <_svfiprintf_r+0x194>
 800aa94:	ab07      	add	r3, sp, #28
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	003a      	movs	r2, r7
 800aa9a:	0021      	movs	r1, r4
 800aa9c:	4b10      	ldr	r3, [pc, #64]	; (800aae0 <_svfiprintf_r+0x1fc>)
 800aa9e:	9803      	ldr	r0, [sp, #12]
 800aaa0:	f7fc faa8 	bl	8006ff4 <_printf_float>
 800aaa4:	9004      	str	r0, [sp, #16]
 800aaa6:	9b04      	ldr	r3, [sp, #16]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	d1d3      	bne.n	800aa54 <_svfiprintf_r+0x170>
 800aaac:	89bb      	ldrh	r3, [r7, #12]
 800aaae:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aab0:	065b      	lsls	r3, r3, #25
 800aab2:	d400      	bmi.n	800aab6 <_svfiprintf_r+0x1d2>
 800aab4:	e72d      	b.n	800a912 <_svfiprintf_r+0x2e>
 800aab6:	2001      	movs	r0, #1
 800aab8:	4240      	negs	r0, r0
 800aaba:	e72a      	b.n	800a912 <_svfiprintf_r+0x2e>
 800aabc:	ab07      	add	r3, sp, #28
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	003a      	movs	r2, r7
 800aac2:	0021      	movs	r1, r4
 800aac4:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <_svfiprintf_r+0x1fc>)
 800aac6:	9803      	ldr	r0, [sp, #12]
 800aac8:	f7fc fd46 	bl	8007558 <_printf_i>
 800aacc:	e7ea      	b.n	800aaa4 <_svfiprintf_r+0x1c0>
 800aace:	46c0      	nop			; (mov r8, r8)
 800aad0:	0800bd1c 	.word	0x0800bd1c
 800aad4:	0800bd22 	.word	0x0800bd22
 800aad8:	0800bd26 	.word	0x0800bd26
 800aadc:	08006ff5 	.word	0x08006ff5
 800aae0:	0800a821 	.word	0x0800a821

0800aae4 <nan>:
 800aae4:	2000      	movs	r0, #0
 800aae6:	4901      	ldr	r1, [pc, #4]	; (800aaec <nan+0x8>)
 800aae8:	4770      	bx	lr
 800aaea:	46c0      	nop			; (mov r8, r8)
 800aaec:	7ff80000 	.word	0x7ff80000

0800aaf0 <strncmp>:
 800aaf0:	b530      	push	{r4, r5, lr}
 800aaf2:	0005      	movs	r5, r0
 800aaf4:	1e10      	subs	r0, r2, #0
 800aaf6:	d008      	beq.n	800ab0a <strncmp+0x1a>
 800aaf8:	2400      	movs	r4, #0
 800aafa:	3a01      	subs	r2, #1
 800aafc:	5d2b      	ldrb	r3, [r5, r4]
 800aafe:	5d08      	ldrb	r0, [r1, r4]
 800ab00:	4283      	cmp	r3, r0
 800ab02:	d101      	bne.n	800ab08 <strncmp+0x18>
 800ab04:	4294      	cmp	r4, r2
 800ab06:	d101      	bne.n	800ab0c <strncmp+0x1c>
 800ab08:	1a18      	subs	r0, r3, r0
 800ab0a:	bd30      	pop	{r4, r5, pc}
 800ab0c:	3401      	adds	r4, #1
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f4      	bne.n	800aafc <strncmp+0xc>
 800ab12:	e7f9      	b.n	800ab08 <strncmp+0x18>

0800ab14 <__ascii_wctomb>:
 800ab14:	0003      	movs	r3, r0
 800ab16:	1e08      	subs	r0, r1, #0
 800ab18:	d005      	beq.n	800ab26 <__ascii_wctomb+0x12>
 800ab1a:	2aff      	cmp	r2, #255	; 0xff
 800ab1c:	d904      	bls.n	800ab28 <__ascii_wctomb+0x14>
 800ab1e:	228a      	movs	r2, #138	; 0x8a
 800ab20:	2001      	movs	r0, #1
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	4240      	negs	r0, r0
 800ab26:	4770      	bx	lr
 800ab28:	2001      	movs	r0, #1
 800ab2a:	700a      	strb	r2, [r1, #0]
 800ab2c:	e7fb      	b.n	800ab26 <__ascii_wctomb+0x12>
	...

0800ab30 <__assert_func>:
 800ab30:	b530      	push	{r4, r5, lr}
 800ab32:	0014      	movs	r4, r2
 800ab34:	001a      	movs	r2, r3
 800ab36:	4b09      	ldr	r3, [pc, #36]	; (800ab5c <__assert_func+0x2c>)
 800ab38:	0005      	movs	r5, r0
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	b085      	sub	sp, #20
 800ab3e:	68d8      	ldr	r0, [r3, #12]
 800ab40:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <__assert_func+0x30>)
 800ab42:	2c00      	cmp	r4, #0
 800ab44:	d101      	bne.n	800ab4a <__assert_func+0x1a>
 800ab46:	4b07      	ldr	r3, [pc, #28]	; (800ab64 <__assert_func+0x34>)
 800ab48:	001c      	movs	r4, r3
 800ab4a:	9301      	str	r3, [sp, #4]
 800ab4c:	9100      	str	r1, [sp, #0]
 800ab4e:	002b      	movs	r3, r5
 800ab50:	4905      	ldr	r1, [pc, #20]	; (800ab68 <__assert_func+0x38>)
 800ab52:	9402      	str	r4, [sp, #8]
 800ab54:	f000 f80a 	bl	800ab6c <fiprintf>
 800ab58:	f000 fa8c 	bl	800b074 <abort>
 800ab5c:	2000000c 	.word	0x2000000c
 800ab60:	0800bd2d 	.word	0x0800bd2d
 800ab64:	0800bd68 	.word	0x0800bd68
 800ab68:	0800bd3a 	.word	0x0800bd3a

0800ab6c <fiprintf>:
 800ab6c:	b40e      	push	{r1, r2, r3}
 800ab6e:	b503      	push	{r0, r1, lr}
 800ab70:	0001      	movs	r1, r0
 800ab72:	ab03      	add	r3, sp, #12
 800ab74:	4804      	ldr	r0, [pc, #16]	; (800ab88 <fiprintf+0x1c>)
 800ab76:	cb04      	ldmia	r3!, {r2}
 800ab78:	6800      	ldr	r0, [r0, #0]
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	f000 f872 	bl	800ac64 <_vfiprintf_r>
 800ab80:	b002      	add	sp, #8
 800ab82:	bc08      	pop	{r3}
 800ab84:	b003      	add	sp, #12
 800ab86:	4718      	bx	r3
 800ab88:	2000000c 	.word	0x2000000c

0800ab8c <__retarget_lock_init_recursive>:
 800ab8c:	4770      	bx	lr

0800ab8e <__retarget_lock_acquire_recursive>:
 800ab8e:	4770      	bx	lr

0800ab90 <__retarget_lock_release_recursive>:
 800ab90:	4770      	bx	lr

0800ab92 <memmove>:
 800ab92:	b510      	push	{r4, lr}
 800ab94:	4288      	cmp	r0, r1
 800ab96:	d902      	bls.n	800ab9e <memmove+0xc>
 800ab98:	188b      	adds	r3, r1, r2
 800ab9a:	4298      	cmp	r0, r3
 800ab9c:	d303      	bcc.n	800aba6 <memmove+0x14>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e007      	b.n	800abb2 <memmove+0x20>
 800aba2:	5c8b      	ldrb	r3, [r1, r2]
 800aba4:	5483      	strb	r3, [r0, r2]
 800aba6:	3a01      	subs	r2, #1
 800aba8:	d2fb      	bcs.n	800aba2 <memmove+0x10>
 800abaa:	bd10      	pop	{r4, pc}
 800abac:	5ccc      	ldrb	r4, [r1, r3]
 800abae:	54c4      	strb	r4, [r0, r3]
 800abb0:	3301      	adds	r3, #1
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d1fa      	bne.n	800abac <memmove+0x1a>
 800abb6:	e7f8      	b.n	800abaa <memmove+0x18>

0800abb8 <_realloc_r>:
 800abb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abba:	0007      	movs	r7, r0
 800abbc:	000e      	movs	r6, r1
 800abbe:	0014      	movs	r4, r2
 800abc0:	2900      	cmp	r1, #0
 800abc2:	d105      	bne.n	800abd0 <_realloc_r+0x18>
 800abc4:	0011      	movs	r1, r2
 800abc6:	f7fc f8f5 	bl	8006db4 <_malloc_r>
 800abca:	0005      	movs	r5, r0
 800abcc:	0028      	movs	r0, r5
 800abce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abd0:	2a00      	cmp	r2, #0
 800abd2:	d103      	bne.n	800abdc <_realloc_r+0x24>
 800abd4:	f7fc f882 	bl	8006cdc <_free_r>
 800abd8:	0025      	movs	r5, r4
 800abda:	e7f7      	b.n	800abcc <_realloc_r+0x14>
 800abdc:	f000 fc8c 	bl	800b4f8 <_malloc_usable_size_r>
 800abe0:	9001      	str	r0, [sp, #4]
 800abe2:	4284      	cmp	r4, r0
 800abe4:	d803      	bhi.n	800abee <_realloc_r+0x36>
 800abe6:	0035      	movs	r5, r6
 800abe8:	0843      	lsrs	r3, r0, #1
 800abea:	42a3      	cmp	r3, r4
 800abec:	d3ee      	bcc.n	800abcc <_realloc_r+0x14>
 800abee:	0021      	movs	r1, r4
 800abf0:	0038      	movs	r0, r7
 800abf2:	f7fc f8df 	bl	8006db4 <_malloc_r>
 800abf6:	1e05      	subs	r5, r0, #0
 800abf8:	d0e8      	beq.n	800abcc <_realloc_r+0x14>
 800abfa:	9b01      	ldr	r3, [sp, #4]
 800abfc:	0022      	movs	r2, r4
 800abfe:	429c      	cmp	r4, r3
 800ac00:	d900      	bls.n	800ac04 <_realloc_r+0x4c>
 800ac02:	001a      	movs	r2, r3
 800ac04:	0031      	movs	r1, r6
 800ac06:	0028      	movs	r0, r5
 800ac08:	f7fc f856 	bl	8006cb8 <memcpy>
 800ac0c:	0031      	movs	r1, r6
 800ac0e:	0038      	movs	r0, r7
 800ac10:	f7fc f864 	bl	8006cdc <_free_r>
 800ac14:	e7da      	b.n	800abcc <_realloc_r+0x14>

0800ac16 <__sfputc_r>:
 800ac16:	6893      	ldr	r3, [r2, #8]
 800ac18:	b510      	push	{r4, lr}
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	6093      	str	r3, [r2, #8]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da04      	bge.n	800ac2c <__sfputc_r+0x16>
 800ac22:	6994      	ldr	r4, [r2, #24]
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	db07      	blt.n	800ac38 <__sfputc_r+0x22>
 800ac28:	290a      	cmp	r1, #10
 800ac2a:	d005      	beq.n	800ac38 <__sfputc_r+0x22>
 800ac2c:	6813      	ldr	r3, [r2, #0]
 800ac2e:	1c58      	adds	r0, r3, #1
 800ac30:	6010      	str	r0, [r2, #0]
 800ac32:	7019      	strb	r1, [r3, #0]
 800ac34:	0008      	movs	r0, r1
 800ac36:	bd10      	pop	{r4, pc}
 800ac38:	f000 f94e 	bl	800aed8 <__swbuf_r>
 800ac3c:	0001      	movs	r1, r0
 800ac3e:	e7f9      	b.n	800ac34 <__sfputc_r+0x1e>

0800ac40 <__sfputs_r>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	0006      	movs	r6, r0
 800ac44:	000f      	movs	r7, r1
 800ac46:	0014      	movs	r4, r2
 800ac48:	18d5      	adds	r5, r2, r3
 800ac4a:	42ac      	cmp	r4, r5
 800ac4c:	d101      	bne.n	800ac52 <__sfputs_r+0x12>
 800ac4e:	2000      	movs	r0, #0
 800ac50:	e007      	b.n	800ac62 <__sfputs_r+0x22>
 800ac52:	7821      	ldrb	r1, [r4, #0]
 800ac54:	003a      	movs	r2, r7
 800ac56:	0030      	movs	r0, r6
 800ac58:	f7ff ffdd 	bl	800ac16 <__sfputc_r>
 800ac5c:	3401      	adds	r4, #1
 800ac5e:	1c43      	adds	r3, r0, #1
 800ac60:	d1f3      	bne.n	800ac4a <__sfputs_r+0xa>
 800ac62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac64 <_vfiprintf_r>:
 800ac64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac66:	b0a1      	sub	sp, #132	; 0x84
 800ac68:	0006      	movs	r6, r0
 800ac6a:	000c      	movs	r4, r1
 800ac6c:	001f      	movs	r7, r3
 800ac6e:	9203      	str	r2, [sp, #12]
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d004      	beq.n	800ac7e <_vfiprintf_r+0x1a>
 800ac74:	6983      	ldr	r3, [r0, #24]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <_vfiprintf_r+0x1a>
 800ac7a:	f000 fb31 	bl	800b2e0 <__sinit>
 800ac7e:	4b8e      	ldr	r3, [pc, #568]	; (800aeb8 <_vfiprintf_r+0x254>)
 800ac80:	429c      	cmp	r4, r3
 800ac82:	d11c      	bne.n	800acbe <_vfiprintf_r+0x5a>
 800ac84:	6874      	ldr	r4, [r6, #4]
 800ac86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac88:	07db      	lsls	r3, r3, #31
 800ac8a:	d405      	bmi.n	800ac98 <_vfiprintf_r+0x34>
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	059b      	lsls	r3, r3, #22
 800ac90:	d402      	bmi.n	800ac98 <_vfiprintf_r+0x34>
 800ac92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac94:	f7ff ff7b 	bl	800ab8e <__retarget_lock_acquire_recursive>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	071b      	lsls	r3, r3, #28
 800ac9c:	d502      	bpl.n	800aca4 <_vfiprintf_r+0x40>
 800ac9e:	6923      	ldr	r3, [r4, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d11d      	bne.n	800ace0 <_vfiprintf_r+0x7c>
 800aca4:	0021      	movs	r1, r4
 800aca6:	0030      	movs	r0, r6
 800aca8:	f000 f96c 	bl	800af84 <__swsetup_r>
 800acac:	2800      	cmp	r0, #0
 800acae:	d017      	beq.n	800ace0 <_vfiprintf_r+0x7c>
 800acb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acb2:	07db      	lsls	r3, r3, #31
 800acb4:	d50d      	bpl.n	800acd2 <_vfiprintf_r+0x6e>
 800acb6:	2001      	movs	r0, #1
 800acb8:	4240      	negs	r0, r0
 800acba:	b021      	add	sp, #132	; 0x84
 800acbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acbe:	4b7f      	ldr	r3, [pc, #508]	; (800aebc <_vfiprintf_r+0x258>)
 800acc0:	429c      	cmp	r4, r3
 800acc2:	d101      	bne.n	800acc8 <_vfiprintf_r+0x64>
 800acc4:	68b4      	ldr	r4, [r6, #8]
 800acc6:	e7de      	b.n	800ac86 <_vfiprintf_r+0x22>
 800acc8:	4b7d      	ldr	r3, [pc, #500]	; (800aec0 <_vfiprintf_r+0x25c>)
 800acca:	429c      	cmp	r4, r3
 800accc:	d1db      	bne.n	800ac86 <_vfiprintf_r+0x22>
 800acce:	68f4      	ldr	r4, [r6, #12]
 800acd0:	e7d9      	b.n	800ac86 <_vfiprintf_r+0x22>
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	059b      	lsls	r3, r3, #22
 800acd6:	d4ee      	bmi.n	800acb6 <_vfiprintf_r+0x52>
 800acd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acda:	f7ff ff59 	bl	800ab90 <__retarget_lock_release_recursive>
 800acde:	e7ea      	b.n	800acb6 <_vfiprintf_r+0x52>
 800ace0:	2300      	movs	r3, #0
 800ace2:	ad08      	add	r5, sp, #32
 800ace4:	616b      	str	r3, [r5, #20]
 800ace6:	3320      	adds	r3, #32
 800ace8:	766b      	strb	r3, [r5, #25]
 800acea:	3310      	adds	r3, #16
 800acec:	76ab      	strb	r3, [r5, #26]
 800acee:	9707      	str	r7, [sp, #28]
 800acf0:	9f03      	ldr	r7, [sp, #12]
 800acf2:	783b      	ldrb	r3, [r7, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <_vfiprintf_r+0x98>
 800acf8:	2b25      	cmp	r3, #37	; 0x25
 800acfa:	d14e      	bne.n	800ad9a <_vfiprintf_r+0x136>
 800acfc:	9b03      	ldr	r3, [sp, #12]
 800acfe:	1afb      	subs	r3, r7, r3
 800ad00:	9305      	str	r3, [sp, #20]
 800ad02:	9b03      	ldr	r3, [sp, #12]
 800ad04:	429f      	cmp	r7, r3
 800ad06:	d00d      	beq.n	800ad24 <_vfiprintf_r+0xc0>
 800ad08:	9b05      	ldr	r3, [sp, #20]
 800ad0a:	0021      	movs	r1, r4
 800ad0c:	0030      	movs	r0, r6
 800ad0e:	9a03      	ldr	r2, [sp, #12]
 800ad10:	f7ff ff96 	bl	800ac40 <__sfputs_r>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d100      	bne.n	800ad1a <_vfiprintf_r+0xb6>
 800ad18:	e0b5      	b.n	800ae86 <_vfiprintf_r+0x222>
 800ad1a:	696a      	ldr	r2, [r5, #20]
 800ad1c:	9b05      	ldr	r3, [sp, #20]
 800ad1e:	4694      	mov	ip, r2
 800ad20:	4463      	add	r3, ip
 800ad22:	616b      	str	r3, [r5, #20]
 800ad24:	783b      	ldrb	r3, [r7, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d100      	bne.n	800ad2c <_vfiprintf_r+0xc8>
 800ad2a:	e0ac      	b.n	800ae86 <_vfiprintf_r+0x222>
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	1c7b      	adds	r3, r7, #1
 800ad30:	9303      	str	r3, [sp, #12]
 800ad32:	2300      	movs	r3, #0
 800ad34:	4252      	negs	r2, r2
 800ad36:	606a      	str	r2, [r5, #4]
 800ad38:	a904      	add	r1, sp, #16
 800ad3a:	3254      	adds	r2, #84	; 0x54
 800ad3c:	1852      	adds	r2, r2, r1
 800ad3e:	602b      	str	r3, [r5, #0]
 800ad40:	60eb      	str	r3, [r5, #12]
 800ad42:	60ab      	str	r3, [r5, #8]
 800ad44:	7013      	strb	r3, [r2, #0]
 800ad46:	65ab      	str	r3, [r5, #88]	; 0x58
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	2205      	movs	r2, #5
 800ad4c:	7819      	ldrb	r1, [r3, #0]
 800ad4e:	485d      	ldr	r0, [pc, #372]	; (800aec4 <_vfiprintf_r+0x260>)
 800ad50:	f7ff f854 	bl	8009dfc <memchr>
 800ad54:	9b03      	ldr	r3, [sp, #12]
 800ad56:	1c5f      	adds	r7, r3, #1
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d120      	bne.n	800ad9e <_vfiprintf_r+0x13a>
 800ad5c:	682a      	ldr	r2, [r5, #0]
 800ad5e:	06d3      	lsls	r3, r2, #27
 800ad60:	d504      	bpl.n	800ad6c <_vfiprintf_r+0x108>
 800ad62:	2353      	movs	r3, #83	; 0x53
 800ad64:	a904      	add	r1, sp, #16
 800ad66:	185b      	adds	r3, r3, r1
 800ad68:	2120      	movs	r1, #32
 800ad6a:	7019      	strb	r1, [r3, #0]
 800ad6c:	0713      	lsls	r3, r2, #28
 800ad6e:	d504      	bpl.n	800ad7a <_vfiprintf_r+0x116>
 800ad70:	2353      	movs	r3, #83	; 0x53
 800ad72:	a904      	add	r1, sp, #16
 800ad74:	185b      	adds	r3, r3, r1
 800ad76:	212b      	movs	r1, #43	; 0x2b
 800ad78:	7019      	strb	r1, [r3, #0]
 800ad7a:	9b03      	ldr	r3, [sp, #12]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad80:	d016      	beq.n	800adb0 <_vfiprintf_r+0x14c>
 800ad82:	2100      	movs	r1, #0
 800ad84:	68eb      	ldr	r3, [r5, #12]
 800ad86:	9f03      	ldr	r7, [sp, #12]
 800ad88:	783a      	ldrb	r2, [r7, #0]
 800ad8a:	1c78      	adds	r0, r7, #1
 800ad8c:	3a30      	subs	r2, #48	; 0x30
 800ad8e:	4684      	mov	ip, r0
 800ad90:	2a09      	cmp	r2, #9
 800ad92:	d94f      	bls.n	800ae34 <_vfiprintf_r+0x1d0>
 800ad94:	2900      	cmp	r1, #0
 800ad96:	d111      	bne.n	800adbc <_vfiprintf_r+0x158>
 800ad98:	e017      	b.n	800adca <_vfiprintf_r+0x166>
 800ad9a:	3701      	adds	r7, #1
 800ad9c:	e7a9      	b.n	800acf2 <_vfiprintf_r+0x8e>
 800ad9e:	4b49      	ldr	r3, [pc, #292]	; (800aec4 <_vfiprintf_r+0x260>)
 800ada0:	682a      	ldr	r2, [r5, #0]
 800ada2:	1ac0      	subs	r0, r0, r3
 800ada4:	2301      	movs	r3, #1
 800ada6:	4083      	lsls	r3, r0
 800ada8:	4313      	orrs	r3, r2
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	9703      	str	r7, [sp, #12]
 800adae:	e7cb      	b.n	800ad48 <_vfiprintf_r+0xe4>
 800adb0:	9b07      	ldr	r3, [sp, #28]
 800adb2:	1d19      	adds	r1, r3, #4
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	9107      	str	r1, [sp, #28]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	db01      	blt.n	800adc0 <_vfiprintf_r+0x15c>
 800adbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800adbe:	e004      	b.n	800adca <_vfiprintf_r+0x166>
 800adc0:	425b      	negs	r3, r3
 800adc2:	60eb      	str	r3, [r5, #12]
 800adc4:	2302      	movs	r3, #2
 800adc6:	4313      	orrs	r3, r2
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	783b      	ldrb	r3, [r7, #0]
 800adcc:	2b2e      	cmp	r3, #46	; 0x2e
 800adce:	d10a      	bne.n	800ade6 <_vfiprintf_r+0x182>
 800add0:	787b      	ldrb	r3, [r7, #1]
 800add2:	2b2a      	cmp	r3, #42	; 0x2a
 800add4:	d137      	bne.n	800ae46 <_vfiprintf_r+0x1e2>
 800add6:	9b07      	ldr	r3, [sp, #28]
 800add8:	3702      	adds	r7, #2
 800adda:	1d1a      	adds	r2, r3, #4
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	9207      	str	r2, [sp, #28]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	db2d      	blt.n	800ae40 <_vfiprintf_r+0x1dc>
 800ade4:	9309      	str	r3, [sp, #36]	; 0x24
 800ade6:	2203      	movs	r2, #3
 800ade8:	7839      	ldrb	r1, [r7, #0]
 800adea:	4837      	ldr	r0, [pc, #220]	; (800aec8 <_vfiprintf_r+0x264>)
 800adec:	f7ff f806 	bl	8009dfc <memchr>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d007      	beq.n	800ae04 <_vfiprintf_r+0x1a0>
 800adf4:	4b34      	ldr	r3, [pc, #208]	; (800aec8 <_vfiprintf_r+0x264>)
 800adf6:	682a      	ldr	r2, [r5, #0]
 800adf8:	1ac0      	subs	r0, r0, r3
 800adfa:	2340      	movs	r3, #64	; 0x40
 800adfc:	4083      	lsls	r3, r0
 800adfe:	4313      	orrs	r3, r2
 800ae00:	3701      	adds	r7, #1
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	7839      	ldrb	r1, [r7, #0]
 800ae06:	1c7b      	adds	r3, r7, #1
 800ae08:	2206      	movs	r2, #6
 800ae0a:	4830      	ldr	r0, [pc, #192]	; (800aecc <_vfiprintf_r+0x268>)
 800ae0c:	9303      	str	r3, [sp, #12]
 800ae0e:	7629      	strb	r1, [r5, #24]
 800ae10:	f7fe fff4 	bl	8009dfc <memchr>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d045      	beq.n	800aea4 <_vfiprintf_r+0x240>
 800ae18:	4b2d      	ldr	r3, [pc, #180]	; (800aed0 <_vfiprintf_r+0x26c>)
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d127      	bne.n	800ae6e <_vfiprintf_r+0x20a>
 800ae1e:	2207      	movs	r2, #7
 800ae20:	9b07      	ldr	r3, [sp, #28]
 800ae22:	3307      	adds	r3, #7
 800ae24:	4393      	bics	r3, r2
 800ae26:	3308      	adds	r3, #8
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	696b      	ldr	r3, [r5, #20]
 800ae2c:	9a04      	ldr	r2, [sp, #16]
 800ae2e:	189b      	adds	r3, r3, r2
 800ae30:	616b      	str	r3, [r5, #20]
 800ae32:	e75d      	b.n	800acf0 <_vfiprintf_r+0x8c>
 800ae34:	210a      	movs	r1, #10
 800ae36:	434b      	muls	r3, r1
 800ae38:	4667      	mov	r7, ip
 800ae3a:	189b      	adds	r3, r3, r2
 800ae3c:	3909      	subs	r1, #9
 800ae3e:	e7a3      	b.n	800ad88 <_vfiprintf_r+0x124>
 800ae40:	2301      	movs	r3, #1
 800ae42:	425b      	negs	r3, r3
 800ae44:	e7ce      	b.n	800ade4 <_vfiprintf_r+0x180>
 800ae46:	2300      	movs	r3, #0
 800ae48:	001a      	movs	r2, r3
 800ae4a:	3701      	adds	r7, #1
 800ae4c:	606b      	str	r3, [r5, #4]
 800ae4e:	7839      	ldrb	r1, [r7, #0]
 800ae50:	1c78      	adds	r0, r7, #1
 800ae52:	3930      	subs	r1, #48	; 0x30
 800ae54:	4684      	mov	ip, r0
 800ae56:	2909      	cmp	r1, #9
 800ae58:	d903      	bls.n	800ae62 <_vfiprintf_r+0x1fe>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d0c3      	beq.n	800ade6 <_vfiprintf_r+0x182>
 800ae5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae60:	e7c1      	b.n	800ade6 <_vfiprintf_r+0x182>
 800ae62:	230a      	movs	r3, #10
 800ae64:	435a      	muls	r2, r3
 800ae66:	4667      	mov	r7, ip
 800ae68:	1852      	adds	r2, r2, r1
 800ae6a:	3b09      	subs	r3, #9
 800ae6c:	e7ef      	b.n	800ae4e <_vfiprintf_r+0x1ea>
 800ae6e:	ab07      	add	r3, sp, #28
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	0022      	movs	r2, r4
 800ae74:	0029      	movs	r1, r5
 800ae76:	0030      	movs	r0, r6
 800ae78:	4b16      	ldr	r3, [pc, #88]	; (800aed4 <_vfiprintf_r+0x270>)
 800ae7a:	f7fc f8bb 	bl	8006ff4 <_printf_float>
 800ae7e:	9004      	str	r0, [sp, #16]
 800ae80:	9b04      	ldr	r3, [sp, #16]
 800ae82:	3301      	adds	r3, #1
 800ae84:	d1d1      	bne.n	800ae2a <_vfiprintf_r+0x1c6>
 800ae86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae88:	07db      	lsls	r3, r3, #31
 800ae8a:	d405      	bmi.n	800ae98 <_vfiprintf_r+0x234>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	059b      	lsls	r3, r3, #22
 800ae90:	d402      	bmi.n	800ae98 <_vfiprintf_r+0x234>
 800ae92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae94:	f7ff fe7c 	bl	800ab90 <__retarget_lock_release_recursive>
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	065b      	lsls	r3, r3, #25
 800ae9c:	d500      	bpl.n	800aea0 <_vfiprintf_r+0x23c>
 800ae9e:	e70a      	b.n	800acb6 <_vfiprintf_r+0x52>
 800aea0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aea2:	e70a      	b.n	800acba <_vfiprintf_r+0x56>
 800aea4:	ab07      	add	r3, sp, #28
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	0022      	movs	r2, r4
 800aeaa:	0029      	movs	r1, r5
 800aeac:	0030      	movs	r0, r6
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <_vfiprintf_r+0x270>)
 800aeb0:	f7fc fb52 	bl	8007558 <_printf_i>
 800aeb4:	e7e3      	b.n	800ae7e <_vfiprintf_r+0x21a>
 800aeb6:	46c0      	nop			; (mov r8, r8)
 800aeb8:	0800bd8c 	.word	0x0800bd8c
 800aebc:	0800bdac 	.word	0x0800bdac
 800aec0:	0800bd6c 	.word	0x0800bd6c
 800aec4:	0800bd1c 	.word	0x0800bd1c
 800aec8:	0800bd22 	.word	0x0800bd22
 800aecc:	0800bd26 	.word	0x0800bd26
 800aed0:	08006ff5 	.word	0x08006ff5
 800aed4:	0800ac41 	.word	0x0800ac41

0800aed8 <__swbuf_r>:
 800aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeda:	0005      	movs	r5, r0
 800aedc:	000e      	movs	r6, r1
 800aede:	0014      	movs	r4, r2
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d004      	beq.n	800aeee <__swbuf_r+0x16>
 800aee4:	6983      	ldr	r3, [r0, #24]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <__swbuf_r+0x16>
 800aeea:	f000 f9f9 	bl	800b2e0 <__sinit>
 800aeee:	4b22      	ldr	r3, [pc, #136]	; (800af78 <__swbuf_r+0xa0>)
 800aef0:	429c      	cmp	r4, r3
 800aef2:	d12e      	bne.n	800af52 <__swbuf_r+0x7a>
 800aef4:	686c      	ldr	r4, [r5, #4]
 800aef6:	69a3      	ldr	r3, [r4, #24]
 800aef8:	60a3      	str	r3, [r4, #8]
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	071b      	lsls	r3, r3, #28
 800aefe:	d532      	bpl.n	800af66 <__swbuf_r+0x8e>
 800af00:	6923      	ldr	r3, [r4, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d02f      	beq.n	800af66 <__swbuf_r+0x8e>
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	6922      	ldr	r2, [r4, #16]
 800af0a:	b2f7      	uxtb	r7, r6
 800af0c:	1a98      	subs	r0, r3, r2
 800af0e:	6963      	ldr	r3, [r4, #20]
 800af10:	b2f6      	uxtb	r6, r6
 800af12:	4283      	cmp	r3, r0
 800af14:	dc05      	bgt.n	800af22 <__swbuf_r+0x4a>
 800af16:	0021      	movs	r1, r4
 800af18:	0028      	movs	r0, r5
 800af1a:	f000 f93f 	bl	800b19c <_fflush_r>
 800af1e:	2800      	cmp	r0, #0
 800af20:	d127      	bne.n	800af72 <__swbuf_r+0x9a>
 800af22:	68a3      	ldr	r3, [r4, #8]
 800af24:	3001      	adds	r0, #1
 800af26:	3b01      	subs	r3, #1
 800af28:	60a3      	str	r3, [r4, #8]
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	1c5a      	adds	r2, r3, #1
 800af2e:	6022      	str	r2, [r4, #0]
 800af30:	701f      	strb	r7, [r3, #0]
 800af32:	6963      	ldr	r3, [r4, #20]
 800af34:	4283      	cmp	r3, r0
 800af36:	d004      	beq.n	800af42 <__swbuf_r+0x6a>
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	07db      	lsls	r3, r3, #31
 800af3c:	d507      	bpl.n	800af4e <__swbuf_r+0x76>
 800af3e:	2e0a      	cmp	r6, #10
 800af40:	d105      	bne.n	800af4e <__swbuf_r+0x76>
 800af42:	0021      	movs	r1, r4
 800af44:	0028      	movs	r0, r5
 800af46:	f000 f929 	bl	800b19c <_fflush_r>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d111      	bne.n	800af72 <__swbuf_r+0x9a>
 800af4e:	0030      	movs	r0, r6
 800af50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af52:	4b0a      	ldr	r3, [pc, #40]	; (800af7c <__swbuf_r+0xa4>)
 800af54:	429c      	cmp	r4, r3
 800af56:	d101      	bne.n	800af5c <__swbuf_r+0x84>
 800af58:	68ac      	ldr	r4, [r5, #8]
 800af5a:	e7cc      	b.n	800aef6 <__swbuf_r+0x1e>
 800af5c:	4b08      	ldr	r3, [pc, #32]	; (800af80 <__swbuf_r+0xa8>)
 800af5e:	429c      	cmp	r4, r3
 800af60:	d1c9      	bne.n	800aef6 <__swbuf_r+0x1e>
 800af62:	68ec      	ldr	r4, [r5, #12]
 800af64:	e7c7      	b.n	800aef6 <__swbuf_r+0x1e>
 800af66:	0021      	movs	r1, r4
 800af68:	0028      	movs	r0, r5
 800af6a:	f000 f80b 	bl	800af84 <__swsetup_r>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d0c9      	beq.n	800af06 <__swbuf_r+0x2e>
 800af72:	2601      	movs	r6, #1
 800af74:	4276      	negs	r6, r6
 800af76:	e7ea      	b.n	800af4e <__swbuf_r+0x76>
 800af78:	0800bd8c 	.word	0x0800bd8c
 800af7c:	0800bdac 	.word	0x0800bdac
 800af80:	0800bd6c 	.word	0x0800bd6c

0800af84 <__swsetup_r>:
 800af84:	4b37      	ldr	r3, [pc, #220]	; (800b064 <__swsetup_r+0xe0>)
 800af86:	b570      	push	{r4, r5, r6, lr}
 800af88:	681d      	ldr	r5, [r3, #0]
 800af8a:	0006      	movs	r6, r0
 800af8c:	000c      	movs	r4, r1
 800af8e:	2d00      	cmp	r5, #0
 800af90:	d005      	beq.n	800af9e <__swsetup_r+0x1a>
 800af92:	69ab      	ldr	r3, [r5, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <__swsetup_r+0x1a>
 800af98:	0028      	movs	r0, r5
 800af9a:	f000 f9a1 	bl	800b2e0 <__sinit>
 800af9e:	4b32      	ldr	r3, [pc, #200]	; (800b068 <__swsetup_r+0xe4>)
 800afa0:	429c      	cmp	r4, r3
 800afa2:	d10f      	bne.n	800afc4 <__swsetup_r+0x40>
 800afa4:	686c      	ldr	r4, [r5, #4]
 800afa6:	230c      	movs	r3, #12
 800afa8:	5ee2      	ldrsh	r2, [r4, r3]
 800afaa:	b293      	uxth	r3, r2
 800afac:	0711      	lsls	r1, r2, #28
 800afae:	d42d      	bmi.n	800b00c <__swsetup_r+0x88>
 800afb0:	06d9      	lsls	r1, r3, #27
 800afb2:	d411      	bmi.n	800afd8 <__swsetup_r+0x54>
 800afb4:	2309      	movs	r3, #9
 800afb6:	2001      	movs	r0, #1
 800afb8:	6033      	str	r3, [r6, #0]
 800afba:	3337      	adds	r3, #55	; 0x37
 800afbc:	4313      	orrs	r3, r2
 800afbe:	81a3      	strh	r3, [r4, #12]
 800afc0:	4240      	negs	r0, r0
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
 800afc4:	4b29      	ldr	r3, [pc, #164]	; (800b06c <__swsetup_r+0xe8>)
 800afc6:	429c      	cmp	r4, r3
 800afc8:	d101      	bne.n	800afce <__swsetup_r+0x4a>
 800afca:	68ac      	ldr	r4, [r5, #8]
 800afcc:	e7eb      	b.n	800afa6 <__swsetup_r+0x22>
 800afce:	4b28      	ldr	r3, [pc, #160]	; (800b070 <__swsetup_r+0xec>)
 800afd0:	429c      	cmp	r4, r3
 800afd2:	d1e8      	bne.n	800afa6 <__swsetup_r+0x22>
 800afd4:	68ec      	ldr	r4, [r5, #12]
 800afd6:	e7e6      	b.n	800afa6 <__swsetup_r+0x22>
 800afd8:	075b      	lsls	r3, r3, #29
 800afda:	d513      	bpl.n	800b004 <__swsetup_r+0x80>
 800afdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afde:	2900      	cmp	r1, #0
 800afe0:	d008      	beq.n	800aff4 <__swsetup_r+0x70>
 800afe2:	0023      	movs	r3, r4
 800afe4:	3344      	adds	r3, #68	; 0x44
 800afe6:	4299      	cmp	r1, r3
 800afe8:	d002      	beq.n	800aff0 <__swsetup_r+0x6c>
 800afea:	0030      	movs	r0, r6
 800afec:	f7fb fe76 	bl	8006cdc <_free_r>
 800aff0:	2300      	movs	r3, #0
 800aff2:	6363      	str	r3, [r4, #52]	; 0x34
 800aff4:	2224      	movs	r2, #36	; 0x24
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	4393      	bics	r3, r2
 800affa:	81a3      	strh	r3, [r4, #12]
 800affc:	2300      	movs	r3, #0
 800affe:	6063      	str	r3, [r4, #4]
 800b000:	6923      	ldr	r3, [r4, #16]
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	2308      	movs	r3, #8
 800b006:	89a2      	ldrh	r2, [r4, #12]
 800b008:	4313      	orrs	r3, r2
 800b00a:	81a3      	strh	r3, [r4, #12]
 800b00c:	6923      	ldr	r3, [r4, #16]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10b      	bne.n	800b02a <__swsetup_r+0xa6>
 800b012:	21a0      	movs	r1, #160	; 0xa0
 800b014:	2280      	movs	r2, #128	; 0x80
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	0089      	lsls	r1, r1, #2
 800b01a:	0092      	lsls	r2, r2, #2
 800b01c:	400b      	ands	r3, r1
 800b01e:	4293      	cmp	r3, r2
 800b020:	d003      	beq.n	800b02a <__swsetup_r+0xa6>
 800b022:	0021      	movs	r1, r4
 800b024:	0030      	movs	r0, r6
 800b026:	f000 fa23 	bl	800b470 <__smakebuf_r>
 800b02a:	220c      	movs	r2, #12
 800b02c:	5ea3      	ldrsh	r3, [r4, r2]
 800b02e:	2001      	movs	r0, #1
 800b030:	001a      	movs	r2, r3
 800b032:	b299      	uxth	r1, r3
 800b034:	4002      	ands	r2, r0
 800b036:	4203      	tst	r3, r0
 800b038:	d00f      	beq.n	800b05a <__swsetup_r+0xd6>
 800b03a:	2200      	movs	r2, #0
 800b03c:	60a2      	str	r2, [r4, #8]
 800b03e:	6962      	ldr	r2, [r4, #20]
 800b040:	4252      	negs	r2, r2
 800b042:	61a2      	str	r2, [r4, #24]
 800b044:	2000      	movs	r0, #0
 800b046:	6922      	ldr	r2, [r4, #16]
 800b048:	4282      	cmp	r2, r0
 800b04a:	d1ba      	bne.n	800afc2 <__swsetup_r+0x3e>
 800b04c:	060a      	lsls	r2, r1, #24
 800b04e:	d5b8      	bpl.n	800afc2 <__swsetup_r+0x3e>
 800b050:	2240      	movs	r2, #64	; 0x40
 800b052:	4313      	orrs	r3, r2
 800b054:	81a3      	strh	r3, [r4, #12]
 800b056:	3801      	subs	r0, #1
 800b058:	e7b3      	b.n	800afc2 <__swsetup_r+0x3e>
 800b05a:	0788      	lsls	r0, r1, #30
 800b05c:	d400      	bmi.n	800b060 <__swsetup_r+0xdc>
 800b05e:	6962      	ldr	r2, [r4, #20]
 800b060:	60a2      	str	r2, [r4, #8]
 800b062:	e7ef      	b.n	800b044 <__swsetup_r+0xc0>
 800b064:	2000000c 	.word	0x2000000c
 800b068:	0800bd8c 	.word	0x0800bd8c
 800b06c:	0800bdac 	.word	0x0800bdac
 800b070:	0800bd6c 	.word	0x0800bd6c

0800b074 <abort>:
 800b074:	2006      	movs	r0, #6
 800b076:	b510      	push	{r4, lr}
 800b078:	f000 fa70 	bl	800b55c <raise>
 800b07c:	2001      	movs	r0, #1
 800b07e:	f7f9 f835 	bl	80040ec <_exit>
	...

0800b084 <__sflush_r>:
 800b084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b086:	898b      	ldrh	r3, [r1, #12]
 800b088:	0005      	movs	r5, r0
 800b08a:	000c      	movs	r4, r1
 800b08c:	071a      	lsls	r2, r3, #28
 800b08e:	d45f      	bmi.n	800b150 <__sflush_r+0xcc>
 800b090:	684a      	ldr	r2, [r1, #4]
 800b092:	2a00      	cmp	r2, #0
 800b094:	dc04      	bgt.n	800b0a0 <__sflush_r+0x1c>
 800b096:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b098:	2a00      	cmp	r2, #0
 800b09a:	dc01      	bgt.n	800b0a0 <__sflush_r+0x1c>
 800b09c:	2000      	movs	r0, #0
 800b09e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b0a2:	2f00      	cmp	r7, #0
 800b0a4:	d0fa      	beq.n	800b09c <__sflush_r+0x18>
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	2180      	movs	r1, #128	; 0x80
 800b0aa:	682e      	ldr	r6, [r5, #0]
 800b0ac:	602a      	str	r2, [r5, #0]
 800b0ae:	001a      	movs	r2, r3
 800b0b0:	0149      	lsls	r1, r1, #5
 800b0b2:	400a      	ands	r2, r1
 800b0b4:	420b      	tst	r3, r1
 800b0b6:	d034      	beq.n	800b122 <__sflush_r+0x9e>
 800b0b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0ba:	89a3      	ldrh	r3, [r4, #12]
 800b0bc:	075b      	lsls	r3, r3, #29
 800b0be:	d506      	bpl.n	800b0ce <__sflush_r+0x4a>
 800b0c0:	6863      	ldr	r3, [r4, #4]
 800b0c2:	1ac0      	subs	r0, r0, r3
 800b0c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <__sflush_r+0x4a>
 800b0ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0cc:	1ac0      	subs	r0, r0, r3
 800b0ce:	0002      	movs	r2, r0
 800b0d0:	6a21      	ldr	r1, [r4, #32]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	0028      	movs	r0, r5
 800b0d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b0d8:	47b8      	blx	r7
 800b0da:	89a1      	ldrh	r1, [r4, #12]
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	d106      	bne.n	800b0ee <__sflush_r+0x6a>
 800b0e0:	682b      	ldr	r3, [r5, #0]
 800b0e2:	2b1d      	cmp	r3, #29
 800b0e4:	d831      	bhi.n	800b14a <__sflush_r+0xc6>
 800b0e6:	4a2c      	ldr	r2, [pc, #176]	; (800b198 <__sflush_r+0x114>)
 800b0e8:	40da      	lsrs	r2, r3
 800b0ea:	07d3      	lsls	r3, r2, #31
 800b0ec:	d52d      	bpl.n	800b14a <__sflush_r+0xc6>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	6063      	str	r3, [r4, #4]
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	04cb      	lsls	r3, r1, #19
 800b0f8:	d505      	bpl.n	800b106 <__sflush_r+0x82>
 800b0fa:	1c43      	adds	r3, r0, #1
 800b0fc:	d102      	bne.n	800b104 <__sflush_r+0x80>
 800b0fe:	682b      	ldr	r3, [r5, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d100      	bne.n	800b106 <__sflush_r+0x82>
 800b104:	6560      	str	r0, [r4, #84]	; 0x54
 800b106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b108:	602e      	str	r6, [r5, #0]
 800b10a:	2900      	cmp	r1, #0
 800b10c:	d0c6      	beq.n	800b09c <__sflush_r+0x18>
 800b10e:	0023      	movs	r3, r4
 800b110:	3344      	adds	r3, #68	; 0x44
 800b112:	4299      	cmp	r1, r3
 800b114:	d002      	beq.n	800b11c <__sflush_r+0x98>
 800b116:	0028      	movs	r0, r5
 800b118:	f7fb fde0 	bl	8006cdc <_free_r>
 800b11c:	2000      	movs	r0, #0
 800b11e:	6360      	str	r0, [r4, #52]	; 0x34
 800b120:	e7bd      	b.n	800b09e <__sflush_r+0x1a>
 800b122:	2301      	movs	r3, #1
 800b124:	0028      	movs	r0, r5
 800b126:	6a21      	ldr	r1, [r4, #32]
 800b128:	47b8      	blx	r7
 800b12a:	1c43      	adds	r3, r0, #1
 800b12c:	d1c5      	bne.n	800b0ba <__sflush_r+0x36>
 800b12e:	682b      	ldr	r3, [r5, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0c2      	beq.n	800b0ba <__sflush_r+0x36>
 800b134:	2b1d      	cmp	r3, #29
 800b136:	d001      	beq.n	800b13c <__sflush_r+0xb8>
 800b138:	2b16      	cmp	r3, #22
 800b13a:	d101      	bne.n	800b140 <__sflush_r+0xbc>
 800b13c:	602e      	str	r6, [r5, #0]
 800b13e:	e7ad      	b.n	800b09c <__sflush_r+0x18>
 800b140:	2340      	movs	r3, #64	; 0x40
 800b142:	89a2      	ldrh	r2, [r4, #12]
 800b144:	4313      	orrs	r3, r2
 800b146:	81a3      	strh	r3, [r4, #12]
 800b148:	e7a9      	b.n	800b09e <__sflush_r+0x1a>
 800b14a:	2340      	movs	r3, #64	; 0x40
 800b14c:	430b      	orrs	r3, r1
 800b14e:	e7fa      	b.n	800b146 <__sflush_r+0xc2>
 800b150:	690f      	ldr	r7, [r1, #16]
 800b152:	2f00      	cmp	r7, #0
 800b154:	d0a2      	beq.n	800b09c <__sflush_r+0x18>
 800b156:	680a      	ldr	r2, [r1, #0]
 800b158:	600f      	str	r7, [r1, #0]
 800b15a:	1bd2      	subs	r2, r2, r7
 800b15c:	9201      	str	r2, [sp, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	079b      	lsls	r3, r3, #30
 800b162:	d100      	bne.n	800b166 <__sflush_r+0xe2>
 800b164:	694a      	ldr	r2, [r1, #20]
 800b166:	60a2      	str	r2, [r4, #8]
 800b168:	9b01      	ldr	r3, [sp, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	dc00      	bgt.n	800b170 <__sflush_r+0xec>
 800b16e:	e795      	b.n	800b09c <__sflush_r+0x18>
 800b170:	003a      	movs	r2, r7
 800b172:	0028      	movs	r0, r5
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	6a21      	ldr	r1, [r4, #32]
 800b178:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b17a:	47b0      	blx	r6
 800b17c:	2800      	cmp	r0, #0
 800b17e:	dc06      	bgt.n	800b18e <__sflush_r+0x10a>
 800b180:	2340      	movs	r3, #64	; 0x40
 800b182:	2001      	movs	r0, #1
 800b184:	89a2      	ldrh	r2, [r4, #12]
 800b186:	4240      	negs	r0, r0
 800b188:	4313      	orrs	r3, r2
 800b18a:	81a3      	strh	r3, [r4, #12]
 800b18c:	e787      	b.n	800b09e <__sflush_r+0x1a>
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	183f      	adds	r7, r7, r0
 800b192:	1a1b      	subs	r3, r3, r0
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	e7e7      	b.n	800b168 <__sflush_r+0xe4>
 800b198:	20400001 	.word	0x20400001

0800b19c <_fflush_r>:
 800b19c:	690b      	ldr	r3, [r1, #16]
 800b19e:	b570      	push	{r4, r5, r6, lr}
 800b1a0:	0005      	movs	r5, r0
 800b1a2:	000c      	movs	r4, r1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <_fflush_r+0x12>
 800b1a8:	2500      	movs	r5, #0
 800b1aa:	0028      	movs	r0, r5
 800b1ac:	bd70      	pop	{r4, r5, r6, pc}
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d004      	beq.n	800b1bc <_fflush_r+0x20>
 800b1b2:	6983      	ldr	r3, [r0, #24]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <_fflush_r+0x20>
 800b1b8:	f000 f892 	bl	800b2e0 <__sinit>
 800b1bc:	4b14      	ldr	r3, [pc, #80]	; (800b210 <_fflush_r+0x74>)
 800b1be:	429c      	cmp	r4, r3
 800b1c0:	d11b      	bne.n	800b1fa <_fflush_r+0x5e>
 800b1c2:	686c      	ldr	r4, [r5, #4]
 800b1c4:	220c      	movs	r2, #12
 800b1c6:	5ea3      	ldrsh	r3, [r4, r2]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0ed      	beq.n	800b1a8 <_fflush_r+0xc>
 800b1cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1ce:	07d2      	lsls	r2, r2, #31
 800b1d0:	d404      	bmi.n	800b1dc <_fflush_r+0x40>
 800b1d2:	059b      	lsls	r3, r3, #22
 800b1d4:	d402      	bmi.n	800b1dc <_fflush_r+0x40>
 800b1d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1d8:	f7ff fcd9 	bl	800ab8e <__retarget_lock_acquire_recursive>
 800b1dc:	0028      	movs	r0, r5
 800b1de:	0021      	movs	r1, r4
 800b1e0:	f7ff ff50 	bl	800b084 <__sflush_r>
 800b1e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1e6:	0005      	movs	r5, r0
 800b1e8:	07db      	lsls	r3, r3, #31
 800b1ea:	d4de      	bmi.n	800b1aa <_fflush_r+0xe>
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	059b      	lsls	r3, r3, #22
 800b1f0:	d4db      	bmi.n	800b1aa <_fflush_r+0xe>
 800b1f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1f4:	f7ff fccc 	bl	800ab90 <__retarget_lock_release_recursive>
 800b1f8:	e7d7      	b.n	800b1aa <_fflush_r+0xe>
 800b1fa:	4b06      	ldr	r3, [pc, #24]	; (800b214 <_fflush_r+0x78>)
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	d101      	bne.n	800b204 <_fflush_r+0x68>
 800b200:	68ac      	ldr	r4, [r5, #8]
 800b202:	e7df      	b.n	800b1c4 <_fflush_r+0x28>
 800b204:	4b04      	ldr	r3, [pc, #16]	; (800b218 <_fflush_r+0x7c>)
 800b206:	429c      	cmp	r4, r3
 800b208:	d1dc      	bne.n	800b1c4 <_fflush_r+0x28>
 800b20a:	68ec      	ldr	r4, [r5, #12]
 800b20c:	e7da      	b.n	800b1c4 <_fflush_r+0x28>
 800b20e:	46c0      	nop			; (mov r8, r8)
 800b210:	0800bd8c 	.word	0x0800bd8c
 800b214:	0800bdac 	.word	0x0800bdac
 800b218:	0800bd6c 	.word	0x0800bd6c

0800b21c <std>:
 800b21c:	2300      	movs	r3, #0
 800b21e:	b510      	push	{r4, lr}
 800b220:	0004      	movs	r4, r0
 800b222:	6003      	str	r3, [r0, #0]
 800b224:	6043      	str	r3, [r0, #4]
 800b226:	6083      	str	r3, [r0, #8]
 800b228:	8181      	strh	r1, [r0, #12]
 800b22a:	6643      	str	r3, [r0, #100]	; 0x64
 800b22c:	0019      	movs	r1, r3
 800b22e:	81c2      	strh	r2, [r0, #14]
 800b230:	6103      	str	r3, [r0, #16]
 800b232:	6143      	str	r3, [r0, #20]
 800b234:	6183      	str	r3, [r0, #24]
 800b236:	2208      	movs	r2, #8
 800b238:	305c      	adds	r0, #92	; 0x5c
 800b23a:	f7fb fd46 	bl	8006cca <memset>
 800b23e:	4b05      	ldr	r3, [pc, #20]	; (800b254 <std+0x38>)
 800b240:	6224      	str	r4, [r4, #32]
 800b242:	6263      	str	r3, [r4, #36]	; 0x24
 800b244:	4b04      	ldr	r3, [pc, #16]	; (800b258 <std+0x3c>)
 800b246:	62a3      	str	r3, [r4, #40]	; 0x28
 800b248:	4b04      	ldr	r3, [pc, #16]	; (800b25c <std+0x40>)
 800b24a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b24c:	4b04      	ldr	r3, [pc, #16]	; (800b260 <std+0x44>)
 800b24e:	6323      	str	r3, [r4, #48]	; 0x30
 800b250:	bd10      	pop	{r4, pc}
 800b252:	46c0      	nop			; (mov r8, r8)
 800b254:	0800b59d 	.word	0x0800b59d
 800b258:	0800b5c5 	.word	0x0800b5c5
 800b25c:	0800b5fd 	.word	0x0800b5fd
 800b260:	0800b629 	.word	0x0800b629

0800b264 <_cleanup_r>:
 800b264:	b510      	push	{r4, lr}
 800b266:	4902      	ldr	r1, [pc, #8]	; (800b270 <_cleanup_r+0xc>)
 800b268:	f000 f8ba 	bl	800b3e0 <_fwalk_reent>
 800b26c:	bd10      	pop	{r4, pc}
 800b26e:	46c0      	nop			; (mov r8, r8)
 800b270:	0800b19d 	.word	0x0800b19d

0800b274 <__sfmoreglue>:
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	2568      	movs	r5, #104	; 0x68
 800b278:	1e4a      	subs	r2, r1, #1
 800b27a:	4355      	muls	r5, r2
 800b27c:	000e      	movs	r6, r1
 800b27e:	0029      	movs	r1, r5
 800b280:	3174      	adds	r1, #116	; 0x74
 800b282:	f7fb fd97 	bl	8006db4 <_malloc_r>
 800b286:	1e04      	subs	r4, r0, #0
 800b288:	d008      	beq.n	800b29c <__sfmoreglue+0x28>
 800b28a:	2100      	movs	r1, #0
 800b28c:	002a      	movs	r2, r5
 800b28e:	6001      	str	r1, [r0, #0]
 800b290:	6046      	str	r6, [r0, #4]
 800b292:	300c      	adds	r0, #12
 800b294:	60a0      	str	r0, [r4, #8]
 800b296:	3268      	adds	r2, #104	; 0x68
 800b298:	f7fb fd17 	bl	8006cca <memset>
 800b29c:	0020      	movs	r0, r4
 800b29e:	bd70      	pop	{r4, r5, r6, pc}

0800b2a0 <__sfp_lock_acquire>:
 800b2a0:	b510      	push	{r4, lr}
 800b2a2:	4802      	ldr	r0, [pc, #8]	; (800b2ac <__sfp_lock_acquire+0xc>)
 800b2a4:	f7ff fc73 	bl	800ab8e <__retarget_lock_acquire_recursive>
 800b2a8:	bd10      	pop	{r4, pc}
 800b2aa:	46c0      	nop			; (mov r8, r8)
 800b2ac:	2000054d 	.word	0x2000054d

0800b2b0 <__sfp_lock_release>:
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	4802      	ldr	r0, [pc, #8]	; (800b2bc <__sfp_lock_release+0xc>)
 800b2b4:	f7ff fc6c 	bl	800ab90 <__retarget_lock_release_recursive>
 800b2b8:	bd10      	pop	{r4, pc}
 800b2ba:	46c0      	nop			; (mov r8, r8)
 800b2bc:	2000054d 	.word	0x2000054d

0800b2c0 <__sinit_lock_acquire>:
 800b2c0:	b510      	push	{r4, lr}
 800b2c2:	4802      	ldr	r0, [pc, #8]	; (800b2cc <__sinit_lock_acquire+0xc>)
 800b2c4:	f7ff fc63 	bl	800ab8e <__retarget_lock_acquire_recursive>
 800b2c8:	bd10      	pop	{r4, pc}
 800b2ca:	46c0      	nop			; (mov r8, r8)
 800b2cc:	2000054e 	.word	0x2000054e

0800b2d0 <__sinit_lock_release>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	4802      	ldr	r0, [pc, #8]	; (800b2dc <__sinit_lock_release+0xc>)
 800b2d4:	f7ff fc5c 	bl	800ab90 <__retarget_lock_release_recursive>
 800b2d8:	bd10      	pop	{r4, pc}
 800b2da:	46c0      	nop			; (mov r8, r8)
 800b2dc:	2000054e 	.word	0x2000054e

0800b2e0 <__sinit>:
 800b2e0:	b513      	push	{r0, r1, r4, lr}
 800b2e2:	0004      	movs	r4, r0
 800b2e4:	f7ff ffec 	bl	800b2c0 <__sinit_lock_acquire>
 800b2e8:	69a3      	ldr	r3, [r4, #24]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d002      	beq.n	800b2f4 <__sinit+0x14>
 800b2ee:	f7ff ffef 	bl	800b2d0 <__sinit_lock_release>
 800b2f2:	bd13      	pop	{r0, r1, r4, pc}
 800b2f4:	64a3      	str	r3, [r4, #72]	; 0x48
 800b2f6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b2f8:	6523      	str	r3, [r4, #80]	; 0x50
 800b2fa:	4b13      	ldr	r3, [pc, #76]	; (800b348 <__sinit+0x68>)
 800b2fc:	4a13      	ldr	r2, [pc, #76]	; (800b34c <__sinit+0x6c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	62a2      	str	r2, [r4, #40]	; 0x28
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	42a3      	cmp	r3, r4
 800b306:	d101      	bne.n	800b30c <__sinit+0x2c>
 800b308:	2301      	movs	r3, #1
 800b30a:	61a3      	str	r3, [r4, #24]
 800b30c:	0020      	movs	r0, r4
 800b30e:	f000 f81f 	bl	800b350 <__sfp>
 800b312:	6060      	str	r0, [r4, #4]
 800b314:	0020      	movs	r0, r4
 800b316:	f000 f81b 	bl	800b350 <__sfp>
 800b31a:	60a0      	str	r0, [r4, #8]
 800b31c:	0020      	movs	r0, r4
 800b31e:	f000 f817 	bl	800b350 <__sfp>
 800b322:	2200      	movs	r2, #0
 800b324:	2104      	movs	r1, #4
 800b326:	60e0      	str	r0, [r4, #12]
 800b328:	6860      	ldr	r0, [r4, #4]
 800b32a:	f7ff ff77 	bl	800b21c <std>
 800b32e:	2201      	movs	r2, #1
 800b330:	2109      	movs	r1, #9
 800b332:	68a0      	ldr	r0, [r4, #8]
 800b334:	f7ff ff72 	bl	800b21c <std>
 800b338:	2202      	movs	r2, #2
 800b33a:	2112      	movs	r1, #18
 800b33c:	68e0      	ldr	r0, [r4, #12]
 800b33e:	f7ff ff6d 	bl	800b21c <std>
 800b342:	2301      	movs	r3, #1
 800b344:	61a3      	str	r3, [r4, #24]
 800b346:	e7d2      	b.n	800b2ee <__sinit+0xe>
 800b348:	0800ba24 	.word	0x0800ba24
 800b34c:	0800b265 	.word	0x0800b265

0800b350 <__sfp>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	0007      	movs	r7, r0
 800b354:	f7ff ffa4 	bl	800b2a0 <__sfp_lock_acquire>
 800b358:	4b1f      	ldr	r3, [pc, #124]	; (800b3d8 <__sfp+0x88>)
 800b35a:	681e      	ldr	r6, [r3, #0]
 800b35c:	69b3      	ldr	r3, [r6, #24]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d102      	bne.n	800b368 <__sfp+0x18>
 800b362:	0030      	movs	r0, r6
 800b364:	f7ff ffbc 	bl	800b2e0 <__sinit>
 800b368:	3648      	adds	r6, #72	; 0x48
 800b36a:	68b4      	ldr	r4, [r6, #8]
 800b36c:	6873      	ldr	r3, [r6, #4]
 800b36e:	3b01      	subs	r3, #1
 800b370:	d504      	bpl.n	800b37c <__sfp+0x2c>
 800b372:	6833      	ldr	r3, [r6, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d022      	beq.n	800b3be <__sfp+0x6e>
 800b378:	6836      	ldr	r6, [r6, #0]
 800b37a:	e7f6      	b.n	800b36a <__sfp+0x1a>
 800b37c:	220c      	movs	r2, #12
 800b37e:	5ea5      	ldrsh	r5, [r4, r2]
 800b380:	2d00      	cmp	r5, #0
 800b382:	d11a      	bne.n	800b3ba <__sfp+0x6a>
 800b384:	0020      	movs	r0, r4
 800b386:	4b15      	ldr	r3, [pc, #84]	; (800b3dc <__sfp+0x8c>)
 800b388:	3058      	adds	r0, #88	; 0x58
 800b38a:	60e3      	str	r3, [r4, #12]
 800b38c:	6665      	str	r5, [r4, #100]	; 0x64
 800b38e:	f7ff fbfd 	bl	800ab8c <__retarget_lock_init_recursive>
 800b392:	f7ff ff8d 	bl	800b2b0 <__sfp_lock_release>
 800b396:	0020      	movs	r0, r4
 800b398:	2208      	movs	r2, #8
 800b39a:	0029      	movs	r1, r5
 800b39c:	6025      	str	r5, [r4, #0]
 800b39e:	60a5      	str	r5, [r4, #8]
 800b3a0:	6065      	str	r5, [r4, #4]
 800b3a2:	6125      	str	r5, [r4, #16]
 800b3a4:	6165      	str	r5, [r4, #20]
 800b3a6:	61a5      	str	r5, [r4, #24]
 800b3a8:	305c      	adds	r0, #92	; 0x5c
 800b3aa:	f7fb fc8e 	bl	8006cca <memset>
 800b3ae:	6365      	str	r5, [r4, #52]	; 0x34
 800b3b0:	63a5      	str	r5, [r4, #56]	; 0x38
 800b3b2:	64a5      	str	r5, [r4, #72]	; 0x48
 800b3b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b3b6:	0020      	movs	r0, r4
 800b3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ba:	3468      	adds	r4, #104	; 0x68
 800b3bc:	e7d7      	b.n	800b36e <__sfp+0x1e>
 800b3be:	2104      	movs	r1, #4
 800b3c0:	0038      	movs	r0, r7
 800b3c2:	f7ff ff57 	bl	800b274 <__sfmoreglue>
 800b3c6:	1e04      	subs	r4, r0, #0
 800b3c8:	6030      	str	r0, [r6, #0]
 800b3ca:	d1d5      	bne.n	800b378 <__sfp+0x28>
 800b3cc:	f7ff ff70 	bl	800b2b0 <__sfp_lock_release>
 800b3d0:	230c      	movs	r3, #12
 800b3d2:	603b      	str	r3, [r7, #0]
 800b3d4:	e7ef      	b.n	800b3b6 <__sfp+0x66>
 800b3d6:	46c0      	nop			; (mov r8, r8)
 800b3d8:	0800ba24 	.word	0x0800ba24
 800b3dc:	ffff0001 	.word	0xffff0001

0800b3e0 <_fwalk_reent>:
 800b3e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3e2:	0004      	movs	r4, r0
 800b3e4:	0006      	movs	r6, r0
 800b3e6:	2700      	movs	r7, #0
 800b3e8:	9101      	str	r1, [sp, #4]
 800b3ea:	3448      	adds	r4, #72	; 0x48
 800b3ec:	6863      	ldr	r3, [r4, #4]
 800b3ee:	68a5      	ldr	r5, [r4, #8]
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	9b00      	ldr	r3, [sp, #0]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	d504      	bpl.n	800b404 <_fwalk_reent+0x24>
 800b3fa:	6824      	ldr	r4, [r4, #0]
 800b3fc:	2c00      	cmp	r4, #0
 800b3fe:	d1f5      	bne.n	800b3ec <_fwalk_reent+0xc>
 800b400:	0038      	movs	r0, r7
 800b402:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b404:	89ab      	ldrh	r3, [r5, #12]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d908      	bls.n	800b41c <_fwalk_reent+0x3c>
 800b40a:	220e      	movs	r2, #14
 800b40c:	5eab      	ldrsh	r3, [r5, r2]
 800b40e:	3301      	adds	r3, #1
 800b410:	d004      	beq.n	800b41c <_fwalk_reent+0x3c>
 800b412:	0029      	movs	r1, r5
 800b414:	0030      	movs	r0, r6
 800b416:	9b01      	ldr	r3, [sp, #4]
 800b418:	4798      	blx	r3
 800b41a:	4307      	orrs	r7, r0
 800b41c:	3568      	adds	r5, #104	; 0x68
 800b41e:	e7e8      	b.n	800b3f2 <_fwalk_reent+0x12>

0800b420 <__swhatbuf_r>:
 800b420:	b570      	push	{r4, r5, r6, lr}
 800b422:	000e      	movs	r6, r1
 800b424:	001d      	movs	r5, r3
 800b426:	230e      	movs	r3, #14
 800b428:	5ec9      	ldrsh	r1, [r1, r3]
 800b42a:	0014      	movs	r4, r2
 800b42c:	b096      	sub	sp, #88	; 0x58
 800b42e:	2900      	cmp	r1, #0
 800b430:	da08      	bge.n	800b444 <__swhatbuf_r+0x24>
 800b432:	220c      	movs	r2, #12
 800b434:	5eb3      	ldrsh	r3, [r6, r2]
 800b436:	2200      	movs	r2, #0
 800b438:	602a      	str	r2, [r5, #0]
 800b43a:	061b      	lsls	r3, r3, #24
 800b43c:	d411      	bmi.n	800b462 <__swhatbuf_r+0x42>
 800b43e:	2380      	movs	r3, #128	; 0x80
 800b440:	00db      	lsls	r3, r3, #3
 800b442:	e00f      	b.n	800b464 <__swhatbuf_r+0x44>
 800b444:	466a      	mov	r2, sp
 800b446:	f000 f91b 	bl	800b680 <_fstat_r>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	dbf1      	blt.n	800b432 <__swhatbuf_r+0x12>
 800b44e:	23f0      	movs	r3, #240	; 0xf0
 800b450:	9901      	ldr	r1, [sp, #4]
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	4019      	ands	r1, r3
 800b456:	4b05      	ldr	r3, [pc, #20]	; (800b46c <__swhatbuf_r+0x4c>)
 800b458:	18c9      	adds	r1, r1, r3
 800b45a:	424b      	negs	r3, r1
 800b45c:	4159      	adcs	r1, r3
 800b45e:	6029      	str	r1, [r5, #0]
 800b460:	e7ed      	b.n	800b43e <__swhatbuf_r+0x1e>
 800b462:	2340      	movs	r3, #64	; 0x40
 800b464:	2000      	movs	r0, #0
 800b466:	6023      	str	r3, [r4, #0]
 800b468:	b016      	add	sp, #88	; 0x58
 800b46a:	bd70      	pop	{r4, r5, r6, pc}
 800b46c:	ffffe000 	.word	0xffffe000

0800b470 <__smakebuf_r>:
 800b470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b472:	2602      	movs	r6, #2
 800b474:	898b      	ldrh	r3, [r1, #12]
 800b476:	0005      	movs	r5, r0
 800b478:	000c      	movs	r4, r1
 800b47a:	4233      	tst	r3, r6
 800b47c:	d006      	beq.n	800b48c <__smakebuf_r+0x1c>
 800b47e:	0023      	movs	r3, r4
 800b480:	3347      	adds	r3, #71	; 0x47
 800b482:	6023      	str	r3, [r4, #0]
 800b484:	6123      	str	r3, [r4, #16]
 800b486:	2301      	movs	r3, #1
 800b488:	6163      	str	r3, [r4, #20]
 800b48a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b48c:	466a      	mov	r2, sp
 800b48e:	ab01      	add	r3, sp, #4
 800b490:	f7ff ffc6 	bl	800b420 <__swhatbuf_r>
 800b494:	9900      	ldr	r1, [sp, #0]
 800b496:	0007      	movs	r7, r0
 800b498:	0028      	movs	r0, r5
 800b49a:	f7fb fc8b 	bl	8006db4 <_malloc_r>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d108      	bne.n	800b4b4 <__smakebuf_r+0x44>
 800b4a2:	220c      	movs	r2, #12
 800b4a4:	5ea3      	ldrsh	r3, [r4, r2]
 800b4a6:	059a      	lsls	r2, r3, #22
 800b4a8:	d4ef      	bmi.n	800b48a <__smakebuf_r+0x1a>
 800b4aa:	2203      	movs	r2, #3
 800b4ac:	4393      	bics	r3, r2
 800b4ae:	431e      	orrs	r6, r3
 800b4b0:	81a6      	strh	r6, [r4, #12]
 800b4b2:	e7e4      	b.n	800b47e <__smakebuf_r+0xe>
 800b4b4:	4b0f      	ldr	r3, [pc, #60]	; (800b4f4 <__smakebuf_r+0x84>)
 800b4b6:	62ab      	str	r3, [r5, #40]	; 0x28
 800b4b8:	2380      	movs	r3, #128	; 0x80
 800b4ba:	89a2      	ldrh	r2, [r4, #12]
 800b4bc:	6020      	str	r0, [r4, #0]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	9b00      	ldr	r3, [sp, #0]
 800b4c4:	6120      	str	r0, [r4, #16]
 800b4c6:	6163      	str	r3, [r4, #20]
 800b4c8:	9b01      	ldr	r3, [sp, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00d      	beq.n	800b4ea <__smakebuf_r+0x7a>
 800b4ce:	0028      	movs	r0, r5
 800b4d0:	230e      	movs	r3, #14
 800b4d2:	5ee1      	ldrsh	r1, [r4, r3]
 800b4d4:	f000 f8e6 	bl	800b6a4 <_isatty_r>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d006      	beq.n	800b4ea <__smakebuf_r+0x7a>
 800b4dc:	2203      	movs	r2, #3
 800b4de:	89a3      	ldrh	r3, [r4, #12]
 800b4e0:	4393      	bics	r3, r2
 800b4e2:	001a      	movs	r2, r3
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	81a3      	strh	r3, [r4, #12]
 800b4ea:	89a0      	ldrh	r0, [r4, #12]
 800b4ec:	4307      	orrs	r7, r0
 800b4ee:	81a7      	strh	r7, [r4, #12]
 800b4f0:	e7cb      	b.n	800b48a <__smakebuf_r+0x1a>
 800b4f2:	46c0      	nop			; (mov r8, r8)
 800b4f4:	0800b265 	.word	0x0800b265

0800b4f8 <_malloc_usable_size_r>:
 800b4f8:	1f0b      	subs	r3, r1, #4
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	1f18      	subs	r0, r3, #4
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	da01      	bge.n	800b506 <_malloc_usable_size_r+0xe>
 800b502:	580b      	ldr	r3, [r1, r0]
 800b504:	18c0      	adds	r0, r0, r3
 800b506:	4770      	bx	lr

0800b508 <_raise_r>:
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	0004      	movs	r4, r0
 800b50c:	000d      	movs	r5, r1
 800b50e:	291f      	cmp	r1, #31
 800b510:	d904      	bls.n	800b51c <_raise_r+0x14>
 800b512:	2316      	movs	r3, #22
 800b514:	6003      	str	r3, [r0, #0]
 800b516:	2001      	movs	r0, #1
 800b518:	4240      	negs	r0, r0
 800b51a:	bd70      	pop	{r4, r5, r6, pc}
 800b51c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d004      	beq.n	800b52c <_raise_r+0x24>
 800b522:	008a      	lsls	r2, r1, #2
 800b524:	189b      	adds	r3, r3, r2
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	2a00      	cmp	r2, #0
 800b52a:	d108      	bne.n	800b53e <_raise_r+0x36>
 800b52c:	0020      	movs	r0, r4
 800b52e:	f000 f831 	bl	800b594 <_getpid_r>
 800b532:	002a      	movs	r2, r5
 800b534:	0001      	movs	r1, r0
 800b536:	0020      	movs	r0, r4
 800b538:	f000 f81a 	bl	800b570 <_kill_r>
 800b53c:	e7ed      	b.n	800b51a <_raise_r+0x12>
 800b53e:	2000      	movs	r0, #0
 800b540:	2a01      	cmp	r2, #1
 800b542:	d0ea      	beq.n	800b51a <_raise_r+0x12>
 800b544:	1c51      	adds	r1, r2, #1
 800b546:	d103      	bne.n	800b550 <_raise_r+0x48>
 800b548:	2316      	movs	r3, #22
 800b54a:	3001      	adds	r0, #1
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	e7e4      	b.n	800b51a <_raise_r+0x12>
 800b550:	2400      	movs	r4, #0
 800b552:	0028      	movs	r0, r5
 800b554:	601c      	str	r4, [r3, #0]
 800b556:	4790      	blx	r2
 800b558:	0020      	movs	r0, r4
 800b55a:	e7de      	b.n	800b51a <_raise_r+0x12>

0800b55c <raise>:
 800b55c:	b510      	push	{r4, lr}
 800b55e:	4b03      	ldr	r3, [pc, #12]	; (800b56c <raise+0x10>)
 800b560:	0001      	movs	r1, r0
 800b562:	6818      	ldr	r0, [r3, #0]
 800b564:	f7ff ffd0 	bl	800b508 <_raise_r>
 800b568:	bd10      	pop	{r4, pc}
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	2000000c 	.word	0x2000000c

0800b570 <_kill_r>:
 800b570:	2300      	movs	r3, #0
 800b572:	b570      	push	{r4, r5, r6, lr}
 800b574:	4d06      	ldr	r5, [pc, #24]	; (800b590 <_kill_r+0x20>)
 800b576:	0004      	movs	r4, r0
 800b578:	0008      	movs	r0, r1
 800b57a:	0011      	movs	r1, r2
 800b57c:	602b      	str	r3, [r5, #0]
 800b57e:	f7f8 fdad 	bl	80040dc <_kill>
 800b582:	1c43      	adds	r3, r0, #1
 800b584:	d103      	bne.n	800b58e <_kill_r+0x1e>
 800b586:	682b      	ldr	r3, [r5, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d000      	beq.n	800b58e <_kill_r+0x1e>
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	20000548 	.word	0x20000548

0800b594 <_getpid_r>:
 800b594:	b510      	push	{r4, lr}
 800b596:	f7f8 fd9f 	bl	80040d8 <_getpid>
 800b59a:	bd10      	pop	{r4, pc}

0800b59c <__sread>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	000c      	movs	r4, r1
 800b5a0:	250e      	movs	r5, #14
 800b5a2:	5f49      	ldrsh	r1, [r1, r5]
 800b5a4:	f000 f8a4 	bl	800b6f0 <_read_r>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	db03      	blt.n	800b5b4 <__sread+0x18>
 800b5ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b5ae:	181b      	adds	r3, r3, r0
 800b5b0:	6563      	str	r3, [r4, #84]	; 0x54
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	4a02      	ldr	r2, [pc, #8]	; (800b5c0 <__sread+0x24>)
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	81a3      	strh	r3, [r4, #12]
 800b5bc:	e7f9      	b.n	800b5b2 <__sread+0x16>
 800b5be:	46c0      	nop			; (mov r8, r8)
 800b5c0:	ffffefff 	.word	0xffffefff

0800b5c4 <__swrite>:
 800b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c6:	001f      	movs	r7, r3
 800b5c8:	898b      	ldrh	r3, [r1, #12]
 800b5ca:	0005      	movs	r5, r0
 800b5cc:	000c      	movs	r4, r1
 800b5ce:	0016      	movs	r6, r2
 800b5d0:	05db      	lsls	r3, r3, #23
 800b5d2:	d505      	bpl.n	800b5e0 <__swrite+0x1c>
 800b5d4:	230e      	movs	r3, #14
 800b5d6:	5ec9      	ldrsh	r1, [r1, r3]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	2302      	movs	r3, #2
 800b5dc:	f000 f874 	bl	800b6c8 <_lseek_r>
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	4a05      	ldr	r2, [pc, #20]	; (800b5f8 <__swrite+0x34>)
 800b5e4:	0028      	movs	r0, r5
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	81a3      	strh	r3, [r4, #12]
 800b5ea:	0032      	movs	r2, r6
 800b5ec:	230e      	movs	r3, #14
 800b5ee:	5ee1      	ldrsh	r1, [r4, r3]
 800b5f0:	003b      	movs	r3, r7
 800b5f2:	f000 f81f 	bl	800b634 <_write_r>
 800b5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f8:	ffffefff 	.word	0xffffefff

0800b5fc <__sseek>:
 800b5fc:	b570      	push	{r4, r5, r6, lr}
 800b5fe:	000c      	movs	r4, r1
 800b600:	250e      	movs	r5, #14
 800b602:	5f49      	ldrsh	r1, [r1, r5]
 800b604:	f000 f860 	bl	800b6c8 <_lseek_r>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	1c42      	adds	r2, r0, #1
 800b60c:	d103      	bne.n	800b616 <__sseek+0x1a>
 800b60e:	4a05      	ldr	r2, [pc, #20]	; (800b624 <__sseek+0x28>)
 800b610:	4013      	ands	r3, r2
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	bd70      	pop	{r4, r5, r6, pc}
 800b616:	2280      	movs	r2, #128	; 0x80
 800b618:	0152      	lsls	r2, r2, #5
 800b61a:	4313      	orrs	r3, r2
 800b61c:	81a3      	strh	r3, [r4, #12]
 800b61e:	6560      	str	r0, [r4, #84]	; 0x54
 800b620:	e7f8      	b.n	800b614 <__sseek+0x18>
 800b622:	46c0      	nop			; (mov r8, r8)
 800b624:	ffffefff 	.word	0xffffefff

0800b628 <__sclose>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	230e      	movs	r3, #14
 800b62c:	5ec9      	ldrsh	r1, [r1, r3]
 800b62e:	f000 f815 	bl	800b65c <_close_r>
 800b632:	bd10      	pop	{r4, pc}

0800b634 <_write_r>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	0004      	movs	r4, r0
 800b638:	0008      	movs	r0, r1
 800b63a:	0011      	movs	r1, r2
 800b63c:	001a      	movs	r2, r3
 800b63e:	2300      	movs	r3, #0
 800b640:	4d05      	ldr	r5, [pc, #20]	; (800b658 <_write_r+0x24>)
 800b642:	602b      	str	r3, [r5, #0]
 800b644:	f7f8 fd66 	bl	8004114 <_write>
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	d103      	bne.n	800b654 <_write_r+0x20>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d000      	beq.n	800b654 <_write_r+0x20>
 800b652:	6023      	str	r3, [r4, #0]
 800b654:	bd70      	pop	{r4, r5, r6, pc}
 800b656:	46c0      	nop			; (mov r8, r8)
 800b658:	20000548 	.word	0x20000548

0800b65c <_close_r>:
 800b65c:	2300      	movs	r3, #0
 800b65e:	b570      	push	{r4, r5, r6, lr}
 800b660:	4d06      	ldr	r5, [pc, #24]	; (800b67c <_close_r+0x20>)
 800b662:	0004      	movs	r4, r0
 800b664:	0008      	movs	r0, r1
 800b666:	602b      	str	r3, [r5, #0]
 800b668:	f7f8 fd62 	bl	8004130 <_close>
 800b66c:	1c43      	adds	r3, r0, #1
 800b66e:	d103      	bne.n	800b678 <_close_r+0x1c>
 800b670:	682b      	ldr	r3, [r5, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d000      	beq.n	800b678 <_close_r+0x1c>
 800b676:	6023      	str	r3, [r4, #0]
 800b678:	bd70      	pop	{r4, r5, r6, pc}
 800b67a:	46c0      	nop			; (mov r8, r8)
 800b67c:	20000548 	.word	0x20000548

0800b680 <_fstat_r>:
 800b680:	2300      	movs	r3, #0
 800b682:	b570      	push	{r4, r5, r6, lr}
 800b684:	4d06      	ldr	r5, [pc, #24]	; (800b6a0 <_fstat_r+0x20>)
 800b686:	0004      	movs	r4, r0
 800b688:	0008      	movs	r0, r1
 800b68a:	0011      	movs	r1, r2
 800b68c:	602b      	str	r3, [r5, #0]
 800b68e:	f7f8 fd53 	bl	8004138 <_fstat>
 800b692:	1c43      	adds	r3, r0, #1
 800b694:	d103      	bne.n	800b69e <_fstat_r+0x1e>
 800b696:	682b      	ldr	r3, [r5, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d000      	beq.n	800b69e <_fstat_r+0x1e>
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	20000548 	.word	0x20000548

0800b6a4 <_isatty_r>:
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	b570      	push	{r4, r5, r6, lr}
 800b6a8:	4d06      	ldr	r5, [pc, #24]	; (800b6c4 <_isatty_r+0x20>)
 800b6aa:	0004      	movs	r4, r0
 800b6ac:	0008      	movs	r0, r1
 800b6ae:	602b      	str	r3, [r5, #0]
 800b6b0:	f7f8 fd48 	bl	8004144 <_isatty>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d103      	bne.n	800b6c0 <_isatty_r+0x1c>
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d000      	beq.n	800b6c0 <_isatty_r+0x1c>
 800b6be:	6023      	str	r3, [r4, #0]
 800b6c0:	bd70      	pop	{r4, r5, r6, pc}
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	20000548 	.word	0x20000548

0800b6c8 <_lseek_r>:
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	0004      	movs	r4, r0
 800b6cc:	0008      	movs	r0, r1
 800b6ce:	0011      	movs	r1, r2
 800b6d0:	001a      	movs	r2, r3
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	4d05      	ldr	r5, [pc, #20]	; (800b6ec <_lseek_r+0x24>)
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	f7f8 fd36 	bl	8004148 <_lseek>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d103      	bne.n	800b6e8 <_lseek_r+0x20>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d000      	beq.n	800b6e8 <_lseek_r+0x20>
 800b6e6:	6023      	str	r3, [r4, #0]
 800b6e8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	20000548 	.word	0x20000548

0800b6f0 <_read_r>:
 800b6f0:	b570      	push	{r4, r5, r6, lr}
 800b6f2:	0004      	movs	r4, r0
 800b6f4:	0008      	movs	r0, r1
 800b6f6:	0011      	movs	r1, r2
 800b6f8:	001a      	movs	r2, r3
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	4d05      	ldr	r5, [pc, #20]	; (800b714 <_read_r+0x24>)
 800b6fe:	602b      	str	r3, [r5, #0]
 800b700:	f7f8 fcfa 	bl	80040f8 <_read>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d103      	bne.n	800b710 <_read_r+0x20>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d000      	beq.n	800b710 <_read_r+0x20>
 800b70e:	6023      	str	r3, [r4, #0]
 800b710:	bd70      	pop	{r4, r5, r6, pc}
 800b712:	46c0      	nop			; (mov r8, r8)
 800b714:	20000548 	.word	0x20000548

0800b718 <_init>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	46c0      	nop			; (mov r8, r8)
 800b71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71e:	bc08      	pop	{r3}
 800b720:	469e      	mov	lr, r3
 800b722:	4770      	bx	lr

0800b724 <_fini>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	46c0      	nop			; (mov r8, r8)
 800b728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b72a:	bc08      	pop	{r3}
 800b72c:	469e      	mov	lr, r3
 800b72e:	4770      	bx	lr
