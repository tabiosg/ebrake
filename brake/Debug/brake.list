
brake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d744  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800d800  0800d800  0001d800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de8c  0800de8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800de8c  0800de8c  0001de8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de94  0800de94  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de94  0800de94  0001de94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de98  0800de98  0001de98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800de9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001e0  0800e07c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  0800e07c  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d512  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f2c  00000000  00000000  0003d71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00041648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00042ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdb4  00000000  00000000  000441b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e940  00000000  00000000  0005ff64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a326e  00000000  00000000  0007e8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121b12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067cc  00000000  00000000  00121b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d7e8 	.word	0x0800d7e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800d7e8 	.word	0x0800d7e8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 ff8d 	bl	8002358 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fedd 	bl	8002208 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 ff7f 	bl	8002358 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 ff75 	bl	8002358 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 ff05 	bl	800228c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fefb 	bl	800228c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fcb1 	bl	8000e14 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fc3d 	bl	8000d3c <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fca3 	bl	8000e14 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc99 	bl	8000e14 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc49 	bl	8000d88 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc3f 	bl	8000d88 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	; (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f876 	bl	8000638 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff95 	bl	8000490 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 fd73 	bl	8003058 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f002 f9bc 	bl	80028f8 <__aeabi_dsub>
 8000580:	f002 fd6a 	bl	8003058 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_d2lz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	0005      	movs	r5, r0
 8000598:	000c      	movs	r4, r1
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f7ff ff57 	bl	8000454 <__aeabi_dcmplt>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d108      	bne.n	80005bc <__aeabi_d2lz+0x28>
 80005aa:	0028      	movs	r0, r5
 80005ac:	0021      	movs	r1, r4
 80005ae:	f000 f80f 	bl	80005d0 <__aeabi_d2ulz>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	0010      	movs	r0, r2
 80005b8:	0019      	movs	r1, r3
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	18e1      	adds	r1, r4, r3
 80005c2:	0028      	movs	r0, r5
 80005c4:	f000 f804 	bl	80005d0 <__aeabi_d2ulz>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4242      	negs	r2, r0
 80005cc:	418b      	sbcs	r3, r1
 80005ce:	e7f2      	b.n	80005b6 <__aeabi_d2lz+0x22>

080005d0 <__aeabi_d2ulz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__aeabi_d2ulz+0x34>)
 80005d6:	000d      	movs	r5, r1
 80005d8:	0004      	movs	r4, r0
 80005da:	f001 ff21 	bl	8002420 <__aeabi_dmul>
 80005de:	f7ff ffbb 	bl	8000558 <__aeabi_d2uiz>
 80005e2:	0006      	movs	r6, r0
 80005e4:	f002 fd9e 	bl	8003124 <__aeabi_ui2d>
 80005e8:	2200      	movs	r2, #0
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <__aeabi_d2ulz+0x38>)
 80005ec:	f001 ff18 	bl	8002420 <__aeabi_dmul>
 80005f0:	0002      	movs	r2, r0
 80005f2:	000b      	movs	r3, r1
 80005f4:	0020      	movs	r0, r4
 80005f6:	0029      	movs	r1, r5
 80005f8:	f002 f97e 	bl	80028f8 <__aeabi_dsub>
 80005fc:	f7ff ffac 	bl	8000558 <__aeabi_d2uiz>
 8000600:	0031      	movs	r1, r6
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	3df00000 	.word	0x3df00000
 8000608:	41f00000 	.word	0x41f00000

0800060c <__aeabi_l2d>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	0006      	movs	r6, r0
 8000610:	0008      	movs	r0, r1
 8000612:	f002 fd57 	bl	80030c4 <__aeabi_i2d>
 8000616:	2200      	movs	r2, #0
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_l2d+0x28>)
 800061a:	f001 ff01 	bl	8002420 <__aeabi_dmul>
 800061e:	000d      	movs	r5, r1
 8000620:	0004      	movs	r4, r0
 8000622:	0030      	movs	r0, r6
 8000624:	f002 fd7e 	bl	8003124 <__aeabi_ui2d>
 8000628:	002b      	movs	r3, r5
 800062a:	0022      	movs	r2, r4
 800062c:	f000 ffba 	bl	80015a4 <__aeabi_dadd>
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41f00000 	.word	0x41f00000

08000638 <__udivmoddi4>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	4657      	mov	r7, sl
 800063c:	464e      	mov	r6, r9
 800063e:	4645      	mov	r5, r8
 8000640:	46de      	mov	lr, fp
 8000642:	b5e0      	push	{r5, r6, r7, lr}
 8000644:	0004      	movs	r4, r0
 8000646:	000d      	movs	r5, r1
 8000648:	4692      	mov	sl, r2
 800064a:	4699      	mov	r9, r3
 800064c:	b083      	sub	sp, #12
 800064e:	428b      	cmp	r3, r1
 8000650:	d830      	bhi.n	80006b4 <__udivmoddi4+0x7c>
 8000652:	d02d      	beq.n	80006b0 <__udivmoddi4+0x78>
 8000654:	4649      	mov	r1, r9
 8000656:	4650      	mov	r0, sl
 8000658:	f002 fe78 	bl	800334c <__clzdi2>
 800065c:	0029      	movs	r1, r5
 800065e:	0006      	movs	r6, r0
 8000660:	0020      	movs	r0, r4
 8000662:	f002 fe73 	bl	800334c <__clzdi2>
 8000666:	1a33      	subs	r3, r6, r0
 8000668:	4698      	mov	r8, r3
 800066a:	3b20      	subs	r3, #32
 800066c:	469b      	mov	fp, r3
 800066e:	d433      	bmi.n	80006d8 <__udivmoddi4+0xa0>
 8000670:	465a      	mov	r2, fp
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	4642      	mov	r2, r8
 8000678:	001f      	movs	r7, r3
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001e      	movs	r6, r3
 8000680:	42af      	cmp	r7, r5
 8000682:	d83a      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000684:	42af      	cmp	r7, r5
 8000686:	d100      	bne.n	800068a <__udivmoddi4+0x52>
 8000688:	e078      	b.n	800077c <__udivmoddi4+0x144>
 800068a:	465b      	mov	r3, fp
 800068c:	1ba4      	subs	r4, r4, r6
 800068e:	41bd      	sbcs	r5, r7
 8000690:	2b00      	cmp	r3, #0
 8000692:	da00      	bge.n	8000696 <__udivmoddi4+0x5e>
 8000694:	e075      	b.n	8000782 <__udivmoddi4+0x14a>
 8000696:	2200      	movs	r2, #0
 8000698:	2300      	movs	r3, #0
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2301      	movs	r3, #1
 80006a0:	465a      	mov	r2, fp
 80006a2:	4093      	lsls	r3, r2
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4642      	mov	r2, r8
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	e028      	b.n	8000702 <__udivmoddi4+0xca>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	d9cf      	bls.n	8000654 <__udivmoddi4+0x1c>
 80006b4:	2200      	movs	r2, #0
 80006b6:	2300      	movs	r3, #0
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <__udivmoddi4+0x8e>
 80006c2:	601c      	str	r4, [r3, #0]
 80006c4:	605d      	str	r5, [r3, #4]
 80006c6:	9800      	ldr	r0, [sp, #0]
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	b003      	add	sp, #12
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
 80006ce:	46bb      	mov	fp, r7
 80006d0:	46b2      	mov	sl, r6
 80006d2:	46a9      	mov	r9, r5
 80006d4:	46a0      	mov	r8, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	4642      	mov	r2, r8
 80006da:	2320      	movs	r3, #32
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	4652      	mov	r2, sl
 80006e0:	40da      	lsrs	r2, r3
 80006e2:	4641      	mov	r1, r8
 80006e4:	0013      	movs	r3, r2
 80006e6:	464a      	mov	r2, r9
 80006e8:	408a      	lsls	r2, r1
 80006ea:	0017      	movs	r7, r2
 80006ec:	4642      	mov	r2, r8
 80006ee:	431f      	orrs	r7, r3
 80006f0:	4653      	mov	r3, sl
 80006f2:	4093      	lsls	r3, r2
 80006f4:	001e      	movs	r6, r3
 80006f6:	42af      	cmp	r7, r5
 80006f8:	d9c4      	bls.n	8000684 <__udivmoddi4+0x4c>
 80006fa:	2200      	movs	r2, #0
 80006fc:	2300      	movs	r3, #0
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	4643      	mov	r3, r8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0d9      	beq.n	80006bc <__udivmoddi4+0x84>
 8000708:	07fb      	lsls	r3, r7, #31
 800070a:	0872      	lsrs	r2, r6, #1
 800070c:	431a      	orrs	r2, r3
 800070e:	4646      	mov	r6, r8
 8000710:	087b      	lsrs	r3, r7, #1
 8000712:	e00e      	b.n	8000732 <__udivmoddi4+0xfa>
 8000714:	42ab      	cmp	r3, r5
 8000716:	d101      	bne.n	800071c <__udivmoddi4+0xe4>
 8000718:	42a2      	cmp	r2, r4
 800071a:	d80c      	bhi.n	8000736 <__udivmoddi4+0xfe>
 800071c:	1aa4      	subs	r4, r4, r2
 800071e:	419d      	sbcs	r5, r3
 8000720:	2001      	movs	r0, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2100      	movs	r1, #0
 8000728:	3e01      	subs	r6, #1
 800072a:	1824      	adds	r4, r4, r0
 800072c:	414d      	adcs	r5, r1
 800072e:	2e00      	cmp	r6, #0
 8000730:	d006      	beq.n	8000740 <__udivmoddi4+0x108>
 8000732:	42ab      	cmp	r3, r5
 8000734:	d9ee      	bls.n	8000714 <__udivmoddi4+0xdc>
 8000736:	3e01      	subs	r6, #1
 8000738:	1924      	adds	r4, r4, r4
 800073a:	416d      	adcs	r5, r5
 800073c:	2e00      	cmp	r6, #0
 800073e:	d1f8      	bne.n	8000732 <__udivmoddi4+0xfa>
 8000740:	9800      	ldr	r0, [sp, #0]
 8000742:	9901      	ldr	r1, [sp, #4]
 8000744:	465b      	mov	r3, fp
 8000746:	1900      	adds	r0, r0, r4
 8000748:	4169      	adcs	r1, r5
 800074a:	2b00      	cmp	r3, #0
 800074c:	db24      	blt.n	8000798 <__udivmoddi4+0x160>
 800074e:	002b      	movs	r3, r5
 8000750:	465a      	mov	r2, fp
 8000752:	4644      	mov	r4, r8
 8000754:	40d3      	lsrs	r3, r2
 8000756:	002a      	movs	r2, r5
 8000758:	40e2      	lsrs	r2, r4
 800075a:	001c      	movs	r4, r3
 800075c:	465b      	mov	r3, fp
 800075e:	0015      	movs	r5, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	db2a      	blt.n	80007ba <__udivmoddi4+0x182>
 8000764:	0026      	movs	r6, r4
 8000766:	409e      	lsls	r6, r3
 8000768:	0033      	movs	r3, r6
 800076a:	0026      	movs	r6, r4
 800076c:	4647      	mov	r7, r8
 800076e:	40be      	lsls	r6, r7
 8000770:	0032      	movs	r2, r6
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	4199      	sbcs	r1, r3
 8000776:	9000      	str	r0, [sp, #0]
 8000778:	9101      	str	r1, [sp, #4]
 800077a:	e79f      	b.n	80006bc <__udivmoddi4+0x84>
 800077c:	42a3      	cmp	r3, r4
 800077e:	d8bc      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000780:	e783      	b.n	800068a <__udivmoddi4+0x52>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	2100      	movs	r1, #0
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	9100      	str	r1, [sp, #0]
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	2201      	movs	r2, #1
 8000792:	40da      	lsrs	r2, r3
 8000794:	9201      	str	r2, [sp, #4]
 8000796:	e786      	b.n	80006a6 <__udivmoddi4+0x6e>
 8000798:	4642      	mov	r2, r8
 800079a:	2320      	movs	r3, #32
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	002a      	movs	r2, r5
 80007a0:	4646      	mov	r6, r8
 80007a2:	409a      	lsls	r2, r3
 80007a4:	0023      	movs	r3, r4
 80007a6:	40f3      	lsrs	r3, r6
 80007a8:	4644      	mov	r4, r8
 80007aa:	4313      	orrs	r3, r2
 80007ac:	002a      	movs	r2, r5
 80007ae:	40e2      	lsrs	r2, r4
 80007b0:	001c      	movs	r4, r3
 80007b2:	465b      	mov	r3, fp
 80007b4:	0015      	movs	r5, r2
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dad4      	bge.n	8000764 <__udivmoddi4+0x12c>
 80007ba:	4642      	mov	r2, r8
 80007bc:	002f      	movs	r7, r5
 80007be:	2320      	movs	r3, #32
 80007c0:	0026      	movs	r6, r4
 80007c2:	4097      	lsls	r7, r2
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	40de      	lsrs	r6, r3
 80007c8:	003b      	movs	r3, r7
 80007ca:	4333      	orrs	r3, r6
 80007cc:	e7cd      	b.n	800076a <__udivmoddi4+0x132>
 80007ce:	46c0      	nop			; (mov r8, r8)

080007d0 <__aeabi_fadd>:
 80007d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d2:	46c6      	mov	lr, r8
 80007d4:	0243      	lsls	r3, r0, #9
 80007d6:	0a5b      	lsrs	r3, r3, #9
 80007d8:	024e      	lsls	r6, r1, #9
 80007da:	0045      	lsls	r5, r0, #1
 80007dc:	004f      	lsls	r7, r1, #1
 80007de:	00da      	lsls	r2, r3, #3
 80007e0:	0fc4      	lsrs	r4, r0, #31
 80007e2:	469c      	mov	ip, r3
 80007e4:	0a70      	lsrs	r0, r6, #9
 80007e6:	4690      	mov	r8, r2
 80007e8:	b500      	push	{lr}
 80007ea:	0e2d      	lsrs	r5, r5, #24
 80007ec:	0e3f      	lsrs	r7, r7, #24
 80007ee:	0fc9      	lsrs	r1, r1, #31
 80007f0:	09b6      	lsrs	r6, r6, #6
 80007f2:	428c      	cmp	r4, r1
 80007f4:	d04b      	beq.n	800088e <__aeabi_fadd+0xbe>
 80007f6:	1bea      	subs	r2, r5, r7
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	dd36      	ble.n	800086a <__aeabi_fadd+0x9a>
 80007fc:	2f00      	cmp	r7, #0
 80007fe:	d061      	beq.n	80008c4 <__aeabi_fadd+0xf4>
 8000800:	2dff      	cmp	r5, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0x36>
 8000804:	e0ad      	b.n	8000962 <__aeabi_fadd+0x192>
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	04db      	lsls	r3, r3, #19
 800080a:	431e      	orrs	r6, r3
 800080c:	2a1b      	cmp	r2, #27
 800080e:	dc00      	bgt.n	8000812 <__aeabi_fadd+0x42>
 8000810:	e0d3      	b.n	80009ba <__aeabi_fadd+0x1ea>
 8000812:	2001      	movs	r0, #1
 8000814:	4643      	mov	r3, r8
 8000816:	1a18      	subs	r0, r3, r0
 8000818:	0143      	lsls	r3, r0, #5
 800081a:	d400      	bmi.n	800081e <__aeabi_fadd+0x4e>
 800081c:	e08c      	b.n	8000938 <__aeabi_fadd+0x168>
 800081e:	0180      	lsls	r0, r0, #6
 8000820:	0987      	lsrs	r7, r0, #6
 8000822:	0038      	movs	r0, r7
 8000824:	f002 fd74 	bl	8003310 <__clzsi2>
 8000828:	3805      	subs	r0, #5
 800082a:	4087      	lsls	r7, r0
 800082c:	4285      	cmp	r5, r0
 800082e:	dc00      	bgt.n	8000832 <__aeabi_fadd+0x62>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fadd+0x1d0>
 8000832:	1a2d      	subs	r5, r5, r0
 8000834:	48b3      	ldr	r0, [pc, #716]	; (8000b04 <__aeabi_fadd+0x334>)
 8000836:	4038      	ands	r0, r7
 8000838:	0743      	lsls	r3, r0, #29
 800083a:	d004      	beq.n	8000846 <__aeabi_fadd+0x76>
 800083c:	230f      	movs	r3, #15
 800083e:	4003      	ands	r3, r0
 8000840:	2b04      	cmp	r3, #4
 8000842:	d000      	beq.n	8000846 <__aeabi_fadd+0x76>
 8000844:	3004      	adds	r0, #4
 8000846:	0143      	lsls	r3, r0, #5
 8000848:	d400      	bmi.n	800084c <__aeabi_fadd+0x7c>
 800084a:	e078      	b.n	800093e <__aeabi_fadd+0x16e>
 800084c:	1c6a      	adds	r2, r5, #1
 800084e:	2dfe      	cmp	r5, #254	; 0xfe
 8000850:	d065      	beq.n	800091e <__aeabi_fadd+0x14e>
 8000852:	0180      	lsls	r0, r0, #6
 8000854:	0a43      	lsrs	r3, r0, #9
 8000856:	469c      	mov	ip, r3
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	4663      	mov	r3, ip
 800085c:	05d0      	lsls	r0, r2, #23
 800085e:	4318      	orrs	r0, r3
 8000860:	07e4      	lsls	r4, r4, #31
 8000862:	4320      	orrs	r0, r4
 8000864:	bc80      	pop	{r7}
 8000866:	46b8      	mov	r8, r7
 8000868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086a:	2a00      	cmp	r2, #0
 800086c:	d035      	beq.n	80008da <__aeabi_fadd+0x10a>
 800086e:	1b7a      	subs	r2, r7, r5
 8000870:	2d00      	cmp	r5, #0
 8000872:	d000      	beq.n	8000876 <__aeabi_fadd+0xa6>
 8000874:	e0af      	b.n	80009d6 <__aeabi_fadd+0x206>
 8000876:	4643      	mov	r3, r8
 8000878:	2b00      	cmp	r3, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0xae>
 800087c:	e0a7      	b.n	80009ce <__aeabi_fadd+0x1fe>
 800087e:	1e53      	subs	r3, r2, #1
 8000880:	2a01      	cmp	r2, #1
 8000882:	d100      	bne.n	8000886 <__aeabi_fadd+0xb6>
 8000884:	e12f      	b.n	8000ae6 <__aeabi_fadd+0x316>
 8000886:	2aff      	cmp	r2, #255	; 0xff
 8000888:	d069      	beq.n	800095e <__aeabi_fadd+0x18e>
 800088a:	001a      	movs	r2, r3
 800088c:	e0aa      	b.n	80009e4 <__aeabi_fadd+0x214>
 800088e:	1be9      	subs	r1, r5, r7
 8000890:	2900      	cmp	r1, #0
 8000892:	dd70      	ble.n	8000976 <__aeabi_fadd+0x1a6>
 8000894:	2f00      	cmp	r7, #0
 8000896:	d037      	beq.n	8000908 <__aeabi_fadd+0x138>
 8000898:	2dff      	cmp	r5, #255	; 0xff
 800089a:	d062      	beq.n	8000962 <__aeabi_fadd+0x192>
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	04db      	lsls	r3, r3, #19
 80008a0:	431e      	orrs	r6, r3
 80008a2:	291b      	cmp	r1, #27
 80008a4:	dc00      	bgt.n	80008a8 <__aeabi_fadd+0xd8>
 80008a6:	e0b0      	b.n	8000a0a <__aeabi_fadd+0x23a>
 80008a8:	2001      	movs	r0, #1
 80008aa:	4440      	add	r0, r8
 80008ac:	0143      	lsls	r3, r0, #5
 80008ae:	d543      	bpl.n	8000938 <__aeabi_fadd+0x168>
 80008b0:	3501      	adds	r5, #1
 80008b2:	2dff      	cmp	r5, #255	; 0xff
 80008b4:	d033      	beq.n	800091e <__aeabi_fadd+0x14e>
 80008b6:	2301      	movs	r3, #1
 80008b8:	4a93      	ldr	r2, [pc, #588]	; (8000b08 <__aeabi_fadd+0x338>)
 80008ba:	4003      	ands	r3, r0
 80008bc:	0840      	lsrs	r0, r0, #1
 80008be:	4010      	ands	r0, r2
 80008c0:	4318      	orrs	r0, r3
 80008c2:	e7b9      	b.n	8000838 <__aeabi_fadd+0x68>
 80008c4:	2e00      	cmp	r6, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_fadd+0xfa>
 80008c8:	e083      	b.n	80009d2 <__aeabi_fadd+0x202>
 80008ca:	1e51      	subs	r1, r2, #1
 80008cc:	2a01      	cmp	r2, #1
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fadd+0x102>
 80008d0:	e0d8      	b.n	8000a84 <__aeabi_fadd+0x2b4>
 80008d2:	2aff      	cmp	r2, #255	; 0xff
 80008d4:	d045      	beq.n	8000962 <__aeabi_fadd+0x192>
 80008d6:	000a      	movs	r2, r1
 80008d8:	e798      	b.n	800080c <__aeabi_fadd+0x3c>
 80008da:	27fe      	movs	r7, #254	; 0xfe
 80008dc:	1c6a      	adds	r2, r5, #1
 80008de:	4217      	tst	r7, r2
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fadd+0x114>
 80008e2:	e086      	b.n	80009f2 <__aeabi_fadd+0x222>
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_fadd+0x11a>
 80008e8:	e0b7      	b.n	8000a5a <__aeabi_fadd+0x28a>
 80008ea:	4643      	mov	r3, r8
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x122>
 80008f0:	e0f3      	b.n	8000ada <__aeabi_fadd+0x30a>
 80008f2:	2200      	movs	r2, #0
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d0b0      	beq.n	800085a <__aeabi_fadd+0x8a>
 80008f8:	1b98      	subs	r0, r3, r6
 80008fa:	0143      	lsls	r3, r0, #5
 80008fc:	d400      	bmi.n	8000900 <__aeabi_fadd+0x130>
 80008fe:	e0fa      	b.n	8000af6 <__aeabi_fadd+0x326>
 8000900:	4643      	mov	r3, r8
 8000902:	000c      	movs	r4, r1
 8000904:	1af0      	subs	r0, r6, r3
 8000906:	e797      	b.n	8000838 <__aeabi_fadd+0x68>
 8000908:	2e00      	cmp	r6, #0
 800090a:	d100      	bne.n	800090e <__aeabi_fadd+0x13e>
 800090c:	e0c8      	b.n	8000aa0 <__aeabi_fadd+0x2d0>
 800090e:	1e4a      	subs	r2, r1, #1
 8000910:	2901      	cmp	r1, #1
 8000912:	d100      	bne.n	8000916 <__aeabi_fadd+0x146>
 8000914:	e0ae      	b.n	8000a74 <__aeabi_fadd+0x2a4>
 8000916:	29ff      	cmp	r1, #255	; 0xff
 8000918:	d023      	beq.n	8000962 <__aeabi_fadd+0x192>
 800091a:	0011      	movs	r1, r2
 800091c:	e7c1      	b.n	80008a2 <__aeabi_fadd+0xd2>
 800091e:	2300      	movs	r3, #0
 8000920:	22ff      	movs	r2, #255	; 0xff
 8000922:	469c      	mov	ip, r3
 8000924:	e799      	b.n	800085a <__aeabi_fadd+0x8a>
 8000926:	21fe      	movs	r1, #254	; 0xfe
 8000928:	1c6a      	adds	r2, r5, #1
 800092a:	4211      	tst	r1, r2
 800092c:	d077      	beq.n	8000a1e <__aeabi_fadd+0x24e>
 800092e:	2aff      	cmp	r2, #255	; 0xff
 8000930:	d0f5      	beq.n	800091e <__aeabi_fadd+0x14e>
 8000932:	0015      	movs	r5, r2
 8000934:	4446      	add	r6, r8
 8000936:	0870      	lsrs	r0, r6, #1
 8000938:	0743      	lsls	r3, r0, #29
 800093a:	d000      	beq.n	800093e <__aeabi_fadd+0x16e>
 800093c:	e77e      	b.n	800083c <__aeabi_fadd+0x6c>
 800093e:	08c3      	lsrs	r3, r0, #3
 8000940:	2dff      	cmp	r5, #255	; 0xff
 8000942:	d00e      	beq.n	8000962 <__aeabi_fadd+0x192>
 8000944:	025b      	lsls	r3, r3, #9
 8000946:	0a5b      	lsrs	r3, r3, #9
 8000948:	469c      	mov	ip, r3
 800094a:	b2ea      	uxtb	r2, r5
 800094c:	e785      	b.n	800085a <__aeabi_fadd+0x8a>
 800094e:	2e00      	cmp	r6, #0
 8000950:	d007      	beq.n	8000962 <__aeabi_fadd+0x192>
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	03d2      	lsls	r2, r2, #15
 8000956:	4213      	tst	r3, r2
 8000958:	d003      	beq.n	8000962 <__aeabi_fadd+0x192>
 800095a:	4210      	tst	r0, r2
 800095c:	d101      	bne.n	8000962 <__aeabi_fadd+0x192>
 800095e:	000c      	movs	r4, r1
 8000960:	0003      	movs	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0db      	beq.n	800091e <__aeabi_fadd+0x14e>
 8000966:	2080      	movs	r0, #128	; 0x80
 8000968:	03c0      	lsls	r0, r0, #15
 800096a:	4318      	orrs	r0, r3
 800096c:	0240      	lsls	r0, r0, #9
 800096e:	0a43      	lsrs	r3, r0, #9
 8000970:	469c      	mov	ip, r3
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	e771      	b.n	800085a <__aeabi_fadd+0x8a>
 8000976:	2900      	cmp	r1, #0
 8000978:	d0d5      	beq.n	8000926 <__aeabi_fadd+0x156>
 800097a:	1b7a      	subs	r2, r7, r5
 800097c:	2d00      	cmp	r5, #0
 800097e:	d160      	bne.n	8000a42 <__aeabi_fadd+0x272>
 8000980:	4643      	mov	r3, r8
 8000982:	2b00      	cmp	r3, #0
 8000984:	d024      	beq.n	80009d0 <__aeabi_fadd+0x200>
 8000986:	1e53      	subs	r3, r2, #1
 8000988:	2a01      	cmp	r2, #1
 800098a:	d073      	beq.n	8000a74 <__aeabi_fadd+0x2a4>
 800098c:	2aff      	cmp	r2, #255	; 0xff
 800098e:	d0e7      	beq.n	8000960 <__aeabi_fadd+0x190>
 8000990:	001a      	movs	r2, r3
 8000992:	2a1b      	cmp	r2, #27
 8000994:	dc00      	bgt.n	8000998 <__aeabi_fadd+0x1c8>
 8000996:	e085      	b.n	8000aa4 <__aeabi_fadd+0x2d4>
 8000998:	2001      	movs	r0, #1
 800099a:	003d      	movs	r5, r7
 800099c:	1980      	adds	r0, r0, r6
 800099e:	e785      	b.n	80008ac <__aeabi_fadd+0xdc>
 80009a0:	2320      	movs	r3, #32
 80009a2:	003a      	movs	r2, r7
 80009a4:	1b45      	subs	r5, r0, r5
 80009a6:	0038      	movs	r0, r7
 80009a8:	3501      	adds	r5, #1
 80009aa:	40ea      	lsrs	r2, r5
 80009ac:	1b5d      	subs	r5, r3, r5
 80009ae:	40a8      	lsls	r0, r5
 80009b0:	1e43      	subs	r3, r0, #1
 80009b2:	4198      	sbcs	r0, r3
 80009b4:	2500      	movs	r5, #0
 80009b6:	4310      	orrs	r0, r2
 80009b8:	e73e      	b.n	8000838 <__aeabi_fadd+0x68>
 80009ba:	2320      	movs	r3, #32
 80009bc:	0030      	movs	r0, r6
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	0031      	movs	r1, r6
 80009c2:	4098      	lsls	r0, r3
 80009c4:	40d1      	lsrs	r1, r2
 80009c6:	1e43      	subs	r3, r0, #1
 80009c8:	4198      	sbcs	r0, r3
 80009ca:	4308      	orrs	r0, r1
 80009cc:	e722      	b.n	8000814 <__aeabi_fadd+0x44>
 80009ce:	000c      	movs	r4, r1
 80009d0:	0003      	movs	r3, r0
 80009d2:	0015      	movs	r5, r2
 80009d4:	e7b4      	b.n	8000940 <__aeabi_fadd+0x170>
 80009d6:	2fff      	cmp	r7, #255	; 0xff
 80009d8:	d0c1      	beq.n	800095e <__aeabi_fadd+0x18e>
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	4640      	mov	r0, r8
 80009de:	04db      	lsls	r3, r3, #19
 80009e0:	4318      	orrs	r0, r3
 80009e2:	4680      	mov	r8, r0
 80009e4:	2a1b      	cmp	r2, #27
 80009e6:	dd51      	ble.n	8000a8c <__aeabi_fadd+0x2bc>
 80009e8:	2001      	movs	r0, #1
 80009ea:	000c      	movs	r4, r1
 80009ec:	003d      	movs	r5, r7
 80009ee:	1a30      	subs	r0, r6, r0
 80009f0:	e712      	b.n	8000818 <__aeabi_fadd+0x48>
 80009f2:	4643      	mov	r3, r8
 80009f4:	1b9f      	subs	r7, r3, r6
 80009f6:	017b      	lsls	r3, r7, #5
 80009f8:	d42b      	bmi.n	8000a52 <__aeabi_fadd+0x282>
 80009fa:	2f00      	cmp	r7, #0
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fadd+0x230>
 80009fe:	e710      	b.n	8000822 <__aeabi_fadd+0x52>
 8000a00:	2300      	movs	r3, #0
 8000a02:	2400      	movs	r4, #0
 8000a04:	2200      	movs	r2, #0
 8000a06:	469c      	mov	ip, r3
 8000a08:	e727      	b.n	800085a <__aeabi_fadd+0x8a>
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	0032      	movs	r2, r6
 8000a0e:	0030      	movs	r0, r6
 8000a10:	40ca      	lsrs	r2, r1
 8000a12:	1a59      	subs	r1, r3, r1
 8000a14:	4088      	lsls	r0, r1
 8000a16:	1e43      	subs	r3, r0, #1
 8000a18:	4198      	sbcs	r0, r3
 8000a1a:	4310      	orrs	r0, r2
 8000a1c:	e745      	b.n	80008aa <__aeabi_fadd+0xda>
 8000a1e:	2d00      	cmp	r5, #0
 8000a20:	d14a      	bne.n	8000ab8 <__aeabi_fadd+0x2e8>
 8000a22:	4643      	mov	r3, r8
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d063      	beq.n	8000af0 <__aeabi_fadd+0x320>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fadd+0x260>
 8000a2e:	e714      	b.n	800085a <__aeabi_fadd+0x8a>
 8000a30:	0030      	movs	r0, r6
 8000a32:	4440      	add	r0, r8
 8000a34:	0143      	lsls	r3, r0, #5
 8000a36:	d400      	bmi.n	8000a3a <__aeabi_fadd+0x26a>
 8000a38:	e77e      	b.n	8000938 <__aeabi_fadd+0x168>
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <__aeabi_fadd+0x334>)
 8000a3c:	3501      	adds	r5, #1
 8000a3e:	4018      	ands	r0, r3
 8000a40:	e77a      	b.n	8000938 <__aeabi_fadd+0x168>
 8000a42:	2fff      	cmp	r7, #255	; 0xff
 8000a44:	d08c      	beq.n	8000960 <__aeabi_fadd+0x190>
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	4641      	mov	r1, r8
 8000a4a:	04db      	lsls	r3, r3, #19
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	4688      	mov	r8, r1
 8000a50:	e79f      	b.n	8000992 <__aeabi_fadd+0x1c2>
 8000a52:	4643      	mov	r3, r8
 8000a54:	000c      	movs	r4, r1
 8000a56:	1af7      	subs	r7, r6, r3
 8000a58:	e6e3      	b.n	8000822 <__aeabi_fadd+0x52>
 8000a5a:	4642      	mov	r2, r8
 8000a5c:	2a00      	cmp	r2, #0
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fadd+0x292>
 8000a60:	e775      	b.n	800094e <__aeabi_fadd+0x17e>
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d000      	beq.n	8000a68 <__aeabi_fadd+0x298>
 8000a66:	e77a      	b.n	800095e <__aeabi_fadd+0x18e>
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	03db      	lsls	r3, r3, #15
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	469c      	mov	ip, r3
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	e6f2      	b.n	800085a <__aeabi_fadd+0x8a>
 8000a74:	0030      	movs	r0, r6
 8000a76:	4440      	add	r0, r8
 8000a78:	2501      	movs	r5, #1
 8000a7a:	0143      	lsls	r3, r0, #5
 8000a7c:	d400      	bmi.n	8000a80 <__aeabi_fadd+0x2b0>
 8000a7e:	e75b      	b.n	8000938 <__aeabi_fadd+0x168>
 8000a80:	2502      	movs	r5, #2
 8000a82:	e718      	b.n	80008b6 <__aeabi_fadd+0xe6>
 8000a84:	4643      	mov	r3, r8
 8000a86:	2501      	movs	r5, #1
 8000a88:	1b98      	subs	r0, r3, r6
 8000a8a:	e6c5      	b.n	8000818 <__aeabi_fadd+0x48>
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	4644      	mov	r4, r8
 8000a90:	4640      	mov	r0, r8
 8000a92:	40d4      	lsrs	r4, r2
 8000a94:	1a9a      	subs	r2, r3, r2
 8000a96:	4090      	lsls	r0, r2
 8000a98:	1e43      	subs	r3, r0, #1
 8000a9a:	4198      	sbcs	r0, r3
 8000a9c:	4320      	orrs	r0, r4
 8000a9e:	e7a4      	b.n	80009ea <__aeabi_fadd+0x21a>
 8000aa0:	000d      	movs	r5, r1
 8000aa2:	e74d      	b.n	8000940 <__aeabi_fadd+0x170>
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	4641      	mov	r1, r8
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	40d1      	lsrs	r1, r2
 8000aac:	1a9a      	subs	r2, r3, r2
 8000aae:	4090      	lsls	r0, r2
 8000ab0:	1e43      	subs	r3, r0, #1
 8000ab2:	4198      	sbcs	r0, r3
 8000ab4:	4308      	orrs	r0, r1
 8000ab6:	e770      	b.n	800099a <__aeabi_fadd+0x1ca>
 8000ab8:	4642      	mov	r2, r8
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fadd+0x2f0>
 8000abe:	e74f      	b.n	8000960 <__aeabi_fadd+0x190>
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fadd+0x2f6>
 8000ac4:	e74d      	b.n	8000962 <__aeabi_fadd+0x192>
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	03d2      	lsls	r2, r2, #15
 8000aca:	4213      	tst	r3, r2
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fadd+0x300>
 8000ace:	e748      	b.n	8000962 <__aeabi_fadd+0x192>
 8000ad0:	4210      	tst	r0, r2
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x306>
 8000ad4:	e745      	b.n	8000962 <__aeabi_fadd+0x192>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	e743      	b.n	8000962 <__aeabi_fadd+0x192>
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d090      	beq.n	8000a00 <__aeabi_fadd+0x230>
 8000ade:	000c      	movs	r4, r1
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	e6b9      	b.n	800085a <__aeabi_fadd+0x8a>
 8000ae6:	4643      	mov	r3, r8
 8000ae8:	000c      	movs	r4, r1
 8000aea:	1af0      	subs	r0, r6, r3
 8000aec:	3501      	adds	r5, #1
 8000aee:	e693      	b.n	8000818 <__aeabi_fadd+0x48>
 8000af0:	4684      	mov	ip, r0
 8000af2:	2200      	movs	r2, #0
 8000af4:	e6b1      	b.n	800085a <__aeabi_fadd+0x8a>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d000      	beq.n	8000afc <__aeabi_fadd+0x32c>
 8000afa:	e71d      	b.n	8000938 <__aeabi_fadd+0x168>
 8000afc:	2300      	movs	r3, #0
 8000afe:	2400      	movs	r4, #0
 8000b00:	469c      	mov	ip, r3
 8000b02:	e6aa      	b.n	800085a <__aeabi_fadd+0x8a>
 8000b04:	fbffffff 	.word	0xfbffffff
 8000b08:	7dffffff 	.word	0x7dffffff

08000b0c <__aeabi_fdiv>:
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0e:	464f      	mov	r7, r9
 8000b10:	4646      	mov	r6, r8
 8000b12:	46d6      	mov	lr, sl
 8000b14:	0245      	lsls	r5, r0, #9
 8000b16:	b5c0      	push	{r6, r7, lr}
 8000b18:	0047      	lsls	r7, r0, #1
 8000b1a:	1c0c      	adds	r4, r1, #0
 8000b1c:	0a6d      	lsrs	r5, r5, #9
 8000b1e:	0e3f      	lsrs	r7, r7, #24
 8000b20:	0fc6      	lsrs	r6, r0, #31
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_fdiv+0x1c>
 8000b26:	e070      	b.n	8000c0a <__aeabi_fdiv+0xfe>
 8000b28:	2fff      	cmp	r7, #255	; 0xff
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_fdiv+0x22>
 8000b2c:	e075      	b.n	8000c1a <__aeabi_fdiv+0x10e>
 8000b2e:	00eb      	lsls	r3, r5, #3
 8000b30:	2580      	movs	r5, #128	; 0x80
 8000b32:	04ed      	lsls	r5, r5, #19
 8000b34:	431d      	orrs	r5, r3
 8000b36:	2300      	movs	r3, #0
 8000b38:	4699      	mov	r9, r3
 8000b3a:	469a      	mov	sl, r3
 8000b3c:	3f7f      	subs	r7, #127	; 0x7f
 8000b3e:	0260      	lsls	r0, r4, #9
 8000b40:	0a43      	lsrs	r3, r0, #9
 8000b42:	4698      	mov	r8, r3
 8000b44:	0063      	lsls	r3, r4, #1
 8000b46:	0e1b      	lsrs	r3, r3, #24
 8000b48:	0fe4      	lsrs	r4, r4, #31
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d04e      	beq.n	8000bec <__aeabi_fdiv+0xe0>
 8000b4e:	2bff      	cmp	r3, #255	; 0xff
 8000b50:	d046      	beq.n	8000be0 <__aeabi_fdiv+0xd4>
 8000b52:	4642      	mov	r2, r8
 8000b54:	00d0      	lsls	r0, r2, #3
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	04d2      	lsls	r2, r2, #19
 8000b5a:	4302      	orrs	r2, r0
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2200      	movs	r2, #0
 8000b60:	3b7f      	subs	r3, #127	; 0x7f
 8000b62:	0031      	movs	r1, r6
 8000b64:	1aff      	subs	r7, r7, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4061      	eors	r1, r4
 8000b6a:	b2c9      	uxtb	r1, r1
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d900      	bls.n	8000b74 <__aeabi_fdiv+0x68>
 8000b72:	e0b5      	b.n	8000ce0 <__aeabi_fdiv+0x1d4>
 8000b74:	486e      	ldr	r0, [pc, #440]	; (8000d30 <__aeabi_fdiv+0x224>)
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	58c3      	ldr	r3, [r0, r3]
 8000b7a:	469f      	mov	pc, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	4698      	mov	r8, r3
 8000b80:	0026      	movs	r6, r4
 8000b82:	4645      	mov	r5, r8
 8000b84:	4692      	mov	sl, r2
 8000b86:	4653      	mov	r3, sl
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fdiv+0x82>
 8000b8c:	e089      	b.n	8000ca2 <__aeabi_fdiv+0x196>
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d100      	bne.n	8000b94 <__aeabi_fdiv+0x88>
 8000b92:	e09e      	b.n	8000cd2 <__aeabi_fdiv+0x1c6>
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d018      	beq.n	8000bca <__aeabi_fdiv+0xbe>
 8000b98:	003b      	movs	r3, r7
 8000b9a:	337f      	adds	r3, #127	; 0x7f
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	dd69      	ble.n	8000c74 <__aeabi_fdiv+0x168>
 8000ba0:	076a      	lsls	r2, r5, #29
 8000ba2:	d004      	beq.n	8000bae <__aeabi_fdiv+0xa2>
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	402a      	ands	r2, r5
 8000ba8:	2a04      	cmp	r2, #4
 8000baa:	d000      	beq.n	8000bae <__aeabi_fdiv+0xa2>
 8000bac:	3504      	adds	r5, #4
 8000bae:	012a      	lsls	r2, r5, #4
 8000bb0:	d503      	bpl.n	8000bba <__aeabi_fdiv+0xae>
 8000bb2:	4b60      	ldr	r3, [pc, #384]	; (8000d34 <__aeabi_fdiv+0x228>)
 8000bb4:	401d      	ands	r5, r3
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	3380      	adds	r3, #128	; 0x80
 8000bba:	2bfe      	cmp	r3, #254	; 0xfe
 8000bbc:	dd00      	ble.n	8000bc0 <__aeabi_fdiv+0xb4>
 8000bbe:	e070      	b.n	8000ca2 <__aeabi_fdiv+0x196>
 8000bc0:	01ad      	lsls	r5, r5, #6
 8000bc2:	0a6d      	lsrs	r5, r5, #9
 8000bc4:	b2d8      	uxtb	r0, r3
 8000bc6:	e002      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000bc8:	000e      	movs	r6, r1
 8000bca:	2000      	movs	r0, #0
 8000bcc:	2500      	movs	r5, #0
 8000bce:	05c0      	lsls	r0, r0, #23
 8000bd0:	4328      	orrs	r0, r5
 8000bd2:	07f6      	lsls	r6, r6, #31
 8000bd4:	4330      	orrs	r0, r6
 8000bd6:	bce0      	pop	{r5, r6, r7}
 8000bd8:	46ba      	mov	sl, r7
 8000bda:	46b1      	mov	r9, r6
 8000bdc:	46a8      	mov	r8, r5
 8000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be0:	4643      	mov	r3, r8
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d13f      	bne.n	8000c66 <__aeabi_fdiv+0x15a>
 8000be6:	2202      	movs	r2, #2
 8000be8:	3fff      	subs	r7, #255	; 0xff
 8000bea:	e003      	b.n	8000bf4 <__aeabi_fdiv+0xe8>
 8000bec:	4643      	mov	r3, r8
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d12d      	bne.n	8000c4e <__aeabi_fdiv+0x142>
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	0031      	movs	r1, r6
 8000bf6:	464b      	mov	r3, r9
 8000bf8:	4061      	eors	r1, r4
 8000bfa:	b2c9      	uxtb	r1, r1
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d834      	bhi.n	8000c6c <__aeabi_fdiv+0x160>
 8000c02:	484d      	ldr	r0, [pc, #308]	; (8000d38 <__aeabi_fdiv+0x22c>)
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	58c3      	ldr	r3, [r0, r3]
 8000c08:	469f      	mov	pc, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d113      	bne.n	8000c36 <__aeabi_fdiv+0x12a>
 8000c0e:	2304      	movs	r3, #4
 8000c10:	4699      	mov	r9, r3
 8000c12:	3b03      	subs	r3, #3
 8000c14:	2700      	movs	r7, #0
 8000c16:	469a      	mov	sl, r3
 8000c18:	e791      	b.n	8000b3e <__aeabi_fdiv+0x32>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d105      	bne.n	8000c2a <__aeabi_fdiv+0x11e>
 8000c1e:	2308      	movs	r3, #8
 8000c20:	4699      	mov	r9, r3
 8000c22:	3b06      	subs	r3, #6
 8000c24:	27ff      	movs	r7, #255	; 0xff
 8000c26:	469a      	mov	sl, r3
 8000c28:	e789      	b.n	8000b3e <__aeabi_fdiv+0x32>
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	3b09      	subs	r3, #9
 8000c30:	27ff      	movs	r7, #255	; 0xff
 8000c32:	469a      	mov	sl, r3
 8000c34:	e783      	b.n	8000b3e <__aeabi_fdiv+0x32>
 8000c36:	0028      	movs	r0, r5
 8000c38:	f002 fb6a 	bl	8003310 <__clzsi2>
 8000c3c:	2776      	movs	r7, #118	; 0x76
 8000c3e:	1f43      	subs	r3, r0, #5
 8000c40:	409d      	lsls	r5, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	427f      	negs	r7, r7
 8000c46:	4699      	mov	r9, r3
 8000c48:	469a      	mov	sl, r3
 8000c4a:	1a3f      	subs	r7, r7, r0
 8000c4c:	e777      	b.n	8000b3e <__aeabi_fdiv+0x32>
 8000c4e:	4640      	mov	r0, r8
 8000c50:	f002 fb5e 	bl	8003310 <__clzsi2>
 8000c54:	4642      	mov	r2, r8
 8000c56:	1f43      	subs	r3, r0, #5
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	2376      	movs	r3, #118	; 0x76
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	4690      	mov	r8, r2
 8000c60:	1a1b      	subs	r3, r3, r0
 8000c62:	2200      	movs	r2, #0
 8000c64:	e77d      	b.n	8000b62 <__aeabi_fdiv+0x56>
 8000c66:	23ff      	movs	r3, #255	; 0xff
 8000c68:	2203      	movs	r2, #3
 8000c6a:	e77a      	b.n	8000b62 <__aeabi_fdiv+0x56>
 8000c6c:	000e      	movs	r6, r1
 8000c6e:	20ff      	movs	r0, #255	; 0xff
 8000c70:	2500      	movs	r5, #0
 8000c72:	e7ac      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000c74:	2001      	movs	r0, #1
 8000c76:	1ac0      	subs	r0, r0, r3
 8000c78:	281b      	cmp	r0, #27
 8000c7a:	dca6      	bgt.n	8000bca <__aeabi_fdiv+0xbe>
 8000c7c:	379e      	adds	r7, #158	; 0x9e
 8000c7e:	002a      	movs	r2, r5
 8000c80:	40bd      	lsls	r5, r7
 8000c82:	40c2      	lsrs	r2, r0
 8000c84:	1e6b      	subs	r3, r5, #1
 8000c86:	419d      	sbcs	r5, r3
 8000c88:	4315      	orrs	r5, r2
 8000c8a:	076b      	lsls	r3, r5, #29
 8000c8c:	d004      	beq.n	8000c98 <__aeabi_fdiv+0x18c>
 8000c8e:	230f      	movs	r3, #15
 8000c90:	402b      	ands	r3, r5
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d000      	beq.n	8000c98 <__aeabi_fdiv+0x18c>
 8000c96:	3504      	adds	r5, #4
 8000c98:	016b      	lsls	r3, r5, #5
 8000c9a:	d544      	bpl.n	8000d26 <__aeabi_fdiv+0x21a>
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	2500      	movs	r5, #0
 8000ca0:	e795      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000ca2:	20ff      	movs	r0, #255	; 0xff
 8000ca4:	2500      	movs	r5, #0
 8000ca6:	e792      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000ca8:	2580      	movs	r5, #128	; 0x80
 8000caa:	2600      	movs	r6, #0
 8000cac:	20ff      	movs	r0, #255	; 0xff
 8000cae:	03ed      	lsls	r5, r5, #15
 8000cb0:	e78d      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2080      	movs	r0, #128	; 0x80
 8000cb8:	03c0      	lsls	r0, r0, #15
 8000cba:	4205      	tst	r5, r0
 8000cbc:	d009      	beq.n	8000cd2 <__aeabi_fdiv+0x1c6>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	4203      	tst	r3, r0
 8000cc2:	d106      	bne.n	8000cd2 <__aeabi_fdiv+0x1c6>
 8000cc4:	4645      	mov	r5, r8
 8000cc6:	4305      	orrs	r5, r0
 8000cc8:	026d      	lsls	r5, r5, #9
 8000cca:	0026      	movs	r6, r4
 8000ccc:	20ff      	movs	r0, #255	; 0xff
 8000cce:	0a6d      	lsrs	r5, r5, #9
 8000cd0:	e77d      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	03c0      	lsls	r0, r0, #15
 8000cd6:	4305      	orrs	r5, r0
 8000cd8:	026d      	lsls	r5, r5, #9
 8000cda:	20ff      	movs	r0, #255	; 0xff
 8000cdc:	0a6d      	lsrs	r5, r5, #9
 8000cde:	e776      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000ce0:	4642      	mov	r2, r8
 8000ce2:	016b      	lsls	r3, r5, #5
 8000ce4:	0150      	lsls	r0, r2, #5
 8000ce6:	4283      	cmp	r3, r0
 8000ce8:	d219      	bcs.n	8000d1e <__aeabi_fdiv+0x212>
 8000cea:	221b      	movs	r2, #27
 8000cec:	2500      	movs	r5, #0
 8000cee:	3f01      	subs	r7, #1
 8000cf0:	2601      	movs	r6, #1
 8000cf2:	001c      	movs	r4, r3
 8000cf4:	006d      	lsls	r5, r5, #1
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	db01      	blt.n	8000d00 <__aeabi_fdiv+0x1f4>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	d801      	bhi.n	8000d04 <__aeabi_fdiv+0x1f8>
 8000d00:	1a1b      	subs	r3, r3, r0
 8000d02:	4335      	orrs	r5, r6
 8000d04:	3a01      	subs	r2, #1
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d1f3      	bne.n	8000cf2 <__aeabi_fdiv+0x1e6>
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	4193      	sbcs	r3, r2
 8000d0e:	431d      	orrs	r5, r3
 8000d10:	003b      	movs	r3, r7
 8000d12:	337f      	adds	r3, #127	; 0x7f
 8000d14:	000e      	movs	r6, r1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	dd00      	ble.n	8000d1c <__aeabi_fdiv+0x210>
 8000d1a:	e741      	b.n	8000ba0 <__aeabi_fdiv+0x94>
 8000d1c:	e7aa      	b.n	8000c74 <__aeabi_fdiv+0x168>
 8000d1e:	221a      	movs	r2, #26
 8000d20:	2501      	movs	r5, #1
 8000d22:	1a1b      	subs	r3, r3, r0
 8000d24:	e7e4      	b.n	8000cf0 <__aeabi_fdiv+0x1e4>
 8000d26:	01ad      	lsls	r5, r5, #6
 8000d28:	2000      	movs	r0, #0
 8000d2a:	0a6d      	lsrs	r5, r5, #9
 8000d2c:	e74f      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	0800d818 	.word	0x0800d818
 8000d34:	f7ffffff 	.word	0xf7ffffff
 8000d38:	0800d858 	.word	0x0800d858

08000d3c <__eqsf2>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	0042      	lsls	r2, r0, #1
 8000d40:	0245      	lsls	r5, r0, #9
 8000d42:	024e      	lsls	r6, r1, #9
 8000d44:	004c      	lsls	r4, r1, #1
 8000d46:	0fc3      	lsrs	r3, r0, #31
 8000d48:	0a6d      	lsrs	r5, r5, #9
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	0e12      	lsrs	r2, r2, #24
 8000d4e:	0a76      	lsrs	r6, r6, #9
 8000d50:	0e24      	lsrs	r4, r4, #24
 8000d52:	0fc9      	lsrs	r1, r1, #31
 8000d54:	2aff      	cmp	r2, #255	; 0xff
 8000d56:	d006      	beq.n	8000d66 <__eqsf2+0x2a>
 8000d58:	2cff      	cmp	r4, #255	; 0xff
 8000d5a:	d003      	beq.n	8000d64 <__eqsf2+0x28>
 8000d5c:	42a2      	cmp	r2, r4
 8000d5e:	d101      	bne.n	8000d64 <__eqsf2+0x28>
 8000d60:	42b5      	cmp	r5, r6
 8000d62:	d006      	beq.n	8000d72 <__eqsf2+0x36>
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d1fc      	bne.n	8000d64 <__eqsf2+0x28>
 8000d6a:	2cff      	cmp	r4, #255	; 0xff
 8000d6c:	d1fa      	bne.n	8000d64 <__eqsf2+0x28>
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d1f8      	bne.n	8000d64 <__eqsf2+0x28>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d006      	beq.n	8000d84 <__eqsf2+0x48>
 8000d76:	2001      	movs	r0, #1
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	d1f3      	bne.n	8000d64 <__eqsf2+0x28>
 8000d7c:	0028      	movs	r0, r5
 8000d7e:	1e43      	subs	r3, r0, #1
 8000d80:	4198      	sbcs	r0, r3
 8000d82:	e7ef      	b.n	8000d64 <__eqsf2+0x28>
 8000d84:	2000      	movs	r0, #0
 8000d86:	e7ed      	b.n	8000d64 <__eqsf2+0x28>

08000d88 <__gesf2>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	0042      	lsls	r2, r0, #1
 8000d8c:	0245      	lsls	r5, r0, #9
 8000d8e:	024e      	lsls	r6, r1, #9
 8000d90:	004c      	lsls	r4, r1, #1
 8000d92:	0fc3      	lsrs	r3, r0, #31
 8000d94:	0a6d      	lsrs	r5, r5, #9
 8000d96:	0e12      	lsrs	r2, r2, #24
 8000d98:	0a76      	lsrs	r6, r6, #9
 8000d9a:	0e24      	lsrs	r4, r4, #24
 8000d9c:	0fc8      	lsrs	r0, r1, #31
 8000d9e:	2aff      	cmp	r2, #255	; 0xff
 8000da0:	d01b      	beq.n	8000dda <__gesf2+0x52>
 8000da2:	2cff      	cmp	r4, #255	; 0xff
 8000da4:	d00e      	beq.n	8000dc4 <__gesf2+0x3c>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d11b      	bne.n	8000de2 <__gesf2+0x5a>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d101      	bne.n	8000db2 <__gesf2+0x2a>
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d01c      	beq.n	8000dec <__gesf2+0x64>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d00c      	beq.n	8000dd0 <__gesf2+0x48>
 8000db6:	4283      	cmp	r3, r0
 8000db8:	d01c      	beq.n	8000df4 <__gesf2+0x6c>
 8000dba:	2102      	movs	r1, #2
 8000dbc:	1e58      	subs	r0, r3, #1
 8000dbe:	4008      	ands	r0, r1
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d122      	bne.n	8000e0e <__gesf2+0x86>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d1f4      	bne.n	8000db6 <__gesf2+0x2e>
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d1f2      	bne.n	8000db6 <__gesf2+0x2e>
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	d1f6      	bne.n	8000dc2 <__gesf2+0x3a>
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	e7f3      	b.n	8000dc2 <__gesf2+0x3a>
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d117      	bne.n	8000e0e <__gesf2+0x86>
 8000dde:	2cff      	cmp	r4, #255	; 0xff
 8000de0:	d0f0      	beq.n	8000dc4 <__gesf2+0x3c>
 8000de2:	2c00      	cmp	r4, #0
 8000de4:	d1e7      	bne.n	8000db6 <__gesf2+0x2e>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d1e5      	bne.n	8000db6 <__gesf2+0x2e>
 8000dea:	e7e6      	b.n	8000dba <__gesf2+0x32>
 8000dec:	2000      	movs	r0, #0
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d0e7      	beq.n	8000dc2 <__gesf2+0x3a>
 8000df2:	e7e2      	b.n	8000dba <__gesf2+0x32>
 8000df4:	42a2      	cmp	r2, r4
 8000df6:	dc05      	bgt.n	8000e04 <__gesf2+0x7c>
 8000df8:	dbea      	blt.n	8000dd0 <__gesf2+0x48>
 8000dfa:	42b5      	cmp	r5, r6
 8000dfc:	d802      	bhi.n	8000e04 <__gesf2+0x7c>
 8000dfe:	d3e7      	bcc.n	8000dd0 <__gesf2+0x48>
 8000e00:	2000      	movs	r0, #0
 8000e02:	e7de      	b.n	8000dc2 <__gesf2+0x3a>
 8000e04:	4243      	negs	r3, r0
 8000e06:	4158      	adcs	r0, r3
 8000e08:	0040      	lsls	r0, r0, #1
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	e7d9      	b.n	8000dc2 <__gesf2+0x3a>
 8000e0e:	2002      	movs	r0, #2
 8000e10:	4240      	negs	r0, r0
 8000e12:	e7d6      	b.n	8000dc2 <__gesf2+0x3a>

08000e14 <__lesf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	0245      	lsls	r5, r0, #9
 8000e1a:	024e      	lsls	r6, r1, #9
 8000e1c:	004c      	lsls	r4, r1, #1
 8000e1e:	0fc3      	lsrs	r3, r0, #31
 8000e20:	0a6d      	lsrs	r5, r5, #9
 8000e22:	0e12      	lsrs	r2, r2, #24
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc8      	lsrs	r0, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	; 0xff
 8000e2c:	d00b      	beq.n	8000e46 <__lesf2+0x32>
 8000e2e:	2cff      	cmp	r4, #255	; 0xff
 8000e30:	d00d      	beq.n	8000e4e <__lesf2+0x3a>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d11f      	bne.n	8000e76 <__lesf2+0x62>
 8000e36:	2c00      	cmp	r4, #0
 8000e38:	d116      	bne.n	8000e68 <__lesf2+0x54>
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d114      	bne.n	8000e68 <__lesf2+0x54>
 8000e3e:	2000      	movs	r0, #0
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	d010      	beq.n	8000e66 <__lesf2+0x52>
 8000e44:	e009      	b.n	8000e5a <__lesf2+0x46>
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d10c      	bne.n	8000e64 <__lesf2+0x50>
 8000e4a:	2cff      	cmp	r4, #255	; 0xff
 8000e4c:	d113      	bne.n	8000e76 <__lesf2+0x62>
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d108      	bne.n	8000e64 <__lesf2+0x50>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	d008      	beq.n	8000e68 <__lesf2+0x54>
 8000e56:	4283      	cmp	r3, r0
 8000e58:	d012      	beq.n	8000e80 <__lesf2+0x6c>
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	1e58      	subs	r0, r3, #1
 8000e5e:	4008      	ands	r0, r1
 8000e60:	3801      	subs	r0, #1
 8000e62:	e000      	b.n	8000e66 <__lesf2+0x52>
 8000e64:	2002      	movs	r0, #2
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d1f4      	bne.n	8000e56 <__lesf2+0x42>
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d1fa      	bne.n	8000e66 <__lesf2+0x52>
 8000e70:	2001      	movs	r0, #1
 8000e72:	4240      	negs	r0, r0
 8000e74:	e7f7      	b.n	8000e66 <__lesf2+0x52>
 8000e76:	2c00      	cmp	r4, #0
 8000e78:	d1ed      	bne.n	8000e56 <__lesf2+0x42>
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	d1eb      	bne.n	8000e56 <__lesf2+0x42>
 8000e7e:	e7ec      	b.n	8000e5a <__lesf2+0x46>
 8000e80:	42a2      	cmp	r2, r4
 8000e82:	dc05      	bgt.n	8000e90 <__lesf2+0x7c>
 8000e84:	dbf2      	blt.n	8000e6c <__lesf2+0x58>
 8000e86:	42b5      	cmp	r5, r6
 8000e88:	d802      	bhi.n	8000e90 <__lesf2+0x7c>
 8000e8a:	d3ef      	bcc.n	8000e6c <__lesf2+0x58>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	e7ea      	b.n	8000e66 <__lesf2+0x52>
 8000e90:	4243      	negs	r3, r0
 8000e92:	4158      	adcs	r0, r3
 8000e94:	0040      	lsls	r0, r0, #1
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e5      	b.n	8000e66 <__lesf2+0x52>
 8000e9a:	46c0      	nop			; (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0244      	lsls	r4, r0, #9
 8000ea6:	0045      	lsls	r5, r0, #1
 8000ea8:	b5c0      	push	{r6, r7, lr}
 8000eaa:	0a64      	lsrs	r4, r4, #9
 8000eac:	1c0f      	adds	r7, r1, #0
 8000eae:	0e2d      	lsrs	r5, r5, #24
 8000eb0:	0fc6      	lsrs	r6, r0, #31
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_fmul+0x1c>
 8000eb6:	e08d      	b.n	8000fd4 <__aeabi_fmul+0x138>
 8000eb8:	2dff      	cmp	r5, #255	; 0xff
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fmul+0x22>
 8000ebc:	e092      	b.n	8000fe4 <__aeabi_fmul+0x148>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2080      	movs	r0, #128	; 0x80
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	00e4      	lsls	r4, r4, #3
 8000ec8:	04c0      	lsls	r0, r0, #19
 8000eca:	4304      	orrs	r4, r0
 8000ecc:	3d7f      	subs	r5, #127	; 0x7f
 8000ece:	0278      	lsls	r0, r7, #9
 8000ed0:	0a43      	lsrs	r3, r0, #9
 8000ed2:	4698      	mov	r8, r3
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0e1b      	lsrs	r3, r3, #24
 8000ed8:	0fff      	lsrs	r7, r7, #31
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_fmul+0x44>
 8000ede:	e070      	b.n	8000fc2 <__aeabi_fmul+0x126>
 8000ee0:	2bff      	cmp	r3, #255	; 0xff
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fmul+0x4a>
 8000ee4:	e086      	b.n	8000ff4 <__aeabi_fmul+0x158>
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	00d0      	lsls	r0, r2, #3
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	3b7f      	subs	r3, #127	; 0x7f
 8000eee:	18ed      	adds	r5, r5, r3
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	04d2      	lsls	r2, r2, #19
 8000ef4:	4302      	orrs	r2, r0
 8000ef6:	4690      	mov	r8, r2
 8000ef8:	469c      	mov	ip, r3
 8000efa:	0031      	movs	r1, r6
 8000efc:	464b      	mov	r3, r9
 8000efe:	4079      	eors	r1, r7
 8000f00:	1c68      	adds	r0, r5, #1
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d81c      	bhi.n	8000f40 <__aeabi_fmul+0xa4>
 8000f06:	4a76      	ldr	r2, [pc, #472]	; (80010e0 <__aeabi_fmul+0x244>)
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	58d3      	ldr	r3, [r2, r3]
 8000f0c:	469f      	mov	pc, r3
 8000f0e:	0039      	movs	r1, r7
 8000f10:	4644      	mov	r4, r8
 8000f12:	46e2      	mov	sl, ip
 8000f14:	4653      	mov	r3, sl
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d00f      	beq.n	8000f3a <__aeabi_fmul+0x9e>
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_fmul+0x84>
 8000f1e:	e0d7      	b.n	80010d0 <__aeabi_fmul+0x234>
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d137      	bne.n	8000f94 <__aeabi_fmul+0xf8>
 8000f24:	2000      	movs	r0, #0
 8000f26:	2400      	movs	r4, #0
 8000f28:	05c0      	lsls	r0, r0, #23
 8000f2a:	4320      	orrs	r0, r4
 8000f2c:	07c9      	lsls	r1, r1, #31
 8000f2e:	4308      	orrs	r0, r1
 8000f30:	bce0      	pop	{r5, r6, r7}
 8000f32:	46ba      	mov	sl, r7
 8000f34:	46b1      	mov	r9, r6
 8000f36:	46a8      	mov	r8, r5
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3a:	20ff      	movs	r0, #255	; 0xff
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	e7f3      	b.n	8000f28 <__aeabi_fmul+0x8c>
 8000f40:	0c26      	lsrs	r6, r4, #16
 8000f42:	0424      	lsls	r4, r4, #16
 8000f44:	0c22      	lsrs	r2, r4, #16
 8000f46:	4644      	mov	r4, r8
 8000f48:	0424      	lsls	r4, r4, #16
 8000f4a:	0c24      	lsrs	r4, r4, #16
 8000f4c:	4643      	mov	r3, r8
 8000f4e:	0027      	movs	r7, r4
 8000f50:	0c1b      	lsrs	r3, r3, #16
 8000f52:	4357      	muls	r7, r2
 8000f54:	4374      	muls	r4, r6
 8000f56:	435a      	muls	r2, r3
 8000f58:	435e      	muls	r6, r3
 8000f5a:	1912      	adds	r2, r2, r4
 8000f5c:	0c3b      	lsrs	r3, r7, #16
 8000f5e:	189b      	adds	r3, r3, r2
 8000f60:	429c      	cmp	r4, r3
 8000f62:	d903      	bls.n	8000f6c <__aeabi_fmul+0xd0>
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	0252      	lsls	r2, r2, #9
 8000f68:	4694      	mov	ip, r2
 8000f6a:	4466      	add	r6, ip
 8000f6c:	043f      	lsls	r7, r7, #16
 8000f6e:	041a      	lsls	r2, r3, #16
 8000f70:	0c3f      	lsrs	r7, r7, #16
 8000f72:	19d2      	adds	r2, r2, r7
 8000f74:	0194      	lsls	r4, r2, #6
 8000f76:	1e67      	subs	r7, r4, #1
 8000f78:	41bc      	sbcs	r4, r7
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	0e92      	lsrs	r2, r2, #26
 8000f7e:	199b      	adds	r3, r3, r6
 8000f80:	4314      	orrs	r4, r2
 8000f82:	019b      	lsls	r3, r3, #6
 8000f84:	431c      	orrs	r4, r3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	d400      	bmi.n	8000f8c <__aeabi_fmul+0xf0>
 8000f8a:	e09b      	b.n	80010c4 <__aeabi_fmul+0x228>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	0862      	lsrs	r2, r4, #1
 8000f90:	401c      	ands	r4, r3
 8000f92:	4314      	orrs	r4, r2
 8000f94:	0002      	movs	r2, r0
 8000f96:	327f      	adds	r2, #127	; 0x7f
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	dd64      	ble.n	8001066 <__aeabi_fmul+0x1ca>
 8000f9c:	0763      	lsls	r3, r4, #29
 8000f9e:	d004      	beq.n	8000faa <__aeabi_fmul+0x10e>
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	4023      	ands	r3, r4
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d000      	beq.n	8000faa <__aeabi_fmul+0x10e>
 8000fa8:	3404      	adds	r4, #4
 8000faa:	0123      	lsls	r3, r4, #4
 8000fac:	d503      	bpl.n	8000fb6 <__aeabi_fmul+0x11a>
 8000fae:	0002      	movs	r2, r0
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <__aeabi_fmul+0x248>)
 8000fb2:	3280      	adds	r2, #128	; 0x80
 8000fb4:	401c      	ands	r4, r3
 8000fb6:	2afe      	cmp	r2, #254	; 0xfe
 8000fb8:	dcbf      	bgt.n	8000f3a <__aeabi_fmul+0x9e>
 8000fba:	01a4      	lsls	r4, r4, #6
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	b2d0      	uxtb	r0, r2
 8000fc0:	e7b2      	b.n	8000f28 <__aeabi_fmul+0x8c>
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d13d      	bne.n	8001044 <__aeabi_fmul+0x1a8>
 8000fc8:	464a      	mov	r2, r9
 8000fca:	3301      	adds	r3, #1
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	4691      	mov	r9, r2
 8000fd0:	469c      	mov	ip, r3
 8000fd2:	e792      	b.n	8000efa <__aeabi_fmul+0x5e>
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d129      	bne.n	800102c <__aeabi_fmul+0x190>
 8000fd8:	2304      	movs	r3, #4
 8000fda:	4699      	mov	r9, r3
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	2500      	movs	r5, #0
 8000fe0:	469a      	mov	sl, r3
 8000fe2:	e774      	b.n	8000ece <__aeabi_fmul+0x32>
 8000fe4:	2c00      	cmp	r4, #0
 8000fe6:	d11b      	bne.n	8001020 <__aeabi_fmul+0x184>
 8000fe8:	2308      	movs	r3, #8
 8000fea:	4699      	mov	r9, r3
 8000fec:	3b06      	subs	r3, #6
 8000fee:	25ff      	movs	r5, #255	; 0xff
 8000ff0:	469a      	mov	sl, r3
 8000ff2:	e76c      	b.n	8000ece <__aeabi_fmul+0x32>
 8000ff4:	4643      	mov	r3, r8
 8000ff6:	35ff      	adds	r5, #255	; 0xff
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10b      	bne.n	8001014 <__aeabi_fmul+0x178>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	464a      	mov	r2, r9
 8001000:	431a      	orrs	r2, r3
 8001002:	4691      	mov	r9, r2
 8001004:	469c      	mov	ip, r3
 8001006:	e778      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001008:	4653      	mov	r3, sl
 800100a:	0031      	movs	r1, r6
 800100c:	2b02      	cmp	r3, #2
 800100e:	d000      	beq.n	8001012 <__aeabi_fmul+0x176>
 8001010:	e783      	b.n	8000f1a <__aeabi_fmul+0x7e>
 8001012:	e792      	b.n	8000f3a <__aeabi_fmul+0x9e>
 8001014:	2303      	movs	r3, #3
 8001016:	464a      	mov	r2, r9
 8001018:	431a      	orrs	r2, r3
 800101a:	4691      	mov	r9, r2
 800101c:	469c      	mov	ip, r3
 800101e:	e76c      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001020:	230c      	movs	r3, #12
 8001022:	4699      	mov	r9, r3
 8001024:	3b09      	subs	r3, #9
 8001026:	25ff      	movs	r5, #255	; 0xff
 8001028:	469a      	mov	sl, r3
 800102a:	e750      	b.n	8000ece <__aeabi_fmul+0x32>
 800102c:	0020      	movs	r0, r4
 800102e:	f002 f96f 	bl	8003310 <__clzsi2>
 8001032:	2576      	movs	r5, #118	; 0x76
 8001034:	1f43      	subs	r3, r0, #5
 8001036:	409c      	lsls	r4, r3
 8001038:	2300      	movs	r3, #0
 800103a:	426d      	negs	r5, r5
 800103c:	4699      	mov	r9, r3
 800103e:	469a      	mov	sl, r3
 8001040:	1a2d      	subs	r5, r5, r0
 8001042:	e744      	b.n	8000ece <__aeabi_fmul+0x32>
 8001044:	4640      	mov	r0, r8
 8001046:	f002 f963 	bl	8003310 <__clzsi2>
 800104a:	4642      	mov	r2, r8
 800104c:	1f43      	subs	r3, r0, #5
 800104e:	409a      	lsls	r2, r3
 8001050:	2300      	movs	r3, #0
 8001052:	1a2d      	subs	r5, r5, r0
 8001054:	4690      	mov	r8, r2
 8001056:	469c      	mov	ip, r3
 8001058:	3d76      	subs	r5, #118	; 0x76
 800105a:	e74e      	b.n	8000efa <__aeabi_fmul+0x5e>
 800105c:	2480      	movs	r4, #128	; 0x80
 800105e:	2100      	movs	r1, #0
 8001060:	20ff      	movs	r0, #255	; 0xff
 8001062:	03e4      	lsls	r4, r4, #15
 8001064:	e760      	b.n	8000f28 <__aeabi_fmul+0x8c>
 8001066:	2301      	movs	r3, #1
 8001068:	1a9b      	subs	r3, r3, r2
 800106a:	2b1b      	cmp	r3, #27
 800106c:	dd00      	ble.n	8001070 <__aeabi_fmul+0x1d4>
 800106e:	e759      	b.n	8000f24 <__aeabi_fmul+0x88>
 8001070:	0022      	movs	r2, r4
 8001072:	309e      	adds	r0, #158	; 0x9e
 8001074:	40da      	lsrs	r2, r3
 8001076:	4084      	lsls	r4, r0
 8001078:	0013      	movs	r3, r2
 800107a:	1e62      	subs	r2, r4, #1
 800107c:	4194      	sbcs	r4, r2
 800107e:	431c      	orrs	r4, r3
 8001080:	0763      	lsls	r3, r4, #29
 8001082:	d004      	beq.n	800108e <__aeabi_fmul+0x1f2>
 8001084:	230f      	movs	r3, #15
 8001086:	4023      	ands	r3, r4
 8001088:	2b04      	cmp	r3, #4
 800108a:	d000      	beq.n	800108e <__aeabi_fmul+0x1f2>
 800108c:	3404      	adds	r4, #4
 800108e:	0163      	lsls	r3, r4, #5
 8001090:	d51a      	bpl.n	80010c8 <__aeabi_fmul+0x22c>
 8001092:	2001      	movs	r0, #1
 8001094:	2400      	movs	r4, #0
 8001096:	e747      	b.n	8000f28 <__aeabi_fmul+0x8c>
 8001098:	2080      	movs	r0, #128	; 0x80
 800109a:	03c0      	lsls	r0, r0, #15
 800109c:	4204      	tst	r4, r0
 800109e:	d009      	beq.n	80010b4 <__aeabi_fmul+0x218>
 80010a0:	4643      	mov	r3, r8
 80010a2:	4203      	tst	r3, r0
 80010a4:	d106      	bne.n	80010b4 <__aeabi_fmul+0x218>
 80010a6:	4644      	mov	r4, r8
 80010a8:	4304      	orrs	r4, r0
 80010aa:	0264      	lsls	r4, r4, #9
 80010ac:	0039      	movs	r1, r7
 80010ae:	20ff      	movs	r0, #255	; 0xff
 80010b0:	0a64      	lsrs	r4, r4, #9
 80010b2:	e739      	b.n	8000f28 <__aeabi_fmul+0x8c>
 80010b4:	2080      	movs	r0, #128	; 0x80
 80010b6:	03c0      	lsls	r0, r0, #15
 80010b8:	4304      	orrs	r4, r0
 80010ba:	0264      	lsls	r4, r4, #9
 80010bc:	0031      	movs	r1, r6
 80010be:	20ff      	movs	r0, #255	; 0xff
 80010c0:	0a64      	lsrs	r4, r4, #9
 80010c2:	e731      	b.n	8000f28 <__aeabi_fmul+0x8c>
 80010c4:	0028      	movs	r0, r5
 80010c6:	e765      	b.n	8000f94 <__aeabi_fmul+0xf8>
 80010c8:	01a4      	lsls	r4, r4, #6
 80010ca:	2000      	movs	r0, #0
 80010cc:	0a64      	lsrs	r4, r4, #9
 80010ce:	e72b      	b.n	8000f28 <__aeabi_fmul+0x8c>
 80010d0:	2080      	movs	r0, #128	; 0x80
 80010d2:	03c0      	lsls	r0, r0, #15
 80010d4:	4304      	orrs	r4, r0
 80010d6:	0264      	lsls	r4, r4, #9
 80010d8:	20ff      	movs	r0, #255	; 0xff
 80010da:	0a64      	lsrs	r4, r4, #9
 80010dc:	e724      	b.n	8000f28 <__aeabi_fmul+0x8c>
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	0800d898 	.word	0x0800d898
 80010e4:	f7ffffff 	.word	0xf7ffffff

080010e8 <__aeabi_fsub>:
 80010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ea:	46ce      	mov	lr, r9
 80010ec:	4647      	mov	r7, r8
 80010ee:	0243      	lsls	r3, r0, #9
 80010f0:	0a5b      	lsrs	r3, r3, #9
 80010f2:	024e      	lsls	r6, r1, #9
 80010f4:	00da      	lsls	r2, r3, #3
 80010f6:	4694      	mov	ip, r2
 80010f8:	0a72      	lsrs	r2, r6, #9
 80010fa:	4691      	mov	r9, r2
 80010fc:	0045      	lsls	r5, r0, #1
 80010fe:	004a      	lsls	r2, r1, #1
 8001100:	b580      	push	{r7, lr}
 8001102:	0e2d      	lsrs	r5, r5, #24
 8001104:	001f      	movs	r7, r3
 8001106:	0fc4      	lsrs	r4, r0, #31
 8001108:	0e12      	lsrs	r2, r2, #24
 800110a:	0fc9      	lsrs	r1, r1, #31
 800110c:	09b6      	lsrs	r6, r6, #6
 800110e:	2aff      	cmp	r2, #255	; 0xff
 8001110:	d05b      	beq.n	80011ca <__aeabi_fsub+0xe2>
 8001112:	2001      	movs	r0, #1
 8001114:	4041      	eors	r1, r0
 8001116:	428c      	cmp	r4, r1
 8001118:	d039      	beq.n	800118e <__aeabi_fsub+0xa6>
 800111a:	1aa8      	subs	r0, r5, r2
 800111c:	2800      	cmp	r0, #0
 800111e:	dd5a      	ble.n	80011d6 <__aeabi_fsub+0xee>
 8001120:	2a00      	cmp	r2, #0
 8001122:	d06a      	beq.n	80011fa <__aeabi_fsub+0x112>
 8001124:	2dff      	cmp	r5, #255	; 0xff
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x42>
 8001128:	e0d9      	b.n	80012de <__aeabi_fsub+0x1f6>
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	04d2      	lsls	r2, r2, #19
 800112e:	4316      	orrs	r6, r2
 8001130:	281b      	cmp	r0, #27
 8001132:	dc00      	bgt.n	8001136 <__aeabi_fsub+0x4e>
 8001134:	e0e9      	b.n	800130a <__aeabi_fsub+0x222>
 8001136:	2001      	movs	r0, #1
 8001138:	4663      	mov	r3, ip
 800113a:	1a18      	subs	r0, r3, r0
 800113c:	0143      	lsls	r3, r0, #5
 800113e:	d400      	bmi.n	8001142 <__aeabi_fsub+0x5a>
 8001140:	e0b4      	b.n	80012ac <__aeabi_fsub+0x1c4>
 8001142:	0180      	lsls	r0, r0, #6
 8001144:	0987      	lsrs	r7, r0, #6
 8001146:	0038      	movs	r0, r7
 8001148:	f002 f8e2 	bl	8003310 <__clzsi2>
 800114c:	3805      	subs	r0, #5
 800114e:	4087      	lsls	r7, r0
 8001150:	4285      	cmp	r5, r0
 8001152:	dc00      	bgt.n	8001156 <__aeabi_fsub+0x6e>
 8001154:	e0cc      	b.n	80012f0 <__aeabi_fsub+0x208>
 8001156:	1a2d      	subs	r5, r5, r0
 8001158:	48b5      	ldr	r0, [pc, #724]	; (8001430 <__aeabi_fsub+0x348>)
 800115a:	4038      	ands	r0, r7
 800115c:	0743      	lsls	r3, r0, #29
 800115e:	d004      	beq.n	800116a <__aeabi_fsub+0x82>
 8001160:	230f      	movs	r3, #15
 8001162:	4003      	ands	r3, r0
 8001164:	2b04      	cmp	r3, #4
 8001166:	d000      	beq.n	800116a <__aeabi_fsub+0x82>
 8001168:	3004      	adds	r0, #4
 800116a:	0143      	lsls	r3, r0, #5
 800116c:	d400      	bmi.n	8001170 <__aeabi_fsub+0x88>
 800116e:	e0a0      	b.n	80012b2 <__aeabi_fsub+0x1ca>
 8001170:	1c6a      	adds	r2, r5, #1
 8001172:	2dfe      	cmp	r5, #254	; 0xfe
 8001174:	d100      	bne.n	8001178 <__aeabi_fsub+0x90>
 8001176:	e08d      	b.n	8001294 <__aeabi_fsub+0x1ac>
 8001178:	0180      	lsls	r0, r0, #6
 800117a:	0a47      	lsrs	r7, r0, #9
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	05d0      	lsls	r0, r2, #23
 8001180:	4338      	orrs	r0, r7
 8001182:	07e4      	lsls	r4, r4, #31
 8001184:	4320      	orrs	r0, r4
 8001186:	bcc0      	pop	{r6, r7}
 8001188:	46b9      	mov	r9, r7
 800118a:	46b0      	mov	r8, r6
 800118c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800118e:	1aa8      	subs	r0, r5, r2
 8001190:	4680      	mov	r8, r0
 8001192:	2800      	cmp	r0, #0
 8001194:	dd45      	ble.n	8001222 <__aeabi_fsub+0x13a>
 8001196:	2a00      	cmp	r2, #0
 8001198:	d070      	beq.n	800127c <__aeabi_fsub+0x194>
 800119a:	2dff      	cmp	r5, #255	; 0xff
 800119c:	d100      	bne.n	80011a0 <__aeabi_fsub+0xb8>
 800119e:	e09e      	b.n	80012de <__aeabi_fsub+0x1f6>
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	04db      	lsls	r3, r3, #19
 80011a4:	431e      	orrs	r6, r3
 80011a6:	4643      	mov	r3, r8
 80011a8:	2b1b      	cmp	r3, #27
 80011aa:	dc00      	bgt.n	80011ae <__aeabi_fsub+0xc6>
 80011ac:	e0d2      	b.n	8001354 <__aeabi_fsub+0x26c>
 80011ae:	2001      	movs	r0, #1
 80011b0:	4460      	add	r0, ip
 80011b2:	0143      	lsls	r3, r0, #5
 80011b4:	d57a      	bpl.n	80012ac <__aeabi_fsub+0x1c4>
 80011b6:	3501      	adds	r5, #1
 80011b8:	2dff      	cmp	r5, #255	; 0xff
 80011ba:	d06b      	beq.n	8001294 <__aeabi_fsub+0x1ac>
 80011bc:	2301      	movs	r3, #1
 80011be:	4a9d      	ldr	r2, [pc, #628]	; (8001434 <__aeabi_fsub+0x34c>)
 80011c0:	4003      	ands	r3, r0
 80011c2:	0840      	lsrs	r0, r0, #1
 80011c4:	4010      	ands	r0, r2
 80011c6:	4318      	orrs	r0, r3
 80011c8:	e7c8      	b.n	800115c <__aeabi_fsub+0x74>
 80011ca:	2e00      	cmp	r6, #0
 80011cc:	d020      	beq.n	8001210 <__aeabi_fsub+0x128>
 80011ce:	428c      	cmp	r4, r1
 80011d0:	d023      	beq.n	800121a <__aeabi_fsub+0x132>
 80011d2:	0028      	movs	r0, r5
 80011d4:	38ff      	subs	r0, #255	; 0xff
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d039      	beq.n	800124e <__aeabi_fsub+0x166>
 80011da:	1b57      	subs	r7, r2, r5
 80011dc:	2d00      	cmp	r5, #0
 80011de:	d000      	beq.n	80011e2 <__aeabi_fsub+0xfa>
 80011e0:	e09d      	b.n	800131e <__aeabi_fsub+0x236>
 80011e2:	4663      	mov	r3, ip
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_fsub+0x102>
 80011e8:	e0db      	b.n	80013a2 <__aeabi_fsub+0x2ba>
 80011ea:	1e7b      	subs	r3, r7, #1
 80011ec:	2f01      	cmp	r7, #1
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x10a>
 80011f0:	e10d      	b.n	800140e <__aeabi_fsub+0x326>
 80011f2:	2fff      	cmp	r7, #255	; 0xff
 80011f4:	d071      	beq.n	80012da <__aeabi_fsub+0x1f2>
 80011f6:	001f      	movs	r7, r3
 80011f8:	e098      	b.n	800132c <__aeabi_fsub+0x244>
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d100      	bne.n	8001200 <__aeabi_fsub+0x118>
 80011fe:	e0a7      	b.n	8001350 <__aeabi_fsub+0x268>
 8001200:	1e42      	subs	r2, r0, #1
 8001202:	2801      	cmp	r0, #1
 8001204:	d100      	bne.n	8001208 <__aeabi_fsub+0x120>
 8001206:	e0e6      	b.n	80013d6 <__aeabi_fsub+0x2ee>
 8001208:	28ff      	cmp	r0, #255	; 0xff
 800120a:	d068      	beq.n	80012de <__aeabi_fsub+0x1f6>
 800120c:	0010      	movs	r0, r2
 800120e:	e78f      	b.n	8001130 <__aeabi_fsub+0x48>
 8001210:	2001      	movs	r0, #1
 8001212:	4041      	eors	r1, r0
 8001214:	42a1      	cmp	r1, r4
 8001216:	d000      	beq.n	800121a <__aeabi_fsub+0x132>
 8001218:	e77f      	b.n	800111a <__aeabi_fsub+0x32>
 800121a:	20ff      	movs	r0, #255	; 0xff
 800121c:	4240      	negs	r0, r0
 800121e:	4680      	mov	r8, r0
 8001220:	44a8      	add	r8, r5
 8001222:	4640      	mov	r0, r8
 8001224:	2800      	cmp	r0, #0
 8001226:	d038      	beq.n	800129a <__aeabi_fsub+0x1b2>
 8001228:	1b51      	subs	r1, r2, r5
 800122a:	2d00      	cmp	r5, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_fsub+0x148>
 800122e:	e0ae      	b.n	800138e <__aeabi_fsub+0x2a6>
 8001230:	2aff      	cmp	r2, #255	; 0xff
 8001232:	d100      	bne.n	8001236 <__aeabi_fsub+0x14e>
 8001234:	e0df      	b.n	80013f6 <__aeabi_fsub+0x30e>
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	4660      	mov	r0, ip
 800123a:	04db      	lsls	r3, r3, #19
 800123c:	4318      	orrs	r0, r3
 800123e:	4684      	mov	ip, r0
 8001240:	291b      	cmp	r1, #27
 8001242:	dc00      	bgt.n	8001246 <__aeabi_fsub+0x15e>
 8001244:	e0d9      	b.n	80013fa <__aeabi_fsub+0x312>
 8001246:	2001      	movs	r0, #1
 8001248:	0015      	movs	r5, r2
 800124a:	1980      	adds	r0, r0, r6
 800124c:	e7b1      	b.n	80011b2 <__aeabi_fsub+0xca>
 800124e:	20fe      	movs	r0, #254	; 0xfe
 8001250:	1c6a      	adds	r2, r5, #1
 8001252:	4210      	tst	r0, r2
 8001254:	d171      	bne.n	800133a <__aeabi_fsub+0x252>
 8001256:	2d00      	cmp	r5, #0
 8001258:	d000      	beq.n	800125c <__aeabi_fsub+0x174>
 800125a:	e0a6      	b.n	80013aa <__aeabi_fsub+0x2c2>
 800125c:	4663      	mov	r3, ip
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x17c>
 8001262:	e0d9      	b.n	8001418 <__aeabi_fsub+0x330>
 8001264:	2200      	movs	r2, #0
 8001266:	2e00      	cmp	r6, #0
 8001268:	d100      	bne.n	800126c <__aeabi_fsub+0x184>
 800126a:	e788      	b.n	800117e <__aeabi_fsub+0x96>
 800126c:	1b98      	subs	r0, r3, r6
 800126e:	0143      	lsls	r3, r0, #5
 8001270:	d400      	bmi.n	8001274 <__aeabi_fsub+0x18c>
 8001272:	e0e1      	b.n	8001438 <__aeabi_fsub+0x350>
 8001274:	4663      	mov	r3, ip
 8001276:	000c      	movs	r4, r1
 8001278:	1af0      	subs	r0, r6, r3
 800127a:	e76f      	b.n	800115c <__aeabi_fsub+0x74>
 800127c:	2e00      	cmp	r6, #0
 800127e:	d100      	bne.n	8001282 <__aeabi_fsub+0x19a>
 8001280:	e0b7      	b.n	80013f2 <__aeabi_fsub+0x30a>
 8001282:	0002      	movs	r2, r0
 8001284:	3a01      	subs	r2, #1
 8001286:	2801      	cmp	r0, #1
 8001288:	d100      	bne.n	800128c <__aeabi_fsub+0x1a4>
 800128a:	e09c      	b.n	80013c6 <__aeabi_fsub+0x2de>
 800128c:	28ff      	cmp	r0, #255	; 0xff
 800128e:	d026      	beq.n	80012de <__aeabi_fsub+0x1f6>
 8001290:	4690      	mov	r8, r2
 8001292:	e788      	b.n	80011a6 <__aeabi_fsub+0xbe>
 8001294:	22ff      	movs	r2, #255	; 0xff
 8001296:	2700      	movs	r7, #0
 8001298:	e771      	b.n	800117e <__aeabi_fsub+0x96>
 800129a:	20fe      	movs	r0, #254	; 0xfe
 800129c:	1c6a      	adds	r2, r5, #1
 800129e:	4210      	tst	r0, r2
 80012a0:	d064      	beq.n	800136c <__aeabi_fsub+0x284>
 80012a2:	2aff      	cmp	r2, #255	; 0xff
 80012a4:	d0f6      	beq.n	8001294 <__aeabi_fsub+0x1ac>
 80012a6:	0015      	movs	r5, r2
 80012a8:	4466      	add	r6, ip
 80012aa:	0870      	lsrs	r0, r6, #1
 80012ac:	0743      	lsls	r3, r0, #29
 80012ae:	d000      	beq.n	80012b2 <__aeabi_fsub+0x1ca>
 80012b0:	e756      	b.n	8001160 <__aeabi_fsub+0x78>
 80012b2:	08c3      	lsrs	r3, r0, #3
 80012b4:	2dff      	cmp	r5, #255	; 0xff
 80012b6:	d012      	beq.n	80012de <__aeabi_fsub+0x1f6>
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	0a5f      	lsrs	r7, r3, #9
 80012bc:	b2ea      	uxtb	r2, r5
 80012be:	e75e      	b.n	800117e <__aeabi_fsub+0x96>
 80012c0:	4662      	mov	r2, ip
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d100      	bne.n	80012c8 <__aeabi_fsub+0x1e0>
 80012c6:	e096      	b.n	80013f6 <__aeabi_fsub+0x30e>
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d008      	beq.n	80012de <__aeabi_fsub+0x1f6>
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	03d2      	lsls	r2, r2, #15
 80012d0:	4213      	tst	r3, r2
 80012d2:	d004      	beq.n	80012de <__aeabi_fsub+0x1f6>
 80012d4:	4648      	mov	r0, r9
 80012d6:	4210      	tst	r0, r2
 80012d8:	d101      	bne.n	80012de <__aeabi_fsub+0x1f6>
 80012da:	000c      	movs	r4, r1
 80012dc:	464b      	mov	r3, r9
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0d8      	beq.n	8001294 <__aeabi_fsub+0x1ac>
 80012e2:	2780      	movs	r7, #128	; 0x80
 80012e4:	03ff      	lsls	r7, r7, #15
 80012e6:	431f      	orrs	r7, r3
 80012e8:	027f      	lsls	r7, r7, #9
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	0a7f      	lsrs	r7, r7, #9
 80012ee:	e746      	b.n	800117e <__aeabi_fsub+0x96>
 80012f0:	2320      	movs	r3, #32
 80012f2:	003a      	movs	r2, r7
 80012f4:	1b45      	subs	r5, r0, r5
 80012f6:	0038      	movs	r0, r7
 80012f8:	3501      	adds	r5, #1
 80012fa:	40ea      	lsrs	r2, r5
 80012fc:	1b5d      	subs	r5, r3, r5
 80012fe:	40a8      	lsls	r0, r5
 8001300:	1e43      	subs	r3, r0, #1
 8001302:	4198      	sbcs	r0, r3
 8001304:	2500      	movs	r5, #0
 8001306:	4310      	orrs	r0, r2
 8001308:	e728      	b.n	800115c <__aeabi_fsub+0x74>
 800130a:	2320      	movs	r3, #32
 800130c:	1a1b      	subs	r3, r3, r0
 800130e:	0032      	movs	r2, r6
 8001310:	409e      	lsls	r6, r3
 8001312:	40c2      	lsrs	r2, r0
 8001314:	0030      	movs	r0, r6
 8001316:	1e43      	subs	r3, r0, #1
 8001318:	4198      	sbcs	r0, r3
 800131a:	4310      	orrs	r0, r2
 800131c:	e70c      	b.n	8001138 <__aeabi_fsub+0x50>
 800131e:	2aff      	cmp	r2, #255	; 0xff
 8001320:	d0db      	beq.n	80012da <__aeabi_fsub+0x1f2>
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	4660      	mov	r0, ip
 8001326:	04db      	lsls	r3, r3, #19
 8001328:	4318      	orrs	r0, r3
 800132a:	4684      	mov	ip, r0
 800132c:	2f1b      	cmp	r7, #27
 800132e:	dd56      	ble.n	80013de <__aeabi_fsub+0x2f6>
 8001330:	2001      	movs	r0, #1
 8001332:	000c      	movs	r4, r1
 8001334:	0015      	movs	r5, r2
 8001336:	1a30      	subs	r0, r6, r0
 8001338:	e700      	b.n	800113c <__aeabi_fsub+0x54>
 800133a:	4663      	mov	r3, ip
 800133c:	1b9f      	subs	r7, r3, r6
 800133e:	017b      	lsls	r3, r7, #5
 8001340:	d43d      	bmi.n	80013be <__aeabi_fsub+0x2d6>
 8001342:	2f00      	cmp	r7, #0
 8001344:	d000      	beq.n	8001348 <__aeabi_fsub+0x260>
 8001346:	e6fe      	b.n	8001146 <__aeabi_fsub+0x5e>
 8001348:	2400      	movs	r4, #0
 800134a:	2200      	movs	r2, #0
 800134c:	2700      	movs	r7, #0
 800134e:	e716      	b.n	800117e <__aeabi_fsub+0x96>
 8001350:	0005      	movs	r5, r0
 8001352:	e7af      	b.n	80012b4 <__aeabi_fsub+0x1cc>
 8001354:	0032      	movs	r2, r6
 8001356:	4643      	mov	r3, r8
 8001358:	4641      	mov	r1, r8
 800135a:	40da      	lsrs	r2, r3
 800135c:	2320      	movs	r3, #32
 800135e:	1a5b      	subs	r3, r3, r1
 8001360:	409e      	lsls	r6, r3
 8001362:	0030      	movs	r0, r6
 8001364:	1e43      	subs	r3, r0, #1
 8001366:	4198      	sbcs	r0, r3
 8001368:	4310      	orrs	r0, r2
 800136a:	e721      	b.n	80011b0 <__aeabi_fsub+0xc8>
 800136c:	2d00      	cmp	r5, #0
 800136e:	d1a7      	bne.n	80012c0 <__aeabi_fsub+0x1d8>
 8001370:	4663      	mov	r3, ip
 8001372:	2b00      	cmp	r3, #0
 8001374:	d059      	beq.n	800142a <__aeabi_fsub+0x342>
 8001376:	2200      	movs	r2, #0
 8001378:	2e00      	cmp	r6, #0
 800137a:	d100      	bne.n	800137e <__aeabi_fsub+0x296>
 800137c:	e6ff      	b.n	800117e <__aeabi_fsub+0x96>
 800137e:	0030      	movs	r0, r6
 8001380:	4460      	add	r0, ip
 8001382:	0143      	lsls	r3, r0, #5
 8001384:	d592      	bpl.n	80012ac <__aeabi_fsub+0x1c4>
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <__aeabi_fsub+0x348>)
 8001388:	3501      	adds	r5, #1
 800138a:	4018      	ands	r0, r3
 800138c:	e78e      	b.n	80012ac <__aeabi_fsub+0x1c4>
 800138e:	4663      	mov	r3, ip
 8001390:	2b00      	cmp	r3, #0
 8001392:	d047      	beq.n	8001424 <__aeabi_fsub+0x33c>
 8001394:	1e4b      	subs	r3, r1, #1
 8001396:	2901      	cmp	r1, #1
 8001398:	d015      	beq.n	80013c6 <__aeabi_fsub+0x2de>
 800139a:	29ff      	cmp	r1, #255	; 0xff
 800139c:	d02b      	beq.n	80013f6 <__aeabi_fsub+0x30e>
 800139e:	0019      	movs	r1, r3
 80013a0:	e74e      	b.n	8001240 <__aeabi_fsub+0x158>
 80013a2:	000c      	movs	r4, r1
 80013a4:	464b      	mov	r3, r9
 80013a6:	003d      	movs	r5, r7
 80013a8:	e784      	b.n	80012b4 <__aeabi_fsub+0x1cc>
 80013aa:	4662      	mov	r2, ip
 80013ac:	2a00      	cmp	r2, #0
 80013ae:	d18b      	bne.n	80012c8 <__aeabi_fsub+0x1e0>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d192      	bne.n	80012da <__aeabi_fsub+0x1f2>
 80013b4:	2780      	movs	r7, #128	; 0x80
 80013b6:	2400      	movs	r4, #0
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	03ff      	lsls	r7, r7, #15
 80013bc:	e6df      	b.n	800117e <__aeabi_fsub+0x96>
 80013be:	4663      	mov	r3, ip
 80013c0:	000c      	movs	r4, r1
 80013c2:	1af7      	subs	r7, r6, r3
 80013c4:	e6bf      	b.n	8001146 <__aeabi_fsub+0x5e>
 80013c6:	0030      	movs	r0, r6
 80013c8:	4460      	add	r0, ip
 80013ca:	2501      	movs	r5, #1
 80013cc:	0143      	lsls	r3, r0, #5
 80013ce:	d400      	bmi.n	80013d2 <__aeabi_fsub+0x2ea>
 80013d0:	e76c      	b.n	80012ac <__aeabi_fsub+0x1c4>
 80013d2:	2502      	movs	r5, #2
 80013d4:	e6f2      	b.n	80011bc <__aeabi_fsub+0xd4>
 80013d6:	4663      	mov	r3, ip
 80013d8:	2501      	movs	r5, #1
 80013da:	1b98      	subs	r0, r3, r6
 80013dc:	e6ae      	b.n	800113c <__aeabi_fsub+0x54>
 80013de:	2320      	movs	r3, #32
 80013e0:	4664      	mov	r4, ip
 80013e2:	4660      	mov	r0, ip
 80013e4:	40fc      	lsrs	r4, r7
 80013e6:	1bdf      	subs	r7, r3, r7
 80013e8:	40b8      	lsls	r0, r7
 80013ea:	1e43      	subs	r3, r0, #1
 80013ec:	4198      	sbcs	r0, r3
 80013ee:	4320      	orrs	r0, r4
 80013f0:	e79f      	b.n	8001332 <__aeabi_fsub+0x24a>
 80013f2:	0005      	movs	r5, r0
 80013f4:	e75e      	b.n	80012b4 <__aeabi_fsub+0x1cc>
 80013f6:	464b      	mov	r3, r9
 80013f8:	e771      	b.n	80012de <__aeabi_fsub+0x1f6>
 80013fa:	2320      	movs	r3, #32
 80013fc:	4665      	mov	r5, ip
 80013fe:	4660      	mov	r0, ip
 8001400:	40cd      	lsrs	r5, r1
 8001402:	1a59      	subs	r1, r3, r1
 8001404:	4088      	lsls	r0, r1
 8001406:	1e43      	subs	r3, r0, #1
 8001408:	4198      	sbcs	r0, r3
 800140a:	4328      	orrs	r0, r5
 800140c:	e71c      	b.n	8001248 <__aeabi_fsub+0x160>
 800140e:	4663      	mov	r3, ip
 8001410:	000c      	movs	r4, r1
 8001412:	2501      	movs	r5, #1
 8001414:	1af0      	subs	r0, r6, r3
 8001416:	e691      	b.n	800113c <__aeabi_fsub+0x54>
 8001418:	2e00      	cmp	r6, #0
 800141a:	d095      	beq.n	8001348 <__aeabi_fsub+0x260>
 800141c:	000c      	movs	r4, r1
 800141e:	464f      	mov	r7, r9
 8001420:	2200      	movs	r2, #0
 8001422:	e6ac      	b.n	800117e <__aeabi_fsub+0x96>
 8001424:	464b      	mov	r3, r9
 8001426:	000d      	movs	r5, r1
 8001428:	e744      	b.n	80012b4 <__aeabi_fsub+0x1cc>
 800142a:	464f      	mov	r7, r9
 800142c:	2200      	movs	r2, #0
 800142e:	e6a6      	b.n	800117e <__aeabi_fsub+0x96>
 8001430:	fbffffff 	.word	0xfbffffff
 8001434:	7dffffff 	.word	0x7dffffff
 8001438:	2800      	cmp	r0, #0
 800143a:	d000      	beq.n	800143e <__aeabi_fsub+0x356>
 800143c:	e736      	b.n	80012ac <__aeabi_fsub+0x1c4>
 800143e:	2400      	movs	r4, #0
 8001440:	2700      	movs	r7, #0
 8001442:	e69c      	b.n	800117e <__aeabi_fsub+0x96>

08001444 <__aeabi_f2iz>:
 8001444:	0241      	lsls	r1, r0, #9
 8001446:	0042      	lsls	r2, r0, #1
 8001448:	0fc3      	lsrs	r3, r0, #31
 800144a:	0a49      	lsrs	r1, r1, #9
 800144c:	2000      	movs	r0, #0
 800144e:	0e12      	lsrs	r2, r2, #24
 8001450:	2a7e      	cmp	r2, #126	; 0x7e
 8001452:	dd03      	ble.n	800145c <__aeabi_f2iz+0x18>
 8001454:	2a9d      	cmp	r2, #157	; 0x9d
 8001456:	dd02      	ble.n	800145e <__aeabi_f2iz+0x1a>
 8001458:	4a09      	ldr	r2, [pc, #36]	; (8001480 <__aeabi_f2iz+0x3c>)
 800145a:	1898      	adds	r0, r3, r2
 800145c:	4770      	bx	lr
 800145e:	2080      	movs	r0, #128	; 0x80
 8001460:	0400      	lsls	r0, r0, #16
 8001462:	4301      	orrs	r1, r0
 8001464:	2a95      	cmp	r2, #149	; 0x95
 8001466:	dc07      	bgt.n	8001478 <__aeabi_f2iz+0x34>
 8001468:	2096      	movs	r0, #150	; 0x96
 800146a:	1a82      	subs	r2, r0, r2
 800146c:	40d1      	lsrs	r1, r2
 800146e:	4248      	negs	r0, r1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f3      	bne.n	800145c <__aeabi_f2iz+0x18>
 8001474:	0008      	movs	r0, r1
 8001476:	e7f1      	b.n	800145c <__aeabi_f2iz+0x18>
 8001478:	3a96      	subs	r2, #150	; 0x96
 800147a:	4091      	lsls	r1, r2
 800147c:	e7f7      	b.n	800146e <__aeabi_f2iz+0x2a>
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	7fffffff 	.word	0x7fffffff

08001484 <__aeabi_i2f>:
 8001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001486:	2800      	cmp	r0, #0
 8001488:	d013      	beq.n	80014b2 <__aeabi_i2f+0x2e>
 800148a:	17c3      	asrs	r3, r0, #31
 800148c:	18c6      	adds	r6, r0, r3
 800148e:	405e      	eors	r6, r3
 8001490:	0fc4      	lsrs	r4, r0, #31
 8001492:	0030      	movs	r0, r6
 8001494:	f001 ff3c 	bl	8003310 <__clzsi2>
 8001498:	239e      	movs	r3, #158	; 0x9e
 800149a:	0005      	movs	r5, r0
 800149c:	1a1b      	subs	r3, r3, r0
 800149e:	2b96      	cmp	r3, #150	; 0x96
 80014a0:	dc0f      	bgt.n	80014c2 <__aeabi_i2f+0x3e>
 80014a2:	2808      	cmp	r0, #8
 80014a4:	dd01      	ble.n	80014aa <__aeabi_i2f+0x26>
 80014a6:	3d08      	subs	r5, #8
 80014a8:	40ae      	lsls	r6, r5
 80014aa:	0276      	lsls	r6, r6, #9
 80014ac:	0a76      	lsrs	r6, r6, #9
 80014ae:	b2d8      	uxtb	r0, r3
 80014b0:	e002      	b.n	80014b8 <__aeabi_i2f+0x34>
 80014b2:	2400      	movs	r4, #0
 80014b4:	2000      	movs	r0, #0
 80014b6:	2600      	movs	r6, #0
 80014b8:	05c0      	lsls	r0, r0, #23
 80014ba:	4330      	orrs	r0, r6
 80014bc:	07e4      	lsls	r4, r4, #31
 80014be:	4320      	orrs	r0, r4
 80014c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014c2:	2b99      	cmp	r3, #153	; 0x99
 80014c4:	dd0c      	ble.n	80014e0 <__aeabi_i2f+0x5c>
 80014c6:	2205      	movs	r2, #5
 80014c8:	0031      	movs	r1, r6
 80014ca:	1a12      	subs	r2, r2, r0
 80014cc:	40d1      	lsrs	r1, r2
 80014ce:	000a      	movs	r2, r1
 80014d0:	0001      	movs	r1, r0
 80014d2:	0030      	movs	r0, r6
 80014d4:	311b      	adds	r1, #27
 80014d6:	4088      	lsls	r0, r1
 80014d8:	1e41      	subs	r1, r0, #1
 80014da:	4188      	sbcs	r0, r1
 80014dc:	4302      	orrs	r2, r0
 80014de:	0016      	movs	r6, r2
 80014e0:	2d05      	cmp	r5, #5
 80014e2:	dc12      	bgt.n	800150a <__aeabi_i2f+0x86>
 80014e4:	0031      	movs	r1, r6
 80014e6:	4f0d      	ldr	r7, [pc, #52]	; (800151c <__aeabi_i2f+0x98>)
 80014e8:	4039      	ands	r1, r7
 80014ea:	0772      	lsls	r2, r6, #29
 80014ec:	d009      	beq.n	8001502 <__aeabi_i2f+0x7e>
 80014ee:	200f      	movs	r0, #15
 80014f0:	4030      	ands	r0, r6
 80014f2:	2804      	cmp	r0, #4
 80014f4:	d005      	beq.n	8001502 <__aeabi_i2f+0x7e>
 80014f6:	3104      	adds	r1, #4
 80014f8:	014a      	lsls	r2, r1, #5
 80014fa:	d502      	bpl.n	8001502 <__aeabi_i2f+0x7e>
 80014fc:	239f      	movs	r3, #159	; 0x9f
 80014fe:	4039      	ands	r1, r7
 8001500:	1b5b      	subs	r3, r3, r5
 8001502:	0189      	lsls	r1, r1, #6
 8001504:	0a4e      	lsrs	r6, r1, #9
 8001506:	b2d8      	uxtb	r0, r3
 8001508:	e7d6      	b.n	80014b8 <__aeabi_i2f+0x34>
 800150a:	1f6a      	subs	r2, r5, #5
 800150c:	4096      	lsls	r6, r2
 800150e:	0031      	movs	r1, r6
 8001510:	4f02      	ldr	r7, [pc, #8]	; (800151c <__aeabi_i2f+0x98>)
 8001512:	4039      	ands	r1, r7
 8001514:	0772      	lsls	r2, r6, #29
 8001516:	d0f4      	beq.n	8001502 <__aeabi_i2f+0x7e>
 8001518:	e7e9      	b.n	80014ee <__aeabi_i2f+0x6a>
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	fbffffff 	.word	0xfbffffff

08001520 <__aeabi_ui2f>:
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	1e05      	subs	r5, r0, #0
 8001524:	d00e      	beq.n	8001544 <__aeabi_ui2f+0x24>
 8001526:	f001 fef3 	bl	8003310 <__clzsi2>
 800152a:	239e      	movs	r3, #158	; 0x9e
 800152c:	0004      	movs	r4, r0
 800152e:	1a1b      	subs	r3, r3, r0
 8001530:	2b96      	cmp	r3, #150	; 0x96
 8001532:	dc0c      	bgt.n	800154e <__aeabi_ui2f+0x2e>
 8001534:	2808      	cmp	r0, #8
 8001536:	dd01      	ble.n	800153c <__aeabi_ui2f+0x1c>
 8001538:	3c08      	subs	r4, #8
 800153a:	40a5      	lsls	r5, r4
 800153c:	026d      	lsls	r5, r5, #9
 800153e:	0a6d      	lsrs	r5, r5, #9
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	e001      	b.n	8001548 <__aeabi_ui2f+0x28>
 8001544:	2000      	movs	r0, #0
 8001546:	2500      	movs	r5, #0
 8001548:	05c0      	lsls	r0, r0, #23
 800154a:	4328      	orrs	r0, r5
 800154c:	bd70      	pop	{r4, r5, r6, pc}
 800154e:	2b99      	cmp	r3, #153	; 0x99
 8001550:	dd09      	ble.n	8001566 <__aeabi_ui2f+0x46>
 8001552:	0002      	movs	r2, r0
 8001554:	0029      	movs	r1, r5
 8001556:	321b      	adds	r2, #27
 8001558:	4091      	lsls	r1, r2
 800155a:	1e4a      	subs	r2, r1, #1
 800155c:	4191      	sbcs	r1, r2
 800155e:	2205      	movs	r2, #5
 8001560:	1a12      	subs	r2, r2, r0
 8001562:	40d5      	lsrs	r5, r2
 8001564:	430d      	orrs	r5, r1
 8001566:	2c05      	cmp	r4, #5
 8001568:	dc12      	bgt.n	8001590 <__aeabi_ui2f+0x70>
 800156a:	0029      	movs	r1, r5
 800156c:	4e0c      	ldr	r6, [pc, #48]	; (80015a0 <__aeabi_ui2f+0x80>)
 800156e:	4031      	ands	r1, r6
 8001570:	076a      	lsls	r2, r5, #29
 8001572:	d009      	beq.n	8001588 <__aeabi_ui2f+0x68>
 8001574:	200f      	movs	r0, #15
 8001576:	4028      	ands	r0, r5
 8001578:	2804      	cmp	r0, #4
 800157a:	d005      	beq.n	8001588 <__aeabi_ui2f+0x68>
 800157c:	3104      	adds	r1, #4
 800157e:	014a      	lsls	r2, r1, #5
 8001580:	d502      	bpl.n	8001588 <__aeabi_ui2f+0x68>
 8001582:	239f      	movs	r3, #159	; 0x9f
 8001584:	4031      	ands	r1, r6
 8001586:	1b1b      	subs	r3, r3, r4
 8001588:	0189      	lsls	r1, r1, #6
 800158a:	0a4d      	lsrs	r5, r1, #9
 800158c:	b2d8      	uxtb	r0, r3
 800158e:	e7db      	b.n	8001548 <__aeabi_ui2f+0x28>
 8001590:	1f62      	subs	r2, r4, #5
 8001592:	4095      	lsls	r5, r2
 8001594:	0029      	movs	r1, r5
 8001596:	4e02      	ldr	r6, [pc, #8]	; (80015a0 <__aeabi_ui2f+0x80>)
 8001598:	4031      	ands	r1, r6
 800159a:	076a      	lsls	r2, r5, #29
 800159c:	d0f4      	beq.n	8001588 <__aeabi_ui2f+0x68>
 800159e:	e7e9      	b.n	8001574 <__aeabi_ui2f+0x54>
 80015a0:	fbffffff 	.word	0xfbffffff

080015a4 <__aeabi_dadd>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	464f      	mov	r7, r9
 80015a8:	4646      	mov	r6, r8
 80015aa:	46d6      	mov	lr, sl
 80015ac:	000d      	movs	r5, r1
 80015ae:	0004      	movs	r4, r0
 80015b0:	b5c0      	push	{r6, r7, lr}
 80015b2:	001f      	movs	r7, r3
 80015b4:	0011      	movs	r1, r2
 80015b6:	0328      	lsls	r0, r5, #12
 80015b8:	0f62      	lsrs	r2, r4, #29
 80015ba:	0a40      	lsrs	r0, r0, #9
 80015bc:	4310      	orrs	r0, r2
 80015be:	007a      	lsls	r2, r7, #1
 80015c0:	0d52      	lsrs	r2, r2, #21
 80015c2:	00e3      	lsls	r3, r4, #3
 80015c4:	033c      	lsls	r4, r7, #12
 80015c6:	4691      	mov	r9, r2
 80015c8:	0a64      	lsrs	r4, r4, #9
 80015ca:	0ffa      	lsrs	r2, r7, #31
 80015cc:	0f4f      	lsrs	r7, r1, #29
 80015ce:	006e      	lsls	r6, r5, #1
 80015d0:	4327      	orrs	r7, r4
 80015d2:	4692      	mov	sl, r2
 80015d4:	46b8      	mov	r8, r7
 80015d6:	0d76      	lsrs	r6, r6, #21
 80015d8:	0fed      	lsrs	r5, r5, #31
 80015da:	00c9      	lsls	r1, r1, #3
 80015dc:	4295      	cmp	r5, r2
 80015de:	d100      	bne.n	80015e2 <__aeabi_dadd+0x3e>
 80015e0:	e099      	b.n	8001716 <__aeabi_dadd+0x172>
 80015e2:	464c      	mov	r4, r9
 80015e4:	1b34      	subs	r4, r6, r4
 80015e6:	46a4      	mov	ip, r4
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	dc00      	bgt.n	80015ee <__aeabi_dadd+0x4a>
 80015ec:	e07c      	b.n	80016e8 <__aeabi_dadd+0x144>
 80015ee:	464a      	mov	r2, r9
 80015f0:	2a00      	cmp	r2, #0
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dadd+0x52>
 80015f4:	e0b8      	b.n	8001768 <__aeabi_dadd+0x1c4>
 80015f6:	4ac5      	ldr	r2, [pc, #788]	; (800190c <__aeabi_dadd+0x368>)
 80015f8:	4296      	cmp	r6, r2
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0x5a>
 80015fc:	e11c      	b.n	8001838 <__aeabi_dadd+0x294>
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	003c      	movs	r4, r7
 8001602:	0412      	lsls	r2, r2, #16
 8001604:	4314      	orrs	r4, r2
 8001606:	46a0      	mov	r8, r4
 8001608:	4662      	mov	r2, ip
 800160a:	2a38      	cmp	r2, #56	; 0x38
 800160c:	dd00      	ble.n	8001610 <__aeabi_dadd+0x6c>
 800160e:	e161      	b.n	80018d4 <__aeabi_dadd+0x330>
 8001610:	2a1f      	cmp	r2, #31
 8001612:	dd00      	ble.n	8001616 <__aeabi_dadd+0x72>
 8001614:	e1cc      	b.n	80019b0 <__aeabi_dadd+0x40c>
 8001616:	4664      	mov	r4, ip
 8001618:	2220      	movs	r2, #32
 800161a:	1b12      	subs	r2, r2, r4
 800161c:	4644      	mov	r4, r8
 800161e:	4094      	lsls	r4, r2
 8001620:	000f      	movs	r7, r1
 8001622:	46a1      	mov	r9, r4
 8001624:	4664      	mov	r4, ip
 8001626:	4091      	lsls	r1, r2
 8001628:	40e7      	lsrs	r7, r4
 800162a:	464c      	mov	r4, r9
 800162c:	1e4a      	subs	r2, r1, #1
 800162e:	4191      	sbcs	r1, r2
 8001630:	433c      	orrs	r4, r7
 8001632:	4642      	mov	r2, r8
 8001634:	4321      	orrs	r1, r4
 8001636:	4664      	mov	r4, ip
 8001638:	40e2      	lsrs	r2, r4
 800163a:	1a80      	subs	r0, r0, r2
 800163c:	1a5c      	subs	r4, r3, r1
 800163e:	42a3      	cmp	r3, r4
 8001640:	419b      	sbcs	r3, r3
 8001642:	425f      	negs	r7, r3
 8001644:	1bc7      	subs	r7, r0, r7
 8001646:	023b      	lsls	r3, r7, #8
 8001648:	d400      	bmi.n	800164c <__aeabi_dadd+0xa8>
 800164a:	e0d0      	b.n	80017ee <__aeabi_dadd+0x24a>
 800164c:	027f      	lsls	r7, r7, #9
 800164e:	0a7f      	lsrs	r7, r7, #9
 8001650:	2f00      	cmp	r7, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dadd+0xb2>
 8001654:	e0ff      	b.n	8001856 <__aeabi_dadd+0x2b2>
 8001656:	0038      	movs	r0, r7
 8001658:	f001 fe5a 	bl	8003310 <__clzsi2>
 800165c:	0001      	movs	r1, r0
 800165e:	3908      	subs	r1, #8
 8001660:	2320      	movs	r3, #32
 8001662:	0022      	movs	r2, r4
 8001664:	1a5b      	subs	r3, r3, r1
 8001666:	408f      	lsls	r7, r1
 8001668:	40da      	lsrs	r2, r3
 800166a:	408c      	lsls	r4, r1
 800166c:	4317      	orrs	r7, r2
 800166e:	42b1      	cmp	r1, r6
 8001670:	da00      	bge.n	8001674 <__aeabi_dadd+0xd0>
 8001672:	e0ff      	b.n	8001874 <__aeabi_dadd+0x2d0>
 8001674:	1b89      	subs	r1, r1, r6
 8001676:	1c4b      	adds	r3, r1, #1
 8001678:	2b1f      	cmp	r3, #31
 800167a:	dd00      	ble.n	800167e <__aeabi_dadd+0xda>
 800167c:	e0a8      	b.n	80017d0 <__aeabi_dadd+0x22c>
 800167e:	2220      	movs	r2, #32
 8001680:	0039      	movs	r1, r7
 8001682:	1ad2      	subs	r2, r2, r3
 8001684:	0020      	movs	r0, r4
 8001686:	4094      	lsls	r4, r2
 8001688:	4091      	lsls	r1, r2
 800168a:	40d8      	lsrs	r0, r3
 800168c:	1e62      	subs	r2, r4, #1
 800168e:	4194      	sbcs	r4, r2
 8001690:	40df      	lsrs	r7, r3
 8001692:	2600      	movs	r6, #0
 8001694:	4301      	orrs	r1, r0
 8001696:	430c      	orrs	r4, r1
 8001698:	0763      	lsls	r3, r4, #29
 800169a:	d009      	beq.n	80016b0 <__aeabi_dadd+0x10c>
 800169c:	230f      	movs	r3, #15
 800169e:	4023      	ands	r3, r4
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d005      	beq.n	80016b0 <__aeabi_dadd+0x10c>
 80016a4:	1d23      	adds	r3, r4, #4
 80016a6:	42a3      	cmp	r3, r4
 80016a8:	41a4      	sbcs	r4, r4
 80016aa:	4264      	negs	r4, r4
 80016ac:	193f      	adds	r7, r7, r4
 80016ae:	001c      	movs	r4, r3
 80016b0:	023b      	lsls	r3, r7, #8
 80016b2:	d400      	bmi.n	80016b6 <__aeabi_dadd+0x112>
 80016b4:	e09e      	b.n	80017f4 <__aeabi_dadd+0x250>
 80016b6:	4b95      	ldr	r3, [pc, #596]	; (800190c <__aeabi_dadd+0x368>)
 80016b8:	3601      	adds	r6, #1
 80016ba:	429e      	cmp	r6, r3
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x11c>
 80016be:	e0b7      	b.n	8001830 <__aeabi_dadd+0x28c>
 80016c0:	4a93      	ldr	r2, [pc, #588]	; (8001910 <__aeabi_dadd+0x36c>)
 80016c2:	08e4      	lsrs	r4, r4, #3
 80016c4:	4017      	ands	r7, r2
 80016c6:	077b      	lsls	r3, r7, #29
 80016c8:	0571      	lsls	r1, r6, #21
 80016ca:	027f      	lsls	r7, r7, #9
 80016cc:	4323      	orrs	r3, r4
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	0d4a      	lsrs	r2, r1, #21
 80016d2:	0512      	lsls	r2, r2, #20
 80016d4:	433a      	orrs	r2, r7
 80016d6:	07ed      	lsls	r5, r5, #31
 80016d8:	432a      	orrs	r2, r5
 80016da:	0018      	movs	r0, r3
 80016dc:	0011      	movs	r1, r2
 80016de:	bce0      	pop	{r5, r6, r7}
 80016e0:	46ba      	mov	sl, r7
 80016e2:	46b1      	mov	r9, r6
 80016e4:	46a8      	mov	r8, r5
 80016e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d04b      	beq.n	8001784 <__aeabi_dadd+0x1e0>
 80016ec:	464c      	mov	r4, r9
 80016ee:	1ba4      	subs	r4, r4, r6
 80016f0:	46a4      	mov	ip, r4
 80016f2:	2e00      	cmp	r6, #0
 80016f4:	d000      	beq.n	80016f8 <__aeabi_dadd+0x154>
 80016f6:	e123      	b.n	8001940 <__aeabi_dadd+0x39c>
 80016f8:	0004      	movs	r4, r0
 80016fa:	431c      	orrs	r4, r3
 80016fc:	d100      	bne.n	8001700 <__aeabi_dadd+0x15c>
 80016fe:	e1af      	b.n	8001a60 <__aeabi_dadd+0x4bc>
 8001700:	4662      	mov	r2, ip
 8001702:	1e54      	subs	r4, r2, #1
 8001704:	2a01      	cmp	r2, #1
 8001706:	d100      	bne.n	800170a <__aeabi_dadd+0x166>
 8001708:	e215      	b.n	8001b36 <__aeabi_dadd+0x592>
 800170a:	4d80      	ldr	r5, [pc, #512]	; (800190c <__aeabi_dadd+0x368>)
 800170c:	45ac      	cmp	ip, r5
 800170e:	d100      	bne.n	8001712 <__aeabi_dadd+0x16e>
 8001710:	e1c8      	b.n	8001aa4 <__aeabi_dadd+0x500>
 8001712:	46a4      	mov	ip, r4
 8001714:	e11b      	b.n	800194e <__aeabi_dadd+0x3aa>
 8001716:	464a      	mov	r2, r9
 8001718:	1ab2      	subs	r2, r6, r2
 800171a:	4694      	mov	ip, r2
 800171c:	2a00      	cmp	r2, #0
 800171e:	dc00      	bgt.n	8001722 <__aeabi_dadd+0x17e>
 8001720:	e0ac      	b.n	800187c <__aeabi_dadd+0x2d8>
 8001722:	464a      	mov	r2, r9
 8001724:	2a00      	cmp	r2, #0
 8001726:	d043      	beq.n	80017b0 <__aeabi_dadd+0x20c>
 8001728:	4a78      	ldr	r2, [pc, #480]	; (800190c <__aeabi_dadd+0x368>)
 800172a:	4296      	cmp	r6, r2
 800172c:	d100      	bne.n	8001730 <__aeabi_dadd+0x18c>
 800172e:	e1af      	b.n	8001a90 <__aeabi_dadd+0x4ec>
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	003c      	movs	r4, r7
 8001734:	0412      	lsls	r2, r2, #16
 8001736:	4314      	orrs	r4, r2
 8001738:	46a0      	mov	r8, r4
 800173a:	4662      	mov	r2, ip
 800173c:	2a38      	cmp	r2, #56	; 0x38
 800173e:	dc67      	bgt.n	8001810 <__aeabi_dadd+0x26c>
 8001740:	2a1f      	cmp	r2, #31
 8001742:	dc00      	bgt.n	8001746 <__aeabi_dadd+0x1a2>
 8001744:	e15f      	b.n	8001a06 <__aeabi_dadd+0x462>
 8001746:	4647      	mov	r7, r8
 8001748:	3a20      	subs	r2, #32
 800174a:	40d7      	lsrs	r7, r2
 800174c:	4662      	mov	r2, ip
 800174e:	2a20      	cmp	r2, #32
 8001750:	d005      	beq.n	800175e <__aeabi_dadd+0x1ba>
 8001752:	4664      	mov	r4, ip
 8001754:	2240      	movs	r2, #64	; 0x40
 8001756:	1b12      	subs	r2, r2, r4
 8001758:	4644      	mov	r4, r8
 800175a:	4094      	lsls	r4, r2
 800175c:	4321      	orrs	r1, r4
 800175e:	1e4a      	subs	r2, r1, #1
 8001760:	4191      	sbcs	r1, r2
 8001762:	000c      	movs	r4, r1
 8001764:	433c      	orrs	r4, r7
 8001766:	e057      	b.n	8001818 <__aeabi_dadd+0x274>
 8001768:	003a      	movs	r2, r7
 800176a:	430a      	orrs	r2, r1
 800176c:	d100      	bne.n	8001770 <__aeabi_dadd+0x1cc>
 800176e:	e105      	b.n	800197c <__aeabi_dadd+0x3d8>
 8001770:	0022      	movs	r2, r4
 8001772:	3a01      	subs	r2, #1
 8001774:	2c01      	cmp	r4, #1
 8001776:	d100      	bne.n	800177a <__aeabi_dadd+0x1d6>
 8001778:	e182      	b.n	8001a80 <__aeabi_dadd+0x4dc>
 800177a:	4c64      	ldr	r4, [pc, #400]	; (800190c <__aeabi_dadd+0x368>)
 800177c:	45a4      	cmp	ip, r4
 800177e:	d05b      	beq.n	8001838 <__aeabi_dadd+0x294>
 8001780:	4694      	mov	ip, r2
 8001782:	e741      	b.n	8001608 <__aeabi_dadd+0x64>
 8001784:	4c63      	ldr	r4, [pc, #396]	; (8001914 <__aeabi_dadd+0x370>)
 8001786:	1c77      	adds	r7, r6, #1
 8001788:	4227      	tst	r7, r4
 800178a:	d000      	beq.n	800178e <__aeabi_dadd+0x1ea>
 800178c:	e0c4      	b.n	8001918 <__aeabi_dadd+0x374>
 800178e:	0004      	movs	r4, r0
 8001790:	431c      	orrs	r4, r3
 8001792:	2e00      	cmp	r6, #0
 8001794:	d000      	beq.n	8001798 <__aeabi_dadd+0x1f4>
 8001796:	e169      	b.n	8001a6c <__aeabi_dadd+0x4c8>
 8001798:	2c00      	cmp	r4, #0
 800179a:	d100      	bne.n	800179e <__aeabi_dadd+0x1fa>
 800179c:	e1bf      	b.n	8001b1e <__aeabi_dadd+0x57a>
 800179e:	4644      	mov	r4, r8
 80017a0:	430c      	orrs	r4, r1
 80017a2:	d000      	beq.n	80017a6 <__aeabi_dadd+0x202>
 80017a4:	e1d0      	b.n	8001b48 <__aeabi_dadd+0x5a4>
 80017a6:	0742      	lsls	r2, r0, #29
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	08c0      	lsrs	r0, r0, #3
 80017ae:	e029      	b.n	8001804 <__aeabi_dadd+0x260>
 80017b0:	003a      	movs	r2, r7
 80017b2:	430a      	orrs	r2, r1
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x214>
 80017b6:	e170      	b.n	8001a9a <__aeabi_dadd+0x4f6>
 80017b8:	4662      	mov	r2, ip
 80017ba:	4664      	mov	r4, ip
 80017bc:	3a01      	subs	r2, #1
 80017be:	2c01      	cmp	r4, #1
 80017c0:	d100      	bne.n	80017c4 <__aeabi_dadd+0x220>
 80017c2:	e0e0      	b.n	8001986 <__aeabi_dadd+0x3e2>
 80017c4:	4c51      	ldr	r4, [pc, #324]	; (800190c <__aeabi_dadd+0x368>)
 80017c6:	45a4      	cmp	ip, r4
 80017c8:	d100      	bne.n	80017cc <__aeabi_dadd+0x228>
 80017ca:	e161      	b.n	8001a90 <__aeabi_dadd+0x4ec>
 80017cc:	4694      	mov	ip, r2
 80017ce:	e7b4      	b.n	800173a <__aeabi_dadd+0x196>
 80017d0:	003a      	movs	r2, r7
 80017d2:	391f      	subs	r1, #31
 80017d4:	40ca      	lsrs	r2, r1
 80017d6:	0011      	movs	r1, r2
 80017d8:	2b20      	cmp	r3, #32
 80017da:	d003      	beq.n	80017e4 <__aeabi_dadd+0x240>
 80017dc:	2240      	movs	r2, #64	; 0x40
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	409f      	lsls	r7, r3
 80017e2:	433c      	orrs	r4, r7
 80017e4:	1e63      	subs	r3, r4, #1
 80017e6:	419c      	sbcs	r4, r3
 80017e8:	2700      	movs	r7, #0
 80017ea:	2600      	movs	r6, #0
 80017ec:	430c      	orrs	r4, r1
 80017ee:	0763      	lsls	r3, r4, #29
 80017f0:	d000      	beq.n	80017f4 <__aeabi_dadd+0x250>
 80017f2:	e753      	b.n	800169c <__aeabi_dadd+0xf8>
 80017f4:	46b4      	mov	ip, r6
 80017f6:	08e4      	lsrs	r4, r4, #3
 80017f8:	077b      	lsls	r3, r7, #29
 80017fa:	4323      	orrs	r3, r4
 80017fc:	08f8      	lsrs	r0, r7, #3
 80017fe:	4a43      	ldr	r2, [pc, #268]	; (800190c <__aeabi_dadd+0x368>)
 8001800:	4594      	cmp	ip, r2
 8001802:	d01d      	beq.n	8001840 <__aeabi_dadd+0x29c>
 8001804:	4662      	mov	r2, ip
 8001806:	0307      	lsls	r7, r0, #12
 8001808:	0552      	lsls	r2, r2, #21
 800180a:	0b3f      	lsrs	r7, r7, #12
 800180c:	0d52      	lsrs	r2, r2, #21
 800180e:	e760      	b.n	80016d2 <__aeabi_dadd+0x12e>
 8001810:	4644      	mov	r4, r8
 8001812:	430c      	orrs	r4, r1
 8001814:	1e62      	subs	r2, r4, #1
 8001816:	4194      	sbcs	r4, r2
 8001818:	18e4      	adds	r4, r4, r3
 800181a:	429c      	cmp	r4, r3
 800181c:	419b      	sbcs	r3, r3
 800181e:	425f      	negs	r7, r3
 8001820:	183f      	adds	r7, r7, r0
 8001822:	023b      	lsls	r3, r7, #8
 8001824:	d5e3      	bpl.n	80017ee <__aeabi_dadd+0x24a>
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <__aeabi_dadd+0x368>)
 8001828:	3601      	adds	r6, #1
 800182a:	429e      	cmp	r6, r3
 800182c:	d000      	beq.n	8001830 <__aeabi_dadd+0x28c>
 800182e:	e0b5      	b.n	800199c <__aeabi_dadd+0x3f8>
 8001830:	0032      	movs	r2, r6
 8001832:	2700      	movs	r7, #0
 8001834:	2300      	movs	r3, #0
 8001836:	e74c      	b.n	80016d2 <__aeabi_dadd+0x12e>
 8001838:	0742      	lsls	r2, r0, #29
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	4313      	orrs	r3, r2
 800183e:	08c0      	lsrs	r0, r0, #3
 8001840:	001a      	movs	r2, r3
 8001842:	4302      	orrs	r2, r0
 8001844:	d100      	bne.n	8001848 <__aeabi_dadd+0x2a4>
 8001846:	e1e1      	b.n	8001c0c <__aeabi_dadd+0x668>
 8001848:	2780      	movs	r7, #128	; 0x80
 800184a:	033f      	lsls	r7, r7, #12
 800184c:	4307      	orrs	r7, r0
 800184e:	033f      	lsls	r7, r7, #12
 8001850:	4a2e      	ldr	r2, [pc, #184]	; (800190c <__aeabi_dadd+0x368>)
 8001852:	0b3f      	lsrs	r7, r7, #12
 8001854:	e73d      	b.n	80016d2 <__aeabi_dadd+0x12e>
 8001856:	0020      	movs	r0, r4
 8001858:	f001 fd5a 	bl	8003310 <__clzsi2>
 800185c:	0001      	movs	r1, r0
 800185e:	3118      	adds	r1, #24
 8001860:	291f      	cmp	r1, #31
 8001862:	dc00      	bgt.n	8001866 <__aeabi_dadd+0x2c2>
 8001864:	e6fc      	b.n	8001660 <__aeabi_dadd+0xbc>
 8001866:	3808      	subs	r0, #8
 8001868:	4084      	lsls	r4, r0
 800186a:	0027      	movs	r7, r4
 800186c:	2400      	movs	r4, #0
 800186e:	42b1      	cmp	r1, r6
 8001870:	db00      	blt.n	8001874 <__aeabi_dadd+0x2d0>
 8001872:	e6ff      	b.n	8001674 <__aeabi_dadd+0xd0>
 8001874:	4a26      	ldr	r2, [pc, #152]	; (8001910 <__aeabi_dadd+0x36c>)
 8001876:	1a76      	subs	r6, r6, r1
 8001878:	4017      	ands	r7, r2
 800187a:	e70d      	b.n	8001698 <__aeabi_dadd+0xf4>
 800187c:	2a00      	cmp	r2, #0
 800187e:	d02f      	beq.n	80018e0 <__aeabi_dadd+0x33c>
 8001880:	464a      	mov	r2, r9
 8001882:	1b92      	subs	r2, r2, r6
 8001884:	4694      	mov	ip, r2
 8001886:	2e00      	cmp	r6, #0
 8001888:	d100      	bne.n	800188c <__aeabi_dadd+0x2e8>
 800188a:	e0ad      	b.n	80019e8 <__aeabi_dadd+0x444>
 800188c:	4a1f      	ldr	r2, [pc, #124]	; (800190c <__aeabi_dadd+0x368>)
 800188e:	4591      	cmp	r9, r2
 8001890:	d100      	bne.n	8001894 <__aeabi_dadd+0x2f0>
 8001892:	e10f      	b.n	8001ab4 <__aeabi_dadd+0x510>
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	0412      	lsls	r2, r2, #16
 8001898:	4310      	orrs	r0, r2
 800189a:	4662      	mov	r2, ip
 800189c:	2a38      	cmp	r2, #56	; 0x38
 800189e:	dd00      	ble.n	80018a2 <__aeabi_dadd+0x2fe>
 80018a0:	e10f      	b.n	8001ac2 <__aeabi_dadd+0x51e>
 80018a2:	2a1f      	cmp	r2, #31
 80018a4:	dd00      	ble.n	80018a8 <__aeabi_dadd+0x304>
 80018a6:	e180      	b.n	8001baa <__aeabi_dadd+0x606>
 80018a8:	4664      	mov	r4, ip
 80018aa:	2220      	movs	r2, #32
 80018ac:	001e      	movs	r6, r3
 80018ae:	1b12      	subs	r2, r2, r4
 80018b0:	4667      	mov	r7, ip
 80018b2:	0004      	movs	r4, r0
 80018b4:	4093      	lsls	r3, r2
 80018b6:	4094      	lsls	r4, r2
 80018b8:	40fe      	lsrs	r6, r7
 80018ba:	1e5a      	subs	r2, r3, #1
 80018bc:	4193      	sbcs	r3, r2
 80018be:	40f8      	lsrs	r0, r7
 80018c0:	4334      	orrs	r4, r6
 80018c2:	431c      	orrs	r4, r3
 80018c4:	4480      	add	r8, r0
 80018c6:	1864      	adds	r4, r4, r1
 80018c8:	428c      	cmp	r4, r1
 80018ca:	41bf      	sbcs	r7, r7
 80018cc:	427f      	negs	r7, r7
 80018ce:	464e      	mov	r6, r9
 80018d0:	4447      	add	r7, r8
 80018d2:	e7a6      	b.n	8001822 <__aeabi_dadd+0x27e>
 80018d4:	4642      	mov	r2, r8
 80018d6:	430a      	orrs	r2, r1
 80018d8:	0011      	movs	r1, r2
 80018da:	1e4a      	subs	r2, r1, #1
 80018dc:	4191      	sbcs	r1, r2
 80018de:	e6ad      	b.n	800163c <__aeabi_dadd+0x98>
 80018e0:	4c0c      	ldr	r4, [pc, #48]	; (8001914 <__aeabi_dadd+0x370>)
 80018e2:	1c72      	adds	r2, r6, #1
 80018e4:	4222      	tst	r2, r4
 80018e6:	d000      	beq.n	80018ea <__aeabi_dadd+0x346>
 80018e8:	e0a1      	b.n	8001a2e <__aeabi_dadd+0x48a>
 80018ea:	0002      	movs	r2, r0
 80018ec:	431a      	orrs	r2, r3
 80018ee:	2e00      	cmp	r6, #0
 80018f0:	d000      	beq.n	80018f4 <__aeabi_dadd+0x350>
 80018f2:	e0fa      	b.n	8001aea <__aeabi_dadd+0x546>
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d100      	bne.n	80018fa <__aeabi_dadd+0x356>
 80018f8:	e145      	b.n	8001b86 <__aeabi_dadd+0x5e2>
 80018fa:	003a      	movs	r2, r7
 80018fc:	430a      	orrs	r2, r1
 80018fe:	d000      	beq.n	8001902 <__aeabi_dadd+0x35e>
 8001900:	e146      	b.n	8001b90 <__aeabi_dadd+0x5ec>
 8001902:	0742      	lsls	r2, r0, #29
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	4313      	orrs	r3, r2
 8001908:	08c0      	lsrs	r0, r0, #3
 800190a:	e77b      	b.n	8001804 <__aeabi_dadd+0x260>
 800190c:	000007ff 	.word	0x000007ff
 8001910:	ff7fffff 	.word	0xff7fffff
 8001914:	000007fe 	.word	0x000007fe
 8001918:	4647      	mov	r7, r8
 800191a:	1a5c      	subs	r4, r3, r1
 800191c:	1bc2      	subs	r2, r0, r7
 800191e:	42a3      	cmp	r3, r4
 8001920:	41bf      	sbcs	r7, r7
 8001922:	427f      	negs	r7, r7
 8001924:	46b9      	mov	r9, r7
 8001926:	0017      	movs	r7, r2
 8001928:	464a      	mov	r2, r9
 800192a:	1abf      	subs	r7, r7, r2
 800192c:	023a      	lsls	r2, r7, #8
 800192e:	d500      	bpl.n	8001932 <__aeabi_dadd+0x38e>
 8001930:	e08d      	b.n	8001a4e <__aeabi_dadd+0x4aa>
 8001932:	0023      	movs	r3, r4
 8001934:	433b      	orrs	r3, r7
 8001936:	d000      	beq.n	800193a <__aeabi_dadd+0x396>
 8001938:	e68a      	b.n	8001650 <__aeabi_dadd+0xac>
 800193a:	2000      	movs	r0, #0
 800193c:	2500      	movs	r5, #0
 800193e:	e761      	b.n	8001804 <__aeabi_dadd+0x260>
 8001940:	4cb4      	ldr	r4, [pc, #720]	; (8001c14 <__aeabi_dadd+0x670>)
 8001942:	45a1      	cmp	r9, r4
 8001944:	d100      	bne.n	8001948 <__aeabi_dadd+0x3a4>
 8001946:	e0ad      	b.n	8001aa4 <__aeabi_dadd+0x500>
 8001948:	2480      	movs	r4, #128	; 0x80
 800194a:	0424      	lsls	r4, r4, #16
 800194c:	4320      	orrs	r0, r4
 800194e:	4664      	mov	r4, ip
 8001950:	2c38      	cmp	r4, #56	; 0x38
 8001952:	dc3d      	bgt.n	80019d0 <__aeabi_dadd+0x42c>
 8001954:	4662      	mov	r2, ip
 8001956:	2c1f      	cmp	r4, #31
 8001958:	dd00      	ble.n	800195c <__aeabi_dadd+0x3b8>
 800195a:	e0b7      	b.n	8001acc <__aeabi_dadd+0x528>
 800195c:	2520      	movs	r5, #32
 800195e:	001e      	movs	r6, r3
 8001960:	1b2d      	subs	r5, r5, r4
 8001962:	0004      	movs	r4, r0
 8001964:	40ab      	lsls	r3, r5
 8001966:	40ac      	lsls	r4, r5
 8001968:	40d6      	lsrs	r6, r2
 800196a:	40d0      	lsrs	r0, r2
 800196c:	4642      	mov	r2, r8
 800196e:	1e5d      	subs	r5, r3, #1
 8001970:	41ab      	sbcs	r3, r5
 8001972:	4334      	orrs	r4, r6
 8001974:	1a12      	subs	r2, r2, r0
 8001976:	4690      	mov	r8, r2
 8001978:	4323      	orrs	r3, r4
 800197a:	e02c      	b.n	80019d6 <__aeabi_dadd+0x432>
 800197c:	0742      	lsls	r2, r0, #29
 800197e:	08db      	lsrs	r3, r3, #3
 8001980:	4313      	orrs	r3, r2
 8001982:	08c0      	lsrs	r0, r0, #3
 8001984:	e73b      	b.n	80017fe <__aeabi_dadd+0x25a>
 8001986:	185c      	adds	r4, r3, r1
 8001988:	429c      	cmp	r4, r3
 800198a:	419b      	sbcs	r3, r3
 800198c:	4440      	add	r0, r8
 800198e:	425b      	negs	r3, r3
 8001990:	18c7      	adds	r7, r0, r3
 8001992:	2601      	movs	r6, #1
 8001994:	023b      	lsls	r3, r7, #8
 8001996:	d400      	bmi.n	800199a <__aeabi_dadd+0x3f6>
 8001998:	e729      	b.n	80017ee <__aeabi_dadd+0x24a>
 800199a:	2602      	movs	r6, #2
 800199c:	4a9e      	ldr	r2, [pc, #632]	; (8001c18 <__aeabi_dadd+0x674>)
 800199e:	0863      	lsrs	r3, r4, #1
 80019a0:	4017      	ands	r7, r2
 80019a2:	2201      	movs	r2, #1
 80019a4:	4014      	ands	r4, r2
 80019a6:	431c      	orrs	r4, r3
 80019a8:	07fb      	lsls	r3, r7, #31
 80019aa:	431c      	orrs	r4, r3
 80019ac:	087f      	lsrs	r7, r7, #1
 80019ae:	e673      	b.n	8001698 <__aeabi_dadd+0xf4>
 80019b0:	4644      	mov	r4, r8
 80019b2:	3a20      	subs	r2, #32
 80019b4:	40d4      	lsrs	r4, r2
 80019b6:	4662      	mov	r2, ip
 80019b8:	2a20      	cmp	r2, #32
 80019ba:	d005      	beq.n	80019c8 <__aeabi_dadd+0x424>
 80019bc:	4667      	mov	r7, ip
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	1bd2      	subs	r2, r2, r7
 80019c2:	4647      	mov	r7, r8
 80019c4:	4097      	lsls	r7, r2
 80019c6:	4339      	orrs	r1, r7
 80019c8:	1e4a      	subs	r2, r1, #1
 80019ca:	4191      	sbcs	r1, r2
 80019cc:	4321      	orrs	r1, r4
 80019ce:	e635      	b.n	800163c <__aeabi_dadd+0x98>
 80019d0:	4303      	orrs	r3, r0
 80019d2:	1e58      	subs	r0, r3, #1
 80019d4:	4183      	sbcs	r3, r0
 80019d6:	1acc      	subs	r4, r1, r3
 80019d8:	42a1      	cmp	r1, r4
 80019da:	41bf      	sbcs	r7, r7
 80019dc:	4643      	mov	r3, r8
 80019de:	427f      	negs	r7, r7
 80019e0:	4655      	mov	r5, sl
 80019e2:	464e      	mov	r6, r9
 80019e4:	1bdf      	subs	r7, r3, r7
 80019e6:	e62e      	b.n	8001646 <__aeabi_dadd+0xa2>
 80019e8:	0002      	movs	r2, r0
 80019ea:	431a      	orrs	r2, r3
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dadd+0x44c>
 80019ee:	e0bd      	b.n	8001b6c <__aeabi_dadd+0x5c8>
 80019f0:	4662      	mov	r2, ip
 80019f2:	4664      	mov	r4, ip
 80019f4:	3a01      	subs	r2, #1
 80019f6:	2c01      	cmp	r4, #1
 80019f8:	d100      	bne.n	80019fc <__aeabi_dadd+0x458>
 80019fa:	e0e5      	b.n	8001bc8 <__aeabi_dadd+0x624>
 80019fc:	4c85      	ldr	r4, [pc, #532]	; (8001c14 <__aeabi_dadd+0x670>)
 80019fe:	45a4      	cmp	ip, r4
 8001a00:	d058      	beq.n	8001ab4 <__aeabi_dadd+0x510>
 8001a02:	4694      	mov	ip, r2
 8001a04:	e749      	b.n	800189a <__aeabi_dadd+0x2f6>
 8001a06:	4664      	mov	r4, ip
 8001a08:	2220      	movs	r2, #32
 8001a0a:	1b12      	subs	r2, r2, r4
 8001a0c:	4644      	mov	r4, r8
 8001a0e:	4094      	lsls	r4, r2
 8001a10:	000f      	movs	r7, r1
 8001a12:	46a1      	mov	r9, r4
 8001a14:	4664      	mov	r4, ip
 8001a16:	4091      	lsls	r1, r2
 8001a18:	40e7      	lsrs	r7, r4
 8001a1a:	464c      	mov	r4, r9
 8001a1c:	1e4a      	subs	r2, r1, #1
 8001a1e:	4191      	sbcs	r1, r2
 8001a20:	433c      	orrs	r4, r7
 8001a22:	4642      	mov	r2, r8
 8001a24:	430c      	orrs	r4, r1
 8001a26:	4661      	mov	r1, ip
 8001a28:	40ca      	lsrs	r2, r1
 8001a2a:	1880      	adds	r0, r0, r2
 8001a2c:	e6f4      	b.n	8001818 <__aeabi_dadd+0x274>
 8001a2e:	4c79      	ldr	r4, [pc, #484]	; (8001c14 <__aeabi_dadd+0x670>)
 8001a30:	42a2      	cmp	r2, r4
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dadd+0x492>
 8001a34:	e6fd      	b.n	8001832 <__aeabi_dadd+0x28e>
 8001a36:	1859      	adds	r1, r3, r1
 8001a38:	4299      	cmp	r1, r3
 8001a3a:	419b      	sbcs	r3, r3
 8001a3c:	4440      	add	r0, r8
 8001a3e:	425f      	negs	r7, r3
 8001a40:	19c7      	adds	r7, r0, r7
 8001a42:	07fc      	lsls	r4, r7, #31
 8001a44:	0849      	lsrs	r1, r1, #1
 8001a46:	0016      	movs	r6, r2
 8001a48:	430c      	orrs	r4, r1
 8001a4a:	087f      	lsrs	r7, r7, #1
 8001a4c:	e6cf      	b.n	80017ee <__aeabi_dadd+0x24a>
 8001a4e:	1acc      	subs	r4, r1, r3
 8001a50:	42a1      	cmp	r1, r4
 8001a52:	41bf      	sbcs	r7, r7
 8001a54:	4643      	mov	r3, r8
 8001a56:	427f      	negs	r7, r7
 8001a58:	1a18      	subs	r0, r3, r0
 8001a5a:	4655      	mov	r5, sl
 8001a5c:	1bc7      	subs	r7, r0, r7
 8001a5e:	e5f7      	b.n	8001650 <__aeabi_dadd+0xac>
 8001a60:	08c9      	lsrs	r1, r1, #3
 8001a62:	077b      	lsls	r3, r7, #29
 8001a64:	4655      	mov	r5, sl
 8001a66:	430b      	orrs	r3, r1
 8001a68:	08f8      	lsrs	r0, r7, #3
 8001a6a:	e6c8      	b.n	80017fe <__aeabi_dadd+0x25a>
 8001a6c:	2c00      	cmp	r4, #0
 8001a6e:	d000      	beq.n	8001a72 <__aeabi_dadd+0x4ce>
 8001a70:	e081      	b.n	8001b76 <__aeabi_dadd+0x5d2>
 8001a72:	4643      	mov	r3, r8
 8001a74:	430b      	orrs	r3, r1
 8001a76:	d115      	bne.n	8001aa4 <__aeabi_dadd+0x500>
 8001a78:	2080      	movs	r0, #128	; 0x80
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	0300      	lsls	r0, r0, #12
 8001a7e:	e6e3      	b.n	8001848 <__aeabi_dadd+0x2a4>
 8001a80:	1a5c      	subs	r4, r3, r1
 8001a82:	42a3      	cmp	r3, r4
 8001a84:	419b      	sbcs	r3, r3
 8001a86:	1bc7      	subs	r7, r0, r7
 8001a88:	425b      	negs	r3, r3
 8001a8a:	2601      	movs	r6, #1
 8001a8c:	1aff      	subs	r7, r7, r3
 8001a8e:	e5da      	b.n	8001646 <__aeabi_dadd+0xa2>
 8001a90:	0742      	lsls	r2, r0, #29
 8001a92:	08db      	lsrs	r3, r3, #3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	08c0      	lsrs	r0, r0, #3
 8001a98:	e6d2      	b.n	8001840 <__aeabi_dadd+0x29c>
 8001a9a:	0742      	lsls	r2, r0, #29
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	08c0      	lsrs	r0, r0, #3
 8001aa2:	e6ac      	b.n	80017fe <__aeabi_dadd+0x25a>
 8001aa4:	4643      	mov	r3, r8
 8001aa6:	4642      	mov	r2, r8
 8001aa8:	08c9      	lsrs	r1, r1, #3
 8001aaa:	075b      	lsls	r3, r3, #29
 8001aac:	4655      	mov	r5, sl
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	08d0      	lsrs	r0, r2, #3
 8001ab2:	e6c5      	b.n	8001840 <__aeabi_dadd+0x29c>
 8001ab4:	4643      	mov	r3, r8
 8001ab6:	4642      	mov	r2, r8
 8001ab8:	075b      	lsls	r3, r3, #29
 8001aba:	08c9      	lsrs	r1, r1, #3
 8001abc:	430b      	orrs	r3, r1
 8001abe:	08d0      	lsrs	r0, r2, #3
 8001ac0:	e6be      	b.n	8001840 <__aeabi_dadd+0x29c>
 8001ac2:	4303      	orrs	r3, r0
 8001ac4:	001c      	movs	r4, r3
 8001ac6:	1e63      	subs	r3, r4, #1
 8001ac8:	419c      	sbcs	r4, r3
 8001aca:	e6fc      	b.n	80018c6 <__aeabi_dadd+0x322>
 8001acc:	0002      	movs	r2, r0
 8001ace:	3c20      	subs	r4, #32
 8001ad0:	40e2      	lsrs	r2, r4
 8001ad2:	0014      	movs	r4, r2
 8001ad4:	4662      	mov	r2, ip
 8001ad6:	2a20      	cmp	r2, #32
 8001ad8:	d003      	beq.n	8001ae2 <__aeabi_dadd+0x53e>
 8001ada:	2540      	movs	r5, #64	; 0x40
 8001adc:	1aad      	subs	r5, r5, r2
 8001ade:	40a8      	lsls	r0, r5
 8001ae0:	4303      	orrs	r3, r0
 8001ae2:	1e58      	subs	r0, r3, #1
 8001ae4:	4183      	sbcs	r3, r0
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	e775      	b.n	80019d6 <__aeabi_dadd+0x432>
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d0e2      	beq.n	8001ab4 <__aeabi_dadd+0x510>
 8001aee:	003a      	movs	r2, r7
 8001af0:	430a      	orrs	r2, r1
 8001af2:	d0cd      	beq.n	8001a90 <__aeabi_dadd+0x4ec>
 8001af4:	0742      	lsls	r2, r0, #29
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	08c0      	lsrs	r0, r0, #3
 8001afe:	0312      	lsls	r2, r2, #12
 8001b00:	4210      	tst	r0, r2
 8001b02:	d006      	beq.n	8001b12 <__aeabi_dadd+0x56e>
 8001b04:	08fc      	lsrs	r4, r7, #3
 8001b06:	4214      	tst	r4, r2
 8001b08:	d103      	bne.n	8001b12 <__aeabi_dadd+0x56e>
 8001b0a:	0020      	movs	r0, r4
 8001b0c:	08cb      	lsrs	r3, r1, #3
 8001b0e:	077a      	lsls	r2, r7, #29
 8001b10:	4313      	orrs	r3, r2
 8001b12:	0f5a      	lsrs	r2, r3, #29
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	0752      	lsls	r2, r2, #29
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	e690      	b.n	8001840 <__aeabi_dadd+0x29c>
 8001b1e:	4643      	mov	r3, r8
 8001b20:	430b      	orrs	r3, r1
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dadd+0x582>
 8001b24:	e709      	b.n	800193a <__aeabi_dadd+0x396>
 8001b26:	4643      	mov	r3, r8
 8001b28:	4642      	mov	r2, r8
 8001b2a:	08c9      	lsrs	r1, r1, #3
 8001b2c:	075b      	lsls	r3, r3, #29
 8001b2e:	4655      	mov	r5, sl
 8001b30:	430b      	orrs	r3, r1
 8001b32:	08d0      	lsrs	r0, r2, #3
 8001b34:	e666      	b.n	8001804 <__aeabi_dadd+0x260>
 8001b36:	1acc      	subs	r4, r1, r3
 8001b38:	42a1      	cmp	r1, r4
 8001b3a:	4189      	sbcs	r1, r1
 8001b3c:	1a3f      	subs	r7, r7, r0
 8001b3e:	4249      	negs	r1, r1
 8001b40:	4655      	mov	r5, sl
 8001b42:	2601      	movs	r6, #1
 8001b44:	1a7f      	subs	r7, r7, r1
 8001b46:	e57e      	b.n	8001646 <__aeabi_dadd+0xa2>
 8001b48:	4642      	mov	r2, r8
 8001b4a:	1a5c      	subs	r4, r3, r1
 8001b4c:	1a87      	subs	r7, r0, r2
 8001b4e:	42a3      	cmp	r3, r4
 8001b50:	4192      	sbcs	r2, r2
 8001b52:	4252      	negs	r2, r2
 8001b54:	1abf      	subs	r7, r7, r2
 8001b56:	023a      	lsls	r2, r7, #8
 8001b58:	d53d      	bpl.n	8001bd6 <__aeabi_dadd+0x632>
 8001b5a:	1acc      	subs	r4, r1, r3
 8001b5c:	42a1      	cmp	r1, r4
 8001b5e:	4189      	sbcs	r1, r1
 8001b60:	4643      	mov	r3, r8
 8001b62:	4249      	negs	r1, r1
 8001b64:	1a1f      	subs	r7, r3, r0
 8001b66:	4655      	mov	r5, sl
 8001b68:	1a7f      	subs	r7, r7, r1
 8001b6a:	e595      	b.n	8001698 <__aeabi_dadd+0xf4>
 8001b6c:	077b      	lsls	r3, r7, #29
 8001b6e:	08c9      	lsrs	r1, r1, #3
 8001b70:	430b      	orrs	r3, r1
 8001b72:	08f8      	lsrs	r0, r7, #3
 8001b74:	e643      	b.n	80017fe <__aeabi_dadd+0x25a>
 8001b76:	4644      	mov	r4, r8
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	430c      	orrs	r4, r1
 8001b7c:	d130      	bne.n	8001be0 <__aeabi_dadd+0x63c>
 8001b7e:	0742      	lsls	r2, r0, #29
 8001b80:	4313      	orrs	r3, r2
 8001b82:	08c0      	lsrs	r0, r0, #3
 8001b84:	e65c      	b.n	8001840 <__aeabi_dadd+0x29c>
 8001b86:	077b      	lsls	r3, r7, #29
 8001b88:	08c9      	lsrs	r1, r1, #3
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	08f8      	lsrs	r0, r7, #3
 8001b8e:	e639      	b.n	8001804 <__aeabi_dadd+0x260>
 8001b90:	185c      	adds	r4, r3, r1
 8001b92:	429c      	cmp	r4, r3
 8001b94:	419b      	sbcs	r3, r3
 8001b96:	4440      	add	r0, r8
 8001b98:	425b      	negs	r3, r3
 8001b9a:	18c7      	adds	r7, r0, r3
 8001b9c:	023b      	lsls	r3, r7, #8
 8001b9e:	d400      	bmi.n	8001ba2 <__aeabi_dadd+0x5fe>
 8001ba0:	e625      	b.n	80017ee <__aeabi_dadd+0x24a>
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <__aeabi_dadd+0x674>)
 8001ba4:	2601      	movs	r6, #1
 8001ba6:	401f      	ands	r7, r3
 8001ba8:	e621      	b.n	80017ee <__aeabi_dadd+0x24a>
 8001baa:	0004      	movs	r4, r0
 8001bac:	3a20      	subs	r2, #32
 8001bae:	40d4      	lsrs	r4, r2
 8001bb0:	4662      	mov	r2, ip
 8001bb2:	2a20      	cmp	r2, #32
 8001bb4:	d004      	beq.n	8001bc0 <__aeabi_dadd+0x61c>
 8001bb6:	2240      	movs	r2, #64	; 0x40
 8001bb8:	4666      	mov	r6, ip
 8001bba:	1b92      	subs	r2, r2, r6
 8001bbc:	4090      	lsls	r0, r2
 8001bbe:	4303      	orrs	r3, r0
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	4193      	sbcs	r3, r2
 8001bc4:	431c      	orrs	r4, r3
 8001bc6:	e67e      	b.n	80018c6 <__aeabi_dadd+0x322>
 8001bc8:	185c      	adds	r4, r3, r1
 8001bca:	428c      	cmp	r4, r1
 8001bcc:	4189      	sbcs	r1, r1
 8001bce:	4440      	add	r0, r8
 8001bd0:	4249      	negs	r1, r1
 8001bd2:	1847      	adds	r7, r0, r1
 8001bd4:	e6dd      	b.n	8001992 <__aeabi_dadd+0x3ee>
 8001bd6:	0023      	movs	r3, r4
 8001bd8:	433b      	orrs	r3, r7
 8001bda:	d100      	bne.n	8001bde <__aeabi_dadd+0x63a>
 8001bdc:	e6ad      	b.n	800193a <__aeabi_dadd+0x396>
 8001bde:	e606      	b.n	80017ee <__aeabi_dadd+0x24a>
 8001be0:	0744      	lsls	r4, r0, #29
 8001be2:	4323      	orrs	r3, r4
 8001be4:	2480      	movs	r4, #128	; 0x80
 8001be6:	08c0      	lsrs	r0, r0, #3
 8001be8:	0324      	lsls	r4, r4, #12
 8001bea:	4220      	tst	r0, r4
 8001bec:	d008      	beq.n	8001c00 <__aeabi_dadd+0x65c>
 8001bee:	4642      	mov	r2, r8
 8001bf0:	08d6      	lsrs	r6, r2, #3
 8001bf2:	4226      	tst	r6, r4
 8001bf4:	d104      	bne.n	8001c00 <__aeabi_dadd+0x65c>
 8001bf6:	4655      	mov	r5, sl
 8001bf8:	0030      	movs	r0, r6
 8001bfa:	08cb      	lsrs	r3, r1, #3
 8001bfc:	0751      	lsls	r1, r2, #29
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	0f5a      	lsrs	r2, r3, #29
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	0752      	lsls	r2, r2, #29
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	e619      	b.n	8001840 <__aeabi_dadd+0x29c>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	4a01      	ldr	r2, [pc, #4]	; (8001c14 <__aeabi_dadd+0x670>)
 8001c10:	001f      	movs	r7, r3
 8001c12:	e55e      	b.n	80016d2 <__aeabi_dadd+0x12e>
 8001c14:	000007ff 	.word	0x000007ff
 8001c18:	ff7fffff 	.word	0xff7fffff

08001c1c <__aeabi_ddiv>:
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	4657      	mov	r7, sl
 8001c20:	464e      	mov	r6, r9
 8001c22:	4645      	mov	r5, r8
 8001c24:	46de      	mov	lr, fp
 8001c26:	b5e0      	push	{r5, r6, r7, lr}
 8001c28:	4681      	mov	r9, r0
 8001c2a:	0005      	movs	r5, r0
 8001c2c:	030c      	lsls	r4, r1, #12
 8001c2e:	0048      	lsls	r0, r1, #1
 8001c30:	4692      	mov	sl, r2
 8001c32:	001f      	movs	r7, r3
 8001c34:	b085      	sub	sp, #20
 8001c36:	0b24      	lsrs	r4, r4, #12
 8001c38:	0d40      	lsrs	r0, r0, #21
 8001c3a:	0fce      	lsrs	r6, r1, #31
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_ddiv+0x26>
 8001c40:	e156      	b.n	8001ef0 <__aeabi_ddiv+0x2d4>
 8001c42:	4bd4      	ldr	r3, [pc, #848]	; (8001f94 <__aeabi_ddiv+0x378>)
 8001c44:	4298      	cmp	r0, r3
 8001c46:	d100      	bne.n	8001c4a <__aeabi_ddiv+0x2e>
 8001c48:	e172      	b.n	8001f30 <__aeabi_ddiv+0x314>
 8001c4a:	0f6b      	lsrs	r3, r5, #29
 8001c4c:	00e4      	lsls	r4, r4, #3
 8001c4e:	431c      	orrs	r4, r3
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	4323      	orrs	r3, r4
 8001c56:	4698      	mov	r8, r3
 8001c58:	4bcf      	ldr	r3, [pc, #828]	; (8001f98 <__aeabi_ddiv+0x37c>)
 8001c5a:	00ed      	lsls	r5, r5, #3
 8001c5c:	469b      	mov	fp, r3
 8001c5e:	2300      	movs	r3, #0
 8001c60:	4699      	mov	r9, r3
 8001c62:	4483      	add	fp, r0
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	033c      	lsls	r4, r7, #12
 8001c68:	007b      	lsls	r3, r7, #1
 8001c6a:	4650      	mov	r0, sl
 8001c6c:	0b24      	lsrs	r4, r4, #12
 8001c6e:	0d5b      	lsrs	r3, r3, #21
 8001c70:	0fff      	lsrs	r7, r7, #31
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_ddiv+0x5c>
 8001c76:	e11f      	b.n	8001eb8 <__aeabi_ddiv+0x29c>
 8001c78:	4ac6      	ldr	r2, [pc, #792]	; (8001f94 <__aeabi_ddiv+0x378>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_ddiv+0x64>
 8001c7e:	e162      	b.n	8001f46 <__aeabi_ddiv+0x32a>
 8001c80:	49c5      	ldr	r1, [pc, #788]	; (8001f98 <__aeabi_ddiv+0x37c>)
 8001c82:	0f42      	lsrs	r2, r0, #29
 8001c84:	468c      	mov	ip, r1
 8001c86:	00e4      	lsls	r4, r4, #3
 8001c88:	4659      	mov	r1, fp
 8001c8a:	4314      	orrs	r4, r2
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	4463      	add	r3, ip
 8001c90:	0412      	lsls	r2, r2, #16
 8001c92:	1acb      	subs	r3, r1, r3
 8001c94:	4314      	orrs	r4, r2
 8001c96:	469b      	mov	fp, r3
 8001c98:	00c2      	lsls	r2, r0, #3
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	0033      	movs	r3, r6
 8001c9e:	407b      	eors	r3, r7
 8001ca0:	469a      	mov	sl, r3
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	d827      	bhi.n	8001cf8 <__aeabi_ddiv+0xdc>
 8001ca8:	49bc      	ldr	r1, [pc, #752]	; (8001f9c <__aeabi_ddiv+0x380>)
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	58cb      	ldr	r3, [r1, r3]
 8001cae:	469f      	mov	pc, r3
 8001cb0:	46b2      	mov	sl, r6
 8001cb2:	9b00      	ldr	r3, [sp, #0]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d016      	beq.n	8001ce6 <__aeabi_ddiv+0xca>
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d100      	bne.n	8001cbe <__aeabi_ddiv+0xa2>
 8001cbc:	e28e      	b.n	80021dc <__aeabi_ddiv+0x5c0>
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_ddiv+0xa8>
 8001cc2:	e0d9      	b.n	8001e78 <__aeabi_ddiv+0x25c>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2400      	movs	r4, #0
 8001cc8:	2500      	movs	r5, #0
 8001cca:	4652      	mov	r2, sl
 8001ccc:	051b      	lsls	r3, r3, #20
 8001cce:	4323      	orrs	r3, r4
 8001cd0:	07d2      	lsls	r2, r2, #31
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	0028      	movs	r0, r5
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	b005      	add	sp, #20
 8001cda:	bcf0      	pop	{r4, r5, r6, r7}
 8001cdc:	46bb      	mov	fp, r7
 8001cde:	46b2      	mov	sl, r6
 8001ce0:	46a9      	mov	r9, r5
 8001ce2:	46a0      	mov	r8, r4
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce6:	2400      	movs	r4, #0
 8001ce8:	2500      	movs	r5, #0
 8001cea:	4baa      	ldr	r3, [pc, #680]	; (8001f94 <__aeabi_ddiv+0x378>)
 8001cec:	e7ed      	b.n	8001cca <__aeabi_ddiv+0xae>
 8001cee:	46ba      	mov	sl, r7
 8001cf0:	46a0      	mov	r8, r4
 8001cf2:	0015      	movs	r5, r2
 8001cf4:	9000      	str	r0, [sp, #0]
 8001cf6:	e7dc      	b.n	8001cb2 <__aeabi_ddiv+0x96>
 8001cf8:	4544      	cmp	r4, r8
 8001cfa:	d200      	bcs.n	8001cfe <__aeabi_ddiv+0xe2>
 8001cfc:	e1c7      	b.n	800208e <__aeabi_ddiv+0x472>
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_ddiv+0xe6>
 8001d00:	e1c2      	b.n	8002088 <__aeabi_ddiv+0x46c>
 8001d02:	2301      	movs	r3, #1
 8001d04:	425b      	negs	r3, r3
 8001d06:	469c      	mov	ip, r3
 8001d08:	002e      	movs	r6, r5
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	44e3      	add	fp, ip
 8001d10:	0223      	lsls	r3, r4, #8
 8001d12:	0e14      	lsrs	r4, r2, #24
 8001d14:	431c      	orrs	r4, r3
 8001d16:	0c1b      	lsrs	r3, r3, #16
 8001d18:	4699      	mov	r9, r3
 8001d1a:	0423      	lsls	r3, r4, #16
 8001d1c:	0c1f      	lsrs	r7, r3, #16
 8001d1e:	0212      	lsls	r2, r2, #8
 8001d20:	4649      	mov	r1, r9
 8001d22:	9200      	str	r2, [sp, #0]
 8001d24:	9701      	str	r7, [sp, #4]
 8001d26:	f7fe fa8f 	bl	8000248 <__aeabi_uidivmod>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	437a      	muls	r2, r7
 8001d2e:	040b      	lsls	r3, r1, #16
 8001d30:	0c31      	lsrs	r1, r6, #16
 8001d32:	4680      	mov	r8, r0
 8001d34:	4319      	orrs	r1, r3
 8001d36:	428a      	cmp	r2, r1
 8001d38:	d907      	bls.n	8001d4a <__aeabi_ddiv+0x12e>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	469c      	mov	ip, r3
 8001d40:	1909      	adds	r1, r1, r4
 8001d42:	44e0      	add	r8, ip
 8001d44:	428c      	cmp	r4, r1
 8001d46:	d800      	bhi.n	8001d4a <__aeabi_ddiv+0x12e>
 8001d48:	e207      	b.n	800215a <__aeabi_ddiv+0x53e>
 8001d4a:	1a88      	subs	r0, r1, r2
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	f7fe fa7b 	bl	8000248 <__aeabi_uidivmod>
 8001d52:	0409      	lsls	r1, r1, #16
 8001d54:	468c      	mov	ip, r1
 8001d56:	0431      	lsls	r1, r6, #16
 8001d58:	4666      	mov	r6, ip
 8001d5a:	9a01      	ldr	r2, [sp, #4]
 8001d5c:	0c09      	lsrs	r1, r1, #16
 8001d5e:	4342      	muls	r2, r0
 8001d60:	0003      	movs	r3, r0
 8001d62:	4331      	orrs	r1, r6
 8001d64:	428a      	cmp	r2, r1
 8001d66:	d904      	bls.n	8001d72 <__aeabi_ddiv+0x156>
 8001d68:	1909      	adds	r1, r1, r4
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	428c      	cmp	r4, r1
 8001d6e:	d800      	bhi.n	8001d72 <__aeabi_ddiv+0x156>
 8001d70:	e1ed      	b.n	800214e <__aeabi_ddiv+0x532>
 8001d72:	1a88      	subs	r0, r1, r2
 8001d74:	4642      	mov	r2, r8
 8001d76:	0412      	lsls	r2, r2, #16
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	4641      	mov	r1, r8
 8001d7e:	9b00      	ldr	r3, [sp, #0]
 8001d80:	040e      	lsls	r6, r1, #16
 8001d82:	0c1b      	lsrs	r3, r3, #16
 8001d84:	001f      	movs	r7, r3
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	9b00      	ldr	r3, [sp, #0]
 8001d8a:	0c36      	lsrs	r6, r6, #16
 8001d8c:	041b      	lsls	r3, r3, #16
 8001d8e:	0c19      	lsrs	r1, r3, #16
 8001d90:	000b      	movs	r3, r1
 8001d92:	4373      	muls	r3, r6
 8001d94:	0c12      	lsrs	r2, r2, #16
 8001d96:	437e      	muls	r6, r7
 8001d98:	9103      	str	r1, [sp, #12]
 8001d9a:	4351      	muls	r1, r2
 8001d9c:	437a      	muls	r2, r7
 8001d9e:	0c1f      	lsrs	r7, r3, #16
 8001da0:	46bc      	mov	ip, r7
 8001da2:	1876      	adds	r6, r6, r1
 8001da4:	4466      	add	r6, ip
 8001da6:	42b1      	cmp	r1, r6
 8001da8:	d903      	bls.n	8001db2 <__aeabi_ddiv+0x196>
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	0249      	lsls	r1, r1, #9
 8001dae:	468c      	mov	ip, r1
 8001db0:	4462      	add	r2, ip
 8001db2:	0c31      	lsrs	r1, r6, #16
 8001db4:	188a      	adds	r2, r1, r2
 8001db6:	0431      	lsls	r1, r6, #16
 8001db8:	041e      	lsls	r6, r3, #16
 8001dba:	0c36      	lsrs	r6, r6, #16
 8001dbc:	198e      	adds	r6, r1, r6
 8001dbe:	4290      	cmp	r0, r2
 8001dc0:	d302      	bcc.n	8001dc8 <__aeabi_ddiv+0x1ac>
 8001dc2:	d112      	bne.n	8001dea <__aeabi_ddiv+0x1ce>
 8001dc4:	42b5      	cmp	r5, r6
 8001dc6:	d210      	bcs.n	8001dea <__aeabi_ddiv+0x1ce>
 8001dc8:	4643      	mov	r3, r8
 8001dca:	1e59      	subs	r1, r3, #1
 8001dcc:	9b00      	ldr	r3, [sp, #0]
 8001dce:	469c      	mov	ip, r3
 8001dd0:	4465      	add	r5, ip
 8001dd2:	001f      	movs	r7, r3
 8001dd4:	429d      	cmp	r5, r3
 8001dd6:	419b      	sbcs	r3, r3
 8001dd8:	425b      	negs	r3, r3
 8001dda:	191b      	adds	r3, r3, r4
 8001ddc:	18c0      	adds	r0, r0, r3
 8001dde:	4284      	cmp	r4, r0
 8001de0:	d200      	bcs.n	8001de4 <__aeabi_ddiv+0x1c8>
 8001de2:	e1a0      	b.n	8002126 <__aeabi_ddiv+0x50a>
 8001de4:	d100      	bne.n	8001de8 <__aeabi_ddiv+0x1cc>
 8001de6:	e19b      	b.n	8002120 <__aeabi_ddiv+0x504>
 8001de8:	4688      	mov	r8, r1
 8001dea:	1bae      	subs	r6, r5, r6
 8001dec:	42b5      	cmp	r5, r6
 8001dee:	41ad      	sbcs	r5, r5
 8001df0:	1a80      	subs	r0, r0, r2
 8001df2:	426d      	negs	r5, r5
 8001df4:	1b40      	subs	r0, r0, r5
 8001df6:	4284      	cmp	r4, r0
 8001df8:	d100      	bne.n	8001dfc <__aeabi_ddiv+0x1e0>
 8001dfa:	e1d5      	b.n	80021a8 <__aeabi_ddiv+0x58c>
 8001dfc:	4649      	mov	r1, r9
 8001dfe:	f7fe fa23 	bl	8000248 <__aeabi_uidivmod>
 8001e02:	9a01      	ldr	r2, [sp, #4]
 8001e04:	040b      	lsls	r3, r1, #16
 8001e06:	4342      	muls	r2, r0
 8001e08:	0c31      	lsrs	r1, r6, #16
 8001e0a:	0005      	movs	r5, r0
 8001e0c:	4319      	orrs	r1, r3
 8001e0e:	428a      	cmp	r2, r1
 8001e10:	d900      	bls.n	8001e14 <__aeabi_ddiv+0x1f8>
 8001e12:	e16c      	b.n	80020ee <__aeabi_ddiv+0x4d2>
 8001e14:	1a88      	subs	r0, r1, r2
 8001e16:	4649      	mov	r1, r9
 8001e18:	f7fe fa16 	bl	8000248 <__aeabi_uidivmod>
 8001e1c:	9a01      	ldr	r2, [sp, #4]
 8001e1e:	0436      	lsls	r6, r6, #16
 8001e20:	4342      	muls	r2, r0
 8001e22:	0409      	lsls	r1, r1, #16
 8001e24:	0c36      	lsrs	r6, r6, #16
 8001e26:	0003      	movs	r3, r0
 8001e28:	430e      	orrs	r6, r1
 8001e2a:	42b2      	cmp	r2, r6
 8001e2c:	d900      	bls.n	8001e30 <__aeabi_ddiv+0x214>
 8001e2e:	e153      	b.n	80020d8 <__aeabi_ddiv+0x4bc>
 8001e30:	9803      	ldr	r0, [sp, #12]
 8001e32:	1ab6      	subs	r6, r6, r2
 8001e34:	0002      	movs	r2, r0
 8001e36:	042d      	lsls	r5, r5, #16
 8001e38:	431d      	orrs	r5, r3
 8001e3a:	9f02      	ldr	r7, [sp, #8]
 8001e3c:	042b      	lsls	r3, r5, #16
 8001e3e:	0c1b      	lsrs	r3, r3, #16
 8001e40:	435a      	muls	r2, r3
 8001e42:	437b      	muls	r3, r7
 8001e44:	469c      	mov	ip, r3
 8001e46:	0c29      	lsrs	r1, r5, #16
 8001e48:	4348      	muls	r0, r1
 8001e4a:	0c13      	lsrs	r3, r2, #16
 8001e4c:	4484      	add	ip, r0
 8001e4e:	4463      	add	r3, ip
 8001e50:	4379      	muls	r1, r7
 8001e52:	4298      	cmp	r0, r3
 8001e54:	d903      	bls.n	8001e5e <__aeabi_ddiv+0x242>
 8001e56:	2080      	movs	r0, #128	; 0x80
 8001e58:	0240      	lsls	r0, r0, #9
 8001e5a:	4684      	mov	ip, r0
 8001e5c:	4461      	add	r1, ip
 8001e5e:	0c18      	lsrs	r0, r3, #16
 8001e60:	0412      	lsls	r2, r2, #16
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	0c12      	lsrs	r2, r2, #16
 8001e66:	1841      	adds	r1, r0, r1
 8001e68:	189b      	adds	r3, r3, r2
 8001e6a:	428e      	cmp	r6, r1
 8001e6c:	d200      	bcs.n	8001e70 <__aeabi_ddiv+0x254>
 8001e6e:	e0ff      	b.n	8002070 <__aeabi_ddiv+0x454>
 8001e70:	d100      	bne.n	8001e74 <__aeabi_ddiv+0x258>
 8001e72:	e0fa      	b.n	800206a <__aeabi_ddiv+0x44e>
 8001e74:	2301      	movs	r3, #1
 8001e76:	431d      	orrs	r5, r3
 8001e78:	4a49      	ldr	r2, [pc, #292]	; (8001fa0 <__aeabi_ddiv+0x384>)
 8001e7a:	445a      	add	r2, fp
 8001e7c:	2a00      	cmp	r2, #0
 8001e7e:	dc00      	bgt.n	8001e82 <__aeabi_ddiv+0x266>
 8001e80:	e0aa      	b.n	8001fd8 <__aeabi_ddiv+0x3bc>
 8001e82:	076b      	lsls	r3, r5, #29
 8001e84:	d000      	beq.n	8001e88 <__aeabi_ddiv+0x26c>
 8001e86:	e13d      	b.n	8002104 <__aeabi_ddiv+0x4e8>
 8001e88:	08ed      	lsrs	r5, r5, #3
 8001e8a:	4643      	mov	r3, r8
 8001e8c:	01db      	lsls	r3, r3, #7
 8001e8e:	d506      	bpl.n	8001e9e <__aeabi_ddiv+0x282>
 8001e90:	4642      	mov	r2, r8
 8001e92:	4b44      	ldr	r3, [pc, #272]	; (8001fa4 <__aeabi_ddiv+0x388>)
 8001e94:	401a      	ands	r2, r3
 8001e96:	4690      	mov	r8, r2
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	00d2      	lsls	r2, r2, #3
 8001e9c:	445a      	add	r2, fp
 8001e9e:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <__aeabi_ddiv+0x38c>)
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dd00      	ble.n	8001ea6 <__aeabi_ddiv+0x28a>
 8001ea4:	e71f      	b.n	8001ce6 <__aeabi_ddiv+0xca>
 8001ea6:	4643      	mov	r3, r8
 8001ea8:	075b      	lsls	r3, r3, #29
 8001eaa:	431d      	orrs	r5, r3
 8001eac:	4643      	mov	r3, r8
 8001eae:	0552      	lsls	r2, r2, #21
 8001eb0:	025c      	lsls	r4, r3, #9
 8001eb2:	0b24      	lsrs	r4, r4, #12
 8001eb4:	0d53      	lsrs	r3, r2, #21
 8001eb6:	e708      	b.n	8001cca <__aeabi_ddiv+0xae>
 8001eb8:	4652      	mov	r2, sl
 8001eba:	4322      	orrs	r2, r4
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_ddiv+0x2a4>
 8001ebe:	e07b      	b.n	8001fb8 <__aeabi_ddiv+0x39c>
 8001ec0:	2c00      	cmp	r4, #0
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_ddiv+0x2aa>
 8001ec4:	e0fa      	b.n	80020bc <__aeabi_ddiv+0x4a0>
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	f001 fa22 	bl	8003310 <__clzsi2>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	3a0b      	subs	r2, #11
 8001ed0:	231d      	movs	r3, #29
 8001ed2:	0001      	movs	r1, r0
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	4652      	mov	r2, sl
 8001ed8:	3908      	subs	r1, #8
 8001eda:	40da      	lsrs	r2, r3
 8001edc:	408c      	lsls	r4, r1
 8001ede:	4314      	orrs	r4, r2
 8001ee0:	4652      	mov	r2, sl
 8001ee2:	408a      	lsls	r2, r1
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <__aeabi_ddiv+0x390>)
 8001ee6:	4458      	add	r0, fp
 8001ee8:	469b      	mov	fp, r3
 8001eea:	4483      	add	fp, r0
 8001eec:	2000      	movs	r0, #0
 8001eee:	e6d5      	b.n	8001c9c <__aeabi_ddiv+0x80>
 8001ef0:	464b      	mov	r3, r9
 8001ef2:	4323      	orrs	r3, r4
 8001ef4:	4698      	mov	r8, r3
 8001ef6:	d044      	beq.n	8001f82 <__aeabi_ddiv+0x366>
 8001ef8:	2c00      	cmp	r4, #0
 8001efa:	d100      	bne.n	8001efe <__aeabi_ddiv+0x2e2>
 8001efc:	e0ce      	b.n	800209c <__aeabi_ddiv+0x480>
 8001efe:	0020      	movs	r0, r4
 8001f00:	f001 fa06 	bl	8003310 <__clzsi2>
 8001f04:	0001      	movs	r1, r0
 8001f06:	0002      	movs	r2, r0
 8001f08:	390b      	subs	r1, #11
 8001f0a:	231d      	movs	r3, #29
 8001f0c:	1a5b      	subs	r3, r3, r1
 8001f0e:	4649      	mov	r1, r9
 8001f10:	0010      	movs	r0, r2
 8001f12:	40d9      	lsrs	r1, r3
 8001f14:	3808      	subs	r0, #8
 8001f16:	4084      	lsls	r4, r0
 8001f18:	000b      	movs	r3, r1
 8001f1a:	464d      	mov	r5, r9
 8001f1c:	4323      	orrs	r3, r4
 8001f1e:	4698      	mov	r8, r3
 8001f20:	4085      	lsls	r5, r0
 8001f22:	4823      	ldr	r0, [pc, #140]	; (8001fb0 <__aeabi_ddiv+0x394>)
 8001f24:	1a83      	subs	r3, r0, r2
 8001f26:	469b      	mov	fp, r3
 8001f28:	2300      	movs	r3, #0
 8001f2a:	4699      	mov	r9, r3
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	e69a      	b.n	8001c66 <__aeabi_ddiv+0x4a>
 8001f30:	464b      	mov	r3, r9
 8001f32:	4323      	orrs	r3, r4
 8001f34:	4698      	mov	r8, r3
 8001f36:	d11d      	bne.n	8001f74 <__aeabi_ddiv+0x358>
 8001f38:	2308      	movs	r3, #8
 8001f3a:	4699      	mov	r9, r3
 8001f3c:	3b06      	subs	r3, #6
 8001f3e:	2500      	movs	r5, #0
 8001f40:	4683      	mov	fp, r0
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	e68f      	b.n	8001c66 <__aeabi_ddiv+0x4a>
 8001f46:	4652      	mov	r2, sl
 8001f48:	4322      	orrs	r2, r4
 8001f4a:	d109      	bne.n	8001f60 <__aeabi_ddiv+0x344>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	4649      	mov	r1, r9
 8001f50:	4319      	orrs	r1, r3
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <__aeabi_ddiv+0x398>)
 8001f54:	4689      	mov	r9, r1
 8001f56:	469c      	mov	ip, r3
 8001f58:	2400      	movs	r4, #0
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	44e3      	add	fp, ip
 8001f5e:	e69d      	b.n	8001c9c <__aeabi_ddiv+0x80>
 8001f60:	2303      	movs	r3, #3
 8001f62:	464a      	mov	r2, r9
 8001f64:	431a      	orrs	r2, r3
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <__aeabi_ddiv+0x398>)
 8001f68:	4691      	mov	r9, r2
 8001f6a:	469c      	mov	ip, r3
 8001f6c:	4652      	mov	r2, sl
 8001f6e:	2003      	movs	r0, #3
 8001f70:	44e3      	add	fp, ip
 8001f72:	e693      	b.n	8001c9c <__aeabi_ddiv+0x80>
 8001f74:	230c      	movs	r3, #12
 8001f76:	4699      	mov	r9, r3
 8001f78:	3b09      	subs	r3, #9
 8001f7a:	46a0      	mov	r8, r4
 8001f7c:	4683      	mov	fp, r0
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	e671      	b.n	8001c66 <__aeabi_ddiv+0x4a>
 8001f82:	2304      	movs	r3, #4
 8001f84:	4699      	mov	r9, r3
 8001f86:	2300      	movs	r3, #0
 8001f88:	469b      	mov	fp, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	2500      	movs	r5, #0
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	e669      	b.n	8001c66 <__aeabi_ddiv+0x4a>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	000007ff 	.word	0x000007ff
 8001f98:	fffffc01 	.word	0xfffffc01
 8001f9c:	0800d8d8 	.word	0x0800d8d8
 8001fa0:	000003ff 	.word	0x000003ff
 8001fa4:	feffffff 	.word	0xfeffffff
 8001fa8:	000007fe 	.word	0x000007fe
 8001fac:	000003f3 	.word	0x000003f3
 8001fb0:	fffffc0d 	.word	0xfffffc0d
 8001fb4:	fffff801 	.word	0xfffff801
 8001fb8:	4649      	mov	r1, r9
 8001fba:	2301      	movs	r3, #1
 8001fbc:	4319      	orrs	r1, r3
 8001fbe:	4689      	mov	r9, r1
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	e66a      	b.n	8001c9c <__aeabi_ddiv+0x80>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2480      	movs	r4, #128	; 0x80
 8001fca:	469a      	mov	sl, r3
 8001fcc:	2500      	movs	r5, #0
 8001fce:	4b8a      	ldr	r3, [pc, #552]	; (80021f8 <__aeabi_ddiv+0x5dc>)
 8001fd0:	0324      	lsls	r4, r4, #12
 8001fd2:	e67a      	b.n	8001cca <__aeabi_ddiv+0xae>
 8001fd4:	2501      	movs	r5, #1
 8001fd6:	426d      	negs	r5, r5
 8001fd8:	2301      	movs	r3, #1
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	2b38      	cmp	r3, #56	; 0x38
 8001fde:	dd00      	ble.n	8001fe2 <__aeabi_ddiv+0x3c6>
 8001fe0:	e670      	b.n	8001cc4 <__aeabi_ddiv+0xa8>
 8001fe2:	2b1f      	cmp	r3, #31
 8001fe4:	dc00      	bgt.n	8001fe8 <__aeabi_ddiv+0x3cc>
 8001fe6:	e0bf      	b.n	8002168 <__aeabi_ddiv+0x54c>
 8001fe8:	211f      	movs	r1, #31
 8001fea:	4249      	negs	r1, r1
 8001fec:	1a8a      	subs	r2, r1, r2
 8001fee:	4641      	mov	r1, r8
 8001ff0:	40d1      	lsrs	r1, r2
 8001ff2:	000a      	movs	r2, r1
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d004      	beq.n	8002002 <__aeabi_ddiv+0x3e6>
 8001ff8:	4641      	mov	r1, r8
 8001ffa:	4b80      	ldr	r3, [pc, #512]	; (80021fc <__aeabi_ddiv+0x5e0>)
 8001ffc:	445b      	add	r3, fp
 8001ffe:	4099      	lsls	r1, r3
 8002000:	430d      	orrs	r5, r1
 8002002:	1e6b      	subs	r3, r5, #1
 8002004:	419d      	sbcs	r5, r3
 8002006:	2307      	movs	r3, #7
 8002008:	432a      	orrs	r2, r5
 800200a:	001d      	movs	r5, r3
 800200c:	2400      	movs	r4, #0
 800200e:	4015      	ands	r5, r2
 8002010:	4213      	tst	r3, r2
 8002012:	d100      	bne.n	8002016 <__aeabi_ddiv+0x3fa>
 8002014:	e0d4      	b.n	80021c0 <__aeabi_ddiv+0x5a4>
 8002016:	210f      	movs	r1, #15
 8002018:	2300      	movs	r3, #0
 800201a:	4011      	ands	r1, r2
 800201c:	2904      	cmp	r1, #4
 800201e:	d100      	bne.n	8002022 <__aeabi_ddiv+0x406>
 8002020:	e0cb      	b.n	80021ba <__aeabi_ddiv+0x59e>
 8002022:	1d11      	adds	r1, r2, #4
 8002024:	4291      	cmp	r1, r2
 8002026:	4192      	sbcs	r2, r2
 8002028:	4252      	negs	r2, r2
 800202a:	189b      	adds	r3, r3, r2
 800202c:	000a      	movs	r2, r1
 800202e:	0219      	lsls	r1, r3, #8
 8002030:	d400      	bmi.n	8002034 <__aeabi_ddiv+0x418>
 8002032:	e0c2      	b.n	80021ba <__aeabi_ddiv+0x59e>
 8002034:	2301      	movs	r3, #1
 8002036:	2400      	movs	r4, #0
 8002038:	2500      	movs	r5, #0
 800203a:	e646      	b.n	8001cca <__aeabi_ddiv+0xae>
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	4641      	mov	r1, r8
 8002040:	031b      	lsls	r3, r3, #12
 8002042:	4219      	tst	r1, r3
 8002044:	d008      	beq.n	8002058 <__aeabi_ddiv+0x43c>
 8002046:	421c      	tst	r4, r3
 8002048:	d106      	bne.n	8002058 <__aeabi_ddiv+0x43c>
 800204a:	431c      	orrs	r4, r3
 800204c:	0324      	lsls	r4, r4, #12
 800204e:	46ba      	mov	sl, r7
 8002050:	0015      	movs	r5, r2
 8002052:	4b69      	ldr	r3, [pc, #420]	; (80021f8 <__aeabi_ddiv+0x5dc>)
 8002054:	0b24      	lsrs	r4, r4, #12
 8002056:	e638      	b.n	8001cca <__aeabi_ddiv+0xae>
 8002058:	2480      	movs	r4, #128	; 0x80
 800205a:	4643      	mov	r3, r8
 800205c:	0324      	lsls	r4, r4, #12
 800205e:	431c      	orrs	r4, r3
 8002060:	0324      	lsls	r4, r4, #12
 8002062:	46b2      	mov	sl, r6
 8002064:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <__aeabi_ddiv+0x5dc>)
 8002066:	0b24      	lsrs	r4, r4, #12
 8002068:	e62f      	b.n	8001cca <__aeabi_ddiv+0xae>
 800206a:	2b00      	cmp	r3, #0
 800206c:	d100      	bne.n	8002070 <__aeabi_ddiv+0x454>
 800206e:	e703      	b.n	8001e78 <__aeabi_ddiv+0x25c>
 8002070:	19a6      	adds	r6, r4, r6
 8002072:	1e68      	subs	r0, r5, #1
 8002074:	42a6      	cmp	r6, r4
 8002076:	d200      	bcs.n	800207a <__aeabi_ddiv+0x45e>
 8002078:	e08d      	b.n	8002196 <__aeabi_ddiv+0x57a>
 800207a:	428e      	cmp	r6, r1
 800207c:	d200      	bcs.n	8002080 <__aeabi_ddiv+0x464>
 800207e:	e0a3      	b.n	80021c8 <__aeabi_ddiv+0x5ac>
 8002080:	d100      	bne.n	8002084 <__aeabi_ddiv+0x468>
 8002082:	e0b3      	b.n	80021ec <__aeabi_ddiv+0x5d0>
 8002084:	0005      	movs	r5, r0
 8002086:	e6f5      	b.n	8001e74 <__aeabi_ddiv+0x258>
 8002088:	42aa      	cmp	r2, r5
 800208a:	d900      	bls.n	800208e <__aeabi_ddiv+0x472>
 800208c:	e639      	b.n	8001d02 <__aeabi_ddiv+0xe6>
 800208e:	4643      	mov	r3, r8
 8002090:	07de      	lsls	r6, r3, #31
 8002092:	0858      	lsrs	r0, r3, #1
 8002094:	086b      	lsrs	r3, r5, #1
 8002096:	431e      	orrs	r6, r3
 8002098:	07ed      	lsls	r5, r5, #31
 800209a:	e639      	b.n	8001d10 <__aeabi_ddiv+0xf4>
 800209c:	4648      	mov	r0, r9
 800209e:	f001 f937 	bl	8003310 <__clzsi2>
 80020a2:	0001      	movs	r1, r0
 80020a4:	0002      	movs	r2, r0
 80020a6:	3115      	adds	r1, #21
 80020a8:	3220      	adds	r2, #32
 80020aa:	291c      	cmp	r1, #28
 80020ac:	dc00      	bgt.n	80020b0 <__aeabi_ddiv+0x494>
 80020ae:	e72c      	b.n	8001f0a <__aeabi_ddiv+0x2ee>
 80020b0:	464b      	mov	r3, r9
 80020b2:	3808      	subs	r0, #8
 80020b4:	4083      	lsls	r3, r0
 80020b6:	2500      	movs	r5, #0
 80020b8:	4698      	mov	r8, r3
 80020ba:	e732      	b.n	8001f22 <__aeabi_ddiv+0x306>
 80020bc:	f001 f928 	bl	8003310 <__clzsi2>
 80020c0:	0003      	movs	r3, r0
 80020c2:	001a      	movs	r2, r3
 80020c4:	3215      	adds	r2, #21
 80020c6:	3020      	adds	r0, #32
 80020c8:	2a1c      	cmp	r2, #28
 80020ca:	dc00      	bgt.n	80020ce <__aeabi_ddiv+0x4b2>
 80020cc:	e700      	b.n	8001ed0 <__aeabi_ddiv+0x2b4>
 80020ce:	4654      	mov	r4, sl
 80020d0:	3b08      	subs	r3, #8
 80020d2:	2200      	movs	r2, #0
 80020d4:	409c      	lsls	r4, r3
 80020d6:	e705      	b.n	8001ee4 <__aeabi_ddiv+0x2c8>
 80020d8:	1936      	adds	r6, r6, r4
 80020da:	3b01      	subs	r3, #1
 80020dc:	42b4      	cmp	r4, r6
 80020de:	d900      	bls.n	80020e2 <__aeabi_ddiv+0x4c6>
 80020e0:	e6a6      	b.n	8001e30 <__aeabi_ddiv+0x214>
 80020e2:	42b2      	cmp	r2, r6
 80020e4:	d800      	bhi.n	80020e8 <__aeabi_ddiv+0x4cc>
 80020e6:	e6a3      	b.n	8001e30 <__aeabi_ddiv+0x214>
 80020e8:	1e83      	subs	r3, r0, #2
 80020ea:	1936      	adds	r6, r6, r4
 80020ec:	e6a0      	b.n	8001e30 <__aeabi_ddiv+0x214>
 80020ee:	1909      	adds	r1, r1, r4
 80020f0:	3d01      	subs	r5, #1
 80020f2:	428c      	cmp	r4, r1
 80020f4:	d900      	bls.n	80020f8 <__aeabi_ddiv+0x4dc>
 80020f6:	e68d      	b.n	8001e14 <__aeabi_ddiv+0x1f8>
 80020f8:	428a      	cmp	r2, r1
 80020fa:	d800      	bhi.n	80020fe <__aeabi_ddiv+0x4e2>
 80020fc:	e68a      	b.n	8001e14 <__aeabi_ddiv+0x1f8>
 80020fe:	1e85      	subs	r5, r0, #2
 8002100:	1909      	adds	r1, r1, r4
 8002102:	e687      	b.n	8001e14 <__aeabi_ddiv+0x1f8>
 8002104:	230f      	movs	r3, #15
 8002106:	402b      	ands	r3, r5
 8002108:	2b04      	cmp	r3, #4
 800210a:	d100      	bne.n	800210e <__aeabi_ddiv+0x4f2>
 800210c:	e6bc      	b.n	8001e88 <__aeabi_ddiv+0x26c>
 800210e:	2305      	movs	r3, #5
 8002110:	425b      	negs	r3, r3
 8002112:	42ab      	cmp	r3, r5
 8002114:	419b      	sbcs	r3, r3
 8002116:	3504      	adds	r5, #4
 8002118:	425b      	negs	r3, r3
 800211a:	08ed      	lsrs	r5, r5, #3
 800211c:	4498      	add	r8, r3
 800211e:	e6b4      	b.n	8001e8a <__aeabi_ddiv+0x26e>
 8002120:	42af      	cmp	r7, r5
 8002122:	d900      	bls.n	8002126 <__aeabi_ddiv+0x50a>
 8002124:	e660      	b.n	8001de8 <__aeabi_ddiv+0x1cc>
 8002126:	4282      	cmp	r2, r0
 8002128:	d804      	bhi.n	8002134 <__aeabi_ddiv+0x518>
 800212a:	d000      	beq.n	800212e <__aeabi_ddiv+0x512>
 800212c:	e65c      	b.n	8001de8 <__aeabi_ddiv+0x1cc>
 800212e:	42ae      	cmp	r6, r5
 8002130:	d800      	bhi.n	8002134 <__aeabi_ddiv+0x518>
 8002132:	e659      	b.n	8001de8 <__aeabi_ddiv+0x1cc>
 8002134:	2302      	movs	r3, #2
 8002136:	425b      	negs	r3, r3
 8002138:	469c      	mov	ip, r3
 800213a:	9b00      	ldr	r3, [sp, #0]
 800213c:	44e0      	add	r8, ip
 800213e:	469c      	mov	ip, r3
 8002140:	4465      	add	r5, ip
 8002142:	429d      	cmp	r5, r3
 8002144:	419b      	sbcs	r3, r3
 8002146:	425b      	negs	r3, r3
 8002148:	191b      	adds	r3, r3, r4
 800214a:	18c0      	adds	r0, r0, r3
 800214c:	e64d      	b.n	8001dea <__aeabi_ddiv+0x1ce>
 800214e:	428a      	cmp	r2, r1
 8002150:	d800      	bhi.n	8002154 <__aeabi_ddiv+0x538>
 8002152:	e60e      	b.n	8001d72 <__aeabi_ddiv+0x156>
 8002154:	1e83      	subs	r3, r0, #2
 8002156:	1909      	adds	r1, r1, r4
 8002158:	e60b      	b.n	8001d72 <__aeabi_ddiv+0x156>
 800215a:	428a      	cmp	r2, r1
 800215c:	d800      	bhi.n	8002160 <__aeabi_ddiv+0x544>
 800215e:	e5f4      	b.n	8001d4a <__aeabi_ddiv+0x12e>
 8002160:	1e83      	subs	r3, r0, #2
 8002162:	4698      	mov	r8, r3
 8002164:	1909      	adds	r1, r1, r4
 8002166:	e5f0      	b.n	8001d4a <__aeabi_ddiv+0x12e>
 8002168:	4925      	ldr	r1, [pc, #148]	; (8002200 <__aeabi_ddiv+0x5e4>)
 800216a:	0028      	movs	r0, r5
 800216c:	4459      	add	r1, fp
 800216e:	408d      	lsls	r5, r1
 8002170:	4642      	mov	r2, r8
 8002172:	408a      	lsls	r2, r1
 8002174:	1e69      	subs	r1, r5, #1
 8002176:	418d      	sbcs	r5, r1
 8002178:	4641      	mov	r1, r8
 800217a:	40d8      	lsrs	r0, r3
 800217c:	40d9      	lsrs	r1, r3
 800217e:	4302      	orrs	r2, r0
 8002180:	432a      	orrs	r2, r5
 8002182:	000b      	movs	r3, r1
 8002184:	0751      	lsls	r1, r2, #29
 8002186:	d100      	bne.n	800218a <__aeabi_ddiv+0x56e>
 8002188:	e751      	b.n	800202e <__aeabi_ddiv+0x412>
 800218a:	210f      	movs	r1, #15
 800218c:	4011      	ands	r1, r2
 800218e:	2904      	cmp	r1, #4
 8002190:	d000      	beq.n	8002194 <__aeabi_ddiv+0x578>
 8002192:	e746      	b.n	8002022 <__aeabi_ddiv+0x406>
 8002194:	e74b      	b.n	800202e <__aeabi_ddiv+0x412>
 8002196:	0005      	movs	r5, r0
 8002198:	428e      	cmp	r6, r1
 800219a:	d000      	beq.n	800219e <__aeabi_ddiv+0x582>
 800219c:	e66a      	b.n	8001e74 <__aeabi_ddiv+0x258>
 800219e:	9a00      	ldr	r2, [sp, #0]
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d000      	beq.n	80021a6 <__aeabi_ddiv+0x58a>
 80021a4:	e666      	b.n	8001e74 <__aeabi_ddiv+0x258>
 80021a6:	e667      	b.n	8001e78 <__aeabi_ddiv+0x25c>
 80021a8:	4a16      	ldr	r2, [pc, #88]	; (8002204 <__aeabi_ddiv+0x5e8>)
 80021aa:	445a      	add	r2, fp
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	dc00      	bgt.n	80021b2 <__aeabi_ddiv+0x596>
 80021b0:	e710      	b.n	8001fd4 <__aeabi_ddiv+0x3b8>
 80021b2:	2301      	movs	r3, #1
 80021b4:	2500      	movs	r5, #0
 80021b6:	4498      	add	r8, r3
 80021b8:	e667      	b.n	8001e8a <__aeabi_ddiv+0x26e>
 80021ba:	075d      	lsls	r5, r3, #29
 80021bc:	025b      	lsls	r3, r3, #9
 80021be:	0b1c      	lsrs	r4, r3, #12
 80021c0:	08d2      	lsrs	r2, r2, #3
 80021c2:	2300      	movs	r3, #0
 80021c4:	4315      	orrs	r5, r2
 80021c6:	e580      	b.n	8001cca <__aeabi_ddiv+0xae>
 80021c8:	9800      	ldr	r0, [sp, #0]
 80021ca:	3d02      	subs	r5, #2
 80021cc:	0042      	lsls	r2, r0, #1
 80021ce:	4282      	cmp	r2, r0
 80021d0:	41bf      	sbcs	r7, r7
 80021d2:	427f      	negs	r7, r7
 80021d4:	193c      	adds	r4, r7, r4
 80021d6:	1936      	adds	r6, r6, r4
 80021d8:	9200      	str	r2, [sp, #0]
 80021da:	e7dd      	b.n	8002198 <__aeabi_ddiv+0x57c>
 80021dc:	2480      	movs	r4, #128	; 0x80
 80021de:	4643      	mov	r3, r8
 80021e0:	0324      	lsls	r4, r4, #12
 80021e2:	431c      	orrs	r4, r3
 80021e4:	0324      	lsls	r4, r4, #12
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <__aeabi_ddiv+0x5dc>)
 80021e8:	0b24      	lsrs	r4, r4, #12
 80021ea:	e56e      	b.n	8001cca <__aeabi_ddiv+0xae>
 80021ec:	9a00      	ldr	r2, [sp, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3ea      	bcc.n	80021c8 <__aeabi_ddiv+0x5ac>
 80021f2:	0005      	movs	r5, r0
 80021f4:	e7d3      	b.n	800219e <__aeabi_ddiv+0x582>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	000007ff 	.word	0x000007ff
 80021fc:	0000043e 	.word	0x0000043e
 8002200:	0000041e 	.word	0x0000041e
 8002204:	000003ff 	.word	0x000003ff

08002208 <__eqdf2>:
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	464e      	mov	r6, r9
 800220c:	4645      	mov	r5, r8
 800220e:	46de      	mov	lr, fp
 8002210:	4657      	mov	r7, sl
 8002212:	4690      	mov	r8, r2
 8002214:	b5e0      	push	{r5, r6, r7, lr}
 8002216:	0017      	movs	r7, r2
 8002218:	031a      	lsls	r2, r3, #12
 800221a:	0b12      	lsrs	r2, r2, #12
 800221c:	0005      	movs	r5, r0
 800221e:	4684      	mov	ip, r0
 8002220:	4819      	ldr	r0, [pc, #100]	; (8002288 <__eqdf2+0x80>)
 8002222:	030e      	lsls	r6, r1, #12
 8002224:	004c      	lsls	r4, r1, #1
 8002226:	4691      	mov	r9, r2
 8002228:	005a      	lsls	r2, r3, #1
 800222a:	0fdb      	lsrs	r3, r3, #31
 800222c:	469b      	mov	fp, r3
 800222e:	0b36      	lsrs	r6, r6, #12
 8002230:	0d64      	lsrs	r4, r4, #21
 8002232:	0fc9      	lsrs	r1, r1, #31
 8002234:	0d52      	lsrs	r2, r2, #21
 8002236:	4284      	cmp	r4, r0
 8002238:	d019      	beq.n	800226e <__eqdf2+0x66>
 800223a:	4282      	cmp	r2, r0
 800223c:	d010      	beq.n	8002260 <__eqdf2+0x58>
 800223e:	2001      	movs	r0, #1
 8002240:	4294      	cmp	r4, r2
 8002242:	d10e      	bne.n	8002262 <__eqdf2+0x5a>
 8002244:	454e      	cmp	r6, r9
 8002246:	d10c      	bne.n	8002262 <__eqdf2+0x5a>
 8002248:	2001      	movs	r0, #1
 800224a:	45c4      	cmp	ip, r8
 800224c:	d109      	bne.n	8002262 <__eqdf2+0x5a>
 800224e:	4559      	cmp	r1, fp
 8002250:	d017      	beq.n	8002282 <__eqdf2+0x7a>
 8002252:	2c00      	cmp	r4, #0
 8002254:	d105      	bne.n	8002262 <__eqdf2+0x5a>
 8002256:	0030      	movs	r0, r6
 8002258:	4328      	orrs	r0, r5
 800225a:	1e43      	subs	r3, r0, #1
 800225c:	4198      	sbcs	r0, r3
 800225e:	e000      	b.n	8002262 <__eqdf2+0x5a>
 8002260:	2001      	movs	r0, #1
 8002262:	bcf0      	pop	{r4, r5, r6, r7}
 8002264:	46bb      	mov	fp, r7
 8002266:	46b2      	mov	sl, r6
 8002268:	46a9      	mov	r9, r5
 800226a:	46a0      	mov	r8, r4
 800226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800226e:	0033      	movs	r3, r6
 8002270:	2001      	movs	r0, #1
 8002272:	432b      	orrs	r3, r5
 8002274:	d1f5      	bne.n	8002262 <__eqdf2+0x5a>
 8002276:	42a2      	cmp	r2, r4
 8002278:	d1f3      	bne.n	8002262 <__eqdf2+0x5a>
 800227a:	464b      	mov	r3, r9
 800227c:	433b      	orrs	r3, r7
 800227e:	d1f0      	bne.n	8002262 <__eqdf2+0x5a>
 8002280:	e7e2      	b.n	8002248 <__eqdf2+0x40>
 8002282:	2000      	movs	r0, #0
 8002284:	e7ed      	b.n	8002262 <__eqdf2+0x5a>
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	000007ff 	.word	0x000007ff

0800228c <__gedf2>:
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228e:	4647      	mov	r7, r8
 8002290:	46ce      	mov	lr, r9
 8002292:	0004      	movs	r4, r0
 8002294:	0018      	movs	r0, r3
 8002296:	0016      	movs	r6, r2
 8002298:	031b      	lsls	r3, r3, #12
 800229a:	0b1b      	lsrs	r3, r3, #12
 800229c:	4d2d      	ldr	r5, [pc, #180]	; (8002354 <__gedf2+0xc8>)
 800229e:	004a      	lsls	r2, r1, #1
 80022a0:	4699      	mov	r9, r3
 80022a2:	b580      	push	{r7, lr}
 80022a4:	0043      	lsls	r3, r0, #1
 80022a6:	030f      	lsls	r7, r1, #12
 80022a8:	46a4      	mov	ip, r4
 80022aa:	46b0      	mov	r8, r6
 80022ac:	0b3f      	lsrs	r7, r7, #12
 80022ae:	0d52      	lsrs	r2, r2, #21
 80022b0:	0fc9      	lsrs	r1, r1, #31
 80022b2:	0d5b      	lsrs	r3, r3, #21
 80022b4:	0fc0      	lsrs	r0, r0, #31
 80022b6:	42aa      	cmp	r2, r5
 80022b8:	d021      	beq.n	80022fe <__gedf2+0x72>
 80022ba:	42ab      	cmp	r3, r5
 80022bc:	d013      	beq.n	80022e6 <__gedf2+0x5a>
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d122      	bne.n	8002308 <__gedf2+0x7c>
 80022c2:	433c      	orrs	r4, r7
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d102      	bne.n	80022ce <__gedf2+0x42>
 80022c8:	464d      	mov	r5, r9
 80022ca:	432e      	orrs	r6, r5
 80022cc:	d022      	beq.n	8002314 <__gedf2+0x88>
 80022ce:	2c00      	cmp	r4, #0
 80022d0:	d010      	beq.n	80022f4 <__gedf2+0x68>
 80022d2:	4281      	cmp	r1, r0
 80022d4:	d022      	beq.n	800231c <__gedf2+0x90>
 80022d6:	2002      	movs	r0, #2
 80022d8:	3901      	subs	r1, #1
 80022da:	4008      	ands	r0, r1
 80022dc:	3801      	subs	r0, #1
 80022de:	bcc0      	pop	{r6, r7}
 80022e0:	46b9      	mov	r9, r7
 80022e2:	46b0      	mov	r8, r6
 80022e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e6:	464d      	mov	r5, r9
 80022e8:	432e      	orrs	r6, r5
 80022ea:	d129      	bne.n	8002340 <__gedf2+0xb4>
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	d1f0      	bne.n	80022d2 <__gedf2+0x46>
 80022f0:	433c      	orrs	r4, r7
 80022f2:	d1ee      	bne.n	80022d2 <__gedf2+0x46>
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d1f2      	bne.n	80022de <__gedf2+0x52>
 80022f8:	2001      	movs	r0, #1
 80022fa:	4240      	negs	r0, r0
 80022fc:	e7ef      	b.n	80022de <__gedf2+0x52>
 80022fe:	003d      	movs	r5, r7
 8002300:	4325      	orrs	r5, r4
 8002302:	d11d      	bne.n	8002340 <__gedf2+0xb4>
 8002304:	4293      	cmp	r3, r2
 8002306:	d0ee      	beq.n	80022e6 <__gedf2+0x5a>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1e2      	bne.n	80022d2 <__gedf2+0x46>
 800230c:	464c      	mov	r4, r9
 800230e:	4326      	orrs	r6, r4
 8002310:	d1df      	bne.n	80022d2 <__gedf2+0x46>
 8002312:	e7e0      	b.n	80022d6 <__gedf2+0x4a>
 8002314:	2000      	movs	r0, #0
 8002316:	2c00      	cmp	r4, #0
 8002318:	d0e1      	beq.n	80022de <__gedf2+0x52>
 800231a:	e7dc      	b.n	80022d6 <__gedf2+0x4a>
 800231c:	429a      	cmp	r2, r3
 800231e:	dc0a      	bgt.n	8002336 <__gedf2+0xaa>
 8002320:	dbe8      	blt.n	80022f4 <__gedf2+0x68>
 8002322:	454f      	cmp	r7, r9
 8002324:	d8d7      	bhi.n	80022d6 <__gedf2+0x4a>
 8002326:	d00e      	beq.n	8002346 <__gedf2+0xba>
 8002328:	2000      	movs	r0, #0
 800232a:	454f      	cmp	r7, r9
 800232c:	d2d7      	bcs.n	80022de <__gedf2+0x52>
 800232e:	2900      	cmp	r1, #0
 8002330:	d0e2      	beq.n	80022f8 <__gedf2+0x6c>
 8002332:	0008      	movs	r0, r1
 8002334:	e7d3      	b.n	80022de <__gedf2+0x52>
 8002336:	4243      	negs	r3, r0
 8002338:	4158      	adcs	r0, r3
 800233a:	0040      	lsls	r0, r0, #1
 800233c:	3801      	subs	r0, #1
 800233e:	e7ce      	b.n	80022de <__gedf2+0x52>
 8002340:	2002      	movs	r0, #2
 8002342:	4240      	negs	r0, r0
 8002344:	e7cb      	b.n	80022de <__gedf2+0x52>
 8002346:	45c4      	cmp	ip, r8
 8002348:	d8c5      	bhi.n	80022d6 <__gedf2+0x4a>
 800234a:	2000      	movs	r0, #0
 800234c:	45c4      	cmp	ip, r8
 800234e:	d2c6      	bcs.n	80022de <__gedf2+0x52>
 8002350:	e7ed      	b.n	800232e <__gedf2+0xa2>
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	000007ff 	.word	0x000007ff

08002358 <__ledf2>:
 8002358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235a:	4647      	mov	r7, r8
 800235c:	46ce      	mov	lr, r9
 800235e:	0004      	movs	r4, r0
 8002360:	0018      	movs	r0, r3
 8002362:	0016      	movs	r6, r2
 8002364:	031b      	lsls	r3, r3, #12
 8002366:	0b1b      	lsrs	r3, r3, #12
 8002368:	4d2c      	ldr	r5, [pc, #176]	; (800241c <__ledf2+0xc4>)
 800236a:	004a      	lsls	r2, r1, #1
 800236c:	4699      	mov	r9, r3
 800236e:	b580      	push	{r7, lr}
 8002370:	0043      	lsls	r3, r0, #1
 8002372:	030f      	lsls	r7, r1, #12
 8002374:	46a4      	mov	ip, r4
 8002376:	46b0      	mov	r8, r6
 8002378:	0b3f      	lsrs	r7, r7, #12
 800237a:	0d52      	lsrs	r2, r2, #21
 800237c:	0fc9      	lsrs	r1, r1, #31
 800237e:	0d5b      	lsrs	r3, r3, #21
 8002380:	0fc0      	lsrs	r0, r0, #31
 8002382:	42aa      	cmp	r2, r5
 8002384:	d00d      	beq.n	80023a2 <__ledf2+0x4a>
 8002386:	42ab      	cmp	r3, r5
 8002388:	d010      	beq.n	80023ac <__ledf2+0x54>
 800238a:	2a00      	cmp	r2, #0
 800238c:	d127      	bne.n	80023de <__ledf2+0x86>
 800238e:	433c      	orrs	r4, r7
 8002390:	2b00      	cmp	r3, #0
 8002392:	d111      	bne.n	80023b8 <__ledf2+0x60>
 8002394:	464d      	mov	r5, r9
 8002396:	432e      	orrs	r6, r5
 8002398:	d10e      	bne.n	80023b8 <__ledf2+0x60>
 800239a:	2000      	movs	r0, #0
 800239c:	2c00      	cmp	r4, #0
 800239e:	d015      	beq.n	80023cc <__ledf2+0x74>
 80023a0:	e00e      	b.n	80023c0 <__ledf2+0x68>
 80023a2:	003d      	movs	r5, r7
 80023a4:	4325      	orrs	r5, r4
 80023a6:	d110      	bne.n	80023ca <__ledf2+0x72>
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d118      	bne.n	80023de <__ledf2+0x86>
 80023ac:	464d      	mov	r5, r9
 80023ae:	432e      	orrs	r6, r5
 80023b0:	d10b      	bne.n	80023ca <__ledf2+0x72>
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	d102      	bne.n	80023bc <__ledf2+0x64>
 80023b6:	433c      	orrs	r4, r7
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d00b      	beq.n	80023d4 <__ledf2+0x7c>
 80023bc:	4281      	cmp	r1, r0
 80023be:	d014      	beq.n	80023ea <__ledf2+0x92>
 80023c0:	2002      	movs	r0, #2
 80023c2:	3901      	subs	r1, #1
 80023c4:	4008      	ands	r0, r1
 80023c6:	3801      	subs	r0, #1
 80023c8:	e000      	b.n	80023cc <__ledf2+0x74>
 80023ca:	2002      	movs	r0, #2
 80023cc:	bcc0      	pop	{r6, r7}
 80023ce:	46b9      	mov	r9, r7
 80023d0:	46b0      	mov	r8, r6
 80023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d4:	2800      	cmp	r0, #0
 80023d6:	d1f9      	bne.n	80023cc <__ledf2+0x74>
 80023d8:	2001      	movs	r0, #1
 80023da:	4240      	negs	r0, r0
 80023dc:	e7f6      	b.n	80023cc <__ledf2+0x74>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ec      	bne.n	80023bc <__ledf2+0x64>
 80023e2:	464c      	mov	r4, r9
 80023e4:	4326      	orrs	r6, r4
 80023e6:	d1e9      	bne.n	80023bc <__ledf2+0x64>
 80023e8:	e7ea      	b.n	80023c0 <__ledf2+0x68>
 80023ea:	429a      	cmp	r2, r3
 80023ec:	dd04      	ble.n	80023f8 <__ledf2+0xa0>
 80023ee:	4243      	negs	r3, r0
 80023f0:	4158      	adcs	r0, r3
 80023f2:	0040      	lsls	r0, r0, #1
 80023f4:	3801      	subs	r0, #1
 80023f6:	e7e9      	b.n	80023cc <__ledf2+0x74>
 80023f8:	429a      	cmp	r2, r3
 80023fa:	dbeb      	blt.n	80023d4 <__ledf2+0x7c>
 80023fc:	454f      	cmp	r7, r9
 80023fe:	d8df      	bhi.n	80023c0 <__ledf2+0x68>
 8002400:	d006      	beq.n	8002410 <__ledf2+0xb8>
 8002402:	2000      	movs	r0, #0
 8002404:	454f      	cmp	r7, r9
 8002406:	d2e1      	bcs.n	80023cc <__ledf2+0x74>
 8002408:	2900      	cmp	r1, #0
 800240a:	d0e5      	beq.n	80023d8 <__ledf2+0x80>
 800240c:	0008      	movs	r0, r1
 800240e:	e7dd      	b.n	80023cc <__ledf2+0x74>
 8002410:	45c4      	cmp	ip, r8
 8002412:	d8d5      	bhi.n	80023c0 <__ledf2+0x68>
 8002414:	2000      	movs	r0, #0
 8002416:	45c4      	cmp	ip, r8
 8002418:	d2d8      	bcs.n	80023cc <__ledf2+0x74>
 800241a:	e7f5      	b.n	8002408 <__ledf2+0xb0>
 800241c:	000007ff 	.word	0x000007ff

08002420 <__aeabi_dmul>:
 8002420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002422:	4657      	mov	r7, sl
 8002424:	464e      	mov	r6, r9
 8002426:	4645      	mov	r5, r8
 8002428:	46de      	mov	lr, fp
 800242a:	b5e0      	push	{r5, r6, r7, lr}
 800242c:	4698      	mov	r8, r3
 800242e:	030c      	lsls	r4, r1, #12
 8002430:	004b      	lsls	r3, r1, #1
 8002432:	0006      	movs	r6, r0
 8002434:	4692      	mov	sl, r2
 8002436:	b087      	sub	sp, #28
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	0d5b      	lsrs	r3, r3, #21
 800243c:	0fcf      	lsrs	r7, r1, #31
 800243e:	2b00      	cmp	r3, #0
 8002440:	d100      	bne.n	8002444 <__aeabi_dmul+0x24>
 8002442:	e15c      	b.n	80026fe <__aeabi_dmul+0x2de>
 8002444:	4ad9      	ldr	r2, [pc, #868]	; (80027ac <__aeabi_dmul+0x38c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d100      	bne.n	800244c <__aeabi_dmul+0x2c>
 800244a:	e175      	b.n	8002738 <__aeabi_dmul+0x318>
 800244c:	0f42      	lsrs	r2, r0, #29
 800244e:	00e4      	lsls	r4, r4, #3
 8002450:	4314      	orrs	r4, r2
 8002452:	2280      	movs	r2, #128	; 0x80
 8002454:	0412      	lsls	r2, r2, #16
 8002456:	4314      	orrs	r4, r2
 8002458:	4ad5      	ldr	r2, [pc, #852]	; (80027b0 <__aeabi_dmul+0x390>)
 800245a:	00c5      	lsls	r5, r0, #3
 800245c:	4694      	mov	ip, r2
 800245e:	4463      	add	r3, ip
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	4699      	mov	r9, r3
 8002466:	469b      	mov	fp, r3
 8002468:	4643      	mov	r3, r8
 800246a:	4642      	mov	r2, r8
 800246c:	031e      	lsls	r6, r3, #12
 800246e:	0fd2      	lsrs	r2, r2, #31
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4650      	mov	r0, sl
 8002474:	4690      	mov	r8, r2
 8002476:	0b36      	lsrs	r6, r6, #12
 8002478:	0d5b      	lsrs	r3, r3, #21
 800247a:	d100      	bne.n	800247e <__aeabi_dmul+0x5e>
 800247c:	e120      	b.n	80026c0 <__aeabi_dmul+0x2a0>
 800247e:	4acb      	ldr	r2, [pc, #812]	; (80027ac <__aeabi_dmul+0x38c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d100      	bne.n	8002486 <__aeabi_dmul+0x66>
 8002484:	e162      	b.n	800274c <__aeabi_dmul+0x32c>
 8002486:	49ca      	ldr	r1, [pc, #808]	; (80027b0 <__aeabi_dmul+0x390>)
 8002488:	0f42      	lsrs	r2, r0, #29
 800248a:	468c      	mov	ip, r1
 800248c:	9900      	ldr	r1, [sp, #0]
 800248e:	4463      	add	r3, ip
 8002490:	00f6      	lsls	r6, r6, #3
 8002492:	468c      	mov	ip, r1
 8002494:	4316      	orrs	r6, r2
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	449c      	add	ip, r3
 800249a:	0412      	lsls	r2, r2, #16
 800249c:	4663      	mov	r3, ip
 800249e:	4316      	orrs	r6, r2
 80024a0:	00c2      	lsls	r2, r0, #3
 80024a2:	2000      	movs	r0, #0
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	9900      	ldr	r1, [sp, #0]
 80024a8:	4643      	mov	r3, r8
 80024aa:	3101      	adds	r1, #1
 80024ac:	468c      	mov	ip, r1
 80024ae:	4649      	mov	r1, r9
 80024b0:	407b      	eors	r3, r7
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	290f      	cmp	r1, #15
 80024b6:	d826      	bhi.n	8002506 <__aeabi_dmul+0xe6>
 80024b8:	4bbe      	ldr	r3, [pc, #760]	; (80027b4 <__aeabi_dmul+0x394>)
 80024ba:	0089      	lsls	r1, r1, #2
 80024bc:	5859      	ldr	r1, [r3, r1]
 80024be:	468f      	mov	pc, r1
 80024c0:	4643      	mov	r3, r8
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	0034      	movs	r4, r6
 80024c6:	0015      	movs	r5, r2
 80024c8:	4683      	mov	fp, r0
 80024ca:	465b      	mov	r3, fp
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d016      	beq.n	80024fe <__aeabi_dmul+0xde>
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d100      	bne.n	80024d6 <__aeabi_dmul+0xb6>
 80024d4:	e203      	b.n	80028de <__aeabi_dmul+0x4be>
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d000      	beq.n	80024dc <__aeabi_dmul+0xbc>
 80024da:	e0cd      	b.n	8002678 <__aeabi_dmul+0x258>
 80024dc:	2200      	movs	r2, #0
 80024de:	2400      	movs	r4, #0
 80024e0:	2500      	movs	r5, #0
 80024e2:	9b01      	ldr	r3, [sp, #4]
 80024e4:	0512      	lsls	r2, r2, #20
 80024e6:	4322      	orrs	r2, r4
 80024e8:	07db      	lsls	r3, r3, #31
 80024ea:	431a      	orrs	r2, r3
 80024ec:	0028      	movs	r0, r5
 80024ee:	0011      	movs	r1, r2
 80024f0:	b007      	add	sp, #28
 80024f2:	bcf0      	pop	{r4, r5, r6, r7}
 80024f4:	46bb      	mov	fp, r7
 80024f6:	46b2      	mov	sl, r6
 80024f8:	46a9      	mov	r9, r5
 80024fa:	46a0      	mov	r8, r4
 80024fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fe:	2400      	movs	r4, #0
 8002500:	2500      	movs	r5, #0
 8002502:	4aaa      	ldr	r2, [pc, #680]	; (80027ac <__aeabi_dmul+0x38c>)
 8002504:	e7ed      	b.n	80024e2 <__aeabi_dmul+0xc2>
 8002506:	0c28      	lsrs	r0, r5, #16
 8002508:	042d      	lsls	r5, r5, #16
 800250a:	0c2d      	lsrs	r5, r5, #16
 800250c:	002b      	movs	r3, r5
 800250e:	0c11      	lsrs	r1, r2, #16
 8002510:	0412      	lsls	r2, r2, #16
 8002512:	0c12      	lsrs	r2, r2, #16
 8002514:	4353      	muls	r3, r2
 8002516:	4698      	mov	r8, r3
 8002518:	0013      	movs	r3, r2
 800251a:	002f      	movs	r7, r5
 800251c:	4343      	muls	r3, r0
 800251e:	4699      	mov	r9, r3
 8002520:	434f      	muls	r7, r1
 8002522:	444f      	add	r7, r9
 8002524:	46bb      	mov	fp, r7
 8002526:	4647      	mov	r7, r8
 8002528:	000b      	movs	r3, r1
 800252a:	0c3f      	lsrs	r7, r7, #16
 800252c:	46ba      	mov	sl, r7
 800252e:	4343      	muls	r3, r0
 8002530:	44da      	add	sl, fp
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	45d1      	cmp	r9, sl
 8002536:	d904      	bls.n	8002542 <__aeabi_dmul+0x122>
 8002538:	2780      	movs	r7, #128	; 0x80
 800253a:	027f      	lsls	r7, r7, #9
 800253c:	46b9      	mov	r9, r7
 800253e:	444b      	add	r3, r9
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	4653      	mov	r3, sl
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	469b      	mov	fp, r3
 8002548:	4653      	mov	r3, sl
 800254a:	041f      	lsls	r7, r3, #16
 800254c:	4643      	mov	r3, r8
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	4698      	mov	r8, r3
 8002554:	003b      	movs	r3, r7
 8002556:	4443      	add	r3, r8
 8002558:	9304      	str	r3, [sp, #16]
 800255a:	0c33      	lsrs	r3, r6, #16
 800255c:	0436      	lsls	r6, r6, #16
 800255e:	0c36      	lsrs	r6, r6, #16
 8002560:	4698      	mov	r8, r3
 8002562:	0033      	movs	r3, r6
 8002564:	4343      	muls	r3, r0
 8002566:	4699      	mov	r9, r3
 8002568:	4643      	mov	r3, r8
 800256a:	4343      	muls	r3, r0
 800256c:	002f      	movs	r7, r5
 800256e:	469a      	mov	sl, r3
 8002570:	4643      	mov	r3, r8
 8002572:	4377      	muls	r7, r6
 8002574:	435d      	muls	r5, r3
 8002576:	0c38      	lsrs	r0, r7, #16
 8002578:	444d      	add	r5, r9
 800257a:	1945      	adds	r5, r0, r5
 800257c:	45a9      	cmp	r9, r5
 800257e:	d903      	bls.n	8002588 <__aeabi_dmul+0x168>
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	025b      	lsls	r3, r3, #9
 8002584:	4699      	mov	r9, r3
 8002586:	44ca      	add	sl, r9
 8002588:	043f      	lsls	r7, r7, #16
 800258a:	0c28      	lsrs	r0, r5, #16
 800258c:	0c3f      	lsrs	r7, r7, #16
 800258e:	042d      	lsls	r5, r5, #16
 8002590:	19ed      	adds	r5, r5, r7
 8002592:	0c27      	lsrs	r7, r4, #16
 8002594:	0424      	lsls	r4, r4, #16
 8002596:	0c24      	lsrs	r4, r4, #16
 8002598:	0003      	movs	r3, r0
 800259a:	0020      	movs	r0, r4
 800259c:	4350      	muls	r0, r2
 800259e:	437a      	muls	r2, r7
 80025a0:	4691      	mov	r9, r2
 80025a2:	003a      	movs	r2, r7
 80025a4:	4453      	add	r3, sl
 80025a6:	9305      	str	r3, [sp, #20]
 80025a8:	0c03      	lsrs	r3, r0, #16
 80025aa:	469a      	mov	sl, r3
 80025ac:	434a      	muls	r2, r1
 80025ae:	4361      	muls	r1, r4
 80025b0:	4449      	add	r1, r9
 80025b2:	4451      	add	r1, sl
 80025b4:	44ab      	add	fp, r5
 80025b6:	4589      	cmp	r9, r1
 80025b8:	d903      	bls.n	80025c2 <__aeabi_dmul+0x1a2>
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	025b      	lsls	r3, r3, #9
 80025be:	4699      	mov	r9, r3
 80025c0:	444a      	add	r2, r9
 80025c2:	0400      	lsls	r0, r0, #16
 80025c4:	0c0b      	lsrs	r3, r1, #16
 80025c6:	0c00      	lsrs	r0, r0, #16
 80025c8:	0409      	lsls	r1, r1, #16
 80025ca:	1809      	adds	r1, r1, r0
 80025cc:	0020      	movs	r0, r4
 80025ce:	4699      	mov	r9, r3
 80025d0:	4643      	mov	r3, r8
 80025d2:	4370      	muls	r0, r6
 80025d4:	435c      	muls	r4, r3
 80025d6:	437e      	muls	r6, r7
 80025d8:	435f      	muls	r7, r3
 80025da:	0c03      	lsrs	r3, r0, #16
 80025dc:	4698      	mov	r8, r3
 80025de:	19a4      	adds	r4, r4, r6
 80025e0:	4444      	add	r4, r8
 80025e2:	444a      	add	r2, r9
 80025e4:	9703      	str	r7, [sp, #12]
 80025e6:	42a6      	cmp	r6, r4
 80025e8:	d904      	bls.n	80025f4 <__aeabi_dmul+0x1d4>
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	025b      	lsls	r3, r3, #9
 80025ee:	4698      	mov	r8, r3
 80025f0:	4447      	add	r7, r8
 80025f2:	9703      	str	r7, [sp, #12]
 80025f4:	0423      	lsls	r3, r4, #16
 80025f6:	9e02      	ldr	r6, [sp, #8]
 80025f8:	469a      	mov	sl, r3
 80025fa:	9b05      	ldr	r3, [sp, #20]
 80025fc:	445e      	add	r6, fp
 80025fe:	4698      	mov	r8, r3
 8002600:	42ae      	cmp	r6, r5
 8002602:	41ad      	sbcs	r5, r5
 8002604:	1876      	adds	r6, r6, r1
 8002606:	428e      	cmp	r6, r1
 8002608:	4189      	sbcs	r1, r1
 800260a:	0400      	lsls	r0, r0, #16
 800260c:	0c00      	lsrs	r0, r0, #16
 800260e:	4450      	add	r0, sl
 8002610:	4440      	add	r0, r8
 8002612:	426d      	negs	r5, r5
 8002614:	1947      	adds	r7, r0, r5
 8002616:	46b8      	mov	r8, r7
 8002618:	4693      	mov	fp, r2
 800261a:	4249      	negs	r1, r1
 800261c:	4689      	mov	r9, r1
 800261e:	44c3      	add	fp, r8
 8002620:	44d9      	add	r9, fp
 8002622:	4298      	cmp	r0, r3
 8002624:	4180      	sbcs	r0, r0
 8002626:	45a8      	cmp	r8, r5
 8002628:	41ad      	sbcs	r5, r5
 800262a:	4593      	cmp	fp, r2
 800262c:	4192      	sbcs	r2, r2
 800262e:	4589      	cmp	r9, r1
 8002630:	4189      	sbcs	r1, r1
 8002632:	426d      	negs	r5, r5
 8002634:	4240      	negs	r0, r0
 8002636:	4328      	orrs	r0, r5
 8002638:	0c24      	lsrs	r4, r4, #16
 800263a:	4252      	negs	r2, r2
 800263c:	4249      	negs	r1, r1
 800263e:	430a      	orrs	r2, r1
 8002640:	9b03      	ldr	r3, [sp, #12]
 8002642:	1900      	adds	r0, r0, r4
 8002644:	1880      	adds	r0, r0, r2
 8002646:	18c7      	adds	r7, r0, r3
 8002648:	464b      	mov	r3, r9
 800264a:	0ddc      	lsrs	r4, r3, #23
 800264c:	9b04      	ldr	r3, [sp, #16]
 800264e:	0275      	lsls	r5, r6, #9
 8002650:	431d      	orrs	r5, r3
 8002652:	1e6a      	subs	r2, r5, #1
 8002654:	4195      	sbcs	r5, r2
 8002656:	464b      	mov	r3, r9
 8002658:	0df6      	lsrs	r6, r6, #23
 800265a:	027f      	lsls	r7, r7, #9
 800265c:	4335      	orrs	r5, r6
 800265e:	025a      	lsls	r2, r3, #9
 8002660:	433c      	orrs	r4, r7
 8002662:	4315      	orrs	r5, r2
 8002664:	01fb      	lsls	r3, r7, #7
 8002666:	d400      	bmi.n	800266a <__aeabi_dmul+0x24a>
 8002668:	e11c      	b.n	80028a4 <__aeabi_dmul+0x484>
 800266a:	2101      	movs	r1, #1
 800266c:	086a      	lsrs	r2, r5, #1
 800266e:	400d      	ands	r5, r1
 8002670:	4315      	orrs	r5, r2
 8002672:	07e2      	lsls	r2, r4, #31
 8002674:	4315      	orrs	r5, r2
 8002676:	0864      	lsrs	r4, r4, #1
 8002678:	494f      	ldr	r1, [pc, #316]	; (80027b8 <__aeabi_dmul+0x398>)
 800267a:	4461      	add	r1, ip
 800267c:	2900      	cmp	r1, #0
 800267e:	dc00      	bgt.n	8002682 <__aeabi_dmul+0x262>
 8002680:	e0b0      	b.n	80027e4 <__aeabi_dmul+0x3c4>
 8002682:	076b      	lsls	r3, r5, #29
 8002684:	d009      	beq.n	800269a <__aeabi_dmul+0x27a>
 8002686:	220f      	movs	r2, #15
 8002688:	402a      	ands	r2, r5
 800268a:	2a04      	cmp	r2, #4
 800268c:	d005      	beq.n	800269a <__aeabi_dmul+0x27a>
 800268e:	1d2a      	adds	r2, r5, #4
 8002690:	42aa      	cmp	r2, r5
 8002692:	41ad      	sbcs	r5, r5
 8002694:	426d      	negs	r5, r5
 8002696:	1964      	adds	r4, r4, r5
 8002698:	0015      	movs	r5, r2
 800269a:	01e3      	lsls	r3, r4, #7
 800269c:	d504      	bpl.n	80026a8 <__aeabi_dmul+0x288>
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	4a46      	ldr	r2, [pc, #280]	; (80027bc <__aeabi_dmul+0x39c>)
 80026a2:	00c9      	lsls	r1, r1, #3
 80026a4:	4014      	ands	r4, r2
 80026a6:	4461      	add	r1, ip
 80026a8:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <__aeabi_dmul+0x3a0>)
 80026aa:	4291      	cmp	r1, r2
 80026ac:	dd00      	ble.n	80026b0 <__aeabi_dmul+0x290>
 80026ae:	e726      	b.n	80024fe <__aeabi_dmul+0xde>
 80026b0:	0762      	lsls	r2, r4, #29
 80026b2:	08ed      	lsrs	r5, r5, #3
 80026b4:	0264      	lsls	r4, r4, #9
 80026b6:	0549      	lsls	r1, r1, #21
 80026b8:	4315      	orrs	r5, r2
 80026ba:	0b24      	lsrs	r4, r4, #12
 80026bc:	0d4a      	lsrs	r2, r1, #21
 80026be:	e710      	b.n	80024e2 <__aeabi_dmul+0xc2>
 80026c0:	4652      	mov	r2, sl
 80026c2:	4332      	orrs	r2, r6
 80026c4:	d100      	bne.n	80026c8 <__aeabi_dmul+0x2a8>
 80026c6:	e07f      	b.n	80027c8 <__aeabi_dmul+0x3a8>
 80026c8:	2e00      	cmp	r6, #0
 80026ca:	d100      	bne.n	80026ce <__aeabi_dmul+0x2ae>
 80026cc:	e0dc      	b.n	8002888 <__aeabi_dmul+0x468>
 80026ce:	0030      	movs	r0, r6
 80026d0:	f000 fe1e 	bl	8003310 <__clzsi2>
 80026d4:	0002      	movs	r2, r0
 80026d6:	3a0b      	subs	r2, #11
 80026d8:	231d      	movs	r3, #29
 80026da:	0001      	movs	r1, r0
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	4652      	mov	r2, sl
 80026e0:	3908      	subs	r1, #8
 80026e2:	40da      	lsrs	r2, r3
 80026e4:	408e      	lsls	r6, r1
 80026e6:	4316      	orrs	r6, r2
 80026e8:	4652      	mov	r2, sl
 80026ea:	408a      	lsls	r2, r1
 80026ec:	9b00      	ldr	r3, [sp, #0]
 80026ee:	4935      	ldr	r1, [pc, #212]	; (80027c4 <__aeabi_dmul+0x3a4>)
 80026f0:	1a18      	subs	r0, r3, r0
 80026f2:	0003      	movs	r3, r0
 80026f4:	468c      	mov	ip, r1
 80026f6:	4463      	add	r3, ip
 80026f8:	2000      	movs	r0, #0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	e6d3      	b.n	80024a6 <__aeabi_dmul+0x86>
 80026fe:	0025      	movs	r5, r4
 8002700:	4305      	orrs	r5, r0
 8002702:	d04a      	beq.n	800279a <__aeabi_dmul+0x37a>
 8002704:	2c00      	cmp	r4, #0
 8002706:	d100      	bne.n	800270a <__aeabi_dmul+0x2ea>
 8002708:	e0b0      	b.n	800286c <__aeabi_dmul+0x44c>
 800270a:	0020      	movs	r0, r4
 800270c:	f000 fe00 	bl	8003310 <__clzsi2>
 8002710:	0001      	movs	r1, r0
 8002712:	0002      	movs	r2, r0
 8002714:	390b      	subs	r1, #11
 8002716:	231d      	movs	r3, #29
 8002718:	0010      	movs	r0, r2
 800271a:	1a5b      	subs	r3, r3, r1
 800271c:	0031      	movs	r1, r6
 800271e:	0035      	movs	r5, r6
 8002720:	3808      	subs	r0, #8
 8002722:	4084      	lsls	r4, r0
 8002724:	40d9      	lsrs	r1, r3
 8002726:	4085      	lsls	r5, r0
 8002728:	430c      	orrs	r4, r1
 800272a:	4826      	ldr	r0, [pc, #152]	; (80027c4 <__aeabi_dmul+0x3a4>)
 800272c:	1a83      	subs	r3, r0, r2
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2300      	movs	r3, #0
 8002732:	4699      	mov	r9, r3
 8002734:	469b      	mov	fp, r3
 8002736:	e697      	b.n	8002468 <__aeabi_dmul+0x48>
 8002738:	0005      	movs	r5, r0
 800273a:	4325      	orrs	r5, r4
 800273c:	d126      	bne.n	800278c <__aeabi_dmul+0x36c>
 800273e:	2208      	movs	r2, #8
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2302      	movs	r3, #2
 8002744:	2400      	movs	r4, #0
 8002746:	4691      	mov	r9, r2
 8002748:	469b      	mov	fp, r3
 800274a:	e68d      	b.n	8002468 <__aeabi_dmul+0x48>
 800274c:	4652      	mov	r2, sl
 800274e:	9b00      	ldr	r3, [sp, #0]
 8002750:	4332      	orrs	r2, r6
 8002752:	d110      	bne.n	8002776 <__aeabi_dmul+0x356>
 8002754:	4915      	ldr	r1, [pc, #84]	; (80027ac <__aeabi_dmul+0x38c>)
 8002756:	2600      	movs	r6, #0
 8002758:	468c      	mov	ip, r1
 800275a:	4463      	add	r3, ip
 800275c:	4649      	mov	r1, r9
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2302      	movs	r3, #2
 8002762:	4319      	orrs	r1, r3
 8002764:	4689      	mov	r9, r1
 8002766:	2002      	movs	r0, #2
 8002768:	e69d      	b.n	80024a6 <__aeabi_dmul+0x86>
 800276a:	465b      	mov	r3, fp
 800276c:	9701      	str	r7, [sp, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d000      	beq.n	8002774 <__aeabi_dmul+0x354>
 8002772:	e6ad      	b.n	80024d0 <__aeabi_dmul+0xb0>
 8002774:	e6c3      	b.n	80024fe <__aeabi_dmul+0xde>
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <__aeabi_dmul+0x38c>)
 8002778:	2003      	movs	r0, #3
 800277a:	4694      	mov	ip, r2
 800277c:	4463      	add	r3, ip
 800277e:	464a      	mov	r2, r9
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2303      	movs	r3, #3
 8002784:	431a      	orrs	r2, r3
 8002786:	4691      	mov	r9, r2
 8002788:	4652      	mov	r2, sl
 800278a:	e68c      	b.n	80024a6 <__aeabi_dmul+0x86>
 800278c:	220c      	movs	r2, #12
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2303      	movs	r3, #3
 8002792:	0005      	movs	r5, r0
 8002794:	4691      	mov	r9, r2
 8002796:	469b      	mov	fp, r3
 8002798:	e666      	b.n	8002468 <__aeabi_dmul+0x48>
 800279a:	2304      	movs	r3, #4
 800279c:	4699      	mov	r9, r3
 800279e:	2300      	movs	r3, #0
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	2400      	movs	r4, #0
 80027a6:	469b      	mov	fp, r3
 80027a8:	e65e      	b.n	8002468 <__aeabi_dmul+0x48>
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	000007ff 	.word	0x000007ff
 80027b0:	fffffc01 	.word	0xfffffc01
 80027b4:	0800d918 	.word	0x0800d918
 80027b8:	000003ff 	.word	0x000003ff
 80027bc:	feffffff 	.word	0xfeffffff
 80027c0:	000007fe 	.word	0x000007fe
 80027c4:	fffffc0d 	.word	0xfffffc0d
 80027c8:	4649      	mov	r1, r9
 80027ca:	2301      	movs	r3, #1
 80027cc:	4319      	orrs	r1, r3
 80027ce:	4689      	mov	r9, r1
 80027d0:	2600      	movs	r6, #0
 80027d2:	2001      	movs	r0, #1
 80027d4:	e667      	b.n	80024a6 <__aeabi_dmul+0x86>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2480      	movs	r4, #128	; 0x80
 80027da:	2500      	movs	r5, #0
 80027dc:	4a43      	ldr	r2, [pc, #268]	; (80028ec <__aeabi_dmul+0x4cc>)
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	0324      	lsls	r4, r4, #12
 80027e2:	e67e      	b.n	80024e2 <__aeabi_dmul+0xc2>
 80027e4:	2001      	movs	r0, #1
 80027e6:	1a40      	subs	r0, r0, r1
 80027e8:	2838      	cmp	r0, #56	; 0x38
 80027ea:	dd00      	ble.n	80027ee <__aeabi_dmul+0x3ce>
 80027ec:	e676      	b.n	80024dc <__aeabi_dmul+0xbc>
 80027ee:	281f      	cmp	r0, #31
 80027f0:	dd5b      	ble.n	80028aa <__aeabi_dmul+0x48a>
 80027f2:	221f      	movs	r2, #31
 80027f4:	0023      	movs	r3, r4
 80027f6:	4252      	negs	r2, r2
 80027f8:	1a51      	subs	r1, r2, r1
 80027fa:	40cb      	lsrs	r3, r1
 80027fc:	0019      	movs	r1, r3
 80027fe:	2820      	cmp	r0, #32
 8002800:	d003      	beq.n	800280a <__aeabi_dmul+0x3ea>
 8002802:	4a3b      	ldr	r2, [pc, #236]	; (80028f0 <__aeabi_dmul+0x4d0>)
 8002804:	4462      	add	r2, ip
 8002806:	4094      	lsls	r4, r2
 8002808:	4325      	orrs	r5, r4
 800280a:	1e6a      	subs	r2, r5, #1
 800280c:	4195      	sbcs	r5, r2
 800280e:	002a      	movs	r2, r5
 8002810:	430a      	orrs	r2, r1
 8002812:	2107      	movs	r1, #7
 8002814:	000d      	movs	r5, r1
 8002816:	2400      	movs	r4, #0
 8002818:	4015      	ands	r5, r2
 800281a:	4211      	tst	r1, r2
 800281c:	d05b      	beq.n	80028d6 <__aeabi_dmul+0x4b6>
 800281e:	210f      	movs	r1, #15
 8002820:	2400      	movs	r4, #0
 8002822:	4011      	ands	r1, r2
 8002824:	2904      	cmp	r1, #4
 8002826:	d053      	beq.n	80028d0 <__aeabi_dmul+0x4b0>
 8002828:	1d11      	adds	r1, r2, #4
 800282a:	4291      	cmp	r1, r2
 800282c:	4192      	sbcs	r2, r2
 800282e:	4252      	negs	r2, r2
 8002830:	18a4      	adds	r4, r4, r2
 8002832:	000a      	movs	r2, r1
 8002834:	0223      	lsls	r3, r4, #8
 8002836:	d54b      	bpl.n	80028d0 <__aeabi_dmul+0x4b0>
 8002838:	2201      	movs	r2, #1
 800283a:	2400      	movs	r4, #0
 800283c:	2500      	movs	r5, #0
 800283e:	e650      	b.n	80024e2 <__aeabi_dmul+0xc2>
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	031b      	lsls	r3, r3, #12
 8002844:	421c      	tst	r4, r3
 8002846:	d009      	beq.n	800285c <__aeabi_dmul+0x43c>
 8002848:	421e      	tst	r6, r3
 800284a:	d107      	bne.n	800285c <__aeabi_dmul+0x43c>
 800284c:	4333      	orrs	r3, r6
 800284e:	031c      	lsls	r4, r3, #12
 8002850:	4643      	mov	r3, r8
 8002852:	0015      	movs	r5, r2
 8002854:	0b24      	lsrs	r4, r4, #12
 8002856:	4a25      	ldr	r2, [pc, #148]	; (80028ec <__aeabi_dmul+0x4cc>)
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	e642      	b.n	80024e2 <__aeabi_dmul+0xc2>
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	0312      	lsls	r2, r2, #12
 8002860:	4314      	orrs	r4, r2
 8002862:	0324      	lsls	r4, r4, #12
 8002864:	4a21      	ldr	r2, [pc, #132]	; (80028ec <__aeabi_dmul+0x4cc>)
 8002866:	0b24      	lsrs	r4, r4, #12
 8002868:	9701      	str	r7, [sp, #4]
 800286a:	e63a      	b.n	80024e2 <__aeabi_dmul+0xc2>
 800286c:	f000 fd50 	bl	8003310 <__clzsi2>
 8002870:	0001      	movs	r1, r0
 8002872:	0002      	movs	r2, r0
 8002874:	3115      	adds	r1, #21
 8002876:	3220      	adds	r2, #32
 8002878:	291c      	cmp	r1, #28
 800287a:	dc00      	bgt.n	800287e <__aeabi_dmul+0x45e>
 800287c:	e74b      	b.n	8002716 <__aeabi_dmul+0x2f6>
 800287e:	0034      	movs	r4, r6
 8002880:	3808      	subs	r0, #8
 8002882:	2500      	movs	r5, #0
 8002884:	4084      	lsls	r4, r0
 8002886:	e750      	b.n	800272a <__aeabi_dmul+0x30a>
 8002888:	f000 fd42 	bl	8003310 <__clzsi2>
 800288c:	0003      	movs	r3, r0
 800288e:	001a      	movs	r2, r3
 8002890:	3215      	adds	r2, #21
 8002892:	3020      	adds	r0, #32
 8002894:	2a1c      	cmp	r2, #28
 8002896:	dc00      	bgt.n	800289a <__aeabi_dmul+0x47a>
 8002898:	e71e      	b.n	80026d8 <__aeabi_dmul+0x2b8>
 800289a:	4656      	mov	r6, sl
 800289c:	3b08      	subs	r3, #8
 800289e:	2200      	movs	r2, #0
 80028a0:	409e      	lsls	r6, r3
 80028a2:	e723      	b.n	80026ec <__aeabi_dmul+0x2cc>
 80028a4:	9b00      	ldr	r3, [sp, #0]
 80028a6:	469c      	mov	ip, r3
 80028a8:	e6e6      	b.n	8002678 <__aeabi_dmul+0x258>
 80028aa:	4912      	ldr	r1, [pc, #72]	; (80028f4 <__aeabi_dmul+0x4d4>)
 80028ac:	0022      	movs	r2, r4
 80028ae:	4461      	add	r1, ip
 80028b0:	002e      	movs	r6, r5
 80028b2:	408d      	lsls	r5, r1
 80028b4:	408a      	lsls	r2, r1
 80028b6:	40c6      	lsrs	r6, r0
 80028b8:	1e69      	subs	r1, r5, #1
 80028ba:	418d      	sbcs	r5, r1
 80028bc:	4332      	orrs	r2, r6
 80028be:	432a      	orrs	r2, r5
 80028c0:	40c4      	lsrs	r4, r0
 80028c2:	0753      	lsls	r3, r2, #29
 80028c4:	d0b6      	beq.n	8002834 <__aeabi_dmul+0x414>
 80028c6:	210f      	movs	r1, #15
 80028c8:	4011      	ands	r1, r2
 80028ca:	2904      	cmp	r1, #4
 80028cc:	d1ac      	bne.n	8002828 <__aeabi_dmul+0x408>
 80028ce:	e7b1      	b.n	8002834 <__aeabi_dmul+0x414>
 80028d0:	0765      	lsls	r5, r4, #29
 80028d2:	0264      	lsls	r4, r4, #9
 80028d4:	0b24      	lsrs	r4, r4, #12
 80028d6:	08d2      	lsrs	r2, r2, #3
 80028d8:	4315      	orrs	r5, r2
 80028da:	2200      	movs	r2, #0
 80028dc:	e601      	b.n	80024e2 <__aeabi_dmul+0xc2>
 80028de:	2280      	movs	r2, #128	; 0x80
 80028e0:	0312      	lsls	r2, r2, #12
 80028e2:	4314      	orrs	r4, r2
 80028e4:	0324      	lsls	r4, r4, #12
 80028e6:	4a01      	ldr	r2, [pc, #4]	; (80028ec <__aeabi_dmul+0x4cc>)
 80028e8:	0b24      	lsrs	r4, r4, #12
 80028ea:	e5fa      	b.n	80024e2 <__aeabi_dmul+0xc2>
 80028ec:	000007ff 	.word	0x000007ff
 80028f0:	0000043e 	.word	0x0000043e
 80028f4:	0000041e 	.word	0x0000041e

080028f8 <__aeabi_dsub>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	4657      	mov	r7, sl
 80028fc:	464e      	mov	r6, r9
 80028fe:	4645      	mov	r5, r8
 8002900:	46de      	mov	lr, fp
 8002902:	b5e0      	push	{r5, r6, r7, lr}
 8002904:	001e      	movs	r6, r3
 8002906:	0017      	movs	r7, r2
 8002908:	004a      	lsls	r2, r1, #1
 800290a:	030b      	lsls	r3, r1, #12
 800290c:	0d52      	lsrs	r2, r2, #21
 800290e:	0a5b      	lsrs	r3, r3, #9
 8002910:	4690      	mov	r8, r2
 8002912:	0f42      	lsrs	r2, r0, #29
 8002914:	431a      	orrs	r2, r3
 8002916:	0fcd      	lsrs	r5, r1, #31
 8002918:	4ccd      	ldr	r4, [pc, #820]	; (8002c50 <__aeabi_dsub+0x358>)
 800291a:	0331      	lsls	r1, r6, #12
 800291c:	00c3      	lsls	r3, r0, #3
 800291e:	4694      	mov	ip, r2
 8002920:	0070      	lsls	r0, r6, #1
 8002922:	0f7a      	lsrs	r2, r7, #29
 8002924:	0a49      	lsrs	r1, r1, #9
 8002926:	00ff      	lsls	r7, r7, #3
 8002928:	469a      	mov	sl, r3
 800292a:	46b9      	mov	r9, r7
 800292c:	0d40      	lsrs	r0, r0, #21
 800292e:	0ff6      	lsrs	r6, r6, #31
 8002930:	4311      	orrs	r1, r2
 8002932:	42a0      	cmp	r0, r4
 8002934:	d100      	bne.n	8002938 <__aeabi_dsub+0x40>
 8002936:	e0b1      	b.n	8002a9c <__aeabi_dsub+0x1a4>
 8002938:	2201      	movs	r2, #1
 800293a:	4056      	eors	r6, r2
 800293c:	46b3      	mov	fp, r6
 800293e:	42b5      	cmp	r5, r6
 8002940:	d100      	bne.n	8002944 <__aeabi_dsub+0x4c>
 8002942:	e088      	b.n	8002a56 <__aeabi_dsub+0x15e>
 8002944:	4642      	mov	r2, r8
 8002946:	1a12      	subs	r2, r2, r0
 8002948:	2a00      	cmp	r2, #0
 800294a:	dc00      	bgt.n	800294e <__aeabi_dsub+0x56>
 800294c:	e0ae      	b.n	8002aac <__aeabi_dsub+0x1b4>
 800294e:	2800      	cmp	r0, #0
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x5c>
 8002952:	e0c1      	b.n	8002ad8 <__aeabi_dsub+0x1e0>
 8002954:	48be      	ldr	r0, [pc, #760]	; (8002c50 <__aeabi_dsub+0x358>)
 8002956:	4580      	cmp	r8, r0
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x64>
 800295a:	e151      	b.n	8002c00 <__aeabi_dsub+0x308>
 800295c:	2080      	movs	r0, #128	; 0x80
 800295e:	0400      	lsls	r0, r0, #16
 8002960:	4301      	orrs	r1, r0
 8002962:	2a38      	cmp	r2, #56	; 0x38
 8002964:	dd00      	ble.n	8002968 <__aeabi_dsub+0x70>
 8002966:	e17b      	b.n	8002c60 <__aeabi_dsub+0x368>
 8002968:	2a1f      	cmp	r2, #31
 800296a:	dd00      	ble.n	800296e <__aeabi_dsub+0x76>
 800296c:	e1ee      	b.n	8002d4c <__aeabi_dsub+0x454>
 800296e:	2020      	movs	r0, #32
 8002970:	003e      	movs	r6, r7
 8002972:	1a80      	subs	r0, r0, r2
 8002974:	000c      	movs	r4, r1
 8002976:	40d6      	lsrs	r6, r2
 8002978:	40d1      	lsrs	r1, r2
 800297a:	4087      	lsls	r7, r0
 800297c:	4662      	mov	r2, ip
 800297e:	4084      	lsls	r4, r0
 8002980:	1a52      	subs	r2, r2, r1
 8002982:	1e78      	subs	r0, r7, #1
 8002984:	4187      	sbcs	r7, r0
 8002986:	4694      	mov	ip, r2
 8002988:	4334      	orrs	r4, r6
 800298a:	4327      	orrs	r7, r4
 800298c:	1bdc      	subs	r4, r3, r7
 800298e:	42a3      	cmp	r3, r4
 8002990:	419b      	sbcs	r3, r3
 8002992:	4662      	mov	r2, ip
 8002994:	425b      	negs	r3, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	4699      	mov	r9, r3
 800299a:	464b      	mov	r3, r9
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	d400      	bmi.n	80029a2 <__aeabi_dsub+0xaa>
 80029a0:	e118      	b.n	8002bd4 <__aeabi_dsub+0x2dc>
 80029a2:	464b      	mov	r3, r9
 80029a4:	0258      	lsls	r0, r3, #9
 80029a6:	0a43      	lsrs	r3, r0, #9
 80029a8:	4699      	mov	r9, r3
 80029aa:	464b      	mov	r3, r9
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dsub+0xba>
 80029b0:	e137      	b.n	8002c22 <__aeabi_dsub+0x32a>
 80029b2:	4648      	mov	r0, r9
 80029b4:	f000 fcac 	bl	8003310 <__clzsi2>
 80029b8:	0001      	movs	r1, r0
 80029ba:	3908      	subs	r1, #8
 80029bc:	2320      	movs	r3, #32
 80029be:	0022      	movs	r2, r4
 80029c0:	4648      	mov	r0, r9
 80029c2:	1a5b      	subs	r3, r3, r1
 80029c4:	40da      	lsrs	r2, r3
 80029c6:	4088      	lsls	r0, r1
 80029c8:	408c      	lsls	r4, r1
 80029ca:	4643      	mov	r3, r8
 80029cc:	4310      	orrs	r0, r2
 80029ce:	4588      	cmp	r8, r1
 80029d0:	dd00      	ble.n	80029d4 <__aeabi_dsub+0xdc>
 80029d2:	e136      	b.n	8002c42 <__aeabi_dsub+0x34a>
 80029d4:	1ac9      	subs	r1, r1, r3
 80029d6:	1c4b      	adds	r3, r1, #1
 80029d8:	2b1f      	cmp	r3, #31
 80029da:	dd00      	ble.n	80029de <__aeabi_dsub+0xe6>
 80029dc:	e0ea      	b.n	8002bb4 <__aeabi_dsub+0x2bc>
 80029de:	2220      	movs	r2, #32
 80029e0:	0026      	movs	r6, r4
 80029e2:	1ad2      	subs	r2, r2, r3
 80029e4:	0001      	movs	r1, r0
 80029e6:	4094      	lsls	r4, r2
 80029e8:	40de      	lsrs	r6, r3
 80029ea:	40d8      	lsrs	r0, r3
 80029ec:	2300      	movs	r3, #0
 80029ee:	4091      	lsls	r1, r2
 80029f0:	1e62      	subs	r2, r4, #1
 80029f2:	4194      	sbcs	r4, r2
 80029f4:	4681      	mov	r9, r0
 80029f6:	4698      	mov	r8, r3
 80029f8:	4331      	orrs	r1, r6
 80029fa:	430c      	orrs	r4, r1
 80029fc:	0763      	lsls	r3, r4, #29
 80029fe:	d009      	beq.n	8002a14 <__aeabi_dsub+0x11c>
 8002a00:	230f      	movs	r3, #15
 8002a02:	4023      	ands	r3, r4
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d005      	beq.n	8002a14 <__aeabi_dsub+0x11c>
 8002a08:	1d23      	adds	r3, r4, #4
 8002a0a:	42a3      	cmp	r3, r4
 8002a0c:	41a4      	sbcs	r4, r4
 8002a0e:	4264      	negs	r4, r4
 8002a10:	44a1      	add	r9, r4
 8002a12:	001c      	movs	r4, r3
 8002a14:	464b      	mov	r3, r9
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	d400      	bmi.n	8002a1c <__aeabi_dsub+0x124>
 8002a1a:	e0de      	b.n	8002bda <__aeabi_dsub+0x2e2>
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	4b8c      	ldr	r3, [pc, #560]	; (8002c50 <__aeabi_dsub+0x358>)
 8002a20:	3101      	adds	r1, #1
 8002a22:	4299      	cmp	r1, r3
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x130>
 8002a26:	e0e7      	b.n	8002bf8 <__aeabi_dsub+0x300>
 8002a28:	464b      	mov	r3, r9
 8002a2a:	488a      	ldr	r0, [pc, #552]	; (8002c54 <__aeabi_dsub+0x35c>)
 8002a2c:	08e4      	lsrs	r4, r4, #3
 8002a2e:	4003      	ands	r3, r0
 8002a30:	0018      	movs	r0, r3
 8002a32:	0549      	lsls	r1, r1, #21
 8002a34:	075b      	lsls	r3, r3, #29
 8002a36:	0240      	lsls	r0, r0, #9
 8002a38:	4323      	orrs	r3, r4
 8002a3a:	0d4a      	lsrs	r2, r1, #21
 8002a3c:	0b04      	lsrs	r4, r0, #12
 8002a3e:	0512      	lsls	r2, r2, #20
 8002a40:	07ed      	lsls	r5, r5, #31
 8002a42:	4322      	orrs	r2, r4
 8002a44:	432a      	orrs	r2, r5
 8002a46:	0018      	movs	r0, r3
 8002a48:	0011      	movs	r1, r2
 8002a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8002a4c:	46bb      	mov	fp, r7
 8002a4e:	46b2      	mov	sl, r6
 8002a50:	46a9      	mov	r9, r5
 8002a52:	46a0      	mov	r8, r4
 8002a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a56:	4642      	mov	r2, r8
 8002a58:	1a12      	subs	r2, r2, r0
 8002a5a:	2a00      	cmp	r2, #0
 8002a5c:	dd52      	ble.n	8002b04 <__aeabi_dsub+0x20c>
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x16c>
 8002a62:	e09c      	b.n	8002b9e <__aeabi_dsub+0x2a6>
 8002a64:	45a0      	cmp	r8, r4
 8002a66:	d100      	bne.n	8002a6a <__aeabi_dsub+0x172>
 8002a68:	e0ca      	b.n	8002c00 <__aeabi_dsub+0x308>
 8002a6a:	2080      	movs	r0, #128	; 0x80
 8002a6c:	0400      	lsls	r0, r0, #16
 8002a6e:	4301      	orrs	r1, r0
 8002a70:	2a38      	cmp	r2, #56	; 0x38
 8002a72:	dd00      	ble.n	8002a76 <__aeabi_dsub+0x17e>
 8002a74:	e149      	b.n	8002d0a <__aeabi_dsub+0x412>
 8002a76:	2a1f      	cmp	r2, #31
 8002a78:	dc00      	bgt.n	8002a7c <__aeabi_dsub+0x184>
 8002a7a:	e197      	b.n	8002dac <__aeabi_dsub+0x4b4>
 8002a7c:	0010      	movs	r0, r2
 8002a7e:	000e      	movs	r6, r1
 8002a80:	3820      	subs	r0, #32
 8002a82:	40c6      	lsrs	r6, r0
 8002a84:	2a20      	cmp	r2, #32
 8002a86:	d004      	beq.n	8002a92 <__aeabi_dsub+0x19a>
 8002a88:	2040      	movs	r0, #64	; 0x40
 8002a8a:	1a82      	subs	r2, r0, r2
 8002a8c:	4091      	lsls	r1, r2
 8002a8e:	430f      	orrs	r7, r1
 8002a90:	46b9      	mov	r9, r7
 8002a92:	464c      	mov	r4, r9
 8002a94:	1e62      	subs	r2, r4, #1
 8002a96:	4194      	sbcs	r4, r2
 8002a98:	4334      	orrs	r4, r6
 8002a9a:	e13a      	b.n	8002d12 <__aeabi_dsub+0x41a>
 8002a9c:	000a      	movs	r2, r1
 8002a9e:	433a      	orrs	r2, r7
 8002aa0:	d028      	beq.n	8002af4 <__aeabi_dsub+0x1fc>
 8002aa2:	46b3      	mov	fp, r6
 8002aa4:	42b5      	cmp	r5, r6
 8002aa6:	d02b      	beq.n	8002b00 <__aeabi_dsub+0x208>
 8002aa8:	4a6b      	ldr	r2, [pc, #428]	; (8002c58 <__aeabi_dsub+0x360>)
 8002aaa:	4442      	add	r2, r8
 8002aac:	2a00      	cmp	r2, #0
 8002aae:	d05d      	beq.n	8002b6c <__aeabi_dsub+0x274>
 8002ab0:	4642      	mov	r2, r8
 8002ab2:	4644      	mov	r4, r8
 8002ab4:	1a82      	subs	r2, r0, r2
 8002ab6:	2c00      	cmp	r4, #0
 8002ab8:	d000      	beq.n	8002abc <__aeabi_dsub+0x1c4>
 8002aba:	e0f5      	b.n	8002ca8 <__aeabi_dsub+0x3b0>
 8002abc:	4665      	mov	r5, ip
 8002abe:	431d      	orrs	r5, r3
 8002ac0:	d100      	bne.n	8002ac4 <__aeabi_dsub+0x1cc>
 8002ac2:	e19c      	b.n	8002dfe <__aeabi_dsub+0x506>
 8002ac4:	1e55      	subs	r5, r2, #1
 8002ac6:	2a01      	cmp	r2, #1
 8002ac8:	d100      	bne.n	8002acc <__aeabi_dsub+0x1d4>
 8002aca:	e1fb      	b.n	8002ec4 <__aeabi_dsub+0x5cc>
 8002acc:	4c60      	ldr	r4, [pc, #384]	; (8002c50 <__aeabi_dsub+0x358>)
 8002ace:	42a2      	cmp	r2, r4
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x1dc>
 8002ad2:	e1bd      	b.n	8002e50 <__aeabi_dsub+0x558>
 8002ad4:	002a      	movs	r2, r5
 8002ad6:	e0f0      	b.n	8002cba <__aeabi_dsub+0x3c2>
 8002ad8:	0008      	movs	r0, r1
 8002ada:	4338      	orrs	r0, r7
 8002adc:	d100      	bne.n	8002ae0 <__aeabi_dsub+0x1e8>
 8002ade:	e0c3      	b.n	8002c68 <__aeabi_dsub+0x370>
 8002ae0:	1e50      	subs	r0, r2, #1
 8002ae2:	2a01      	cmp	r2, #1
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x1f0>
 8002ae6:	e1a8      	b.n	8002e3a <__aeabi_dsub+0x542>
 8002ae8:	4c59      	ldr	r4, [pc, #356]	; (8002c50 <__aeabi_dsub+0x358>)
 8002aea:	42a2      	cmp	r2, r4
 8002aec:	d100      	bne.n	8002af0 <__aeabi_dsub+0x1f8>
 8002aee:	e087      	b.n	8002c00 <__aeabi_dsub+0x308>
 8002af0:	0002      	movs	r2, r0
 8002af2:	e736      	b.n	8002962 <__aeabi_dsub+0x6a>
 8002af4:	2201      	movs	r2, #1
 8002af6:	4056      	eors	r6, r2
 8002af8:	46b3      	mov	fp, r6
 8002afa:	42b5      	cmp	r5, r6
 8002afc:	d000      	beq.n	8002b00 <__aeabi_dsub+0x208>
 8002afe:	e721      	b.n	8002944 <__aeabi_dsub+0x4c>
 8002b00:	4a55      	ldr	r2, [pc, #340]	; (8002c58 <__aeabi_dsub+0x360>)
 8002b02:	4442      	add	r2, r8
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	d100      	bne.n	8002b0a <__aeabi_dsub+0x212>
 8002b08:	e0b5      	b.n	8002c76 <__aeabi_dsub+0x37e>
 8002b0a:	4642      	mov	r2, r8
 8002b0c:	4644      	mov	r4, r8
 8002b0e:	1a82      	subs	r2, r0, r2
 8002b10:	2c00      	cmp	r4, #0
 8002b12:	d100      	bne.n	8002b16 <__aeabi_dsub+0x21e>
 8002b14:	e138      	b.n	8002d88 <__aeabi_dsub+0x490>
 8002b16:	4e4e      	ldr	r6, [pc, #312]	; (8002c50 <__aeabi_dsub+0x358>)
 8002b18:	42b0      	cmp	r0, r6
 8002b1a:	d100      	bne.n	8002b1e <__aeabi_dsub+0x226>
 8002b1c:	e1de      	b.n	8002edc <__aeabi_dsub+0x5e4>
 8002b1e:	2680      	movs	r6, #128	; 0x80
 8002b20:	4664      	mov	r4, ip
 8002b22:	0436      	lsls	r6, r6, #16
 8002b24:	4334      	orrs	r4, r6
 8002b26:	46a4      	mov	ip, r4
 8002b28:	2a38      	cmp	r2, #56	; 0x38
 8002b2a:	dd00      	ble.n	8002b2e <__aeabi_dsub+0x236>
 8002b2c:	e196      	b.n	8002e5c <__aeabi_dsub+0x564>
 8002b2e:	2a1f      	cmp	r2, #31
 8002b30:	dd00      	ble.n	8002b34 <__aeabi_dsub+0x23c>
 8002b32:	e224      	b.n	8002f7e <__aeabi_dsub+0x686>
 8002b34:	2620      	movs	r6, #32
 8002b36:	1ab4      	subs	r4, r6, r2
 8002b38:	46a2      	mov	sl, r4
 8002b3a:	4664      	mov	r4, ip
 8002b3c:	4656      	mov	r6, sl
 8002b3e:	40b4      	lsls	r4, r6
 8002b40:	46a1      	mov	r9, r4
 8002b42:	001c      	movs	r4, r3
 8002b44:	464e      	mov	r6, r9
 8002b46:	40d4      	lsrs	r4, r2
 8002b48:	4326      	orrs	r6, r4
 8002b4a:	0034      	movs	r4, r6
 8002b4c:	4656      	mov	r6, sl
 8002b4e:	40b3      	lsls	r3, r6
 8002b50:	1e5e      	subs	r6, r3, #1
 8002b52:	41b3      	sbcs	r3, r6
 8002b54:	431c      	orrs	r4, r3
 8002b56:	4663      	mov	r3, ip
 8002b58:	40d3      	lsrs	r3, r2
 8002b5a:	18c9      	adds	r1, r1, r3
 8002b5c:	19e4      	adds	r4, r4, r7
 8002b5e:	42bc      	cmp	r4, r7
 8002b60:	41bf      	sbcs	r7, r7
 8002b62:	427f      	negs	r7, r7
 8002b64:	46b9      	mov	r9, r7
 8002b66:	4680      	mov	r8, r0
 8002b68:	4489      	add	r9, r1
 8002b6a:	e0d8      	b.n	8002d1e <__aeabi_dsub+0x426>
 8002b6c:	4640      	mov	r0, r8
 8002b6e:	4c3b      	ldr	r4, [pc, #236]	; (8002c5c <__aeabi_dsub+0x364>)
 8002b70:	3001      	adds	r0, #1
 8002b72:	4220      	tst	r0, r4
 8002b74:	d000      	beq.n	8002b78 <__aeabi_dsub+0x280>
 8002b76:	e0b4      	b.n	8002ce2 <__aeabi_dsub+0x3ea>
 8002b78:	4640      	mov	r0, r8
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d000      	beq.n	8002b80 <__aeabi_dsub+0x288>
 8002b7e:	e144      	b.n	8002e0a <__aeabi_dsub+0x512>
 8002b80:	4660      	mov	r0, ip
 8002b82:	4318      	orrs	r0, r3
 8002b84:	d100      	bne.n	8002b88 <__aeabi_dsub+0x290>
 8002b86:	e190      	b.n	8002eaa <__aeabi_dsub+0x5b2>
 8002b88:	0008      	movs	r0, r1
 8002b8a:	4338      	orrs	r0, r7
 8002b8c:	d000      	beq.n	8002b90 <__aeabi_dsub+0x298>
 8002b8e:	e1aa      	b.n	8002ee6 <__aeabi_dsub+0x5ee>
 8002b90:	4661      	mov	r1, ip
 8002b92:	08db      	lsrs	r3, r3, #3
 8002b94:	0749      	lsls	r1, r1, #29
 8002b96:	430b      	orrs	r3, r1
 8002b98:	4661      	mov	r1, ip
 8002b9a:	08cc      	lsrs	r4, r1, #3
 8002b9c:	e027      	b.n	8002bee <__aeabi_dsub+0x2f6>
 8002b9e:	0008      	movs	r0, r1
 8002ba0:	4338      	orrs	r0, r7
 8002ba2:	d061      	beq.n	8002c68 <__aeabi_dsub+0x370>
 8002ba4:	1e50      	subs	r0, r2, #1
 8002ba6:	2a01      	cmp	r2, #1
 8002ba8:	d100      	bne.n	8002bac <__aeabi_dsub+0x2b4>
 8002baa:	e139      	b.n	8002e20 <__aeabi_dsub+0x528>
 8002bac:	42a2      	cmp	r2, r4
 8002bae:	d027      	beq.n	8002c00 <__aeabi_dsub+0x308>
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	e75d      	b.n	8002a70 <__aeabi_dsub+0x178>
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	391f      	subs	r1, #31
 8002bb8:	40ca      	lsrs	r2, r1
 8002bba:	0011      	movs	r1, r2
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d003      	beq.n	8002bc8 <__aeabi_dsub+0x2d0>
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	4098      	lsls	r0, r3
 8002bc6:	4304      	orrs	r4, r0
 8002bc8:	1e63      	subs	r3, r4, #1
 8002bca:	419c      	sbcs	r4, r3
 8002bcc:	2300      	movs	r3, #0
 8002bce:	4699      	mov	r9, r3
 8002bd0:	4698      	mov	r8, r3
 8002bd2:	430c      	orrs	r4, r1
 8002bd4:	0763      	lsls	r3, r4, #29
 8002bd6:	d000      	beq.n	8002bda <__aeabi_dsub+0x2e2>
 8002bd8:	e712      	b.n	8002a00 <__aeabi_dsub+0x108>
 8002bda:	464b      	mov	r3, r9
 8002bdc:	464a      	mov	r2, r9
 8002bde:	08e4      	lsrs	r4, r4, #3
 8002be0:	075b      	lsls	r3, r3, #29
 8002be2:	4323      	orrs	r3, r4
 8002be4:	08d4      	lsrs	r4, r2, #3
 8002be6:	4642      	mov	r2, r8
 8002be8:	4919      	ldr	r1, [pc, #100]	; (8002c50 <__aeabi_dsub+0x358>)
 8002bea:	428a      	cmp	r2, r1
 8002bec:	d00e      	beq.n	8002c0c <__aeabi_dsub+0x314>
 8002bee:	0324      	lsls	r4, r4, #12
 8002bf0:	0552      	lsls	r2, r2, #21
 8002bf2:	0b24      	lsrs	r4, r4, #12
 8002bf4:	0d52      	lsrs	r2, r2, #21
 8002bf6:	e722      	b.n	8002a3e <__aeabi_dsub+0x146>
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	2400      	movs	r4, #0
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e71e      	b.n	8002a3e <__aeabi_dsub+0x146>
 8002c00:	08db      	lsrs	r3, r3, #3
 8002c02:	4662      	mov	r2, ip
 8002c04:	0752      	lsls	r2, r2, #29
 8002c06:	4313      	orrs	r3, r2
 8002c08:	4662      	mov	r2, ip
 8002c0a:	08d4      	lsrs	r4, r2, #3
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	4322      	orrs	r2, r4
 8002c10:	d100      	bne.n	8002c14 <__aeabi_dsub+0x31c>
 8002c12:	e1fc      	b.n	800300e <__aeabi_dsub+0x716>
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	0312      	lsls	r2, r2, #12
 8002c18:	4314      	orrs	r4, r2
 8002c1a:	0324      	lsls	r4, r4, #12
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <__aeabi_dsub+0x358>)
 8002c1e:	0b24      	lsrs	r4, r4, #12
 8002c20:	e70d      	b.n	8002a3e <__aeabi_dsub+0x146>
 8002c22:	0020      	movs	r0, r4
 8002c24:	f000 fb74 	bl	8003310 <__clzsi2>
 8002c28:	0001      	movs	r1, r0
 8002c2a:	3118      	adds	r1, #24
 8002c2c:	291f      	cmp	r1, #31
 8002c2e:	dc00      	bgt.n	8002c32 <__aeabi_dsub+0x33a>
 8002c30:	e6c4      	b.n	80029bc <__aeabi_dsub+0xc4>
 8002c32:	3808      	subs	r0, #8
 8002c34:	4084      	lsls	r4, r0
 8002c36:	4643      	mov	r3, r8
 8002c38:	0020      	movs	r0, r4
 8002c3a:	2400      	movs	r4, #0
 8002c3c:	4588      	cmp	r8, r1
 8002c3e:	dc00      	bgt.n	8002c42 <__aeabi_dsub+0x34a>
 8002c40:	e6c8      	b.n	80029d4 <__aeabi_dsub+0xdc>
 8002c42:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <__aeabi_dsub+0x35c>)
 8002c44:	1a5b      	subs	r3, r3, r1
 8002c46:	4010      	ands	r0, r2
 8002c48:	4698      	mov	r8, r3
 8002c4a:	4681      	mov	r9, r0
 8002c4c:	e6d6      	b.n	80029fc <__aeabi_dsub+0x104>
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	000007ff 	.word	0x000007ff
 8002c54:	ff7fffff 	.word	0xff7fffff
 8002c58:	fffff801 	.word	0xfffff801
 8002c5c:	000007fe 	.word	0x000007fe
 8002c60:	430f      	orrs	r7, r1
 8002c62:	1e7a      	subs	r2, r7, #1
 8002c64:	4197      	sbcs	r7, r2
 8002c66:	e691      	b.n	800298c <__aeabi_dsub+0x94>
 8002c68:	4661      	mov	r1, ip
 8002c6a:	08db      	lsrs	r3, r3, #3
 8002c6c:	0749      	lsls	r1, r1, #29
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	4661      	mov	r1, ip
 8002c72:	08cc      	lsrs	r4, r1, #3
 8002c74:	e7b8      	b.n	8002be8 <__aeabi_dsub+0x2f0>
 8002c76:	4640      	mov	r0, r8
 8002c78:	4cd3      	ldr	r4, [pc, #844]	; (8002fc8 <__aeabi_dsub+0x6d0>)
 8002c7a:	3001      	adds	r0, #1
 8002c7c:	4220      	tst	r0, r4
 8002c7e:	d000      	beq.n	8002c82 <__aeabi_dsub+0x38a>
 8002c80:	e0a2      	b.n	8002dc8 <__aeabi_dsub+0x4d0>
 8002c82:	4640      	mov	r0, r8
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d000      	beq.n	8002c8a <__aeabi_dsub+0x392>
 8002c88:	e101      	b.n	8002e8e <__aeabi_dsub+0x596>
 8002c8a:	4660      	mov	r0, ip
 8002c8c:	4318      	orrs	r0, r3
 8002c8e:	d100      	bne.n	8002c92 <__aeabi_dsub+0x39a>
 8002c90:	e15e      	b.n	8002f50 <__aeabi_dsub+0x658>
 8002c92:	0008      	movs	r0, r1
 8002c94:	4338      	orrs	r0, r7
 8002c96:	d000      	beq.n	8002c9a <__aeabi_dsub+0x3a2>
 8002c98:	e15f      	b.n	8002f5a <__aeabi_dsub+0x662>
 8002c9a:	4661      	mov	r1, ip
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	0749      	lsls	r1, r1, #29
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	4661      	mov	r1, ip
 8002ca4:	08cc      	lsrs	r4, r1, #3
 8002ca6:	e7a2      	b.n	8002bee <__aeabi_dsub+0x2f6>
 8002ca8:	4dc8      	ldr	r5, [pc, #800]	; (8002fcc <__aeabi_dsub+0x6d4>)
 8002caa:	42a8      	cmp	r0, r5
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x3b8>
 8002cae:	e0cf      	b.n	8002e50 <__aeabi_dsub+0x558>
 8002cb0:	2580      	movs	r5, #128	; 0x80
 8002cb2:	4664      	mov	r4, ip
 8002cb4:	042d      	lsls	r5, r5, #16
 8002cb6:	432c      	orrs	r4, r5
 8002cb8:	46a4      	mov	ip, r4
 8002cba:	2a38      	cmp	r2, #56	; 0x38
 8002cbc:	dc56      	bgt.n	8002d6c <__aeabi_dsub+0x474>
 8002cbe:	2a1f      	cmp	r2, #31
 8002cc0:	dd00      	ble.n	8002cc4 <__aeabi_dsub+0x3cc>
 8002cc2:	e0d1      	b.n	8002e68 <__aeabi_dsub+0x570>
 8002cc4:	2520      	movs	r5, #32
 8002cc6:	001e      	movs	r6, r3
 8002cc8:	1aad      	subs	r5, r5, r2
 8002cca:	4664      	mov	r4, ip
 8002ccc:	40ab      	lsls	r3, r5
 8002cce:	40ac      	lsls	r4, r5
 8002cd0:	40d6      	lsrs	r6, r2
 8002cd2:	1e5d      	subs	r5, r3, #1
 8002cd4:	41ab      	sbcs	r3, r5
 8002cd6:	4334      	orrs	r4, r6
 8002cd8:	4323      	orrs	r3, r4
 8002cda:	4664      	mov	r4, ip
 8002cdc:	40d4      	lsrs	r4, r2
 8002cde:	1b09      	subs	r1, r1, r4
 8002ce0:	e049      	b.n	8002d76 <__aeabi_dsub+0x47e>
 8002ce2:	4660      	mov	r0, ip
 8002ce4:	1bdc      	subs	r4, r3, r7
 8002ce6:	1a46      	subs	r6, r0, r1
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	4180      	sbcs	r0, r0
 8002cec:	4240      	negs	r0, r0
 8002cee:	4681      	mov	r9, r0
 8002cf0:	0030      	movs	r0, r6
 8002cf2:	464e      	mov	r6, r9
 8002cf4:	1b80      	subs	r0, r0, r6
 8002cf6:	4681      	mov	r9, r0
 8002cf8:	0200      	lsls	r0, r0, #8
 8002cfa:	d476      	bmi.n	8002dea <__aeabi_dsub+0x4f2>
 8002cfc:	464b      	mov	r3, r9
 8002cfe:	4323      	orrs	r3, r4
 8002d00:	d000      	beq.n	8002d04 <__aeabi_dsub+0x40c>
 8002d02:	e652      	b.n	80029aa <__aeabi_dsub+0xb2>
 8002d04:	2400      	movs	r4, #0
 8002d06:	2500      	movs	r5, #0
 8002d08:	e771      	b.n	8002bee <__aeabi_dsub+0x2f6>
 8002d0a:	4339      	orrs	r1, r7
 8002d0c:	000c      	movs	r4, r1
 8002d0e:	1e62      	subs	r2, r4, #1
 8002d10:	4194      	sbcs	r4, r2
 8002d12:	18e4      	adds	r4, r4, r3
 8002d14:	429c      	cmp	r4, r3
 8002d16:	419b      	sbcs	r3, r3
 8002d18:	425b      	negs	r3, r3
 8002d1a:	4463      	add	r3, ip
 8002d1c:	4699      	mov	r9, r3
 8002d1e:	464b      	mov	r3, r9
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	d400      	bmi.n	8002d26 <__aeabi_dsub+0x42e>
 8002d24:	e756      	b.n	8002bd4 <__aeabi_dsub+0x2dc>
 8002d26:	2301      	movs	r3, #1
 8002d28:	469c      	mov	ip, r3
 8002d2a:	4ba8      	ldr	r3, [pc, #672]	; (8002fcc <__aeabi_dsub+0x6d4>)
 8002d2c:	44e0      	add	r8, ip
 8002d2e:	4598      	cmp	r8, r3
 8002d30:	d038      	beq.n	8002da4 <__aeabi_dsub+0x4ac>
 8002d32:	464b      	mov	r3, r9
 8002d34:	48a6      	ldr	r0, [pc, #664]	; (8002fd0 <__aeabi_dsub+0x6d8>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	4003      	ands	r3, r0
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	0863      	lsrs	r3, r4, #1
 8002d3e:	4014      	ands	r4, r2
 8002d40:	431c      	orrs	r4, r3
 8002d42:	07c3      	lsls	r3, r0, #31
 8002d44:	431c      	orrs	r4, r3
 8002d46:	0843      	lsrs	r3, r0, #1
 8002d48:	4699      	mov	r9, r3
 8002d4a:	e657      	b.n	80029fc <__aeabi_dsub+0x104>
 8002d4c:	0010      	movs	r0, r2
 8002d4e:	000e      	movs	r6, r1
 8002d50:	3820      	subs	r0, #32
 8002d52:	40c6      	lsrs	r6, r0
 8002d54:	2a20      	cmp	r2, #32
 8002d56:	d004      	beq.n	8002d62 <__aeabi_dsub+0x46a>
 8002d58:	2040      	movs	r0, #64	; 0x40
 8002d5a:	1a82      	subs	r2, r0, r2
 8002d5c:	4091      	lsls	r1, r2
 8002d5e:	430f      	orrs	r7, r1
 8002d60:	46b9      	mov	r9, r7
 8002d62:	464f      	mov	r7, r9
 8002d64:	1e7a      	subs	r2, r7, #1
 8002d66:	4197      	sbcs	r7, r2
 8002d68:	4337      	orrs	r7, r6
 8002d6a:	e60f      	b.n	800298c <__aeabi_dsub+0x94>
 8002d6c:	4662      	mov	r2, ip
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	0013      	movs	r3, r2
 8002d72:	1e5a      	subs	r2, r3, #1
 8002d74:	4193      	sbcs	r3, r2
 8002d76:	1afc      	subs	r4, r7, r3
 8002d78:	42a7      	cmp	r7, r4
 8002d7a:	41bf      	sbcs	r7, r7
 8002d7c:	427f      	negs	r7, r7
 8002d7e:	1bcb      	subs	r3, r1, r7
 8002d80:	4699      	mov	r9, r3
 8002d82:	465d      	mov	r5, fp
 8002d84:	4680      	mov	r8, r0
 8002d86:	e608      	b.n	800299a <__aeabi_dsub+0xa2>
 8002d88:	4666      	mov	r6, ip
 8002d8a:	431e      	orrs	r6, r3
 8002d8c:	d100      	bne.n	8002d90 <__aeabi_dsub+0x498>
 8002d8e:	e0be      	b.n	8002f0e <__aeabi_dsub+0x616>
 8002d90:	1e56      	subs	r6, r2, #1
 8002d92:	2a01      	cmp	r2, #1
 8002d94:	d100      	bne.n	8002d98 <__aeabi_dsub+0x4a0>
 8002d96:	e109      	b.n	8002fac <__aeabi_dsub+0x6b4>
 8002d98:	4c8c      	ldr	r4, [pc, #560]	; (8002fcc <__aeabi_dsub+0x6d4>)
 8002d9a:	42a2      	cmp	r2, r4
 8002d9c:	d100      	bne.n	8002da0 <__aeabi_dsub+0x4a8>
 8002d9e:	e119      	b.n	8002fd4 <__aeabi_dsub+0x6dc>
 8002da0:	0032      	movs	r2, r6
 8002da2:	e6c1      	b.n	8002b28 <__aeabi_dsub+0x230>
 8002da4:	4642      	mov	r2, r8
 8002da6:	2400      	movs	r4, #0
 8002da8:	2300      	movs	r3, #0
 8002daa:	e648      	b.n	8002a3e <__aeabi_dsub+0x146>
 8002dac:	2020      	movs	r0, #32
 8002dae:	000c      	movs	r4, r1
 8002db0:	1a80      	subs	r0, r0, r2
 8002db2:	003e      	movs	r6, r7
 8002db4:	4087      	lsls	r7, r0
 8002db6:	4084      	lsls	r4, r0
 8002db8:	40d6      	lsrs	r6, r2
 8002dba:	1e78      	subs	r0, r7, #1
 8002dbc:	4187      	sbcs	r7, r0
 8002dbe:	40d1      	lsrs	r1, r2
 8002dc0:	4334      	orrs	r4, r6
 8002dc2:	433c      	orrs	r4, r7
 8002dc4:	448c      	add	ip, r1
 8002dc6:	e7a4      	b.n	8002d12 <__aeabi_dsub+0x41a>
 8002dc8:	4a80      	ldr	r2, [pc, #512]	; (8002fcc <__aeabi_dsub+0x6d4>)
 8002dca:	4290      	cmp	r0, r2
 8002dcc:	d100      	bne.n	8002dd0 <__aeabi_dsub+0x4d8>
 8002dce:	e0e9      	b.n	8002fa4 <__aeabi_dsub+0x6ac>
 8002dd0:	19df      	adds	r7, r3, r7
 8002dd2:	429f      	cmp	r7, r3
 8002dd4:	419b      	sbcs	r3, r3
 8002dd6:	4461      	add	r1, ip
 8002dd8:	425b      	negs	r3, r3
 8002dda:	18c9      	adds	r1, r1, r3
 8002ddc:	07cc      	lsls	r4, r1, #31
 8002dde:	087f      	lsrs	r7, r7, #1
 8002de0:	084b      	lsrs	r3, r1, #1
 8002de2:	4699      	mov	r9, r3
 8002de4:	4680      	mov	r8, r0
 8002de6:	433c      	orrs	r4, r7
 8002de8:	e6f4      	b.n	8002bd4 <__aeabi_dsub+0x2dc>
 8002dea:	1afc      	subs	r4, r7, r3
 8002dec:	42a7      	cmp	r7, r4
 8002dee:	41bf      	sbcs	r7, r7
 8002df0:	4663      	mov	r3, ip
 8002df2:	427f      	negs	r7, r7
 8002df4:	1ac9      	subs	r1, r1, r3
 8002df6:	1bcb      	subs	r3, r1, r7
 8002df8:	4699      	mov	r9, r3
 8002dfa:	465d      	mov	r5, fp
 8002dfc:	e5d5      	b.n	80029aa <__aeabi_dsub+0xb2>
 8002dfe:	08ff      	lsrs	r7, r7, #3
 8002e00:	074b      	lsls	r3, r1, #29
 8002e02:	465d      	mov	r5, fp
 8002e04:	433b      	orrs	r3, r7
 8002e06:	08cc      	lsrs	r4, r1, #3
 8002e08:	e6ee      	b.n	8002be8 <__aeabi_dsub+0x2f0>
 8002e0a:	4662      	mov	r2, ip
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	d000      	beq.n	8002e12 <__aeabi_dsub+0x51a>
 8002e10:	e082      	b.n	8002f18 <__aeabi_dsub+0x620>
 8002e12:	000b      	movs	r3, r1
 8002e14:	433b      	orrs	r3, r7
 8002e16:	d11b      	bne.n	8002e50 <__aeabi_dsub+0x558>
 8002e18:	2480      	movs	r4, #128	; 0x80
 8002e1a:	2500      	movs	r5, #0
 8002e1c:	0324      	lsls	r4, r4, #12
 8002e1e:	e6f9      	b.n	8002c14 <__aeabi_dsub+0x31c>
 8002e20:	19dc      	adds	r4, r3, r7
 8002e22:	429c      	cmp	r4, r3
 8002e24:	419b      	sbcs	r3, r3
 8002e26:	4461      	add	r1, ip
 8002e28:	4689      	mov	r9, r1
 8002e2a:	425b      	negs	r3, r3
 8002e2c:	4499      	add	r9, r3
 8002e2e:	464b      	mov	r3, r9
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	d444      	bmi.n	8002ebe <__aeabi_dsub+0x5c6>
 8002e34:	2301      	movs	r3, #1
 8002e36:	4698      	mov	r8, r3
 8002e38:	e6cc      	b.n	8002bd4 <__aeabi_dsub+0x2dc>
 8002e3a:	1bdc      	subs	r4, r3, r7
 8002e3c:	4662      	mov	r2, ip
 8002e3e:	42a3      	cmp	r3, r4
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	1a51      	subs	r1, r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	1acb      	subs	r3, r1, r3
 8002e48:	4699      	mov	r9, r3
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	4698      	mov	r8, r3
 8002e4e:	e5a4      	b.n	800299a <__aeabi_dsub+0xa2>
 8002e50:	08ff      	lsrs	r7, r7, #3
 8002e52:	074b      	lsls	r3, r1, #29
 8002e54:	465d      	mov	r5, fp
 8002e56:	433b      	orrs	r3, r7
 8002e58:	08cc      	lsrs	r4, r1, #3
 8002e5a:	e6d7      	b.n	8002c0c <__aeabi_dsub+0x314>
 8002e5c:	4662      	mov	r2, ip
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	0014      	movs	r4, r2
 8002e62:	1e63      	subs	r3, r4, #1
 8002e64:	419c      	sbcs	r4, r3
 8002e66:	e679      	b.n	8002b5c <__aeabi_dsub+0x264>
 8002e68:	0015      	movs	r5, r2
 8002e6a:	4664      	mov	r4, ip
 8002e6c:	3d20      	subs	r5, #32
 8002e6e:	40ec      	lsrs	r4, r5
 8002e70:	46a0      	mov	r8, r4
 8002e72:	2a20      	cmp	r2, #32
 8002e74:	d005      	beq.n	8002e82 <__aeabi_dsub+0x58a>
 8002e76:	2540      	movs	r5, #64	; 0x40
 8002e78:	4664      	mov	r4, ip
 8002e7a:	1aaa      	subs	r2, r5, r2
 8002e7c:	4094      	lsls	r4, r2
 8002e7e:	4323      	orrs	r3, r4
 8002e80:	469a      	mov	sl, r3
 8002e82:	4654      	mov	r4, sl
 8002e84:	1e63      	subs	r3, r4, #1
 8002e86:	419c      	sbcs	r4, r3
 8002e88:	4643      	mov	r3, r8
 8002e8a:	4323      	orrs	r3, r4
 8002e8c:	e773      	b.n	8002d76 <__aeabi_dsub+0x47e>
 8002e8e:	4662      	mov	r2, ip
 8002e90:	431a      	orrs	r2, r3
 8002e92:	d023      	beq.n	8002edc <__aeabi_dsub+0x5e4>
 8002e94:	000a      	movs	r2, r1
 8002e96:	433a      	orrs	r2, r7
 8002e98:	d000      	beq.n	8002e9c <__aeabi_dsub+0x5a4>
 8002e9a:	e0a0      	b.n	8002fde <__aeabi_dsub+0x6e6>
 8002e9c:	4662      	mov	r2, ip
 8002e9e:	08db      	lsrs	r3, r3, #3
 8002ea0:	0752      	lsls	r2, r2, #29
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	4662      	mov	r2, ip
 8002ea6:	08d4      	lsrs	r4, r2, #3
 8002ea8:	e6b0      	b.n	8002c0c <__aeabi_dsub+0x314>
 8002eaa:	000b      	movs	r3, r1
 8002eac:	433b      	orrs	r3, r7
 8002eae:	d100      	bne.n	8002eb2 <__aeabi_dsub+0x5ba>
 8002eb0:	e728      	b.n	8002d04 <__aeabi_dsub+0x40c>
 8002eb2:	08ff      	lsrs	r7, r7, #3
 8002eb4:	074b      	lsls	r3, r1, #29
 8002eb6:	465d      	mov	r5, fp
 8002eb8:	433b      	orrs	r3, r7
 8002eba:	08cc      	lsrs	r4, r1, #3
 8002ebc:	e697      	b.n	8002bee <__aeabi_dsub+0x2f6>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	4698      	mov	r8, r3
 8002ec2:	e736      	b.n	8002d32 <__aeabi_dsub+0x43a>
 8002ec4:	1afc      	subs	r4, r7, r3
 8002ec6:	42a7      	cmp	r7, r4
 8002ec8:	41bf      	sbcs	r7, r7
 8002eca:	4663      	mov	r3, ip
 8002ecc:	427f      	negs	r7, r7
 8002ece:	1ac9      	subs	r1, r1, r3
 8002ed0:	1bcb      	subs	r3, r1, r7
 8002ed2:	4699      	mov	r9, r3
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	465d      	mov	r5, fp
 8002ed8:	4698      	mov	r8, r3
 8002eda:	e55e      	b.n	800299a <__aeabi_dsub+0xa2>
 8002edc:	074b      	lsls	r3, r1, #29
 8002ede:	08ff      	lsrs	r7, r7, #3
 8002ee0:	433b      	orrs	r3, r7
 8002ee2:	08cc      	lsrs	r4, r1, #3
 8002ee4:	e692      	b.n	8002c0c <__aeabi_dsub+0x314>
 8002ee6:	1bdc      	subs	r4, r3, r7
 8002ee8:	4660      	mov	r0, ip
 8002eea:	42a3      	cmp	r3, r4
 8002eec:	41b6      	sbcs	r6, r6
 8002eee:	1a40      	subs	r0, r0, r1
 8002ef0:	4276      	negs	r6, r6
 8002ef2:	1b80      	subs	r0, r0, r6
 8002ef4:	4681      	mov	r9, r0
 8002ef6:	0200      	lsls	r0, r0, #8
 8002ef8:	d560      	bpl.n	8002fbc <__aeabi_dsub+0x6c4>
 8002efa:	1afc      	subs	r4, r7, r3
 8002efc:	42a7      	cmp	r7, r4
 8002efe:	41bf      	sbcs	r7, r7
 8002f00:	4663      	mov	r3, ip
 8002f02:	427f      	negs	r7, r7
 8002f04:	1ac9      	subs	r1, r1, r3
 8002f06:	1bcb      	subs	r3, r1, r7
 8002f08:	4699      	mov	r9, r3
 8002f0a:	465d      	mov	r5, fp
 8002f0c:	e576      	b.n	80029fc <__aeabi_dsub+0x104>
 8002f0e:	08ff      	lsrs	r7, r7, #3
 8002f10:	074b      	lsls	r3, r1, #29
 8002f12:	433b      	orrs	r3, r7
 8002f14:	08cc      	lsrs	r4, r1, #3
 8002f16:	e667      	b.n	8002be8 <__aeabi_dsub+0x2f0>
 8002f18:	000a      	movs	r2, r1
 8002f1a:	08db      	lsrs	r3, r3, #3
 8002f1c:	433a      	orrs	r2, r7
 8002f1e:	d100      	bne.n	8002f22 <__aeabi_dsub+0x62a>
 8002f20:	e66f      	b.n	8002c02 <__aeabi_dsub+0x30a>
 8002f22:	4662      	mov	r2, ip
 8002f24:	0752      	lsls	r2, r2, #29
 8002f26:	4313      	orrs	r3, r2
 8002f28:	4662      	mov	r2, ip
 8002f2a:	08d4      	lsrs	r4, r2, #3
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	0312      	lsls	r2, r2, #12
 8002f30:	4214      	tst	r4, r2
 8002f32:	d007      	beq.n	8002f44 <__aeabi_dsub+0x64c>
 8002f34:	08c8      	lsrs	r0, r1, #3
 8002f36:	4210      	tst	r0, r2
 8002f38:	d104      	bne.n	8002f44 <__aeabi_dsub+0x64c>
 8002f3a:	465d      	mov	r5, fp
 8002f3c:	0004      	movs	r4, r0
 8002f3e:	08fb      	lsrs	r3, r7, #3
 8002f40:	0749      	lsls	r1, r1, #29
 8002f42:	430b      	orrs	r3, r1
 8002f44:	0f5a      	lsrs	r2, r3, #29
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	0752      	lsls	r2, r2, #29
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	e65d      	b.n	8002c0c <__aeabi_dsub+0x314>
 8002f50:	074b      	lsls	r3, r1, #29
 8002f52:	08ff      	lsrs	r7, r7, #3
 8002f54:	433b      	orrs	r3, r7
 8002f56:	08cc      	lsrs	r4, r1, #3
 8002f58:	e649      	b.n	8002bee <__aeabi_dsub+0x2f6>
 8002f5a:	19dc      	adds	r4, r3, r7
 8002f5c:	429c      	cmp	r4, r3
 8002f5e:	419b      	sbcs	r3, r3
 8002f60:	4461      	add	r1, ip
 8002f62:	4689      	mov	r9, r1
 8002f64:	425b      	negs	r3, r3
 8002f66:	4499      	add	r9, r3
 8002f68:	464b      	mov	r3, r9
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	d400      	bmi.n	8002f70 <__aeabi_dsub+0x678>
 8002f6e:	e631      	b.n	8002bd4 <__aeabi_dsub+0x2dc>
 8002f70:	464a      	mov	r2, r9
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <__aeabi_dsub+0x6d8>)
 8002f74:	401a      	ands	r2, r3
 8002f76:	2301      	movs	r3, #1
 8002f78:	4691      	mov	r9, r2
 8002f7a:	4698      	mov	r8, r3
 8002f7c:	e62a      	b.n	8002bd4 <__aeabi_dsub+0x2dc>
 8002f7e:	0016      	movs	r6, r2
 8002f80:	4664      	mov	r4, ip
 8002f82:	3e20      	subs	r6, #32
 8002f84:	40f4      	lsrs	r4, r6
 8002f86:	46a0      	mov	r8, r4
 8002f88:	2a20      	cmp	r2, #32
 8002f8a:	d005      	beq.n	8002f98 <__aeabi_dsub+0x6a0>
 8002f8c:	2640      	movs	r6, #64	; 0x40
 8002f8e:	4664      	mov	r4, ip
 8002f90:	1ab2      	subs	r2, r6, r2
 8002f92:	4094      	lsls	r4, r2
 8002f94:	4323      	orrs	r3, r4
 8002f96:	469a      	mov	sl, r3
 8002f98:	4654      	mov	r4, sl
 8002f9a:	1e63      	subs	r3, r4, #1
 8002f9c:	419c      	sbcs	r4, r3
 8002f9e:	4643      	mov	r3, r8
 8002fa0:	431c      	orrs	r4, r3
 8002fa2:	e5db      	b.n	8002b5c <__aeabi_dsub+0x264>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	2400      	movs	r4, #0
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e548      	b.n	8002a3e <__aeabi_dsub+0x146>
 8002fac:	19dc      	adds	r4, r3, r7
 8002fae:	42bc      	cmp	r4, r7
 8002fb0:	41bf      	sbcs	r7, r7
 8002fb2:	4461      	add	r1, ip
 8002fb4:	4689      	mov	r9, r1
 8002fb6:	427f      	negs	r7, r7
 8002fb8:	44b9      	add	r9, r7
 8002fba:	e738      	b.n	8002e2e <__aeabi_dsub+0x536>
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	4323      	orrs	r3, r4
 8002fc0:	d100      	bne.n	8002fc4 <__aeabi_dsub+0x6cc>
 8002fc2:	e69f      	b.n	8002d04 <__aeabi_dsub+0x40c>
 8002fc4:	e606      	b.n	8002bd4 <__aeabi_dsub+0x2dc>
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	000007fe 	.word	0x000007fe
 8002fcc:	000007ff 	.word	0x000007ff
 8002fd0:	ff7fffff 	.word	0xff7fffff
 8002fd4:	08ff      	lsrs	r7, r7, #3
 8002fd6:	074b      	lsls	r3, r1, #29
 8002fd8:	433b      	orrs	r3, r7
 8002fda:	08cc      	lsrs	r4, r1, #3
 8002fdc:	e616      	b.n	8002c0c <__aeabi_dsub+0x314>
 8002fde:	4662      	mov	r2, ip
 8002fe0:	08db      	lsrs	r3, r3, #3
 8002fe2:	0752      	lsls	r2, r2, #29
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	4662      	mov	r2, ip
 8002fe8:	08d4      	lsrs	r4, r2, #3
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	0312      	lsls	r2, r2, #12
 8002fee:	4214      	tst	r4, r2
 8002ff0:	d007      	beq.n	8003002 <__aeabi_dsub+0x70a>
 8002ff2:	08c8      	lsrs	r0, r1, #3
 8002ff4:	4210      	tst	r0, r2
 8002ff6:	d104      	bne.n	8003002 <__aeabi_dsub+0x70a>
 8002ff8:	465d      	mov	r5, fp
 8002ffa:	0004      	movs	r4, r0
 8002ffc:	08fb      	lsrs	r3, r7, #3
 8002ffe:	0749      	lsls	r1, r1, #29
 8003000:	430b      	orrs	r3, r1
 8003002:	0f5a      	lsrs	r2, r3, #29
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	0752      	lsls	r2, r2, #29
 8003008:	08db      	lsrs	r3, r3, #3
 800300a:	4313      	orrs	r3, r2
 800300c:	e5fe      	b.n	8002c0c <__aeabi_dsub+0x314>
 800300e:	2300      	movs	r3, #0
 8003010:	4a01      	ldr	r2, [pc, #4]	; (8003018 <__aeabi_dsub+0x720>)
 8003012:	001c      	movs	r4, r3
 8003014:	e513      	b.n	8002a3e <__aeabi_dsub+0x146>
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	000007ff 	.word	0x000007ff

0800301c <__aeabi_dcmpun>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	0005      	movs	r5, r0
 8003020:	480c      	ldr	r0, [pc, #48]	; (8003054 <__aeabi_dcmpun+0x38>)
 8003022:	031c      	lsls	r4, r3, #12
 8003024:	0016      	movs	r6, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	030a      	lsls	r2, r1, #12
 800302a:	0049      	lsls	r1, r1, #1
 800302c:	0b12      	lsrs	r2, r2, #12
 800302e:	0d49      	lsrs	r1, r1, #21
 8003030:	0b24      	lsrs	r4, r4, #12
 8003032:	0d5b      	lsrs	r3, r3, #21
 8003034:	4281      	cmp	r1, r0
 8003036:	d008      	beq.n	800304a <__aeabi_dcmpun+0x2e>
 8003038:	4a06      	ldr	r2, [pc, #24]	; (8003054 <__aeabi_dcmpun+0x38>)
 800303a:	2000      	movs	r0, #0
 800303c:	4293      	cmp	r3, r2
 800303e:	d103      	bne.n	8003048 <__aeabi_dcmpun+0x2c>
 8003040:	0020      	movs	r0, r4
 8003042:	4330      	orrs	r0, r6
 8003044:	1e43      	subs	r3, r0, #1
 8003046:	4198      	sbcs	r0, r3
 8003048:	bd70      	pop	{r4, r5, r6, pc}
 800304a:	2001      	movs	r0, #1
 800304c:	432a      	orrs	r2, r5
 800304e:	d1fb      	bne.n	8003048 <__aeabi_dcmpun+0x2c>
 8003050:	e7f2      	b.n	8003038 <__aeabi_dcmpun+0x1c>
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	000007ff 	.word	0x000007ff

08003058 <__aeabi_d2iz>:
 8003058:	000a      	movs	r2, r1
 800305a:	b530      	push	{r4, r5, lr}
 800305c:	4c13      	ldr	r4, [pc, #76]	; (80030ac <__aeabi_d2iz+0x54>)
 800305e:	0053      	lsls	r3, r2, #1
 8003060:	0309      	lsls	r1, r1, #12
 8003062:	0005      	movs	r5, r0
 8003064:	0b09      	lsrs	r1, r1, #12
 8003066:	2000      	movs	r0, #0
 8003068:	0d5b      	lsrs	r3, r3, #21
 800306a:	0fd2      	lsrs	r2, r2, #31
 800306c:	42a3      	cmp	r3, r4
 800306e:	dd04      	ble.n	800307a <__aeabi_d2iz+0x22>
 8003070:	480f      	ldr	r0, [pc, #60]	; (80030b0 <__aeabi_d2iz+0x58>)
 8003072:	4283      	cmp	r3, r0
 8003074:	dd02      	ble.n	800307c <__aeabi_d2iz+0x24>
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <__aeabi_d2iz+0x5c>)
 8003078:	18d0      	adds	r0, r2, r3
 800307a:	bd30      	pop	{r4, r5, pc}
 800307c:	2080      	movs	r0, #128	; 0x80
 800307e:	0340      	lsls	r0, r0, #13
 8003080:	4301      	orrs	r1, r0
 8003082:	480d      	ldr	r0, [pc, #52]	; (80030b8 <__aeabi_d2iz+0x60>)
 8003084:	1ac0      	subs	r0, r0, r3
 8003086:	281f      	cmp	r0, #31
 8003088:	dd08      	ble.n	800309c <__aeabi_d2iz+0x44>
 800308a:	480c      	ldr	r0, [pc, #48]	; (80030bc <__aeabi_d2iz+0x64>)
 800308c:	1ac3      	subs	r3, r0, r3
 800308e:	40d9      	lsrs	r1, r3
 8003090:	000b      	movs	r3, r1
 8003092:	4258      	negs	r0, r3
 8003094:	2a00      	cmp	r2, #0
 8003096:	d1f0      	bne.n	800307a <__aeabi_d2iz+0x22>
 8003098:	0018      	movs	r0, r3
 800309a:	e7ee      	b.n	800307a <__aeabi_d2iz+0x22>
 800309c:	4c08      	ldr	r4, [pc, #32]	; (80030c0 <__aeabi_d2iz+0x68>)
 800309e:	40c5      	lsrs	r5, r0
 80030a0:	46a4      	mov	ip, r4
 80030a2:	4463      	add	r3, ip
 80030a4:	4099      	lsls	r1, r3
 80030a6:	000b      	movs	r3, r1
 80030a8:	432b      	orrs	r3, r5
 80030aa:	e7f2      	b.n	8003092 <__aeabi_d2iz+0x3a>
 80030ac:	000003fe 	.word	0x000003fe
 80030b0:	0000041d 	.word	0x0000041d
 80030b4:	7fffffff 	.word	0x7fffffff
 80030b8:	00000433 	.word	0x00000433
 80030bc:	00000413 	.word	0x00000413
 80030c0:	fffffbed 	.word	0xfffffbed

080030c4 <__aeabi_i2d>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	2800      	cmp	r0, #0
 80030c8:	d016      	beq.n	80030f8 <__aeabi_i2d+0x34>
 80030ca:	17c3      	asrs	r3, r0, #31
 80030cc:	18c5      	adds	r5, r0, r3
 80030ce:	405d      	eors	r5, r3
 80030d0:	0fc4      	lsrs	r4, r0, #31
 80030d2:	0028      	movs	r0, r5
 80030d4:	f000 f91c 	bl	8003310 <__clzsi2>
 80030d8:	4a11      	ldr	r2, [pc, #68]	; (8003120 <__aeabi_i2d+0x5c>)
 80030da:	1a12      	subs	r2, r2, r0
 80030dc:	280a      	cmp	r0, #10
 80030de:	dc16      	bgt.n	800310e <__aeabi_i2d+0x4a>
 80030e0:	0003      	movs	r3, r0
 80030e2:	002e      	movs	r6, r5
 80030e4:	3315      	adds	r3, #21
 80030e6:	409e      	lsls	r6, r3
 80030e8:	230b      	movs	r3, #11
 80030ea:	1a18      	subs	r0, r3, r0
 80030ec:	40c5      	lsrs	r5, r0
 80030ee:	0552      	lsls	r2, r2, #21
 80030f0:	032d      	lsls	r5, r5, #12
 80030f2:	0b2d      	lsrs	r5, r5, #12
 80030f4:	0d53      	lsrs	r3, r2, #21
 80030f6:	e003      	b.n	8003100 <__aeabi_i2d+0x3c>
 80030f8:	2400      	movs	r4, #0
 80030fa:	2300      	movs	r3, #0
 80030fc:	2500      	movs	r5, #0
 80030fe:	2600      	movs	r6, #0
 8003100:	051b      	lsls	r3, r3, #20
 8003102:	432b      	orrs	r3, r5
 8003104:	07e4      	lsls	r4, r4, #31
 8003106:	4323      	orrs	r3, r4
 8003108:	0030      	movs	r0, r6
 800310a:	0019      	movs	r1, r3
 800310c:	bd70      	pop	{r4, r5, r6, pc}
 800310e:	380b      	subs	r0, #11
 8003110:	4085      	lsls	r5, r0
 8003112:	0552      	lsls	r2, r2, #21
 8003114:	032d      	lsls	r5, r5, #12
 8003116:	2600      	movs	r6, #0
 8003118:	0b2d      	lsrs	r5, r5, #12
 800311a:	0d53      	lsrs	r3, r2, #21
 800311c:	e7f0      	b.n	8003100 <__aeabi_i2d+0x3c>
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	0000041e 	.word	0x0000041e

08003124 <__aeabi_ui2d>:
 8003124:	b510      	push	{r4, lr}
 8003126:	1e04      	subs	r4, r0, #0
 8003128:	d010      	beq.n	800314c <__aeabi_ui2d+0x28>
 800312a:	f000 f8f1 	bl	8003310 <__clzsi2>
 800312e:	4b0f      	ldr	r3, [pc, #60]	; (800316c <__aeabi_ui2d+0x48>)
 8003130:	1a1b      	subs	r3, r3, r0
 8003132:	280a      	cmp	r0, #10
 8003134:	dc11      	bgt.n	800315a <__aeabi_ui2d+0x36>
 8003136:	220b      	movs	r2, #11
 8003138:	0021      	movs	r1, r4
 800313a:	1a12      	subs	r2, r2, r0
 800313c:	40d1      	lsrs	r1, r2
 800313e:	3015      	adds	r0, #21
 8003140:	030a      	lsls	r2, r1, #12
 8003142:	055b      	lsls	r3, r3, #21
 8003144:	4084      	lsls	r4, r0
 8003146:	0b12      	lsrs	r2, r2, #12
 8003148:	0d5b      	lsrs	r3, r3, #21
 800314a:	e001      	b.n	8003150 <__aeabi_ui2d+0x2c>
 800314c:	2300      	movs	r3, #0
 800314e:	2200      	movs	r2, #0
 8003150:	051b      	lsls	r3, r3, #20
 8003152:	4313      	orrs	r3, r2
 8003154:	0020      	movs	r0, r4
 8003156:	0019      	movs	r1, r3
 8003158:	bd10      	pop	{r4, pc}
 800315a:	0022      	movs	r2, r4
 800315c:	380b      	subs	r0, #11
 800315e:	4082      	lsls	r2, r0
 8003160:	055b      	lsls	r3, r3, #21
 8003162:	0312      	lsls	r2, r2, #12
 8003164:	2400      	movs	r4, #0
 8003166:	0b12      	lsrs	r2, r2, #12
 8003168:	0d5b      	lsrs	r3, r3, #21
 800316a:	e7f1      	b.n	8003150 <__aeabi_ui2d+0x2c>
 800316c:	0000041e 	.word	0x0000041e

08003170 <__aeabi_f2d>:
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	0043      	lsls	r3, r0, #1
 8003174:	0246      	lsls	r6, r0, #9
 8003176:	0fc4      	lsrs	r4, r0, #31
 8003178:	20fe      	movs	r0, #254	; 0xfe
 800317a:	0e1b      	lsrs	r3, r3, #24
 800317c:	1c59      	adds	r1, r3, #1
 800317e:	0a75      	lsrs	r5, r6, #9
 8003180:	4208      	tst	r0, r1
 8003182:	d00c      	beq.n	800319e <__aeabi_f2d+0x2e>
 8003184:	22e0      	movs	r2, #224	; 0xe0
 8003186:	0092      	lsls	r2, r2, #2
 8003188:	4694      	mov	ip, r2
 800318a:	076d      	lsls	r5, r5, #29
 800318c:	0b36      	lsrs	r6, r6, #12
 800318e:	4463      	add	r3, ip
 8003190:	051b      	lsls	r3, r3, #20
 8003192:	4333      	orrs	r3, r6
 8003194:	07e4      	lsls	r4, r4, #31
 8003196:	4323      	orrs	r3, r4
 8003198:	0028      	movs	r0, r5
 800319a:	0019      	movs	r1, r3
 800319c:	bd70      	pop	{r4, r5, r6, pc}
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d114      	bne.n	80031cc <__aeabi_f2d+0x5c>
 80031a2:	2d00      	cmp	r5, #0
 80031a4:	d01b      	beq.n	80031de <__aeabi_f2d+0x6e>
 80031a6:	0028      	movs	r0, r5
 80031a8:	f000 f8b2 	bl	8003310 <__clzsi2>
 80031ac:	280a      	cmp	r0, #10
 80031ae:	dc1c      	bgt.n	80031ea <__aeabi_f2d+0x7a>
 80031b0:	230b      	movs	r3, #11
 80031b2:	002e      	movs	r6, r5
 80031b4:	1a1b      	subs	r3, r3, r0
 80031b6:	40de      	lsrs	r6, r3
 80031b8:	0003      	movs	r3, r0
 80031ba:	3315      	adds	r3, #21
 80031bc:	409d      	lsls	r5, r3
 80031be:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <__aeabi_f2d+0x88>)
 80031c0:	0336      	lsls	r6, r6, #12
 80031c2:	1a12      	subs	r2, r2, r0
 80031c4:	0552      	lsls	r2, r2, #21
 80031c6:	0b36      	lsrs	r6, r6, #12
 80031c8:	0d53      	lsrs	r3, r2, #21
 80031ca:	e7e1      	b.n	8003190 <__aeabi_f2d+0x20>
 80031cc:	2d00      	cmp	r5, #0
 80031ce:	d009      	beq.n	80031e4 <__aeabi_f2d+0x74>
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	0b36      	lsrs	r6, r6, #12
 80031d4:	0312      	lsls	r2, r2, #12
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <__aeabi_f2d+0x8c>)
 80031d8:	076d      	lsls	r5, r5, #29
 80031da:	4316      	orrs	r6, r2
 80031dc:	e7d8      	b.n	8003190 <__aeabi_f2d+0x20>
 80031de:	2300      	movs	r3, #0
 80031e0:	2600      	movs	r6, #0
 80031e2:	e7d5      	b.n	8003190 <__aeabi_f2d+0x20>
 80031e4:	2600      	movs	r6, #0
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <__aeabi_f2d+0x8c>)
 80031e8:	e7d2      	b.n	8003190 <__aeabi_f2d+0x20>
 80031ea:	0003      	movs	r3, r0
 80031ec:	3b0b      	subs	r3, #11
 80031ee:	409d      	lsls	r5, r3
 80031f0:	002e      	movs	r6, r5
 80031f2:	2500      	movs	r5, #0
 80031f4:	e7e3      	b.n	80031be <__aeabi_f2d+0x4e>
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	00000389 	.word	0x00000389
 80031fc:	000007ff 	.word	0x000007ff

08003200 <__aeabi_d2f>:
 8003200:	0002      	movs	r2, r0
 8003202:	004b      	lsls	r3, r1, #1
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	0d5b      	lsrs	r3, r3, #21
 8003208:	030c      	lsls	r4, r1, #12
 800320a:	4e3d      	ldr	r6, [pc, #244]	; (8003300 <__aeabi_d2f+0x100>)
 800320c:	0a64      	lsrs	r4, r4, #9
 800320e:	0f40      	lsrs	r0, r0, #29
 8003210:	1c5f      	adds	r7, r3, #1
 8003212:	0fc9      	lsrs	r1, r1, #31
 8003214:	4304      	orrs	r4, r0
 8003216:	00d5      	lsls	r5, r2, #3
 8003218:	4237      	tst	r7, r6
 800321a:	d00a      	beq.n	8003232 <__aeabi_d2f+0x32>
 800321c:	4839      	ldr	r0, [pc, #228]	; (8003304 <__aeabi_d2f+0x104>)
 800321e:	181e      	adds	r6, r3, r0
 8003220:	2efe      	cmp	r6, #254	; 0xfe
 8003222:	dd16      	ble.n	8003252 <__aeabi_d2f+0x52>
 8003224:	20ff      	movs	r0, #255	; 0xff
 8003226:	2400      	movs	r4, #0
 8003228:	05c0      	lsls	r0, r0, #23
 800322a:	4320      	orrs	r0, r4
 800322c:	07c9      	lsls	r1, r1, #31
 800322e:	4308      	orrs	r0, r1
 8003230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <__aeabi_d2f+0x44>
 8003236:	432c      	orrs	r4, r5
 8003238:	d026      	beq.n	8003288 <__aeabi_d2f+0x88>
 800323a:	2205      	movs	r2, #5
 800323c:	0192      	lsls	r2, r2, #6
 800323e:	0a54      	lsrs	r4, r2, #9
 8003240:	b2d8      	uxtb	r0, r3
 8003242:	e7f1      	b.n	8003228 <__aeabi_d2f+0x28>
 8003244:	4325      	orrs	r5, r4
 8003246:	d0ed      	beq.n	8003224 <__aeabi_d2f+0x24>
 8003248:	2080      	movs	r0, #128	; 0x80
 800324a:	03c0      	lsls	r0, r0, #15
 800324c:	4304      	orrs	r4, r0
 800324e:	20ff      	movs	r0, #255	; 0xff
 8003250:	e7ea      	b.n	8003228 <__aeabi_d2f+0x28>
 8003252:	2e00      	cmp	r6, #0
 8003254:	dd1b      	ble.n	800328e <__aeabi_d2f+0x8e>
 8003256:	0192      	lsls	r2, r2, #6
 8003258:	1e53      	subs	r3, r2, #1
 800325a:	419a      	sbcs	r2, r3
 800325c:	00e4      	lsls	r4, r4, #3
 800325e:	0f6d      	lsrs	r5, r5, #29
 8003260:	4322      	orrs	r2, r4
 8003262:	432a      	orrs	r2, r5
 8003264:	0753      	lsls	r3, r2, #29
 8003266:	d048      	beq.n	80032fa <__aeabi_d2f+0xfa>
 8003268:	230f      	movs	r3, #15
 800326a:	4013      	ands	r3, r2
 800326c:	2b04      	cmp	r3, #4
 800326e:	d000      	beq.n	8003272 <__aeabi_d2f+0x72>
 8003270:	3204      	adds	r2, #4
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	04db      	lsls	r3, r3, #19
 8003276:	4013      	ands	r3, r2
 8003278:	d03f      	beq.n	80032fa <__aeabi_d2f+0xfa>
 800327a:	1c70      	adds	r0, r6, #1
 800327c:	2efe      	cmp	r6, #254	; 0xfe
 800327e:	d0d1      	beq.n	8003224 <__aeabi_d2f+0x24>
 8003280:	0192      	lsls	r2, r2, #6
 8003282:	0a54      	lsrs	r4, r2, #9
 8003284:	b2c0      	uxtb	r0, r0
 8003286:	e7cf      	b.n	8003228 <__aeabi_d2f+0x28>
 8003288:	2000      	movs	r0, #0
 800328a:	2400      	movs	r4, #0
 800328c:	e7cc      	b.n	8003228 <__aeabi_d2f+0x28>
 800328e:	0032      	movs	r2, r6
 8003290:	3217      	adds	r2, #23
 8003292:	db22      	blt.n	80032da <__aeabi_d2f+0xda>
 8003294:	2080      	movs	r0, #128	; 0x80
 8003296:	0400      	lsls	r0, r0, #16
 8003298:	4320      	orrs	r0, r4
 800329a:	241e      	movs	r4, #30
 800329c:	1ba4      	subs	r4, r4, r6
 800329e:	2c1f      	cmp	r4, #31
 80032a0:	dd1d      	ble.n	80032de <__aeabi_d2f+0xde>
 80032a2:	2202      	movs	r2, #2
 80032a4:	4252      	negs	r2, r2
 80032a6:	1b96      	subs	r6, r2, r6
 80032a8:	0002      	movs	r2, r0
 80032aa:	40f2      	lsrs	r2, r6
 80032ac:	0016      	movs	r6, r2
 80032ae:	2c20      	cmp	r4, #32
 80032b0:	d004      	beq.n	80032bc <__aeabi_d2f+0xbc>
 80032b2:	4a15      	ldr	r2, [pc, #84]	; (8003308 <__aeabi_d2f+0x108>)
 80032b4:	4694      	mov	ip, r2
 80032b6:	4463      	add	r3, ip
 80032b8:	4098      	lsls	r0, r3
 80032ba:	4305      	orrs	r5, r0
 80032bc:	002a      	movs	r2, r5
 80032be:	1e53      	subs	r3, r2, #1
 80032c0:	419a      	sbcs	r2, r3
 80032c2:	4332      	orrs	r2, r6
 80032c4:	2600      	movs	r6, #0
 80032c6:	0753      	lsls	r3, r2, #29
 80032c8:	d1ce      	bne.n	8003268 <__aeabi_d2f+0x68>
 80032ca:	2480      	movs	r4, #128	; 0x80
 80032cc:	0013      	movs	r3, r2
 80032ce:	04e4      	lsls	r4, r4, #19
 80032d0:	2001      	movs	r0, #1
 80032d2:	4023      	ands	r3, r4
 80032d4:	4222      	tst	r2, r4
 80032d6:	d1d3      	bne.n	8003280 <__aeabi_d2f+0x80>
 80032d8:	e7b0      	b.n	800323c <__aeabi_d2f+0x3c>
 80032da:	2300      	movs	r3, #0
 80032dc:	e7ad      	b.n	800323a <__aeabi_d2f+0x3a>
 80032de:	4a0b      	ldr	r2, [pc, #44]	; (800330c <__aeabi_d2f+0x10c>)
 80032e0:	4694      	mov	ip, r2
 80032e2:	002a      	movs	r2, r5
 80032e4:	40e2      	lsrs	r2, r4
 80032e6:	0014      	movs	r4, r2
 80032e8:	002a      	movs	r2, r5
 80032ea:	4463      	add	r3, ip
 80032ec:	409a      	lsls	r2, r3
 80032ee:	4098      	lsls	r0, r3
 80032f0:	1e55      	subs	r5, r2, #1
 80032f2:	41aa      	sbcs	r2, r5
 80032f4:	4302      	orrs	r2, r0
 80032f6:	4322      	orrs	r2, r4
 80032f8:	e7e4      	b.n	80032c4 <__aeabi_d2f+0xc4>
 80032fa:	0033      	movs	r3, r6
 80032fc:	e79e      	b.n	800323c <__aeabi_d2f+0x3c>
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	000007fe 	.word	0x000007fe
 8003304:	fffffc80 	.word	0xfffffc80
 8003308:	fffffca2 	.word	0xfffffca2
 800330c:	fffffc82 	.word	0xfffffc82

08003310 <__clzsi2>:
 8003310:	211c      	movs	r1, #28
 8003312:	2301      	movs	r3, #1
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	4298      	cmp	r0, r3
 8003318:	d301      	bcc.n	800331e <__clzsi2+0xe>
 800331a:	0c00      	lsrs	r0, r0, #16
 800331c:	3910      	subs	r1, #16
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	4298      	cmp	r0, r3
 8003322:	d301      	bcc.n	8003328 <__clzsi2+0x18>
 8003324:	0a00      	lsrs	r0, r0, #8
 8003326:	3908      	subs	r1, #8
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	4298      	cmp	r0, r3
 800332c:	d301      	bcc.n	8003332 <__clzsi2+0x22>
 800332e:	0900      	lsrs	r0, r0, #4
 8003330:	3904      	subs	r1, #4
 8003332:	a202      	add	r2, pc, #8	; (adr r2, 800333c <__clzsi2+0x2c>)
 8003334:	5c10      	ldrb	r0, [r2, r0]
 8003336:	1840      	adds	r0, r0, r1
 8003338:	4770      	bx	lr
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	02020304 	.word	0x02020304
 8003340:	01010101 	.word	0x01010101
	...

0800334c <__clzdi2>:
 800334c:	b510      	push	{r4, lr}
 800334e:	2900      	cmp	r1, #0
 8003350:	d103      	bne.n	800335a <__clzdi2+0xe>
 8003352:	f7ff ffdd 	bl	8003310 <__clzsi2>
 8003356:	3020      	adds	r0, #32
 8003358:	e002      	b.n	8003360 <__clzdi2+0x14>
 800335a:	0008      	movs	r0, r1
 800335c:	f7ff ffd8 	bl	8003310 <__clzsi2>
 8003360:	bd10      	pop	{r4, pc}
 8003362:	46c0      	nop			; (mov r8, r8)

08003364 <new_adc_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hadc is the adc and _total_ranks are the total ranks.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ADCSensor object
ADCSensor *new_adc_sensor(ADC_HandleTypeDef *hadc, uint8_t _total_ranks) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	000a      	movs	r2, r1
 800336e:	1cfb      	adds	r3, r7, #3
 8003370:	701a      	strb	r2, [r3, #0]
    ADCSensor *adc_sensor = (ADCSensor*) malloc(sizeof(ADCSensor));
 8003372:	2030      	movs	r0, #48	; 0x30
 8003374:	f005 fcfe 	bl	8008d74 <malloc>
 8003378:	0003      	movs	r3, r0
 800337a:	60bb      	str	r3, [r7, #8]
    adc_sensor->adc = hadc;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]
    adc_sensor->total_ranks = _total_ranks;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	1cfa      	adds	r2, r7, #3
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 800338a:	230f      	movs	r3, #15
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e00d      	b.n	80033b0 <new_adc_sensor+0x4c>
        adc_sensor->values[i] = 0;
 8003394:	210f      	movs	r1, #15
 8003396:	187b      	adds	r3, r7, r1
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	18d3      	adds	r3, r2, r3
 80033a0:	3306      	adds	r3, #6
 80033a2:	2200      	movs	r2, #0
 80033a4:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	187a      	adds	r2, r7, r1
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	3201      	adds	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
 80033b0:	230f      	movs	r3, #15
 80033b2:	18fa      	adds	r2, r7, r3
 80033b4:	1cfb      	adds	r3, r7, #3
 80033b6:	7812      	ldrb	r2, [r2, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d3ea      	bcc.n	8003394 <new_adc_sensor+0x30>
    }
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 80033be:	230e      	movs	r3, #14
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e00e      	b.n	80033e6 <new_adc_sensor+0x82>
		adc_sensor->buffer[i] = 0;
 80033c8:	210e      	movs	r1, #14
 80033ca:	187b      	adds	r3, r7, r1
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	330c      	adds	r3, #12
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	3302      	adds	r3, #2
 80033d8:	2200      	movs	r2, #0
 80033da:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	187a      	adds	r2, r7, r1
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	3201      	adds	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	230e      	movs	r3, #14
 80033e8:	18fa      	adds	r2, r7, r3
 80033ea:	1cfb      	adds	r3, r7, #3
 80033ec:	7812      	ldrb	r2, [r2, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d3e9      	bcc.n	80033c8 <new_adc_sensor+0x64>
	}
    return adc_sensor;
 80033f4:	68bb      	ldr	r3, [r7, #8]
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b004      	add	sp, #16
 80033fc:	bd80      	pop	{r7, pc}

080033fe <init_adc_sensor>:

// REQUIRES: adc_sensor is an ADCSensor object
// MODIFIES: values
// EFFECTS: Initializes the ADC sensor
void init_adc_sensor(ADCSensor *adc_sensor) {
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(adc_sensor->adc, adc_sensor->buffer, adc_sensor->total_ranks);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	331a      	adds	r3, #26
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	791b      	ldrb	r3, [r3, #4]
 8003414:	001a      	movs	r2, r3
 8003416:	f001 fed5 	bl	80051c4 <HAL_ADC_Start_DMA>
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b002      	add	sp, #8
 8003420:	bd80      	pop	{r7, pc}

08003422 <get_adc_sensor_value>:

// REQUIRES: adc_sensor is an ADCSensor object and rank is the index
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint16_t get_adc_sensor_value(ADCSensor *adc_sensor, uint8_t rank) {
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	000a      	movs	r2, r1
 800342c:	1cfb      	adds	r3, r7, #3
 800342e:	701a      	strb	r2, [r3, #0]
    return adc_sensor->values[rank];
 8003430:	1cfb      	adds	r3, r7, #3
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	18d3      	adds	r3, r2, r3
 800343a:	3306      	adds	r3, #6
 800343c:	881b      	ldrh	r3, [r3, #0]
}
 800343e:	0018      	movs	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	b002      	add	sp, #8
 8003444:	bd80      	pop	{r7, pc}

08003446 <update_adc_sensor_values>:

// REQUIRES: adc_sensor is an ADCSensor object
// MODIFIES: values
// EFFECTS: Updates the stored value of value.
void update_adc_sensor_values(ADCSensor *adc_sensor) {
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
	memcpy(adc_sensor->values, adc_sensor->buffer, adc_sensor->total_ranks * sizeof(uint16_t));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	1d98      	adds	r0, r3, #6
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	331a      	adds	r3, #26
 8003456:	0019      	movs	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	791b      	ldrb	r3, [r3, #4]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	001a      	movs	r2, r3
 8003460:	f005 fc92 	bl	8008d88 <memcpy>
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <new_battery_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created BatterySensor object
BatterySensor *new_battery_sensor(ADCSensor *_adc_sensor, uint8_t _rank) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	000a      	movs	r2, r1
 8003476:	1cfb      	adds	r3, r7, #3
 8003478:	701a      	strb	r2, [r3, #0]
	BatterySensor *battery_sensor = (BatterySensor*) malloc(sizeof(BatterySensor));
 800347a:	2008      	movs	r0, #8
 800347c:	f005 fc7a 	bl	8008d74 <malloc>
 8003480:	0003      	movs	r3, r0
 8003482:	60fb      	str	r3, [r7, #12]
	battery_sensor->adc_sensor = _adc_sensor;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	601a      	str	r2, [r3, #0]
	battery_sensor->rank = _rank;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1cfa      	adds	r2, r7, #3
 800348e:	7812      	ldrb	r2, [r2, #0]
 8003490:	711a      	strb	r2, [r3, #4]
	return battery_sensor;
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b004      	add	sp, #16
 800349a:	bd80      	pop	{r7, pc}

0800349c <get_battery_sensor_data>:

// REQUIRES: ForceSensor is a force_sensor object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value battery sensor data.
float get_battery_sensor_data(BatterySensor *battery_sensor) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    uint32_t raw_value = get_adc_sensor_value(battery_sensor->adc_sensor, battery_sensor->rank);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	791b      	ldrb	r3, [r3, #4]
 80034ac:	0019      	movs	r1, r3
 80034ae:	0010      	movs	r0, r2
 80034b0:	f7ff ffb7 	bl	8003422 <get_adc_sensor_value>
 80034b4:	0003      	movs	r3, r0
 80034b6:	60fb      	str	r3, [r7, #12]
    float voltage = raw_value * 3.3f / 4096.0;
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7fe f831 	bl	8001520 <__aeabi_ui2f>
 80034be:	1c03      	adds	r3, r0, #0
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <get_battery_sensor_data+0x80>)
 80034c2:	1c18      	adds	r0, r3, #0
 80034c4:	f7fd fcea 	bl	8000e9c <__aeabi_fmul>
 80034c8:	1c03      	adds	r3, r0, #0
 80034ca:	218b      	movs	r1, #139	; 0x8b
 80034cc:	05c9      	lsls	r1, r1, #23
 80034ce:	1c18      	adds	r0, r3, #0
 80034d0:	f7fd fb1c 	bl	8000b0c <__aeabi_fdiv>
 80034d4:	1c03      	adds	r3, r0, #0
 80034d6:	60bb      	str	r3, [r7, #8]
    if (voltage > BATTERY_SENSOR_FIVE_BATTERY) {
 80034d8:	4911      	ldr	r1, [pc, #68]	; (8003520 <get_battery_sensor_data+0x84>)
 80034da:	68b8      	ldr	r0, [r7, #8]
 80034dc:	f7fd f808 	bl	80004f0 <__aeabi_fcmpgt>
 80034e0:	1e03      	subs	r3, r0, #0
 80034e2:	d001      	beq.n	80034e8 <get_battery_sensor_data+0x4c>
    	return 5;
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <get_battery_sensor_data+0x88>)
 80034e6:	e014      	b.n	8003512 <get_battery_sensor_data+0x76>
    }
    else if (voltage > BATTERY_SENSOR_THREE_BATTERY) {
 80034e8:	490f      	ldr	r1, [pc, #60]	; (8003528 <get_battery_sensor_data+0x8c>)
 80034ea:	68b8      	ldr	r0, [r7, #8]
 80034ec:	f7fd f800 	bl	80004f0 <__aeabi_fcmpgt>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <get_battery_sensor_data+0x5c>
    	return 3;
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <get_battery_sensor_data+0x90>)
 80034f6:	e00c      	b.n	8003512 <get_battery_sensor_data+0x76>
    }
    else if (voltage > BATTERY_SENSOR_ONE_BATTERY) {
 80034f8:	68b8      	ldr	r0, [r7, #8]
 80034fa:	f7ff fe39 	bl	8003170 <__aeabi_f2d>
 80034fe:	4a0c      	ldr	r2, [pc, #48]	; (8003530 <get_battery_sensor_data+0x94>)
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <get_battery_sensor_data+0x98>)
 8003502:	f7fc ffbb 	bl	800047c <__aeabi_dcmpgt>
 8003506:	1e03      	subs	r3, r0, #0
 8003508:	d002      	beq.n	8003510 <get_battery_sensor_data+0x74>
    	return 1;
 800350a:	23fe      	movs	r3, #254	; 0xfe
 800350c:	059b      	lsls	r3, r3, #22
 800350e:	e000      	b.n	8003512 <get_battery_sensor_data+0x76>
    }
    return 0;
 8003510:	2300      	movs	r3, #0
}
 8003512:	1c18      	adds	r0, r3, #0
 8003514:	46bd      	mov	sp, r7
 8003516:	b004      	add	sp, #16
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	40533333 	.word	0x40533333
 8003520:	3fd9999a 	.word	0x3fd9999a
 8003524:	40a00000 	.word	0x40a00000
 8003528:	3fb33333 	.word	0x3fb33333
 800352c:	40400000 	.word	0x40400000
 8003530:	cccccccd 	.word	0xcccccccd
 8003534:	3feccccc 	.word	0x3feccccc

08003538 <new_wireless>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: huart is a UART channel
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Wireless object
Wireless *new_wireless(UART_HandleTypeDef *huart) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	Wireless *wireless = (Wireless*) malloc(sizeof(Wireless));
 8003540:	2018      	movs	r0, #24
 8003542:	f005 fc17 	bl	8008d74 <malloc>
 8003546:	0003      	movs	r3, r0
 8003548:	60fb      	str	r3, [r7, #12]
	wireless->uart = huart;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	601a      	str	r2, [r3, #0]
	return wireless;
 8003550:	68fb      	ldr	r3, [r7, #12]
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b004      	add	sp, #16
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <refresh_wireless_status>:

// REQUIRES: wireless is a Wireless object
// MODIFIES: Nothing
// EFFECTS: Increases ms_since_comms.
// Assumes function is called every 2 ms
void refresh_wireless_status(Wireless *wireless) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	wireless->ms_since_comms = wireless->ms_since_comms >= TIME_INDICATING_WIRELESS_COMMS_LOST_MS ?
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
			TIME_INDICATING_WIRELESS_COMMS_LOST_MS : wireless->ms_since_comms + 2;
 8003568:	4a06      	ldr	r2, [pc, #24]	; (8003584 <refresh_wireless_status+0x28>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d803      	bhi.n	8003576 <refresh_wireless_status+0x1a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	1c9a      	adds	r2, r3, #2
 8003574:	e000      	b.n	8003578 <refresh_wireless_status+0x1c>
 8003576:	4a04      	ldr	r2, [pc, #16]	; (8003588 <refresh_wireless_status+0x2c>)
	wireless->ms_since_comms = wireless->ms_since_comms >= TIME_INDICATING_WIRELESS_COMMS_LOST_MS ?
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	615a      	str	r2, [r3, #20]
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}
 8003584:	00000bb7 	.word	0x00000bb7
 8003588:	00000bb8 	.word	0x00000bb8

0800358c <send_wireless_speed>:

// REQUIRES: wireless is a Wireless object
// and speed is the speed data
// MODIFIES: Nothing
// EFFECTS: Sends speed data over wireless
void send_wireless_speed(Wireless *wireless, int speed) {
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
	char string[sizeof(wireless->uart_buffer)];
	sprintf((char *)string, "S%iES%iE", speed, speed);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	4907      	ldr	r1, [pc, #28]	; (80035b8 <send_wireless_speed+0x2c>)
 800359c:	240c      	movs	r4, #12
 800359e:	1938      	adds	r0, r7, r4
 80035a0:	f006 fb72 	bl	8009c88 <siprintf>
	send_wireless_string_10(wireless, string);
 80035a4:	193a      	adds	r2, r7, r4
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 f8df 	bl	800376e <send_wireless_string_10>
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	0800d800 	.word	0x0800d800

080035bc <send_wireless_battery_data>:

// REQUIRES: wireless is a Wireless object
// and battery_data is the battery data
// MODIFIES: Nothing
// EFFECTS: Sends battery data over wireless
void send_wireless_battery_data(Wireless *wireless, int battery_data) {
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
	char string[sizeof(wireless->uart_buffer)];
	sprintf((char *)string, "B%iEB%iE", battery_data, battery_data);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	4907      	ldr	r1, [pc, #28]	; (80035e8 <send_wireless_battery_data+0x2c>)
 80035cc:	240c      	movs	r4, #12
 80035ce:	1938      	adds	r0, r7, r4
 80035d0:	f006 fb5a 	bl	8009c88 <siprintf>
	send_wireless_string_10(wireless, string);
 80035d4:	193a      	adds	r2, r7, r4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0011      	movs	r1, r2
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f8c7 	bl	800376e <send_wireless_string_10>
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b007      	add	sp, #28
 80035e6:	bd90      	pop	{r4, r7, pc}
 80035e8:	0800d80c 	.word	0x0800d80c

080035ec <parse_wireless_message>:

// REQUIRES: wireless and display are objects
// MODIFIES: Nothing
// EFFECTS: Attempts to parse data based on wireless buffer and returns true if success
bool parse_wireless_message(Wireless *wireless, Skater* skater, Joint* joint, char start_char) {
 80035ec:	b590      	push	{r4, r7, lr}
 80035ee:	b08d      	sub	sp, #52	; 0x34
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	001a      	movs	r2, r3
 80035fa:	1cfb      	adds	r3, r7, #3
 80035fc:	701a      	strb	r2, [r3, #0]
	int start_of_transmit = -1;
 80035fe:	2301      	movs	r3, #1
 8003600:	425b      	negs	r3, r3
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
	int end_of_transmit = -1;
 8003604:	2301      	movs	r3, #1
 8003606:	425b      	negs	r3, r3
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i = 0; i < sizeof(wireless->uart_buffer) - 1; ++i) {
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	e01c      	b.n	800364a <parse_wireless_message+0x5e>
		if (wireless->uart_buffer[i] == start_char && isdigit((unsigned char)wireless->uart_buffer[i + 1])) {
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	18d3      	adds	r3, r2, r3
 8003616:	3304      	adds	r3, #4
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	1cfa      	adds	r2, r7, #3
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d110      	bne.n	8003644 <parse_wireless_message+0x58>
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	3301      	adds	r3, #1
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	18d3      	adds	r3, r2, r3
 800362a:	791b      	ldrb	r3, [r3, #4]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <parse_wireless_message+0xf4>)
 8003630:	18d3      	adds	r3, r2, r3
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	001a      	movs	r2, r3
 8003636:	2304      	movs	r3, #4
 8003638:	4013      	ands	r3, r2
 800363a:	d003      	beq.n	8003644 <parse_wireless_message+0x58>
			start_of_transmit = i + 1;
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	3301      	adds	r3, #1
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003642:	e005      	b.n	8003650 <parse_wireless_message+0x64>
	for (int i = 0; i < sizeof(wireless->uart_buffer) - 1; ++i) {
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	3301      	adds	r3, #1
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	2b08      	cmp	r3, #8
 800364e:	d9df      	bls.n	8003610 <parse_wireless_message+0x24>
		}
	}
	if (start_of_transmit == -1) return false;
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	3301      	adds	r3, #1
 8003654:	d101      	bne.n	800365a <parse_wireless_message+0x6e>
 8003656:	2300      	movs	r3, #0
 8003658:	e03e      	b.n	80036d8 <parse_wireless_message+0xec>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	623b      	str	r3, [r7, #32]
 800365e:	e01b      	b.n	8003698 <parse_wireless_message+0xac>
		if (wireless->uart_buffer[i] == 'E') {
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	18d3      	adds	r3, r2, r3
 8003666:	3304      	adds	r3, #4
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b45      	cmp	r3, #69	; 0x45
 800366c:	d102      	bne.n	8003674 <parse_wireless_message+0x88>
			end_of_transmit = i;
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8003672:	e014      	b.n	800369e <parse_wireless_message+0xb2>
		}
		else {
			if (!isdigit(wireless->uart_buffer[i])) return false;
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	18d3      	adds	r3, r2, r3
 800367a:	3304      	adds	r3, #4
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <parse_wireless_message+0xf4>)
 8003682:	18d3      	adds	r3, r2, r3
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	001a      	movs	r2, r3
 8003688:	2304      	movs	r3, #4
 800368a:	4013      	ands	r3, r2
 800368c:	d101      	bne.n	8003692 <parse_wireless_message+0xa6>
 800368e:	2300      	movs	r3, #0
 8003690:	e022      	b.n	80036d8 <parse_wireless_message+0xec>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	3301      	adds	r3, #1
 8003696:	623b      	str	r3, [r7, #32]
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	2b09      	cmp	r3, #9
 800369c:	d9e0      	bls.n	8003660 <parse_wireless_message+0x74>
		}
	}
	if (end_of_transmit == -1) return false;
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	3301      	adds	r3, #1
 80036a2:	d101      	bne.n	80036a8 <parse_wireless_message+0xbc>
 80036a4:	2300      	movs	r3, #0
 80036a6:	e017      	b.n	80036d8 <parse_wireless_message+0xec>

	char contents_string[5];
	int length = end_of_transmit - start_of_transmit;
 80036a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	61fb      	str	r3, [r7, #28]
	memcpy(contents_string, wireless->uart_buffer + start_of_transmit, length);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1d1a      	adds	r2, r3, #4
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	18d1      	adds	r1, r2, r3
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	2410      	movs	r4, #16
 80036bc:	193b      	adds	r3, r7, r4
 80036be:	0018      	movs	r0, r3
 80036c0:	f005 fb62 	bl	8008d88 <memcpy>

	int content = atoi(contents_string);
 80036c4:	193b      	adds	r3, r7, r4
 80036c6:	0018      	movs	r0, r3
 80036c8:	f005 fb24 	bl	8008d14 <atoi>
 80036cc:	0003      	movs	r3, r0
 80036ce:	61bb      	str	r3, [r7, #24]

	wireless->message_contents = content;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	611a      	str	r2, [r3, #16]

	return true;
 80036d6:	2301      	movs	r3, #1
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b00d      	add	sp, #52	; 0x34
 80036de:	bd90      	pop	{r4, r7, pc}
 80036e0:	0800d9e0 	.word	0x0800d9e0

080036e4 <receive_wireless>:

// REQUIRES: wireless, skater, and joint are objects
// MODIFIES: Nothing
// EFFECTS: Receives the wireless angle and changes the joint angle if skater is on the board
void receive_wireless(Wireless *wireless, Skater* skater, Joint* joint) {
 80036e4:	b5b0      	push	{r4, r5, r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
//	for (int i = 0; i < 10; ++i) {
//		wireless->uart_buffer[i] = 0;
//	}
//	HAL_Delay(10);
	HAL_UART_Receive_DMA(wireless->uart, (uint8_t *)wireless->uart_buffer, sizeof(wireless->uart_buffer));
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3304      	adds	r3, #4
 80036f8:	220a      	movs	r2, #10
 80036fa:	0019      	movs	r1, r3
 80036fc:	f004 faec 	bl	8007cd8 <HAL_UART_Receive_DMA>
//	HAL_Delay(10);
	bool target_success =  parse_wireless_message(wireless, skater, joint, 'T');
 8003700:	2517      	movs	r5, #23
 8003702:	197c      	adds	r4, r7, r5
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	2354      	movs	r3, #84	; 0x54
 800370c:	f7ff ff6e 	bl	80035ec <parse_wireless_message>
 8003710:	0003      	movs	r3, r0
 8003712:	7023      	strb	r3, [r4, #0]
	if (target_success) {
 8003714:	197b      	adds	r3, r7, r5
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d025      	beq.n	8003768 <receive_wireless+0x84>
		wireless->ms_since_comms = 0;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	615a      	str	r2, [r3, #20]
		bool is_skater_here = !is_skater_gone(skater);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	0018      	movs	r0, r3
 8003726:	f000 fe7d 	bl	8004424 <is_skater_gone>
 800372a:	0003      	movs	r3, r0
 800372c:	1e5a      	subs	r2, r3, #1
 800372e:	4193      	sbcs	r3, r2
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2201      	movs	r2, #1
 8003734:	4053      	eors	r3, r2
 8003736:	b2db      	uxtb	r3, r3
 8003738:	001a      	movs	r2, r3
 800373a:	2016      	movs	r0, #22
 800373c:	183b      	adds	r3, r7, r0
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	2101      	movs	r1, #1
 8003744:	400a      	ands	r2, r1
 8003746:	701a      	strb	r2, [r3, #0]
		if (is_skater_here) {
 8003748:	183b      	adds	r3, r7, r0
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <receive_wireless+0x82>
			set_joint_target(joint, (float)wireless->message_contents);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	0018      	movs	r0, r3
 8003756:	f7fd fe95 	bl	8001484 <__aeabi_i2f>
 800375a:	1c02      	adds	r2, r0, #0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	1c11      	adds	r1, r2, #0
 8003760:	0018      	movs	r0, r3
 8003762:	f000 f8e5 	bl	8003930 <set_joint_target>
		}
		return;
 8003766:	46c0      	nop			; (mov r8, r8)
	}
}
 8003768:	46bd      	mov	sp, r7
 800376a:	b006      	add	sp, #24
 800376c:	bdb0      	pop	{r4, r5, r7, pc}

0800376e <send_wireless_string_10>:

// REQUIRES: wireless is a Wireless object
// and string is an array of 10 characters.
// MODIFIES: Nothing
// EFFECTS: Sends the character array over wireless
void send_wireless_string_10(Wireless *wireless, char string[10]) {
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
	HAL_Delay(50);
 8003778:	2032      	movs	r0, #50	; 0x32
 800377a:	f001 fa0f 	bl	8004b9c <HAL_Delay>
	HAL_UART_Transmit(wireless->uart, (uint8_t *)string, sizeof(wireless->uart_buffer), 200);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	6839      	ldr	r1, [r7, #0]
 8003784:	23c8      	movs	r3, #200	; 0xc8
 8003786:	220a      	movs	r2, #10
 8003788:	f004 fa0a 	bl	8007ba0 <HAL_UART_Transmit>
	HAL_Delay(50);
 800378c:	2032      	movs	r0, #50	; 0x32
 800378e:	f001 fa05 	bl	8004b9c <HAL_Delay>
}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b002      	add	sp, #8
 8003798:	bd80      	pop	{r7, pc}

0800379a <new_force_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ForceSensor object
ForceSensor *new_force_sensor(ADCSensor *_adc_sensor, uint8_t _rank) {
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	000a      	movs	r2, r1
 80037a4:	1cfb      	adds	r3, r7, #3
 80037a6:	701a      	strb	r2, [r3, #0]
    ForceSensor *force_sensor = (ForceSensor*) malloc(sizeof(ForceSensor));
 80037a8:	2008      	movs	r0, #8
 80037aa:	f005 fae3 	bl	8008d74 <malloc>
 80037ae:	0003      	movs	r3, r0
 80037b0:	60fb      	str	r3, [r7, #12]
	force_sensor->adc_sensor = _adc_sensor;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
    force_sensor->rank = _rank;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1cfa      	adds	r2, r7, #3
 80037bc:	7812      	ldrb	r2, [r2, #0]
 80037be:	711a      	strb	r2, [r3, #4]
	return force_sensor;
 80037c0:	68fb      	ldr	r3, [r7, #12]
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}

080037ca <new_imu_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hi2c is the i2c channel
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created IMU object
IMU *new_imu_sensor(I2C_HandleTypeDef *hi2c) {
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
    IMU *imu = (IMU*) malloc(sizeof(IMU));
 80037d2:	2004      	movs	r0, #4
 80037d4:	f005 face 	bl	8008d74 <malloc>
 80037d8:	0003      	movs	r3, r0
 80037da:	60fb      	str	r3, [r7, #12]
	imu->i2c = hi2c;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]
	return imu;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bd80      	pop	{r7, pc}

080037ec <new_interrupt_timer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _timer corresponds to timer
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created InterruptTimer object
InterruptTimer *new_interrupt_timer(TIM_HandleTypeDef *_timer) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	InterruptTimer *interrupt_timer = (InterruptTimer*) malloc(sizeof(InterruptTimer));
 80037f4:	2004      	movs	r0, #4
 80037f6:	f005 fabd 	bl	8008d74 <malloc>
 80037fa:	0003      	movs	r3, r0
 80037fc:	60fb      	str	r3, [r7, #12]
	interrupt_timer->timer = _timer;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]
	return interrupt_timer;
 8003804:	68fb      	ldr	r3, [r7, #12]
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}

0800380e <start_interrupt_timer>:

// REQUIRES: interrupt_timer is an InterruptTimer object
// MODIFIES: nothing
// EFFECTS: Enables interrupts for the interrupt timer
void start_interrupt_timer(InterruptTimer *interrupt_timer) {
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(interrupt_timer->timer);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	0018      	movs	r0, r3
 800381c:	f003 fd5c 	bl	80072d8 <HAL_TIM_Base_Start_IT>
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <new_joint>:
// REQUIRES: _motor is a Motor object,
// _potentiometer is a Potentiometer object,
// and _limit_switch_pin is a PinData object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Joint object
Joint *new_joint(Motor* _motor, Potentiometer* _potentiometer, PinData* _limit_switch_pin) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
	Joint *joint = (Joint*) malloc(sizeof(Joint));
 8003834:	201c      	movs	r0, #28
 8003836:	f005 fa9d 	bl	8008d74 <malloc>
 800383a:	0003      	movs	r3, r0
 800383c:	617b      	str	r3, [r7, #20]
	joint->motor = _motor;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	601a      	str	r2, [r3, #0]
    joint->potentiometer = _potentiometer;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	605a      	str	r2, [r3, #4]
    joint->limit_switch_pin = _limit_switch_pin;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	609a      	str	r2, [r3, #8]
    joint->potentiometer_value_at_rest_offset = 0;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2200      	movs	r2, #0
 8003854:	60da      	str	r2, [r3, #12]
    joint->current_angle_degrees = 0.0f;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	611a      	str	r2, [r3, #16]
    joint->desired_angle_degrees = 0.0f;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2200      	movs	r2, #0
 8003860:	615a      	str	r2, [r3, #20]
	joint->is_calibrated = false;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	761a      	strb	r2, [r3, #24]
	joint->is_limit_switch_activated = true;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2201      	movs	r2, #1
 800386c:	765a      	strb	r2, [r3, #25]
	return joint;
 800386e:	697b      	ldr	r3, [r7, #20]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b006      	add	sp, #24
 8003876:	bd80      	pop	{r7, pc}

08003878 <move_joint_to_target>:

// REQUIRES: joint is a Joint object
// and target is a float
// MODIFIES: Nothing
// EFFECTS: Moves the motor based on current angle and desired angle
void move_joint_to_target(Joint *joint) {
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	float difference_degrees = joint->desired_angle_degrees - joint->current_angle_degrees;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	1c19      	adds	r1, r3, #0
 800388a:	1c10      	adds	r0, r2, #0
 800388c:	f7fd fc2c 	bl	80010e8 <__aeabi_fsub>
 8003890:	1c03      	adds	r3, r0, #0
 8003892:	617b      	str	r3, [r7, #20]
	if (fabs(difference_degrees) >= DESIRED_ANGLE_LAX_DEGREES) {
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	4922      	ldr	r1, [pc, #136]	; (8003924 <move_joint_to_target+0xac>)
 800389c:	1c18      	adds	r0, r3, #0
 800389e:	f7fc fe31 	bl	8000504 <__aeabi_fcmpge>
 80038a2:	1e03      	subs	r3, r0, #0
 80038a4:	d100      	bne.n	80038a8 <move_joint_to_target+0x30>
		if (motor_thinks_is_at_rest && !joint->is_limit_switch_activated) {
			// Increase its current angle by an arbitrary number in order to make it head in the direction of the desired.
			joint->current_angle_degrees += 10;
		}
	}
}
 80038a6:	e038      	b.n	800391a <move_joint_to_target+0xa2>
		bool direction = !((difference_degrees > 0) ^ IS_MOTOR_SAME_DIRECTION_AS_POTENTIOMETER);
 80038a8:	2301      	movs	r3, #1
 80038aa:	1c1c      	adds	r4, r3, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	6978      	ldr	r0, [r7, #20]
 80038b0:	f7fc fe1e 	bl	80004f0 <__aeabi_fcmpgt>
 80038b4:	1e03      	subs	r3, r0, #0
 80038b6:	d101      	bne.n	80038bc <move_joint_to_target+0x44>
 80038b8:	2300      	movs	r3, #0
 80038ba:	1c1c      	adds	r4, r3, #0
 80038bc:	b2e3      	uxtb	r3, r4
 80038be:	2201      	movs	r2, #1
 80038c0:	4053      	eors	r3, r2
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	001a      	movs	r2, r3
 80038c6:	2013      	movs	r0, #19
 80038c8:	183b      	adds	r3, r7, r0
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	2101      	movs	r1, #1
 80038d0:	400a      	ands	r2, r1
 80038d2:	701a      	strb	r2, [r3, #0]
		step_motor_direction(joint->motor, direction);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	183b      	adds	r3, r7, r0
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	0019      	movs	r1, r3
 80038de:	0010      	movs	r0, r2
 80038e0:	f000 fd0c 	bl	80042fc <step_motor_direction>
		float steps = difference_degrees > 0 ? 1 : -1;
 80038e4:	2100      	movs	r1, #0
 80038e6:	6978      	ldr	r0, [r7, #20]
 80038e8:	f7fc fe02 	bl	80004f0 <__aeabi_fcmpgt>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d002      	beq.n	80038f6 <move_joint_to_target+0x7e>
 80038f0:	23fe      	movs	r3, #254	; 0xfe
 80038f2:	059b      	lsls	r3, r3, #22
 80038f4:	e000      	b.n	80038f8 <move_joint_to_target+0x80>
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <move_joint_to_target+0xb0>)
 80038f8:	60fb      	str	r3, [r7, #12]
		float changed_degrees = steps / MOTOR_STEPS_PER_JOINT_DEGREE;
 80038fa:	490c      	ldr	r1, [pc, #48]	; (800392c <move_joint_to_target+0xb4>)
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7fd f905 	bl	8000b0c <__aeabi_fdiv>
 8003902:	1c03      	adds	r3, r0, #0
 8003904:	60bb      	str	r3, [r7, #8]
		joint->current_angle_degrees += changed_degrees;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	1c18      	adds	r0, r3, #0
 800390e:	f7fc ff5f 	bl	80007d0 <__aeabi_fadd>
 8003912:	1c03      	adds	r3, r0, #0
 8003914:	1c1a      	adds	r2, r3, #0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b007      	add	sp, #28
 8003920:	bd90      	pop	{r4, r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	40a00000 	.word	0x40a00000
 8003928:	bf800000 	.word	0xbf800000
 800392c:	44855555 	.word	0x44855555

08003930 <set_joint_target>:

// REQUIRES: joint is a Joint object
// and target is a float
// MODIFIES: desired_angle_degrees
// EFFECTS: Changes the desired_angle_degrees
void set_joint_target(Joint *joint, float target) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
	joint->desired_angle_degrees = target;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	615a      	str	r2, [r3, #20]
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	receive_wireless(wireless, skater, joint);
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_UART_RxCpltCallback+0x24>)
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_UART_RxCpltCallback+0x28>)
 8003956:	6819      	ldr	r1, [r3, #0]
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_UART_RxCpltCallback+0x2c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	001a      	movs	r2, r3
 800395e:	f7ff fec1 	bl	80036e4 <receive_wireless>
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b002      	add	sp, #8
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	20000504 	.word	0x20000504
 8003970:	20000500 	.word	0x20000500
 8003974:	200004f8 	.word	0x200004f8

08003978 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	update_adc_sensor_values(adc_sensor);
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0018      	movs	r0, r3
 8003986:	f7ff fd5e 	bl	8003446 <update_adc_sensor_values>
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	200004e4 	.word	0x200004e4

08003998 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	if (htim == fast_interrupt_timer->timer) {
 80039a0:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d110      	bne.n	80039ce <HAL_TIM_PeriodElapsedCallback+0x36>

		// 50 us ->
//		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
		set_pin_value(debug_pin_1, 1);
 80039ac:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2101      	movs	r1, #1
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 fceb 	bl	800438e <set_pin_value>
		move_joint_to_target(joint);
 80039b8:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	0018      	movs	r0, r3
 80039be:	f7ff ff5b 	bl	8003878 <move_joint_to_target>
		set_pin_value(debug_pin_1, 0);
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2100      	movs	r1, #0
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 fce0 	bl	800438e <set_pin_value>
//		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);

	}
	if (htim == slow_interrupt_timer->timer) {
 80039ce:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d123      	bne.n	8003a22 <HAL_TIM_PeriodElapsedCallback+0x8a>
		set_pin_value(debug_pin_1, 1);
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2101      	movs	r1, #1
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 fcd4 	bl	800438e <set_pin_value>

		// 2 ms
		update_adc_sensor_values(adc_sensor);
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7ff fd2b 	bl	8003446 <update_adc_sensor_values>
			refresh_joint_limit_switch(joint);
		}
		if (USE_POTENTIOMETER_FEEDBACK) {
			refresh_joint_angle(joint);
		}
		if (is_skater_gone(skater)) {
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f000 fd15 	bl	8004424 <is_skater_gone>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d006      	beq.n	8003a0c <HAL_TIM_PeriodElapsedCallback+0x74>
			set_joint_target(joint, AUTOMATIC_BRAKING_ANGLE_DEGREES);
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003a04:	1c11      	adds	r1, r2, #0
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7ff ff92 	bl	8003930 <set_joint_target>
		}
		else if (USE_WIRELESS_COMMS_WATCHDOG && is_wireless_comms_lost(wireless)) {
			set_joint_target(joint, AUTOMATIC_RELAX_ANGLE_DEGREES);
		}

		refresh_wireless_status(wireless);
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7ff fda3 	bl	800355c <refresh_wireless_status>

		set_pin_value(debug_pin_1, 0);
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f000 fcb6 	bl	800438e <set_pin_value>
	}
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b002      	add	sp, #8
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	20000524 	.word	0x20000524
 8003a30:	2000051c 	.word	0x2000051c
 8003a34:	200004f8 	.word	0x200004f8
 8003a38:	20000520 	.word	0x20000520
 8003a3c:	200004e4 	.word	0x200004e4
 8003a40:	20000500 	.word	0x20000500
 8003a44:	42b40000 	.word	0x42b40000
 8003a48:	20000504 	.word	0x20000504

08003a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	adc_sensor = new_adc_sensor(&hadc1, 3);
 8003a52:	4b8c      	ldr	r3, [pc, #560]	; (8003c84 <main+0x238>)
 8003a54:	2103      	movs	r1, #3
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7ff fc84 	bl	8003364 <new_adc_sensor>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	4b8a      	ldr	r3, [pc, #552]	; (8003c88 <main+0x23c>)
 8003a60:	601a      	str	r2, [r3, #0]
	imu = new_imu_sensor(&hi2c2);
 8003a62:	4b8a      	ldr	r3, [pc, #552]	; (8003c8c <main+0x240>)
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7ff feb0 	bl	80037ca <new_imu_sensor>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <main+0x244>)
 8003a6e:	601a      	str	r2, [r3, #0]
	motor_direction_pin = new_pin_data(DRV8825_DIR_GPIO_Port, DRV8825_DIR_Pin, PIN_IS_OUTPUT);
 8003a70:	23a0      	movs	r3, #160	; 0xa0
 8003a72:	05db      	lsls	r3, r3, #23
 8003a74:	2201      	movs	r2, #1
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f000 fc67 	bl	800434c <new_pin_data>
 8003a7e:	0002      	movs	r2, r0
 8003a80:	4b84      	ldr	r3, [pc, #528]	; (8003c94 <main+0x248>)
 8003a82:	601a      	str	r2, [r3, #0]
	motor_step_pin = new_pin_data(DRV8825_STP_GPIO_Port, DRV8825_STP_Pin, PIN_IS_OUTPUT);
 8003a84:	23a0      	movs	r3, #160	; 0xa0
 8003a86:	05db      	lsls	r3, r3, #23
 8003a88:	2201      	movs	r2, #1
 8003a8a:	2140      	movs	r1, #64	; 0x40
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 fc5d 	bl	800434c <new_pin_data>
 8003a92:	0002      	movs	r2, r0
 8003a94:	4b80      	ldr	r3, [pc, #512]	; (8003c98 <main+0x24c>)
 8003a96:	601a      	str	r2, [r3, #0]
	limit_switch_pin = new_pin_data(LIMIT_SWITCH_0_GPIO_Port, LIMIT_SWITCH_0_Pin, PIN_IS_INPUT);
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	01db      	lsls	r3, r3, #7
 8003a9c:	487f      	ldr	r0, [pc, #508]	; (8003c9c <main+0x250>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	f000 fc53 	bl	800434c <new_pin_data>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	4b7d      	ldr	r3, [pc, #500]	; (8003ca0 <main+0x254>)
 8003aaa:	601a      	str	r2, [r3, #0]
	debug_led = new_pin_data(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, PIN_IS_OUTPUT);
 8003aac:	4b7d      	ldr	r3, [pc, #500]	; (8003ca4 <main+0x258>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 fc4a 	bl	800434c <new_pin_data>
 8003ab8:	0002      	movs	r2, r0
 8003aba:	4b7b      	ldr	r3, [pc, #492]	; (8003ca8 <main+0x25c>)
 8003abc:	601a      	str	r2, [r3, #0]
	debug_pin_0 = new_pin_data(DEBUG_PIN_0_GPIO_Port, DEBUG_PIN_0_Pin, PIN_IS_OUTPUT);
 8003abe:	23a0      	movs	r3, #160	; 0xa0
 8003ac0:	05db      	lsls	r3, r3, #23
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2120      	movs	r1, #32
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 fc40 	bl	800434c <new_pin_data>
 8003acc:	0002      	movs	r2, r0
 8003ace:	4b77      	ldr	r3, [pc, #476]	; (8003cac <main+0x260>)
 8003ad0:	601a      	str	r2, [r3, #0]
	debug_pin_1 = new_pin_data(DEBUG_PIN_1_GPIO_Port, DEBUG_PIN_1_Pin, PIN_IS_OUTPUT);
 8003ad2:	4b77      	ldr	r3, [pc, #476]	; (8003cb0 <main+0x264>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f000 fc37 	bl	800434c <new_pin_data>
 8003ade:	0002      	movs	r2, r0
 8003ae0:	4b74      	ldr	r3, [pc, #464]	; (8003cb4 <main+0x268>)
 8003ae2:	601a      	str	r2, [r3, #0]
	motor = new_motor(motor_direction_pin, motor_step_pin);
 8003ae4:	4b6b      	ldr	r3, [pc, #428]	; (8003c94 <main+0x248>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b6b      	ldr	r3, [pc, #428]	; (8003c98 <main+0x24c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	0019      	movs	r1, r3
 8003aee:	0010      	movs	r0, r2
 8003af0:	f000 fbef 	bl	80042d2 <new_motor>
 8003af4:	0002      	movs	r2, r0
 8003af6:	4b70      	ldr	r3, [pc, #448]	; (8003cb8 <main+0x26c>)
 8003af8:	601a      	str	r2, [r3, #0]
	slow_interrupt_timer = new_interrupt_timer(&htim14);
 8003afa:	4b70      	ldr	r3, [pc, #448]	; (8003cbc <main+0x270>)
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7ff fe75 	bl	80037ec <new_interrupt_timer>
 8003b02:	0002      	movs	r2, r0
 8003b04:	4b6e      	ldr	r3, [pc, #440]	; (8003cc0 <main+0x274>)
 8003b06:	601a      	str	r2, [r3, #0]
	fast_interrupt_timer = new_interrupt_timer(&htim16);
 8003b08:	4b6e      	ldr	r3, [pc, #440]	; (8003cc4 <main+0x278>)
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f7ff fe6e 	bl	80037ec <new_interrupt_timer>
 8003b10:	0002      	movs	r2, r0
 8003b12:	4b6d      	ldr	r3, [pc, #436]	; (8003cc8 <main+0x27c>)
 8003b14:	601a      	str	r2, [r3, #0]
	adc_interrupt_timer = new_interrupt_timer(&htim3);
 8003b16:	4b6d      	ldr	r3, [pc, #436]	; (8003ccc <main+0x280>)
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff fe67 	bl	80037ec <new_interrupt_timer>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	4b6b      	ldr	r3, [pc, #428]	; (8003cd0 <main+0x284>)
 8003b22:	601a      	str	r2, [r3, #0]
	potentiometer = new_potentiometer(adc_sensor, 1);
 8003b24:	4b58      	ldr	r3, [pc, #352]	; (8003c88 <main+0x23c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2101      	movs	r1, #1
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 fc4e 	bl	80043cc <new_potentiometer>
 8003b30:	0002      	movs	r2, r0
 8003b32:	4b68      	ldr	r3, [pc, #416]	; (8003cd4 <main+0x288>)
 8003b34:	601a      	str	r2, [r3, #0]
	joint = new_joint(motor, potentiometer, limit_switch_pin);
 8003b36:	4b60      	ldr	r3, [pc, #384]	; (8003cb8 <main+0x26c>)
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	4b66      	ldr	r3, [pc, #408]	; (8003cd4 <main+0x288>)
 8003b3c:	6819      	ldr	r1, [r3, #0]
 8003b3e:	4b58      	ldr	r3, [pc, #352]	; (8003ca0 <main+0x254>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	001a      	movs	r2, r3
 8003b44:	f7ff fe70 	bl	8003828 <new_joint>
 8003b48:	0002      	movs	r2, r0
 8003b4a:	4b63      	ldr	r3, [pc, #396]	; (8003cd8 <main+0x28c>)
 8003b4c:	601a      	str	r2, [r3, #0]
	force_sensor = new_force_sensor(adc_sensor, 0);
 8003b4e:	4b4e      	ldr	r3, [pc, #312]	; (8003c88 <main+0x23c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2100      	movs	r1, #0
 8003b54:	0018      	movs	r0, r3
 8003b56:	f7ff fe20 	bl	800379a <new_force_sensor>
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	4b5f      	ldr	r3, [pc, #380]	; (8003cdc <main+0x290>)
 8003b5e:	601a      	str	r2, [r3, #0]
	battery_sensor = new_battery_sensor(adc_sensor, 2);
 8003b60:	4b49      	ldr	r3, [pc, #292]	; (8003c88 <main+0x23c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2102      	movs	r1, #2
 8003b66:	0018      	movs	r0, r3
 8003b68:	f7ff fc80 	bl	800346c <new_battery_sensor>
 8003b6c:	0002      	movs	r2, r0
 8003b6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ce0 <main+0x294>)
 8003b70:	601a      	str	r2, [r3, #0]
	skater = new_skater(force_sensor);
 8003b72:	4b5a      	ldr	r3, [pc, #360]	; (8003cdc <main+0x290>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 fc40 	bl	80043fc <new_skater>
 8003b7c:	0002      	movs	r2, r0
 8003b7e:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <main+0x298>)
 8003b80:	601a      	str	r2, [r3, #0]
	wireless = new_wireless(&huart1);
 8003b82:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <main+0x29c>)
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7ff fcd7 	bl	8003538 <new_wireless>
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	4b57      	ldr	r3, [pc, #348]	; (8003cec <main+0x2a0>)
 8003b8e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b90:	f000 ff7e 	bl	8004a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b94:	f000 f8ae 	bl	8003cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b98:	f000 fada 	bl	8004150 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b9c:	f000 fab2 	bl	8004104 <MX_DMA_Init>
  MX_I2C2_Init();
 8003ba0:	f000 f982 	bl	8003ea8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8003ba4:	f000 fa60 	bl	8004068 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003ba8:	f000 f8ec 	bl	8003d84 <MX_ADC1_Init>
  MX_TIM14_Init();
 8003bac:	f000 fa12 	bl	8003fd4 <MX_TIM14_Init>
  MX_TIM16_Init();
 8003bb0:	f000 fa34 	bl	800401c <MX_TIM16_Init>
  MX_TIM3_Init();
 8003bb4:	f000 f9b8 	bl	8003f28 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  init_adc_sensor(adc_sensor);
 8003bb8:	4b33      	ldr	r3, [pc, #204]	; (8003c88 <main+0x23c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f7ff fc1e 	bl	80033fe <init_adc_sensor>
  start_interrupt_timer(adc_interrupt_timer);
 8003bc2:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <main+0x284>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f7ff fe21 	bl	800380e <start_interrupt_timer>

  start_interrupt_timer(fast_interrupt_timer);
 8003bcc:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <main+0x27c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7ff fe1c 	bl	800380e <start_interrupt_timer>
  start_interrupt_timer(slow_interrupt_timer);
 8003bd6:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <main+0x274>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7ff fe17 	bl	800380e <start_interrupt_timer>

  receive_wireless(wireless, skater, joint);
 8003be0:	4b42      	ldr	r3, [pc, #264]	; (8003cec <main+0x2a0>)
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <main+0x298>)
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <main+0x28c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	001a      	movs	r2, r3
 8003bee:	f7ff fd79 	bl	80036e4 <receive_wireless>
    /* USER CODE BEGIN 3 */

	  // TODO - this statement is in an if statement since we are afraid that it takes too much time
	  // and will decrease responsiveness. However, this may not actually be true
	  // It is worth testing to see if this is actually the case.
	  HAL_Delay(1000);
 8003bf2:	23fa      	movs	r3, #250	; 0xfa
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 ffd0 	bl	8004b9c <HAL_Delay>
	  float difference_degrees = joint->desired_angle_degrees - joint->current_angle_degrees;
 8003bfc:	4b36      	ldr	r3, [pc, #216]	; (8003cd8 <main+0x28c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	4b35      	ldr	r3, [pc, #212]	; (8003cd8 <main+0x28c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	1c19      	adds	r1, r3, #0
 8003c0a:	1c10      	adds	r0, r2, #0
 8003c0c:	f7fd fa6c 	bl	80010e8 <__aeabi_fsub>
 8003c10:	1c03      	adds	r3, r0, #0
 8003c12:	60fb      	str	r3, [r7, #12]
	  if (fabs(difference_degrees) < DESIRED_ANGLE_LAX_DEGREES) {
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	4935      	ldr	r1, [pc, #212]	; (8003cf0 <main+0x2a4>)
 8003c1c:	1c18      	adds	r0, r3, #0
 8003c1e:	f7fc fc53 	bl	80004c8 <__aeabi_fcmplt>
 8003c22:	1e03      	subs	r3, r0, #0
 8003c24:	d020      	beq.n	8003c68 <main+0x21c>
		  int current_speed = (int)joint->current_angle_degrees; // TODO - get actual speed
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <main+0x28c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	1c18      	adds	r0, r3, #0
 8003c2e:	f7fd fc09 	bl	8001444 <__aeabi_f2iz>
 8003c32:	0003      	movs	r3, r0
 8003c34:	60bb      	str	r3, [r7, #8]
		  send_wireless_speed(wireless, current_speed);
 8003c36:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <main+0x2a0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff fca4 	bl	800358c <send_wireless_speed>

		  int battery_data = get_battery_sensor_data(battery_sensor);
 8003c44:	4b26      	ldr	r3, [pc, #152]	; (8003ce0 <main+0x294>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7ff fc27 	bl	800349c <get_battery_sensor_data>
 8003c4e:	1c03      	adds	r3, r0, #0
 8003c50:	1c18      	adds	r0, r3, #0
 8003c52:	f7fd fbf7 	bl	8001444 <__aeabi_f2iz>
 8003c56:	0003      	movs	r3, r0
 8003c58:	607b      	str	r3, [r7, #4]
		  send_wireless_battery_data(wireless, battery_data);  // TODO - get actual battery data
 8003c5a:	4b24      	ldr	r3, [pc, #144]	; (8003cec <main+0x2a0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	0011      	movs	r1, r2
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7ff fcaa 	bl	80035bc <send_wireless_battery_data>

	  }
	  set_pin_value(debug_pin_0, 1);
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <main+0x260>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f000 fb8d 	bl	800438e <set_pin_value>
	  set_pin_value(debug_pin_0, 0);
 8003c74:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <main+0x260>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2100      	movs	r1, #0
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 fb87 	bl	800438e <set_pin_value>
  {
 8003c80:	e7b7      	b.n	8003bf2 <main+0x1a6>
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	200001fc 	.word	0x200001fc
 8003c88:	200004e4 	.word	0x200004e4
 8003c8c:	200002bc 	.word	0x200002bc
 8003c90:	200004ec 	.word	0x200004ec
 8003c94:	20000508 	.word	0x20000508
 8003c98:	2000050c 	.word	0x2000050c
 8003c9c:	50000800 	.word	0x50000800
 8003ca0:	20000510 	.word	0x20000510
 8003ca4:	50001400 	.word	0x50001400
 8003ca8:	20000514 	.word	0x20000514
 8003cac:	20000518 	.word	0x20000518
 8003cb0:	50000400 	.word	0x50000400
 8003cb4:	2000051c 	.word	0x2000051c
 8003cb8:	200004f0 	.word	0x200004f0
 8003cbc:	2000035c 	.word	0x2000035c
 8003cc0:	20000520 	.word	0x20000520
 8003cc4:	200003a8 	.word	0x200003a8
 8003cc8:	20000524 	.word	0x20000524
 8003ccc:	20000310 	.word	0x20000310
 8003cd0:	20000528 	.word	0x20000528
 8003cd4:	200004f4 	.word	0x200004f4
 8003cd8:	200004f8 	.word	0x200004f8
 8003cdc:	200004fc 	.word	0x200004fc
 8003ce0:	200004e8 	.word	0x200004e8
 8003ce4:	20000500 	.word	0x20000500
 8003ce8:	200003f4 	.word	0x200003f4
 8003cec:	20000504 	.word	0x20000504
 8003cf0:	40a00000 	.word	0x40a00000

08003cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b093      	sub	sp, #76	; 0x4c
 8003cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cfa:	2410      	movs	r4, #16
 8003cfc:	193b      	adds	r3, r7, r4
 8003cfe:	0018      	movs	r0, r3
 8003d00:	2338      	movs	r3, #56	; 0x38
 8003d02:	001a      	movs	r2, r3
 8003d04:	2100      	movs	r1, #0
 8003d06:	f005 f848 	bl	8008d9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d0a:	003b      	movs	r3, r7
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	2310      	movs	r3, #16
 8003d10:	001a      	movs	r2, r3
 8003d12:	2100      	movs	r1, #0
 8003d14:	f005 f841 	bl	8008d9a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f002 fbf9 	bl	8006514 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d22:	193b      	adds	r3, r7, r4
 8003d24:	2202      	movs	r2, #2
 8003d26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d28:	193b      	adds	r3, r7, r4
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	0052      	lsls	r2, r2, #1
 8003d2e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003d30:	193b      	adds	r3, r7, r4
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d36:	193b      	adds	r3, r7, r4
 8003d38:	2240      	movs	r2, #64	; 0x40
 8003d3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003d3c:	193b      	adds	r3, r7, r4
 8003d3e:	2200      	movs	r2, #0
 8003d40:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d42:	193b      	adds	r3, r7, r4
 8003d44:	0018      	movs	r0, r3
 8003d46:	f002 fc31 	bl	80065ac <HAL_RCC_OscConfig>
 8003d4a:	1e03      	subs	r3, r0, #0
 8003d4c:	d001      	beq.n	8003d52 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003d4e:	f000 fabb 	bl	80042c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d52:	003b      	movs	r3, r7
 8003d54:	2207      	movs	r2, #7
 8003d56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003d58:	003b      	movs	r3, r7
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d5e:	003b      	movs	r3, r7
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d64:	003b      	movs	r3, r7
 8003d66:	2200      	movs	r2, #0
 8003d68:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003d6a:	003b      	movs	r3, r7
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f002 ff36 	bl	8006be0 <HAL_RCC_ClockConfig>
 8003d74:	1e03      	subs	r3, r0, #0
 8003d76:	d001      	beq.n	8003d7c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003d78:	f000 faa6 	bl	80042c8 <Error_Handler>
  }
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b013      	add	sp, #76	; 0x4c
 8003d82:	bd90      	pop	{r4, r7, pc}

08003d84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	230c      	movs	r3, #12
 8003d90:	001a      	movs	r2, r3
 8003d92:	2100      	movs	r1, #0
 8003d94:	f005 f801 	bl	8008d9a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003d98:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <MX_ADC1_Init+0x118>)
 8003d9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003d9e:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	05d2      	lsls	r2, r2, #23
 8003da4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8003da6:	4b3c      	ldr	r3, [pc, #240]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003da8:	2218      	movs	r2, #24
 8003daa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003dac:	4b3a      	ldr	r3, [pc, #232]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003db2:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	0392      	lsls	r2, r2, #14
 8003db8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003dba:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003dc0:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003dc6:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003dcc:	4b32      	ldr	r3, [pc, #200]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8003dd2:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003dd8:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003dda:	2220      	movs	r2, #32
 8003ddc:	2100      	movs	r1, #0
 8003dde:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8003de0:	4b2d      	ldr	r3, [pc, #180]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003de2:	2298      	movs	r2, #152	; 0x98
 8003de4:	00d2      	lsls	r2, r2, #3
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003de8:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003dea:	2280      	movs	r2, #128	; 0x80
 8003dec:	00d2      	lsls	r2, r2, #3
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003df0:	4b29      	ldr	r3, [pc, #164]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003df2:	222c      	movs	r2, #44	; 0x2c
 8003df4:	2101      	movs	r1, #1
 8003df6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003dfe:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003e0a:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003e0c:	223c      	movs	r2, #60	; 0x3c
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003e12:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f001 f82a 	bl	8004e74 <HAL_ADC_Init>
 8003e20:	1e03      	subs	r3, r0, #0
 8003e22:	d001      	beq.n	8003e28 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8003e24:	f000 fa50 	bl	80042c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e2e:	1d3b      	adds	r3, r7, #4
 8003e30:	2200      	movs	r2, #0
 8003e32:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	2200      	movs	r2, #0
 8003e38:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e3a:	1d3a      	adds	r2, r7, #4
 8003e3c:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f001 fa5d 	bl	8005300 <HAL_ADC_ConfigChannel>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d001      	beq.n	8003e4e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8003e4a:	f000 fa3d 	bl	80042c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <MX_ADC1_Init+0x11c>)
 8003e52:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	2204      	movs	r2, #4
 8003e58:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e5a:	1d3a      	adds	r2, r7, #4
 8003e5c:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003e5e:	0011      	movs	r1, r2
 8003e60:	0018      	movs	r0, r3
 8003e62:	f001 fa4d 	bl	8005300 <HAL_ADC_ConfigChannel>
 8003e66:	1e03      	subs	r3, r0, #0
 8003e68:	d001      	beq.n	8003e6e <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8003e6a:	f000 fa2d 	bl	80042c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <MX_ADC1_Init+0x120>)
 8003e72:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003e74:	1d3b      	adds	r3, r7, #4
 8003e76:	2208      	movs	r2, #8
 8003e78:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e7a:	1d3a      	adds	r2, r7, #4
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <MX_ADC1_Init+0x114>)
 8003e7e:	0011      	movs	r1, r2
 8003e80:	0018      	movs	r0, r3
 8003e82:	f001 fa3d 	bl	8005300 <HAL_ADC_ConfigChannel>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d001      	beq.n	8003e8e <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8003e8a:	f000 fa1d 	bl	80042c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b004      	add	sp, #16
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	200001fc 	.word	0x200001fc
 8003e9c:	40012400 	.word	0x40012400
 8003ea0:	08000004 	.word	0x08000004
 8003ea4:	0c000008 	.word	0x0c000008

08003ea8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003eae:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <MX_I2C2_Init+0x78>)
 8003eb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003eb4:	4a1b      	ldr	r2, [pc, #108]	; (8003f24 <MX_I2C2_Init+0x7c>)
 8003eb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003eb8:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ebe:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003eca:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f002 f9e7 	bl	80062b8 <HAL_I2C_Init>
 8003eea:	1e03      	subs	r3, r0, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003eee:	f000 f9eb 	bl	80042c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f002 fa74 	bl	80063e4 <HAL_I2CEx_ConfigAnalogFilter>
 8003efc:	1e03      	subs	r3, r0, #0
 8003efe:	d001      	beq.n	8003f04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003f00:	f000 f9e2 	bl	80042c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <MX_I2C2_Init+0x74>)
 8003f06:	2100      	movs	r1, #0
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f002 fab7 	bl	800647c <HAL_I2CEx_ConfigDigitalFilter>
 8003f0e:	1e03      	subs	r3, r0, #0
 8003f10:	d001      	beq.n	8003f16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003f12:	f000 f9d9 	bl	80042c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	200002bc 	.word	0x200002bc
 8003f20:	40005800 	.word	0x40005800
 8003f24:	00303d5b 	.word	0x00303d5b

08003f28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f2e:	2310      	movs	r3, #16
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	0018      	movs	r0, r3
 8003f34:	2310      	movs	r3, #16
 8003f36:	001a      	movs	r2, r3
 8003f38:	2100      	movs	r1, #0
 8003f3a:	f004 ff2e 	bl	8008d9a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	0018      	movs	r0, r3
 8003f42:	230c      	movs	r3, #12
 8003f44:	001a      	movs	r2, r3
 8003f46:	2100      	movs	r1, #0
 8003f48:	f004 ff27 	bl	8008d9a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f4c:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <MX_TIM3_Init+0xa0>)
 8003f4e:	4a1f      	ldr	r2, [pc, #124]	; (8003fcc <MX_TIM3_Init+0xa4>)
 8003f50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <MX_TIM3_Init+0xa0>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f58:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <MX_TIM3_Init+0xa0>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003f5e:	4b1a      	ldr	r3, [pc, #104]	; (8003fc8 <MX_TIM3_Init+0xa0>)
 8003f60:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <MX_TIM3_Init+0xa8>)
 8003f62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f64:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <MX_TIM3_Init+0xa0>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f6a:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <MX_TIM3_Init+0xa0>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f70:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <MX_TIM3_Init+0xa0>)
 8003f72:	0018      	movs	r0, r3
 8003f74:	f003 f958 	bl	8007228 <HAL_TIM_Base_Init>
 8003f78:	1e03      	subs	r3, r0, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003f7c:	f000 f9a4 	bl	80042c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f80:	2110      	movs	r1, #16
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	2280      	movs	r2, #128	; 0x80
 8003f86:	0152      	lsls	r2, r2, #5
 8003f88:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f8a:	187a      	adds	r2, r7, r1
 8003f8c:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <MX_TIM3_Init+0xa0>)
 8003f8e:	0011      	movs	r1, r2
 8003f90:	0018      	movs	r0, r3
 8003f92:	f003 fb27 	bl	80075e4 <HAL_TIM_ConfigClockSource>
 8003f96:	1e03      	subs	r3, r0, #0
 8003f98:	d001      	beq.n	8003f9e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003f9a:	f000 f995 	bl	80042c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa4:	1d3b      	adds	r3, r7, #4
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003faa:	1d3a      	adds	r2, r7, #4
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <MX_TIM3_Init+0xa0>)
 8003fae:	0011      	movs	r1, r2
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f003 fd1f 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003fb6:	1e03      	subs	r3, r0, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003fba:	f000 f985 	bl	80042c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b008      	add	sp, #32
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	20000310 	.word	0x20000310
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	0000ffff 	.word	0x0000ffff

08003fd4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <MX_TIM14_Init+0x40>)
 8003fda:	4a0f      	ldr	r2, [pc, #60]	; (8004018 <MX_TIM14_Init+0x44>)
 8003fdc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15;
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <MX_TIM14_Init+0x40>)
 8003fe0:	220f      	movs	r2, #15
 8003fe2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <MX_TIM14_Init+0x40>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = SLOW_PERIOD;
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <MX_TIM14_Init+0x40>)
 8003fec:	22fa      	movs	r2, #250	; 0xfa
 8003fee:	00d2      	lsls	r2, r2, #3
 8003ff0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <MX_TIM14_Init+0x40>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <MX_TIM14_Init+0x40>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <MX_TIM14_Init+0x40>)
 8004000:	0018      	movs	r0, r3
 8004002:	f003 f911 	bl	8007228 <HAL_TIM_Base_Init>
 8004006:	1e03      	subs	r3, r0, #0
 8004008:	d001      	beq.n	800400e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800400a:	f000 f95d 	bl	80042c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	2000035c 	.word	0x2000035c
 8004018:	40002000 	.word	0x40002000

0800401c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <MX_TIM16_Init+0x44>)
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <MX_TIM16_Init+0x48>)
 8004024:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15;
 8004026:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <MX_TIM16_Init+0x44>)
 8004028:	220f      	movs	r2, #15
 800402a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <MX_TIM16_Init+0x44>)
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = FAST_PERIOD;
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <MX_TIM16_Init+0x44>)
 8004034:	2232      	movs	r2, #50	; 0x32
 8004036:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <MX_TIM16_Init+0x44>)
 800403a:	2200      	movs	r2, #0
 800403c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <MX_TIM16_Init+0x44>)
 8004040:	2200      	movs	r2, #0
 8004042:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <MX_TIM16_Init+0x44>)
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <MX_TIM16_Init+0x44>)
 800404c:	0018      	movs	r0, r3
 800404e:	f003 f8eb 	bl	8007228 <HAL_TIM_Base_Init>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d001      	beq.n	800405a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004056:	f000 f937 	bl	80042c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	200003a8 	.word	0x200003a8
 8004064:	40014400 	.word	0x40014400

08004068 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800406c:	4b23      	ldr	r3, [pc, #140]	; (80040fc <MX_USART1_UART_Init+0x94>)
 800406e:	4a24      	ldr	r2, [pc, #144]	; (8004100 <MX_USART1_UART_Init+0x98>)
 8004070:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004072:	4b22      	ldr	r3, [pc, #136]	; (80040fc <MX_USART1_UART_Init+0x94>)
 8004074:	2296      	movs	r2, #150	; 0x96
 8004076:	0192      	lsls	r2, r2, #6
 8004078:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <MX_USART1_UART_Init+0x94>)
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004080:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <MX_USART1_UART_Init+0x94>)
 8004082:	2200      	movs	r2, #0
 8004084:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <MX_USART1_UART_Init+0x94>)
 8004088:	2200      	movs	r2, #0
 800408a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <MX_USART1_UART_Init+0x94>)
 800408e:	220c      	movs	r2, #12
 8004090:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <MX_USART1_UART_Init+0x94>)
 8004094:	2200      	movs	r2, #0
 8004096:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004098:	4b18      	ldr	r3, [pc, #96]	; (80040fc <MX_USART1_UART_Init+0x94>)
 800409a:	2200      	movs	r2, #0
 800409c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <MX_USART1_UART_Init+0x94>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80040a4:	4b15      	ldr	r3, [pc, #84]	; (80040fc <MX_USART1_UART_Init+0x94>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <MX_USART1_UART_Init+0x94>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <MX_USART1_UART_Init+0x94>)
 80040b2:	0018      	movs	r0, r3
 80040b4:	f003 fd1e 	bl	8007af4 <HAL_UART_Init>
 80040b8:	1e03      	subs	r3, r0, #0
 80040ba:	d001      	beq.n	80040c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80040bc:	f000 f904 	bl	80042c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <MX_USART1_UART_Init+0x94>)
 80040c2:	2100      	movs	r1, #0
 80040c4:	0018      	movs	r0, r3
 80040c6:	f004 fd45 	bl	8008b54 <HAL_UARTEx_SetTxFifoThreshold>
 80040ca:	1e03      	subs	r3, r0, #0
 80040cc:	d001      	beq.n	80040d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80040ce:	f000 f8fb 	bl	80042c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <MX_USART1_UART_Init+0x94>)
 80040d4:	2100      	movs	r1, #0
 80040d6:	0018      	movs	r0, r3
 80040d8:	f004 fd7c 	bl	8008bd4 <HAL_UARTEx_SetRxFifoThreshold>
 80040dc:	1e03      	subs	r3, r0, #0
 80040de:	d001      	beq.n	80040e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80040e0:	f000 f8f2 	bl	80042c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <MX_USART1_UART_Init+0x94>)
 80040e6:	0018      	movs	r0, r3
 80040e8:	f004 fcfa 	bl	8008ae0 <HAL_UARTEx_DisableFifoMode>
 80040ec:	1e03      	subs	r3, r0, #0
 80040ee:	d001      	beq.n	80040f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80040f0:	f000 f8ea 	bl	80042c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	200003f4 	.word	0x200003f4
 8004100:	40013800 	.word	0x40013800

08004104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <MX_DMA_Init+0x48>)
 800410c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410e:	4b0f      	ldr	r3, [pc, #60]	; (800414c <MX_DMA_Init+0x48>)
 8004110:	2101      	movs	r1, #1
 8004112:	430a      	orrs	r2, r1
 8004114:	639a      	str	r2, [r3, #56]	; 0x38
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <MX_DMA_Init+0x48>)
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	2201      	movs	r2, #1
 800411c:	4013      	ands	r3, r2
 800411e:	607b      	str	r3, [r7, #4]
 8004120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004122:	2200      	movs	r2, #0
 8004124:	2100      	movs	r1, #0
 8004126:	2009      	movs	r0, #9
 8004128:	f001 fc82 	bl	8005a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800412c:	2009      	movs	r0, #9
 800412e:	f001 fc94 	bl	8005a5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004132:	2200      	movs	r2, #0
 8004134:	2100      	movs	r1, #0
 8004136:	200a      	movs	r0, #10
 8004138:	f001 fc7a 	bl	8005a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800413c:	200a      	movs	r0, #10
 800413e:	f001 fc8c 	bl	8005a5a <HAL_NVIC_EnableIRQ>

}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	b002      	add	sp, #8
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	40021000 	.word	0x40021000

08004150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b08b      	sub	sp, #44	; 0x2c
 8004154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004156:	2414      	movs	r4, #20
 8004158:	193b      	adds	r3, r7, r4
 800415a:	0018      	movs	r0, r3
 800415c:	2314      	movs	r3, #20
 800415e:	001a      	movs	r2, r3
 8004160:	2100      	movs	r1, #0
 8004162:	f004 fe1a 	bl	8008d9a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004166:	4b54      	ldr	r3, [pc, #336]	; (80042b8 <MX_GPIO_Init+0x168>)
 8004168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416a:	4b53      	ldr	r3, [pc, #332]	; (80042b8 <MX_GPIO_Init+0x168>)
 800416c:	2102      	movs	r1, #2
 800416e:	430a      	orrs	r2, r1
 8004170:	635a      	str	r2, [r3, #52]	; 0x34
 8004172:	4b51      	ldr	r3, [pc, #324]	; (80042b8 <MX_GPIO_Init+0x168>)
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	2202      	movs	r2, #2
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800417e:	4b4e      	ldr	r3, [pc, #312]	; (80042b8 <MX_GPIO_Init+0x168>)
 8004180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004182:	4b4d      	ldr	r3, [pc, #308]	; (80042b8 <MX_GPIO_Init+0x168>)
 8004184:	2104      	movs	r1, #4
 8004186:	430a      	orrs	r2, r1
 8004188:	635a      	str	r2, [r3, #52]	; 0x34
 800418a:	4b4b      	ldr	r3, [pc, #300]	; (80042b8 <MX_GPIO_Init+0x168>)
 800418c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418e:	2204      	movs	r2, #4
 8004190:	4013      	ands	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004196:	4b48      	ldr	r3, [pc, #288]	; (80042b8 <MX_GPIO_Init+0x168>)
 8004198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <MX_GPIO_Init+0x168>)
 800419c:	2120      	movs	r1, #32
 800419e:	430a      	orrs	r2, r1
 80041a0:	635a      	str	r2, [r3, #52]	; 0x34
 80041a2:	4b45      	ldr	r3, [pc, #276]	; (80042b8 <MX_GPIO_Init+0x168>)
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	2220      	movs	r2, #32
 80041a8:	4013      	ands	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ae:	4b42      	ldr	r3, [pc, #264]	; (80042b8 <MX_GPIO_Init+0x168>)
 80041b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b2:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <MX_GPIO_Init+0x168>)
 80041b4:	2101      	movs	r1, #1
 80041b6:	430a      	orrs	r2, r1
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34
 80041ba:	4b3f      	ldr	r3, [pc, #252]	; (80042b8 <MX_GPIO_Init+0x168>)
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041be:	2201      	movs	r2, #1
 80041c0:	4013      	ands	r3, r2
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80041c6:	4b3d      	ldr	r3, [pc, #244]	; (80042bc <MX_GPIO_Init+0x16c>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	2104      	movs	r1, #4
 80041cc:	0018      	movs	r0, r3
 80041ce:	f002 f817 	bl	8006200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_PIN_0_Pin|DRV8825_STP_Pin|DRV8825_DIR_Pin, GPIO_PIN_RESET);
 80041d2:	23a0      	movs	r3, #160	; 0xa0
 80041d4:	05db      	lsls	r3, r3, #23
 80041d6:	2200      	movs	r2, #0
 80041d8:	21e0      	movs	r1, #224	; 0xe0
 80041da:	0018      	movs	r0, r3
 80041dc:	f002 f810 	bl	8006200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_PIN_1_GPIO_Port, DEBUG_PIN_1_Pin, GPIO_PIN_RESET);
 80041e0:	4b37      	ldr	r3, [pc, #220]	; (80042c0 <MX_GPIO_Init+0x170>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	2101      	movs	r1, #1
 80041e6:	0018      	movs	r0, r3
 80041e8:	f002 f80a 	bl	8006200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SWITCH_0_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_0_Pin;
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	2280      	movs	r2, #128	; 0x80
 80041f0:	01d2      	lsls	r2, r2, #7
 80041f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041f4:	193b      	adds	r3, r7, r4
 80041f6:	2288      	movs	r2, #136	; 0x88
 80041f8:	0352      	lsls	r2, r2, #13
 80041fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fc:	193b      	adds	r3, r7, r4
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LIMIT_SWITCH_0_GPIO_Port, &GPIO_InitStruct);
 8004202:	193b      	adds	r3, r7, r4
 8004204:	4a2f      	ldr	r2, [pc, #188]	; (80042c4 <MX_GPIO_Init+0x174>)
 8004206:	0019      	movs	r1, r3
 8004208:	0010      	movs	r0, r2
 800420a:	f001 fe95 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 800420e:	193b      	adds	r3, r7, r4
 8004210:	2204      	movs	r2, #4
 8004212:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004214:	193b      	adds	r3, r7, r4
 8004216:	2201      	movs	r2, #1
 8004218:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	193b      	adds	r3, r7, r4
 800421c:	2200      	movs	r2, #0
 800421e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004220:	193b      	adds	r3, r7, r4
 8004222:	2200      	movs	r2, #0
 8004224:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8004226:	193b      	adds	r3, r7, r4
 8004228:	4a24      	ldr	r2, [pc, #144]	; (80042bc <MX_GPIO_Init+0x16c>)
 800422a:	0019      	movs	r1, r3
 800422c:	0010      	movs	r0, r2
 800422e:	f001 fe83 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin PA4 */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|GPIO_PIN_4;
 8004232:	193b      	adds	r3, r7, r4
 8004234:	2212      	movs	r2, #18
 8004236:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004238:	193b      	adds	r3, r7, r4
 800423a:	2288      	movs	r2, #136	; 0x88
 800423c:	0352      	lsls	r2, r2, #13
 800423e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	193b      	adds	r3, r7, r4
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004246:	193a      	adds	r2, r7, r4
 8004248:	23a0      	movs	r3, #160	; 0xa0
 800424a:	05db      	lsls	r3, r3, #23
 800424c:	0011      	movs	r1, r2
 800424e:	0018      	movs	r0, r3
 8004250:	f001 fe72 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_PIN_0_Pin DRV8825_STP_Pin DRV8825_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_PIN_0_Pin|DRV8825_STP_Pin|DRV8825_DIR_Pin;
 8004254:	193b      	adds	r3, r7, r4
 8004256:	22e0      	movs	r2, #224	; 0xe0
 8004258:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800425a:	193b      	adds	r3, r7, r4
 800425c:	2201      	movs	r2, #1
 800425e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004260:	193b      	adds	r3, r7, r4
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004266:	193b      	adds	r3, r7, r4
 8004268:	2200      	movs	r2, #0
 800426a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800426c:	193a      	adds	r2, r7, r4
 800426e:	23a0      	movs	r3, #160	; 0xa0
 8004270:	05db      	lsls	r3, r3, #23
 8004272:	0011      	movs	r1, r2
 8004274:	0018      	movs	r0, r3
 8004276:	f001 fe5f 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_PIN_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_PIN_1_Pin;
 800427a:	0021      	movs	r1, r4
 800427c:	187b      	adds	r3, r7, r1
 800427e:	2201      	movs	r2, #1
 8004280:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004282:	187b      	adds	r3, r7, r1
 8004284:	2201      	movs	r2, #1
 8004286:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004288:	187b      	adds	r3, r7, r1
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428e:	187b      	adds	r3, r7, r1
 8004290:	2200      	movs	r2, #0
 8004292:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_PIN_1_GPIO_Port, &GPIO_InitStruct);
 8004294:	187b      	adds	r3, r7, r1
 8004296:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <MX_GPIO_Init+0x170>)
 8004298:	0019      	movs	r1, r3
 800429a:	0010      	movs	r0, r2
 800429c:	f001 fe4c 	bl	8005f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80042a0:	2200      	movs	r2, #0
 80042a2:	2100      	movs	r1, #0
 80042a4:	2007      	movs	r0, #7
 80042a6:	f001 fbc3 	bl	8005a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80042aa:	2007      	movs	r0, #7
 80042ac:	f001 fbd5 	bl	8005a5a <HAL_NVIC_EnableIRQ>

}
 80042b0:	46c0      	nop			; (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b00b      	add	sp, #44	; 0x2c
 80042b6:	bd90      	pop	{r4, r7, pc}
 80042b8:	40021000 	.word	0x40021000
 80042bc:	50001400 	.word	0x50001400
 80042c0:	50000400 	.word	0x50000400
 80042c4:	50000800 	.word	0x50000800

080042c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042cc:	b672      	cpsid	i
}
 80042ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042d0:	e7fe      	b.n	80042d0 <Error_Handler+0x8>

080042d2 <new_motor>:
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Motor object
Motor *new_motor(
	PinData *_dir_pin,
	PinData *_stp_pin
) {
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
    Motor *motor = (Motor*) malloc(sizeof(Motor));
 80042dc:	2008      	movs	r0, #8
 80042de:	f004 fd49 	bl	8008d74 <malloc>
 80042e2:	0003      	movs	r3, r0
 80042e4:	60fb      	str	r3, [r7, #12]
    motor->dir_pin = _dir_pin;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	601a      	str	r2, [r3, #0]
    motor->stp_pin = _stp_pin;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	605a      	str	r2, [r3, #4]
	return motor;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b004      	add	sp, #16
 80042fa:	bd80      	pop	{r7, pc}

080042fc <step_motor_direction>:

// REQUIRES: motor is a Motor object
// and direction is a bool that dictates direction
// MODIFIES: nothing
// EFFECTS: Moves the motor a certain by a certain amount of steps
void step_motor_direction(Motor *motor, bool dir) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	000a      	movs	r2, r1
 8004306:	1cfb      	adds	r3, r7, #3
 8004308:	701a      	strb	r2, [r3, #0]
	set_pin_value(motor->dir_pin, dir);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	1cfb      	adds	r3, r7, #3
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	0019      	movs	r1, r3
 8004314:	0010      	movs	r0, r2
 8004316:	f000 f83a 	bl	800438e <set_pin_value>
	set_pin_value(motor->stp_pin, GPIO_PIN_SET);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2101      	movs	r1, #1
 8004320:	0018      	movs	r0, r3
 8004322:	f000 f834 	bl	800438e <set_pin_value>
	for (int i = 0; i < 10; ++i);
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e002      	b.n	8004332 <step_motor_direction+0x36>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b09      	cmp	r3, #9
 8004336:	ddf9      	ble.n	800432c <step_motor_direction+0x30>
	set_pin_value(motor->stp_pin, GPIO_PIN_RESET);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2100      	movs	r1, #0
 800433e:	0018      	movs	r0, r3
 8004340:	f000 f825 	bl	800438e <set_pin_value>
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b004      	add	sp, #16
 800434a:	bd80      	pop	{r7, pc}

0800434c <new_pin_data>:
// REQUIRES: _port and _pin corresponds to
// the port and pin and _is_output is boolean
// that is true if the pin is an output pin.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created PinData object
PinData *new_pin_data(GPIO_TypeDef *_port, uint16_t _pin, bool _is_output) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	0008      	movs	r0, r1
 8004356:	0011      	movs	r1, r2
 8004358:	1cbb      	adds	r3, r7, #2
 800435a:	1c02      	adds	r2, r0, #0
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	1c7b      	adds	r3, r7, #1
 8004360:	1c0a      	adds	r2, r1, #0
 8004362:	701a      	strb	r2, [r3, #0]
    PinData *pin_data = (PinData*) malloc(sizeof(PinData));
 8004364:	2008      	movs	r0, #8
 8004366:	f004 fd05 	bl	8008d74 <malloc>
 800436a:	0003      	movs	r3, r0
 800436c:	60fb      	str	r3, [r7, #12]
	pin_data->port = _port;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	601a      	str	r2, [r3, #0]
    pin_data->pin = _pin;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1cba      	adds	r2, r7, #2
 8004378:	8812      	ldrh	r2, [r2, #0]
 800437a:	809a      	strh	r2, [r3, #4]
    pin_data->is_output = _is_output;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1c7a      	adds	r2, r7, #1
 8004380:	7812      	ldrb	r2, [r2, #0]
 8004382:	719a      	strb	r2, [r3, #6]
	return pin_data;
 8004384:	68fb      	ldr	r3, [r7, #12]
}
 8004386:	0018      	movs	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	b004      	add	sp, #16
 800438c:	bd80      	pop	{r7, pc}

0800438e <set_pin_value>:

// REQUIRES: pin_data is PinData and value is 0 or 1
// MODIFIES: nothing
// EFFECTS: Sets pin to value
void set_pin_value(PinData *pin_data, uint8_t value) {
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	000a      	movs	r2, r1
 8004398:	1cfb      	adds	r3, r7, #3
 800439a:	701a      	strb	r2, [r3, #0]
	if (!pin_data->is_output) {
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	799b      	ldrb	r3, [r3, #6]
 80043a0:	2201      	movs	r2, #1
 80043a2:	4053      	eors	r3, r2
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10c      	bne.n	80043c4 <set_pin_value+0x36>
		return;
	}
	HAL_GPIO_WritePin(pin_data->port, pin_data->pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8899      	ldrh	r1, [r3, #4]
 80043b2:	1cfb      	adds	r3, r7, #3
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	1e5a      	subs	r2, r3, #1
 80043b8:	4193      	sbcs	r3, r2
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	001a      	movs	r2, r3
 80043be:	f001 ff1f 	bl	8006200 <HAL_GPIO_WritePin>
 80043c2:	e000      	b.n	80043c6 <set_pin_value+0x38>
		return;
 80043c4:	46c0      	nop			; (mov r8, r8)
}
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b002      	add	sp, #8
 80043ca:	bd80      	pop	{r7, pc}

080043cc <new_potentiometer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Potentiometer object
Potentiometer *new_potentiometer(ADCSensor *_adc_sensor, uint8_t _rank) {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	000a      	movs	r2, r1
 80043d6:	1cfb      	adds	r3, r7, #3
 80043d8:	701a      	strb	r2, [r3, #0]
    Potentiometer *potentiometer = (Potentiometer*) malloc(sizeof(Potentiometer));
 80043da:	2008      	movs	r0, #8
 80043dc:	f004 fcca 	bl	8008d74 <malloc>
 80043e0:	0003      	movs	r3, r0
 80043e2:	60fb      	str	r3, [r7, #12]
    potentiometer->adc_sensor = _adc_sensor;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
    potentiometer->rank = _rank;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1cfa      	adds	r2, r7, #3
 80043ee:	7812      	ldrb	r2, [r2, #0]
 80043f0:	711a      	strb	r2, [r3, #4]
    return potentiometer;
 80043f2:	68fb      	ldr	r3, [r7, #12]
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b004      	add	sp, #16
 80043fa:	bd80      	pop	{r7, pc}

080043fc <new_skater>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _force_sensor is a ForceSensor object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Skater object
Skater *new_skater(ForceSensor *_force_sensor) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	Skater *skater = (Skater*) malloc(sizeof(Skater));
 8004404:	2008      	movs	r0, #8
 8004406:	f004 fcb5 	bl	8008d74 <malloc>
 800440a:	0003      	movs	r3, r0
 800440c:	60fb      	str	r3, [r7, #12]
	skater->force_sensor = _force_sensor;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
	skater->ms_since_skater_detected = 0;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	605a      	str	r2, [r3, #4]
	return skater;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b004      	add	sp, #16
 8004422:	bd80      	pop	{r7, pc}

08004424 <is_skater_gone>:

// REQUIRES: skater is a Skater object
// MODIFIES: nothing
// EFFECTS: Returns whether skater is gone or not
bool is_skater_gone(Skater *skater) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	return skater->ms_since_skater_detected >= TIME_INDICATING_SKATER_ABSENCE_MS;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	23fa      	movs	r3, #250	; 0xfa
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	2300      	movs	r3, #0
 8004436:	4291      	cmp	r1, r2
 8004438:	415b      	adcs	r3, r3
 800443a:	b2db      	uxtb	r3, r3
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_MspInit+0x44>)
 800444c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <HAL_MspInit+0x44>)
 8004450:	2101      	movs	r1, #1
 8004452:	430a      	orrs	r2, r1
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <HAL_MspInit+0x44>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	2201      	movs	r2, #1
 800445c:	4013      	ands	r3, r2
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_MspInit+0x44>)
 8004464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <HAL_MspInit+0x44>)
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	0549      	lsls	r1, r1, #21
 800446c:	430a      	orrs	r2, r1
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_MspInit+0x44>)
 8004472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	055b      	lsls	r3, r3, #21
 8004478:	4013      	ands	r3, r2
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	46bd      	mov	sp, r7
 8004482:	b002      	add	sp, #8
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	40021000 	.word	0x40021000

0800448c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800448c:	b590      	push	{r4, r7, lr}
 800448e:	b095      	sub	sp, #84	; 0x54
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004494:	233c      	movs	r3, #60	; 0x3c
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	0018      	movs	r0, r3
 800449a:	2314      	movs	r3, #20
 800449c:	001a      	movs	r2, r3
 800449e:	2100      	movs	r1, #0
 80044a0:	f004 fc7b 	bl	8008d9a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044a4:	2414      	movs	r4, #20
 80044a6:	193b      	adds	r3, r7, r4
 80044a8:	0018      	movs	r0, r3
 80044aa:	2328      	movs	r3, #40	; 0x28
 80044ac:	001a      	movs	r2, r3
 80044ae:	2100      	movs	r1, #0
 80044b0:	f004 fc73 	bl	8008d9a <memset>
  if(hadc->Instance==ADC1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a35      	ldr	r2, [pc, #212]	; (8004590 <HAL_ADC_MspInit+0x104>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d164      	bne.n	8004588 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80044be:	193b      	adds	r3, r7, r4
 80044c0:	2280      	movs	r2, #128	; 0x80
 80044c2:	01d2      	lsls	r2, r2, #7
 80044c4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80044c6:	193b      	adds	r3, r7, r4
 80044c8:	2200      	movs	r2, #0
 80044ca:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044cc:	193b      	adds	r3, r7, r4
 80044ce:	0018      	movs	r0, r3
 80044d0:	f002 fd30 	bl	8006f34 <HAL_RCCEx_PeriphCLKConfig>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d001      	beq.n	80044dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80044d8:	f7ff fef6 	bl	80042c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80044dc:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <HAL_ADC_MspInit+0x108>)
 80044de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e0:	4b2c      	ldr	r3, [pc, #176]	; (8004594 <HAL_ADC_MspInit+0x108>)
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	0349      	lsls	r1, r1, #13
 80044e6:	430a      	orrs	r2, r1
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
 80044ea:	4b2a      	ldr	r3, [pc, #168]	; (8004594 <HAL_ADC_MspInit+0x108>)
 80044ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	035b      	lsls	r3, r3, #13
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f8:	4b26      	ldr	r3, [pc, #152]	; (8004594 <HAL_ADC_MspInit+0x108>)
 80044fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044fc:	4b25      	ldr	r3, [pc, #148]	; (8004594 <HAL_ADC_MspInit+0x108>)
 80044fe:	2101      	movs	r1, #1
 8004500:	430a      	orrs	r2, r1
 8004502:	635a      	str	r2, [r3, #52]	; 0x34
 8004504:	4b23      	ldr	r3, [pc, #140]	; (8004594 <HAL_ADC_MspInit+0x108>)
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	2201      	movs	r2, #1
 800450a:	4013      	ands	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = FORCE_SENSOR_Pin|POTENTIOMETER_Pin|BATTERYDATA_Pin;
 8004510:	213c      	movs	r1, #60	; 0x3c
 8004512:	187b      	adds	r3, r7, r1
 8004514:	220d      	movs	r2, #13
 8004516:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004518:	187b      	adds	r3, r7, r1
 800451a:	2203      	movs	r2, #3
 800451c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451e:	187b      	adds	r3, r7, r1
 8004520:	2200      	movs	r2, #0
 8004522:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004524:	187a      	adds	r2, r7, r1
 8004526:	23a0      	movs	r3, #160	; 0xa0
 8004528:	05db      	lsls	r3, r3, #23
 800452a:	0011      	movs	r1, r2
 800452c:	0018      	movs	r0, r3
 800452e:	f001 fd03 	bl	8005f38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004532:	4b19      	ldr	r3, [pc, #100]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <HAL_ADC_MspInit+0x110>)
 8004536:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004538:	4b17      	ldr	r3, [pc, #92]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 800453a:	2205      	movs	r2, #5
 800453c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 8004540:	2200      	movs	r2, #0
 8004542:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 8004546:	2200      	movs	r2, #0
 8004548:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800454a:	4b13      	ldr	r3, [pc, #76]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 800454c:	2280      	movs	r2, #128	; 0x80
 800454e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 8004552:	2280      	movs	r2, #128	; 0x80
 8004554:	0052      	lsls	r2, r2, #1
 8004556:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 800455a:	2280      	movs	r2, #128	; 0x80
 800455c:	00d2      	lsls	r2, r2, #3
 800455e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004560:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 8004562:	2220      	movs	r2, #32
 8004564:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 8004568:	2200      	movs	r2, #0
 800456a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 800456e:	0018      	movs	r0, r3
 8004570:	f001 fa90 	bl	8005a94 <HAL_DMA_Init>
 8004574:	1e03      	subs	r3, r0, #0
 8004576:	d001      	beq.n	800457c <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8004578:	f7ff fea6 	bl	80042c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a06      	ldr	r2, [pc, #24]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 8004580:	651a      	str	r2, [r3, #80]	; 0x50
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_ADC_MspInit+0x10c>)
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	b015      	add	sp, #84	; 0x54
 800458e:	bd90      	pop	{r4, r7, pc}
 8004590:	40012400 	.word	0x40012400
 8004594:	40021000 	.word	0x40021000
 8004598:	20000260 	.word	0x20000260
 800459c:	40020008 	.word	0x40020008

080045a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b08b      	sub	sp, #44	; 0x2c
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	2414      	movs	r4, #20
 80045aa:	193b      	adds	r3, r7, r4
 80045ac:	0018      	movs	r0, r3
 80045ae:	2314      	movs	r3, #20
 80045b0:	001a      	movs	r2, r3
 80045b2:	2100      	movs	r1, #0
 80045b4:	f004 fbf1 	bl	8008d9a <memset>
  if(hi2c->Instance==I2C2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <HAL_I2C_MspInit+0x90>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d131      	bne.n	8004626 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c2:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <HAL_I2C_MspInit+0x94>)
 80045c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_I2C_MspInit+0x94>)
 80045c8:	2101      	movs	r1, #1
 80045ca:	430a      	orrs	r2, r1
 80045cc:	635a      	str	r2, [r3, #52]	; 0x34
 80045ce:	4b19      	ldr	r3, [pc, #100]	; (8004634 <HAL_I2C_MspInit+0x94>)
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	2201      	movs	r2, #1
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80045da:	193b      	adds	r3, r7, r4
 80045dc:	22c0      	movs	r2, #192	; 0xc0
 80045de:	0152      	lsls	r2, r2, #5
 80045e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045e2:	0021      	movs	r1, r4
 80045e4:	187b      	adds	r3, r7, r1
 80045e6:	2212      	movs	r2, #18
 80045e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f0:	187b      	adds	r3, r7, r1
 80045f2:	2200      	movs	r2, #0
 80045f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80045f6:	187b      	adds	r3, r7, r1
 80045f8:	2206      	movs	r2, #6
 80045fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fc:	187a      	adds	r2, r7, r1
 80045fe:	23a0      	movs	r3, #160	; 0xa0
 8004600:	05db      	lsls	r3, r3, #23
 8004602:	0011      	movs	r1, r2
 8004604:	0018      	movs	r0, r3
 8004606:	f001 fc97 	bl	8005f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800460a:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <HAL_I2C_MspInit+0x94>)
 800460c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460e:	4b09      	ldr	r3, [pc, #36]	; (8004634 <HAL_I2C_MspInit+0x94>)
 8004610:	2180      	movs	r1, #128	; 0x80
 8004612:	03c9      	lsls	r1, r1, #15
 8004614:	430a      	orrs	r2, r1
 8004616:	63da      	str	r2, [r3, #60]	; 0x3c
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <HAL_I2C_MspInit+0x94>)
 800461a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	03db      	lsls	r3, r3, #15
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b00b      	add	sp, #44	; 0x2c
 800462c:	bd90      	pop	{r4, r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	40005800 	.word	0x40005800
 8004634:	40021000 	.word	0x40021000

08004638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a25      	ldr	r2, [pc, #148]	; (80046dc <HAL_TIM_Base_MspInit+0xa4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d10c      	bne.n	8004664 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800464a:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <HAL_TIM_Base_MspInit+0xa8>)
 800464c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800464e:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <HAL_TIM_Base_MspInit+0xa8>)
 8004650:	2102      	movs	r1, #2
 8004652:	430a      	orrs	r2, r1
 8004654:	63da      	str	r2, [r3, #60]	; 0x3c
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <HAL_TIM_Base_MspInit+0xa8>)
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	2202      	movs	r2, #2
 800465c:	4013      	ands	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004662:	e036      	b.n	80046d2 <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM14)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1e      	ldr	r2, [pc, #120]	; (80046e4 <HAL_TIM_Base_MspInit+0xac>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d116      	bne.n	800469c <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800466e:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <HAL_TIM_Base_MspInit+0xa8>)
 8004670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_TIM_Base_MspInit+0xa8>)
 8004674:	2180      	movs	r1, #128	; 0x80
 8004676:	0209      	lsls	r1, r1, #8
 8004678:	430a      	orrs	r2, r1
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
 800467c:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <HAL_TIM_Base_MspInit+0xa8>)
 800467e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800468a:	2200      	movs	r2, #0
 800468c:	2100      	movs	r1, #0
 800468e:	2013      	movs	r0, #19
 8004690:	f001 f9ce 	bl	8005a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004694:	2013      	movs	r0, #19
 8004696:	f001 f9e0 	bl	8005a5a <HAL_NVIC_EnableIRQ>
}
 800469a:	e01a      	b.n	80046d2 <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM16)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <HAL_TIM_Base_MspInit+0xb0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d115      	bne.n	80046d2 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <HAL_TIM_Base_MspInit+0xa8>)
 80046a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <HAL_TIM_Base_MspInit+0xa8>)
 80046ac:	2180      	movs	r1, #128	; 0x80
 80046ae:	0289      	lsls	r1, r1, #10
 80046b0:	430a      	orrs	r2, r1
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_TIM_Base_MspInit+0xa8>)
 80046b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	029b      	lsls	r3, r3, #10
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80046c2:	2200      	movs	r2, #0
 80046c4:	2100      	movs	r1, #0
 80046c6:	2015      	movs	r0, #21
 80046c8:	f001 f9b2 	bl	8005a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80046cc:	2015      	movs	r0, #21
 80046ce:	f001 f9c4 	bl	8005a5a <HAL_NVIC_EnableIRQ>
}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b006      	add	sp, #24
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40002000 	.word	0x40002000
 80046e8:	40014400 	.word	0x40014400

080046ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b095      	sub	sp, #84	; 0x54
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f4:	233c      	movs	r3, #60	; 0x3c
 80046f6:	18fb      	adds	r3, r7, r3
 80046f8:	0018      	movs	r0, r3
 80046fa:	2314      	movs	r3, #20
 80046fc:	001a      	movs	r2, r3
 80046fe:	2100      	movs	r1, #0
 8004700:	f004 fb4b 	bl	8008d9a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004704:	2414      	movs	r4, #20
 8004706:	193b      	adds	r3, r7, r4
 8004708:	0018      	movs	r0, r3
 800470a:	2328      	movs	r3, #40	; 0x28
 800470c:	001a      	movs	r2, r3
 800470e:	2100      	movs	r1, #0
 8004710:	f004 fb43 	bl	8008d9a <memset>
  if(huart->Instance==USART1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a37      	ldr	r2, [pc, #220]	; (80047f8 <HAL_UART_MspInit+0x10c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d167      	bne.n	80047ee <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800471e:	193b      	adds	r3, r7, r4
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004724:	193b      	adds	r3, r7, r4
 8004726:	2200      	movs	r2, #0
 8004728:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800472a:	193b      	adds	r3, r7, r4
 800472c:	0018      	movs	r0, r3
 800472e:	f002 fc01 	bl	8006f34 <HAL_RCCEx_PeriphCLKConfig>
 8004732:	1e03      	subs	r3, r0, #0
 8004734:	d001      	beq.n	800473a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004736:	f7ff fdc7 	bl	80042c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800473a:	4b30      	ldr	r3, [pc, #192]	; (80047fc <HAL_UART_MspInit+0x110>)
 800473c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473e:	4b2f      	ldr	r3, [pc, #188]	; (80047fc <HAL_UART_MspInit+0x110>)
 8004740:	2180      	movs	r1, #128	; 0x80
 8004742:	01c9      	lsls	r1, r1, #7
 8004744:	430a      	orrs	r2, r1
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
 8004748:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <HAL_UART_MspInit+0x110>)
 800474a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	01db      	lsls	r3, r3, #7
 8004750:	4013      	ands	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004756:	4b29      	ldr	r3, [pc, #164]	; (80047fc <HAL_UART_MspInit+0x110>)
 8004758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475a:	4b28      	ldr	r3, [pc, #160]	; (80047fc <HAL_UART_MspInit+0x110>)
 800475c:	2102      	movs	r1, #2
 800475e:	430a      	orrs	r2, r1
 8004760:	635a      	str	r2, [r3, #52]	; 0x34
 8004762:	4b26      	ldr	r3, [pc, #152]	; (80047fc <HAL_UART_MspInit+0x110>)
 8004764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004766:	2202      	movs	r2, #2
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUETOOTH_UART_RX_Pin|BLUETOOTH_UART_TX_Pin;
 800476e:	213c      	movs	r1, #60	; 0x3c
 8004770:	187b      	adds	r3, r7, r1
 8004772:	22c0      	movs	r2, #192	; 0xc0
 8004774:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004776:	187b      	adds	r3, r7, r1
 8004778:	2202      	movs	r2, #2
 800477a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	187b      	adds	r3, r7, r1
 800477e:	2200      	movs	r2, #0
 8004780:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004782:	187b      	adds	r3, r7, r1
 8004784:	2200      	movs	r2, #0
 8004786:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004788:	187b      	adds	r3, r7, r1
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800478e:	187b      	adds	r3, r7, r1
 8004790:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <HAL_UART_MspInit+0x114>)
 8004792:	0019      	movs	r1, r3
 8004794:	0010      	movs	r0, r2
 8004796:	f001 fbcf 	bl	8005f38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800479a:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <HAL_UART_MspInit+0x118>)
 800479c:	4a1a      	ldr	r2, [pc, #104]	; (8004808 <HAL_UART_MspInit+0x11c>)
 800479e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80047a0:	4b18      	ldr	r3, [pc, #96]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047a2:	2232      	movs	r2, #50	; 0x32
 80047a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047a6:	4b17      	ldr	r3, [pc, #92]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ac:	4b15      	ldr	r3, [pc, #84]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047b2:	4b14      	ldr	r3, [pc, #80]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047b4:	2280      	movs	r2, #128	; 0x80
 80047b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047c6:	2220      	movs	r2, #32
 80047c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047ca:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047d2:	0018      	movs	r0, r3
 80047d4:	f001 f95e 	bl	8005a94 <HAL_DMA_Init>
 80047d8:	1e03      	subs	r3, r0, #0
 80047da:	d001      	beq.n	80047e0 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80047dc:	f7ff fd74 	bl	80042c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	4a07      	ldr	r2, [pc, #28]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047e6:	505a      	str	r2, [r3, r1]
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_UART_MspInit+0x118>)
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b015      	add	sp, #84	; 0x54
 80047f4:	bd90      	pop	{r4, r7, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	40013800 	.word	0x40013800
 80047fc:	40021000 	.word	0x40021000
 8004800:	50000400 	.word	0x50000400
 8004804:	20000488 	.word	0x20000488
 8004808:	4002001c 	.word	0x4002001c

0800480c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004810:	e7fe      	b.n	8004810 <NMI_Handler+0x4>

08004812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004816:	e7fe      	b.n	8004816 <HardFault_Handler+0x4>

08004818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800481c:	46c0      	nop			; (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004830:	f000 f998 	bl	8004b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004834:	46c0      	nop			; (mov r8, r8)
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800483e:	2010      	movs	r0, #16
 8004840:	f001 fcfc 	bl	800623c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_0_Pin);
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	01db      	lsls	r3, r3, #7
 8004848:	0018      	movs	r0, r3
 800484a:	f001 fcf7 	bl	800623c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <DMA1_Channel1_IRQHandler+0x14>)
 800485a:	0018      	movs	r0, r3
 800485c:	f001 fa2a 	bl	8005cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004860:	46c0      	nop			; (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	20000260 	.word	0x20000260

0800486c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004870:	4b03      	ldr	r3, [pc, #12]	; (8004880 <DMA1_Channel2_3_IRQHandler+0x14>)
 8004872:	0018      	movs	r0, r3
 8004874:	f001 fa1e 	bl	8005cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	20000488 	.word	0x20000488

08004884 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <TIM14_IRQHandler+0x14>)
 800488a:	0018      	movs	r0, r3
 800488c:	f002 fd78 	bl	8007380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	2000035c 	.word	0x2000035c

0800489c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <TIM16_IRQHandler+0x14>)
 80048a2:	0018      	movs	r0, r3
 80048a4:	f002 fd6c 	bl	8007380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	200003a8 	.word	0x200003a8

080048b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
	return 1;
 80048b8:	2301      	movs	r3, #1
}
 80048ba:	0018      	movs	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <_kill>:

int _kill(int pid, int sig)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80048ca:	f004 fa29 	bl	8008d20 <__errno>
 80048ce:	0003      	movs	r3, r0
 80048d0:	2216      	movs	r2, #22
 80048d2:	601a      	str	r2, [r3, #0]
	return -1;
 80048d4:	2301      	movs	r3, #1
 80048d6:	425b      	negs	r3, r3
}
 80048d8:	0018      	movs	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	b002      	add	sp, #8
 80048de:	bd80      	pop	{r7, pc}

080048e0 <_exit>:

void _exit (int status)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80048e8:	2301      	movs	r3, #1
 80048ea:	425a      	negs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	0011      	movs	r1, r2
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7ff ffe5 	bl	80048c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80048f6:	e7fe      	b.n	80048f6 <_exit+0x16>

080048f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e00a      	b.n	8004920 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800490a:	e000      	b.n	800490e <_read+0x16>
 800490c:	bf00      	nop
 800490e:	0001      	movs	r1, r0
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	60ba      	str	r2, [r7, #8]
 8004916:	b2ca      	uxtb	r2, r1
 8004918:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	3301      	adds	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	dbf0      	blt.n	800490a <_read+0x12>
	}

return len;
 8004928:	687b      	ldr	r3, [r7, #4]
}
 800492a:	0018      	movs	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	b006      	add	sp, #24
 8004930:	bd80      	pop	{r7, pc}

08004932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b086      	sub	sp, #24
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e009      	b.n	8004958 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	60ba      	str	r2, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	0018      	movs	r0, r3
 800494e:	e000      	b.n	8004952 <_write+0x20>
 8004950:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	3301      	adds	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	dbf1      	blt.n	8004944 <_write+0x12>
	}
	return len;
 8004960:	687b      	ldr	r3, [r7, #4]
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	b006      	add	sp, #24
 8004968:	bd80      	pop	{r7, pc}

0800496a <_close>:

int _close(int file)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
	return -1;
 8004972:	2301      	movs	r3, #1
 8004974:	425b      	negs	r3, r3
}
 8004976:	0018      	movs	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	b002      	add	sp, #8
 800497c:	bd80      	pop	{r7, pc}

0800497e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2280      	movs	r2, #128	; 0x80
 800498c:	0192      	lsls	r2, r2, #6
 800498e:	605a      	str	r2, [r3, #4]
	return 0;
 8004990:	2300      	movs	r3, #0
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b002      	add	sp, #8
 8004998:	bd80      	pop	{r7, pc}

0800499a <_isatty>:

int _isatty(int file)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
	return 1;
 80049a2:	2301      	movs	r3, #1
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b002      	add	sp, #8
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
	return 0;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	0018      	movs	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	b004      	add	sp, #16
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <_sbrk+0x5c>)
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <_sbrk+0x60>)
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <_sbrk+0x64>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049e0:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <_sbrk+0x64>)
 80049e2:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <_sbrk+0x68>)
 80049e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <_sbrk+0x64>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	18d3      	adds	r3, r2, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d207      	bcs.n	8004a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049f4:	f004 f994 	bl	8008d20 <__errno>
 80049f8:	0003      	movs	r3, r0
 80049fa:	220c      	movs	r2, #12
 80049fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	425b      	negs	r3, r3
 8004a02:	e009      	b.n	8004a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <_sbrk+0x64>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a0a:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <_sbrk+0x64>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	18d2      	adds	r2, r2, r3
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <_sbrk+0x64>)
 8004a14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004a16:	68fb      	ldr	r3, [r7, #12]
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b006      	add	sp, #24
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20002000 	.word	0x20002000
 8004a24:	00000400 	.word	0x00000400
 8004a28:	2000052c 	.word	0x2000052c
 8004a2c:	20000548 	.word	0x20000548

08004a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a3c:	480d      	ldr	r0, [pc, #52]	; (8004a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a40:	f7ff fff6 	bl	8004a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a44:	480c      	ldr	r0, [pc, #48]	; (8004a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a46:	490d      	ldr	r1, [pc, #52]	; (8004a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a48:	4a0d      	ldr	r2, [pc, #52]	; (8004a80 <LoopForever+0xe>)
  movs r3, #0
 8004a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a4c:	e002      	b.n	8004a54 <LoopCopyDataInit>

08004a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a52:	3304      	adds	r3, #4

08004a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a58:	d3f9      	bcc.n	8004a4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a5c:	4c0a      	ldr	r4, [pc, #40]	; (8004a88 <LoopForever+0x16>)
  movs r3, #0
 8004a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a60:	e001      	b.n	8004a66 <LoopFillZerobss>

08004a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a64:	3204      	adds	r2, #4

08004a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a68:	d3fb      	bcc.n	8004a62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004a6a:	f004 f95f 	bl	8008d2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004a6e:	f7fe ffed 	bl	8003a4c <main>

08004a72 <LoopForever>:

LoopForever:
  b LoopForever
 8004a72:	e7fe      	b.n	8004a72 <LoopForever>
  ldr   r0, =_estack
 8004a74:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a7c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004a80:	0800de9c 	.word	0x0800de9c
  ldr r2, =_sbss
 8004a84:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004a88:	20000544 	.word	0x20000544

08004a8c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a8c:	e7fe      	b.n	8004a8c <ADC1_IRQHandler>
	...

08004a90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a96:	1dfb      	adds	r3, r7, #7
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_Init+0x3c>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <HAL_Init+0x3c>)
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	0049      	lsls	r1, r1, #1
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004aaa:	2003      	movs	r0, #3
 8004aac:	f000 f810 	bl	8004ad0 <HAL_InitTick>
 8004ab0:	1e03      	subs	r3, r0, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004ab4:	1dfb      	adds	r3, r7, #7
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	e001      	b.n	8004ac0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004abc:	f7ff fcc2 	bl	8004444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ac0:	1dfb      	adds	r3, r7, #7
 8004ac2:	781b      	ldrb	r3, [r3, #0]
}
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40022000 	.word	0x40022000

08004ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ad0:	b590      	push	{r4, r7, lr}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ad8:	230f      	movs	r3, #15
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <HAL_InitTick+0x88>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d02b      	beq.n	8004b40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <HAL_InitTick+0x8c>)
 8004aea:	681c      	ldr	r4, [r3, #0]
 8004aec:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <HAL_InitTick+0x88>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	0019      	movs	r1, r3
 8004af2:	23fa      	movs	r3, #250	; 0xfa
 8004af4:	0098      	lsls	r0, r3, #2
 8004af6:	f7fb fb21 	bl	800013c <__udivsi3>
 8004afa:	0003      	movs	r3, r0
 8004afc:	0019      	movs	r1, r3
 8004afe:	0020      	movs	r0, r4
 8004b00:	f7fb fb1c 	bl	800013c <__udivsi3>
 8004b04:	0003      	movs	r3, r0
 8004b06:	0018      	movs	r0, r3
 8004b08:	f000 ffb7 	bl	8005a7a <HAL_SYSTICK_Config>
 8004b0c:	1e03      	subs	r3, r0, #0
 8004b0e:	d112      	bne.n	8004b36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d80a      	bhi.n	8004b2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	2301      	movs	r3, #1
 8004b1a:	425b      	negs	r3, r3
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f000 ff86 	bl	8005a30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b24:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <HAL_InitTick+0x90>)
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e00d      	b.n	8004b48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004b2c:	230f      	movs	r3, #15
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e008      	b.n	8004b48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b36:	230f      	movs	r3, #15
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e003      	b.n	8004b48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b40:	230f      	movs	r3, #15
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004b48:	230f      	movs	r3, #15
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	781b      	ldrb	r3, [r3, #0]
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b005      	add	sp, #20
 8004b54:	bd90      	pop	{r4, r7, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	20000008 	.word	0x20000008
 8004b5c:	20000000 	.word	0x20000000
 8004b60:	20000004 	.word	0x20000004

08004b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_IncTick+0x1c>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	001a      	movs	r2, r3
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_IncTick+0x20>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	18d2      	adds	r2, r2, r3
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_IncTick+0x20>)
 8004b76:	601a      	str	r2, [r3, #0]
}
 8004b78:	46c0      	nop			; (mov r8, r8)
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	20000008 	.word	0x20000008
 8004b84:	20000530 	.word	0x20000530

08004b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b8c:	4b02      	ldr	r3, [pc, #8]	; (8004b98 <HAL_GetTick+0x10>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	0018      	movs	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	20000530 	.word	0x20000530

08004b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_GetTick>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	d005      	beq.n	8004bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <HAL_Delay+0x44>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	001a      	movs	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	f7ff ffe0 	bl	8004b88 <HAL_GetTick>
 8004bc8:	0002      	movs	r2, r0
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d8f7      	bhi.n	8004bc4 <HAL_Delay+0x28>
  {
  }
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b004      	add	sp, #16
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	20000008 	.word	0x20000008

08004be4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a05      	ldr	r2, [pc, #20]	; (8004c08 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004bf4:	401a      	ands	r2, r3
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	601a      	str	r2, [r3, #0]
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b002      	add	sp, #8
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	fe3fffff 	.word	0xfe3fffff

08004c0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	23e0      	movs	r3, #224	; 0xe0
 8004c1a:	045b      	lsls	r3, r3, #17
 8004c1c:	4013      	ands	r3, r2
}
 8004c1e:	0018      	movs	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b002      	add	sp, #8
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	2104      	movs	r1, #4
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	2107      	movs	r1, #7
 8004c3e:	4091      	lsls	r1, r2
 8004c40:	000a      	movs	r2, r1
 8004c42:	43d2      	mvns	r2, r2
 8004c44:	401a      	ands	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2104      	movs	r1, #4
 8004c4a:	400b      	ands	r3, r1
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4099      	lsls	r1, r3
 8004c50:	000b      	movs	r3, r1
 8004c52:	431a      	orrs	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b004      	add	sp, #16
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	2104      	movs	r1, #4
 8004c72:	400a      	ands	r2, r1
 8004c74:	2107      	movs	r1, #7
 8004c76:	4091      	lsls	r1, r2
 8004c78:	000a      	movs	r2, r1
 8004c7a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2104      	movs	r1, #4
 8004c80:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004c82:	40da      	lsrs	r2, r3
 8004c84:	0013      	movs	r3, r2
}
 8004c86:	0018      	movs	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b002      	add	sp, #8
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	23c0      	movs	r3, #192	; 0xc0
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b002      	add	sp, #8
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	211f      	movs	r1, #31
 8004cc4:	400a      	ands	r2, r1
 8004cc6:	210f      	movs	r1, #15
 8004cc8:	4091      	lsls	r1, r2
 8004cca:	000a      	movs	r2, r1
 8004ccc:	43d2      	mvns	r2, r2
 8004cce:	401a      	ands	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	0e9b      	lsrs	r3, r3, #26
 8004cd4:	210f      	movs	r1, #15
 8004cd6:	4019      	ands	r1, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	201f      	movs	r0, #31
 8004cdc:	4003      	ands	r3, r0
 8004cde:	4099      	lsls	r1, r3
 8004ce0:	000b      	movs	r3, r1
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b004      	add	sp, #16
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	035b      	lsls	r3, r3, #13
 8004d02:	0b5b      	lsrs	r3, r3, #13
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b002      	add	sp, #8
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	0352      	lsls	r2, r2, #13
 8004d24:	0b52      	lsrs	r2, r2, #13
 8004d26:	43d2      	mvns	r2, r2
 8004d28:	401a      	ands	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b002      	add	sp, #8
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	0212      	lsls	r2, r2, #8
 8004d4c:	43d2      	mvns	r2, r2
 8004d4e:	401a      	ands	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	400b      	ands	r3, r1
 8004d58:	4904      	ldr	r1, [pc, #16]	; (8004d6c <LL_ADC_SetChannelSamplingTime+0x34>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	07ffff00 	.word	0x07ffff00

08004d70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4a05      	ldr	r2, [pc, #20]	; (8004d94 <LL_ADC_EnableInternalRegulator+0x24>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2280      	movs	r2, #128	; 0x80
 8004d82:	0552      	lsls	r2, r2, #21
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	6fffffe8 	.word	0x6fffffe8

08004d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	055b      	lsls	r3, r3, #21
 8004da8:	401a      	ands	r2, r3
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	055b      	lsls	r3, r3, #21
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d101      	bne.n	8004db6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	0018      	movs	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b002      	add	sp, #8
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <LL_ADC_Enable+0x20>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	7fffffe8 	.word	0x7fffffe8

08004de4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a04      	ldr	r2, [pc, #16]	; (8004e04 <LL_ADC_Disable+0x20>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	2202      	movs	r2, #2
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b002      	add	sp, #8
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	7fffffe8 	.word	0x7fffffe8

08004e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2201      	movs	r2, #1
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <LL_ADC_IsEnabled+0x18>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <LL_ADC_IsEnabled+0x1a>
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	0018      	movs	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b002      	add	sp, #8
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <LL_ADC_REG_StartConversion+0x20>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	7fffffe8 	.word	0x7fffffe8

08004e50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d101      	bne.n	8004e68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	b002      	add	sp, #8
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e7c:	231f      	movs	r3, #31
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e17f      	b.n	800519a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f7ff faf1 	bl	800448c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2254      	movs	r2, #84	; 0x54
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f7ff ff6b 	bl	8004d98 <LL_ADC_IsInternalRegulatorEnabled>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d115      	bne.n	8004ef2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f7ff ff50 	bl	8004d70 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ed0:	4bb4      	ldr	r3, [pc, #720]	; (80051a4 <HAL_ADC_Init+0x330>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	49b4      	ldr	r1, [pc, #720]	; (80051a8 <HAL_ADC_Init+0x334>)
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7fb f930 	bl	800013c <__udivsi3>
 8004edc:	0003      	movs	r3, r0
 8004ede:	3301      	adds	r3, #1
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ee4:	e002      	b.n	8004eec <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f9      	bne.n	8004ee6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f7ff ff4e 	bl	8004d98 <LL_ADC_IsInternalRegulatorEnabled>
 8004efc:	1e03      	subs	r3, r0, #0
 8004efe:	d10f      	bne.n	8004f20 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f04:	2210      	movs	r2, #16
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f10:	2201      	movs	r2, #1
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f18:	231f      	movs	r3, #31
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7ff ff93 	bl	8004e50 <LL_ADC_REG_IsConversionOngoing>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f32:	2210      	movs	r2, #16
 8004f34:	4013      	ands	r3, r2
 8004f36:	d000      	beq.n	8004f3a <HAL_ADC_Init+0xc6>
 8004f38:	e122      	b.n	8005180 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d000      	beq.n	8004f42 <HAL_ADC_Init+0xce>
 8004f40:	e11e      	b.n	8005180 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	4a99      	ldr	r2, [pc, #612]	; (80051ac <HAL_ADC_Init+0x338>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	0018      	movs	r0, r3
 8004f58:	f7ff ff56 	bl	8004e08 <LL_ADC_IsEnabled>
 8004f5c:	1e03      	subs	r3, r0, #0
 8004f5e:	d000      	beq.n	8004f62 <HAL_ADC_Init+0xee>
 8004f60:	e0ad      	b.n	80050be <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	7e1b      	ldrb	r3, [r3, #24]
 8004f6a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004f6c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	7e5b      	ldrb	r3, [r3, #25]
 8004f72:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004f74:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	7e9b      	ldrb	r3, [r3, #26]
 8004f7a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004f7c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_ADC_Init+0x118>
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	015b      	lsls	r3, r3, #5
 8004f8a:	e000      	b.n	8004f8e <HAL_ADC_Init+0x11a>
 8004f8c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004f8e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004f94:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da04      	bge.n	8004fa8 <HAL_ADC_Init+0x134>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	e001      	b.n	8004fac <HAL_ADC_Init+0x138>
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004fac:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	212c      	movs	r1, #44	; 0x2c
 8004fb2:	5c5b      	ldrb	r3, [r3, r1]
 8004fb4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004fb6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	5c9b      	ldrb	r3, [r3, r2]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d115      	bne.n	8004ff4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	7e9b      	ldrb	r3, [r3, #26]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2280      	movs	r2, #128	; 0x80
 8004fd4:	0252      	lsls	r2, r2, #9
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e00b      	b.n	8004ff4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fec:	2201      	movs	r2, #1
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005000:	23e0      	movs	r3, #224	; 0xe0
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800500a:	4313      	orrs	r3, r2
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4313      	orrs	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a65      	ldr	r2, [pc, #404]	; (80051b0 <HAL_ADC_Init+0x33c>)
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	430a      	orrs	r2, r1
 8005026:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	0f9b      	lsrs	r3, r3, #30
 800502e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005034:	4313      	orrs	r3, r2
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	223c      	movs	r2, #60	; 0x3c
 8005040:	5c9b      	ldrb	r3, [r3, r2]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d111      	bne.n	800506a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	0f9b      	lsrs	r3, r3, #30
 800504c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005052:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005058:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800505e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	2201      	movs	r2, #1
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	4a50      	ldr	r2, [pc, #320]	; (80051b4 <HAL_ADC_Init+0x340>)
 8005072:	4013      	ands	r3, r2
 8005074:	0019      	movs	r1, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	430a      	orrs	r2, r1
 800507e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	23c0      	movs	r3, #192	; 0xc0
 8005086:	061b      	lsls	r3, r3, #24
 8005088:	429a      	cmp	r2, r3
 800508a:	d018      	beq.n	80050be <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	05db      	lsls	r3, r3, #23
 8005094:	429a      	cmp	r2, r3
 8005096:	d012      	beq.n	80050be <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	061b      	lsls	r3, r3, #24
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d00c      	beq.n	80050be <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80050a4:	4b44      	ldr	r3, [pc, #272]	; (80051b8 <HAL_ADC_Init+0x344>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a44      	ldr	r2, [pc, #272]	; (80051bc <HAL_ADC_Init+0x348>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	23f0      	movs	r3, #240	; 0xf0
 80050b4:	039b      	lsls	r3, r3, #14
 80050b6:	401a      	ands	r2, r3
 80050b8:	4b3f      	ldr	r3, [pc, #252]	; (80051b8 <HAL_ADC_Init+0x344>)
 80050ba:	430a      	orrs	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	001a      	movs	r2, r3
 80050c8:	2100      	movs	r1, #0
 80050ca:	f7ff fdac 	bl	8004c26 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	493a      	ldr	r1, [pc, #232]	; (80051c0 <HAL_ADC_Init+0x34c>)
 80050d8:	001a      	movs	r2, r3
 80050da:	f7ff fda4 	bl	8004c26 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2110      	movs	r1, #16
 80050f2:	4249      	negs	r1, r1
 80050f4:	430a      	orrs	r2, r1
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
 80050f8:	e018      	b.n	800512c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	039b      	lsls	r3, r3, #14
 8005102:	429a      	cmp	r2, r3
 8005104:	d112      	bne.n	800512c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	3b01      	subs	r3, #1
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	221c      	movs	r2, #28
 8005116:	4013      	ands	r3, r2
 8005118:	2210      	movs	r2, #16
 800511a:	4252      	negs	r2, r2
 800511c:	409a      	lsls	r2, r3
 800511e:	0011      	movs	r1, r2
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2100      	movs	r1, #0
 8005132:	0018      	movs	r0, r3
 8005134:	f7ff fd94 	bl	8004c60 <LL_ADC_GetSamplingTimeCommonChannels>
 8005138:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800513e:	429a      	cmp	r2, r3
 8005140:	d10b      	bne.n	800515a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	2203      	movs	r2, #3
 800514e:	4393      	bics	r3, r2
 8005150:	2201      	movs	r2, #1
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005158:	e01c      	b.n	8005194 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	2212      	movs	r2, #18
 8005160:	4393      	bics	r3, r2
 8005162:	2210      	movs	r2, #16
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	2201      	movs	r2, #1
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005176:	231f      	movs	r3, #31
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800517e:	e009      	b.n	8005194 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	2210      	movs	r2, #16
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800518c:	231f      	movs	r3, #31
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	2201      	movs	r2, #1
 8005192:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005194:	231f      	movs	r3, #31
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	781b      	ldrb	r3, [r3, #0]
}
 800519a:	0018      	movs	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	b008      	add	sp, #32
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	20000000 	.word	0x20000000
 80051a8:	00030d40 	.word	0x00030d40
 80051ac:	fffffefd 	.word	0xfffffefd
 80051b0:	fffe0201 	.word	0xfffe0201
 80051b4:	1ffffc02 	.word	0x1ffffc02
 80051b8:	40012708 	.word	0x40012708
 80051bc:	ffc3ffff 	.word	0xffc3ffff
 80051c0:	07ffff04 	.word	0x07ffff04

080051c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80051c4:	b5b0      	push	{r4, r5, r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f7ff fe3b 	bl	8004e50 <LL_ADC_REG_IsConversionOngoing>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d16c      	bne.n	80052b8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2254      	movs	r2, #84	; 0x54
 80051e2:	5c9b      	ldrb	r3, [r3, r2]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_ADC_Start_DMA+0x28>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e06c      	b.n	80052c6 <HAL_ADC_Start_DMA+0x102>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2254      	movs	r2, #84	; 0x54
 80051f0:	2101      	movs	r1, #1
 80051f2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	4013      	ands	r3, r2
 80051fe:	d113      	bne.n	8005228 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	0018      	movs	r0, r3
 8005206:	f7ff fdff 	bl	8004e08 <LL_ADC_IsEnabled>
 800520a:	1e03      	subs	r3, r0, #0
 800520c:	d004      	beq.n	8005218 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	0018      	movs	r0, r3
 8005214:	f7ff fde6 	bl	8004de4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2101      	movs	r1, #1
 8005224:	430a      	orrs	r2, r1
 8005226:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005228:	2517      	movs	r5, #23
 800522a:	197c      	adds	r4, r7, r5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	0018      	movs	r0, r3
 8005230:	f000 fa3e 	bl	80056b0 <ADC_Enable>
 8005234:	0003      	movs	r3, r0
 8005236:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005238:	002c      	movs	r4, r5
 800523a:	193b      	adds	r3, r7, r4
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d13e      	bne.n	80052c0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005246:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <HAL_ADC_Start_DMA+0x10c>)
 8005248:	4013      	ands	r3, r2
 800524a:	2280      	movs	r2, #128	; 0x80
 800524c:	0052      	lsls	r2, r2, #1
 800524e:	431a      	orrs	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525e:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <HAL_ADC_Start_DMA+0x110>)
 8005260:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005266:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <HAL_ADC_Start_DMA+0x114>)
 8005268:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526e:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <HAL_ADC_Start_DMA+0x118>)
 8005270:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	221c      	movs	r2, #28
 8005278:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2254      	movs	r2, #84	; 0x54
 800527e:	2100      	movs	r1, #0
 8005280:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2110      	movs	r1, #16
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3340      	adds	r3, #64	; 0x40
 800529c:	0019      	movs	r1, r3
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	193c      	adds	r4, r7, r4
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f000 fc80 	bl	8005ba8 <HAL_DMA_Start_IT>
 80052a8:	0003      	movs	r3, r0
 80052aa:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	0018      	movs	r0, r3
 80052b2:	f7ff fdbb 	bl	8004e2c <LL_ADC_REG_StartConversion>
 80052b6:	e003      	b.n	80052c0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80052b8:	2317      	movs	r3, #23
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	2202      	movs	r2, #2
 80052be:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80052c0:	2317      	movs	r3, #23
 80052c2:	18fb      	adds	r3, r7, r3
 80052c4:	781b      	ldrb	r3, [r3, #0]
}
 80052c6:	0018      	movs	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b006      	add	sp, #24
 80052cc:	bdb0      	pop	{r4, r5, r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	fffff0fe 	.word	0xfffff0fe
 80052d4:	080057bd 	.word	0x080057bd
 80052d8:	08005885 	.word	0x08005885
 80052dc:	080058a3 	.word	0x080058a3

080052e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b002      	add	sp, #8
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80052f8:	46c0      	nop			; (mov r8, r8)
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b002      	add	sp, #8
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800530a:	2317      	movs	r3, #23
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2254      	movs	r2, #84	; 0x54
 800531a:	5c9b      	ldrb	r3, [r3, r2]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_ADC_ConfigChannel+0x24>
 8005320:	2302      	movs	r3, #2
 8005322:	e1c0      	b.n	80056a6 <HAL_ADC_ConfigChannel+0x3a6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2254      	movs	r2, #84	; 0x54
 8005328:	2101      	movs	r1, #1
 800532a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0018      	movs	r0, r3
 8005332:	f7ff fd8d 	bl	8004e50 <LL_ADC_REG_IsConversionOngoing>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d000      	beq.n	800533c <HAL_ADC_ConfigChannel+0x3c>
 800533a:	e1a3      	b.n	8005684 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d100      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x46>
 8005344:	e143      	b.n	80055ce <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	061b      	lsls	r3, r3, #24
 800534e:	429a      	cmp	r2, r3
 8005350:	d004      	beq.n	800535c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005356:	4ac1      	ldr	r2, [pc, #772]	; (800565c <HAL_ADC_ConfigChannel+0x35c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d108      	bne.n	800536e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	0019      	movs	r1, r3
 8005366:	0010      	movs	r0, r2
 8005368:	f7ff fcc2 	bl	8004cf0 <LL_ADC_REG_SetSequencerChAdd>
 800536c:	e0c9      	b.n	8005502 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	211f      	movs	r1, #31
 8005378:	400b      	ands	r3, r1
 800537a:	210f      	movs	r1, #15
 800537c:	4099      	lsls	r1, r3
 800537e:	000b      	movs	r3, r1
 8005380:	43db      	mvns	r3, r3
 8005382:	4013      	ands	r3, r2
 8005384:	0019      	movs	r1, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	035b      	lsls	r3, r3, #13
 800538c:	0b5b      	lsrs	r3, r3, #13
 800538e:	d105      	bne.n	800539c <HAL_ADC_ConfigChannel+0x9c>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	0e9b      	lsrs	r3, r3, #26
 8005396:	221f      	movs	r2, #31
 8005398:	4013      	ands	r3, r2
 800539a:	e098      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2201      	movs	r2, #1
 80053a2:	4013      	ands	r3, r2
 80053a4:	d000      	beq.n	80053a8 <HAL_ADC_ConfigChannel+0xa8>
 80053a6:	e091      	b.n	80054cc <HAL_ADC_ConfigChannel+0x1cc>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2202      	movs	r2, #2
 80053ae:	4013      	ands	r3, r2
 80053b0:	d000      	beq.n	80053b4 <HAL_ADC_ConfigChannel+0xb4>
 80053b2:	e089      	b.n	80054c8 <HAL_ADC_ConfigChannel+0x1c8>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2204      	movs	r2, #4
 80053ba:	4013      	ands	r3, r2
 80053bc:	d000      	beq.n	80053c0 <HAL_ADC_ConfigChannel+0xc0>
 80053be:	e081      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x1c4>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2208      	movs	r2, #8
 80053c6:	4013      	ands	r3, r2
 80053c8:	d000      	beq.n	80053cc <HAL_ADC_ConfigChannel+0xcc>
 80053ca:	e079      	b.n	80054c0 <HAL_ADC_ConfigChannel+0x1c0>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2210      	movs	r2, #16
 80053d2:	4013      	ands	r3, r2
 80053d4:	d000      	beq.n	80053d8 <HAL_ADC_ConfigChannel+0xd8>
 80053d6:	e071      	b.n	80054bc <HAL_ADC_ConfigChannel+0x1bc>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2220      	movs	r2, #32
 80053de:	4013      	ands	r3, r2
 80053e0:	d000      	beq.n	80053e4 <HAL_ADC_ConfigChannel+0xe4>
 80053e2:	e069      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x1b8>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2240      	movs	r2, #64	; 0x40
 80053ea:	4013      	ands	r3, r2
 80053ec:	d000      	beq.n	80053f0 <HAL_ADC_ConfigChannel+0xf0>
 80053ee:	e061      	b.n	80054b4 <HAL_ADC_ConfigChannel+0x1b4>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2280      	movs	r2, #128	; 0x80
 80053f6:	4013      	ands	r3, r2
 80053f8:	d000      	beq.n	80053fc <HAL_ADC_ConfigChannel+0xfc>
 80053fa:	e059      	b.n	80054b0 <HAL_ADC_ConfigChannel+0x1b0>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4013      	ands	r3, r2
 8005406:	d151      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x1ac>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	2380      	movs	r3, #128	; 0x80
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4013      	ands	r3, r2
 8005412:	d149      	bne.n	80054a8 <HAL_ADC_ConfigChannel+0x1a8>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4013      	ands	r3, r2
 800541e:	d141      	bne.n	80054a4 <HAL_ADC_ConfigChannel+0x1a4>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	2380      	movs	r3, #128	; 0x80
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	4013      	ands	r3, r2
 800542a:	d139      	bne.n	80054a0 <HAL_ADC_ConfigChannel+0x1a0>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	2380      	movs	r3, #128	; 0x80
 8005432:	015b      	lsls	r3, r3, #5
 8005434:	4013      	ands	r3, r2
 8005436:	d131      	bne.n	800549c <HAL_ADC_ConfigChannel+0x19c>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	019b      	lsls	r3, r3, #6
 8005440:	4013      	ands	r3, r2
 8005442:	d129      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x198>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	01db      	lsls	r3, r3, #7
 800544c:	4013      	ands	r3, r2
 800544e:	d121      	bne.n	8005494 <HAL_ADC_ConfigChannel+0x194>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	4013      	ands	r3, r2
 800545a:	d119      	bne.n	8005490 <HAL_ADC_ConfigChannel+0x190>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	025b      	lsls	r3, r3, #9
 8005464:	4013      	ands	r3, r2
 8005466:	d111      	bne.n	800548c <HAL_ADC_ConfigChannel+0x18c>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	029b      	lsls	r3, r3, #10
 8005470:	4013      	ands	r3, r2
 8005472:	d109      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x188>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	02db      	lsls	r3, r3, #11
 800547c:	4013      	ands	r3, r2
 800547e:	d001      	beq.n	8005484 <HAL_ADC_ConfigChannel+0x184>
 8005480:	2312      	movs	r3, #18
 8005482:	e024      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 8005484:	2300      	movs	r3, #0
 8005486:	e022      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 8005488:	2311      	movs	r3, #17
 800548a:	e020      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 800548c:	2310      	movs	r3, #16
 800548e:	e01e      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 8005490:	230f      	movs	r3, #15
 8005492:	e01c      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 8005494:	230e      	movs	r3, #14
 8005496:	e01a      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 8005498:	230d      	movs	r3, #13
 800549a:	e018      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 800549c:	230c      	movs	r3, #12
 800549e:	e016      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054a0:	230b      	movs	r3, #11
 80054a2:	e014      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054a4:	230a      	movs	r3, #10
 80054a6:	e012      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054a8:	2309      	movs	r3, #9
 80054aa:	e010      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054ac:	2308      	movs	r3, #8
 80054ae:	e00e      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054b0:	2307      	movs	r3, #7
 80054b2:	e00c      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054b4:	2306      	movs	r3, #6
 80054b6:	e00a      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054b8:	2305      	movs	r3, #5
 80054ba:	e008      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054bc:	2304      	movs	r3, #4
 80054be:	e006      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054c0:	2303      	movs	r3, #3
 80054c2:	e004      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e002      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1ce>
 80054cc:	2300      	movs	r3, #0
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	6852      	ldr	r2, [r2, #4]
 80054d2:	201f      	movs	r0, #31
 80054d4:	4002      	ands	r2, r0
 80054d6:	4093      	lsls	r3, r2
 80054d8:	000a      	movs	r2, r1
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	089b      	lsrs	r3, r3, #2
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d808      	bhi.n	8005502 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	001a      	movs	r2, r3
 80054fe:	f7ff fbd7 	bl	8004cb0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	001a      	movs	r2, r3
 8005510:	f7ff fc12 	bl	8004d38 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	db00      	blt.n	800551e <HAL_ADC_ConfigChannel+0x21e>
 800551c:	e0bc      	b.n	8005698 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800551e:	4b50      	ldr	r3, [pc, #320]	; (8005660 <HAL_ADC_ConfigChannel+0x360>)
 8005520:	0018      	movs	r0, r3
 8005522:	f7ff fb73 	bl	8004c0c <LL_ADC_GetCommonPathInternalCh>
 8005526:	0003      	movs	r3, r0
 8005528:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a4d      	ldr	r2, [pc, #308]	; (8005664 <HAL_ADC_ConfigChannel+0x364>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d122      	bne.n	800557a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	041b      	lsls	r3, r3, #16
 800553a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800553c:	d11d      	bne.n	800557a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2280      	movs	r2, #128	; 0x80
 8005542:	0412      	lsls	r2, r2, #16
 8005544:	4313      	orrs	r3, r2
 8005546:	4a46      	ldr	r2, [pc, #280]	; (8005660 <HAL_ADC_ConfigChannel+0x360>)
 8005548:	0019      	movs	r1, r3
 800554a:	0010      	movs	r0, r2
 800554c:	f7ff fb4a 	bl	8004be4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005550:	4b45      	ldr	r3, [pc, #276]	; (8005668 <HAL_ADC_ConfigChannel+0x368>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4945      	ldr	r1, [pc, #276]	; (800566c <HAL_ADC_ConfigChannel+0x36c>)
 8005556:	0018      	movs	r0, r3
 8005558:	f7fa fdf0 	bl	800013c <__udivsi3>
 800555c:	0003      	movs	r3, r0
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	0013      	movs	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	189b      	adds	r3, r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800556a:	e002      	b.n	8005572 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3b01      	subs	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f9      	bne.n	800556c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005578:	e08e      	b.n	8005698 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a3c      	ldr	r2, [pc, #240]	; (8005670 <HAL_ADC_ConfigChannel+0x370>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d10e      	bne.n	80055a2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	045b      	lsls	r3, r3, #17
 800558a:	4013      	ands	r3, r2
 800558c:	d109      	bne.n	80055a2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2280      	movs	r2, #128	; 0x80
 8005592:	0452      	lsls	r2, r2, #17
 8005594:	4313      	orrs	r3, r2
 8005596:	4a32      	ldr	r2, [pc, #200]	; (8005660 <HAL_ADC_ConfigChannel+0x360>)
 8005598:	0019      	movs	r1, r3
 800559a:	0010      	movs	r0, r2
 800559c:	f7ff fb22 	bl	8004be4 <LL_ADC_SetCommonPathInternalCh>
 80055a0:	e07a      	b.n	8005698 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a33      	ldr	r2, [pc, #204]	; (8005674 <HAL_ADC_ConfigChannel+0x374>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d000      	beq.n	80055ae <HAL_ADC_ConfigChannel+0x2ae>
 80055ac:	e074      	b.n	8005698 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	03db      	lsls	r3, r3, #15
 80055b4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80055b6:	d000      	beq.n	80055ba <HAL_ADC_ConfigChannel+0x2ba>
 80055b8:	e06e      	b.n	8005698 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2280      	movs	r2, #128	; 0x80
 80055be:	03d2      	lsls	r2, r2, #15
 80055c0:	4313      	orrs	r3, r2
 80055c2:	4a27      	ldr	r2, [pc, #156]	; (8005660 <HAL_ADC_ConfigChannel+0x360>)
 80055c4:	0019      	movs	r1, r3
 80055c6:	0010      	movs	r0, r2
 80055c8:	f7ff fb0c 	bl	8004be4 <LL_ADC_SetCommonPathInternalCh>
 80055cc:	e064      	b.n	8005698 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	2380      	movs	r3, #128	; 0x80
 80055d4:	061b      	lsls	r3, r3, #24
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d004      	beq.n	80055e4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80055de:	4a1f      	ldr	r2, [pc, #124]	; (800565c <HAL_ADC_ConfigChannel+0x35c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d107      	bne.n	80055f4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	0019      	movs	r1, r3
 80055ee:	0010      	movs	r0, r2
 80055f0:	f7ff fb8f 	bl	8004d12 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da4d      	bge.n	8005698 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055fc:	4b18      	ldr	r3, [pc, #96]	; (8005660 <HAL_ADC_ConfigChannel+0x360>)
 80055fe:	0018      	movs	r0, r3
 8005600:	f7ff fb04 	bl	8004c0c <LL_ADC_GetCommonPathInternalCh>
 8005604:	0003      	movs	r3, r0
 8005606:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a15      	ldr	r2, [pc, #84]	; (8005664 <HAL_ADC_ConfigChannel+0x364>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d108      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4a18      	ldr	r2, [pc, #96]	; (8005678 <HAL_ADC_ConfigChannel+0x378>)
 8005616:	4013      	ands	r3, r2
 8005618:	4a11      	ldr	r2, [pc, #68]	; (8005660 <HAL_ADC_ConfigChannel+0x360>)
 800561a:	0019      	movs	r1, r3
 800561c:	0010      	movs	r0, r2
 800561e:	f7ff fae1 	bl	8004be4 <LL_ADC_SetCommonPathInternalCh>
 8005622:	e039      	b.n	8005698 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a11      	ldr	r2, [pc, #68]	; (8005670 <HAL_ADC_ConfigChannel+0x370>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d108      	bne.n	8005640 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4a12      	ldr	r2, [pc, #72]	; (800567c <HAL_ADC_ConfigChannel+0x37c>)
 8005632:	4013      	ands	r3, r2
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <HAL_ADC_ConfigChannel+0x360>)
 8005636:	0019      	movs	r1, r3
 8005638:	0010      	movs	r0, r2
 800563a:	f7ff fad3 	bl	8004be4 <LL_ADC_SetCommonPathInternalCh>
 800563e:	e02b      	b.n	8005698 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a0b      	ldr	r2, [pc, #44]	; (8005674 <HAL_ADC_ConfigChannel+0x374>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d126      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4a0c      	ldr	r2, [pc, #48]	; (8005680 <HAL_ADC_ConfigChannel+0x380>)
 800564e:	4013      	ands	r3, r2
 8005650:	4a03      	ldr	r2, [pc, #12]	; (8005660 <HAL_ADC_ConfigChannel+0x360>)
 8005652:	0019      	movs	r1, r3
 8005654:	0010      	movs	r0, r2
 8005656:	f7ff fac5 	bl	8004be4 <LL_ADC_SetCommonPathInternalCh>
 800565a:	e01d      	b.n	8005698 <HAL_ADC_ConfigChannel+0x398>
 800565c:	80000004 	.word	0x80000004
 8005660:	40012708 	.word	0x40012708
 8005664:	b0001000 	.word	0xb0001000
 8005668:	20000000 	.word	0x20000000
 800566c:	00030d40 	.word	0x00030d40
 8005670:	b8004000 	.word	0xb8004000
 8005674:	b4002000 	.word	0xb4002000
 8005678:	ff7fffff 	.word	0xff7fffff
 800567c:	feffffff 	.word	0xfeffffff
 8005680:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005688:	2220      	movs	r2, #32
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005690:	2317      	movs	r3, #23
 8005692:	18fb      	adds	r3, r7, r3
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2254      	movs	r2, #84	; 0x54
 800569c:	2100      	movs	r1, #0
 800569e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80056a0:	2317      	movs	r3, #23
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	781b      	ldrb	r3, [r3, #0]
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b006      	add	sp, #24
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)

080056b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	0018      	movs	r0, r3
 80056c2:	f7ff fba1 	bl	8004e08 <LL_ADC_IsEnabled>
 80056c6:	1e03      	subs	r3, r0, #0
 80056c8:	d000      	beq.n	80056cc <ADC_Enable+0x1c>
 80056ca:	e069      	b.n	80057a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	4a36      	ldr	r2, [pc, #216]	; (80057ac <ADC_Enable+0xfc>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	d00d      	beq.n	80056f4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056dc:	2210      	movs	r2, #16
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e8:	2201      	movs	r2, #1
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e056      	b.n	80057a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7ff fb61 	bl	8004dc0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80056fe:	4b2c      	ldr	r3, [pc, #176]	; (80057b0 <ADC_Enable+0x100>)
 8005700:	0018      	movs	r0, r3
 8005702:	f7ff fa83 	bl	8004c0c <LL_ADC_GetCommonPathInternalCh>
 8005706:	0002      	movs	r2, r0
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	041b      	lsls	r3, r3, #16
 800570c:	4013      	ands	r3, r2
 800570e:	d00f      	beq.n	8005730 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005710:	4b28      	ldr	r3, [pc, #160]	; (80057b4 <ADC_Enable+0x104>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4928      	ldr	r1, [pc, #160]	; (80057b8 <ADC_Enable+0x108>)
 8005716:	0018      	movs	r0, r3
 8005718:	f7fa fd10 	bl	800013c <__udivsi3>
 800571c:	0003      	movs	r3, r0
 800571e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005720:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005722:	e002      	b.n	800572a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	3b01      	subs	r3, #1
 8005728:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f9      	bne.n	8005724 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7e5b      	ldrb	r3, [r3, #25]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d033      	beq.n	80057a0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005738:	f7ff fa26 	bl	8004b88 <HAL_GetTick>
 800573c:	0003      	movs	r3, r0
 800573e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005740:	e027      	b.n	8005792 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	0018      	movs	r0, r3
 8005748:	f7ff fb5e 	bl	8004e08 <LL_ADC_IsEnabled>
 800574c:	1e03      	subs	r3, r0, #0
 800574e:	d104      	bne.n	800575a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	0018      	movs	r0, r3
 8005756:	f7ff fb33 	bl	8004dc0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800575a:	f7ff fa15 	bl	8004b88 <HAL_GetTick>
 800575e:	0002      	movs	r2, r0
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d914      	bls.n	8005792 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	4013      	ands	r3, r2
 8005772:	2b01      	cmp	r3, #1
 8005774:	d00d      	beq.n	8005792 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577a:	2210      	movs	r2, #16
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005786:	2201      	movs	r2, #1
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e007      	b.n	80057a2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2201      	movs	r2, #1
 800579a:	4013      	ands	r3, r2
 800579c:	2b01      	cmp	r3, #1
 800579e:	d1d0      	bne.n	8005742 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b004      	add	sp, #16
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	80000017 	.word	0x80000017
 80057b0:	40012708 	.word	0x40012708
 80057b4:	20000000 	.word	0x20000000
 80057b8:	00030d40 	.word	0x00030d40

080057bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	2250      	movs	r2, #80	; 0x50
 80057d0:	4013      	ands	r3, r2
 80057d2:	d141      	bne.n	8005858 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	0092      	lsls	r2, r2, #2
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	0018      	movs	r0, r3
 80057e8:	f7ff fa51 	bl	8004c8e <LL_ADC_REG_IsTriggerSourceSWStart>
 80057ec:	1e03      	subs	r3, r0, #0
 80057ee:	d02e      	beq.n	800584e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	7e9b      	ldrb	r3, [r3, #26]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d12a      	bne.n	800584e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2208      	movs	r2, #8
 8005800:	4013      	ands	r3, r2
 8005802:	2b08      	cmp	r3, #8
 8005804:	d123      	bne.n	800584e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	0018      	movs	r0, r3
 800580c:	f7ff fb20 	bl	8004e50 <LL_ADC_REG_IsConversionOngoing>
 8005810:	1e03      	subs	r3, r0, #0
 8005812:	d110      	bne.n	8005836 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	210c      	movs	r1, #12
 8005820:	438a      	bics	r2, r1
 8005822:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005828:	4a15      	ldr	r2, [pc, #84]	; (8005880 <ADC_DMAConvCplt+0xc4>)
 800582a:	4013      	ands	r3, r2
 800582c:	2201      	movs	r2, #1
 800582e:	431a      	orrs	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	659a      	str	r2, [r3, #88]	; 0x58
 8005834:	e00b      	b.n	800584e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583a:	2220      	movs	r2, #32
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005846:	2201      	movs	r2, #1
 8005848:	431a      	orrs	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	0018      	movs	r0, r3
 8005852:	f7fe f891 	bl	8003978 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005856:	e00f      	b.n	8005878 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	2210      	movs	r2, #16
 800585e:	4013      	ands	r3, r2
 8005860:	d004      	beq.n	800586c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	0018      	movs	r0, r3
 8005866:	f7ff fd43 	bl	80052f0 <HAL_ADC_ErrorCallback>
}
 800586a:	e005      	b.n	8005878 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	0010      	movs	r0, r2
 8005876:	4798      	blx	r3
}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	b004      	add	sp, #16
 800587e:	bd80      	pop	{r7, pc}
 8005880:	fffffefe 	.word	0xfffffefe

08005884 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	0018      	movs	r0, r3
 8005896:	f7ff fd23 	bl	80052e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	46bd      	mov	sp, r7
 800589e:	b004      	add	sp, #16
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	2240      	movs	r2, #64	; 0x40
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c0:	2204      	movs	r2, #4
 80058c2:	431a      	orrs	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff fd10 	bl	80052f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058d0:	46c0      	nop			; (mov r8, r8)
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b004      	add	sp, #16
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	0002      	movs	r2, r0
 80058e0:	1dfb      	adds	r3, r7, #7
 80058e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80058e4:	1dfb      	adds	r3, r7, #7
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b7f      	cmp	r3, #127	; 0x7f
 80058ea:	d809      	bhi.n	8005900 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ec:	1dfb      	adds	r3, r7, #7
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	001a      	movs	r2, r3
 80058f2:	231f      	movs	r3, #31
 80058f4:	401a      	ands	r2, r3
 80058f6:	4b04      	ldr	r3, [pc, #16]	; (8005908 <__NVIC_EnableIRQ+0x30>)
 80058f8:	2101      	movs	r1, #1
 80058fa:	4091      	lsls	r1, r2
 80058fc:	000a      	movs	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	46bd      	mov	sp, r7
 8005904:	b002      	add	sp, #8
 8005906:	bd80      	pop	{r7, pc}
 8005908:	e000e100 	.word	0xe000e100

0800590c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800590c:	b590      	push	{r4, r7, lr}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	0002      	movs	r2, r0
 8005914:	6039      	str	r1, [r7, #0]
 8005916:	1dfb      	adds	r3, r7, #7
 8005918:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800591a:	1dfb      	adds	r3, r7, #7
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b7f      	cmp	r3, #127	; 0x7f
 8005920:	d828      	bhi.n	8005974 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005922:	4a2f      	ldr	r2, [pc, #188]	; (80059e0 <__NVIC_SetPriority+0xd4>)
 8005924:	1dfb      	adds	r3, r7, #7
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b25b      	sxtb	r3, r3
 800592a:	089b      	lsrs	r3, r3, #2
 800592c:	33c0      	adds	r3, #192	; 0xc0
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	589b      	ldr	r3, [r3, r2]
 8005932:	1dfa      	adds	r2, r7, #7
 8005934:	7812      	ldrb	r2, [r2, #0]
 8005936:	0011      	movs	r1, r2
 8005938:	2203      	movs	r2, #3
 800593a:	400a      	ands	r2, r1
 800593c:	00d2      	lsls	r2, r2, #3
 800593e:	21ff      	movs	r1, #255	; 0xff
 8005940:	4091      	lsls	r1, r2
 8005942:	000a      	movs	r2, r1
 8005944:	43d2      	mvns	r2, r2
 8005946:	401a      	ands	r2, r3
 8005948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	019b      	lsls	r3, r3, #6
 800594e:	22ff      	movs	r2, #255	; 0xff
 8005950:	401a      	ands	r2, r3
 8005952:	1dfb      	adds	r3, r7, #7
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	0018      	movs	r0, r3
 8005958:	2303      	movs	r3, #3
 800595a:	4003      	ands	r3, r0
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005960:	481f      	ldr	r0, [pc, #124]	; (80059e0 <__NVIC_SetPriority+0xd4>)
 8005962:	1dfb      	adds	r3, r7, #7
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b25b      	sxtb	r3, r3
 8005968:	089b      	lsrs	r3, r3, #2
 800596a:	430a      	orrs	r2, r1
 800596c:	33c0      	adds	r3, #192	; 0xc0
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005972:	e031      	b.n	80059d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005974:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <__NVIC_SetPriority+0xd8>)
 8005976:	1dfb      	adds	r3, r7, #7
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	0019      	movs	r1, r3
 800597c:	230f      	movs	r3, #15
 800597e:	400b      	ands	r3, r1
 8005980:	3b08      	subs	r3, #8
 8005982:	089b      	lsrs	r3, r3, #2
 8005984:	3306      	adds	r3, #6
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	18d3      	adds	r3, r2, r3
 800598a:	3304      	adds	r3, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	1dfa      	adds	r2, r7, #7
 8005990:	7812      	ldrb	r2, [r2, #0]
 8005992:	0011      	movs	r1, r2
 8005994:	2203      	movs	r2, #3
 8005996:	400a      	ands	r2, r1
 8005998:	00d2      	lsls	r2, r2, #3
 800599a:	21ff      	movs	r1, #255	; 0xff
 800599c:	4091      	lsls	r1, r2
 800599e:	000a      	movs	r2, r1
 80059a0:	43d2      	mvns	r2, r2
 80059a2:	401a      	ands	r2, r3
 80059a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	019b      	lsls	r3, r3, #6
 80059aa:	22ff      	movs	r2, #255	; 0xff
 80059ac:	401a      	ands	r2, r3
 80059ae:	1dfb      	adds	r3, r7, #7
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	0018      	movs	r0, r3
 80059b4:	2303      	movs	r3, #3
 80059b6:	4003      	ands	r3, r0
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059bc:	4809      	ldr	r0, [pc, #36]	; (80059e4 <__NVIC_SetPriority+0xd8>)
 80059be:	1dfb      	adds	r3, r7, #7
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	001c      	movs	r4, r3
 80059c4:	230f      	movs	r3, #15
 80059c6:	4023      	ands	r3, r4
 80059c8:	3b08      	subs	r3, #8
 80059ca:	089b      	lsrs	r3, r3, #2
 80059cc:	430a      	orrs	r2, r1
 80059ce:	3306      	adds	r3, #6
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	18c3      	adds	r3, r0, r3
 80059d4:	3304      	adds	r3, #4
 80059d6:	601a      	str	r2, [r3, #0]
}
 80059d8:	46c0      	nop			; (mov r8, r8)
 80059da:	46bd      	mov	sp, r7
 80059dc:	b003      	add	sp, #12
 80059de:	bd90      	pop	{r4, r7, pc}
 80059e0:	e000e100 	.word	0xe000e100
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	1e5a      	subs	r2, r3, #1
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	045b      	lsls	r3, r3, #17
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d301      	bcc.n	8005a00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059fc:	2301      	movs	r3, #1
 80059fe:	e010      	b.n	8005a22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <SysTick_Config+0x44>)
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	3a01      	subs	r2, #1
 8005a06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a08:	2301      	movs	r3, #1
 8005a0a:	425b      	negs	r3, r3
 8005a0c:	2103      	movs	r1, #3
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f7ff ff7c 	bl	800590c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <SysTick_Config+0x44>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a1a:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <SysTick_Config+0x44>)
 8005a1c:	2207      	movs	r2, #7
 8005a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	0018      	movs	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b002      	add	sp, #8
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	e000e010 	.word	0xe000e010

08005a30 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	210f      	movs	r1, #15
 8005a3c:	187b      	adds	r3, r7, r1
 8005a3e:	1c02      	adds	r2, r0, #0
 8005a40:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	187b      	adds	r3, r7, r1
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	b25b      	sxtb	r3, r3
 8005a4a:	0011      	movs	r1, r2
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7ff ff5d 	bl	800590c <__NVIC_SetPriority>
}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b004      	add	sp, #16
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	0002      	movs	r2, r0
 8005a62:	1dfb      	adds	r3, r7, #7
 8005a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a66:	1dfb      	adds	r3, r7, #7
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	b25b      	sxtb	r3, r3
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f7ff ff33 	bl	80058d8 <__NVIC_EnableIRQ>
}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b002      	add	sp, #8
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	0018      	movs	r0, r3
 8005a86:	f7ff ffaf 	bl	80059e8 <SysTick_Config>
 8005a8a:	0003      	movs	r3, r0
}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b002      	add	sp, #8
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e077      	b.n	8005b96 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a3d      	ldr	r2, [pc, #244]	; (8005ba0 <HAL_DMA_Init+0x10c>)
 8005aac:	4694      	mov	ip, r2
 8005aae:	4463      	add	r3, ip
 8005ab0:	2114      	movs	r1, #20
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f7fa fb42 	bl	800013c <__udivsi3>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	009a      	lsls	r2, r3, #2
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2225      	movs	r2, #37	; 0x25
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4934      	ldr	r1, [pc, #208]	; (8005ba4 <HAL_DMA_Init+0x110>)
 8005ad4:	400a      	ands	r2, r1
 8005ad6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 f9c1 	bl	8005e98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	2380      	movs	r3, #128	; 0x80
 8005b1c:	01db      	lsls	r3, r3, #7
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d102      	bne.n	8005b28 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b30:	213f      	movs	r1, #63	; 0x3f
 8005b32:	400a      	ands	r2, r1
 8005b34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d011      	beq.n	8005b6c <HAL_DMA_Init+0xd8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d80d      	bhi.n	8005b6c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	0018      	movs	r0, r3
 8005b54:	f000 f9cc 	bl	8005ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	e008      	b.n	8005b7e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2225      	movs	r2, #37	; 0x25
 8005b88:	2101      	movs	r1, #1
 8005b8a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2224      	movs	r2, #36	; 0x24
 8005b90:	2100      	movs	r1, #0
 8005b92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	0018      	movs	r0, r3
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b002      	add	sp, #8
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	bffdfff8 	.word	0xbffdfff8
 8005ba4:	ffff800f 	.word	0xffff800f

08005ba8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb6:	2317      	movs	r3, #23
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2224      	movs	r2, #36	; 0x24
 8005bc2:	5c9b      	ldrb	r3, [r3, r2]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_DMA_Start_IT+0x24>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e06f      	b.n	8005cac <HAL_DMA_Start_IT+0x104>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2224      	movs	r2, #36	; 0x24
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2225      	movs	r2, #37	; 0x25
 8005bd8:	5c9b      	ldrb	r3, [r3, r2]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d157      	bne.n	8005c90 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2225      	movs	r2, #37	; 0x25
 8005be4:	2102      	movs	r1, #2
 8005be6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	438a      	bics	r2, r1
 8005bfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f907 	bl	8005e18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	210e      	movs	r1, #14
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	e00f      	b.n	8005c44 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2104      	movs	r1, #4
 8005c30:	438a      	bics	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	210a      	movs	r1, #10
 8005c40:	430a      	orrs	r2, r1
 8005c42:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	025b      	lsls	r3, r3, #9
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d008      	beq.n	8005c64 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	2180      	movs	r1, #128	; 0x80
 8005c5e:	0049      	lsls	r1, r1, #1
 8005c60:	430a      	orrs	r2, r1
 8005c62:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c76:	2180      	movs	r1, #128	; 0x80
 8005c78:	0049      	lsls	r1, r1, #1
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2101      	movs	r1, #1
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e00a      	b.n	8005ca6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2280      	movs	r2, #128	; 0x80
 8005c94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2224      	movs	r2, #36	; 0x24
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005c9e:	2317      	movs	r3, #23
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005ca6:	2317      	movs	r3, #23
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	781b      	ldrb	r3, [r3, #0]
}
 8005cac:	0018      	movs	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b006      	add	sp, #24
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005cbc:	4b55      	ldr	r3, [pc, #340]	; (8005e14 <HAL_DMA_IRQHandler+0x160>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	221c      	movs	r2, #28
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	409a      	lsls	r2, r3
 8005cd6:	0013      	movs	r3, r2
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d027      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x7a>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2204      	movs	r2, #4
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d023      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2220      	movs	r2, #32
 8005cee:	4013      	ands	r3, r2
 8005cf0:	d107      	bne.n	8005d02 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2104      	movs	r1, #4
 8005cfe:	438a      	bics	r2, r1
 8005d00:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005d02:	4b44      	ldr	r3, [pc, #272]	; (8005e14 <HAL_DMA_IRQHandler+0x160>)
 8005d04:	6859      	ldr	r1, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	221c      	movs	r2, #28
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2204      	movs	r2, #4
 8005d10:	409a      	lsls	r2, r3
 8005d12:	4b40      	ldr	r3, [pc, #256]	; (8005e14 <HAL_DMA_IRQHandler+0x160>)
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d100      	bne.n	8005d22 <HAL_DMA_IRQHandler+0x6e>
 8005d20:	e073      	b.n	8005e0a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	0010      	movs	r0, r2
 8005d2a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005d2c:	e06d      	b.n	8005e0a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	221c      	movs	r2, #28
 8005d34:	4013      	ands	r3, r2
 8005d36:	2202      	movs	r2, #2
 8005d38:	409a      	lsls	r2, r3
 8005d3a:	0013      	movs	r3, r2
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d02e      	beq.n	8005da0 <HAL_DMA_IRQHandler+0xec>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2202      	movs	r2, #2
 8005d46:	4013      	ands	r3, r2
 8005d48:	d02a      	beq.n	8005da0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2220      	movs	r2, #32
 8005d52:	4013      	ands	r3, r2
 8005d54:	d10b      	bne.n	8005d6e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	210a      	movs	r1, #10
 8005d62:	438a      	bics	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2225      	movs	r2, #37	; 0x25
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005d6e:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <HAL_DMA_IRQHandler+0x160>)
 8005d70:	6859      	ldr	r1, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	221c      	movs	r2, #28
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	409a      	lsls	r2, r3
 8005d7e:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <HAL_DMA_IRQHandler+0x160>)
 8005d80:	430a      	orrs	r2, r1
 8005d82:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2224      	movs	r2, #36	; 0x24
 8005d88:	2100      	movs	r1, #0
 8005d8a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d03a      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	0010      	movs	r0, r2
 8005d9c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005d9e:	e034      	b.n	8005e0a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	221c      	movs	r2, #28
 8005da6:	4013      	ands	r3, r2
 8005da8:	2208      	movs	r2, #8
 8005daa:	409a      	lsls	r2, r3
 8005dac:	0013      	movs	r3, r2
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4013      	ands	r3, r2
 8005db2:	d02b      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x158>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2208      	movs	r2, #8
 8005db8:	4013      	ands	r3, r2
 8005dba:	d027      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	210e      	movs	r1, #14
 8005dc8:	438a      	bics	r2, r1
 8005dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005dcc:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <HAL_DMA_IRQHandler+0x160>)
 8005dce:	6859      	ldr	r1, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	221c      	movs	r2, #28
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2201      	movs	r2, #1
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <HAL_DMA_IRQHandler+0x160>)
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2225      	movs	r2, #37	; 0x25
 8005dec:	2101      	movs	r1, #1
 8005dee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2224      	movs	r2, #36	; 0x24
 8005df4:	2100      	movs	r1, #0
 8005df6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	0010      	movs	r0, r2
 8005e08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	46c0      	nop			; (mov r8, r8)
}
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b004      	add	sp, #16
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40020000 	.word	0x40020000

08005e18 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e40:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005e42:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <DMA_SetConfig+0x7c>)
 8005e44:	6859      	ldr	r1, [r3, #4]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	221c      	movs	r2, #28
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2201      	movs	r2, #1
 8005e50:	409a      	lsls	r2, r3
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <DMA_SetConfig+0x7c>)
 8005e54:	430a      	orrs	r2, r1
 8005e56:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d108      	bne.n	8005e7a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e78:	e007      	b.n	8005e8a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	60da      	str	r2, [r3, #12]
}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	b004      	add	sp, #16
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	40020000 	.word	0x40020000

08005e98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	089b      	lsrs	r3, r3, #2
 8005ea6:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005ea8:	4694      	mov	ip, r2
 8005eaa:	4463      	add	r3, ip
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	001a      	movs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	001a      	movs	r2, r3
 8005eba:	23ff      	movs	r3, #255	; 0xff
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	3b08      	subs	r3, #8
 8005ec0:	2114      	movs	r1, #20
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f7fa f93a 	bl	800013c <__udivsi3>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a07      	ldr	r2, [pc, #28]	; (8005eec <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005ed0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	221f      	movs	r2, #31
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2201      	movs	r2, #1
 8005eda:	409a      	lsls	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005ee0:	46c0      	nop			; (mov r8, r8)
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b004      	add	sp, #16
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	10008200 	.word	0x10008200
 8005eec:	40020880 	.word	0x40020880

08005ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	223f      	movs	r2, #63	; 0x3f
 8005efe:	4013      	ands	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a0a      	ldr	r2, [pc, #40]	; (8005f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f06:	4694      	mov	ip, r2
 8005f08:	4463      	add	r3, ip
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a07      	ldr	r2, [pc, #28]	; (8005f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2201      	movs	r2, #1
 8005f22:	409a      	lsls	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005f28:	46c0      	nop			; (mov r8, r8)
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b004      	add	sp, #16
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	1000823f 	.word	0x1000823f
 8005f34:	40020940 	.word	0x40020940

08005f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f46:	e147      	b.n	80061d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4091      	lsls	r1, r2
 8005f52:	000a      	movs	r2, r1
 8005f54:	4013      	ands	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d100      	bne.n	8005f60 <HAL_GPIO_Init+0x28>
 8005f5e:	e138      	b.n	80061d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2203      	movs	r2, #3
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d005      	beq.n	8005f78 <HAL_GPIO_Init+0x40>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2203      	movs	r2, #3
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d130      	bne.n	8005fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	2203      	movs	r2, #3
 8005f84:	409a      	lsls	r2, r3
 8005f86:	0013      	movs	r3, r2
 8005f88:	43da      	mvns	r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	0013      	movs	r3, r2
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fae:	2201      	movs	r2, #1
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	409a      	lsls	r2, r3
 8005fb4:	0013      	movs	r3, r2
 8005fb6:	43da      	mvns	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	0013      	movs	r3, r2
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d017      	beq.n	8006016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	0013      	movs	r3, r2
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	409a      	lsls	r2, r3
 8006008:	0013      	movs	r3, r2
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2203      	movs	r2, #3
 800601c:	4013      	ands	r3, r2
 800601e:	2b02      	cmp	r3, #2
 8006020:	d123      	bne.n	800606a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	08da      	lsrs	r2, r3, #3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3208      	adds	r2, #8
 800602a:	0092      	lsls	r2, r2, #2
 800602c:	58d3      	ldr	r3, [r2, r3]
 800602e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2207      	movs	r2, #7
 8006034:	4013      	ands	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	220f      	movs	r2, #15
 800603a:	409a      	lsls	r2, r3
 800603c:	0013      	movs	r3, r2
 800603e:	43da      	mvns	r2, r3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	4013      	ands	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2107      	movs	r1, #7
 800604e:	400b      	ands	r3, r1
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	409a      	lsls	r2, r3
 8006054:	0013      	movs	r3, r2
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	08da      	lsrs	r2, r3, #3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3208      	adds	r2, #8
 8006064:	0092      	lsls	r2, r2, #2
 8006066:	6939      	ldr	r1, [r7, #16]
 8006068:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	2203      	movs	r2, #3
 8006076:	409a      	lsls	r2, r3
 8006078:	0013      	movs	r3, r2
 800607a:	43da      	mvns	r2, r3
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	4013      	ands	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2203      	movs	r2, #3
 8006088:	401a      	ands	r2, r3
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	409a      	lsls	r2, r3
 8006090:	0013      	movs	r3, r2
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	23c0      	movs	r3, #192	; 0xc0
 80060a4:	029b      	lsls	r3, r3, #10
 80060a6:	4013      	ands	r3, r2
 80060a8:	d100      	bne.n	80060ac <HAL_GPIO_Init+0x174>
 80060aa:	e092      	b.n	80061d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80060ac:	4a50      	ldr	r2, [pc, #320]	; (80061f0 <HAL_GPIO_Init+0x2b8>)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	089b      	lsrs	r3, r3, #2
 80060b2:	3318      	adds	r3, #24
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	589b      	ldr	r3, [r3, r2]
 80060b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2203      	movs	r2, #3
 80060be:	4013      	ands	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	220f      	movs	r2, #15
 80060c4:	409a      	lsls	r2, r3
 80060c6:	0013      	movs	r3, r2
 80060c8:	43da      	mvns	r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4013      	ands	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	23a0      	movs	r3, #160	; 0xa0
 80060d4:	05db      	lsls	r3, r3, #23
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d013      	beq.n	8006102 <HAL_GPIO_Init+0x1ca>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a45      	ldr	r2, [pc, #276]	; (80061f4 <HAL_GPIO_Init+0x2bc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00d      	beq.n	80060fe <HAL_GPIO_Init+0x1c6>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a44      	ldr	r2, [pc, #272]	; (80061f8 <HAL_GPIO_Init+0x2c0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <HAL_GPIO_Init+0x1c2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a43      	ldr	r2, [pc, #268]	; (80061fc <HAL_GPIO_Init+0x2c4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d101      	bne.n	80060f6 <HAL_GPIO_Init+0x1be>
 80060f2:	2303      	movs	r3, #3
 80060f4:	e006      	b.n	8006104 <HAL_GPIO_Init+0x1cc>
 80060f6:	2305      	movs	r3, #5
 80060f8:	e004      	b.n	8006104 <HAL_GPIO_Init+0x1cc>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e002      	b.n	8006104 <HAL_GPIO_Init+0x1cc>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <HAL_GPIO_Init+0x1cc>
 8006102:	2300      	movs	r3, #0
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	2103      	movs	r1, #3
 8006108:	400a      	ands	r2, r1
 800610a:	00d2      	lsls	r2, r2, #3
 800610c:	4093      	lsls	r3, r2
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006114:	4936      	ldr	r1, [pc, #216]	; (80061f0 <HAL_GPIO_Init+0x2b8>)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	089b      	lsrs	r3, r3, #2
 800611a:	3318      	adds	r3, #24
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006122:	4b33      	ldr	r3, [pc, #204]	; (80061f0 <HAL_GPIO_Init+0x2b8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	43da      	mvns	r2, r3
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4013      	ands	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	2380      	movs	r3, #128	; 0x80
 8006138:	035b      	lsls	r3, r3, #13
 800613a:	4013      	ands	r3, r2
 800613c:	d003      	beq.n	8006146 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006146:	4b2a      	ldr	r3, [pc, #168]	; (80061f0 <HAL_GPIO_Init+0x2b8>)
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800614c:	4b28      	ldr	r3, [pc, #160]	; (80061f0 <HAL_GPIO_Init+0x2b8>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	43da      	mvns	r2, r3
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4013      	ands	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	039b      	lsls	r3, r3, #14
 8006164:	4013      	ands	r3, r2
 8006166:	d003      	beq.n	8006170 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006170:	4b1f      	ldr	r3, [pc, #124]	; (80061f0 <HAL_GPIO_Init+0x2b8>)
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006176:	4a1e      	ldr	r2, [pc, #120]	; (80061f0 <HAL_GPIO_Init+0x2b8>)
 8006178:	2384      	movs	r3, #132	; 0x84
 800617a:	58d3      	ldr	r3, [r2, r3]
 800617c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	43da      	mvns	r2, r3
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4013      	ands	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	2380      	movs	r3, #128	; 0x80
 800618e:	029b      	lsls	r3, r3, #10
 8006190:	4013      	ands	r3, r2
 8006192:	d003      	beq.n	800619c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800619c:	4914      	ldr	r1, [pc, #80]	; (80061f0 <HAL_GPIO_Init+0x2b8>)
 800619e:	2284      	movs	r2, #132	; 0x84
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80061a4:	4a12      	ldr	r2, [pc, #72]	; (80061f0 <HAL_GPIO_Init+0x2b8>)
 80061a6:	2380      	movs	r3, #128	; 0x80
 80061a8:	58d3      	ldr	r3, [r2, r3]
 80061aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	43da      	mvns	r2, r3
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4013      	ands	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	025b      	lsls	r3, r3, #9
 80061be:	4013      	ands	r3, r2
 80061c0:	d003      	beq.n	80061ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80061ca:	4909      	ldr	r1, [pc, #36]	; (80061f0 <HAL_GPIO_Init+0x2b8>)
 80061cc:	2280      	movs	r2, #128	; 0x80
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	3301      	adds	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	40da      	lsrs	r2, r3
 80061e0:	1e13      	subs	r3, r2, #0
 80061e2:	d000      	beq.n	80061e6 <HAL_GPIO_Init+0x2ae>
 80061e4:	e6b0      	b.n	8005f48 <HAL_GPIO_Init+0x10>
  }
}
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	46c0      	nop			; (mov r8, r8)
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b006      	add	sp, #24
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40021800 	.word	0x40021800
 80061f4:	50000400 	.word	0x50000400
 80061f8:	50000800 	.word	0x50000800
 80061fc:	50000c00 	.word	0x50000c00

08006200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	0008      	movs	r0, r1
 800620a:	0011      	movs	r1, r2
 800620c:	1cbb      	adds	r3, r7, #2
 800620e:	1c02      	adds	r2, r0, #0
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	1c7b      	adds	r3, r7, #1
 8006214:	1c0a      	adds	r2, r1, #0
 8006216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006218:	1c7b      	adds	r3, r7, #1
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006220:	1cbb      	adds	r3, r7, #2
 8006222:	881a      	ldrh	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006228:	e003      	b.n	8006232 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800622a:	1cbb      	adds	r3, r7, #2
 800622c:	881a      	ldrh	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	46bd      	mov	sp, r7
 8006236:	b002      	add	sp, #8
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	0002      	movs	r2, r0
 8006244:	1dbb      	adds	r3, r7, #6
 8006246:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006248:	4b10      	ldr	r3, [pc, #64]	; (800628c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	1dba      	adds	r2, r7, #6
 800624e:	8812      	ldrh	r2, [r2, #0]
 8006250:	4013      	ands	r3, r2
 8006252:	d008      	beq.n	8006266 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006254:	4b0d      	ldr	r3, [pc, #52]	; (800628c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006256:	1dba      	adds	r2, r7, #6
 8006258:	8812      	ldrh	r2, [r2, #0]
 800625a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800625c:	1dbb      	adds	r3, r7, #6
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	0018      	movs	r0, r3
 8006262:	f000 f815 	bl	8006290 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006266:	4b09      	ldr	r3, [pc, #36]	; (800628c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	1dba      	adds	r2, r7, #6
 800626c:	8812      	ldrh	r2, [r2, #0]
 800626e:	4013      	ands	r3, r2
 8006270:	d008      	beq.n	8006284 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006272:	4b06      	ldr	r3, [pc, #24]	; (800628c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006274:	1dba      	adds	r2, r7, #6
 8006276:	8812      	ldrh	r2, [r2, #0]
 8006278:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800627a:	1dbb      	adds	r3, r7, #6
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	0018      	movs	r0, r3
 8006280:	f000 f810 	bl	80062a4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006284:	46c0      	nop			; (mov r8, r8)
 8006286:	46bd      	mov	sp, r7
 8006288:	b002      	add	sp, #8
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40021800 	.word	0x40021800

08006290 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	0002      	movs	r2, r0
 8006298:	1dbb      	adds	r3, r7, #6
 800629a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	b002      	add	sp, #8
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	0002      	movs	r2, r0
 80062ac:	1dbb      	adds	r3, r7, #6
 80062ae:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80062b0:	46c0      	nop			; (mov r8, r8)
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b002      	add	sp, #8
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e082      	b.n	80063d0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2241      	movs	r2, #65	; 0x41
 80062ce:	5c9b      	ldrb	r3, [r3, r2]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d107      	bne.n	80062e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2240      	movs	r2, #64	; 0x40
 80062da:	2100      	movs	r1, #0
 80062dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	0018      	movs	r0, r3
 80062e2:	f7fe f95d 	bl	80045a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2241      	movs	r2, #65	; 0x41
 80062ea:	2124      	movs	r1, #36	; 0x24
 80062ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2101      	movs	r1, #1
 80062fa:	438a      	bics	r2, r1
 80062fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4934      	ldr	r1, [pc, #208]	; (80063d8 <HAL_I2C_Init+0x120>)
 8006308:	400a      	ands	r2, r1
 800630a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4931      	ldr	r1, [pc, #196]	; (80063dc <HAL_I2C_Init+0x124>)
 8006318:	400a      	ands	r2, r1
 800631a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d108      	bne.n	8006336 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2180      	movs	r1, #128	; 0x80
 800632e:	0209      	lsls	r1, r1, #8
 8006330:	430a      	orrs	r2, r1
 8006332:	609a      	str	r2, [r3, #8]
 8006334:	e007      	b.n	8006346 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2184      	movs	r1, #132	; 0x84
 8006340:	0209      	lsls	r1, r1, #8
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d104      	bne.n	8006358 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2280      	movs	r2, #128	; 0x80
 8006354:	0112      	lsls	r2, r2, #4
 8006356:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	491f      	ldr	r1, [pc, #124]	; (80063e0 <HAL_I2C_Init+0x128>)
 8006364:	430a      	orrs	r2, r1
 8006366:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	491a      	ldr	r1, [pc, #104]	; (80063dc <HAL_I2C_Init+0x124>)
 8006374:	400a      	ands	r2, r1
 8006376:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	431a      	orrs	r2, r3
 8006382:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69d9      	ldr	r1, [r3, #28]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1a      	ldr	r2, [r3, #32]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2101      	movs	r1, #1
 80063ae:	430a      	orrs	r2, r1
 80063b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2241      	movs	r2, #65	; 0x41
 80063bc:	2120      	movs	r1, #32
 80063be:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2242      	movs	r2, #66	; 0x42
 80063ca:	2100      	movs	r1, #0
 80063cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	0018      	movs	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b002      	add	sp, #8
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	f0ffffff 	.word	0xf0ffffff
 80063dc:	ffff7fff 	.word	0xffff7fff
 80063e0:	02008000 	.word	0x02008000

080063e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2241      	movs	r2, #65	; 0x41
 80063f2:	5c9b      	ldrb	r3, [r3, r2]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d138      	bne.n	800646c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2240      	movs	r2, #64	; 0x40
 80063fe:	5c9b      	ldrb	r3, [r3, r2]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006404:	2302      	movs	r3, #2
 8006406:	e032      	b.n	800646e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2240      	movs	r2, #64	; 0x40
 800640c:	2101      	movs	r1, #1
 800640e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2241      	movs	r2, #65	; 0x41
 8006414:	2124      	movs	r1, #36	; 0x24
 8006416:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2101      	movs	r1, #1
 8006424:	438a      	bics	r2, r1
 8006426:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4911      	ldr	r1, [pc, #68]	; (8006478 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006434:	400a      	ands	r2, r1
 8006436:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6819      	ldr	r1, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2101      	movs	r1, #1
 8006454:	430a      	orrs	r2, r1
 8006456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2241      	movs	r2, #65	; 0x41
 800645c:	2120      	movs	r1, #32
 800645e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2240      	movs	r2, #64	; 0x40
 8006464:	2100      	movs	r1, #0
 8006466:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	e000      	b.n	800646e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800646c:	2302      	movs	r3, #2
  }
}
 800646e:	0018      	movs	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	b002      	add	sp, #8
 8006474:	bd80      	pop	{r7, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	ffffefff 	.word	0xffffefff

0800647c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2241      	movs	r2, #65	; 0x41
 800648a:	5c9b      	ldrb	r3, [r3, r2]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b20      	cmp	r3, #32
 8006490:	d139      	bne.n	8006506 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2240      	movs	r2, #64	; 0x40
 8006496:	5c9b      	ldrb	r3, [r3, r2]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800649c:	2302      	movs	r3, #2
 800649e:	e033      	b.n	8006508 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2240      	movs	r2, #64	; 0x40
 80064a4:	2101      	movs	r1, #1
 80064a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2241      	movs	r2, #65	; 0x41
 80064ac:	2124      	movs	r1, #36	; 0x24
 80064ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2101      	movs	r1, #1
 80064bc:	438a      	bics	r2, r1
 80064be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4a11      	ldr	r2, [pc, #68]	; (8006510 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2101      	movs	r1, #1
 80064ee:	430a      	orrs	r2, r1
 80064f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2241      	movs	r2, #65	; 0x41
 80064f6:	2120      	movs	r1, #32
 80064f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2240      	movs	r2, #64	; 0x40
 80064fe:	2100      	movs	r1, #0
 8006500:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	e000      	b.n	8006508 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006506:	2302      	movs	r3, #2
  }
}
 8006508:	0018      	movs	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	b004      	add	sp, #16
 800650e:	bd80      	pop	{r7, pc}
 8006510:	fffff0ff 	.word	0xfffff0ff

08006514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800651c:	4b19      	ldr	r3, [pc, #100]	; (8006584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a19      	ldr	r2, [pc, #100]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006522:	4013      	ands	r3, r2
 8006524:	0019      	movs	r1, r3
 8006526:	4b17      	ldr	r3, [pc, #92]	; (8006584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	430a      	orrs	r2, r1
 800652c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	2380      	movs	r3, #128	; 0x80
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	429a      	cmp	r2, r3
 8006536:	d11f      	bne.n	8006578 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006538:	4b14      	ldr	r3, [pc, #80]	; (800658c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	0013      	movs	r3, r2
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	189b      	adds	r3, r3, r2
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	4912      	ldr	r1, [pc, #72]	; (8006590 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006546:	0018      	movs	r0, r3
 8006548:	f7f9 fdf8 	bl	800013c <__udivsi3>
 800654c:	0003      	movs	r3, r0
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006552:	e008      	b.n	8006566 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3b01      	subs	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e001      	b.n	8006566 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e009      	b.n	800657a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006566:	4b07      	ldr	r3, [pc, #28]	; (8006584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006568:	695a      	ldr	r2, [r3, #20]
 800656a:	2380      	movs	r3, #128	; 0x80
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	401a      	ands	r2, r3
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	429a      	cmp	r2, r3
 8006576:	d0ed      	beq.n	8006554 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	0018      	movs	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	b004      	add	sp, #16
 8006580:	bd80      	pop	{r7, pc}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	40007000 	.word	0x40007000
 8006588:	fffff9ff 	.word	0xfffff9ff
 800658c:	20000000 	.word	0x20000000
 8006590:	000f4240 	.word	0x000f4240

08006594 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006598:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	23e0      	movs	r3, #224	; 0xe0
 800659e:	01db      	lsls	r3, r3, #7
 80065a0:	4013      	ands	r3, r2
}
 80065a2:	0018      	movs	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40021000 	.word	0x40021000

080065ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e2fe      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2201      	movs	r2, #1
 80065c4:	4013      	ands	r3, r2
 80065c6:	d100      	bne.n	80065ca <HAL_RCC_OscConfig+0x1e>
 80065c8:	e07c      	b.n	80066c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ca:	4bc3      	ldr	r3, [pc, #780]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2238      	movs	r2, #56	; 0x38
 80065d0:	4013      	ands	r3, r2
 80065d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065d4:	4bc0      	ldr	r3, [pc, #768]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2203      	movs	r2, #3
 80065da:	4013      	ands	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d102      	bne.n	80065ea <HAL_RCC_OscConfig+0x3e>
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d002      	beq.n	80065f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d10b      	bne.n	8006608 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f0:	4bb9      	ldr	r3, [pc, #740]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	2380      	movs	r3, #128	; 0x80
 80065f6:	029b      	lsls	r3, r3, #10
 80065f8:	4013      	ands	r3, r2
 80065fa:	d062      	beq.n	80066c2 <HAL_RCC_OscConfig+0x116>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d15e      	bne.n	80066c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e2d9      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	025b      	lsls	r3, r3, #9
 8006610:	429a      	cmp	r2, r3
 8006612:	d107      	bne.n	8006624 <HAL_RCC_OscConfig+0x78>
 8006614:	4bb0      	ldr	r3, [pc, #704]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4baf      	ldr	r3, [pc, #700]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800661a:	2180      	movs	r1, #128	; 0x80
 800661c:	0249      	lsls	r1, r1, #9
 800661e:	430a      	orrs	r2, r1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e020      	b.n	8006666 <HAL_RCC_OscConfig+0xba>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	23a0      	movs	r3, #160	; 0xa0
 800662a:	02db      	lsls	r3, r3, #11
 800662c:	429a      	cmp	r2, r3
 800662e:	d10e      	bne.n	800664e <HAL_RCC_OscConfig+0xa2>
 8006630:	4ba9      	ldr	r3, [pc, #676]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4ba8      	ldr	r3, [pc, #672]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006636:	2180      	movs	r1, #128	; 0x80
 8006638:	02c9      	lsls	r1, r1, #11
 800663a:	430a      	orrs	r2, r1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	4ba6      	ldr	r3, [pc, #664]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4ba5      	ldr	r3, [pc, #660]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006644:	2180      	movs	r1, #128	; 0x80
 8006646:	0249      	lsls	r1, r1, #9
 8006648:	430a      	orrs	r2, r1
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e00b      	b.n	8006666 <HAL_RCC_OscConfig+0xba>
 800664e:	4ba2      	ldr	r3, [pc, #648]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4ba1      	ldr	r3, [pc, #644]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006654:	49a1      	ldr	r1, [pc, #644]	; (80068dc <HAL_RCC_OscConfig+0x330>)
 8006656:	400a      	ands	r2, r1
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	4b9f      	ldr	r3, [pc, #636]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	4b9e      	ldr	r3, [pc, #632]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006660:	499f      	ldr	r1, [pc, #636]	; (80068e0 <HAL_RCC_OscConfig+0x334>)
 8006662:	400a      	ands	r2, r1
 8006664:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d014      	beq.n	8006698 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666e:	f7fe fa8b 	bl	8004b88 <HAL_GetTick>
 8006672:	0003      	movs	r3, r0
 8006674:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006678:	f7fe fa86 	bl	8004b88 <HAL_GetTick>
 800667c:	0002      	movs	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b64      	cmp	r3, #100	; 0x64
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e298      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800668a:	4b93      	ldr	r3, [pc, #588]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	2380      	movs	r3, #128	; 0x80
 8006690:	029b      	lsls	r3, r3, #10
 8006692:	4013      	ands	r3, r2
 8006694:	d0f0      	beq.n	8006678 <HAL_RCC_OscConfig+0xcc>
 8006696:	e015      	b.n	80066c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006698:	f7fe fa76 	bl	8004b88 <HAL_GetTick>
 800669c:	0003      	movs	r3, r0
 800669e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066a2:	f7fe fa71 	bl	8004b88 <HAL_GetTick>
 80066a6:	0002      	movs	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b64      	cmp	r3, #100	; 0x64
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e283      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066b4:	4b88      	ldr	r3, [pc, #544]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	2380      	movs	r3, #128	; 0x80
 80066ba:	029b      	lsls	r3, r3, #10
 80066bc:	4013      	ands	r3, r2
 80066be:	d1f0      	bne.n	80066a2 <HAL_RCC_OscConfig+0xf6>
 80066c0:	e000      	b.n	80066c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2202      	movs	r2, #2
 80066ca:	4013      	ands	r3, r2
 80066cc:	d100      	bne.n	80066d0 <HAL_RCC_OscConfig+0x124>
 80066ce:	e099      	b.n	8006804 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066d0:	4b81      	ldr	r3, [pc, #516]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2238      	movs	r2, #56	; 0x38
 80066d6:	4013      	ands	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066da:	4b7f      	ldr	r3, [pc, #508]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2203      	movs	r2, #3
 80066e0:	4013      	ands	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d102      	bne.n	80066f0 <HAL_RCC_OscConfig+0x144>
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d002      	beq.n	80066f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d135      	bne.n	8006762 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066f6:	4b78      	ldr	r3, [pc, #480]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	2380      	movs	r3, #128	; 0x80
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4013      	ands	r3, r2
 8006700:	d005      	beq.n	800670e <HAL_RCC_OscConfig+0x162>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e256      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800670e:	4b72      	ldr	r3, [pc, #456]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4a74      	ldr	r2, [pc, #464]	; (80068e4 <HAL_RCC_OscConfig+0x338>)
 8006714:	4013      	ands	r3, r2
 8006716:	0019      	movs	r1, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	021a      	lsls	r2, r3, #8
 800671e:	4b6e      	ldr	r3, [pc, #440]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006720:	430a      	orrs	r2, r1
 8006722:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d112      	bne.n	8006750 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800672a:	4b6b      	ldr	r3, [pc, #428]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a6e      	ldr	r2, [pc, #440]	; (80068e8 <HAL_RCC_OscConfig+0x33c>)
 8006730:	4013      	ands	r3, r2
 8006732:	0019      	movs	r1, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	4b67      	ldr	r3, [pc, #412]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800673a:	430a      	orrs	r2, r1
 800673c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800673e:	4b66      	ldr	r3, [pc, #408]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	0adb      	lsrs	r3, r3, #11
 8006744:	2207      	movs	r2, #7
 8006746:	4013      	ands	r3, r2
 8006748:	4a68      	ldr	r2, [pc, #416]	; (80068ec <HAL_RCC_OscConfig+0x340>)
 800674a:	40da      	lsrs	r2, r3
 800674c:	4b68      	ldr	r3, [pc, #416]	; (80068f0 <HAL_RCC_OscConfig+0x344>)
 800674e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006750:	4b68      	ldr	r3, [pc, #416]	; (80068f4 <HAL_RCC_OscConfig+0x348>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	0018      	movs	r0, r3
 8006756:	f7fe f9bb 	bl	8004ad0 <HAL_InitTick>
 800675a:	1e03      	subs	r3, r0, #0
 800675c:	d051      	beq.n	8006802 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e22c      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d030      	beq.n	80067cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800676a:	4b5b      	ldr	r3, [pc, #364]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a5e      	ldr	r2, [pc, #376]	; (80068e8 <HAL_RCC_OscConfig+0x33c>)
 8006770:	4013      	ands	r3, r2
 8006772:	0019      	movs	r1, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	4b57      	ldr	r3, [pc, #348]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800677a:	430a      	orrs	r2, r1
 800677c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800677e:	4b56      	ldr	r3, [pc, #344]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b55      	ldr	r3, [pc, #340]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006784:	2180      	movs	r1, #128	; 0x80
 8006786:	0049      	lsls	r1, r1, #1
 8006788:	430a      	orrs	r2, r1
 800678a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678c:	f7fe f9fc 	bl	8004b88 <HAL_GetTick>
 8006790:	0003      	movs	r3, r0
 8006792:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006796:	f7fe f9f7 	bl	8004b88 <HAL_GetTick>
 800679a:	0002      	movs	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e209      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067a8:	4b4b      	ldr	r3, [pc, #300]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	4013      	ands	r3, r2
 80067b2:	d0f0      	beq.n	8006796 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b4:	4b48      	ldr	r3, [pc, #288]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4a4a      	ldr	r2, [pc, #296]	; (80068e4 <HAL_RCC_OscConfig+0x338>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	021a      	lsls	r2, r3, #8
 80067c4:	4b44      	ldr	r3, [pc, #272]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
 80067ca:	e01b      	b.n	8006804 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80067cc:	4b42      	ldr	r3, [pc, #264]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	4b41      	ldr	r3, [pc, #260]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80067d2:	4949      	ldr	r1, [pc, #292]	; (80068f8 <HAL_RCC_OscConfig+0x34c>)
 80067d4:	400a      	ands	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d8:	f7fe f9d6 	bl	8004b88 <HAL_GetTick>
 80067dc:	0003      	movs	r3, r0
 80067de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067e0:	e008      	b.n	80067f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067e2:	f7fe f9d1 	bl	8004b88 <HAL_GetTick>
 80067e6:	0002      	movs	r2, r0
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e1e3      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067f4:	4b38      	ldr	r3, [pc, #224]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	2380      	movs	r3, #128	; 0x80
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	4013      	ands	r3, r2
 80067fe:	d1f0      	bne.n	80067e2 <HAL_RCC_OscConfig+0x236>
 8006800:	e000      	b.n	8006804 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006802:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2208      	movs	r2, #8
 800680a:	4013      	ands	r3, r2
 800680c:	d047      	beq.n	800689e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800680e:	4b32      	ldr	r3, [pc, #200]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	2238      	movs	r2, #56	; 0x38
 8006814:	4013      	ands	r3, r2
 8006816:	2b18      	cmp	r3, #24
 8006818:	d10a      	bne.n	8006830 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800681a:	4b2f      	ldr	r3, [pc, #188]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800681c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681e:	2202      	movs	r2, #2
 8006820:	4013      	ands	r3, r2
 8006822:	d03c      	beq.n	800689e <HAL_RCC_OscConfig+0x2f2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d138      	bne.n	800689e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e1c5      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d019      	beq.n	800686c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006838:	4b27      	ldr	r3, [pc, #156]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800683a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800683c:	4b26      	ldr	r3, [pc, #152]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800683e:	2101      	movs	r1, #1
 8006840:	430a      	orrs	r2, r1
 8006842:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fe f9a0 	bl	8004b88 <HAL_GetTick>
 8006848:	0003      	movs	r3, r0
 800684a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800684e:	f7fe f99b 	bl	8004b88 <HAL_GetTick>
 8006852:	0002      	movs	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e1ad      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006860:	4b1d      	ldr	r3, [pc, #116]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006864:	2202      	movs	r2, #2
 8006866:	4013      	ands	r3, r2
 8006868:	d0f1      	beq.n	800684e <HAL_RCC_OscConfig+0x2a2>
 800686a:	e018      	b.n	800689e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800686c:	4b1a      	ldr	r3, [pc, #104]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 800686e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006870:	4b19      	ldr	r3, [pc, #100]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006872:	2101      	movs	r1, #1
 8006874:	438a      	bics	r2, r1
 8006876:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fe f986 	bl	8004b88 <HAL_GetTick>
 800687c:	0003      	movs	r3, r0
 800687e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006882:	f7fe f981 	bl	8004b88 <HAL_GetTick>
 8006886:	0002      	movs	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e193      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006894:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 8006896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006898:	2202      	movs	r2, #2
 800689a:	4013      	ands	r3, r2
 800689c:	d1f1      	bne.n	8006882 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2204      	movs	r2, #4
 80068a4:	4013      	ands	r3, r2
 80068a6:	d100      	bne.n	80068aa <HAL_RCC_OscConfig+0x2fe>
 80068a8:	e0c6      	b.n	8006a38 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068aa:	231f      	movs	r3, #31
 80068ac:	18fb      	adds	r3, r7, r3
 80068ae:	2200      	movs	r2, #0
 80068b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80068b2:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	2238      	movs	r2, #56	; 0x38
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d11e      	bne.n	80068fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <HAL_RCC_OscConfig+0x32c>)
 80068c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c2:	2202      	movs	r2, #2
 80068c4:	4013      	ands	r3, r2
 80068c6:	d100      	bne.n	80068ca <HAL_RCC_OscConfig+0x31e>
 80068c8:	e0b6      	b.n	8006a38 <HAL_RCC_OscConfig+0x48c>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d000      	beq.n	80068d4 <HAL_RCC_OscConfig+0x328>
 80068d2:	e0b1      	b.n	8006a38 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e171      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
 80068d8:	40021000 	.word	0x40021000
 80068dc:	fffeffff 	.word	0xfffeffff
 80068e0:	fffbffff 	.word	0xfffbffff
 80068e4:	ffff80ff 	.word	0xffff80ff
 80068e8:	ffffc7ff 	.word	0xffffc7ff
 80068ec:	00f42400 	.word	0x00f42400
 80068f0:	20000000 	.word	0x20000000
 80068f4:	20000004 	.word	0x20000004
 80068f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068fc:	4bb1      	ldr	r3, [pc, #708]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 80068fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	055b      	lsls	r3, r3, #21
 8006904:	4013      	ands	r3, r2
 8006906:	d101      	bne.n	800690c <HAL_RCC_OscConfig+0x360>
 8006908:	2301      	movs	r3, #1
 800690a:	e000      	b.n	800690e <HAL_RCC_OscConfig+0x362>
 800690c:	2300      	movs	r3, #0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d011      	beq.n	8006936 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006912:	4bac      	ldr	r3, [pc, #688]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006916:	4bab      	ldr	r3, [pc, #684]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006918:	2180      	movs	r1, #128	; 0x80
 800691a:	0549      	lsls	r1, r1, #21
 800691c:	430a      	orrs	r2, r1
 800691e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006920:	4ba8      	ldr	r3, [pc, #672]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006924:	2380      	movs	r3, #128	; 0x80
 8006926:	055b      	lsls	r3, r3, #21
 8006928:	4013      	ands	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800692e:	231f      	movs	r3, #31
 8006930:	18fb      	adds	r3, r7, r3
 8006932:	2201      	movs	r2, #1
 8006934:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006936:	4ba4      	ldr	r3, [pc, #656]	; (8006bc8 <HAL_RCC_OscConfig+0x61c>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	2380      	movs	r3, #128	; 0x80
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4013      	ands	r3, r2
 8006940:	d11a      	bne.n	8006978 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006942:	4ba1      	ldr	r3, [pc, #644]	; (8006bc8 <HAL_RCC_OscConfig+0x61c>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4ba0      	ldr	r3, [pc, #640]	; (8006bc8 <HAL_RCC_OscConfig+0x61c>)
 8006948:	2180      	movs	r1, #128	; 0x80
 800694a:	0049      	lsls	r1, r1, #1
 800694c:	430a      	orrs	r2, r1
 800694e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006950:	f7fe f91a 	bl	8004b88 <HAL_GetTick>
 8006954:	0003      	movs	r3, r0
 8006956:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695a:	f7fe f915 	bl	8004b88 <HAL_GetTick>
 800695e:	0002      	movs	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e127      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800696c:	4b96      	ldr	r3, [pc, #600]	; (8006bc8 <HAL_RCC_OscConfig+0x61c>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	4013      	ands	r3, r2
 8006976:	d0f0      	beq.n	800695a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d106      	bne.n	800698e <HAL_RCC_OscConfig+0x3e2>
 8006980:	4b90      	ldr	r3, [pc, #576]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006984:	4b8f      	ldr	r3, [pc, #572]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006986:	2101      	movs	r1, #1
 8006988:	430a      	orrs	r2, r1
 800698a:	65da      	str	r2, [r3, #92]	; 0x5c
 800698c:	e01c      	b.n	80069c8 <HAL_RCC_OscConfig+0x41c>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2b05      	cmp	r3, #5
 8006994:	d10c      	bne.n	80069b0 <HAL_RCC_OscConfig+0x404>
 8006996:	4b8b      	ldr	r3, [pc, #556]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006998:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800699a:	4b8a      	ldr	r3, [pc, #552]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 800699c:	2104      	movs	r1, #4
 800699e:	430a      	orrs	r2, r1
 80069a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80069a2:	4b88      	ldr	r3, [pc, #544]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 80069a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069a6:	4b87      	ldr	r3, [pc, #540]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 80069a8:	2101      	movs	r1, #1
 80069aa:	430a      	orrs	r2, r1
 80069ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80069ae:	e00b      	b.n	80069c8 <HAL_RCC_OscConfig+0x41c>
 80069b0:	4b84      	ldr	r3, [pc, #528]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 80069b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069b4:	4b83      	ldr	r3, [pc, #524]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 80069b6:	2101      	movs	r1, #1
 80069b8:	438a      	bics	r2, r1
 80069ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80069bc:	4b81      	ldr	r3, [pc, #516]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 80069be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069c0:	4b80      	ldr	r3, [pc, #512]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 80069c2:	2104      	movs	r1, #4
 80069c4:	438a      	bics	r2, r1
 80069c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d014      	beq.n	80069fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d0:	f7fe f8da 	bl	8004b88 <HAL_GetTick>
 80069d4:	0003      	movs	r3, r0
 80069d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069d8:	e009      	b.n	80069ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069da:	f7fe f8d5 	bl	8004b88 <HAL_GetTick>
 80069de:	0002      	movs	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	4a79      	ldr	r2, [pc, #484]	; (8006bcc <HAL_RCC_OscConfig+0x620>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e0e6      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ee:	4b75      	ldr	r3, [pc, #468]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 80069f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f2:	2202      	movs	r2, #2
 80069f4:	4013      	ands	r3, r2
 80069f6:	d0f0      	beq.n	80069da <HAL_RCC_OscConfig+0x42e>
 80069f8:	e013      	b.n	8006a22 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fa:	f7fe f8c5 	bl	8004b88 <HAL_GetTick>
 80069fe:	0003      	movs	r3, r0
 8006a00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a02:	e009      	b.n	8006a18 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a04:	f7fe f8c0 	bl	8004b88 <HAL_GetTick>
 8006a08:	0002      	movs	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	4a6f      	ldr	r2, [pc, #444]	; (8006bcc <HAL_RCC_OscConfig+0x620>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e0d1      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a18:	4b6a      	ldr	r3, [pc, #424]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d1f0      	bne.n	8006a04 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006a22:	231f      	movs	r3, #31
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d105      	bne.n	8006a38 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006a2c:	4b65      	ldr	r3, [pc, #404]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a30:	4b64      	ldr	r3, [pc, #400]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006a32:	4967      	ldr	r1, [pc, #412]	; (8006bd0 <HAL_RCC_OscConfig+0x624>)
 8006a34:	400a      	ands	r2, r1
 8006a36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d100      	bne.n	8006a42 <HAL_RCC_OscConfig+0x496>
 8006a40:	e0bb      	b.n	8006bba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a42:	4b60      	ldr	r3, [pc, #384]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2238      	movs	r2, #56	; 0x38
 8006a48:	4013      	ands	r3, r2
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d100      	bne.n	8006a50 <HAL_RCC_OscConfig+0x4a4>
 8006a4e:	e07b      	b.n	8006b48 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d156      	bne.n	8006b06 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a58:	4b5a      	ldr	r3, [pc, #360]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	4b59      	ldr	r3, [pc, #356]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006a5e:	495d      	ldr	r1, [pc, #372]	; (8006bd4 <HAL_RCC_OscConfig+0x628>)
 8006a60:	400a      	ands	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a64:	f7fe f890 	bl	8004b88 <HAL_GetTick>
 8006a68:	0003      	movs	r3, r0
 8006a6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a6e:	f7fe f88b 	bl	8004b88 <HAL_GetTick>
 8006a72:	0002      	movs	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e09d      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a80:	4b50      	ldr	r3, [pc, #320]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	2380      	movs	r3, #128	; 0x80
 8006a86:	049b      	lsls	r3, r3, #18
 8006a88:	4013      	ands	r3, r2
 8006a8a:	d1f0      	bne.n	8006a6e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a8c:	4b4d      	ldr	r3, [pc, #308]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	4a51      	ldr	r2, [pc, #324]	; (8006bd8 <HAL_RCC_OscConfig+0x62c>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	0019      	movs	r1, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1a      	ldr	r2, [r3, #32]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	4b42      	ldr	r3, [pc, #264]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006abc:	430a      	orrs	r2, r1
 8006abe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ac0:	4b40      	ldr	r3, [pc, #256]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	4b3f      	ldr	r3, [pc, #252]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006ac6:	2180      	movs	r1, #128	; 0x80
 8006ac8:	0449      	lsls	r1, r1, #17
 8006aca:	430a      	orrs	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006ace:	4b3d      	ldr	r3, [pc, #244]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	4b3c      	ldr	r3, [pc, #240]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006ad4:	2180      	movs	r1, #128	; 0x80
 8006ad6:	0549      	lsls	r1, r1, #21
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006adc:	f7fe f854 	bl	8004b88 <HAL_GetTick>
 8006ae0:	0003      	movs	r3, r0
 8006ae2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae6:	f7fe f84f 	bl	8004b88 <HAL_GetTick>
 8006aea:	0002      	movs	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e061      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006af8:	4b32      	ldr	r3, [pc, #200]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	049b      	lsls	r3, r3, #18
 8006b00:	4013      	ands	r3, r2
 8006b02:	d0f0      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x53a>
 8006b04:	e059      	b.n	8006bba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b06:	4b2f      	ldr	r3, [pc, #188]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	4b2e      	ldr	r3, [pc, #184]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006b0c:	4931      	ldr	r1, [pc, #196]	; (8006bd4 <HAL_RCC_OscConfig+0x628>)
 8006b0e:	400a      	ands	r2, r1
 8006b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b12:	f7fe f839 	bl	8004b88 <HAL_GetTick>
 8006b16:	0003      	movs	r3, r0
 8006b18:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b1c:	f7fe f834 	bl	8004b88 <HAL_GetTick>
 8006b20:	0002      	movs	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e046      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b2e:	4b25      	ldr	r3, [pc, #148]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	2380      	movs	r3, #128	; 0x80
 8006b34:	049b      	lsls	r3, r3, #18
 8006b36:	4013      	ands	r3, r2
 8006b38:	d1f0      	bne.n	8006b1c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006b3a:	4b22      	ldr	r3, [pc, #136]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	4b21      	ldr	r3, [pc, #132]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006b40:	4926      	ldr	r1, [pc, #152]	; (8006bdc <HAL_RCC_OscConfig+0x630>)
 8006b42:	400a      	ands	r2, r1
 8006b44:	60da      	str	r2, [r3, #12]
 8006b46:	e038      	b.n	8006bba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e033      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006b54:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <HAL_RCC_OscConfig+0x618>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	401a      	ands	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d126      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2270      	movs	r2, #112	; 0x70
 8006b6c:	401a      	ands	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d11f      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	23fe      	movs	r3, #254	; 0xfe
 8006b7a:	01db      	lsls	r3, r3, #7
 8006b7c:	401a      	ands	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d116      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	23f8      	movs	r3, #248	; 0xf8
 8006b8c:	039b      	lsls	r3, r3, #14
 8006b8e:	401a      	ands	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d10e      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	23e0      	movs	r3, #224	; 0xe0
 8006b9c:	051b      	lsls	r3, r3, #20
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d106      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	0f5b      	lsrs	r3, r3, #29
 8006bac:	075a      	lsls	r2, r3, #29
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d001      	beq.n	8006bba <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	b008      	add	sp, #32
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	40007000 	.word	0x40007000
 8006bcc:	00001388 	.word	0x00001388
 8006bd0:	efffffff 	.word	0xefffffff
 8006bd4:	feffffff 	.word	0xfeffffff
 8006bd8:	11c1808c 	.word	0x11c1808c
 8006bdc:	eefefffc 	.word	0xeefefffc

08006be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0e9      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bf4:	4b76      	ldr	r3, [pc, #472]	; (8006dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d91e      	bls.n	8006c40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c02:	4b73      	ldr	r3, [pc, #460]	; (8006dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2207      	movs	r2, #7
 8006c08:	4393      	bics	r3, r2
 8006c0a:	0019      	movs	r1, r3
 8006c0c:	4b70      	ldr	r3, [pc, #448]	; (8006dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c14:	f7fd ffb8 	bl	8004b88 <HAL_GetTick>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c1c:	e009      	b.n	8006c32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c1e:	f7fd ffb3 	bl	8004b88 <HAL_GetTick>
 8006c22:	0002      	movs	r2, r0
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	4a6a      	ldr	r2, [pc, #424]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e0ca      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c32:	4b67      	ldr	r3, [pc, #412]	; (8006dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2207      	movs	r2, #7
 8006c38:	4013      	ands	r3, r2
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d1ee      	bne.n	8006c1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2202      	movs	r2, #2
 8006c46:	4013      	ands	r3, r2
 8006c48:	d015      	beq.n	8006c76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2204      	movs	r2, #4
 8006c50:	4013      	ands	r3, r2
 8006c52:	d006      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006c54:	4b60      	ldr	r3, [pc, #384]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	4b5f      	ldr	r3, [pc, #380]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006c5a:	21e0      	movs	r1, #224	; 0xe0
 8006c5c:	01c9      	lsls	r1, r1, #7
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c62:	4b5d      	ldr	r3, [pc, #372]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	4a5d      	ldr	r2, [pc, #372]	; (8006ddc <HAL_RCC_ClockConfig+0x1fc>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	0019      	movs	r1, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	4b59      	ldr	r3, [pc, #356]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006c72:	430a      	orrs	r2, r1
 8006c74:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	d057      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d107      	bne.n	8006c98 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c88:	4b53      	ldr	r3, [pc, #332]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	2380      	movs	r3, #128	; 0x80
 8006c8e:	029b      	lsls	r3, r3, #10
 8006c90:	4013      	ands	r3, r2
 8006c92:	d12b      	bne.n	8006cec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e097      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ca0:	4b4d      	ldr	r3, [pc, #308]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	2380      	movs	r3, #128	; 0x80
 8006ca6:	049b      	lsls	r3, r3, #18
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d11f      	bne.n	8006cec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e08b      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cb8:	4b47      	ldr	r3, [pc, #284]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	2380      	movs	r3, #128	; 0x80
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	d113      	bne.n	8006cec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e07f      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d106      	bne.n	8006cde <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cd0:	4b41      	ldr	r3, [pc, #260]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d108      	bne.n	8006cec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e074      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cde:	4b3e      	ldr	r3, [pc, #248]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d101      	bne.n	8006cec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e06d      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cec:	4b3a      	ldr	r3, [pc, #232]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	4393      	bics	r3, r2
 8006cf4:	0019      	movs	r1, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	4b37      	ldr	r3, [pc, #220]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d00:	f7fd ff42 	bl	8004b88 <HAL_GetTick>
 8006d04:	0003      	movs	r3, r0
 8006d06:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d08:	e009      	b.n	8006d1e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d0a:	f7fd ff3d 	bl	8004b88 <HAL_GetTick>
 8006d0e:	0002      	movs	r2, r0
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	4a2f      	ldr	r2, [pc, #188]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e054      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1e:	4b2e      	ldr	r3, [pc, #184]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2238      	movs	r2, #56	; 0x38
 8006d24:	401a      	ands	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d1ec      	bne.n	8006d0a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d30:	4b27      	ldr	r3, [pc, #156]	; (8006dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2207      	movs	r2, #7
 8006d36:	4013      	ands	r3, r2
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d21e      	bcs.n	8006d7c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3e:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2207      	movs	r2, #7
 8006d44:	4393      	bics	r3, r2
 8006d46:	0019      	movs	r1, r3
 8006d48:	4b21      	ldr	r3, [pc, #132]	; (8006dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d50:	f7fd ff1a 	bl	8004b88 <HAL_GetTick>
 8006d54:	0003      	movs	r3, r0
 8006d56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d58:	e009      	b.n	8006d6e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d5a:	f7fd ff15 	bl	8004b88 <HAL_GetTick>
 8006d5e:	0002      	movs	r2, r0
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	4a1b      	ldr	r2, [pc, #108]	; (8006dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e02c      	b.n	8006dc8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d6e:	4b18      	ldr	r3, [pc, #96]	; (8006dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2207      	movs	r2, #7
 8006d74:	4013      	ands	r3, r2
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d1ee      	bne.n	8006d5a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2204      	movs	r2, #4
 8006d82:	4013      	ands	r3, r2
 8006d84:	d009      	beq.n	8006d9a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006d86:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	4a15      	ldr	r2, [pc, #84]	; (8006de0 <HAL_RCC_ClockConfig+0x200>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	0019      	movs	r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006d9a:	f000 f829 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 8006d9e:	0001      	movs	r1, r0
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	0a1b      	lsrs	r3, r3, #8
 8006da6:	220f      	movs	r2, #15
 8006da8:	401a      	ands	r2, r3
 8006daa:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <HAL_RCC_ClockConfig+0x204>)
 8006dac:	0092      	lsls	r2, r2, #2
 8006dae:	58d3      	ldr	r3, [r2, r3]
 8006db0:	221f      	movs	r2, #31
 8006db2:	4013      	ands	r3, r2
 8006db4:	000a      	movs	r2, r1
 8006db6:	40da      	lsrs	r2, r3
 8006db8:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <HAL_RCC_ClockConfig+0x208>)
 8006dba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	; (8006dec <HAL_RCC_ClockConfig+0x20c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f7fd fe85 	bl	8004ad0 <HAL_InitTick>
 8006dc6:	0003      	movs	r3, r0
}
 8006dc8:	0018      	movs	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b004      	add	sp, #16
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40022000 	.word	0x40022000
 8006dd4:	00001388 	.word	0x00001388
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	fffff0ff 	.word	0xfffff0ff
 8006de0:	ffff8fff 	.word	0xffff8fff
 8006de4:	0800d958 	.word	0x0800d958
 8006de8:	20000000 	.word	0x20000000
 8006dec:	20000004 	.word	0x20000004

08006df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006df6:	4b3c      	ldr	r3, [pc, #240]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	2238      	movs	r2, #56	; 0x38
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d10f      	bne.n	8006e20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006e00:	4b39      	ldr	r3, [pc, #228]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	0adb      	lsrs	r3, r3, #11
 8006e06:	2207      	movs	r2, #7
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	409a      	lsls	r2, r3
 8006e0e:	0013      	movs	r3, r2
 8006e10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	4835      	ldr	r0, [pc, #212]	; (8006eec <HAL_RCC_GetSysClockFreq+0xfc>)
 8006e16:	f7f9 f991 	bl	800013c <__udivsi3>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	e05d      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e20:	4b31      	ldr	r3, [pc, #196]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	2238      	movs	r2, #56	; 0x38
 8006e26:	4013      	ands	r3, r2
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d102      	bne.n	8006e32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e2c:	4b30      	ldr	r3, [pc, #192]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x100>)
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	e054      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e32:	4b2d      	ldr	r3, [pc, #180]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2238      	movs	r2, #56	; 0x38
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d138      	bne.n	8006eb0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006e3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	2203      	movs	r2, #3
 8006e44:	4013      	ands	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e48:	4b27      	ldr	r3, [pc, #156]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	091b      	lsrs	r3, r3, #4
 8006e4e:	2207      	movs	r2, #7
 8006e50:	4013      	ands	r3, r2
 8006e52:	3301      	adds	r3, #1
 8006e54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d10d      	bne.n	8006e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	4824      	ldr	r0, [pc, #144]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x100>)
 8006e60:	f7f9 f96c 	bl	800013c <__udivsi3>
 8006e64:	0003      	movs	r3, r0
 8006e66:	0019      	movs	r1, r3
 8006e68:	4b1f      	ldr	r3, [pc, #124]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	0a1b      	lsrs	r3, r3, #8
 8006e6e:	227f      	movs	r2, #127	; 0x7f
 8006e70:	4013      	ands	r3, r2
 8006e72:	434b      	muls	r3, r1
 8006e74:	617b      	str	r3, [r7, #20]
        break;
 8006e76:	e00d      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	481c      	ldr	r0, [pc, #112]	; (8006eec <HAL_RCC_GetSysClockFreq+0xfc>)
 8006e7c:	f7f9 f95e 	bl	800013c <__udivsi3>
 8006e80:	0003      	movs	r3, r0
 8006e82:	0019      	movs	r1, r3
 8006e84:	4b18      	ldr	r3, [pc, #96]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	0a1b      	lsrs	r3, r3, #8
 8006e8a:	227f      	movs	r2, #127	; 0x7f
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	434b      	muls	r3, r1
 8006e90:	617b      	str	r3, [r7, #20]
        break;
 8006e92:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006e94:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	0f5b      	lsrs	r3, r3, #29
 8006e9a:	2207      	movs	r2, #7
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	6978      	ldr	r0, [r7, #20]
 8006ea6:	f7f9 f949 	bl	800013c <__udivsi3>
 8006eaa:	0003      	movs	r3, r0
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	e015      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006eb0:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	2238      	movs	r2, #56	; 0x38
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d103      	bne.n	8006ec4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	613b      	str	r3, [r7, #16]
 8006ec2:	e00b      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006ec4:	4b08      	ldr	r3, [pc, #32]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	2238      	movs	r2, #56	; 0x38
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b18      	cmp	r3, #24
 8006ece:	d103      	bne.n	8006ed8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006ed0:	23fa      	movs	r3, #250	; 0xfa
 8006ed2:	01db      	lsls	r3, r3, #7
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	e001      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006edc:	693b      	ldr	r3, [r7, #16]
}
 8006ede:	0018      	movs	r0, r3
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	b006      	add	sp, #24
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	46c0      	nop			; (mov r8, r8)
 8006ee8:	40021000 	.word	0x40021000
 8006eec:	00f42400 	.word	0x00f42400
 8006ef0:	007a1200 	.word	0x007a1200

08006ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ef8:	4b02      	ldr	r3, [pc, #8]	; (8006f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8006efa:	681b      	ldr	r3, [r3, #0]
}
 8006efc:	0018      	movs	r0, r3
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	20000000 	.word	0x20000000

08006f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f08:	b5b0      	push	{r4, r5, r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006f0c:	f7ff fff2 	bl	8006ef4 <HAL_RCC_GetHCLKFreq>
 8006f10:	0004      	movs	r4, r0
 8006f12:	f7ff fb3f 	bl	8006594 <LL_RCC_GetAPB1Prescaler>
 8006f16:	0003      	movs	r3, r0
 8006f18:	0b1a      	lsrs	r2, r3, #12
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f1c:	0092      	lsls	r2, r2, #2
 8006f1e:	58d3      	ldr	r3, [r2, r3]
 8006f20:	221f      	movs	r2, #31
 8006f22:	4013      	ands	r3, r2
 8006f24:	40dc      	lsrs	r4, r3
 8006f26:	0023      	movs	r3, r4
}
 8006f28:	0018      	movs	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006f2e:	46c0      	nop			; (mov r8, r8)
 8006f30:	0800d998 	.word	0x0800d998

08006f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006f3c:	2313      	movs	r3, #19
 8006f3e:	18fb      	adds	r3, r7, r3
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f44:	2312      	movs	r3, #18
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	2200      	movs	r2, #0
 8006f4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	2380      	movs	r3, #128	; 0x80
 8006f52:	029b      	lsls	r3, r3, #10
 8006f54:	4013      	ands	r3, r2
 8006f56:	d100      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006f58:	e0a3      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f5a:	2011      	movs	r0, #17
 8006f5c:	183b      	adds	r3, r7, r0
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f62:	4ba5      	ldr	r3, [pc, #660]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f66:	2380      	movs	r3, #128	; 0x80
 8006f68:	055b      	lsls	r3, r3, #21
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d110      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f6e:	4ba2      	ldr	r3, [pc, #648]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f72:	4ba1      	ldr	r3, [pc, #644]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f74:	2180      	movs	r1, #128	; 0x80
 8006f76:	0549      	lsls	r1, r1, #21
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f7c:	4b9e      	ldr	r3, [pc, #632]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f80:	2380      	movs	r3, #128	; 0x80
 8006f82:	055b      	lsls	r3, r3, #21
 8006f84:	4013      	ands	r3, r2
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f8a:	183b      	adds	r3, r7, r0
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f90:	4b9a      	ldr	r3, [pc, #616]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	4b99      	ldr	r3, [pc, #612]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006f96:	2180      	movs	r1, #128	; 0x80
 8006f98:	0049      	lsls	r1, r1, #1
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f9e:	f7fd fdf3 	bl	8004b88 <HAL_GetTick>
 8006fa2:	0003      	movs	r3, r0
 8006fa4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fa6:	e00b      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa8:	f7fd fdee 	bl	8004b88 <HAL_GetTick>
 8006fac:	0002      	movs	r2, r0
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d904      	bls.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006fb6:	2313      	movs	r3, #19
 8006fb8:	18fb      	adds	r3, r7, r3
 8006fba:	2203      	movs	r2, #3
 8006fbc:	701a      	strb	r2, [r3, #0]
        break;
 8006fbe:	e005      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fc0:	4b8e      	ldr	r3, [pc, #568]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	2380      	movs	r3, #128	; 0x80
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	4013      	ands	r3, r2
 8006fca:	d0ed      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006fcc:	2313      	movs	r3, #19
 8006fce:	18fb      	adds	r3, r7, r3
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d154      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fd6:	4b88      	ldr	r3, [pc, #544]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fda:	23c0      	movs	r3, #192	; 0xc0
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4013      	ands	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d019      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d014      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ff2:	4b81      	ldr	r3, [pc, #516]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff6:	4a82      	ldr	r2, [pc, #520]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ffc:	4b7e      	ldr	r3, [pc, #504]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ffe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007000:	4b7d      	ldr	r3, [pc, #500]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007002:	2180      	movs	r1, #128	; 0x80
 8007004:	0249      	lsls	r1, r1, #9
 8007006:	430a      	orrs	r2, r1
 8007008:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800700a:	4b7b      	ldr	r3, [pc, #492]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800700c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800700e:	4b7a      	ldr	r3, [pc, #488]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007010:	497c      	ldr	r1, [pc, #496]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8007012:	400a      	ands	r2, r1
 8007014:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007016:	4b78      	ldr	r3, [pc, #480]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2201      	movs	r2, #1
 8007020:	4013      	ands	r3, r2
 8007022:	d016      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007024:	f7fd fdb0 	bl	8004b88 <HAL_GetTick>
 8007028:	0003      	movs	r3, r0
 800702a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800702c:	e00c      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800702e:	f7fd fdab 	bl	8004b88 <HAL_GetTick>
 8007032:	0002      	movs	r2, r0
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	4a73      	ldr	r2, [pc, #460]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d904      	bls.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800703e:	2313      	movs	r3, #19
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	2203      	movs	r2, #3
 8007044:	701a      	strb	r2, [r3, #0]
            break;
 8007046:	e004      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007048:	4b6b      	ldr	r3, [pc, #428]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800704a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704c:	2202      	movs	r2, #2
 800704e:	4013      	ands	r3, r2
 8007050:	d0ed      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007052:	2313      	movs	r3, #19
 8007054:	18fb      	adds	r3, r7, r3
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800705c:	4b66      	ldr	r3, [pc, #408]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800705e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007060:	4a67      	ldr	r2, [pc, #412]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8007062:	4013      	ands	r3, r2
 8007064:	0019      	movs	r1, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800706a:	4b63      	ldr	r3, [pc, #396]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800706c:	430a      	orrs	r2, r1
 800706e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007070:	e00c      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007072:	2312      	movs	r3, #18
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	2213      	movs	r2, #19
 8007078:	18ba      	adds	r2, r7, r2
 800707a:	7812      	ldrb	r2, [r2, #0]
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	e005      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007080:	2312      	movs	r3, #18
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	2213      	movs	r2, #19
 8007086:	18ba      	adds	r2, r7, r2
 8007088:	7812      	ldrb	r2, [r2, #0]
 800708a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800708c:	2311      	movs	r3, #17
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d105      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007096:	4b58      	ldr	r3, [pc, #352]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800709a:	4b57      	ldr	r3, [pc, #348]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800709c:	495b      	ldr	r1, [pc, #364]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800709e:	400a      	ands	r2, r1
 80070a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2201      	movs	r2, #1
 80070a8:	4013      	ands	r3, r2
 80070aa:	d009      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070ac:	4b52      	ldr	r3, [pc, #328]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b0:	2203      	movs	r2, #3
 80070b2:	4393      	bics	r3, r2
 80070b4:	0019      	movs	r1, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	4b4f      	ldr	r3, [pc, #316]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070bc:	430a      	orrs	r2, r1
 80070be:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2210      	movs	r2, #16
 80070c6:	4013      	ands	r3, r2
 80070c8:	d009      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070ca:	4b4b      	ldr	r3, [pc, #300]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ce:	4a50      	ldr	r2, [pc, #320]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	0019      	movs	r1, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	4b47      	ldr	r3, [pc, #284]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070da:	430a      	orrs	r2, r1
 80070dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	2380      	movs	r3, #128	; 0x80
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4013      	ands	r3, r2
 80070e8:	d009      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070ea:	4b43      	ldr	r3, [pc, #268]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ee:	4a49      	ldr	r2, [pc, #292]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	0019      	movs	r1, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	695a      	ldr	r2, [r3, #20]
 80070f8:	4b3f      	ldr	r3, [pc, #252]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070fa:	430a      	orrs	r2, r1
 80070fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	2380      	movs	r3, #128	; 0x80
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	4013      	ands	r3, r2
 8007108:	d009      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800710a:	4b3b      	ldr	r3, [pc, #236]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800710c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710e:	4a42      	ldr	r2, [pc, #264]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007110:	4013      	ands	r3, r2
 8007112:	0019      	movs	r1, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	4b37      	ldr	r3, [pc, #220]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800711a:	430a      	orrs	r2, r1
 800711c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2220      	movs	r2, #32
 8007124:	4013      	ands	r3, r2
 8007126:	d009      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007128:	4b33      	ldr	r3, [pc, #204]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800712a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712c:	4a3b      	ldr	r2, [pc, #236]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800712e:	4013      	ands	r3, r2
 8007130:	0019      	movs	r1, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	4b30      	ldr	r3, [pc, #192]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007138:	430a      	orrs	r2, r1
 800713a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	2380      	movs	r3, #128	; 0x80
 8007142:	01db      	lsls	r3, r3, #7
 8007144:	4013      	ands	r3, r2
 8007146:	d015      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007148:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800714a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	0899      	lsrs	r1, r3, #2
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	69da      	ldr	r2, [r3, #28]
 8007154:	4b28      	ldr	r3, [pc, #160]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007156:	430a      	orrs	r2, r1
 8007158:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69da      	ldr	r2, [r3, #28]
 800715e:	2380      	movs	r3, #128	; 0x80
 8007160:	05db      	lsls	r3, r3, #23
 8007162:	429a      	cmp	r2, r3
 8007164:	d106      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007166:	4b24      	ldr	r3, [pc, #144]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	4b23      	ldr	r3, [pc, #140]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800716c:	2180      	movs	r1, #128	; 0x80
 800716e:	0249      	lsls	r1, r1, #9
 8007170:	430a      	orrs	r2, r1
 8007172:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	2380      	movs	r3, #128	; 0x80
 800717a:	039b      	lsls	r3, r3, #14
 800717c:	4013      	ands	r3, r2
 800717e:	d016      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007180:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007184:	4a26      	ldr	r2, [pc, #152]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007186:	4013      	ands	r3, r2
 8007188:	0019      	movs	r1, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1a      	ldr	r2, [r3, #32]
 800718e:	4b1a      	ldr	r3, [pc, #104]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007190:	430a      	orrs	r2, r1
 8007192:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1a      	ldr	r2, [r3, #32]
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	03db      	lsls	r3, r3, #15
 800719c:	429a      	cmp	r2, r3
 800719e:	d106      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80071a0:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071a6:	2180      	movs	r1, #128	; 0x80
 80071a8:	0449      	lsls	r1, r1, #17
 80071aa:	430a      	orrs	r2, r1
 80071ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	2380      	movs	r3, #128	; 0x80
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	4013      	ands	r3, r2
 80071b8:	d016      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80071ba:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	4a19      	ldr	r2, [pc, #100]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071c0:	4013      	ands	r3, r2
 80071c2:	0019      	movs	r1, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071ca:	430a      	orrs	r2, r1
 80071cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691a      	ldr	r2, [r3, #16]
 80071d2:	2380      	movs	r3, #128	; 0x80
 80071d4:	01db      	lsls	r3, r3, #7
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d106      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80071da:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071e0:	2180      	movs	r1, #128	; 0x80
 80071e2:	0249      	lsls	r1, r1, #9
 80071e4:	430a      	orrs	r2, r1
 80071e6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80071e8:	2312      	movs	r3, #18
 80071ea:	18fb      	adds	r3, r7, r3
 80071ec:	781b      	ldrb	r3, [r3, #0]
}
 80071ee:	0018      	movs	r0, r3
 80071f0:	46bd      	mov	sp, r7
 80071f2:	b006      	add	sp, #24
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	40021000 	.word	0x40021000
 80071fc:	40007000 	.word	0x40007000
 8007200:	fffffcff 	.word	0xfffffcff
 8007204:	fffeffff 	.word	0xfffeffff
 8007208:	00001388 	.word	0x00001388
 800720c:	efffffff 	.word	0xefffffff
 8007210:	fffff3ff 	.word	0xfffff3ff
 8007214:	fff3ffff 	.word	0xfff3ffff
 8007218:	ffcfffff 	.word	0xffcfffff
 800721c:	ffffcfff 	.word	0xffffcfff
 8007220:	ffbfffff 	.word	0xffbfffff
 8007224:	ffff3fff 	.word	0xffff3fff

08007228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e04a      	b.n	80072d0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	223d      	movs	r2, #61	; 0x3d
 800723e:	5c9b      	ldrb	r3, [r3, r2]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d107      	bne.n	8007256 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	223c      	movs	r2, #60	; 0x3c
 800724a:	2100      	movs	r1, #0
 800724c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	0018      	movs	r0, r3
 8007252:	f7fd f9f1 	bl	8004638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	223d      	movs	r2, #61	; 0x3d
 800725a:	2102      	movs	r1, #2
 800725c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3304      	adds	r3, #4
 8007266:	0019      	movs	r1, r3
 8007268:	0010      	movs	r0, r2
 800726a:	f000 fab1 	bl	80077d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2248      	movs	r2, #72	; 0x48
 8007272:	2101      	movs	r1, #1
 8007274:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	223e      	movs	r2, #62	; 0x3e
 800727a:	2101      	movs	r1, #1
 800727c:	5499      	strb	r1, [r3, r2]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	223f      	movs	r2, #63	; 0x3f
 8007282:	2101      	movs	r1, #1
 8007284:	5499      	strb	r1, [r3, r2]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2240      	movs	r2, #64	; 0x40
 800728a:	2101      	movs	r1, #1
 800728c:	5499      	strb	r1, [r3, r2]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2241      	movs	r2, #65	; 0x41
 8007292:	2101      	movs	r1, #1
 8007294:	5499      	strb	r1, [r3, r2]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2242      	movs	r2, #66	; 0x42
 800729a:	2101      	movs	r1, #1
 800729c:	5499      	strb	r1, [r3, r2]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2243      	movs	r2, #67	; 0x43
 80072a2:	2101      	movs	r1, #1
 80072a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2244      	movs	r2, #68	; 0x44
 80072aa:	2101      	movs	r1, #1
 80072ac:	5499      	strb	r1, [r3, r2]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2245      	movs	r2, #69	; 0x45
 80072b2:	2101      	movs	r1, #1
 80072b4:	5499      	strb	r1, [r3, r2]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2246      	movs	r2, #70	; 0x46
 80072ba:	2101      	movs	r1, #1
 80072bc:	5499      	strb	r1, [r3, r2]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2247      	movs	r2, #71	; 0x47
 80072c2:	2101      	movs	r1, #1
 80072c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	223d      	movs	r2, #61	; 0x3d
 80072ca:	2101      	movs	r1, #1
 80072cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	0018      	movs	r0, r3
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b002      	add	sp, #8
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	223d      	movs	r2, #61	; 0x3d
 80072e4:	5c9b      	ldrb	r3, [r3, r2]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d001      	beq.n	80072f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e03d      	b.n	800736c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	223d      	movs	r2, #61	; 0x3d
 80072f4:	2102      	movs	r1, #2
 80072f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2101      	movs	r1, #1
 8007304:	430a      	orrs	r2, r1
 8007306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a19      	ldr	r2, [pc, #100]	; (8007374 <HAL_TIM_Base_Start_IT+0x9c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00a      	beq.n	8007328 <HAL_TIM_Base_Start_IT+0x50>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	2380      	movs	r3, #128	; 0x80
 8007318:	05db      	lsls	r3, r3, #23
 800731a:	429a      	cmp	r2, r3
 800731c:	d004      	beq.n	8007328 <HAL_TIM_Base_Start_IT+0x50>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a15      	ldr	r2, [pc, #84]	; (8007378 <HAL_TIM_Base_Start_IT+0xa0>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d116      	bne.n	8007356 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	4a13      	ldr	r2, [pc, #76]	; (800737c <HAL_TIM_Base_Start_IT+0xa4>)
 8007330:	4013      	ands	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b06      	cmp	r3, #6
 8007338:	d016      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x90>
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	2380      	movs	r3, #128	; 0x80
 800733e:	025b      	lsls	r3, r3, #9
 8007340:	429a      	cmp	r2, r3
 8007342:	d011      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2101      	movs	r1, #1
 8007350:	430a      	orrs	r2, r1
 8007352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007354:	e008      	b.n	8007368 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2101      	movs	r1, #1
 8007362:	430a      	orrs	r2, r1
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	e000      	b.n	800736a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007368:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	0018      	movs	r0, r3
 800736e:	46bd      	mov	sp, r7
 8007370:	b004      	add	sp, #16
 8007372:	bd80      	pop	{r7, pc}
 8007374:	40012c00 	.word	0x40012c00
 8007378:	40000400 	.word	0x40000400
 800737c:	00010007 	.word	0x00010007

08007380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2202      	movs	r2, #2
 8007390:	4013      	ands	r3, r2
 8007392:	2b02      	cmp	r3, #2
 8007394:	d124      	bne.n	80073e0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	2202      	movs	r2, #2
 800739e:	4013      	ands	r3, r2
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d11d      	bne.n	80073e0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2203      	movs	r2, #3
 80073aa:	4252      	negs	r2, r2
 80073ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	2203      	movs	r2, #3
 80073bc:	4013      	ands	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	0018      	movs	r0, r3
 80073c4:	f000 f9ec 	bl	80077a0 <HAL_TIM_IC_CaptureCallback>
 80073c8:	e007      	b.n	80073da <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	0018      	movs	r0, r3
 80073ce:	f000 f9df 	bl	8007790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	0018      	movs	r0, r3
 80073d6:	f000 f9eb 	bl	80077b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2204      	movs	r2, #4
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d125      	bne.n	800743a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2204      	movs	r2, #4
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d11e      	bne.n	800743a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2205      	movs	r2, #5
 8007402:	4252      	negs	r2, r2
 8007404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2202      	movs	r2, #2
 800740a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699a      	ldr	r2, [r3, #24]
 8007412:	23c0      	movs	r3, #192	; 0xc0
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4013      	ands	r3, r2
 8007418:	d004      	beq.n	8007424 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	0018      	movs	r0, r3
 800741e:	f000 f9bf 	bl	80077a0 <HAL_TIM_IC_CaptureCallback>
 8007422:	e007      	b.n	8007434 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	0018      	movs	r0, r3
 8007428:	f000 f9b2 	bl	8007790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	0018      	movs	r0, r3
 8007430:	f000 f9be 	bl	80077b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2208      	movs	r2, #8
 8007442:	4013      	ands	r3, r2
 8007444:	2b08      	cmp	r3, #8
 8007446:	d124      	bne.n	8007492 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2208      	movs	r2, #8
 8007450:	4013      	ands	r3, r2
 8007452:	2b08      	cmp	r3, #8
 8007454:	d11d      	bne.n	8007492 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2209      	movs	r2, #9
 800745c:	4252      	negs	r2, r2
 800745e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2204      	movs	r2, #4
 8007464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	2203      	movs	r2, #3
 800746e:	4013      	ands	r3, r2
 8007470:	d004      	beq.n	800747c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	0018      	movs	r0, r3
 8007476:	f000 f993 	bl	80077a0 <HAL_TIM_IC_CaptureCallback>
 800747a:	e007      	b.n	800748c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	0018      	movs	r0, r3
 8007480:	f000 f986 	bl	8007790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	0018      	movs	r0, r3
 8007488:	f000 f992 	bl	80077b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	2210      	movs	r2, #16
 800749a:	4013      	ands	r3, r2
 800749c:	2b10      	cmp	r3, #16
 800749e:	d125      	bne.n	80074ec <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	2210      	movs	r2, #16
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b10      	cmp	r3, #16
 80074ac:	d11e      	bne.n	80074ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2211      	movs	r2, #17
 80074b4:	4252      	negs	r2, r2
 80074b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2208      	movs	r2, #8
 80074bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	23c0      	movs	r3, #192	; 0xc0
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4013      	ands	r3, r2
 80074ca:	d004      	beq.n	80074d6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	0018      	movs	r0, r3
 80074d0:	f000 f966 	bl	80077a0 <HAL_TIM_IC_CaptureCallback>
 80074d4:	e007      	b.n	80074e6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	0018      	movs	r0, r3
 80074da:	f000 f959 	bl	8007790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	0018      	movs	r0, r3
 80074e2:	f000 f965 	bl	80077b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2201      	movs	r2, #1
 80074f4:	4013      	ands	r3, r2
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d10f      	bne.n	800751a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	4013      	ands	r3, r2
 8007504:	2b01      	cmp	r3, #1
 8007506:	d108      	bne.n	800751a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2202      	movs	r2, #2
 800750e:	4252      	negs	r2, r2
 8007510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	0018      	movs	r0, r3
 8007516:	f7fc fa3f 	bl	8003998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	2280      	movs	r2, #128	; 0x80
 8007522:	4013      	ands	r3, r2
 8007524:	2b80      	cmp	r3, #128	; 0x80
 8007526:	d10f      	bne.n	8007548 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	2280      	movs	r2, #128	; 0x80
 8007530:	4013      	ands	r3, r2
 8007532:	2b80      	cmp	r3, #128	; 0x80
 8007534:	d108      	bne.n	8007548 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2281      	movs	r2, #129	; 0x81
 800753c:	4252      	negs	r2, r2
 800753e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	0018      	movs	r0, r3
 8007544:	f000 fac6 	bl	8007ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691a      	ldr	r2, [r3, #16]
 800754e:	2380      	movs	r3, #128	; 0x80
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	401a      	ands	r2, r3
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	429a      	cmp	r2, r3
 800755a:	d10e      	bne.n	800757a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	2280      	movs	r2, #128	; 0x80
 8007564:	4013      	ands	r3, r2
 8007566:	2b80      	cmp	r3, #128	; 0x80
 8007568:	d107      	bne.n	800757a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <HAL_TIM_IRQHandler+0x260>)
 8007570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	0018      	movs	r0, r3
 8007576:	f000 fab5 	bl	8007ae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	2240      	movs	r2, #64	; 0x40
 8007582:	4013      	ands	r3, r2
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	d10f      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	2240      	movs	r2, #64	; 0x40
 8007590:	4013      	ands	r3, r2
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d108      	bne.n	80075a8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2241      	movs	r2, #65	; 0x41
 800759c:	4252      	negs	r2, r2
 800759e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	0018      	movs	r0, r3
 80075a4:	f000 f90c 	bl	80077c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	2220      	movs	r2, #32
 80075b0:	4013      	ands	r3, r2
 80075b2:	2b20      	cmp	r3, #32
 80075b4:	d10f      	bne.n	80075d6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	4013      	ands	r3, r2
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d108      	bne.n	80075d6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2221      	movs	r2, #33	; 0x21
 80075ca:	4252      	negs	r2, r2
 80075cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	0018      	movs	r0, r3
 80075d2:	f000 fa77 	bl	8007ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075d6:	46c0      	nop			; (mov r8, r8)
 80075d8:	46bd      	mov	sp, r7
 80075da:	b002      	add	sp, #8
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	fffffeff 	.word	0xfffffeff

080075e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075ee:	230f      	movs	r3, #15
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	2200      	movs	r2, #0
 80075f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	223c      	movs	r2, #60	; 0x3c
 80075fa:	5c9b      	ldrb	r3, [r3, r2]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_TIM_ConfigClockSource+0x20>
 8007600:	2302      	movs	r3, #2
 8007602:	e0bc      	b.n	800777e <HAL_TIM_ConfigClockSource+0x19a>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	223c      	movs	r2, #60	; 0x3c
 8007608:	2101      	movs	r1, #1
 800760a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	223d      	movs	r2, #61	; 0x3d
 8007610:	2102      	movs	r1, #2
 8007612:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4a5a      	ldr	r2, [pc, #360]	; (8007788 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007620:	4013      	ands	r3, r2
 8007622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4a59      	ldr	r2, [pc, #356]	; (800778c <HAL_TIM_ConfigClockSource+0x1a8>)
 8007628:	4013      	ands	r3, r2
 800762a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2280      	movs	r2, #128	; 0x80
 800763a:	0192      	lsls	r2, r2, #6
 800763c:	4293      	cmp	r3, r2
 800763e:	d040      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0xde>
 8007640:	2280      	movs	r2, #128	; 0x80
 8007642:	0192      	lsls	r2, r2, #6
 8007644:	4293      	cmp	r3, r2
 8007646:	d900      	bls.n	800764a <HAL_TIM_ConfigClockSource+0x66>
 8007648:	e088      	b.n	800775c <HAL_TIM_ConfigClockSource+0x178>
 800764a:	2280      	movs	r2, #128	; 0x80
 800764c:	0152      	lsls	r2, r2, #5
 800764e:	4293      	cmp	r3, r2
 8007650:	d100      	bne.n	8007654 <HAL_TIM_ConfigClockSource+0x70>
 8007652:	e088      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x182>
 8007654:	2280      	movs	r2, #128	; 0x80
 8007656:	0152      	lsls	r2, r2, #5
 8007658:	4293      	cmp	r3, r2
 800765a:	d900      	bls.n	800765e <HAL_TIM_ConfigClockSource+0x7a>
 800765c:	e07e      	b.n	800775c <HAL_TIM_ConfigClockSource+0x178>
 800765e:	2b70      	cmp	r3, #112	; 0x70
 8007660:	d018      	beq.n	8007694 <HAL_TIM_ConfigClockSource+0xb0>
 8007662:	d900      	bls.n	8007666 <HAL_TIM_ConfigClockSource+0x82>
 8007664:	e07a      	b.n	800775c <HAL_TIM_ConfigClockSource+0x178>
 8007666:	2b60      	cmp	r3, #96	; 0x60
 8007668:	d04f      	beq.n	800770a <HAL_TIM_ConfigClockSource+0x126>
 800766a:	d900      	bls.n	800766e <HAL_TIM_ConfigClockSource+0x8a>
 800766c:	e076      	b.n	800775c <HAL_TIM_ConfigClockSource+0x178>
 800766e:	2b50      	cmp	r3, #80	; 0x50
 8007670:	d03b      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x106>
 8007672:	d900      	bls.n	8007676 <HAL_TIM_ConfigClockSource+0x92>
 8007674:	e072      	b.n	800775c <HAL_TIM_ConfigClockSource+0x178>
 8007676:	2b40      	cmp	r3, #64	; 0x40
 8007678:	d057      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x146>
 800767a:	d900      	bls.n	800767e <HAL_TIM_ConfigClockSource+0x9a>
 800767c:	e06e      	b.n	800775c <HAL_TIM_ConfigClockSource+0x178>
 800767e:	2b30      	cmp	r3, #48	; 0x30
 8007680:	d063      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x166>
 8007682:	d86b      	bhi.n	800775c <HAL_TIM_ConfigClockSource+0x178>
 8007684:	2b20      	cmp	r3, #32
 8007686:	d060      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x166>
 8007688:	d868      	bhi.n	800775c <HAL_TIM_ConfigClockSource+0x178>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d05d      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x166>
 800768e:	2b10      	cmp	r3, #16
 8007690:	d05b      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x166>
 8007692:	e063      	b.n	800775c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	6899      	ldr	r1, [r3, #8]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f000 f986 	bl	80079b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2277      	movs	r2, #119	; 0x77
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	609a      	str	r2, [r3, #8]
      break;
 80076c0:	e052      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6818      	ldr	r0, [r3, #0]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	6899      	ldr	r1, [r3, #8]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f000 f96f 	bl	80079b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2180      	movs	r1, #128	; 0x80
 80076e2:	01c9      	lsls	r1, r1, #7
 80076e4:	430a      	orrs	r2, r1
 80076e6:	609a      	str	r2, [r3, #8]
      break;
 80076e8:	e03e      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	6859      	ldr	r1, [r3, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	001a      	movs	r2, r3
 80076f8:	f000 f8e0 	bl	80078bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2150      	movs	r1, #80	; 0x50
 8007702:	0018      	movs	r0, r3
 8007704:	f000 f93a 	bl	800797c <TIM_ITRx_SetConfig>
      break;
 8007708:	e02e      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6859      	ldr	r1, [r3, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	001a      	movs	r2, r3
 8007718:	f000 f8fe 	bl	8007918 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2160      	movs	r1, #96	; 0x60
 8007722:	0018      	movs	r0, r3
 8007724:	f000 f92a 	bl	800797c <TIM_ITRx_SetConfig>
      break;
 8007728:	e01e      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	6859      	ldr	r1, [r3, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	001a      	movs	r2, r3
 8007738:	f000 f8c0 	bl	80078bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2140      	movs	r1, #64	; 0x40
 8007742:	0018      	movs	r0, r3
 8007744:	f000 f91a 	bl	800797c <TIM_ITRx_SetConfig>
      break;
 8007748:	e00e      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	0019      	movs	r1, r3
 8007754:	0010      	movs	r0, r2
 8007756:	f000 f911 	bl	800797c <TIM_ITRx_SetConfig>
      break;
 800775a:	e005      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800775c:	230f      	movs	r3, #15
 800775e:	18fb      	adds	r3, r7, r3
 8007760:	2201      	movs	r2, #1
 8007762:	701a      	strb	r2, [r3, #0]
      break;
 8007764:	e000      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007766:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	223d      	movs	r2, #61	; 0x3d
 800776c:	2101      	movs	r1, #1
 800776e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	223c      	movs	r2, #60	; 0x3c
 8007774:	2100      	movs	r1, #0
 8007776:	5499      	strb	r1, [r3, r2]

  return status;
 8007778:	230f      	movs	r3, #15
 800777a:	18fb      	adds	r3, r7, r3
 800777c:	781b      	ldrb	r3, [r3, #0]
}
 800777e:	0018      	movs	r0, r3
 8007780:	46bd      	mov	sp, r7
 8007782:	b004      	add	sp, #16
 8007784:	bd80      	pop	{r7, pc}
 8007786:	46c0      	nop			; (mov r8, r8)
 8007788:	ffceff88 	.word	0xffceff88
 800778c:	ffff00ff 	.word	0xffff00ff

08007790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007798:	46c0      	nop			; (mov r8, r8)
 800779a:	46bd      	mov	sp, r7
 800779c:	b002      	add	sp, #8
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077a8:	46c0      	nop			; (mov r8, r8)
 80077aa:	46bd      	mov	sp, r7
 80077ac:	b002      	add	sp, #8
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077b8:	46c0      	nop			; (mov r8, r8)
 80077ba:	46bd      	mov	sp, r7
 80077bc:	b002      	add	sp, #8
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077c8:	46c0      	nop			; (mov r8, r8)
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b002      	add	sp, #8
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a30      	ldr	r2, [pc, #192]	; (80078a4 <TIM_Base_SetConfig+0xd4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d008      	beq.n	80077fa <TIM_Base_SetConfig+0x2a>
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	2380      	movs	r3, #128	; 0x80
 80077ec:	05db      	lsls	r3, r3, #23
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d003      	beq.n	80077fa <TIM_Base_SetConfig+0x2a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a2c      	ldr	r2, [pc, #176]	; (80078a8 <TIM_Base_SetConfig+0xd8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d108      	bne.n	800780c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2270      	movs	r2, #112	; 0x70
 80077fe:	4393      	bics	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a25      	ldr	r2, [pc, #148]	; (80078a4 <TIM_Base_SetConfig+0xd4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d014      	beq.n	800783e <TIM_Base_SetConfig+0x6e>
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	2380      	movs	r3, #128	; 0x80
 8007818:	05db      	lsls	r3, r3, #23
 800781a:	429a      	cmp	r2, r3
 800781c:	d00f      	beq.n	800783e <TIM_Base_SetConfig+0x6e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a21      	ldr	r2, [pc, #132]	; (80078a8 <TIM_Base_SetConfig+0xd8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00b      	beq.n	800783e <TIM_Base_SetConfig+0x6e>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a20      	ldr	r2, [pc, #128]	; (80078ac <TIM_Base_SetConfig+0xdc>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d007      	beq.n	800783e <TIM_Base_SetConfig+0x6e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <TIM_Base_SetConfig+0xe0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d003      	beq.n	800783e <TIM_Base_SetConfig+0x6e>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a1e      	ldr	r2, [pc, #120]	; (80078b4 <TIM_Base_SetConfig+0xe4>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d108      	bne.n	8007850 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a1d      	ldr	r2, [pc, #116]	; (80078b8 <TIM_Base_SetConfig+0xe8>)
 8007842:	4013      	ands	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2280      	movs	r2, #128	; 0x80
 8007854:	4393      	bics	r3, r2
 8007856:	001a      	movs	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a0a      	ldr	r2, [pc, #40]	; (80078a4 <TIM_Base_SetConfig+0xd4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d007      	beq.n	800788e <TIM_Base_SetConfig+0xbe>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a0b      	ldr	r2, [pc, #44]	; (80078b0 <TIM_Base_SetConfig+0xe0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d003      	beq.n	800788e <TIM_Base_SetConfig+0xbe>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a0a      	ldr	r2, [pc, #40]	; (80078b4 <TIM_Base_SetConfig+0xe4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d103      	bne.n	8007896 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	615a      	str	r2, [r3, #20]
}
 800789c:	46c0      	nop			; (mov r8, r8)
 800789e:	46bd      	mov	sp, r7
 80078a0:	b004      	add	sp, #16
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40012c00 	.word	0x40012c00
 80078a8:	40000400 	.word	0x40000400
 80078ac:	40002000 	.word	0x40002000
 80078b0:	40014400 	.word	0x40014400
 80078b4:	40014800 	.word	0x40014800
 80078b8:	fffffcff 	.word	0xfffffcff

080078bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	2201      	movs	r2, #1
 80078d4:	4393      	bics	r3, r2
 80078d6:	001a      	movs	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	22f0      	movs	r2, #240	; 0xf0
 80078e6:	4393      	bics	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	011b      	lsls	r3, r3, #4
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	220a      	movs	r2, #10
 80078f8:	4393      	bics	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	621a      	str	r2, [r3, #32]
}
 8007910:	46c0      	nop			; (mov r8, r8)
 8007912:	46bd      	mov	sp, r7
 8007914:	b006      	add	sp, #24
 8007916:	bd80      	pop	{r7, pc}

08007918 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	2210      	movs	r2, #16
 800792a:	4393      	bics	r3, r2
 800792c:	001a      	movs	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	4a0d      	ldr	r2, [pc, #52]	; (8007978 <TIM_TI2_ConfigInputStage+0x60>)
 8007942:	4013      	ands	r3, r2
 8007944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	031b      	lsls	r3, r3, #12
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	4313      	orrs	r3, r2
 800794e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	22a0      	movs	r2, #160	; 0xa0
 8007954:	4393      	bics	r3, r2
 8007956:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	621a      	str	r2, [r3, #32]
}
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	46bd      	mov	sp, r7
 8007972:	b006      	add	sp, #24
 8007974:	bd80      	pop	{r7, pc}
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	ffff0fff 	.word	0xffff0fff

0800797c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <TIM_ITRx_SetConfig+0x34>)
 8007990:	4013      	ands	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	2207      	movs	r2, #7
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	609a      	str	r2, [r3, #8]
}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b004      	add	sp, #16
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	ffcfff8f 	.word	0xffcfff8f

080079b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	4a09      	ldr	r2, [pc, #36]	; (80079f0 <TIM_ETR_SetConfig+0x3c>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	021a      	lsls	r2, r3, #8
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	431a      	orrs	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4313      	orrs	r3, r2
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	609a      	str	r2, [r3, #8]
}
 80079e8:	46c0      	nop			; (mov r8, r8)
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b006      	add	sp, #24
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	ffff00ff 	.word	0xffff00ff

080079f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	223c      	movs	r2, #60	; 0x3c
 8007a02:	5c9b      	ldrb	r3, [r3, r2]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e050      	b.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	223c      	movs	r2, #60	; 0x3c
 8007a10:	2101      	movs	r1, #1
 8007a12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	223d      	movs	r2, #61	; 0x3d
 8007a18:	2102      	movs	r1, #2
 8007a1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a21      	ldr	r2, [pc, #132]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d108      	bne.n	8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4a20      	ldr	r2, [pc, #128]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2270      	movs	r2, #112	; 0x70
 8007a4c:	4393      	bics	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a14      	ldr	r2, [pc, #80]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00a      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	2380      	movs	r3, #128	; 0x80
 8007a72:	05db      	lsls	r3, r3, #23
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d004      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a10      	ldr	r2, [pc, #64]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d10c      	bne.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2280      	movs	r2, #128	; 0x80
 8007a86:	4393      	bics	r3, r2
 8007a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	223d      	movs	r2, #61	; 0x3d
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	223c      	movs	r2, #60	; 0x3c
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	0018      	movs	r0, r3
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	b004      	add	sp, #16
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	46c0      	nop			; (mov r8, r8)
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	ff0fffff 	.word	0xff0fffff
 8007ac0:	40000400 	.word	0x40000400

08007ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007acc:	46c0      	nop			; (mov r8, r8)
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	b002      	add	sp, #8
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007adc:	46c0      	nop			; (mov r8, r8)
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	b002      	add	sp, #8
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007aec:	46c0      	nop			; (mov r8, r8)
 8007aee:	46bd      	mov	sp, r7
 8007af0:	b002      	add	sp, #8
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e046      	b.n	8007b94 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2288      	movs	r2, #136	; 0x88
 8007b0a:	589b      	ldr	r3, [r3, r2]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d107      	bne.n	8007b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2284      	movs	r2, #132	; 0x84
 8007b14:	2100      	movs	r1, #0
 8007b16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f7fc fde6 	bl	80046ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2288      	movs	r2, #136	; 0x88
 8007b24:	2124      	movs	r1, #36	; 0x24
 8007b26:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2101      	movs	r1, #1
 8007b34:	438a      	bics	r2, r1
 8007b36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f000 f946 	bl	8007dcc <UART_SetConfig>
 8007b40:	0003      	movs	r3, r0
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e024      	b.n	8007b94 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	0018      	movs	r0, r3
 8007b56:	f000 fbb1 	bl	80082bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	490d      	ldr	r1, [pc, #52]	; (8007b9c <HAL_UART_Init+0xa8>)
 8007b66:	400a      	ands	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	212a      	movs	r1, #42	; 0x2a
 8007b76:	438a      	bics	r2, r1
 8007b78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2101      	movs	r1, #1
 8007b86:	430a      	orrs	r2, r1
 8007b88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f000 fc49 	bl	8008424 <UART_CheckIdleState>
 8007b92:	0003      	movs	r3, r0
}
 8007b94:	0018      	movs	r0, r3
 8007b96:	46bd      	mov	sp, r7
 8007b98:	b002      	add	sp, #8
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	ffffb7ff 	.word	0xffffb7ff

08007ba0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08a      	sub	sp, #40	; 0x28
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	1dbb      	adds	r3, r7, #6
 8007bae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2288      	movs	r2, #136	; 0x88
 8007bb4:	589b      	ldr	r3, [r3, r2]
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	d000      	beq.n	8007bbc <HAL_UART_Transmit+0x1c>
 8007bba:	e088      	b.n	8007cce <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_UART_Transmit+0x2a>
 8007bc2:	1dbb      	adds	r3, r7, #6
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e080      	b.n	8007cd0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689a      	ldr	r2, [r3, #8]
 8007bd2:	2380      	movs	r3, #128	; 0x80
 8007bd4:	015b      	lsls	r3, r3, #5
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d109      	bne.n	8007bee <HAL_UART_Transmit+0x4e>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d105      	bne.n	8007bee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2201      	movs	r2, #1
 8007be6:	4013      	ands	r3, r2
 8007be8:	d001      	beq.n	8007bee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e070      	b.n	8007cd0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2290      	movs	r2, #144	; 0x90
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2288      	movs	r2, #136	; 0x88
 8007bfa:	2121      	movs	r1, #33	; 0x21
 8007bfc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bfe:	f7fc ffc3 	bl	8004b88 <HAL_GetTick>
 8007c02:	0003      	movs	r3, r0
 8007c04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	1dba      	adds	r2, r7, #6
 8007c0a:	2154      	movs	r1, #84	; 0x54
 8007c0c:	8812      	ldrh	r2, [r2, #0]
 8007c0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	1dba      	adds	r2, r7, #6
 8007c14:	2156      	movs	r1, #86	; 0x56
 8007c16:	8812      	ldrh	r2, [r2, #0]
 8007c18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	2380      	movs	r3, #128	; 0x80
 8007c20:	015b      	lsls	r3, r3, #5
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d108      	bne.n	8007c38 <HAL_UART_Transmit+0x98>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	61bb      	str	r3, [r7, #24]
 8007c36:	e003      	b.n	8007c40 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c40:	e02c      	b.n	8007c9c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	0013      	movs	r3, r2
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2180      	movs	r1, #128	; 0x80
 8007c50:	f000 fc36 	bl	80084c0 <UART_WaitOnFlagUntilTimeout>
 8007c54:	1e03      	subs	r3, r0, #0
 8007c56:	d001      	beq.n	8007c5c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e039      	b.n	8007cd0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	001a      	movs	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	05d2      	lsls	r2, r2, #23
 8007c6e:	0dd2      	lsrs	r2, r2, #23
 8007c70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	3302      	adds	r3, #2
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	e007      	b.n	8007c8a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	3301      	adds	r3, #1
 8007c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2256      	movs	r2, #86	; 0x56
 8007c8e:	5a9b      	ldrh	r3, [r3, r2]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b299      	uxth	r1, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2256      	movs	r2, #86	; 0x56
 8007c9a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2256      	movs	r2, #86	; 0x56
 8007ca0:	5a9b      	ldrh	r3, [r3, r2]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1cc      	bne.n	8007c42 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	0013      	movs	r3, r2
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2140      	movs	r1, #64	; 0x40
 8007cb6:	f000 fc03 	bl	80084c0 <UART_WaitOnFlagUntilTimeout>
 8007cba:	1e03      	subs	r3, r0, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e006      	b.n	8007cd0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2288      	movs	r2, #136	; 0x88
 8007cc6:	2120      	movs	r1, #32
 8007cc8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e000      	b.n	8007cd0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007cce:	2302      	movs	r3, #2
  }
}
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b008      	add	sp, #32
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	1dbb      	adds	r3, r7, #6
 8007ce4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	228c      	movs	r2, #140	; 0x8c
 8007cea:	589b      	ldr	r3, [r3, r2]
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d14a      	bne.n	8007d86 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_UART_Receive_DMA+0x26>
 8007cf6:	1dbb      	adds	r3, r7, #6
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e042      	b.n	8007d88 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689a      	ldr	r2, [r3, #8]
 8007d06:	2380      	movs	r3, #128	; 0x80
 8007d08:	015b      	lsls	r3, r3, #5
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d109      	bne.n	8007d22 <HAL_UART_Receive_DMA+0x4a>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d105      	bne.n	8007d22 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	d001      	beq.n	8007d22 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e032      	b.n	8007d88 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <HAL_UART_Receive_DMA+0xb8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d020      	beq.n	8007d74 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	2380      	movs	r3, #128	; 0x80
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d019      	beq.n	8007d74 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d40:	f3ef 8310 	mrs	r3, PRIMASK
 8007d44:	613b      	str	r3, [r7, #16]
  return(result);
 8007d46:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d48:	61fb      	str	r3, [r7, #28]
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f383 8810 	msr	PRIMASK, r3
}
 8007d54:	46c0      	nop			; (mov r8, r8)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2180      	movs	r1, #128	; 0x80
 8007d62:	04c9      	lsls	r1, r1, #19
 8007d64:	430a      	orrs	r2, r1
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	f383 8810 	msr	PRIMASK, r3
}
 8007d72:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d74:	1dbb      	adds	r3, r7, #6
 8007d76:	881a      	ldrh	r2, [r3, #0]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f000 fc67 	bl	8008650 <UART_Start_Receive_DMA>
 8007d82:	0003      	movs	r3, r0
 8007d84:	e000      	b.n	8007d88 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8007d86:	2302      	movs	r3, #2
  }
}
 8007d88:	0018      	movs	r0, r3
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	b008      	add	sp, #32
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	40008000 	.word	0x40008000

08007d94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d9c:	46c0      	nop			; (mov r8, r8)
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	b002      	add	sp, #8
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dac:	46c0      	nop			; (mov r8, r8)
 8007dae:	46bd      	mov	sp, r7
 8007db0:	b002      	add	sp, #8
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	000a      	movs	r2, r1
 8007dbe:	1cbb      	adds	r3, r7, #2
 8007dc0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dc2:	46c0      	nop			; (mov r8, r8)
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	b002      	add	sp, #8
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dcc:	b5b0      	push	{r4, r5, r7, lr}
 8007dce:	b090      	sub	sp, #64	; 0x40
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dd4:	231a      	movs	r3, #26
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	189b      	adds	r3, r3, r2
 8007dda:	19db      	adds	r3, r3, r7
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	431a      	orrs	r2, r3
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	431a      	orrs	r2, r3
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4ac4      	ldr	r2, [pc, #784]	; (8008110 <UART_SetConfig+0x344>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	0019      	movs	r1, r3
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	4abf      	ldr	r2, [pc, #764]	; (8008114 <UART_SetConfig+0x348>)
 8007e16:	4013      	ands	r3, r2
 8007e18:	0018      	movs	r0, r3
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	68d9      	ldr	r1, [r3, #12]
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	0003      	movs	r3, r0
 8007e24:	430b      	orrs	r3, r1
 8007e26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4ab9      	ldr	r2, [pc, #740]	; (8008118 <UART_SetConfig+0x34c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d004      	beq.n	8007e42 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4ab4      	ldr	r2, [pc, #720]	; (800811c <UART_SetConfig+0x350>)
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	0019      	movs	r1, r3
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e54:	430b      	orrs	r3, r1
 8007e56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	220f      	movs	r2, #15
 8007e60:	4393      	bics	r3, r2
 8007e62:	0018      	movs	r0, r3
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	0003      	movs	r3, r0
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4aaa      	ldr	r2, [pc, #680]	; (8008120 <UART_SetConfig+0x354>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d131      	bne.n	8007ee0 <UART_SetConfig+0x114>
 8007e7c:	4ba9      	ldr	r3, [pc, #676]	; (8008124 <UART_SetConfig+0x358>)
 8007e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e80:	2203      	movs	r2, #3
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d01d      	beq.n	8007ec4 <UART_SetConfig+0xf8>
 8007e88:	d823      	bhi.n	8007ed2 <UART_SetConfig+0x106>
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d00c      	beq.n	8007ea8 <UART_SetConfig+0xdc>
 8007e8e:	d820      	bhi.n	8007ed2 <UART_SetConfig+0x106>
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <UART_SetConfig+0xce>
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d00e      	beq.n	8007eb6 <UART_SetConfig+0xea>
 8007e98:	e01b      	b.n	8007ed2 <UART_SetConfig+0x106>
 8007e9a:	231b      	movs	r3, #27
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	189b      	adds	r3, r3, r2
 8007ea0:	19db      	adds	r3, r3, r7
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e071      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007ea8:	231b      	movs	r3, #27
 8007eaa:	2220      	movs	r2, #32
 8007eac:	189b      	adds	r3, r3, r2
 8007eae:	19db      	adds	r3, r3, r7
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	e06a      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007eb6:	231b      	movs	r3, #27
 8007eb8:	2220      	movs	r2, #32
 8007eba:	189b      	adds	r3, r3, r2
 8007ebc:	19db      	adds	r3, r3, r7
 8007ebe:	2204      	movs	r2, #4
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	e063      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007ec4:	231b      	movs	r3, #27
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	189b      	adds	r3, r3, r2
 8007eca:	19db      	adds	r3, r3, r7
 8007ecc:	2208      	movs	r2, #8
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	e05c      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007ed2:	231b      	movs	r3, #27
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	189b      	adds	r3, r3, r2
 8007ed8:	19db      	adds	r3, r3, r7
 8007eda:	2210      	movs	r2, #16
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e055      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a90      	ldr	r2, [pc, #576]	; (8008128 <UART_SetConfig+0x35c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d106      	bne.n	8007ef8 <UART_SetConfig+0x12c>
 8007eea:	231b      	movs	r3, #27
 8007eec:	2220      	movs	r2, #32
 8007eee:	189b      	adds	r3, r3, r2
 8007ef0:	19db      	adds	r3, r3, r7
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	e049      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a86      	ldr	r2, [pc, #536]	; (8008118 <UART_SetConfig+0x34c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d13e      	bne.n	8007f80 <UART_SetConfig+0x1b4>
 8007f02:	4b88      	ldr	r3, [pc, #544]	; (8008124 <UART_SetConfig+0x358>)
 8007f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f06:	23c0      	movs	r3, #192	; 0xc0
 8007f08:	011b      	lsls	r3, r3, #4
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	22c0      	movs	r2, #192	; 0xc0
 8007f0e:	0112      	lsls	r2, r2, #4
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d027      	beq.n	8007f64 <UART_SetConfig+0x198>
 8007f14:	22c0      	movs	r2, #192	; 0xc0
 8007f16:	0112      	lsls	r2, r2, #4
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d82a      	bhi.n	8007f72 <UART_SetConfig+0x1a6>
 8007f1c:	2280      	movs	r2, #128	; 0x80
 8007f1e:	0112      	lsls	r2, r2, #4
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d011      	beq.n	8007f48 <UART_SetConfig+0x17c>
 8007f24:	2280      	movs	r2, #128	; 0x80
 8007f26:	0112      	lsls	r2, r2, #4
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d822      	bhi.n	8007f72 <UART_SetConfig+0x1a6>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d004      	beq.n	8007f3a <UART_SetConfig+0x16e>
 8007f30:	2280      	movs	r2, #128	; 0x80
 8007f32:	00d2      	lsls	r2, r2, #3
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00e      	beq.n	8007f56 <UART_SetConfig+0x18a>
 8007f38:	e01b      	b.n	8007f72 <UART_SetConfig+0x1a6>
 8007f3a:	231b      	movs	r3, #27
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	189b      	adds	r3, r3, r2
 8007f40:	19db      	adds	r3, r3, r7
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
 8007f46:	e021      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007f48:	231b      	movs	r3, #27
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	189b      	adds	r3, r3, r2
 8007f4e:	19db      	adds	r3, r3, r7
 8007f50:	2202      	movs	r2, #2
 8007f52:	701a      	strb	r2, [r3, #0]
 8007f54:	e01a      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007f56:	231b      	movs	r3, #27
 8007f58:	2220      	movs	r2, #32
 8007f5a:	189b      	adds	r3, r3, r2
 8007f5c:	19db      	adds	r3, r3, r7
 8007f5e:	2204      	movs	r2, #4
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	e013      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007f64:	231b      	movs	r3, #27
 8007f66:	2220      	movs	r2, #32
 8007f68:	189b      	adds	r3, r3, r2
 8007f6a:	19db      	adds	r3, r3, r7
 8007f6c:	2208      	movs	r2, #8
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e00c      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007f72:	231b      	movs	r3, #27
 8007f74:	2220      	movs	r2, #32
 8007f76:	189b      	adds	r3, r3, r2
 8007f78:	19db      	adds	r3, r3, r7
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	e005      	b.n	8007f8c <UART_SetConfig+0x1c0>
 8007f80:	231b      	movs	r3, #27
 8007f82:	2220      	movs	r2, #32
 8007f84:	189b      	adds	r3, r3, r2
 8007f86:	19db      	adds	r3, r3, r7
 8007f88:	2210      	movs	r2, #16
 8007f8a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a61      	ldr	r2, [pc, #388]	; (8008118 <UART_SetConfig+0x34c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d000      	beq.n	8007f98 <UART_SetConfig+0x1cc>
 8007f96:	e092      	b.n	80080be <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f98:	231b      	movs	r3, #27
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	189b      	adds	r3, r3, r2
 8007f9e:	19db      	adds	r3, r3, r7
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b08      	cmp	r3, #8
 8007fa4:	d015      	beq.n	8007fd2 <UART_SetConfig+0x206>
 8007fa6:	dc18      	bgt.n	8007fda <UART_SetConfig+0x20e>
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d00d      	beq.n	8007fc8 <UART_SetConfig+0x1fc>
 8007fac:	dc15      	bgt.n	8007fda <UART_SetConfig+0x20e>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <UART_SetConfig+0x1ec>
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d005      	beq.n	8007fc2 <UART_SetConfig+0x1f6>
 8007fb6:	e010      	b.n	8007fda <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fb8:	f7fe ffa6 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 8007fbc:	0003      	movs	r3, r0
 8007fbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fc0:	e014      	b.n	8007fec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fc2:	4b5a      	ldr	r3, [pc, #360]	; (800812c <UART_SetConfig+0x360>)
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fc6:	e011      	b.n	8007fec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fc8:	f7fe ff12 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 8007fcc:	0003      	movs	r3, r0
 8007fce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fd0:	e00c      	b.n	8007fec <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fd2:	2380      	movs	r3, #128	; 0x80
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fd8:	e008      	b.n	8007fec <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007fde:	231a      	movs	r3, #26
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	189b      	adds	r3, r3, r2
 8007fe4:	19db      	adds	r3, r3, r7
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	701a      	strb	r2, [r3, #0]
        break;
 8007fea:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d100      	bne.n	8007ff4 <UART_SetConfig+0x228>
 8007ff2:	e147      	b.n	8008284 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ff8:	4b4d      	ldr	r3, [pc, #308]	; (8008130 <UART_SetConfig+0x364>)
 8007ffa:	0052      	lsls	r2, r2, #1
 8007ffc:	5ad3      	ldrh	r3, [r2, r3]
 8007ffe:	0019      	movs	r1, r3
 8008000:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008002:	f7f8 f89b 	bl	800013c <__udivsi3>
 8008006:	0003      	movs	r3, r0
 8008008:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	0013      	movs	r3, r2
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	189b      	adds	r3, r3, r2
 8008014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008016:	429a      	cmp	r2, r3
 8008018:	d305      	bcc.n	8008026 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008022:	429a      	cmp	r2, r3
 8008024:	d906      	bls.n	8008034 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8008026:	231a      	movs	r3, #26
 8008028:	2220      	movs	r2, #32
 800802a:	189b      	adds	r3, r3, r2
 800802c:	19db      	adds	r3, r3, r7
 800802e:	2201      	movs	r2, #1
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	e127      	b.n	8008284 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008036:	61bb      	str	r3, [r7, #24]
 8008038:	2300      	movs	r3, #0
 800803a:	61fb      	str	r3, [r7, #28]
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008040:	4b3b      	ldr	r3, [pc, #236]	; (8008130 <UART_SetConfig+0x364>)
 8008042:	0052      	lsls	r2, r2, #1
 8008044:	5ad3      	ldrh	r3, [r2, r3]
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	2300      	movs	r3, #0
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	69b8      	ldr	r0, [r7, #24]
 8008052:	69f9      	ldr	r1, [r7, #28]
 8008054:	f7f8 fa60 	bl	8000518 <__aeabi_uldivmod>
 8008058:	0002      	movs	r2, r0
 800805a:	000b      	movs	r3, r1
 800805c:	0e11      	lsrs	r1, r2, #24
 800805e:	021d      	lsls	r5, r3, #8
 8008060:	430d      	orrs	r5, r1
 8008062:	0214      	lsls	r4, r2, #8
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	085b      	lsrs	r3, r3, #1
 800806a:	60bb      	str	r3, [r7, #8]
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	68b8      	ldr	r0, [r7, #8]
 8008072:	68f9      	ldr	r1, [r7, #12]
 8008074:	1900      	adds	r0, r0, r4
 8008076:	4169      	adcs	r1, r5
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	603b      	str	r3, [r7, #0]
 800807e:	2300      	movs	r3, #0
 8008080:	607b      	str	r3, [r7, #4]
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f7f8 fa47 	bl	8000518 <__aeabi_uldivmod>
 800808a:	0002      	movs	r2, r0
 800808c:	000b      	movs	r3, r1
 800808e:	0013      	movs	r3, r2
 8008090:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008094:	23c0      	movs	r3, #192	; 0xc0
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	429a      	cmp	r2, r3
 800809a:	d309      	bcc.n	80080b0 <UART_SetConfig+0x2e4>
 800809c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800809e:	2380      	movs	r3, #128	; 0x80
 80080a0:	035b      	lsls	r3, r3, #13
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d204      	bcs.n	80080b0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ac:	60da      	str	r2, [r3, #12]
 80080ae:	e0e9      	b.n	8008284 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80080b0:	231a      	movs	r3, #26
 80080b2:	2220      	movs	r2, #32
 80080b4:	189b      	adds	r3, r3, r2
 80080b6:	19db      	adds	r3, r3, r7
 80080b8:	2201      	movs	r2, #1
 80080ba:	701a      	strb	r2, [r3, #0]
 80080bc:	e0e2      	b.n	8008284 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	69da      	ldr	r2, [r3, #28]
 80080c2:	2380      	movs	r3, #128	; 0x80
 80080c4:	021b      	lsls	r3, r3, #8
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d000      	beq.n	80080cc <UART_SetConfig+0x300>
 80080ca:	e083      	b.n	80081d4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80080cc:	231b      	movs	r3, #27
 80080ce:	2220      	movs	r2, #32
 80080d0:	189b      	adds	r3, r3, r2
 80080d2:	19db      	adds	r3, r3, r7
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b08      	cmp	r3, #8
 80080d8:	d015      	beq.n	8008106 <UART_SetConfig+0x33a>
 80080da:	dc2b      	bgt.n	8008134 <UART_SetConfig+0x368>
 80080dc:	2b04      	cmp	r3, #4
 80080de:	d00d      	beq.n	80080fc <UART_SetConfig+0x330>
 80080e0:	dc28      	bgt.n	8008134 <UART_SetConfig+0x368>
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <UART_SetConfig+0x320>
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d005      	beq.n	80080f6 <UART_SetConfig+0x32a>
 80080ea:	e023      	b.n	8008134 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ec:	f7fe ff0c 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 80080f0:	0003      	movs	r3, r0
 80080f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080f4:	e027      	b.n	8008146 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080f6:	4b0d      	ldr	r3, [pc, #52]	; (800812c <UART_SetConfig+0x360>)
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080fa:	e024      	b.n	8008146 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080fc:	f7fe fe78 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 8008100:	0003      	movs	r3, r0
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008104:	e01f      	b.n	8008146 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008106:	2380      	movs	r3, #128	; 0x80
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800810c:	e01b      	b.n	8008146 <UART_SetConfig+0x37a>
 800810e:	46c0      	nop			; (mov r8, r8)
 8008110:	cfff69f3 	.word	0xcfff69f3
 8008114:	ffffcfff 	.word	0xffffcfff
 8008118:	40008000 	.word	0x40008000
 800811c:	11fff4ff 	.word	0x11fff4ff
 8008120:	40013800 	.word	0x40013800
 8008124:	40021000 	.word	0x40021000
 8008128:	40004400 	.word	0x40004400
 800812c:	00f42400 	.word	0x00f42400
 8008130:	0800d9b8 	.word	0x0800d9b8
      default:
        pclk = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008138:	231a      	movs	r3, #26
 800813a:	2220      	movs	r2, #32
 800813c:	189b      	adds	r3, r3, r2
 800813e:	19db      	adds	r3, r3, r7
 8008140:	2201      	movs	r2, #1
 8008142:	701a      	strb	r2, [r3, #0]
        break;
 8008144:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008148:	2b00      	cmp	r3, #0
 800814a:	d100      	bne.n	800814e <UART_SetConfig+0x382>
 800814c:	e09a      	b.n	8008284 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008152:	4b58      	ldr	r3, [pc, #352]	; (80082b4 <UART_SetConfig+0x4e8>)
 8008154:	0052      	lsls	r2, r2, #1
 8008156:	5ad3      	ldrh	r3, [r2, r3]
 8008158:	0019      	movs	r1, r3
 800815a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800815c:	f7f7 ffee 	bl	800013c <__udivsi3>
 8008160:	0003      	movs	r3, r0
 8008162:	005a      	lsls	r2, r3, #1
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	085b      	lsrs	r3, r3, #1
 800816a:	18d2      	adds	r2, r2, r3
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	0019      	movs	r1, r3
 8008172:	0010      	movs	r0, r2
 8008174:	f7f7 ffe2 	bl	800013c <__udivsi3>
 8008178:	0003      	movs	r3, r0
 800817a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	2b0f      	cmp	r3, #15
 8008180:	d921      	bls.n	80081c6 <UART_SetConfig+0x3fa>
 8008182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008184:	2380      	movs	r3, #128	; 0x80
 8008186:	025b      	lsls	r3, r3, #9
 8008188:	429a      	cmp	r2, r3
 800818a:	d21c      	bcs.n	80081c6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	b29a      	uxth	r2, r3
 8008190:	200e      	movs	r0, #14
 8008192:	2420      	movs	r4, #32
 8008194:	1903      	adds	r3, r0, r4
 8008196:	19db      	adds	r3, r3, r7
 8008198:	210f      	movs	r1, #15
 800819a:	438a      	bics	r2, r1
 800819c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	2207      	movs	r2, #7
 80081a6:	4013      	ands	r3, r2
 80081a8:	b299      	uxth	r1, r3
 80081aa:	1903      	adds	r3, r0, r4
 80081ac:	19db      	adds	r3, r3, r7
 80081ae:	1902      	adds	r2, r0, r4
 80081b0:	19d2      	adds	r2, r2, r7
 80081b2:	8812      	ldrh	r2, [r2, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	1902      	adds	r2, r0, r4
 80081be:	19d2      	adds	r2, r2, r7
 80081c0:	8812      	ldrh	r2, [r2, #0]
 80081c2:	60da      	str	r2, [r3, #12]
 80081c4:	e05e      	b.n	8008284 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80081c6:	231a      	movs	r3, #26
 80081c8:	2220      	movs	r2, #32
 80081ca:	189b      	adds	r3, r3, r2
 80081cc:	19db      	adds	r3, r3, r7
 80081ce:	2201      	movs	r2, #1
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	e057      	b.n	8008284 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081d4:	231b      	movs	r3, #27
 80081d6:	2220      	movs	r2, #32
 80081d8:	189b      	adds	r3, r3, r2
 80081da:	19db      	adds	r3, r3, r7
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b08      	cmp	r3, #8
 80081e0:	d015      	beq.n	800820e <UART_SetConfig+0x442>
 80081e2:	dc18      	bgt.n	8008216 <UART_SetConfig+0x44a>
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d00d      	beq.n	8008204 <UART_SetConfig+0x438>
 80081e8:	dc15      	bgt.n	8008216 <UART_SetConfig+0x44a>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <UART_SetConfig+0x428>
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d005      	beq.n	80081fe <UART_SetConfig+0x432>
 80081f2:	e010      	b.n	8008216 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f4:	f7fe fe88 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 80081f8:	0003      	movs	r3, r0
 80081fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081fc:	e014      	b.n	8008228 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081fe:	4b2e      	ldr	r3, [pc, #184]	; (80082b8 <UART_SetConfig+0x4ec>)
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008202:	e011      	b.n	8008228 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008204:	f7fe fdf4 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 8008208:	0003      	movs	r3, r0
 800820a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800820c:	e00c      	b.n	8008228 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800820e:	2380      	movs	r3, #128	; 0x80
 8008210:	021b      	lsls	r3, r3, #8
 8008212:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008214:	e008      	b.n	8008228 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800821a:	231a      	movs	r3, #26
 800821c:	2220      	movs	r2, #32
 800821e:	189b      	adds	r3, r3, r2
 8008220:	19db      	adds	r3, r3, r7
 8008222:	2201      	movs	r2, #1
 8008224:	701a      	strb	r2, [r3, #0]
        break;
 8008226:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	2b00      	cmp	r3, #0
 800822c:	d02a      	beq.n	8008284 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008232:	4b20      	ldr	r3, [pc, #128]	; (80082b4 <UART_SetConfig+0x4e8>)
 8008234:	0052      	lsls	r2, r2, #1
 8008236:	5ad3      	ldrh	r3, [r2, r3]
 8008238:	0019      	movs	r1, r3
 800823a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800823c:	f7f7 ff7e 	bl	800013c <__udivsi3>
 8008240:	0003      	movs	r3, r0
 8008242:	001a      	movs	r2, r3
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	085b      	lsrs	r3, r3, #1
 800824a:	18d2      	adds	r2, r2, r3
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	0019      	movs	r1, r3
 8008252:	0010      	movs	r0, r2
 8008254:	f7f7 ff72 	bl	800013c <__udivsi3>
 8008258:	0003      	movs	r3, r0
 800825a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	2b0f      	cmp	r3, #15
 8008260:	d90a      	bls.n	8008278 <UART_SetConfig+0x4ac>
 8008262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008264:	2380      	movs	r3, #128	; 0x80
 8008266:	025b      	lsls	r3, r3, #9
 8008268:	429a      	cmp	r2, r3
 800826a:	d205      	bcs.n	8008278 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	b29a      	uxth	r2, r3
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60da      	str	r2, [r3, #12]
 8008276:	e005      	b.n	8008284 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8008278:	231a      	movs	r3, #26
 800827a:	2220      	movs	r2, #32
 800827c:	189b      	adds	r3, r3, r2
 800827e:	19db      	adds	r3, r3, r7
 8008280:	2201      	movs	r2, #1
 8008282:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	226a      	movs	r2, #106	; 0x6a
 8008288:	2101      	movs	r1, #1
 800828a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	2268      	movs	r2, #104	; 0x68
 8008290:	2101      	movs	r1, #1
 8008292:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	2200      	movs	r2, #0
 8008298:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	2200      	movs	r2, #0
 800829e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80082a0:	231a      	movs	r3, #26
 80082a2:	2220      	movs	r2, #32
 80082a4:	189b      	adds	r3, r3, r2
 80082a6:	19db      	adds	r3, r3, r7
 80082a8:	781b      	ldrb	r3, [r3, #0]
}
 80082aa:	0018      	movs	r0, r3
 80082ac:	46bd      	mov	sp, r7
 80082ae:	b010      	add	sp, #64	; 0x40
 80082b0:	bdb0      	pop	{r4, r5, r7, pc}
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	0800d9b8 	.word	0x0800d9b8
 80082b8:	00f42400 	.word	0x00f42400

080082bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c8:	2201      	movs	r2, #1
 80082ca:	4013      	ands	r3, r2
 80082cc:	d00b      	beq.n	80082e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	4a4a      	ldr	r2, [pc, #296]	; (8008400 <UART_AdvFeatureConfig+0x144>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	0019      	movs	r1, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	2202      	movs	r2, #2
 80082ec:	4013      	ands	r3, r2
 80082ee:	d00b      	beq.n	8008308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	4a43      	ldr	r2, [pc, #268]	; (8008404 <UART_AdvFeatureConfig+0x148>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	0019      	movs	r1, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830c:	2204      	movs	r2, #4
 800830e:	4013      	ands	r3, r2
 8008310:	d00b      	beq.n	800832a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	4a3b      	ldr	r2, [pc, #236]	; (8008408 <UART_AdvFeatureConfig+0x14c>)
 800831a:	4013      	ands	r3, r2
 800831c:	0019      	movs	r1, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832e:	2208      	movs	r2, #8
 8008330:	4013      	ands	r3, r2
 8008332:	d00b      	beq.n	800834c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	4a34      	ldr	r2, [pc, #208]	; (800840c <UART_AdvFeatureConfig+0x150>)
 800833c:	4013      	ands	r3, r2
 800833e:	0019      	movs	r1, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	2210      	movs	r2, #16
 8008352:	4013      	ands	r3, r2
 8008354:	d00b      	beq.n	800836e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	4a2c      	ldr	r2, [pc, #176]	; (8008410 <UART_AdvFeatureConfig+0x154>)
 800835e:	4013      	ands	r3, r2
 8008360:	0019      	movs	r1, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008372:	2220      	movs	r2, #32
 8008374:	4013      	ands	r3, r2
 8008376:	d00b      	beq.n	8008390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	4a25      	ldr	r2, [pc, #148]	; (8008414 <UART_AdvFeatureConfig+0x158>)
 8008380:	4013      	ands	r3, r2
 8008382:	0019      	movs	r1, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	2240      	movs	r2, #64	; 0x40
 8008396:	4013      	ands	r3, r2
 8008398:	d01d      	beq.n	80083d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	4a1d      	ldr	r2, [pc, #116]	; (8008418 <UART_AdvFeatureConfig+0x15c>)
 80083a2:	4013      	ands	r3, r2
 80083a4:	0019      	movs	r1, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083b6:	2380      	movs	r3, #128	; 0x80
 80083b8:	035b      	lsls	r3, r3, #13
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d10b      	bne.n	80083d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	4a15      	ldr	r2, [pc, #84]	; (800841c <UART_AdvFeatureConfig+0x160>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	0019      	movs	r1, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	2280      	movs	r2, #128	; 0x80
 80083dc:	4013      	ands	r3, r2
 80083de:	d00b      	beq.n	80083f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	4a0e      	ldr	r2, [pc, #56]	; (8008420 <UART_AdvFeatureConfig+0x164>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	0019      	movs	r1, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	605a      	str	r2, [r3, #4]
  }
}
 80083f8:	46c0      	nop			; (mov r8, r8)
 80083fa:	46bd      	mov	sp, r7
 80083fc:	b002      	add	sp, #8
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	fffdffff 	.word	0xfffdffff
 8008404:	fffeffff 	.word	0xfffeffff
 8008408:	fffbffff 	.word	0xfffbffff
 800840c:	ffff7fff 	.word	0xffff7fff
 8008410:	ffffefff 	.word	0xffffefff
 8008414:	ffffdfff 	.word	0xffffdfff
 8008418:	ffefffff 	.word	0xffefffff
 800841c:	ff9fffff 	.word	0xff9fffff
 8008420:	fff7ffff 	.word	0xfff7ffff

08008424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af02      	add	r7, sp, #8
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2290      	movs	r2, #144	; 0x90
 8008430:	2100      	movs	r1, #0
 8008432:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008434:	f7fc fba8 	bl	8004b88 <HAL_GetTick>
 8008438:	0003      	movs	r3, r0
 800843a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2208      	movs	r2, #8
 8008444:	4013      	ands	r3, r2
 8008446:	2b08      	cmp	r3, #8
 8008448:	d10c      	bne.n	8008464 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2280      	movs	r2, #128	; 0x80
 800844e:	0391      	lsls	r1, r2, #14
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4a1a      	ldr	r2, [pc, #104]	; (80084bc <UART_CheckIdleState+0x98>)
 8008454:	9200      	str	r2, [sp, #0]
 8008456:	2200      	movs	r2, #0
 8008458:	f000 f832 	bl	80084c0 <UART_WaitOnFlagUntilTimeout>
 800845c:	1e03      	subs	r3, r0, #0
 800845e:	d001      	beq.n	8008464 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e026      	b.n	80084b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2204      	movs	r2, #4
 800846c:	4013      	ands	r3, r2
 800846e:	2b04      	cmp	r3, #4
 8008470:	d10c      	bne.n	800848c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2280      	movs	r2, #128	; 0x80
 8008476:	03d1      	lsls	r1, r2, #15
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4a10      	ldr	r2, [pc, #64]	; (80084bc <UART_CheckIdleState+0x98>)
 800847c:	9200      	str	r2, [sp, #0]
 800847e:	2200      	movs	r2, #0
 8008480:	f000 f81e 	bl	80084c0 <UART_WaitOnFlagUntilTimeout>
 8008484:	1e03      	subs	r3, r0, #0
 8008486:	d001      	beq.n	800848c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e012      	b.n	80084b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2288      	movs	r2, #136	; 0x88
 8008490:	2120      	movs	r1, #32
 8008492:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	228c      	movs	r2, #140	; 0x8c
 8008498:	2120      	movs	r1, #32
 800849a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2284      	movs	r2, #132	; 0x84
 80084ac:	2100      	movs	r1, #0
 80084ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	0018      	movs	r0, r3
 80084b4:	46bd      	mov	sp, r7
 80084b6:	b004      	add	sp, #16
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	01ffffff 	.word	0x01ffffff

080084c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b094      	sub	sp, #80	; 0x50
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	1dfb      	adds	r3, r7, #7
 80084ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d0:	e0a7      	b.n	8008622 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084d4:	3301      	adds	r3, #1
 80084d6:	d100      	bne.n	80084da <UART_WaitOnFlagUntilTimeout+0x1a>
 80084d8:	e0a3      	b.n	8008622 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084da:	f7fc fb55 	bl	8004b88 <HAL_GetTick>
 80084de:	0002      	movs	r2, r0
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d302      	bcc.n	80084f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80084ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d13f      	bne.n	8008570 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084f0:	f3ef 8310 	mrs	r3, PRIMASK
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80084f8:	647b      	str	r3, [r7, #68]	; 0x44
 80084fa:	2301      	movs	r3, #1
 80084fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	f383 8810 	msr	PRIMASK, r3
}
 8008504:	46c0      	nop			; (mov r8, r8)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	494e      	ldr	r1, [pc, #312]	; (800864c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008512:	400a      	ands	r2, r1
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008518:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	f383 8810 	msr	PRIMASK, r3
}
 8008520:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008522:	f3ef 8310 	mrs	r3, PRIMASK
 8008526:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852a:	643b      	str	r3, [r7, #64]	; 0x40
 800852c:	2301      	movs	r3, #1
 800852e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008532:	f383 8810 	msr	PRIMASK, r3
}
 8008536:	46c0      	nop			; (mov r8, r8)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2101      	movs	r1, #1
 8008544:	438a      	bics	r2, r1
 8008546:	609a      	str	r2, [r3, #8]
 8008548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800854c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854e:	f383 8810 	msr	PRIMASK, r3
}
 8008552:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2288      	movs	r2, #136	; 0x88
 8008558:	2120      	movs	r1, #32
 800855a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	228c      	movs	r2, #140	; 0x8c
 8008560:	2120      	movs	r1, #32
 8008562:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2284      	movs	r2, #132	; 0x84
 8008568:	2100      	movs	r1, #0
 800856a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e069      	b.n	8008644 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2204      	movs	r2, #4
 8008578:	4013      	ands	r3, r2
 800857a:	d052      	beq.n	8008622 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69da      	ldr	r2, [r3, #28]
 8008582:	2380      	movs	r3, #128	; 0x80
 8008584:	011b      	lsls	r3, r3, #4
 8008586:	401a      	ands	r2, r3
 8008588:	2380      	movs	r3, #128	; 0x80
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	429a      	cmp	r2, r3
 800858e:	d148      	bne.n	8008622 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2280      	movs	r2, #128	; 0x80
 8008596:	0112      	lsls	r2, r2, #4
 8008598:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800859a:	f3ef 8310 	mrs	r3, PRIMASK
 800859e:	613b      	str	r3, [r7, #16]
  return(result);
 80085a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085a4:	2301      	movs	r3, #1
 80085a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f383 8810 	msr	PRIMASK, r3
}
 80085ae:	46c0      	nop			; (mov r8, r8)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4924      	ldr	r1, [pc, #144]	; (800864c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80085bc:	400a      	ands	r2, r1
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f383 8810 	msr	PRIMASK, r3
}
 80085ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085cc:	f3ef 8310 	mrs	r3, PRIMASK
 80085d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80085d2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80085d6:	2301      	movs	r3, #1
 80085d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	f383 8810 	msr	PRIMASK, r3
}
 80085e0:	46c0      	nop			; (mov r8, r8)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2101      	movs	r1, #1
 80085ee:	438a      	bics	r2, r1
 80085f0:	609a      	str	r2, [r3, #8]
 80085f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	f383 8810 	msr	PRIMASK, r3
}
 80085fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2288      	movs	r2, #136	; 0x88
 8008602:	2120      	movs	r1, #32
 8008604:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	228c      	movs	r2, #140	; 0x8c
 800860a:	2120      	movs	r1, #32
 800860c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2290      	movs	r2, #144	; 0x90
 8008612:	2120      	movs	r1, #32
 8008614:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2284      	movs	r2, #132	; 0x84
 800861a:	2100      	movs	r1, #0
 800861c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e010      	b.n	8008644 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	4013      	ands	r3, r2
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	425a      	negs	r2, r3
 8008632:	4153      	adcs	r3, r2
 8008634:	b2db      	uxtb	r3, r3
 8008636:	001a      	movs	r2, r3
 8008638:	1dfb      	adds	r3, r7, #7
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	429a      	cmp	r2, r3
 800863e:	d100      	bne.n	8008642 <UART_WaitOnFlagUntilTimeout+0x182>
 8008640:	e747      	b.n	80084d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	0018      	movs	r0, r3
 8008646:	46bd      	mov	sp, r7
 8008648:	b014      	add	sp, #80	; 0x50
 800864a:	bd80      	pop	{r7, pc}
 800864c:	fffffe5f 	.word	0xfffffe5f

08008650 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b090      	sub	sp, #64	; 0x40
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	1dbb      	adds	r3, r7, #6
 800865c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	1dba      	adds	r2, r7, #6
 8008668:	215c      	movs	r1, #92	; 0x5c
 800866a:	8812      	ldrh	r2, [r2, #0]
 800866c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2290      	movs	r2, #144	; 0x90
 8008672:	2100      	movs	r1, #0
 8008674:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	228c      	movs	r2, #140	; 0x8c
 800867a:	2122      	movs	r1, #34	; 0x22
 800867c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2280      	movs	r2, #128	; 0x80
 8008682:	589b      	ldr	r3, [r3, r2]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d02d      	beq.n	80086e4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2280      	movs	r2, #128	; 0x80
 800868c:	589b      	ldr	r3, [r3, r2]
 800868e:	4a40      	ldr	r2, [pc, #256]	; (8008790 <UART_Start_Receive_DMA+0x140>)
 8008690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2280      	movs	r2, #128	; 0x80
 8008696:	589b      	ldr	r3, [r3, r2]
 8008698:	4a3e      	ldr	r2, [pc, #248]	; (8008794 <UART_Start_Receive_DMA+0x144>)
 800869a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2280      	movs	r2, #128	; 0x80
 80086a0:	589b      	ldr	r3, [r3, r2]
 80086a2:	4a3d      	ldr	r2, [pc, #244]	; (8008798 <UART_Start_Receive_DMA+0x148>)
 80086a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2280      	movs	r2, #128	; 0x80
 80086aa:	589b      	ldr	r3, [r3, r2]
 80086ac:	2200      	movs	r2, #0
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2280      	movs	r2, #128	; 0x80
 80086b4:	5898      	ldr	r0, [r3, r2]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3324      	adds	r3, #36	; 0x24
 80086bc:	0019      	movs	r1, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c2:	001a      	movs	r2, r3
 80086c4:	1dbb      	adds	r3, r7, #6
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	f7fd fa6e 	bl	8005ba8 <HAL_DMA_Start_IT>
 80086cc:	1e03      	subs	r3, r0, #0
 80086ce:	d009      	beq.n	80086e4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2290      	movs	r2, #144	; 0x90
 80086d4:	2110      	movs	r1, #16
 80086d6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	228c      	movs	r2, #140	; 0x8c
 80086dc:	2120      	movs	r1, #32
 80086de:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e050      	b.n	8008786 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d019      	beq.n	8008720 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ec:	f3ef 8310 	mrs	r3, PRIMASK
 80086f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f6:	2301      	movs	r3, #1
 80086f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	f383 8810 	msr	PRIMASK, r3
}
 8008700:	46c0      	nop			; (mov r8, r8)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2180      	movs	r1, #128	; 0x80
 800870e:	0049      	lsls	r1, r1, #1
 8008710:	430a      	orrs	r2, r1
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008716:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871a:	f383 8810 	msr	PRIMASK, r3
}
 800871e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008720:	f3ef 8310 	mrs	r3, PRIMASK
 8008724:	613b      	str	r3, [r7, #16]
  return(result);
 8008726:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008728:	63bb      	str	r3, [r7, #56]	; 0x38
 800872a:	2301      	movs	r3, #1
 800872c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f383 8810 	msr	PRIMASK, r3
}
 8008734:	46c0      	nop			; (mov r8, r8)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2101      	movs	r1, #1
 8008742:	430a      	orrs	r2, r1
 8008744:	609a      	str	r2, [r3, #8]
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	f383 8810 	msr	PRIMASK, r3
}
 8008750:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008752:	f3ef 8310 	mrs	r3, PRIMASK
 8008756:	61fb      	str	r3, [r7, #28]
  return(result);
 8008758:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800875a:	637b      	str	r3, [r7, #52]	; 0x34
 800875c:	2301      	movs	r3, #1
 800875e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	f383 8810 	msr	PRIMASK, r3
}
 8008766:	46c0      	nop			; (mov r8, r8)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689a      	ldr	r2, [r3, #8]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2140      	movs	r1, #64	; 0x40
 8008774:	430a      	orrs	r2, r1
 8008776:	609a      	str	r2, [r3, #8]
 8008778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	f383 8810 	msr	PRIMASK, r3
}
 8008782:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	0018      	movs	r0, r3
 8008788:	46bd      	mov	sp, r7
 800878a:	b010      	add	sp, #64	; 0x40
 800878c:	bd80      	pop	{r7, pc}
 800878e:	46c0      	nop			; (mov r8, r8)
 8008790:	080088e9 	.word	0x080088e9
 8008794:	08008a19 	.word	0x08008a19
 8008798:	08008a5b 	.word	0x08008a5b

0800879c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	; 0x28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087a4:	f3ef 8310 	mrs	r3, PRIMASK
 80087a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80087aa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
 80087ae:	2301      	movs	r3, #1
 80087b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f383 8810 	msr	PRIMASK, r3
}
 80087b8:	46c0      	nop			; (mov r8, r8)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	21c0      	movs	r1, #192	; 0xc0
 80087c6:	438a      	bics	r2, r1
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f383 8810 	msr	PRIMASK, r3
}
 80087d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d6:	f3ef 8310 	mrs	r3, PRIMASK
 80087da:	617b      	str	r3, [r7, #20]
  return(result);
 80087dc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80087de:	623b      	str	r3, [r7, #32]
 80087e0:	2301      	movs	r3, #1
 80087e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	f383 8810 	msr	PRIMASK, r3
}
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689a      	ldr	r2, [r3, #8]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4908      	ldr	r1, [pc, #32]	; (8008818 <UART_EndTxTransfer+0x7c>)
 80087f8:	400a      	ands	r2, r1
 80087fa:	609a      	str	r2, [r3, #8]
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	f383 8810 	msr	PRIMASK, r3
}
 8008806:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2288      	movs	r2, #136	; 0x88
 800880c:	2120      	movs	r1, #32
 800880e:	5099      	str	r1, [r3, r2]
}
 8008810:	46c0      	nop			; (mov r8, r8)
 8008812:	46bd      	mov	sp, r7
 8008814:	b00a      	add	sp, #40	; 0x28
 8008816:	bd80      	pop	{r7, pc}
 8008818:	ff7fffff 	.word	0xff7fffff

0800881c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08e      	sub	sp, #56	; 0x38
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008824:	f3ef 8310 	mrs	r3, PRIMASK
 8008828:	617b      	str	r3, [r7, #20]
  return(result);
 800882a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800882c:	637b      	str	r3, [r7, #52]	; 0x34
 800882e:	2301      	movs	r3, #1
 8008830:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	f383 8810 	msr	PRIMASK, r3
}
 8008838:	46c0      	nop			; (mov r8, r8)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4926      	ldr	r1, [pc, #152]	; (80088e0 <UART_EndRxTransfer+0xc4>)
 8008846:	400a      	ands	r2, r1
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	f383 8810 	msr	PRIMASK, r3
}
 8008854:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008856:	f3ef 8310 	mrs	r3, PRIMASK
 800885a:	623b      	str	r3, [r7, #32]
  return(result);
 800885c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800885e:	633b      	str	r3, [r7, #48]	; 0x30
 8008860:	2301      	movs	r3, #1
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	f383 8810 	msr	PRIMASK, r3
}
 800886a:	46c0      	nop			; (mov r8, r8)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689a      	ldr	r2, [r3, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	491b      	ldr	r1, [pc, #108]	; (80088e4 <UART_EndRxTransfer+0xc8>)
 8008878:	400a      	ands	r2, r1
 800887a:	609a      	str	r2, [r3, #8]
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	f383 8810 	msr	PRIMASK, r3
}
 8008886:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800888c:	2b01      	cmp	r3, #1
 800888e:	d118      	bne.n	80088c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008890:	f3ef 8310 	mrs	r3, PRIMASK
 8008894:	60bb      	str	r3, [r7, #8]
  return(result);
 8008896:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800889a:	2301      	movs	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f383 8810 	msr	PRIMASK, r3
}
 80088a4:	46c0      	nop			; (mov r8, r8)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2110      	movs	r1, #16
 80088b2:	438a      	bics	r2, r1
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f383 8810 	msr	PRIMASK, r3
}
 80088c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	228c      	movs	r2, #140	; 0x8c
 80088c6:	2120      	movs	r1, #32
 80088c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	46bd      	mov	sp, r7
 80088da:	b00e      	add	sp, #56	; 0x38
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	fffffedf 	.word	0xfffffedf
 80088e4:	effffffe 	.word	0xeffffffe

080088e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b094      	sub	sp, #80	; 0x50
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2220      	movs	r2, #32
 80088fe:	4013      	ands	r3, r2
 8008900:	d16f      	bne.n	80089e2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008904:	225e      	movs	r2, #94	; 0x5e
 8008906:	2100      	movs	r1, #0
 8008908:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800890a:	f3ef 8310 	mrs	r3, PRIMASK
 800890e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008910:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008912:	64bb      	str	r3, [r7, #72]	; 0x48
 8008914:	2301      	movs	r3, #1
 8008916:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	f383 8810 	msr	PRIMASK, r3
}
 800891e:	46c0      	nop			; (mov r8, r8)
 8008920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	493a      	ldr	r1, [pc, #232]	; (8008a14 <UART_DMAReceiveCplt+0x12c>)
 800892c:	400a      	ands	r2, r1
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008932:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	f383 8810 	msr	PRIMASK, r3
}
 800893a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800893c:	f3ef 8310 	mrs	r3, PRIMASK
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008944:	647b      	str	r3, [r7, #68]	; 0x44
 8008946:	2301      	movs	r3, #1
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	f383 8810 	msr	PRIMASK, r3
}
 8008950:	46c0      	nop			; (mov r8, r8)
 8008952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2101      	movs	r1, #1
 800895e:	438a      	bics	r2, r1
 8008960:	609a      	str	r2, [r3, #8]
 8008962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008964:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	f383 8810 	msr	PRIMASK, r3
}
 800896c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800896e:	f3ef 8310 	mrs	r3, PRIMASK
 8008972:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008976:	643b      	str	r3, [r7, #64]	; 0x40
 8008978:	2301      	movs	r3, #1
 800897a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800897c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897e:	f383 8810 	msr	PRIMASK, r3
}
 8008982:	46c0      	nop			; (mov r8, r8)
 8008984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689a      	ldr	r2, [r3, #8]
 800898a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2140      	movs	r1, #64	; 0x40
 8008990:	438a      	bics	r2, r1
 8008992:	609a      	str	r2, [r3, #8]
 8008994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008996:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	f383 8810 	msr	PRIMASK, r3
}
 800899e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80089a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a2:	228c      	movs	r2, #140	; 0x8c
 80089a4:	2120      	movs	r1, #32
 80089a6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d118      	bne.n	80089e2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089b0:	f3ef 8310 	mrs	r3, PRIMASK
 80089b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80089b6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ba:	2301      	movs	r3, #1
 80089bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f383 8810 	msr	PRIMASK, r3
}
 80089c4:	46c0      	nop			; (mov r8, r8)
 80089c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2110      	movs	r1, #16
 80089d2:	438a      	bics	r2, r1
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f383 8810 	msr	PRIMASK, r3
}
 80089e0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e4:	2200      	movs	r2, #0
 80089e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d108      	bne.n	8008a02 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f2:	225c      	movs	r2, #92	; 0x5c
 80089f4:	5a9a      	ldrh	r2, [r3, r2]
 80089f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f8:	0011      	movs	r1, r2
 80089fa:	0018      	movs	r0, r3
 80089fc:	f7ff f9da 	bl	8007db4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a00:	e003      	b.n	8008a0a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8008a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a04:	0018      	movs	r0, r3
 8008a06:	f7fa ff9f 	bl	8003948 <HAL_UART_RxCpltCallback>
}
 8008a0a:	46c0      	nop			; (mov r8, r8)
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	b014      	add	sp, #80	; 0x50
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	fffffeff 	.word	0xfffffeff

08008a18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d10a      	bne.n	8008a4a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	225c      	movs	r2, #92	; 0x5c
 8008a38:	5a9b      	ldrh	r3, [r3, r2]
 8008a3a:	085b      	lsrs	r3, r3, #1
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	0011      	movs	r1, r2
 8008a42:	0018      	movs	r0, r3
 8008a44:	f7ff f9b6 	bl	8007db4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a48:	e003      	b.n	8008a52 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f7ff f9a1 	bl	8007d94 <HAL_UART_RxHalfCpltCallback>
}
 8008a52:	46c0      	nop			; (mov r8, r8)
 8008a54:	46bd      	mov	sp, r7
 8008a56:	b004      	add	sp, #16
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b086      	sub	sp, #24
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	2288      	movs	r2, #136	; 0x88
 8008a6c:	589b      	ldr	r3, [r3, r2]
 8008a6e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	228c      	movs	r2, #140	; 0x8c
 8008a74:	589b      	ldr	r3, [r3, r2]
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	2280      	movs	r2, #128	; 0x80
 8008a80:	4013      	ands	r3, r2
 8008a82:	2b80      	cmp	r3, #128	; 0x80
 8008a84:	d10a      	bne.n	8008a9c <UART_DMAError+0x42>
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2b21      	cmp	r3, #33	; 0x21
 8008a8a:	d107      	bne.n	8008a9c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2256      	movs	r2, #86	; 0x56
 8008a90:	2100      	movs	r1, #0
 8008a92:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	0018      	movs	r0, r3
 8008a98:	f7ff fe80 	bl	800879c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	2240      	movs	r2, #64	; 0x40
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	2b40      	cmp	r3, #64	; 0x40
 8008aa8:	d10a      	bne.n	8008ac0 <UART_DMAError+0x66>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b22      	cmp	r3, #34	; 0x22
 8008aae:	d107      	bne.n	8008ac0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	225e      	movs	r2, #94	; 0x5e
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	0018      	movs	r0, r3
 8008abc:	f7ff feae 	bl	800881c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	2290      	movs	r2, #144	; 0x90
 8008ac4:	589b      	ldr	r3, [r3, r2]
 8008ac6:	2210      	movs	r2, #16
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2190      	movs	r1, #144	; 0x90
 8008ace:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	f7ff f966 	bl	8007da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ad8:	46c0      	nop			; (mov r8, r8)
 8008ada:	46bd      	mov	sp, r7
 8008adc:	b006      	add	sp, #24
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2284      	movs	r2, #132	; 0x84
 8008aec:	5c9b      	ldrb	r3, [r3, r2]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d101      	bne.n	8008af6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008af2:	2302      	movs	r3, #2
 8008af4:	e027      	b.n	8008b46 <HAL_UARTEx_DisableFifoMode+0x66>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2284      	movs	r2, #132	; 0x84
 8008afa:	2101      	movs	r1, #1
 8008afc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2288      	movs	r2, #136	; 0x88
 8008b02:	2124      	movs	r1, #36	; 0x24
 8008b04:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2101      	movs	r1, #1
 8008b1a:	438a      	bics	r2, r1
 8008b1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4a0b      	ldr	r2, [pc, #44]	; (8008b50 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2288      	movs	r2, #136	; 0x88
 8008b38:	2120      	movs	r1, #32
 8008b3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2284      	movs	r2, #132	; 0x84
 8008b40:	2100      	movs	r1, #0
 8008b42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	0018      	movs	r0, r3
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	b004      	add	sp, #16
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	46c0      	nop			; (mov r8, r8)
 8008b50:	dfffffff 	.word	0xdfffffff

08008b54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2284      	movs	r2, #132	; 0x84
 8008b62:	5c9b      	ldrb	r3, [r3, r2]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e02e      	b.n	8008bca <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2284      	movs	r2, #132	; 0x84
 8008b70:	2101      	movs	r1, #1
 8008b72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2288      	movs	r2, #136	; 0x88
 8008b78:	2124      	movs	r1, #36	; 0x24
 8008b7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2101      	movs	r1, #1
 8008b90:	438a      	bics	r2, r1
 8008b92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	00db      	lsls	r3, r3, #3
 8008b9c:	08d9      	lsrs	r1, r3, #3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	0018      	movs	r0, r3
 8008bac:	f000 f854 	bl	8008c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2288      	movs	r2, #136	; 0x88
 8008bbc:	2120      	movs	r1, #32
 8008bbe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2284      	movs	r2, #132	; 0x84
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	0018      	movs	r0, r3
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	b004      	add	sp, #16
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2284      	movs	r2, #132	; 0x84
 8008be2:	5c9b      	ldrb	r3, [r3, r2]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008be8:	2302      	movs	r3, #2
 8008bea:	e02f      	b.n	8008c4c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2284      	movs	r2, #132	; 0x84
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2288      	movs	r2, #136	; 0x88
 8008bf8:	2124      	movs	r1, #36	; 0x24
 8008bfa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2101      	movs	r1, #1
 8008c10:	438a      	bics	r2, r1
 8008c12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	4a0e      	ldr	r2, [pc, #56]	; (8008c54 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	0019      	movs	r1, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f000 f813 	bl	8008c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2288      	movs	r2, #136	; 0x88
 8008c3e:	2120      	movs	r1, #32
 8008c40:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2284      	movs	r2, #132	; 0x84
 8008c46:	2100      	movs	r1, #0
 8008c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b004      	add	sp, #16
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	f1ffffff 	.word	0xf1ffffff

08008c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d108      	bne.n	8008c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	226a      	movs	r2, #106	; 0x6a
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2268      	movs	r2, #104	; 0x68
 8008c74:	2101      	movs	r1, #1
 8008c76:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c78:	e043      	b.n	8008d02 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c7a:	260f      	movs	r6, #15
 8008c7c:	19bb      	adds	r3, r7, r6
 8008c7e:	2208      	movs	r2, #8
 8008c80:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c82:	200e      	movs	r0, #14
 8008c84:	183b      	adds	r3, r7, r0
 8008c86:	2208      	movs	r2, #8
 8008c88:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	0e5b      	lsrs	r3, r3, #25
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	240d      	movs	r4, #13
 8008c96:	193b      	adds	r3, r7, r4
 8008c98:	2107      	movs	r1, #7
 8008c9a:	400a      	ands	r2, r1
 8008c9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	0f5b      	lsrs	r3, r3, #29
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	250c      	movs	r5, #12
 8008caa:	197b      	adds	r3, r7, r5
 8008cac:	2107      	movs	r1, #7
 8008cae:	400a      	ands	r2, r1
 8008cb0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cb2:	183b      	adds	r3, r7, r0
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	197a      	adds	r2, r7, r5
 8008cb8:	7812      	ldrb	r2, [r2, #0]
 8008cba:	4914      	ldr	r1, [pc, #80]	; (8008d0c <UARTEx_SetNbDataToProcess+0xb4>)
 8008cbc:	5c8a      	ldrb	r2, [r1, r2]
 8008cbe:	435a      	muls	r2, r3
 8008cc0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cc2:	197b      	adds	r3, r7, r5
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	4a12      	ldr	r2, [pc, #72]	; (8008d10 <UARTEx_SetNbDataToProcess+0xb8>)
 8008cc8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cca:	0019      	movs	r1, r3
 8008ccc:	f7f7 fac0 	bl	8000250 <__divsi3>
 8008cd0:	0003      	movs	r3, r0
 8008cd2:	b299      	uxth	r1, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	226a      	movs	r2, #106	; 0x6a
 8008cd8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cda:	19bb      	adds	r3, r7, r6
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	193a      	adds	r2, r7, r4
 8008ce0:	7812      	ldrb	r2, [r2, #0]
 8008ce2:	490a      	ldr	r1, [pc, #40]	; (8008d0c <UARTEx_SetNbDataToProcess+0xb4>)
 8008ce4:	5c8a      	ldrb	r2, [r1, r2]
 8008ce6:	435a      	muls	r2, r3
 8008ce8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008cea:	193b      	adds	r3, r7, r4
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4a08      	ldr	r2, [pc, #32]	; (8008d10 <UARTEx_SetNbDataToProcess+0xb8>)
 8008cf0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cf2:	0019      	movs	r1, r3
 8008cf4:	f7f7 faac 	bl	8000250 <__divsi3>
 8008cf8:	0003      	movs	r3, r0
 8008cfa:	b299      	uxth	r1, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2268      	movs	r2, #104	; 0x68
 8008d00:	5299      	strh	r1, [r3, r2]
}
 8008d02:	46c0      	nop			; (mov r8, r8)
 8008d04:	46bd      	mov	sp, r7
 8008d06:	b005      	add	sp, #20
 8008d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	0800d9d0 	.word	0x0800d9d0
 8008d10:	0800d9d8 	.word	0x0800d9d8

08008d14 <atoi>:
 8008d14:	b510      	push	{r4, lr}
 8008d16:	220a      	movs	r2, #10
 8008d18:	2100      	movs	r1, #0
 8008d1a:	f001 fe9b 	bl	800aa54 <strtol>
 8008d1e:	bd10      	pop	{r4, pc}

08008d20 <__errno>:
 8008d20:	4b01      	ldr	r3, [pc, #4]	; (8008d28 <__errno+0x8>)
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	4770      	bx	lr
 8008d26:	46c0      	nop			; (mov r8, r8)
 8008d28:	2000000c 	.word	0x2000000c

08008d2c <__libc_init_array>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	2600      	movs	r6, #0
 8008d30:	4d0c      	ldr	r5, [pc, #48]	; (8008d64 <__libc_init_array+0x38>)
 8008d32:	4c0d      	ldr	r4, [pc, #52]	; (8008d68 <__libc_init_array+0x3c>)
 8008d34:	1b64      	subs	r4, r4, r5
 8008d36:	10a4      	asrs	r4, r4, #2
 8008d38:	42a6      	cmp	r6, r4
 8008d3a:	d109      	bne.n	8008d50 <__libc_init_array+0x24>
 8008d3c:	2600      	movs	r6, #0
 8008d3e:	f004 fd53 	bl	800d7e8 <_init>
 8008d42:	4d0a      	ldr	r5, [pc, #40]	; (8008d6c <__libc_init_array+0x40>)
 8008d44:	4c0a      	ldr	r4, [pc, #40]	; (8008d70 <__libc_init_array+0x44>)
 8008d46:	1b64      	subs	r4, r4, r5
 8008d48:	10a4      	asrs	r4, r4, #2
 8008d4a:	42a6      	cmp	r6, r4
 8008d4c:	d105      	bne.n	8008d5a <__libc_init_array+0x2e>
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}
 8008d50:	00b3      	lsls	r3, r6, #2
 8008d52:	58eb      	ldr	r3, [r5, r3]
 8008d54:	4798      	blx	r3
 8008d56:	3601      	adds	r6, #1
 8008d58:	e7ee      	b.n	8008d38 <__libc_init_array+0xc>
 8008d5a:	00b3      	lsls	r3, r6, #2
 8008d5c:	58eb      	ldr	r3, [r5, r3]
 8008d5e:	4798      	blx	r3
 8008d60:	3601      	adds	r6, #1
 8008d62:	e7f2      	b.n	8008d4a <__libc_init_array+0x1e>
 8008d64:	0800de94 	.word	0x0800de94
 8008d68:	0800de94 	.word	0x0800de94
 8008d6c:	0800de94 	.word	0x0800de94
 8008d70:	0800de98 	.word	0x0800de98

08008d74 <malloc>:
 8008d74:	b510      	push	{r4, lr}
 8008d76:	4b03      	ldr	r3, [pc, #12]	; (8008d84 <malloc+0x10>)
 8008d78:	0001      	movs	r1, r0
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	f000 f882 	bl	8008e84 <_malloc_r>
 8008d80:	bd10      	pop	{r4, pc}
 8008d82:	46c0      	nop			; (mov r8, r8)
 8008d84:	2000000c 	.word	0x2000000c

08008d88 <memcpy>:
 8008d88:	2300      	movs	r3, #0
 8008d8a:	b510      	push	{r4, lr}
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d100      	bne.n	8008d92 <memcpy+0xa>
 8008d90:	bd10      	pop	{r4, pc}
 8008d92:	5ccc      	ldrb	r4, [r1, r3]
 8008d94:	54c4      	strb	r4, [r0, r3]
 8008d96:	3301      	adds	r3, #1
 8008d98:	e7f8      	b.n	8008d8c <memcpy+0x4>

08008d9a <memset>:
 8008d9a:	0003      	movs	r3, r0
 8008d9c:	1882      	adds	r2, r0, r2
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d100      	bne.n	8008da4 <memset+0xa>
 8008da2:	4770      	bx	lr
 8008da4:	7019      	strb	r1, [r3, #0]
 8008da6:	3301      	adds	r3, #1
 8008da8:	e7f9      	b.n	8008d9e <memset+0x4>
	...

08008dac <_free_r>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	0005      	movs	r5, r0
 8008db0:	2900      	cmp	r1, #0
 8008db2:	d010      	beq.n	8008dd6 <_free_r+0x2a>
 8008db4:	1f0c      	subs	r4, r1, #4
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	da00      	bge.n	8008dbe <_free_r+0x12>
 8008dbc:	18e4      	adds	r4, r4, r3
 8008dbe:	0028      	movs	r0, r5
 8008dc0:	f003 f890 	bl	800bee4 <__malloc_lock>
 8008dc4:	4a1d      	ldr	r2, [pc, #116]	; (8008e3c <_free_r+0x90>)
 8008dc6:	6813      	ldr	r3, [r2, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d105      	bne.n	8008dd8 <_free_r+0x2c>
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	6014      	str	r4, [r2, #0]
 8008dd0:	0028      	movs	r0, r5
 8008dd2:	f003 f88f 	bl	800bef4 <__malloc_unlock>
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	d908      	bls.n	8008dee <_free_r+0x42>
 8008ddc:	6821      	ldr	r1, [r4, #0]
 8008dde:	1860      	adds	r0, r4, r1
 8008de0:	4283      	cmp	r3, r0
 8008de2:	d1f3      	bne.n	8008dcc <_free_r+0x20>
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	1841      	adds	r1, r0, r1
 8008dea:	6021      	str	r1, [r4, #0]
 8008dec:	e7ee      	b.n	8008dcc <_free_r+0x20>
 8008dee:	001a      	movs	r2, r3
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <_free_r+0x4e>
 8008df6:	42a3      	cmp	r3, r4
 8008df8:	d9f9      	bls.n	8008dee <_free_r+0x42>
 8008dfa:	6811      	ldr	r1, [r2, #0]
 8008dfc:	1850      	adds	r0, r2, r1
 8008dfe:	42a0      	cmp	r0, r4
 8008e00:	d10b      	bne.n	8008e1a <_free_r+0x6e>
 8008e02:	6820      	ldr	r0, [r4, #0]
 8008e04:	1809      	adds	r1, r1, r0
 8008e06:	1850      	adds	r0, r2, r1
 8008e08:	6011      	str	r1, [r2, #0]
 8008e0a:	4283      	cmp	r3, r0
 8008e0c:	d1e0      	bne.n	8008dd0 <_free_r+0x24>
 8008e0e:	6818      	ldr	r0, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	1841      	adds	r1, r0, r1
 8008e14:	6011      	str	r1, [r2, #0]
 8008e16:	6053      	str	r3, [r2, #4]
 8008e18:	e7da      	b.n	8008dd0 <_free_r+0x24>
 8008e1a:	42a0      	cmp	r0, r4
 8008e1c:	d902      	bls.n	8008e24 <_free_r+0x78>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	e7d5      	b.n	8008dd0 <_free_r+0x24>
 8008e24:	6821      	ldr	r1, [r4, #0]
 8008e26:	1860      	adds	r0, r4, r1
 8008e28:	4283      	cmp	r3, r0
 8008e2a:	d103      	bne.n	8008e34 <_free_r+0x88>
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	1841      	adds	r1, r0, r1
 8008e32:	6021      	str	r1, [r4, #0]
 8008e34:	6063      	str	r3, [r4, #4]
 8008e36:	6054      	str	r4, [r2, #4]
 8008e38:	e7ca      	b.n	8008dd0 <_free_r+0x24>
 8008e3a:	46c0      	nop			; (mov r8, r8)
 8008e3c:	20000534 	.word	0x20000534

08008e40 <sbrk_aligned>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	4e0f      	ldr	r6, [pc, #60]	; (8008e80 <sbrk_aligned+0x40>)
 8008e44:	000d      	movs	r5, r1
 8008e46:	6831      	ldr	r1, [r6, #0]
 8008e48:	0004      	movs	r4, r0
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	d102      	bne.n	8008e54 <sbrk_aligned+0x14>
 8008e4e:	f000 ff05 	bl	8009c5c <_sbrk_r>
 8008e52:	6030      	str	r0, [r6, #0]
 8008e54:	0029      	movs	r1, r5
 8008e56:	0020      	movs	r0, r4
 8008e58:	f000 ff00 	bl	8009c5c <_sbrk_r>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d00a      	beq.n	8008e76 <sbrk_aligned+0x36>
 8008e60:	2303      	movs	r3, #3
 8008e62:	1cc5      	adds	r5, r0, #3
 8008e64:	439d      	bics	r5, r3
 8008e66:	42a8      	cmp	r0, r5
 8008e68:	d007      	beq.n	8008e7a <sbrk_aligned+0x3a>
 8008e6a:	1a29      	subs	r1, r5, r0
 8008e6c:	0020      	movs	r0, r4
 8008e6e:	f000 fef5 	bl	8009c5c <_sbrk_r>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d101      	bne.n	8008e7a <sbrk_aligned+0x3a>
 8008e76:	2501      	movs	r5, #1
 8008e78:	426d      	negs	r5, r5
 8008e7a:	0028      	movs	r0, r5
 8008e7c:	bd70      	pop	{r4, r5, r6, pc}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	20000538 	.word	0x20000538

08008e84 <_malloc_r>:
 8008e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e86:	2203      	movs	r2, #3
 8008e88:	1ccb      	adds	r3, r1, #3
 8008e8a:	4393      	bics	r3, r2
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	0006      	movs	r6, r0
 8008e90:	001f      	movs	r7, r3
 8008e92:	2b0c      	cmp	r3, #12
 8008e94:	d232      	bcs.n	8008efc <_malloc_r+0x78>
 8008e96:	270c      	movs	r7, #12
 8008e98:	42b9      	cmp	r1, r7
 8008e9a:	d831      	bhi.n	8008f00 <_malloc_r+0x7c>
 8008e9c:	0030      	movs	r0, r6
 8008e9e:	f003 f821 	bl	800bee4 <__malloc_lock>
 8008ea2:	4d32      	ldr	r5, [pc, #200]	; (8008f6c <_malloc_r+0xe8>)
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	001c      	movs	r4, r3
 8008ea8:	2c00      	cmp	r4, #0
 8008eaa:	d12e      	bne.n	8008f0a <_malloc_r+0x86>
 8008eac:	0039      	movs	r1, r7
 8008eae:	0030      	movs	r0, r6
 8008eb0:	f7ff ffc6 	bl	8008e40 <sbrk_aligned>
 8008eb4:	0004      	movs	r4, r0
 8008eb6:	1c43      	adds	r3, r0, #1
 8008eb8:	d11e      	bne.n	8008ef8 <_malloc_r+0x74>
 8008eba:	682c      	ldr	r4, [r5, #0]
 8008ebc:	0025      	movs	r5, r4
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	d14a      	bne.n	8008f58 <_malloc_r+0xd4>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	0029      	movs	r1, r5
 8008ec6:	18e3      	adds	r3, r4, r3
 8008ec8:	0030      	movs	r0, r6
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	f000 fec6 	bl	8009c5c <_sbrk_r>
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	4283      	cmp	r3, r0
 8008ed4:	d143      	bne.n	8008f5e <_malloc_r+0xda>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	3703      	adds	r7, #3
 8008eda:	1aff      	subs	r7, r7, r3
 8008edc:	2303      	movs	r3, #3
 8008ede:	439f      	bics	r7, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	2f0c      	cmp	r7, #12
 8008ee4:	d200      	bcs.n	8008ee8 <_malloc_r+0x64>
 8008ee6:	270c      	movs	r7, #12
 8008ee8:	0039      	movs	r1, r7
 8008eea:	0030      	movs	r0, r6
 8008eec:	f7ff ffa8 	bl	8008e40 <sbrk_aligned>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d034      	beq.n	8008f5e <_malloc_r+0xda>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	19df      	adds	r7, r3, r7
 8008ef8:	6027      	str	r7, [r4, #0]
 8008efa:	e013      	b.n	8008f24 <_malloc_r+0xa0>
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dacb      	bge.n	8008e98 <_malloc_r+0x14>
 8008f00:	230c      	movs	r3, #12
 8008f02:	2500      	movs	r5, #0
 8008f04:	6033      	str	r3, [r6, #0]
 8008f06:	0028      	movs	r0, r5
 8008f08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f0a:	6822      	ldr	r2, [r4, #0]
 8008f0c:	1bd1      	subs	r1, r2, r7
 8008f0e:	d420      	bmi.n	8008f52 <_malloc_r+0xce>
 8008f10:	290b      	cmp	r1, #11
 8008f12:	d917      	bls.n	8008f44 <_malloc_r+0xc0>
 8008f14:	19e2      	adds	r2, r4, r7
 8008f16:	6027      	str	r7, [r4, #0]
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	d111      	bne.n	8008f40 <_malloc_r+0xbc>
 8008f1c:	602a      	str	r2, [r5, #0]
 8008f1e:	6863      	ldr	r3, [r4, #4]
 8008f20:	6011      	str	r1, [r2, #0]
 8008f22:	6053      	str	r3, [r2, #4]
 8008f24:	0030      	movs	r0, r6
 8008f26:	0025      	movs	r5, r4
 8008f28:	f002 ffe4 	bl	800bef4 <__malloc_unlock>
 8008f2c:	2207      	movs	r2, #7
 8008f2e:	350b      	adds	r5, #11
 8008f30:	1d23      	adds	r3, r4, #4
 8008f32:	4395      	bics	r5, r2
 8008f34:	1aea      	subs	r2, r5, r3
 8008f36:	429d      	cmp	r5, r3
 8008f38:	d0e5      	beq.n	8008f06 <_malloc_r+0x82>
 8008f3a:	1b5b      	subs	r3, r3, r5
 8008f3c:	50a3      	str	r3, [r4, r2]
 8008f3e:	e7e2      	b.n	8008f06 <_malloc_r+0x82>
 8008f40:	605a      	str	r2, [r3, #4]
 8008f42:	e7ec      	b.n	8008f1e <_malloc_r+0x9a>
 8008f44:	6862      	ldr	r2, [r4, #4]
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	d101      	bne.n	8008f4e <_malloc_r+0xca>
 8008f4a:	602a      	str	r2, [r5, #0]
 8008f4c:	e7ea      	b.n	8008f24 <_malloc_r+0xa0>
 8008f4e:	605a      	str	r2, [r3, #4]
 8008f50:	e7e8      	b.n	8008f24 <_malloc_r+0xa0>
 8008f52:	0023      	movs	r3, r4
 8008f54:	6864      	ldr	r4, [r4, #4]
 8008f56:	e7a7      	b.n	8008ea8 <_malloc_r+0x24>
 8008f58:	002c      	movs	r4, r5
 8008f5a:	686d      	ldr	r5, [r5, #4]
 8008f5c:	e7af      	b.n	8008ebe <_malloc_r+0x3a>
 8008f5e:	230c      	movs	r3, #12
 8008f60:	0030      	movs	r0, r6
 8008f62:	6033      	str	r3, [r6, #0]
 8008f64:	f002 ffc6 	bl	800bef4 <__malloc_unlock>
 8008f68:	e7cd      	b.n	8008f06 <_malloc_r+0x82>
 8008f6a:	46c0      	nop			; (mov r8, r8)
 8008f6c:	20000534 	.word	0x20000534

08008f70 <__cvt>:
 8008f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f72:	001e      	movs	r6, r3
 8008f74:	2300      	movs	r3, #0
 8008f76:	0014      	movs	r4, r2
 8008f78:	b08b      	sub	sp, #44	; 0x2c
 8008f7a:	429e      	cmp	r6, r3
 8008f7c:	da04      	bge.n	8008f88 <__cvt+0x18>
 8008f7e:	2180      	movs	r1, #128	; 0x80
 8008f80:	0609      	lsls	r1, r1, #24
 8008f82:	1873      	adds	r3, r6, r1
 8008f84:	001e      	movs	r6, r3
 8008f86:	232d      	movs	r3, #45	; 0x2d
 8008f88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008f8c:	7013      	strb	r3, [r2, #0]
 8008f8e:	2320      	movs	r3, #32
 8008f90:	2203      	movs	r2, #3
 8008f92:	439f      	bics	r7, r3
 8008f94:	2f46      	cmp	r7, #70	; 0x46
 8008f96:	d007      	beq.n	8008fa8 <__cvt+0x38>
 8008f98:	003b      	movs	r3, r7
 8008f9a:	3b45      	subs	r3, #69	; 0x45
 8008f9c:	4259      	negs	r1, r3
 8008f9e:	414b      	adcs	r3, r1
 8008fa0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008fa2:	3a01      	subs	r2, #1
 8008fa4:	18cb      	adds	r3, r1, r3
 8008fa6:	9310      	str	r3, [sp, #64]	; 0x40
 8008fa8:	ab09      	add	r3, sp, #36	; 0x24
 8008faa:	9304      	str	r3, [sp, #16]
 8008fac:	ab08      	add	r3, sp, #32
 8008fae:	9303      	str	r3, [sp, #12]
 8008fb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fb2:	9200      	str	r2, [sp, #0]
 8008fb4:	9302      	str	r3, [sp, #8]
 8008fb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fb8:	0022      	movs	r2, r4
 8008fba:	9301      	str	r3, [sp, #4]
 8008fbc:	0033      	movs	r3, r6
 8008fbe:	f001 fde1 	bl	800ab84 <_dtoa_r>
 8008fc2:	0005      	movs	r5, r0
 8008fc4:	2f47      	cmp	r7, #71	; 0x47
 8008fc6:	d102      	bne.n	8008fce <__cvt+0x5e>
 8008fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fca:	07db      	lsls	r3, r3, #31
 8008fcc:	d528      	bpl.n	8009020 <__cvt+0xb0>
 8008fce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fd0:	18eb      	adds	r3, r5, r3
 8008fd2:	9307      	str	r3, [sp, #28]
 8008fd4:	2f46      	cmp	r7, #70	; 0x46
 8008fd6:	d114      	bne.n	8009002 <__cvt+0x92>
 8008fd8:	782b      	ldrb	r3, [r5, #0]
 8008fda:	2b30      	cmp	r3, #48	; 0x30
 8008fdc:	d10c      	bne.n	8008ff8 <__cvt+0x88>
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	0020      	movs	r0, r4
 8008fe4:	0031      	movs	r1, r6
 8008fe6:	f7f7 fa2f 	bl	8000448 <__aeabi_dcmpeq>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d104      	bne.n	8008ff8 <__cvt+0x88>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ffa:	9a07      	ldr	r2, [sp, #28]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	18d3      	adds	r3, r2, r3
 8009000:	9307      	str	r3, [sp, #28]
 8009002:	2200      	movs	r2, #0
 8009004:	2300      	movs	r3, #0
 8009006:	0020      	movs	r0, r4
 8009008:	0031      	movs	r1, r6
 800900a:	f7f7 fa1d 	bl	8000448 <__aeabi_dcmpeq>
 800900e:	2800      	cmp	r0, #0
 8009010:	d001      	beq.n	8009016 <__cvt+0xa6>
 8009012:	9b07      	ldr	r3, [sp, #28]
 8009014:	9309      	str	r3, [sp, #36]	; 0x24
 8009016:	2230      	movs	r2, #48	; 0x30
 8009018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800901a:	9907      	ldr	r1, [sp, #28]
 800901c:	428b      	cmp	r3, r1
 800901e:	d306      	bcc.n	800902e <__cvt+0xbe>
 8009020:	0028      	movs	r0, r5
 8009022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009024:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009026:	1b5b      	subs	r3, r3, r5
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	b00b      	add	sp, #44	; 0x2c
 800902c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800902e:	1c59      	adds	r1, r3, #1
 8009030:	9109      	str	r1, [sp, #36]	; 0x24
 8009032:	701a      	strb	r2, [r3, #0]
 8009034:	e7f0      	b.n	8009018 <__cvt+0xa8>

08009036 <__exponent>:
 8009036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009038:	1c83      	adds	r3, r0, #2
 800903a:	b087      	sub	sp, #28
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	0005      	movs	r5, r0
 8009040:	000c      	movs	r4, r1
 8009042:	232b      	movs	r3, #43	; 0x2b
 8009044:	7002      	strb	r2, [r0, #0]
 8009046:	2900      	cmp	r1, #0
 8009048:	da01      	bge.n	800904e <__exponent+0x18>
 800904a:	424c      	negs	r4, r1
 800904c:	3302      	adds	r3, #2
 800904e:	706b      	strb	r3, [r5, #1]
 8009050:	2c09      	cmp	r4, #9
 8009052:	dd31      	ble.n	80090b8 <__exponent+0x82>
 8009054:	270a      	movs	r7, #10
 8009056:	ab04      	add	r3, sp, #16
 8009058:	1dde      	adds	r6, r3, #7
 800905a:	0020      	movs	r0, r4
 800905c:	0039      	movs	r1, r7
 800905e:	9601      	str	r6, [sp, #4]
 8009060:	f7f7 f9dc 	bl	800041c <__aeabi_idivmod>
 8009064:	3e01      	subs	r6, #1
 8009066:	3130      	adds	r1, #48	; 0x30
 8009068:	0020      	movs	r0, r4
 800906a:	7031      	strb	r1, [r6, #0]
 800906c:	0039      	movs	r1, r7
 800906e:	9402      	str	r4, [sp, #8]
 8009070:	f7f7 f8ee 	bl	8000250 <__divsi3>
 8009074:	9b02      	ldr	r3, [sp, #8]
 8009076:	0004      	movs	r4, r0
 8009078:	2b63      	cmp	r3, #99	; 0x63
 800907a:	dcee      	bgt.n	800905a <__exponent+0x24>
 800907c:	9b01      	ldr	r3, [sp, #4]
 800907e:	3430      	adds	r4, #48	; 0x30
 8009080:	1e9a      	subs	r2, r3, #2
 8009082:	0013      	movs	r3, r2
 8009084:	9903      	ldr	r1, [sp, #12]
 8009086:	7014      	strb	r4, [r2, #0]
 8009088:	a804      	add	r0, sp, #16
 800908a:	3007      	adds	r0, #7
 800908c:	4298      	cmp	r0, r3
 800908e:	d80e      	bhi.n	80090ae <__exponent+0x78>
 8009090:	ab04      	add	r3, sp, #16
 8009092:	3307      	adds	r3, #7
 8009094:	2000      	movs	r0, #0
 8009096:	429a      	cmp	r2, r3
 8009098:	d804      	bhi.n	80090a4 <__exponent+0x6e>
 800909a:	ab04      	add	r3, sp, #16
 800909c:	3009      	adds	r0, #9
 800909e:	18c0      	adds	r0, r0, r3
 80090a0:	9b01      	ldr	r3, [sp, #4]
 80090a2:	1ac0      	subs	r0, r0, r3
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	1818      	adds	r0, r3, r0
 80090a8:	1b40      	subs	r0, r0, r5
 80090aa:	b007      	add	sp, #28
 80090ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ae:	7818      	ldrb	r0, [r3, #0]
 80090b0:	3301      	adds	r3, #1
 80090b2:	7008      	strb	r0, [r1, #0]
 80090b4:	3101      	adds	r1, #1
 80090b6:	e7e7      	b.n	8009088 <__exponent+0x52>
 80090b8:	2330      	movs	r3, #48	; 0x30
 80090ba:	18e4      	adds	r4, r4, r3
 80090bc:	70ab      	strb	r3, [r5, #2]
 80090be:	1d28      	adds	r0, r5, #4
 80090c0:	70ec      	strb	r4, [r5, #3]
 80090c2:	e7f1      	b.n	80090a8 <__exponent+0x72>

080090c4 <_printf_float>:
 80090c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c6:	b095      	sub	sp, #84	; 0x54
 80090c8:	000c      	movs	r4, r1
 80090ca:	9209      	str	r2, [sp, #36]	; 0x24
 80090cc:	001e      	movs	r6, r3
 80090ce:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80090d0:	0007      	movs	r7, r0
 80090d2:	f002 fee5 	bl	800bea0 <_localeconv_r>
 80090d6:	6803      	ldr	r3, [r0, #0]
 80090d8:	0018      	movs	r0, r3
 80090da:	930c      	str	r3, [sp, #48]	; 0x30
 80090dc:	f7f7 f812 	bl	8000104 <strlen>
 80090e0:	2300      	movs	r3, #0
 80090e2:	9312      	str	r3, [sp, #72]	; 0x48
 80090e4:	7e23      	ldrb	r3, [r4, #24]
 80090e6:	2207      	movs	r2, #7
 80090e8:	930a      	str	r3, [sp, #40]	; 0x28
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	900e      	str	r0, [sp, #56]	; 0x38
 80090ee:	930d      	str	r3, [sp, #52]	; 0x34
 80090f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	05c9      	lsls	r1, r1, #23
 80090f6:	d547      	bpl.n	8009188 <_printf_float+0xc4>
 80090f8:	189b      	adds	r3, r3, r2
 80090fa:	4393      	bics	r3, r2
 80090fc:	001a      	movs	r2, r3
 80090fe:	3208      	adds	r2, #8
 8009100:	602a      	str	r2, [r5, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	64a2      	str	r2, [r4, #72]	; 0x48
 8009108:	64e3      	str	r3, [r4, #76]	; 0x4c
 800910a:	2201      	movs	r2, #1
 800910c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800910e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009110:	930b      	str	r3, [sp, #44]	; 0x2c
 8009112:	006b      	lsls	r3, r5, #1
 8009114:	085b      	lsrs	r3, r3, #1
 8009116:	930f      	str	r3, [sp, #60]	; 0x3c
 8009118:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800911a:	4ba7      	ldr	r3, [pc, #668]	; (80093b8 <_printf_float+0x2f4>)
 800911c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800911e:	4252      	negs	r2, r2
 8009120:	f7f9 ff7c 	bl	800301c <__aeabi_dcmpun>
 8009124:	2800      	cmp	r0, #0
 8009126:	d131      	bne.n	800918c <_printf_float+0xc8>
 8009128:	2201      	movs	r2, #1
 800912a:	4ba3      	ldr	r3, [pc, #652]	; (80093b8 <_printf_float+0x2f4>)
 800912c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800912e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009130:	4252      	negs	r2, r2
 8009132:	f7f7 f999 	bl	8000468 <__aeabi_dcmple>
 8009136:	2800      	cmp	r0, #0
 8009138:	d128      	bne.n	800918c <_printf_float+0xc8>
 800913a:	2200      	movs	r2, #0
 800913c:	2300      	movs	r3, #0
 800913e:	0029      	movs	r1, r5
 8009140:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009142:	f7f7 f987 	bl	8000454 <__aeabi_dcmplt>
 8009146:	2800      	cmp	r0, #0
 8009148:	d003      	beq.n	8009152 <_printf_float+0x8e>
 800914a:	0023      	movs	r3, r4
 800914c:	222d      	movs	r2, #45	; 0x2d
 800914e:	3343      	adds	r3, #67	; 0x43
 8009150:	701a      	strb	r2, [r3, #0]
 8009152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009154:	4d99      	ldr	r5, [pc, #612]	; (80093bc <_printf_float+0x2f8>)
 8009156:	2b47      	cmp	r3, #71	; 0x47
 8009158:	d900      	bls.n	800915c <_printf_float+0x98>
 800915a:	4d99      	ldr	r5, [pc, #612]	; (80093c0 <_printf_float+0x2fc>)
 800915c:	2303      	movs	r3, #3
 800915e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009160:	6123      	str	r3, [r4, #16]
 8009162:	3301      	adds	r3, #1
 8009164:	439a      	bics	r2, r3
 8009166:	2300      	movs	r3, #0
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	930b      	str	r3, [sp, #44]	; 0x2c
 800916c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916e:	0021      	movs	r1, r4
 8009170:	0038      	movs	r0, r7
 8009172:	9600      	str	r6, [sp, #0]
 8009174:	aa13      	add	r2, sp, #76	; 0x4c
 8009176:	f000 f9e7 	bl	8009548 <_printf_common>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	d000      	beq.n	8009180 <_printf_float+0xbc>
 800917e:	e0a2      	b.n	80092c6 <_printf_float+0x202>
 8009180:	2001      	movs	r0, #1
 8009182:	4240      	negs	r0, r0
 8009184:	b015      	add	sp, #84	; 0x54
 8009186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009188:	3307      	adds	r3, #7
 800918a:	e7b6      	b.n	80090fa <_printf_float+0x36>
 800918c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800918e:	002b      	movs	r3, r5
 8009190:	0010      	movs	r0, r2
 8009192:	0029      	movs	r1, r5
 8009194:	f7f9 ff42 	bl	800301c <__aeabi_dcmpun>
 8009198:	2800      	cmp	r0, #0
 800919a:	d00b      	beq.n	80091b4 <_printf_float+0xf0>
 800919c:	2d00      	cmp	r5, #0
 800919e:	da03      	bge.n	80091a8 <_printf_float+0xe4>
 80091a0:	0023      	movs	r3, r4
 80091a2:	222d      	movs	r2, #45	; 0x2d
 80091a4:	3343      	adds	r3, #67	; 0x43
 80091a6:	701a      	strb	r2, [r3, #0]
 80091a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091aa:	4d86      	ldr	r5, [pc, #536]	; (80093c4 <_printf_float+0x300>)
 80091ac:	2b47      	cmp	r3, #71	; 0x47
 80091ae:	d9d5      	bls.n	800915c <_printf_float+0x98>
 80091b0:	4d85      	ldr	r5, [pc, #532]	; (80093c8 <_printf_float+0x304>)
 80091b2:	e7d3      	b.n	800915c <_printf_float+0x98>
 80091b4:	2220      	movs	r2, #32
 80091b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091b8:	6863      	ldr	r3, [r4, #4]
 80091ba:	4391      	bics	r1, r2
 80091bc:	910f      	str	r1, [sp, #60]	; 0x3c
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	d149      	bne.n	8009256 <_printf_float+0x192>
 80091c2:	3307      	adds	r3, #7
 80091c4:	6063      	str	r3, [r4, #4]
 80091c6:	2380      	movs	r3, #128	; 0x80
 80091c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	4313      	orrs	r3, r2
 80091ce:	2200      	movs	r2, #0
 80091d0:	9206      	str	r2, [sp, #24]
 80091d2:	aa12      	add	r2, sp, #72	; 0x48
 80091d4:	9205      	str	r2, [sp, #20]
 80091d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091d8:	a908      	add	r1, sp, #32
 80091da:	9204      	str	r2, [sp, #16]
 80091dc:	aa11      	add	r2, sp, #68	; 0x44
 80091de:	9203      	str	r2, [sp, #12]
 80091e0:	2223      	movs	r2, #35	; 0x23
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	9301      	str	r3, [sp, #4]
 80091e6:	6863      	ldr	r3, [r4, #4]
 80091e8:	1852      	adds	r2, r2, r1
 80091ea:	9202      	str	r2, [sp, #8]
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	0038      	movs	r0, r7
 80091f0:	002b      	movs	r3, r5
 80091f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091f4:	f7ff febc 	bl	8008f70 <__cvt>
 80091f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091fa:	0005      	movs	r5, r0
 80091fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80091fe:	2b47      	cmp	r3, #71	; 0x47
 8009200:	d108      	bne.n	8009214 <_printf_float+0x150>
 8009202:	1ccb      	adds	r3, r1, #3
 8009204:	db02      	blt.n	800920c <_printf_float+0x148>
 8009206:	6863      	ldr	r3, [r4, #4]
 8009208:	4299      	cmp	r1, r3
 800920a:	dd48      	ble.n	800929e <_printf_float+0x1da>
 800920c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800920e:	3b02      	subs	r3, #2
 8009210:	b2db      	uxtb	r3, r3
 8009212:	930a      	str	r3, [sp, #40]	; 0x28
 8009214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009216:	2b65      	cmp	r3, #101	; 0x65
 8009218:	d824      	bhi.n	8009264 <_printf_float+0x1a0>
 800921a:	0020      	movs	r0, r4
 800921c:	001a      	movs	r2, r3
 800921e:	3901      	subs	r1, #1
 8009220:	3050      	adds	r0, #80	; 0x50
 8009222:	9111      	str	r1, [sp, #68]	; 0x44
 8009224:	f7ff ff07 	bl	8009036 <__exponent>
 8009228:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800922a:	900b      	str	r0, [sp, #44]	; 0x2c
 800922c:	1813      	adds	r3, r2, r0
 800922e:	6123      	str	r3, [r4, #16]
 8009230:	2a01      	cmp	r2, #1
 8009232:	dc02      	bgt.n	800923a <_printf_float+0x176>
 8009234:	6822      	ldr	r2, [r4, #0]
 8009236:	07d2      	lsls	r2, r2, #31
 8009238:	d501      	bpl.n	800923e <_printf_float+0x17a>
 800923a:	3301      	adds	r3, #1
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	2323      	movs	r3, #35	; 0x23
 8009240:	aa08      	add	r2, sp, #32
 8009242:	189b      	adds	r3, r3, r2
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d100      	bne.n	800924c <_printf_float+0x188>
 800924a:	e78f      	b.n	800916c <_printf_float+0xa8>
 800924c:	0023      	movs	r3, r4
 800924e:	222d      	movs	r2, #45	; 0x2d
 8009250:	3343      	adds	r3, #67	; 0x43
 8009252:	701a      	strb	r2, [r3, #0]
 8009254:	e78a      	b.n	800916c <_printf_float+0xa8>
 8009256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009258:	2a47      	cmp	r2, #71	; 0x47
 800925a:	d1b4      	bne.n	80091c6 <_printf_float+0x102>
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1b2      	bne.n	80091c6 <_printf_float+0x102>
 8009260:	3301      	adds	r3, #1
 8009262:	e7af      	b.n	80091c4 <_printf_float+0x100>
 8009264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009266:	2b66      	cmp	r3, #102	; 0x66
 8009268:	d11b      	bne.n	80092a2 <_printf_float+0x1de>
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	2900      	cmp	r1, #0
 800926e:	dd0d      	ble.n	800928c <_printf_float+0x1c8>
 8009270:	6121      	str	r1, [r4, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <_printf_float+0x1b8>
 8009276:	6822      	ldr	r2, [r4, #0]
 8009278:	07d2      	lsls	r2, r2, #31
 800927a:	d502      	bpl.n	8009282 <_printf_float+0x1be>
 800927c:	3301      	adds	r3, #1
 800927e:	1859      	adds	r1, r3, r1
 8009280:	6121      	str	r1, [r4, #16]
 8009282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009284:	65a3      	str	r3, [r4, #88]	; 0x58
 8009286:	2300      	movs	r3, #0
 8009288:	930b      	str	r3, [sp, #44]	; 0x2c
 800928a:	e7d8      	b.n	800923e <_printf_float+0x17a>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d103      	bne.n	8009298 <_printf_float+0x1d4>
 8009290:	2201      	movs	r2, #1
 8009292:	6821      	ldr	r1, [r4, #0]
 8009294:	4211      	tst	r1, r2
 8009296:	d000      	beq.n	800929a <_printf_float+0x1d6>
 8009298:	1c9a      	adds	r2, r3, #2
 800929a:	6122      	str	r2, [r4, #16]
 800929c:	e7f1      	b.n	8009282 <_printf_float+0x1be>
 800929e:	2367      	movs	r3, #103	; 0x67
 80092a0:	930a      	str	r3, [sp, #40]	; 0x28
 80092a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092a6:	4293      	cmp	r3, r2
 80092a8:	db06      	blt.n	80092b8 <_printf_float+0x1f4>
 80092aa:	6822      	ldr	r2, [r4, #0]
 80092ac:	6123      	str	r3, [r4, #16]
 80092ae:	07d2      	lsls	r2, r2, #31
 80092b0:	d5e7      	bpl.n	8009282 <_printf_float+0x1be>
 80092b2:	3301      	adds	r3, #1
 80092b4:	6123      	str	r3, [r4, #16]
 80092b6:	e7e4      	b.n	8009282 <_printf_float+0x1be>
 80092b8:	2101      	movs	r1, #1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dc01      	bgt.n	80092c2 <_printf_float+0x1fe>
 80092be:	1849      	adds	r1, r1, r1
 80092c0:	1ac9      	subs	r1, r1, r3
 80092c2:	1852      	adds	r2, r2, r1
 80092c4:	e7e9      	b.n	800929a <_printf_float+0x1d6>
 80092c6:	6822      	ldr	r2, [r4, #0]
 80092c8:	0553      	lsls	r3, r2, #21
 80092ca:	d407      	bmi.n	80092dc <_printf_float+0x218>
 80092cc:	6923      	ldr	r3, [r4, #16]
 80092ce:	002a      	movs	r2, r5
 80092d0:	0038      	movs	r0, r7
 80092d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092d4:	47b0      	blx	r6
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	d128      	bne.n	800932c <_printf_float+0x268>
 80092da:	e751      	b.n	8009180 <_printf_float+0xbc>
 80092dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092de:	2b65      	cmp	r3, #101	; 0x65
 80092e0:	d800      	bhi.n	80092e4 <_printf_float+0x220>
 80092e2:	e0e1      	b.n	80094a8 <_printf_float+0x3e4>
 80092e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80092e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80092e8:	2200      	movs	r2, #0
 80092ea:	2300      	movs	r3, #0
 80092ec:	f7f7 f8ac 	bl	8000448 <__aeabi_dcmpeq>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d031      	beq.n	8009358 <_printf_float+0x294>
 80092f4:	2301      	movs	r3, #1
 80092f6:	0038      	movs	r0, r7
 80092f8:	4a34      	ldr	r2, [pc, #208]	; (80093cc <_printf_float+0x308>)
 80092fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092fc:	47b0      	blx	r6
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	d100      	bne.n	8009304 <_printf_float+0x240>
 8009302:	e73d      	b.n	8009180 <_printf_float+0xbc>
 8009304:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009306:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009308:	4293      	cmp	r3, r2
 800930a:	db02      	blt.n	8009312 <_printf_float+0x24e>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	07db      	lsls	r3, r3, #31
 8009310:	d50c      	bpl.n	800932c <_printf_float+0x268>
 8009312:	0038      	movs	r0, r7
 8009314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800931a:	47b0      	blx	r6
 800931c:	2500      	movs	r5, #0
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d100      	bne.n	8009324 <_printf_float+0x260>
 8009322:	e72d      	b.n	8009180 <_printf_float+0xbc>
 8009324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009326:	3b01      	subs	r3, #1
 8009328:	42ab      	cmp	r3, r5
 800932a:	dc0a      	bgt.n	8009342 <_printf_float+0x27e>
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	079b      	lsls	r3, r3, #30
 8009330:	d500      	bpl.n	8009334 <_printf_float+0x270>
 8009332:	e106      	b.n	8009542 <_printf_float+0x47e>
 8009334:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009336:	68e0      	ldr	r0, [r4, #12]
 8009338:	4298      	cmp	r0, r3
 800933a:	db00      	blt.n	800933e <_printf_float+0x27a>
 800933c:	e722      	b.n	8009184 <_printf_float+0xc0>
 800933e:	0018      	movs	r0, r3
 8009340:	e720      	b.n	8009184 <_printf_float+0xc0>
 8009342:	0022      	movs	r2, r4
 8009344:	2301      	movs	r3, #1
 8009346:	0038      	movs	r0, r7
 8009348:	9909      	ldr	r1, [sp, #36]	; 0x24
 800934a:	321a      	adds	r2, #26
 800934c:	47b0      	blx	r6
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	d100      	bne.n	8009354 <_printf_float+0x290>
 8009352:	e715      	b.n	8009180 <_printf_float+0xbc>
 8009354:	3501      	adds	r5, #1
 8009356:	e7e5      	b.n	8009324 <_printf_float+0x260>
 8009358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800935a:	2b00      	cmp	r3, #0
 800935c:	dc38      	bgt.n	80093d0 <_printf_float+0x30c>
 800935e:	2301      	movs	r3, #1
 8009360:	0038      	movs	r0, r7
 8009362:	4a1a      	ldr	r2, [pc, #104]	; (80093cc <_printf_float+0x308>)
 8009364:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009366:	47b0      	blx	r6
 8009368:	1c43      	adds	r3, r0, #1
 800936a:	d100      	bne.n	800936e <_printf_float+0x2aa>
 800936c:	e708      	b.n	8009180 <_printf_float+0xbc>
 800936e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009370:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009372:	4313      	orrs	r3, r2
 8009374:	d102      	bne.n	800937c <_printf_float+0x2b8>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	07db      	lsls	r3, r3, #31
 800937a:	d5d7      	bpl.n	800932c <_printf_float+0x268>
 800937c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800937e:	0038      	movs	r0, r7
 8009380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009382:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009384:	47b0      	blx	r6
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	d100      	bne.n	800938c <_printf_float+0x2c8>
 800938a:	e6f9      	b.n	8009180 <_printf_float+0xbc>
 800938c:	2300      	movs	r3, #0
 800938e:	930a      	str	r3, [sp, #40]	; 0x28
 8009390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009394:	425b      	negs	r3, r3
 8009396:	4293      	cmp	r3, r2
 8009398:	dc01      	bgt.n	800939e <_printf_float+0x2da>
 800939a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800939c:	e797      	b.n	80092ce <_printf_float+0x20a>
 800939e:	0022      	movs	r2, r4
 80093a0:	2301      	movs	r3, #1
 80093a2:	0038      	movs	r0, r7
 80093a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093a6:	321a      	adds	r2, #26
 80093a8:	47b0      	blx	r6
 80093aa:	1c43      	adds	r3, r0, #1
 80093ac:	d100      	bne.n	80093b0 <_printf_float+0x2ec>
 80093ae:	e6e7      	b.n	8009180 <_printf_float+0xbc>
 80093b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b2:	3301      	adds	r3, #1
 80093b4:	e7eb      	b.n	800938e <_printf_float+0x2ca>
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	7fefffff 	.word	0x7fefffff
 80093bc:	0800dae8 	.word	0x0800dae8
 80093c0:	0800daec 	.word	0x0800daec
 80093c4:	0800daf0 	.word	0x0800daf0
 80093c8:	0800daf4 	.word	0x0800daf4
 80093cc:	0800daf8 	.word	0x0800daf8
 80093d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093d4:	920a      	str	r2, [sp, #40]	; 0x28
 80093d6:	429a      	cmp	r2, r3
 80093d8:	dd00      	ble.n	80093dc <_printf_float+0x318>
 80093da:	930a      	str	r3, [sp, #40]	; 0x28
 80093dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc3c      	bgt.n	800945c <_printf_float+0x398>
 80093e2:	2300      	movs	r3, #0
 80093e4:	930d      	str	r3, [sp, #52]	; 0x34
 80093e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e8:	43db      	mvns	r3, r3
 80093ea:	17db      	asrs	r3, r3, #31
 80093ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80093ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80093f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f6:	4013      	ands	r3, r2
 80093f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093fe:	4293      	cmp	r3, r2
 8009400:	dc34      	bgt.n	800946c <_printf_float+0x3a8>
 8009402:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009406:	4293      	cmp	r3, r2
 8009408:	db3d      	blt.n	8009486 <_printf_float+0x3c2>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	07db      	lsls	r3, r3, #31
 800940e:	d43a      	bmi.n	8009486 <_printf_float+0x3c2>
 8009410:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009414:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	1a52      	subs	r2, r2, r1
 800941a:	920a      	str	r2, [sp, #40]	; 0x28
 800941c:	429a      	cmp	r2, r3
 800941e:	dd00      	ble.n	8009422 <_printf_float+0x35e>
 8009420:	930a      	str	r3, [sp, #40]	; 0x28
 8009422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	dc36      	bgt.n	8009496 <_printf_float+0x3d2>
 8009428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942a:	2500      	movs	r5, #0
 800942c:	43db      	mvns	r3, r3
 800942e:	17db      	asrs	r3, r3, #31
 8009430:	930b      	str	r3, [sp, #44]	; 0x2c
 8009432:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009436:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800943c:	400a      	ands	r2, r1
 800943e:	1a9b      	subs	r3, r3, r2
 8009440:	42ab      	cmp	r3, r5
 8009442:	dc00      	bgt.n	8009446 <_printf_float+0x382>
 8009444:	e772      	b.n	800932c <_printf_float+0x268>
 8009446:	0022      	movs	r2, r4
 8009448:	2301      	movs	r3, #1
 800944a:	0038      	movs	r0, r7
 800944c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800944e:	321a      	adds	r2, #26
 8009450:	47b0      	blx	r6
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	d100      	bne.n	8009458 <_printf_float+0x394>
 8009456:	e693      	b.n	8009180 <_printf_float+0xbc>
 8009458:	3501      	adds	r5, #1
 800945a:	e7ea      	b.n	8009432 <_printf_float+0x36e>
 800945c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800945e:	002a      	movs	r2, r5
 8009460:	0038      	movs	r0, r7
 8009462:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009464:	47b0      	blx	r6
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	d1bb      	bne.n	80093e2 <_printf_float+0x31e>
 800946a:	e689      	b.n	8009180 <_printf_float+0xbc>
 800946c:	0022      	movs	r2, r4
 800946e:	2301      	movs	r3, #1
 8009470:	0038      	movs	r0, r7
 8009472:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009474:	321a      	adds	r2, #26
 8009476:	47b0      	blx	r6
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d100      	bne.n	800947e <_printf_float+0x3ba>
 800947c:	e680      	b.n	8009180 <_printf_float+0xbc>
 800947e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009480:	3301      	adds	r3, #1
 8009482:	930d      	str	r3, [sp, #52]	; 0x34
 8009484:	e7b3      	b.n	80093ee <_printf_float+0x32a>
 8009486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009488:	0038      	movs	r0, r7
 800948a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800948c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800948e:	47b0      	blx	r6
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d1bd      	bne.n	8009410 <_printf_float+0x34c>
 8009494:	e674      	b.n	8009180 <_printf_float+0xbc>
 8009496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009498:	0038      	movs	r0, r7
 800949a:	18ea      	adds	r2, r5, r3
 800949c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800949e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a0:	47b0      	blx	r6
 80094a2:	1c43      	adds	r3, r0, #1
 80094a4:	d1c0      	bne.n	8009428 <_printf_float+0x364>
 80094a6:	e66b      	b.n	8009180 <_printf_float+0xbc>
 80094a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	dc02      	bgt.n	80094b4 <_printf_float+0x3f0>
 80094ae:	2301      	movs	r3, #1
 80094b0:	421a      	tst	r2, r3
 80094b2:	d034      	beq.n	800951e <_printf_float+0x45a>
 80094b4:	2301      	movs	r3, #1
 80094b6:	002a      	movs	r2, r5
 80094b8:	0038      	movs	r0, r7
 80094ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094bc:	47b0      	blx	r6
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d100      	bne.n	80094c4 <_printf_float+0x400>
 80094c2:	e65d      	b.n	8009180 <_printf_float+0xbc>
 80094c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094c6:	0038      	movs	r0, r7
 80094c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094cc:	47b0      	blx	r6
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	d100      	bne.n	80094d4 <_printf_float+0x410>
 80094d2:	e655      	b.n	8009180 <_printf_float+0xbc>
 80094d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80094d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80094d8:	2200      	movs	r2, #0
 80094da:	2300      	movs	r3, #0
 80094dc:	f7f6 ffb4 	bl	8000448 <__aeabi_dcmpeq>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d11a      	bne.n	800951a <_printf_float+0x456>
 80094e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094e6:	1c6a      	adds	r2, r5, #1
 80094e8:	3b01      	subs	r3, #1
 80094ea:	0038      	movs	r0, r7
 80094ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ee:	47b0      	blx	r6
 80094f0:	1c43      	adds	r3, r0, #1
 80094f2:	d10e      	bne.n	8009512 <_printf_float+0x44e>
 80094f4:	e644      	b.n	8009180 <_printf_float+0xbc>
 80094f6:	0022      	movs	r2, r4
 80094f8:	2301      	movs	r3, #1
 80094fa:	0038      	movs	r0, r7
 80094fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094fe:	321a      	adds	r2, #26
 8009500:	47b0      	blx	r6
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	d100      	bne.n	8009508 <_printf_float+0x444>
 8009506:	e63b      	b.n	8009180 <_printf_float+0xbc>
 8009508:	3501      	adds	r5, #1
 800950a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800950c:	3b01      	subs	r3, #1
 800950e:	42ab      	cmp	r3, r5
 8009510:	dcf1      	bgt.n	80094f6 <_printf_float+0x432>
 8009512:	0022      	movs	r2, r4
 8009514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009516:	3250      	adds	r2, #80	; 0x50
 8009518:	e6da      	b.n	80092d0 <_printf_float+0x20c>
 800951a:	2500      	movs	r5, #0
 800951c:	e7f5      	b.n	800950a <_printf_float+0x446>
 800951e:	002a      	movs	r2, r5
 8009520:	e7e3      	b.n	80094ea <_printf_float+0x426>
 8009522:	0022      	movs	r2, r4
 8009524:	2301      	movs	r3, #1
 8009526:	0038      	movs	r0, r7
 8009528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800952a:	3219      	adds	r2, #25
 800952c:	47b0      	blx	r6
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	d100      	bne.n	8009534 <_printf_float+0x470>
 8009532:	e625      	b.n	8009180 <_printf_float+0xbc>
 8009534:	3501      	adds	r5, #1
 8009536:	68e3      	ldr	r3, [r4, #12]
 8009538:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	42ab      	cmp	r3, r5
 800953e:	dcf0      	bgt.n	8009522 <_printf_float+0x45e>
 8009540:	e6f8      	b.n	8009334 <_printf_float+0x270>
 8009542:	2500      	movs	r5, #0
 8009544:	e7f7      	b.n	8009536 <_printf_float+0x472>
 8009546:	46c0      	nop			; (mov r8, r8)

08009548 <_printf_common>:
 8009548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800954a:	0015      	movs	r5, r2
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	688a      	ldr	r2, [r1, #8]
 8009550:	690b      	ldr	r3, [r1, #16]
 8009552:	000c      	movs	r4, r1
 8009554:	9000      	str	r0, [sp, #0]
 8009556:	4293      	cmp	r3, r2
 8009558:	da00      	bge.n	800955c <_printf_common+0x14>
 800955a:	0013      	movs	r3, r2
 800955c:	0022      	movs	r2, r4
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	3243      	adds	r2, #67	; 0x43
 8009562:	7812      	ldrb	r2, [r2, #0]
 8009564:	2a00      	cmp	r2, #0
 8009566:	d001      	beq.n	800956c <_printf_common+0x24>
 8009568:	3301      	adds	r3, #1
 800956a:	602b      	str	r3, [r5, #0]
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	069b      	lsls	r3, r3, #26
 8009570:	d502      	bpl.n	8009578 <_printf_common+0x30>
 8009572:	682b      	ldr	r3, [r5, #0]
 8009574:	3302      	adds	r3, #2
 8009576:	602b      	str	r3, [r5, #0]
 8009578:	6822      	ldr	r2, [r4, #0]
 800957a:	2306      	movs	r3, #6
 800957c:	0017      	movs	r7, r2
 800957e:	401f      	ands	r7, r3
 8009580:	421a      	tst	r2, r3
 8009582:	d027      	beq.n	80095d4 <_printf_common+0x8c>
 8009584:	0023      	movs	r3, r4
 8009586:	3343      	adds	r3, #67	; 0x43
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	1e5a      	subs	r2, r3, #1
 800958c:	4193      	sbcs	r3, r2
 800958e:	6822      	ldr	r2, [r4, #0]
 8009590:	0692      	lsls	r2, r2, #26
 8009592:	d430      	bmi.n	80095f6 <_printf_common+0xae>
 8009594:	0022      	movs	r2, r4
 8009596:	9901      	ldr	r1, [sp, #4]
 8009598:	9800      	ldr	r0, [sp, #0]
 800959a:	9e08      	ldr	r6, [sp, #32]
 800959c:	3243      	adds	r2, #67	; 0x43
 800959e:	47b0      	blx	r6
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d025      	beq.n	80095f0 <_printf_common+0xa8>
 80095a4:	2306      	movs	r3, #6
 80095a6:	6820      	ldr	r0, [r4, #0]
 80095a8:	682a      	ldr	r2, [r5, #0]
 80095aa:	68e1      	ldr	r1, [r4, #12]
 80095ac:	2500      	movs	r5, #0
 80095ae:	4003      	ands	r3, r0
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d103      	bne.n	80095bc <_printf_common+0x74>
 80095b4:	1a8d      	subs	r5, r1, r2
 80095b6:	43eb      	mvns	r3, r5
 80095b8:	17db      	asrs	r3, r3, #31
 80095ba:	401d      	ands	r5, r3
 80095bc:	68a3      	ldr	r3, [r4, #8]
 80095be:	6922      	ldr	r2, [r4, #16]
 80095c0:	4293      	cmp	r3, r2
 80095c2:	dd01      	ble.n	80095c8 <_printf_common+0x80>
 80095c4:	1a9b      	subs	r3, r3, r2
 80095c6:	18ed      	adds	r5, r5, r3
 80095c8:	2700      	movs	r7, #0
 80095ca:	42bd      	cmp	r5, r7
 80095cc:	d120      	bne.n	8009610 <_printf_common+0xc8>
 80095ce:	2000      	movs	r0, #0
 80095d0:	e010      	b.n	80095f4 <_printf_common+0xac>
 80095d2:	3701      	adds	r7, #1
 80095d4:	68e3      	ldr	r3, [r4, #12]
 80095d6:	682a      	ldr	r2, [r5, #0]
 80095d8:	1a9b      	subs	r3, r3, r2
 80095da:	42bb      	cmp	r3, r7
 80095dc:	ddd2      	ble.n	8009584 <_printf_common+0x3c>
 80095de:	0022      	movs	r2, r4
 80095e0:	2301      	movs	r3, #1
 80095e2:	9901      	ldr	r1, [sp, #4]
 80095e4:	9800      	ldr	r0, [sp, #0]
 80095e6:	9e08      	ldr	r6, [sp, #32]
 80095e8:	3219      	adds	r2, #25
 80095ea:	47b0      	blx	r6
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d1f0      	bne.n	80095d2 <_printf_common+0x8a>
 80095f0:	2001      	movs	r0, #1
 80095f2:	4240      	negs	r0, r0
 80095f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095f6:	2030      	movs	r0, #48	; 0x30
 80095f8:	18e1      	adds	r1, r4, r3
 80095fa:	3143      	adds	r1, #67	; 0x43
 80095fc:	7008      	strb	r0, [r1, #0]
 80095fe:	0021      	movs	r1, r4
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	3145      	adds	r1, #69	; 0x45
 8009604:	7809      	ldrb	r1, [r1, #0]
 8009606:	18a2      	adds	r2, r4, r2
 8009608:	3243      	adds	r2, #67	; 0x43
 800960a:	3302      	adds	r3, #2
 800960c:	7011      	strb	r1, [r2, #0]
 800960e:	e7c1      	b.n	8009594 <_printf_common+0x4c>
 8009610:	0022      	movs	r2, r4
 8009612:	2301      	movs	r3, #1
 8009614:	9901      	ldr	r1, [sp, #4]
 8009616:	9800      	ldr	r0, [sp, #0]
 8009618:	9e08      	ldr	r6, [sp, #32]
 800961a:	321a      	adds	r2, #26
 800961c:	47b0      	blx	r6
 800961e:	1c43      	adds	r3, r0, #1
 8009620:	d0e6      	beq.n	80095f0 <_printf_common+0xa8>
 8009622:	3701      	adds	r7, #1
 8009624:	e7d1      	b.n	80095ca <_printf_common+0x82>
	...

08009628 <_printf_i>:
 8009628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800962a:	b08b      	sub	sp, #44	; 0x2c
 800962c:	9206      	str	r2, [sp, #24]
 800962e:	000a      	movs	r2, r1
 8009630:	3243      	adds	r2, #67	; 0x43
 8009632:	9307      	str	r3, [sp, #28]
 8009634:	9005      	str	r0, [sp, #20]
 8009636:	9204      	str	r2, [sp, #16]
 8009638:	7e0a      	ldrb	r2, [r1, #24]
 800963a:	000c      	movs	r4, r1
 800963c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800963e:	2a78      	cmp	r2, #120	; 0x78
 8009640:	d807      	bhi.n	8009652 <_printf_i+0x2a>
 8009642:	2a62      	cmp	r2, #98	; 0x62
 8009644:	d809      	bhi.n	800965a <_printf_i+0x32>
 8009646:	2a00      	cmp	r2, #0
 8009648:	d100      	bne.n	800964c <_printf_i+0x24>
 800964a:	e0c1      	b.n	80097d0 <_printf_i+0x1a8>
 800964c:	2a58      	cmp	r2, #88	; 0x58
 800964e:	d100      	bne.n	8009652 <_printf_i+0x2a>
 8009650:	e08c      	b.n	800976c <_printf_i+0x144>
 8009652:	0026      	movs	r6, r4
 8009654:	3642      	adds	r6, #66	; 0x42
 8009656:	7032      	strb	r2, [r6, #0]
 8009658:	e022      	b.n	80096a0 <_printf_i+0x78>
 800965a:	0010      	movs	r0, r2
 800965c:	3863      	subs	r0, #99	; 0x63
 800965e:	2815      	cmp	r0, #21
 8009660:	d8f7      	bhi.n	8009652 <_printf_i+0x2a>
 8009662:	f7f6 fd61 	bl	8000128 <__gnu_thumb1_case_shi>
 8009666:	0016      	.short	0x0016
 8009668:	fff6001f 	.word	0xfff6001f
 800966c:	fff6fff6 	.word	0xfff6fff6
 8009670:	001ffff6 	.word	0x001ffff6
 8009674:	fff6fff6 	.word	0xfff6fff6
 8009678:	fff6fff6 	.word	0xfff6fff6
 800967c:	003600a8 	.word	0x003600a8
 8009680:	fff6009a 	.word	0xfff6009a
 8009684:	00b9fff6 	.word	0x00b9fff6
 8009688:	0036fff6 	.word	0x0036fff6
 800968c:	fff6fff6 	.word	0xfff6fff6
 8009690:	009e      	.short	0x009e
 8009692:	0026      	movs	r6, r4
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	3642      	adds	r6, #66	; 0x42
 8009698:	1d11      	adds	r1, r2, #4
 800969a:	6019      	str	r1, [r3, #0]
 800969c:	6813      	ldr	r3, [r2, #0]
 800969e:	7033      	strb	r3, [r6, #0]
 80096a0:	2301      	movs	r3, #1
 80096a2:	e0a7      	b.n	80097f4 <_printf_i+0x1cc>
 80096a4:	6808      	ldr	r0, [r1, #0]
 80096a6:	6819      	ldr	r1, [r3, #0]
 80096a8:	1d0a      	adds	r2, r1, #4
 80096aa:	0605      	lsls	r5, r0, #24
 80096ac:	d50b      	bpl.n	80096c6 <_printf_i+0x9e>
 80096ae:	680d      	ldr	r5, [r1, #0]
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	2d00      	cmp	r5, #0
 80096b4:	da03      	bge.n	80096be <_printf_i+0x96>
 80096b6:	232d      	movs	r3, #45	; 0x2d
 80096b8:	9a04      	ldr	r2, [sp, #16]
 80096ba:	426d      	negs	r5, r5
 80096bc:	7013      	strb	r3, [r2, #0]
 80096be:	4b61      	ldr	r3, [pc, #388]	; (8009844 <_printf_i+0x21c>)
 80096c0:	270a      	movs	r7, #10
 80096c2:	9303      	str	r3, [sp, #12]
 80096c4:	e01b      	b.n	80096fe <_printf_i+0xd6>
 80096c6:	680d      	ldr	r5, [r1, #0]
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	0641      	lsls	r1, r0, #25
 80096cc:	d5f1      	bpl.n	80096b2 <_printf_i+0x8a>
 80096ce:	b22d      	sxth	r5, r5
 80096d0:	e7ef      	b.n	80096b2 <_printf_i+0x8a>
 80096d2:	680d      	ldr	r5, [r1, #0]
 80096d4:	6819      	ldr	r1, [r3, #0]
 80096d6:	1d08      	adds	r0, r1, #4
 80096d8:	6018      	str	r0, [r3, #0]
 80096da:	062e      	lsls	r6, r5, #24
 80096dc:	d501      	bpl.n	80096e2 <_printf_i+0xba>
 80096de:	680d      	ldr	r5, [r1, #0]
 80096e0:	e003      	b.n	80096ea <_printf_i+0xc2>
 80096e2:	066d      	lsls	r5, r5, #25
 80096e4:	d5fb      	bpl.n	80096de <_printf_i+0xb6>
 80096e6:	680d      	ldr	r5, [r1, #0]
 80096e8:	b2ad      	uxth	r5, r5
 80096ea:	4b56      	ldr	r3, [pc, #344]	; (8009844 <_printf_i+0x21c>)
 80096ec:	2708      	movs	r7, #8
 80096ee:	9303      	str	r3, [sp, #12]
 80096f0:	2a6f      	cmp	r2, #111	; 0x6f
 80096f2:	d000      	beq.n	80096f6 <_printf_i+0xce>
 80096f4:	3702      	adds	r7, #2
 80096f6:	0023      	movs	r3, r4
 80096f8:	2200      	movs	r2, #0
 80096fa:	3343      	adds	r3, #67	; 0x43
 80096fc:	701a      	strb	r2, [r3, #0]
 80096fe:	6863      	ldr	r3, [r4, #4]
 8009700:	60a3      	str	r3, [r4, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	db03      	blt.n	800970e <_printf_i+0xe6>
 8009706:	2204      	movs	r2, #4
 8009708:	6821      	ldr	r1, [r4, #0]
 800970a:	4391      	bics	r1, r2
 800970c:	6021      	str	r1, [r4, #0]
 800970e:	2d00      	cmp	r5, #0
 8009710:	d102      	bne.n	8009718 <_printf_i+0xf0>
 8009712:	9e04      	ldr	r6, [sp, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00c      	beq.n	8009732 <_printf_i+0x10a>
 8009718:	9e04      	ldr	r6, [sp, #16]
 800971a:	0028      	movs	r0, r5
 800971c:	0039      	movs	r1, r7
 800971e:	f7f6 fd93 	bl	8000248 <__aeabi_uidivmod>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	3e01      	subs	r6, #1
 8009726:	5c5b      	ldrb	r3, [r3, r1]
 8009728:	7033      	strb	r3, [r6, #0]
 800972a:	002b      	movs	r3, r5
 800972c:	0005      	movs	r5, r0
 800972e:	429f      	cmp	r7, r3
 8009730:	d9f3      	bls.n	800971a <_printf_i+0xf2>
 8009732:	2f08      	cmp	r7, #8
 8009734:	d109      	bne.n	800974a <_printf_i+0x122>
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	07db      	lsls	r3, r3, #31
 800973a:	d506      	bpl.n	800974a <_printf_i+0x122>
 800973c:	6863      	ldr	r3, [r4, #4]
 800973e:	6922      	ldr	r2, [r4, #16]
 8009740:	4293      	cmp	r3, r2
 8009742:	dc02      	bgt.n	800974a <_printf_i+0x122>
 8009744:	2330      	movs	r3, #48	; 0x30
 8009746:	3e01      	subs	r6, #1
 8009748:	7033      	strb	r3, [r6, #0]
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	1b9b      	subs	r3, r3, r6
 800974e:	6123      	str	r3, [r4, #16]
 8009750:	9b07      	ldr	r3, [sp, #28]
 8009752:	0021      	movs	r1, r4
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	9805      	ldr	r0, [sp, #20]
 8009758:	9b06      	ldr	r3, [sp, #24]
 800975a:	aa09      	add	r2, sp, #36	; 0x24
 800975c:	f7ff fef4 	bl	8009548 <_printf_common>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d14c      	bne.n	80097fe <_printf_i+0x1d6>
 8009764:	2001      	movs	r0, #1
 8009766:	4240      	negs	r0, r0
 8009768:	b00b      	add	sp, #44	; 0x2c
 800976a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800976c:	3145      	adds	r1, #69	; 0x45
 800976e:	700a      	strb	r2, [r1, #0]
 8009770:	4a34      	ldr	r2, [pc, #208]	; (8009844 <_printf_i+0x21c>)
 8009772:	9203      	str	r2, [sp, #12]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	6821      	ldr	r1, [r4, #0]
 8009778:	ca20      	ldmia	r2!, {r5}
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	0608      	lsls	r0, r1, #24
 800977e:	d516      	bpl.n	80097ae <_printf_i+0x186>
 8009780:	07cb      	lsls	r3, r1, #31
 8009782:	d502      	bpl.n	800978a <_printf_i+0x162>
 8009784:	2320      	movs	r3, #32
 8009786:	4319      	orrs	r1, r3
 8009788:	6021      	str	r1, [r4, #0]
 800978a:	2710      	movs	r7, #16
 800978c:	2d00      	cmp	r5, #0
 800978e:	d1b2      	bne.n	80096f6 <_printf_i+0xce>
 8009790:	2320      	movs	r3, #32
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	439a      	bics	r2, r3
 8009796:	6022      	str	r2, [r4, #0]
 8009798:	e7ad      	b.n	80096f6 <_printf_i+0xce>
 800979a:	2220      	movs	r2, #32
 800979c:	6809      	ldr	r1, [r1, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	6022      	str	r2, [r4, #0]
 80097a2:	0022      	movs	r2, r4
 80097a4:	2178      	movs	r1, #120	; 0x78
 80097a6:	3245      	adds	r2, #69	; 0x45
 80097a8:	7011      	strb	r1, [r2, #0]
 80097aa:	4a27      	ldr	r2, [pc, #156]	; (8009848 <_printf_i+0x220>)
 80097ac:	e7e1      	b.n	8009772 <_printf_i+0x14a>
 80097ae:	0648      	lsls	r0, r1, #25
 80097b0:	d5e6      	bpl.n	8009780 <_printf_i+0x158>
 80097b2:	b2ad      	uxth	r5, r5
 80097b4:	e7e4      	b.n	8009780 <_printf_i+0x158>
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	680d      	ldr	r5, [r1, #0]
 80097ba:	1d10      	adds	r0, r2, #4
 80097bc:	6949      	ldr	r1, [r1, #20]
 80097be:	6018      	str	r0, [r3, #0]
 80097c0:	6813      	ldr	r3, [r2, #0]
 80097c2:	062e      	lsls	r6, r5, #24
 80097c4:	d501      	bpl.n	80097ca <_printf_i+0x1a2>
 80097c6:	6019      	str	r1, [r3, #0]
 80097c8:	e002      	b.n	80097d0 <_printf_i+0x1a8>
 80097ca:	066d      	lsls	r5, r5, #25
 80097cc:	d5fb      	bpl.n	80097c6 <_printf_i+0x19e>
 80097ce:	8019      	strh	r1, [r3, #0]
 80097d0:	2300      	movs	r3, #0
 80097d2:	9e04      	ldr	r6, [sp, #16]
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	e7bb      	b.n	8009750 <_printf_i+0x128>
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	1d11      	adds	r1, r2, #4
 80097dc:	6019      	str	r1, [r3, #0]
 80097de:	6816      	ldr	r6, [r2, #0]
 80097e0:	2100      	movs	r1, #0
 80097e2:	0030      	movs	r0, r6
 80097e4:	6862      	ldr	r2, [r4, #4]
 80097e6:	f002 fb71 	bl	800becc <memchr>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d001      	beq.n	80097f2 <_printf_i+0x1ca>
 80097ee:	1b80      	subs	r0, r0, r6
 80097f0:	6060      	str	r0, [r4, #4]
 80097f2:	6863      	ldr	r3, [r4, #4]
 80097f4:	6123      	str	r3, [r4, #16]
 80097f6:	2300      	movs	r3, #0
 80097f8:	9a04      	ldr	r2, [sp, #16]
 80097fa:	7013      	strb	r3, [r2, #0]
 80097fc:	e7a8      	b.n	8009750 <_printf_i+0x128>
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	0032      	movs	r2, r6
 8009802:	9906      	ldr	r1, [sp, #24]
 8009804:	9805      	ldr	r0, [sp, #20]
 8009806:	9d07      	ldr	r5, [sp, #28]
 8009808:	47a8      	blx	r5
 800980a:	1c43      	adds	r3, r0, #1
 800980c:	d0aa      	beq.n	8009764 <_printf_i+0x13c>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	079b      	lsls	r3, r3, #30
 8009812:	d415      	bmi.n	8009840 <_printf_i+0x218>
 8009814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009816:	68e0      	ldr	r0, [r4, #12]
 8009818:	4298      	cmp	r0, r3
 800981a:	daa5      	bge.n	8009768 <_printf_i+0x140>
 800981c:	0018      	movs	r0, r3
 800981e:	e7a3      	b.n	8009768 <_printf_i+0x140>
 8009820:	0022      	movs	r2, r4
 8009822:	2301      	movs	r3, #1
 8009824:	9906      	ldr	r1, [sp, #24]
 8009826:	9805      	ldr	r0, [sp, #20]
 8009828:	9e07      	ldr	r6, [sp, #28]
 800982a:	3219      	adds	r2, #25
 800982c:	47b0      	blx	r6
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	d098      	beq.n	8009764 <_printf_i+0x13c>
 8009832:	3501      	adds	r5, #1
 8009834:	68e3      	ldr	r3, [r4, #12]
 8009836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009838:	1a9b      	subs	r3, r3, r2
 800983a:	42ab      	cmp	r3, r5
 800983c:	dcf0      	bgt.n	8009820 <_printf_i+0x1f8>
 800983e:	e7e9      	b.n	8009814 <_printf_i+0x1ec>
 8009840:	2500      	movs	r5, #0
 8009842:	e7f7      	b.n	8009834 <_printf_i+0x20c>
 8009844:	0800dafa 	.word	0x0800dafa
 8009848:	0800db0b 	.word	0x0800db0b

0800984c <_scanf_float>:
 800984c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800984e:	b08b      	sub	sp, #44	; 0x2c
 8009850:	0015      	movs	r5, r2
 8009852:	9001      	str	r0, [sp, #4]
 8009854:	22ae      	movs	r2, #174	; 0xae
 8009856:	2000      	movs	r0, #0
 8009858:	9306      	str	r3, [sp, #24]
 800985a:	688b      	ldr	r3, [r1, #8]
 800985c:	000e      	movs	r6, r1
 800985e:	1e59      	subs	r1, r3, #1
 8009860:	0052      	lsls	r2, r2, #1
 8009862:	9005      	str	r0, [sp, #20]
 8009864:	4291      	cmp	r1, r2
 8009866:	d905      	bls.n	8009874 <_scanf_float+0x28>
 8009868:	3b5e      	subs	r3, #94	; 0x5e
 800986a:	3bff      	subs	r3, #255	; 0xff
 800986c:	9305      	str	r3, [sp, #20]
 800986e:	235e      	movs	r3, #94	; 0x5e
 8009870:	33ff      	adds	r3, #255	; 0xff
 8009872:	60b3      	str	r3, [r6, #8]
 8009874:	23f0      	movs	r3, #240	; 0xf0
 8009876:	6832      	ldr	r2, [r6, #0]
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	4313      	orrs	r3, r2
 800987c:	6033      	str	r3, [r6, #0]
 800987e:	0033      	movs	r3, r6
 8009880:	2400      	movs	r4, #0
 8009882:	331c      	adds	r3, #28
 8009884:	001f      	movs	r7, r3
 8009886:	9303      	str	r3, [sp, #12]
 8009888:	9402      	str	r4, [sp, #8]
 800988a:	9408      	str	r4, [sp, #32]
 800988c:	9407      	str	r4, [sp, #28]
 800988e:	9400      	str	r4, [sp, #0]
 8009890:	9404      	str	r4, [sp, #16]
 8009892:	68b2      	ldr	r2, [r6, #8]
 8009894:	2a00      	cmp	r2, #0
 8009896:	d00a      	beq.n	80098ae <_scanf_float+0x62>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b4e      	cmp	r3, #78	; 0x4e
 800989e:	d844      	bhi.n	800992a <_scanf_float+0xde>
 80098a0:	0018      	movs	r0, r3
 80098a2:	2b40      	cmp	r3, #64	; 0x40
 80098a4:	d82c      	bhi.n	8009900 <_scanf_float+0xb4>
 80098a6:	382b      	subs	r0, #43	; 0x2b
 80098a8:	b2c1      	uxtb	r1, r0
 80098aa:	290e      	cmp	r1, #14
 80098ac:	d92a      	bls.n	8009904 <_scanf_float+0xb8>
 80098ae:	9b00      	ldr	r3, [sp, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <_scanf_float+0x70>
 80098b4:	6832      	ldr	r2, [r6, #0]
 80098b6:	4ba4      	ldr	r3, [pc, #656]	; (8009b48 <_scanf_float+0x2fc>)
 80098b8:	4013      	ands	r3, r2
 80098ba:	6033      	str	r3, [r6, #0]
 80098bc:	9b02      	ldr	r3, [sp, #8]
 80098be:	3b01      	subs	r3, #1
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d900      	bls.n	80098c6 <_scanf_float+0x7a>
 80098c4:	e0f9      	b.n	8009aba <_scanf_float+0x26e>
 80098c6:	24be      	movs	r4, #190	; 0xbe
 80098c8:	0064      	lsls	r4, r4, #1
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	429f      	cmp	r7, r3
 80098ce:	d900      	bls.n	80098d2 <_scanf_float+0x86>
 80098d0:	e0e9      	b.n	8009aa6 <_scanf_float+0x25a>
 80098d2:	2301      	movs	r3, #1
 80098d4:	9302      	str	r3, [sp, #8]
 80098d6:	e185      	b.n	8009be4 <_scanf_float+0x398>
 80098d8:	0018      	movs	r0, r3
 80098da:	3861      	subs	r0, #97	; 0x61
 80098dc:	280d      	cmp	r0, #13
 80098de:	d8e6      	bhi.n	80098ae <_scanf_float+0x62>
 80098e0:	f7f6 fc22 	bl	8000128 <__gnu_thumb1_case_shi>
 80098e4:	ffe50083 	.word	0xffe50083
 80098e8:	ffe5ffe5 	.word	0xffe5ffe5
 80098ec:	00a200b6 	.word	0x00a200b6
 80098f0:	ffe5ffe5 	.word	0xffe5ffe5
 80098f4:	ffe50089 	.word	0xffe50089
 80098f8:	ffe5ffe5 	.word	0xffe5ffe5
 80098fc:	0065ffe5 	.word	0x0065ffe5
 8009900:	3841      	subs	r0, #65	; 0x41
 8009902:	e7eb      	b.n	80098dc <_scanf_float+0x90>
 8009904:	280e      	cmp	r0, #14
 8009906:	d8d2      	bhi.n	80098ae <_scanf_float+0x62>
 8009908:	f7f6 fc0e 	bl	8000128 <__gnu_thumb1_case_shi>
 800990c:	ffd1004b 	.word	0xffd1004b
 8009910:	0098004b 	.word	0x0098004b
 8009914:	0020ffd1 	.word	0x0020ffd1
 8009918:	00400040 	.word	0x00400040
 800991c:	00400040 	.word	0x00400040
 8009920:	00400040 	.word	0x00400040
 8009924:	00400040 	.word	0x00400040
 8009928:	0040      	.short	0x0040
 800992a:	2b6e      	cmp	r3, #110	; 0x6e
 800992c:	d809      	bhi.n	8009942 <_scanf_float+0xf6>
 800992e:	2b60      	cmp	r3, #96	; 0x60
 8009930:	d8d2      	bhi.n	80098d8 <_scanf_float+0x8c>
 8009932:	2b54      	cmp	r3, #84	; 0x54
 8009934:	d07d      	beq.n	8009a32 <_scanf_float+0x1e6>
 8009936:	2b59      	cmp	r3, #89	; 0x59
 8009938:	d1b9      	bne.n	80098ae <_scanf_float+0x62>
 800993a:	2c07      	cmp	r4, #7
 800993c:	d1b7      	bne.n	80098ae <_scanf_float+0x62>
 800993e:	2408      	movs	r4, #8
 8009940:	e02c      	b.n	800999c <_scanf_float+0x150>
 8009942:	2b74      	cmp	r3, #116	; 0x74
 8009944:	d075      	beq.n	8009a32 <_scanf_float+0x1e6>
 8009946:	2b79      	cmp	r3, #121	; 0x79
 8009948:	d0f7      	beq.n	800993a <_scanf_float+0xee>
 800994a:	e7b0      	b.n	80098ae <_scanf_float+0x62>
 800994c:	6831      	ldr	r1, [r6, #0]
 800994e:	05c8      	lsls	r0, r1, #23
 8009950:	d51c      	bpl.n	800998c <_scanf_float+0x140>
 8009952:	2380      	movs	r3, #128	; 0x80
 8009954:	4399      	bics	r1, r3
 8009956:	9b00      	ldr	r3, [sp, #0]
 8009958:	6031      	str	r1, [r6, #0]
 800995a:	3301      	adds	r3, #1
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	9b05      	ldr	r3, [sp, #20]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <_scanf_float+0x120>
 8009964:	3b01      	subs	r3, #1
 8009966:	3201      	adds	r2, #1
 8009968:	9305      	str	r3, [sp, #20]
 800996a:	60b2      	str	r2, [r6, #8]
 800996c:	68b3      	ldr	r3, [r6, #8]
 800996e:	3b01      	subs	r3, #1
 8009970:	60b3      	str	r3, [r6, #8]
 8009972:	6933      	ldr	r3, [r6, #16]
 8009974:	3301      	adds	r3, #1
 8009976:	6133      	str	r3, [r6, #16]
 8009978:	686b      	ldr	r3, [r5, #4]
 800997a:	3b01      	subs	r3, #1
 800997c:	606b      	str	r3, [r5, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	dc00      	bgt.n	8009984 <_scanf_float+0x138>
 8009982:	e086      	b.n	8009a92 <_scanf_float+0x246>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	3301      	adds	r3, #1
 8009988:	602b      	str	r3, [r5, #0]
 800998a:	e782      	b.n	8009892 <_scanf_float+0x46>
 800998c:	9a02      	ldr	r2, [sp, #8]
 800998e:	1912      	adds	r2, r2, r4
 8009990:	2a00      	cmp	r2, #0
 8009992:	d18c      	bne.n	80098ae <_scanf_float+0x62>
 8009994:	4a6d      	ldr	r2, [pc, #436]	; (8009b4c <_scanf_float+0x300>)
 8009996:	6831      	ldr	r1, [r6, #0]
 8009998:	400a      	ands	r2, r1
 800999a:	6032      	str	r2, [r6, #0]
 800999c:	703b      	strb	r3, [r7, #0]
 800999e:	3701      	adds	r7, #1
 80099a0:	e7e4      	b.n	800996c <_scanf_float+0x120>
 80099a2:	2180      	movs	r1, #128	; 0x80
 80099a4:	6832      	ldr	r2, [r6, #0]
 80099a6:	420a      	tst	r2, r1
 80099a8:	d081      	beq.n	80098ae <_scanf_float+0x62>
 80099aa:	438a      	bics	r2, r1
 80099ac:	e7f5      	b.n	800999a <_scanf_float+0x14e>
 80099ae:	9a02      	ldr	r2, [sp, #8]
 80099b0:	2a00      	cmp	r2, #0
 80099b2:	d10f      	bne.n	80099d4 <_scanf_float+0x188>
 80099b4:	9a00      	ldr	r2, [sp, #0]
 80099b6:	2a00      	cmp	r2, #0
 80099b8:	d10f      	bne.n	80099da <_scanf_float+0x18e>
 80099ba:	6832      	ldr	r2, [r6, #0]
 80099bc:	21e0      	movs	r1, #224	; 0xe0
 80099be:	0010      	movs	r0, r2
 80099c0:	00c9      	lsls	r1, r1, #3
 80099c2:	4008      	ands	r0, r1
 80099c4:	4288      	cmp	r0, r1
 80099c6:	d108      	bne.n	80099da <_scanf_float+0x18e>
 80099c8:	4961      	ldr	r1, [pc, #388]	; (8009b50 <_scanf_float+0x304>)
 80099ca:	400a      	ands	r2, r1
 80099cc:	6032      	str	r2, [r6, #0]
 80099ce:	2201      	movs	r2, #1
 80099d0:	9202      	str	r2, [sp, #8]
 80099d2:	e7e3      	b.n	800999c <_scanf_float+0x150>
 80099d4:	9a02      	ldr	r2, [sp, #8]
 80099d6:	2a02      	cmp	r2, #2
 80099d8:	d059      	beq.n	8009a8e <_scanf_float+0x242>
 80099da:	2c01      	cmp	r4, #1
 80099dc:	d002      	beq.n	80099e4 <_scanf_float+0x198>
 80099de:	2c04      	cmp	r4, #4
 80099e0:	d000      	beq.n	80099e4 <_scanf_float+0x198>
 80099e2:	e764      	b.n	80098ae <_scanf_float+0x62>
 80099e4:	3401      	adds	r4, #1
 80099e6:	b2e4      	uxtb	r4, r4
 80099e8:	e7d8      	b.n	800999c <_scanf_float+0x150>
 80099ea:	9a02      	ldr	r2, [sp, #8]
 80099ec:	2a01      	cmp	r2, #1
 80099ee:	d000      	beq.n	80099f2 <_scanf_float+0x1a6>
 80099f0:	e75d      	b.n	80098ae <_scanf_float+0x62>
 80099f2:	2202      	movs	r2, #2
 80099f4:	e7ec      	b.n	80099d0 <_scanf_float+0x184>
 80099f6:	2c00      	cmp	r4, #0
 80099f8:	d110      	bne.n	8009a1c <_scanf_float+0x1d0>
 80099fa:	9a00      	ldr	r2, [sp, #0]
 80099fc:	2a00      	cmp	r2, #0
 80099fe:	d000      	beq.n	8009a02 <_scanf_float+0x1b6>
 8009a00:	e758      	b.n	80098b4 <_scanf_float+0x68>
 8009a02:	6832      	ldr	r2, [r6, #0]
 8009a04:	21e0      	movs	r1, #224	; 0xe0
 8009a06:	0010      	movs	r0, r2
 8009a08:	00c9      	lsls	r1, r1, #3
 8009a0a:	4008      	ands	r0, r1
 8009a0c:	4288      	cmp	r0, r1
 8009a0e:	d000      	beq.n	8009a12 <_scanf_float+0x1c6>
 8009a10:	e754      	b.n	80098bc <_scanf_float+0x70>
 8009a12:	494f      	ldr	r1, [pc, #316]	; (8009b50 <_scanf_float+0x304>)
 8009a14:	3401      	adds	r4, #1
 8009a16:	400a      	ands	r2, r1
 8009a18:	6032      	str	r2, [r6, #0]
 8009a1a:	e7bf      	b.n	800999c <_scanf_float+0x150>
 8009a1c:	21fd      	movs	r1, #253	; 0xfd
 8009a1e:	1ee2      	subs	r2, r4, #3
 8009a20:	420a      	tst	r2, r1
 8009a22:	d000      	beq.n	8009a26 <_scanf_float+0x1da>
 8009a24:	e743      	b.n	80098ae <_scanf_float+0x62>
 8009a26:	e7dd      	b.n	80099e4 <_scanf_float+0x198>
 8009a28:	2c02      	cmp	r4, #2
 8009a2a:	d000      	beq.n	8009a2e <_scanf_float+0x1e2>
 8009a2c:	e73f      	b.n	80098ae <_scanf_float+0x62>
 8009a2e:	2403      	movs	r4, #3
 8009a30:	e7b4      	b.n	800999c <_scanf_float+0x150>
 8009a32:	2c06      	cmp	r4, #6
 8009a34:	d000      	beq.n	8009a38 <_scanf_float+0x1ec>
 8009a36:	e73a      	b.n	80098ae <_scanf_float+0x62>
 8009a38:	2407      	movs	r4, #7
 8009a3a:	e7af      	b.n	800999c <_scanf_float+0x150>
 8009a3c:	6832      	ldr	r2, [r6, #0]
 8009a3e:	0591      	lsls	r1, r2, #22
 8009a40:	d400      	bmi.n	8009a44 <_scanf_float+0x1f8>
 8009a42:	e734      	b.n	80098ae <_scanf_float+0x62>
 8009a44:	4943      	ldr	r1, [pc, #268]	; (8009b54 <_scanf_float+0x308>)
 8009a46:	400a      	ands	r2, r1
 8009a48:	6032      	str	r2, [r6, #0]
 8009a4a:	9a00      	ldr	r2, [sp, #0]
 8009a4c:	9204      	str	r2, [sp, #16]
 8009a4e:	e7a5      	b.n	800999c <_scanf_float+0x150>
 8009a50:	21a0      	movs	r1, #160	; 0xa0
 8009a52:	2080      	movs	r0, #128	; 0x80
 8009a54:	6832      	ldr	r2, [r6, #0]
 8009a56:	00c9      	lsls	r1, r1, #3
 8009a58:	4011      	ands	r1, r2
 8009a5a:	00c0      	lsls	r0, r0, #3
 8009a5c:	4281      	cmp	r1, r0
 8009a5e:	d006      	beq.n	8009a6e <_scanf_float+0x222>
 8009a60:	4202      	tst	r2, r0
 8009a62:	d100      	bne.n	8009a66 <_scanf_float+0x21a>
 8009a64:	e723      	b.n	80098ae <_scanf_float+0x62>
 8009a66:	9900      	ldr	r1, [sp, #0]
 8009a68:	2900      	cmp	r1, #0
 8009a6a:	d100      	bne.n	8009a6e <_scanf_float+0x222>
 8009a6c:	e726      	b.n	80098bc <_scanf_float+0x70>
 8009a6e:	0591      	lsls	r1, r2, #22
 8009a70:	d404      	bmi.n	8009a7c <_scanf_float+0x230>
 8009a72:	9900      	ldr	r1, [sp, #0]
 8009a74:	9804      	ldr	r0, [sp, #16]
 8009a76:	9708      	str	r7, [sp, #32]
 8009a78:	1a09      	subs	r1, r1, r0
 8009a7a:	9107      	str	r1, [sp, #28]
 8009a7c:	4934      	ldr	r1, [pc, #208]	; (8009b50 <_scanf_float+0x304>)
 8009a7e:	400a      	ands	r2, r1
 8009a80:	21c0      	movs	r1, #192	; 0xc0
 8009a82:	0049      	lsls	r1, r1, #1
 8009a84:	430a      	orrs	r2, r1
 8009a86:	6032      	str	r2, [r6, #0]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	9200      	str	r2, [sp, #0]
 8009a8c:	e786      	b.n	800999c <_scanf_float+0x150>
 8009a8e:	2203      	movs	r2, #3
 8009a90:	e79e      	b.n	80099d0 <_scanf_float+0x184>
 8009a92:	23c0      	movs	r3, #192	; 0xc0
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	0029      	movs	r1, r5
 8009a98:	58f3      	ldr	r3, [r6, r3]
 8009a9a:	9801      	ldr	r0, [sp, #4]
 8009a9c:	4798      	blx	r3
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d100      	bne.n	8009aa4 <_scanf_float+0x258>
 8009aa2:	e6f6      	b.n	8009892 <_scanf_float+0x46>
 8009aa4:	e703      	b.n	80098ae <_scanf_float+0x62>
 8009aa6:	3f01      	subs	r7, #1
 8009aa8:	5933      	ldr	r3, [r6, r4]
 8009aaa:	002a      	movs	r2, r5
 8009aac:	7839      	ldrb	r1, [r7, #0]
 8009aae:	9801      	ldr	r0, [sp, #4]
 8009ab0:	4798      	blx	r3
 8009ab2:	6933      	ldr	r3, [r6, #16]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	6133      	str	r3, [r6, #16]
 8009ab8:	e707      	b.n	80098ca <_scanf_float+0x7e>
 8009aba:	1e63      	subs	r3, r4, #1
 8009abc:	2b06      	cmp	r3, #6
 8009abe:	d80e      	bhi.n	8009ade <_scanf_float+0x292>
 8009ac0:	9702      	str	r7, [sp, #8]
 8009ac2:	2c02      	cmp	r4, #2
 8009ac4:	d920      	bls.n	8009b08 <_scanf_float+0x2bc>
 8009ac6:	1be3      	subs	r3, r4, r7
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	9305      	str	r3, [sp, #20]
 8009acc:	9b02      	ldr	r3, [sp, #8]
 8009ace:	9a05      	ldr	r2, [sp, #20]
 8009ad0:	189b      	adds	r3, r3, r2
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d827      	bhi.n	8009b28 <_scanf_float+0x2dc>
 8009ad8:	3c03      	subs	r4, #3
 8009ada:	b2e4      	uxtb	r4, r4
 8009adc:	1b3f      	subs	r7, r7, r4
 8009ade:	6833      	ldr	r3, [r6, #0]
 8009ae0:	05da      	lsls	r2, r3, #23
 8009ae2:	d554      	bpl.n	8009b8e <_scanf_float+0x342>
 8009ae4:	055b      	lsls	r3, r3, #21
 8009ae6:	d537      	bpl.n	8009b58 <_scanf_float+0x30c>
 8009ae8:	24be      	movs	r4, #190	; 0xbe
 8009aea:	0064      	lsls	r4, r4, #1
 8009aec:	9b03      	ldr	r3, [sp, #12]
 8009aee:	429f      	cmp	r7, r3
 8009af0:	d800      	bhi.n	8009af4 <_scanf_float+0x2a8>
 8009af2:	e6ee      	b.n	80098d2 <_scanf_float+0x86>
 8009af4:	3f01      	subs	r7, #1
 8009af6:	5933      	ldr	r3, [r6, r4]
 8009af8:	002a      	movs	r2, r5
 8009afa:	7839      	ldrb	r1, [r7, #0]
 8009afc:	9801      	ldr	r0, [sp, #4]
 8009afe:	4798      	blx	r3
 8009b00:	6933      	ldr	r3, [r6, #16]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	6133      	str	r3, [r6, #16]
 8009b06:	e7f1      	b.n	8009aec <_scanf_float+0x2a0>
 8009b08:	24be      	movs	r4, #190	; 0xbe
 8009b0a:	0064      	lsls	r4, r4, #1
 8009b0c:	9b03      	ldr	r3, [sp, #12]
 8009b0e:	429f      	cmp	r7, r3
 8009b10:	d800      	bhi.n	8009b14 <_scanf_float+0x2c8>
 8009b12:	e6de      	b.n	80098d2 <_scanf_float+0x86>
 8009b14:	3f01      	subs	r7, #1
 8009b16:	5933      	ldr	r3, [r6, r4]
 8009b18:	002a      	movs	r2, r5
 8009b1a:	7839      	ldrb	r1, [r7, #0]
 8009b1c:	9801      	ldr	r0, [sp, #4]
 8009b1e:	4798      	blx	r3
 8009b20:	6933      	ldr	r3, [r6, #16]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	6133      	str	r3, [r6, #16]
 8009b26:	e7f1      	b.n	8009b0c <_scanf_float+0x2c0>
 8009b28:	9b02      	ldr	r3, [sp, #8]
 8009b2a:	002a      	movs	r2, r5
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	7819      	ldrb	r1, [r3, #0]
 8009b30:	9302      	str	r3, [sp, #8]
 8009b32:	23be      	movs	r3, #190	; 0xbe
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	58f3      	ldr	r3, [r6, r3]
 8009b38:	9801      	ldr	r0, [sp, #4]
 8009b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3c:	4798      	blx	r3
 8009b3e:	6933      	ldr	r3, [r6, #16]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	6133      	str	r3, [r6, #16]
 8009b44:	e7c2      	b.n	8009acc <_scanf_float+0x280>
 8009b46:	46c0      	nop			; (mov r8, r8)
 8009b48:	fffffeff 	.word	0xfffffeff
 8009b4c:	fffffe7f 	.word	0xfffffe7f
 8009b50:	fffff87f 	.word	0xfffff87f
 8009b54:	fffffd7f 	.word	0xfffffd7f
 8009b58:	6933      	ldr	r3, [r6, #16]
 8009b5a:	1e7c      	subs	r4, r7, #1
 8009b5c:	7821      	ldrb	r1, [r4, #0]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	6133      	str	r3, [r6, #16]
 8009b62:	2965      	cmp	r1, #101	; 0x65
 8009b64:	d00c      	beq.n	8009b80 <_scanf_float+0x334>
 8009b66:	2945      	cmp	r1, #69	; 0x45
 8009b68:	d00a      	beq.n	8009b80 <_scanf_float+0x334>
 8009b6a:	23be      	movs	r3, #190	; 0xbe
 8009b6c:	005b      	lsls	r3, r3, #1
 8009b6e:	58f3      	ldr	r3, [r6, r3]
 8009b70:	002a      	movs	r2, r5
 8009b72:	9801      	ldr	r0, [sp, #4]
 8009b74:	4798      	blx	r3
 8009b76:	6933      	ldr	r3, [r6, #16]
 8009b78:	1ebc      	subs	r4, r7, #2
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	7821      	ldrb	r1, [r4, #0]
 8009b7e:	6133      	str	r3, [r6, #16]
 8009b80:	23be      	movs	r3, #190	; 0xbe
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	002a      	movs	r2, r5
 8009b86:	58f3      	ldr	r3, [r6, r3]
 8009b88:	9801      	ldr	r0, [sp, #4]
 8009b8a:	4798      	blx	r3
 8009b8c:	0027      	movs	r7, r4
 8009b8e:	6832      	ldr	r2, [r6, #0]
 8009b90:	2310      	movs	r3, #16
 8009b92:	0011      	movs	r1, r2
 8009b94:	4019      	ands	r1, r3
 8009b96:	9102      	str	r1, [sp, #8]
 8009b98:	421a      	tst	r2, r3
 8009b9a:	d158      	bne.n	8009c4e <_scanf_float+0x402>
 8009b9c:	23c0      	movs	r3, #192	; 0xc0
 8009b9e:	7039      	strb	r1, [r7, #0]
 8009ba0:	6832      	ldr	r2, [r6, #0]
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	2280      	movs	r2, #128	; 0x80
 8009ba8:	00d2      	lsls	r2, r2, #3
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d11d      	bne.n	8009bea <_scanf_float+0x39e>
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	9a00      	ldr	r2, [sp, #0]
 8009bb2:	9900      	ldr	r1, [sp, #0]
 8009bb4:	1a9a      	subs	r2, r3, r2
 8009bb6:	428b      	cmp	r3, r1
 8009bb8:	d124      	bne.n	8009c04 <_scanf_float+0x3b8>
 8009bba:	2200      	movs	r2, #0
 8009bbc:	9903      	ldr	r1, [sp, #12]
 8009bbe:	9801      	ldr	r0, [sp, #4]
 8009bc0:	f000 feae 	bl	800a920 <_strtod_r>
 8009bc4:	9b06      	ldr	r3, [sp, #24]
 8009bc6:	000d      	movs	r5, r1
 8009bc8:	6831      	ldr	r1, [r6, #0]
 8009bca:	0004      	movs	r4, r0
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	078a      	lsls	r2, r1, #30
 8009bd0:	d525      	bpl.n	8009c1e <_scanf_float+0x3d2>
 8009bd2:	1d1a      	adds	r2, r3, #4
 8009bd4:	9906      	ldr	r1, [sp, #24]
 8009bd6:	600a      	str	r2, [r1, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	601c      	str	r4, [r3, #0]
 8009bdc:	605d      	str	r5, [r3, #4]
 8009bde:	68f3      	ldr	r3, [r6, #12]
 8009be0:	3301      	adds	r3, #1
 8009be2:	60f3      	str	r3, [r6, #12]
 8009be4:	9802      	ldr	r0, [sp, #8]
 8009be6:	b00b      	add	sp, #44	; 0x2c
 8009be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bea:	9b07      	ldr	r3, [sp, #28]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0e4      	beq.n	8009bba <_scanf_float+0x36e>
 8009bf0:	9b08      	ldr	r3, [sp, #32]
 8009bf2:	9a02      	ldr	r2, [sp, #8]
 8009bf4:	1c59      	adds	r1, r3, #1
 8009bf6:	9801      	ldr	r0, [sp, #4]
 8009bf8:	230a      	movs	r3, #10
 8009bfa:	f000 ff27 	bl	800aa4c <_strtol_r>
 8009bfe:	9b07      	ldr	r3, [sp, #28]
 8009c00:	9f08      	ldr	r7, [sp, #32]
 8009c02:	1ac2      	subs	r2, r0, r3
 8009c04:	0033      	movs	r3, r6
 8009c06:	3370      	adds	r3, #112	; 0x70
 8009c08:	33ff      	adds	r3, #255	; 0xff
 8009c0a:	429f      	cmp	r7, r3
 8009c0c:	d302      	bcc.n	8009c14 <_scanf_float+0x3c8>
 8009c0e:	0037      	movs	r7, r6
 8009c10:	376f      	adds	r7, #111	; 0x6f
 8009c12:	37ff      	adds	r7, #255	; 0xff
 8009c14:	0038      	movs	r0, r7
 8009c16:	490f      	ldr	r1, [pc, #60]	; (8009c54 <_scanf_float+0x408>)
 8009c18:	f000 f836 	bl	8009c88 <siprintf>
 8009c1c:	e7cd      	b.n	8009bba <_scanf_float+0x36e>
 8009c1e:	1d1a      	adds	r2, r3, #4
 8009c20:	0749      	lsls	r1, r1, #29
 8009c22:	d4d7      	bmi.n	8009bd4 <_scanf_float+0x388>
 8009c24:	9906      	ldr	r1, [sp, #24]
 8009c26:	0020      	movs	r0, r4
 8009c28:	600a      	str	r2, [r1, #0]
 8009c2a:	681f      	ldr	r7, [r3, #0]
 8009c2c:	0022      	movs	r2, r4
 8009c2e:	002b      	movs	r3, r5
 8009c30:	0029      	movs	r1, r5
 8009c32:	f7f9 f9f3 	bl	800301c <__aeabi_dcmpun>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d004      	beq.n	8009c44 <_scanf_float+0x3f8>
 8009c3a:	4807      	ldr	r0, [pc, #28]	; (8009c58 <_scanf_float+0x40c>)
 8009c3c:	f000 f820 	bl	8009c80 <nanf>
 8009c40:	6038      	str	r0, [r7, #0]
 8009c42:	e7cc      	b.n	8009bde <_scanf_float+0x392>
 8009c44:	0020      	movs	r0, r4
 8009c46:	0029      	movs	r1, r5
 8009c48:	f7f9 fada 	bl	8003200 <__aeabi_d2f>
 8009c4c:	e7f8      	b.n	8009c40 <_scanf_float+0x3f4>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e640      	b.n	80098d4 <_scanf_float+0x88>
 8009c52:	46c0      	nop			; (mov r8, r8)
 8009c54:	0800db1c 	.word	0x0800db1c
 8009c58:	0800de28 	.word	0x0800de28

08009c5c <_sbrk_r>:
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	b570      	push	{r4, r5, r6, lr}
 8009c60:	4d06      	ldr	r5, [pc, #24]	; (8009c7c <_sbrk_r+0x20>)
 8009c62:	0004      	movs	r4, r0
 8009c64:	0008      	movs	r0, r1
 8009c66:	602b      	str	r3, [r5, #0]
 8009c68:	f7fa feac 	bl	80049c4 <_sbrk>
 8009c6c:	1c43      	adds	r3, r0, #1
 8009c6e:	d103      	bne.n	8009c78 <_sbrk_r+0x1c>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d000      	beq.n	8009c78 <_sbrk_r+0x1c>
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	bd70      	pop	{r4, r5, r6, pc}
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	2000053c 	.word	0x2000053c

08009c80 <nanf>:
 8009c80:	4800      	ldr	r0, [pc, #0]	; (8009c84 <nanf+0x4>)
 8009c82:	4770      	bx	lr
 8009c84:	7fc00000 	.word	0x7fc00000

08009c88 <siprintf>:
 8009c88:	b40e      	push	{r1, r2, r3}
 8009c8a:	b500      	push	{lr}
 8009c8c:	490b      	ldr	r1, [pc, #44]	; (8009cbc <siprintf+0x34>)
 8009c8e:	b09c      	sub	sp, #112	; 0x70
 8009c90:	ab1d      	add	r3, sp, #116	; 0x74
 8009c92:	9002      	str	r0, [sp, #8]
 8009c94:	9006      	str	r0, [sp, #24]
 8009c96:	9107      	str	r1, [sp, #28]
 8009c98:	9104      	str	r1, [sp, #16]
 8009c9a:	4809      	ldr	r0, [pc, #36]	; (8009cc0 <siprintf+0x38>)
 8009c9c:	4909      	ldr	r1, [pc, #36]	; (8009cc4 <siprintf+0x3c>)
 8009c9e:	cb04      	ldmia	r3!, {r2}
 8009ca0:	9105      	str	r1, [sp, #20]
 8009ca2:	6800      	ldr	r0, [r0, #0]
 8009ca4:	a902      	add	r1, sp, #8
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	f002 fe84 	bl	800c9b4 <_svfiprintf_r>
 8009cac:	2300      	movs	r3, #0
 8009cae:	9a02      	ldr	r2, [sp, #8]
 8009cb0:	7013      	strb	r3, [r2, #0]
 8009cb2:	b01c      	add	sp, #112	; 0x70
 8009cb4:	bc08      	pop	{r3}
 8009cb6:	b003      	add	sp, #12
 8009cb8:	4718      	bx	r3
 8009cba:	46c0      	nop			; (mov r8, r8)
 8009cbc:	7fffffff 	.word	0x7fffffff
 8009cc0:	2000000c 	.word	0x2000000c
 8009cc4:	ffff0208 	.word	0xffff0208

08009cc8 <sulp>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	0016      	movs	r6, r2
 8009ccc:	000d      	movs	r5, r1
 8009cce:	f002 fc9d 	bl	800c60c <__ulp>
 8009cd2:	2e00      	cmp	r6, #0
 8009cd4:	d00d      	beq.n	8009cf2 <sulp+0x2a>
 8009cd6:	236b      	movs	r3, #107	; 0x6b
 8009cd8:	006a      	lsls	r2, r5, #1
 8009cda:	0d52      	lsrs	r2, r2, #21
 8009cdc:	1a9b      	subs	r3, r3, r2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	dd07      	ble.n	8009cf2 <sulp+0x2a>
 8009ce2:	2400      	movs	r4, #0
 8009ce4:	4a03      	ldr	r2, [pc, #12]	; (8009cf4 <sulp+0x2c>)
 8009ce6:	051b      	lsls	r3, r3, #20
 8009ce8:	189d      	adds	r5, r3, r2
 8009cea:	002b      	movs	r3, r5
 8009cec:	0022      	movs	r2, r4
 8009cee:	f7f8 fb97 	bl	8002420 <__aeabi_dmul>
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
 8009cf4:	3ff00000 	.word	0x3ff00000

08009cf8 <_strtod_l>:
 8009cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfa:	001d      	movs	r5, r3
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	b0a5      	sub	sp, #148	; 0x94
 8009d00:	9320      	str	r3, [sp, #128]	; 0x80
 8009d02:	4bac      	ldr	r3, [pc, #688]	; (8009fb4 <_strtod_l+0x2bc>)
 8009d04:	9005      	str	r0, [sp, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	9108      	str	r1, [sp, #32]
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	9307      	str	r3, [sp, #28]
 8009d0e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d10:	f7f6 f9f8 	bl	8000104 <strlen>
 8009d14:	2600      	movs	r6, #0
 8009d16:	0004      	movs	r4, r0
 8009d18:	2700      	movs	r7, #0
 8009d1a:	9b08      	ldr	r3, [sp, #32]
 8009d1c:	931f      	str	r3, [sp, #124]	; 0x7c
 8009d1e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009d20:	7813      	ldrb	r3, [r2, #0]
 8009d22:	2b2b      	cmp	r3, #43	; 0x2b
 8009d24:	d058      	beq.n	8009dd8 <_strtod_l+0xe0>
 8009d26:	d844      	bhi.n	8009db2 <_strtod_l+0xba>
 8009d28:	2b0d      	cmp	r3, #13
 8009d2a:	d83d      	bhi.n	8009da8 <_strtod_l+0xb0>
 8009d2c:	2b08      	cmp	r3, #8
 8009d2e:	d83d      	bhi.n	8009dac <_strtod_l+0xb4>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d047      	beq.n	8009dc4 <_strtod_l+0xcc>
 8009d34:	2300      	movs	r3, #0
 8009d36:	930e      	str	r3, [sp, #56]	; 0x38
 8009d38:	2200      	movs	r2, #0
 8009d3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d3c:	920a      	str	r2, [sp, #40]	; 0x28
 8009d3e:	9306      	str	r3, [sp, #24]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	2b30      	cmp	r3, #48	; 0x30
 8009d44:	d000      	beq.n	8009d48 <_strtod_l+0x50>
 8009d46:	e07f      	b.n	8009e48 <_strtod_l+0x150>
 8009d48:	9b06      	ldr	r3, [sp, #24]
 8009d4a:	3220      	adds	r2, #32
 8009d4c:	785b      	ldrb	r3, [r3, #1]
 8009d4e:	4393      	bics	r3, r2
 8009d50:	2b58      	cmp	r3, #88	; 0x58
 8009d52:	d000      	beq.n	8009d56 <_strtod_l+0x5e>
 8009d54:	e06e      	b.n	8009e34 <_strtod_l+0x13c>
 8009d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d58:	9502      	str	r5, [sp, #8]
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	ab20      	add	r3, sp, #128	; 0x80
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	4a95      	ldr	r2, [pc, #596]	; (8009fb8 <_strtod_l+0x2c0>)
 8009d62:	ab21      	add	r3, sp, #132	; 0x84
 8009d64:	9805      	ldr	r0, [sp, #20]
 8009d66:	a91f      	add	r1, sp, #124	; 0x7c
 8009d68:	f001 fd90 	bl	800b88c <__gethex>
 8009d6c:	2307      	movs	r3, #7
 8009d6e:	0005      	movs	r5, r0
 8009d70:	0004      	movs	r4, r0
 8009d72:	401d      	ands	r5, r3
 8009d74:	4218      	tst	r0, r3
 8009d76:	d006      	beq.n	8009d86 <_strtod_l+0x8e>
 8009d78:	2d06      	cmp	r5, #6
 8009d7a:	d12f      	bne.n	8009ddc <_strtod_l+0xe4>
 8009d7c:	9b06      	ldr	r3, [sp, #24]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	931f      	str	r3, [sp, #124]	; 0x7c
 8009d82:	2300      	movs	r3, #0
 8009d84:	930e      	str	r3, [sp, #56]	; 0x38
 8009d86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <_strtod_l+0x9a>
 8009d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01c      	beq.n	8009dd2 <_strtod_l+0xda>
 8009d98:	2380      	movs	r3, #128	; 0x80
 8009d9a:	0032      	movs	r2, r6
 8009d9c:	061b      	lsls	r3, r3, #24
 8009d9e:	18fb      	adds	r3, r7, r3
 8009da0:	0010      	movs	r0, r2
 8009da2:	0019      	movs	r1, r3
 8009da4:	b025      	add	sp, #148	; 0x94
 8009da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	d1c3      	bne.n	8009d34 <_strtod_l+0x3c>
 8009dac:	3201      	adds	r2, #1
 8009dae:	921f      	str	r2, [sp, #124]	; 0x7c
 8009db0:	e7b5      	b.n	8009d1e <_strtod_l+0x26>
 8009db2:	2b2d      	cmp	r3, #45	; 0x2d
 8009db4:	d1be      	bne.n	8009d34 <_strtod_l+0x3c>
 8009db6:	3b2c      	subs	r3, #44	; 0x2c
 8009db8:	930e      	str	r3, [sp, #56]	; 0x38
 8009dba:	1c53      	adds	r3, r2, #1
 8009dbc:	931f      	str	r3, [sp, #124]	; 0x7c
 8009dbe:	7853      	ldrb	r3, [r2, #1]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1b9      	bne.n	8009d38 <_strtod_l+0x40>
 8009dc4:	9b08      	ldr	r3, [sp, #32]
 8009dc6:	931f      	str	r3, [sp, #124]	; 0x7c
 8009dc8:	2300      	movs	r3, #0
 8009dca:	930e      	str	r3, [sp, #56]	; 0x38
 8009dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1dc      	bne.n	8009d8c <_strtod_l+0x94>
 8009dd2:	0032      	movs	r2, r6
 8009dd4:	003b      	movs	r3, r7
 8009dd6:	e7e3      	b.n	8009da0 <_strtod_l+0xa8>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	e7ed      	b.n	8009db8 <_strtod_l+0xc0>
 8009ddc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	d007      	beq.n	8009df2 <_strtod_l+0xfa>
 8009de2:	2135      	movs	r1, #53	; 0x35
 8009de4:	a822      	add	r0, sp, #136	; 0x88
 8009de6:	f002 fd12 	bl	800c80e <__copybits>
 8009dea:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009dec:	9805      	ldr	r0, [sp, #20]
 8009dee:	f002 f8cd 	bl	800bf8c <_Bfree>
 8009df2:	1e68      	subs	r0, r5, #1
 8009df4:	2804      	cmp	r0, #4
 8009df6:	d806      	bhi.n	8009e06 <_strtod_l+0x10e>
 8009df8:	f7f6 f98c 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009dfc:	1816030b 	.word	0x1816030b
 8009e00:	0b          	.byte	0x0b
 8009e01:	00          	.byte	0x00
 8009e02:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009e04:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8009e06:	0723      	lsls	r3, r4, #28
 8009e08:	d5bd      	bpl.n	8009d86 <_strtod_l+0x8e>
 8009e0a:	2380      	movs	r3, #128	; 0x80
 8009e0c:	061b      	lsls	r3, r3, #24
 8009e0e:	431f      	orrs	r7, r3
 8009e10:	e7b9      	b.n	8009d86 <_strtod_l+0x8e>
 8009e12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e14:	4a69      	ldr	r2, [pc, #420]	; (8009fbc <_strtod_l+0x2c4>)
 8009e16:	496a      	ldr	r1, [pc, #424]	; (8009fc0 <_strtod_l+0x2c8>)
 8009e18:	401a      	ands	r2, r3
 8009e1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e1c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009e1e:	185b      	adds	r3, r3, r1
 8009e20:	051b      	lsls	r3, r3, #20
 8009e22:	431a      	orrs	r2, r3
 8009e24:	0017      	movs	r7, r2
 8009e26:	e7ee      	b.n	8009e06 <_strtod_l+0x10e>
 8009e28:	4f66      	ldr	r7, [pc, #408]	; (8009fc4 <_strtod_l+0x2cc>)
 8009e2a:	e7ec      	b.n	8009e06 <_strtod_l+0x10e>
 8009e2c:	2601      	movs	r6, #1
 8009e2e:	4f66      	ldr	r7, [pc, #408]	; (8009fc8 <_strtod_l+0x2d0>)
 8009e30:	4276      	negs	r6, r6
 8009e32:	e7e8      	b.n	8009e06 <_strtod_l+0x10e>
 8009e34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	921f      	str	r2, [sp, #124]	; 0x7c
 8009e3a:	785b      	ldrb	r3, [r3, #1]
 8009e3c:	2b30      	cmp	r3, #48	; 0x30
 8009e3e:	d0f9      	beq.n	8009e34 <_strtod_l+0x13c>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d0a0      	beq.n	8009d86 <_strtod_l+0x8e>
 8009e44:	2301      	movs	r3, #1
 8009e46:	930a      	str	r3, [sp, #40]	; 0x28
 8009e48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e4a:	220a      	movs	r2, #10
 8009e4c:	9310      	str	r3, [sp, #64]	; 0x40
 8009e4e:	2300      	movs	r3, #0
 8009e50:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e52:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e54:	9309      	str	r3, [sp, #36]	; 0x24
 8009e56:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009e58:	7805      	ldrb	r5, [r0, #0]
 8009e5a:	002b      	movs	r3, r5
 8009e5c:	3b30      	subs	r3, #48	; 0x30
 8009e5e:	b2d9      	uxtb	r1, r3
 8009e60:	2909      	cmp	r1, #9
 8009e62:	d927      	bls.n	8009eb4 <_strtod_l+0x1bc>
 8009e64:	0022      	movs	r2, r4
 8009e66:	9907      	ldr	r1, [sp, #28]
 8009e68:	f002 feaa 	bl	800cbc0 <strncmp>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d033      	beq.n	8009ed8 <_strtod_l+0x1e0>
 8009e70:	2000      	movs	r0, #0
 8009e72:	002b      	movs	r3, r5
 8009e74:	4684      	mov	ip, r0
 8009e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e78:	900c      	str	r0, [sp, #48]	; 0x30
 8009e7a:	9206      	str	r2, [sp, #24]
 8009e7c:	2220      	movs	r2, #32
 8009e7e:	0019      	movs	r1, r3
 8009e80:	4391      	bics	r1, r2
 8009e82:	000a      	movs	r2, r1
 8009e84:	2100      	movs	r1, #0
 8009e86:	9107      	str	r1, [sp, #28]
 8009e88:	2a45      	cmp	r2, #69	; 0x45
 8009e8a:	d000      	beq.n	8009e8e <_strtod_l+0x196>
 8009e8c:	e0c5      	b.n	800a01a <_strtod_l+0x322>
 8009e8e:	9b06      	ldr	r3, [sp, #24]
 8009e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e92:	4303      	orrs	r3, r0
 8009e94:	4313      	orrs	r3, r2
 8009e96:	428b      	cmp	r3, r1
 8009e98:	d094      	beq.n	8009dc4 <_strtod_l+0xcc>
 8009e9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e9c:	9308      	str	r3, [sp, #32]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	931f      	str	r3, [sp, #124]	; 0x7c
 8009ea2:	9b08      	ldr	r3, [sp, #32]
 8009ea4:	785b      	ldrb	r3, [r3, #1]
 8009ea6:	2b2b      	cmp	r3, #43	; 0x2b
 8009ea8:	d076      	beq.n	8009f98 <_strtod_l+0x2a0>
 8009eaa:	000c      	movs	r4, r1
 8009eac:	2b2d      	cmp	r3, #45	; 0x2d
 8009eae:	d179      	bne.n	8009fa4 <_strtod_l+0x2ac>
 8009eb0:	2401      	movs	r4, #1
 8009eb2:	e072      	b.n	8009f9a <_strtod_l+0x2a2>
 8009eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009eb6:	2908      	cmp	r1, #8
 8009eb8:	dc09      	bgt.n	8009ece <_strtod_l+0x1d6>
 8009eba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ebc:	4351      	muls	r1, r2
 8009ebe:	185b      	adds	r3, r3, r1
 8009ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eca:	901f      	str	r0, [sp, #124]	; 0x7c
 8009ecc:	e7c3      	b.n	8009e56 <_strtod_l+0x15e>
 8009ece:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ed0:	4351      	muls	r1, r2
 8009ed2:	185b      	adds	r3, r3, r1
 8009ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ed6:	e7f4      	b.n	8009ec2 <_strtod_l+0x1ca>
 8009ed8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009edc:	191c      	adds	r4, r3, r4
 8009ede:	941f      	str	r4, [sp, #124]	; 0x7c
 8009ee0:	7823      	ldrb	r3, [r4, #0]
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	d039      	beq.n	8009f5a <_strtod_l+0x262>
 8009ee6:	900c      	str	r0, [sp, #48]	; 0x30
 8009ee8:	9206      	str	r2, [sp, #24]
 8009eea:	001a      	movs	r2, r3
 8009eec:	3a30      	subs	r2, #48	; 0x30
 8009eee:	2a09      	cmp	r2, #9
 8009ef0:	d912      	bls.n	8009f18 <_strtod_l+0x220>
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	4694      	mov	ip, r2
 8009ef6:	e7c1      	b.n	8009e7c <_strtod_l+0x184>
 8009ef8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009efa:	3001      	adds	r0, #1
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	921f      	str	r2, [sp, #124]	; 0x7c
 8009f00:	785b      	ldrb	r3, [r3, #1]
 8009f02:	2b30      	cmp	r3, #48	; 0x30
 8009f04:	d0f8      	beq.n	8009ef8 <_strtod_l+0x200>
 8009f06:	001a      	movs	r2, r3
 8009f08:	3a31      	subs	r2, #49	; 0x31
 8009f0a:	2a08      	cmp	r2, #8
 8009f0c:	d83f      	bhi.n	8009f8e <_strtod_l+0x296>
 8009f0e:	900c      	str	r0, [sp, #48]	; 0x30
 8009f10:	2000      	movs	r0, #0
 8009f12:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009f14:	9006      	str	r0, [sp, #24]
 8009f16:	9210      	str	r2, [sp, #64]	; 0x40
 8009f18:	001a      	movs	r2, r3
 8009f1a:	1c41      	adds	r1, r0, #1
 8009f1c:	3a30      	subs	r2, #48	; 0x30
 8009f1e:	2b30      	cmp	r3, #48	; 0x30
 8009f20:	d015      	beq.n	8009f4e <_strtod_l+0x256>
 8009f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f24:	185b      	adds	r3, r3, r1
 8009f26:	210a      	movs	r1, #10
 8009f28:	930c      	str	r3, [sp, #48]	; 0x30
 8009f2a:	9b06      	ldr	r3, [sp, #24]
 8009f2c:	18c4      	adds	r4, r0, r3
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	d115      	bne.n	8009f5e <_strtod_l+0x266>
 8009f32:	9906      	ldr	r1, [sp, #24]
 8009f34:	9b06      	ldr	r3, [sp, #24]
 8009f36:	3101      	adds	r1, #1
 8009f38:	1809      	adds	r1, r1, r0
 8009f3a:	181b      	adds	r3, r3, r0
 8009f3c:	9106      	str	r1, [sp, #24]
 8009f3e:	2b08      	cmp	r3, #8
 8009f40:	dc1b      	bgt.n	8009f7a <_strtod_l+0x282>
 8009f42:	230a      	movs	r3, #10
 8009f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f46:	434b      	muls	r3, r1
 8009f48:	2100      	movs	r1, #0
 8009f4a:	18d3      	adds	r3, r2, r3
 8009f4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f50:	0008      	movs	r0, r1
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	921f      	str	r2, [sp, #124]	; 0x7c
 8009f56:	785b      	ldrb	r3, [r3, #1]
 8009f58:	e7c7      	b.n	8009eea <_strtod_l+0x1f2>
 8009f5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5c:	e7d1      	b.n	8009f02 <_strtod_l+0x20a>
 8009f5e:	2b08      	cmp	r3, #8
 8009f60:	dc04      	bgt.n	8009f6c <_strtod_l+0x274>
 8009f62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009f64:	434d      	muls	r5, r1
 8009f66:	950b      	str	r5, [sp, #44]	; 0x2c
 8009f68:	3301      	adds	r3, #1
 8009f6a:	e7e0      	b.n	8009f2e <_strtod_l+0x236>
 8009f6c:	1c5d      	adds	r5, r3, #1
 8009f6e:	2d10      	cmp	r5, #16
 8009f70:	dcfa      	bgt.n	8009f68 <_strtod_l+0x270>
 8009f72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f74:	434d      	muls	r5, r1
 8009f76:	950f      	str	r5, [sp, #60]	; 0x3c
 8009f78:	e7f6      	b.n	8009f68 <_strtod_l+0x270>
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	2b10      	cmp	r3, #16
 8009f80:	dce5      	bgt.n	8009f4e <_strtod_l+0x256>
 8009f82:	230a      	movs	r3, #10
 8009f84:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009f86:	4343      	muls	r3, r0
 8009f88:	18d3      	adds	r3, r2, r3
 8009f8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f8c:	e7df      	b.n	8009f4e <_strtod_l+0x256>
 8009f8e:	2200      	movs	r2, #0
 8009f90:	920c      	str	r2, [sp, #48]	; 0x30
 8009f92:	9206      	str	r2, [sp, #24]
 8009f94:	3201      	adds	r2, #1
 8009f96:	e7ad      	b.n	8009ef4 <_strtod_l+0x1fc>
 8009f98:	2400      	movs	r4, #0
 8009f9a:	9b08      	ldr	r3, [sp, #32]
 8009f9c:	3302      	adds	r3, #2
 8009f9e:	931f      	str	r3, [sp, #124]	; 0x7c
 8009fa0:	9b08      	ldr	r3, [sp, #32]
 8009fa2:	789b      	ldrb	r3, [r3, #2]
 8009fa4:	001a      	movs	r2, r3
 8009fa6:	3a30      	subs	r2, #48	; 0x30
 8009fa8:	2a09      	cmp	r2, #9
 8009faa:	d913      	bls.n	8009fd4 <_strtod_l+0x2dc>
 8009fac:	9a08      	ldr	r2, [sp, #32]
 8009fae:	921f      	str	r2, [sp, #124]	; 0x7c
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	e031      	b.n	800a018 <_strtod_l+0x320>
 8009fb4:	0800dc70 	.word	0x0800dc70
 8009fb8:	0800db24 	.word	0x0800db24
 8009fbc:	ffefffff 	.word	0xffefffff
 8009fc0:	00000433 	.word	0x00000433
 8009fc4:	7ff00000 	.word	0x7ff00000
 8009fc8:	7fffffff 	.word	0x7fffffff
 8009fcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	921f      	str	r2, [sp, #124]	; 0x7c
 8009fd2:	785b      	ldrb	r3, [r3, #1]
 8009fd4:	2b30      	cmp	r3, #48	; 0x30
 8009fd6:	d0f9      	beq.n	8009fcc <_strtod_l+0x2d4>
 8009fd8:	2200      	movs	r2, #0
 8009fda:	9207      	str	r2, [sp, #28]
 8009fdc:	001a      	movs	r2, r3
 8009fde:	3a31      	subs	r2, #49	; 0x31
 8009fe0:	2a08      	cmp	r2, #8
 8009fe2:	d81a      	bhi.n	800a01a <_strtod_l+0x322>
 8009fe4:	3b30      	subs	r3, #48	; 0x30
 8009fe6:	001a      	movs	r2, r3
 8009fe8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fea:	9307      	str	r3, [sp, #28]
 8009fec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fee:	1c59      	adds	r1, r3, #1
 8009ff0:	911f      	str	r1, [sp, #124]	; 0x7c
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	001d      	movs	r5, r3
 8009ff6:	3d30      	subs	r5, #48	; 0x30
 8009ff8:	2d09      	cmp	r5, #9
 8009ffa:	d939      	bls.n	800a070 <_strtod_l+0x378>
 8009ffc:	9d07      	ldr	r5, [sp, #28]
 8009ffe:	1b49      	subs	r1, r1, r5
 800a000:	4db0      	ldr	r5, [pc, #704]	; (800a2c4 <_strtod_l+0x5cc>)
 800a002:	9507      	str	r5, [sp, #28]
 800a004:	2908      	cmp	r1, #8
 800a006:	dc03      	bgt.n	800a010 <_strtod_l+0x318>
 800a008:	9207      	str	r2, [sp, #28]
 800a00a:	42aa      	cmp	r2, r5
 800a00c:	dd00      	ble.n	800a010 <_strtod_l+0x318>
 800a00e:	9507      	str	r5, [sp, #28]
 800a010:	2c00      	cmp	r4, #0
 800a012:	d002      	beq.n	800a01a <_strtod_l+0x322>
 800a014:	9a07      	ldr	r2, [sp, #28]
 800a016:	4252      	negs	r2, r2
 800a018:	9207      	str	r2, [sp, #28]
 800a01a:	9a06      	ldr	r2, [sp, #24]
 800a01c:	2a00      	cmp	r2, #0
 800a01e:	d14b      	bne.n	800a0b8 <_strtod_l+0x3c0>
 800a020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a022:	4310      	orrs	r0, r2
 800a024:	d000      	beq.n	800a028 <_strtod_l+0x330>
 800a026:	e6ae      	b.n	8009d86 <_strtod_l+0x8e>
 800a028:	4662      	mov	r2, ip
 800a02a:	2a00      	cmp	r2, #0
 800a02c:	d000      	beq.n	800a030 <_strtod_l+0x338>
 800a02e:	e6c9      	b.n	8009dc4 <_strtod_l+0xcc>
 800a030:	2b69      	cmp	r3, #105	; 0x69
 800a032:	d025      	beq.n	800a080 <_strtod_l+0x388>
 800a034:	dc21      	bgt.n	800a07a <_strtod_l+0x382>
 800a036:	2b49      	cmp	r3, #73	; 0x49
 800a038:	d022      	beq.n	800a080 <_strtod_l+0x388>
 800a03a:	2b4e      	cmp	r3, #78	; 0x4e
 800a03c:	d000      	beq.n	800a040 <_strtod_l+0x348>
 800a03e:	e6c1      	b.n	8009dc4 <_strtod_l+0xcc>
 800a040:	49a1      	ldr	r1, [pc, #644]	; (800a2c8 <_strtod_l+0x5d0>)
 800a042:	a81f      	add	r0, sp, #124	; 0x7c
 800a044:	f001 fe70 	bl	800bd28 <__match>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d100      	bne.n	800a04e <_strtod_l+0x356>
 800a04c:	e6ba      	b.n	8009dc4 <_strtod_l+0xcc>
 800a04e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	2b28      	cmp	r3, #40	; 0x28
 800a054:	d12a      	bne.n	800a0ac <_strtod_l+0x3b4>
 800a056:	499d      	ldr	r1, [pc, #628]	; (800a2cc <_strtod_l+0x5d4>)
 800a058:	aa22      	add	r2, sp, #136	; 0x88
 800a05a:	a81f      	add	r0, sp, #124	; 0x7c
 800a05c:	f001 fe78 	bl	800bd50 <__hexnan>
 800a060:	2805      	cmp	r0, #5
 800a062:	d123      	bne.n	800a0ac <_strtod_l+0x3b4>
 800a064:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a066:	4a9a      	ldr	r2, [pc, #616]	; (800a2d0 <_strtod_l+0x5d8>)
 800a068:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800a06a:	431a      	orrs	r2, r3
 800a06c:	0017      	movs	r7, r2
 800a06e:	e68a      	b.n	8009d86 <_strtod_l+0x8e>
 800a070:	210a      	movs	r1, #10
 800a072:	434a      	muls	r2, r1
 800a074:	18d2      	adds	r2, r2, r3
 800a076:	3a30      	subs	r2, #48	; 0x30
 800a078:	e7b8      	b.n	8009fec <_strtod_l+0x2f4>
 800a07a:	2b6e      	cmp	r3, #110	; 0x6e
 800a07c:	d0e0      	beq.n	800a040 <_strtod_l+0x348>
 800a07e:	e6a1      	b.n	8009dc4 <_strtod_l+0xcc>
 800a080:	4994      	ldr	r1, [pc, #592]	; (800a2d4 <_strtod_l+0x5dc>)
 800a082:	a81f      	add	r0, sp, #124	; 0x7c
 800a084:	f001 fe50 	bl	800bd28 <__match>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d100      	bne.n	800a08e <_strtod_l+0x396>
 800a08c:	e69a      	b.n	8009dc4 <_strtod_l+0xcc>
 800a08e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a090:	4991      	ldr	r1, [pc, #580]	; (800a2d8 <_strtod_l+0x5e0>)
 800a092:	3b01      	subs	r3, #1
 800a094:	a81f      	add	r0, sp, #124	; 0x7c
 800a096:	931f      	str	r3, [sp, #124]	; 0x7c
 800a098:	f001 fe46 	bl	800bd28 <__match>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d102      	bne.n	800a0a6 <_strtod_l+0x3ae>
 800a0a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	931f      	str	r3, [sp, #124]	; 0x7c
 800a0a6:	2600      	movs	r6, #0
 800a0a8:	4f89      	ldr	r7, [pc, #548]	; (800a2d0 <_strtod_l+0x5d8>)
 800a0aa:	e66c      	b.n	8009d86 <_strtod_l+0x8e>
 800a0ac:	488b      	ldr	r0, [pc, #556]	; (800a2dc <_strtod_l+0x5e4>)
 800a0ae:	f002 fd81 	bl	800cbb4 <nan>
 800a0b2:	0006      	movs	r6, r0
 800a0b4:	000f      	movs	r7, r1
 800a0b6:	e666      	b.n	8009d86 <_strtod_l+0x8e>
 800a0b8:	9b07      	ldr	r3, [sp, #28]
 800a0ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0bc:	1a9b      	subs	r3, r3, r2
 800a0be:	930a      	str	r3, [sp, #40]	; 0x28
 800a0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <_strtod_l+0x3d2>
 800a0c6:	9b06      	ldr	r3, [sp, #24]
 800a0c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ca:	9c06      	ldr	r4, [sp, #24]
 800a0cc:	2c10      	cmp	r4, #16
 800a0ce:	dd00      	ble.n	800a0d2 <_strtod_l+0x3da>
 800a0d0:	2410      	movs	r4, #16
 800a0d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a0d4:	f7f9 f826 	bl	8003124 <__aeabi_ui2d>
 800a0d8:	9b06      	ldr	r3, [sp, #24]
 800a0da:	0006      	movs	r6, r0
 800a0dc:	000f      	movs	r7, r1
 800a0de:	2b09      	cmp	r3, #9
 800a0e0:	dd15      	ble.n	800a10e <_strtod_l+0x416>
 800a0e2:	0022      	movs	r2, r4
 800a0e4:	4b7e      	ldr	r3, [pc, #504]	; (800a2e0 <_strtod_l+0x5e8>)
 800a0e6:	3a09      	subs	r2, #9
 800a0e8:	00d2      	lsls	r2, r2, #3
 800a0ea:	189b      	adds	r3, r3, r2
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	f7f8 f996 	bl	8002420 <__aeabi_dmul>
 800a0f4:	0006      	movs	r6, r0
 800a0f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a0f8:	000f      	movs	r7, r1
 800a0fa:	f7f9 f813 	bl	8003124 <__aeabi_ui2d>
 800a0fe:	0002      	movs	r2, r0
 800a100:	000b      	movs	r3, r1
 800a102:	0030      	movs	r0, r6
 800a104:	0039      	movs	r1, r7
 800a106:	f7f7 fa4d 	bl	80015a4 <__aeabi_dadd>
 800a10a:	0006      	movs	r6, r0
 800a10c:	000f      	movs	r7, r1
 800a10e:	9b06      	ldr	r3, [sp, #24]
 800a110:	2b0f      	cmp	r3, #15
 800a112:	dc39      	bgt.n	800a188 <_strtod_l+0x490>
 800a114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a116:	2b00      	cmp	r3, #0
 800a118:	d100      	bne.n	800a11c <_strtod_l+0x424>
 800a11a:	e634      	b.n	8009d86 <_strtod_l+0x8e>
 800a11c:	dd24      	ble.n	800a168 <_strtod_l+0x470>
 800a11e:	2b16      	cmp	r3, #22
 800a120:	dc09      	bgt.n	800a136 <_strtod_l+0x43e>
 800a122:	496f      	ldr	r1, [pc, #444]	; (800a2e0 <_strtod_l+0x5e8>)
 800a124:	00db      	lsls	r3, r3, #3
 800a126:	18c9      	adds	r1, r1, r3
 800a128:	0032      	movs	r2, r6
 800a12a:	6808      	ldr	r0, [r1, #0]
 800a12c:	6849      	ldr	r1, [r1, #4]
 800a12e:	003b      	movs	r3, r7
 800a130:	f7f8 f976 	bl	8002420 <__aeabi_dmul>
 800a134:	e7bd      	b.n	800a0b2 <_strtod_l+0x3ba>
 800a136:	2325      	movs	r3, #37	; 0x25
 800a138:	9a06      	ldr	r2, [sp, #24]
 800a13a:	1a9b      	subs	r3, r3, r2
 800a13c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a13e:	4293      	cmp	r3, r2
 800a140:	db22      	blt.n	800a188 <_strtod_l+0x490>
 800a142:	240f      	movs	r4, #15
 800a144:	9b06      	ldr	r3, [sp, #24]
 800a146:	4d66      	ldr	r5, [pc, #408]	; (800a2e0 <_strtod_l+0x5e8>)
 800a148:	1ae4      	subs	r4, r4, r3
 800a14a:	00e1      	lsls	r1, r4, #3
 800a14c:	1869      	adds	r1, r5, r1
 800a14e:	0032      	movs	r2, r6
 800a150:	6808      	ldr	r0, [r1, #0]
 800a152:	6849      	ldr	r1, [r1, #4]
 800a154:	003b      	movs	r3, r7
 800a156:	f7f8 f963 	bl	8002420 <__aeabi_dmul>
 800a15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15c:	1b1c      	subs	r4, r3, r4
 800a15e:	00e4      	lsls	r4, r4, #3
 800a160:	192c      	adds	r4, r5, r4
 800a162:	6822      	ldr	r2, [r4, #0]
 800a164:	6863      	ldr	r3, [r4, #4]
 800a166:	e7e3      	b.n	800a130 <_strtod_l+0x438>
 800a168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a16a:	3316      	adds	r3, #22
 800a16c:	db0c      	blt.n	800a188 <_strtod_l+0x490>
 800a16e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a170:	9a07      	ldr	r2, [sp, #28]
 800a172:	0030      	movs	r0, r6
 800a174:	1a9a      	subs	r2, r3, r2
 800a176:	4b5a      	ldr	r3, [pc, #360]	; (800a2e0 <_strtod_l+0x5e8>)
 800a178:	00d2      	lsls	r2, r2, #3
 800a17a:	189b      	adds	r3, r3, r2
 800a17c:	0039      	movs	r1, r7
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f7f7 fd4b 	bl	8001c1c <__aeabi_ddiv>
 800a186:	e794      	b.n	800a0b2 <_strtod_l+0x3ba>
 800a188:	9b06      	ldr	r3, [sp, #24]
 800a18a:	1b1c      	subs	r4, r3, r4
 800a18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18e:	18e4      	adds	r4, r4, r3
 800a190:	2c00      	cmp	r4, #0
 800a192:	dd72      	ble.n	800a27a <_strtod_l+0x582>
 800a194:	230f      	movs	r3, #15
 800a196:	0021      	movs	r1, r4
 800a198:	4019      	ands	r1, r3
 800a19a:	421c      	tst	r4, r3
 800a19c:	d00a      	beq.n	800a1b4 <_strtod_l+0x4bc>
 800a19e:	00cb      	lsls	r3, r1, #3
 800a1a0:	494f      	ldr	r1, [pc, #316]	; (800a2e0 <_strtod_l+0x5e8>)
 800a1a2:	0032      	movs	r2, r6
 800a1a4:	18c9      	adds	r1, r1, r3
 800a1a6:	6808      	ldr	r0, [r1, #0]
 800a1a8:	6849      	ldr	r1, [r1, #4]
 800a1aa:	003b      	movs	r3, r7
 800a1ac:	f7f8 f938 	bl	8002420 <__aeabi_dmul>
 800a1b0:	0006      	movs	r6, r0
 800a1b2:	000f      	movs	r7, r1
 800a1b4:	230f      	movs	r3, #15
 800a1b6:	439c      	bics	r4, r3
 800a1b8:	d04a      	beq.n	800a250 <_strtod_l+0x558>
 800a1ba:	3326      	adds	r3, #38	; 0x26
 800a1bc:	33ff      	adds	r3, #255	; 0xff
 800a1be:	429c      	cmp	r4, r3
 800a1c0:	dd22      	ble.n	800a208 <_strtod_l+0x510>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	9306      	str	r3, [sp, #24]
 800a1c6:	9307      	str	r3, [sp, #28]
 800a1c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a1cc:	2322      	movs	r3, #34	; 0x22
 800a1ce:	2600      	movs	r6, #0
 800a1d0:	9a05      	ldr	r2, [sp, #20]
 800a1d2:	4f3f      	ldr	r7, [pc, #252]	; (800a2d0 <_strtod_l+0x5d8>)
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d8:	42b3      	cmp	r3, r6
 800a1da:	d100      	bne.n	800a1de <_strtod_l+0x4e6>
 800a1dc:	e5d3      	b.n	8009d86 <_strtod_l+0x8e>
 800a1de:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a1e0:	9805      	ldr	r0, [sp, #20]
 800a1e2:	f001 fed3 	bl	800bf8c <_Bfree>
 800a1e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1e8:	9805      	ldr	r0, [sp, #20]
 800a1ea:	f001 fecf 	bl	800bf8c <_Bfree>
 800a1ee:	9907      	ldr	r1, [sp, #28]
 800a1f0:	9805      	ldr	r0, [sp, #20]
 800a1f2:	f001 fecb 	bl	800bf8c <_Bfree>
 800a1f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1f8:	9805      	ldr	r0, [sp, #20]
 800a1fa:	f001 fec7 	bl	800bf8c <_Bfree>
 800a1fe:	9906      	ldr	r1, [sp, #24]
 800a200:	9805      	ldr	r0, [sp, #20]
 800a202:	f001 fec3 	bl	800bf8c <_Bfree>
 800a206:	e5be      	b.n	8009d86 <_strtod_l+0x8e>
 800a208:	2300      	movs	r3, #0
 800a20a:	0030      	movs	r0, r6
 800a20c:	0039      	movs	r1, r7
 800a20e:	4d35      	ldr	r5, [pc, #212]	; (800a2e4 <_strtod_l+0x5ec>)
 800a210:	1124      	asrs	r4, r4, #4
 800a212:	9308      	str	r3, [sp, #32]
 800a214:	2c01      	cmp	r4, #1
 800a216:	dc1e      	bgt.n	800a256 <_strtod_l+0x55e>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <_strtod_l+0x528>
 800a21c:	0006      	movs	r6, r0
 800a21e:	000f      	movs	r7, r1
 800a220:	4b31      	ldr	r3, [pc, #196]	; (800a2e8 <_strtod_l+0x5f0>)
 800a222:	0032      	movs	r2, r6
 800a224:	18ff      	adds	r7, r7, r3
 800a226:	9b08      	ldr	r3, [sp, #32]
 800a228:	00dd      	lsls	r5, r3, #3
 800a22a:	4b2e      	ldr	r3, [pc, #184]	; (800a2e4 <_strtod_l+0x5ec>)
 800a22c:	195d      	adds	r5, r3, r5
 800a22e:	6828      	ldr	r0, [r5, #0]
 800a230:	6869      	ldr	r1, [r5, #4]
 800a232:	003b      	movs	r3, r7
 800a234:	f7f8 f8f4 	bl	8002420 <__aeabi_dmul>
 800a238:	4b25      	ldr	r3, [pc, #148]	; (800a2d0 <_strtod_l+0x5d8>)
 800a23a:	4a2c      	ldr	r2, [pc, #176]	; (800a2ec <_strtod_l+0x5f4>)
 800a23c:	0006      	movs	r6, r0
 800a23e:	400b      	ands	r3, r1
 800a240:	4293      	cmp	r3, r2
 800a242:	d8be      	bhi.n	800a1c2 <_strtod_l+0x4ca>
 800a244:	4a2a      	ldr	r2, [pc, #168]	; (800a2f0 <_strtod_l+0x5f8>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d913      	bls.n	800a272 <_strtod_l+0x57a>
 800a24a:	2601      	movs	r6, #1
 800a24c:	4f29      	ldr	r7, [pc, #164]	; (800a2f4 <_strtod_l+0x5fc>)
 800a24e:	4276      	negs	r6, r6
 800a250:	2300      	movs	r3, #0
 800a252:	9308      	str	r3, [sp, #32]
 800a254:	e087      	b.n	800a366 <_strtod_l+0x66e>
 800a256:	2201      	movs	r2, #1
 800a258:	4214      	tst	r4, r2
 800a25a:	d004      	beq.n	800a266 <_strtod_l+0x56e>
 800a25c:	682a      	ldr	r2, [r5, #0]
 800a25e:	686b      	ldr	r3, [r5, #4]
 800a260:	f7f8 f8de 	bl	8002420 <__aeabi_dmul>
 800a264:	2301      	movs	r3, #1
 800a266:	9a08      	ldr	r2, [sp, #32]
 800a268:	1064      	asrs	r4, r4, #1
 800a26a:	3201      	adds	r2, #1
 800a26c:	9208      	str	r2, [sp, #32]
 800a26e:	3508      	adds	r5, #8
 800a270:	e7d0      	b.n	800a214 <_strtod_l+0x51c>
 800a272:	23d4      	movs	r3, #212	; 0xd4
 800a274:	049b      	lsls	r3, r3, #18
 800a276:	18cf      	adds	r7, r1, r3
 800a278:	e7ea      	b.n	800a250 <_strtod_l+0x558>
 800a27a:	2c00      	cmp	r4, #0
 800a27c:	d0e8      	beq.n	800a250 <_strtod_l+0x558>
 800a27e:	4264      	negs	r4, r4
 800a280:	220f      	movs	r2, #15
 800a282:	0023      	movs	r3, r4
 800a284:	4013      	ands	r3, r2
 800a286:	4214      	tst	r4, r2
 800a288:	d00a      	beq.n	800a2a0 <_strtod_l+0x5a8>
 800a28a:	00da      	lsls	r2, r3, #3
 800a28c:	4b14      	ldr	r3, [pc, #80]	; (800a2e0 <_strtod_l+0x5e8>)
 800a28e:	0030      	movs	r0, r6
 800a290:	189b      	adds	r3, r3, r2
 800a292:	0039      	movs	r1, r7
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f7f7 fcc0 	bl	8001c1c <__aeabi_ddiv>
 800a29c:	0006      	movs	r6, r0
 800a29e:	000f      	movs	r7, r1
 800a2a0:	1124      	asrs	r4, r4, #4
 800a2a2:	d0d5      	beq.n	800a250 <_strtod_l+0x558>
 800a2a4:	2c1f      	cmp	r4, #31
 800a2a6:	dd27      	ble.n	800a2f8 <_strtod_l+0x600>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9306      	str	r3, [sp, #24]
 800a2ac:	9307      	str	r3, [sp, #28]
 800a2ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b2:	2322      	movs	r3, #34	; 0x22
 800a2b4:	9a05      	ldr	r2, [sp, #20]
 800a2b6:	2600      	movs	r6, #0
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2bc:	2700      	movs	r7, #0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d18d      	bne.n	800a1de <_strtod_l+0x4e6>
 800a2c2:	e560      	b.n	8009d86 <_strtod_l+0x8e>
 800a2c4:	00004e1f 	.word	0x00004e1f
 800a2c8:	0800daf5 	.word	0x0800daf5
 800a2cc:	0800db38 	.word	0x0800db38
 800a2d0:	7ff00000 	.word	0x7ff00000
 800a2d4:	0800daed 	.word	0x0800daed
 800a2d8:	0800db7b 	.word	0x0800db7b
 800a2dc:	0800de28 	.word	0x0800de28
 800a2e0:	0800dd08 	.word	0x0800dd08
 800a2e4:	0800dce0 	.word	0x0800dce0
 800a2e8:	fcb00000 	.word	0xfcb00000
 800a2ec:	7ca00000 	.word	0x7ca00000
 800a2f0:	7c900000 	.word	0x7c900000
 800a2f4:	7fefffff 	.word	0x7fefffff
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	0022      	movs	r2, r4
 800a2fc:	401a      	ands	r2, r3
 800a2fe:	9208      	str	r2, [sp, #32]
 800a300:	421c      	tst	r4, r3
 800a302:	d001      	beq.n	800a308 <_strtod_l+0x610>
 800a304:	335a      	adds	r3, #90	; 0x5a
 800a306:	9308      	str	r3, [sp, #32]
 800a308:	0030      	movs	r0, r6
 800a30a:	0039      	movs	r1, r7
 800a30c:	2300      	movs	r3, #0
 800a30e:	4dc5      	ldr	r5, [pc, #788]	; (800a624 <_strtod_l+0x92c>)
 800a310:	2201      	movs	r2, #1
 800a312:	4214      	tst	r4, r2
 800a314:	d004      	beq.n	800a320 <_strtod_l+0x628>
 800a316:	682a      	ldr	r2, [r5, #0]
 800a318:	686b      	ldr	r3, [r5, #4]
 800a31a:	f7f8 f881 	bl	8002420 <__aeabi_dmul>
 800a31e:	2301      	movs	r3, #1
 800a320:	1064      	asrs	r4, r4, #1
 800a322:	3508      	adds	r5, #8
 800a324:	2c00      	cmp	r4, #0
 800a326:	d1f3      	bne.n	800a310 <_strtod_l+0x618>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <_strtod_l+0x638>
 800a32c:	0006      	movs	r6, r0
 800a32e:	000f      	movs	r7, r1
 800a330:	9b08      	ldr	r3, [sp, #32]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00f      	beq.n	800a356 <_strtod_l+0x65e>
 800a336:	236b      	movs	r3, #107	; 0x6b
 800a338:	007a      	lsls	r2, r7, #1
 800a33a:	0d52      	lsrs	r2, r2, #21
 800a33c:	0039      	movs	r1, r7
 800a33e:	1a9b      	subs	r3, r3, r2
 800a340:	2b00      	cmp	r3, #0
 800a342:	dd08      	ble.n	800a356 <_strtod_l+0x65e>
 800a344:	2b1f      	cmp	r3, #31
 800a346:	dc00      	bgt.n	800a34a <_strtod_l+0x652>
 800a348:	e124      	b.n	800a594 <_strtod_l+0x89c>
 800a34a:	2600      	movs	r6, #0
 800a34c:	2b34      	cmp	r3, #52	; 0x34
 800a34e:	dc00      	bgt.n	800a352 <_strtod_l+0x65a>
 800a350:	e119      	b.n	800a586 <_strtod_l+0x88e>
 800a352:	27dc      	movs	r7, #220	; 0xdc
 800a354:	04bf      	lsls	r7, r7, #18
 800a356:	2200      	movs	r2, #0
 800a358:	2300      	movs	r3, #0
 800a35a:	0030      	movs	r0, r6
 800a35c:	0039      	movs	r1, r7
 800a35e:	f7f6 f873 	bl	8000448 <__aeabi_dcmpeq>
 800a362:	2800      	cmp	r0, #0
 800a364:	d1a0      	bne.n	800a2a8 <_strtod_l+0x5b0>
 800a366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a36e:	9b06      	ldr	r3, [sp, #24]
 800a370:	9805      	ldr	r0, [sp, #20]
 800a372:	f001 fe73 	bl	800c05c <__s2b>
 800a376:	900b      	str	r0, [sp, #44]	; 0x2c
 800a378:	2800      	cmp	r0, #0
 800a37a:	d100      	bne.n	800a37e <_strtod_l+0x686>
 800a37c:	e721      	b.n	800a1c2 <_strtod_l+0x4ca>
 800a37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a380:	9907      	ldr	r1, [sp, #28]
 800a382:	17da      	asrs	r2, r3, #31
 800a384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a386:	1a5b      	subs	r3, r3, r1
 800a388:	401a      	ands	r2, r3
 800a38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a38c:	9215      	str	r2, [sp, #84]	; 0x54
 800a38e:	43db      	mvns	r3, r3
 800a390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a392:	17db      	asrs	r3, r3, #31
 800a394:	401a      	ands	r2, r3
 800a396:	2300      	movs	r3, #0
 800a398:	921a      	str	r2, [sp, #104]	; 0x68
 800a39a:	9306      	str	r3, [sp, #24]
 800a39c:	9307      	str	r3, [sp, #28]
 800a39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a0:	9805      	ldr	r0, [sp, #20]
 800a3a2:	6859      	ldr	r1, [r3, #4]
 800a3a4:	f001 fdae 	bl	800bf04 <_Balloc>
 800a3a8:	9009      	str	r0, [sp, #36]	; 0x24
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d100      	bne.n	800a3b0 <_strtod_l+0x6b8>
 800a3ae:	e70d      	b.n	800a1cc <_strtod_l+0x4d4>
 800a3b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	310c      	adds	r1, #12
 800a3b8:	1c9a      	adds	r2, r3, #2
 800a3ba:	0092      	lsls	r2, r2, #2
 800a3bc:	300c      	adds	r0, #12
 800a3be:	930c      	str	r3, [sp, #48]	; 0x30
 800a3c0:	f7fe fce2 	bl	8008d88 <memcpy>
 800a3c4:	ab22      	add	r3, sp, #136	; 0x88
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	ab21      	add	r3, sp, #132	; 0x84
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	0032      	movs	r2, r6
 800a3ce:	003b      	movs	r3, r7
 800a3d0:	9805      	ldr	r0, [sp, #20]
 800a3d2:	9612      	str	r6, [sp, #72]	; 0x48
 800a3d4:	9713      	str	r7, [sp, #76]	; 0x4c
 800a3d6:	f002 f98d 	bl	800c6f4 <__d2b>
 800a3da:	9020      	str	r0, [sp, #128]	; 0x80
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d100      	bne.n	800a3e2 <_strtod_l+0x6ea>
 800a3e0:	e6f4      	b.n	800a1cc <_strtod_l+0x4d4>
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	9805      	ldr	r0, [sp, #20]
 800a3e6:	f001 fecd 	bl	800c184 <__i2b>
 800a3ea:	9007      	str	r0, [sp, #28]
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d100      	bne.n	800a3f2 <_strtod_l+0x6fa>
 800a3f0:	e6ec      	b.n	800a1cc <_strtod_l+0x4d4>
 800a3f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a3f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a3f8:	1ad4      	subs	r4, r2, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	db01      	blt.n	800a402 <_strtod_l+0x70a>
 800a3fe:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800a400:	195d      	adds	r5, r3, r5
 800a402:	9908      	ldr	r1, [sp, #32]
 800a404:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a406:	1a5b      	subs	r3, r3, r1
 800a408:	2136      	movs	r1, #54	; 0x36
 800a40a:	189b      	adds	r3, r3, r2
 800a40c:	1a8a      	subs	r2, r1, r2
 800a40e:	4986      	ldr	r1, [pc, #536]	; (800a628 <_strtod_l+0x930>)
 800a410:	2001      	movs	r0, #1
 800a412:	468c      	mov	ip, r1
 800a414:	2100      	movs	r1, #0
 800a416:	3b01      	subs	r3, #1
 800a418:	9110      	str	r1, [sp, #64]	; 0x40
 800a41a:	9014      	str	r0, [sp, #80]	; 0x50
 800a41c:	4563      	cmp	r3, ip
 800a41e:	da07      	bge.n	800a430 <_strtod_l+0x738>
 800a420:	4661      	mov	r1, ip
 800a422:	1ac9      	subs	r1, r1, r3
 800a424:	1a52      	subs	r2, r2, r1
 800a426:	291f      	cmp	r1, #31
 800a428:	dd00      	ble.n	800a42c <_strtod_l+0x734>
 800a42a:	e0b8      	b.n	800a59e <_strtod_l+0x8a6>
 800a42c:	4088      	lsls	r0, r1
 800a42e:	9014      	str	r0, [sp, #80]	; 0x50
 800a430:	18ab      	adds	r3, r5, r2
 800a432:	930c      	str	r3, [sp, #48]	; 0x30
 800a434:	18a4      	adds	r4, r4, r2
 800a436:	9b08      	ldr	r3, [sp, #32]
 800a438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a43a:	191c      	adds	r4, r3, r4
 800a43c:	002b      	movs	r3, r5
 800a43e:	4295      	cmp	r5, r2
 800a440:	dd00      	ble.n	800a444 <_strtod_l+0x74c>
 800a442:	0013      	movs	r3, r2
 800a444:	42a3      	cmp	r3, r4
 800a446:	dd00      	ble.n	800a44a <_strtod_l+0x752>
 800a448:	0023      	movs	r3, r4
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	dd04      	ble.n	800a458 <_strtod_l+0x760>
 800a44e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a450:	1ae4      	subs	r4, r4, r3
 800a452:	1ad2      	subs	r2, r2, r3
 800a454:	920c      	str	r2, [sp, #48]	; 0x30
 800a456:	1aed      	subs	r5, r5, r3
 800a458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dd17      	ble.n	800a48e <_strtod_l+0x796>
 800a45e:	001a      	movs	r2, r3
 800a460:	9907      	ldr	r1, [sp, #28]
 800a462:	9805      	ldr	r0, [sp, #20]
 800a464:	f001 ff54 	bl	800c310 <__pow5mult>
 800a468:	9007      	str	r0, [sp, #28]
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d100      	bne.n	800a470 <_strtod_l+0x778>
 800a46e:	e6ad      	b.n	800a1cc <_strtod_l+0x4d4>
 800a470:	0001      	movs	r1, r0
 800a472:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a474:	9805      	ldr	r0, [sp, #20]
 800a476:	f001 fe9b 	bl	800c1b0 <__multiply>
 800a47a:	900f      	str	r0, [sp, #60]	; 0x3c
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d100      	bne.n	800a482 <_strtod_l+0x78a>
 800a480:	e6a4      	b.n	800a1cc <_strtod_l+0x4d4>
 800a482:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a484:	9805      	ldr	r0, [sp, #20]
 800a486:	f001 fd81 	bl	800bf8c <_Bfree>
 800a48a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a48c:	9320      	str	r3, [sp, #128]	; 0x80
 800a48e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a490:	2b00      	cmp	r3, #0
 800a492:	dd00      	ble.n	800a496 <_strtod_l+0x79e>
 800a494:	e089      	b.n	800a5aa <_strtod_l+0x8b2>
 800a496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a498:	2b00      	cmp	r3, #0
 800a49a:	dd08      	ble.n	800a4ae <_strtod_l+0x7b6>
 800a49c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a49e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4a0:	9805      	ldr	r0, [sp, #20]
 800a4a2:	f001 ff35 	bl	800c310 <__pow5mult>
 800a4a6:	9009      	str	r0, [sp, #36]	; 0x24
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d100      	bne.n	800a4ae <_strtod_l+0x7b6>
 800a4ac:	e68e      	b.n	800a1cc <_strtod_l+0x4d4>
 800a4ae:	2c00      	cmp	r4, #0
 800a4b0:	dd08      	ble.n	800a4c4 <_strtod_l+0x7cc>
 800a4b2:	0022      	movs	r2, r4
 800a4b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4b6:	9805      	ldr	r0, [sp, #20]
 800a4b8:	f001 ff86 	bl	800c3c8 <__lshift>
 800a4bc:	9009      	str	r0, [sp, #36]	; 0x24
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d100      	bne.n	800a4c4 <_strtod_l+0x7cc>
 800a4c2:	e683      	b.n	800a1cc <_strtod_l+0x4d4>
 800a4c4:	2d00      	cmp	r5, #0
 800a4c6:	dd08      	ble.n	800a4da <_strtod_l+0x7e2>
 800a4c8:	002a      	movs	r2, r5
 800a4ca:	9907      	ldr	r1, [sp, #28]
 800a4cc:	9805      	ldr	r0, [sp, #20]
 800a4ce:	f001 ff7b 	bl	800c3c8 <__lshift>
 800a4d2:	9007      	str	r0, [sp, #28]
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d100      	bne.n	800a4da <_strtod_l+0x7e2>
 800a4d8:	e678      	b.n	800a1cc <_strtod_l+0x4d4>
 800a4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a4de:	9805      	ldr	r0, [sp, #20]
 800a4e0:	f001 fffc 	bl	800c4dc <__mdiff>
 800a4e4:	9006      	str	r0, [sp, #24]
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d100      	bne.n	800a4ec <_strtod_l+0x7f4>
 800a4ea:	e66f      	b.n	800a1cc <_strtod_l+0x4d4>
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	68c3      	ldr	r3, [r0, #12]
 800a4f0:	9907      	ldr	r1, [sp, #28]
 800a4f2:	60c2      	str	r2, [r0, #12]
 800a4f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4f6:	f001 ffd5 	bl	800c4a4 <__mcmp>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	da5f      	bge.n	800a5be <_strtod_l+0x8c6>
 800a4fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a500:	4333      	orrs	r3, r6
 800a502:	d000      	beq.n	800a506 <_strtod_l+0x80e>
 800a504:	e08a      	b.n	800a61c <_strtod_l+0x924>
 800a506:	033b      	lsls	r3, r7, #12
 800a508:	d000      	beq.n	800a50c <_strtod_l+0x814>
 800a50a:	e087      	b.n	800a61c <_strtod_l+0x924>
 800a50c:	22d6      	movs	r2, #214	; 0xd6
 800a50e:	4b47      	ldr	r3, [pc, #284]	; (800a62c <_strtod_l+0x934>)
 800a510:	04d2      	lsls	r2, r2, #19
 800a512:	403b      	ands	r3, r7
 800a514:	4293      	cmp	r3, r2
 800a516:	d800      	bhi.n	800a51a <_strtod_l+0x822>
 800a518:	e080      	b.n	800a61c <_strtod_l+0x924>
 800a51a:	9b06      	ldr	r3, [sp, #24]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	930a      	str	r3, [sp, #40]	; 0x28
 800a520:	2b00      	cmp	r3, #0
 800a522:	d104      	bne.n	800a52e <_strtod_l+0x836>
 800a524:	9b06      	ldr	r3, [sp, #24]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	930a      	str	r3, [sp, #40]	; 0x28
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	dd76      	ble.n	800a61c <_strtod_l+0x924>
 800a52e:	9906      	ldr	r1, [sp, #24]
 800a530:	2201      	movs	r2, #1
 800a532:	9805      	ldr	r0, [sp, #20]
 800a534:	f001 ff48 	bl	800c3c8 <__lshift>
 800a538:	9907      	ldr	r1, [sp, #28]
 800a53a:	9006      	str	r0, [sp, #24]
 800a53c:	f001 ffb2 	bl	800c4a4 <__mcmp>
 800a540:	2800      	cmp	r0, #0
 800a542:	dd6b      	ble.n	800a61c <_strtod_l+0x924>
 800a544:	9908      	ldr	r1, [sp, #32]
 800a546:	003b      	movs	r3, r7
 800a548:	4a38      	ldr	r2, [pc, #224]	; (800a62c <_strtod_l+0x934>)
 800a54a:	2900      	cmp	r1, #0
 800a54c:	d100      	bne.n	800a550 <_strtod_l+0x858>
 800a54e:	e092      	b.n	800a676 <_strtod_l+0x97e>
 800a550:	0011      	movs	r1, r2
 800a552:	20d6      	movs	r0, #214	; 0xd6
 800a554:	4039      	ands	r1, r7
 800a556:	04c0      	lsls	r0, r0, #19
 800a558:	4281      	cmp	r1, r0
 800a55a:	dd00      	ble.n	800a55e <_strtod_l+0x866>
 800a55c:	e08b      	b.n	800a676 <_strtod_l+0x97e>
 800a55e:	23dc      	movs	r3, #220	; 0xdc
 800a560:	049b      	lsls	r3, r3, #18
 800a562:	4299      	cmp	r1, r3
 800a564:	dc00      	bgt.n	800a568 <_strtod_l+0x870>
 800a566:	e6a4      	b.n	800a2b2 <_strtod_l+0x5ba>
 800a568:	0030      	movs	r0, r6
 800a56a:	0039      	movs	r1, r7
 800a56c:	2200      	movs	r2, #0
 800a56e:	4b30      	ldr	r3, [pc, #192]	; (800a630 <_strtod_l+0x938>)
 800a570:	f7f7 ff56 	bl	8002420 <__aeabi_dmul>
 800a574:	0006      	movs	r6, r0
 800a576:	000f      	movs	r7, r1
 800a578:	4308      	orrs	r0, r1
 800a57a:	d000      	beq.n	800a57e <_strtod_l+0x886>
 800a57c:	e62f      	b.n	800a1de <_strtod_l+0x4e6>
 800a57e:	2322      	movs	r3, #34	; 0x22
 800a580:	9a05      	ldr	r2, [sp, #20]
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	e62b      	b.n	800a1de <_strtod_l+0x4e6>
 800a586:	234b      	movs	r3, #75	; 0x4b
 800a588:	1a9a      	subs	r2, r3, r2
 800a58a:	3b4c      	subs	r3, #76	; 0x4c
 800a58c:	4093      	lsls	r3, r2
 800a58e:	4019      	ands	r1, r3
 800a590:	000f      	movs	r7, r1
 800a592:	e6e0      	b.n	800a356 <_strtod_l+0x65e>
 800a594:	2201      	movs	r2, #1
 800a596:	4252      	negs	r2, r2
 800a598:	409a      	lsls	r2, r3
 800a59a:	4016      	ands	r6, r2
 800a59c:	e6db      	b.n	800a356 <_strtod_l+0x65e>
 800a59e:	4925      	ldr	r1, [pc, #148]	; (800a634 <_strtod_l+0x93c>)
 800a5a0:	1acb      	subs	r3, r1, r3
 800a5a2:	0001      	movs	r1, r0
 800a5a4:	4099      	lsls	r1, r3
 800a5a6:	9110      	str	r1, [sp, #64]	; 0x40
 800a5a8:	e741      	b.n	800a42e <_strtod_l+0x736>
 800a5aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5ac:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a5ae:	9805      	ldr	r0, [sp, #20]
 800a5b0:	f001 ff0a 	bl	800c3c8 <__lshift>
 800a5b4:	9020      	str	r0, [sp, #128]	; 0x80
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d000      	beq.n	800a5bc <_strtod_l+0x8c4>
 800a5ba:	e76c      	b.n	800a496 <_strtod_l+0x79e>
 800a5bc:	e606      	b.n	800a1cc <_strtod_l+0x4d4>
 800a5be:	970c      	str	r7, [sp, #48]	; 0x30
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d176      	bne.n	800a6b2 <_strtod_l+0x9ba>
 800a5c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5c6:	033b      	lsls	r3, r7, #12
 800a5c8:	0b1b      	lsrs	r3, r3, #12
 800a5ca:	2a00      	cmp	r2, #0
 800a5cc:	d038      	beq.n	800a640 <_strtod_l+0x948>
 800a5ce:	4a1a      	ldr	r2, [pc, #104]	; (800a638 <_strtod_l+0x940>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d138      	bne.n	800a646 <_strtod_l+0x94e>
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	9b08      	ldr	r3, [sp, #32]
 800a5d8:	4252      	negs	r2, r2
 800a5da:	0031      	movs	r1, r6
 800a5dc:	0010      	movs	r0, r2
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00b      	beq.n	800a5fa <_strtod_l+0x902>
 800a5e2:	24d4      	movs	r4, #212	; 0xd4
 800a5e4:	4b11      	ldr	r3, [pc, #68]	; (800a62c <_strtod_l+0x934>)
 800a5e6:	0010      	movs	r0, r2
 800a5e8:	403b      	ands	r3, r7
 800a5ea:	04e4      	lsls	r4, r4, #19
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	d804      	bhi.n	800a5fa <_strtod_l+0x902>
 800a5f0:	306c      	adds	r0, #108	; 0x6c
 800a5f2:	0d1b      	lsrs	r3, r3, #20
 800a5f4:	1ac3      	subs	r3, r0, r3
 800a5f6:	409a      	lsls	r2, r3
 800a5f8:	0010      	movs	r0, r2
 800a5fa:	4281      	cmp	r1, r0
 800a5fc:	d123      	bne.n	800a646 <_strtod_l+0x94e>
 800a5fe:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <_strtod_l+0x944>)
 800a600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a602:	429a      	cmp	r2, r3
 800a604:	d102      	bne.n	800a60c <_strtod_l+0x914>
 800a606:	1c4b      	adds	r3, r1, #1
 800a608:	d100      	bne.n	800a60c <_strtod_l+0x914>
 800a60a:	e5df      	b.n	800a1cc <_strtod_l+0x4d4>
 800a60c:	4b07      	ldr	r3, [pc, #28]	; (800a62c <_strtod_l+0x934>)
 800a60e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a610:	2600      	movs	r6, #0
 800a612:	401a      	ands	r2, r3
 800a614:	0013      	movs	r3, r2
 800a616:	2280      	movs	r2, #128	; 0x80
 800a618:	0352      	lsls	r2, r2, #13
 800a61a:	189f      	adds	r7, r3, r2
 800a61c:	9b08      	ldr	r3, [sp, #32]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1a2      	bne.n	800a568 <_strtod_l+0x870>
 800a622:	e5dc      	b.n	800a1de <_strtod_l+0x4e6>
 800a624:	0800db50 	.word	0x0800db50
 800a628:	fffffc02 	.word	0xfffffc02
 800a62c:	7ff00000 	.word	0x7ff00000
 800a630:	39500000 	.word	0x39500000
 800a634:	fffffbe2 	.word	0xfffffbe2
 800a638:	000fffff 	.word	0x000fffff
 800a63c:	7fefffff 	.word	0x7fefffff
 800a640:	4333      	orrs	r3, r6
 800a642:	d100      	bne.n	800a646 <_strtod_l+0x94e>
 800a644:	e77e      	b.n	800a544 <_strtod_l+0x84c>
 800a646:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01d      	beq.n	800a688 <_strtod_l+0x990>
 800a64c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a64e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a650:	4213      	tst	r3, r2
 800a652:	d0e3      	beq.n	800a61c <_strtod_l+0x924>
 800a654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a656:	0030      	movs	r0, r6
 800a658:	0039      	movs	r1, r7
 800a65a:	9a08      	ldr	r2, [sp, #32]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d017      	beq.n	800a690 <_strtod_l+0x998>
 800a660:	f7ff fb32 	bl	8009cc8 <sulp>
 800a664:	0002      	movs	r2, r0
 800a666:	000b      	movs	r3, r1
 800a668:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a66a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a66c:	f7f6 ff9a 	bl	80015a4 <__aeabi_dadd>
 800a670:	0006      	movs	r6, r0
 800a672:	000f      	movs	r7, r1
 800a674:	e7d2      	b.n	800a61c <_strtod_l+0x924>
 800a676:	2601      	movs	r6, #1
 800a678:	4013      	ands	r3, r2
 800a67a:	4a99      	ldr	r2, [pc, #612]	; (800a8e0 <_strtod_l+0xbe8>)
 800a67c:	4276      	negs	r6, r6
 800a67e:	189b      	adds	r3, r3, r2
 800a680:	4a98      	ldr	r2, [pc, #608]	; (800a8e4 <_strtod_l+0xbec>)
 800a682:	431a      	orrs	r2, r3
 800a684:	0017      	movs	r7, r2
 800a686:	e7c9      	b.n	800a61c <_strtod_l+0x924>
 800a688:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a68a:	4233      	tst	r3, r6
 800a68c:	d0c6      	beq.n	800a61c <_strtod_l+0x924>
 800a68e:	e7e1      	b.n	800a654 <_strtod_l+0x95c>
 800a690:	f7ff fb1a 	bl	8009cc8 <sulp>
 800a694:	0002      	movs	r2, r0
 800a696:	000b      	movs	r3, r1
 800a698:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a69a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a69c:	f7f8 f92c 	bl	80028f8 <__aeabi_dsub>
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	0006      	movs	r6, r0
 800a6a6:	000f      	movs	r7, r1
 800a6a8:	f7f5 fece 	bl	8000448 <__aeabi_dcmpeq>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d0b5      	beq.n	800a61c <_strtod_l+0x924>
 800a6b0:	e5ff      	b.n	800a2b2 <_strtod_l+0x5ba>
 800a6b2:	9907      	ldr	r1, [sp, #28]
 800a6b4:	9806      	ldr	r0, [sp, #24]
 800a6b6:	f002 f881 	bl	800c7bc <__ratio>
 800a6ba:	2380      	movs	r3, #128	; 0x80
 800a6bc:	2200      	movs	r2, #0
 800a6be:	05db      	lsls	r3, r3, #23
 800a6c0:	0004      	movs	r4, r0
 800a6c2:	000d      	movs	r5, r1
 800a6c4:	f7f5 fed0 	bl	8000468 <__aeabi_dcmple>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d075      	beq.n	800a7b8 <_strtod_l+0xac0>
 800a6cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d047      	beq.n	800a762 <_strtod_l+0xa6a>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	4c84      	ldr	r4, [pc, #528]	; (800a8e8 <_strtod_l+0xbf0>)
 800a6d6:	2500      	movs	r5, #0
 800a6d8:	9310      	str	r3, [sp, #64]	; 0x40
 800a6da:	9411      	str	r4, [sp, #68]	; 0x44
 800a6dc:	4c82      	ldr	r4, [pc, #520]	; (800a8e8 <_strtod_l+0xbf0>)
 800a6de:	4a83      	ldr	r2, [pc, #524]	; (800a8ec <_strtod_l+0xbf4>)
 800a6e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	9314      	str	r3, [sp, #80]	; 0x50
 800a6e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6e8:	4b81      	ldr	r3, [pc, #516]	; (800a8f0 <_strtod_l+0xbf8>)
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d000      	beq.n	800a6f0 <_strtod_l+0x9f8>
 800a6ee:	e0ac      	b.n	800a84a <_strtod_l+0xb52>
 800a6f0:	4a80      	ldr	r2, [pc, #512]	; (800a8f4 <_strtod_l+0xbfc>)
 800a6f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6f4:	4694      	mov	ip, r2
 800a6f6:	4463      	add	r3, ip
 800a6f8:	001f      	movs	r7, r3
 800a6fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6fe:	0030      	movs	r0, r6
 800a700:	0039      	movs	r1, r7
 800a702:	920c      	str	r2, [sp, #48]	; 0x30
 800a704:	930d      	str	r3, [sp, #52]	; 0x34
 800a706:	f001 ff81 	bl	800c60c <__ulp>
 800a70a:	0002      	movs	r2, r0
 800a70c:	000b      	movs	r3, r1
 800a70e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a710:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a712:	f7f7 fe85 	bl	8002420 <__aeabi_dmul>
 800a716:	0032      	movs	r2, r6
 800a718:	003b      	movs	r3, r7
 800a71a:	f7f6 ff43 	bl	80015a4 <__aeabi_dadd>
 800a71e:	4a73      	ldr	r2, [pc, #460]	; (800a8ec <_strtod_l+0xbf4>)
 800a720:	4b75      	ldr	r3, [pc, #468]	; (800a8f8 <_strtod_l+0xc00>)
 800a722:	0006      	movs	r6, r0
 800a724:	400a      	ands	r2, r1
 800a726:	429a      	cmp	r2, r3
 800a728:	d95e      	bls.n	800a7e8 <_strtod_l+0xaf0>
 800a72a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a72c:	4b73      	ldr	r3, [pc, #460]	; (800a8fc <_strtod_l+0xc04>)
 800a72e:	429a      	cmp	r2, r3
 800a730:	d103      	bne.n	800a73a <_strtod_l+0xa42>
 800a732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a734:	3301      	adds	r3, #1
 800a736:	d100      	bne.n	800a73a <_strtod_l+0xa42>
 800a738:	e548      	b.n	800a1cc <_strtod_l+0x4d4>
 800a73a:	2601      	movs	r6, #1
 800a73c:	4f6f      	ldr	r7, [pc, #444]	; (800a8fc <_strtod_l+0xc04>)
 800a73e:	4276      	negs	r6, r6
 800a740:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a742:	9805      	ldr	r0, [sp, #20]
 800a744:	f001 fc22 	bl	800bf8c <_Bfree>
 800a748:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a74a:	9805      	ldr	r0, [sp, #20]
 800a74c:	f001 fc1e 	bl	800bf8c <_Bfree>
 800a750:	9907      	ldr	r1, [sp, #28]
 800a752:	9805      	ldr	r0, [sp, #20]
 800a754:	f001 fc1a 	bl	800bf8c <_Bfree>
 800a758:	9906      	ldr	r1, [sp, #24]
 800a75a:	9805      	ldr	r0, [sp, #20]
 800a75c:	f001 fc16 	bl	800bf8c <_Bfree>
 800a760:	e61d      	b.n	800a39e <_strtod_l+0x6a6>
 800a762:	2e00      	cmp	r6, #0
 800a764:	d11c      	bne.n	800a7a0 <_strtod_l+0xaa8>
 800a766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a768:	031b      	lsls	r3, r3, #12
 800a76a:	d11f      	bne.n	800a7ac <_strtod_l+0xab4>
 800a76c:	2200      	movs	r2, #0
 800a76e:	0020      	movs	r0, r4
 800a770:	0029      	movs	r1, r5
 800a772:	4b5d      	ldr	r3, [pc, #372]	; (800a8e8 <_strtod_l+0xbf0>)
 800a774:	f7f5 fe6e 	bl	8000454 <__aeabi_dcmplt>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d11a      	bne.n	800a7b2 <_strtod_l+0xaba>
 800a77c:	0020      	movs	r0, r4
 800a77e:	0029      	movs	r1, r5
 800a780:	2200      	movs	r2, #0
 800a782:	4b5f      	ldr	r3, [pc, #380]	; (800a900 <_strtod_l+0xc08>)
 800a784:	f7f7 fe4c 	bl	8002420 <__aeabi_dmul>
 800a788:	0005      	movs	r5, r0
 800a78a:	000c      	movs	r4, r1
 800a78c:	2380      	movs	r3, #128	; 0x80
 800a78e:	061b      	lsls	r3, r3, #24
 800a790:	18e3      	adds	r3, r4, r3
 800a792:	951c      	str	r5, [sp, #112]	; 0x70
 800a794:	931d      	str	r3, [sp, #116]	; 0x74
 800a796:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a798:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a79a:	9210      	str	r2, [sp, #64]	; 0x40
 800a79c:	9311      	str	r3, [sp, #68]	; 0x44
 800a79e:	e79e      	b.n	800a6de <_strtod_l+0x9e6>
 800a7a0:	2e01      	cmp	r6, #1
 800a7a2:	d103      	bne.n	800a7ac <_strtod_l+0xab4>
 800a7a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d100      	bne.n	800a7ac <_strtod_l+0xab4>
 800a7aa:	e582      	b.n	800a2b2 <_strtod_l+0x5ba>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4c55      	ldr	r4, [pc, #340]	; (800a904 <_strtod_l+0xc0c>)
 800a7b0:	e791      	b.n	800a6d6 <_strtod_l+0x9de>
 800a7b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a7b4:	4c52      	ldr	r4, [pc, #328]	; (800a900 <_strtod_l+0xc08>)
 800a7b6:	e7e9      	b.n	800a78c <_strtod_l+0xa94>
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	0020      	movs	r0, r4
 800a7bc:	0029      	movs	r1, r5
 800a7be:	4b50      	ldr	r3, [pc, #320]	; (800a900 <_strtod_l+0xc08>)
 800a7c0:	f7f7 fe2e 	bl	8002420 <__aeabi_dmul>
 800a7c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7c6:	0005      	movs	r5, r0
 800a7c8:	000b      	movs	r3, r1
 800a7ca:	000c      	movs	r4, r1
 800a7cc:	2a00      	cmp	r2, #0
 800a7ce:	d107      	bne.n	800a7e0 <_strtod_l+0xae8>
 800a7d0:	2280      	movs	r2, #128	; 0x80
 800a7d2:	0612      	lsls	r2, r2, #24
 800a7d4:	188b      	adds	r3, r1, r2
 800a7d6:	9016      	str	r0, [sp, #88]	; 0x58
 800a7d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a7da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a7dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7de:	e7dc      	b.n	800a79a <_strtod_l+0xaa2>
 800a7e0:	0002      	movs	r2, r0
 800a7e2:	9216      	str	r2, [sp, #88]	; 0x58
 800a7e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a7e6:	e7f8      	b.n	800a7da <_strtod_l+0xae2>
 800a7e8:	23d4      	movs	r3, #212	; 0xd4
 800a7ea:	049b      	lsls	r3, r3, #18
 800a7ec:	18cf      	adds	r7, r1, r3
 800a7ee:	9b08      	ldr	r3, [sp, #32]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1a5      	bne.n	800a740 <_strtod_l+0xa48>
 800a7f4:	4b3d      	ldr	r3, [pc, #244]	; (800a8ec <_strtod_l+0xbf4>)
 800a7f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7f8:	403b      	ands	r3, r7
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d1a0      	bne.n	800a740 <_strtod_l+0xa48>
 800a7fe:	0028      	movs	r0, r5
 800a800:	0021      	movs	r1, r4
 800a802:	f7f5 fec7 	bl	8000594 <__aeabi_d2lz>
 800a806:	f7f5 ff01 	bl	800060c <__aeabi_l2d>
 800a80a:	0002      	movs	r2, r0
 800a80c:	000b      	movs	r3, r1
 800a80e:	0028      	movs	r0, r5
 800a810:	0021      	movs	r1, r4
 800a812:	f7f8 f871 	bl	80028f8 <__aeabi_dsub>
 800a816:	033b      	lsls	r3, r7, #12
 800a818:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a81a:	0b1b      	lsrs	r3, r3, #12
 800a81c:	4333      	orrs	r3, r6
 800a81e:	4313      	orrs	r3, r2
 800a820:	0004      	movs	r4, r0
 800a822:	000d      	movs	r5, r1
 800a824:	4a38      	ldr	r2, [pc, #224]	; (800a908 <_strtod_l+0xc10>)
 800a826:	2b00      	cmp	r3, #0
 800a828:	d055      	beq.n	800a8d6 <_strtod_l+0xbde>
 800a82a:	4b38      	ldr	r3, [pc, #224]	; (800a90c <_strtod_l+0xc14>)
 800a82c:	f7f5 fe12 	bl	8000454 <__aeabi_dcmplt>
 800a830:	2800      	cmp	r0, #0
 800a832:	d000      	beq.n	800a836 <_strtod_l+0xb3e>
 800a834:	e4d3      	b.n	800a1de <_strtod_l+0x4e6>
 800a836:	0020      	movs	r0, r4
 800a838:	0029      	movs	r1, r5
 800a83a:	4a35      	ldr	r2, [pc, #212]	; (800a910 <_strtod_l+0xc18>)
 800a83c:	4b30      	ldr	r3, [pc, #192]	; (800a900 <_strtod_l+0xc08>)
 800a83e:	f7f5 fe1d 	bl	800047c <__aeabi_dcmpgt>
 800a842:	2800      	cmp	r0, #0
 800a844:	d100      	bne.n	800a848 <_strtod_l+0xb50>
 800a846:	e77b      	b.n	800a740 <_strtod_l+0xa48>
 800a848:	e4c9      	b.n	800a1de <_strtod_l+0x4e6>
 800a84a:	9b08      	ldr	r3, [sp, #32]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d02b      	beq.n	800a8a8 <_strtod_l+0xbb0>
 800a850:	23d4      	movs	r3, #212	; 0xd4
 800a852:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a854:	04db      	lsls	r3, r3, #19
 800a856:	429a      	cmp	r2, r3
 800a858:	d826      	bhi.n	800a8a8 <_strtod_l+0xbb0>
 800a85a:	0028      	movs	r0, r5
 800a85c:	0021      	movs	r1, r4
 800a85e:	4a2d      	ldr	r2, [pc, #180]	; (800a914 <_strtod_l+0xc1c>)
 800a860:	4b2d      	ldr	r3, [pc, #180]	; (800a918 <_strtod_l+0xc20>)
 800a862:	f7f5 fe01 	bl	8000468 <__aeabi_dcmple>
 800a866:	2800      	cmp	r0, #0
 800a868:	d017      	beq.n	800a89a <_strtod_l+0xba2>
 800a86a:	0028      	movs	r0, r5
 800a86c:	0021      	movs	r1, r4
 800a86e:	f7f5 fe73 	bl	8000558 <__aeabi_d2uiz>
 800a872:	2800      	cmp	r0, #0
 800a874:	d100      	bne.n	800a878 <_strtod_l+0xb80>
 800a876:	3001      	adds	r0, #1
 800a878:	f7f8 fc54 	bl	8003124 <__aeabi_ui2d>
 800a87c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a87e:	0005      	movs	r5, r0
 800a880:	000b      	movs	r3, r1
 800a882:	000c      	movs	r4, r1
 800a884:	2a00      	cmp	r2, #0
 800a886:	d122      	bne.n	800a8ce <_strtod_l+0xbd6>
 800a888:	2280      	movs	r2, #128	; 0x80
 800a88a:	0612      	lsls	r2, r2, #24
 800a88c:	188b      	adds	r3, r1, r2
 800a88e:	9018      	str	r0, [sp, #96]	; 0x60
 800a890:	9319      	str	r3, [sp, #100]	; 0x64
 800a892:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a894:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a896:	9210      	str	r2, [sp, #64]	; 0x40
 800a898:	9311      	str	r3, [sp, #68]	; 0x44
 800a89a:	22d6      	movs	r2, #214	; 0xd6
 800a89c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a89e:	04d2      	lsls	r2, r2, #19
 800a8a0:	189b      	adds	r3, r3, r2
 800a8a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8a4:	1a9b      	subs	r3, r3, r2
 800a8a6:	9311      	str	r3, [sp, #68]	; 0x44
 800a8a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a8aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a8ac:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800a8ae:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a8b0:	f001 feac 	bl	800c60c <__ulp>
 800a8b4:	0002      	movs	r2, r0
 800a8b6:	000b      	movs	r3, r1
 800a8b8:	0030      	movs	r0, r6
 800a8ba:	0039      	movs	r1, r7
 800a8bc:	f7f7 fdb0 	bl	8002420 <__aeabi_dmul>
 800a8c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8c4:	f7f6 fe6e 	bl	80015a4 <__aeabi_dadd>
 800a8c8:	0006      	movs	r6, r0
 800a8ca:	000f      	movs	r7, r1
 800a8cc:	e78f      	b.n	800a7ee <_strtod_l+0xaf6>
 800a8ce:	0002      	movs	r2, r0
 800a8d0:	9218      	str	r2, [sp, #96]	; 0x60
 800a8d2:	9319      	str	r3, [sp, #100]	; 0x64
 800a8d4:	e7dd      	b.n	800a892 <_strtod_l+0xb9a>
 800a8d6:	4b11      	ldr	r3, [pc, #68]	; (800a91c <_strtod_l+0xc24>)
 800a8d8:	f7f5 fdbc 	bl	8000454 <__aeabi_dcmplt>
 800a8dc:	e7b1      	b.n	800a842 <_strtod_l+0xb4a>
 800a8de:	46c0      	nop			; (mov r8, r8)
 800a8e0:	fff00000 	.word	0xfff00000
 800a8e4:	000fffff 	.word	0x000fffff
 800a8e8:	3ff00000 	.word	0x3ff00000
 800a8ec:	7ff00000 	.word	0x7ff00000
 800a8f0:	7fe00000 	.word	0x7fe00000
 800a8f4:	fcb00000 	.word	0xfcb00000
 800a8f8:	7c9fffff 	.word	0x7c9fffff
 800a8fc:	7fefffff 	.word	0x7fefffff
 800a900:	3fe00000 	.word	0x3fe00000
 800a904:	bff00000 	.word	0xbff00000
 800a908:	94a03595 	.word	0x94a03595
 800a90c:	3fdfffff 	.word	0x3fdfffff
 800a910:	35afe535 	.word	0x35afe535
 800a914:	ffc00000 	.word	0xffc00000
 800a918:	41dfffff 	.word	0x41dfffff
 800a91c:	3fcfffff 	.word	0x3fcfffff

0800a920 <_strtod_r>:
 800a920:	b510      	push	{r4, lr}
 800a922:	4b02      	ldr	r3, [pc, #8]	; (800a92c <_strtod_r+0xc>)
 800a924:	f7ff f9e8 	bl	8009cf8 <_strtod_l>
 800a928:	bd10      	pop	{r4, pc}
 800a92a:	46c0      	nop			; (mov r8, r8)
 800a92c:	20000074 	.word	0x20000074

0800a930 <_strtol_l.constprop.0>:
 800a930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a932:	b087      	sub	sp, #28
 800a934:	001e      	movs	r6, r3
 800a936:	9005      	str	r0, [sp, #20]
 800a938:	9101      	str	r1, [sp, #4]
 800a93a:	9202      	str	r2, [sp, #8]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d045      	beq.n	800a9cc <_strtol_l.constprop.0+0x9c>
 800a940:	000b      	movs	r3, r1
 800a942:	2e24      	cmp	r6, #36	; 0x24
 800a944:	d842      	bhi.n	800a9cc <_strtol_l.constprop.0+0x9c>
 800a946:	4a3f      	ldr	r2, [pc, #252]	; (800aa44 <_strtol_l.constprop.0+0x114>)
 800a948:	2108      	movs	r1, #8
 800a94a:	4694      	mov	ip, r2
 800a94c:	001a      	movs	r2, r3
 800a94e:	4660      	mov	r0, ip
 800a950:	7814      	ldrb	r4, [r2, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	5d00      	ldrb	r0, [r0, r4]
 800a956:	001d      	movs	r5, r3
 800a958:	0007      	movs	r7, r0
 800a95a:	400f      	ands	r7, r1
 800a95c:	4208      	tst	r0, r1
 800a95e:	d1f5      	bne.n	800a94c <_strtol_l.constprop.0+0x1c>
 800a960:	2c2d      	cmp	r4, #45	; 0x2d
 800a962:	d13a      	bne.n	800a9da <_strtol_l.constprop.0+0xaa>
 800a964:	2701      	movs	r7, #1
 800a966:	781c      	ldrb	r4, [r3, #0]
 800a968:	1c95      	adds	r5, r2, #2
 800a96a:	2e00      	cmp	r6, #0
 800a96c:	d065      	beq.n	800aa3a <_strtol_l.constprop.0+0x10a>
 800a96e:	2e10      	cmp	r6, #16
 800a970:	d109      	bne.n	800a986 <_strtol_l.constprop.0+0x56>
 800a972:	2c30      	cmp	r4, #48	; 0x30
 800a974:	d107      	bne.n	800a986 <_strtol_l.constprop.0+0x56>
 800a976:	2220      	movs	r2, #32
 800a978:	782b      	ldrb	r3, [r5, #0]
 800a97a:	4393      	bics	r3, r2
 800a97c:	2b58      	cmp	r3, #88	; 0x58
 800a97e:	d157      	bne.n	800aa30 <_strtol_l.constprop.0+0x100>
 800a980:	2610      	movs	r6, #16
 800a982:	786c      	ldrb	r4, [r5, #1]
 800a984:	3502      	adds	r5, #2
 800a986:	4b30      	ldr	r3, [pc, #192]	; (800aa48 <_strtol_l.constprop.0+0x118>)
 800a988:	0031      	movs	r1, r6
 800a98a:	18fb      	adds	r3, r7, r3
 800a98c:	0018      	movs	r0, r3
 800a98e:	9303      	str	r3, [sp, #12]
 800a990:	f7f5 fc5a 	bl	8000248 <__aeabi_uidivmod>
 800a994:	2300      	movs	r3, #0
 800a996:	2201      	movs	r2, #1
 800a998:	4684      	mov	ip, r0
 800a99a:	0018      	movs	r0, r3
 800a99c:	9104      	str	r1, [sp, #16]
 800a99e:	4252      	negs	r2, r2
 800a9a0:	0021      	movs	r1, r4
 800a9a2:	3930      	subs	r1, #48	; 0x30
 800a9a4:	2909      	cmp	r1, #9
 800a9a6:	d81d      	bhi.n	800a9e4 <_strtol_l.constprop.0+0xb4>
 800a9a8:	000c      	movs	r4, r1
 800a9aa:	42a6      	cmp	r6, r4
 800a9ac:	dd28      	ble.n	800aa00 <_strtol_l.constprop.0+0xd0>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	db24      	blt.n	800a9fc <_strtol_l.constprop.0+0xcc>
 800a9b2:	0013      	movs	r3, r2
 800a9b4:	4584      	cmp	ip, r0
 800a9b6:	d306      	bcc.n	800a9c6 <_strtol_l.constprop.0+0x96>
 800a9b8:	d102      	bne.n	800a9c0 <_strtol_l.constprop.0+0x90>
 800a9ba:	9904      	ldr	r1, [sp, #16]
 800a9bc:	42a1      	cmp	r1, r4
 800a9be:	db02      	blt.n	800a9c6 <_strtol_l.constprop.0+0x96>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	4370      	muls	r0, r6
 800a9c4:	1820      	adds	r0, r4, r0
 800a9c6:	782c      	ldrb	r4, [r5, #0]
 800a9c8:	3501      	adds	r5, #1
 800a9ca:	e7e9      	b.n	800a9a0 <_strtol_l.constprop.0+0x70>
 800a9cc:	f7fe f9a8 	bl	8008d20 <__errno>
 800a9d0:	2316      	movs	r3, #22
 800a9d2:	6003      	str	r3, [r0, #0]
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	b007      	add	sp, #28
 800a9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9da:	2c2b      	cmp	r4, #43	; 0x2b
 800a9dc:	d1c5      	bne.n	800a96a <_strtol_l.constprop.0+0x3a>
 800a9de:	781c      	ldrb	r4, [r3, #0]
 800a9e0:	1c95      	adds	r5, r2, #2
 800a9e2:	e7c2      	b.n	800a96a <_strtol_l.constprop.0+0x3a>
 800a9e4:	0021      	movs	r1, r4
 800a9e6:	3941      	subs	r1, #65	; 0x41
 800a9e8:	2919      	cmp	r1, #25
 800a9ea:	d801      	bhi.n	800a9f0 <_strtol_l.constprop.0+0xc0>
 800a9ec:	3c37      	subs	r4, #55	; 0x37
 800a9ee:	e7dc      	b.n	800a9aa <_strtol_l.constprop.0+0x7a>
 800a9f0:	0021      	movs	r1, r4
 800a9f2:	3961      	subs	r1, #97	; 0x61
 800a9f4:	2919      	cmp	r1, #25
 800a9f6:	d803      	bhi.n	800aa00 <_strtol_l.constprop.0+0xd0>
 800a9f8:	3c57      	subs	r4, #87	; 0x57
 800a9fa:	e7d6      	b.n	800a9aa <_strtol_l.constprop.0+0x7a>
 800a9fc:	0013      	movs	r3, r2
 800a9fe:	e7e2      	b.n	800a9c6 <_strtol_l.constprop.0+0x96>
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	da09      	bge.n	800aa18 <_strtol_l.constprop.0+0xe8>
 800aa04:	2322      	movs	r3, #34	; 0x22
 800aa06:	9a05      	ldr	r2, [sp, #20]
 800aa08:	9803      	ldr	r0, [sp, #12]
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	9b02      	ldr	r3, [sp, #8]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d0e1      	beq.n	800a9d6 <_strtol_l.constprop.0+0xa6>
 800aa12:	1e6b      	subs	r3, r5, #1
 800aa14:	9301      	str	r3, [sp, #4]
 800aa16:	e007      	b.n	800aa28 <_strtol_l.constprop.0+0xf8>
 800aa18:	2f00      	cmp	r7, #0
 800aa1a:	d000      	beq.n	800aa1e <_strtol_l.constprop.0+0xee>
 800aa1c:	4240      	negs	r0, r0
 800aa1e:	9a02      	ldr	r2, [sp, #8]
 800aa20:	2a00      	cmp	r2, #0
 800aa22:	d0d8      	beq.n	800a9d6 <_strtol_l.constprop.0+0xa6>
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1f4      	bne.n	800aa12 <_strtol_l.constprop.0+0xe2>
 800aa28:	9b02      	ldr	r3, [sp, #8]
 800aa2a:	9a01      	ldr	r2, [sp, #4]
 800aa2c:	601a      	str	r2, [r3, #0]
 800aa2e:	e7d2      	b.n	800a9d6 <_strtol_l.constprop.0+0xa6>
 800aa30:	2430      	movs	r4, #48	; 0x30
 800aa32:	2e00      	cmp	r6, #0
 800aa34:	d1a7      	bne.n	800a986 <_strtol_l.constprop.0+0x56>
 800aa36:	3608      	adds	r6, #8
 800aa38:	e7a5      	b.n	800a986 <_strtol_l.constprop.0+0x56>
 800aa3a:	2c30      	cmp	r4, #48	; 0x30
 800aa3c:	d09b      	beq.n	800a976 <_strtol_l.constprop.0+0x46>
 800aa3e:	260a      	movs	r6, #10
 800aa40:	e7a1      	b.n	800a986 <_strtol_l.constprop.0+0x56>
 800aa42:	46c0      	nop			; (mov r8, r8)
 800aa44:	0800d9e1 	.word	0x0800d9e1
 800aa48:	7fffffff 	.word	0x7fffffff

0800aa4c <_strtol_r>:
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	f7ff ff6f 	bl	800a930 <_strtol_l.constprop.0>
 800aa52:	bd10      	pop	{r4, pc}

0800aa54 <strtol>:
 800aa54:	b510      	push	{r4, lr}
 800aa56:	0013      	movs	r3, r2
 800aa58:	000a      	movs	r2, r1
 800aa5a:	0001      	movs	r1, r0
 800aa5c:	4802      	ldr	r0, [pc, #8]	; (800aa68 <strtol+0x14>)
 800aa5e:	6800      	ldr	r0, [r0, #0]
 800aa60:	f7ff ff66 	bl	800a930 <_strtol_l.constprop.0>
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	46c0      	nop			; (mov r8, r8)
 800aa68:	2000000c 	.word	0x2000000c

0800aa6c <quorem>:
 800aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa6e:	0006      	movs	r6, r0
 800aa70:	690b      	ldr	r3, [r1, #16]
 800aa72:	6932      	ldr	r2, [r6, #16]
 800aa74:	b087      	sub	sp, #28
 800aa76:	2000      	movs	r0, #0
 800aa78:	9103      	str	r1, [sp, #12]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	db65      	blt.n	800ab4a <quorem+0xde>
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	009c      	lsls	r4, r3, #2
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	000b      	movs	r3, r1
 800aa86:	3314      	adds	r3, #20
 800aa88:	9305      	str	r3, [sp, #20]
 800aa8a:	191b      	adds	r3, r3, r4
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	0033      	movs	r3, r6
 800aa90:	3314      	adds	r3, #20
 800aa92:	9302      	str	r3, [sp, #8]
 800aa94:	191c      	adds	r4, r3, r4
 800aa96:	9b04      	ldr	r3, [sp, #16]
 800aa98:	6827      	ldr	r7, [r4, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	0038      	movs	r0, r7
 800aa9e:	1c5d      	adds	r5, r3, #1
 800aaa0:	0029      	movs	r1, r5
 800aaa2:	9301      	str	r3, [sp, #4]
 800aaa4:	f7f5 fb4a 	bl	800013c <__udivsi3>
 800aaa8:	9001      	str	r0, [sp, #4]
 800aaaa:	42af      	cmp	r7, r5
 800aaac:	d324      	bcc.n	800aaf8 <quorem+0x8c>
 800aaae:	2500      	movs	r5, #0
 800aab0:	46ac      	mov	ip, r5
 800aab2:	9802      	ldr	r0, [sp, #8]
 800aab4:	9f05      	ldr	r7, [sp, #20]
 800aab6:	cf08      	ldmia	r7!, {r3}
 800aab8:	9a01      	ldr	r2, [sp, #4]
 800aaba:	b299      	uxth	r1, r3
 800aabc:	4351      	muls	r1, r2
 800aabe:	0c1b      	lsrs	r3, r3, #16
 800aac0:	4353      	muls	r3, r2
 800aac2:	1949      	adds	r1, r1, r5
 800aac4:	0c0a      	lsrs	r2, r1, #16
 800aac6:	189b      	adds	r3, r3, r2
 800aac8:	6802      	ldr	r2, [r0, #0]
 800aaca:	b289      	uxth	r1, r1
 800aacc:	b292      	uxth	r2, r2
 800aace:	4462      	add	r2, ip
 800aad0:	1a52      	subs	r2, r2, r1
 800aad2:	6801      	ldr	r1, [r0, #0]
 800aad4:	0c1d      	lsrs	r5, r3, #16
 800aad6:	0c09      	lsrs	r1, r1, #16
 800aad8:	b29b      	uxth	r3, r3
 800aada:	1acb      	subs	r3, r1, r3
 800aadc:	1411      	asrs	r1, r2, #16
 800aade:	185b      	adds	r3, r3, r1
 800aae0:	1419      	asrs	r1, r3, #16
 800aae2:	b292      	uxth	r2, r2
 800aae4:	041b      	lsls	r3, r3, #16
 800aae6:	431a      	orrs	r2, r3
 800aae8:	9b04      	ldr	r3, [sp, #16]
 800aaea:	468c      	mov	ip, r1
 800aaec:	c004      	stmia	r0!, {r2}
 800aaee:	42bb      	cmp	r3, r7
 800aaf0:	d2e1      	bcs.n	800aab6 <quorem+0x4a>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d030      	beq.n	800ab5a <quorem+0xee>
 800aaf8:	0030      	movs	r0, r6
 800aafa:	9903      	ldr	r1, [sp, #12]
 800aafc:	f001 fcd2 	bl	800c4a4 <__mcmp>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	db21      	blt.n	800ab48 <quorem+0xdc>
 800ab04:	0030      	movs	r0, r6
 800ab06:	2400      	movs	r4, #0
 800ab08:	9b01      	ldr	r3, [sp, #4]
 800ab0a:	9903      	ldr	r1, [sp, #12]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	9301      	str	r3, [sp, #4]
 800ab10:	3014      	adds	r0, #20
 800ab12:	3114      	adds	r1, #20
 800ab14:	6803      	ldr	r3, [r0, #0]
 800ab16:	c920      	ldmia	r1!, {r5}
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	1914      	adds	r4, r2, r4
 800ab1c:	b2aa      	uxth	r2, r5
 800ab1e:	1aa2      	subs	r2, r4, r2
 800ab20:	0c1b      	lsrs	r3, r3, #16
 800ab22:	0c2d      	lsrs	r5, r5, #16
 800ab24:	1414      	asrs	r4, r2, #16
 800ab26:	1b5b      	subs	r3, r3, r5
 800ab28:	191b      	adds	r3, r3, r4
 800ab2a:	141c      	asrs	r4, r3, #16
 800ab2c:	b292      	uxth	r2, r2
 800ab2e:	041b      	lsls	r3, r3, #16
 800ab30:	4313      	orrs	r3, r2
 800ab32:	c008      	stmia	r0!, {r3}
 800ab34:	9b04      	ldr	r3, [sp, #16]
 800ab36:	428b      	cmp	r3, r1
 800ab38:	d2ec      	bcs.n	800ab14 <quorem+0xa8>
 800ab3a:	9b00      	ldr	r3, [sp, #0]
 800ab3c:	9a02      	ldr	r2, [sp, #8]
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	18d3      	adds	r3, r2, r3
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	2a00      	cmp	r2, #0
 800ab46:	d015      	beq.n	800ab74 <quorem+0x108>
 800ab48:	9801      	ldr	r0, [sp, #4]
 800ab4a:	b007      	add	sp, #28
 800ab4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d106      	bne.n	800ab62 <quorem+0xf6>
 800ab54:	9b00      	ldr	r3, [sp, #0]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	9b02      	ldr	r3, [sp, #8]
 800ab5c:	3c04      	subs	r4, #4
 800ab5e:	42a3      	cmp	r3, r4
 800ab60:	d3f5      	bcc.n	800ab4e <quorem+0xe2>
 800ab62:	9b00      	ldr	r3, [sp, #0]
 800ab64:	6133      	str	r3, [r6, #16]
 800ab66:	e7c7      	b.n	800aaf8 <quorem+0x8c>
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	d106      	bne.n	800ab7c <quorem+0x110>
 800ab6e:	9a00      	ldr	r2, [sp, #0]
 800ab70:	3a01      	subs	r2, #1
 800ab72:	9200      	str	r2, [sp, #0]
 800ab74:	9a02      	ldr	r2, [sp, #8]
 800ab76:	3b04      	subs	r3, #4
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d3f5      	bcc.n	800ab68 <quorem+0xfc>
 800ab7c:	9b00      	ldr	r3, [sp, #0]
 800ab7e:	6133      	str	r3, [r6, #16]
 800ab80:	e7e2      	b.n	800ab48 <quorem+0xdc>
	...

0800ab84 <_dtoa_r>:
 800ab84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab86:	b09d      	sub	sp, #116	; 0x74
 800ab88:	9202      	str	r2, [sp, #8]
 800ab8a:	9303      	str	r3, [sp, #12]
 800ab8c:	9b02      	ldr	r3, [sp, #8]
 800ab8e:	9c03      	ldr	r4, [sp, #12]
 800ab90:	9308      	str	r3, [sp, #32]
 800ab92:	9409      	str	r4, [sp, #36]	; 0x24
 800ab94:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab96:	0007      	movs	r7, r0
 800ab98:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800ab9a:	2c00      	cmp	r4, #0
 800ab9c:	d10e      	bne.n	800abbc <_dtoa_r+0x38>
 800ab9e:	2010      	movs	r0, #16
 800aba0:	f7fe f8e8 	bl	8008d74 <malloc>
 800aba4:	1e02      	subs	r2, r0, #0
 800aba6:	6278      	str	r0, [r7, #36]	; 0x24
 800aba8:	d104      	bne.n	800abb4 <_dtoa_r+0x30>
 800abaa:	21ea      	movs	r1, #234	; 0xea
 800abac:	4bc7      	ldr	r3, [pc, #796]	; (800aecc <_dtoa_r+0x348>)
 800abae:	48c8      	ldr	r0, [pc, #800]	; (800aed0 <_dtoa_r+0x34c>)
 800abb0:	f002 f826 	bl	800cc00 <__assert_func>
 800abb4:	6044      	str	r4, [r0, #4]
 800abb6:	6084      	str	r4, [r0, #8]
 800abb8:	6004      	str	r4, [r0, #0]
 800abba:	60c4      	str	r4, [r0, #12]
 800abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbe:	6819      	ldr	r1, [r3, #0]
 800abc0:	2900      	cmp	r1, #0
 800abc2:	d00a      	beq.n	800abda <_dtoa_r+0x56>
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	2301      	movs	r3, #1
 800abc8:	4093      	lsls	r3, r2
 800abca:	604a      	str	r2, [r1, #4]
 800abcc:	608b      	str	r3, [r1, #8]
 800abce:	0038      	movs	r0, r7
 800abd0:	f001 f9dc 	bl	800bf8c <_Bfree>
 800abd4:	2200      	movs	r2, #0
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	9b03      	ldr	r3, [sp, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	da20      	bge.n	800ac22 <_dtoa_r+0x9e>
 800abe0:	2301      	movs	r3, #1
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	9b03      	ldr	r3, [sp, #12]
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	085b      	lsrs	r3, r3, #1
 800abea:	9309      	str	r3, [sp, #36]	; 0x24
 800abec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800abee:	4bb9      	ldr	r3, [pc, #740]	; (800aed4 <_dtoa_r+0x350>)
 800abf0:	4ab8      	ldr	r2, [pc, #736]	; (800aed4 <_dtoa_r+0x350>)
 800abf2:	402b      	ands	r3, r5
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d117      	bne.n	800ac28 <_dtoa_r+0xa4>
 800abf8:	4bb7      	ldr	r3, [pc, #732]	; (800aed8 <_dtoa_r+0x354>)
 800abfa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abfc:	0328      	lsls	r0, r5, #12
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	9b02      	ldr	r3, [sp, #8]
 800ac02:	0b00      	lsrs	r0, r0, #12
 800ac04:	4318      	orrs	r0, r3
 800ac06:	d101      	bne.n	800ac0c <_dtoa_r+0x88>
 800ac08:	f000 fdbf 	bl	800b78a <_dtoa_r+0xc06>
 800ac0c:	48b3      	ldr	r0, [pc, #716]	; (800aedc <_dtoa_r+0x358>)
 800ac0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac10:	9006      	str	r0, [sp, #24]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <_dtoa_r+0x98>
 800ac16:	4bb2      	ldr	r3, [pc, #712]	; (800aee0 <_dtoa_r+0x35c>)
 800ac18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	9806      	ldr	r0, [sp, #24]
 800ac1e:	b01d      	add	sp, #116	; 0x74
 800ac20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac22:	2300      	movs	r3, #0
 800ac24:	602b      	str	r3, [r5, #0]
 800ac26:	e7e1      	b.n	800abec <_dtoa_r+0x68>
 800ac28:	9b08      	ldr	r3, [sp, #32]
 800ac2a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ac2c:	9312      	str	r3, [sp, #72]	; 0x48
 800ac2e:	9413      	str	r4, [sp, #76]	; 0x4c
 800ac30:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ac32:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ac34:	2200      	movs	r2, #0
 800ac36:	2300      	movs	r3, #0
 800ac38:	f7f5 fc06 	bl	8000448 <__aeabi_dcmpeq>
 800ac3c:	1e04      	subs	r4, r0, #0
 800ac3e:	d009      	beq.n	800ac54 <_dtoa_r+0xd0>
 800ac40:	2301      	movs	r3, #1
 800ac42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac44:	6013      	str	r3, [r2, #0]
 800ac46:	4ba7      	ldr	r3, [pc, #668]	; (800aee4 <_dtoa_r+0x360>)
 800ac48:	9306      	str	r3, [sp, #24]
 800ac4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0e5      	beq.n	800ac1c <_dtoa_r+0x98>
 800ac50:	4ba5      	ldr	r3, [pc, #660]	; (800aee8 <_dtoa_r+0x364>)
 800ac52:	e7e1      	b.n	800ac18 <_dtoa_r+0x94>
 800ac54:	ab1a      	add	r3, sp, #104	; 0x68
 800ac56:	9301      	str	r3, [sp, #4]
 800ac58:	ab1b      	add	r3, sp, #108	; 0x6c
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	0038      	movs	r0, r7
 800ac5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac62:	f001 fd47 	bl	800c6f4 <__d2b>
 800ac66:	006e      	lsls	r6, r5, #1
 800ac68:	9005      	str	r0, [sp, #20]
 800ac6a:	0d76      	lsrs	r6, r6, #21
 800ac6c:	d100      	bne.n	800ac70 <_dtoa_r+0xec>
 800ac6e:	e07c      	b.n	800ad6a <_dtoa_r+0x1e6>
 800ac70:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ac72:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ac74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac76:	4a9d      	ldr	r2, [pc, #628]	; (800aeec <_dtoa_r+0x368>)
 800ac78:	031b      	lsls	r3, r3, #12
 800ac7a:	0b1b      	lsrs	r3, r3, #12
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	0011      	movs	r1, r2
 800ac80:	4b9b      	ldr	r3, [pc, #620]	; (800aef0 <_dtoa_r+0x36c>)
 800ac82:	9418      	str	r4, [sp, #96]	; 0x60
 800ac84:	18f6      	adds	r6, r6, r3
 800ac86:	2200      	movs	r2, #0
 800ac88:	4b9a      	ldr	r3, [pc, #616]	; (800aef4 <_dtoa_r+0x370>)
 800ac8a:	f7f7 fe35 	bl	80028f8 <__aeabi_dsub>
 800ac8e:	4a9a      	ldr	r2, [pc, #616]	; (800aef8 <_dtoa_r+0x374>)
 800ac90:	4b9a      	ldr	r3, [pc, #616]	; (800aefc <_dtoa_r+0x378>)
 800ac92:	f7f7 fbc5 	bl	8002420 <__aeabi_dmul>
 800ac96:	4a9a      	ldr	r2, [pc, #616]	; (800af00 <_dtoa_r+0x37c>)
 800ac98:	4b9a      	ldr	r3, [pc, #616]	; (800af04 <_dtoa_r+0x380>)
 800ac9a:	f7f6 fc83 	bl	80015a4 <__aeabi_dadd>
 800ac9e:	0004      	movs	r4, r0
 800aca0:	0030      	movs	r0, r6
 800aca2:	000d      	movs	r5, r1
 800aca4:	f7f8 fa0e 	bl	80030c4 <__aeabi_i2d>
 800aca8:	4a97      	ldr	r2, [pc, #604]	; (800af08 <_dtoa_r+0x384>)
 800acaa:	4b98      	ldr	r3, [pc, #608]	; (800af0c <_dtoa_r+0x388>)
 800acac:	f7f7 fbb8 	bl	8002420 <__aeabi_dmul>
 800acb0:	0002      	movs	r2, r0
 800acb2:	000b      	movs	r3, r1
 800acb4:	0020      	movs	r0, r4
 800acb6:	0029      	movs	r1, r5
 800acb8:	f7f6 fc74 	bl	80015a4 <__aeabi_dadd>
 800acbc:	0004      	movs	r4, r0
 800acbe:	000d      	movs	r5, r1
 800acc0:	f7f8 f9ca 	bl	8003058 <__aeabi_d2iz>
 800acc4:	2200      	movs	r2, #0
 800acc6:	9002      	str	r0, [sp, #8]
 800acc8:	2300      	movs	r3, #0
 800acca:	0020      	movs	r0, r4
 800accc:	0029      	movs	r1, r5
 800acce:	f7f5 fbc1 	bl	8000454 <__aeabi_dcmplt>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d00b      	beq.n	800acee <_dtoa_r+0x16a>
 800acd6:	9802      	ldr	r0, [sp, #8]
 800acd8:	f7f8 f9f4 	bl	80030c4 <__aeabi_i2d>
 800acdc:	002b      	movs	r3, r5
 800acde:	0022      	movs	r2, r4
 800ace0:	f7f5 fbb2 	bl	8000448 <__aeabi_dcmpeq>
 800ace4:	4243      	negs	r3, r0
 800ace6:	4158      	adcs	r0, r3
 800ace8:	9b02      	ldr	r3, [sp, #8]
 800acea:	1a1b      	subs	r3, r3, r0
 800acec:	9302      	str	r3, [sp, #8]
 800acee:	2301      	movs	r3, #1
 800acf0:	9316      	str	r3, [sp, #88]	; 0x58
 800acf2:	9b02      	ldr	r3, [sp, #8]
 800acf4:	2b16      	cmp	r3, #22
 800acf6:	d80f      	bhi.n	800ad18 <_dtoa_r+0x194>
 800acf8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800acfa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800acfc:	00da      	lsls	r2, r3, #3
 800acfe:	4b84      	ldr	r3, [pc, #528]	; (800af10 <_dtoa_r+0x38c>)
 800ad00:	189b      	adds	r3, r3, r2
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	f7f5 fba5 	bl	8000454 <__aeabi_dcmplt>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d049      	beq.n	800ada2 <_dtoa_r+0x21e>
 800ad0e:	9b02      	ldr	r3, [sp, #8]
 800ad10:	3b01      	subs	r3, #1
 800ad12:	9302      	str	r3, [sp, #8]
 800ad14:	2300      	movs	r3, #0
 800ad16:	9316      	str	r3, [sp, #88]	; 0x58
 800ad18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ad1a:	1b9e      	subs	r6, r3, r6
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad20:	0033      	movs	r3, r6
 800ad22:	3b01      	subs	r3, #1
 800ad24:	930d      	str	r3, [sp, #52]	; 0x34
 800ad26:	d504      	bpl.n	800ad32 <_dtoa_r+0x1ae>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	1b9b      	subs	r3, r3, r6
 800ad2c:	930a      	str	r3, [sp, #40]	; 0x28
 800ad2e:	2300      	movs	r3, #0
 800ad30:	930d      	str	r3, [sp, #52]	; 0x34
 800ad32:	9b02      	ldr	r3, [sp, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	db36      	blt.n	800ada6 <_dtoa_r+0x222>
 800ad38:	9a02      	ldr	r2, [sp, #8]
 800ad3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad3c:	4694      	mov	ip, r2
 800ad3e:	4463      	add	r3, ip
 800ad40:	930d      	str	r3, [sp, #52]	; 0x34
 800ad42:	2300      	movs	r3, #0
 800ad44:	9215      	str	r2, [sp, #84]	; 0x54
 800ad46:	930e      	str	r3, [sp, #56]	; 0x38
 800ad48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad4a:	2401      	movs	r4, #1
 800ad4c:	2b09      	cmp	r3, #9
 800ad4e:	d864      	bhi.n	800ae1a <_dtoa_r+0x296>
 800ad50:	2b05      	cmp	r3, #5
 800ad52:	dd02      	ble.n	800ad5a <_dtoa_r+0x1d6>
 800ad54:	2400      	movs	r4, #0
 800ad56:	3b04      	subs	r3, #4
 800ad58:	9322      	str	r3, [sp, #136]	; 0x88
 800ad5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad5c:	1e98      	subs	r0, r3, #2
 800ad5e:	2803      	cmp	r0, #3
 800ad60:	d864      	bhi.n	800ae2c <_dtoa_r+0x2a8>
 800ad62:	f7f5 f9d7 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ad66:	3829      	.short	0x3829
 800ad68:	5836      	.short	0x5836
 800ad6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ad6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ad6e:	189e      	adds	r6, r3, r2
 800ad70:	4b68      	ldr	r3, [pc, #416]	; (800af14 <_dtoa_r+0x390>)
 800ad72:	18f2      	adds	r2, r6, r3
 800ad74:	2a20      	cmp	r2, #32
 800ad76:	dd0f      	ble.n	800ad98 <_dtoa_r+0x214>
 800ad78:	2340      	movs	r3, #64	; 0x40
 800ad7a:	1a9b      	subs	r3, r3, r2
 800ad7c:	409d      	lsls	r5, r3
 800ad7e:	4b66      	ldr	r3, [pc, #408]	; (800af18 <_dtoa_r+0x394>)
 800ad80:	9802      	ldr	r0, [sp, #8]
 800ad82:	18f3      	adds	r3, r6, r3
 800ad84:	40d8      	lsrs	r0, r3
 800ad86:	4328      	orrs	r0, r5
 800ad88:	f7f8 f9cc 	bl	8003124 <__aeabi_ui2d>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	4c63      	ldr	r4, [pc, #396]	; (800af1c <_dtoa_r+0x398>)
 800ad90:	3e01      	subs	r6, #1
 800ad92:	1909      	adds	r1, r1, r4
 800ad94:	9318      	str	r3, [sp, #96]	; 0x60
 800ad96:	e776      	b.n	800ac86 <_dtoa_r+0x102>
 800ad98:	2320      	movs	r3, #32
 800ad9a:	9802      	ldr	r0, [sp, #8]
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	4098      	lsls	r0, r3
 800ada0:	e7f2      	b.n	800ad88 <_dtoa_r+0x204>
 800ada2:	9016      	str	r0, [sp, #88]	; 0x58
 800ada4:	e7b8      	b.n	800ad18 <_dtoa_r+0x194>
 800ada6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada8:	9a02      	ldr	r2, [sp, #8]
 800adaa:	1a9b      	subs	r3, r3, r2
 800adac:	930a      	str	r3, [sp, #40]	; 0x28
 800adae:	4253      	negs	r3, r2
 800adb0:	930e      	str	r3, [sp, #56]	; 0x38
 800adb2:	2300      	movs	r3, #0
 800adb4:	9315      	str	r3, [sp, #84]	; 0x54
 800adb6:	e7c7      	b.n	800ad48 <_dtoa_r+0x1c4>
 800adb8:	2300      	movs	r3, #0
 800adba:	930f      	str	r3, [sp, #60]	; 0x3c
 800adbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800adbe:	930c      	str	r3, [sp, #48]	; 0x30
 800adc0:	9307      	str	r3, [sp, #28]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dc13      	bgt.n	800adee <_dtoa_r+0x26a>
 800adc6:	2301      	movs	r3, #1
 800adc8:	001a      	movs	r2, r3
 800adca:	930c      	str	r3, [sp, #48]	; 0x30
 800adcc:	9307      	str	r3, [sp, #28]
 800adce:	9223      	str	r2, [sp, #140]	; 0x8c
 800add0:	e00d      	b.n	800adee <_dtoa_r+0x26a>
 800add2:	2301      	movs	r3, #1
 800add4:	e7f1      	b.n	800adba <_dtoa_r+0x236>
 800add6:	2300      	movs	r3, #0
 800add8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800adda:	930f      	str	r3, [sp, #60]	; 0x3c
 800addc:	4694      	mov	ip, r2
 800adde:	9b02      	ldr	r3, [sp, #8]
 800ade0:	4463      	add	r3, ip
 800ade2:	930c      	str	r3, [sp, #48]	; 0x30
 800ade4:	3301      	adds	r3, #1
 800ade6:	9307      	str	r3, [sp, #28]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	dc00      	bgt.n	800adee <_dtoa_r+0x26a>
 800adec:	2301      	movs	r3, #1
 800adee:	2200      	movs	r2, #0
 800adf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adf2:	6042      	str	r2, [r0, #4]
 800adf4:	3204      	adds	r2, #4
 800adf6:	0015      	movs	r5, r2
 800adf8:	3514      	adds	r5, #20
 800adfa:	6841      	ldr	r1, [r0, #4]
 800adfc:	429d      	cmp	r5, r3
 800adfe:	d919      	bls.n	800ae34 <_dtoa_r+0x2b0>
 800ae00:	0038      	movs	r0, r7
 800ae02:	f001 f87f 	bl	800bf04 <_Balloc>
 800ae06:	9006      	str	r0, [sp, #24]
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d117      	bne.n	800ae3c <_dtoa_r+0x2b8>
 800ae0c:	21d5      	movs	r1, #213	; 0xd5
 800ae0e:	0002      	movs	r2, r0
 800ae10:	4b43      	ldr	r3, [pc, #268]	; (800af20 <_dtoa_r+0x39c>)
 800ae12:	0049      	lsls	r1, r1, #1
 800ae14:	e6cb      	b.n	800abae <_dtoa_r+0x2a>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e7de      	b.n	800add8 <_dtoa_r+0x254>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	940f      	str	r4, [sp, #60]	; 0x3c
 800ae1e:	9322      	str	r3, [sp, #136]	; 0x88
 800ae20:	3b01      	subs	r3, #1
 800ae22:	930c      	str	r3, [sp, #48]	; 0x30
 800ae24:	9307      	str	r3, [sp, #28]
 800ae26:	2200      	movs	r2, #0
 800ae28:	3313      	adds	r3, #19
 800ae2a:	e7d0      	b.n	800adce <_dtoa_r+0x24a>
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae30:	3b02      	subs	r3, #2
 800ae32:	e7f6      	b.n	800ae22 <_dtoa_r+0x29e>
 800ae34:	3101      	adds	r1, #1
 800ae36:	6041      	str	r1, [r0, #4]
 800ae38:	0052      	lsls	r2, r2, #1
 800ae3a:	e7dc      	b.n	800adf6 <_dtoa_r+0x272>
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	9a06      	ldr	r2, [sp, #24]
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	9b07      	ldr	r3, [sp, #28]
 800ae44:	2b0e      	cmp	r3, #14
 800ae46:	d900      	bls.n	800ae4a <_dtoa_r+0x2c6>
 800ae48:	e0eb      	b.n	800b022 <_dtoa_r+0x49e>
 800ae4a:	2c00      	cmp	r4, #0
 800ae4c:	d100      	bne.n	800ae50 <_dtoa_r+0x2cc>
 800ae4e:	e0e8      	b.n	800b022 <_dtoa_r+0x49e>
 800ae50:	9b02      	ldr	r3, [sp, #8]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	dd68      	ble.n	800af28 <_dtoa_r+0x3a4>
 800ae56:	001a      	movs	r2, r3
 800ae58:	210f      	movs	r1, #15
 800ae5a:	4b2d      	ldr	r3, [pc, #180]	; (800af10 <_dtoa_r+0x38c>)
 800ae5c:	400a      	ands	r2, r1
 800ae5e:	00d2      	lsls	r2, r2, #3
 800ae60:	189b      	adds	r3, r3, r2
 800ae62:	681d      	ldr	r5, [r3, #0]
 800ae64:	685e      	ldr	r6, [r3, #4]
 800ae66:	9b02      	ldr	r3, [sp, #8]
 800ae68:	111c      	asrs	r4, r3, #4
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	9310      	str	r3, [sp, #64]	; 0x40
 800ae6e:	9b02      	ldr	r3, [sp, #8]
 800ae70:	05db      	lsls	r3, r3, #23
 800ae72:	d50b      	bpl.n	800ae8c <_dtoa_r+0x308>
 800ae74:	4b2b      	ldr	r3, [pc, #172]	; (800af24 <_dtoa_r+0x3a0>)
 800ae76:	400c      	ands	r4, r1
 800ae78:	6a1a      	ldr	r2, [r3, #32]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ae7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ae80:	f7f6 fecc 	bl	8001c1c <__aeabi_ddiv>
 800ae84:	2303      	movs	r3, #3
 800ae86:	9008      	str	r0, [sp, #32]
 800ae88:	9109      	str	r1, [sp, #36]	; 0x24
 800ae8a:	9310      	str	r3, [sp, #64]	; 0x40
 800ae8c:	4b25      	ldr	r3, [pc, #148]	; (800af24 <_dtoa_r+0x3a0>)
 800ae8e:	9314      	str	r3, [sp, #80]	; 0x50
 800ae90:	2c00      	cmp	r4, #0
 800ae92:	d108      	bne.n	800aea6 <_dtoa_r+0x322>
 800ae94:	9808      	ldr	r0, [sp, #32]
 800ae96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae98:	002a      	movs	r2, r5
 800ae9a:	0033      	movs	r3, r6
 800ae9c:	f7f6 febe 	bl	8001c1c <__aeabi_ddiv>
 800aea0:	9008      	str	r0, [sp, #32]
 800aea2:	9109      	str	r1, [sp, #36]	; 0x24
 800aea4:	e05c      	b.n	800af60 <_dtoa_r+0x3dc>
 800aea6:	2301      	movs	r3, #1
 800aea8:	421c      	tst	r4, r3
 800aeaa:	d00b      	beq.n	800aec4 <_dtoa_r+0x340>
 800aeac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aeae:	0028      	movs	r0, r5
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	9310      	str	r3, [sp, #64]	; 0x40
 800aeb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aeb6:	0031      	movs	r1, r6
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	f7f7 fab0 	bl	8002420 <__aeabi_dmul>
 800aec0:	0005      	movs	r5, r0
 800aec2:	000e      	movs	r6, r1
 800aec4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aec6:	1064      	asrs	r4, r4, #1
 800aec8:	3308      	adds	r3, #8
 800aeca:	e7e0      	b.n	800ae8e <_dtoa_r+0x30a>
 800aecc:	0800db85 	.word	0x0800db85
 800aed0:	0800db9c 	.word	0x0800db9c
 800aed4:	7ff00000 	.word	0x7ff00000
 800aed8:	0000270f 	.word	0x0000270f
 800aedc:	0800db81 	.word	0x0800db81
 800aee0:	0800db84 	.word	0x0800db84
 800aee4:	0800daf8 	.word	0x0800daf8
 800aee8:	0800daf9 	.word	0x0800daf9
 800aeec:	3ff00000 	.word	0x3ff00000
 800aef0:	fffffc01 	.word	0xfffffc01
 800aef4:	3ff80000 	.word	0x3ff80000
 800aef8:	636f4361 	.word	0x636f4361
 800aefc:	3fd287a7 	.word	0x3fd287a7
 800af00:	8b60c8b3 	.word	0x8b60c8b3
 800af04:	3fc68a28 	.word	0x3fc68a28
 800af08:	509f79fb 	.word	0x509f79fb
 800af0c:	3fd34413 	.word	0x3fd34413
 800af10:	0800dd08 	.word	0x0800dd08
 800af14:	00000432 	.word	0x00000432
 800af18:	00000412 	.word	0x00000412
 800af1c:	fe100000 	.word	0xfe100000
 800af20:	0800dbf7 	.word	0x0800dbf7
 800af24:	0800dce0 	.word	0x0800dce0
 800af28:	2302      	movs	r3, #2
 800af2a:	9310      	str	r3, [sp, #64]	; 0x40
 800af2c:	9b02      	ldr	r3, [sp, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d016      	beq.n	800af60 <_dtoa_r+0x3dc>
 800af32:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af34:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800af36:	425c      	negs	r4, r3
 800af38:	230f      	movs	r3, #15
 800af3a:	4ab6      	ldr	r2, [pc, #728]	; (800b214 <_dtoa_r+0x690>)
 800af3c:	4023      	ands	r3, r4
 800af3e:	00db      	lsls	r3, r3, #3
 800af40:	18d3      	adds	r3, r2, r3
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f7f7 fa6b 	bl	8002420 <__aeabi_dmul>
 800af4a:	2601      	movs	r6, #1
 800af4c:	2300      	movs	r3, #0
 800af4e:	9008      	str	r0, [sp, #32]
 800af50:	9109      	str	r1, [sp, #36]	; 0x24
 800af52:	4db1      	ldr	r5, [pc, #708]	; (800b218 <_dtoa_r+0x694>)
 800af54:	1124      	asrs	r4, r4, #4
 800af56:	2c00      	cmp	r4, #0
 800af58:	d000      	beq.n	800af5c <_dtoa_r+0x3d8>
 800af5a:	e094      	b.n	800b086 <_dtoa_r+0x502>
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d19f      	bne.n	800aea0 <_dtoa_r+0x31c>
 800af60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af62:	2b00      	cmp	r3, #0
 800af64:	d100      	bne.n	800af68 <_dtoa_r+0x3e4>
 800af66:	e09b      	b.n	800b0a0 <_dtoa_r+0x51c>
 800af68:	9c08      	ldr	r4, [sp, #32]
 800af6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800af6c:	2200      	movs	r2, #0
 800af6e:	0020      	movs	r0, r4
 800af70:	0029      	movs	r1, r5
 800af72:	4baa      	ldr	r3, [pc, #680]	; (800b21c <_dtoa_r+0x698>)
 800af74:	f7f5 fa6e 	bl	8000454 <__aeabi_dcmplt>
 800af78:	2800      	cmp	r0, #0
 800af7a:	d100      	bne.n	800af7e <_dtoa_r+0x3fa>
 800af7c:	e090      	b.n	800b0a0 <_dtoa_r+0x51c>
 800af7e:	9b07      	ldr	r3, [sp, #28]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d100      	bne.n	800af86 <_dtoa_r+0x402>
 800af84:	e08c      	b.n	800b0a0 <_dtoa_r+0x51c>
 800af86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af88:	2b00      	cmp	r3, #0
 800af8a:	dd46      	ble.n	800b01a <_dtoa_r+0x496>
 800af8c:	9b02      	ldr	r3, [sp, #8]
 800af8e:	2200      	movs	r2, #0
 800af90:	0020      	movs	r0, r4
 800af92:	0029      	movs	r1, r5
 800af94:	1e5e      	subs	r6, r3, #1
 800af96:	4ba2      	ldr	r3, [pc, #648]	; (800b220 <_dtoa_r+0x69c>)
 800af98:	f7f7 fa42 	bl	8002420 <__aeabi_dmul>
 800af9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af9e:	9008      	str	r0, [sp, #32]
 800afa0:	9109      	str	r1, [sp, #36]	; 0x24
 800afa2:	3301      	adds	r3, #1
 800afa4:	9310      	str	r3, [sp, #64]	; 0x40
 800afa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afa8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800afaa:	9c08      	ldr	r4, [sp, #32]
 800afac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800afae:	9314      	str	r3, [sp, #80]	; 0x50
 800afb0:	f7f8 f888 	bl	80030c4 <__aeabi_i2d>
 800afb4:	0022      	movs	r2, r4
 800afb6:	002b      	movs	r3, r5
 800afb8:	f7f7 fa32 	bl	8002420 <__aeabi_dmul>
 800afbc:	2200      	movs	r2, #0
 800afbe:	4b99      	ldr	r3, [pc, #612]	; (800b224 <_dtoa_r+0x6a0>)
 800afc0:	f7f6 faf0 	bl	80015a4 <__aeabi_dadd>
 800afc4:	9010      	str	r0, [sp, #64]	; 0x40
 800afc6:	9111      	str	r1, [sp, #68]	; 0x44
 800afc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afcc:	9208      	str	r2, [sp, #32]
 800afce:	9309      	str	r3, [sp, #36]	; 0x24
 800afd0:	4a95      	ldr	r2, [pc, #596]	; (800b228 <_dtoa_r+0x6a4>)
 800afd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afd4:	4694      	mov	ip, r2
 800afd6:	4463      	add	r3, ip
 800afd8:	9317      	str	r3, [sp, #92]	; 0x5c
 800afda:	9309      	str	r3, [sp, #36]	; 0x24
 800afdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d161      	bne.n	800b0a6 <_dtoa_r+0x522>
 800afe2:	2200      	movs	r2, #0
 800afe4:	0020      	movs	r0, r4
 800afe6:	0029      	movs	r1, r5
 800afe8:	4b90      	ldr	r3, [pc, #576]	; (800b22c <_dtoa_r+0x6a8>)
 800afea:	f7f7 fc85 	bl	80028f8 <__aeabi_dsub>
 800afee:	9a08      	ldr	r2, [sp, #32]
 800aff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aff2:	0004      	movs	r4, r0
 800aff4:	000d      	movs	r5, r1
 800aff6:	f7f5 fa41 	bl	800047c <__aeabi_dcmpgt>
 800affa:	2800      	cmp	r0, #0
 800affc:	d000      	beq.n	800b000 <_dtoa_r+0x47c>
 800affe:	e2af      	b.n	800b560 <_dtoa_r+0x9dc>
 800b000:	488b      	ldr	r0, [pc, #556]	; (800b230 <_dtoa_r+0x6ac>)
 800b002:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b004:	4684      	mov	ip, r0
 800b006:	4461      	add	r1, ip
 800b008:	000b      	movs	r3, r1
 800b00a:	0020      	movs	r0, r4
 800b00c:	0029      	movs	r1, r5
 800b00e:	9a08      	ldr	r2, [sp, #32]
 800b010:	f7f5 fa20 	bl	8000454 <__aeabi_dcmplt>
 800b014:	2800      	cmp	r0, #0
 800b016:	d000      	beq.n	800b01a <_dtoa_r+0x496>
 800b018:	e29f      	b.n	800b55a <_dtoa_r+0x9d6>
 800b01a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b01c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b01e:	9308      	str	r3, [sp, #32]
 800b020:	9409      	str	r4, [sp, #36]	; 0x24
 800b022:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b024:	2b00      	cmp	r3, #0
 800b026:	da00      	bge.n	800b02a <_dtoa_r+0x4a6>
 800b028:	e172      	b.n	800b310 <_dtoa_r+0x78c>
 800b02a:	9a02      	ldr	r2, [sp, #8]
 800b02c:	2a0e      	cmp	r2, #14
 800b02e:	dd00      	ble.n	800b032 <_dtoa_r+0x4ae>
 800b030:	e16e      	b.n	800b310 <_dtoa_r+0x78c>
 800b032:	4b78      	ldr	r3, [pc, #480]	; (800b214 <_dtoa_r+0x690>)
 800b034:	00d2      	lsls	r2, r2, #3
 800b036:	189b      	adds	r3, r3, r2
 800b038:	685c      	ldr	r4, [r3, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	930a      	str	r3, [sp, #40]	; 0x28
 800b03e:	940b      	str	r4, [sp, #44]	; 0x2c
 800b040:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b042:	2b00      	cmp	r3, #0
 800b044:	db00      	blt.n	800b048 <_dtoa_r+0x4c4>
 800b046:	e0f7      	b.n	800b238 <_dtoa_r+0x6b4>
 800b048:	9b07      	ldr	r3, [sp, #28]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	dd00      	ble.n	800b050 <_dtoa_r+0x4cc>
 800b04e:	e0f3      	b.n	800b238 <_dtoa_r+0x6b4>
 800b050:	d000      	beq.n	800b054 <_dtoa_r+0x4d0>
 800b052:	e282      	b.n	800b55a <_dtoa_r+0x9d6>
 800b054:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b056:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b058:	2200      	movs	r2, #0
 800b05a:	4b74      	ldr	r3, [pc, #464]	; (800b22c <_dtoa_r+0x6a8>)
 800b05c:	f7f7 f9e0 	bl	8002420 <__aeabi_dmul>
 800b060:	9a08      	ldr	r2, [sp, #32]
 800b062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b064:	f7f5 fa14 	bl	8000490 <__aeabi_dcmpge>
 800b068:	9e07      	ldr	r6, [sp, #28]
 800b06a:	0035      	movs	r5, r6
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d000      	beq.n	800b072 <_dtoa_r+0x4ee>
 800b070:	e259      	b.n	800b526 <_dtoa_r+0x9a2>
 800b072:	9b06      	ldr	r3, [sp, #24]
 800b074:	9a06      	ldr	r2, [sp, #24]
 800b076:	3301      	adds	r3, #1
 800b078:	9308      	str	r3, [sp, #32]
 800b07a:	2331      	movs	r3, #49	; 0x31
 800b07c:	7013      	strb	r3, [r2, #0]
 800b07e:	9b02      	ldr	r3, [sp, #8]
 800b080:	3301      	adds	r3, #1
 800b082:	9302      	str	r3, [sp, #8]
 800b084:	e254      	b.n	800b530 <_dtoa_r+0x9ac>
 800b086:	4234      	tst	r4, r6
 800b088:	d007      	beq.n	800b09a <_dtoa_r+0x516>
 800b08a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b08c:	3301      	adds	r3, #1
 800b08e:	9310      	str	r3, [sp, #64]	; 0x40
 800b090:	682a      	ldr	r2, [r5, #0]
 800b092:	686b      	ldr	r3, [r5, #4]
 800b094:	f7f7 f9c4 	bl	8002420 <__aeabi_dmul>
 800b098:	0033      	movs	r3, r6
 800b09a:	1064      	asrs	r4, r4, #1
 800b09c:	3508      	adds	r5, #8
 800b09e:	e75a      	b.n	800af56 <_dtoa_r+0x3d2>
 800b0a0:	9e02      	ldr	r6, [sp, #8]
 800b0a2:	9b07      	ldr	r3, [sp, #28]
 800b0a4:	e780      	b.n	800afa8 <_dtoa_r+0x424>
 800b0a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b0aa:	1e5a      	subs	r2, r3, #1
 800b0ac:	4b59      	ldr	r3, [pc, #356]	; (800b214 <_dtoa_r+0x690>)
 800b0ae:	00d2      	lsls	r2, r2, #3
 800b0b0:	189b      	adds	r3, r3, r2
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	2900      	cmp	r1, #0
 800b0b8:	d051      	beq.n	800b15e <_dtoa_r+0x5da>
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	495d      	ldr	r1, [pc, #372]	; (800b234 <_dtoa_r+0x6b0>)
 800b0be:	f7f6 fdad 	bl	8001c1c <__aeabi_ddiv>
 800b0c2:	9a08      	ldr	r2, [sp, #32]
 800b0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c6:	f7f7 fc17 	bl	80028f8 <__aeabi_dsub>
 800b0ca:	9a06      	ldr	r2, [sp, #24]
 800b0cc:	9b06      	ldr	r3, [sp, #24]
 800b0ce:	4694      	mov	ip, r2
 800b0d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0d4:	9010      	str	r0, [sp, #64]	; 0x40
 800b0d6:	9111      	str	r1, [sp, #68]	; 0x44
 800b0d8:	4463      	add	r3, ip
 800b0da:	9319      	str	r3, [sp, #100]	; 0x64
 800b0dc:	0029      	movs	r1, r5
 800b0de:	0020      	movs	r0, r4
 800b0e0:	f7f7 ffba 	bl	8003058 <__aeabi_d2iz>
 800b0e4:	9014      	str	r0, [sp, #80]	; 0x50
 800b0e6:	f7f7 ffed 	bl	80030c4 <__aeabi_i2d>
 800b0ea:	0002      	movs	r2, r0
 800b0ec:	000b      	movs	r3, r1
 800b0ee:	0020      	movs	r0, r4
 800b0f0:	0029      	movs	r1, r5
 800b0f2:	f7f7 fc01 	bl	80028f8 <__aeabi_dsub>
 800b0f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	9308      	str	r3, [sp, #32]
 800b0fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b100:	0004      	movs	r4, r0
 800b102:	3330      	adds	r3, #48	; 0x30
 800b104:	7013      	strb	r3, [r2, #0]
 800b106:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b108:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b10a:	000d      	movs	r5, r1
 800b10c:	f7f5 f9a2 	bl	8000454 <__aeabi_dcmplt>
 800b110:	2800      	cmp	r0, #0
 800b112:	d175      	bne.n	800b200 <_dtoa_r+0x67c>
 800b114:	0022      	movs	r2, r4
 800b116:	002b      	movs	r3, r5
 800b118:	2000      	movs	r0, #0
 800b11a:	4940      	ldr	r1, [pc, #256]	; (800b21c <_dtoa_r+0x698>)
 800b11c:	f7f7 fbec 	bl	80028f8 <__aeabi_dsub>
 800b120:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b124:	f7f5 f996 	bl	8000454 <__aeabi_dcmplt>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d000      	beq.n	800b12e <_dtoa_r+0x5aa>
 800b12c:	e0d2      	b.n	800b2d4 <_dtoa_r+0x750>
 800b12e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b130:	9a08      	ldr	r2, [sp, #32]
 800b132:	4293      	cmp	r3, r2
 800b134:	d100      	bne.n	800b138 <_dtoa_r+0x5b4>
 800b136:	e770      	b.n	800b01a <_dtoa_r+0x496>
 800b138:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b13a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b13c:	2200      	movs	r2, #0
 800b13e:	4b38      	ldr	r3, [pc, #224]	; (800b220 <_dtoa_r+0x69c>)
 800b140:	f7f7 f96e 	bl	8002420 <__aeabi_dmul>
 800b144:	4b36      	ldr	r3, [pc, #216]	; (800b220 <_dtoa_r+0x69c>)
 800b146:	9010      	str	r0, [sp, #64]	; 0x40
 800b148:	9111      	str	r1, [sp, #68]	; 0x44
 800b14a:	2200      	movs	r2, #0
 800b14c:	0020      	movs	r0, r4
 800b14e:	0029      	movs	r1, r5
 800b150:	f7f7 f966 	bl	8002420 <__aeabi_dmul>
 800b154:	9b08      	ldr	r3, [sp, #32]
 800b156:	0004      	movs	r4, r0
 800b158:	000d      	movs	r5, r1
 800b15a:	9317      	str	r3, [sp, #92]	; 0x5c
 800b15c:	e7be      	b.n	800b0dc <_dtoa_r+0x558>
 800b15e:	9808      	ldr	r0, [sp, #32]
 800b160:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b162:	f7f7 f95d 	bl	8002420 <__aeabi_dmul>
 800b166:	9a06      	ldr	r2, [sp, #24]
 800b168:	9b06      	ldr	r3, [sp, #24]
 800b16a:	4694      	mov	ip, r2
 800b16c:	9308      	str	r3, [sp, #32]
 800b16e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b170:	9010      	str	r0, [sp, #64]	; 0x40
 800b172:	9111      	str	r1, [sp, #68]	; 0x44
 800b174:	4463      	add	r3, ip
 800b176:	9319      	str	r3, [sp, #100]	; 0x64
 800b178:	0029      	movs	r1, r5
 800b17a:	0020      	movs	r0, r4
 800b17c:	f7f7 ff6c 	bl	8003058 <__aeabi_d2iz>
 800b180:	9017      	str	r0, [sp, #92]	; 0x5c
 800b182:	f7f7 ff9f 	bl	80030c4 <__aeabi_i2d>
 800b186:	0002      	movs	r2, r0
 800b188:	000b      	movs	r3, r1
 800b18a:	0020      	movs	r0, r4
 800b18c:	0029      	movs	r1, r5
 800b18e:	f7f7 fbb3 	bl	80028f8 <__aeabi_dsub>
 800b192:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b194:	9a08      	ldr	r2, [sp, #32]
 800b196:	3330      	adds	r3, #48	; 0x30
 800b198:	7013      	strb	r3, [r2, #0]
 800b19a:	0013      	movs	r3, r2
 800b19c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b19e:	3301      	adds	r3, #1
 800b1a0:	0004      	movs	r4, r0
 800b1a2:	000d      	movs	r5, r1
 800b1a4:	9308      	str	r3, [sp, #32]
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d12c      	bne.n	800b204 <_dtoa_r+0x680>
 800b1aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b1ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b1ae:	9a06      	ldr	r2, [sp, #24]
 800b1b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1b2:	4694      	mov	ip, r2
 800b1b4:	4463      	add	r3, ip
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	9308      	str	r3, [sp, #32]
 800b1ba:	4b1e      	ldr	r3, [pc, #120]	; (800b234 <_dtoa_r+0x6b0>)
 800b1bc:	f7f6 f9f2 	bl	80015a4 <__aeabi_dadd>
 800b1c0:	0002      	movs	r2, r0
 800b1c2:	000b      	movs	r3, r1
 800b1c4:	0020      	movs	r0, r4
 800b1c6:	0029      	movs	r1, r5
 800b1c8:	f7f5 f958 	bl	800047c <__aeabi_dcmpgt>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d000      	beq.n	800b1d2 <_dtoa_r+0x64e>
 800b1d0:	e080      	b.n	800b2d4 <_dtoa_r+0x750>
 800b1d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b1d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	4916      	ldr	r1, [pc, #88]	; (800b234 <_dtoa_r+0x6b0>)
 800b1da:	f7f7 fb8d 	bl	80028f8 <__aeabi_dsub>
 800b1de:	0002      	movs	r2, r0
 800b1e0:	000b      	movs	r3, r1
 800b1e2:	0020      	movs	r0, r4
 800b1e4:	0029      	movs	r1, r5
 800b1e6:	f7f5 f935 	bl	8000454 <__aeabi_dcmplt>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d100      	bne.n	800b1f0 <_dtoa_r+0x66c>
 800b1ee:	e714      	b.n	800b01a <_dtoa_r+0x496>
 800b1f0:	9b08      	ldr	r3, [sp, #32]
 800b1f2:	001a      	movs	r2, r3
 800b1f4:	3a01      	subs	r2, #1
 800b1f6:	9208      	str	r2, [sp, #32]
 800b1f8:	7812      	ldrb	r2, [r2, #0]
 800b1fa:	2a30      	cmp	r2, #48	; 0x30
 800b1fc:	d0f8      	beq.n	800b1f0 <_dtoa_r+0x66c>
 800b1fe:	9308      	str	r3, [sp, #32]
 800b200:	9602      	str	r6, [sp, #8]
 800b202:	e055      	b.n	800b2b0 <_dtoa_r+0x72c>
 800b204:	2200      	movs	r2, #0
 800b206:	4b06      	ldr	r3, [pc, #24]	; (800b220 <_dtoa_r+0x69c>)
 800b208:	f7f7 f90a 	bl	8002420 <__aeabi_dmul>
 800b20c:	0004      	movs	r4, r0
 800b20e:	000d      	movs	r5, r1
 800b210:	e7b2      	b.n	800b178 <_dtoa_r+0x5f4>
 800b212:	46c0      	nop			; (mov r8, r8)
 800b214:	0800dd08 	.word	0x0800dd08
 800b218:	0800dce0 	.word	0x0800dce0
 800b21c:	3ff00000 	.word	0x3ff00000
 800b220:	40240000 	.word	0x40240000
 800b224:	401c0000 	.word	0x401c0000
 800b228:	fcc00000 	.word	0xfcc00000
 800b22c:	40140000 	.word	0x40140000
 800b230:	7cc00000 	.word	0x7cc00000
 800b234:	3fe00000 	.word	0x3fe00000
 800b238:	9b07      	ldr	r3, [sp, #28]
 800b23a:	9e06      	ldr	r6, [sp, #24]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	199b      	adds	r3, r3, r6
 800b240:	930c      	str	r3, [sp, #48]	; 0x30
 800b242:	9c08      	ldr	r4, [sp, #32]
 800b244:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b24a:	0020      	movs	r0, r4
 800b24c:	0029      	movs	r1, r5
 800b24e:	f7f6 fce5 	bl	8001c1c <__aeabi_ddiv>
 800b252:	f7f7 ff01 	bl	8003058 <__aeabi_d2iz>
 800b256:	9007      	str	r0, [sp, #28]
 800b258:	f7f7 ff34 	bl	80030c4 <__aeabi_i2d>
 800b25c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b260:	f7f7 f8de 	bl	8002420 <__aeabi_dmul>
 800b264:	0002      	movs	r2, r0
 800b266:	000b      	movs	r3, r1
 800b268:	0020      	movs	r0, r4
 800b26a:	0029      	movs	r1, r5
 800b26c:	f7f7 fb44 	bl	80028f8 <__aeabi_dsub>
 800b270:	0033      	movs	r3, r6
 800b272:	9a07      	ldr	r2, [sp, #28]
 800b274:	3601      	adds	r6, #1
 800b276:	3230      	adds	r2, #48	; 0x30
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b27c:	9608      	str	r6, [sp, #32]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d139      	bne.n	800b2f6 <_dtoa_r+0x772>
 800b282:	0002      	movs	r2, r0
 800b284:	000b      	movs	r3, r1
 800b286:	f7f6 f98d 	bl	80015a4 <__aeabi_dadd>
 800b28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b28c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b28e:	0004      	movs	r4, r0
 800b290:	000d      	movs	r5, r1
 800b292:	f7f5 f8f3 	bl	800047c <__aeabi_dcmpgt>
 800b296:	2800      	cmp	r0, #0
 800b298:	d11b      	bne.n	800b2d2 <_dtoa_r+0x74e>
 800b29a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b29c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b29e:	0020      	movs	r0, r4
 800b2a0:	0029      	movs	r1, r5
 800b2a2:	f7f5 f8d1 	bl	8000448 <__aeabi_dcmpeq>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d002      	beq.n	800b2b0 <_dtoa_r+0x72c>
 800b2aa:	9b07      	ldr	r3, [sp, #28]
 800b2ac:	07db      	lsls	r3, r3, #31
 800b2ae:	d410      	bmi.n	800b2d2 <_dtoa_r+0x74e>
 800b2b0:	0038      	movs	r0, r7
 800b2b2:	9905      	ldr	r1, [sp, #20]
 800b2b4:	f000 fe6a 	bl	800bf8c <_Bfree>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	9a08      	ldr	r2, [sp, #32]
 800b2bc:	9802      	ldr	r0, [sp, #8]
 800b2be:	7013      	strb	r3, [r2, #0]
 800b2c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	6018      	str	r0, [r3, #0]
 800b2c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d100      	bne.n	800b2ce <_dtoa_r+0x74a>
 800b2cc:	e4a6      	b.n	800ac1c <_dtoa_r+0x98>
 800b2ce:	601a      	str	r2, [r3, #0]
 800b2d0:	e4a4      	b.n	800ac1c <_dtoa_r+0x98>
 800b2d2:	9e02      	ldr	r6, [sp, #8]
 800b2d4:	9b08      	ldr	r3, [sp, #32]
 800b2d6:	9308      	str	r3, [sp, #32]
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	781a      	ldrb	r2, [r3, #0]
 800b2dc:	2a39      	cmp	r2, #57	; 0x39
 800b2de:	d106      	bne.n	800b2ee <_dtoa_r+0x76a>
 800b2e0:	9a06      	ldr	r2, [sp, #24]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d1f7      	bne.n	800b2d6 <_dtoa_r+0x752>
 800b2e6:	2230      	movs	r2, #48	; 0x30
 800b2e8:	9906      	ldr	r1, [sp, #24]
 800b2ea:	3601      	adds	r6, #1
 800b2ec:	700a      	strb	r2, [r1, #0]
 800b2ee:	781a      	ldrb	r2, [r3, #0]
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	701a      	strb	r2, [r3, #0]
 800b2f4:	e784      	b.n	800b200 <_dtoa_r+0x67c>
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	4baa      	ldr	r3, [pc, #680]	; (800b5a4 <_dtoa_r+0xa20>)
 800b2fa:	f7f7 f891 	bl	8002420 <__aeabi_dmul>
 800b2fe:	2200      	movs	r2, #0
 800b300:	2300      	movs	r3, #0
 800b302:	0004      	movs	r4, r0
 800b304:	000d      	movs	r5, r1
 800b306:	f7f5 f89f 	bl	8000448 <__aeabi_dcmpeq>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d09b      	beq.n	800b246 <_dtoa_r+0x6c2>
 800b30e:	e7cf      	b.n	800b2b0 <_dtoa_r+0x72c>
 800b310:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b312:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b314:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b316:	2d00      	cmp	r5, #0
 800b318:	d012      	beq.n	800b340 <_dtoa_r+0x7bc>
 800b31a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b31c:	2a01      	cmp	r2, #1
 800b31e:	dc66      	bgt.n	800b3ee <_dtoa_r+0x86a>
 800b320:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b322:	2a00      	cmp	r2, #0
 800b324:	d05d      	beq.n	800b3e2 <_dtoa_r+0x85e>
 800b326:	4aa0      	ldr	r2, [pc, #640]	; (800b5a8 <_dtoa_r+0xa24>)
 800b328:	189b      	adds	r3, r3, r2
 800b32a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b32c:	2101      	movs	r1, #1
 800b32e:	18d2      	adds	r2, r2, r3
 800b330:	920a      	str	r2, [sp, #40]	; 0x28
 800b332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b334:	0038      	movs	r0, r7
 800b336:	18d3      	adds	r3, r2, r3
 800b338:	930d      	str	r3, [sp, #52]	; 0x34
 800b33a:	f000 ff23 	bl	800c184 <__i2b>
 800b33e:	0005      	movs	r5, r0
 800b340:	2c00      	cmp	r4, #0
 800b342:	dd0e      	ble.n	800b362 <_dtoa_r+0x7de>
 800b344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b346:	2b00      	cmp	r3, #0
 800b348:	dd0b      	ble.n	800b362 <_dtoa_r+0x7de>
 800b34a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b34c:	0023      	movs	r3, r4
 800b34e:	4294      	cmp	r4, r2
 800b350:	dd00      	ble.n	800b354 <_dtoa_r+0x7d0>
 800b352:	0013      	movs	r3, r2
 800b354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b356:	1ae4      	subs	r4, r4, r3
 800b358:	1ad2      	subs	r2, r2, r3
 800b35a:	920a      	str	r2, [sp, #40]	; 0x28
 800b35c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	930d      	str	r3, [sp, #52]	; 0x34
 800b362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b364:	2b00      	cmp	r3, #0
 800b366:	d01f      	beq.n	800b3a8 <_dtoa_r+0x824>
 800b368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d054      	beq.n	800b418 <_dtoa_r+0x894>
 800b36e:	2e00      	cmp	r6, #0
 800b370:	dd11      	ble.n	800b396 <_dtoa_r+0x812>
 800b372:	0029      	movs	r1, r5
 800b374:	0032      	movs	r2, r6
 800b376:	0038      	movs	r0, r7
 800b378:	f000 ffca 	bl	800c310 <__pow5mult>
 800b37c:	9a05      	ldr	r2, [sp, #20]
 800b37e:	0001      	movs	r1, r0
 800b380:	0005      	movs	r5, r0
 800b382:	0038      	movs	r0, r7
 800b384:	f000 ff14 	bl	800c1b0 <__multiply>
 800b388:	9905      	ldr	r1, [sp, #20]
 800b38a:	9014      	str	r0, [sp, #80]	; 0x50
 800b38c:	0038      	movs	r0, r7
 800b38e:	f000 fdfd 	bl	800bf8c <_Bfree>
 800b392:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b394:	9305      	str	r3, [sp, #20]
 800b396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b398:	1b9a      	subs	r2, r3, r6
 800b39a:	42b3      	cmp	r3, r6
 800b39c:	d004      	beq.n	800b3a8 <_dtoa_r+0x824>
 800b39e:	0038      	movs	r0, r7
 800b3a0:	9905      	ldr	r1, [sp, #20]
 800b3a2:	f000 ffb5 	bl	800c310 <__pow5mult>
 800b3a6:	9005      	str	r0, [sp, #20]
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	0038      	movs	r0, r7
 800b3ac:	f000 feea 	bl	800c184 <__i2b>
 800b3b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3b2:	0006      	movs	r6, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dd31      	ble.n	800b41c <_dtoa_r+0x898>
 800b3b8:	001a      	movs	r2, r3
 800b3ba:	0001      	movs	r1, r0
 800b3bc:	0038      	movs	r0, r7
 800b3be:	f000 ffa7 	bl	800c310 <__pow5mult>
 800b3c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3c4:	0006      	movs	r6, r0
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	dd2d      	ble.n	800b426 <_dtoa_r+0x8a2>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	930e      	str	r3, [sp, #56]	; 0x38
 800b3ce:	6933      	ldr	r3, [r6, #16]
 800b3d0:	3303      	adds	r3, #3
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	18f3      	adds	r3, r6, r3
 800b3d6:	6858      	ldr	r0, [r3, #4]
 800b3d8:	f000 fe8c 	bl	800c0f4 <__hi0bits>
 800b3dc:	2320      	movs	r3, #32
 800b3de:	1a18      	subs	r0, r3, r0
 800b3e0:	e039      	b.n	800b456 <_dtoa_r+0x8d2>
 800b3e2:	2336      	movs	r3, #54	; 0x36
 800b3e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b3e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b3e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b3ea:	1a9b      	subs	r3, r3, r2
 800b3ec:	e79d      	b.n	800b32a <_dtoa_r+0x7a6>
 800b3ee:	9b07      	ldr	r3, [sp, #28]
 800b3f0:	1e5e      	subs	r6, r3, #1
 800b3f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3f4:	42b3      	cmp	r3, r6
 800b3f6:	db07      	blt.n	800b408 <_dtoa_r+0x884>
 800b3f8:	1b9e      	subs	r6, r3, r6
 800b3fa:	9b07      	ldr	r3, [sp, #28]
 800b3fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	da93      	bge.n	800b32a <_dtoa_r+0x7a6>
 800b402:	1ae4      	subs	r4, r4, r3
 800b404:	2300      	movs	r3, #0
 800b406:	e790      	b.n	800b32a <_dtoa_r+0x7a6>
 800b408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b40a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b40c:	1af3      	subs	r3, r6, r3
 800b40e:	18d3      	adds	r3, r2, r3
 800b410:	960e      	str	r6, [sp, #56]	; 0x38
 800b412:	9315      	str	r3, [sp, #84]	; 0x54
 800b414:	2600      	movs	r6, #0
 800b416:	e7f0      	b.n	800b3fa <_dtoa_r+0x876>
 800b418:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b41a:	e7c0      	b.n	800b39e <_dtoa_r+0x81a>
 800b41c:	2300      	movs	r3, #0
 800b41e:	930e      	str	r3, [sp, #56]	; 0x38
 800b420:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b422:	2b01      	cmp	r3, #1
 800b424:	dc13      	bgt.n	800b44e <_dtoa_r+0x8ca>
 800b426:	2300      	movs	r3, #0
 800b428:	930e      	str	r3, [sp, #56]	; 0x38
 800b42a:	9b08      	ldr	r3, [sp, #32]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10e      	bne.n	800b44e <_dtoa_r+0x8ca>
 800b430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b432:	031b      	lsls	r3, r3, #12
 800b434:	d10b      	bne.n	800b44e <_dtoa_r+0x8ca>
 800b436:	4b5d      	ldr	r3, [pc, #372]	; (800b5ac <_dtoa_r+0xa28>)
 800b438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b43a:	4213      	tst	r3, r2
 800b43c:	d007      	beq.n	800b44e <_dtoa_r+0x8ca>
 800b43e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b440:	3301      	adds	r3, #1
 800b442:	930a      	str	r3, [sp, #40]	; 0x28
 800b444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b446:	3301      	adds	r3, #1
 800b448:	930d      	str	r3, [sp, #52]	; 0x34
 800b44a:	2301      	movs	r3, #1
 800b44c:	930e      	str	r3, [sp, #56]	; 0x38
 800b44e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b450:	2001      	movs	r0, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1bb      	bne.n	800b3ce <_dtoa_r+0x84a>
 800b456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b458:	221f      	movs	r2, #31
 800b45a:	1818      	adds	r0, r3, r0
 800b45c:	0003      	movs	r3, r0
 800b45e:	4013      	ands	r3, r2
 800b460:	4210      	tst	r0, r2
 800b462:	d046      	beq.n	800b4f2 <_dtoa_r+0x96e>
 800b464:	3201      	adds	r2, #1
 800b466:	1ad2      	subs	r2, r2, r3
 800b468:	2a04      	cmp	r2, #4
 800b46a:	dd3f      	ble.n	800b4ec <_dtoa_r+0x968>
 800b46c:	221c      	movs	r2, #28
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b472:	18e4      	adds	r4, r4, r3
 800b474:	18d2      	adds	r2, r2, r3
 800b476:	920a      	str	r2, [sp, #40]	; 0x28
 800b478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b47a:	18d3      	adds	r3, r2, r3
 800b47c:	930d      	str	r3, [sp, #52]	; 0x34
 800b47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b480:	2b00      	cmp	r3, #0
 800b482:	dd05      	ble.n	800b490 <_dtoa_r+0x90c>
 800b484:	001a      	movs	r2, r3
 800b486:	0038      	movs	r0, r7
 800b488:	9905      	ldr	r1, [sp, #20]
 800b48a:	f000 ff9d 	bl	800c3c8 <__lshift>
 800b48e:	9005      	str	r0, [sp, #20]
 800b490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b492:	2b00      	cmp	r3, #0
 800b494:	dd05      	ble.n	800b4a2 <_dtoa_r+0x91e>
 800b496:	0031      	movs	r1, r6
 800b498:	001a      	movs	r2, r3
 800b49a:	0038      	movs	r0, r7
 800b49c:	f000 ff94 	bl	800c3c8 <__lshift>
 800b4a0:	0006      	movs	r6, r0
 800b4a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d026      	beq.n	800b4f6 <_dtoa_r+0x972>
 800b4a8:	0031      	movs	r1, r6
 800b4aa:	9805      	ldr	r0, [sp, #20]
 800b4ac:	f000 fffa 	bl	800c4a4 <__mcmp>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	da20      	bge.n	800b4f6 <_dtoa_r+0x972>
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	220a      	movs	r2, #10
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	9302      	str	r3, [sp, #8]
 800b4bc:	0038      	movs	r0, r7
 800b4be:	2300      	movs	r3, #0
 800b4c0:	9905      	ldr	r1, [sp, #20]
 800b4c2:	f000 fd87 	bl	800bfd4 <__multadd>
 800b4c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4c8:	9005      	str	r0, [sp, #20]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d100      	bne.n	800b4d0 <_dtoa_r+0x94c>
 800b4ce:	e166      	b.n	800b79e <_dtoa_r+0xc1a>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	0029      	movs	r1, r5
 800b4d4:	220a      	movs	r2, #10
 800b4d6:	0038      	movs	r0, r7
 800b4d8:	f000 fd7c 	bl	800bfd4 <__multadd>
 800b4dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4de:	0005      	movs	r5, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	dc47      	bgt.n	800b574 <_dtoa_r+0x9f0>
 800b4e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	dc0d      	bgt.n	800b506 <_dtoa_r+0x982>
 800b4ea:	e043      	b.n	800b574 <_dtoa_r+0x9f0>
 800b4ec:	2a04      	cmp	r2, #4
 800b4ee:	d0c6      	beq.n	800b47e <_dtoa_r+0x8fa>
 800b4f0:	0013      	movs	r3, r2
 800b4f2:	331c      	adds	r3, #28
 800b4f4:	e7bc      	b.n	800b470 <_dtoa_r+0x8ec>
 800b4f6:	9b07      	ldr	r3, [sp, #28]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	dc35      	bgt.n	800b568 <_dtoa_r+0x9e4>
 800b4fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	dd32      	ble.n	800b568 <_dtoa_r+0x9e4>
 800b502:	9b07      	ldr	r3, [sp, #28]
 800b504:	930c      	str	r3, [sp, #48]	; 0x30
 800b506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10c      	bne.n	800b526 <_dtoa_r+0x9a2>
 800b50c:	0031      	movs	r1, r6
 800b50e:	2205      	movs	r2, #5
 800b510:	0038      	movs	r0, r7
 800b512:	f000 fd5f 	bl	800bfd4 <__multadd>
 800b516:	0006      	movs	r6, r0
 800b518:	0001      	movs	r1, r0
 800b51a:	9805      	ldr	r0, [sp, #20]
 800b51c:	f000 ffc2 	bl	800c4a4 <__mcmp>
 800b520:	2800      	cmp	r0, #0
 800b522:	dd00      	ble.n	800b526 <_dtoa_r+0x9a2>
 800b524:	e5a5      	b.n	800b072 <_dtoa_r+0x4ee>
 800b526:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b528:	43db      	mvns	r3, r3
 800b52a:	9302      	str	r3, [sp, #8]
 800b52c:	9b06      	ldr	r3, [sp, #24]
 800b52e:	9308      	str	r3, [sp, #32]
 800b530:	2400      	movs	r4, #0
 800b532:	0031      	movs	r1, r6
 800b534:	0038      	movs	r0, r7
 800b536:	f000 fd29 	bl	800bf8c <_Bfree>
 800b53a:	2d00      	cmp	r5, #0
 800b53c:	d100      	bne.n	800b540 <_dtoa_r+0x9bc>
 800b53e:	e6b7      	b.n	800b2b0 <_dtoa_r+0x72c>
 800b540:	2c00      	cmp	r4, #0
 800b542:	d005      	beq.n	800b550 <_dtoa_r+0x9cc>
 800b544:	42ac      	cmp	r4, r5
 800b546:	d003      	beq.n	800b550 <_dtoa_r+0x9cc>
 800b548:	0021      	movs	r1, r4
 800b54a:	0038      	movs	r0, r7
 800b54c:	f000 fd1e 	bl	800bf8c <_Bfree>
 800b550:	0029      	movs	r1, r5
 800b552:	0038      	movs	r0, r7
 800b554:	f000 fd1a 	bl	800bf8c <_Bfree>
 800b558:	e6aa      	b.n	800b2b0 <_dtoa_r+0x72c>
 800b55a:	2600      	movs	r6, #0
 800b55c:	0035      	movs	r5, r6
 800b55e:	e7e2      	b.n	800b526 <_dtoa_r+0x9a2>
 800b560:	9602      	str	r6, [sp, #8]
 800b562:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b564:	0035      	movs	r5, r6
 800b566:	e584      	b.n	800b072 <_dtoa_r+0x4ee>
 800b568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d100      	bne.n	800b570 <_dtoa_r+0x9ec>
 800b56e:	e0ce      	b.n	800b70e <_dtoa_r+0xb8a>
 800b570:	9b07      	ldr	r3, [sp, #28]
 800b572:	930c      	str	r3, [sp, #48]	; 0x30
 800b574:	2c00      	cmp	r4, #0
 800b576:	dd05      	ble.n	800b584 <_dtoa_r+0xa00>
 800b578:	0029      	movs	r1, r5
 800b57a:	0022      	movs	r2, r4
 800b57c:	0038      	movs	r0, r7
 800b57e:	f000 ff23 	bl	800c3c8 <__lshift>
 800b582:	0005      	movs	r5, r0
 800b584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b586:	0028      	movs	r0, r5
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d022      	beq.n	800b5d2 <_dtoa_r+0xa4e>
 800b58c:	0038      	movs	r0, r7
 800b58e:	6869      	ldr	r1, [r5, #4]
 800b590:	f000 fcb8 	bl	800bf04 <_Balloc>
 800b594:	1e04      	subs	r4, r0, #0
 800b596:	d10f      	bne.n	800b5b8 <_dtoa_r+0xa34>
 800b598:	0002      	movs	r2, r0
 800b59a:	4b05      	ldr	r3, [pc, #20]	; (800b5b0 <_dtoa_r+0xa2c>)
 800b59c:	4905      	ldr	r1, [pc, #20]	; (800b5b4 <_dtoa_r+0xa30>)
 800b59e:	f7ff fb06 	bl	800abae <_dtoa_r+0x2a>
 800b5a2:	46c0      	nop			; (mov r8, r8)
 800b5a4:	40240000 	.word	0x40240000
 800b5a8:	00000433 	.word	0x00000433
 800b5ac:	7ff00000 	.word	0x7ff00000
 800b5b0:	0800dbf7 	.word	0x0800dbf7
 800b5b4:	000002ea 	.word	0x000002ea
 800b5b8:	0029      	movs	r1, r5
 800b5ba:	692b      	ldr	r3, [r5, #16]
 800b5bc:	310c      	adds	r1, #12
 800b5be:	1c9a      	adds	r2, r3, #2
 800b5c0:	0092      	lsls	r2, r2, #2
 800b5c2:	300c      	adds	r0, #12
 800b5c4:	f7fd fbe0 	bl	8008d88 <memcpy>
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	0021      	movs	r1, r4
 800b5cc:	0038      	movs	r0, r7
 800b5ce:	f000 fefb 	bl	800c3c8 <__lshift>
 800b5d2:	9b06      	ldr	r3, [sp, #24]
 800b5d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	189b      	adds	r3, r3, r2
 800b5dc:	2201      	movs	r2, #1
 800b5de:	002c      	movs	r4, r5
 800b5e0:	0005      	movs	r5, r0
 800b5e2:	9314      	str	r3, [sp, #80]	; 0x50
 800b5e4:	9b08      	ldr	r3, [sp, #32]
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5ea:	0031      	movs	r1, r6
 800b5ec:	9805      	ldr	r0, [sp, #20]
 800b5ee:	f7ff fa3d 	bl	800aa6c <quorem>
 800b5f2:	0003      	movs	r3, r0
 800b5f4:	0021      	movs	r1, r4
 800b5f6:	3330      	adds	r3, #48	; 0x30
 800b5f8:	900d      	str	r0, [sp, #52]	; 0x34
 800b5fa:	9805      	ldr	r0, [sp, #20]
 800b5fc:	9307      	str	r3, [sp, #28]
 800b5fe:	f000 ff51 	bl	800c4a4 <__mcmp>
 800b602:	002a      	movs	r2, r5
 800b604:	900e      	str	r0, [sp, #56]	; 0x38
 800b606:	0031      	movs	r1, r6
 800b608:	0038      	movs	r0, r7
 800b60a:	f000 ff67 	bl	800c4dc <__mdiff>
 800b60e:	68c3      	ldr	r3, [r0, #12]
 800b610:	9008      	str	r0, [sp, #32]
 800b612:	9310      	str	r3, [sp, #64]	; 0x40
 800b614:	2301      	movs	r3, #1
 800b616:	930c      	str	r3, [sp, #48]	; 0x30
 800b618:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d104      	bne.n	800b628 <_dtoa_r+0xaa4>
 800b61e:	0001      	movs	r1, r0
 800b620:	9805      	ldr	r0, [sp, #20]
 800b622:	f000 ff3f 	bl	800c4a4 <__mcmp>
 800b626:	900c      	str	r0, [sp, #48]	; 0x30
 800b628:	0038      	movs	r0, r7
 800b62a:	9908      	ldr	r1, [sp, #32]
 800b62c:	f000 fcae 	bl	800bf8c <_Bfree>
 800b630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b632:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b634:	3301      	adds	r3, #1
 800b636:	9308      	str	r3, [sp, #32]
 800b638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b63a:	4313      	orrs	r3, r2
 800b63c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b63e:	4313      	orrs	r3, r2
 800b640:	d10c      	bne.n	800b65c <_dtoa_r+0xad8>
 800b642:	9b07      	ldr	r3, [sp, #28]
 800b644:	2b39      	cmp	r3, #57	; 0x39
 800b646:	d026      	beq.n	800b696 <_dtoa_r+0xb12>
 800b648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	dd02      	ble.n	800b654 <_dtoa_r+0xad0>
 800b64e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b650:	3331      	adds	r3, #49	; 0x31
 800b652:	9307      	str	r3, [sp, #28]
 800b654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b656:	9a07      	ldr	r2, [sp, #28]
 800b658:	701a      	strb	r2, [r3, #0]
 800b65a:	e76a      	b.n	800b532 <_dtoa_r+0x9ae>
 800b65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b65e:	2b00      	cmp	r3, #0
 800b660:	db04      	blt.n	800b66c <_dtoa_r+0xae8>
 800b662:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b664:	4313      	orrs	r3, r2
 800b666:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b668:	4313      	orrs	r3, r2
 800b66a:	d11f      	bne.n	800b6ac <_dtoa_r+0xb28>
 800b66c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b66e:	2b00      	cmp	r3, #0
 800b670:	ddf0      	ble.n	800b654 <_dtoa_r+0xad0>
 800b672:	9905      	ldr	r1, [sp, #20]
 800b674:	2201      	movs	r2, #1
 800b676:	0038      	movs	r0, r7
 800b678:	f000 fea6 	bl	800c3c8 <__lshift>
 800b67c:	0031      	movs	r1, r6
 800b67e:	9005      	str	r0, [sp, #20]
 800b680:	f000 ff10 	bl	800c4a4 <__mcmp>
 800b684:	2800      	cmp	r0, #0
 800b686:	dc03      	bgt.n	800b690 <_dtoa_r+0xb0c>
 800b688:	d1e4      	bne.n	800b654 <_dtoa_r+0xad0>
 800b68a:	9b07      	ldr	r3, [sp, #28]
 800b68c:	07db      	lsls	r3, r3, #31
 800b68e:	d5e1      	bpl.n	800b654 <_dtoa_r+0xad0>
 800b690:	9b07      	ldr	r3, [sp, #28]
 800b692:	2b39      	cmp	r3, #57	; 0x39
 800b694:	d1db      	bne.n	800b64e <_dtoa_r+0xaca>
 800b696:	2339      	movs	r3, #57	; 0x39
 800b698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b69a:	7013      	strb	r3, [r2, #0]
 800b69c:	9b08      	ldr	r3, [sp, #32]
 800b69e:	9308      	str	r3, [sp, #32]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	781a      	ldrb	r2, [r3, #0]
 800b6a4:	2a39      	cmp	r2, #57	; 0x39
 800b6a6:	d068      	beq.n	800b77a <_dtoa_r+0xbf6>
 800b6a8:	3201      	adds	r2, #1
 800b6aa:	e7d5      	b.n	800b658 <_dtoa_r+0xad4>
 800b6ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	dd07      	ble.n	800b6c2 <_dtoa_r+0xb3e>
 800b6b2:	9b07      	ldr	r3, [sp, #28]
 800b6b4:	2b39      	cmp	r3, #57	; 0x39
 800b6b6:	d0ee      	beq.n	800b696 <_dtoa_r+0xb12>
 800b6b8:	9b07      	ldr	r3, [sp, #28]
 800b6ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6bc:	3301      	adds	r3, #1
 800b6be:	7013      	strb	r3, [r2, #0]
 800b6c0:	e737      	b.n	800b532 <_dtoa_r+0x9ae>
 800b6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c4:	9a07      	ldr	r2, [sp, #28]
 800b6c6:	701a      	strb	r2, [r3, #0]
 800b6c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d03e      	beq.n	800b74e <_dtoa_r+0xbca>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	220a      	movs	r2, #10
 800b6d4:	9905      	ldr	r1, [sp, #20]
 800b6d6:	0038      	movs	r0, r7
 800b6d8:	f000 fc7c 	bl	800bfd4 <__multadd>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	9005      	str	r0, [sp, #20]
 800b6e0:	220a      	movs	r2, #10
 800b6e2:	0021      	movs	r1, r4
 800b6e4:	0038      	movs	r0, r7
 800b6e6:	42ac      	cmp	r4, r5
 800b6e8:	d106      	bne.n	800b6f8 <_dtoa_r+0xb74>
 800b6ea:	f000 fc73 	bl	800bfd4 <__multadd>
 800b6ee:	0004      	movs	r4, r0
 800b6f0:	0005      	movs	r5, r0
 800b6f2:	9b08      	ldr	r3, [sp, #32]
 800b6f4:	930a      	str	r3, [sp, #40]	; 0x28
 800b6f6:	e778      	b.n	800b5ea <_dtoa_r+0xa66>
 800b6f8:	f000 fc6c 	bl	800bfd4 <__multadd>
 800b6fc:	0029      	movs	r1, r5
 800b6fe:	0004      	movs	r4, r0
 800b700:	2300      	movs	r3, #0
 800b702:	220a      	movs	r2, #10
 800b704:	0038      	movs	r0, r7
 800b706:	f000 fc65 	bl	800bfd4 <__multadd>
 800b70a:	0005      	movs	r5, r0
 800b70c:	e7f1      	b.n	800b6f2 <_dtoa_r+0xb6e>
 800b70e:	9b07      	ldr	r3, [sp, #28]
 800b710:	930c      	str	r3, [sp, #48]	; 0x30
 800b712:	2400      	movs	r4, #0
 800b714:	0031      	movs	r1, r6
 800b716:	9805      	ldr	r0, [sp, #20]
 800b718:	f7ff f9a8 	bl	800aa6c <quorem>
 800b71c:	9b06      	ldr	r3, [sp, #24]
 800b71e:	3030      	adds	r0, #48	; 0x30
 800b720:	5518      	strb	r0, [r3, r4]
 800b722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b724:	3401      	adds	r4, #1
 800b726:	9007      	str	r0, [sp, #28]
 800b728:	42a3      	cmp	r3, r4
 800b72a:	dd07      	ble.n	800b73c <_dtoa_r+0xbb8>
 800b72c:	2300      	movs	r3, #0
 800b72e:	220a      	movs	r2, #10
 800b730:	0038      	movs	r0, r7
 800b732:	9905      	ldr	r1, [sp, #20]
 800b734:	f000 fc4e 	bl	800bfd4 <__multadd>
 800b738:	9005      	str	r0, [sp, #20]
 800b73a:	e7eb      	b.n	800b714 <_dtoa_r+0xb90>
 800b73c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b73e:	2001      	movs	r0, #1
 800b740:	2b00      	cmp	r3, #0
 800b742:	dd00      	ble.n	800b746 <_dtoa_r+0xbc2>
 800b744:	0018      	movs	r0, r3
 800b746:	2400      	movs	r4, #0
 800b748:	9b06      	ldr	r3, [sp, #24]
 800b74a:	181b      	adds	r3, r3, r0
 800b74c:	9308      	str	r3, [sp, #32]
 800b74e:	9905      	ldr	r1, [sp, #20]
 800b750:	2201      	movs	r2, #1
 800b752:	0038      	movs	r0, r7
 800b754:	f000 fe38 	bl	800c3c8 <__lshift>
 800b758:	0031      	movs	r1, r6
 800b75a:	9005      	str	r0, [sp, #20]
 800b75c:	f000 fea2 	bl	800c4a4 <__mcmp>
 800b760:	2800      	cmp	r0, #0
 800b762:	dc9b      	bgt.n	800b69c <_dtoa_r+0xb18>
 800b764:	d102      	bne.n	800b76c <_dtoa_r+0xbe8>
 800b766:	9b07      	ldr	r3, [sp, #28]
 800b768:	07db      	lsls	r3, r3, #31
 800b76a:	d497      	bmi.n	800b69c <_dtoa_r+0xb18>
 800b76c:	9b08      	ldr	r3, [sp, #32]
 800b76e:	9308      	str	r3, [sp, #32]
 800b770:	3b01      	subs	r3, #1
 800b772:	781a      	ldrb	r2, [r3, #0]
 800b774:	2a30      	cmp	r2, #48	; 0x30
 800b776:	d0fa      	beq.n	800b76e <_dtoa_r+0xbea>
 800b778:	e6db      	b.n	800b532 <_dtoa_r+0x9ae>
 800b77a:	9a06      	ldr	r2, [sp, #24]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d18e      	bne.n	800b69e <_dtoa_r+0xb1a>
 800b780:	9b02      	ldr	r3, [sp, #8]
 800b782:	3301      	adds	r3, #1
 800b784:	9302      	str	r3, [sp, #8]
 800b786:	2331      	movs	r3, #49	; 0x31
 800b788:	e799      	b.n	800b6be <_dtoa_r+0xb3a>
 800b78a:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <_dtoa_r+0xc2c>)
 800b78c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b78e:	9306      	str	r3, [sp, #24]
 800b790:	4b08      	ldr	r3, [pc, #32]	; (800b7b4 <_dtoa_r+0xc30>)
 800b792:	2a00      	cmp	r2, #0
 800b794:	d001      	beq.n	800b79a <_dtoa_r+0xc16>
 800b796:	f7ff fa3f 	bl	800ac18 <_dtoa_r+0x94>
 800b79a:	f7ff fa3f 	bl	800ac1c <_dtoa_r+0x98>
 800b79e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dcb6      	bgt.n	800b712 <_dtoa_r+0xb8e>
 800b7a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	dd00      	ble.n	800b7ac <_dtoa_r+0xc28>
 800b7aa:	e6ac      	b.n	800b506 <_dtoa_r+0x982>
 800b7ac:	e7b1      	b.n	800b712 <_dtoa_r+0xb8e>
 800b7ae:	46c0      	nop			; (mov r8, r8)
 800b7b0:	0800db78 	.word	0x0800db78
 800b7b4:	0800db80 	.word	0x0800db80

0800b7b8 <rshift>:
 800b7b8:	0002      	movs	r2, r0
 800b7ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7bc:	6904      	ldr	r4, [r0, #16]
 800b7be:	3214      	adds	r2, #20
 800b7c0:	0013      	movs	r3, r2
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	114f      	asrs	r7, r1, #5
 800b7c6:	42bc      	cmp	r4, r7
 800b7c8:	dd31      	ble.n	800b82e <rshift+0x76>
 800b7ca:	00bb      	lsls	r3, r7, #2
 800b7cc:	18d3      	adds	r3, r2, r3
 800b7ce:	261f      	movs	r6, #31
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	000b      	movs	r3, r1
 800b7d4:	00a5      	lsls	r5, r4, #2
 800b7d6:	4033      	ands	r3, r6
 800b7d8:	1955      	adds	r5, r2, r5
 800b7da:	9302      	str	r3, [sp, #8]
 800b7dc:	4231      	tst	r1, r6
 800b7de:	d10c      	bne.n	800b7fa <rshift+0x42>
 800b7e0:	0016      	movs	r6, r2
 800b7e2:	9901      	ldr	r1, [sp, #4]
 800b7e4:	428d      	cmp	r5, r1
 800b7e6:	d838      	bhi.n	800b85a <rshift+0xa2>
 800b7e8:	9901      	ldr	r1, [sp, #4]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	3903      	subs	r1, #3
 800b7ee:	428d      	cmp	r5, r1
 800b7f0:	d301      	bcc.n	800b7f6 <rshift+0x3e>
 800b7f2:	1be3      	subs	r3, r4, r7
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	18d3      	adds	r3, r2, r3
 800b7f8:	e019      	b.n	800b82e <rshift+0x76>
 800b7fa:	2120      	movs	r1, #32
 800b7fc:	9b02      	ldr	r3, [sp, #8]
 800b7fe:	9e01      	ldr	r6, [sp, #4]
 800b800:	1acb      	subs	r3, r1, r3
 800b802:	9303      	str	r3, [sp, #12]
 800b804:	ce02      	ldmia	r6!, {r1}
 800b806:	9b02      	ldr	r3, [sp, #8]
 800b808:	4694      	mov	ip, r2
 800b80a:	40d9      	lsrs	r1, r3
 800b80c:	9100      	str	r1, [sp, #0]
 800b80e:	42b5      	cmp	r5, r6
 800b810:	d816      	bhi.n	800b840 <rshift+0x88>
 800b812:	9e01      	ldr	r6, [sp, #4]
 800b814:	2300      	movs	r3, #0
 800b816:	3601      	adds	r6, #1
 800b818:	42b5      	cmp	r5, r6
 800b81a:	d302      	bcc.n	800b822 <rshift+0x6a>
 800b81c:	1be3      	subs	r3, r4, r7
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	3b04      	subs	r3, #4
 800b822:	9900      	ldr	r1, [sp, #0]
 800b824:	18d3      	adds	r3, r2, r3
 800b826:	6019      	str	r1, [r3, #0]
 800b828:	2900      	cmp	r1, #0
 800b82a:	d000      	beq.n	800b82e <rshift+0x76>
 800b82c:	3304      	adds	r3, #4
 800b82e:	1a99      	subs	r1, r3, r2
 800b830:	1089      	asrs	r1, r1, #2
 800b832:	6101      	str	r1, [r0, #16]
 800b834:	4293      	cmp	r3, r2
 800b836:	d101      	bne.n	800b83c <rshift+0x84>
 800b838:	2300      	movs	r3, #0
 800b83a:	6143      	str	r3, [r0, #20]
 800b83c:	b005      	add	sp, #20
 800b83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b840:	6833      	ldr	r3, [r6, #0]
 800b842:	9903      	ldr	r1, [sp, #12]
 800b844:	408b      	lsls	r3, r1
 800b846:	9900      	ldr	r1, [sp, #0]
 800b848:	4319      	orrs	r1, r3
 800b84a:	4663      	mov	r3, ip
 800b84c:	c302      	stmia	r3!, {r1}
 800b84e:	469c      	mov	ip, r3
 800b850:	ce02      	ldmia	r6!, {r1}
 800b852:	9b02      	ldr	r3, [sp, #8]
 800b854:	40d9      	lsrs	r1, r3
 800b856:	9100      	str	r1, [sp, #0]
 800b858:	e7d9      	b.n	800b80e <rshift+0x56>
 800b85a:	c908      	ldmia	r1!, {r3}
 800b85c:	c608      	stmia	r6!, {r3}
 800b85e:	e7c1      	b.n	800b7e4 <rshift+0x2c>

0800b860 <__hexdig_fun>:
 800b860:	0002      	movs	r2, r0
 800b862:	3a30      	subs	r2, #48	; 0x30
 800b864:	0003      	movs	r3, r0
 800b866:	2a09      	cmp	r2, #9
 800b868:	d802      	bhi.n	800b870 <__hexdig_fun+0x10>
 800b86a:	3b20      	subs	r3, #32
 800b86c:	b2d8      	uxtb	r0, r3
 800b86e:	4770      	bx	lr
 800b870:	0002      	movs	r2, r0
 800b872:	3a61      	subs	r2, #97	; 0x61
 800b874:	2a05      	cmp	r2, #5
 800b876:	d801      	bhi.n	800b87c <__hexdig_fun+0x1c>
 800b878:	3b47      	subs	r3, #71	; 0x47
 800b87a:	e7f7      	b.n	800b86c <__hexdig_fun+0xc>
 800b87c:	001a      	movs	r2, r3
 800b87e:	3a41      	subs	r2, #65	; 0x41
 800b880:	2000      	movs	r0, #0
 800b882:	2a05      	cmp	r2, #5
 800b884:	d8f3      	bhi.n	800b86e <__hexdig_fun+0xe>
 800b886:	3b27      	subs	r3, #39	; 0x27
 800b888:	e7f0      	b.n	800b86c <__hexdig_fun+0xc>
	...

0800b88c <__gethex>:
 800b88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b88e:	b08d      	sub	sp, #52	; 0x34
 800b890:	930a      	str	r3, [sp, #40]	; 0x28
 800b892:	4bbf      	ldr	r3, [pc, #764]	; (800bb90 <__gethex+0x304>)
 800b894:	9005      	str	r0, [sp, #20]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	9109      	str	r1, [sp, #36]	; 0x24
 800b89a:	0018      	movs	r0, r3
 800b89c:	9202      	str	r2, [sp, #8]
 800b89e:	9307      	str	r3, [sp, #28]
 800b8a0:	f7f4 fc30 	bl	8000104 <strlen>
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	9b07      	ldr	r3, [sp, #28]
 800b8a8:	4252      	negs	r2, r2
 800b8aa:	181b      	adds	r3, r3, r0
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	9003      	str	r0, [sp, #12]
 800b8b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b6:	6819      	ldr	r1, [r3, #0]
 800b8b8:	1c8b      	adds	r3, r1, #2
 800b8ba:	1a52      	subs	r2, r2, r1
 800b8bc:	18d1      	adds	r1, r2, r3
 800b8be:	9301      	str	r3, [sp, #4]
 800b8c0:	9108      	str	r1, [sp, #32]
 800b8c2:	9901      	ldr	r1, [sp, #4]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	7808      	ldrb	r0, [r1, #0]
 800b8c8:	2830      	cmp	r0, #48	; 0x30
 800b8ca:	d0f7      	beq.n	800b8bc <__gethex+0x30>
 800b8cc:	f7ff ffc8 	bl	800b860 <__hexdig_fun>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	001c      	movs	r4, r3
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	4298      	cmp	r0, r3
 800b8d8:	d11f      	bne.n	800b91a <__gethex+0x8e>
 800b8da:	9a03      	ldr	r2, [sp, #12]
 800b8dc:	9907      	ldr	r1, [sp, #28]
 800b8de:	9801      	ldr	r0, [sp, #4]
 800b8e0:	f001 f96e 	bl	800cbc0 <strncmp>
 800b8e4:	0007      	movs	r7, r0
 800b8e6:	42a0      	cmp	r0, r4
 800b8e8:	d000      	beq.n	800b8ec <__gethex+0x60>
 800b8ea:	e06b      	b.n	800b9c4 <__gethex+0x138>
 800b8ec:	9b01      	ldr	r3, [sp, #4]
 800b8ee:	9a03      	ldr	r2, [sp, #12]
 800b8f0:	5c98      	ldrb	r0, [r3, r2]
 800b8f2:	189d      	adds	r5, r3, r2
 800b8f4:	f7ff ffb4 	bl	800b860 <__hexdig_fun>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	42a0      	cmp	r0, r4
 800b8fe:	d030      	beq.n	800b962 <__gethex+0xd6>
 800b900:	9501      	str	r5, [sp, #4]
 800b902:	9b01      	ldr	r3, [sp, #4]
 800b904:	7818      	ldrb	r0, [r3, #0]
 800b906:	2830      	cmp	r0, #48	; 0x30
 800b908:	d009      	beq.n	800b91e <__gethex+0x92>
 800b90a:	f7ff ffa9 	bl	800b860 <__hexdig_fun>
 800b90e:	4242      	negs	r2, r0
 800b910:	4142      	adcs	r2, r0
 800b912:	2301      	movs	r3, #1
 800b914:	002c      	movs	r4, r5
 800b916:	9204      	str	r2, [sp, #16]
 800b918:	9308      	str	r3, [sp, #32]
 800b91a:	9d01      	ldr	r5, [sp, #4]
 800b91c:	e004      	b.n	800b928 <__gethex+0x9c>
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	3301      	adds	r3, #1
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	e7ed      	b.n	800b902 <__gethex+0x76>
 800b926:	3501      	adds	r5, #1
 800b928:	7828      	ldrb	r0, [r5, #0]
 800b92a:	f7ff ff99 	bl	800b860 <__hexdig_fun>
 800b92e:	1e07      	subs	r7, r0, #0
 800b930:	d1f9      	bne.n	800b926 <__gethex+0x9a>
 800b932:	0028      	movs	r0, r5
 800b934:	9a03      	ldr	r2, [sp, #12]
 800b936:	9907      	ldr	r1, [sp, #28]
 800b938:	f001 f942 	bl	800cbc0 <strncmp>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d10e      	bne.n	800b95e <__gethex+0xd2>
 800b940:	2c00      	cmp	r4, #0
 800b942:	d107      	bne.n	800b954 <__gethex+0xc8>
 800b944:	9b03      	ldr	r3, [sp, #12]
 800b946:	18ed      	adds	r5, r5, r3
 800b948:	002c      	movs	r4, r5
 800b94a:	7828      	ldrb	r0, [r5, #0]
 800b94c:	f7ff ff88 	bl	800b860 <__hexdig_fun>
 800b950:	2800      	cmp	r0, #0
 800b952:	d102      	bne.n	800b95a <__gethex+0xce>
 800b954:	1b64      	subs	r4, r4, r5
 800b956:	00a7      	lsls	r7, r4, #2
 800b958:	e003      	b.n	800b962 <__gethex+0xd6>
 800b95a:	3501      	adds	r5, #1
 800b95c:	e7f5      	b.n	800b94a <__gethex+0xbe>
 800b95e:	2c00      	cmp	r4, #0
 800b960:	d1f8      	bne.n	800b954 <__gethex+0xc8>
 800b962:	2220      	movs	r2, #32
 800b964:	782b      	ldrb	r3, [r5, #0]
 800b966:	002e      	movs	r6, r5
 800b968:	4393      	bics	r3, r2
 800b96a:	2b50      	cmp	r3, #80	; 0x50
 800b96c:	d11d      	bne.n	800b9aa <__gethex+0x11e>
 800b96e:	786b      	ldrb	r3, [r5, #1]
 800b970:	2b2b      	cmp	r3, #43	; 0x2b
 800b972:	d02c      	beq.n	800b9ce <__gethex+0x142>
 800b974:	2b2d      	cmp	r3, #45	; 0x2d
 800b976:	d02e      	beq.n	800b9d6 <__gethex+0x14a>
 800b978:	2300      	movs	r3, #0
 800b97a:	1c6e      	adds	r6, r5, #1
 800b97c:	9306      	str	r3, [sp, #24]
 800b97e:	7830      	ldrb	r0, [r6, #0]
 800b980:	f7ff ff6e 	bl	800b860 <__hexdig_fun>
 800b984:	1e43      	subs	r3, r0, #1
 800b986:	b2db      	uxtb	r3, r3
 800b988:	2b18      	cmp	r3, #24
 800b98a:	d82b      	bhi.n	800b9e4 <__gethex+0x158>
 800b98c:	3810      	subs	r0, #16
 800b98e:	0004      	movs	r4, r0
 800b990:	7870      	ldrb	r0, [r6, #1]
 800b992:	f7ff ff65 	bl	800b860 <__hexdig_fun>
 800b996:	1e43      	subs	r3, r0, #1
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	3601      	adds	r6, #1
 800b99c:	2b18      	cmp	r3, #24
 800b99e:	d91c      	bls.n	800b9da <__gethex+0x14e>
 800b9a0:	9b06      	ldr	r3, [sp, #24]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d000      	beq.n	800b9a8 <__gethex+0x11c>
 800b9a6:	4264      	negs	r4, r4
 800b9a8:	193f      	adds	r7, r7, r4
 800b9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ac:	601e      	str	r6, [r3, #0]
 800b9ae:	9b04      	ldr	r3, [sp, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d019      	beq.n	800b9e8 <__gethex+0x15c>
 800b9b4:	2600      	movs	r6, #0
 800b9b6:	9b08      	ldr	r3, [sp, #32]
 800b9b8:	42b3      	cmp	r3, r6
 800b9ba:	d100      	bne.n	800b9be <__gethex+0x132>
 800b9bc:	3606      	adds	r6, #6
 800b9be:	0030      	movs	r0, r6
 800b9c0:	b00d      	add	sp, #52	; 0x34
 800b9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	2700      	movs	r7, #0
 800b9c8:	9d01      	ldr	r5, [sp, #4]
 800b9ca:	9304      	str	r3, [sp, #16]
 800b9cc:	e7c9      	b.n	800b962 <__gethex+0xd6>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	9306      	str	r3, [sp, #24]
 800b9d2:	1cae      	adds	r6, r5, #2
 800b9d4:	e7d3      	b.n	800b97e <__gethex+0xf2>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e7fa      	b.n	800b9d0 <__gethex+0x144>
 800b9da:	230a      	movs	r3, #10
 800b9dc:	435c      	muls	r4, r3
 800b9de:	1824      	adds	r4, r4, r0
 800b9e0:	3c10      	subs	r4, #16
 800b9e2:	e7d5      	b.n	800b990 <__gethex+0x104>
 800b9e4:	002e      	movs	r6, r5
 800b9e6:	e7e0      	b.n	800b9aa <__gethex+0x11e>
 800b9e8:	9b01      	ldr	r3, [sp, #4]
 800b9ea:	9904      	ldr	r1, [sp, #16]
 800b9ec:	1aeb      	subs	r3, r5, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	2b07      	cmp	r3, #7
 800b9f2:	dc0a      	bgt.n	800ba0a <__gethex+0x17e>
 800b9f4:	9805      	ldr	r0, [sp, #20]
 800b9f6:	f000 fa85 	bl	800bf04 <_Balloc>
 800b9fa:	1e04      	subs	r4, r0, #0
 800b9fc:	d108      	bne.n	800ba10 <__gethex+0x184>
 800b9fe:	0002      	movs	r2, r0
 800ba00:	21de      	movs	r1, #222	; 0xde
 800ba02:	4b64      	ldr	r3, [pc, #400]	; (800bb94 <__gethex+0x308>)
 800ba04:	4864      	ldr	r0, [pc, #400]	; (800bb98 <__gethex+0x30c>)
 800ba06:	f001 f8fb 	bl	800cc00 <__assert_func>
 800ba0a:	3101      	adds	r1, #1
 800ba0c:	105b      	asrs	r3, r3, #1
 800ba0e:	e7ef      	b.n	800b9f0 <__gethex+0x164>
 800ba10:	0003      	movs	r3, r0
 800ba12:	3314      	adds	r3, #20
 800ba14:	9304      	str	r3, [sp, #16]
 800ba16:	9309      	str	r3, [sp, #36]	; 0x24
 800ba18:	2300      	movs	r3, #0
 800ba1a:	001e      	movs	r6, r3
 800ba1c:	9306      	str	r3, [sp, #24]
 800ba1e:	9b01      	ldr	r3, [sp, #4]
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	d340      	bcc.n	800baa6 <__gethex+0x21a>
 800ba24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ba26:	9b04      	ldr	r3, [sp, #16]
 800ba28:	c540      	stmia	r5!, {r6}
 800ba2a:	1aed      	subs	r5, r5, r3
 800ba2c:	10ad      	asrs	r5, r5, #2
 800ba2e:	0030      	movs	r0, r6
 800ba30:	6125      	str	r5, [r4, #16]
 800ba32:	f000 fb5f 	bl	800c0f4 <__hi0bits>
 800ba36:	9b02      	ldr	r3, [sp, #8]
 800ba38:	016d      	lsls	r5, r5, #5
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	1a2e      	subs	r6, r5, r0
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	429e      	cmp	r6, r3
 800ba42:	dd5a      	ble.n	800bafa <__gethex+0x26e>
 800ba44:	1af6      	subs	r6, r6, r3
 800ba46:	0031      	movs	r1, r6
 800ba48:	0020      	movs	r0, r4
 800ba4a:	f000 ff01 	bl	800c850 <__any_on>
 800ba4e:	1e05      	subs	r5, r0, #0
 800ba50:	d016      	beq.n	800ba80 <__gethex+0x1f4>
 800ba52:	2501      	movs	r5, #1
 800ba54:	211f      	movs	r1, #31
 800ba56:	0028      	movs	r0, r5
 800ba58:	1e73      	subs	r3, r6, #1
 800ba5a:	4019      	ands	r1, r3
 800ba5c:	4088      	lsls	r0, r1
 800ba5e:	0001      	movs	r1, r0
 800ba60:	115a      	asrs	r2, r3, #5
 800ba62:	9804      	ldr	r0, [sp, #16]
 800ba64:	0092      	lsls	r2, r2, #2
 800ba66:	5812      	ldr	r2, [r2, r0]
 800ba68:	420a      	tst	r2, r1
 800ba6a:	d009      	beq.n	800ba80 <__gethex+0x1f4>
 800ba6c:	42ab      	cmp	r3, r5
 800ba6e:	dd06      	ble.n	800ba7e <__gethex+0x1f2>
 800ba70:	0020      	movs	r0, r4
 800ba72:	1eb1      	subs	r1, r6, #2
 800ba74:	f000 feec 	bl	800c850 <__any_on>
 800ba78:	3502      	adds	r5, #2
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d100      	bne.n	800ba80 <__gethex+0x1f4>
 800ba7e:	2502      	movs	r5, #2
 800ba80:	0031      	movs	r1, r6
 800ba82:	0020      	movs	r0, r4
 800ba84:	f7ff fe98 	bl	800b7b8 <rshift>
 800ba88:	19bf      	adds	r7, r7, r6
 800ba8a:	9b02      	ldr	r3, [sp, #8]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	9303      	str	r3, [sp, #12]
 800ba90:	42bb      	cmp	r3, r7
 800ba92:	da42      	bge.n	800bb1a <__gethex+0x28e>
 800ba94:	0021      	movs	r1, r4
 800ba96:	9805      	ldr	r0, [sp, #20]
 800ba98:	f000 fa78 	bl	800bf8c <_Bfree>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800baa0:	26a3      	movs	r6, #163	; 0xa3
 800baa2:	6013      	str	r3, [r2, #0]
 800baa4:	e78b      	b.n	800b9be <__gethex+0x132>
 800baa6:	1e6b      	subs	r3, r5, #1
 800baa8:	9308      	str	r3, [sp, #32]
 800baaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	4293      	cmp	r3, r2
 800bab0:	d014      	beq.n	800badc <__gethex+0x250>
 800bab2:	9b06      	ldr	r3, [sp, #24]
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	d104      	bne.n	800bac2 <__gethex+0x236>
 800bab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baba:	c340      	stmia	r3!, {r6}
 800babc:	2600      	movs	r6, #0
 800babe:	9309      	str	r3, [sp, #36]	; 0x24
 800bac0:	9606      	str	r6, [sp, #24]
 800bac2:	9b08      	ldr	r3, [sp, #32]
 800bac4:	7818      	ldrb	r0, [r3, #0]
 800bac6:	f7ff fecb 	bl	800b860 <__hexdig_fun>
 800baca:	230f      	movs	r3, #15
 800bacc:	4018      	ands	r0, r3
 800bace:	9b06      	ldr	r3, [sp, #24]
 800bad0:	9d08      	ldr	r5, [sp, #32]
 800bad2:	4098      	lsls	r0, r3
 800bad4:	3304      	adds	r3, #4
 800bad6:	4306      	orrs	r6, r0
 800bad8:	9306      	str	r3, [sp, #24]
 800bada:	e7a0      	b.n	800ba1e <__gethex+0x192>
 800badc:	2301      	movs	r3, #1
 800bade:	9a03      	ldr	r2, [sp, #12]
 800bae0:	1a9d      	subs	r5, r3, r2
 800bae2:	9b08      	ldr	r3, [sp, #32]
 800bae4:	195d      	adds	r5, r3, r5
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	429d      	cmp	r5, r3
 800baea:	d3e2      	bcc.n	800bab2 <__gethex+0x226>
 800baec:	0028      	movs	r0, r5
 800baee:	9907      	ldr	r1, [sp, #28]
 800baf0:	f001 f866 	bl	800cbc0 <strncmp>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d1dc      	bne.n	800bab2 <__gethex+0x226>
 800baf8:	e791      	b.n	800ba1e <__gethex+0x192>
 800bafa:	9b01      	ldr	r3, [sp, #4]
 800bafc:	2500      	movs	r5, #0
 800bafe:	429e      	cmp	r6, r3
 800bb00:	dac3      	bge.n	800ba8a <__gethex+0x1fe>
 800bb02:	1b9e      	subs	r6, r3, r6
 800bb04:	0021      	movs	r1, r4
 800bb06:	0032      	movs	r2, r6
 800bb08:	9805      	ldr	r0, [sp, #20]
 800bb0a:	f000 fc5d 	bl	800c3c8 <__lshift>
 800bb0e:	0003      	movs	r3, r0
 800bb10:	3314      	adds	r3, #20
 800bb12:	0004      	movs	r4, r0
 800bb14:	1bbf      	subs	r7, r7, r6
 800bb16:	9304      	str	r3, [sp, #16]
 800bb18:	e7b7      	b.n	800ba8a <__gethex+0x1fe>
 800bb1a:	9b02      	ldr	r3, [sp, #8]
 800bb1c:	685e      	ldr	r6, [r3, #4]
 800bb1e:	42be      	cmp	r6, r7
 800bb20:	dd71      	ble.n	800bc06 <__gethex+0x37a>
 800bb22:	9b01      	ldr	r3, [sp, #4]
 800bb24:	1bf6      	subs	r6, r6, r7
 800bb26:	42b3      	cmp	r3, r6
 800bb28:	dc38      	bgt.n	800bb9c <__gethex+0x310>
 800bb2a:	9b02      	ldr	r3, [sp, #8]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d026      	beq.n	800bb80 <__gethex+0x2f4>
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d028      	beq.n	800bb88 <__gethex+0x2fc>
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d119      	bne.n	800bb6e <__gethex+0x2e2>
 800bb3a:	9b01      	ldr	r3, [sp, #4]
 800bb3c:	42b3      	cmp	r3, r6
 800bb3e:	d116      	bne.n	800bb6e <__gethex+0x2e2>
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d10d      	bne.n	800bb60 <__gethex+0x2d4>
 800bb44:	9b02      	ldr	r3, [sp, #8]
 800bb46:	2662      	movs	r6, #98	; 0x62
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	9301      	str	r3, [sp, #4]
 800bb4c:	9a01      	ldr	r2, [sp, #4]
 800bb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	2301      	movs	r3, #1
 800bb54:	9a04      	ldr	r2, [sp, #16]
 800bb56:	6123      	str	r3, [r4, #16]
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb5c:	601c      	str	r4, [r3, #0]
 800bb5e:	e72e      	b.n	800b9be <__gethex+0x132>
 800bb60:	9901      	ldr	r1, [sp, #4]
 800bb62:	0020      	movs	r0, r4
 800bb64:	3901      	subs	r1, #1
 800bb66:	f000 fe73 	bl	800c850 <__any_on>
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d1ea      	bne.n	800bb44 <__gethex+0x2b8>
 800bb6e:	0021      	movs	r1, r4
 800bb70:	9805      	ldr	r0, [sp, #20]
 800bb72:	f000 fa0b 	bl	800bf8c <_Bfree>
 800bb76:	2300      	movs	r3, #0
 800bb78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb7a:	2650      	movs	r6, #80	; 0x50
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	e71e      	b.n	800b9be <__gethex+0x132>
 800bb80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1f3      	bne.n	800bb6e <__gethex+0x2e2>
 800bb86:	e7dd      	b.n	800bb44 <__gethex+0x2b8>
 800bb88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1da      	bne.n	800bb44 <__gethex+0x2b8>
 800bb8e:	e7ee      	b.n	800bb6e <__gethex+0x2e2>
 800bb90:	0800dc70 	.word	0x0800dc70
 800bb94:	0800dbf7 	.word	0x0800dbf7
 800bb98:	0800dc08 	.word	0x0800dc08
 800bb9c:	1e77      	subs	r7, r6, #1
 800bb9e:	2d00      	cmp	r5, #0
 800bba0:	d12f      	bne.n	800bc02 <__gethex+0x376>
 800bba2:	2f00      	cmp	r7, #0
 800bba4:	d004      	beq.n	800bbb0 <__gethex+0x324>
 800bba6:	0039      	movs	r1, r7
 800bba8:	0020      	movs	r0, r4
 800bbaa:	f000 fe51 	bl	800c850 <__any_on>
 800bbae:	0005      	movs	r5, r0
 800bbb0:	231f      	movs	r3, #31
 800bbb2:	117a      	asrs	r2, r7, #5
 800bbb4:	401f      	ands	r7, r3
 800bbb6:	3b1e      	subs	r3, #30
 800bbb8:	40bb      	lsls	r3, r7
 800bbba:	9904      	ldr	r1, [sp, #16]
 800bbbc:	0092      	lsls	r2, r2, #2
 800bbbe:	5852      	ldr	r2, [r2, r1]
 800bbc0:	421a      	tst	r2, r3
 800bbc2:	d001      	beq.n	800bbc8 <__gethex+0x33c>
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	431d      	orrs	r5, r3
 800bbc8:	9b01      	ldr	r3, [sp, #4]
 800bbca:	0031      	movs	r1, r6
 800bbcc:	1b9b      	subs	r3, r3, r6
 800bbce:	2602      	movs	r6, #2
 800bbd0:	0020      	movs	r0, r4
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	f7ff fdf0 	bl	800b7b8 <rshift>
 800bbd8:	9b02      	ldr	r3, [sp, #8]
 800bbda:	685f      	ldr	r7, [r3, #4]
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	d041      	beq.n	800bc64 <__gethex+0x3d8>
 800bbe0:	9b02      	ldr	r3, [sp, #8]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d010      	beq.n	800bc0a <__gethex+0x37e>
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d012      	beq.n	800bc12 <__gethex+0x386>
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d106      	bne.n	800bbfe <__gethex+0x372>
 800bbf0:	07aa      	lsls	r2, r5, #30
 800bbf2:	d504      	bpl.n	800bbfe <__gethex+0x372>
 800bbf4:	9a04      	ldr	r2, [sp, #16]
 800bbf6:	6810      	ldr	r0, [r2, #0]
 800bbf8:	4305      	orrs	r5, r0
 800bbfa:	421d      	tst	r5, r3
 800bbfc:	d10c      	bne.n	800bc18 <__gethex+0x38c>
 800bbfe:	2310      	movs	r3, #16
 800bc00:	e02f      	b.n	800bc62 <__gethex+0x3d6>
 800bc02:	2501      	movs	r5, #1
 800bc04:	e7d4      	b.n	800bbb0 <__gethex+0x324>
 800bc06:	2601      	movs	r6, #1
 800bc08:	e7e8      	b.n	800bbdc <__gethex+0x350>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc0e:	1a9b      	subs	r3, r3, r2
 800bc10:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d0f2      	beq.n	800bbfe <__gethex+0x372>
 800bc18:	6923      	ldr	r3, [r4, #16]
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	9303      	str	r3, [sp, #12]
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	9304      	str	r3, [sp, #16]
 800bc22:	0023      	movs	r3, r4
 800bc24:	9a04      	ldr	r2, [sp, #16]
 800bc26:	3314      	adds	r3, #20
 800bc28:	1899      	adds	r1, r3, r2
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	1c55      	adds	r5, r2, #1
 800bc2e:	d01e      	beq.n	800bc6e <__gethex+0x3e2>
 800bc30:	3201      	adds	r2, #1
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	0023      	movs	r3, r4
 800bc36:	3314      	adds	r3, #20
 800bc38:	2e02      	cmp	r6, #2
 800bc3a:	d140      	bne.n	800bcbe <__gethex+0x432>
 800bc3c:	9a02      	ldr	r2, [sp, #8]
 800bc3e:	9901      	ldr	r1, [sp, #4]
 800bc40:	6812      	ldr	r2, [r2, #0]
 800bc42:	3a01      	subs	r2, #1
 800bc44:	428a      	cmp	r2, r1
 800bc46:	d10b      	bne.n	800bc60 <__gethex+0x3d4>
 800bc48:	114a      	asrs	r2, r1, #5
 800bc4a:	211f      	movs	r1, #31
 800bc4c:	9801      	ldr	r0, [sp, #4]
 800bc4e:	0092      	lsls	r2, r2, #2
 800bc50:	4001      	ands	r1, r0
 800bc52:	2001      	movs	r0, #1
 800bc54:	0005      	movs	r5, r0
 800bc56:	408d      	lsls	r5, r1
 800bc58:	58d3      	ldr	r3, [r2, r3]
 800bc5a:	422b      	tst	r3, r5
 800bc5c:	d000      	beq.n	800bc60 <__gethex+0x3d4>
 800bc5e:	2601      	movs	r6, #1
 800bc60:	2320      	movs	r3, #32
 800bc62:	431e      	orrs	r6, r3
 800bc64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc66:	601c      	str	r4, [r3, #0]
 800bc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc6a:	601f      	str	r7, [r3, #0]
 800bc6c:	e6a7      	b.n	800b9be <__gethex+0x132>
 800bc6e:	c301      	stmia	r3!, {r0}
 800bc70:	4299      	cmp	r1, r3
 800bc72:	d8da      	bhi.n	800bc2a <__gethex+0x39e>
 800bc74:	9b03      	ldr	r3, [sp, #12]
 800bc76:	68a2      	ldr	r2, [r4, #8]
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	db17      	blt.n	800bcac <__gethex+0x420>
 800bc7c:	6863      	ldr	r3, [r4, #4]
 800bc7e:	9805      	ldr	r0, [sp, #20]
 800bc80:	1c59      	adds	r1, r3, #1
 800bc82:	f000 f93f 	bl	800bf04 <_Balloc>
 800bc86:	1e05      	subs	r5, r0, #0
 800bc88:	d103      	bne.n	800bc92 <__gethex+0x406>
 800bc8a:	0002      	movs	r2, r0
 800bc8c:	2184      	movs	r1, #132	; 0x84
 800bc8e:	4b1c      	ldr	r3, [pc, #112]	; (800bd00 <__gethex+0x474>)
 800bc90:	e6b8      	b.n	800ba04 <__gethex+0x178>
 800bc92:	0021      	movs	r1, r4
 800bc94:	6923      	ldr	r3, [r4, #16]
 800bc96:	310c      	adds	r1, #12
 800bc98:	1c9a      	adds	r2, r3, #2
 800bc9a:	0092      	lsls	r2, r2, #2
 800bc9c:	300c      	adds	r0, #12
 800bc9e:	f7fd f873 	bl	8008d88 <memcpy>
 800bca2:	0021      	movs	r1, r4
 800bca4:	9805      	ldr	r0, [sp, #20]
 800bca6:	f000 f971 	bl	800bf8c <_Bfree>
 800bcaa:	002c      	movs	r4, r5
 800bcac:	6923      	ldr	r3, [r4, #16]
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	6122      	str	r2, [r4, #16]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	18e3      	adds	r3, r4, r3
 800bcba:	605a      	str	r2, [r3, #4]
 800bcbc:	e7ba      	b.n	800bc34 <__gethex+0x3a8>
 800bcbe:	6922      	ldr	r2, [r4, #16]
 800bcc0:	9903      	ldr	r1, [sp, #12]
 800bcc2:	428a      	cmp	r2, r1
 800bcc4:	dd09      	ble.n	800bcda <__gethex+0x44e>
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	0020      	movs	r0, r4
 800bcca:	f7ff fd75 	bl	800b7b8 <rshift>
 800bcce:	9b02      	ldr	r3, [sp, #8]
 800bcd0:	3701      	adds	r7, #1
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	42bb      	cmp	r3, r7
 800bcd6:	dac2      	bge.n	800bc5e <__gethex+0x3d2>
 800bcd8:	e6dc      	b.n	800ba94 <__gethex+0x208>
 800bcda:	221f      	movs	r2, #31
 800bcdc:	9d01      	ldr	r5, [sp, #4]
 800bcde:	9901      	ldr	r1, [sp, #4]
 800bce0:	2601      	movs	r6, #1
 800bce2:	4015      	ands	r5, r2
 800bce4:	4211      	tst	r1, r2
 800bce6:	d0bb      	beq.n	800bc60 <__gethex+0x3d4>
 800bce8:	9a04      	ldr	r2, [sp, #16]
 800bcea:	189b      	adds	r3, r3, r2
 800bcec:	3b04      	subs	r3, #4
 800bcee:	6818      	ldr	r0, [r3, #0]
 800bcf0:	f000 fa00 	bl	800c0f4 <__hi0bits>
 800bcf4:	2320      	movs	r3, #32
 800bcf6:	1b5d      	subs	r5, r3, r5
 800bcf8:	42a8      	cmp	r0, r5
 800bcfa:	dbe4      	blt.n	800bcc6 <__gethex+0x43a>
 800bcfc:	e7b0      	b.n	800bc60 <__gethex+0x3d4>
 800bcfe:	46c0      	nop			; (mov r8, r8)
 800bd00:	0800dbf7 	.word	0x0800dbf7

0800bd04 <L_shift>:
 800bd04:	2308      	movs	r3, #8
 800bd06:	b570      	push	{r4, r5, r6, lr}
 800bd08:	2520      	movs	r5, #32
 800bd0a:	1a9a      	subs	r2, r3, r2
 800bd0c:	0092      	lsls	r2, r2, #2
 800bd0e:	1aad      	subs	r5, r5, r2
 800bd10:	6843      	ldr	r3, [r0, #4]
 800bd12:	6806      	ldr	r6, [r0, #0]
 800bd14:	001c      	movs	r4, r3
 800bd16:	40ac      	lsls	r4, r5
 800bd18:	40d3      	lsrs	r3, r2
 800bd1a:	4334      	orrs	r4, r6
 800bd1c:	6004      	str	r4, [r0, #0]
 800bd1e:	6043      	str	r3, [r0, #4]
 800bd20:	3004      	adds	r0, #4
 800bd22:	4288      	cmp	r0, r1
 800bd24:	d3f4      	bcc.n	800bd10 <L_shift+0xc>
 800bd26:	bd70      	pop	{r4, r5, r6, pc}

0800bd28 <__match>:
 800bd28:	b530      	push	{r4, r5, lr}
 800bd2a:	6803      	ldr	r3, [r0, #0]
 800bd2c:	780c      	ldrb	r4, [r1, #0]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	2c00      	cmp	r4, #0
 800bd32:	d102      	bne.n	800bd3a <__match+0x12>
 800bd34:	6003      	str	r3, [r0, #0]
 800bd36:	2001      	movs	r0, #1
 800bd38:	bd30      	pop	{r4, r5, pc}
 800bd3a:	781a      	ldrb	r2, [r3, #0]
 800bd3c:	0015      	movs	r5, r2
 800bd3e:	3d41      	subs	r5, #65	; 0x41
 800bd40:	2d19      	cmp	r5, #25
 800bd42:	d800      	bhi.n	800bd46 <__match+0x1e>
 800bd44:	3220      	adds	r2, #32
 800bd46:	3101      	adds	r1, #1
 800bd48:	42a2      	cmp	r2, r4
 800bd4a:	d0ef      	beq.n	800bd2c <__match+0x4>
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	e7f3      	b.n	800bd38 <__match+0x10>

0800bd50 <__hexnan>:
 800bd50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd52:	680b      	ldr	r3, [r1, #0]
 800bd54:	b08b      	sub	sp, #44	; 0x2c
 800bd56:	9201      	str	r2, [sp, #4]
 800bd58:	9901      	ldr	r1, [sp, #4]
 800bd5a:	115a      	asrs	r2, r3, #5
 800bd5c:	0092      	lsls	r2, r2, #2
 800bd5e:	188a      	adds	r2, r1, r2
 800bd60:	9202      	str	r2, [sp, #8]
 800bd62:	0019      	movs	r1, r3
 800bd64:	221f      	movs	r2, #31
 800bd66:	4011      	ands	r1, r2
 800bd68:	9008      	str	r0, [sp, #32]
 800bd6a:	9106      	str	r1, [sp, #24]
 800bd6c:	4213      	tst	r3, r2
 800bd6e:	d002      	beq.n	800bd76 <__hexnan+0x26>
 800bd70:	9b02      	ldr	r3, [sp, #8]
 800bd72:	3304      	adds	r3, #4
 800bd74:	9302      	str	r3, [sp, #8]
 800bd76:	9b02      	ldr	r3, [sp, #8]
 800bd78:	2500      	movs	r5, #0
 800bd7a:	1f1e      	subs	r6, r3, #4
 800bd7c:	0037      	movs	r7, r6
 800bd7e:	0034      	movs	r4, r6
 800bd80:	9b08      	ldr	r3, [sp, #32]
 800bd82:	6035      	str	r5, [r6, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	9507      	str	r5, [sp, #28]
 800bd88:	9305      	str	r3, [sp, #20]
 800bd8a:	9503      	str	r5, [sp, #12]
 800bd8c:	9b05      	ldr	r3, [sp, #20]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	9309      	str	r3, [sp, #36]	; 0x24
 800bd92:	9b05      	ldr	r3, [sp, #20]
 800bd94:	785b      	ldrb	r3, [r3, #1]
 800bd96:	9304      	str	r3, [sp, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d028      	beq.n	800bdee <__hexnan+0x9e>
 800bd9c:	9804      	ldr	r0, [sp, #16]
 800bd9e:	f7ff fd5f 	bl	800b860 <__hexdig_fun>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d154      	bne.n	800be50 <__hexnan+0x100>
 800bda6:	9b04      	ldr	r3, [sp, #16]
 800bda8:	2b20      	cmp	r3, #32
 800bdaa:	d819      	bhi.n	800bde0 <__hexnan+0x90>
 800bdac:	9b03      	ldr	r3, [sp, #12]
 800bdae:	9a07      	ldr	r2, [sp, #28]
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	dd12      	ble.n	800bdda <__hexnan+0x8a>
 800bdb4:	42bc      	cmp	r4, r7
 800bdb6:	d206      	bcs.n	800bdc6 <__hexnan+0x76>
 800bdb8:	2d07      	cmp	r5, #7
 800bdba:	dc04      	bgt.n	800bdc6 <__hexnan+0x76>
 800bdbc:	002a      	movs	r2, r5
 800bdbe:	0039      	movs	r1, r7
 800bdc0:	0020      	movs	r0, r4
 800bdc2:	f7ff ff9f 	bl	800bd04 <L_shift>
 800bdc6:	9b01      	ldr	r3, [sp, #4]
 800bdc8:	2508      	movs	r5, #8
 800bdca:	429c      	cmp	r4, r3
 800bdcc:	d905      	bls.n	800bdda <__hexnan+0x8a>
 800bdce:	1f27      	subs	r7, r4, #4
 800bdd0:	2500      	movs	r5, #0
 800bdd2:	003c      	movs	r4, r7
 800bdd4:	9b03      	ldr	r3, [sp, #12]
 800bdd6:	603d      	str	r5, [r7, #0]
 800bdd8:	9307      	str	r3, [sp, #28]
 800bdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	e7d5      	b.n	800bd8c <__hexnan+0x3c>
 800bde0:	9b04      	ldr	r3, [sp, #16]
 800bde2:	2b29      	cmp	r3, #41	; 0x29
 800bde4:	d159      	bne.n	800be9a <__hexnan+0x14a>
 800bde6:	9b05      	ldr	r3, [sp, #20]
 800bde8:	9a08      	ldr	r2, [sp, #32]
 800bdea:	3302      	adds	r3, #2
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	9b03      	ldr	r3, [sp, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d052      	beq.n	800be9a <__hexnan+0x14a>
 800bdf4:	42bc      	cmp	r4, r7
 800bdf6:	d206      	bcs.n	800be06 <__hexnan+0xb6>
 800bdf8:	2d07      	cmp	r5, #7
 800bdfa:	dc04      	bgt.n	800be06 <__hexnan+0xb6>
 800bdfc:	002a      	movs	r2, r5
 800bdfe:	0039      	movs	r1, r7
 800be00:	0020      	movs	r0, r4
 800be02:	f7ff ff7f 	bl	800bd04 <L_shift>
 800be06:	9b01      	ldr	r3, [sp, #4]
 800be08:	429c      	cmp	r4, r3
 800be0a:	d935      	bls.n	800be78 <__hexnan+0x128>
 800be0c:	001a      	movs	r2, r3
 800be0e:	0023      	movs	r3, r4
 800be10:	cb02      	ldmia	r3!, {r1}
 800be12:	c202      	stmia	r2!, {r1}
 800be14:	429e      	cmp	r6, r3
 800be16:	d2fb      	bcs.n	800be10 <__hexnan+0xc0>
 800be18:	9b02      	ldr	r3, [sp, #8]
 800be1a:	1c61      	adds	r1, r4, #1
 800be1c:	1eda      	subs	r2, r3, #3
 800be1e:	2304      	movs	r3, #4
 800be20:	4291      	cmp	r1, r2
 800be22:	d805      	bhi.n	800be30 <__hexnan+0xe0>
 800be24:	9b02      	ldr	r3, [sp, #8]
 800be26:	3b04      	subs	r3, #4
 800be28:	1b1b      	subs	r3, r3, r4
 800be2a:	089b      	lsrs	r3, r3, #2
 800be2c:	3301      	adds	r3, #1
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	9a01      	ldr	r2, [sp, #4]
 800be32:	18d3      	adds	r3, r2, r3
 800be34:	2200      	movs	r2, #0
 800be36:	c304      	stmia	r3!, {r2}
 800be38:	429e      	cmp	r6, r3
 800be3a:	d2fc      	bcs.n	800be36 <__hexnan+0xe6>
 800be3c:	6833      	ldr	r3, [r6, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d104      	bne.n	800be4c <__hexnan+0xfc>
 800be42:	9b01      	ldr	r3, [sp, #4]
 800be44:	429e      	cmp	r6, r3
 800be46:	d126      	bne.n	800be96 <__hexnan+0x146>
 800be48:	2301      	movs	r3, #1
 800be4a:	6033      	str	r3, [r6, #0]
 800be4c:	2005      	movs	r0, #5
 800be4e:	e025      	b.n	800be9c <__hexnan+0x14c>
 800be50:	9b03      	ldr	r3, [sp, #12]
 800be52:	3501      	adds	r5, #1
 800be54:	3301      	adds	r3, #1
 800be56:	9303      	str	r3, [sp, #12]
 800be58:	2d08      	cmp	r5, #8
 800be5a:	dd06      	ble.n	800be6a <__hexnan+0x11a>
 800be5c:	9b01      	ldr	r3, [sp, #4]
 800be5e:	429c      	cmp	r4, r3
 800be60:	d9bb      	bls.n	800bdda <__hexnan+0x8a>
 800be62:	2300      	movs	r3, #0
 800be64:	2501      	movs	r5, #1
 800be66:	3c04      	subs	r4, #4
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	220f      	movs	r2, #15
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	4010      	ands	r0, r2
 800be70:	011b      	lsls	r3, r3, #4
 800be72:	4318      	orrs	r0, r3
 800be74:	6020      	str	r0, [r4, #0]
 800be76:	e7b0      	b.n	800bdda <__hexnan+0x8a>
 800be78:	9b06      	ldr	r3, [sp, #24]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0de      	beq.n	800be3c <__hexnan+0xec>
 800be7e:	2120      	movs	r1, #32
 800be80:	9a06      	ldr	r2, [sp, #24]
 800be82:	9b02      	ldr	r3, [sp, #8]
 800be84:	1a89      	subs	r1, r1, r2
 800be86:	2201      	movs	r2, #1
 800be88:	4252      	negs	r2, r2
 800be8a:	40ca      	lsrs	r2, r1
 800be8c:	3b04      	subs	r3, #4
 800be8e:	6819      	ldr	r1, [r3, #0]
 800be90:	400a      	ands	r2, r1
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	e7d2      	b.n	800be3c <__hexnan+0xec>
 800be96:	3e04      	subs	r6, #4
 800be98:	e7d0      	b.n	800be3c <__hexnan+0xec>
 800be9a:	2004      	movs	r0, #4
 800be9c:	b00b      	add	sp, #44	; 0x2c
 800be9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bea0 <_localeconv_r>:
 800bea0:	4800      	ldr	r0, [pc, #0]	; (800bea4 <_localeconv_r+0x4>)
 800bea2:	4770      	bx	lr
 800bea4:	20000164 	.word	0x20000164

0800bea8 <__ascii_mbtowc>:
 800bea8:	b082      	sub	sp, #8
 800beaa:	2900      	cmp	r1, #0
 800beac:	d100      	bne.n	800beb0 <__ascii_mbtowc+0x8>
 800beae:	a901      	add	r1, sp, #4
 800beb0:	1e10      	subs	r0, r2, #0
 800beb2:	d006      	beq.n	800bec2 <__ascii_mbtowc+0x1a>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d006      	beq.n	800bec6 <__ascii_mbtowc+0x1e>
 800beb8:	7813      	ldrb	r3, [r2, #0]
 800beba:	600b      	str	r3, [r1, #0]
 800bebc:	7810      	ldrb	r0, [r2, #0]
 800bebe:	1e43      	subs	r3, r0, #1
 800bec0:	4198      	sbcs	r0, r3
 800bec2:	b002      	add	sp, #8
 800bec4:	4770      	bx	lr
 800bec6:	2002      	movs	r0, #2
 800bec8:	4240      	negs	r0, r0
 800beca:	e7fa      	b.n	800bec2 <__ascii_mbtowc+0x1a>

0800becc <memchr>:
 800becc:	b2c9      	uxtb	r1, r1
 800bece:	1882      	adds	r2, r0, r2
 800bed0:	4290      	cmp	r0, r2
 800bed2:	d101      	bne.n	800bed8 <memchr+0xc>
 800bed4:	2000      	movs	r0, #0
 800bed6:	4770      	bx	lr
 800bed8:	7803      	ldrb	r3, [r0, #0]
 800beda:	428b      	cmp	r3, r1
 800bedc:	d0fb      	beq.n	800bed6 <memchr+0xa>
 800bede:	3001      	adds	r0, #1
 800bee0:	e7f6      	b.n	800bed0 <memchr+0x4>
	...

0800bee4 <__malloc_lock>:
 800bee4:	b510      	push	{r4, lr}
 800bee6:	4802      	ldr	r0, [pc, #8]	; (800bef0 <__malloc_lock+0xc>)
 800bee8:	f000 feb9 	bl	800cc5e <__retarget_lock_acquire_recursive>
 800beec:	bd10      	pop	{r4, pc}
 800beee:	46c0      	nop			; (mov r8, r8)
 800bef0:	20000540 	.word	0x20000540

0800bef4 <__malloc_unlock>:
 800bef4:	b510      	push	{r4, lr}
 800bef6:	4802      	ldr	r0, [pc, #8]	; (800bf00 <__malloc_unlock+0xc>)
 800bef8:	f000 feb2 	bl	800cc60 <__retarget_lock_release_recursive>
 800befc:	bd10      	pop	{r4, pc}
 800befe:	46c0      	nop			; (mov r8, r8)
 800bf00:	20000540 	.word	0x20000540

0800bf04 <_Balloc>:
 800bf04:	b570      	push	{r4, r5, r6, lr}
 800bf06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf08:	0006      	movs	r6, r0
 800bf0a:	000c      	movs	r4, r1
 800bf0c:	2d00      	cmp	r5, #0
 800bf0e:	d10e      	bne.n	800bf2e <_Balloc+0x2a>
 800bf10:	2010      	movs	r0, #16
 800bf12:	f7fc ff2f 	bl	8008d74 <malloc>
 800bf16:	1e02      	subs	r2, r0, #0
 800bf18:	6270      	str	r0, [r6, #36]	; 0x24
 800bf1a:	d104      	bne.n	800bf26 <_Balloc+0x22>
 800bf1c:	2166      	movs	r1, #102	; 0x66
 800bf1e:	4b19      	ldr	r3, [pc, #100]	; (800bf84 <_Balloc+0x80>)
 800bf20:	4819      	ldr	r0, [pc, #100]	; (800bf88 <_Balloc+0x84>)
 800bf22:	f000 fe6d 	bl	800cc00 <__assert_func>
 800bf26:	6045      	str	r5, [r0, #4]
 800bf28:	6085      	str	r5, [r0, #8]
 800bf2a:	6005      	str	r5, [r0, #0]
 800bf2c:	60c5      	str	r5, [r0, #12]
 800bf2e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800bf30:	68eb      	ldr	r3, [r5, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d013      	beq.n	800bf5e <_Balloc+0x5a>
 800bf36:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bf38:	00a2      	lsls	r2, r4, #2
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	189b      	adds	r3, r3, r2
 800bf3e:	6818      	ldr	r0, [r3, #0]
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d118      	bne.n	800bf76 <_Balloc+0x72>
 800bf44:	2101      	movs	r1, #1
 800bf46:	000d      	movs	r5, r1
 800bf48:	40a5      	lsls	r5, r4
 800bf4a:	1d6a      	adds	r2, r5, #5
 800bf4c:	0030      	movs	r0, r6
 800bf4e:	0092      	lsls	r2, r2, #2
 800bf50:	f000 fca1 	bl	800c896 <_calloc_r>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d00c      	beq.n	800bf72 <_Balloc+0x6e>
 800bf58:	6044      	str	r4, [r0, #4]
 800bf5a:	6085      	str	r5, [r0, #8]
 800bf5c:	e00d      	b.n	800bf7a <_Balloc+0x76>
 800bf5e:	2221      	movs	r2, #33	; 0x21
 800bf60:	2104      	movs	r1, #4
 800bf62:	0030      	movs	r0, r6
 800bf64:	f000 fc97 	bl	800c896 <_calloc_r>
 800bf68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bf6a:	60e8      	str	r0, [r5, #12]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e1      	bne.n	800bf36 <_Balloc+0x32>
 800bf72:	2000      	movs	r0, #0
 800bf74:	bd70      	pop	{r4, r5, r6, pc}
 800bf76:	6802      	ldr	r2, [r0, #0]
 800bf78:	601a      	str	r2, [r3, #0]
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	6103      	str	r3, [r0, #16]
 800bf7e:	60c3      	str	r3, [r0, #12]
 800bf80:	e7f8      	b.n	800bf74 <_Balloc+0x70>
 800bf82:	46c0      	nop			; (mov r8, r8)
 800bf84:	0800db85 	.word	0x0800db85
 800bf88:	0800dc84 	.word	0x0800dc84

0800bf8c <_Bfree>:
 800bf8c:	b570      	push	{r4, r5, r6, lr}
 800bf8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf90:	0005      	movs	r5, r0
 800bf92:	000c      	movs	r4, r1
 800bf94:	2e00      	cmp	r6, #0
 800bf96:	d10e      	bne.n	800bfb6 <_Bfree+0x2a>
 800bf98:	2010      	movs	r0, #16
 800bf9a:	f7fc feeb 	bl	8008d74 <malloc>
 800bf9e:	1e02      	subs	r2, r0, #0
 800bfa0:	6268      	str	r0, [r5, #36]	; 0x24
 800bfa2:	d104      	bne.n	800bfae <_Bfree+0x22>
 800bfa4:	218a      	movs	r1, #138	; 0x8a
 800bfa6:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <_Bfree+0x40>)
 800bfa8:	4809      	ldr	r0, [pc, #36]	; (800bfd0 <_Bfree+0x44>)
 800bfaa:	f000 fe29 	bl	800cc00 <__assert_func>
 800bfae:	6046      	str	r6, [r0, #4]
 800bfb0:	6086      	str	r6, [r0, #8]
 800bfb2:	6006      	str	r6, [r0, #0]
 800bfb4:	60c6      	str	r6, [r0, #12]
 800bfb6:	2c00      	cmp	r4, #0
 800bfb8:	d007      	beq.n	800bfca <_Bfree+0x3e>
 800bfba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfbc:	6862      	ldr	r2, [r4, #4]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	0092      	lsls	r2, r2, #2
 800bfc2:	189b      	adds	r3, r3, r2
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	6022      	str	r2, [r4, #0]
 800bfc8:	601c      	str	r4, [r3, #0]
 800bfca:	bd70      	pop	{r4, r5, r6, pc}
 800bfcc:	0800db85 	.word	0x0800db85
 800bfd0:	0800dc84 	.word	0x0800dc84

0800bfd4 <__multadd>:
 800bfd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfd6:	000e      	movs	r6, r1
 800bfd8:	9001      	str	r0, [sp, #4]
 800bfda:	000c      	movs	r4, r1
 800bfdc:	001d      	movs	r5, r3
 800bfde:	2000      	movs	r0, #0
 800bfe0:	690f      	ldr	r7, [r1, #16]
 800bfe2:	3614      	adds	r6, #20
 800bfe4:	6833      	ldr	r3, [r6, #0]
 800bfe6:	3001      	adds	r0, #1
 800bfe8:	b299      	uxth	r1, r3
 800bfea:	4351      	muls	r1, r2
 800bfec:	0c1b      	lsrs	r3, r3, #16
 800bfee:	4353      	muls	r3, r2
 800bff0:	1949      	adds	r1, r1, r5
 800bff2:	0c0d      	lsrs	r5, r1, #16
 800bff4:	195b      	adds	r3, r3, r5
 800bff6:	0c1d      	lsrs	r5, r3, #16
 800bff8:	b289      	uxth	r1, r1
 800bffa:	041b      	lsls	r3, r3, #16
 800bffc:	185b      	adds	r3, r3, r1
 800bffe:	c608      	stmia	r6!, {r3}
 800c000:	4287      	cmp	r7, r0
 800c002:	dcef      	bgt.n	800bfe4 <__multadd+0x10>
 800c004:	2d00      	cmp	r5, #0
 800c006:	d022      	beq.n	800c04e <__multadd+0x7a>
 800c008:	68a3      	ldr	r3, [r4, #8]
 800c00a:	42bb      	cmp	r3, r7
 800c00c:	dc19      	bgt.n	800c042 <__multadd+0x6e>
 800c00e:	6863      	ldr	r3, [r4, #4]
 800c010:	9801      	ldr	r0, [sp, #4]
 800c012:	1c59      	adds	r1, r3, #1
 800c014:	f7ff ff76 	bl	800bf04 <_Balloc>
 800c018:	1e06      	subs	r6, r0, #0
 800c01a:	d105      	bne.n	800c028 <__multadd+0x54>
 800c01c:	0002      	movs	r2, r0
 800c01e:	21b5      	movs	r1, #181	; 0xb5
 800c020:	4b0c      	ldr	r3, [pc, #48]	; (800c054 <__multadd+0x80>)
 800c022:	480d      	ldr	r0, [pc, #52]	; (800c058 <__multadd+0x84>)
 800c024:	f000 fdec 	bl	800cc00 <__assert_func>
 800c028:	0021      	movs	r1, r4
 800c02a:	6923      	ldr	r3, [r4, #16]
 800c02c:	310c      	adds	r1, #12
 800c02e:	1c9a      	adds	r2, r3, #2
 800c030:	0092      	lsls	r2, r2, #2
 800c032:	300c      	adds	r0, #12
 800c034:	f7fc fea8 	bl	8008d88 <memcpy>
 800c038:	0021      	movs	r1, r4
 800c03a:	9801      	ldr	r0, [sp, #4]
 800c03c:	f7ff ffa6 	bl	800bf8c <_Bfree>
 800c040:	0034      	movs	r4, r6
 800c042:	1d3b      	adds	r3, r7, #4
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	18e3      	adds	r3, r4, r3
 800c048:	605d      	str	r5, [r3, #4]
 800c04a:	1c7b      	adds	r3, r7, #1
 800c04c:	6123      	str	r3, [r4, #16]
 800c04e:	0020      	movs	r0, r4
 800c050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c052:	46c0      	nop			; (mov r8, r8)
 800c054:	0800dbf7 	.word	0x0800dbf7
 800c058:	0800dc84 	.word	0x0800dc84

0800c05c <__s2b>:
 800c05c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c05e:	0006      	movs	r6, r0
 800c060:	0018      	movs	r0, r3
 800c062:	000c      	movs	r4, r1
 800c064:	3008      	adds	r0, #8
 800c066:	2109      	movs	r1, #9
 800c068:	9301      	str	r3, [sp, #4]
 800c06a:	0015      	movs	r5, r2
 800c06c:	f7f4 f8f0 	bl	8000250 <__divsi3>
 800c070:	2301      	movs	r3, #1
 800c072:	2100      	movs	r1, #0
 800c074:	4283      	cmp	r3, r0
 800c076:	db0a      	blt.n	800c08e <__s2b+0x32>
 800c078:	0030      	movs	r0, r6
 800c07a:	f7ff ff43 	bl	800bf04 <_Balloc>
 800c07e:	1e01      	subs	r1, r0, #0
 800c080:	d108      	bne.n	800c094 <__s2b+0x38>
 800c082:	0002      	movs	r2, r0
 800c084:	4b19      	ldr	r3, [pc, #100]	; (800c0ec <__s2b+0x90>)
 800c086:	481a      	ldr	r0, [pc, #104]	; (800c0f0 <__s2b+0x94>)
 800c088:	31ce      	adds	r1, #206	; 0xce
 800c08a:	f000 fdb9 	bl	800cc00 <__assert_func>
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	3101      	adds	r1, #1
 800c092:	e7ef      	b.n	800c074 <__s2b+0x18>
 800c094:	9b08      	ldr	r3, [sp, #32]
 800c096:	6143      	str	r3, [r0, #20]
 800c098:	2301      	movs	r3, #1
 800c09a:	6103      	str	r3, [r0, #16]
 800c09c:	2d09      	cmp	r5, #9
 800c09e:	dd18      	ble.n	800c0d2 <__s2b+0x76>
 800c0a0:	0023      	movs	r3, r4
 800c0a2:	3309      	adds	r3, #9
 800c0a4:	001f      	movs	r7, r3
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	1964      	adds	r4, r4, r5
 800c0aa:	783b      	ldrb	r3, [r7, #0]
 800c0ac:	220a      	movs	r2, #10
 800c0ae:	0030      	movs	r0, r6
 800c0b0:	3b30      	subs	r3, #48	; 0x30
 800c0b2:	f7ff ff8f 	bl	800bfd4 <__multadd>
 800c0b6:	3701      	adds	r7, #1
 800c0b8:	0001      	movs	r1, r0
 800c0ba:	42a7      	cmp	r7, r4
 800c0bc:	d1f5      	bne.n	800c0aa <__s2b+0x4e>
 800c0be:	002c      	movs	r4, r5
 800c0c0:	9b00      	ldr	r3, [sp, #0]
 800c0c2:	3c08      	subs	r4, #8
 800c0c4:	191c      	adds	r4, r3, r4
 800c0c6:	002f      	movs	r7, r5
 800c0c8:	9b01      	ldr	r3, [sp, #4]
 800c0ca:	429f      	cmp	r7, r3
 800c0cc:	db04      	blt.n	800c0d8 <__s2b+0x7c>
 800c0ce:	0008      	movs	r0, r1
 800c0d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c0d2:	2509      	movs	r5, #9
 800c0d4:	340a      	adds	r4, #10
 800c0d6:	e7f6      	b.n	800c0c6 <__s2b+0x6a>
 800c0d8:	1b63      	subs	r3, r4, r5
 800c0da:	5ddb      	ldrb	r3, [r3, r7]
 800c0dc:	220a      	movs	r2, #10
 800c0de:	0030      	movs	r0, r6
 800c0e0:	3b30      	subs	r3, #48	; 0x30
 800c0e2:	f7ff ff77 	bl	800bfd4 <__multadd>
 800c0e6:	3701      	adds	r7, #1
 800c0e8:	0001      	movs	r1, r0
 800c0ea:	e7ed      	b.n	800c0c8 <__s2b+0x6c>
 800c0ec:	0800dbf7 	.word	0x0800dbf7
 800c0f0:	0800dc84 	.word	0x0800dc84

0800c0f4 <__hi0bits>:
 800c0f4:	0003      	movs	r3, r0
 800c0f6:	0c02      	lsrs	r2, r0, #16
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	4282      	cmp	r2, r0
 800c0fc:	d101      	bne.n	800c102 <__hi0bits+0xe>
 800c0fe:	041b      	lsls	r3, r3, #16
 800c100:	3010      	adds	r0, #16
 800c102:	0e1a      	lsrs	r2, r3, #24
 800c104:	d101      	bne.n	800c10a <__hi0bits+0x16>
 800c106:	3008      	adds	r0, #8
 800c108:	021b      	lsls	r3, r3, #8
 800c10a:	0f1a      	lsrs	r2, r3, #28
 800c10c:	d101      	bne.n	800c112 <__hi0bits+0x1e>
 800c10e:	3004      	adds	r0, #4
 800c110:	011b      	lsls	r3, r3, #4
 800c112:	0f9a      	lsrs	r2, r3, #30
 800c114:	d101      	bne.n	800c11a <__hi0bits+0x26>
 800c116:	3002      	adds	r0, #2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	db03      	blt.n	800c126 <__hi0bits+0x32>
 800c11e:	3001      	adds	r0, #1
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	d400      	bmi.n	800c126 <__hi0bits+0x32>
 800c124:	2020      	movs	r0, #32
 800c126:	4770      	bx	lr

0800c128 <__lo0bits>:
 800c128:	6803      	ldr	r3, [r0, #0]
 800c12a:	0002      	movs	r2, r0
 800c12c:	2107      	movs	r1, #7
 800c12e:	0018      	movs	r0, r3
 800c130:	4008      	ands	r0, r1
 800c132:	420b      	tst	r3, r1
 800c134:	d00d      	beq.n	800c152 <__lo0bits+0x2a>
 800c136:	3906      	subs	r1, #6
 800c138:	2000      	movs	r0, #0
 800c13a:	420b      	tst	r3, r1
 800c13c:	d105      	bne.n	800c14a <__lo0bits+0x22>
 800c13e:	3002      	adds	r0, #2
 800c140:	4203      	tst	r3, r0
 800c142:	d003      	beq.n	800c14c <__lo0bits+0x24>
 800c144:	40cb      	lsrs	r3, r1
 800c146:	0008      	movs	r0, r1
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	4770      	bx	lr
 800c14c:	089b      	lsrs	r3, r3, #2
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	e7fb      	b.n	800c14a <__lo0bits+0x22>
 800c152:	b299      	uxth	r1, r3
 800c154:	2900      	cmp	r1, #0
 800c156:	d101      	bne.n	800c15c <__lo0bits+0x34>
 800c158:	2010      	movs	r0, #16
 800c15a:	0c1b      	lsrs	r3, r3, #16
 800c15c:	b2d9      	uxtb	r1, r3
 800c15e:	2900      	cmp	r1, #0
 800c160:	d101      	bne.n	800c166 <__lo0bits+0x3e>
 800c162:	3008      	adds	r0, #8
 800c164:	0a1b      	lsrs	r3, r3, #8
 800c166:	0719      	lsls	r1, r3, #28
 800c168:	d101      	bne.n	800c16e <__lo0bits+0x46>
 800c16a:	3004      	adds	r0, #4
 800c16c:	091b      	lsrs	r3, r3, #4
 800c16e:	0799      	lsls	r1, r3, #30
 800c170:	d101      	bne.n	800c176 <__lo0bits+0x4e>
 800c172:	3002      	adds	r0, #2
 800c174:	089b      	lsrs	r3, r3, #2
 800c176:	07d9      	lsls	r1, r3, #31
 800c178:	d4e9      	bmi.n	800c14e <__lo0bits+0x26>
 800c17a:	3001      	adds	r0, #1
 800c17c:	085b      	lsrs	r3, r3, #1
 800c17e:	d1e6      	bne.n	800c14e <__lo0bits+0x26>
 800c180:	2020      	movs	r0, #32
 800c182:	e7e2      	b.n	800c14a <__lo0bits+0x22>

0800c184 <__i2b>:
 800c184:	b510      	push	{r4, lr}
 800c186:	000c      	movs	r4, r1
 800c188:	2101      	movs	r1, #1
 800c18a:	f7ff febb 	bl	800bf04 <_Balloc>
 800c18e:	2800      	cmp	r0, #0
 800c190:	d106      	bne.n	800c1a0 <__i2b+0x1c>
 800c192:	21a0      	movs	r1, #160	; 0xa0
 800c194:	0002      	movs	r2, r0
 800c196:	4b04      	ldr	r3, [pc, #16]	; (800c1a8 <__i2b+0x24>)
 800c198:	4804      	ldr	r0, [pc, #16]	; (800c1ac <__i2b+0x28>)
 800c19a:	0049      	lsls	r1, r1, #1
 800c19c:	f000 fd30 	bl	800cc00 <__assert_func>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	6144      	str	r4, [r0, #20]
 800c1a4:	6103      	str	r3, [r0, #16]
 800c1a6:	bd10      	pop	{r4, pc}
 800c1a8:	0800dbf7 	.word	0x0800dbf7
 800c1ac:	0800dc84 	.word	0x0800dc84

0800c1b0 <__multiply>:
 800c1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1b2:	690b      	ldr	r3, [r1, #16]
 800c1b4:	0014      	movs	r4, r2
 800c1b6:	6912      	ldr	r2, [r2, #16]
 800c1b8:	000d      	movs	r5, r1
 800c1ba:	b089      	sub	sp, #36	; 0x24
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	da01      	bge.n	800c1c4 <__multiply+0x14>
 800c1c0:	0025      	movs	r5, r4
 800c1c2:	000c      	movs	r4, r1
 800c1c4:	692f      	ldr	r7, [r5, #16]
 800c1c6:	6926      	ldr	r6, [r4, #16]
 800c1c8:	6869      	ldr	r1, [r5, #4]
 800c1ca:	19bb      	adds	r3, r7, r6
 800c1cc:	9302      	str	r3, [sp, #8]
 800c1ce:	68ab      	ldr	r3, [r5, #8]
 800c1d0:	19ba      	adds	r2, r7, r6
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	da00      	bge.n	800c1d8 <__multiply+0x28>
 800c1d6:	3101      	adds	r1, #1
 800c1d8:	f7ff fe94 	bl	800bf04 <_Balloc>
 800c1dc:	9001      	str	r0, [sp, #4]
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d106      	bne.n	800c1f0 <__multiply+0x40>
 800c1e2:	215e      	movs	r1, #94	; 0x5e
 800c1e4:	0002      	movs	r2, r0
 800c1e6:	4b48      	ldr	r3, [pc, #288]	; (800c308 <__multiply+0x158>)
 800c1e8:	4848      	ldr	r0, [pc, #288]	; (800c30c <__multiply+0x15c>)
 800c1ea:	31ff      	adds	r1, #255	; 0xff
 800c1ec:	f000 fd08 	bl	800cc00 <__assert_func>
 800c1f0:	9b01      	ldr	r3, [sp, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	3314      	adds	r3, #20
 800c1f6:	469c      	mov	ip, r3
 800c1f8:	19bb      	adds	r3, r7, r6
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4463      	add	r3, ip
 800c1fe:	9303      	str	r3, [sp, #12]
 800c200:	4663      	mov	r3, ip
 800c202:	9903      	ldr	r1, [sp, #12]
 800c204:	428b      	cmp	r3, r1
 800c206:	d32c      	bcc.n	800c262 <__multiply+0xb2>
 800c208:	002b      	movs	r3, r5
 800c20a:	0022      	movs	r2, r4
 800c20c:	3314      	adds	r3, #20
 800c20e:	00bf      	lsls	r7, r7, #2
 800c210:	3214      	adds	r2, #20
 800c212:	9306      	str	r3, [sp, #24]
 800c214:	00b6      	lsls	r6, r6, #2
 800c216:	19db      	adds	r3, r3, r7
 800c218:	9304      	str	r3, [sp, #16]
 800c21a:	1993      	adds	r3, r2, r6
 800c21c:	9307      	str	r3, [sp, #28]
 800c21e:	2304      	movs	r3, #4
 800c220:	9305      	str	r3, [sp, #20]
 800c222:	002b      	movs	r3, r5
 800c224:	9904      	ldr	r1, [sp, #16]
 800c226:	3315      	adds	r3, #21
 800c228:	9200      	str	r2, [sp, #0]
 800c22a:	4299      	cmp	r1, r3
 800c22c:	d305      	bcc.n	800c23a <__multiply+0x8a>
 800c22e:	1b4b      	subs	r3, r1, r5
 800c230:	3b15      	subs	r3, #21
 800c232:	089b      	lsrs	r3, r3, #2
 800c234:	3301      	adds	r3, #1
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	9305      	str	r3, [sp, #20]
 800c23a:	9b07      	ldr	r3, [sp, #28]
 800c23c:	9a00      	ldr	r2, [sp, #0]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d311      	bcc.n	800c266 <__multiply+0xb6>
 800c242:	9b02      	ldr	r3, [sp, #8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	dd06      	ble.n	800c256 <__multiply+0xa6>
 800c248:	9b03      	ldr	r3, [sp, #12]
 800c24a:	3b04      	subs	r3, #4
 800c24c:	9303      	str	r3, [sp, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d053      	beq.n	800c2fe <__multiply+0x14e>
 800c256:	9b01      	ldr	r3, [sp, #4]
 800c258:	9a02      	ldr	r2, [sp, #8]
 800c25a:	0018      	movs	r0, r3
 800c25c:	611a      	str	r2, [r3, #16]
 800c25e:	b009      	add	sp, #36	; 0x24
 800c260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c262:	c304      	stmia	r3!, {r2}
 800c264:	e7cd      	b.n	800c202 <__multiply+0x52>
 800c266:	9b00      	ldr	r3, [sp, #0]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	b298      	uxth	r0, r3
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d01b      	beq.n	800c2a8 <__multiply+0xf8>
 800c270:	4667      	mov	r7, ip
 800c272:	2400      	movs	r4, #0
 800c274:	9e06      	ldr	r6, [sp, #24]
 800c276:	ce02      	ldmia	r6!, {r1}
 800c278:	683a      	ldr	r2, [r7, #0]
 800c27a:	b28b      	uxth	r3, r1
 800c27c:	4343      	muls	r3, r0
 800c27e:	b292      	uxth	r2, r2
 800c280:	189b      	adds	r3, r3, r2
 800c282:	191b      	adds	r3, r3, r4
 800c284:	0c0c      	lsrs	r4, r1, #16
 800c286:	4344      	muls	r4, r0
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	0c11      	lsrs	r1, r2, #16
 800c28c:	1861      	adds	r1, r4, r1
 800c28e:	0c1c      	lsrs	r4, r3, #16
 800c290:	1909      	adds	r1, r1, r4
 800c292:	0c0c      	lsrs	r4, r1, #16
 800c294:	b29b      	uxth	r3, r3
 800c296:	0409      	lsls	r1, r1, #16
 800c298:	430b      	orrs	r3, r1
 800c29a:	c708      	stmia	r7!, {r3}
 800c29c:	9b04      	ldr	r3, [sp, #16]
 800c29e:	42b3      	cmp	r3, r6
 800c2a0:	d8e9      	bhi.n	800c276 <__multiply+0xc6>
 800c2a2:	4663      	mov	r3, ip
 800c2a4:	9a05      	ldr	r2, [sp, #20]
 800c2a6:	509c      	str	r4, [r3, r2]
 800c2a8:	9b00      	ldr	r3, [sp, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	0c1e      	lsrs	r6, r3, #16
 800c2ae:	d020      	beq.n	800c2f2 <__multiply+0x142>
 800c2b0:	4663      	mov	r3, ip
 800c2b2:	002c      	movs	r4, r5
 800c2b4:	4660      	mov	r0, ip
 800c2b6:	2700      	movs	r7, #0
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3414      	adds	r4, #20
 800c2bc:	6822      	ldr	r2, [r4, #0]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	b291      	uxth	r1, r2
 800c2c2:	4371      	muls	r1, r6
 800c2c4:	6802      	ldr	r2, [r0, #0]
 800c2c6:	0c12      	lsrs	r2, r2, #16
 800c2c8:	1889      	adds	r1, r1, r2
 800c2ca:	19cf      	adds	r7, r1, r7
 800c2cc:	0439      	lsls	r1, r7, #16
 800c2ce:	430b      	orrs	r3, r1
 800c2d0:	6003      	str	r3, [r0, #0]
 800c2d2:	cc02      	ldmia	r4!, {r1}
 800c2d4:	6843      	ldr	r3, [r0, #4]
 800c2d6:	0c09      	lsrs	r1, r1, #16
 800c2d8:	4371      	muls	r1, r6
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	0c3f      	lsrs	r7, r7, #16
 800c2de:	18cb      	adds	r3, r1, r3
 800c2e0:	9a04      	ldr	r2, [sp, #16]
 800c2e2:	19db      	adds	r3, r3, r7
 800c2e4:	0c1f      	lsrs	r7, r3, #16
 800c2e6:	3004      	adds	r0, #4
 800c2e8:	42a2      	cmp	r2, r4
 800c2ea:	d8e7      	bhi.n	800c2bc <__multiply+0x10c>
 800c2ec:	4662      	mov	r2, ip
 800c2ee:	9905      	ldr	r1, [sp, #20]
 800c2f0:	5053      	str	r3, [r2, r1]
 800c2f2:	9b00      	ldr	r3, [sp, #0]
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	2304      	movs	r3, #4
 800c2fa:	449c      	add	ip, r3
 800c2fc:	e79d      	b.n	800c23a <__multiply+0x8a>
 800c2fe:	9b02      	ldr	r3, [sp, #8]
 800c300:	3b01      	subs	r3, #1
 800c302:	9302      	str	r3, [sp, #8]
 800c304:	e79d      	b.n	800c242 <__multiply+0x92>
 800c306:	46c0      	nop			; (mov r8, r8)
 800c308:	0800dbf7 	.word	0x0800dbf7
 800c30c:	0800dc84 	.word	0x0800dc84

0800c310 <__pow5mult>:
 800c310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c312:	2303      	movs	r3, #3
 800c314:	0015      	movs	r5, r2
 800c316:	0007      	movs	r7, r0
 800c318:	000e      	movs	r6, r1
 800c31a:	401a      	ands	r2, r3
 800c31c:	421d      	tst	r5, r3
 800c31e:	d008      	beq.n	800c332 <__pow5mult+0x22>
 800c320:	4925      	ldr	r1, [pc, #148]	; (800c3b8 <__pow5mult+0xa8>)
 800c322:	3a01      	subs	r2, #1
 800c324:	0092      	lsls	r2, r2, #2
 800c326:	5852      	ldr	r2, [r2, r1]
 800c328:	2300      	movs	r3, #0
 800c32a:	0031      	movs	r1, r6
 800c32c:	f7ff fe52 	bl	800bfd4 <__multadd>
 800c330:	0006      	movs	r6, r0
 800c332:	10ad      	asrs	r5, r5, #2
 800c334:	d03d      	beq.n	800c3b2 <__pow5mult+0xa2>
 800c336:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c338:	2c00      	cmp	r4, #0
 800c33a:	d10f      	bne.n	800c35c <__pow5mult+0x4c>
 800c33c:	2010      	movs	r0, #16
 800c33e:	f7fc fd19 	bl	8008d74 <malloc>
 800c342:	1e02      	subs	r2, r0, #0
 800c344:	6278      	str	r0, [r7, #36]	; 0x24
 800c346:	d105      	bne.n	800c354 <__pow5mult+0x44>
 800c348:	21d7      	movs	r1, #215	; 0xd7
 800c34a:	4b1c      	ldr	r3, [pc, #112]	; (800c3bc <__pow5mult+0xac>)
 800c34c:	481c      	ldr	r0, [pc, #112]	; (800c3c0 <__pow5mult+0xb0>)
 800c34e:	0049      	lsls	r1, r1, #1
 800c350:	f000 fc56 	bl	800cc00 <__assert_func>
 800c354:	6044      	str	r4, [r0, #4]
 800c356:	6084      	str	r4, [r0, #8]
 800c358:	6004      	str	r4, [r0, #0]
 800c35a:	60c4      	str	r4, [r0, #12]
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	689c      	ldr	r4, [r3, #8]
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	2c00      	cmp	r4, #0
 800c364:	d108      	bne.n	800c378 <__pow5mult+0x68>
 800c366:	0038      	movs	r0, r7
 800c368:	4916      	ldr	r1, [pc, #88]	; (800c3c4 <__pow5mult+0xb4>)
 800c36a:	f7ff ff0b 	bl	800c184 <__i2b>
 800c36e:	9b01      	ldr	r3, [sp, #4]
 800c370:	0004      	movs	r4, r0
 800c372:	6098      	str	r0, [r3, #8]
 800c374:	2300      	movs	r3, #0
 800c376:	6003      	str	r3, [r0, #0]
 800c378:	2301      	movs	r3, #1
 800c37a:	421d      	tst	r5, r3
 800c37c:	d00a      	beq.n	800c394 <__pow5mult+0x84>
 800c37e:	0031      	movs	r1, r6
 800c380:	0022      	movs	r2, r4
 800c382:	0038      	movs	r0, r7
 800c384:	f7ff ff14 	bl	800c1b0 <__multiply>
 800c388:	0031      	movs	r1, r6
 800c38a:	9001      	str	r0, [sp, #4]
 800c38c:	0038      	movs	r0, r7
 800c38e:	f7ff fdfd 	bl	800bf8c <_Bfree>
 800c392:	9e01      	ldr	r6, [sp, #4]
 800c394:	106d      	asrs	r5, r5, #1
 800c396:	d00c      	beq.n	800c3b2 <__pow5mult+0xa2>
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d107      	bne.n	800c3ae <__pow5mult+0x9e>
 800c39e:	0022      	movs	r2, r4
 800c3a0:	0021      	movs	r1, r4
 800c3a2:	0038      	movs	r0, r7
 800c3a4:	f7ff ff04 	bl	800c1b0 <__multiply>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	6020      	str	r0, [r4, #0]
 800c3ac:	6003      	str	r3, [r0, #0]
 800c3ae:	0004      	movs	r4, r0
 800c3b0:	e7e2      	b.n	800c378 <__pow5mult+0x68>
 800c3b2:	0030      	movs	r0, r6
 800c3b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3b6:	46c0      	nop			; (mov r8, r8)
 800c3b8:	0800ddd0 	.word	0x0800ddd0
 800c3bc:	0800db85 	.word	0x0800db85
 800c3c0:	0800dc84 	.word	0x0800dc84
 800c3c4:	00000271 	.word	0x00000271

0800c3c8 <__lshift>:
 800c3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ca:	000c      	movs	r4, r1
 800c3cc:	0017      	movs	r7, r2
 800c3ce:	6923      	ldr	r3, [r4, #16]
 800c3d0:	1155      	asrs	r5, r2, #5
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	18eb      	adds	r3, r5, r3
 800c3d6:	9302      	str	r3, [sp, #8]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	6849      	ldr	r1, [r1, #4]
 800c3de:	68a3      	ldr	r3, [r4, #8]
 800c3e0:	9004      	str	r0, [sp, #16]
 800c3e2:	9a01      	ldr	r2, [sp, #4]
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	db10      	blt.n	800c40a <__lshift+0x42>
 800c3e8:	9804      	ldr	r0, [sp, #16]
 800c3ea:	f7ff fd8b 	bl	800bf04 <_Balloc>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	0002      	movs	r2, r0
 800c3f2:	0006      	movs	r6, r0
 800c3f4:	0019      	movs	r1, r3
 800c3f6:	3214      	adds	r2, #20
 800c3f8:	4298      	cmp	r0, r3
 800c3fa:	d10c      	bne.n	800c416 <__lshift+0x4e>
 800c3fc:	21da      	movs	r1, #218	; 0xda
 800c3fe:	0002      	movs	r2, r0
 800c400:	4b26      	ldr	r3, [pc, #152]	; (800c49c <__lshift+0xd4>)
 800c402:	4827      	ldr	r0, [pc, #156]	; (800c4a0 <__lshift+0xd8>)
 800c404:	31ff      	adds	r1, #255	; 0xff
 800c406:	f000 fbfb 	bl	800cc00 <__assert_func>
 800c40a:	3101      	adds	r1, #1
 800c40c:	005b      	lsls	r3, r3, #1
 800c40e:	e7e8      	b.n	800c3e2 <__lshift+0x1a>
 800c410:	0098      	lsls	r0, r3, #2
 800c412:	5011      	str	r1, [r2, r0]
 800c414:	3301      	adds	r3, #1
 800c416:	42ab      	cmp	r3, r5
 800c418:	dbfa      	blt.n	800c410 <__lshift+0x48>
 800c41a:	43eb      	mvns	r3, r5
 800c41c:	17db      	asrs	r3, r3, #31
 800c41e:	401d      	ands	r5, r3
 800c420:	211f      	movs	r1, #31
 800c422:	0023      	movs	r3, r4
 800c424:	0038      	movs	r0, r7
 800c426:	00ad      	lsls	r5, r5, #2
 800c428:	1955      	adds	r5, r2, r5
 800c42a:	6922      	ldr	r2, [r4, #16]
 800c42c:	3314      	adds	r3, #20
 800c42e:	0092      	lsls	r2, r2, #2
 800c430:	4008      	ands	r0, r1
 800c432:	4684      	mov	ip, r0
 800c434:	189a      	adds	r2, r3, r2
 800c436:	420f      	tst	r7, r1
 800c438:	d02a      	beq.n	800c490 <__lshift+0xc8>
 800c43a:	3101      	adds	r1, #1
 800c43c:	1a09      	subs	r1, r1, r0
 800c43e:	9105      	str	r1, [sp, #20]
 800c440:	2100      	movs	r1, #0
 800c442:	9503      	str	r5, [sp, #12]
 800c444:	4667      	mov	r7, ip
 800c446:	6818      	ldr	r0, [r3, #0]
 800c448:	40b8      	lsls	r0, r7
 800c44a:	4301      	orrs	r1, r0
 800c44c:	9803      	ldr	r0, [sp, #12]
 800c44e:	c002      	stmia	r0!, {r1}
 800c450:	cb02      	ldmia	r3!, {r1}
 800c452:	9003      	str	r0, [sp, #12]
 800c454:	9805      	ldr	r0, [sp, #20]
 800c456:	40c1      	lsrs	r1, r0
 800c458:	429a      	cmp	r2, r3
 800c45a:	d8f3      	bhi.n	800c444 <__lshift+0x7c>
 800c45c:	0020      	movs	r0, r4
 800c45e:	3015      	adds	r0, #21
 800c460:	2304      	movs	r3, #4
 800c462:	4282      	cmp	r2, r0
 800c464:	d304      	bcc.n	800c470 <__lshift+0xa8>
 800c466:	1b13      	subs	r3, r2, r4
 800c468:	3b15      	subs	r3, #21
 800c46a:	089b      	lsrs	r3, r3, #2
 800c46c:	3301      	adds	r3, #1
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	50e9      	str	r1, [r5, r3]
 800c472:	2900      	cmp	r1, #0
 800c474:	d002      	beq.n	800c47c <__lshift+0xb4>
 800c476:	9b02      	ldr	r3, [sp, #8]
 800c478:	3302      	adds	r3, #2
 800c47a:	9301      	str	r3, [sp, #4]
 800c47c:	9b01      	ldr	r3, [sp, #4]
 800c47e:	9804      	ldr	r0, [sp, #16]
 800c480:	3b01      	subs	r3, #1
 800c482:	0021      	movs	r1, r4
 800c484:	6133      	str	r3, [r6, #16]
 800c486:	f7ff fd81 	bl	800bf8c <_Bfree>
 800c48a:	0030      	movs	r0, r6
 800c48c:	b007      	add	sp, #28
 800c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c490:	cb02      	ldmia	r3!, {r1}
 800c492:	c502      	stmia	r5!, {r1}
 800c494:	429a      	cmp	r2, r3
 800c496:	d8fb      	bhi.n	800c490 <__lshift+0xc8>
 800c498:	e7f0      	b.n	800c47c <__lshift+0xb4>
 800c49a:	46c0      	nop			; (mov r8, r8)
 800c49c:	0800dbf7 	.word	0x0800dbf7
 800c4a0:	0800dc84 	.word	0x0800dc84

0800c4a4 <__mcmp>:
 800c4a4:	6902      	ldr	r2, [r0, #16]
 800c4a6:	690b      	ldr	r3, [r1, #16]
 800c4a8:	b530      	push	{r4, r5, lr}
 800c4aa:	0004      	movs	r4, r0
 800c4ac:	1ad0      	subs	r0, r2, r3
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d10d      	bne.n	800c4ce <__mcmp+0x2a>
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	3414      	adds	r4, #20
 800c4b6:	3114      	adds	r1, #20
 800c4b8:	18e2      	adds	r2, r4, r3
 800c4ba:	18c9      	adds	r1, r1, r3
 800c4bc:	3a04      	subs	r2, #4
 800c4be:	3904      	subs	r1, #4
 800c4c0:	6815      	ldr	r5, [r2, #0]
 800c4c2:	680b      	ldr	r3, [r1, #0]
 800c4c4:	429d      	cmp	r5, r3
 800c4c6:	d003      	beq.n	800c4d0 <__mcmp+0x2c>
 800c4c8:	2001      	movs	r0, #1
 800c4ca:	429d      	cmp	r5, r3
 800c4cc:	d303      	bcc.n	800c4d6 <__mcmp+0x32>
 800c4ce:	bd30      	pop	{r4, r5, pc}
 800c4d0:	4294      	cmp	r4, r2
 800c4d2:	d3f3      	bcc.n	800c4bc <__mcmp+0x18>
 800c4d4:	e7fb      	b.n	800c4ce <__mcmp+0x2a>
 800c4d6:	4240      	negs	r0, r0
 800c4d8:	e7f9      	b.n	800c4ce <__mcmp+0x2a>
	...

0800c4dc <__mdiff>:
 800c4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4de:	000e      	movs	r6, r1
 800c4e0:	0007      	movs	r7, r0
 800c4e2:	0011      	movs	r1, r2
 800c4e4:	0030      	movs	r0, r6
 800c4e6:	b087      	sub	sp, #28
 800c4e8:	0014      	movs	r4, r2
 800c4ea:	f7ff ffdb 	bl	800c4a4 <__mcmp>
 800c4ee:	1e05      	subs	r5, r0, #0
 800c4f0:	d110      	bne.n	800c514 <__mdiff+0x38>
 800c4f2:	0001      	movs	r1, r0
 800c4f4:	0038      	movs	r0, r7
 800c4f6:	f7ff fd05 	bl	800bf04 <_Balloc>
 800c4fa:	1e02      	subs	r2, r0, #0
 800c4fc:	d104      	bne.n	800c508 <__mdiff+0x2c>
 800c4fe:	4b40      	ldr	r3, [pc, #256]	; (800c600 <__mdiff+0x124>)
 800c500:	4940      	ldr	r1, [pc, #256]	; (800c604 <__mdiff+0x128>)
 800c502:	4841      	ldr	r0, [pc, #260]	; (800c608 <__mdiff+0x12c>)
 800c504:	f000 fb7c 	bl	800cc00 <__assert_func>
 800c508:	2301      	movs	r3, #1
 800c50a:	6145      	str	r5, [r0, #20]
 800c50c:	6103      	str	r3, [r0, #16]
 800c50e:	0010      	movs	r0, r2
 800c510:	b007      	add	sp, #28
 800c512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c514:	2301      	movs	r3, #1
 800c516:	9301      	str	r3, [sp, #4]
 800c518:	2800      	cmp	r0, #0
 800c51a:	db04      	blt.n	800c526 <__mdiff+0x4a>
 800c51c:	0023      	movs	r3, r4
 800c51e:	0034      	movs	r4, r6
 800c520:	001e      	movs	r6, r3
 800c522:	2300      	movs	r3, #0
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	0038      	movs	r0, r7
 800c528:	6861      	ldr	r1, [r4, #4]
 800c52a:	f7ff fceb 	bl	800bf04 <_Balloc>
 800c52e:	1e02      	subs	r2, r0, #0
 800c530:	d103      	bne.n	800c53a <__mdiff+0x5e>
 800c532:	2190      	movs	r1, #144	; 0x90
 800c534:	4b32      	ldr	r3, [pc, #200]	; (800c600 <__mdiff+0x124>)
 800c536:	0089      	lsls	r1, r1, #2
 800c538:	e7e3      	b.n	800c502 <__mdiff+0x26>
 800c53a:	9b01      	ldr	r3, [sp, #4]
 800c53c:	2700      	movs	r7, #0
 800c53e:	60c3      	str	r3, [r0, #12]
 800c540:	6920      	ldr	r0, [r4, #16]
 800c542:	3414      	adds	r4, #20
 800c544:	9401      	str	r4, [sp, #4]
 800c546:	9b01      	ldr	r3, [sp, #4]
 800c548:	0084      	lsls	r4, r0, #2
 800c54a:	191b      	adds	r3, r3, r4
 800c54c:	0034      	movs	r4, r6
 800c54e:	9302      	str	r3, [sp, #8]
 800c550:	6933      	ldr	r3, [r6, #16]
 800c552:	3414      	adds	r4, #20
 800c554:	0099      	lsls	r1, r3, #2
 800c556:	1863      	adds	r3, r4, r1
 800c558:	9303      	str	r3, [sp, #12]
 800c55a:	0013      	movs	r3, r2
 800c55c:	3314      	adds	r3, #20
 800c55e:	469c      	mov	ip, r3
 800c560:	9305      	str	r3, [sp, #20]
 800c562:	9b01      	ldr	r3, [sp, #4]
 800c564:	9304      	str	r3, [sp, #16]
 800c566:	9b04      	ldr	r3, [sp, #16]
 800c568:	cc02      	ldmia	r4!, {r1}
 800c56a:	cb20      	ldmia	r3!, {r5}
 800c56c:	9304      	str	r3, [sp, #16]
 800c56e:	b2ab      	uxth	r3, r5
 800c570:	19df      	adds	r7, r3, r7
 800c572:	b28b      	uxth	r3, r1
 800c574:	1afb      	subs	r3, r7, r3
 800c576:	0c09      	lsrs	r1, r1, #16
 800c578:	0c2d      	lsrs	r5, r5, #16
 800c57a:	1a6d      	subs	r5, r5, r1
 800c57c:	1419      	asrs	r1, r3, #16
 800c57e:	186d      	adds	r5, r5, r1
 800c580:	4661      	mov	r1, ip
 800c582:	142f      	asrs	r7, r5, #16
 800c584:	b29b      	uxth	r3, r3
 800c586:	042d      	lsls	r5, r5, #16
 800c588:	432b      	orrs	r3, r5
 800c58a:	c108      	stmia	r1!, {r3}
 800c58c:	9b03      	ldr	r3, [sp, #12]
 800c58e:	468c      	mov	ip, r1
 800c590:	42a3      	cmp	r3, r4
 800c592:	d8e8      	bhi.n	800c566 <__mdiff+0x8a>
 800c594:	0031      	movs	r1, r6
 800c596:	9c03      	ldr	r4, [sp, #12]
 800c598:	3115      	adds	r1, #21
 800c59a:	2304      	movs	r3, #4
 800c59c:	428c      	cmp	r4, r1
 800c59e:	d304      	bcc.n	800c5aa <__mdiff+0xce>
 800c5a0:	1ba3      	subs	r3, r4, r6
 800c5a2:	3b15      	subs	r3, #21
 800c5a4:	089b      	lsrs	r3, r3, #2
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	9901      	ldr	r1, [sp, #4]
 800c5ac:	18cc      	adds	r4, r1, r3
 800c5ae:	9905      	ldr	r1, [sp, #20]
 800c5b0:	0026      	movs	r6, r4
 800c5b2:	18cb      	adds	r3, r1, r3
 800c5b4:	469c      	mov	ip, r3
 800c5b6:	9902      	ldr	r1, [sp, #8]
 800c5b8:	428e      	cmp	r6, r1
 800c5ba:	d310      	bcc.n	800c5de <__mdiff+0x102>
 800c5bc:	9e02      	ldr	r6, [sp, #8]
 800c5be:	1ee1      	subs	r1, r4, #3
 800c5c0:	2500      	movs	r5, #0
 800c5c2:	428e      	cmp	r6, r1
 800c5c4:	d304      	bcc.n	800c5d0 <__mdiff+0xf4>
 800c5c6:	0031      	movs	r1, r6
 800c5c8:	3103      	adds	r1, #3
 800c5ca:	1b0c      	subs	r4, r1, r4
 800c5cc:	08a4      	lsrs	r4, r4, #2
 800c5ce:	00a5      	lsls	r5, r4, #2
 800c5d0:	195b      	adds	r3, r3, r5
 800c5d2:	3b04      	subs	r3, #4
 800c5d4:	6819      	ldr	r1, [r3, #0]
 800c5d6:	2900      	cmp	r1, #0
 800c5d8:	d00f      	beq.n	800c5fa <__mdiff+0x11e>
 800c5da:	6110      	str	r0, [r2, #16]
 800c5dc:	e797      	b.n	800c50e <__mdiff+0x32>
 800c5de:	ce02      	ldmia	r6!, {r1}
 800c5e0:	b28d      	uxth	r5, r1
 800c5e2:	19ed      	adds	r5, r5, r7
 800c5e4:	0c0f      	lsrs	r7, r1, #16
 800c5e6:	1429      	asrs	r1, r5, #16
 800c5e8:	1879      	adds	r1, r7, r1
 800c5ea:	140f      	asrs	r7, r1, #16
 800c5ec:	b2ad      	uxth	r5, r5
 800c5ee:	0409      	lsls	r1, r1, #16
 800c5f0:	430d      	orrs	r5, r1
 800c5f2:	4661      	mov	r1, ip
 800c5f4:	c120      	stmia	r1!, {r5}
 800c5f6:	468c      	mov	ip, r1
 800c5f8:	e7dd      	b.n	800c5b6 <__mdiff+0xda>
 800c5fa:	3801      	subs	r0, #1
 800c5fc:	e7e9      	b.n	800c5d2 <__mdiff+0xf6>
 800c5fe:	46c0      	nop			; (mov r8, r8)
 800c600:	0800dbf7 	.word	0x0800dbf7
 800c604:	00000232 	.word	0x00000232
 800c608:	0800dc84 	.word	0x0800dc84

0800c60c <__ulp>:
 800c60c:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <__ulp+0x40>)
 800c60e:	4019      	ands	r1, r3
 800c610:	4b0f      	ldr	r3, [pc, #60]	; (800c650 <__ulp+0x44>)
 800c612:	18c9      	adds	r1, r1, r3
 800c614:	2900      	cmp	r1, #0
 800c616:	dd04      	ble.n	800c622 <__ulp+0x16>
 800c618:	2200      	movs	r2, #0
 800c61a:	000b      	movs	r3, r1
 800c61c:	0010      	movs	r0, r2
 800c61e:	0019      	movs	r1, r3
 800c620:	4770      	bx	lr
 800c622:	4249      	negs	r1, r1
 800c624:	2200      	movs	r2, #0
 800c626:	2300      	movs	r3, #0
 800c628:	1509      	asrs	r1, r1, #20
 800c62a:	2913      	cmp	r1, #19
 800c62c:	dc04      	bgt.n	800c638 <__ulp+0x2c>
 800c62e:	2080      	movs	r0, #128	; 0x80
 800c630:	0300      	lsls	r0, r0, #12
 800c632:	4108      	asrs	r0, r1
 800c634:	0003      	movs	r3, r0
 800c636:	e7f1      	b.n	800c61c <__ulp+0x10>
 800c638:	3914      	subs	r1, #20
 800c63a:	2001      	movs	r0, #1
 800c63c:	291e      	cmp	r1, #30
 800c63e:	dc02      	bgt.n	800c646 <__ulp+0x3a>
 800c640:	2080      	movs	r0, #128	; 0x80
 800c642:	0600      	lsls	r0, r0, #24
 800c644:	40c8      	lsrs	r0, r1
 800c646:	0002      	movs	r2, r0
 800c648:	e7e8      	b.n	800c61c <__ulp+0x10>
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	7ff00000 	.word	0x7ff00000
 800c650:	fcc00000 	.word	0xfcc00000

0800c654 <__b2d>:
 800c654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c656:	0006      	movs	r6, r0
 800c658:	6903      	ldr	r3, [r0, #16]
 800c65a:	3614      	adds	r6, #20
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	18f3      	adds	r3, r6, r3
 800c660:	1f1d      	subs	r5, r3, #4
 800c662:	682c      	ldr	r4, [r5, #0]
 800c664:	000f      	movs	r7, r1
 800c666:	0020      	movs	r0, r4
 800c668:	9301      	str	r3, [sp, #4]
 800c66a:	f7ff fd43 	bl	800c0f4 <__hi0bits>
 800c66e:	2320      	movs	r3, #32
 800c670:	1a1b      	subs	r3, r3, r0
 800c672:	491f      	ldr	r1, [pc, #124]	; (800c6f0 <__b2d+0x9c>)
 800c674:	603b      	str	r3, [r7, #0]
 800c676:	280a      	cmp	r0, #10
 800c678:	dc16      	bgt.n	800c6a8 <__b2d+0x54>
 800c67a:	230b      	movs	r3, #11
 800c67c:	0027      	movs	r7, r4
 800c67e:	1a1b      	subs	r3, r3, r0
 800c680:	40df      	lsrs	r7, r3
 800c682:	4339      	orrs	r1, r7
 800c684:	469c      	mov	ip, r3
 800c686:	000b      	movs	r3, r1
 800c688:	2100      	movs	r1, #0
 800c68a:	42ae      	cmp	r6, r5
 800c68c:	d202      	bcs.n	800c694 <__b2d+0x40>
 800c68e:	9901      	ldr	r1, [sp, #4]
 800c690:	3908      	subs	r1, #8
 800c692:	6809      	ldr	r1, [r1, #0]
 800c694:	3015      	adds	r0, #21
 800c696:	4084      	lsls	r4, r0
 800c698:	4660      	mov	r0, ip
 800c69a:	40c1      	lsrs	r1, r0
 800c69c:	430c      	orrs	r4, r1
 800c69e:	0022      	movs	r2, r4
 800c6a0:	0010      	movs	r0, r2
 800c6a2:	0019      	movs	r1, r3
 800c6a4:	b003      	add	sp, #12
 800c6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a8:	2700      	movs	r7, #0
 800c6aa:	42ae      	cmp	r6, r5
 800c6ac:	d202      	bcs.n	800c6b4 <__b2d+0x60>
 800c6ae:	9d01      	ldr	r5, [sp, #4]
 800c6b0:	3d08      	subs	r5, #8
 800c6b2:	682f      	ldr	r7, [r5, #0]
 800c6b4:	230b      	movs	r3, #11
 800c6b6:	425b      	negs	r3, r3
 800c6b8:	469c      	mov	ip, r3
 800c6ba:	4484      	add	ip, r0
 800c6bc:	280b      	cmp	r0, #11
 800c6be:	d013      	beq.n	800c6e8 <__b2d+0x94>
 800c6c0:	4663      	mov	r3, ip
 800c6c2:	2020      	movs	r0, #32
 800c6c4:	409c      	lsls	r4, r3
 800c6c6:	1ac0      	subs	r0, r0, r3
 800c6c8:	003b      	movs	r3, r7
 800c6ca:	40c3      	lsrs	r3, r0
 800c6cc:	431c      	orrs	r4, r3
 800c6ce:	4321      	orrs	r1, r4
 800c6d0:	000b      	movs	r3, r1
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	42b5      	cmp	r5, r6
 800c6d6:	d901      	bls.n	800c6dc <__b2d+0x88>
 800c6d8:	3d04      	subs	r5, #4
 800c6da:	6829      	ldr	r1, [r5, #0]
 800c6dc:	4664      	mov	r4, ip
 800c6de:	40c1      	lsrs	r1, r0
 800c6e0:	40a7      	lsls	r7, r4
 800c6e2:	430f      	orrs	r7, r1
 800c6e4:	003a      	movs	r2, r7
 800c6e6:	e7db      	b.n	800c6a0 <__b2d+0x4c>
 800c6e8:	4321      	orrs	r1, r4
 800c6ea:	000b      	movs	r3, r1
 800c6ec:	e7fa      	b.n	800c6e4 <__b2d+0x90>
 800c6ee:	46c0      	nop			; (mov r8, r8)
 800c6f0:	3ff00000 	.word	0x3ff00000

0800c6f4 <__d2b>:
 800c6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6f6:	2101      	movs	r1, #1
 800c6f8:	0014      	movs	r4, r2
 800c6fa:	001e      	movs	r6, r3
 800c6fc:	9f08      	ldr	r7, [sp, #32]
 800c6fe:	f7ff fc01 	bl	800bf04 <_Balloc>
 800c702:	1e05      	subs	r5, r0, #0
 800c704:	d105      	bne.n	800c712 <__d2b+0x1e>
 800c706:	0002      	movs	r2, r0
 800c708:	4b26      	ldr	r3, [pc, #152]	; (800c7a4 <__d2b+0xb0>)
 800c70a:	4927      	ldr	r1, [pc, #156]	; (800c7a8 <__d2b+0xb4>)
 800c70c:	4827      	ldr	r0, [pc, #156]	; (800c7ac <__d2b+0xb8>)
 800c70e:	f000 fa77 	bl	800cc00 <__assert_func>
 800c712:	0333      	lsls	r3, r6, #12
 800c714:	0076      	lsls	r6, r6, #1
 800c716:	0b1b      	lsrs	r3, r3, #12
 800c718:	0d76      	lsrs	r6, r6, #21
 800c71a:	d124      	bne.n	800c766 <__d2b+0x72>
 800c71c:	9301      	str	r3, [sp, #4]
 800c71e:	2c00      	cmp	r4, #0
 800c720:	d027      	beq.n	800c772 <__d2b+0x7e>
 800c722:	4668      	mov	r0, sp
 800c724:	9400      	str	r4, [sp, #0]
 800c726:	f7ff fcff 	bl	800c128 <__lo0bits>
 800c72a:	9c00      	ldr	r4, [sp, #0]
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d01e      	beq.n	800c76e <__d2b+0x7a>
 800c730:	9b01      	ldr	r3, [sp, #4]
 800c732:	2120      	movs	r1, #32
 800c734:	001a      	movs	r2, r3
 800c736:	1a09      	subs	r1, r1, r0
 800c738:	408a      	lsls	r2, r1
 800c73a:	40c3      	lsrs	r3, r0
 800c73c:	4322      	orrs	r2, r4
 800c73e:	616a      	str	r2, [r5, #20]
 800c740:	9301      	str	r3, [sp, #4]
 800c742:	9c01      	ldr	r4, [sp, #4]
 800c744:	61ac      	str	r4, [r5, #24]
 800c746:	1e63      	subs	r3, r4, #1
 800c748:	419c      	sbcs	r4, r3
 800c74a:	3401      	adds	r4, #1
 800c74c:	612c      	str	r4, [r5, #16]
 800c74e:	2e00      	cmp	r6, #0
 800c750:	d018      	beq.n	800c784 <__d2b+0x90>
 800c752:	4b17      	ldr	r3, [pc, #92]	; (800c7b0 <__d2b+0xbc>)
 800c754:	18f6      	adds	r6, r6, r3
 800c756:	2335      	movs	r3, #53	; 0x35
 800c758:	1836      	adds	r6, r6, r0
 800c75a:	1a18      	subs	r0, r3, r0
 800c75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c75e:	603e      	str	r6, [r7, #0]
 800c760:	6018      	str	r0, [r3, #0]
 800c762:	0028      	movs	r0, r5
 800c764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c766:	2280      	movs	r2, #128	; 0x80
 800c768:	0352      	lsls	r2, r2, #13
 800c76a:	4313      	orrs	r3, r2
 800c76c:	e7d6      	b.n	800c71c <__d2b+0x28>
 800c76e:	616c      	str	r4, [r5, #20]
 800c770:	e7e7      	b.n	800c742 <__d2b+0x4e>
 800c772:	a801      	add	r0, sp, #4
 800c774:	f7ff fcd8 	bl	800c128 <__lo0bits>
 800c778:	2401      	movs	r4, #1
 800c77a:	9b01      	ldr	r3, [sp, #4]
 800c77c:	612c      	str	r4, [r5, #16]
 800c77e:	616b      	str	r3, [r5, #20]
 800c780:	3020      	adds	r0, #32
 800c782:	e7e4      	b.n	800c74e <__d2b+0x5a>
 800c784:	4b0b      	ldr	r3, [pc, #44]	; (800c7b4 <__d2b+0xc0>)
 800c786:	18c0      	adds	r0, r0, r3
 800c788:	4b0b      	ldr	r3, [pc, #44]	; (800c7b8 <__d2b+0xc4>)
 800c78a:	6038      	str	r0, [r7, #0]
 800c78c:	18e3      	adds	r3, r4, r3
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	18eb      	adds	r3, r5, r3
 800c792:	6958      	ldr	r0, [r3, #20]
 800c794:	f7ff fcae 	bl	800c0f4 <__hi0bits>
 800c798:	0164      	lsls	r4, r4, #5
 800c79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79c:	1a24      	subs	r4, r4, r0
 800c79e:	601c      	str	r4, [r3, #0]
 800c7a0:	e7df      	b.n	800c762 <__d2b+0x6e>
 800c7a2:	46c0      	nop			; (mov r8, r8)
 800c7a4:	0800dbf7 	.word	0x0800dbf7
 800c7a8:	0000030a 	.word	0x0000030a
 800c7ac:	0800dc84 	.word	0x0800dc84
 800c7b0:	fffffbcd 	.word	0xfffffbcd
 800c7b4:	fffffbce 	.word	0xfffffbce
 800c7b8:	3fffffff 	.word	0x3fffffff

0800c7bc <__ratio>:
 800c7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7be:	b087      	sub	sp, #28
 800c7c0:	000f      	movs	r7, r1
 800c7c2:	a904      	add	r1, sp, #16
 800c7c4:	0006      	movs	r6, r0
 800c7c6:	f7ff ff45 	bl	800c654 <__b2d>
 800c7ca:	9000      	str	r0, [sp, #0]
 800c7cc:	9101      	str	r1, [sp, #4]
 800c7ce:	9c00      	ldr	r4, [sp, #0]
 800c7d0:	9d01      	ldr	r5, [sp, #4]
 800c7d2:	0038      	movs	r0, r7
 800c7d4:	a905      	add	r1, sp, #20
 800c7d6:	f7ff ff3d 	bl	800c654 <__b2d>
 800c7da:	9002      	str	r0, [sp, #8]
 800c7dc:	9103      	str	r1, [sp, #12]
 800c7de:	9a02      	ldr	r2, [sp, #8]
 800c7e0:	9b03      	ldr	r3, [sp, #12]
 800c7e2:	6931      	ldr	r1, [r6, #16]
 800c7e4:	6938      	ldr	r0, [r7, #16]
 800c7e6:	9e05      	ldr	r6, [sp, #20]
 800c7e8:	1a08      	subs	r0, r1, r0
 800c7ea:	9904      	ldr	r1, [sp, #16]
 800c7ec:	0140      	lsls	r0, r0, #5
 800c7ee:	1b89      	subs	r1, r1, r6
 800c7f0:	1841      	adds	r1, r0, r1
 800c7f2:	0508      	lsls	r0, r1, #20
 800c7f4:	2900      	cmp	r1, #0
 800c7f6:	dd07      	ble.n	800c808 <__ratio+0x4c>
 800c7f8:	9901      	ldr	r1, [sp, #4]
 800c7fa:	1845      	adds	r5, r0, r1
 800c7fc:	0020      	movs	r0, r4
 800c7fe:	0029      	movs	r1, r5
 800c800:	f7f5 fa0c 	bl	8001c1c <__aeabi_ddiv>
 800c804:	b007      	add	sp, #28
 800c806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c808:	9903      	ldr	r1, [sp, #12]
 800c80a:	1a0b      	subs	r3, r1, r0
 800c80c:	e7f6      	b.n	800c7fc <__ratio+0x40>

0800c80e <__copybits>:
 800c80e:	b570      	push	{r4, r5, r6, lr}
 800c810:	0014      	movs	r4, r2
 800c812:	0005      	movs	r5, r0
 800c814:	3901      	subs	r1, #1
 800c816:	6913      	ldr	r3, [r2, #16]
 800c818:	1149      	asrs	r1, r1, #5
 800c81a:	3101      	adds	r1, #1
 800c81c:	0089      	lsls	r1, r1, #2
 800c81e:	3414      	adds	r4, #20
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	1841      	adds	r1, r0, r1
 800c824:	18e3      	adds	r3, r4, r3
 800c826:	42a3      	cmp	r3, r4
 800c828:	d80d      	bhi.n	800c846 <__copybits+0x38>
 800c82a:	0014      	movs	r4, r2
 800c82c:	3411      	adds	r4, #17
 800c82e:	2500      	movs	r5, #0
 800c830:	429c      	cmp	r4, r3
 800c832:	d803      	bhi.n	800c83c <__copybits+0x2e>
 800c834:	1a9b      	subs	r3, r3, r2
 800c836:	3b11      	subs	r3, #17
 800c838:	089b      	lsrs	r3, r3, #2
 800c83a:	009d      	lsls	r5, r3, #2
 800c83c:	2300      	movs	r3, #0
 800c83e:	1940      	adds	r0, r0, r5
 800c840:	4281      	cmp	r1, r0
 800c842:	d803      	bhi.n	800c84c <__copybits+0x3e>
 800c844:	bd70      	pop	{r4, r5, r6, pc}
 800c846:	cc40      	ldmia	r4!, {r6}
 800c848:	c540      	stmia	r5!, {r6}
 800c84a:	e7ec      	b.n	800c826 <__copybits+0x18>
 800c84c:	c008      	stmia	r0!, {r3}
 800c84e:	e7f7      	b.n	800c840 <__copybits+0x32>

0800c850 <__any_on>:
 800c850:	0002      	movs	r2, r0
 800c852:	6900      	ldr	r0, [r0, #16]
 800c854:	b510      	push	{r4, lr}
 800c856:	3214      	adds	r2, #20
 800c858:	114b      	asrs	r3, r1, #5
 800c85a:	4298      	cmp	r0, r3
 800c85c:	db13      	blt.n	800c886 <__any_on+0x36>
 800c85e:	dd0c      	ble.n	800c87a <__any_on+0x2a>
 800c860:	241f      	movs	r4, #31
 800c862:	0008      	movs	r0, r1
 800c864:	4020      	ands	r0, r4
 800c866:	4221      	tst	r1, r4
 800c868:	d007      	beq.n	800c87a <__any_on+0x2a>
 800c86a:	0099      	lsls	r1, r3, #2
 800c86c:	588c      	ldr	r4, [r1, r2]
 800c86e:	0021      	movs	r1, r4
 800c870:	40c1      	lsrs	r1, r0
 800c872:	4081      	lsls	r1, r0
 800c874:	2001      	movs	r0, #1
 800c876:	428c      	cmp	r4, r1
 800c878:	d104      	bne.n	800c884 <__any_on+0x34>
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	18d3      	adds	r3, r2, r3
 800c87e:	4293      	cmp	r3, r2
 800c880:	d803      	bhi.n	800c88a <__any_on+0x3a>
 800c882:	2000      	movs	r0, #0
 800c884:	bd10      	pop	{r4, pc}
 800c886:	0003      	movs	r3, r0
 800c888:	e7f7      	b.n	800c87a <__any_on+0x2a>
 800c88a:	3b04      	subs	r3, #4
 800c88c:	6819      	ldr	r1, [r3, #0]
 800c88e:	2900      	cmp	r1, #0
 800c890:	d0f5      	beq.n	800c87e <__any_on+0x2e>
 800c892:	2001      	movs	r0, #1
 800c894:	e7f6      	b.n	800c884 <__any_on+0x34>

0800c896 <_calloc_r>:
 800c896:	b570      	push	{r4, r5, r6, lr}
 800c898:	0c13      	lsrs	r3, r2, #16
 800c89a:	0c0d      	lsrs	r5, r1, #16
 800c89c:	d11e      	bne.n	800c8dc <_calloc_r+0x46>
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10c      	bne.n	800c8bc <_calloc_r+0x26>
 800c8a2:	b289      	uxth	r1, r1
 800c8a4:	b294      	uxth	r4, r2
 800c8a6:	434c      	muls	r4, r1
 800c8a8:	0021      	movs	r1, r4
 800c8aa:	f7fc faeb 	bl	8008e84 <_malloc_r>
 800c8ae:	1e05      	subs	r5, r0, #0
 800c8b0:	d01b      	beq.n	800c8ea <_calloc_r+0x54>
 800c8b2:	0022      	movs	r2, r4
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	f7fc fa70 	bl	8008d9a <memset>
 800c8ba:	e016      	b.n	800c8ea <_calloc_r+0x54>
 800c8bc:	1c1d      	adds	r5, r3, #0
 800c8be:	1c0b      	adds	r3, r1, #0
 800c8c0:	b292      	uxth	r2, r2
 800c8c2:	b289      	uxth	r1, r1
 800c8c4:	b29c      	uxth	r4, r3
 800c8c6:	4351      	muls	r1, r2
 800c8c8:	b2ab      	uxth	r3, r5
 800c8ca:	4363      	muls	r3, r4
 800c8cc:	0c0c      	lsrs	r4, r1, #16
 800c8ce:	191c      	adds	r4, r3, r4
 800c8d0:	0c22      	lsrs	r2, r4, #16
 800c8d2:	d107      	bne.n	800c8e4 <_calloc_r+0x4e>
 800c8d4:	0424      	lsls	r4, r4, #16
 800c8d6:	b289      	uxth	r1, r1
 800c8d8:	430c      	orrs	r4, r1
 800c8da:	e7e5      	b.n	800c8a8 <_calloc_r+0x12>
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d101      	bne.n	800c8e4 <_calloc_r+0x4e>
 800c8e0:	1c13      	adds	r3, r2, #0
 800c8e2:	e7ed      	b.n	800c8c0 <_calloc_r+0x2a>
 800c8e4:	230c      	movs	r3, #12
 800c8e6:	2500      	movs	r5, #0
 800c8e8:	6003      	str	r3, [r0, #0]
 800c8ea:	0028      	movs	r0, r5
 800c8ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c8f0 <__ssputs_r>:
 800c8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8f2:	688e      	ldr	r6, [r1, #8]
 800c8f4:	b085      	sub	sp, #20
 800c8f6:	0007      	movs	r7, r0
 800c8f8:	000c      	movs	r4, r1
 800c8fa:	9203      	str	r2, [sp, #12]
 800c8fc:	9301      	str	r3, [sp, #4]
 800c8fe:	429e      	cmp	r6, r3
 800c900:	d83c      	bhi.n	800c97c <__ssputs_r+0x8c>
 800c902:	2390      	movs	r3, #144	; 0x90
 800c904:	898a      	ldrh	r2, [r1, #12]
 800c906:	00db      	lsls	r3, r3, #3
 800c908:	421a      	tst	r2, r3
 800c90a:	d034      	beq.n	800c976 <__ssputs_r+0x86>
 800c90c:	6909      	ldr	r1, [r1, #16]
 800c90e:	6823      	ldr	r3, [r4, #0]
 800c910:	6960      	ldr	r0, [r4, #20]
 800c912:	1a5b      	subs	r3, r3, r1
 800c914:	9302      	str	r3, [sp, #8]
 800c916:	2303      	movs	r3, #3
 800c918:	4343      	muls	r3, r0
 800c91a:	0fdd      	lsrs	r5, r3, #31
 800c91c:	18ed      	adds	r5, r5, r3
 800c91e:	9b01      	ldr	r3, [sp, #4]
 800c920:	9802      	ldr	r0, [sp, #8]
 800c922:	3301      	adds	r3, #1
 800c924:	181b      	adds	r3, r3, r0
 800c926:	106d      	asrs	r5, r5, #1
 800c928:	42ab      	cmp	r3, r5
 800c92a:	d900      	bls.n	800c92e <__ssputs_r+0x3e>
 800c92c:	001d      	movs	r5, r3
 800c92e:	0553      	lsls	r3, r2, #21
 800c930:	d532      	bpl.n	800c998 <__ssputs_r+0xa8>
 800c932:	0029      	movs	r1, r5
 800c934:	0038      	movs	r0, r7
 800c936:	f7fc faa5 	bl	8008e84 <_malloc_r>
 800c93a:	1e06      	subs	r6, r0, #0
 800c93c:	d109      	bne.n	800c952 <__ssputs_r+0x62>
 800c93e:	230c      	movs	r3, #12
 800c940:	603b      	str	r3, [r7, #0]
 800c942:	2340      	movs	r3, #64	; 0x40
 800c944:	2001      	movs	r0, #1
 800c946:	89a2      	ldrh	r2, [r4, #12]
 800c948:	4240      	negs	r0, r0
 800c94a:	4313      	orrs	r3, r2
 800c94c:	81a3      	strh	r3, [r4, #12]
 800c94e:	b005      	add	sp, #20
 800c950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c952:	9a02      	ldr	r2, [sp, #8]
 800c954:	6921      	ldr	r1, [r4, #16]
 800c956:	f7fc fa17 	bl	8008d88 <memcpy>
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	4a14      	ldr	r2, [pc, #80]	; (800c9b0 <__ssputs_r+0xc0>)
 800c95e:	401a      	ands	r2, r3
 800c960:	2380      	movs	r3, #128	; 0x80
 800c962:	4313      	orrs	r3, r2
 800c964:	81a3      	strh	r3, [r4, #12]
 800c966:	9b02      	ldr	r3, [sp, #8]
 800c968:	6126      	str	r6, [r4, #16]
 800c96a:	18f6      	adds	r6, r6, r3
 800c96c:	6026      	str	r6, [r4, #0]
 800c96e:	6165      	str	r5, [r4, #20]
 800c970:	9e01      	ldr	r6, [sp, #4]
 800c972:	1aed      	subs	r5, r5, r3
 800c974:	60a5      	str	r5, [r4, #8]
 800c976:	9b01      	ldr	r3, [sp, #4]
 800c978:	429e      	cmp	r6, r3
 800c97a:	d900      	bls.n	800c97e <__ssputs_r+0x8e>
 800c97c:	9e01      	ldr	r6, [sp, #4]
 800c97e:	0032      	movs	r2, r6
 800c980:	9903      	ldr	r1, [sp, #12]
 800c982:	6820      	ldr	r0, [r4, #0]
 800c984:	f000 f96d 	bl	800cc62 <memmove>
 800c988:	68a3      	ldr	r3, [r4, #8]
 800c98a:	2000      	movs	r0, #0
 800c98c:	1b9b      	subs	r3, r3, r6
 800c98e:	60a3      	str	r3, [r4, #8]
 800c990:	6823      	ldr	r3, [r4, #0]
 800c992:	199e      	adds	r6, r3, r6
 800c994:	6026      	str	r6, [r4, #0]
 800c996:	e7da      	b.n	800c94e <__ssputs_r+0x5e>
 800c998:	002a      	movs	r2, r5
 800c99a:	0038      	movs	r0, r7
 800c99c:	f000 f974 	bl	800cc88 <_realloc_r>
 800c9a0:	1e06      	subs	r6, r0, #0
 800c9a2:	d1e0      	bne.n	800c966 <__ssputs_r+0x76>
 800c9a4:	0038      	movs	r0, r7
 800c9a6:	6921      	ldr	r1, [r4, #16]
 800c9a8:	f7fc fa00 	bl	8008dac <_free_r>
 800c9ac:	e7c7      	b.n	800c93e <__ssputs_r+0x4e>
 800c9ae:	46c0      	nop			; (mov r8, r8)
 800c9b0:	fffffb7f 	.word	0xfffffb7f

0800c9b4 <_svfiprintf_r>:
 800c9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9b6:	b0a1      	sub	sp, #132	; 0x84
 800c9b8:	9003      	str	r0, [sp, #12]
 800c9ba:	001d      	movs	r5, r3
 800c9bc:	898b      	ldrh	r3, [r1, #12]
 800c9be:	000f      	movs	r7, r1
 800c9c0:	0016      	movs	r6, r2
 800c9c2:	061b      	lsls	r3, r3, #24
 800c9c4:	d511      	bpl.n	800c9ea <_svfiprintf_r+0x36>
 800c9c6:	690b      	ldr	r3, [r1, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d10e      	bne.n	800c9ea <_svfiprintf_r+0x36>
 800c9cc:	2140      	movs	r1, #64	; 0x40
 800c9ce:	f7fc fa59 	bl	8008e84 <_malloc_r>
 800c9d2:	6038      	str	r0, [r7, #0]
 800c9d4:	6138      	str	r0, [r7, #16]
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d105      	bne.n	800c9e6 <_svfiprintf_r+0x32>
 800c9da:	230c      	movs	r3, #12
 800c9dc:	9a03      	ldr	r2, [sp, #12]
 800c9de:	3801      	subs	r0, #1
 800c9e0:	6013      	str	r3, [r2, #0]
 800c9e2:	b021      	add	sp, #132	; 0x84
 800c9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9e6:	2340      	movs	r3, #64	; 0x40
 800c9e8:	617b      	str	r3, [r7, #20]
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	ac08      	add	r4, sp, #32
 800c9ee:	6163      	str	r3, [r4, #20]
 800c9f0:	3320      	adds	r3, #32
 800c9f2:	7663      	strb	r3, [r4, #25]
 800c9f4:	3310      	adds	r3, #16
 800c9f6:	76a3      	strb	r3, [r4, #26]
 800c9f8:	9507      	str	r5, [sp, #28]
 800c9fa:	0035      	movs	r5, r6
 800c9fc:	782b      	ldrb	r3, [r5, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <_svfiprintf_r+0x52>
 800ca02:	2b25      	cmp	r3, #37	; 0x25
 800ca04:	d147      	bne.n	800ca96 <_svfiprintf_r+0xe2>
 800ca06:	1bab      	subs	r3, r5, r6
 800ca08:	9305      	str	r3, [sp, #20]
 800ca0a:	42b5      	cmp	r5, r6
 800ca0c:	d00c      	beq.n	800ca28 <_svfiprintf_r+0x74>
 800ca0e:	0032      	movs	r2, r6
 800ca10:	0039      	movs	r1, r7
 800ca12:	9803      	ldr	r0, [sp, #12]
 800ca14:	f7ff ff6c 	bl	800c8f0 <__ssputs_r>
 800ca18:	1c43      	adds	r3, r0, #1
 800ca1a:	d100      	bne.n	800ca1e <_svfiprintf_r+0x6a>
 800ca1c:	e0ae      	b.n	800cb7c <_svfiprintf_r+0x1c8>
 800ca1e:	6962      	ldr	r2, [r4, #20]
 800ca20:	9b05      	ldr	r3, [sp, #20]
 800ca22:	4694      	mov	ip, r2
 800ca24:	4463      	add	r3, ip
 800ca26:	6163      	str	r3, [r4, #20]
 800ca28:	782b      	ldrb	r3, [r5, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d100      	bne.n	800ca30 <_svfiprintf_r+0x7c>
 800ca2e:	e0a5      	b.n	800cb7c <_svfiprintf_r+0x1c8>
 800ca30:	2201      	movs	r2, #1
 800ca32:	2300      	movs	r3, #0
 800ca34:	4252      	negs	r2, r2
 800ca36:	6062      	str	r2, [r4, #4]
 800ca38:	a904      	add	r1, sp, #16
 800ca3a:	3254      	adds	r2, #84	; 0x54
 800ca3c:	1852      	adds	r2, r2, r1
 800ca3e:	1c6e      	adds	r6, r5, #1
 800ca40:	6023      	str	r3, [r4, #0]
 800ca42:	60e3      	str	r3, [r4, #12]
 800ca44:	60a3      	str	r3, [r4, #8]
 800ca46:	7013      	strb	r3, [r2, #0]
 800ca48:	65a3      	str	r3, [r4, #88]	; 0x58
 800ca4a:	2205      	movs	r2, #5
 800ca4c:	7831      	ldrb	r1, [r6, #0]
 800ca4e:	4854      	ldr	r0, [pc, #336]	; (800cba0 <_svfiprintf_r+0x1ec>)
 800ca50:	f7ff fa3c 	bl	800becc <memchr>
 800ca54:	1c75      	adds	r5, r6, #1
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d11f      	bne.n	800ca9a <_svfiprintf_r+0xe6>
 800ca5a:	6822      	ldr	r2, [r4, #0]
 800ca5c:	06d3      	lsls	r3, r2, #27
 800ca5e:	d504      	bpl.n	800ca6a <_svfiprintf_r+0xb6>
 800ca60:	2353      	movs	r3, #83	; 0x53
 800ca62:	a904      	add	r1, sp, #16
 800ca64:	185b      	adds	r3, r3, r1
 800ca66:	2120      	movs	r1, #32
 800ca68:	7019      	strb	r1, [r3, #0]
 800ca6a:	0713      	lsls	r3, r2, #28
 800ca6c:	d504      	bpl.n	800ca78 <_svfiprintf_r+0xc4>
 800ca6e:	2353      	movs	r3, #83	; 0x53
 800ca70:	a904      	add	r1, sp, #16
 800ca72:	185b      	adds	r3, r3, r1
 800ca74:	212b      	movs	r1, #43	; 0x2b
 800ca76:	7019      	strb	r1, [r3, #0]
 800ca78:	7833      	ldrb	r3, [r6, #0]
 800ca7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca7c:	d016      	beq.n	800caac <_svfiprintf_r+0xf8>
 800ca7e:	0035      	movs	r5, r6
 800ca80:	2100      	movs	r1, #0
 800ca82:	200a      	movs	r0, #10
 800ca84:	68e3      	ldr	r3, [r4, #12]
 800ca86:	782a      	ldrb	r2, [r5, #0]
 800ca88:	1c6e      	adds	r6, r5, #1
 800ca8a:	3a30      	subs	r2, #48	; 0x30
 800ca8c:	2a09      	cmp	r2, #9
 800ca8e:	d94e      	bls.n	800cb2e <_svfiprintf_r+0x17a>
 800ca90:	2900      	cmp	r1, #0
 800ca92:	d111      	bne.n	800cab8 <_svfiprintf_r+0x104>
 800ca94:	e017      	b.n	800cac6 <_svfiprintf_r+0x112>
 800ca96:	3501      	adds	r5, #1
 800ca98:	e7b0      	b.n	800c9fc <_svfiprintf_r+0x48>
 800ca9a:	4b41      	ldr	r3, [pc, #260]	; (800cba0 <_svfiprintf_r+0x1ec>)
 800ca9c:	6822      	ldr	r2, [r4, #0]
 800ca9e:	1ac0      	subs	r0, r0, r3
 800caa0:	2301      	movs	r3, #1
 800caa2:	4083      	lsls	r3, r0
 800caa4:	4313      	orrs	r3, r2
 800caa6:	002e      	movs	r6, r5
 800caa8:	6023      	str	r3, [r4, #0]
 800caaa:	e7ce      	b.n	800ca4a <_svfiprintf_r+0x96>
 800caac:	9b07      	ldr	r3, [sp, #28]
 800caae:	1d19      	adds	r1, r3, #4
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	9107      	str	r1, [sp, #28]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	db01      	blt.n	800cabc <_svfiprintf_r+0x108>
 800cab8:	930b      	str	r3, [sp, #44]	; 0x2c
 800caba:	e004      	b.n	800cac6 <_svfiprintf_r+0x112>
 800cabc:	425b      	negs	r3, r3
 800cabe:	60e3      	str	r3, [r4, #12]
 800cac0:	2302      	movs	r3, #2
 800cac2:	4313      	orrs	r3, r2
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	782b      	ldrb	r3, [r5, #0]
 800cac8:	2b2e      	cmp	r3, #46	; 0x2e
 800caca:	d10a      	bne.n	800cae2 <_svfiprintf_r+0x12e>
 800cacc:	786b      	ldrb	r3, [r5, #1]
 800cace:	2b2a      	cmp	r3, #42	; 0x2a
 800cad0:	d135      	bne.n	800cb3e <_svfiprintf_r+0x18a>
 800cad2:	9b07      	ldr	r3, [sp, #28]
 800cad4:	3502      	adds	r5, #2
 800cad6:	1d1a      	adds	r2, r3, #4
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	9207      	str	r2, [sp, #28]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	db2b      	blt.n	800cb38 <_svfiprintf_r+0x184>
 800cae0:	9309      	str	r3, [sp, #36]	; 0x24
 800cae2:	4e30      	ldr	r6, [pc, #192]	; (800cba4 <_svfiprintf_r+0x1f0>)
 800cae4:	2203      	movs	r2, #3
 800cae6:	0030      	movs	r0, r6
 800cae8:	7829      	ldrb	r1, [r5, #0]
 800caea:	f7ff f9ef 	bl	800becc <memchr>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d006      	beq.n	800cb00 <_svfiprintf_r+0x14c>
 800caf2:	2340      	movs	r3, #64	; 0x40
 800caf4:	1b80      	subs	r0, r0, r6
 800caf6:	4083      	lsls	r3, r0
 800caf8:	6822      	ldr	r2, [r4, #0]
 800cafa:	3501      	adds	r5, #1
 800cafc:	4313      	orrs	r3, r2
 800cafe:	6023      	str	r3, [r4, #0]
 800cb00:	7829      	ldrb	r1, [r5, #0]
 800cb02:	2206      	movs	r2, #6
 800cb04:	4828      	ldr	r0, [pc, #160]	; (800cba8 <_svfiprintf_r+0x1f4>)
 800cb06:	1c6e      	adds	r6, r5, #1
 800cb08:	7621      	strb	r1, [r4, #24]
 800cb0a:	f7ff f9df 	bl	800becc <memchr>
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d03c      	beq.n	800cb8c <_svfiprintf_r+0x1d8>
 800cb12:	4b26      	ldr	r3, [pc, #152]	; (800cbac <_svfiprintf_r+0x1f8>)
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d125      	bne.n	800cb64 <_svfiprintf_r+0x1b0>
 800cb18:	2207      	movs	r2, #7
 800cb1a:	9b07      	ldr	r3, [sp, #28]
 800cb1c:	3307      	adds	r3, #7
 800cb1e:	4393      	bics	r3, r2
 800cb20:	3308      	adds	r3, #8
 800cb22:	9307      	str	r3, [sp, #28]
 800cb24:	6963      	ldr	r3, [r4, #20]
 800cb26:	9a04      	ldr	r2, [sp, #16]
 800cb28:	189b      	adds	r3, r3, r2
 800cb2a:	6163      	str	r3, [r4, #20]
 800cb2c:	e765      	b.n	800c9fa <_svfiprintf_r+0x46>
 800cb2e:	4343      	muls	r3, r0
 800cb30:	0035      	movs	r5, r6
 800cb32:	2101      	movs	r1, #1
 800cb34:	189b      	adds	r3, r3, r2
 800cb36:	e7a6      	b.n	800ca86 <_svfiprintf_r+0xd2>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	425b      	negs	r3, r3
 800cb3c:	e7d0      	b.n	800cae0 <_svfiprintf_r+0x12c>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	200a      	movs	r0, #10
 800cb42:	001a      	movs	r2, r3
 800cb44:	3501      	adds	r5, #1
 800cb46:	6063      	str	r3, [r4, #4]
 800cb48:	7829      	ldrb	r1, [r5, #0]
 800cb4a:	1c6e      	adds	r6, r5, #1
 800cb4c:	3930      	subs	r1, #48	; 0x30
 800cb4e:	2909      	cmp	r1, #9
 800cb50:	d903      	bls.n	800cb5a <_svfiprintf_r+0x1a6>
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d0c5      	beq.n	800cae2 <_svfiprintf_r+0x12e>
 800cb56:	9209      	str	r2, [sp, #36]	; 0x24
 800cb58:	e7c3      	b.n	800cae2 <_svfiprintf_r+0x12e>
 800cb5a:	4342      	muls	r2, r0
 800cb5c:	0035      	movs	r5, r6
 800cb5e:	2301      	movs	r3, #1
 800cb60:	1852      	adds	r2, r2, r1
 800cb62:	e7f1      	b.n	800cb48 <_svfiprintf_r+0x194>
 800cb64:	ab07      	add	r3, sp, #28
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	003a      	movs	r2, r7
 800cb6a:	0021      	movs	r1, r4
 800cb6c:	4b10      	ldr	r3, [pc, #64]	; (800cbb0 <_svfiprintf_r+0x1fc>)
 800cb6e:	9803      	ldr	r0, [sp, #12]
 800cb70:	f7fc faa8 	bl	80090c4 <_printf_float>
 800cb74:	9004      	str	r0, [sp, #16]
 800cb76:	9b04      	ldr	r3, [sp, #16]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	d1d3      	bne.n	800cb24 <_svfiprintf_r+0x170>
 800cb7c:	89bb      	ldrh	r3, [r7, #12]
 800cb7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cb80:	065b      	lsls	r3, r3, #25
 800cb82:	d400      	bmi.n	800cb86 <_svfiprintf_r+0x1d2>
 800cb84:	e72d      	b.n	800c9e2 <_svfiprintf_r+0x2e>
 800cb86:	2001      	movs	r0, #1
 800cb88:	4240      	negs	r0, r0
 800cb8a:	e72a      	b.n	800c9e2 <_svfiprintf_r+0x2e>
 800cb8c:	ab07      	add	r3, sp, #28
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	003a      	movs	r2, r7
 800cb92:	0021      	movs	r1, r4
 800cb94:	4b06      	ldr	r3, [pc, #24]	; (800cbb0 <_svfiprintf_r+0x1fc>)
 800cb96:	9803      	ldr	r0, [sp, #12]
 800cb98:	f7fc fd46 	bl	8009628 <_printf_i>
 800cb9c:	e7ea      	b.n	800cb74 <_svfiprintf_r+0x1c0>
 800cb9e:	46c0      	nop			; (mov r8, r8)
 800cba0:	0800dddc 	.word	0x0800dddc
 800cba4:	0800dde2 	.word	0x0800dde2
 800cba8:	0800dde6 	.word	0x0800dde6
 800cbac:	080090c5 	.word	0x080090c5
 800cbb0:	0800c8f1 	.word	0x0800c8f1

0800cbb4 <nan>:
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	4901      	ldr	r1, [pc, #4]	; (800cbbc <nan+0x8>)
 800cbb8:	4770      	bx	lr
 800cbba:	46c0      	nop			; (mov r8, r8)
 800cbbc:	7ff80000 	.word	0x7ff80000

0800cbc0 <strncmp>:
 800cbc0:	b530      	push	{r4, r5, lr}
 800cbc2:	0005      	movs	r5, r0
 800cbc4:	1e10      	subs	r0, r2, #0
 800cbc6:	d008      	beq.n	800cbda <strncmp+0x1a>
 800cbc8:	2400      	movs	r4, #0
 800cbca:	3a01      	subs	r2, #1
 800cbcc:	5d2b      	ldrb	r3, [r5, r4]
 800cbce:	5d08      	ldrb	r0, [r1, r4]
 800cbd0:	4283      	cmp	r3, r0
 800cbd2:	d101      	bne.n	800cbd8 <strncmp+0x18>
 800cbd4:	4294      	cmp	r4, r2
 800cbd6:	d101      	bne.n	800cbdc <strncmp+0x1c>
 800cbd8:	1a18      	subs	r0, r3, r0
 800cbda:	bd30      	pop	{r4, r5, pc}
 800cbdc:	3401      	adds	r4, #1
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1f4      	bne.n	800cbcc <strncmp+0xc>
 800cbe2:	e7f9      	b.n	800cbd8 <strncmp+0x18>

0800cbe4 <__ascii_wctomb>:
 800cbe4:	0003      	movs	r3, r0
 800cbe6:	1e08      	subs	r0, r1, #0
 800cbe8:	d005      	beq.n	800cbf6 <__ascii_wctomb+0x12>
 800cbea:	2aff      	cmp	r2, #255	; 0xff
 800cbec:	d904      	bls.n	800cbf8 <__ascii_wctomb+0x14>
 800cbee:	228a      	movs	r2, #138	; 0x8a
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	4240      	negs	r0, r0
 800cbf6:	4770      	bx	lr
 800cbf8:	2001      	movs	r0, #1
 800cbfa:	700a      	strb	r2, [r1, #0]
 800cbfc:	e7fb      	b.n	800cbf6 <__ascii_wctomb+0x12>
	...

0800cc00 <__assert_func>:
 800cc00:	b530      	push	{r4, r5, lr}
 800cc02:	0014      	movs	r4, r2
 800cc04:	001a      	movs	r2, r3
 800cc06:	4b09      	ldr	r3, [pc, #36]	; (800cc2c <__assert_func+0x2c>)
 800cc08:	0005      	movs	r5, r0
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	b085      	sub	sp, #20
 800cc0e:	68d8      	ldr	r0, [r3, #12]
 800cc10:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <__assert_func+0x30>)
 800cc12:	2c00      	cmp	r4, #0
 800cc14:	d101      	bne.n	800cc1a <__assert_func+0x1a>
 800cc16:	4b07      	ldr	r3, [pc, #28]	; (800cc34 <__assert_func+0x34>)
 800cc18:	001c      	movs	r4, r3
 800cc1a:	9301      	str	r3, [sp, #4]
 800cc1c:	9100      	str	r1, [sp, #0]
 800cc1e:	002b      	movs	r3, r5
 800cc20:	4905      	ldr	r1, [pc, #20]	; (800cc38 <__assert_func+0x38>)
 800cc22:	9402      	str	r4, [sp, #8]
 800cc24:	f000 f80a 	bl	800cc3c <fiprintf>
 800cc28:	f000 fa8c 	bl	800d144 <abort>
 800cc2c:	2000000c 	.word	0x2000000c
 800cc30:	0800dded 	.word	0x0800dded
 800cc34:	0800de28 	.word	0x0800de28
 800cc38:	0800ddfa 	.word	0x0800ddfa

0800cc3c <fiprintf>:
 800cc3c:	b40e      	push	{r1, r2, r3}
 800cc3e:	b503      	push	{r0, r1, lr}
 800cc40:	0001      	movs	r1, r0
 800cc42:	ab03      	add	r3, sp, #12
 800cc44:	4804      	ldr	r0, [pc, #16]	; (800cc58 <fiprintf+0x1c>)
 800cc46:	cb04      	ldmia	r3!, {r2}
 800cc48:	6800      	ldr	r0, [r0, #0]
 800cc4a:	9301      	str	r3, [sp, #4]
 800cc4c:	f000 f872 	bl	800cd34 <_vfiprintf_r>
 800cc50:	b002      	add	sp, #8
 800cc52:	bc08      	pop	{r3}
 800cc54:	b003      	add	sp, #12
 800cc56:	4718      	bx	r3
 800cc58:	2000000c 	.word	0x2000000c

0800cc5c <__retarget_lock_init_recursive>:
 800cc5c:	4770      	bx	lr

0800cc5e <__retarget_lock_acquire_recursive>:
 800cc5e:	4770      	bx	lr

0800cc60 <__retarget_lock_release_recursive>:
 800cc60:	4770      	bx	lr

0800cc62 <memmove>:
 800cc62:	b510      	push	{r4, lr}
 800cc64:	4288      	cmp	r0, r1
 800cc66:	d902      	bls.n	800cc6e <memmove+0xc>
 800cc68:	188b      	adds	r3, r1, r2
 800cc6a:	4298      	cmp	r0, r3
 800cc6c:	d303      	bcc.n	800cc76 <memmove+0x14>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	e007      	b.n	800cc82 <memmove+0x20>
 800cc72:	5c8b      	ldrb	r3, [r1, r2]
 800cc74:	5483      	strb	r3, [r0, r2]
 800cc76:	3a01      	subs	r2, #1
 800cc78:	d2fb      	bcs.n	800cc72 <memmove+0x10>
 800cc7a:	bd10      	pop	{r4, pc}
 800cc7c:	5ccc      	ldrb	r4, [r1, r3]
 800cc7e:	54c4      	strb	r4, [r0, r3]
 800cc80:	3301      	adds	r3, #1
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d1fa      	bne.n	800cc7c <memmove+0x1a>
 800cc86:	e7f8      	b.n	800cc7a <memmove+0x18>

0800cc88 <_realloc_r>:
 800cc88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc8a:	0007      	movs	r7, r0
 800cc8c:	000e      	movs	r6, r1
 800cc8e:	0014      	movs	r4, r2
 800cc90:	2900      	cmp	r1, #0
 800cc92:	d105      	bne.n	800cca0 <_realloc_r+0x18>
 800cc94:	0011      	movs	r1, r2
 800cc96:	f7fc f8f5 	bl	8008e84 <_malloc_r>
 800cc9a:	0005      	movs	r5, r0
 800cc9c:	0028      	movs	r0, r5
 800cc9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cca0:	2a00      	cmp	r2, #0
 800cca2:	d103      	bne.n	800ccac <_realloc_r+0x24>
 800cca4:	f7fc f882 	bl	8008dac <_free_r>
 800cca8:	0025      	movs	r5, r4
 800ccaa:	e7f7      	b.n	800cc9c <_realloc_r+0x14>
 800ccac:	f000 fc8c 	bl	800d5c8 <_malloc_usable_size_r>
 800ccb0:	9001      	str	r0, [sp, #4]
 800ccb2:	4284      	cmp	r4, r0
 800ccb4:	d803      	bhi.n	800ccbe <_realloc_r+0x36>
 800ccb6:	0035      	movs	r5, r6
 800ccb8:	0843      	lsrs	r3, r0, #1
 800ccba:	42a3      	cmp	r3, r4
 800ccbc:	d3ee      	bcc.n	800cc9c <_realloc_r+0x14>
 800ccbe:	0021      	movs	r1, r4
 800ccc0:	0038      	movs	r0, r7
 800ccc2:	f7fc f8df 	bl	8008e84 <_malloc_r>
 800ccc6:	1e05      	subs	r5, r0, #0
 800ccc8:	d0e8      	beq.n	800cc9c <_realloc_r+0x14>
 800ccca:	9b01      	ldr	r3, [sp, #4]
 800cccc:	0022      	movs	r2, r4
 800ccce:	429c      	cmp	r4, r3
 800ccd0:	d900      	bls.n	800ccd4 <_realloc_r+0x4c>
 800ccd2:	001a      	movs	r2, r3
 800ccd4:	0031      	movs	r1, r6
 800ccd6:	0028      	movs	r0, r5
 800ccd8:	f7fc f856 	bl	8008d88 <memcpy>
 800ccdc:	0031      	movs	r1, r6
 800ccde:	0038      	movs	r0, r7
 800cce0:	f7fc f864 	bl	8008dac <_free_r>
 800cce4:	e7da      	b.n	800cc9c <_realloc_r+0x14>

0800cce6 <__sfputc_r>:
 800cce6:	6893      	ldr	r3, [r2, #8]
 800cce8:	b510      	push	{r4, lr}
 800ccea:	3b01      	subs	r3, #1
 800ccec:	6093      	str	r3, [r2, #8]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	da04      	bge.n	800ccfc <__sfputc_r+0x16>
 800ccf2:	6994      	ldr	r4, [r2, #24]
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	db07      	blt.n	800cd08 <__sfputc_r+0x22>
 800ccf8:	290a      	cmp	r1, #10
 800ccfa:	d005      	beq.n	800cd08 <__sfputc_r+0x22>
 800ccfc:	6813      	ldr	r3, [r2, #0]
 800ccfe:	1c58      	adds	r0, r3, #1
 800cd00:	6010      	str	r0, [r2, #0]
 800cd02:	7019      	strb	r1, [r3, #0]
 800cd04:	0008      	movs	r0, r1
 800cd06:	bd10      	pop	{r4, pc}
 800cd08:	f000 f94e 	bl	800cfa8 <__swbuf_r>
 800cd0c:	0001      	movs	r1, r0
 800cd0e:	e7f9      	b.n	800cd04 <__sfputc_r+0x1e>

0800cd10 <__sfputs_r>:
 800cd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd12:	0006      	movs	r6, r0
 800cd14:	000f      	movs	r7, r1
 800cd16:	0014      	movs	r4, r2
 800cd18:	18d5      	adds	r5, r2, r3
 800cd1a:	42ac      	cmp	r4, r5
 800cd1c:	d101      	bne.n	800cd22 <__sfputs_r+0x12>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	e007      	b.n	800cd32 <__sfputs_r+0x22>
 800cd22:	7821      	ldrb	r1, [r4, #0]
 800cd24:	003a      	movs	r2, r7
 800cd26:	0030      	movs	r0, r6
 800cd28:	f7ff ffdd 	bl	800cce6 <__sfputc_r>
 800cd2c:	3401      	adds	r4, #1
 800cd2e:	1c43      	adds	r3, r0, #1
 800cd30:	d1f3      	bne.n	800cd1a <__sfputs_r+0xa>
 800cd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd34 <_vfiprintf_r>:
 800cd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd36:	b0a1      	sub	sp, #132	; 0x84
 800cd38:	0006      	movs	r6, r0
 800cd3a:	000c      	movs	r4, r1
 800cd3c:	001f      	movs	r7, r3
 800cd3e:	9203      	str	r2, [sp, #12]
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d004      	beq.n	800cd4e <_vfiprintf_r+0x1a>
 800cd44:	6983      	ldr	r3, [r0, #24]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d101      	bne.n	800cd4e <_vfiprintf_r+0x1a>
 800cd4a:	f000 fb31 	bl	800d3b0 <__sinit>
 800cd4e:	4b8e      	ldr	r3, [pc, #568]	; (800cf88 <_vfiprintf_r+0x254>)
 800cd50:	429c      	cmp	r4, r3
 800cd52:	d11c      	bne.n	800cd8e <_vfiprintf_r+0x5a>
 800cd54:	6874      	ldr	r4, [r6, #4]
 800cd56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd58:	07db      	lsls	r3, r3, #31
 800cd5a:	d405      	bmi.n	800cd68 <_vfiprintf_r+0x34>
 800cd5c:	89a3      	ldrh	r3, [r4, #12]
 800cd5e:	059b      	lsls	r3, r3, #22
 800cd60:	d402      	bmi.n	800cd68 <_vfiprintf_r+0x34>
 800cd62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd64:	f7ff ff7b 	bl	800cc5e <__retarget_lock_acquire_recursive>
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	071b      	lsls	r3, r3, #28
 800cd6c:	d502      	bpl.n	800cd74 <_vfiprintf_r+0x40>
 800cd6e:	6923      	ldr	r3, [r4, #16]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d11d      	bne.n	800cdb0 <_vfiprintf_r+0x7c>
 800cd74:	0021      	movs	r1, r4
 800cd76:	0030      	movs	r0, r6
 800cd78:	f000 f96c 	bl	800d054 <__swsetup_r>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d017      	beq.n	800cdb0 <_vfiprintf_r+0x7c>
 800cd80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd82:	07db      	lsls	r3, r3, #31
 800cd84:	d50d      	bpl.n	800cda2 <_vfiprintf_r+0x6e>
 800cd86:	2001      	movs	r0, #1
 800cd88:	4240      	negs	r0, r0
 800cd8a:	b021      	add	sp, #132	; 0x84
 800cd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd8e:	4b7f      	ldr	r3, [pc, #508]	; (800cf8c <_vfiprintf_r+0x258>)
 800cd90:	429c      	cmp	r4, r3
 800cd92:	d101      	bne.n	800cd98 <_vfiprintf_r+0x64>
 800cd94:	68b4      	ldr	r4, [r6, #8]
 800cd96:	e7de      	b.n	800cd56 <_vfiprintf_r+0x22>
 800cd98:	4b7d      	ldr	r3, [pc, #500]	; (800cf90 <_vfiprintf_r+0x25c>)
 800cd9a:	429c      	cmp	r4, r3
 800cd9c:	d1db      	bne.n	800cd56 <_vfiprintf_r+0x22>
 800cd9e:	68f4      	ldr	r4, [r6, #12]
 800cda0:	e7d9      	b.n	800cd56 <_vfiprintf_r+0x22>
 800cda2:	89a3      	ldrh	r3, [r4, #12]
 800cda4:	059b      	lsls	r3, r3, #22
 800cda6:	d4ee      	bmi.n	800cd86 <_vfiprintf_r+0x52>
 800cda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdaa:	f7ff ff59 	bl	800cc60 <__retarget_lock_release_recursive>
 800cdae:	e7ea      	b.n	800cd86 <_vfiprintf_r+0x52>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	ad08      	add	r5, sp, #32
 800cdb4:	616b      	str	r3, [r5, #20]
 800cdb6:	3320      	adds	r3, #32
 800cdb8:	766b      	strb	r3, [r5, #25]
 800cdba:	3310      	adds	r3, #16
 800cdbc:	76ab      	strb	r3, [r5, #26]
 800cdbe:	9707      	str	r7, [sp, #28]
 800cdc0:	9f03      	ldr	r7, [sp, #12]
 800cdc2:	783b      	ldrb	r3, [r7, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d001      	beq.n	800cdcc <_vfiprintf_r+0x98>
 800cdc8:	2b25      	cmp	r3, #37	; 0x25
 800cdca:	d14e      	bne.n	800ce6a <_vfiprintf_r+0x136>
 800cdcc:	9b03      	ldr	r3, [sp, #12]
 800cdce:	1afb      	subs	r3, r7, r3
 800cdd0:	9305      	str	r3, [sp, #20]
 800cdd2:	9b03      	ldr	r3, [sp, #12]
 800cdd4:	429f      	cmp	r7, r3
 800cdd6:	d00d      	beq.n	800cdf4 <_vfiprintf_r+0xc0>
 800cdd8:	9b05      	ldr	r3, [sp, #20]
 800cdda:	0021      	movs	r1, r4
 800cddc:	0030      	movs	r0, r6
 800cdde:	9a03      	ldr	r2, [sp, #12]
 800cde0:	f7ff ff96 	bl	800cd10 <__sfputs_r>
 800cde4:	1c43      	adds	r3, r0, #1
 800cde6:	d100      	bne.n	800cdea <_vfiprintf_r+0xb6>
 800cde8:	e0b5      	b.n	800cf56 <_vfiprintf_r+0x222>
 800cdea:	696a      	ldr	r2, [r5, #20]
 800cdec:	9b05      	ldr	r3, [sp, #20]
 800cdee:	4694      	mov	ip, r2
 800cdf0:	4463      	add	r3, ip
 800cdf2:	616b      	str	r3, [r5, #20]
 800cdf4:	783b      	ldrb	r3, [r7, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d100      	bne.n	800cdfc <_vfiprintf_r+0xc8>
 800cdfa:	e0ac      	b.n	800cf56 <_vfiprintf_r+0x222>
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	1c7b      	adds	r3, r7, #1
 800ce00:	9303      	str	r3, [sp, #12]
 800ce02:	2300      	movs	r3, #0
 800ce04:	4252      	negs	r2, r2
 800ce06:	606a      	str	r2, [r5, #4]
 800ce08:	a904      	add	r1, sp, #16
 800ce0a:	3254      	adds	r2, #84	; 0x54
 800ce0c:	1852      	adds	r2, r2, r1
 800ce0e:	602b      	str	r3, [r5, #0]
 800ce10:	60eb      	str	r3, [r5, #12]
 800ce12:	60ab      	str	r3, [r5, #8]
 800ce14:	7013      	strb	r3, [r2, #0]
 800ce16:	65ab      	str	r3, [r5, #88]	; 0x58
 800ce18:	9b03      	ldr	r3, [sp, #12]
 800ce1a:	2205      	movs	r2, #5
 800ce1c:	7819      	ldrb	r1, [r3, #0]
 800ce1e:	485d      	ldr	r0, [pc, #372]	; (800cf94 <_vfiprintf_r+0x260>)
 800ce20:	f7ff f854 	bl	800becc <memchr>
 800ce24:	9b03      	ldr	r3, [sp, #12]
 800ce26:	1c5f      	adds	r7, r3, #1
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d120      	bne.n	800ce6e <_vfiprintf_r+0x13a>
 800ce2c:	682a      	ldr	r2, [r5, #0]
 800ce2e:	06d3      	lsls	r3, r2, #27
 800ce30:	d504      	bpl.n	800ce3c <_vfiprintf_r+0x108>
 800ce32:	2353      	movs	r3, #83	; 0x53
 800ce34:	a904      	add	r1, sp, #16
 800ce36:	185b      	adds	r3, r3, r1
 800ce38:	2120      	movs	r1, #32
 800ce3a:	7019      	strb	r1, [r3, #0]
 800ce3c:	0713      	lsls	r3, r2, #28
 800ce3e:	d504      	bpl.n	800ce4a <_vfiprintf_r+0x116>
 800ce40:	2353      	movs	r3, #83	; 0x53
 800ce42:	a904      	add	r1, sp, #16
 800ce44:	185b      	adds	r3, r3, r1
 800ce46:	212b      	movs	r1, #43	; 0x2b
 800ce48:	7019      	strb	r1, [r3, #0]
 800ce4a:	9b03      	ldr	r3, [sp, #12]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ce50:	d016      	beq.n	800ce80 <_vfiprintf_r+0x14c>
 800ce52:	2100      	movs	r1, #0
 800ce54:	68eb      	ldr	r3, [r5, #12]
 800ce56:	9f03      	ldr	r7, [sp, #12]
 800ce58:	783a      	ldrb	r2, [r7, #0]
 800ce5a:	1c78      	adds	r0, r7, #1
 800ce5c:	3a30      	subs	r2, #48	; 0x30
 800ce5e:	4684      	mov	ip, r0
 800ce60:	2a09      	cmp	r2, #9
 800ce62:	d94f      	bls.n	800cf04 <_vfiprintf_r+0x1d0>
 800ce64:	2900      	cmp	r1, #0
 800ce66:	d111      	bne.n	800ce8c <_vfiprintf_r+0x158>
 800ce68:	e017      	b.n	800ce9a <_vfiprintf_r+0x166>
 800ce6a:	3701      	adds	r7, #1
 800ce6c:	e7a9      	b.n	800cdc2 <_vfiprintf_r+0x8e>
 800ce6e:	4b49      	ldr	r3, [pc, #292]	; (800cf94 <_vfiprintf_r+0x260>)
 800ce70:	682a      	ldr	r2, [r5, #0]
 800ce72:	1ac0      	subs	r0, r0, r3
 800ce74:	2301      	movs	r3, #1
 800ce76:	4083      	lsls	r3, r0
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	602b      	str	r3, [r5, #0]
 800ce7c:	9703      	str	r7, [sp, #12]
 800ce7e:	e7cb      	b.n	800ce18 <_vfiprintf_r+0xe4>
 800ce80:	9b07      	ldr	r3, [sp, #28]
 800ce82:	1d19      	adds	r1, r3, #4
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	9107      	str	r1, [sp, #28]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	db01      	blt.n	800ce90 <_vfiprintf_r+0x15c>
 800ce8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce8e:	e004      	b.n	800ce9a <_vfiprintf_r+0x166>
 800ce90:	425b      	negs	r3, r3
 800ce92:	60eb      	str	r3, [r5, #12]
 800ce94:	2302      	movs	r3, #2
 800ce96:	4313      	orrs	r3, r2
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	783b      	ldrb	r3, [r7, #0]
 800ce9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ce9e:	d10a      	bne.n	800ceb6 <_vfiprintf_r+0x182>
 800cea0:	787b      	ldrb	r3, [r7, #1]
 800cea2:	2b2a      	cmp	r3, #42	; 0x2a
 800cea4:	d137      	bne.n	800cf16 <_vfiprintf_r+0x1e2>
 800cea6:	9b07      	ldr	r3, [sp, #28]
 800cea8:	3702      	adds	r7, #2
 800ceaa:	1d1a      	adds	r2, r3, #4
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	9207      	str	r2, [sp, #28]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	db2d      	blt.n	800cf10 <_vfiprintf_r+0x1dc>
 800ceb4:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb6:	2203      	movs	r2, #3
 800ceb8:	7839      	ldrb	r1, [r7, #0]
 800ceba:	4837      	ldr	r0, [pc, #220]	; (800cf98 <_vfiprintf_r+0x264>)
 800cebc:	f7ff f806 	bl	800becc <memchr>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d007      	beq.n	800ced4 <_vfiprintf_r+0x1a0>
 800cec4:	4b34      	ldr	r3, [pc, #208]	; (800cf98 <_vfiprintf_r+0x264>)
 800cec6:	682a      	ldr	r2, [r5, #0]
 800cec8:	1ac0      	subs	r0, r0, r3
 800ceca:	2340      	movs	r3, #64	; 0x40
 800cecc:	4083      	lsls	r3, r0
 800cece:	4313      	orrs	r3, r2
 800ced0:	3701      	adds	r7, #1
 800ced2:	602b      	str	r3, [r5, #0]
 800ced4:	7839      	ldrb	r1, [r7, #0]
 800ced6:	1c7b      	adds	r3, r7, #1
 800ced8:	2206      	movs	r2, #6
 800ceda:	4830      	ldr	r0, [pc, #192]	; (800cf9c <_vfiprintf_r+0x268>)
 800cedc:	9303      	str	r3, [sp, #12]
 800cede:	7629      	strb	r1, [r5, #24]
 800cee0:	f7fe fff4 	bl	800becc <memchr>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d045      	beq.n	800cf74 <_vfiprintf_r+0x240>
 800cee8:	4b2d      	ldr	r3, [pc, #180]	; (800cfa0 <_vfiprintf_r+0x26c>)
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d127      	bne.n	800cf3e <_vfiprintf_r+0x20a>
 800ceee:	2207      	movs	r2, #7
 800cef0:	9b07      	ldr	r3, [sp, #28]
 800cef2:	3307      	adds	r3, #7
 800cef4:	4393      	bics	r3, r2
 800cef6:	3308      	adds	r3, #8
 800cef8:	9307      	str	r3, [sp, #28]
 800cefa:	696b      	ldr	r3, [r5, #20]
 800cefc:	9a04      	ldr	r2, [sp, #16]
 800cefe:	189b      	adds	r3, r3, r2
 800cf00:	616b      	str	r3, [r5, #20]
 800cf02:	e75d      	b.n	800cdc0 <_vfiprintf_r+0x8c>
 800cf04:	210a      	movs	r1, #10
 800cf06:	434b      	muls	r3, r1
 800cf08:	4667      	mov	r7, ip
 800cf0a:	189b      	adds	r3, r3, r2
 800cf0c:	3909      	subs	r1, #9
 800cf0e:	e7a3      	b.n	800ce58 <_vfiprintf_r+0x124>
 800cf10:	2301      	movs	r3, #1
 800cf12:	425b      	negs	r3, r3
 800cf14:	e7ce      	b.n	800ceb4 <_vfiprintf_r+0x180>
 800cf16:	2300      	movs	r3, #0
 800cf18:	001a      	movs	r2, r3
 800cf1a:	3701      	adds	r7, #1
 800cf1c:	606b      	str	r3, [r5, #4]
 800cf1e:	7839      	ldrb	r1, [r7, #0]
 800cf20:	1c78      	adds	r0, r7, #1
 800cf22:	3930      	subs	r1, #48	; 0x30
 800cf24:	4684      	mov	ip, r0
 800cf26:	2909      	cmp	r1, #9
 800cf28:	d903      	bls.n	800cf32 <_vfiprintf_r+0x1fe>
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d0c3      	beq.n	800ceb6 <_vfiprintf_r+0x182>
 800cf2e:	9209      	str	r2, [sp, #36]	; 0x24
 800cf30:	e7c1      	b.n	800ceb6 <_vfiprintf_r+0x182>
 800cf32:	230a      	movs	r3, #10
 800cf34:	435a      	muls	r2, r3
 800cf36:	4667      	mov	r7, ip
 800cf38:	1852      	adds	r2, r2, r1
 800cf3a:	3b09      	subs	r3, #9
 800cf3c:	e7ef      	b.n	800cf1e <_vfiprintf_r+0x1ea>
 800cf3e:	ab07      	add	r3, sp, #28
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	0022      	movs	r2, r4
 800cf44:	0029      	movs	r1, r5
 800cf46:	0030      	movs	r0, r6
 800cf48:	4b16      	ldr	r3, [pc, #88]	; (800cfa4 <_vfiprintf_r+0x270>)
 800cf4a:	f7fc f8bb 	bl	80090c4 <_printf_float>
 800cf4e:	9004      	str	r0, [sp, #16]
 800cf50:	9b04      	ldr	r3, [sp, #16]
 800cf52:	3301      	adds	r3, #1
 800cf54:	d1d1      	bne.n	800cefa <_vfiprintf_r+0x1c6>
 800cf56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf58:	07db      	lsls	r3, r3, #31
 800cf5a:	d405      	bmi.n	800cf68 <_vfiprintf_r+0x234>
 800cf5c:	89a3      	ldrh	r3, [r4, #12]
 800cf5e:	059b      	lsls	r3, r3, #22
 800cf60:	d402      	bmi.n	800cf68 <_vfiprintf_r+0x234>
 800cf62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf64:	f7ff fe7c 	bl	800cc60 <__retarget_lock_release_recursive>
 800cf68:	89a3      	ldrh	r3, [r4, #12]
 800cf6a:	065b      	lsls	r3, r3, #25
 800cf6c:	d500      	bpl.n	800cf70 <_vfiprintf_r+0x23c>
 800cf6e:	e70a      	b.n	800cd86 <_vfiprintf_r+0x52>
 800cf70:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cf72:	e70a      	b.n	800cd8a <_vfiprintf_r+0x56>
 800cf74:	ab07      	add	r3, sp, #28
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	0022      	movs	r2, r4
 800cf7a:	0029      	movs	r1, r5
 800cf7c:	0030      	movs	r0, r6
 800cf7e:	4b09      	ldr	r3, [pc, #36]	; (800cfa4 <_vfiprintf_r+0x270>)
 800cf80:	f7fc fb52 	bl	8009628 <_printf_i>
 800cf84:	e7e3      	b.n	800cf4e <_vfiprintf_r+0x21a>
 800cf86:	46c0      	nop			; (mov r8, r8)
 800cf88:	0800de4c 	.word	0x0800de4c
 800cf8c:	0800de6c 	.word	0x0800de6c
 800cf90:	0800de2c 	.word	0x0800de2c
 800cf94:	0800dddc 	.word	0x0800dddc
 800cf98:	0800dde2 	.word	0x0800dde2
 800cf9c:	0800dde6 	.word	0x0800dde6
 800cfa0:	080090c5 	.word	0x080090c5
 800cfa4:	0800cd11 	.word	0x0800cd11

0800cfa8 <__swbuf_r>:
 800cfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfaa:	0005      	movs	r5, r0
 800cfac:	000e      	movs	r6, r1
 800cfae:	0014      	movs	r4, r2
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d004      	beq.n	800cfbe <__swbuf_r+0x16>
 800cfb4:	6983      	ldr	r3, [r0, #24]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <__swbuf_r+0x16>
 800cfba:	f000 f9f9 	bl	800d3b0 <__sinit>
 800cfbe:	4b22      	ldr	r3, [pc, #136]	; (800d048 <__swbuf_r+0xa0>)
 800cfc0:	429c      	cmp	r4, r3
 800cfc2:	d12e      	bne.n	800d022 <__swbuf_r+0x7a>
 800cfc4:	686c      	ldr	r4, [r5, #4]
 800cfc6:	69a3      	ldr	r3, [r4, #24]
 800cfc8:	60a3      	str	r3, [r4, #8]
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	071b      	lsls	r3, r3, #28
 800cfce:	d532      	bpl.n	800d036 <__swbuf_r+0x8e>
 800cfd0:	6923      	ldr	r3, [r4, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d02f      	beq.n	800d036 <__swbuf_r+0x8e>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	6922      	ldr	r2, [r4, #16]
 800cfda:	b2f7      	uxtb	r7, r6
 800cfdc:	1a98      	subs	r0, r3, r2
 800cfde:	6963      	ldr	r3, [r4, #20]
 800cfe0:	b2f6      	uxtb	r6, r6
 800cfe2:	4283      	cmp	r3, r0
 800cfe4:	dc05      	bgt.n	800cff2 <__swbuf_r+0x4a>
 800cfe6:	0021      	movs	r1, r4
 800cfe8:	0028      	movs	r0, r5
 800cfea:	f000 f93f 	bl	800d26c <_fflush_r>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d127      	bne.n	800d042 <__swbuf_r+0x9a>
 800cff2:	68a3      	ldr	r3, [r4, #8]
 800cff4:	3001      	adds	r0, #1
 800cff6:	3b01      	subs	r3, #1
 800cff8:	60a3      	str	r3, [r4, #8]
 800cffa:	6823      	ldr	r3, [r4, #0]
 800cffc:	1c5a      	adds	r2, r3, #1
 800cffe:	6022      	str	r2, [r4, #0]
 800d000:	701f      	strb	r7, [r3, #0]
 800d002:	6963      	ldr	r3, [r4, #20]
 800d004:	4283      	cmp	r3, r0
 800d006:	d004      	beq.n	800d012 <__swbuf_r+0x6a>
 800d008:	89a3      	ldrh	r3, [r4, #12]
 800d00a:	07db      	lsls	r3, r3, #31
 800d00c:	d507      	bpl.n	800d01e <__swbuf_r+0x76>
 800d00e:	2e0a      	cmp	r6, #10
 800d010:	d105      	bne.n	800d01e <__swbuf_r+0x76>
 800d012:	0021      	movs	r1, r4
 800d014:	0028      	movs	r0, r5
 800d016:	f000 f929 	bl	800d26c <_fflush_r>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d111      	bne.n	800d042 <__swbuf_r+0x9a>
 800d01e:	0030      	movs	r0, r6
 800d020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d022:	4b0a      	ldr	r3, [pc, #40]	; (800d04c <__swbuf_r+0xa4>)
 800d024:	429c      	cmp	r4, r3
 800d026:	d101      	bne.n	800d02c <__swbuf_r+0x84>
 800d028:	68ac      	ldr	r4, [r5, #8]
 800d02a:	e7cc      	b.n	800cfc6 <__swbuf_r+0x1e>
 800d02c:	4b08      	ldr	r3, [pc, #32]	; (800d050 <__swbuf_r+0xa8>)
 800d02e:	429c      	cmp	r4, r3
 800d030:	d1c9      	bne.n	800cfc6 <__swbuf_r+0x1e>
 800d032:	68ec      	ldr	r4, [r5, #12]
 800d034:	e7c7      	b.n	800cfc6 <__swbuf_r+0x1e>
 800d036:	0021      	movs	r1, r4
 800d038:	0028      	movs	r0, r5
 800d03a:	f000 f80b 	bl	800d054 <__swsetup_r>
 800d03e:	2800      	cmp	r0, #0
 800d040:	d0c9      	beq.n	800cfd6 <__swbuf_r+0x2e>
 800d042:	2601      	movs	r6, #1
 800d044:	4276      	negs	r6, r6
 800d046:	e7ea      	b.n	800d01e <__swbuf_r+0x76>
 800d048:	0800de4c 	.word	0x0800de4c
 800d04c:	0800de6c 	.word	0x0800de6c
 800d050:	0800de2c 	.word	0x0800de2c

0800d054 <__swsetup_r>:
 800d054:	4b37      	ldr	r3, [pc, #220]	; (800d134 <__swsetup_r+0xe0>)
 800d056:	b570      	push	{r4, r5, r6, lr}
 800d058:	681d      	ldr	r5, [r3, #0]
 800d05a:	0006      	movs	r6, r0
 800d05c:	000c      	movs	r4, r1
 800d05e:	2d00      	cmp	r5, #0
 800d060:	d005      	beq.n	800d06e <__swsetup_r+0x1a>
 800d062:	69ab      	ldr	r3, [r5, #24]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d102      	bne.n	800d06e <__swsetup_r+0x1a>
 800d068:	0028      	movs	r0, r5
 800d06a:	f000 f9a1 	bl	800d3b0 <__sinit>
 800d06e:	4b32      	ldr	r3, [pc, #200]	; (800d138 <__swsetup_r+0xe4>)
 800d070:	429c      	cmp	r4, r3
 800d072:	d10f      	bne.n	800d094 <__swsetup_r+0x40>
 800d074:	686c      	ldr	r4, [r5, #4]
 800d076:	230c      	movs	r3, #12
 800d078:	5ee2      	ldrsh	r2, [r4, r3]
 800d07a:	b293      	uxth	r3, r2
 800d07c:	0711      	lsls	r1, r2, #28
 800d07e:	d42d      	bmi.n	800d0dc <__swsetup_r+0x88>
 800d080:	06d9      	lsls	r1, r3, #27
 800d082:	d411      	bmi.n	800d0a8 <__swsetup_r+0x54>
 800d084:	2309      	movs	r3, #9
 800d086:	2001      	movs	r0, #1
 800d088:	6033      	str	r3, [r6, #0]
 800d08a:	3337      	adds	r3, #55	; 0x37
 800d08c:	4313      	orrs	r3, r2
 800d08e:	81a3      	strh	r3, [r4, #12]
 800d090:	4240      	negs	r0, r0
 800d092:	bd70      	pop	{r4, r5, r6, pc}
 800d094:	4b29      	ldr	r3, [pc, #164]	; (800d13c <__swsetup_r+0xe8>)
 800d096:	429c      	cmp	r4, r3
 800d098:	d101      	bne.n	800d09e <__swsetup_r+0x4a>
 800d09a:	68ac      	ldr	r4, [r5, #8]
 800d09c:	e7eb      	b.n	800d076 <__swsetup_r+0x22>
 800d09e:	4b28      	ldr	r3, [pc, #160]	; (800d140 <__swsetup_r+0xec>)
 800d0a0:	429c      	cmp	r4, r3
 800d0a2:	d1e8      	bne.n	800d076 <__swsetup_r+0x22>
 800d0a4:	68ec      	ldr	r4, [r5, #12]
 800d0a6:	e7e6      	b.n	800d076 <__swsetup_r+0x22>
 800d0a8:	075b      	lsls	r3, r3, #29
 800d0aa:	d513      	bpl.n	800d0d4 <__swsetup_r+0x80>
 800d0ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ae:	2900      	cmp	r1, #0
 800d0b0:	d008      	beq.n	800d0c4 <__swsetup_r+0x70>
 800d0b2:	0023      	movs	r3, r4
 800d0b4:	3344      	adds	r3, #68	; 0x44
 800d0b6:	4299      	cmp	r1, r3
 800d0b8:	d002      	beq.n	800d0c0 <__swsetup_r+0x6c>
 800d0ba:	0030      	movs	r0, r6
 800d0bc:	f7fb fe76 	bl	8008dac <_free_r>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	6363      	str	r3, [r4, #52]	; 0x34
 800d0c4:	2224      	movs	r2, #36	; 0x24
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	4393      	bics	r3, r2
 800d0ca:	81a3      	strh	r3, [r4, #12]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	6063      	str	r3, [r4, #4]
 800d0d0:	6923      	ldr	r3, [r4, #16]
 800d0d2:	6023      	str	r3, [r4, #0]
 800d0d4:	2308      	movs	r3, #8
 800d0d6:	89a2      	ldrh	r2, [r4, #12]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	6923      	ldr	r3, [r4, #16]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10b      	bne.n	800d0fa <__swsetup_r+0xa6>
 800d0e2:	21a0      	movs	r1, #160	; 0xa0
 800d0e4:	2280      	movs	r2, #128	; 0x80
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	0089      	lsls	r1, r1, #2
 800d0ea:	0092      	lsls	r2, r2, #2
 800d0ec:	400b      	ands	r3, r1
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d003      	beq.n	800d0fa <__swsetup_r+0xa6>
 800d0f2:	0021      	movs	r1, r4
 800d0f4:	0030      	movs	r0, r6
 800d0f6:	f000 fa23 	bl	800d540 <__smakebuf_r>
 800d0fa:	220c      	movs	r2, #12
 800d0fc:	5ea3      	ldrsh	r3, [r4, r2]
 800d0fe:	2001      	movs	r0, #1
 800d100:	001a      	movs	r2, r3
 800d102:	b299      	uxth	r1, r3
 800d104:	4002      	ands	r2, r0
 800d106:	4203      	tst	r3, r0
 800d108:	d00f      	beq.n	800d12a <__swsetup_r+0xd6>
 800d10a:	2200      	movs	r2, #0
 800d10c:	60a2      	str	r2, [r4, #8]
 800d10e:	6962      	ldr	r2, [r4, #20]
 800d110:	4252      	negs	r2, r2
 800d112:	61a2      	str	r2, [r4, #24]
 800d114:	2000      	movs	r0, #0
 800d116:	6922      	ldr	r2, [r4, #16]
 800d118:	4282      	cmp	r2, r0
 800d11a:	d1ba      	bne.n	800d092 <__swsetup_r+0x3e>
 800d11c:	060a      	lsls	r2, r1, #24
 800d11e:	d5b8      	bpl.n	800d092 <__swsetup_r+0x3e>
 800d120:	2240      	movs	r2, #64	; 0x40
 800d122:	4313      	orrs	r3, r2
 800d124:	81a3      	strh	r3, [r4, #12]
 800d126:	3801      	subs	r0, #1
 800d128:	e7b3      	b.n	800d092 <__swsetup_r+0x3e>
 800d12a:	0788      	lsls	r0, r1, #30
 800d12c:	d400      	bmi.n	800d130 <__swsetup_r+0xdc>
 800d12e:	6962      	ldr	r2, [r4, #20]
 800d130:	60a2      	str	r2, [r4, #8]
 800d132:	e7ef      	b.n	800d114 <__swsetup_r+0xc0>
 800d134:	2000000c 	.word	0x2000000c
 800d138:	0800de4c 	.word	0x0800de4c
 800d13c:	0800de6c 	.word	0x0800de6c
 800d140:	0800de2c 	.word	0x0800de2c

0800d144 <abort>:
 800d144:	2006      	movs	r0, #6
 800d146:	b510      	push	{r4, lr}
 800d148:	f000 fa70 	bl	800d62c <raise>
 800d14c:	2001      	movs	r0, #1
 800d14e:	f7f7 fbc7 	bl	80048e0 <_exit>
	...

0800d154 <__sflush_r>:
 800d154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d156:	898b      	ldrh	r3, [r1, #12]
 800d158:	0005      	movs	r5, r0
 800d15a:	000c      	movs	r4, r1
 800d15c:	071a      	lsls	r2, r3, #28
 800d15e:	d45f      	bmi.n	800d220 <__sflush_r+0xcc>
 800d160:	684a      	ldr	r2, [r1, #4]
 800d162:	2a00      	cmp	r2, #0
 800d164:	dc04      	bgt.n	800d170 <__sflush_r+0x1c>
 800d166:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d168:	2a00      	cmp	r2, #0
 800d16a:	dc01      	bgt.n	800d170 <__sflush_r+0x1c>
 800d16c:	2000      	movs	r0, #0
 800d16e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d170:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d172:	2f00      	cmp	r7, #0
 800d174:	d0fa      	beq.n	800d16c <__sflush_r+0x18>
 800d176:	2200      	movs	r2, #0
 800d178:	2180      	movs	r1, #128	; 0x80
 800d17a:	682e      	ldr	r6, [r5, #0]
 800d17c:	602a      	str	r2, [r5, #0]
 800d17e:	001a      	movs	r2, r3
 800d180:	0149      	lsls	r1, r1, #5
 800d182:	400a      	ands	r2, r1
 800d184:	420b      	tst	r3, r1
 800d186:	d034      	beq.n	800d1f2 <__sflush_r+0x9e>
 800d188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d18a:	89a3      	ldrh	r3, [r4, #12]
 800d18c:	075b      	lsls	r3, r3, #29
 800d18e:	d506      	bpl.n	800d19e <__sflush_r+0x4a>
 800d190:	6863      	ldr	r3, [r4, #4]
 800d192:	1ac0      	subs	r0, r0, r3
 800d194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <__sflush_r+0x4a>
 800d19a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d19c:	1ac0      	subs	r0, r0, r3
 800d19e:	0002      	movs	r2, r0
 800d1a0:	6a21      	ldr	r1, [r4, #32]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	0028      	movs	r0, r5
 800d1a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d1a8:	47b8      	blx	r7
 800d1aa:	89a1      	ldrh	r1, [r4, #12]
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d106      	bne.n	800d1be <__sflush_r+0x6a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	2b1d      	cmp	r3, #29
 800d1b4:	d831      	bhi.n	800d21a <__sflush_r+0xc6>
 800d1b6:	4a2c      	ldr	r2, [pc, #176]	; (800d268 <__sflush_r+0x114>)
 800d1b8:	40da      	lsrs	r2, r3
 800d1ba:	07d3      	lsls	r3, r2, #31
 800d1bc:	d52d      	bpl.n	800d21a <__sflush_r+0xc6>
 800d1be:	2300      	movs	r3, #0
 800d1c0:	6063      	str	r3, [r4, #4]
 800d1c2:	6923      	ldr	r3, [r4, #16]
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	04cb      	lsls	r3, r1, #19
 800d1c8:	d505      	bpl.n	800d1d6 <__sflush_r+0x82>
 800d1ca:	1c43      	adds	r3, r0, #1
 800d1cc:	d102      	bne.n	800d1d4 <__sflush_r+0x80>
 800d1ce:	682b      	ldr	r3, [r5, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d100      	bne.n	800d1d6 <__sflush_r+0x82>
 800d1d4:	6560      	str	r0, [r4, #84]	; 0x54
 800d1d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1d8:	602e      	str	r6, [r5, #0]
 800d1da:	2900      	cmp	r1, #0
 800d1dc:	d0c6      	beq.n	800d16c <__sflush_r+0x18>
 800d1de:	0023      	movs	r3, r4
 800d1e0:	3344      	adds	r3, #68	; 0x44
 800d1e2:	4299      	cmp	r1, r3
 800d1e4:	d002      	beq.n	800d1ec <__sflush_r+0x98>
 800d1e6:	0028      	movs	r0, r5
 800d1e8:	f7fb fde0 	bl	8008dac <_free_r>
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	6360      	str	r0, [r4, #52]	; 0x34
 800d1f0:	e7bd      	b.n	800d16e <__sflush_r+0x1a>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	0028      	movs	r0, r5
 800d1f6:	6a21      	ldr	r1, [r4, #32]
 800d1f8:	47b8      	blx	r7
 800d1fa:	1c43      	adds	r3, r0, #1
 800d1fc:	d1c5      	bne.n	800d18a <__sflush_r+0x36>
 800d1fe:	682b      	ldr	r3, [r5, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d0c2      	beq.n	800d18a <__sflush_r+0x36>
 800d204:	2b1d      	cmp	r3, #29
 800d206:	d001      	beq.n	800d20c <__sflush_r+0xb8>
 800d208:	2b16      	cmp	r3, #22
 800d20a:	d101      	bne.n	800d210 <__sflush_r+0xbc>
 800d20c:	602e      	str	r6, [r5, #0]
 800d20e:	e7ad      	b.n	800d16c <__sflush_r+0x18>
 800d210:	2340      	movs	r3, #64	; 0x40
 800d212:	89a2      	ldrh	r2, [r4, #12]
 800d214:	4313      	orrs	r3, r2
 800d216:	81a3      	strh	r3, [r4, #12]
 800d218:	e7a9      	b.n	800d16e <__sflush_r+0x1a>
 800d21a:	2340      	movs	r3, #64	; 0x40
 800d21c:	430b      	orrs	r3, r1
 800d21e:	e7fa      	b.n	800d216 <__sflush_r+0xc2>
 800d220:	690f      	ldr	r7, [r1, #16]
 800d222:	2f00      	cmp	r7, #0
 800d224:	d0a2      	beq.n	800d16c <__sflush_r+0x18>
 800d226:	680a      	ldr	r2, [r1, #0]
 800d228:	600f      	str	r7, [r1, #0]
 800d22a:	1bd2      	subs	r2, r2, r7
 800d22c:	9201      	str	r2, [sp, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	079b      	lsls	r3, r3, #30
 800d232:	d100      	bne.n	800d236 <__sflush_r+0xe2>
 800d234:	694a      	ldr	r2, [r1, #20]
 800d236:	60a2      	str	r2, [r4, #8]
 800d238:	9b01      	ldr	r3, [sp, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	dc00      	bgt.n	800d240 <__sflush_r+0xec>
 800d23e:	e795      	b.n	800d16c <__sflush_r+0x18>
 800d240:	003a      	movs	r2, r7
 800d242:	0028      	movs	r0, r5
 800d244:	9b01      	ldr	r3, [sp, #4]
 800d246:	6a21      	ldr	r1, [r4, #32]
 800d248:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d24a:	47b0      	blx	r6
 800d24c:	2800      	cmp	r0, #0
 800d24e:	dc06      	bgt.n	800d25e <__sflush_r+0x10a>
 800d250:	2340      	movs	r3, #64	; 0x40
 800d252:	2001      	movs	r0, #1
 800d254:	89a2      	ldrh	r2, [r4, #12]
 800d256:	4240      	negs	r0, r0
 800d258:	4313      	orrs	r3, r2
 800d25a:	81a3      	strh	r3, [r4, #12]
 800d25c:	e787      	b.n	800d16e <__sflush_r+0x1a>
 800d25e:	9b01      	ldr	r3, [sp, #4]
 800d260:	183f      	adds	r7, r7, r0
 800d262:	1a1b      	subs	r3, r3, r0
 800d264:	9301      	str	r3, [sp, #4]
 800d266:	e7e7      	b.n	800d238 <__sflush_r+0xe4>
 800d268:	20400001 	.word	0x20400001

0800d26c <_fflush_r>:
 800d26c:	690b      	ldr	r3, [r1, #16]
 800d26e:	b570      	push	{r4, r5, r6, lr}
 800d270:	0005      	movs	r5, r0
 800d272:	000c      	movs	r4, r1
 800d274:	2b00      	cmp	r3, #0
 800d276:	d102      	bne.n	800d27e <_fflush_r+0x12>
 800d278:	2500      	movs	r5, #0
 800d27a:	0028      	movs	r0, r5
 800d27c:	bd70      	pop	{r4, r5, r6, pc}
 800d27e:	2800      	cmp	r0, #0
 800d280:	d004      	beq.n	800d28c <_fflush_r+0x20>
 800d282:	6983      	ldr	r3, [r0, #24]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d101      	bne.n	800d28c <_fflush_r+0x20>
 800d288:	f000 f892 	bl	800d3b0 <__sinit>
 800d28c:	4b14      	ldr	r3, [pc, #80]	; (800d2e0 <_fflush_r+0x74>)
 800d28e:	429c      	cmp	r4, r3
 800d290:	d11b      	bne.n	800d2ca <_fflush_r+0x5e>
 800d292:	686c      	ldr	r4, [r5, #4]
 800d294:	220c      	movs	r2, #12
 800d296:	5ea3      	ldrsh	r3, [r4, r2]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d0ed      	beq.n	800d278 <_fflush_r+0xc>
 800d29c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d29e:	07d2      	lsls	r2, r2, #31
 800d2a0:	d404      	bmi.n	800d2ac <_fflush_r+0x40>
 800d2a2:	059b      	lsls	r3, r3, #22
 800d2a4:	d402      	bmi.n	800d2ac <_fflush_r+0x40>
 800d2a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2a8:	f7ff fcd9 	bl	800cc5e <__retarget_lock_acquire_recursive>
 800d2ac:	0028      	movs	r0, r5
 800d2ae:	0021      	movs	r1, r4
 800d2b0:	f7ff ff50 	bl	800d154 <__sflush_r>
 800d2b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2b6:	0005      	movs	r5, r0
 800d2b8:	07db      	lsls	r3, r3, #31
 800d2ba:	d4de      	bmi.n	800d27a <_fflush_r+0xe>
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	059b      	lsls	r3, r3, #22
 800d2c0:	d4db      	bmi.n	800d27a <_fflush_r+0xe>
 800d2c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2c4:	f7ff fccc 	bl	800cc60 <__retarget_lock_release_recursive>
 800d2c8:	e7d7      	b.n	800d27a <_fflush_r+0xe>
 800d2ca:	4b06      	ldr	r3, [pc, #24]	; (800d2e4 <_fflush_r+0x78>)
 800d2cc:	429c      	cmp	r4, r3
 800d2ce:	d101      	bne.n	800d2d4 <_fflush_r+0x68>
 800d2d0:	68ac      	ldr	r4, [r5, #8]
 800d2d2:	e7df      	b.n	800d294 <_fflush_r+0x28>
 800d2d4:	4b04      	ldr	r3, [pc, #16]	; (800d2e8 <_fflush_r+0x7c>)
 800d2d6:	429c      	cmp	r4, r3
 800d2d8:	d1dc      	bne.n	800d294 <_fflush_r+0x28>
 800d2da:	68ec      	ldr	r4, [r5, #12]
 800d2dc:	e7da      	b.n	800d294 <_fflush_r+0x28>
 800d2de:	46c0      	nop			; (mov r8, r8)
 800d2e0:	0800de4c 	.word	0x0800de4c
 800d2e4:	0800de6c 	.word	0x0800de6c
 800d2e8:	0800de2c 	.word	0x0800de2c

0800d2ec <std>:
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	b510      	push	{r4, lr}
 800d2f0:	0004      	movs	r4, r0
 800d2f2:	6003      	str	r3, [r0, #0]
 800d2f4:	6043      	str	r3, [r0, #4]
 800d2f6:	6083      	str	r3, [r0, #8]
 800d2f8:	8181      	strh	r1, [r0, #12]
 800d2fa:	6643      	str	r3, [r0, #100]	; 0x64
 800d2fc:	0019      	movs	r1, r3
 800d2fe:	81c2      	strh	r2, [r0, #14]
 800d300:	6103      	str	r3, [r0, #16]
 800d302:	6143      	str	r3, [r0, #20]
 800d304:	6183      	str	r3, [r0, #24]
 800d306:	2208      	movs	r2, #8
 800d308:	305c      	adds	r0, #92	; 0x5c
 800d30a:	f7fb fd46 	bl	8008d9a <memset>
 800d30e:	4b05      	ldr	r3, [pc, #20]	; (800d324 <std+0x38>)
 800d310:	6224      	str	r4, [r4, #32]
 800d312:	6263      	str	r3, [r4, #36]	; 0x24
 800d314:	4b04      	ldr	r3, [pc, #16]	; (800d328 <std+0x3c>)
 800d316:	62a3      	str	r3, [r4, #40]	; 0x28
 800d318:	4b04      	ldr	r3, [pc, #16]	; (800d32c <std+0x40>)
 800d31a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d31c:	4b04      	ldr	r3, [pc, #16]	; (800d330 <std+0x44>)
 800d31e:	6323      	str	r3, [r4, #48]	; 0x30
 800d320:	bd10      	pop	{r4, pc}
 800d322:	46c0      	nop			; (mov r8, r8)
 800d324:	0800d66d 	.word	0x0800d66d
 800d328:	0800d695 	.word	0x0800d695
 800d32c:	0800d6cd 	.word	0x0800d6cd
 800d330:	0800d6f9 	.word	0x0800d6f9

0800d334 <_cleanup_r>:
 800d334:	b510      	push	{r4, lr}
 800d336:	4902      	ldr	r1, [pc, #8]	; (800d340 <_cleanup_r+0xc>)
 800d338:	f000 f8ba 	bl	800d4b0 <_fwalk_reent>
 800d33c:	bd10      	pop	{r4, pc}
 800d33e:	46c0      	nop			; (mov r8, r8)
 800d340:	0800d26d 	.word	0x0800d26d

0800d344 <__sfmoreglue>:
 800d344:	b570      	push	{r4, r5, r6, lr}
 800d346:	2568      	movs	r5, #104	; 0x68
 800d348:	1e4a      	subs	r2, r1, #1
 800d34a:	4355      	muls	r5, r2
 800d34c:	000e      	movs	r6, r1
 800d34e:	0029      	movs	r1, r5
 800d350:	3174      	adds	r1, #116	; 0x74
 800d352:	f7fb fd97 	bl	8008e84 <_malloc_r>
 800d356:	1e04      	subs	r4, r0, #0
 800d358:	d008      	beq.n	800d36c <__sfmoreglue+0x28>
 800d35a:	2100      	movs	r1, #0
 800d35c:	002a      	movs	r2, r5
 800d35e:	6001      	str	r1, [r0, #0]
 800d360:	6046      	str	r6, [r0, #4]
 800d362:	300c      	adds	r0, #12
 800d364:	60a0      	str	r0, [r4, #8]
 800d366:	3268      	adds	r2, #104	; 0x68
 800d368:	f7fb fd17 	bl	8008d9a <memset>
 800d36c:	0020      	movs	r0, r4
 800d36e:	bd70      	pop	{r4, r5, r6, pc}

0800d370 <__sfp_lock_acquire>:
 800d370:	b510      	push	{r4, lr}
 800d372:	4802      	ldr	r0, [pc, #8]	; (800d37c <__sfp_lock_acquire+0xc>)
 800d374:	f7ff fc73 	bl	800cc5e <__retarget_lock_acquire_recursive>
 800d378:	bd10      	pop	{r4, pc}
 800d37a:	46c0      	nop			; (mov r8, r8)
 800d37c:	20000541 	.word	0x20000541

0800d380 <__sfp_lock_release>:
 800d380:	b510      	push	{r4, lr}
 800d382:	4802      	ldr	r0, [pc, #8]	; (800d38c <__sfp_lock_release+0xc>)
 800d384:	f7ff fc6c 	bl	800cc60 <__retarget_lock_release_recursive>
 800d388:	bd10      	pop	{r4, pc}
 800d38a:	46c0      	nop			; (mov r8, r8)
 800d38c:	20000541 	.word	0x20000541

0800d390 <__sinit_lock_acquire>:
 800d390:	b510      	push	{r4, lr}
 800d392:	4802      	ldr	r0, [pc, #8]	; (800d39c <__sinit_lock_acquire+0xc>)
 800d394:	f7ff fc63 	bl	800cc5e <__retarget_lock_acquire_recursive>
 800d398:	bd10      	pop	{r4, pc}
 800d39a:	46c0      	nop			; (mov r8, r8)
 800d39c:	20000542 	.word	0x20000542

0800d3a0 <__sinit_lock_release>:
 800d3a0:	b510      	push	{r4, lr}
 800d3a2:	4802      	ldr	r0, [pc, #8]	; (800d3ac <__sinit_lock_release+0xc>)
 800d3a4:	f7ff fc5c 	bl	800cc60 <__retarget_lock_release_recursive>
 800d3a8:	bd10      	pop	{r4, pc}
 800d3aa:	46c0      	nop			; (mov r8, r8)
 800d3ac:	20000542 	.word	0x20000542

0800d3b0 <__sinit>:
 800d3b0:	b513      	push	{r0, r1, r4, lr}
 800d3b2:	0004      	movs	r4, r0
 800d3b4:	f7ff ffec 	bl	800d390 <__sinit_lock_acquire>
 800d3b8:	69a3      	ldr	r3, [r4, #24]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d002      	beq.n	800d3c4 <__sinit+0x14>
 800d3be:	f7ff ffef 	bl	800d3a0 <__sinit_lock_release>
 800d3c2:	bd13      	pop	{r0, r1, r4, pc}
 800d3c4:	64a3      	str	r3, [r4, #72]	; 0x48
 800d3c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d3c8:	6523      	str	r3, [r4, #80]	; 0x50
 800d3ca:	4b13      	ldr	r3, [pc, #76]	; (800d418 <__sinit+0x68>)
 800d3cc:	4a13      	ldr	r2, [pc, #76]	; (800d41c <__sinit+0x6c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d3d2:	9301      	str	r3, [sp, #4]
 800d3d4:	42a3      	cmp	r3, r4
 800d3d6:	d101      	bne.n	800d3dc <__sinit+0x2c>
 800d3d8:	2301      	movs	r3, #1
 800d3da:	61a3      	str	r3, [r4, #24]
 800d3dc:	0020      	movs	r0, r4
 800d3de:	f000 f81f 	bl	800d420 <__sfp>
 800d3e2:	6060      	str	r0, [r4, #4]
 800d3e4:	0020      	movs	r0, r4
 800d3e6:	f000 f81b 	bl	800d420 <__sfp>
 800d3ea:	60a0      	str	r0, [r4, #8]
 800d3ec:	0020      	movs	r0, r4
 800d3ee:	f000 f817 	bl	800d420 <__sfp>
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	2104      	movs	r1, #4
 800d3f6:	60e0      	str	r0, [r4, #12]
 800d3f8:	6860      	ldr	r0, [r4, #4]
 800d3fa:	f7ff ff77 	bl	800d2ec <std>
 800d3fe:	2201      	movs	r2, #1
 800d400:	2109      	movs	r1, #9
 800d402:	68a0      	ldr	r0, [r4, #8]
 800d404:	f7ff ff72 	bl	800d2ec <std>
 800d408:	2202      	movs	r2, #2
 800d40a:	2112      	movs	r1, #18
 800d40c:	68e0      	ldr	r0, [r4, #12]
 800d40e:	f7ff ff6d 	bl	800d2ec <std>
 800d412:	2301      	movs	r3, #1
 800d414:	61a3      	str	r3, [r4, #24]
 800d416:	e7d2      	b.n	800d3be <__sinit+0xe>
 800d418:	0800dae4 	.word	0x0800dae4
 800d41c:	0800d335 	.word	0x0800d335

0800d420 <__sfp>:
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d422:	0007      	movs	r7, r0
 800d424:	f7ff ffa4 	bl	800d370 <__sfp_lock_acquire>
 800d428:	4b1f      	ldr	r3, [pc, #124]	; (800d4a8 <__sfp+0x88>)
 800d42a:	681e      	ldr	r6, [r3, #0]
 800d42c:	69b3      	ldr	r3, [r6, #24]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d102      	bne.n	800d438 <__sfp+0x18>
 800d432:	0030      	movs	r0, r6
 800d434:	f7ff ffbc 	bl	800d3b0 <__sinit>
 800d438:	3648      	adds	r6, #72	; 0x48
 800d43a:	68b4      	ldr	r4, [r6, #8]
 800d43c:	6873      	ldr	r3, [r6, #4]
 800d43e:	3b01      	subs	r3, #1
 800d440:	d504      	bpl.n	800d44c <__sfp+0x2c>
 800d442:	6833      	ldr	r3, [r6, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d022      	beq.n	800d48e <__sfp+0x6e>
 800d448:	6836      	ldr	r6, [r6, #0]
 800d44a:	e7f6      	b.n	800d43a <__sfp+0x1a>
 800d44c:	220c      	movs	r2, #12
 800d44e:	5ea5      	ldrsh	r5, [r4, r2]
 800d450:	2d00      	cmp	r5, #0
 800d452:	d11a      	bne.n	800d48a <__sfp+0x6a>
 800d454:	0020      	movs	r0, r4
 800d456:	4b15      	ldr	r3, [pc, #84]	; (800d4ac <__sfp+0x8c>)
 800d458:	3058      	adds	r0, #88	; 0x58
 800d45a:	60e3      	str	r3, [r4, #12]
 800d45c:	6665      	str	r5, [r4, #100]	; 0x64
 800d45e:	f7ff fbfd 	bl	800cc5c <__retarget_lock_init_recursive>
 800d462:	f7ff ff8d 	bl	800d380 <__sfp_lock_release>
 800d466:	0020      	movs	r0, r4
 800d468:	2208      	movs	r2, #8
 800d46a:	0029      	movs	r1, r5
 800d46c:	6025      	str	r5, [r4, #0]
 800d46e:	60a5      	str	r5, [r4, #8]
 800d470:	6065      	str	r5, [r4, #4]
 800d472:	6125      	str	r5, [r4, #16]
 800d474:	6165      	str	r5, [r4, #20]
 800d476:	61a5      	str	r5, [r4, #24]
 800d478:	305c      	adds	r0, #92	; 0x5c
 800d47a:	f7fb fc8e 	bl	8008d9a <memset>
 800d47e:	6365      	str	r5, [r4, #52]	; 0x34
 800d480:	63a5      	str	r5, [r4, #56]	; 0x38
 800d482:	64a5      	str	r5, [r4, #72]	; 0x48
 800d484:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d486:	0020      	movs	r0, r4
 800d488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d48a:	3468      	adds	r4, #104	; 0x68
 800d48c:	e7d7      	b.n	800d43e <__sfp+0x1e>
 800d48e:	2104      	movs	r1, #4
 800d490:	0038      	movs	r0, r7
 800d492:	f7ff ff57 	bl	800d344 <__sfmoreglue>
 800d496:	1e04      	subs	r4, r0, #0
 800d498:	6030      	str	r0, [r6, #0]
 800d49a:	d1d5      	bne.n	800d448 <__sfp+0x28>
 800d49c:	f7ff ff70 	bl	800d380 <__sfp_lock_release>
 800d4a0:	230c      	movs	r3, #12
 800d4a2:	603b      	str	r3, [r7, #0]
 800d4a4:	e7ef      	b.n	800d486 <__sfp+0x66>
 800d4a6:	46c0      	nop			; (mov r8, r8)
 800d4a8:	0800dae4 	.word	0x0800dae4
 800d4ac:	ffff0001 	.word	0xffff0001

0800d4b0 <_fwalk_reent>:
 800d4b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4b2:	0004      	movs	r4, r0
 800d4b4:	0006      	movs	r6, r0
 800d4b6:	2700      	movs	r7, #0
 800d4b8:	9101      	str	r1, [sp, #4]
 800d4ba:	3448      	adds	r4, #72	; 0x48
 800d4bc:	6863      	ldr	r3, [r4, #4]
 800d4be:	68a5      	ldr	r5, [r4, #8]
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	9b00      	ldr	r3, [sp, #0]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	d504      	bpl.n	800d4d4 <_fwalk_reent+0x24>
 800d4ca:	6824      	ldr	r4, [r4, #0]
 800d4cc:	2c00      	cmp	r4, #0
 800d4ce:	d1f5      	bne.n	800d4bc <_fwalk_reent+0xc>
 800d4d0:	0038      	movs	r0, r7
 800d4d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4d4:	89ab      	ldrh	r3, [r5, #12]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d908      	bls.n	800d4ec <_fwalk_reent+0x3c>
 800d4da:	220e      	movs	r2, #14
 800d4dc:	5eab      	ldrsh	r3, [r5, r2]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	d004      	beq.n	800d4ec <_fwalk_reent+0x3c>
 800d4e2:	0029      	movs	r1, r5
 800d4e4:	0030      	movs	r0, r6
 800d4e6:	9b01      	ldr	r3, [sp, #4]
 800d4e8:	4798      	blx	r3
 800d4ea:	4307      	orrs	r7, r0
 800d4ec:	3568      	adds	r5, #104	; 0x68
 800d4ee:	e7e8      	b.n	800d4c2 <_fwalk_reent+0x12>

0800d4f0 <__swhatbuf_r>:
 800d4f0:	b570      	push	{r4, r5, r6, lr}
 800d4f2:	000e      	movs	r6, r1
 800d4f4:	001d      	movs	r5, r3
 800d4f6:	230e      	movs	r3, #14
 800d4f8:	5ec9      	ldrsh	r1, [r1, r3]
 800d4fa:	0014      	movs	r4, r2
 800d4fc:	b096      	sub	sp, #88	; 0x58
 800d4fe:	2900      	cmp	r1, #0
 800d500:	da08      	bge.n	800d514 <__swhatbuf_r+0x24>
 800d502:	220c      	movs	r2, #12
 800d504:	5eb3      	ldrsh	r3, [r6, r2]
 800d506:	2200      	movs	r2, #0
 800d508:	602a      	str	r2, [r5, #0]
 800d50a:	061b      	lsls	r3, r3, #24
 800d50c:	d411      	bmi.n	800d532 <__swhatbuf_r+0x42>
 800d50e:	2380      	movs	r3, #128	; 0x80
 800d510:	00db      	lsls	r3, r3, #3
 800d512:	e00f      	b.n	800d534 <__swhatbuf_r+0x44>
 800d514:	466a      	mov	r2, sp
 800d516:	f000 f91b 	bl	800d750 <_fstat_r>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	dbf1      	blt.n	800d502 <__swhatbuf_r+0x12>
 800d51e:	23f0      	movs	r3, #240	; 0xf0
 800d520:	9901      	ldr	r1, [sp, #4]
 800d522:	021b      	lsls	r3, r3, #8
 800d524:	4019      	ands	r1, r3
 800d526:	4b05      	ldr	r3, [pc, #20]	; (800d53c <__swhatbuf_r+0x4c>)
 800d528:	18c9      	adds	r1, r1, r3
 800d52a:	424b      	negs	r3, r1
 800d52c:	4159      	adcs	r1, r3
 800d52e:	6029      	str	r1, [r5, #0]
 800d530:	e7ed      	b.n	800d50e <__swhatbuf_r+0x1e>
 800d532:	2340      	movs	r3, #64	; 0x40
 800d534:	2000      	movs	r0, #0
 800d536:	6023      	str	r3, [r4, #0]
 800d538:	b016      	add	sp, #88	; 0x58
 800d53a:	bd70      	pop	{r4, r5, r6, pc}
 800d53c:	ffffe000 	.word	0xffffe000

0800d540 <__smakebuf_r>:
 800d540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d542:	2602      	movs	r6, #2
 800d544:	898b      	ldrh	r3, [r1, #12]
 800d546:	0005      	movs	r5, r0
 800d548:	000c      	movs	r4, r1
 800d54a:	4233      	tst	r3, r6
 800d54c:	d006      	beq.n	800d55c <__smakebuf_r+0x1c>
 800d54e:	0023      	movs	r3, r4
 800d550:	3347      	adds	r3, #71	; 0x47
 800d552:	6023      	str	r3, [r4, #0]
 800d554:	6123      	str	r3, [r4, #16]
 800d556:	2301      	movs	r3, #1
 800d558:	6163      	str	r3, [r4, #20]
 800d55a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d55c:	466a      	mov	r2, sp
 800d55e:	ab01      	add	r3, sp, #4
 800d560:	f7ff ffc6 	bl	800d4f0 <__swhatbuf_r>
 800d564:	9900      	ldr	r1, [sp, #0]
 800d566:	0007      	movs	r7, r0
 800d568:	0028      	movs	r0, r5
 800d56a:	f7fb fc8b 	bl	8008e84 <_malloc_r>
 800d56e:	2800      	cmp	r0, #0
 800d570:	d108      	bne.n	800d584 <__smakebuf_r+0x44>
 800d572:	220c      	movs	r2, #12
 800d574:	5ea3      	ldrsh	r3, [r4, r2]
 800d576:	059a      	lsls	r2, r3, #22
 800d578:	d4ef      	bmi.n	800d55a <__smakebuf_r+0x1a>
 800d57a:	2203      	movs	r2, #3
 800d57c:	4393      	bics	r3, r2
 800d57e:	431e      	orrs	r6, r3
 800d580:	81a6      	strh	r6, [r4, #12]
 800d582:	e7e4      	b.n	800d54e <__smakebuf_r+0xe>
 800d584:	4b0f      	ldr	r3, [pc, #60]	; (800d5c4 <__smakebuf_r+0x84>)
 800d586:	62ab      	str	r3, [r5, #40]	; 0x28
 800d588:	2380      	movs	r3, #128	; 0x80
 800d58a:	89a2      	ldrh	r2, [r4, #12]
 800d58c:	6020      	str	r0, [r4, #0]
 800d58e:	4313      	orrs	r3, r2
 800d590:	81a3      	strh	r3, [r4, #12]
 800d592:	9b00      	ldr	r3, [sp, #0]
 800d594:	6120      	str	r0, [r4, #16]
 800d596:	6163      	str	r3, [r4, #20]
 800d598:	9b01      	ldr	r3, [sp, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00d      	beq.n	800d5ba <__smakebuf_r+0x7a>
 800d59e:	0028      	movs	r0, r5
 800d5a0:	230e      	movs	r3, #14
 800d5a2:	5ee1      	ldrsh	r1, [r4, r3]
 800d5a4:	f000 f8e6 	bl	800d774 <_isatty_r>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	d006      	beq.n	800d5ba <__smakebuf_r+0x7a>
 800d5ac:	2203      	movs	r2, #3
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	4393      	bics	r3, r2
 800d5b2:	001a      	movs	r2, r3
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	81a3      	strh	r3, [r4, #12]
 800d5ba:	89a0      	ldrh	r0, [r4, #12]
 800d5bc:	4307      	orrs	r7, r0
 800d5be:	81a7      	strh	r7, [r4, #12]
 800d5c0:	e7cb      	b.n	800d55a <__smakebuf_r+0x1a>
 800d5c2:	46c0      	nop			; (mov r8, r8)
 800d5c4:	0800d335 	.word	0x0800d335

0800d5c8 <_malloc_usable_size_r>:
 800d5c8:	1f0b      	subs	r3, r1, #4
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	1f18      	subs	r0, r3, #4
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	da01      	bge.n	800d5d6 <_malloc_usable_size_r+0xe>
 800d5d2:	580b      	ldr	r3, [r1, r0]
 800d5d4:	18c0      	adds	r0, r0, r3
 800d5d6:	4770      	bx	lr

0800d5d8 <_raise_r>:
 800d5d8:	b570      	push	{r4, r5, r6, lr}
 800d5da:	0004      	movs	r4, r0
 800d5dc:	000d      	movs	r5, r1
 800d5de:	291f      	cmp	r1, #31
 800d5e0:	d904      	bls.n	800d5ec <_raise_r+0x14>
 800d5e2:	2316      	movs	r3, #22
 800d5e4:	6003      	str	r3, [r0, #0]
 800d5e6:	2001      	movs	r0, #1
 800d5e8:	4240      	negs	r0, r0
 800d5ea:	bd70      	pop	{r4, r5, r6, pc}
 800d5ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d004      	beq.n	800d5fc <_raise_r+0x24>
 800d5f2:	008a      	lsls	r2, r1, #2
 800d5f4:	189b      	adds	r3, r3, r2
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	2a00      	cmp	r2, #0
 800d5fa:	d108      	bne.n	800d60e <_raise_r+0x36>
 800d5fc:	0020      	movs	r0, r4
 800d5fe:	f000 f831 	bl	800d664 <_getpid_r>
 800d602:	002a      	movs	r2, r5
 800d604:	0001      	movs	r1, r0
 800d606:	0020      	movs	r0, r4
 800d608:	f000 f81a 	bl	800d640 <_kill_r>
 800d60c:	e7ed      	b.n	800d5ea <_raise_r+0x12>
 800d60e:	2000      	movs	r0, #0
 800d610:	2a01      	cmp	r2, #1
 800d612:	d0ea      	beq.n	800d5ea <_raise_r+0x12>
 800d614:	1c51      	adds	r1, r2, #1
 800d616:	d103      	bne.n	800d620 <_raise_r+0x48>
 800d618:	2316      	movs	r3, #22
 800d61a:	3001      	adds	r0, #1
 800d61c:	6023      	str	r3, [r4, #0]
 800d61e:	e7e4      	b.n	800d5ea <_raise_r+0x12>
 800d620:	2400      	movs	r4, #0
 800d622:	0028      	movs	r0, r5
 800d624:	601c      	str	r4, [r3, #0]
 800d626:	4790      	blx	r2
 800d628:	0020      	movs	r0, r4
 800d62a:	e7de      	b.n	800d5ea <_raise_r+0x12>

0800d62c <raise>:
 800d62c:	b510      	push	{r4, lr}
 800d62e:	4b03      	ldr	r3, [pc, #12]	; (800d63c <raise+0x10>)
 800d630:	0001      	movs	r1, r0
 800d632:	6818      	ldr	r0, [r3, #0]
 800d634:	f7ff ffd0 	bl	800d5d8 <_raise_r>
 800d638:	bd10      	pop	{r4, pc}
 800d63a:	46c0      	nop			; (mov r8, r8)
 800d63c:	2000000c 	.word	0x2000000c

0800d640 <_kill_r>:
 800d640:	2300      	movs	r3, #0
 800d642:	b570      	push	{r4, r5, r6, lr}
 800d644:	4d06      	ldr	r5, [pc, #24]	; (800d660 <_kill_r+0x20>)
 800d646:	0004      	movs	r4, r0
 800d648:	0008      	movs	r0, r1
 800d64a:	0011      	movs	r1, r2
 800d64c:	602b      	str	r3, [r5, #0]
 800d64e:	f7f7 f937 	bl	80048c0 <_kill>
 800d652:	1c43      	adds	r3, r0, #1
 800d654:	d103      	bne.n	800d65e <_kill_r+0x1e>
 800d656:	682b      	ldr	r3, [r5, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d000      	beq.n	800d65e <_kill_r+0x1e>
 800d65c:	6023      	str	r3, [r4, #0]
 800d65e:	bd70      	pop	{r4, r5, r6, pc}
 800d660:	2000053c 	.word	0x2000053c

0800d664 <_getpid_r>:
 800d664:	b510      	push	{r4, lr}
 800d666:	f7f7 f925 	bl	80048b4 <_getpid>
 800d66a:	bd10      	pop	{r4, pc}

0800d66c <__sread>:
 800d66c:	b570      	push	{r4, r5, r6, lr}
 800d66e:	000c      	movs	r4, r1
 800d670:	250e      	movs	r5, #14
 800d672:	5f49      	ldrsh	r1, [r1, r5]
 800d674:	f000 f8a4 	bl	800d7c0 <_read_r>
 800d678:	2800      	cmp	r0, #0
 800d67a:	db03      	blt.n	800d684 <__sread+0x18>
 800d67c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d67e:	181b      	adds	r3, r3, r0
 800d680:	6563      	str	r3, [r4, #84]	; 0x54
 800d682:	bd70      	pop	{r4, r5, r6, pc}
 800d684:	89a3      	ldrh	r3, [r4, #12]
 800d686:	4a02      	ldr	r2, [pc, #8]	; (800d690 <__sread+0x24>)
 800d688:	4013      	ands	r3, r2
 800d68a:	81a3      	strh	r3, [r4, #12]
 800d68c:	e7f9      	b.n	800d682 <__sread+0x16>
 800d68e:	46c0      	nop			; (mov r8, r8)
 800d690:	ffffefff 	.word	0xffffefff

0800d694 <__swrite>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	001f      	movs	r7, r3
 800d698:	898b      	ldrh	r3, [r1, #12]
 800d69a:	0005      	movs	r5, r0
 800d69c:	000c      	movs	r4, r1
 800d69e:	0016      	movs	r6, r2
 800d6a0:	05db      	lsls	r3, r3, #23
 800d6a2:	d505      	bpl.n	800d6b0 <__swrite+0x1c>
 800d6a4:	230e      	movs	r3, #14
 800d6a6:	5ec9      	ldrsh	r1, [r1, r3]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	2302      	movs	r3, #2
 800d6ac:	f000 f874 	bl	800d798 <_lseek_r>
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	4a05      	ldr	r2, [pc, #20]	; (800d6c8 <__swrite+0x34>)
 800d6b4:	0028      	movs	r0, r5
 800d6b6:	4013      	ands	r3, r2
 800d6b8:	81a3      	strh	r3, [r4, #12]
 800d6ba:	0032      	movs	r2, r6
 800d6bc:	230e      	movs	r3, #14
 800d6be:	5ee1      	ldrsh	r1, [r4, r3]
 800d6c0:	003b      	movs	r3, r7
 800d6c2:	f000 f81f 	bl	800d704 <_write_r>
 800d6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6c8:	ffffefff 	.word	0xffffefff

0800d6cc <__sseek>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	000c      	movs	r4, r1
 800d6d0:	250e      	movs	r5, #14
 800d6d2:	5f49      	ldrsh	r1, [r1, r5]
 800d6d4:	f000 f860 	bl	800d798 <_lseek_r>
 800d6d8:	89a3      	ldrh	r3, [r4, #12]
 800d6da:	1c42      	adds	r2, r0, #1
 800d6dc:	d103      	bne.n	800d6e6 <__sseek+0x1a>
 800d6de:	4a05      	ldr	r2, [pc, #20]	; (800d6f4 <__sseek+0x28>)
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	81a3      	strh	r3, [r4, #12]
 800d6e4:	bd70      	pop	{r4, r5, r6, pc}
 800d6e6:	2280      	movs	r2, #128	; 0x80
 800d6e8:	0152      	lsls	r2, r2, #5
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	81a3      	strh	r3, [r4, #12]
 800d6ee:	6560      	str	r0, [r4, #84]	; 0x54
 800d6f0:	e7f8      	b.n	800d6e4 <__sseek+0x18>
 800d6f2:	46c0      	nop			; (mov r8, r8)
 800d6f4:	ffffefff 	.word	0xffffefff

0800d6f8 <__sclose>:
 800d6f8:	b510      	push	{r4, lr}
 800d6fa:	230e      	movs	r3, #14
 800d6fc:	5ec9      	ldrsh	r1, [r1, r3]
 800d6fe:	f000 f815 	bl	800d72c <_close_r>
 800d702:	bd10      	pop	{r4, pc}

0800d704 <_write_r>:
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	0004      	movs	r4, r0
 800d708:	0008      	movs	r0, r1
 800d70a:	0011      	movs	r1, r2
 800d70c:	001a      	movs	r2, r3
 800d70e:	2300      	movs	r3, #0
 800d710:	4d05      	ldr	r5, [pc, #20]	; (800d728 <_write_r+0x24>)
 800d712:	602b      	str	r3, [r5, #0]
 800d714:	f7f7 f90d 	bl	8004932 <_write>
 800d718:	1c43      	adds	r3, r0, #1
 800d71a:	d103      	bne.n	800d724 <_write_r+0x20>
 800d71c:	682b      	ldr	r3, [r5, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d000      	beq.n	800d724 <_write_r+0x20>
 800d722:	6023      	str	r3, [r4, #0]
 800d724:	bd70      	pop	{r4, r5, r6, pc}
 800d726:	46c0      	nop			; (mov r8, r8)
 800d728:	2000053c 	.word	0x2000053c

0800d72c <_close_r>:
 800d72c:	2300      	movs	r3, #0
 800d72e:	b570      	push	{r4, r5, r6, lr}
 800d730:	4d06      	ldr	r5, [pc, #24]	; (800d74c <_close_r+0x20>)
 800d732:	0004      	movs	r4, r0
 800d734:	0008      	movs	r0, r1
 800d736:	602b      	str	r3, [r5, #0]
 800d738:	f7f7 f917 	bl	800496a <_close>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	d103      	bne.n	800d748 <_close_r+0x1c>
 800d740:	682b      	ldr	r3, [r5, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d000      	beq.n	800d748 <_close_r+0x1c>
 800d746:	6023      	str	r3, [r4, #0]
 800d748:	bd70      	pop	{r4, r5, r6, pc}
 800d74a:	46c0      	nop			; (mov r8, r8)
 800d74c:	2000053c 	.word	0x2000053c

0800d750 <_fstat_r>:
 800d750:	2300      	movs	r3, #0
 800d752:	b570      	push	{r4, r5, r6, lr}
 800d754:	4d06      	ldr	r5, [pc, #24]	; (800d770 <_fstat_r+0x20>)
 800d756:	0004      	movs	r4, r0
 800d758:	0008      	movs	r0, r1
 800d75a:	0011      	movs	r1, r2
 800d75c:	602b      	str	r3, [r5, #0]
 800d75e:	f7f7 f90e 	bl	800497e <_fstat>
 800d762:	1c43      	adds	r3, r0, #1
 800d764:	d103      	bne.n	800d76e <_fstat_r+0x1e>
 800d766:	682b      	ldr	r3, [r5, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d000      	beq.n	800d76e <_fstat_r+0x1e>
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	bd70      	pop	{r4, r5, r6, pc}
 800d770:	2000053c 	.word	0x2000053c

0800d774 <_isatty_r>:
 800d774:	2300      	movs	r3, #0
 800d776:	b570      	push	{r4, r5, r6, lr}
 800d778:	4d06      	ldr	r5, [pc, #24]	; (800d794 <_isatty_r+0x20>)
 800d77a:	0004      	movs	r4, r0
 800d77c:	0008      	movs	r0, r1
 800d77e:	602b      	str	r3, [r5, #0]
 800d780:	f7f7 f90b 	bl	800499a <_isatty>
 800d784:	1c43      	adds	r3, r0, #1
 800d786:	d103      	bne.n	800d790 <_isatty_r+0x1c>
 800d788:	682b      	ldr	r3, [r5, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d000      	beq.n	800d790 <_isatty_r+0x1c>
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	bd70      	pop	{r4, r5, r6, pc}
 800d792:	46c0      	nop			; (mov r8, r8)
 800d794:	2000053c 	.word	0x2000053c

0800d798 <_lseek_r>:
 800d798:	b570      	push	{r4, r5, r6, lr}
 800d79a:	0004      	movs	r4, r0
 800d79c:	0008      	movs	r0, r1
 800d79e:	0011      	movs	r1, r2
 800d7a0:	001a      	movs	r2, r3
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	4d05      	ldr	r5, [pc, #20]	; (800d7bc <_lseek_r+0x24>)
 800d7a6:	602b      	str	r3, [r5, #0]
 800d7a8:	f7f7 f900 	bl	80049ac <_lseek>
 800d7ac:	1c43      	adds	r3, r0, #1
 800d7ae:	d103      	bne.n	800d7b8 <_lseek_r+0x20>
 800d7b0:	682b      	ldr	r3, [r5, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d000      	beq.n	800d7b8 <_lseek_r+0x20>
 800d7b6:	6023      	str	r3, [r4, #0]
 800d7b8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ba:	46c0      	nop			; (mov r8, r8)
 800d7bc:	2000053c 	.word	0x2000053c

0800d7c0 <_read_r>:
 800d7c0:	b570      	push	{r4, r5, r6, lr}
 800d7c2:	0004      	movs	r4, r0
 800d7c4:	0008      	movs	r0, r1
 800d7c6:	0011      	movs	r1, r2
 800d7c8:	001a      	movs	r2, r3
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	4d05      	ldr	r5, [pc, #20]	; (800d7e4 <_read_r+0x24>)
 800d7ce:	602b      	str	r3, [r5, #0]
 800d7d0:	f7f7 f892 	bl	80048f8 <_read>
 800d7d4:	1c43      	adds	r3, r0, #1
 800d7d6:	d103      	bne.n	800d7e0 <_read_r+0x20>
 800d7d8:	682b      	ldr	r3, [r5, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d000      	beq.n	800d7e0 <_read_r+0x20>
 800d7de:	6023      	str	r3, [r4, #0]
 800d7e0:	bd70      	pop	{r4, r5, r6, pc}
 800d7e2:	46c0      	nop			; (mov r8, r8)
 800d7e4:	2000053c 	.word	0x2000053c

0800d7e8 <_init>:
 800d7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ea:	46c0      	nop			; (mov r8, r8)
 800d7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ee:	bc08      	pop	{r3}
 800d7f0:	469e      	mov	lr, r3
 800d7f2:	4770      	bx	lr

0800d7f4 <_fini>:
 800d7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f6:	46c0      	nop			; (mov r8, r8)
 800d7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7fa:	bc08      	pop	{r3}
 800d7fc:	469e      	mov	lr, r3
 800d7fe:	4770      	bx	lr
