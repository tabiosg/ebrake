
brake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  0800d378  0800d378  0001d378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da0c  0800da0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800da0c  0800da0c  0001da0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da14  0800da14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da14  0800da14  0001da14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da18  0800da18  0001da18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800da1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001e0  0800dbfc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800dbfc  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df10  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040fe  00000000  00000000  0003e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  00042218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  000438f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfdb  00000000  00000000  00044e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f236  00000000  00000000  00060ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a34bc  00000000  00000000  00080011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001234cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e8  00000000  00000000  00123520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d35c 	.word	0x0800d35c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800d35c 	.word	0x0800d35c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fd71 	bl	8001f20 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fcc1 	bl	8001dd0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fd63 	bl	8001f20 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd59 	bl	8001f20 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fce9 	bl	8001e54 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fcdf 	bl	8001e54 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fcb1 	bl	8000e14 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fc3d 	bl	8000d3c <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fca3 	bl	8000e14 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc99 	bl	8000e14 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc49 	bl	8000d88 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc3f 	bl	8000d88 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	; (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f876 	bl	8000638 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff95 	bl	8000490 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 fb57 	bl	8002c20 <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f001 ffa0 	bl	80024c0 <__aeabi_dsub>
 8000580:	f002 fb4e 	bl	8002c20 <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__aeabi_d2lz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	0005      	movs	r5, r0
 8000598:	000c      	movs	r4, r1
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f7ff ff57 	bl	8000454 <__aeabi_dcmplt>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d108      	bne.n	80005bc <__aeabi_d2lz+0x28>
 80005aa:	0028      	movs	r0, r5
 80005ac:	0021      	movs	r1, r4
 80005ae:	f000 f80f 	bl	80005d0 <__aeabi_d2ulz>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	0010      	movs	r0, r2
 80005b8:	0019      	movs	r1, r3
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	061b      	lsls	r3, r3, #24
 80005c0:	18e1      	adds	r1, r4, r3
 80005c2:	0028      	movs	r0, r5
 80005c4:	f000 f804 	bl	80005d0 <__aeabi_d2ulz>
 80005c8:	2300      	movs	r3, #0
 80005ca:	4242      	negs	r2, r0
 80005cc:	418b      	sbcs	r3, r1
 80005ce:	e7f2      	b.n	80005b6 <__aeabi_d2lz+0x22>

080005d0 <__aeabi_d2ulz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <__aeabi_d2ulz+0x34>)
 80005d6:	000d      	movs	r5, r1
 80005d8:	0004      	movs	r4, r0
 80005da:	f001 fd05 	bl	8001fe8 <__aeabi_dmul>
 80005de:	f7ff ffbb 	bl	8000558 <__aeabi_d2uiz>
 80005e2:	0006      	movs	r6, r0
 80005e4:	f002 fb82 	bl	8002cec <__aeabi_ui2d>
 80005e8:	2200      	movs	r2, #0
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <__aeabi_d2ulz+0x38>)
 80005ec:	f001 fcfc 	bl	8001fe8 <__aeabi_dmul>
 80005f0:	0002      	movs	r2, r0
 80005f2:	000b      	movs	r3, r1
 80005f4:	0020      	movs	r0, r4
 80005f6:	0029      	movs	r1, r5
 80005f8:	f001 ff62 	bl	80024c0 <__aeabi_dsub>
 80005fc:	f7ff ffac 	bl	8000558 <__aeabi_d2uiz>
 8000600:	0031      	movs	r1, r6
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	3df00000 	.word	0x3df00000
 8000608:	41f00000 	.word	0x41f00000

0800060c <__aeabi_l2d>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	0006      	movs	r6, r0
 8000610:	0008      	movs	r0, r1
 8000612:	f002 fb3b 	bl	8002c8c <__aeabi_i2d>
 8000616:	2200      	movs	r2, #0
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_l2d+0x28>)
 800061a:	f001 fce5 	bl	8001fe8 <__aeabi_dmul>
 800061e:	000d      	movs	r5, r1
 8000620:	0004      	movs	r4, r0
 8000622:	0030      	movs	r0, r6
 8000624:	f002 fb62 	bl	8002cec <__aeabi_ui2d>
 8000628:	002b      	movs	r3, r5
 800062a:	0022      	movs	r2, r4
 800062c:	f000 fd9e 	bl	800116c <__aeabi_dadd>
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41f00000 	.word	0x41f00000

08000638 <__udivmoddi4>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	4657      	mov	r7, sl
 800063c:	464e      	mov	r6, r9
 800063e:	4645      	mov	r5, r8
 8000640:	46de      	mov	lr, fp
 8000642:	b5e0      	push	{r5, r6, r7, lr}
 8000644:	0004      	movs	r4, r0
 8000646:	000d      	movs	r5, r1
 8000648:	4692      	mov	sl, r2
 800064a:	4699      	mov	r9, r3
 800064c:	b083      	sub	sp, #12
 800064e:	428b      	cmp	r3, r1
 8000650:	d830      	bhi.n	80006b4 <__udivmoddi4+0x7c>
 8000652:	d02d      	beq.n	80006b0 <__udivmoddi4+0x78>
 8000654:	4649      	mov	r1, r9
 8000656:	4650      	mov	r0, sl
 8000658:	f002 fc14 	bl	8002e84 <__clzdi2>
 800065c:	0029      	movs	r1, r5
 800065e:	0006      	movs	r6, r0
 8000660:	0020      	movs	r0, r4
 8000662:	f002 fc0f 	bl	8002e84 <__clzdi2>
 8000666:	1a33      	subs	r3, r6, r0
 8000668:	4698      	mov	r8, r3
 800066a:	3b20      	subs	r3, #32
 800066c:	469b      	mov	fp, r3
 800066e:	d433      	bmi.n	80006d8 <__udivmoddi4+0xa0>
 8000670:	465a      	mov	r2, fp
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	4642      	mov	r2, r8
 8000678:	001f      	movs	r7, r3
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001e      	movs	r6, r3
 8000680:	42af      	cmp	r7, r5
 8000682:	d83a      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000684:	42af      	cmp	r7, r5
 8000686:	d100      	bne.n	800068a <__udivmoddi4+0x52>
 8000688:	e078      	b.n	800077c <__udivmoddi4+0x144>
 800068a:	465b      	mov	r3, fp
 800068c:	1ba4      	subs	r4, r4, r6
 800068e:	41bd      	sbcs	r5, r7
 8000690:	2b00      	cmp	r3, #0
 8000692:	da00      	bge.n	8000696 <__udivmoddi4+0x5e>
 8000694:	e075      	b.n	8000782 <__udivmoddi4+0x14a>
 8000696:	2200      	movs	r2, #0
 8000698:	2300      	movs	r3, #0
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2301      	movs	r3, #1
 80006a0:	465a      	mov	r2, fp
 80006a2:	4093      	lsls	r3, r2
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4642      	mov	r2, r8
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	e028      	b.n	8000702 <__udivmoddi4+0xca>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	d9cf      	bls.n	8000654 <__udivmoddi4+0x1c>
 80006b4:	2200      	movs	r2, #0
 80006b6:	2300      	movs	r3, #0
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <__udivmoddi4+0x8e>
 80006c2:	601c      	str	r4, [r3, #0]
 80006c4:	605d      	str	r5, [r3, #4]
 80006c6:	9800      	ldr	r0, [sp, #0]
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	b003      	add	sp, #12
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
 80006ce:	46bb      	mov	fp, r7
 80006d0:	46b2      	mov	sl, r6
 80006d2:	46a9      	mov	r9, r5
 80006d4:	46a0      	mov	r8, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	4642      	mov	r2, r8
 80006da:	2320      	movs	r3, #32
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	4652      	mov	r2, sl
 80006e0:	40da      	lsrs	r2, r3
 80006e2:	4641      	mov	r1, r8
 80006e4:	0013      	movs	r3, r2
 80006e6:	464a      	mov	r2, r9
 80006e8:	408a      	lsls	r2, r1
 80006ea:	0017      	movs	r7, r2
 80006ec:	4642      	mov	r2, r8
 80006ee:	431f      	orrs	r7, r3
 80006f0:	4653      	mov	r3, sl
 80006f2:	4093      	lsls	r3, r2
 80006f4:	001e      	movs	r6, r3
 80006f6:	42af      	cmp	r7, r5
 80006f8:	d9c4      	bls.n	8000684 <__udivmoddi4+0x4c>
 80006fa:	2200      	movs	r2, #0
 80006fc:	2300      	movs	r3, #0
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	4643      	mov	r3, r8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0d9      	beq.n	80006bc <__udivmoddi4+0x84>
 8000708:	07fb      	lsls	r3, r7, #31
 800070a:	0872      	lsrs	r2, r6, #1
 800070c:	431a      	orrs	r2, r3
 800070e:	4646      	mov	r6, r8
 8000710:	087b      	lsrs	r3, r7, #1
 8000712:	e00e      	b.n	8000732 <__udivmoddi4+0xfa>
 8000714:	42ab      	cmp	r3, r5
 8000716:	d101      	bne.n	800071c <__udivmoddi4+0xe4>
 8000718:	42a2      	cmp	r2, r4
 800071a:	d80c      	bhi.n	8000736 <__udivmoddi4+0xfe>
 800071c:	1aa4      	subs	r4, r4, r2
 800071e:	419d      	sbcs	r5, r3
 8000720:	2001      	movs	r0, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2100      	movs	r1, #0
 8000728:	3e01      	subs	r6, #1
 800072a:	1824      	adds	r4, r4, r0
 800072c:	414d      	adcs	r5, r1
 800072e:	2e00      	cmp	r6, #0
 8000730:	d006      	beq.n	8000740 <__udivmoddi4+0x108>
 8000732:	42ab      	cmp	r3, r5
 8000734:	d9ee      	bls.n	8000714 <__udivmoddi4+0xdc>
 8000736:	3e01      	subs	r6, #1
 8000738:	1924      	adds	r4, r4, r4
 800073a:	416d      	adcs	r5, r5
 800073c:	2e00      	cmp	r6, #0
 800073e:	d1f8      	bne.n	8000732 <__udivmoddi4+0xfa>
 8000740:	9800      	ldr	r0, [sp, #0]
 8000742:	9901      	ldr	r1, [sp, #4]
 8000744:	465b      	mov	r3, fp
 8000746:	1900      	adds	r0, r0, r4
 8000748:	4169      	adcs	r1, r5
 800074a:	2b00      	cmp	r3, #0
 800074c:	db24      	blt.n	8000798 <__udivmoddi4+0x160>
 800074e:	002b      	movs	r3, r5
 8000750:	465a      	mov	r2, fp
 8000752:	4644      	mov	r4, r8
 8000754:	40d3      	lsrs	r3, r2
 8000756:	002a      	movs	r2, r5
 8000758:	40e2      	lsrs	r2, r4
 800075a:	001c      	movs	r4, r3
 800075c:	465b      	mov	r3, fp
 800075e:	0015      	movs	r5, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	db2a      	blt.n	80007ba <__udivmoddi4+0x182>
 8000764:	0026      	movs	r6, r4
 8000766:	409e      	lsls	r6, r3
 8000768:	0033      	movs	r3, r6
 800076a:	0026      	movs	r6, r4
 800076c:	4647      	mov	r7, r8
 800076e:	40be      	lsls	r6, r7
 8000770:	0032      	movs	r2, r6
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	4199      	sbcs	r1, r3
 8000776:	9000      	str	r0, [sp, #0]
 8000778:	9101      	str	r1, [sp, #4]
 800077a:	e79f      	b.n	80006bc <__udivmoddi4+0x84>
 800077c:	42a3      	cmp	r3, r4
 800077e:	d8bc      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000780:	e783      	b.n	800068a <__udivmoddi4+0x52>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	2100      	movs	r1, #0
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	9100      	str	r1, [sp, #0]
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	2201      	movs	r2, #1
 8000792:	40da      	lsrs	r2, r3
 8000794:	9201      	str	r2, [sp, #4]
 8000796:	e786      	b.n	80006a6 <__udivmoddi4+0x6e>
 8000798:	4642      	mov	r2, r8
 800079a:	2320      	movs	r3, #32
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	002a      	movs	r2, r5
 80007a0:	4646      	mov	r6, r8
 80007a2:	409a      	lsls	r2, r3
 80007a4:	0023      	movs	r3, r4
 80007a6:	40f3      	lsrs	r3, r6
 80007a8:	4644      	mov	r4, r8
 80007aa:	4313      	orrs	r3, r2
 80007ac:	002a      	movs	r2, r5
 80007ae:	40e2      	lsrs	r2, r4
 80007b0:	001c      	movs	r4, r3
 80007b2:	465b      	mov	r3, fp
 80007b4:	0015      	movs	r5, r2
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dad4      	bge.n	8000764 <__udivmoddi4+0x12c>
 80007ba:	4642      	mov	r2, r8
 80007bc:	002f      	movs	r7, r5
 80007be:	2320      	movs	r3, #32
 80007c0:	0026      	movs	r6, r4
 80007c2:	4097      	lsls	r7, r2
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	40de      	lsrs	r6, r3
 80007c8:	003b      	movs	r3, r7
 80007ca:	4333      	orrs	r3, r6
 80007cc:	e7cd      	b.n	800076a <__udivmoddi4+0x132>
 80007ce:	46c0      	nop			; (mov r8, r8)

080007d0 <__aeabi_fadd>:
 80007d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d2:	46c6      	mov	lr, r8
 80007d4:	0243      	lsls	r3, r0, #9
 80007d6:	0a5b      	lsrs	r3, r3, #9
 80007d8:	024e      	lsls	r6, r1, #9
 80007da:	0045      	lsls	r5, r0, #1
 80007dc:	004f      	lsls	r7, r1, #1
 80007de:	00da      	lsls	r2, r3, #3
 80007e0:	0fc4      	lsrs	r4, r0, #31
 80007e2:	469c      	mov	ip, r3
 80007e4:	0a70      	lsrs	r0, r6, #9
 80007e6:	4690      	mov	r8, r2
 80007e8:	b500      	push	{lr}
 80007ea:	0e2d      	lsrs	r5, r5, #24
 80007ec:	0e3f      	lsrs	r7, r7, #24
 80007ee:	0fc9      	lsrs	r1, r1, #31
 80007f0:	09b6      	lsrs	r6, r6, #6
 80007f2:	428c      	cmp	r4, r1
 80007f4:	d04b      	beq.n	800088e <__aeabi_fadd+0xbe>
 80007f6:	1bea      	subs	r2, r5, r7
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	dd36      	ble.n	800086a <__aeabi_fadd+0x9a>
 80007fc:	2f00      	cmp	r7, #0
 80007fe:	d061      	beq.n	80008c4 <__aeabi_fadd+0xf4>
 8000800:	2dff      	cmp	r5, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0x36>
 8000804:	e0ad      	b.n	8000962 <__aeabi_fadd+0x192>
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	04db      	lsls	r3, r3, #19
 800080a:	431e      	orrs	r6, r3
 800080c:	2a1b      	cmp	r2, #27
 800080e:	dc00      	bgt.n	8000812 <__aeabi_fadd+0x42>
 8000810:	e0d3      	b.n	80009ba <__aeabi_fadd+0x1ea>
 8000812:	2001      	movs	r0, #1
 8000814:	4643      	mov	r3, r8
 8000816:	1a18      	subs	r0, r3, r0
 8000818:	0143      	lsls	r3, r0, #5
 800081a:	d400      	bmi.n	800081e <__aeabi_fadd+0x4e>
 800081c:	e08c      	b.n	8000938 <__aeabi_fadd+0x168>
 800081e:	0180      	lsls	r0, r0, #6
 8000820:	0987      	lsrs	r7, r0, #6
 8000822:	0038      	movs	r0, r7
 8000824:	f002 fb10 	bl	8002e48 <__clzsi2>
 8000828:	3805      	subs	r0, #5
 800082a:	4087      	lsls	r7, r0
 800082c:	4285      	cmp	r5, r0
 800082e:	dc00      	bgt.n	8000832 <__aeabi_fadd+0x62>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fadd+0x1d0>
 8000832:	1a2d      	subs	r5, r5, r0
 8000834:	48b3      	ldr	r0, [pc, #716]	; (8000b04 <__aeabi_fadd+0x334>)
 8000836:	4038      	ands	r0, r7
 8000838:	0743      	lsls	r3, r0, #29
 800083a:	d004      	beq.n	8000846 <__aeabi_fadd+0x76>
 800083c:	230f      	movs	r3, #15
 800083e:	4003      	ands	r3, r0
 8000840:	2b04      	cmp	r3, #4
 8000842:	d000      	beq.n	8000846 <__aeabi_fadd+0x76>
 8000844:	3004      	adds	r0, #4
 8000846:	0143      	lsls	r3, r0, #5
 8000848:	d400      	bmi.n	800084c <__aeabi_fadd+0x7c>
 800084a:	e078      	b.n	800093e <__aeabi_fadd+0x16e>
 800084c:	1c6a      	adds	r2, r5, #1
 800084e:	2dfe      	cmp	r5, #254	; 0xfe
 8000850:	d065      	beq.n	800091e <__aeabi_fadd+0x14e>
 8000852:	0180      	lsls	r0, r0, #6
 8000854:	0a43      	lsrs	r3, r0, #9
 8000856:	469c      	mov	ip, r3
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	4663      	mov	r3, ip
 800085c:	05d0      	lsls	r0, r2, #23
 800085e:	4318      	orrs	r0, r3
 8000860:	07e4      	lsls	r4, r4, #31
 8000862:	4320      	orrs	r0, r4
 8000864:	bc80      	pop	{r7}
 8000866:	46b8      	mov	r8, r7
 8000868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086a:	2a00      	cmp	r2, #0
 800086c:	d035      	beq.n	80008da <__aeabi_fadd+0x10a>
 800086e:	1b7a      	subs	r2, r7, r5
 8000870:	2d00      	cmp	r5, #0
 8000872:	d000      	beq.n	8000876 <__aeabi_fadd+0xa6>
 8000874:	e0af      	b.n	80009d6 <__aeabi_fadd+0x206>
 8000876:	4643      	mov	r3, r8
 8000878:	2b00      	cmp	r3, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0xae>
 800087c:	e0a7      	b.n	80009ce <__aeabi_fadd+0x1fe>
 800087e:	1e53      	subs	r3, r2, #1
 8000880:	2a01      	cmp	r2, #1
 8000882:	d100      	bne.n	8000886 <__aeabi_fadd+0xb6>
 8000884:	e12f      	b.n	8000ae6 <__aeabi_fadd+0x316>
 8000886:	2aff      	cmp	r2, #255	; 0xff
 8000888:	d069      	beq.n	800095e <__aeabi_fadd+0x18e>
 800088a:	001a      	movs	r2, r3
 800088c:	e0aa      	b.n	80009e4 <__aeabi_fadd+0x214>
 800088e:	1be9      	subs	r1, r5, r7
 8000890:	2900      	cmp	r1, #0
 8000892:	dd70      	ble.n	8000976 <__aeabi_fadd+0x1a6>
 8000894:	2f00      	cmp	r7, #0
 8000896:	d037      	beq.n	8000908 <__aeabi_fadd+0x138>
 8000898:	2dff      	cmp	r5, #255	; 0xff
 800089a:	d062      	beq.n	8000962 <__aeabi_fadd+0x192>
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	04db      	lsls	r3, r3, #19
 80008a0:	431e      	orrs	r6, r3
 80008a2:	291b      	cmp	r1, #27
 80008a4:	dc00      	bgt.n	80008a8 <__aeabi_fadd+0xd8>
 80008a6:	e0b0      	b.n	8000a0a <__aeabi_fadd+0x23a>
 80008a8:	2001      	movs	r0, #1
 80008aa:	4440      	add	r0, r8
 80008ac:	0143      	lsls	r3, r0, #5
 80008ae:	d543      	bpl.n	8000938 <__aeabi_fadd+0x168>
 80008b0:	3501      	adds	r5, #1
 80008b2:	2dff      	cmp	r5, #255	; 0xff
 80008b4:	d033      	beq.n	800091e <__aeabi_fadd+0x14e>
 80008b6:	2301      	movs	r3, #1
 80008b8:	4a93      	ldr	r2, [pc, #588]	; (8000b08 <__aeabi_fadd+0x338>)
 80008ba:	4003      	ands	r3, r0
 80008bc:	0840      	lsrs	r0, r0, #1
 80008be:	4010      	ands	r0, r2
 80008c0:	4318      	orrs	r0, r3
 80008c2:	e7b9      	b.n	8000838 <__aeabi_fadd+0x68>
 80008c4:	2e00      	cmp	r6, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_fadd+0xfa>
 80008c8:	e083      	b.n	80009d2 <__aeabi_fadd+0x202>
 80008ca:	1e51      	subs	r1, r2, #1
 80008cc:	2a01      	cmp	r2, #1
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fadd+0x102>
 80008d0:	e0d8      	b.n	8000a84 <__aeabi_fadd+0x2b4>
 80008d2:	2aff      	cmp	r2, #255	; 0xff
 80008d4:	d045      	beq.n	8000962 <__aeabi_fadd+0x192>
 80008d6:	000a      	movs	r2, r1
 80008d8:	e798      	b.n	800080c <__aeabi_fadd+0x3c>
 80008da:	27fe      	movs	r7, #254	; 0xfe
 80008dc:	1c6a      	adds	r2, r5, #1
 80008de:	4217      	tst	r7, r2
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fadd+0x114>
 80008e2:	e086      	b.n	80009f2 <__aeabi_fadd+0x222>
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_fadd+0x11a>
 80008e8:	e0b7      	b.n	8000a5a <__aeabi_fadd+0x28a>
 80008ea:	4643      	mov	r3, r8
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x122>
 80008f0:	e0f3      	b.n	8000ada <__aeabi_fadd+0x30a>
 80008f2:	2200      	movs	r2, #0
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d0b0      	beq.n	800085a <__aeabi_fadd+0x8a>
 80008f8:	1b98      	subs	r0, r3, r6
 80008fa:	0143      	lsls	r3, r0, #5
 80008fc:	d400      	bmi.n	8000900 <__aeabi_fadd+0x130>
 80008fe:	e0fa      	b.n	8000af6 <__aeabi_fadd+0x326>
 8000900:	4643      	mov	r3, r8
 8000902:	000c      	movs	r4, r1
 8000904:	1af0      	subs	r0, r6, r3
 8000906:	e797      	b.n	8000838 <__aeabi_fadd+0x68>
 8000908:	2e00      	cmp	r6, #0
 800090a:	d100      	bne.n	800090e <__aeabi_fadd+0x13e>
 800090c:	e0c8      	b.n	8000aa0 <__aeabi_fadd+0x2d0>
 800090e:	1e4a      	subs	r2, r1, #1
 8000910:	2901      	cmp	r1, #1
 8000912:	d100      	bne.n	8000916 <__aeabi_fadd+0x146>
 8000914:	e0ae      	b.n	8000a74 <__aeabi_fadd+0x2a4>
 8000916:	29ff      	cmp	r1, #255	; 0xff
 8000918:	d023      	beq.n	8000962 <__aeabi_fadd+0x192>
 800091a:	0011      	movs	r1, r2
 800091c:	e7c1      	b.n	80008a2 <__aeabi_fadd+0xd2>
 800091e:	2300      	movs	r3, #0
 8000920:	22ff      	movs	r2, #255	; 0xff
 8000922:	469c      	mov	ip, r3
 8000924:	e799      	b.n	800085a <__aeabi_fadd+0x8a>
 8000926:	21fe      	movs	r1, #254	; 0xfe
 8000928:	1c6a      	adds	r2, r5, #1
 800092a:	4211      	tst	r1, r2
 800092c:	d077      	beq.n	8000a1e <__aeabi_fadd+0x24e>
 800092e:	2aff      	cmp	r2, #255	; 0xff
 8000930:	d0f5      	beq.n	800091e <__aeabi_fadd+0x14e>
 8000932:	0015      	movs	r5, r2
 8000934:	4446      	add	r6, r8
 8000936:	0870      	lsrs	r0, r6, #1
 8000938:	0743      	lsls	r3, r0, #29
 800093a:	d000      	beq.n	800093e <__aeabi_fadd+0x16e>
 800093c:	e77e      	b.n	800083c <__aeabi_fadd+0x6c>
 800093e:	08c3      	lsrs	r3, r0, #3
 8000940:	2dff      	cmp	r5, #255	; 0xff
 8000942:	d00e      	beq.n	8000962 <__aeabi_fadd+0x192>
 8000944:	025b      	lsls	r3, r3, #9
 8000946:	0a5b      	lsrs	r3, r3, #9
 8000948:	469c      	mov	ip, r3
 800094a:	b2ea      	uxtb	r2, r5
 800094c:	e785      	b.n	800085a <__aeabi_fadd+0x8a>
 800094e:	2e00      	cmp	r6, #0
 8000950:	d007      	beq.n	8000962 <__aeabi_fadd+0x192>
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	03d2      	lsls	r2, r2, #15
 8000956:	4213      	tst	r3, r2
 8000958:	d003      	beq.n	8000962 <__aeabi_fadd+0x192>
 800095a:	4210      	tst	r0, r2
 800095c:	d101      	bne.n	8000962 <__aeabi_fadd+0x192>
 800095e:	000c      	movs	r4, r1
 8000960:	0003      	movs	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0db      	beq.n	800091e <__aeabi_fadd+0x14e>
 8000966:	2080      	movs	r0, #128	; 0x80
 8000968:	03c0      	lsls	r0, r0, #15
 800096a:	4318      	orrs	r0, r3
 800096c:	0240      	lsls	r0, r0, #9
 800096e:	0a43      	lsrs	r3, r0, #9
 8000970:	469c      	mov	ip, r3
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	e771      	b.n	800085a <__aeabi_fadd+0x8a>
 8000976:	2900      	cmp	r1, #0
 8000978:	d0d5      	beq.n	8000926 <__aeabi_fadd+0x156>
 800097a:	1b7a      	subs	r2, r7, r5
 800097c:	2d00      	cmp	r5, #0
 800097e:	d160      	bne.n	8000a42 <__aeabi_fadd+0x272>
 8000980:	4643      	mov	r3, r8
 8000982:	2b00      	cmp	r3, #0
 8000984:	d024      	beq.n	80009d0 <__aeabi_fadd+0x200>
 8000986:	1e53      	subs	r3, r2, #1
 8000988:	2a01      	cmp	r2, #1
 800098a:	d073      	beq.n	8000a74 <__aeabi_fadd+0x2a4>
 800098c:	2aff      	cmp	r2, #255	; 0xff
 800098e:	d0e7      	beq.n	8000960 <__aeabi_fadd+0x190>
 8000990:	001a      	movs	r2, r3
 8000992:	2a1b      	cmp	r2, #27
 8000994:	dc00      	bgt.n	8000998 <__aeabi_fadd+0x1c8>
 8000996:	e085      	b.n	8000aa4 <__aeabi_fadd+0x2d4>
 8000998:	2001      	movs	r0, #1
 800099a:	003d      	movs	r5, r7
 800099c:	1980      	adds	r0, r0, r6
 800099e:	e785      	b.n	80008ac <__aeabi_fadd+0xdc>
 80009a0:	2320      	movs	r3, #32
 80009a2:	003a      	movs	r2, r7
 80009a4:	1b45      	subs	r5, r0, r5
 80009a6:	0038      	movs	r0, r7
 80009a8:	3501      	adds	r5, #1
 80009aa:	40ea      	lsrs	r2, r5
 80009ac:	1b5d      	subs	r5, r3, r5
 80009ae:	40a8      	lsls	r0, r5
 80009b0:	1e43      	subs	r3, r0, #1
 80009b2:	4198      	sbcs	r0, r3
 80009b4:	2500      	movs	r5, #0
 80009b6:	4310      	orrs	r0, r2
 80009b8:	e73e      	b.n	8000838 <__aeabi_fadd+0x68>
 80009ba:	2320      	movs	r3, #32
 80009bc:	0030      	movs	r0, r6
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	0031      	movs	r1, r6
 80009c2:	4098      	lsls	r0, r3
 80009c4:	40d1      	lsrs	r1, r2
 80009c6:	1e43      	subs	r3, r0, #1
 80009c8:	4198      	sbcs	r0, r3
 80009ca:	4308      	orrs	r0, r1
 80009cc:	e722      	b.n	8000814 <__aeabi_fadd+0x44>
 80009ce:	000c      	movs	r4, r1
 80009d0:	0003      	movs	r3, r0
 80009d2:	0015      	movs	r5, r2
 80009d4:	e7b4      	b.n	8000940 <__aeabi_fadd+0x170>
 80009d6:	2fff      	cmp	r7, #255	; 0xff
 80009d8:	d0c1      	beq.n	800095e <__aeabi_fadd+0x18e>
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	4640      	mov	r0, r8
 80009de:	04db      	lsls	r3, r3, #19
 80009e0:	4318      	orrs	r0, r3
 80009e2:	4680      	mov	r8, r0
 80009e4:	2a1b      	cmp	r2, #27
 80009e6:	dd51      	ble.n	8000a8c <__aeabi_fadd+0x2bc>
 80009e8:	2001      	movs	r0, #1
 80009ea:	000c      	movs	r4, r1
 80009ec:	003d      	movs	r5, r7
 80009ee:	1a30      	subs	r0, r6, r0
 80009f0:	e712      	b.n	8000818 <__aeabi_fadd+0x48>
 80009f2:	4643      	mov	r3, r8
 80009f4:	1b9f      	subs	r7, r3, r6
 80009f6:	017b      	lsls	r3, r7, #5
 80009f8:	d42b      	bmi.n	8000a52 <__aeabi_fadd+0x282>
 80009fa:	2f00      	cmp	r7, #0
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fadd+0x230>
 80009fe:	e710      	b.n	8000822 <__aeabi_fadd+0x52>
 8000a00:	2300      	movs	r3, #0
 8000a02:	2400      	movs	r4, #0
 8000a04:	2200      	movs	r2, #0
 8000a06:	469c      	mov	ip, r3
 8000a08:	e727      	b.n	800085a <__aeabi_fadd+0x8a>
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	0032      	movs	r2, r6
 8000a0e:	0030      	movs	r0, r6
 8000a10:	40ca      	lsrs	r2, r1
 8000a12:	1a59      	subs	r1, r3, r1
 8000a14:	4088      	lsls	r0, r1
 8000a16:	1e43      	subs	r3, r0, #1
 8000a18:	4198      	sbcs	r0, r3
 8000a1a:	4310      	orrs	r0, r2
 8000a1c:	e745      	b.n	80008aa <__aeabi_fadd+0xda>
 8000a1e:	2d00      	cmp	r5, #0
 8000a20:	d14a      	bne.n	8000ab8 <__aeabi_fadd+0x2e8>
 8000a22:	4643      	mov	r3, r8
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d063      	beq.n	8000af0 <__aeabi_fadd+0x320>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fadd+0x260>
 8000a2e:	e714      	b.n	800085a <__aeabi_fadd+0x8a>
 8000a30:	0030      	movs	r0, r6
 8000a32:	4440      	add	r0, r8
 8000a34:	0143      	lsls	r3, r0, #5
 8000a36:	d400      	bmi.n	8000a3a <__aeabi_fadd+0x26a>
 8000a38:	e77e      	b.n	8000938 <__aeabi_fadd+0x168>
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <__aeabi_fadd+0x334>)
 8000a3c:	3501      	adds	r5, #1
 8000a3e:	4018      	ands	r0, r3
 8000a40:	e77a      	b.n	8000938 <__aeabi_fadd+0x168>
 8000a42:	2fff      	cmp	r7, #255	; 0xff
 8000a44:	d08c      	beq.n	8000960 <__aeabi_fadd+0x190>
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	4641      	mov	r1, r8
 8000a4a:	04db      	lsls	r3, r3, #19
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	4688      	mov	r8, r1
 8000a50:	e79f      	b.n	8000992 <__aeabi_fadd+0x1c2>
 8000a52:	4643      	mov	r3, r8
 8000a54:	000c      	movs	r4, r1
 8000a56:	1af7      	subs	r7, r6, r3
 8000a58:	e6e3      	b.n	8000822 <__aeabi_fadd+0x52>
 8000a5a:	4642      	mov	r2, r8
 8000a5c:	2a00      	cmp	r2, #0
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fadd+0x292>
 8000a60:	e775      	b.n	800094e <__aeabi_fadd+0x17e>
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d000      	beq.n	8000a68 <__aeabi_fadd+0x298>
 8000a66:	e77a      	b.n	800095e <__aeabi_fadd+0x18e>
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	03db      	lsls	r3, r3, #15
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	469c      	mov	ip, r3
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	e6f2      	b.n	800085a <__aeabi_fadd+0x8a>
 8000a74:	0030      	movs	r0, r6
 8000a76:	4440      	add	r0, r8
 8000a78:	2501      	movs	r5, #1
 8000a7a:	0143      	lsls	r3, r0, #5
 8000a7c:	d400      	bmi.n	8000a80 <__aeabi_fadd+0x2b0>
 8000a7e:	e75b      	b.n	8000938 <__aeabi_fadd+0x168>
 8000a80:	2502      	movs	r5, #2
 8000a82:	e718      	b.n	80008b6 <__aeabi_fadd+0xe6>
 8000a84:	4643      	mov	r3, r8
 8000a86:	2501      	movs	r5, #1
 8000a88:	1b98      	subs	r0, r3, r6
 8000a8a:	e6c5      	b.n	8000818 <__aeabi_fadd+0x48>
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	4644      	mov	r4, r8
 8000a90:	4640      	mov	r0, r8
 8000a92:	40d4      	lsrs	r4, r2
 8000a94:	1a9a      	subs	r2, r3, r2
 8000a96:	4090      	lsls	r0, r2
 8000a98:	1e43      	subs	r3, r0, #1
 8000a9a:	4198      	sbcs	r0, r3
 8000a9c:	4320      	orrs	r0, r4
 8000a9e:	e7a4      	b.n	80009ea <__aeabi_fadd+0x21a>
 8000aa0:	000d      	movs	r5, r1
 8000aa2:	e74d      	b.n	8000940 <__aeabi_fadd+0x170>
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	4641      	mov	r1, r8
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	40d1      	lsrs	r1, r2
 8000aac:	1a9a      	subs	r2, r3, r2
 8000aae:	4090      	lsls	r0, r2
 8000ab0:	1e43      	subs	r3, r0, #1
 8000ab2:	4198      	sbcs	r0, r3
 8000ab4:	4308      	orrs	r0, r1
 8000ab6:	e770      	b.n	800099a <__aeabi_fadd+0x1ca>
 8000ab8:	4642      	mov	r2, r8
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fadd+0x2f0>
 8000abe:	e74f      	b.n	8000960 <__aeabi_fadd+0x190>
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fadd+0x2f6>
 8000ac4:	e74d      	b.n	8000962 <__aeabi_fadd+0x192>
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	03d2      	lsls	r2, r2, #15
 8000aca:	4213      	tst	r3, r2
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fadd+0x300>
 8000ace:	e748      	b.n	8000962 <__aeabi_fadd+0x192>
 8000ad0:	4210      	tst	r0, r2
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x306>
 8000ad4:	e745      	b.n	8000962 <__aeabi_fadd+0x192>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	e743      	b.n	8000962 <__aeabi_fadd+0x192>
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d090      	beq.n	8000a00 <__aeabi_fadd+0x230>
 8000ade:	000c      	movs	r4, r1
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	e6b9      	b.n	800085a <__aeabi_fadd+0x8a>
 8000ae6:	4643      	mov	r3, r8
 8000ae8:	000c      	movs	r4, r1
 8000aea:	1af0      	subs	r0, r6, r3
 8000aec:	3501      	adds	r5, #1
 8000aee:	e693      	b.n	8000818 <__aeabi_fadd+0x48>
 8000af0:	4684      	mov	ip, r0
 8000af2:	2200      	movs	r2, #0
 8000af4:	e6b1      	b.n	800085a <__aeabi_fadd+0x8a>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d000      	beq.n	8000afc <__aeabi_fadd+0x32c>
 8000afa:	e71d      	b.n	8000938 <__aeabi_fadd+0x168>
 8000afc:	2300      	movs	r3, #0
 8000afe:	2400      	movs	r4, #0
 8000b00:	469c      	mov	ip, r3
 8000b02:	e6aa      	b.n	800085a <__aeabi_fadd+0x8a>
 8000b04:	fbffffff 	.word	0xfbffffff
 8000b08:	7dffffff 	.word	0x7dffffff

08000b0c <__aeabi_fdiv>:
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0e:	464f      	mov	r7, r9
 8000b10:	4646      	mov	r6, r8
 8000b12:	46d6      	mov	lr, sl
 8000b14:	0245      	lsls	r5, r0, #9
 8000b16:	b5c0      	push	{r6, r7, lr}
 8000b18:	0047      	lsls	r7, r0, #1
 8000b1a:	1c0c      	adds	r4, r1, #0
 8000b1c:	0a6d      	lsrs	r5, r5, #9
 8000b1e:	0e3f      	lsrs	r7, r7, #24
 8000b20:	0fc6      	lsrs	r6, r0, #31
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_fdiv+0x1c>
 8000b26:	e070      	b.n	8000c0a <__aeabi_fdiv+0xfe>
 8000b28:	2fff      	cmp	r7, #255	; 0xff
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_fdiv+0x22>
 8000b2c:	e075      	b.n	8000c1a <__aeabi_fdiv+0x10e>
 8000b2e:	00eb      	lsls	r3, r5, #3
 8000b30:	2580      	movs	r5, #128	; 0x80
 8000b32:	04ed      	lsls	r5, r5, #19
 8000b34:	431d      	orrs	r5, r3
 8000b36:	2300      	movs	r3, #0
 8000b38:	4699      	mov	r9, r3
 8000b3a:	469a      	mov	sl, r3
 8000b3c:	3f7f      	subs	r7, #127	; 0x7f
 8000b3e:	0260      	lsls	r0, r4, #9
 8000b40:	0a43      	lsrs	r3, r0, #9
 8000b42:	4698      	mov	r8, r3
 8000b44:	0063      	lsls	r3, r4, #1
 8000b46:	0e1b      	lsrs	r3, r3, #24
 8000b48:	0fe4      	lsrs	r4, r4, #31
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d04e      	beq.n	8000bec <__aeabi_fdiv+0xe0>
 8000b4e:	2bff      	cmp	r3, #255	; 0xff
 8000b50:	d046      	beq.n	8000be0 <__aeabi_fdiv+0xd4>
 8000b52:	4642      	mov	r2, r8
 8000b54:	00d0      	lsls	r0, r2, #3
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	04d2      	lsls	r2, r2, #19
 8000b5a:	4302      	orrs	r2, r0
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2200      	movs	r2, #0
 8000b60:	3b7f      	subs	r3, #127	; 0x7f
 8000b62:	0031      	movs	r1, r6
 8000b64:	1aff      	subs	r7, r7, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4061      	eors	r1, r4
 8000b6a:	b2c9      	uxtb	r1, r1
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d900      	bls.n	8000b74 <__aeabi_fdiv+0x68>
 8000b72:	e0b5      	b.n	8000ce0 <__aeabi_fdiv+0x1d4>
 8000b74:	486e      	ldr	r0, [pc, #440]	; (8000d30 <__aeabi_fdiv+0x224>)
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	58c3      	ldr	r3, [r0, r3]
 8000b7a:	469f      	mov	pc, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	4698      	mov	r8, r3
 8000b80:	0026      	movs	r6, r4
 8000b82:	4645      	mov	r5, r8
 8000b84:	4692      	mov	sl, r2
 8000b86:	4653      	mov	r3, sl
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fdiv+0x82>
 8000b8c:	e089      	b.n	8000ca2 <__aeabi_fdiv+0x196>
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d100      	bne.n	8000b94 <__aeabi_fdiv+0x88>
 8000b92:	e09e      	b.n	8000cd2 <__aeabi_fdiv+0x1c6>
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d018      	beq.n	8000bca <__aeabi_fdiv+0xbe>
 8000b98:	003b      	movs	r3, r7
 8000b9a:	337f      	adds	r3, #127	; 0x7f
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	dd69      	ble.n	8000c74 <__aeabi_fdiv+0x168>
 8000ba0:	076a      	lsls	r2, r5, #29
 8000ba2:	d004      	beq.n	8000bae <__aeabi_fdiv+0xa2>
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	402a      	ands	r2, r5
 8000ba8:	2a04      	cmp	r2, #4
 8000baa:	d000      	beq.n	8000bae <__aeabi_fdiv+0xa2>
 8000bac:	3504      	adds	r5, #4
 8000bae:	012a      	lsls	r2, r5, #4
 8000bb0:	d503      	bpl.n	8000bba <__aeabi_fdiv+0xae>
 8000bb2:	4b60      	ldr	r3, [pc, #384]	; (8000d34 <__aeabi_fdiv+0x228>)
 8000bb4:	401d      	ands	r5, r3
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	3380      	adds	r3, #128	; 0x80
 8000bba:	2bfe      	cmp	r3, #254	; 0xfe
 8000bbc:	dd00      	ble.n	8000bc0 <__aeabi_fdiv+0xb4>
 8000bbe:	e070      	b.n	8000ca2 <__aeabi_fdiv+0x196>
 8000bc0:	01ad      	lsls	r5, r5, #6
 8000bc2:	0a6d      	lsrs	r5, r5, #9
 8000bc4:	b2d8      	uxtb	r0, r3
 8000bc6:	e002      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000bc8:	000e      	movs	r6, r1
 8000bca:	2000      	movs	r0, #0
 8000bcc:	2500      	movs	r5, #0
 8000bce:	05c0      	lsls	r0, r0, #23
 8000bd0:	4328      	orrs	r0, r5
 8000bd2:	07f6      	lsls	r6, r6, #31
 8000bd4:	4330      	orrs	r0, r6
 8000bd6:	bce0      	pop	{r5, r6, r7}
 8000bd8:	46ba      	mov	sl, r7
 8000bda:	46b1      	mov	r9, r6
 8000bdc:	46a8      	mov	r8, r5
 8000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be0:	4643      	mov	r3, r8
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d13f      	bne.n	8000c66 <__aeabi_fdiv+0x15a>
 8000be6:	2202      	movs	r2, #2
 8000be8:	3fff      	subs	r7, #255	; 0xff
 8000bea:	e003      	b.n	8000bf4 <__aeabi_fdiv+0xe8>
 8000bec:	4643      	mov	r3, r8
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d12d      	bne.n	8000c4e <__aeabi_fdiv+0x142>
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	0031      	movs	r1, r6
 8000bf6:	464b      	mov	r3, r9
 8000bf8:	4061      	eors	r1, r4
 8000bfa:	b2c9      	uxtb	r1, r1
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d834      	bhi.n	8000c6c <__aeabi_fdiv+0x160>
 8000c02:	484d      	ldr	r0, [pc, #308]	; (8000d38 <__aeabi_fdiv+0x22c>)
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	58c3      	ldr	r3, [r0, r3]
 8000c08:	469f      	mov	pc, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d113      	bne.n	8000c36 <__aeabi_fdiv+0x12a>
 8000c0e:	2304      	movs	r3, #4
 8000c10:	4699      	mov	r9, r3
 8000c12:	3b03      	subs	r3, #3
 8000c14:	2700      	movs	r7, #0
 8000c16:	469a      	mov	sl, r3
 8000c18:	e791      	b.n	8000b3e <__aeabi_fdiv+0x32>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d105      	bne.n	8000c2a <__aeabi_fdiv+0x11e>
 8000c1e:	2308      	movs	r3, #8
 8000c20:	4699      	mov	r9, r3
 8000c22:	3b06      	subs	r3, #6
 8000c24:	27ff      	movs	r7, #255	; 0xff
 8000c26:	469a      	mov	sl, r3
 8000c28:	e789      	b.n	8000b3e <__aeabi_fdiv+0x32>
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	3b09      	subs	r3, #9
 8000c30:	27ff      	movs	r7, #255	; 0xff
 8000c32:	469a      	mov	sl, r3
 8000c34:	e783      	b.n	8000b3e <__aeabi_fdiv+0x32>
 8000c36:	0028      	movs	r0, r5
 8000c38:	f002 f906 	bl	8002e48 <__clzsi2>
 8000c3c:	2776      	movs	r7, #118	; 0x76
 8000c3e:	1f43      	subs	r3, r0, #5
 8000c40:	409d      	lsls	r5, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	427f      	negs	r7, r7
 8000c46:	4699      	mov	r9, r3
 8000c48:	469a      	mov	sl, r3
 8000c4a:	1a3f      	subs	r7, r7, r0
 8000c4c:	e777      	b.n	8000b3e <__aeabi_fdiv+0x32>
 8000c4e:	4640      	mov	r0, r8
 8000c50:	f002 f8fa 	bl	8002e48 <__clzsi2>
 8000c54:	4642      	mov	r2, r8
 8000c56:	1f43      	subs	r3, r0, #5
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	2376      	movs	r3, #118	; 0x76
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	4690      	mov	r8, r2
 8000c60:	1a1b      	subs	r3, r3, r0
 8000c62:	2200      	movs	r2, #0
 8000c64:	e77d      	b.n	8000b62 <__aeabi_fdiv+0x56>
 8000c66:	23ff      	movs	r3, #255	; 0xff
 8000c68:	2203      	movs	r2, #3
 8000c6a:	e77a      	b.n	8000b62 <__aeabi_fdiv+0x56>
 8000c6c:	000e      	movs	r6, r1
 8000c6e:	20ff      	movs	r0, #255	; 0xff
 8000c70:	2500      	movs	r5, #0
 8000c72:	e7ac      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000c74:	2001      	movs	r0, #1
 8000c76:	1ac0      	subs	r0, r0, r3
 8000c78:	281b      	cmp	r0, #27
 8000c7a:	dca6      	bgt.n	8000bca <__aeabi_fdiv+0xbe>
 8000c7c:	379e      	adds	r7, #158	; 0x9e
 8000c7e:	002a      	movs	r2, r5
 8000c80:	40bd      	lsls	r5, r7
 8000c82:	40c2      	lsrs	r2, r0
 8000c84:	1e6b      	subs	r3, r5, #1
 8000c86:	419d      	sbcs	r5, r3
 8000c88:	4315      	orrs	r5, r2
 8000c8a:	076b      	lsls	r3, r5, #29
 8000c8c:	d004      	beq.n	8000c98 <__aeabi_fdiv+0x18c>
 8000c8e:	230f      	movs	r3, #15
 8000c90:	402b      	ands	r3, r5
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d000      	beq.n	8000c98 <__aeabi_fdiv+0x18c>
 8000c96:	3504      	adds	r5, #4
 8000c98:	016b      	lsls	r3, r5, #5
 8000c9a:	d544      	bpl.n	8000d26 <__aeabi_fdiv+0x21a>
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	2500      	movs	r5, #0
 8000ca0:	e795      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000ca2:	20ff      	movs	r0, #255	; 0xff
 8000ca4:	2500      	movs	r5, #0
 8000ca6:	e792      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000ca8:	2580      	movs	r5, #128	; 0x80
 8000caa:	2600      	movs	r6, #0
 8000cac:	20ff      	movs	r0, #255	; 0xff
 8000cae:	03ed      	lsls	r5, r5, #15
 8000cb0:	e78d      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2080      	movs	r0, #128	; 0x80
 8000cb8:	03c0      	lsls	r0, r0, #15
 8000cba:	4205      	tst	r5, r0
 8000cbc:	d009      	beq.n	8000cd2 <__aeabi_fdiv+0x1c6>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	4203      	tst	r3, r0
 8000cc2:	d106      	bne.n	8000cd2 <__aeabi_fdiv+0x1c6>
 8000cc4:	4645      	mov	r5, r8
 8000cc6:	4305      	orrs	r5, r0
 8000cc8:	026d      	lsls	r5, r5, #9
 8000cca:	0026      	movs	r6, r4
 8000ccc:	20ff      	movs	r0, #255	; 0xff
 8000cce:	0a6d      	lsrs	r5, r5, #9
 8000cd0:	e77d      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	03c0      	lsls	r0, r0, #15
 8000cd6:	4305      	orrs	r5, r0
 8000cd8:	026d      	lsls	r5, r5, #9
 8000cda:	20ff      	movs	r0, #255	; 0xff
 8000cdc:	0a6d      	lsrs	r5, r5, #9
 8000cde:	e776      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000ce0:	4642      	mov	r2, r8
 8000ce2:	016b      	lsls	r3, r5, #5
 8000ce4:	0150      	lsls	r0, r2, #5
 8000ce6:	4283      	cmp	r3, r0
 8000ce8:	d219      	bcs.n	8000d1e <__aeabi_fdiv+0x212>
 8000cea:	221b      	movs	r2, #27
 8000cec:	2500      	movs	r5, #0
 8000cee:	3f01      	subs	r7, #1
 8000cf0:	2601      	movs	r6, #1
 8000cf2:	001c      	movs	r4, r3
 8000cf4:	006d      	lsls	r5, r5, #1
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	db01      	blt.n	8000d00 <__aeabi_fdiv+0x1f4>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	d801      	bhi.n	8000d04 <__aeabi_fdiv+0x1f8>
 8000d00:	1a1b      	subs	r3, r3, r0
 8000d02:	4335      	orrs	r5, r6
 8000d04:	3a01      	subs	r2, #1
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d1f3      	bne.n	8000cf2 <__aeabi_fdiv+0x1e6>
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	4193      	sbcs	r3, r2
 8000d0e:	431d      	orrs	r5, r3
 8000d10:	003b      	movs	r3, r7
 8000d12:	337f      	adds	r3, #127	; 0x7f
 8000d14:	000e      	movs	r6, r1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	dd00      	ble.n	8000d1c <__aeabi_fdiv+0x210>
 8000d1a:	e741      	b.n	8000ba0 <__aeabi_fdiv+0x94>
 8000d1c:	e7aa      	b.n	8000c74 <__aeabi_fdiv+0x168>
 8000d1e:	221a      	movs	r2, #26
 8000d20:	2501      	movs	r5, #1
 8000d22:	1a1b      	subs	r3, r3, r0
 8000d24:	e7e4      	b.n	8000cf0 <__aeabi_fdiv+0x1e4>
 8000d26:	01ad      	lsls	r5, r5, #6
 8000d28:	2000      	movs	r0, #0
 8000d2a:	0a6d      	lsrs	r5, r5, #9
 8000d2c:	e74f      	b.n	8000bce <__aeabi_fdiv+0xc2>
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	0800d39c 	.word	0x0800d39c
 8000d34:	f7ffffff 	.word	0xf7ffffff
 8000d38:	0800d3dc 	.word	0x0800d3dc

08000d3c <__eqsf2>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	0042      	lsls	r2, r0, #1
 8000d40:	0245      	lsls	r5, r0, #9
 8000d42:	024e      	lsls	r6, r1, #9
 8000d44:	004c      	lsls	r4, r1, #1
 8000d46:	0fc3      	lsrs	r3, r0, #31
 8000d48:	0a6d      	lsrs	r5, r5, #9
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	0e12      	lsrs	r2, r2, #24
 8000d4e:	0a76      	lsrs	r6, r6, #9
 8000d50:	0e24      	lsrs	r4, r4, #24
 8000d52:	0fc9      	lsrs	r1, r1, #31
 8000d54:	2aff      	cmp	r2, #255	; 0xff
 8000d56:	d006      	beq.n	8000d66 <__eqsf2+0x2a>
 8000d58:	2cff      	cmp	r4, #255	; 0xff
 8000d5a:	d003      	beq.n	8000d64 <__eqsf2+0x28>
 8000d5c:	42a2      	cmp	r2, r4
 8000d5e:	d101      	bne.n	8000d64 <__eqsf2+0x28>
 8000d60:	42b5      	cmp	r5, r6
 8000d62:	d006      	beq.n	8000d72 <__eqsf2+0x36>
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d1fc      	bne.n	8000d64 <__eqsf2+0x28>
 8000d6a:	2cff      	cmp	r4, #255	; 0xff
 8000d6c:	d1fa      	bne.n	8000d64 <__eqsf2+0x28>
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d1f8      	bne.n	8000d64 <__eqsf2+0x28>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d006      	beq.n	8000d84 <__eqsf2+0x48>
 8000d76:	2001      	movs	r0, #1
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	d1f3      	bne.n	8000d64 <__eqsf2+0x28>
 8000d7c:	0028      	movs	r0, r5
 8000d7e:	1e43      	subs	r3, r0, #1
 8000d80:	4198      	sbcs	r0, r3
 8000d82:	e7ef      	b.n	8000d64 <__eqsf2+0x28>
 8000d84:	2000      	movs	r0, #0
 8000d86:	e7ed      	b.n	8000d64 <__eqsf2+0x28>

08000d88 <__gesf2>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	0042      	lsls	r2, r0, #1
 8000d8c:	0245      	lsls	r5, r0, #9
 8000d8e:	024e      	lsls	r6, r1, #9
 8000d90:	004c      	lsls	r4, r1, #1
 8000d92:	0fc3      	lsrs	r3, r0, #31
 8000d94:	0a6d      	lsrs	r5, r5, #9
 8000d96:	0e12      	lsrs	r2, r2, #24
 8000d98:	0a76      	lsrs	r6, r6, #9
 8000d9a:	0e24      	lsrs	r4, r4, #24
 8000d9c:	0fc8      	lsrs	r0, r1, #31
 8000d9e:	2aff      	cmp	r2, #255	; 0xff
 8000da0:	d01b      	beq.n	8000dda <__gesf2+0x52>
 8000da2:	2cff      	cmp	r4, #255	; 0xff
 8000da4:	d00e      	beq.n	8000dc4 <__gesf2+0x3c>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d11b      	bne.n	8000de2 <__gesf2+0x5a>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d101      	bne.n	8000db2 <__gesf2+0x2a>
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d01c      	beq.n	8000dec <__gesf2+0x64>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d00c      	beq.n	8000dd0 <__gesf2+0x48>
 8000db6:	4283      	cmp	r3, r0
 8000db8:	d01c      	beq.n	8000df4 <__gesf2+0x6c>
 8000dba:	2102      	movs	r1, #2
 8000dbc:	1e58      	subs	r0, r3, #1
 8000dbe:	4008      	ands	r0, r1
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d122      	bne.n	8000e0e <__gesf2+0x86>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d1f4      	bne.n	8000db6 <__gesf2+0x2e>
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d1f2      	bne.n	8000db6 <__gesf2+0x2e>
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	d1f6      	bne.n	8000dc2 <__gesf2+0x3a>
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	e7f3      	b.n	8000dc2 <__gesf2+0x3a>
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d117      	bne.n	8000e0e <__gesf2+0x86>
 8000dde:	2cff      	cmp	r4, #255	; 0xff
 8000de0:	d0f0      	beq.n	8000dc4 <__gesf2+0x3c>
 8000de2:	2c00      	cmp	r4, #0
 8000de4:	d1e7      	bne.n	8000db6 <__gesf2+0x2e>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d1e5      	bne.n	8000db6 <__gesf2+0x2e>
 8000dea:	e7e6      	b.n	8000dba <__gesf2+0x32>
 8000dec:	2000      	movs	r0, #0
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d0e7      	beq.n	8000dc2 <__gesf2+0x3a>
 8000df2:	e7e2      	b.n	8000dba <__gesf2+0x32>
 8000df4:	42a2      	cmp	r2, r4
 8000df6:	dc05      	bgt.n	8000e04 <__gesf2+0x7c>
 8000df8:	dbea      	blt.n	8000dd0 <__gesf2+0x48>
 8000dfa:	42b5      	cmp	r5, r6
 8000dfc:	d802      	bhi.n	8000e04 <__gesf2+0x7c>
 8000dfe:	d3e7      	bcc.n	8000dd0 <__gesf2+0x48>
 8000e00:	2000      	movs	r0, #0
 8000e02:	e7de      	b.n	8000dc2 <__gesf2+0x3a>
 8000e04:	4243      	negs	r3, r0
 8000e06:	4158      	adcs	r0, r3
 8000e08:	0040      	lsls	r0, r0, #1
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	e7d9      	b.n	8000dc2 <__gesf2+0x3a>
 8000e0e:	2002      	movs	r0, #2
 8000e10:	4240      	negs	r0, r0
 8000e12:	e7d6      	b.n	8000dc2 <__gesf2+0x3a>

08000e14 <__lesf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	0245      	lsls	r5, r0, #9
 8000e1a:	024e      	lsls	r6, r1, #9
 8000e1c:	004c      	lsls	r4, r1, #1
 8000e1e:	0fc3      	lsrs	r3, r0, #31
 8000e20:	0a6d      	lsrs	r5, r5, #9
 8000e22:	0e12      	lsrs	r2, r2, #24
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc8      	lsrs	r0, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	; 0xff
 8000e2c:	d00b      	beq.n	8000e46 <__lesf2+0x32>
 8000e2e:	2cff      	cmp	r4, #255	; 0xff
 8000e30:	d00d      	beq.n	8000e4e <__lesf2+0x3a>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d11f      	bne.n	8000e76 <__lesf2+0x62>
 8000e36:	2c00      	cmp	r4, #0
 8000e38:	d116      	bne.n	8000e68 <__lesf2+0x54>
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d114      	bne.n	8000e68 <__lesf2+0x54>
 8000e3e:	2000      	movs	r0, #0
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	d010      	beq.n	8000e66 <__lesf2+0x52>
 8000e44:	e009      	b.n	8000e5a <__lesf2+0x46>
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d10c      	bne.n	8000e64 <__lesf2+0x50>
 8000e4a:	2cff      	cmp	r4, #255	; 0xff
 8000e4c:	d113      	bne.n	8000e76 <__lesf2+0x62>
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d108      	bne.n	8000e64 <__lesf2+0x50>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	d008      	beq.n	8000e68 <__lesf2+0x54>
 8000e56:	4283      	cmp	r3, r0
 8000e58:	d012      	beq.n	8000e80 <__lesf2+0x6c>
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	1e58      	subs	r0, r3, #1
 8000e5e:	4008      	ands	r0, r1
 8000e60:	3801      	subs	r0, #1
 8000e62:	e000      	b.n	8000e66 <__lesf2+0x52>
 8000e64:	2002      	movs	r0, #2
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d1f4      	bne.n	8000e56 <__lesf2+0x42>
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d1fa      	bne.n	8000e66 <__lesf2+0x52>
 8000e70:	2001      	movs	r0, #1
 8000e72:	4240      	negs	r0, r0
 8000e74:	e7f7      	b.n	8000e66 <__lesf2+0x52>
 8000e76:	2c00      	cmp	r4, #0
 8000e78:	d1ed      	bne.n	8000e56 <__lesf2+0x42>
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	d1eb      	bne.n	8000e56 <__lesf2+0x42>
 8000e7e:	e7ec      	b.n	8000e5a <__lesf2+0x46>
 8000e80:	42a2      	cmp	r2, r4
 8000e82:	dc05      	bgt.n	8000e90 <__lesf2+0x7c>
 8000e84:	dbf2      	blt.n	8000e6c <__lesf2+0x58>
 8000e86:	42b5      	cmp	r5, r6
 8000e88:	d802      	bhi.n	8000e90 <__lesf2+0x7c>
 8000e8a:	d3ef      	bcc.n	8000e6c <__lesf2+0x58>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	e7ea      	b.n	8000e66 <__lesf2+0x52>
 8000e90:	4243      	negs	r3, r0
 8000e92:	4158      	adcs	r0, r3
 8000e94:	0040      	lsls	r0, r0, #1
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e5      	b.n	8000e66 <__lesf2+0x52>
 8000e9a:	46c0      	nop			; (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0244      	lsls	r4, r0, #9
 8000ea6:	0045      	lsls	r5, r0, #1
 8000ea8:	b5c0      	push	{r6, r7, lr}
 8000eaa:	0a64      	lsrs	r4, r4, #9
 8000eac:	1c0f      	adds	r7, r1, #0
 8000eae:	0e2d      	lsrs	r5, r5, #24
 8000eb0:	0fc6      	lsrs	r6, r0, #31
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_fmul+0x1c>
 8000eb6:	e08d      	b.n	8000fd4 <__aeabi_fmul+0x138>
 8000eb8:	2dff      	cmp	r5, #255	; 0xff
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fmul+0x22>
 8000ebc:	e092      	b.n	8000fe4 <__aeabi_fmul+0x148>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2080      	movs	r0, #128	; 0x80
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	00e4      	lsls	r4, r4, #3
 8000ec8:	04c0      	lsls	r0, r0, #19
 8000eca:	4304      	orrs	r4, r0
 8000ecc:	3d7f      	subs	r5, #127	; 0x7f
 8000ece:	0278      	lsls	r0, r7, #9
 8000ed0:	0a43      	lsrs	r3, r0, #9
 8000ed2:	4698      	mov	r8, r3
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0e1b      	lsrs	r3, r3, #24
 8000ed8:	0fff      	lsrs	r7, r7, #31
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_fmul+0x44>
 8000ede:	e070      	b.n	8000fc2 <__aeabi_fmul+0x126>
 8000ee0:	2bff      	cmp	r3, #255	; 0xff
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fmul+0x4a>
 8000ee4:	e086      	b.n	8000ff4 <__aeabi_fmul+0x158>
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	00d0      	lsls	r0, r2, #3
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	3b7f      	subs	r3, #127	; 0x7f
 8000eee:	18ed      	adds	r5, r5, r3
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	04d2      	lsls	r2, r2, #19
 8000ef4:	4302      	orrs	r2, r0
 8000ef6:	4690      	mov	r8, r2
 8000ef8:	469c      	mov	ip, r3
 8000efa:	0031      	movs	r1, r6
 8000efc:	464b      	mov	r3, r9
 8000efe:	4079      	eors	r1, r7
 8000f00:	1c68      	adds	r0, r5, #1
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d81c      	bhi.n	8000f40 <__aeabi_fmul+0xa4>
 8000f06:	4a76      	ldr	r2, [pc, #472]	; (80010e0 <__aeabi_fmul+0x244>)
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	58d3      	ldr	r3, [r2, r3]
 8000f0c:	469f      	mov	pc, r3
 8000f0e:	0039      	movs	r1, r7
 8000f10:	4644      	mov	r4, r8
 8000f12:	46e2      	mov	sl, ip
 8000f14:	4653      	mov	r3, sl
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d00f      	beq.n	8000f3a <__aeabi_fmul+0x9e>
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_fmul+0x84>
 8000f1e:	e0d7      	b.n	80010d0 <__aeabi_fmul+0x234>
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d137      	bne.n	8000f94 <__aeabi_fmul+0xf8>
 8000f24:	2000      	movs	r0, #0
 8000f26:	2400      	movs	r4, #0
 8000f28:	05c0      	lsls	r0, r0, #23
 8000f2a:	4320      	orrs	r0, r4
 8000f2c:	07c9      	lsls	r1, r1, #31
 8000f2e:	4308      	orrs	r0, r1
 8000f30:	bce0      	pop	{r5, r6, r7}
 8000f32:	46ba      	mov	sl, r7
 8000f34:	46b1      	mov	r9, r6
 8000f36:	46a8      	mov	r8, r5
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3a:	20ff      	movs	r0, #255	; 0xff
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	e7f3      	b.n	8000f28 <__aeabi_fmul+0x8c>
 8000f40:	0c26      	lsrs	r6, r4, #16
 8000f42:	0424      	lsls	r4, r4, #16
 8000f44:	0c22      	lsrs	r2, r4, #16
 8000f46:	4644      	mov	r4, r8
 8000f48:	0424      	lsls	r4, r4, #16
 8000f4a:	0c24      	lsrs	r4, r4, #16
 8000f4c:	4643      	mov	r3, r8
 8000f4e:	0027      	movs	r7, r4
 8000f50:	0c1b      	lsrs	r3, r3, #16
 8000f52:	4357      	muls	r7, r2
 8000f54:	4374      	muls	r4, r6
 8000f56:	435a      	muls	r2, r3
 8000f58:	435e      	muls	r6, r3
 8000f5a:	1912      	adds	r2, r2, r4
 8000f5c:	0c3b      	lsrs	r3, r7, #16
 8000f5e:	189b      	adds	r3, r3, r2
 8000f60:	429c      	cmp	r4, r3
 8000f62:	d903      	bls.n	8000f6c <__aeabi_fmul+0xd0>
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	0252      	lsls	r2, r2, #9
 8000f68:	4694      	mov	ip, r2
 8000f6a:	4466      	add	r6, ip
 8000f6c:	043f      	lsls	r7, r7, #16
 8000f6e:	041a      	lsls	r2, r3, #16
 8000f70:	0c3f      	lsrs	r7, r7, #16
 8000f72:	19d2      	adds	r2, r2, r7
 8000f74:	0194      	lsls	r4, r2, #6
 8000f76:	1e67      	subs	r7, r4, #1
 8000f78:	41bc      	sbcs	r4, r7
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	0e92      	lsrs	r2, r2, #26
 8000f7e:	199b      	adds	r3, r3, r6
 8000f80:	4314      	orrs	r4, r2
 8000f82:	019b      	lsls	r3, r3, #6
 8000f84:	431c      	orrs	r4, r3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	d400      	bmi.n	8000f8c <__aeabi_fmul+0xf0>
 8000f8a:	e09b      	b.n	80010c4 <__aeabi_fmul+0x228>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	0862      	lsrs	r2, r4, #1
 8000f90:	401c      	ands	r4, r3
 8000f92:	4314      	orrs	r4, r2
 8000f94:	0002      	movs	r2, r0
 8000f96:	327f      	adds	r2, #127	; 0x7f
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	dd64      	ble.n	8001066 <__aeabi_fmul+0x1ca>
 8000f9c:	0763      	lsls	r3, r4, #29
 8000f9e:	d004      	beq.n	8000faa <__aeabi_fmul+0x10e>
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	4023      	ands	r3, r4
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d000      	beq.n	8000faa <__aeabi_fmul+0x10e>
 8000fa8:	3404      	adds	r4, #4
 8000faa:	0123      	lsls	r3, r4, #4
 8000fac:	d503      	bpl.n	8000fb6 <__aeabi_fmul+0x11a>
 8000fae:	0002      	movs	r2, r0
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <__aeabi_fmul+0x248>)
 8000fb2:	3280      	adds	r2, #128	; 0x80
 8000fb4:	401c      	ands	r4, r3
 8000fb6:	2afe      	cmp	r2, #254	; 0xfe
 8000fb8:	dcbf      	bgt.n	8000f3a <__aeabi_fmul+0x9e>
 8000fba:	01a4      	lsls	r4, r4, #6
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	b2d0      	uxtb	r0, r2
 8000fc0:	e7b2      	b.n	8000f28 <__aeabi_fmul+0x8c>
 8000fc2:	4643      	mov	r3, r8
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d13d      	bne.n	8001044 <__aeabi_fmul+0x1a8>
 8000fc8:	464a      	mov	r2, r9
 8000fca:	3301      	adds	r3, #1
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	4691      	mov	r9, r2
 8000fd0:	469c      	mov	ip, r3
 8000fd2:	e792      	b.n	8000efa <__aeabi_fmul+0x5e>
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d129      	bne.n	800102c <__aeabi_fmul+0x190>
 8000fd8:	2304      	movs	r3, #4
 8000fda:	4699      	mov	r9, r3
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	2500      	movs	r5, #0
 8000fe0:	469a      	mov	sl, r3
 8000fe2:	e774      	b.n	8000ece <__aeabi_fmul+0x32>
 8000fe4:	2c00      	cmp	r4, #0
 8000fe6:	d11b      	bne.n	8001020 <__aeabi_fmul+0x184>
 8000fe8:	2308      	movs	r3, #8
 8000fea:	4699      	mov	r9, r3
 8000fec:	3b06      	subs	r3, #6
 8000fee:	25ff      	movs	r5, #255	; 0xff
 8000ff0:	469a      	mov	sl, r3
 8000ff2:	e76c      	b.n	8000ece <__aeabi_fmul+0x32>
 8000ff4:	4643      	mov	r3, r8
 8000ff6:	35ff      	adds	r5, #255	; 0xff
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10b      	bne.n	8001014 <__aeabi_fmul+0x178>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	464a      	mov	r2, r9
 8001000:	431a      	orrs	r2, r3
 8001002:	4691      	mov	r9, r2
 8001004:	469c      	mov	ip, r3
 8001006:	e778      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001008:	4653      	mov	r3, sl
 800100a:	0031      	movs	r1, r6
 800100c:	2b02      	cmp	r3, #2
 800100e:	d000      	beq.n	8001012 <__aeabi_fmul+0x176>
 8001010:	e783      	b.n	8000f1a <__aeabi_fmul+0x7e>
 8001012:	e792      	b.n	8000f3a <__aeabi_fmul+0x9e>
 8001014:	2303      	movs	r3, #3
 8001016:	464a      	mov	r2, r9
 8001018:	431a      	orrs	r2, r3
 800101a:	4691      	mov	r9, r2
 800101c:	469c      	mov	ip, r3
 800101e:	e76c      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001020:	230c      	movs	r3, #12
 8001022:	4699      	mov	r9, r3
 8001024:	3b09      	subs	r3, #9
 8001026:	25ff      	movs	r5, #255	; 0xff
 8001028:	469a      	mov	sl, r3
 800102a:	e750      	b.n	8000ece <__aeabi_fmul+0x32>
 800102c:	0020      	movs	r0, r4
 800102e:	f001 ff0b 	bl	8002e48 <__clzsi2>
 8001032:	2576      	movs	r5, #118	; 0x76
 8001034:	1f43      	subs	r3, r0, #5
 8001036:	409c      	lsls	r4, r3
 8001038:	2300      	movs	r3, #0
 800103a:	426d      	negs	r5, r5
 800103c:	4699      	mov	r9, r3
 800103e:	469a      	mov	sl, r3
 8001040:	1a2d      	subs	r5, r5, r0
 8001042:	e744      	b.n	8000ece <__aeabi_fmul+0x32>
 8001044:	4640      	mov	r0, r8
 8001046:	f001 feff 	bl	8002e48 <__clzsi2>
 800104a:	4642      	mov	r2, r8
 800104c:	1f43      	subs	r3, r0, #5
 800104e:	409a      	lsls	r2, r3
 8001050:	2300      	movs	r3, #0
 8001052:	1a2d      	subs	r5, r5, r0
 8001054:	4690      	mov	r8, r2
 8001056:	469c      	mov	ip, r3
 8001058:	3d76      	subs	r5, #118	; 0x76
 800105a:	e74e      	b.n	8000efa <__aeabi_fmul+0x5e>
 800105c:	2480      	movs	r4, #128	; 0x80
 800105e:	2100      	movs	r1, #0
 8001060:	20ff      	movs	r0, #255	; 0xff
 8001062:	03e4      	lsls	r4, r4, #15
 8001064:	e760      	b.n	8000f28 <__aeabi_fmul+0x8c>
 8001066:	2301      	movs	r3, #1
 8001068:	1a9b      	subs	r3, r3, r2
 800106a:	2b1b      	cmp	r3, #27
 800106c:	dd00      	ble.n	8001070 <__aeabi_fmul+0x1d4>
 800106e:	e759      	b.n	8000f24 <__aeabi_fmul+0x88>
 8001070:	0022      	movs	r2, r4
 8001072:	309e      	adds	r0, #158	; 0x9e
 8001074:	40da      	lsrs	r2, r3
 8001076:	4084      	lsls	r4, r0
 8001078:	0013      	movs	r3, r2
 800107a:	1e62      	subs	r2, r4, #1
 800107c:	4194      	sbcs	r4, r2
 800107e:	431c      	orrs	r4, r3
 8001080:	0763      	lsls	r3, r4, #29
 8001082:	d004      	beq.n	800108e <__aeabi_fmul+0x1f2>
 8001084:	230f      	movs	r3, #15
 8001086:	4023      	ands	r3, r4
 8001088:	2b04      	cmp	r3, #4
 800108a:	d000      	beq.n	800108e <__aeabi_fmul+0x1f2>
 800108c:	3404      	adds	r4, #4
 800108e:	0163      	lsls	r3, r4, #5
 8001090:	d51a      	bpl.n	80010c8 <__aeabi_fmul+0x22c>
 8001092:	2001      	movs	r0, #1
 8001094:	2400      	movs	r4, #0
 8001096:	e747      	b.n	8000f28 <__aeabi_fmul+0x8c>
 8001098:	2080      	movs	r0, #128	; 0x80
 800109a:	03c0      	lsls	r0, r0, #15
 800109c:	4204      	tst	r4, r0
 800109e:	d009      	beq.n	80010b4 <__aeabi_fmul+0x218>
 80010a0:	4643      	mov	r3, r8
 80010a2:	4203      	tst	r3, r0
 80010a4:	d106      	bne.n	80010b4 <__aeabi_fmul+0x218>
 80010a6:	4644      	mov	r4, r8
 80010a8:	4304      	orrs	r4, r0
 80010aa:	0264      	lsls	r4, r4, #9
 80010ac:	0039      	movs	r1, r7
 80010ae:	20ff      	movs	r0, #255	; 0xff
 80010b0:	0a64      	lsrs	r4, r4, #9
 80010b2:	e739      	b.n	8000f28 <__aeabi_fmul+0x8c>
 80010b4:	2080      	movs	r0, #128	; 0x80
 80010b6:	03c0      	lsls	r0, r0, #15
 80010b8:	4304      	orrs	r4, r0
 80010ba:	0264      	lsls	r4, r4, #9
 80010bc:	0031      	movs	r1, r6
 80010be:	20ff      	movs	r0, #255	; 0xff
 80010c0:	0a64      	lsrs	r4, r4, #9
 80010c2:	e731      	b.n	8000f28 <__aeabi_fmul+0x8c>
 80010c4:	0028      	movs	r0, r5
 80010c6:	e765      	b.n	8000f94 <__aeabi_fmul+0xf8>
 80010c8:	01a4      	lsls	r4, r4, #6
 80010ca:	2000      	movs	r0, #0
 80010cc:	0a64      	lsrs	r4, r4, #9
 80010ce:	e72b      	b.n	8000f28 <__aeabi_fmul+0x8c>
 80010d0:	2080      	movs	r0, #128	; 0x80
 80010d2:	03c0      	lsls	r0, r0, #15
 80010d4:	4304      	orrs	r4, r0
 80010d6:	0264      	lsls	r4, r4, #9
 80010d8:	20ff      	movs	r0, #255	; 0xff
 80010da:	0a64      	lsrs	r4, r4, #9
 80010dc:	e724      	b.n	8000f28 <__aeabi_fmul+0x8c>
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	0800d41c 	.word	0x0800d41c
 80010e4:	f7ffffff 	.word	0xf7ffffff

080010e8 <__aeabi_ui2f>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	1e05      	subs	r5, r0, #0
 80010ec:	d00e      	beq.n	800110c <__aeabi_ui2f+0x24>
 80010ee:	f001 feab 	bl	8002e48 <__clzsi2>
 80010f2:	239e      	movs	r3, #158	; 0x9e
 80010f4:	0004      	movs	r4, r0
 80010f6:	1a1b      	subs	r3, r3, r0
 80010f8:	2b96      	cmp	r3, #150	; 0x96
 80010fa:	dc0c      	bgt.n	8001116 <__aeabi_ui2f+0x2e>
 80010fc:	2808      	cmp	r0, #8
 80010fe:	dd01      	ble.n	8001104 <__aeabi_ui2f+0x1c>
 8001100:	3c08      	subs	r4, #8
 8001102:	40a5      	lsls	r5, r4
 8001104:	026d      	lsls	r5, r5, #9
 8001106:	0a6d      	lsrs	r5, r5, #9
 8001108:	b2d8      	uxtb	r0, r3
 800110a:	e001      	b.n	8001110 <__aeabi_ui2f+0x28>
 800110c:	2000      	movs	r0, #0
 800110e:	2500      	movs	r5, #0
 8001110:	05c0      	lsls	r0, r0, #23
 8001112:	4328      	orrs	r0, r5
 8001114:	bd70      	pop	{r4, r5, r6, pc}
 8001116:	2b99      	cmp	r3, #153	; 0x99
 8001118:	dd09      	ble.n	800112e <__aeabi_ui2f+0x46>
 800111a:	0002      	movs	r2, r0
 800111c:	0029      	movs	r1, r5
 800111e:	321b      	adds	r2, #27
 8001120:	4091      	lsls	r1, r2
 8001122:	1e4a      	subs	r2, r1, #1
 8001124:	4191      	sbcs	r1, r2
 8001126:	2205      	movs	r2, #5
 8001128:	1a12      	subs	r2, r2, r0
 800112a:	40d5      	lsrs	r5, r2
 800112c:	430d      	orrs	r5, r1
 800112e:	2c05      	cmp	r4, #5
 8001130:	dc12      	bgt.n	8001158 <__aeabi_ui2f+0x70>
 8001132:	0029      	movs	r1, r5
 8001134:	4e0c      	ldr	r6, [pc, #48]	; (8001168 <__aeabi_ui2f+0x80>)
 8001136:	4031      	ands	r1, r6
 8001138:	076a      	lsls	r2, r5, #29
 800113a:	d009      	beq.n	8001150 <__aeabi_ui2f+0x68>
 800113c:	200f      	movs	r0, #15
 800113e:	4028      	ands	r0, r5
 8001140:	2804      	cmp	r0, #4
 8001142:	d005      	beq.n	8001150 <__aeabi_ui2f+0x68>
 8001144:	3104      	adds	r1, #4
 8001146:	014a      	lsls	r2, r1, #5
 8001148:	d502      	bpl.n	8001150 <__aeabi_ui2f+0x68>
 800114a:	239f      	movs	r3, #159	; 0x9f
 800114c:	4031      	ands	r1, r6
 800114e:	1b1b      	subs	r3, r3, r4
 8001150:	0189      	lsls	r1, r1, #6
 8001152:	0a4d      	lsrs	r5, r1, #9
 8001154:	b2d8      	uxtb	r0, r3
 8001156:	e7db      	b.n	8001110 <__aeabi_ui2f+0x28>
 8001158:	1f62      	subs	r2, r4, #5
 800115a:	4095      	lsls	r5, r2
 800115c:	0029      	movs	r1, r5
 800115e:	4e02      	ldr	r6, [pc, #8]	; (8001168 <__aeabi_ui2f+0x80>)
 8001160:	4031      	ands	r1, r6
 8001162:	076a      	lsls	r2, r5, #29
 8001164:	d0f4      	beq.n	8001150 <__aeabi_ui2f+0x68>
 8001166:	e7e9      	b.n	800113c <__aeabi_ui2f+0x54>
 8001168:	fbffffff 	.word	0xfbffffff

0800116c <__aeabi_dadd>:
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	464f      	mov	r7, r9
 8001170:	4646      	mov	r6, r8
 8001172:	46d6      	mov	lr, sl
 8001174:	000d      	movs	r5, r1
 8001176:	0004      	movs	r4, r0
 8001178:	b5c0      	push	{r6, r7, lr}
 800117a:	001f      	movs	r7, r3
 800117c:	0011      	movs	r1, r2
 800117e:	0328      	lsls	r0, r5, #12
 8001180:	0f62      	lsrs	r2, r4, #29
 8001182:	0a40      	lsrs	r0, r0, #9
 8001184:	4310      	orrs	r0, r2
 8001186:	007a      	lsls	r2, r7, #1
 8001188:	0d52      	lsrs	r2, r2, #21
 800118a:	00e3      	lsls	r3, r4, #3
 800118c:	033c      	lsls	r4, r7, #12
 800118e:	4691      	mov	r9, r2
 8001190:	0a64      	lsrs	r4, r4, #9
 8001192:	0ffa      	lsrs	r2, r7, #31
 8001194:	0f4f      	lsrs	r7, r1, #29
 8001196:	006e      	lsls	r6, r5, #1
 8001198:	4327      	orrs	r7, r4
 800119a:	4692      	mov	sl, r2
 800119c:	46b8      	mov	r8, r7
 800119e:	0d76      	lsrs	r6, r6, #21
 80011a0:	0fed      	lsrs	r5, r5, #31
 80011a2:	00c9      	lsls	r1, r1, #3
 80011a4:	4295      	cmp	r5, r2
 80011a6:	d100      	bne.n	80011aa <__aeabi_dadd+0x3e>
 80011a8:	e099      	b.n	80012de <__aeabi_dadd+0x172>
 80011aa:	464c      	mov	r4, r9
 80011ac:	1b34      	subs	r4, r6, r4
 80011ae:	46a4      	mov	ip, r4
 80011b0:	2c00      	cmp	r4, #0
 80011b2:	dc00      	bgt.n	80011b6 <__aeabi_dadd+0x4a>
 80011b4:	e07c      	b.n	80012b0 <__aeabi_dadd+0x144>
 80011b6:	464a      	mov	r2, r9
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0x52>
 80011bc:	e0b8      	b.n	8001330 <__aeabi_dadd+0x1c4>
 80011be:	4ac5      	ldr	r2, [pc, #788]	; (80014d4 <__aeabi_dadd+0x368>)
 80011c0:	4296      	cmp	r6, r2
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x5a>
 80011c4:	e11c      	b.n	8001400 <__aeabi_dadd+0x294>
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	003c      	movs	r4, r7
 80011ca:	0412      	lsls	r2, r2, #16
 80011cc:	4314      	orrs	r4, r2
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4662      	mov	r2, ip
 80011d2:	2a38      	cmp	r2, #56	; 0x38
 80011d4:	dd00      	ble.n	80011d8 <__aeabi_dadd+0x6c>
 80011d6:	e161      	b.n	800149c <__aeabi_dadd+0x330>
 80011d8:	2a1f      	cmp	r2, #31
 80011da:	dd00      	ble.n	80011de <__aeabi_dadd+0x72>
 80011dc:	e1cc      	b.n	8001578 <__aeabi_dadd+0x40c>
 80011de:	4664      	mov	r4, ip
 80011e0:	2220      	movs	r2, #32
 80011e2:	1b12      	subs	r2, r2, r4
 80011e4:	4644      	mov	r4, r8
 80011e6:	4094      	lsls	r4, r2
 80011e8:	000f      	movs	r7, r1
 80011ea:	46a1      	mov	r9, r4
 80011ec:	4664      	mov	r4, ip
 80011ee:	4091      	lsls	r1, r2
 80011f0:	40e7      	lsrs	r7, r4
 80011f2:	464c      	mov	r4, r9
 80011f4:	1e4a      	subs	r2, r1, #1
 80011f6:	4191      	sbcs	r1, r2
 80011f8:	433c      	orrs	r4, r7
 80011fa:	4642      	mov	r2, r8
 80011fc:	4321      	orrs	r1, r4
 80011fe:	4664      	mov	r4, ip
 8001200:	40e2      	lsrs	r2, r4
 8001202:	1a80      	subs	r0, r0, r2
 8001204:	1a5c      	subs	r4, r3, r1
 8001206:	42a3      	cmp	r3, r4
 8001208:	419b      	sbcs	r3, r3
 800120a:	425f      	negs	r7, r3
 800120c:	1bc7      	subs	r7, r0, r7
 800120e:	023b      	lsls	r3, r7, #8
 8001210:	d400      	bmi.n	8001214 <__aeabi_dadd+0xa8>
 8001212:	e0d0      	b.n	80013b6 <__aeabi_dadd+0x24a>
 8001214:	027f      	lsls	r7, r7, #9
 8001216:	0a7f      	lsrs	r7, r7, #9
 8001218:	2f00      	cmp	r7, #0
 800121a:	d100      	bne.n	800121e <__aeabi_dadd+0xb2>
 800121c:	e0ff      	b.n	800141e <__aeabi_dadd+0x2b2>
 800121e:	0038      	movs	r0, r7
 8001220:	f001 fe12 	bl	8002e48 <__clzsi2>
 8001224:	0001      	movs	r1, r0
 8001226:	3908      	subs	r1, #8
 8001228:	2320      	movs	r3, #32
 800122a:	0022      	movs	r2, r4
 800122c:	1a5b      	subs	r3, r3, r1
 800122e:	408f      	lsls	r7, r1
 8001230:	40da      	lsrs	r2, r3
 8001232:	408c      	lsls	r4, r1
 8001234:	4317      	orrs	r7, r2
 8001236:	42b1      	cmp	r1, r6
 8001238:	da00      	bge.n	800123c <__aeabi_dadd+0xd0>
 800123a:	e0ff      	b.n	800143c <__aeabi_dadd+0x2d0>
 800123c:	1b89      	subs	r1, r1, r6
 800123e:	1c4b      	adds	r3, r1, #1
 8001240:	2b1f      	cmp	r3, #31
 8001242:	dd00      	ble.n	8001246 <__aeabi_dadd+0xda>
 8001244:	e0a8      	b.n	8001398 <__aeabi_dadd+0x22c>
 8001246:	2220      	movs	r2, #32
 8001248:	0039      	movs	r1, r7
 800124a:	1ad2      	subs	r2, r2, r3
 800124c:	0020      	movs	r0, r4
 800124e:	4094      	lsls	r4, r2
 8001250:	4091      	lsls	r1, r2
 8001252:	40d8      	lsrs	r0, r3
 8001254:	1e62      	subs	r2, r4, #1
 8001256:	4194      	sbcs	r4, r2
 8001258:	40df      	lsrs	r7, r3
 800125a:	2600      	movs	r6, #0
 800125c:	4301      	orrs	r1, r0
 800125e:	430c      	orrs	r4, r1
 8001260:	0763      	lsls	r3, r4, #29
 8001262:	d009      	beq.n	8001278 <__aeabi_dadd+0x10c>
 8001264:	230f      	movs	r3, #15
 8001266:	4023      	ands	r3, r4
 8001268:	2b04      	cmp	r3, #4
 800126a:	d005      	beq.n	8001278 <__aeabi_dadd+0x10c>
 800126c:	1d23      	adds	r3, r4, #4
 800126e:	42a3      	cmp	r3, r4
 8001270:	41a4      	sbcs	r4, r4
 8001272:	4264      	negs	r4, r4
 8001274:	193f      	adds	r7, r7, r4
 8001276:	001c      	movs	r4, r3
 8001278:	023b      	lsls	r3, r7, #8
 800127a:	d400      	bmi.n	800127e <__aeabi_dadd+0x112>
 800127c:	e09e      	b.n	80013bc <__aeabi_dadd+0x250>
 800127e:	4b95      	ldr	r3, [pc, #596]	; (80014d4 <__aeabi_dadd+0x368>)
 8001280:	3601      	adds	r6, #1
 8001282:	429e      	cmp	r6, r3
 8001284:	d100      	bne.n	8001288 <__aeabi_dadd+0x11c>
 8001286:	e0b7      	b.n	80013f8 <__aeabi_dadd+0x28c>
 8001288:	4a93      	ldr	r2, [pc, #588]	; (80014d8 <__aeabi_dadd+0x36c>)
 800128a:	08e4      	lsrs	r4, r4, #3
 800128c:	4017      	ands	r7, r2
 800128e:	077b      	lsls	r3, r7, #29
 8001290:	0571      	lsls	r1, r6, #21
 8001292:	027f      	lsls	r7, r7, #9
 8001294:	4323      	orrs	r3, r4
 8001296:	0b3f      	lsrs	r7, r7, #12
 8001298:	0d4a      	lsrs	r2, r1, #21
 800129a:	0512      	lsls	r2, r2, #20
 800129c:	433a      	orrs	r2, r7
 800129e:	07ed      	lsls	r5, r5, #31
 80012a0:	432a      	orrs	r2, r5
 80012a2:	0018      	movs	r0, r3
 80012a4:	0011      	movs	r1, r2
 80012a6:	bce0      	pop	{r5, r6, r7}
 80012a8:	46ba      	mov	sl, r7
 80012aa:	46b1      	mov	r9, r6
 80012ac:	46a8      	mov	r8, r5
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d04b      	beq.n	800134c <__aeabi_dadd+0x1e0>
 80012b4:	464c      	mov	r4, r9
 80012b6:	1ba4      	subs	r4, r4, r6
 80012b8:	46a4      	mov	ip, r4
 80012ba:	2e00      	cmp	r6, #0
 80012bc:	d000      	beq.n	80012c0 <__aeabi_dadd+0x154>
 80012be:	e123      	b.n	8001508 <__aeabi_dadd+0x39c>
 80012c0:	0004      	movs	r4, r0
 80012c2:	431c      	orrs	r4, r3
 80012c4:	d100      	bne.n	80012c8 <__aeabi_dadd+0x15c>
 80012c6:	e1af      	b.n	8001628 <__aeabi_dadd+0x4bc>
 80012c8:	4662      	mov	r2, ip
 80012ca:	1e54      	subs	r4, r2, #1
 80012cc:	2a01      	cmp	r2, #1
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dadd+0x166>
 80012d0:	e215      	b.n	80016fe <__aeabi_dadd+0x592>
 80012d2:	4d80      	ldr	r5, [pc, #512]	; (80014d4 <__aeabi_dadd+0x368>)
 80012d4:	45ac      	cmp	ip, r5
 80012d6:	d100      	bne.n	80012da <__aeabi_dadd+0x16e>
 80012d8:	e1c8      	b.n	800166c <__aeabi_dadd+0x500>
 80012da:	46a4      	mov	ip, r4
 80012dc:	e11b      	b.n	8001516 <__aeabi_dadd+0x3aa>
 80012de:	464a      	mov	r2, r9
 80012e0:	1ab2      	subs	r2, r6, r2
 80012e2:	4694      	mov	ip, r2
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_dadd+0x17e>
 80012e8:	e0ac      	b.n	8001444 <__aeabi_dadd+0x2d8>
 80012ea:	464a      	mov	r2, r9
 80012ec:	2a00      	cmp	r2, #0
 80012ee:	d043      	beq.n	8001378 <__aeabi_dadd+0x20c>
 80012f0:	4a78      	ldr	r2, [pc, #480]	; (80014d4 <__aeabi_dadd+0x368>)
 80012f2:	4296      	cmp	r6, r2
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0x18c>
 80012f6:	e1af      	b.n	8001658 <__aeabi_dadd+0x4ec>
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	003c      	movs	r4, r7
 80012fc:	0412      	lsls	r2, r2, #16
 80012fe:	4314      	orrs	r4, r2
 8001300:	46a0      	mov	r8, r4
 8001302:	4662      	mov	r2, ip
 8001304:	2a38      	cmp	r2, #56	; 0x38
 8001306:	dc67      	bgt.n	80013d8 <__aeabi_dadd+0x26c>
 8001308:	2a1f      	cmp	r2, #31
 800130a:	dc00      	bgt.n	800130e <__aeabi_dadd+0x1a2>
 800130c:	e15f      	b.n	80015ce <__aeabi_dadd+0x462>
 800130e:	4647      	mov	r7, r8
 8001310:	3a20      	subs	r2, #32
 8001312:	40d7      	lsrs	r7, r2
 8001314:	4662      	mov	r2, ip
 8001316:	2a20      	cmp	r2, #32
 8001318:	d005      	beq.n	8001326 <__aeabi_dadd+0x1ba>
 800131a:	4664      	mov	r4, ip
 800131c:	2240      	movs	r2, #64	; 0x40
 800131e:	1b12      	subs	r2, r2, r4
 8001320:	4644      	mov	r4, r8
 8001322:	4094      	lsls	r4, r2
 8001324:	4321      	orrs	r1, r4
 8001326:	1e4a      	subs	r2, r1, #1
 8001328:	4191      	sbcs	r1, r2
 800132a:	000c      	movs	r4, r1
 800132c:	433c      	orrs	r4, r7
 800132e:	e057      	b.n	80013e0 <__aeabi_dadd+0x274>
 8001330:	003a      	movs	r2, r7
 8001332:	430a      	orrs	r2, r1
 8001334:	d100      	bne.n	8001338 <__aeabi_dadd+0x1cc>
 8001336:	e105      	b.n	8001544 <__aeabi_dadd+0x3d8>
 8001338:	0022      	movs	r2, r4
 800133a:	3a01      	subs	r2, #1
 800133c:	2c01      	cmp	r4, #1
 800133e:	d100      	bne.n	8001342 <__aeabi_dadd+0x1d6>
 8001340:	e182      	b.n	8001648 <__aeabi_dadd+0x4dc>
 8001342:	4c64      	ldr	r4, [pc, #400]	; (80014d4 <__aeabi_dadd+0x368>)
 8001344:	45a4      	cmp	ip, r4
 8001346:	d05b      	beq.n	8001400 <__aeabi_dadd+0x294>
 8001348:	4694      	mov	ip, r2
 800134a:	e741      	b.n	80011d0 <__aeabi_dadd+0x64>
 800134c:	4c63      	ldr	r4, [pc, #396]	; (80014dc <__aeabi_dadd+0x370>)
 800134e:	1c77      	adds	r7, r6, #1
 8001350:	4227      	tst	r7, r4
 8001352:	d000      	beq.n	8001356 <__aeabi_dadd+0x1ea>
 8001354:	e0c4      	b.n	80014e0 <__aeabi_dadd+0x374>
 8001356:	0004      	movs	r4, r0
 8001358:	431c      	orrs	r4, r3
 800135a:	2e00      	cmp	r6, #0
 800135c:	d000      	beq.n	8001360 <__aeabi_dadd+0x1f4>
 800135e:	e169      	b.n	8001634 <__aeabi_dadd+0x4c8>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d100      	bne.n	8001366 <__aeabi_dadd+0x1fa>
 8001364:	e1bf      	b.n	80016e6 <__aeabi_dadd+0x57a>
 8001366:	4644      	mov	r4, r8
 8001368:	430c      	orrs	r4, r1
 800136a:	d000      	beq.n	800136e <__aeabi_dadd+0x202>
 800136c:	e1d0      	b.n	8001710 <__aeabi_dadd+0x5a4>
 800136e:	0742      	lsls	r2, r0, #29
 8001370:	08db      	lsrs	r3, r3, #3
 8001372:	4313      	orrs	r3, r2
 8001374:	08c0      	lsrs	r0, r0, #3
 8001376:	e029      	b.n	80013cc <__aeabi_dadd+0x260>
 8001378:	003a      	movs	r2, r7
 800137a:	430a      	orrs	r2, r1
 800137c:	d100      	bne.n	8001380 <__aeabi_dadd+0x214>
 800137e:	e170      	b.n	8001662 <__aeabi_dadd+0x4f6>
 8001380:	4662      	mov	r2, ip
 8001382:	4664      	mov	r4, ip
 8001384:	3a01      	subs	r2, #1
 8001386:	2c01      	cmp	r4, #1
 8001388:	d100      	bne.n	800138c <__aeabi_dadd+0x220>
 800138a:	e0e0      	b.n	800154e <__aeabi_dadd+0x3e2>
 800138c:	4c51      	ldr	r4, [pc, #324]	; (80014d4 <__aeabi_dadd+0x368>)
 800138e:	45a4      	cmp	ip, r4
 8001390:	d100      	bne.n	8001394 <__aeabi_dadd+0x228>
 8001392:	e161      	b.n	8001658 <__aeabi_dadd+0x4ec>
 8001394:	4694      	mov	ip, r2
 8001396:	e7b4      	b.n	8001302 <__aeabi_dadd+0x196>
 8001398:	003a      	movs	r2, r7
 800139a:	391f      	subs	r1, #31
 800139c:	40ca      	lsrs	r2, r1
 800139e:	0011      	movs	r1, r2
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	d003      	beq.n	80013ac <__aeabi_dadd+0x240>
 80013a4:	2240      	movs	r2, #64	; 0x40
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	409f      	lsls	r7, r3
 80013aa:	433c      	orrs	r4, r7
 80013ac:	1e63      	subs	r3, r4, #1
 80013ae:	419c      	sbcs	r4, r3
 80013b0:	2700      	movs	r7, #0
 80013b2:	2600      	movs	r6, #0
 80013b4:	430c      	orrs	r4, r1
 80013b6:	0763      	lsls	r3, r4, #29
 80013b8:	d000      	beq.n	80013bc <__aeabi_dadd+0x250>
 80013ba:	e753      	b.n	8001264 <__aeabi_dadd+0xf8>
 80013bc:	46b4      	mov	ip, r6
 80013be:	08e4      	lsrs	r4, r4, #3
 80013c0:	077b      	lsls	r3, r7, #29
 80013c2:	4323      	orrs	r3, r4
 80013c4:	08f8      	lsrs	r0, r7, #3
 80013c6:	4a43      	ldr	r2, [pc, #268]	; (80014d4 <__aeabi_dadd+0x368>)
 80013c8:	4594      	cmp	ip, r2
 80013ca:	d01d      	beq.n	8001408 <__aeabi_dadd+0x29c>
 80013cc:	4662      	mov	r2, ip
 80013ce:	0307      	lsls	r7, r0, #12
 80013d0:	0552      	lsls	r2, r2, #21
 80013d2:	0b3f      	lsrs	r7, r7, #12
 80013d4:	0d52      	lsrs	r2, r2, #21
 80013d6:	e760      	b.n	800129a <__aeabi_dadd+0x12e>
 80013d8:	4644      	mov	r4, r8
 80013da:	430c      	orrs	r4, r1
 80013dc:	1e62      	subs	r2, r4, #1
 80013de:	4194      	sbcs	r4, r2
 80013e0:	18e4      	adds	r4, r4, r3
 80013e2:	429c      	cmp	r4, r3
 80013e4:	419b      	sbcs	r3, r3
 80013e6:	425f      	negs	r7, r3
 80013e8:	183f      	adds	r7, r7, r0
 80013ea:	023b      	lsls	r3, r7, #8
 80013ec:	d5e3      	bpl.n	80013b6 <__aeabi_dadd+0x24a>
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <__aeabi_dadd+0x368>)
 80013f0:	3601      	adds	r6, #1
 80013f2:	429e      	cmp	r6, r3
 80013f4:	d000      	beq.n	80013f8 <__aeabi_dadd+0x28c>
 80013f6:	e0b5      	b.n	8001564 <__aeabi_dadd+0x3f8>
 80013f8:	0032      	movs	r2, r6
 80013fa:	2700      	movs	r7, #0
 80013fc:	2300      	movs	r3, #0
 80013fe:	e74c      	b.n	800129a <__aeabi_dadd+0x12e>
 8001400:	0742      	lsls	r2, r0, #29
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	4313      	orrs	r3, r2
 8001406:	08c0      	lsrs	r0, r0, #3
 8001408:	001a      	movs	r2, r3
 800140a:	4302      	orrs	r2, r0
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x2a4>
 800140e:	e1e1      	b.n	80017d4 <__aeabi_dadd+0x668>
 8001410:	2780      	movs	r7, #128	; 0x80
 8001412:	033f      	lsls	r7, r7, #12
 8001414:	4307      	orrs	r7, r0
 8001416:	033f      	lsls	r7, r7, #12
 8001418:	4a2e      	ldr	r2, [pc, #184]	; (80014d4 <__aeabi_dadd+0x368>)
 800141a:	0b3f      	lsrs	r7, r7, #12
 800141c:	e73d      	b.n	800129a <__aeabi_dadd+0x12e>
 800141e:	0020      	movs	r0, r4
 8001420:	f001 fd12 	bl	8002e48 <__clzsi2>
 8001424:	0001      	movs	r1, r0
 8001426:	3118      	adds	r1, #24
 8001428:	291f      	cmp	r1, #31
 800142a:	dc00      	bgt.n	800142e <__aeabi_dadd+0x2c2>
 800142c:	e6fc      	b.n	8001228 <__aeabi_dadd+0xbc>
 800142e:	3808      	subs	r0, #8
 8001430:	4084      	lsls	r4, r0
 8001432:	0027      	movs	r7, r4
 8001434:	2400      	movs	r4, #0
 8001436:	42b1      	cmp	r1, r6
 8001438:	db00      	blt.n	800143c <__aeabi_dadd+0x2d0>
 800143a:	e6ff      	b.n	800123c <__aeabi_dadd+0xd0>
 800143c:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <__aeabi_dadd+0x36c>)
 800143e:	1a76      	subs	r6, r6, r1
 8001440:	4017      	ands	r7, r2
 8001442:	e70d      	b.n	8001260 <__aeabi_dadd+0xf4>
 8001444:	2a00      	cmp	r2, #0
 8001446:	d02f      	beq.n	80014a8 <__aeabi_dadd+0x33c>
 8001448:	464a      	mov	r2, r9
 800144a:	1b92      	subs	r2, r2, r6
 800144c:	4694      	mov	ip, r2
 800144e:	2e00      	cmp	r6, #0
 8001450:	d100      	bne.n	8001454 <__aeabi_dadd+0x2e8>
 8001452:	e0ad      	b.n	80015b0 <__aeabi_dadd+0x444>
 8001454:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <__aeabi_dadd+0x368>)
 8001456:	4591      	cmp	r9, r2
 8001458:	d100      	bne.n	800145c <__aeabi_dadd+0x2f0>
 800145a:	e10f      	b.n	800167c <__aeabi_dadd+0x510>
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	0412      	lsls	r2, r2, #16
 8001460:	4310      	orrs	r0, r2
 8001462:	4662      	mov	r2, ip
 8001464:	2a38      	cmp	r2, #56	; 0x38
 8001466:	dd00      	ble.n	800146a <__aeabi_dadd+0x2fe>
 8001468:	e10f      	b.n	800168a <__aeabi_dadd+0x51e>
 800146a:	2a1f      	cmp	r2, #31
 800146c:	dd00      	ble.n	8001470 <__aeabi_dadd+0x304>
 800146e:	e180      	b.n	8001772 <__aeabi_dadd+0x606>
 8001470:	4664      	mov	r4, ip
 8001472:	2220      	movs	r2, #32
 8001474:	001e      	movs	r6, r3
 8001476:	1b12      	subs	r2, r2, r4
 8001478:	4667      	mov	r7, ip
 800147a:	0004      	movs	r4, r0
 800147c:	4093      	lsls	r3, r2
 800147e:	4094      	lsls	r4, r2
 8001480:	40fe      	lsrs	r6, r7
 8001482:	1e5a      	subs	r2, r3, #1
 8001484:	4193      	sbcs	r3, r2
 8001486:	40f8      	lsrs	r0, r7
 8001488:	4334      	orrs	r4, r6
 800148a:	431c      	orrs	r4, r3
 800148c:	4480      	add	r8, r0
 800148e:	1864      	adds	r4, r4, r1
 8001490:	428c      	cmp	r4, r1
 8001492:	41bf      	sbcs	r7, r7
 8001494:	427f      	negs	r7, r7
 8001496:	464e      	mov	r6, r9
 8001498:	4447      	add	r7, r8
 800149a:	e7a6      	b.n	80013ea <__aeabi_dadd+0x27e>
 800149c:	4642      	mov	r2, r8
 800149e:	430a      	orrs	r2, r1
 80014a0:	0011      	movs	r1, r2
 80014a2:	1e4a      	subs	r2, r1, #1
 80014a4:	4191      	sbcs	r1, r2
 80014a6:	e6ad      	b.n	8001204 <__aeabi_dadd+0x98>
 80014a8:	4c0c      	ldr	r4, [pc, #48]	; (80014dc <__aeabi_dadd+0x370>)
 80014aa:	1c72      	adds	r2, r6, #1
 80014ac:	4222      	tst	r2, r4
 80014ae:	d000      	beq.n	80014b2 <__aeabi_dadd+0x346>
 80014b0:	e0a1      	b.n	80015f6 <__aeabi_dadd+0x48a>
 80014b2:	0002      	movs	r2, r0
 80014b4:	431a      	orrs	r2, r3
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d000      	beq.n	80014bc <__aeabi_dadd+0x350>
 80014ba:	e0fa      	b.n	80016b2 <__aeabi_dadd+0x546>
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_dadd+0x356>
 80014c0:	e145      	b.n	800174e <__aeabi_dadd+0x5e2>
 80014c2:	003a      	movs	r2, r7
 80014c4:	430a      	orrs	r2, r1
 80014c6:	d000      	beq.n	80014ca <__aeabi_dadd+0x35e>
 80014c8:	e146      	b.n	8001758 <__aeabi_dadd+0x5ec>
 80014ca:	0742      	lsls	r2, r0, #29
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	08c0      	lsrs	r0, r0, #3
 80014d2:	e77b      	b.n	80013cc <__aeabi_dadd+0x260>
 80014d4:	000007ff 	.word	0x000007ff
 80014d8:	ff7fffff 	.word	0xff7fffff
 80014dc:	000007fe 	.word	0x000007fe
 80014e0:	4647      	mov	r7, r8
 80014e2:	1a5c      	subs	r4, r3, r1
 80014e4:	1bc2      	subs	r2, r0, r7
 80014e6:	42a3      	cmp	r3, r4
 80014e8:	41bf      	sbcs	r7, r7
 80014ea:	427f      	negs	r7, r7
 80014ec:	46b9      	mov	r9, r7
 80014ee:	0017      	movs	r7, r2
 80014f0:	464a      	mov	r2, r9
 80014f2:	1abf      	subs	r7, r7, r2
 80014f4:	023a      	lsls	r2, r7, #8
 80014f6:	d500      	bpl.n	80014fa <__aeabi_dadd+0x38e>
 80014f8:	e08d      	b.n	8001616 <__aeabi_dadd+0x4aa>
 80014fa:	0023      	movs	r3, r4
 80014fc:	433b      	orrs	r3, r7
 80014fe:	d000      	beq.n	8001502 <__aeabi_dadd+0x396>
 8001500:	e68a      	b.n	8001218 <__aeabi_dadd+0xac>
 8001502:	2000      	movs	r0, #0
 8001504:	2500      	movs	r5, #0
 8001506:	e761      	b.n	80013cc <__aeabi_dadd+0x260>
 8001508:	4cb4      	ldr	r4, [pc, #720]	; (80017dc <__aeabi_dadd+0x670>)
 800150a:	45a1      	cmp	r9, r4
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x3a4>
 800150e:	e0ad      	b.n	800166c <__aeabi_dadd+0x500>
 8001510:	2480      	movs	r4, #128	; 0x80
 8001512:	0424      	lsls	r4, r4, #16
 8001514:	4320      	orrs	r0, r4
 8001516:	4664      	mov	r4, ip
 8001518:	2c38      	cmp	r4, #56	; 0x38
 800151a:	dc3d      	bgt.n	8001598 <__aeabi_dadd+0x42c>
 800151c:	4662      	mov	r2, ip
 800151e:	2c1f      	cmp	r4, #31
 8001520:	dd00      	ble.n	8001524 <__aeabi_dadd+0x3b8>
 8001522:	e0b7      	b.n	8001694 <__aeabi_dadd+0x528>
 8001524:	2520      	movs	r5, #32
 8001526:	001e      	movs	r6, r3
 8001528:	1b2d      	subs	r5, r5, r4
 800152a:	0004      	movs	r4, r0
 800152c:	40ab      	lsls	r3, r5
 800152e:	40ac      	lsls	r4, r5
 8001530:	40d6      	lsrs	r6, r2
 8001532:	40d0      	lsrs	r0, r2
 8001534:	4642      	mov	r2, r8
 8001536:	1e5d      	subs	r5, r3, #1
 8001538:	41ab      	sbcs	r3, r5
 800153a:	4334      	orrs	r4, r6
 800153c:	1a12      	subs	r2, r2, r0
 800153e:	4690      	mov	r8, r2
 8001540:	4323      	orrs	r3, r4
 8001542:	e02c      	b.n	800159e <__aeabi_dadd+0x432>
 8001544:	0742      	lsls	r2, r0, #29
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	4313      	orrs	r3, r2
 800154a:	08c0      	lsrs	r0, r0, #3
 800154c:	e73b      	b.n	80013c6 <__aeabi_dadd+0x25a>
 800154e:	185c      	adds	r4, r3, r1
 8001550:	429c      	cmp	r4, r3
 8001552:	419b      	sbcs	r3, r3
 8001554:	4440      	add	r0, r8
 8001556:	425b      	negs	r3, r3
 8001558:	18c7      	adds	r7, r0, r3
 800155a:	2601      	movs	r6, #1
 800155c:	023b      	lsls	r3, r7, #8
 800155e:	d400      	bmi.n	8001562 <__aeabi_dadd+0x3f6>
 8001560:	e729      	b.n	80013b6 <__aeabi_dadd+0x24a>
 8001562:	2602      	movs	r6, #2
 8001564:	4a9e      	ldr	r2, [pc, #632]	; (80017e0 <__aeabi_dadd+0x674>)
 8001566:	0863      	lsrs	r3, r4, #1
 8001568:	4017      	ands	r7, r2
 800156a:	2201      	movs	r2, #1
 800156c:	4014      	ands	r4, r2
 800156e:	431c      	orrs	r4, r3
 8001570:	07fb      	lsls	r3, r7, #31
 8001572:	431c      	orrs	r4, r3
 8001574:	087f      	lsrs	r7, r7, #1
 8001576:	e673      	b.n	8001260 <__aeabi_dadd+0xf4>
 8001578:	4644      	mov	r4, r8
 800157a:	3a20      	subs	r2, #32
 800157c:	40d4      	lsrs	r4, r2
 800157e:	4662      	mov	r2, ip
 8001580:	2a20      	cmp	r2, #32
 8001582:	d005      	beq.n	8001590 <__aeabi_dadd+0x424>
 8001584:	4667      	mov	r7, ip
 8001586:	2240      	movs	r2, #64	; 0x40
 8001588:	1bd2      	subs	r2, r2, r7
 800158a:	4647      	mov	r7, r8
 800158c:	4097      	lsls	r7, r2
 800158e:	4339      	orrs	r1, r7
 8001590:	1e4a      	subs	r2, r1, #1
 8001592:	4191      	sbcs	r1, r2
 8001594:	4321      	orrs	r1, r4
 8001596:	e635      	b.n	8001204 <__aeabi_dadd+0x98>
 8001598:	4303      	orrs	r3, r0
 800159a:	1e58      	subs	r0, r3, #1
 800159c:	4183      	sbcs	r3, r0
 800159e:	1acc      	subs	r4, r1, r3
 80015a0:	42a1      	cmp	r1, r4
 80015a2:	41bf      	sbcs	r7, r7
 80015a4:	4643      	mov	r3, r8
 80015a6:	427f      	negs	r7, r7
 80015a8:	4655      	mov	r5, sl
 80015aa:	464e      	mov	r6, r9
 80015ac:	1bdf      	subs	r7, r3, r7
 80015ae:	e62e      	b.n	800120e <__aeabi_dadd+0xa2>
 80015b0:	0002      	movs	r2, r0
 80015b2:	431a      	orrs	r2, r3
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dadd+0x44c>
 80015b6:	e0bd      	b.n	8001734 <__aeabi_dadd+0x5c8>
 80015b8:	4662      	mov	r2, ip
 80015ba:	4664      	mov	r4, ip
 80015bc:	3a01      	subs	r2, #1
 80015be:	2c01      	cmp	r4, #1
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x458>
 80015c2:	e0e5      	b.n	8001790 <__aeabi_dadd+0x624>
 80015c4:	4c85      	ldr	r4, [pc, #532]	; (80017dc <__aeabi_dadd+0x670>)
 80015c6:	45a4      	cmp	ip, r4
 80015c8:	d058      	beq.n	800167c <__aeabi_dadd+0x510>
 80015ca:	4694      	mov	ip, r2
 80015cc:	e749      	b.n	8001462 <__aeabi_dadd+0x2f6>
 80015ce:	4664      	mov	r4, ip
 80015d0:	2220      	movs	r2, #32
 80015d2:	1b12      	subs	r2, r2, r4
 80015d4:	4644      	mov	r4, r8
 80015d6:	4094      	lsls	r4, r2
 80015d8:	000f      	movs	r7, r1
 80015da:	46a1      	mov	r9, r4
 80015dc:	4664      	mov	r4, ip
 80015de:	4091      	lsls	r1, r2
 80015e0:	40e7      	lsrs	r7, r4
 80015e2:	464c      	mov	r4, r9
 80015e4:	1e4a      	subs	r2, r1, #1
 80015e6:	4191      	sbcs	r1, r2
 80015e8:	433c      	orrs	r4, r7
 80015ea:	4642      	mov	r2, r8
 80015ec:	430c      	orrs	r4, r1
 80015ee:	4661      	mov	r1, ip
 80015f0:	40ca      	lsrs	r2, r1
 80015f2:	1880      	adds	r0, r0, r2
 80015f4:	e6f4      	b.n	80013e0 <__aeabi_dadd+0x274>
 80015f6:	4c79      	ldr	r4, [pc, #484]	; (80017dc <__aeabi_dadd+0x670>)
 80015f8:	42a2      	cmp	r2, r4
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0x492>
 80015fc:	e6fd      	b.n	80013fa <__aeabi_dadd+0x28e>
 80015fe:	1859      	adds	r1, r3, r1
 8001600:	4299      	cmp	r1, r3
 8001602:	419b      	sbcs	r3, r3
 8001604:	4440      	add	r0, r8
 8001606:	425f      	negs	r7, r3
 8001608:	19c7      	adds	r7, r0, r7
 800160a:	07fc      	lsls	r4, r7, #31
 800160c:	0849      	lsrs	r1, r1, #1
 800160e:	0016      	movs	r6, r2
 8001610:	430c      	orrs	r4, r1
 8001612:	087f      	lsrs	r7, r7, #1
 8001614:	e6cf      	b.n	80013b6 <__aeabi_dadd+0x24a>
 8001616:	1acc      	subs	r4, r1, r3
 8001618:	42a1      	cmp	r1, r4
 800161a:	41bf      	sbcs	r7, r7
 800161c:	4643      	mov	r3, r8
 800161e:	427f      	negs	r7, r7
 8001620:	1a18      	subs	r0, r3, r0
 8001622:	4655      	mov	r5, sl
 8001624:	1bc7      	subs	r7, r0, r7
 8001626:	e5f7      	b.n	8001218 <__aeabi_dadd+0xac>
 8001628:	08c9      	lsrs	r1, r1, #3
 800162a:	077b      	lsls	r3, r7, #29
 800162c:	4655      	mov	r5, sl
 800162e:	430b      	orrs	r3, r1
 8001630:	08f8      	lsrs	r0, r7, #3
 8001632:	e6c8      	b.n	80013c6 <__aeabi_dadd+0x25a>
 8001634:	2c00      	cmp	r4, #0
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x4ce>
 8001638:	e081      	b.n	800173e <__aeabi_dadd+0x5d2>
 800163a:	4643      	mov	r3, r8
 800163c:	430b      	orrs	r3, r1
 800163e:	d115      	bne.n	800166c <__aeabi_dadd+0x500>
 8001640:	2080      	movs	r0, #128	; 0x80
 8001642:	2500      	movs	r5, #0
 8001644:	0300      	lsls	r0, r0, #12
 8001646:	e6e3      	b.n	8001410 <__aeabi_dadd+0x2a4>
 8001648:	1a5c      	subs	r4, r3, r1
 800164a:	42a3      	cmp	r3, r4
 800164c:	419b      	sbcs	r3, r3
 800164e:	1bc7      	subs	r7, r0, r7
 8001650:	425b      	negs	r3, r3
 8001652:	2601      	movs	r6, #1
 8001654:	1aff      	subs	r7, r7, r3
 8001656:	e5da      	b.n	800120e <__aeabi_dadd+0xa2>
 8001658:	0742      	lsls	r2, r0, #29
 800165a:	08db      	lsrs	r3, r3, #3
 800165c:	4313      	orrs	r3, r2
 800165e:	08c0      	lsrs	r0, r0, #3
 8001660:	e6d2      	b.n	8001408 <__aeabi_dadd+0x29c>
 8001662:	0742      	lsls	r2, r0, #29
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	4313      	orrs	r3, r2
 8001668:	08c0      	lsrs	r0, r0, #3
 800166a:	e6ac      	b.n	80013c6 <__aeabi_dadd+0x25a>
 800166c:	4643      	mov	r3, r8
 800166e:	4642      	mov	r2, r8
 8001670:	08c9      	lsrs	r1, r1, #3
 8001672:	075b      	lsls	r3, r3, #29
 8001674:	4655      	mov	r5, sl
 8001676:	430b      	orrs	r3, r1
 8001678:	08d0      	lsrs	r0, r2, #3
 800167a:	e6c5      	b.n	8001408 <__aeabi_dadd+0x29c>
 800167c:	4643      	mov	r3, r8
 800167e:	4642      	mov	r2, r8
 8001680:	075b      	lsls	r3, r3, #29
 8001682:	08c9      	lsrs	r1, r1, #3
 8001684:	430b      	orrs	r3, r1
 8001686:	08d0      	lsrs	r0, r2, #3
 8001688:	e6be      	b.n	8001408 <__aeabi_dadd+0x29c>
 800168a:	4303      	orrs	r3, r0
 800168c:	001c      	movs	r4, r3
 800168e:	1e63      	subs	r3, r4, #1
 8001690:	419c      	sbcs	r4, r3
 8001692:	e6fc      	b.n	800148e <__aeabi_dadd+0x322>
 8001694:	0002      	movs	r2, r0
 8001696:	3c20      	subs	r4, #32
 8001698:	40e2      	lsrs	r2, r4
 800169a:	0014      	movs	r4, r2
 800169c:	4662      	mov	r2, ip
 800169e:	2a20      	cmp	r2, #32
 80016a0:	d003      	beq.n	80016aa <__aeabi_dadd+0x53e>
 80016a2:	2540      	movs	r5, #64	; 0x40
 80016a4:	1aad      	subs	r5, r5, r2
 80016a6:	40a8      	lsls	r0, r5
 80016a8:	4303      	orrs	r3, r0
 80016aa:	1e58      	subs	r0, r3, #1
 80016ac:	4183      	sbcs	r3, r0
 80016ae:	4323      	orrs	r3, r4
 80016b0:	e775      	b.n	800159e <__aeabi_dadd+0x432>
 80016b2:	2a00      	cmp	r2, #0
 80016b4:	d0e2      	beq.n	800167c <__aeabi_dadd+0x510>
 80016b6:	003a      	movs	r2, r7
 80016b8:	430a      	orrs	r2, r1
 80016ba:	d0cd      	beq.n	8001658 <__aeabi_dadd+0x4ec>
 80016bc:	0742      	lsls	r2, r0, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	08c0      	lsrs	r0, r0, #3
 80016c6:	0312      	lsls	r2, r2, #12
 80016c8:	4210      	tst	r0, r2
 80016ca:	d006      	beq.n	80016da <__aeabi_dadd+0x56e>
 80016cc:	08fc      	lsrs	r4, r7, #3
 80016ce:	4214      	tst	r4, r2
 80016d0:	d103      	bne.n	80016da <__aeabi_dadd+0x56e>
 80016d2:	0020      	movs	r0, r4
 80016d4:	08cb      	lsrs	r3, r1, #3
 80016d6:	077a      	lsls	r2, r7, #29
 80016d8:	4313      	orrs	r3, r2
 80016da:	0f5a      	lsrs	r2, r3, #29
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	0752      	lsls	r2, r2, #29
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	e690      	b.n	8001408 <__aeabi_dadd+0x29c>
 80016e6:	4643      	mov	r3, r8
 80016e8:	430b      	orrs	r3, r1
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x582>
 80016ec:	e709      	b.n	8001502 <__aeabi_dadd+0x396>
 80016ee:	4643      	mov	r3, r8
 80016f0:	4642      	mov	r2, r8
 80016f2:	08c9      	lsrs	r1, r1, #3
 80016f4:	075b      	lsls	r3, r3, #29
 80016f6:	4655      	mov	r5, sl
 80016f8:	430b      	orrs	r3, r1
 80016fa:	08d0      	lsrs	r0, r2, #3
 80016fc:	e666      	b.n	80013cc <__aeabi_dadd+0x260>
 80016fe:	1acc      	subs	r4, r1, r3
 8001700:	42a1      	cmp	r1, r4
 8001702:	4189      	sbcs	r1, r1
 8001704:	1a3f      	subs	r7, r7, r0
 8001706:	4249      	negs	r1, r1
 8001708:	4655      	mov	r5, sl
 800170a:	2601      	movs	r6, #1
 800170c:	1a7f      	subs	r7, r7, r1
 800170e:	e57e      	b.n	800120e <__aeabi_dadd+0xa2>
 8001710:	4642      	mov	r2, r8
 8001712:	1a5c      	subs	r4, r3, r1
 8001714:	1a87      	subs	r7, r0, r2
 8001716:	42a3      	cmp	r3, r4
 8001718:	4192      	sbcs	r2, r2
 800171a:	4252      	negs	r2, r2
 800171c:	1abf      	subs	r7, r7, r2
 800171e:	023a      	lsls	r2, r7, #8
 8001720:	d53d      	bpl.n	800179e <__aeabi_dadd+0x632>
 8001722:	1acc      	subs	r4, r1, r3
 8001724:	42a1      	cmp	r1, r4
 8001726:	4189      	sbcs	r1, r1
 8001728:	4643      	mov	r3, r8
 800172a:	4249      	negs	r1, r1
 800172c:	1a1f      	subs	r7, r3, r0
 800172e:	4655      	mov	r5, sl
 8001730:	1a7f      	subs	r7, r7, r1
 8001732:	e595      	b.n	8001260 <__aeabi_dadd+0xf4>
 8001734:	077b      	lsls	r3, r7, #29
 8001736:	08c9      	lsrs	r1, r1, #3
 8001738:	430b      	orrs	r3, r1
 800173a:	08f8      	lsrs	r0, r7, #3
 800173c:	e643      	b.n	80013c6 <__aeabi_dadd+0x25a>
 800173e:	4644      	mov	r4, r8
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	430c      	orrs	r4, r1
 8001744:	d130      	bne.n	80017a8 <__aeabi_dadd+0x63c>
 8001746:	0742      	lsls	r2, r0, #29
 8001748:	4313      	orrs	r3, r2
 800174a:	08c0      	lsrs	r0, r0, #3
 800174c:	e65c      	b.n	8001408 <__aeabi_dadd+0x29c>
 800174e:	077b      	lsls	r3, r7, #29
 8001750:	08c9      	lsrs	r1, r1, #3
 8001752:	430b      	orrs	r3, r1
 8001754:	08f8      	lsrs	r0, r7, #3
 8001756:	e639      	b.n	80013cc <__aeabi_dadd+0x260>
 8001758:	185c      	adds	r4, r3, r1
 800175a:	429c      	cmp	r4, r3
 800175c:	419b      	sbcs	r3, r3
 800175e:	4440      	add	r0, r8
 8001760:	425b      	negs	r3, r3
 8001762:	18c7      	adds	r7, r0, r3
 8001764:	023b      	lsls	r3, r7, #8
 8001766:	d400      	bmi.n	800176a <__aeabi_dadd+0x5fe>
 8001768:	e625      	b.n	80013b6 <__aeabi_dadd+0x24a>
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <__aeabi_dadd+0x674>)
 800176c:	2601      	movs	r6, #1
 800176e:	401f      	ands	r7, r3
 8001770:	e621      	b.n	80013b6 <__aeabi_dadd+0x24a>
 8001772:	0004      	movs	r4, r0
 8001774:	3a20      	subs	r2, #32
 8001776:	40d4      	lsrs	r4, r2
 8001778:	4662      	mov	r2, ip
 800177a:	2a20      	cmp	r2, #32
 800177c:	d004      	beq.n	8001788 <__aeabi_dadd+0x61c>
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	4666      	mov	r6, ip
 8001782:	1b92      	subs	r2, r2, r6
 8001784:	4090      	lsls	r0, r2
 8001786:	4303      	orrs	r3, r0
 8001788:	1e5a      	subs	r2, r3, #1
 800178a:	4193      	sbcs	r3, r2
 800178c:	431c      	orrs	r4, r3
 800178e:	e67e      	b.n	800148e <__aeabi_dadd+0x322>
 8001790:	185c      	adds	r4, r3, r1
 8001792:	428c      	cmp	r4, r1
 8001794:	4189      	sbcs	r1, r1
 8001796:	4440      	add	r0, r8
 8001798:	4249      	negs	r1, r1
 800179a:	1847      	adds	r7, r0, r1
 800179c:	e6dd      	b.n	800155a <__aeabi_dadd+0x3ee>
 800179e:	0023      	movs	r3, r4
 80017a0:	433b      	orrs	r3, r7
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dadd+0x63a>
 80017a4:	e6ad      	b.n	8001502 <__aeabi_dadd+0x396>
 80017a6:	e606      	b.n	80013b6 <__aeabi_dadd+0x24a>
 80017a8:	0744      	lsls	r4, r0, #29
 80017aa:	4323      	orrs	r3, r4
 80017ac:	2480      	movs	r4, #128	; 0x80
 80017ae:	08c0      	lsrs	r0, r0, #3
 80017b0:	0324      	lsls	r4, r4, #12
 80017b2:	4220      	tst	r0, r4
 80017b4:	d008      	beq.n	80017c8 <__aeabi_dadd+0x65c>
 80017b6:	4642      	mov	r2, r8
 80017b8:	08d6      	lsrs	r6, r2, #3
 80017ba:	4226      	tst	r6, r4
 80017bc:	d104      	bne.n	80017c8 <__aeabi_dadd+0x65c>
 80017be:	4655      	mov	r5, sl
 80017c0:	0030      	movs	r0, r6
 80017c2:	08cb      	lsrs	r3, r1, #3
 80017c4:	0751      	lsls	r1, r2, #29
 80017c6:	430b      	orrs	r3, r1
 80017c8:	0f5a      	lsrs	r2, r3, #29
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	0752      	lsls	r2, r2, #29
 80017d0:	4313      	orrs	r3, r2
 80017d2:	e619      	b.n	8001408 <__aeabi_dadd+0x29c>
 80017d4:	2300      	movs	r3, #0
 80017d6:	4a01      	ldr	r2, [pc, #4]	; (80017dc <__aeabi_dadd+0x670>)
 80017d8:	001f      	movs	r7, r3
 80017da:	e55e      	b.n	800129a <__aeabi_dadd+0x12e>
 80017dc:	000007ff 	.word	0x000007ff
 80017e0:	ff7fffff 	.word	0xff7fffff

080017e4 <__aeabi_ddiv>:
 80017e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e6:	4657      	mov	r7, sl
 80017e8:	464e      	mov	r6, r9
 80017ea:	4645      	mov	r5, r8
 80017ec:	46de      	mov	lr, fp
 80017ee:	b5e0      	push	{r5, r6, r7, lr}
 80017f0:	4681      	mov	r9, r0
 80017f2:	0005      	movs	r5, r0
 80017f4:	030c      	lsls	r4, r1, #12
 80017f6:	0048      	lsls	r0, r1, #1
 80017f8:	4692      	mov	sl, r2
 80017fa:	001f      	movs	r7, r3
 80017fc:	b085      	sub	sp, #20
 80017fe:	0b24      	lsrs	r4, r4, #12
 8001800:	0d40      	lsrs	r0, r0, #21
 8001802:	0fce      	lsrs	r6, r1, #31
 8001804:	2800      	cmp	r0, #0
 8001806:	d100      	bne.n	800180a <__aeabi_ddiv+0x26>
 8001808:	e156      	b.n	8001ab8 <__aeabi_ddiv+0x2d4>
 800180a:	4bd4      	ldr	r3, [pc, #848]	; (8001b5c <__aeabi_ddiv+0x378>)
 800180c:	4298      	cmp	r0, r3
 800180e:	d100      	bne.n	8001812 <__aeabi_ddiv+0x2e>
 8001810:	e172      	b.n	8001af8 <__aeabi_ddiv+0x314>
 8001812:	0f6b      	lsrs	r3, r5, #29
 8001814:	00e4      	lsls	r4, r4, #3
 8001816:	431c      	orrs	r4, r3
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	4323      	orrs	r3, r4
 800181e:	4698      	mov	r8, r3
 8001820:	4bcf      	ldr	r3, [pc, #828]	; (8001b60 <__aeabi_ddiv+0x37c>)
 8001822:	00ed      	lsls	r5, r5, #3
 8001824:	469b      	mov	fp, r3
 8001826:	2300      	movs	r3, #0
 8001828:	4699      	mov	r9, r3
 800182a:	4483      	add	fp, r0
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	033c      	lsls	r4, r7, #12
 8001830:	007b      	lsls	r3, r7, #1
 8001832:	4650      	mov	r0, sl
 8001834:	0b24      	lsrs	r4, r4, #12
 8001836:	0d5b      	lsrs	r3, r3, #21
 8001838:	0fff      	lsrs	r7, r7, #31
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <__aeabi_ddiv+0x5c>
 800183e:	e11f      	b.n	8001a80 <__aeabi_ddiv+0x29c>
 8001840:	4ac6      	ldr	r2, [pc, #792]	; (8001b5c <__aeabi_ddiv+0x378>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d100      	bne.n	8001848 <__aeabi_ddiv+0x64>
 8001846:	e162      	b.n	8001b0e <__aeabi_ddiv+0x32a>
 8001848:	49c5      	ldr	r1, [pc, #788]	; (8001b60 <__aeabi_ddiv+0x37c>)
 800184a:	0f42      	lsrs	r2, r0, #29
 800184c:	468c      	mov	ip, r1
 800184e:	00e4      	lsls	r4, r4, #3
 8001850:	4659      	mov	r1, fp
 8001852:	4314      	orrs	r4, r2
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	4463      	add	r3, ip
 8001858:	0412      	lsls	r2, r2, #16
 800185a:	1acb      	subs	r3, r1, r3
 800185c:	4314      	orrs	r4, r2
 800185e:	469b      	mov	fp, r3
 8001860:	00c2      	lsls	r2, r0, #3
 8001862:	2000      	movs	r0, #0
 8001864:	0033      	movs	r3, r6
 8001866:	407b      	eors	r3, r7
 8001868:	469a      	mov	sl, r3
 800186a:	464b      	mov	r3, r9
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d827      	bhi.n	80018c0 <__aeabi_ddiv+0xdc>
 8001870:	49bc      	ldr	r1, [pc, #752]	; (8001b64 <__aeabi_ddiv+0x380>)
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	58cb      	ldr	r3, [r1, r3]
 8001876:	469f      	mov	pc, r3
 8001878:	46b2      	mov	sl, r6
 800187a:	9b00      	ldr	r3, [sp, #0]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d016      	beq.n	80018ae <__aeabi_ddiv+0xca>
 8001880:	2b03      	cmp	r3, #3
 8001882:	d100      	bne.n	8001886 <__aeabi_ddiv+0xa2>
 8001884:	e28e      	b.n	8001da4 <__aeabi_ddiv+0x5c0>
 8001886:	2b01      	cmp	r3, #1
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0xa8>
 800188a:	e0d9      	b.n	8001a40 <__aeabi_ddiv+0x25c>
 800188c:	2300      	movs	r3, #0
 800188e:	2400      	movs	r4, #0
 8001890:	2500      	movs	r5, #0
 8001892:	4652      	mov	r2, sl
 8001894:	051b      	lsls	r3, r3, #20
 8001896:	4323      	orrs	r3, r4
 8001898:	07d2      	lsls	r2, r2, #31
 800189a:	4313      	orrs	r3, r2
 800189c:	0028      	movs	r0, r5
 800189e:	0019      	movs	r1, r3
 80018a0:	b005      	add	sp, #20
 80018a2:	bcf0      	pop	{r4, r5, r6, r7}
 80018a4:	46bb      	mov	fp, r7
 80018a6:	46b2      	mov	sl, r6
 80018a8:	46a9      	mov	r9, r5
 80018aa:	46a0      	mov	r8, r4
 80018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ae:	2400      	movs	r4, #0
 80018b0:	2500      	movs	r5, #0
 80018b2:	4baa      	ldr	r3, [pc, #680]	; (8001b5c <__aeabi_ddiv+0x378>)
 80018b4:	e7ed      	b.n	8001892 <__aeabi_ddiv+0xae>
 80018b6:	46ba      	mov	sl, r7
 80018b8:	46a0      	mov	r8, r4
 80018ba:	0015      	movs	r5, r2
 80018bc:	9000      	str	r0, [sp, #0]
 80018be:	e7dc      	b.n	800187a <__aeabi_ddiv+0x96>
 80018c0:	4544      	cmp	r4, r8
 80018c2:	d200      	bcs.n	80018c6 <__aeabi_ddiv+0xe2>
 80018c4:	e1c7      	b.n	8001c56 <__aeabi_ddiv+0x472>
 80018c6:	d100      	bne.n	80018ca <__aeabi_ddiv+0xe6>
 80018c8:	e1c2      	b.n	8001c50 <__aeabi_ddiv+0x46c>
 80018ca:	2301      	movs	r3, #1
 80018cc:	425b      	negs	r3, r3
 80018ce:	469c      	mov	ip, r3
 80018d0:	002e      	movs	r6, r5
 80018d2:	4640      	mov	r0, r8
 80018d4:	2500      	movs	r5, #0
 80018d6:	44e3      	add	fp, ip
 80018d8:	0223      	lsls	r3, r4, #8
 80018da:	0e14      	lsrs	r4, r2, #24
 80018dc:	431c      	orrs	r4, r3
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	4699      	mov	r9, r3
 80018e2:	0423      	lsls	r3, r4, #16
 80018e4:	0c1f      	lsrs	r7, r3, #16
 80018e6:	0212      	lsls	r2, r2, #8
 80018e8:	4649      	mov	r1, r9
 80018ea:	9200      	str	r2, [sp, #0]
 80018ec:	9701      	str	r7, [sp, #4]
 80018ee:	f7fe fcab 	bl	8000248 <__aeabi_uidivmod>
 80018f2:	0002      	movs	r2, r0
 80018f4:	437a      	muls	r2, r7
 80018f6:	040b      	lsls	r3, r1, #16
 80018f8:	0c31      	lsrs	r1, r6, #16
 80018fa:	4680      	mov	r8, r0
 80018fc:	4319      	orrs	r1, r3
 80018fe:	428a      	cmp	r2, r1
 8001900:	d907      	bls.n	8001912 <__aeabi_ddiv+0x12e>
 8001902:	2301      	movs	r3, #1
 8001904:	425b      	negs	r3, r3
 8001906:	469c      	mov	ip, r3
 8001908:	1909      	adds	r1, r1, r4
 800190a:	44e0      	add	r8, ip
 800190c:	428c      	cmp	r4, r1
 800190e:	d800      	bhi.n	8001912 <__aeabi_ddiv+0x12e>
 8001910:	e207      	b.n	8001d22 <__aeabi_ddiv+0x53e>
 8001912:	1a88      	subs	r0, r1, r2
 8001914:	4649      	mov	r1, r9
 8001916:	f7fe fc97 	bl	8000248 <__aeabi_uidivmod>
 800191a:	0409      	lsls	r1, r1, #16
 800191c:	468c      	mov	ip, r1
 800191e:	0431      	lsls	r1, r6, #16
 8001920:	4666      	mov	r6, ip
 8001922:	9a01      	ldr	r2, [sp, #4]
 8001924:	0c09      	lsrs	r1, r1, #16
 8001926:	4342      	muls	r2, r0
 8001928:	0003      	movs	r3, r0
 800192a:	4331      	orrs	r1, r6
 800192c:	428a      	cmp	r2, r1
 800192e:	d904      	bls.n	800193a <__aeabi_ddiv+0x156>
 8001930:	1909      	adds	r1, r1, r4
 8001932:	3b01      	subs	r3, #1
 8001934:	428c      	cmp	r4, r1
 8001936:	d800      	bhi.n	800193a <__aeabi_ddiv+0x156>
 8001938:	e1ed      	b.n	8001d16 <__aeabi_ddiv+0x532>
 800193a:	1a88      	subs	r0, r1, r2
 800193c:	4642      	mov	r2, r8
 800193e:	0412      	lsls	r2, r2, #16
 8001940:	431a      	orrs	r2, r3
 8001942:	4690      	mov	r8, r2
 8001944:	4641      	mov	r1, r8
 8001946:	9b00      	ldr	r3, [sp, #0]
 8001948:	040e      	lsls	r6, r1, #16
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	001f      	movs	r7, r3
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	9b00      	ldr	r3, [sp, #0]
 8001952:	0c36      	lsrs	r6, r6, #16
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c19      	lsrs	r1, r3, #16
 8001958:	000b      	movs	r3, r1
 800195a:	4373      	muls	r3, r6
 800195c:	0c12      	lsrs	r2, r2, #16
 800195e:	437e      	muls	r6, r7
 8001960:	9103      	str	r1, [sp, #12]
 8001962:	4351      	muls	r1, r2
 8001964:	437a      	muls	r2, r7
 8001966:	0c1f      	lsrs	r7, r3, #16
 8001968:	46bc      	mov	ip, r7
 800196a:	1876      	adds	r6, r6, r1
 800196c:	4466      	add	r6, ip
 800196e:	42b1      	cmp	r1, r6
 8001970:	d903      	bls.n	800197a <__aeabi_ddiv+0x196>
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	0249      	lsls	r1, r1, #9
 8001976:	468c      	mov	ip, r1
 8001978:	4462      	add	r2, ip
 800197a:	0c31      	lsrs	r1, r6, #16
 800197c:	188a      	adds	r2, r1, r2
 800197e:	0431      	lsls	r1, r6, #16
 8001980:	041e      	lsls	r6, r3, #16
 8001982:	0c36      	lsrs	r6, r6, #16
 8001984:	198e      	adds	r6, r1, r6
 8001986:	4290      	cmp	r0, r2
 8001988:	d302      	bcc.n	8001990 <__aeabi_ddiv+0x1ac>
 800198a:	d112      	bne.n	80019b2 <__aeabi_ddiv+0x1ce>
 800198c:	42b5      	cmp	r5, r6
 800198e:	d210      	bcs.n	80019b2 <__aeabi_ddiv+0x1ce>
 8001990:	4643      	mov	r3, r8
 8001992:	1e59      	subs	r1, r3, #1
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	469c      	mov	ip, r3
 8001998:	4465      	add	r5, ip
 800199a:	001f      	movs	r7, r3
 800199c:	429d      	cmp	r5, r3
 800199e:	419b      	sbcs	r3, r3
 80019a0:	425b      	negs	r3, r3
 80019a2:	191b      	adds	r3, r3, r4
 80019a4:	18c0      	adds	r0, r0, r3
 80019a6:	4284      	cmp	r4, r0
 80019a8:	d200      	bcs.n	80019ac <__aeabi_ddiv+0x1c8>
 80019aa:	e1a0      	b.n	8001cee <__aeabi_ddiv+0x50a>
 80019ac:	d100      	bne.n	80019b0 <__aeabi_ddiv+0x1cc>
 80019ae:	e19b      	b.n	8001ce8 <__aeabi_ddiv+0x504>
 80019b0:	4688      	mov	r8, r1
 80019b2:	1bae      	subs	r6, r5, r6
 80019b4:	42b5      	cmp	r5, r6
 80019b6:	41ad      	sbcs	r5, r5
 80019b8:	1a80      	subs	r0, r0, r2
 80019ba:	426d      	negs	r5, r5
 80019bc:	1b40      	subs	r0, r0, r5
 80019be:	4284      	cmp	r4, r0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_ddiv+0x1e0>
 80019c2:	e1d5      	b.n	8001d70 <__aeabi_ddiv+0x58c>
 80019c4:	4649      	mov	r1, r9
 80019c6:	f7fe fc3f 	bl	8000248 <__aeabi_uidivmod>
 80019ca:	9a01      	ldr	r2, [sp, #4]
 80019cc:	040b      	lsls	r3, r1, #16
 80019ce:	4342      	muls	r2, r0
 80019d0:	0c31      	lsrs	r1, r6, #16
 80019d2:	0005      	movs	r5, r0
 80019d4:	4319      	orrs	r1, r3
 80019d6:	428a      	cmp	r2, r1
 80019d8:	d900      	bls.n	80019dc <__aeabi_ddiv+0x1f8>
 80019da:	e16c      	b.n	8001cb6 <__aeabi_ddiv+0x4d2>
 80019dc:	1a88      	subs	r0, r1, r2
 80019de:	4649      	mov	r1, r9
 80019e0:	f7fe fc32 	bl	8000248 <__aeabi_uidivmod>
 80019e4:	9a01      	ldr	r2, [sp, #4]
 80019e6:	0436      	lsls	r6, r6, #16
 80019e8:	4342      	muls	r2, r0
 80019ea:	0409      	lsls	r1, r1, #16
 80019ec:	0c36      	lsrs	r6, r6, #16
 80019ee:	0003      	movs	r3, r0
 80019f0:	430e      	orrs	r6, r1
 80019f2:	42b2      	cmp	r2, r6
 80019f4:	d900      	bls.n	80019f8 <__aeabi_ddiv+0x214>
 80019f6:	e153      	b.n	8001ca0 <__aeabi_ddiv+0x4bc>
 80019f8:	9803      	ldr	r0, [sp, #12]
 80019fa:	1ab6      	subs	r6, r6, r2
 80019fc:	0002      	movs	r2, r0
 80019fe:	042d      	lsls	r5, r5, #16
 8001a00:	431d      	orrs	r5, r3
 8001a02:	9f02      	ldr	r7, [sp, #8]
 8001a04:	042b      	lsls	r3, r5, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	435a      	muls	r2, r3
 8001a0a:	437b      	muls	r3, r7
 8001a0c:	469c      	mov	ip, r3
 8001a0e:	0c29      	lsrs	r1, r5, #16
 8001a10:	4348      	muls	r0, r1
 8001a12:	0c13      	lsrs	r3, r2, #16
 8001a14:	4484      	add	ip, r0
 8001a16:	4463      	add	r3, ip
 8001a18:	4379      	muls	r1, r7
 8001a1a:	4298      	cmp	r0, r3
 8001a1c:	d903      	bls.n	8001a26 <__aeabi_ddiv+0x242>
 8001a1e:	2080      	movs	r0, #128	; 0x80
 8001a20:	0240      	lsls	r0, r0, #9
 8001a22:	4684      	mov	ip, r0
 8001a24:	4461      	add	r1, ip
 8001a26:	0c18      	lsrs	r0, r3, #16
 8001a28:	0412      	lsls	r2, r2, #16
 8001a2a:	041b      	lsls	r3, r3, #16
 8001a2c:	0c12      	lsrs	r2, r2, #16
 8001a2e:	1841      	adds	r1, r0, r1
 8001a30:	189b      	adds	r3, r3, r2
 8001a32:	428e      	cmp	r6, r1
 8001a34:	d200      	bcs.n	8001a38 <__aeabi_ddiv+0x254>
 8001a36:	e0ff      	b.n	8001c38 <__aeabi_ddiv+0x454>
 8001a38:	d100      	bne.n	8001a3c <__aeabi_ddiv+0x258>
 8001a3a:	e0fa      	b.n	8001c32 <__aeabi_ddiv+0x44e>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	431d      	orrs	r5, r3
 8001a40:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <__aeabi_ddiv+0x384>)
 8001a42:	445a      	add	r2, fp
 8001a44:	2a00      	cmp	r2, #0
 8001a46:	dc00      	bgt.n	8001a4a <__aeabi_ddiv+0x266>
 8001a48:	e0aa      	b.n	8001ba0 <__aeabi_ddiv+0x3bc>
 8001a4a:	076b      	lsls	r3, r5, #29
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_ddiv+0x26c>
 8001a4e:	e13d      	b.n	8001ccc <__aeabi_ddiv+0x4e8>
 8001a50:	08ed      	lsrs	r5, r5, #3
 8001a52:	4643      	mov	r3, r8
 8001a54:	01db      	lsls	r3, r3, #7
 8001a56:	d506      	bpl.n	8001a66 <__aeabi_ddiv+0x282>
 8001a58:	4642      	mov	r2, r8
 8001a5a:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <__aeabi_ddiv+0x388>)
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	4690      	mov	r8, r2
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	00d2      	lsls	r2, r2, #3
 8001a64:	445a      	add	r2, fp
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <__aeabi_ddiv+0x38c>)
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dd00      	ble.n	8001a6e <__aeabi_ddiv+0x28a>
 8001a6c:	e71f      	b.n	80018ae <__aeabi_ddiv+0xca>
 8001a6e:	4643      	mov	r3, r8
 8001a70:	075b      	lsls	r3, r3, #29
 8001a72:	431d      	orrs	r5, r3
 8001a74:	4643      	mov	r3, r8
 8001a76:	0552      	lsls	r2, r2, #21
 8001a78:	025c      	lsls	r4, r3, #9
 8001a7a:	0b24      	lsrs	r4, r4, #12
 8001a7c:	0d53      	lsrs	r3, r2, #21
 8001a7e:	e708      	b.n	8001892 <__aeabi_ddiv+0xae>
 8001a80:	4652      	mov	r2, sl
 8001a82:	4322      	orrs	r2, r4
 8001a84:	d100      	bne.n	8001a88 <__aeabi_ddiv+0x2a4>
 8001a86:	e07b      	b.n	8001b80 <__aeabi_ddiv+0x39c>
 8001a88:	2c00      	cmp	r4, #0
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_ddiv+0x2aa>
 8001a8c:	e0fa      	b.n	8001c84 <__aeabi_ddiv+0x4a0>
 8001a8e:	0020      	movs	r0, r4
 8001a90:	f001 f9da 	bl	8002e48 <__clzsi2>
 8001a94:	0002      	movs	r2, r0
 8001a96:	3a0b      	subs	r2, #11
 8001a98:	231d      	movs	r3, #29
 8001a9a:	0001      	movs	r1, r0
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	4652      	mov	r2, sl
 8001aa0:	3908      	subs	r1, #8
 8001aa2:	40da      	lsrs	r2, r3
 8001aa4:	408c      	lsls	r4, r1
 8001aa6:	4314      	orrs	r4, r2
 8001aa8:	4652      	mov	r2, sl
 8001aaa:	408a      	lsls	r2, r1
 8001aac:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <__aeabi_ddiv+0x390>)
 8001aae:	4458      	add	r0, fp
 8001ab0:	469b      	mov	fp, r3
 8001ab2:	4483      	add	fp, r0
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e6d5      	b.n	8001864 <__aeabi_ddiv+0x80>
 8001ab8:	464b      	mov	r3, r9
 8001aba:	4323      	orrs	r3, r4
 8001abc:	4698      	mov	r8, r3
 8001abe:	d044      	beq.n	8001b4a <__aeabi_ddiv+0x366>
 8001ac0:	2c00      	cmp	r4, #0
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_ddiv+0x2e2>
 8001ac4:	e0ce      	b.n	8001c64 <__aeabi_ddiv+0x480>
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	f001 f9be 	bl	8002e48 <__clzsi2>
 8001acc:	0001      	movs	r1, r0
 8001ace:	0002      	movs	r2, r0
 8001ad0:	390b      	subs	r1, #11
 8001ad2:	231d      	movs	r3, #29
 8001ad4:	1a5b      	subs	r3, r3, r1
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	0010      	movs	r0, r2
 8001ada:	40d9      	lsrs	r1, r3
 8001adc:	3808      	subs	r0, #8
 8001ade:	4084      	lsls	r4, r0
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	464d      	mov	r5, r9
 8001ae4:	4323      	orrs	r3, r4
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	4085      	lsls	r5, r0
 8001aea:	4823      	ldr	r0, [pc, #140]	; (8001b78 <__aeabi_ddiv+0x394>)
 8001aec:	1a83      	subs	r3, r0, r2
 8001aee:	469b      	mov	fp, r3
 8001af0:	2300      	movs	r3, #0
 8001af2:	4699      	mov	r9, r3
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	e69a      	b.n	800182e <__aeabi_ddiv+0x4a>
 8001af8:	464b      	mov	r3, r9
 8001afa:	4323      	orrs	r3, r4
 8001afc:	4698      	mov	r8, r3
 8001afe:	d11d      	bne.n	8001b3c <__aeabi_ddiv+0x358>
 8001b00:	2308      	movs	r3, #8
 8001b02:	4699      	mov	r9, r3
 8001b04:	3b06      	subs	r3, #6
 8001b06:	2500      	movs	r5, #0
 8001b08:	4683      	mov	fp, r0
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	e68f      	b.n	800182e <__aeabi_ddiv+0x4a>
 8001b0e:	4652      	mov	r2, sl
 8001b10:	4322      	orrs	r2, r4
 8001b12:	d109      	bne.n	8001b28 <__aeabi_ddiv+0x344>
 8001b14:	2302      	movs	r3, #2
 8001b16:	4649      	mov	r1, r9
 8001b18:	4319      	orrs	r1, r3
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <__aeabi_ddiv+0x398>)
 8001b1c:	4689      	mov	r9, r1
 8001b1e:	469c      	mov	ip, r3
 8001b20:	2400      	movs	r4, #0
 8001b22:	2002      	movs	r0, #2
 8001b24:	44e3      	add	fp, ip
 8001b26:	e69d      	b.n	8001864 <__aeabi_ddiv+0x80>
 8001b28:	2303      	movs	r3, #3
 8001b2a:	464a      	mov	r2, r9
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <__aeabi_ddiv+0x398>)
 8001b30:	4691      	mov	r9, r2
 8001b32:	469c      	mov	ip, r3
 8001b34:	4652      	mov	r2, sl
 8001b36:	2003      	movs	r0, #3
 8001b38:	44e3      	add	fp, ip
 8001b3a:	e693      	b.n	8001864 <__aeabi_ddiv+0x80>
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	4699      	mov	r9, r3
 8001b40:	3b09      	subs	r3, #9
 8001b42:	46a0      	mov	r8, r4
 8001b44:	4683      	mov	fp, r0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	e671      	b.n	800182e <__aeabi_ddiv+0x4a>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	4699      	mov	r9, r3
 8001b4e:	2300      	movs	r3, #0
 8001b50:	469b      	mov	fp, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	2500      	movs	r5, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	e669      	b.n	800182e <__aeabi_ddiv+0x4a>
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	000007ff 	.word	0x000007ff
 8001b60:	fffffc01 	.word	0xfffffc01
 8001b64:	0800d45c 	.word	0x0800d45c
 8001b68:	000003ff 	.word	0x000003ff
 8001b6c:	feffffff 	.word	0xfeffffff
 8001b70:	000007fe 	.word	0x000007fe
 8001b74:	000003f3 	.word	0x000003f3
 8001b78:	fffffc0d 	.word	0xfffffc0d
 8001b7c:	fffff801 	.word	0xfffff801
 8001b80:	4649      	mov	r1, r9
 8001b82:	2301      	movs	r3, #1
 8001b84:	4319      	orrs	r1, r3
 8001b86:	4689      	mov	r9, r1
 8001b88:	2400      	movs	r4, #0
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	e66a      	b.n	8001864 <__aeabi_ddiv+0x80>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2480      	movs	r4, #128	; 0x80
 8001b92:	469a      	mov	sl, r3
 8001b94:	2500      	movs	r5, #0
 8001b96:	4b8a      	ldr	r3, [pc, #552]	; (8001dc0 <__aeabi_ddiv+0x5dc>)
 8001b98:	0324      	lsls	r4, r4, #12
 8001b9a:	e67a      	b.n	8001892 <__aeabi_ddiv+0xae>
 8001b9c:	2501      	movs	r5, #1
 8001b9e:	426d      	negs	r5, r5
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	2b38      	cmp	r3, #56	; 0x38
 8001ba6:	dd00      	ble.n	8001baa <__aeabi_ddiv+0x3c6>
 8001ba8:	e670      	b.n	800188c <__aeabi_ddiv+0xa8>
 8001baa:	2b1f      	cmp	r3, #31
 8001bac:	dc00      	bgt.n	8001bb0 <__aeabi_ddiv+0x3cc>
 8001bae:	e0bf      	b.n	8001d30 <__aeabi_ddiv+0x54c>
 8001bb0:	211f      	movs	r1, #31
 8001bb2:	4249      	negs	r1, r1
 8001bb4:	1a8a      	subs	r2, r1, r2
 8001bb6:	4641      	mov	r1, r8
 8001bb8:	40d1      	lsrs	r1, r2
 8001bba:	000a      	movs	r2, r1
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d004      	beq.n	8001bca <__aeabi_ddiv+0x3e6>
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	4b80      	ldr	r3, [pc, #512]	; (8001dc4 <__aeabi_ddiv+0x5e0>)
 8001bc4:	445b      	add	r3, fp
 8001bc6:	4099      	lsls	r1, r3
 8001bc8:	430d      	orrs	r5, r1
 8001bca:	1e6b      	subs	r3, r5, #1
 8001bcc:	419d      	sbcs	r5, r3
 8001bce:	2307      	movs	r3, #7
 8001bd0:	432a      	orrs	r2, r5
 8001bd2:	001d      	movs	r5, r3
 8001bd4:	2400      	movs	r4, #0
 8001bd6:	4015      	ands	r5, r2
 8001bd8:	4213      	tst	r3, r2
 8001bda:	d100      	bne.n	8001bde <__aeabi_ddiv+0x3fa>
 8001bdc:	e0d4      	b.n	8001d88 <__aeabi_ddiv+0x5a4>
 8001bde:	210f      	movs	r1, #15
 8001be0:	2300      	movs	r3, #0
 8001be2:	4011      	ands	r1, r2
 8001be4:	2904      	cmp	r1, #4
 8001be6:	d100      	bne.n	8001bea <__aeabi_ddiv+0x406>
 8001be8:	e0cb      	b.n	8001d82 <__aeabi_ddiv+0x59e>
 8001bea:	1d11      	adds	r1, r2, #4
 8001bec:	4291      	cmp	r1, r2
 8001bee:	4192      	sbcs	r2, r2
 8001bf0:	4252      	negs	r2, r2
 8001bf2:	189b      	adds	r3, r3, r2
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	0219      	lsls	r1, r3, #8
 8001bf8:	d400      	bmi.n	8001bfc <__aeabi_ddiv+0x418>
 8001bfa:	e0c2      	b.n	8001d82 <__aeabi_ddiv+0x59e>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	2400      	movs	r4, #0
 8001c00:	2500      	movs	r5, #0
 8001c02:	e646      	b.n	8001892 <__aeabi_ddiv+0xae>
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	4641      	mov	r1, r8
 8001c08:	031b      	lsls	r3, r3, #12
 8001c0a:	4219      	tst	r1, r3
 8001c0c:	d008      	beq.n	8001c20 <__aeabi_ddiv+0x43c>
 8001c0e:	421c      	tst	r4, r3
 8001c10:	d106      	bne.n	8001c20 <__aeabi_ddiv+0x43c>
 8001c12:	431c      	orrs	r4, r3
 8001c14:	0324      	lsls	r4, r4, #12
 8001c16:	46ba      	mov	sl, r7
 8001c18:	0015      	movs	r5, r2
 8001c1a:	4b69      	ldr	r3, [pc, #420]	; (8001dc0 <__aeabi_ddiv+0x5dc>)
 8001c1c:	0b24      	lsrs	r4, r4, #12
 8001c1e:	e638      	b.n	8001892 <__aeabi_ddiv+0xae>
 8001c20:	2480      	movs	r4, #128	; 0x80
 8001c22:	4643      	mov	r3, r8
 8001c24:	0324      	lsls	r4, r4, #12
 8001c26:	431c      	orrs	r4, r3
 8001c28:	0324      	lsls	r4, r4, #12
 8001c2a:	46b2      	mov	sl, r6
 8001c2c:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <__aeabi_ddiv+0x5dc>)
 8001c2e:	0b24      	lsrs	r4, r4, #12
 8001c30:	e62f      	b.n	8001892 <__aeabi_ddiv+0xae>
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_ddiv+0x454>
 8001c36:	e703      	b.n	8001a40 <__aeabi_ddiv+0x25c>
 8001c38:	19a6      	adds	r6, r4, r6
 8001c3a:	1e68      	subs	r0, r5, #1
 8001c3c:	42a6      	cmp	r6, r4
 8001c3e:	d200      	bcs.n	8001c42 <__aeabi_ddiv+0x45e>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_ddiv+0x57a>
 8001c42:	428e      	cmp	r6, r1
 8001c44:	d200      	bcs.n	8001c48 <__aeabi_ddiv+0x464>
 8001c46:	e0a3      	b.n	8001d90 <__aeabi_ddiv+0x5ac>
 8001c48:	d100      	bne.n	8001c4c <__aeabi_ddiv+0x468>
 8001c4a:	e0b3      	b.n	8001db4 <__aeabi_ddiv+0x5d0>
 8001c4c:	0005      	movs	r5, r0
 8001c4e:	e6f5      	b.n	8001a3c <__aeabi_ddiv+0x258>
 8001c50:	42aa      	cmp	r2, r5
 8001c52:	d900      	bls.n	8001c56 <__aeabi_ddiv+0x472>
 8001c54:	e639      	b.n	80018ca <__aeabi_ddiv+0xe6>
 8001c56:	4643      	mov	r3, r8
 8001c58:	07de      	lsls	r6, r3, #31
 8001c5a:	0858      	lsrs	r0, r3, #1
 8001c5c:	086b      	lsrs	r3, r5, #1
 8001c5e:	431e      	orrs	r6, r3
 8001c60:	07ed      	lsls	r5, r5, #31
 8001c62:	e639      	b.n	80018d8 <__aeabi_ddiv+0xf4>
 8001c64:	4648      	mov	r0, r9
 8001c66:	f001 f8ef 	bl	8002e48 <__clzsi2>
 8001c6a:	0001      	movs	r1, r0
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	3115      	adds	r1, #21
 8001c70:	3220      	adds	r2, #32
 8001c72:	291c      	cmp	r1, #28
 8001c74:	dc00      	bgt.n	8001c78 <__aeabi_ddiv+0x494>
 8001c76:	e72c      	b.n	8001ad2 <__aeabi_ddiv+0x2ee>
 8001c78:	464b      	mov	r3, r9
 8001c7a:	3808      	subs	r0, #8
 8001c7c:	4083      	lsls	r3, r0
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4698      	mov	r8, r3
 8001c82:	e732      	b.n	8001aea <__aeabi_ddiv+0x306>
 8001c84:	f001 f8e0 	bl	8002e48 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	3215      	adds	r2, #21
 8001c8e:	3020      	adds	r0, #32
 8001c90:	2a1c      	cmp	r2, #28
 8001c92:	dc00      	bgt.n	8001c96 <__aeabi_ddiv+0x4b2>
 8001c94:	e700      	b.n	8001a98 <__aeabi_ddiv+0x2b4>
 8001c96:	4654      	mov	r4, sl
 8001c98:	3b08      	subs	r3, #8
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	409c      	lsls	r4, r3
 8001c9e:	e705      	b.n	8001aac <__aeabi_ddiv+0x2c8>
 8001ca0:	1936      	adds	r6, r6, r4
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	42b4      	cmp	r4, r6
 8001ca6:	d900      	bls.n	8001caa <__aeabi_ddiv+0x4c6>
 8001ca8:	e6a6      	b.n	80019f8 <__aeabi_ddiv+0x214>
 8001caa:	42b2      	cmp	r2, r6
 8001cac:	d800      	bhi.n	8001cb0 <__aeabi_ddiv+0x4cc>
 8001cae:	e6a3      	b.n	80019f8 <__aeabi_ddiv+0x214>
 8001cb0:	1e83      	subs	r3, r0, #2
 8001cb2:	1936      	adds	r6, r6, r4
 8001cb4:	e6a0      	b.n	80019f8 <__aeabi_ddiv+0x214>
 8001cb6:	1909      	adds	r1, r1, r4
 8001cb8:	3d01      	subs	r5, #1
 8001cba:	428c      	cmp	r4, r1
 8001cbc:	d900      	bls.n	8001cc0 <__aeabi_ddiv+0x4dc>
 8001cbe:	e68d      	b.n	80019dc <__aeabi_ddiv+0x1f8>
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	d800      	bhi.n	8001cc6 <__aeabi_ddiv+0x4e2>
 8001cc4:	e68a      	b.n	80019dc <__aeabi_ddiv+0x1f8>
 8001cc6:	1e85      	subs	r5, r0, #2
 8001cc8:	1909      	adds	r1, r1, r4
 8001cca:	e687      	b.n	80019dc <__aeabi_ddiv+0x1f8>
 8001ccc:	230f      	movs	r3, #15
 8001cce:	402b      	ands	r3, r5
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_ddiv+0x4f2>
 8001cd4:	e6bc      	b.n	8001a50 <__aeabi_ddiv+0x26c>
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	425b      	negs	r3, r3
 8001cda:	42ab      	cmp	r3, r5
 8001cdc:	419b      	sbcs	r3, r3
 8001cde:	3504      	adds	r5, #4
 8001ce0:	425b      	negs	r3, r3
 8001ce2:	08ed      	lsrs	r5, r5, #3
 8001ce4:	4498      	add	r8, r3
 8001ce6:	e6b4      	b.n	8001a52 <__aeabi_ddiv+0x26e>
 8001ce8:	42af      	cmp	r7, r5
 8001cea:	d900      	bls.n	8001cee <__aeabi_ddiv+0x50a>
 8001cec:	e660      	b.n	80019b0 <__aeabi_ddiv+0x1cc>
 8001cee:	4282      	cmp	r2, r0
 8001cf0:	d804      	bhi.n	8001cfc <__aeabi_ddiv+0x518>
 8001cf2:	d000      	beq.n	8001cf6 <__aeabi_ddiv+0x512>
 8001cf4:	e65c      	b.n	80019b0 <__aeabi_ddiv+0x1cc>
 8001cf6:	42ae      	cmp	r6, r5
 8001cf8:	d800      	bhi.n	8001cfc <__aeabi_ddiv+0x518>
 8001cfa:	e659      	b.n	80019b0 <__aeabi_ddiv+0x1cc>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	425b      	negs	r3, r3
 8001d00:	469c      	mov	ip, r3
 8001d02:	9b00      	ldr	r3, [sp, #0]
 8001d04:	44e0      	add	r8, ip
 8001d06:	469c      	mov	ip, r3
 8001d08:	4465      	add	r5, ip
 8001d0a:	429d      	cmp	r5, r3
 8001d0c:	419b      	sbcs	r3, r3
 8001d0e:	425b      	negs	r3, r3
 8001d10:	191b      	adds	r3, r3, r4
 8001d12:	18c0      	adds	r0, r0, r3
 8001d14:	e64d      	b.n	80019b2 <__aeabi_ddiv+0x1ce>
 8001d16:	428a      	cmp	r2, r1
 8001d18:	d800      	bhi.n	8001d1c <__aeabi_ddiv+0x538>
 8001d1a:	e60e      	b.n	800193a <__aeabi_ddiv+0x156>
 8001d1c:	1e83      	subs	r3, r0, #2
 8001d1e:	1909      	adds	r1, r1, r4
 8001d20:	e60b      	b.n	800193a <__aeabi_ddiv+0x156>
 8001d22:	428a      	cmp	r2, r1
 8001d24:	d800      	bhi.n	8001d28 <__aeabi_ddiv+0x544>
 8001d26:	e5f4      	b.n	8001912 <__aeabi_ddiv+0x12e>
 8001d28:	1e83      	subs	r3, r0, #2
 8001d2a:	4698      	mov	r8, r3
 8001d2c:	1909      	adds	r1, r1, r4
 8001d2e:	e5f0      	b.n	8001912 <__aeabi_ddiv+0x12e>
 8001d30:	4925      	ldr	r1, [pc, #148]	; (8001dc8 <__aeabi_ddiv+0x5e4>)
 8001d32:	0028      	movs	r0, r5
 8001d34:	4459      	add	r1, fp
 8001d36:	408d      	lsls	r5, r1
 8001d38:	4642      	mov	r2, r8
 8001d3a:	408a      	lsls	r2, r1
 8001d3c:	1e69      	subs	r1, r5, #1
 8001d3e:	418d      	sbcs	r5, r1
 8001d40:	4641      	mov	r1, r8
 8001d42:	40d8      	lsrs	r0, r3
 8001d44:	40d9      	lsrs	r1, r3
 8001d46:	4302      	orrs	r2, r0
 8001d48:	432a      	orrs	r2, r5
 8001d4a:	000b      	movs	r3, r1
 8001d4c:	0751      	lsls	r1, r2, #29
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_ddiv+0x56e>
 8001d50:	e751      	b.n	8001bf6 <__aeabi_ddiv+0x412>
 8001d52:	210f      	movs	r1, #15
 8001d54:	4011      	ands	r1, r2
 8001d56:	2904      	cmp	r1, #4
 8001d58:	d000      	beq.n	8001d5c <__aeabi_ddiv+0x578>
 8001d5a:	e746      	b.n	8001bea <__aeabi_ddiv+0x406>
 8001d5c:	e74b      	b.n	8001bf6 <__aeabi_ddiv+0x412>
 8001d5e:	0005      	movs	r5, r0
 8001d60:	428e      	cmp	r6, r1
 8001d62:	d000      	beq.n	8001d66 <__aeabi_ddiv+0x582>
 8001d64:	e66a      	b.n	8001a3c <__aeabi_ddiv+0x258>
 8001d66:	9a00      	ldr	r2, [sp, #0]
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d000      	beq.n	8001d6e <__aeabi_ddiv+0x58a>
 8001d6c:	e666      	b.n	8001a3c <__aeabi_ddiv+0x258>
 8001d6e:	e667      	b.n	8001a40 <__aeabi_ddiv+0x25c>
 8001d70:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <__aeabi_ddiv+0x5e8>)
 8001d72:	445a      	add	r2, fp
 8001d74:	2a00      	cmp	r2, #0
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_ddiv+0x596>
 8001d78:	e710      	b.n	8001b9c <__aeabi_ddiv+0x3b8>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	2500      	movs	r5, #0
 8001d7e:	4498      	add	r8, r3
 8001d80:	e667      	b.n	8001a52 <__aeabi_ddiv+0x26e>
 8001d82:	075d      	lsls	r5, r3, #29
 8001d84:	025b      	lsls	r3, r3, #9
 8001d86:	0b1c      	lsrs	r4, r3, #12
 8001d88:	08d2      	lsrs	r2, r2, #3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	4315      	orrs	r5, r2
 8001d8e:	e580      	b.n	8001892 <__aeabi_ddiv+0xae>
 8001d90:	9800      	ldr	r0, [sp, #0]
 8001d92:	3d02      	subs	r5, #2
 8001d94:	0042      	lsls	r2, r0, #1
 8001d96:	4282      	cmp	r2, r0
 8001d98:	41bf      	sbcs	r7, r7
 8001d9a:	427f      	negs	r7, r7
 8001d9c:	193c      	adds	r4, r7, r4
 8001d9e:	1936      	adds	r6, r6, r4
 8001da0:	9200      	str	r2, [sp, #0]
 8001da2:	e7dd      	b.n	8001d60 <__aeabi_ddiv+0x57c>
 8001da4:	2480      	movs	r4, #128	; 0x80
 8001da6:	4643      	mov	r3, r8
 8001da8:	0324      	lsls	r4, r4, #12
 8001daa:	431c      	orrs	r4, r3
 8001dac:	0324      	lsls	r4, r4, #12
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__aeabi_ddiv+0x5dc>)
 8001db0:	0b24      	lsrs	r4, r4, #12
 8001db2:	e56e      	b.n	8001892 <__aeabi_ddiv+0xae>
 8001db4:	9a00      	ldr	r2, [sp, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3ea      	bcc.n	8001d90 <__aeabi_ddiv+0x5ac>
 8001dba:	0005      	movs	r5, r0
 8001dbc:	e7d3      	b.n	8001d66 <__aeabi_ddiv+0x582>
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	000007ff 	.word	0x000007ff
 8001dc4:	0000043e 	.word	0x0000043e
 8001dc8:	0000041e 	.word	0x0000041e
 8001dcc:	000003ff 	.word	0x000003ff

08001dd0 <__eqdf2>:
 8001dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd2:	464e      	mov	r6, r9
 8001dd4:	4645      	mov	r5, r8
 8001dd6:	46de      	mov	lr, fp
 8001dd8:	4657      	mov	r7, sl
 8001dda:	4690      	mov	r8, r2
 8001ddc:	b5e0      	push	{r5, r6, r7, lr}
 8001dde:	0017      	movs	r7, r2
 8001de0:	031a      	lsls	r2, r3, #12
 8001de2:	0b12      	lsrs	r2, r2, #12
 8001de4:	0005      	movs	r5, r0
 8001de6:	4684      	mov	ip, r0
 8001de8:	4819      	ldr	r0, [pc, #100]	; (8001e50 <__eqdf2+0x80>)
 8001dea:	030e      	lsls	r6, r1, #12
 8001dec:	004c      	lsls	r4, r1, #1
 8001dee:	4691      	mov	r9, r2
 8001df0:	005a      	lsls	r2, r3, #1
 8001df2:	0fdb      	lsrs	r3, r3, #31
 8001df4:	469b      	mov	fp, r3
 8001df6:	0b36      	lsrs	r6, r6, #12
 8001df8:	0d64      	lsrs	r4, r4, #21
 8001dfa:	0fc9      	lsrs	r1, r1, #31
 8001dfc:	0d52      	lsrs	r2, r2, #21
 8001dfe:	4284      	cmp	r4, r0
 8001e00:	d019      	beq.n	8001e36 <__eqdf2+0x66>
 8001e02:	4282      	cmp	r2, r0
 8001e04:	d010      	beq.n	8001e28 <__eqdf2+0x58>
 8001e06:	2001      	movs	r0, #1
 8001e08:	4294      	cmp	r4, r2
 8001e0a:	d10e      	bne.n	8001e2a <__eqdf2+0x5a>
 8001e0c:	454e      	cmp	r6, r9
 8001e0e:	d10c      	bne.n	8001e2a <__eqdf2+0x5a>
 8001e10:	2001      	movs	r0, #1
 8001e12:	45c4      	cmp	ip, r8
 8001e14:	d109      	bne.n	8001e2a <__eqdf2+0x5a>
 8001e16:	4559      	cmp	r1, fp
 8001e18:	d017      	beq.n	8001e4a <__eqdf2+0x7a>
 8001e1a:	2c00      	cmp	r4, #0
 8001e1c:	d105      	bne.n	8001e2a <__eqdf2+0x5a>
 8001e1e:	0030      	movs	r0, r6
 8001e20:	4328      	orrs	r0, r5
 8001e22:	1e43      	subs	r3, r0, #1
 8001e24:	4198      	sbcs	r0, r3
 8001e26:	e000      	b.n	8001e2a <__eqdf2+0x5a>
 8001e28:	2001      	movs	r0, #1
 8001e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e2c:	46bb      	mov	fp, r7
 8001e2e:	46b2      	mov	sl, r6
 8001e30:	46a9      	mov	r9, r5
 8001e32:	46a0      	mov	r8, r4
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e36:	0033      	movs	r3, r6
 8001e38:	2001      	movs	r0, #1
 8001e3a:	432b      	orrs	r3, r5
 8001e3c:	d1f5      	bne.n	8001e2a <__eqdf2+0x5a>
 8001e3e:	42a2      	cmp	r2, r4
 8001e40:	d1f3      	bne.n	8001e2a <__eqdf2+0x5a>
 8001e42:	464b      	mov	r3, r9
 8001e44:	433b      	orrs	r3, r7
 8001e46:	d1f0      	bne.n	8001e2a <__eqdf2+0x5a>
 8001e48:	e7e2      	b.n	8001e10 <__eqdf2+0x40>
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	e7ed      	b.n	8001e2a <__eqdf2+0x5a>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff

08001e54 <__gedf2>:
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	4647      	mov	r7, r8
 8001e58:	46ce      	mov	lr, r9
 8001e5a:	0004      	movs	r4, r0
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	0016      	movs	r6, r2
 8001e60:	031b      	lsls	r3, r3, #12
 8001e62:	0b1b      	lsrs	r3, r3, #12
 8001e64:	4d2d      	ldr	r5, [pc, #180]	; (8001f1c <__gedf2+0xc8>)
 8001e66:	004a      	lsls	r2, r1, #1
 8001e68:	4699      	mov	r9, r3
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	0043      	lsls	r3, r0, #1
 8001e6e:	030f      	lsls	r7, r1, #12
 8001e70:	46a4      	mov	ip, r4
 8001e72:	46b0      	mov	r8, r6
 8001e74:	0b3f      	lsrs	r7, r7, #12
 8001e76:	0d52      	lsrs	r2, r2, #21
 8001e78:	0fc9      	lsrs	r1, r1, #31
 8001e7a:	0d5b      	lsrs	r3, r3, #21
 8001e7c:	0fc0      	lsrs	r0, r0, #31
 8001e7e:	42aa      	cmp	r2, r5
 8001e80:	d021      	beq.n	8001ec6 <__gedf2+0x72>
 8001e82:	42ab      	cmp	r3, r5
 8001e84:	d013      	beq.n	8001eae <__gedf2+0x5a>
 8001e86:	2a00      	cmp	r2, #0
 8001e88:	d122      	bne.n	8001ed0 <__gedf2+0x7c>
 8001e8a:	433c      	orrs	r4, r7
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <__gedf2+0x42>
 8001e90:	464d      	mov	r5, r9
 8001e92:	432e      	orrs	r6, r5
 8001e94:	d022      	beq.n	8001edc <__gedf2+0x88>
 8001e96:	2c00      	cmp	r4, #0
 8001e98:	d010      	beq.n	8001ebc <__gedf2+0x68>
 8001e9a:	4281      	cmp	r1, r0
 8001e9c:	d022      	beq.n	8001ee4 <__gedf2+0x90>
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	3901      	subs	r1, #1
 8001ea2:	4008      	ands	r0, r1
 8001ea4:	3801      	subs	r0, #1
 8001ea6:	bcc0      	pop	{r6, r7}
 8001ea8:	46b9      	mov	r9, r7
 8001eaa:	46b0      	mov	r8, r6
 8001eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eae:	464d      	mov	r5, r9
 8001eb0:	432e      	orrs	r6, r5
 8001eb2:	d129      	bne.n	8001f08 <__gedf2+0xb4>
 8001eb4:	2a00      	cmp	r2, #0
 8001eb6:	d1f0      	bne.n	8001e9a <__gedf2+0x46>
 8001eb8:	433c      	orrs	r4, r7
 8001eba:	d1ee      	bne.n	8001e9a <__gedf2+0x46>
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	d1f2      	bne.n	8001ea6 <__gedf2+0x52>
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	e7ef      	b.n	8001ea6 <__gedf2+0x52>
 8001ec6:	003d      	movs	r5, r7
 8001ec8:	4325      	orrs	r5, r4
 8001eca:	d11d      	bne.n	8001f08 <__gedf2+0xb4>
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d0ee      	beq.n	8001eae <__gedf2+0x5a>
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1e2      	bne.n	8001e9a <__gedf2+0x46>
 8001ed4:	464c      	mov	r4, r9
 8001ed6:	4326      	orrs	r6, r4
 8001ed8:	d1df      	bne.n	8001e9a <__gedf2+0x46>
 8001eda:	e7e0      	b.n	8001e9e <__gedf2+0x4a>
 8001edc:	2000      	movs	r0, #0
 8001ede:	2c00      	cmp	r4, #0
 8001ee0:	d0e1      	beq.n	8001ea6 <__gedf2+0x52>
 8001ee2:	e7dc      	b.n	8001e9e <__gedf2+0x4a>
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dc0a      	bgt.n	8001efe <__gedf2+0xaa>
 8001ee8:	dbe8      	blt.n	8001ebc <__gedf2+0x68>
 8001eea:	454f      	cmp	r7, r9
 8001eec:	d8d7      	bhi.n	8001e9e <__gedf2+0x4a>
 8001eee:	d00e      	beq.n	8001f0e <__gedf2+0xba>
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	454f      	cmp	r7, r9
 8001ef4:	d2d7      	bcs.n	8001ea6 <__gedf2+0x52>
 8001ef6:	2900      	cmp	r1, #0
 8001ef8:	d0e2      	beq.n	8001ec0 <__gedf2+0x6c>
 8001efa:	0008      	movs	r0, r1
 8001efc:	e7d3      	b.n	8001ea6 <__gedf2+0x52>
 8001efe:	4243      	negs	r3, r0
 8001f00:	4158      	adcs	r0, r3
 8001f02:	0040      	lsls	r0, r0, #1
 8001f04:	3801      	subs	r0, #1
 8001f06:	e7ce      	b.n	8001ea6 <__gedf2+0x52>
 8001f08:	2002      	movs	r0, #2
 8001f0a:	4240      	negs	r0, r0
 8001f0c:	e7cb      	b.n	8001ea6 <__gedf2+0x52>
 8001f0e:	45c4      	cmp	ip, r8
 8001f10:	d8c5      	bhi.n	8001e9e <__gedf2+0x4a>
 8001f12:	2000      	movs	r0, #0
 8001f14:	45c4      	cmp	ip, r8
 8001f16:	d2c6      	bcs.n	8001ea6 <__gedf2+0x52>
 8001f18:	e7ed      	b.n	8001ef6 <__gedf2+0xa2>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff

08001f20 <__ledf2>:
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	4647      	mov	r7, r8
 8001f24:	46ce      	mov	lr, r9
 8001f26:	0004      	movs	r4, r0
 8001f28:	0018      	movs	r0, r3
 8001f2a:	0016      	movs	r6, r2
 8001f2c:	031b      	lsls	r3, r3, #12
 8001f2e:	0b1b      	lsrs	r3, r3, #12
 8001f30:	4d2c      	ldr	r5, [pc, #176]	; (8001fe4 <__ledf2+0xc4>)
 8001f32:	004a      	lsls	r2, r1, #1
 8001f34:	4699      	mov	r9, r3
 8001f36:	b580      	push	{r7, lr}
 8001f38:	0043      	lsls	r3, r0, #1
 8001f3a:	030f      	lsls	r7, r1, #12
 8001f3c:	46a4      	mov	ip, r4
 8001f3e:	46b0      	mov	r8, r6
 8001f40:	0b3f      	lsrs	r7, r7, #12
 8001f42:	0d52      	lsrs	r2, r2, #21
 8001f44:	0fc9      	lsrs	r1, r1, #31
 8001f46:	0d5b      	lsrs	r3, r3, #21
 8001f48:	0fc0      	lsrs	r0, r0, #31
 8001f4a:	42aa      	cmp	r2, r5
 8001f4c:	d00d      	beq.n	8001f6a <__ledf2+0x4a>
 8001f4e:	42ab      	cmp	r3, r5
 8001f50:	d010      	beq.n	8001f74 <__ledf2+0x54>
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	d127      	bne.n	8001fa6 <__ledf2+0x86>
 8001f56:	433c      	orrs	r4, r7
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d111      	bne.n	8001f80 <__ledf2+0x60>
 8001f5c:	464d      	mov	r5, r9
 8001f5e:	432e      	orrs	r6, r5
 8001f60:	d10e      	bne.n	8001f80 <__ledf2+0x60>
 8001f62:	2000      	movs	r0, #0
 8001f64:	2c00      	cmp	r4, #0
 8001f66:	d015      	beq.n	8001f94 <__ledf2+0x74>
 8001f68:	e00e      	b.n	8001f88 <__ledf2+0x68>
 8001f6a:	003d      	movs	r5, r7
 8001f6c:	4325      	orrs	r5, r4
 8001f6e:	d110      	bne.n	8001f92 <__ledf2+0x72>
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d118      	bne.n	8001fa6 <__ledf2+0x86>
 8001f74:	464d      	mov	r5, r9
 8001f76:	432e      	orrs	r6, r5
 8001f78:	d10b      	bne.n	8001f92 <__ledf2+0x72>
 8001f7a:	2a00      	cmp	r2, #0
 8001f7c:	d102      	bne.n	8001f84 <__ledf2+0x64>
 8001f7e:	433c      	orrs	r4, r7
 8001f80:	2c00      	cmp	r4, #0
 8001f82:	d00b      	beq.n	8001f9c <__ledf2+0x7c>
 8001f84:	4281      	cmp	r1, r0
 8001f86:	d014      	beq.n	8001fb2 <__ledf2+0x92>
 8001f88:	2002      	movs	r0, #2
 8001f8a:	3901      	subs	r1, #1
 8001f8c:	4008      	ands	r0, r1
 8001f8e:	3801      	subs	r0, #1
 8001f90:	e000      	b.n	8001f94 <__ledf2+0x74>
 8001f92:	2002      	movs	r0, #2
 8001f94:	bcc0      	pop	{r6, r7}
 8001f96:	46b9      	mov	r9, r7
 8001f98:	46b0      	mov	r8, r6
 8001f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d1f9      	bne.n	8001f94 <__ledf2+0x74>
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	4240      	negs	r0, r0
 8001fa4:	e7f6      	b.n	8001f94 <__ledf2+0x74>
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ec      	bne.n	8001f84 <__ledf2+0x64>
 8001faa:	464c      	mov	r4, r9
 8001fac:	4326      	orrs	r6, r4
 8001fae:	d1e9      	bne.n	8001f84 <__ledf2+0x64>
 8001fb0:	e7ea      	b.n	8001f88 <__ledf2+0x68>
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	dd04      	ble.n	8001fc0 <__ledf2+0xa0>
 8001fb6:	4243      	negs	r3, r0
 8001fb8:	4158      	adcs	r0, r3
 8001fba:	0040      	lsls	r0, r0, #1
 8001fbc:	3801      	subs	r0, #1
 8001fbe:	e7e9      	b.n	8001f94 <__ledf2+0x74>
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbeb      	blt.n	8001f9c <__ledf2+0x7c>
 8001fc4:	454f      	cmp	r7, r9
 8001fc6:	d8df      	bhi.n	8001f88 <__ledf2+0x68>
 8001fc8:	d006      	beq.n	8001fd8 <__ledf2+0xb8>
 8001fca:	2000      	movs	r0, #0
 8001fcc:	454f      	cmp	r7, r9
 8001fce:	d2e1      	bcs.n	8001f94 <__ledf2+0x74>
 8001fd0:	2900      	cmp	r1, #0
 8001fd2:	d0e5      	beq.n	8001fa0 <__ledf2+0x80>
 8001fd4:	0008      	movs	r0, r1
 8001fd6:	e7dd      	b.n	8001f94 <__ledf2+0x74>
 8001fd8:	45c4      	cmp	ip, r8
 8001fda:	d8d5      	bhi.n	8001f88 <__ledf2+0x68>
 8001fdc:	2000      	movs	r0, #0
 8001fde:	45c4      	cmp	ip, r8
 8001fe0:	d2d8      	bcs.n	8001f94 <__ledf2+0x74>
 8001fe2:	e7f5      	b.n	8001fd0 <__ledf2+0xb0>
 8001fe4:	000007ff 	.word	0x000007ff

08001fe8 <__aeabi_dmul>:
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	4657      	mov	r7, sl
 8001fec:	464e      	mov	r6, r9
 8001fee:	4645      	mov	r5, r8
 8001ff0:	46de      	mov	lr, fp
 8001ff2:	b5e0      	push	{r5, r6, r7, lr}
 8001ff4:	4698      	mov	r8, r3
 8001ff6:	030c      	lsls	r4, r1, #12
 8001ff8:	004b      	lsls	r3, r1, #1
 8001ffa:	0006      	movs	r6, r0
 8001ffc:	4692      	mov	sl, r2
 8001ffe:	b087      	sub	sp, #28
 8002000:	0b24      	lsrs	r4, r4, #12
 8002002:	0d5b      	lsrs	r3, r3, #21
 8002004:	0fcf      	lsrs	r7, r1, #31
 8002006:	2b00      	cmp	r3, #0
 8002008:	d100      	bne.n	800200c <__aeabi_dmul+0x24>
 800200a:	e15c      	b.n	80022c6 <__aeabi_dmul+0x2de>
 800200c:	4ad9      	ldr	r2, [pc, #868]	; (8002374 <__aeabi_dmul+0x38c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d100      	bne.n	8002014 <__aeabi_dmul+0x2c>
 8002012:	e175      	b.n	8002300 <__aeabi_dmul+0x318>
 8002014:	0f42      	lsrs	r2, r0, #29
 8002016:	00e4      	lsls	r4, r4, #3
 8002018:	4314      	orrs	r4, r2
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	0412      	lsls	r2, r2, #16
 800201e:	4314      	orrs	r4, r2
 8002020:	4ad5      	ldr	r2, [pc, #852]	; (8002378 <__aeabi_dmul+0x390>)
 8002022:	00c5      	lsls	r5, r0, #3
 8002024:	4694      	mov	ip, r2
 8002026:	4463      	add	r3, ip
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2300      	movs	r3, #0
 800202c:	4699      	mov	r9, r3
 800202e:	469b      	mov	fp, r3
 8002030:	4643      	mov	r3, r8
 8002032:	4642      	mov	r2, r8
 8002034:	031e      	lsls	r6, r3, #12
 8002036:	0fd2      	lsrs	r2, r2, #31
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4650      	mov	r0, sl
 800203c:	4690      	mov	r8, r2
 800203e:	0b36      	lsrs	r6, r6, #12
 8002040:	0d5b      	lsrs	r3, r3, #21
 8002042:	d100      	bne.n	8002046 <__aeabi_dmul+0x5e>
 8002044:	e120      	b.n	8002288 <__aeabi_dmul+0x2a0>
 8002046:	4acb      	ldr	r2, [pc, #812]	; (8002374 <__aeabi_dmul+0x38c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d100      	bne.n	800204e <__aeabi_dmul+0x66>
 800204c:	e162      	b.n	8002314 <__aeabi_dmul+0x32c>
 800204e:	49ca      	ldr	r1, [pc, #808]	; (8002378 <__aeabi_dmul+0x390>)
 8002050:	0f42      	lsrs	r2, r0, #29
 8002052:	468c      	mov	ip, r1
 8002054:	9900      	ldr	r1, [sp, #0]
 8002056:	4463      	add	r3, ip
 8002058:	00f6      	lsls	r6, r6, #3
 800205a:	468c      	mov	ip, r1
 800205c:	4316      	orrs	r6, r2
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	449c      	add	ip, r3
 8002062:	0412      	lsls	r2, r2, #16
 8002064:	4663      	mov	r3, ip
 8002066:	4316      	orrs	r6, r2
 8002068:	00c2      	lsls	r2, r0, #3
 800206a:	2000      	movs	r0, #0
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	9900      	ldr	r1, [sp, #0]
 8002070:	4643      	mov	r3, r8
 8002072:	3101      	adds	r1, #1
 8002074:	468c      	mov	ip, r1
 8002076:	4649      	mov	r1, r9
 8002078:	407b      	eors	r3, r7
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	290f      	cmp	r1, #15
 800207e:	d826      	bhi.n	80020ce <__aeabi_dmul+0xe6>
 8002080:	4bbe      	ldr	r3, [pc, #760]	; (800237c <__aeabi_dmul+0x394>)
 8002082:	0089      	lsls	r1, r1, #2
 8002084:	5859      	ldr	r1, [r3, r1]
 8002086:	468f      	mov	pc, r1
 8002088:	4643      	mov	r3, r8
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	0034      	movs	r4, r6
 800208e:	0015      	movs	r5, r2
 8002090:	4683      	mov	fp, r0
 8002092:	465b      	mov	r3, fp
 8002094:	2b02      	cmp	r3, #2
 8002096:	d016      	beq.n	80020c6 <__aeabi_dmul+0xde>
 8002098:	2b03      	cmp	r3, #3
 800209a:	d100      	bne.n	800209e <__aeabi_dmul+0xb6>
 800209c:	e203      	b.n	80024a6 <__aeabi_dmul+0x4be>
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d000      	beq.n	80020a4 <__aeabi_dmul+0xbc>
 80020a2:	e0cd      	b.n	8002240 <__aeabi_dmul+0x258>
 80020a4:	2200      	movs	r2, #0
 80020a6:	2400      	movs	r4, #0
 80020a8:	2500      	movs	r5, #0
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	0512      	lsls	r2, r2, #20
 80020ae:	4322      	orrs	r2, r4
 80020b0:	07db      	lsls	r3, r3, #31
 80020b2:	431a      	orrs	r2, r3
 80020b4:	0028      	movs	r0, r5
 80020b6:	0011      	movs	r1, r2
 80020b8:	b007      	add	sp, #28
 80020ba:	bcf0      	pop	{r4, r5, r6, r7}
 80020bc:	46bb      	mov	fp, r7
 80020be:	46b2      	mov	sl, r6
 80020c0:	46a9      	mov	r9, r5
 80020c2:	46a0      	mov	r8, r4
 80020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c6:	2400      	movs	r4, #0
 80020c8:	2500      	movs	r5, #0
 80020ca:	4aaa      	ldr	r2, [pc, #680]	; (8002374 <__aeabi_dmul+0x38c>)
 80020cc:	e7ed      	b.n	80020aa <__aeabi_dmul+0xc2>
 80020ce:	0c28      	lsrs	r0, r5, #16
 80020d0:	042d      	lsls	r5, r5, #16
 80020d2:	0c2d      	lsrs	r5, r5, #16
 80020d4:	002b      	movs	r3, r5
 80020d6:	0c11      	lsrs	r1, r2, #16
 80020d8:	0412      	lsls	r2, r2, #16
 80020da:	0c12      	lsrs	r2, r2, #16
 80020dc:	4353      	muls	r3, r2
 80020de:	4698      	mov	r8, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	002f      	movs	r7, r5
 80020e4:	4343      	muls	r3, r0
 80020e6:	4699      	mov	r9, r3
 80020e8:	434f      	muls	r7, r1
 80020ea:	444f      	add	r7, r9
 80020ec:	46bb      	mov	fp, r7
 80020ee:	4647      	mov	r7, r8
 80020f0:	000b      	movs	r3, r1
 80020f2:	0c3f      	lsrs	r7, r7, #16
 80020f4:	46ba      	mov	sl, r7
 80020f6:	4343      	muls	r3, r0
 80020f8:	44da      	add	sl, fp
 80020fa:	9302      	str	r3, [sp, #8]
 80020fc:	45d1      	cmp	r9, sl
 80020fe:	d904      	bls.n	800210a <__aeabi_dmul+0x122>
 8002100:	2780      	movs	r7, #128	; 0x80
 8002102:	027f      	lsls	r7, r7, #9
 8002104:	46b9      	mov	r9, r7
 8002106:	444b      	add	r3, r9
 8002108:	9302      	str	r3, [sp, #8]
 800210a:	4653      	mov	r3, sl
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	469b      	mov	fp, r3
 8002110:	4653      	mov	r3, sl
 8002112:	041f      	lsls	r7, r3, #16
 8002114:	4643      	mov	r3, r8
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	4698      	mov	r8, r3
 800211c:	003b      	movs	r3, r7
 800211e:	4443      	add	r3, r8
 8002120:	9304      	str	r3, [sp, #16]
 8002122:	0c33      	lsrs	r3, r6, #16
 8002124:	0436      	lsls	r6, r6, #16
 8002126:	0c36      	lsrs	r6, r6, #16
 8002128:	4698      	mov	r8, r3
 800212a:	0033      	movs	r3, r6
 800212c:	4343      	muls	r3, r0
 800212e:	4699      	mov	r9, r3
 8002130:	4643      	mov	r3, r8
 8002132:	4343      	muls	r3, r0
 8002134:	002f      	movs	r7, r5
 8002136:	469a      	mov	sl, r3
 8002138:	4643      	mov	r3, r8
 800213a:	4377      	muls	r7, r6
 800213c:	435d      	muls	r5, r3
 800213e:	0c38      	lsrs	r0, r7, #16
 8002140:	444d      	add	r5, r9
 8002142:	1945      	adds	r5, r0, r5
 8002144:	45a9      	cmp	r9, r5
 8002146:	d903      	bls.n	8002150 <__aeabi_dmul+0x168>
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	025b      	lsls	r3, r3, #9
 800214c:	4699      	mov	r9, r3
 800214e:	44ca      	add	sl, r9
 8002150:	043f      	lsls	r7, r7, #16
 8002152:	0c28      	lsrs	r0, r5, #16
 8002154:	0c3f      	lsrs	r7, r7, #16
 8002156:	042d      	lsls	r5, r5, #16
 8002158:	19ed      	adds	r5, r5, r7
 800215a:	0c27      	lsrs	r7, r4, #16
 800215c:	0424      	lsls	r4, r4, #16
 800215e:	0c24      	lsrs	r4, r4, #16
 8002160:	0003      	movs	r3, r0
 8002162:	0020      	movs	r0, r4
 8002164:	4350      	muls	r0, r2
 8002166:	437a      	muls	r2, r7
 8002168:	4691      	mov	r9, r2
 800216a:	003a      	movs	r2, r7
 800216c:	4453      	add	r3, sl
 800216e:	9305      	str	r3, [sp, #20]
 8002170:	0c03      	lsrs	r3, r0, #16
 8002172:	469a      	mov	sl, r3
 8002174:	434a      	muls	r2, r1
 8002176:	4361      	muls	r1, r4
 8002178:	4449      	add	r1, r9
 800217a:	4451      	add	r1, sl
 800217c:	44ab      	add	fp, r5
 800217e:	4589      	cmp	r9, r1
 8002180:	d903      	bls.n	800218a <__aeabi_dmul+0x1a2>
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	025b      	lsls	r3, r3, #9
 8002186:	4699      	mov	r9, r3
 8002188:	444a      	add	r2, r9
 800218a:	0400      	lsls	r0, r0, #16
 800218c:	0c0b      	lsrs	r3, r1, #16
 800218e:	0c00      	lsrs	r0, r0, #16
 8002190:	0409      	lsls	r1, r1, #16
 8002192:	1809      	adds	r1, r1, r0
 8002194:	0020      	movs	r0, r4
 8002196:	4699      	mov	r9, r3
 8002198:	4643      	mov	r3, r8
 800219a:	4370      	muls	r0, r6
 800219c:	435c      	muls	r4, r3
 800219e:	437e      	muls	r6, r7
 80021a0:	435f      	muls	r7, r3
 80021a2:	0c03      	lsrs	r3, r0, #16
 80021a4:	4698      	mov	r8, r3
 80021a6:	19a4      	adds	r4, r4, r6
 80021a8:	4444      	add	r4, r8
 80021aa:	444a      	add	r2, r9
 80021ac:	9703      	str	r7, [sp, #12]
 80021ae:	42a6      	cmp	r6, r4
 80021b0:	d904      	bls.n	80021bc <__aeabi_dmul+0x1d4>
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	025b      	lsls	r3, r3, #9
 80021b6:	4698      	mov	r8, r3
 80021b8:	4447      	add	r7, r8
 80021ba:	9703      	str	r7, [sp, #12]
 80021bc:	0423      	lsls	r3, r4, #16
 80021be:	9e02      	ldr	r6, [sp, #8]
 80021c0:	469a      	mov	sl, r3
 80021c2:	9b05      	ldr	r3, [sp, #20]
 80021c4:	445e      	add	r6, fp
 80021c6:	4698      	mov	r8, r3
 80021c8:	42ae      	cmp	r6, r5
 80021ca:	41ad      	sbcs	r5, r5
 80021cc:	1876      	adds	r6, r6, r1
 80021ce:	428e      	cmp	r6, r1
 80021d0:	4189      	sbcs	r1, r1
 80021d2:	0400      	lsls	r0, r0, #16
 80021d4:	0c00      	lsrs	r0, r0, #16
 80021d6:	4450      	add	r0, sl
 80021d8:	4440      	add	r0, r8
 80021da:	426d      	negs	r5, r5
 80021dc:	1947      	adds	r7, r0, r5
 80021de:	46b8      	mov	r8, r7
 80021e0:	4693      	mov	fp, r2
 80021e2:	4249      	negs	r1, r1
 80021e4:	4689      	mov	r9, r1
 80021e6:	44c3      	add	fp, r8
 80021e8:	44d9      	add	r9, fp
 80021ea:	4298      	cmp	r0, r3
 80021ec:	4180      	sbcs	r0, r0
 80021ee:	45a8      	cmp	r8, r5
 80021f0:	41ad      	sbcs	r5, r5
 80021f2:	4593      	cmp	fp, r2
 80021f4:	4192      	sbcs	r2, r2
 80021f6:	4589      	cmp	r9, r1
 80021f8:	4189      	sbcs	r1, r1
 80021fa:	426d      	negs	r5, r5
 80021fc:	4240      	negs	r0, r0
 80021fe:	4328      	orrs	r0, r5
 8002200:	0c24      	lsrs	r4, r4, #16
 8002202:	4252      	negs	r2, r2
 8002204:	4249      	negs	r1, r1
 8002206:	430a      	orrs	r2, r1
 8002208:	9b03      	ldr	r3, [sp, #12]
 800220a:	1900      	adds	r0, r0, r4
 800220c:	1880      	adds	r0, r0, r2
 800220e:	18c7      	adds	r7, r0, r3
 8002210:	464b      	mov	r3, r9
 8002212:	0ddc      	lsrs	r4, r3, #23
 8002214:	9b04      	ldr	r3, [sp, #16]
 8002216:	0275      	lsls	r5, r6, #9
 8002218:	431d      	orrs	r5, r3
 800221a:	1e6a      	subs	r2, r5, #1
 800221c:	4195      	sbcs	r5, r2
 800221e:	464b      	mov	r3, r9
 8002220:	0df6      	lsrs	r6, r6, #23
 8002222:	027f      	lsls	r7, r7, #9
 8002224:	4335      	orrs	r5, r6
 8002226:	025a      	lsls	r2, r3, #9
 8002228:	433c      	orrs	r4, r7
 800222a:	4315      	orrs	r5, r2
 800222c:	01fb      	lsls	r3, r7, #7
 800222e:	d400      	bmi.n	8002232 <__aeabi_dmul+0x24a>
 8002230:	e11c      	b.n	800246c <__aeabi_dmul+0x484>
 8002232:	2101      	movs	r1, #1
 8002234:	086a      	lsrs	r2, r5, #1
 8002236:	400d      	ands	r5, r1
 8002238:	4315      	orrs	r5, r2
 800223a:	07e2      	lsls	r2, r4, #31
 800223c:	4315      	orrs	r5, r2
 800223e:	0864      	lsrs	r4, r4, #1
 8002240:	494f      	ldr	r1, [pc, #316]	; (8002380 <__aeabi_dmul+0x398>)
 8002242:	4461      	add	r1, ip
 8002244:	2900      	cmp	r1, #0
 8002246:	dc00      	bgt.n	800224a <__aeabi_dmul+0x262>
 8002248:	e0b0      	b.n	80023ac <__aeabi_dmul+0x3c4>
 800224a:	076b      	lsls	r3, r5, #29
 800224c:	d009      	beq.n	8002262 <__aeabi_dmul+0x27a>
 800224e:	220f      	movs	r2, #15
 8002250:	402a      	ands	r2, r5
 8002252:	2a04      	cmp	r2, #4
 8002254:	d005      	beq.n	8002262 <__aeabi_dmul+0x27a>
 8002256:	1d2a      	adds	r2, r5, #4
 8002258:	42aa      	cmp	r2, r5
 800225a:	41ad      	sbcs	r5, r5
 800225c:	426d      	negs	r5, r5
 800225e:	1964      	adds	r4, r4, r5
 8002260:	0015      	movs	r5, r2
 8002262:	01e3      	lsls	r3, r4, #7
 8002264:	d504      	bpl.n	8002270 <__aeabi_dmul+0x288>
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	4a46      	ldr	r2, [pc, #280]	; (8002384 <__aeabi_dmul+0x39c>)
 800226a:	00c9      	lsls	r1, r1, #3
 800226c:	4014      	ands	r4, r2
 800226e:	4461      	add	r1, ip
 8002270:	4a45      	ldr	r2, [pc, #276]	; (8002388 <__aeabi_dmul+0x3a0>)
 8002272:	4291      	cmp	r1, r2
 8002274:	dd00      	ble.n	8002278 <__aeabi_dmul+0x290>
 8002276:	e726      	b.n	80020c6 <__aeabi_dmul+0xde>
 8002278:	0762      	lsls	r2, r4, #29
 800227a:	08ed      	lsrs	r5, r5, #3
 800227c:	0264      	lsls	r4, r4, #9
 800227e:	0549      	lsls	r1, r1, #21
 8002280:	4315      	orrs	r5, r2
 8002282:	0b24      	lsrs	r4, r4, #12
 8002284:	0d4a      	lsrs	r2, r1, #21
 8002286:	e710      	b.n	80020aa <__aeabi_dmul+0xc2>
 8002288:	4652      	mov	r2, sl
 800228a:	4332      	orrs	r2, r6
 800228c:	d100      	bne.n	8002290 <__aeabi_dmul+0x2a8>
 800228e:	e07f      	b.n	8002390 <__aeabi_dmul+0x3a8>
 8002290:	2e00      	cmp	r6, #0
 8002292:	d100      	bne.n	8002296 <__aeabi_dmul+0x2ae>
 8002294:	e0dc      	b.n	8002450 <__aeabi_dmul+0x468>
 8002296:	0030      	movs	r0, r6
 8002298:	f000 fdd6 	bl	8002e48 <__clzsi2>
 800229c:	0002      	movs	r2, r0
 800229e:	3a0b      	subs	r2, #11
 80022a0:	231d      	movs	r3, #29
 80022a2:	0001      	movs	r1, r0
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	4652      	mov	r2, sl
 80022a8:	3908      	subs	r1, #8
 80022aa:	40da      	lsrs	r2, r3
 80022ac:	408e      	lsls	r6, r1
 80022ae:	4316      	orrs	r6, r2
 80022b0:	4652      	mov	r2, sl
 80022b2:	408a      	lsls	r2, r1
 80022b4:	9b00      	ldr	r3, [sp, #0]
 80022b6:	4935      	ldr	r1, [pc, #212]	; (800238c <__aeabi_dmul+0x3a4>)
 80022b8:	1a18      	subs	r0, r3, r0
 80022ba:	0003      	movs	r3, r0
 80022bc:	468c      	mov	ip, r1
 80022be:	4463      	add	r3, ip
 80022c0:	2000      	movs	r0, #0
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	e6d3      	b.n	800206e <__aeabi_dmul+0x86>
 80022c6:	0025      	movs	r5, r4
 80022c8:	4305      	orrs	r5, r0
 80022ca:	d04a      	beq.n	8002362 <__aeabi_dmul+0x37a>
 80022cc:	2c00      	cmp	r4, #0
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dmul+0x2ea>
 80022d0:	e0b0      	b.n	8002434 <__aeabi_dmul+0x44c>
 80022d2:	0020      	movs	r0, r4
 80022d4:	f000 fdb8 	bl	8002e48 <__clzsi2>
 80022d8:	0001      	movs	r1, r0
 80022da:	0002      	movs	r2, r0
 80022dc:	390b      	subs	r1, #11
 80022de:	231d      	movs	r3, #29
 80022e0:	0010      	movs	r0, r2
 80022e2:	1a5b      	subs	r3, r3, r1
 80022e4:	0031      	movs	r1, r6
 80022e6:	0035      	movs	r5, r6
 80022e8:	3808      	subs	r0, #8
 80022ea:	4084      	lsls	r4, r0
 80022ec:	40d9      	lsrs	r1, r3
 80022ee:	4085      	lsls	r5, r0
 80022f0:	430c      	orrs	r4, r1
 80022f2:	4826      	ldr	r0, [pc, #152]	; (800238c <__aeabi_dmul+0x3a4>)
 80022f4:	1a83      	subs	r3, r0, r2
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2300      	movs	r3, #0
 80022fa:	4699      	mov	r9, r3
 80022fc:	469b      	mov	fp, r3
 80022fe:	e697      	b.n	8002030 <__aeabi_dmul+0x48>
 8002300:	0005      	movs	r5, r0
 8002302:	4325      	orrs	r5, r4
 8002304:	d126      	bne.n	8002354 <__aeabi_dmul+0x36c>
 8002306:	2208      	movs	r2, #8
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2302      	movs	r3, #2
 800230c:	2400      	movs	r4, #0
 800230e:	4691      	mov	r9, r2
 8002310:	469b      	mov	fp, r3
 8002312:	e68d      	b.n	8002030 <__aeabi_dmul+0x48>
 8002314:	4652      	mov	r2, sl
 8002316:	9b00      	ldr	r3, [sp, #0]
 8002318:	4332      	orrs	r2, r6
 800231a:	d110      	bne.n	800233e <__aeabi_dmul+0x356>
 800231c:	4915      	ldr	r1, [pc, #84]	; (8002374 <__aeabi_dmul+0x38c>)
 800231e:	2600      	movs	r6, #0
 8002320:	468c      	mov	ip, r1
 8002322:	4463      	add	r3, ip
 8002324:	4649      	mov	r1, r9
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2302      	movs	r3, #2
 800232a:	4319      	orrs	r1, r3
 800232c:	4689      	mov	r9, r1
 800232e:	2002      	movs	r0, #2
 8002330:	e69d      	b.n	800206e <__aeabi_dmul+0x86>
 8002332:	465b      	mov	r3, fp
 8002334:	9701      	str	r7, [sp, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d000      	beq.n	800233c <__aeabi_dmul+0x354>
 800233a:	e6ad      	b.n	8002098 <__aeabi_dmul+0xb0>
 800233c:	e6c3      	b.n	80020c6 <__aeabi_dmul+0xde>
 800233e:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <__aeabi_dmul+0x38c>)
 8002340:	2003      	movs	r0, #3
 8002342:	4694      	mov	ip, r2
 8002344:	4463      	add	r3, ip
 8002346:	464a      	mov	r2, r9
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2303      	movs	r3, #3
 800234c:	431a      	orrs	r2, r3
 800234e:	4691      	mov	r9, r2
 8002350:	4652      	mov	r2, sl
 8002352:	e68c      	b.n	800206e <__aeabi_dmul+0x86>
 8002354:	220c      	movs	r2, #12
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2303      	movs	r3, #3
 800235a:	0005      	movs	r5, r0
 800235c:	4691      	mov	r9, r2
 800235e:	469b      	mov	fp, r3
 8002360:	e666      	b.n	8002030 <__aeabi_dmul+0x48>
 8002362:	2304      	movs	r3, #4
 8002364:	4699      	mov	r9, r3
 8002366:	2300      	movs	r3, #0
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	2400      	movs	r4, #0
 800236e:	469b      	mov	fp, r3
 8002370:	e65e      	b.n	8002030 <__aeabi_dmul+0x48>
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	000007ff 	.word	0x000007ff
 8002378:	fffffc01 	.word	0xfffffc01
 800237c:	0800d49c 	.word	0x0800d49c
 8002380:	000003ff 	.word	0x000003ff
 8002384:	feffffff 	.word	0xfeffffff
 8002388:	000007fe 	.word	0x000007fe
 800238c:	fffffc0d 	.word	0xfffffc0d
 8002390:	4649      	mov	r1, r9
 8002392:	2301      	movs	r3, #1
 8002394:	4319      	orrs	r1, r3
 8002396:	4689      	mov	r9, r1
 8002398:	2600      	movs	r6, #0
 800239a:	2001      	movs	r0, #1
 800239c:	e667      	b.n	800206e <__aeabi_dmul+0x86>
 800239e:	2300      	movs	r3, #0
 80023a0:	2480      	movs	r4, #128	; 0x80
 80023a2:	2500      	movs	r5, #0
 80023a4:	4a43      	ldr	r2, [pc, #268]	; (80024b4 <__aeabi_dmul+0x4cc>)
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	0324      	lsls	r4, r4, #12
 80023aa:	e67e      	b.n	80020aa <__aeabi_dmul+0xc2>
 80023ac:	2001      	movs	r0, #1
 80023ae:	1a40      	subs	r0, r0, r1
 80023b0:	2838      	cmp	r0, #56	; 0x38
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dmul+0x3ce>
 80023b4:	e676      	b.n	80020a4 <__aeabi_dmul+0xbc>
 80023b6:	281f      	cmp	r0, #31
 80023b8:	dd5b      	ble.n	8002472 <__aeabi_dmul+0x48a>
 80023ba:	221f      	movs	r2, #31
 80023bc:	0023      	movs	r3, r4
 80023be:	4252      	negs	r2, r2
 80023c0:	1a51      	subs	r1, r2, r1
 80023c2:	40cb      	lsrs	r3, r1
 80023c4:	0019      	movs	r1, r3
 80023c6:	2820      	cmp	r0, #32
 80023c8:	d003      	beq.n	80023d2 <__aeabi_dmul+0x3ea>
 80023ca:	4a3b      	ldr	r2, [pc, #236]	; (80024b8 <__aeabi_dmul+0x4d0>)
 80023cc:	4462      	add	r2, ip
 80023ce:	4094      	lsls	r4, r2
 80023d0:	4325      	orrs	r5, r4
 80023d2:	1e6a      	subs	r2, r5, #1
 80023d4:	4195      	sbcs	r5, r2
 80023d6:	002a      	movs	r2, r5
 80023d8:	430a      	orrs	r2, r1
 80023da:	2107      	movs	r1, #7
 80023dc:	000d      	movs	r5, r1
 80023de:	2400      	movs	r4, #0
 80023e0:	4015      	ands	r5, r2
 80023e2:	4211      	tst	r1, r2
 80023e4:	d05b      	beq.n	800249e <__aeabi_dmul+0x4b6>
 80023e6:	210f      	movs	r1, #15
 80023e8:	2400      	movs	r4, #0
 80023ea:	4011      	ands	r1, r2
 80023ec:	2904      	cmp	r1, #4
 80023ee:	d053      	beq.n	8002498 <__aeabi_dmul+0x4b0>
 80023f0:	1d11      	adds	r1, r2, #4
 80023f2:	4291      	cmp	r1, r2
 80023f4:	4192      	sbcs	r2, r2
 80023f6:	4252      	negs	r2, r2
 80023f8:	18a4      	adds	r4, r4, r2
 80023fa:	000a      	movs	r2, r1
 80023fc:	0223      	lsls	r3, r4, #8
 80023fe:	d54b      	bpl.n	8002498 <__aeabi_dmul+0x4b0>
 8002400:	2201      	movs	r2, #1
 8002402:	2400      	movs	r4, #0
 8002404:	2500      	movs	r5, #0
 8002406:	e650      	b.n	80020aa <__aeabi_dmul+0xc2>
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	031b      	lsls	r3, r3, #12
 800240c:	421c      	tst	r4, r3
 800240e:	d009      	beq.n	8002424 <__aeabi_dmul+0x43c>
 8002410:	421e      	tst	r6, r3
 8002412:	d107      	bne.n	8002424 <__aeabi_dmul+0x43c>
 8002414:	4333      	orrs	r3, r6
 8002416:	031c      	lsls	r4, r3, #12
 8002418:	4643      	mov	r3, r8
 800241a:	0015      	movs	r5, r2
 800241c:	0b24      	lsrs	r4, r4, #12
 800241e:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <__aeabi_dmul+0x4cc>)
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	e642      	b.n	80020aa <__aeabi_dmul+0xc2>
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	0312      	lsls	r2, r2, #12
 8002428:	4314      	orrs	r4, r2
 800242a:	0324      	lsls	r4, r4, #12
 800242c:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <__aeabi_dmul+0x4cc>)
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	9701      	str	r7, [sp, #4]
 8002432:	e63a      	b.n	80020aa <__aeabi_dmul+0xc2>
 8002434:	f000 fd08 	bl	8002e48 <__clzsi2>
 8002438:	0001      	movs	r1, r0
 800243a:	0002      	movs	r2, r0
 800243c:	3115      	adds	r1, #21
 800243e:	3220      	adds	r2, #32
 8002440:	291c      	cmp	r1, #28
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dmul+0x45e>
 8002444:	e74b      	b.n	80022de <__aeabi_dmul+0x2f6>
 8002446:	0034      	movs	r4, r6
 8002448:	3808      	subs	r0, #8
 800244a:	2500      	movs	r5, #0
 800244c:	4084      	lsls	r4, r0
 800244e:	e750      	b.n	80022f2 <__aeabi_dmul+0x30a>
 8002450:	f000 fcfa 	bl	8002e48 <__clzsi2>
 8002454:	0003      	movs	r3, r0
 8002456:	001a      	movs	r2, r3
 8002458:	3215      	adds	r2, #21
 800245a:	3020      	adds	r0, #32
 800245c:	2a1c      	cmp	r2, #28
 800245e:	dc00      	bgt.n	8002462 <__aeabi_dmul+0x47a>
 8002460:	e71e      	b.n	80022a0 <__aeabi_dmul+0x2b8>
 8002462:	4656      	mov	r6, sl
 8002464:	3b08      	subs	r3, #8
 8002466:	2200      	movs	r2, #0
 8002468:	409e      	lsls	r6, r3
 800246a:	e723      	b.n	80022b4 <__aeabi_dmul+0x2cc>
 800246c:	9b00      	ldr	r3, [sp, #0]
 800246e:	469c      	mov	ip, r3
 8002470:	e6e6      	b.n	8002240 <__aeabi_dmul+0x258>
 8002472:	4912      	ldr	r1, [pc, #72]	; (80024bc <__aeabi_dmul+0x4d4>)
 8002474:	0022      	movs	r2, r4
 8002476:	4461      	add	r1, ip
 8002478:	002e      	movs	r6, r5
 800247a:	408d      	lsls	r5, r1
 800247c:	408a      	lsls	r2, r1
 800247e:	40c6      	lsrs	r6, r0
 8002480:	1e69      	subs	r1, r5, #1
 8002482:	418d      	sbcs	r5, r1
 8002484:	4332      	orrs	r2, r6
 8002486:	432a      	orrs	r2, r5
 8002488:	40c4      	lsrs	r4, r0
 800248a:	0753      	lsls	r3, r2, #29
 800248c:	d0b6      	beq.n	80023fc <__aeabi_dmul+0x414>
 800248e:	210f      	movs	r1, #15
 8002490:	4011      	ands	r1, r2
 8002492:	2904      	cmp	r1, #4
 8002494:	d1ac      	bne.n	80023f0 <__aeabi_dmul+0x408>
 8002496:	e7b1      	b.n	80023fc <__aeabi_dmul+0x414>
 8002498:	0765      	lsls	r5, r4, #29
 800249a:	0264      	lsls	r4, r4, #9
 800249c:	0b24      	lsrs	r4, r4, #12
 800249e:	08d2      	lsrs	r2, r2, #3
 80024a0:	4315      	orrs	r5, r2
 80024a2:	2200      	movs	r2, #0
 80024a4:	e601      	b.n	80020aa <__aeabi_dmul+0xc2>
 80024a6:	2280      	movs	r2, #128	; 0x80
 80024a8:	0312      	lsls	r2, r2, #12
 80024aa:	4314      	orrs	r4, r2
 80024ac:	0324      	lsls	r4, r4, #12
 80024ae:	4a01      	ldr	r2, [pc, #4]	; (80024b4 <__aeabi_dmul+0x4cc>)
 80024b0:	0b24      	lsrs	r4, r4, #12
 80024b2:	e5fa      	b.n	80020aa <__aeabi_dmul+0xc2>
 80024b4:	000007ff 	.word	0x000007ff
 80024b8:	0000043e 	.word	0x0000043e
 80024bc:	0000041e 	.word	0x0000041e

080024c0 <__aeabi_dsub>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	4657      	mov	r7, sl
 80024c4:	464e      	mov	r6, r9
 80024c6:	4645      	mov	r5, r8
 80024c8:	46de      	mov	lr, fp
 80024ca:	b5e0      	push	{r5, r6, r7, lr}
 80024cc:	001e      	movs	r6, r3
 80024ce:	0017      	movs	r7, r2
 80024d0:	004a      	lsls	r2, r1, #1
 80024d2:	030b      	lsls	r3, r1, #12
 80024d4:	0d52      	lsrs	r2, r2, #21
 80024d6:	0a5b      	lsrs	r3, r3, #9
 80024d8:	4690      	mov	r8, r2
 80024da:	0f42      	lsrs	r2, r0, #29
 80024dc:	431a      	orrs	r2, r3
 80024de:	0fcd      	lsrs	r5, r1, #31
 80024e0:	4ccd      	ldr	r4, [pc, #820]	; (8002818 <__aeabi_dsub+0x358>)
 80024e2:	0331      	lsls	r1, r6, #12
 80024e4:	00c3      	lsls	r3, r0, #3
 80024e6:	4694      	mov	ip, r2
 80024e8:	0070      	lsls	r0, r6, #1
 80024ea:	0f7a      	lsrs	r2, r7, #29
 80024ec:	0a49      	lsrs	r1, r1, #9
 80024ee:	00ff      	lsls	r7, r7, #3
 80024f0:	469a      	mov	sl, r3
 80024f2:	46b9      	mov	r9, r7
 80024f4:	0d40      	lsrs	r0, r0, #21
 80024f6:	0ff6      	lsrs	r6, r6, #31
 80024f8:	4311      	orrs	r1, r2
 80024fa:	42a0      	cmp	r0, r4
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x40>
 80024fe:	e0b1      	b.n	8002664 <__aeabi_dsub+0x1a4>
 8002500:	2201      	movs	r2, #1
 8002502:	4056      	eors	r6, r2
 8002504:	46b3      	mov	fp, r6
 8002506:	42b5      	cmp	r5, r6
 8002508:	d100      	bne.n	800250c <__aeabi_dsub+0x4c>
 800250a:	e088      	b.n	800261e <__aeabi_dsub+0x15e>
 800250c:	4642      	mov	r2, r8
 800250e:	1a12      	subs	r2, r2, r0
 8002510:	2a00      	cmp	r2, #0
 8002512:	dc00      	bgt.n	8002516 <__aeabi_dsub+0x56>
 8002514:	e0ae      	b.n	8002674 <__aeabi_dsub+0x1b4>
 8002516:	2800      	cmp	r0, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x5c>
 800251a:	e0c1      	b.n	80026a0 <__aeabi_dsub+0x1e0>
 800251c:	48be      	ldr	r0, [pc, #760]	; (8002818 <__aeabi_dsub+0x358>)
 800251e:	4580      	cmp	r8, r0
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x64>
 8002522:	e151      	b.n	80027c8 <__aeabi_dsub+0x308>
 8002524:	2080      	movs	r0, #128	; 0x80
 8002526:	0400      	lsls	r0, r0, #16
 8002528:	4301      	orrs	r1, r0
 800252a:	2a38      	cmp	r2, #56	; 0x38
 800252c:	dd00      	ble.n	8002530 <__aeabi_dsub+0x70>
 800252e:	e17b      	b.n	8002828 <__aeabi_dsub+0x368>
 8002530:	2a1f      	cmp	r2, #31
 8002532:	dd00      	ble.n	8002536 <__aeabi_dsub+0x76>
 8002534:	e1ee      	b.n	8002914 <__aeabi_dsub+0x454>
 8002536:	2020      	movs	r0, #32
 8002538:	003e      	movs	r6, r7
 800253a:	1a80      	subs	r0, r0, r2
 800253c:	000c      	movs	r4, r1
 800253e:	40d6      	lsrs	r6, r2
 8002540:	40d1      	lsrs	r1, r2
 8002542:	4087      	lsls	r7, r0
 8002544:	4662      	mov	r2, ip
 8002546:	4084      	lsls	r4, r0
 8002548:	1a52      	subs	r2, r2, r1
 800254a:	1e78      	subs	r0, r7, #1
 800254c:	4187      	sbcs	r7, r0
 800254e:	4694      	mov	ip, r2
 8002550:	4334      	orrs	r4, r6
 8002552:	4327      	orrs	r7, r4
 8002554:	1bdc      	subs	r4, r3, r7
 8002556:	42a3      	cmp	r3, r4
 8002558:	419b      	sbcs	r3, r3
 800255a:	4662      	mov	r2, ip
 800255c:	425b      	negs	r3, r3
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	4699      	mov	r9, r3
 8002562:	464b      	mov	r3, r9
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	d400      	bmi.n	800256a <__aeabi_dsub+0xaa>
 8002568:	e118      	b.n	800279c <__aeabi_dsub+0x2dc>
 800256a:	464b      	mov	r3, r9
 800256c:	0258      	lsls	r0, r3, #9
 800256e:	0a43      	lsrs	r3, r0, #9
 8002570:	4699      	mov	r9, r3
 8002572:	464b      	mov	r3, r9
 8002574:	2b00      	cmp	r3, #0
 8002576:	d100      	bne.n	800257a <__aeabi_dsub+0xba>
 8002578:	e137      	b.n	80027ea <__aeabi_dsub+0x32a>
 800257a:	4648      	mov	r0, r9
 800257c:	f000 fc64 	bl	8002e48 <__clzsi2>
 8002580:	0001      	movs	r1, r0
 8002582:	3908      	subs	r1, #8
 8002584:	2320      	movs	r3, #32
 8002586:	0022      	movs	r2, r4
 8002588:	4648      	mov	r0, r9
 800258a:	1a5b      	subs	r3, r3, r1
 800258c:	40da      	lsrs	r2, r3
 800258e:	4088      	lsls	r0, r1
 8002590:	408c      	lsls	r4, r1
 8002592:	4643      	mov	r3, r8
 8002594:	4310      	orrs	r0, r2
 8002596:	4588      	cmp	r8, r1
 8002598:	dd00      	ble.n	800259c <__aeabi_dsub+0xdc>
 800259a:	e136      	b.n	800280a <__aeabi_dsub+0x34a>
 800259c:	1ac9      	subs	r1, r1, r3
 800259e:	1c4b      	adds	r3, r1, #1
 80025a0:	2b1f      	cmp	r3, #31
 80025a2:	dd00      	ble.n	80025a6 <__aeabi_dsub+0xe6>
 80025a4:	e0ea      	b.n	800277c <__aeabi_dsub+0x2bc>
 80025a6:	2220      	movs	r2, #32
 80025a8:	0026      	movs	r6, r4
 80025aa:	1ad2      	subs	r2, r2, r3
 80025ac:	0001      	movs	r1, r0
 80025ae:	4094      	lsls	r4, r2
 80025b0:	40de      	lsrs	r6, r3
 80025b2:	40d8      	lsrs	r0, r3
 80025b4:	2300      	movs	r3, #0
 80025b6:	4091      	lsls	r1, r2
 80025b8:	1e62      	subs	r2, r4, #1
 80025ba:	4194      	sbcs	r4, r2
 80025bc:	4681      	mov	r9, r0
 80025be:	4698      	mov	r8, r3
 80025c0:	4331      	orrs	r1, r6
 80025c2:	430c      	orrs	r4, r1
 80025c4:	0763      	lsls	r3, r4, #29
 80025c6:	d009      	beq.n	80025dc <__aeabi_dsub+0x11c>
 80025c8:	230f      	movs	r3, #15
 80025ca:	4023      	ands	r3, r4
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d005      	beq.n	80025dc <__aeabi_dsub+0x11c>
 80025d0:	1d23      	adds	r3, r4, #4
 80025d2:	42a3      	cmp	r3, r4
 80025d4:	41a4      	sbcs	r4, r4
 80025d6:	4264      	negs	r4, r4
 80025d8:	44a1      	add	r9, r4
 80025da:	001c      	movs	r4, r3
 80025dc:	464b      	mov	r3, r9
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	d400      	bmi.n	80025e4 <__aeabi_dsub+0x124>
 80025e2:	e0de      	b.n	80027a2 <__aeabi_dsub+0x2e2>
 80025e4:	4641      	mov	r1, r8
 80025e6:	4b8c      	ldr	r3, [pc, #560]	; (8002818 <__aeabi_dsub+0x358>)
 80025e8:	3101      	adds	r1, #1
 80025ea:	4299      	cmp	r1, r3
 80025ec:	d100      	bne.n	80025f0 <__aeabi_dsub+0x130>
 80025ee:	e0e7      	b.n	80027c0 <__aeabi_dsub+0x300>
 80025f0:	464b      	mov	r3, r9
 80025f2:	488a      	ldr	r0, [pc, #552]	; (800281c <__aeabi_dsub+0x35c>)
 80025f4:	08e4      	lsrs	r4, r4, #3
 80025f6:	4003      	ands	r3, r0
 80025f8:	0018      	movs	r0, r3
 80025fa:	0549      	lsls	r1, r1, #21
 80025fc:	075b      	lsls	r3, r3, #29
 80025fe:	0240      	lsls	r0, r0, #9
 8002600:	4323      	orrs	r3, r4
 8002602:	0d4a      	lsrs	r2, r1, #21
 8002604:	0b04      	lsrs	r4, r0, #12
 8002606:	0512      	lsls	r2, r2, #20
 8002608:	07ed      	lsls	r5, r5, #31
 800260a:	4322      	orrs	r2, r4
 800260c:	432a      	orrs	r2, r5
 800260e:	0018      	movs	r0, r3
 8002610:	0011      	movs	r1, r2
 8002612:	bcf0      	pop	{r4, r5, r6, r7}
 8002614:	46bb      	mov	fp, r7
 8002616:	46b2      	mov	sl, r6
 8002618:	46a9      	mov	r9, r5
 800261a:	46a0      	mov	r8, r4
 800261c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800261e:	4642      	mov	r2, r8
 8002620:	1a12      	subs	r2, r2, r0
 8002622:	2a00      	cmp	r2, #0
 8002624:	dd52      	ble.n	80026cc <__aeabi_dsub+0x20c>
 8002626:	2800      	cmp	r0, #0
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x16c>
 800262a:	e09c      	b.n	8002766 <__aeabi_dsub+0x2a6>
 800262c:	45a0      	cmp	r8, r4
 800262e:	d100      	bne.n	8002632 <__aeabi_dsub+0x172>
 8002630:	e0ca      	b.n	80027c8 <__aeabi_dsub+0x308>
 8002632:	2080      	movs	r0, #128	; 0x80
 8002634:	0400      	lsls	r0, r0, #16
 8002636:	4301      	orrs	r1, r0
 8002638:	2a38      	cmp	r2, #56	; 0x38
 800263a:	dd00      	ble.n	800263e <__aeabi_dsub+0x17e>
 800263c:	e149      	b.n	80028d2 <__aeabi_dsub+0x412>
 800263e:	2a1f      	cmp	r2, #31
 8002640:	dc00      	bgt.n	8002644 <__aeabi_dsub+0x184>
 8002642:	e197      	b.n	8002974 <__aeabi_dsub+0x4b4>
 8002644:	0010      	movs	r0, r2
 8002646:	000e      	movs	r6, r1
 8002648:	3820      	subs	r0, #32
 800264a:	40c6      	lsrs	r6, r0
 800264c:	2a20      	cmp	r2, #32
 800264e:	d004      	beq.n	800265a <__aeabi_dsub+0x19a>
 8002650:	2040      	movs	r0, #64	; 0x40
 8002652:	1a82      	subs	r2, r0, r2
 8002654:	4091      	lsls	r1, r2
 8002656:	430f      	orrs	r7, r1
 8002658:	46b9      	mov	r9, r7
 800265a:	464c      	mov	r4, r9
 800265c:	1e62      	subs	r2, r4, #1
 800265e:	4194      	sbcs	r4, r2
 8002660:	4334      	orrs	r4, r6
 8002662:	e13a      	b.n	80028da <__aeabi_dsub+0x41a>
 8002664:	000a      	movs	r2, r1
 8002666:	433a      	orrs	r2, r7
 8002668:	d028      	beq.n	80026bc <__aeabi_dsub+0x1fc>
 800266a:	46b3      	mov	fp, r6
 800266c:	42b5      	cmp	r5, r6
 800266e:	d02b      	beq.n	80026c8 <__aeabi_dsub+0x208>
 8002670:	4a6b      	ldr	r2, [pc, #428]	; (8002820 <__aeabi_dsub+0x360>)
 8002672:	4442      	add	r2, r8
 8002674:	2a00      	cmp	r2, #0
 8002676:	d05d      	beq.n	8002734 <__aeabi_dsub+0x274>
 8002678:	4642      	mov	r2, r8
 800267a:	4644      	mov	r4, r8
 800267c:	1a82      	subs	r2, r0, r2
 800267e:	2c00      	cmp	r4, #0
 8002680:	d000      	beq.n	8002684 <__aeabi_dsub+0x1c4>
 8002682:	e0f5      	b.n	8002870 <__aeabi_dsub+0x3b0>
 8002684:	4665      	mov	r5, ip
 8002686:	431d      	orrs	r5, r3
 8002688:	d100      	bne.n	800268c <__aeabi_dsub+0x1cc>
 800268a:	e19c      	b.n	80029c6 <__aeabi_dsub+0x506>
 800268c:	1e55      	subs	r5, r2, #1
 800268e:	2a01      	cmp	r2, #1
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x1d4>
 8002692:	e1fb      	b.n	8002a8c <__aeabi_dsub+0x5cc>
 8002694:	4c60      	ldr	r4, [pc, #384]	; (8002818 <__aeabi_dsub+0x358>)
 8002696:	42a2      	cmp	r2, r4
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x1dc>
 800269a:	e1bd      	b.n	8002a18 <__aeabi_dsub+0x558>
 800269c:	002a      	movs	r2, r5
 800269e:	e0f0      	b.n	8002882 <__aeabi_dsub+0x3c2>
 80026a0:	0008      	movs	r0, r1
 80026a2:	4338      	orrs	r0, r7
 80026a4:	d100      	bne.n	80026a8 <__aeabi_dsub+0x1e8>
 80026a6:	e0c3      	b.n	8002830 <__aeabi_dsub+0x370>
 80026a8:	1e50      	subs	r0, r2, #1
 80026aa:	2a01      	cmp	r2, #1
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x1f0>
 80026ae:	e1a8      	b.n	8002a02 <__aeabi_dsub+0x542>
 80026b0:	4c59      	ldr	r4, [pc, #356]	; (8002818 <__aeabi_dsub+0x358>)
 80026b2:	42a2      	cmp	r2, r4
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dsub+0x1f8>
 80026b6:	e087      	b.n	80027c8 <__aeabi_dsub+0x308>
 80026b8:	0002      	movs	r2, r0
 80026ba:	e736      	b.n	800252a <__aeabi_dsub+0x6a>
 80026bc:	2201      	movs	r2, #1
 80026be:	4056      	eors	r6, r2
 80026c0:	46b3      	mov	fp, r6
 80026c2:	42b5      	cmp	r5, r6
 80026c4:	d000      	beq.n	80026c8 <__aeabi_dsub+0x208>
 80026c6:	e721      	b.n	800250c <__aeabi_dsub+0x4c>
 80026c8:	4a55      	ldr	r2, [pc, #340]	; (8002820 <__aeabi_dsub+0x360>)
 80026ca:	4442      	add	r2, r8
 80026cc:	2a00      	cmp	r2, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x212>
 80026d0:	e0b5      	b.n	800283e <__aeabi_dsub+0x37e>
 80026d2:	4642      	mov	r2, r8
 80026d4:	4644      	mov	r4, r8
 80026d6:	1a82      	subs	r2, r0, r2
 80026d8:	2c00      	cmp	r4, #0
 80026da:	d100      	bne.n	80026de <__aeabi_dsub+0x21e>
 80026dc:	e138      	b.n	8002950 <__aeabi_dsub+0x490>
 80026de:	4e4e      	ldr	r6, [pc, #312]	; (8002818 <__aeabi_dsub+0x358>)
 80026e0:	42b0      	cmp	r0, r6
 80026e2:	d100      	bne.n	80026e6 <__aeabi_dsub+0x226>
 80026e4:	e1de      	b.n	8002aa4 <__aeabi_dsub+0x5e4>
 80026e6:	2680      	movs	r6, #128	; 0x80
 80026e8:	4664      	mov	r4, ip
 80026ea:	0436      	lsls	r6, r6, #16
 80026ec:	4334      	orrs	r4, r6
 80026ee:	46a4      	mov	ip, r4
 80026f0:	2a38      	cmp	r2, #56	; 0x38
 80026f2:	dd00      	ble.n	80026f6 <__aeabi_dsub+0x236>
 80026f4:	e196      	b.n	8002a24 <__aeabi_dsub+0x564>
 80026f6:	2a1f      	cmp	r2, #31
 80026f8:	dd00      	ble.n	80026fc <__aeabi_dsub+0x23c>
 80026fa:	e224      	b.n	8002b46 <__aeabi_dsub+0x686>
 80026fc:	2620      	movs	r6, #32
 80026fe:	1ab4      	subs	r4, r6, r2
 8002700:	46a2      	mov	sl, r4
 8002702:	4664      	mov	r4, ip
 8002704:	4656      	mov	r6, sl
 8002706:	40b4      	lsls	r4, r6
 8002708:	46a1      	mov	r9, r4
 800270a:	001c      	movs	r4, r3
 800270c:	464e      	mov	r6, r9
 800270e:	40d4      	lsrs	r4, r2
 8002710:	4326      	orrs	r6, r4
 8002712:	0034      	movs	r4, r6
 8002714:	4656      	mov	r6, sl
 8002716:	40b3      	lsls	r3, r6
 8002718:	1e5e      	subs	r6, r3, #1
 800271a:	41b3      	sbcs	r3, r6
 800271c:	431c      	orrs	r4, r3
 800271e:	4663      	mov	r3, ip
 8002720:	40d3      	lsrs	r3, r2
 8002722:	18c9      	adds	r1, r1, r3
 8002724:	19e4      	adds	r4, r4, r7
 8002726:	42bc      	cmp	r4, r7
 8002728:	41bf      	sbcs	r7, r7
 800272a:	427f      	negs	r7, r7
 800272c:	46b9      	mov	r9, r7
 800272e:	4680      	mov	r8, r0
 8002730:	4489      	add	r9, r1
 8002732:	e0d8      	b.n	80028e6 <__aeabi_dsub+0x426>
 8002734:	4640      	mov	r0, r8
 8002736:	4c3b      	ldr	r4, [pc, #236]	; (8002824 <__aeabi_dsub+0x364>)
 8002738:	3001      	adds	r0, #1
 800273a:	4220      	tst	r0, r4
 800273c:	d000      	beq.n	8002740 <__aeabi_dsub+0x280>
 800273e:	e0b4      	b.n	80028aa <__aeabi_dsub+0x3ea>
 8002740:	4640      	mov	r0, r8
 8002742:	2800      	cmp	r0, #0
 8002744:	d000      	beq.n	8002748 <__aeabi_dsub+0x288>
 8002746:	e144      	b.n	80029d2 <__aeabi_dsub+0x512>
 8002748:	4660      	mov	r0, ip
 800274a:	4318      	orrs	r0, r3
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x290>
 800274e:	e190      	b.n	8002a72 <__aeabi_dsub+0x5b2>
 8002750:	0008      	movs	r0, r1
 8002752:	4338      	orrs	r0, r7
 8002754:	d000      	beq.n	8002758 <__aeabi_dsub+0x298>
 8002756:	e1aa      	b.n	8002aae <__aeabi_dsub+0x5ee>
 8002758:	4661      	mov	r1, ip
 800275a:	08db      	lsrs	r3, r3, #3
 800275c:	0749      	lsls	r1, r1, #29
 800275e:	430b      	orrs	r3, r1
 8002760:	4661      	mov	r1, ip
 8002762:	08cc      	lsrs	r4, r1, #3
 8002764:	e027      	b.n	80027b6 <__aeabi_dsub+0x2f6>
 8002766:	0008      	movs	r0, r1
 8002768:	4338      	orrs	r0, r7
 800276a:	d061      	beq.n	8002830 <__aeabi_dsub+0x370>
 800276c:	1e50      	subs	r0, r2, #1
 800276e:	2a01      	cmp	r2, #1
 8002770:	d100      	bne.n	8002774 <__aeabi_dsub+0x2b4>
 8002772:	e139      	b.n	80029e8 <__aeabi_dsub+0x528>
 8002774:	42a2      	cmp	r2, r4
 8002776:	d027      	beq.n	80027c8 <__aeabi_dsub+0x308>
 8002778:	0002      	movs	r2, r0
 800277a:	e75d      	b.n	8002638 <__aeabi_dsub+0x178>
 800277c:	0002      	movs	r2, r0
 800277e:	391f      	subs	r1, #31
 8002780:	40ca      	lsrs	r2, r1
 8002782:	0011      	movs	r1, r2
 8002784:	2b20      	cmp	r3, #32
 8002786:	d003      	beq.n	8002790 <__aeabi_dsub+0x2d0>
 8002788:	2240      	movs	r2, #64	; 0x40
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	4098      	lsls	r0, r3
 800278e:	4304      	orrs	r4, r0
 8002790:	1e63      	subs	r3, r4, #1
 8002792:	419c      	sbcs	r4, r3
 8002794:	2300      	movs	r3, #0
 8002796:	4699      	mov	r9, r3
 8002798:	4698      	mov	r8, r3
 800279a:	430c      	orrs	r4, r1
 800279c:	0763      	lsls	r3, r4, #29
 800279e:	d000      	beq.n	80027a2 <__aeabi_dsub+0x2e2>
 80027a0:	e712      	b.n	80025c8 <__aeabi_dsub+0x108>
 80027a2:	464b      	mov	r3, r9
 80027a4:	464a      	mov	r2, r9
 80027a6:	08e4      	lsrs	r4, r4, #3
 80027a8:	075b      	lsls	r3, r3, #29
 80027aa:	4323      	orrs	r3, r4
 80027ac:	08d4      	lsrs	r4, r2, #3
 80027ae:	4642      	mov	r2, r8
 80027b0:	4919      	ldr	r1, [pc, #100]	; (8002818 <__aeabi_dsub+0x358>)
 80027b2:	428a      	cmp	r2, r1
 80027b4:	d00e      	beq.n	80027d4 <__aeabi_dsub+0x314>
 80027b6:	0324      	lsls	r4, r4, #12
 80027b8:	0552      	lsls	r2, r2, #21
 80027ba:	0b24      	lsrs	r4, r4, #12
 80027bc:	0d52      	lsrs	r2, r2, #21
 80027be:	e722      	b.n	8002606 <__aeabi_dsub+0x146>
 80027c0:	000a      	movs	r2, r1
 80027c2:	2400      	movs	r4, #0
 80027c4:	2300      	movs	r3, #0
 80027c6:	e71e      	b.n	8002606 <__aeabi_dsub+0x146>
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	4662      	mov	r2, ip
 80027cc:	0752      	lsls	r2, r2, #29
 80027ce:	4313      	orrs	r3, r2
 80027d0:	4662      	mov	r2, ip
 80027d2:	08d4      	lsrs	r4, r2, #3
 80027d4:	001a      	movs	r2, r3
 80027d6:	4322      	orrs	r2, r4
 80027d8:	d100      	bne.n	80027dc <__aeabi_dsub+0x31c>
 80027da:	e1fc      	b.n	8002bd6 <__aeabi_dsub+0x716>
 80027dc:	2280      	movs	r2, #128	; 0x80
 80027de:	0312      	lsls	r2, r2, #12
 80027e0:	4314      	orrs	r4, r2
 80027e2:	0324      	lsls	r4, r4, #12
 80027e4:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <__aeabi_dsub+0x358>)
 80027e6:	0b24      	lsrs	r4, r4, #12
 80027e8:	e70d      	b.n	8002606 <__aeabi_dsub+0x146>
 80027ea:	0020      	movs	r0, r4
 80027ec:	f000 fb2c 	bl	8002e48 <__clzsi2>
 80027f0:	0001      	movs	r1, r0
 80027f2:	3118      	adds	r1, #24
 80027f4:	291f      	cmp	r1, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dsub+0x33a>
 80027f8:	e6c4      	b.n	8002584 <__aeabi_dsub+0xc4>
 80027fa:	3808      	subs	r0, #8
 80027fc:	4084      	lsls	r4, r0
 80027fe:	4643      	mov	r3, r8
 8002800:	0020      	movs	r0, r4
 8002802:	2400      	movs	r4, #0
 8002804:	4588      	cmp	r8, r1
 8002806:	dc00      	bgt.n	800280a <__aeabi_dsub+0x34a>
 8002808:	e6c8      	b.n	800259c <__aeabi_dsub+0xdc>
 800280a:	4a04      	ldr	r2, [pc, #16]	; (800281c <__aeabi_dsub+0x35c>)
 800280c:	1a5b      	subs	r3, r3, r1
 800280e:	4010      	ands	r0, r2
 8002810:	4698      	mov	r8, r3
 8002812:	4681      	mov	r9, r0
 8002814:	e6d6      	b.n	80025c4 <__aeabi_dsub+0x104>
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	000007ff 	.word	0x000007ff
 800281c:	ff7fffff 	.word	0xff7fffff
 8002820:	fffff801 	.word	0xfffff801
 8002824:	000007fe 	.word	0x000007fe
 8002828:	430f      	orrs	r7, r1
 800282a:	1e7a      	subs	r2, r7, #1
 800282c:	4197      	sbcs	r7, r2
 800282e:	e691      	b.n	8002554 <__aeabi_dsub+0x94>
 8002830:	4661      	mov	r1, ip
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	0749      	lsls	r1, r1, #29
 8002836:	430b      	orrs	r3, r1
 8002838:	4661      	mov	r1, ip
 800283a:	08cc      	lsrs	r4, r1, #3
 800283c:	e7b8      	b.n	80027b0 <__aeabi_dsub+0x2f0>
 800283e:	4640      	mov	r0, r8
 8002840:	4cd3      	ldr	r4, [pc, #844]	; (8002b90 <__aeabi_dsub+0x6d0>)
 8002842:	3001      	adds	r0, #1
 8002844:	4220      	tst	r0, r4
 8002846:	d000      	beq.n	800284a <__aeabi_dsub+0x38a>
 8002848:	e0a2      	b.n	8002990 <__aeabi_dsub+0x4d0>
 800284a:	4640      	mov	r0, r8
 800284c:	2800      	cmp	r0, #0
 800284e:	d000      	beq.n	8002852 <__aeabi_dsub+0x392>
 8002850:	e101      	b.n	8002a56 <__aeabi_dsub+0x596>
 8002852:	4660      	mov	r0, ip
 8002854:	4318      	orrs	r0, r3
 8002856:	d100      	bne.n	800285a <__aeabi_dsub+0x39a>
 8002858:	e15e      	b.n	8002b18 <__aeabi_dsub+0x658>
 800285a:	0008      	movs	r0, r1
 800285c:	4338      	orrs	r0, r7
 800285e:	d000      	beq.n	8002862 <__aeabi_dsub+0x3a2>
 8002860:	e15f      	b.n	8002b22 <__aeabi_dsub+0x662>
 8002862:	4661      	mov	r1, ip
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	0749      	lsls	r1, r1, #29
 8002868:	430b      	orrs	r3, r1
 800286a:	4661      	mov	r1, ip
 800286c:	08cc      	lsrs	r4, r1, #3
 800286e:	e7a2      	b.n	80027b6 <__aeabi_dsub+0x2f6>
 8002870:	4dc8      	ldr	r5, [pc, #800]	; (8002b94 <__aeabi_dsub+0x6d4>)
 8002872:	42a8      	cmp	r0, r5
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x3b8>
 8002876:	e0cf      	b.n	8002a18 <__aeabi_dsub+0x558>
 8002878:	2580      	movs	r5, #128	; 0x80
 800287a:	4664      	mov	r4, ip
 800287c:	042d      	lsls	r5, r5, #16
 800287e:	432c      	orrs	r4, r5
 8002880:	46a4      	mov	ip, r4
 8002882:	2a38      	cmp	r2, #56	; 0x38
 8002884:	dc56      	bgt.n	8002934 <__aeabi_dsub+0x474>
 8002886:	2a1f      	cmp	r2, #31
 8002888:	dd00      	ble.n	800288c <__aeabi_dsub+0x3cc>
 800288a:	e0d1      	b.n	8002a30 <__aeabi_dsub+0x570>
 800288c:	2520      	movs	r5, #32
 800288e:	001e      	movs	r6, r3
 8002890:	1aad      	subs	r5, r5, r2
 8002892:	4664      	mov	r4, ip
 8002894:	40ab      	lsls	r3, r5
 8002896:	40ac      	lsls	r4, r5
 8002898:	40d6      	lsrs	r6, r2
 800289a:	1e5d      	subs	r5, r3, #1
 800289c:	41ab      	sbcs	r3, r5
 800289e:	4334      	orrs	r4, r6
 80028a0:	4323      	orrs	r3, r4
 80028a2:	4664      	mov	r4, ip
 80028a4:	40d4      	lsrs	r4, r2
 80028a6:	1b09      	subs	r1, r1, r4
 80028a8:	e049      	b.n	800293e <__aeabi_dsub+0x47e>
 80028aa:	4660      	mov	r0, ip
 80028ac:	1bdc      	subs	r4, r3, r7
 80028ae:	1a46      	subs	r6, r0, r1
 80028b0:	42a3      	cmp	r3, r4
 80028b2:	4180      	sbcs	r0, r0
 80028b4:	4240      	negs	r0, r0
 80028b6:	4681      	mov	r9, r0
 80028b8:	0030      	movs	r0, r6
 80028ba:	464e      	mov	r6, r9
 80028bc:	1b80      	subs	r0, r0, r6
 80028be:	4681      	mov	r9, r0
 80028c0:	0200      	lsls	r0, r0, #8
 80028c2:	d476      	bmi.n	80029b2 <__aeabi_dsub+0x4f2>
 80028c4:	464b      	mov	r3, r9
 80028c6:	4323      	orrs	r3, r4
 80028c8:	d000      	beq.n	80028cc <__aeabi_dsub+0x40c>
 80028ca:	e652      	b.n	8002572 <__aeabi_dsub+0xb2>
 80028cc:	2400      	movs	r4, #0
 80028ce:	2500      	movs	r5, #0
 80028d0:	e771      	b.n	80027b6 <__aeabi_dsub+0x2f6>
 80028d2:	4339      	orrs	r1, r7
 80028d4:	000c      	movs	r4, r1
 80028d6:	1e62      	subs	r2, r4, #1
 80028d8:	4194      	sbcs	r4, r2
 80028da:	18e4      	adds	r4, r4, r3
 80028dc:	429c      	cmp	r4, r3
 80028de:	419b      	sbcs	r3, r3
 80028e0:	425b      	negs	r3, r3
 80028e2:	4463      	add	r3, ip
 80028e4:	4699      	mov	r9, r3
 80028e6:	464b      	mov	r3, r9
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d400      	bmi.n	80028ee <__aeabi_dsub+0x42e>
 80028ec:	e756      	b.n	800279c <__aeabi_dsub+0x2dc>
 80028ee:	2301      	movs	r3, #1
 80028f0:	469c      	mov	ip, r3
 80028f2:	4ba8      	ldr	r3, [pc, #672]	; (8002b94 <__aeabi_dsub+0x6d4>)
 80028f4:	44e0      	add	r8, ip
 80028f6:	4598      	cmp	r8, r3
 80028f8:	d038      	beq.n	800296c <__aeabi_dsub+0x4ac>
 80028fa:	464b      	mov	r3, r9
 80028fc:	48a6      	ldr	r0, [pc, #664]	; (8002b98 <__aeabi_dsub+0x6d8>)
 80028fe:	2201      	movs	r2, #1
 8002900:	4003      	ands	r3, r0
 8002902:	0018      	movs	r0, r3
 8002904:	0863      	lsrs	r3, r4, #1
 8002906:	4014      	ands	r4, r2
 8002908:	431c      	orrs	r4, r3
 800290a:	07c3      	lsls	r3, r0, #31
 800290c:	431c      	orrs	r4, r3
 800290e:	0843      	lsrs	r3, r0, #1
 8002910:	4699      	mov	r9, r3
 8002912:	e657      	b.n	80025c4 <__aeabi_dsub+0x104>
 8002914:	0010      	movs	r0, r2
 8002916:	000e      	movs	r6, r1
 8002918:	3820      	subs	r0, #32
 800291a:	40c6      	lsrs	r6, r0
 800291c:	2a20      	cmp	r2, #32
 800291e:	d004      	beq.n	800292a <__aeabi_dsub+0x46a>
 8002920:	2040      	movs	r0, #64	; 0x40
 8002922:	1a82      	subs	r2, r0, r2
 8002924:	4091      	lsls	r1, r2
 8002926:	430f      	orrs	r7, r1
 8002928:	46b9      	mov	r9, r7
 800292a:	464f      	mov	r7, r9
 800292c:	1e7a      	subs	r2, r7, #1
 800292e:	4197      	sbcs	r7, r2
 8002930:	4337      	orrs	r7, r6
 8002932:	e60f      	b.n	8002554 <__aeabi_dsub+0x94>
 8002934:	4662      	mov	r2, ip
 8002936:	431a      	orrs	r2, r3
 8002938:	0013      	movs	r3, r2
 800293a:	1e5a      	subs	r2, r3, #1
 800293c:	4193      	sbcs	r3, r2
 800293e:	1afc      	subs	r4, r7, r3
 8002940:	42a7      	cmp	r7, r4
 8002942:	41bf      	sbcs	r7, r7
 8002944:	427f      	negs	r7, r7
 8002946:	1bcb      	subs	r3, r1, r7
 8002948:	4699      	mov	r9, r3
 800294a:	465d      	mov	r5, fp
 800294c:	4680      	mov	r8, r0
 800294e:	e608      	b.n	8002562 <__aeabi_dsub+0xa2>
 8002950:	4666      	mov	r6, ip
 8002952:	431e      	orrs	r6, r3
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x498>
 8002956:	e0be      	b.n	8002ad6 <__aeabi_dsub+0x616>
 8002958:	1e56      	subs	r6, r2, #1
 800295a:	2a01      	cmp	r2, #1
 800295c:	d100      	bne.n	8002960 <__aeabi_dsub+0x4a0>
 800295e:	e109      	b.n	8002b74 <__aeabi_dsub+0x6b4>
 8002960:	4c8c      	ldr	r4, [pc, #560]	; (8002b94 <__aeabi_dsub+0x6d4>)
 8002962:	42a2      	cmp	r2, r4
 8002964:	d100      	bne.n	8002968 <__aeabi_dsub+0x4a8>
 8002966:	e119      	b.n	8002b9c <__aeabi_dsub+0x6dc>
 8002968:	0032      	movs	r2, r6
 800296a:	e6c1      	b.n	80026f0 <__aeabi_dsub+0x230>
 800296c:	4642      	mov	r2, r8
 800296e:	2400      	movs	r4, #0
 8002970:	2300      	movs	r3, #0
 8002972:	e648      	b.n	8002606 <__aeabi_dsub+0x146>
 8002974:	2020      	movs	r0, #32
 8002976:	000c      	movs	r4, r1
 8002978:	1a80      	subs	r0, r0, r2
 800297a:	003e      	movs	r6, r7
 800297c:	4087      	lsls	r7, r0
 800297e:	4084      	lsls	r4, r0
 8002980:	40d6      	lsrs	r6, r2
 8002982:	1e78      	subs	r0, r7, #1
 8002984:	4187      	sbcs	r7, r0
 8002986:	40d1      	lsrs	r1, r2
 8002988:	4334      	orrs	r4, r6
 800298a:	433c      	orrs	r4, r7
 800298c:	448c      	add	ip, r1
 800298e:	e7a4      	b.n	80028da <__aeabi_dsub+0x41a>
 8002990:	4a80      	ldr	r2, [pc, #512]	; (8002b94 <__aeabi_dsub+0x6d4>)
 8002992:	4290      	cmp	r0, r2
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x4d8>
 8002996:	e0e9      	b.n	8002b6c <__aeabi_dsub+0x6ac>
 8002998:	19df      	adds	r7, r3, r7
 800299a:	429f      	cmp	r7, r3
 800299c:	419b      	sbcs	r3, r3
 800299e:	4461      	add	r1, ip
 80029a0:	425b      	negs	r3, r3
 80029a2:	18c9      	adds	r1, r1, r3
 80029a4:	07cc      	lsls	r4, r1, #31
 80029a6:	087f      	lsrs	r7, r7, #1
 80029a8:	084b      	lsrs	r3, r1, #1
 80029aa:	4699      	mov	r9, r3
 80029ac:	4680      	mov	r8, r0
 80029ae:	433c      	orrs	r4, r7
 80029b0:	e6f4      	b.n	800279c <__aeabi_dsub+0x2dc>
 80029b2:	1afc      	subs	r4, r7, r3
 80029b4:	42a7      	cmp	r7, r4
 80029b6:	41bf      	sbcs	r7, r7
 80029b8:	4663      	mov	r3, ip
 80029ba:	427f      	negs	r7, r7
 80029bc:	1ac9      	subs	r1, r1, r3
 80029be:	1bcb      	subs	r3, r1, r7
 80029c0:	4699      	mov	r9, r3
 80029c2:	465d      	mov	r5, fp
 80029c4:	e5d5      	b.n	8002572 <__aeabi_dsub+0xb2>
 80029c6:	08ff      	lsrs	r7, r7, #3
 80029c8:	074b      	lsls	r3, r1, #29
 80029ca:	465d      	mov	r5, fp
 80029cc:	433b      	orrs	r3, r7
 80029ce:	08cc      	lsrs	r4, r1, #3
 80029d0:	e6ee      	b.n	80027b0 <__aeabi_dsub+0x2f0>
 80029d2:	4662      	mov	r2, ip
 80029d4:	431a      	orrs	r2, r3
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x51a>
 80029d8:	e082      	b.n	8002ae0 <__aeabi_dsub+0x620>
 80029da:	000b      	movs	r3, r1
 80029dc:	433b      	orrs	r3, r7
 80029de:	d11b      	bne.n	8002a18 <__aeabi_dsub+0x558>
 80029e0:	2480      	movs	r4, #128	; 0x80
 80029e2:	2500      	movs	r5, #0
 80029e4:	0324      	lsls	r4, r4, #12
 80029e6:	e6f9      	b.n	80027dc <__aeabi_dsub+0x31c>
 80029e8:	19dc      	adds	r4, r3, r7
 80029ea:	429c      	cmp	r4, r3
 80029ec:	419b      	sbcs	r3, r3
 80029ee:	4461      	add	r1, ip
 80029f0:	4689      	mov	r9, r1
 80029f2:	425b      	negs	r3, r3
 80029f4:	4499      	add	r9, r3
 80029f6:	464b      	mov	r3, r9
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	d444      	bmi.n	8002a86 <__aeabi_dsub+0x5c6>
 80029fc:	2301      	movs	r3, #1
 80029fe:	4698      	mov	r8, r3
 8002a00:	e6cc      	b.n	800279c <__aeabi_dsub+0x2dc>
 8002a02:	1bdc      	subs	r4, r3, r7
 8002a04:	4662      	mov	r2, ip
 8002a06:	42a3      	cmp	r3, r4
 8002a08:	419b      	sbcs	r3, r3
 8002a0a:	1a51      	subs	r1, r2, r1
 8002a0c:	425b      	negs	r3, r3
 8002a0e:	1acb      	subs	r3, r1, r3
 8002a10:	4699      	mov	r9, r3
 8002a12:	2301      	movs	r3, #1
 8002a14:	4698      	mov	r8, r3
 8002a16:	e5a4      	b.n	8002562 <__aeabi_dsub+0xa2>
 8002a18:	08ff      	lsrs	r7, r7, #3
 8002a1a:	074b      	lsls	r3, r1, #29
 8002a1c:	465d      	mov	r5, fp
 8002a1e:	433b      	orrs	r3, r7
 8002a20:	08cc      	lsrs	r4, r1, #3
 8002a22:	e6d7      	b.n	80027d4 <__aeabi_dsub+0x314>
 8002a24:	4662      	mov	r2, ip
 8002a26:	431a      	orrs	r2, r3
 8002a28:	0014      	movs	r4, r2
 8002a2a:	1e63      	subs	r3, r4, #1
 8002a2c:	419c      	sbcs	r4, r3
 8002a2e:	e679      	b.n	8002724 <__aeabi_dsub+0x264>
 8002a30:	0015      	movs	r5, r2
 8002a32:	4664      	mov	r4, ip
 8002a34:	3d20      	subs	r5, #32
 8002a36:	40ec      	lsrs	r4, r5
 8002a38:	46a0      	mov	r8, r4
 8002a3a:	2a20      	cmp	r2, #32
 8002a3c:	d005      	beq.n	8002a4a <__aeabi_dsub+0x58a>
 8002a3e:	2540      	movs	r5, #64	; 0x40
 8002a40:	4664      	mov	r4, ip
 8002a42:	1aaa      	subs	r2, r5, r2
 8002a44:	4094      	lsls	r4, r2
 8002a46:	4323      	orrs	r3, r4
 8002a48:	469a      	mov	sl, r3
 8002a4a:	4654      	mov	r4, sl
 8002a4c:	1e63      	subs	r3, r4, #1
 8002a4e:	419c      	sbcs	r4, r3
 8002a50:	4643      	mov	r3, r8
 8002a52:	4323      	orrs	r3, r4
 8002a54:	e773      	b.n	800293e <__aeabi_dsub+0x47e>
 8002a56:	4662      	mov	r2, ip
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	d023      	beq.n	8002aa4 <__aeabi_dsub+0x5e4>
 8002a5c:	000a      	movs	r2, r1
 8002a5e:	433a      	orrs	r2, r7
 8002a60:	d000      	beq.n	8002a64 <__aeabi_dsub+0x5a4>
 8002a62:	e0a0      	b.n	8002ba6 <__aeabi_dsub+0x6e6>
 8002a64:	4662      	mov	r2, ip
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	0752      	lsls	r2, r2, #29
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	4662      	mov	r2, ip
 8002a6e:	08d4      	lsrs	r4, r2, #3
 8002a70:	e6b0      	b.n	80027d4 <__aeabi_dsub+0x314>
 8002a72:	000b      	movs	r3, r1
 8002a74:	433b      	orrs	r3, r7
 8002a76:	d100      	bne.n	8002a7a <__aeabi_dsub+0x5ba>
 8002a78:	e728      	b.n	80028cc <__aeabi_dsub+0x40c>
 8002a7a:	08ff      	lsrs	r7, r7, #3
 8002a7c:	074b      	lsls	r3, r1, #29
 8002a7e:	465d      	mov	r5, fp
 8002a80:	433b      	orrs	r3, r7
 8002a82:	08cc      	lsrs	r4, r1, #3
 8002a84:	e697      	b.n	80027b6 <__aeabi_dsub+0x2f6>
 8002a86:	2302      	movs	r3, #2
 8002a88:	4698      	mov	r8, r3
 8002a8a:	e736      	b.n	80028fa <__aeabi_dsub+0x43a>
 8002a8c:	1afc      	subs	r4, r7, r3
 8002a8e:	42a7      	cmp	r7, r4
 8002a90:	41bf      	sbcs	r7, r7
 8002a92:	4663      	mov	r3, ip
 8002a94:	427f      	negs	r7, r7
 8002a96:	1ac9      	subs	r1, r1, r3
 8002a98:	1bcb      	subs	r3, r1, r7
 8002a9a:	4699      	mov	r9, r3
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	465d      	mov	r5, fp
 8002aa0:	4698      	mov	r8, r3
 8002aa2:	e55e      	b.n	8002562 <__aeabi_dsub+0xa2>
 8002aa4:	074b      	lsls	r3, r1, #29
 8002aa6:	08ff      	lsrs	r7, r7, #3
 8002aa8:	433b      	orrs	r3, r7
 8002aaa:	08cc      	lsrs	r4, r1, #3
 8002aac:	e692      	b.n	80027d4 <__aeabi_dsub+0x314>
 8002aae:	1bdc      	subs	r4, r3, r7
 8002ab0:	4660      	mov	r0, ip
 8002ab2:	42a3      	cmp	r3, r4
 8002ab4:	41b6      	sbcs	r6, r6
 8002ab6:	1a40      	subs	r0, r0, r1
 8002ab8:	4276      	negs	r6, r6
 8002aba:	1b80      	subs	r0, r0, r6
 8002abc:	4681      	mov	r9, r0
 8002abe:	0200      	lsls	r0, r0, #8
 8002ac0:	d560      	bpl.n	8002b84 <__aeabi_dsub+0x6c4>
 8002ac2:	1afc      	subs	r4, r7, r3
 8002ac4:	42a7      	cmp	r7, r4
 8002ac6:	41bf      	sbcs	r7, r7
 8002ac8:	4663      	mov	r3, ip
 8002aca:	427f      	negs	r7, r7
 8002acc:	1ac9      	subs	r1, r1, r3
 8002ace:	1bcb      	subs	r3, r1, r7
 8002ad0:	4699      	mov	r9, r3
 8002ad2:	465d      	mov	r5, fp
 8002ad4:	e576      	b.n	80025c4 <__aeabi_dsub+0x104>
 8002ad6:	08ff      	lsrs	r7, r7, #3
 8002ad8:	074b      	lsls	r3, r1, #29
 8002ada:	433b      	orrs	r3, r7
 8002adc:	08cc      	lsrs	r4, r1, #3
 8002ade:	e667      	b.n	80027b0 <__aeabi_dsub+0x2f0>
 8002ae0:	000a      	movs	r2, r1
 8002ae2:	08db      	lsrs	r3, r3, #3
 8002ae4:	433a      	orrs	r2, r7
 8002ae6:	d100      	bne.n	8002aea <__aeabi_dsub+0x62a>
 8002ae8:	e66f      	b.n	80027ca <__aeabi_dsub+0x30a>
 8002aea:	4662      	mov	r2, ip
 8002aec:	0752      	lsls	r2, r2, #29
 8002aee:	4313      	orrs	r3, r2
 8002af0:	4662      	mov	r2, ip
 8002af2:	08d4      	lsrs	r4, r2, #3
 8002af4:	2280      	movs	r2, #128	; 0x80
 8002af6:	0312      	lsls	r2, r2, #12
 8002af8:	4214      	tst	r4, r2
 8002afa:	d007      	beq.n	8002b0c <__aeabi_dsub+0x64c>
 8002afc:	08c8      	lsrs	r0, r1, #3
 8002afe:	4210      	tst	r0, r2
 8002b00:	d104      	bne.n	8002b0c <__aeabi_dsub+0x64c>
 8002b02:	465d      	mov	r5, fp
 8002b04:	0004      	movs	r4, r0
 8002b06:	08fb      	lsrs	r3, r7, #3
 8002b08:	0749      	lsls	r1, r1, #29
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	0f5a      	lsrs	r2, r3, #29
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	08db      	lsrs	r3, r3, #3
 8002b12:	0752      	lsls	r2, r2, #29
 8002b14:	4313      	orrs	r3, r2
 8002b16:	e65d      	b.n	80027d4 <__aeabi_dsub+0x314>
 8002b18:	074b      	lsls	r3, r1, #29
 8002b1a:	08ff      	lsrs	r7, r7, #3
 8002b1c:	433b      	orrs	r3, r7
 8002b1e:	08cc      	lsrs	r4, r1, #3
 8002b20:	e649      	b.n	80027b6 <__aeabi_dsub+0x2f6>
 8002b22:	19dc      	adds	r4, r3, r7
 8002b24:	429c      	cmp	r4, r3
 8002b26:	419b      	sbcs	r3, r3
 8002b28:	4461      	add	r1, ip
 8002b2a:	4689      	mov	r9, r1
 8002b2c:	425b      	negs	r3, r3
 8002b2e:	4499      	add	r9, r3
 8002b30:	464b      	mov	r3, r9
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	d400      	bmi.n	8002b38 <__aeabi_dsub+0x678>
 8002b36:	e631      	b.n	800279c <__aeabi_dsub+0x2dc>
 8002b38:	464a      	mov	r2, r9
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <__aeabi_dsub+0x6d8>)
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	2301      	movs	r3, #1
 8002b40:	4691      	mov	r9, r2
 8002b42:	4698      	mov	r8, r3
 8002b44:	e62a      	b.n	800279c <__aeabi_dsub+0x2dc>
 8002b46:	0016      	movs	r6, r2
 8002b48:	4664      	mov	r4, ip
 8002b4a:	3e20      	subs	r6, #32
 8002b4c:	40f4      	lsrs	r4, r6
 8002b4e:	46a0      	mov	r8, r4
 8002b50:	2a20      	cmp	r2, #32
 8002b52:	d005      	beq.n	8002b60 <__aeabi_dsub+0x6a0>
 8002b54:	2640      	movs	r6, #64	; 0x40
 8002b56:	4664      	mov	r4, ip
 8002b58:	1ab2      	subs	r2, r6, r2
 8002b5a:	4094      	lsls	r4, r2
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	469a      	mov	sl, r3
 8002b60:	4654      	mov	r4, sl
 8002b62:	1e63      	subs	r3, r4, #1
 8002b64:	419c      	sbcs	r4, r3
 8002b66:	4643      	mov	r3, r8
 8002b68:	431c      	orrs	r4, r3
 8002b6a:	e5db      	b.n	8002724 <__aeabi_dsub+0x264>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	2400      	movs	r4, #0
 8002b70:	2300      	movs	r3, #0
 8002b72:	e548      	b.n	8002606 <__aeabi_dsub+0x146>
 8002b74:	19dc      	adds	r4, r3, r7
 8002b76:	42bc      	cmp	r4, r7
 8002b78:	41bf      	sbcs	r7, r7
 8002b7a:	4461      	add	r1, ip
 8002b7c:	4689      	mov	r9, r1
 8002b7e:	427f      	negs	r7, r7
 8002b80:	44b9      	add	r9, r7
 8002b82:	e738      	b.n	80029f6 <__aeabi_dsub+0x536>
 8002b84:	464b      	mov	r3, r9
 8002b86:	4323      	orrs	r3, r4
 8002b88:	d100      	bne.n	8002b8c <__aeabi_dsub+0x6cc>
 8002b8a:	e69f      	b.n	80028cc <__aeabi_dsub+0x40c>
 8002b8c:	e606      	b.n	800279c <__aeabi_dsub+0x2dc>
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	000007fe 	.word	0x000007fe
 8002b94:	000007ff 	.word	0x000007ff
 8002b98:	ff7fffff 	.word	0xff7fffff
 8002b9c:	08ff      	lsrs	r7, r7, #3
 8002b9e:	074b      	lsls	r3, r1, #29
 8002ba0:	433b      	orrs	r3, r7
 8002ba2:	08cc      	lsrs	r4, r1, #3
 8002ba4:	e616      	b.n	80027d4 <__aeabi_dsub+0x314>
 8002ba6:	4662      	mov	r2, ip
 8002ba8:	08db      	lsrs	r3, r3, #3
 8002baa:	0752      	lsls	r2, r2, #29
 8002bac:	4313      	orrs	r3, r2
 8002bae:	4662      	mov	r2, ip
 8002bb0:	08d4      	lsrs	r4, r2, #3
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	0312      	lsls	r2, r2, #12
 8002bb6:	4214      	tst	r4, r2
 8002bb8:	d007      	beq.n	8002bca <__aeabi_dsub+0x70a>
 8002bba:	08c8      	lsrs	r0, r1, #3
 8002bbc:	4210      	tst	r0, r2
 8002bbe:	d104      	bne.n	8002bca <__aeabi_dsub+0x70a>
 8002bc0:	465d      	mov	r5, fp
 8002bc2:	0004      	movs	r4, r0
 8002bc4:	08fb      	lsrs	r3, r7, #3
 8002bc6:	0749      	lsls	r1, r1, #29
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	0f5a      	lsrs	r2, r3, #29
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	0752      	lsls	r2, r2, #29
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	e5fe      	b.n	80027d4 <__aeabi_dsub+0x314>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	4a01      	ldr	r2, [pc, #4]	; (8002be0 <__aeabi_dsub+0x720>)
 8002bda:	001c      	movs	r4, r3
 8002bdc:	e513      	b.n	8002606 <__aeabi_dsub+0x146>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	000007ff 	.word	0x000007ff

08002be4 <__aeabi_dcmpun>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	0005      	movs	r5, r0
 8002be8:	480c      	ldr	r0, [pc, #48]	; (8002c1c <__aeabi_dcmpun+0x38>)
 8002bea:	031c      	lsls	r4, r3, #12
 8002bec:	0016      	movs	r6, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	030a      	lsls	r2, r1, #12
 8002bf2:	0049      	lsls	r1, r1, #1
 8002bf4:	0b12      	lsrs	r2, r2, #12
 8002bf6:	0d49      	lsrs	r1, r1, #21
 8002bf8:	0b24      	lsrs	r4, r4, #12
 8002bfa:	0d5b      	lsrs	r3, r3, #21
 8002bfc:	4281      	cmp	r1, r0
 8002bfe:	d008      	beq.n	8002c12 <__aeabi_dcmpun+0x2e>
 8002c00:	4a06      	ldr	r2, [pc, #24]	; (8002c1c <__aeabi_dcmpun+0x38>)
 8002c02:	2000      	movs	r0, #0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d103      	bne.n	8002c10 <__aeabi_dcmpun+0x2c>
 8002c08:	0020      	movs	r0, r4
 8002c0a:	4330      	orrs	r0, r6
 8002c0c:	1e43      	subs	r3, r0, #1
 8002c0e:	4198      	sbcs	r0, r3
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
 8002c12:	2001      	movs	r0, #1
 8002c14:	432a      	orrs	r2, r5
 8002c16:	d1fb      	bne.n	8002c10 <__aeabi_dcmpun+0x2c>
 8002c18:	e7f2      	b.n	8002c00 <__aeabi_dcmpun+0x1c>
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	000007ff 	.word	0x000007ff

08002c20 <__aeabi_d2iz>:
 8002c20:	000a      	movs	r2, r1
 8002c22:	b530      	push	{r4, r5, lr}
 8002c24:	4c13      	ldr	r4, [pc, #76]	; (8002c74 <__aeabi_d2iz+0x54>)
 8002c26:	0053      	lsls	r3, r2, #1
 8002c28:	0309      	lsls	r1, r1, #12
 8002c2a:	0005      	movs	r5, r0
 8002c2c:	0b09      	lsrs	r1, r1, #12
 8002c2e:	2000      	movs	r0, #0
 8002c30:	0d5b      	lsrs	r3, r3, #21
 8002c32:	0fd2      	lsrs	r2, r2, #31
 8002c34:	42a3      	cmp	r3, r4
 8002c36:	dd04      	ble.n	8002c42 <__aeabi_d2iz+0x22>
 8002c38:	480f      	ldr	r0, [pc, #60]	; (8002c78 <__aeabi_d2iz+0x58>)
 8002c3a:	4283      	cmp	r3, r0
 8002c3c:	dd02      	ble.n	8002c44 <__aeabi_d2iz+0x24>
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <__aeabi_d2iz+0x5c>)
 8002c40:	18d0      	adds	r0, r2, r3
 8002c42:	bd30      	pop	{r4, r5, pc}
 8002c44:	2080      	movs	r0, #128	; 0x80
 8002c46:	0340      	lsls	r0, r0, #13
 8002c48:	4301      	orrs	r1, r0
 8002c4a:	480d      	ldr	r0, [pc, #52]	; (8002c80 <__aeabi_d2iz+0x60>)
 8002c4c:	1ac0      	subs	r0, r0, r3
 8002c4e:	281f      	cmp	r0, #31
 8002c50:	dd08      	ble.n	8002c64 <__aeabi_d2iz+0x44>
 8002c52:	480c      	ldr	r0, [pc, #48]	; (8002c84 <__aeabi_d2iz+0x64>)
 8002c54:	1ac3      	subs	r3, r0, r3
 8002c56:	40d9      	lsrs	r1, r3
 8002c58:	000b      	movs	r3, r1
 8002c5a:	4258      	negs	r0, r3
 8002c5c:	2a00      	cmp	r2, #0
 8002c5e:	d1f0      	bne.n	8002c42 <__aeabi_d2iz+0x22>
 8002c60:	0018      	movs	r0, r3
 8002c62:	e7ee      	b.n	8002c42 <__aeabi_d2iz+0x22>
 8002c64:	4c08      	ldr	r4, [pc, #32]	; (8002c88 <__aeabi_d2iz+0x68>)
 8002c66:	40c5      	lsrs	r5, r0
 8002c68:	46a4      	mov	ip, r4
 8002c6a:	4463      	add	r3, ip
 8002c6c:	4099      	lsls	r1, r3
 8002c6e:	000b      	movs	r3, r1
 8002c70:	432b      	orrs	r3, r5
 8002c72:	e7f2      	b.n	8002c5a <__aeabi_d2iz+0x3a>
 8002c74:	000003fe 	.word	0x000003fe
 8002c78:	0000041d 	.word	0x0000041d
 8002c7c:	7fffffff 	.word	0x7fffffff
 8002c80:	00000433 	.word	0x00000433
 8002c84:	00000413 	.word	0x00000413
 8002c88:	fffffbed 	.word	0xfffffbed

08002c8c <__aeabi_i2d>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d016      	beq.n	8002cc0 <__aeabi_i2d+0x34>
 8002c92:	17c3      	asrs	r3, r0, #31
 8002c94:	18c5      	adds	r5, r0, r3
 8002c96:	405d      	eors	r5, r3
 8002c98:	0fc4      	lsrs	r4, r0, #31
 8002c9a:	0028      	movs	r0, r5
 8002c9c:	f000 f8d4 	bl	8002e48 <__clzsi2>
 8002ca0:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <__aeabi_i2d+0x5c>)
 8002ca2:	1a12      	subs	r2, r2, r0
 8002ca4:	280a      	cmp	r0, #10
 8002ca6:	dc16      	bgt.n	8002cd6 <__aeabi_i2d+0x4a>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	002e      	movs	r6, r5
 8002cac:	3315      	adds	r3, #21
 8002cae:	409e      	lsls	r6, r3
 8002cb0:	230b      	movs	r3, #11
 8002cb2:	1a18      	subs	r0, r3, r0
 8002cb4:	40c5      	lsrs	r5, r0
 8002cb6:	0552      	lsls	r2, r2, #21
 8002cb8:	032d      	lsls	r5, r5, #12
 8002cba:	0b2d      	lsrs	r5, r5, #12
 8002cbc:	0d53      	lsrs	r3, r2, #21
 8002cbe:	e003      	b.n	8002cc8 <__aeabi_i2d+0x3c>
 8002cc0:	2400      	movs	r4, #0
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2500      	movs	r5, #0
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	051b      	lsls	r3, r3, #20
 8002cca:	432b      	orrs	r3, r5
 8002ccc:	07e4      	lsls	r4, r4, #31
 8002cce:	4323      	orrs	r3, r4
 8002cd0:	0030      	movs	r0, r6
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	bd70      	pop	{r4, r5, r6, pc}
 8002cd6:	380b      	subs	r0, #11
 8002cd8:	4085      	lsls	r5, r0
 8002cda:	0552      	lsls	r2, r2, #21
 8002cdc:	032d      	lsls	r5, r5, #12
 8002cde:	2600      	movs	r6, #0
 8002ce0:	0b2d      	lsrs	r5, r5, #12
 8002ce2:	0d53      	lsrs	r3, r2, #21
 8002ce4:	e7f0      	b.n	8002cc8 <__aeabi_i2d+0x3c>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	0000041e 	.word	0x0000041e

08002cec <__aeabi_ui2d>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	1e04      	subs	r4, r0, #0
 8002cf0:	d010      	beq.n	8002d14 <__aeabi_ui2d+0x28>
 8002cf2:	f000 f8a9 	bl	8002e48 <__clzsi2>
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <__aeabi_ui2d+0x48>)
 8002cf8:	1a1b      	subs	r3, r3, r0
 8002cfa:	280a      	cmp	r0, #10
 8002cfc:	dc11      	bgt.n	8002d22 <__aeabi_ui2d+0x36>
 8002cfe:	220b      	movs	r2, #11
 8002d00:	0021      	movs	r1, r4
 8002d02:	1a12      	subs	r2, r2, r0
 8002d04:	40d1      	lsrs	r1, r2
 8002d06:	3015      	adds	r0, #21
 8002d08:	030a      	lsls	r2, r1, #12
 8002d0a:	055b      	lsls	r3, r3, #21
 8002d0c:	4084      	lsls	r4, r0
 8002d0e:	0b12      	lsrs	r2, r2, #12
 8002d10:	0d5b      	lsrs	r3, r3, #21
 8002d12:	e001      	b.n	8002d18 <__aeabi_ui2d+0x2c>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2200      	movs	r2, #0
 8002d18:	051b      	lsls	r3, r3, #20
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	0020      	movs	r0, r4
 8002d1e:	0019      	movs	r1, r3
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	0022      	movs	r2, r4
 8002d24:	380b      	subs	r0, #11
 8002d26:	4082      	lsls	r2, r0
 8002d28:	055b      	lsls	r3, r3, #21
 8002d2a:	0312      	lsls	r2, r2, #12
 8002d2c:	2400      	movs	r4, #0
 8002d2e:	0b12      	lsrs	r2, r2, #12
 8002d30:	0d5b      	lsrs	r3, r3, #21
 8002d32:	e7f1      	b.n	8002d18 <__aeabi_ui2d+0x2c>
 8002d34:	0000041e 	.word	0x0000041e

08002d38 <__aeabi_d2f>:
 8002d38:	0002      	movs	r2, r0
 8002d3a:	004b      	lsls	r3, r1, #1
 8002d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3e:	0d5b      	lsrs	r3, r3, #21
 8002d40:	030c      	lsls	r4, r1, #12
 8002d42:	4e3d      	ldr	r6, [pc, #244]	; (8002e38 <__aeabi_d2f+0x100>)
 8002d44:	0a64      	lsrs	r4, r4, #9
 8002d46:	0f40      	lsrs	r0, r0, #29
 8002d48:	1c5f      	adds	r7, r3, #1
 8002d4a:	0fc9      	lsrs	r1, r1, #31
 8002d4c:	4304      	orrs	r4, r0
 8002d4e:	00d5      	lsls	r5, r2, #3
 8002d50:	4237      	tst	r7, r6
 8002d52:	d00a      	beq.n	8002d6a <__aeabi_d2f+0x32>
 8002d54:	4839      	ldr	r0, [pc, #228]	; (8002e3c <__aeabi_d2f+0x104>)
 8002d56:	181e      	adds	r6, r3, r0
 8002d58:	2efe      	cmp	r6, #254	; 0xfe
 8002d5a:	dd16      	ble.n	8002d8a <__aeabi_d2f+0x52>
 8002d5c:	20ff      	movs	r0, #255	; 0xff
 8002d5e:	2400      	movs	r4, #0
 8002d60:	05c0      	lsls	r0, r0, #23
 8002d62:	4320      	orrs	r0, r4
 8002d64:	07c9      	lsls	r1, r1, #31
 8002d66:	4308      	orrs	r0, r1
 8002d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <__aeabi_d2f+0x44>
 8002d6e:	432c      	orrs	r4, r5
 8002d70:	d026      	beq.n	8002dc0 <__aeabi_d2f+0x88>
 8002d72:	2205      	movs	r2, #5
 8002d74:	0192      	lsls	r2, r2, #6
 8002d76:	0a54      	lsrs	r4, r2, #9
 8002d78:	b2d8      	uxtb	r0, r3
 8002d7a:	e7f1      	b.n	8002d60 <__aeabi_d2f+0x28>
 8002d7c:	4325      	orrs	r5, r4
 8002d7e:	d0ed      	beq.n	8002d5c <__aeabi_d2f+0x24>
 8002d80:	2080      	movs	r0, #128	; 0x80
 8002d82:	03c0      	lsls	r0, r0, #15
 8002d84:	4304      	orrs	r4, r0
 8002d86:	20ff      	movs	r0, #255	; 0xff
 8002d88:	e7ea      	b.n	8002d60 <__aeabi_d2f+0x28>
 8002d8a:	2e00      	cmp	r6, #0
 8002d8c:	dd1b      	ble.n	8002dc6 <__aeabi_d2f+0x8e>
 8002d8e:	0192      	lsls	r2, r2, #6
 8002d90:	1e53      	subs	r3, r2, #1
 8002d92:	419a      	sbcs	r2, r3
 8002d94:	00e4      	lsls	r4, r4, #3
 8002d96:	0f6d      	lsrs	r5, r5, #29
 8002d98:	4322      	orrs	r2, r4
 8002d9a:	432a      	orrs	r2, r5
 8002d9c:	0753      	lsls	r3, r2, #29
 8002d9e:	d048      	beq.n	8002e32 <__aeabi_d2f+0xfa>
 8002da0:	230f      	movs	r3, #15
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d000      	beq.n	8002daa <__aeabi_d2f+0x72>
 8002da8:	3204      	adds	r2, #4
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	04db      	lsls	r3, r3, #19
 8002dae:	4013      	ands	r3, r2
 8002db0:	d03f      	beq.n	8002e32 <__aeabi_d2f+0xfa>
 8002db2:	1c70      	adds	r0, r6, #1
 8002db4:	2efe      	cmp	r6, #254	; 0xfe
 8002db6:	d0d1      	beq.n	8002d5c <__aeabi_d2f+0x24>
 8002db8:	0192      	lsls	r2, r2, #6
 8002dba:	0a54      	lsrs	r4, r2, #9
 8002dbc:	b2c0      	uxtb	r0, r0
 8002dbe:	e7cf      	b.n	8002d60 <__aeabi_d2f+0x28>
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	2400      	movs	r4, #0
 8002dc4:	e7cc      	b.n	8002d60 <__aeabi_d2f+0x28>
 8002dc6:	0032      	movs	r2, r6
 8002dc8:	3217      	adds	r2, #23
 8002dca:	db22      	blt.n	8002e12 <__aeabi_d2f+0xda>
 8002dcc:	2080      	movs	r0, #128	; 0x80
 8002dce:	0400      	lsls	r0, r0, #16
 8002dd0:	4320      	orrs	r0, r4
 8002dd2:	241e      	movs	r4, #30
 8002dd4:	1ba4      	subs	r4, r4, r6
 8002dd6:	2c1f      	cmp	r4, #31
 8002dd8:	dd1d      	ble.n	8002e16 <__aeabi_d2f+0xde>
 8002dda:	2202      	movs	r2, #2
 8002ddc:	4252      	negs	r2, r2
 8002dde:	1b96      	subs	r6, r2, r6
 8002de0:	0002      	movs	r2, r0
 8002de2:	40f2      	lsrs	r2, r6
 8002de4:	0016      	movs	r6, r2
 8002de6:	2c20      	cmp	r4, #32
 8002de8:	d004      	beq.n	8002df4 <__aeabi_d2f+0xbc>
 8002dea:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <__aeabi_d2f+0x108>)
 8002dec:	4694      	mov	ip, r2
 8002dee:	4463      	add	r3, ip
 8002df0:	4098      	lsls	r0, r3
 8002df2:	4305      	orrs	r5, r0
 8002df4:	002a      	movs	r2, r5
 8002df6:	1e53      	subs	r3, r2, #1
 8002df8:	419a      	sbcs	r2, r3
 8002dfa:	4332      	orrs	r2, r6
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	0753      	lsls	r3, r2, #29
 8002e00:	d1ce      	bne.n	8002da0 <__aeabi_d2f+0x68>
 8002e02:	2480      	movs	r4, #128	; 0x80
 8002e04:	0013      	movs	r3, r2
 8002e06:	04e4      	lsls	r4, r4, #19
 8002e08:	2001      	movs	r0, #1
 8002e0a:	4023      	ands	r3, r4
 8002e0c:	4222      	tst	r2, r4
 8002e0e:	d1d3      	bne.n	8002db8 <__aeabi_d2f+0x80>
 8002e10:	e7b0      	b.n	8002d74 <__aeabi_d2f+0x3c>
 8002e12:	2300      	movs	r3, #0
 8002e14:	e7ad      	b.n	8002d72 <__aeabi_d2f+0x3a>
 8002e16:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <__aeabi_d2f+0x10c>)
 8002e18:	4694      	mov	ip, r2
 8002e1a:	002a      	movs	r2, r5
 8002e1c:	40e2      	lsrs	r2, r4
 8002e1e:	0014      	movs	r4, r2
 8002e20:	002a      	movs	r2, r5
 8002e22:	4463      	add	r3, ip
 8002e24:	409a      	lsls	r2, r3
 8002e26:	4098      	lsls	r0, r3
 8002e28:	1e55      	subs	r5, r2, #1
 8002e2a:	41aa      	sbcs	r2, r5
 8002e2c:	4302      	orrs	r2, r0
 8002e2e:	4322      	orrs	r2, r4
 8002e30:	e7e4      	b.n	8002dfc <__aeabi_d2f+0xc4>
 8002e32:	0033      	movs	r3, r6
 8002e34:	e79e      	b.n	8002d74 <__aeabi_d2f+0x3c>
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	000007fe 	.word	0x000007fe
 8002e3c:	fffffc80 	.word	0xfffffc80
 8002e40:	fffffca2 	.word	0xfffffca2
 8002e44:	fffffc82 	.word	0xfffffc82

08002e48 <__clzsi2>:
 8002e48:	211c      	movs	r1, #28
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	041b      	lsls	r3, r3, #16
 8002e4e:	4298      	cmp	r0, r3
 8002e50:	d301      	bcc.n	8002e56 <__clzsi2+0xe>
 8002e52:	0c00      	lsrs	r0, r0, #16
 8002e54:	3910      	subs	r1, #16
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	4298      	cmp	r0, r3
 8002e5a:	d301      	bcc.n	8002e60 <__clzsi2+0x18>
 8002e5c:	0a00      	lsrs	r0, r0, #8
 8002e5e:	3908      	subs	r1, #8
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	4298      	cmp	r0, r3
 8002e64:	d301      	bcc.n	8002e6a <__clzsi2+0x22>
 8002e66:	0900      	lsrs	r0, r0, #4
 8002e68:	3904      	subs	r1, #4
 8002e6a:	a202      	add	r2, pc, #8	; (adr r2, 8002e74 <__clzsi2+0x2c>)
 8002e6c:	5c10      	ldrb	r0, [r2, r0]
 8002e6e:	1840      	adds	r0, r0, r1
 8002e70:	4770      	bx	lr
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	02020304 	.word	0x02020304
 8002e78:	01010101 	.word	0x01010101
	...

08002e84 <__clzdi2>:
 8002e84:	b510      	push	{r4, lr}
 8002e86:	2900      	cmp	r1, #0
 8002e88:	d103      	bne.n	8002e92 <__clzdi2+0xe>
 8002e8a:	f7ff ffdd 	bl	8002e48 <__clzsi2>
 8002e8e:	3020      	adds	r0, #32
 8002e90:	e002      	b.n	8002e98 <__clzdi2+0x14>
 8002e92:	0008      	movs	r0, r1
 8002e94:	f7ff ffd8 	bl	8002e48 <__clzsi2>
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)

08002e9c <new_adc_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hadc is the adc and _total_ranks are the total ranks.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ADCSensor object
ADCSensor *new_adc_sensor(ADC_HandleTypeDef *hadc, uint8_t _total_ranks) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	000a      	movs	r2, r1
 8002ea6:	1cfb      	adds	r3, r7, #3
 8002ea8:	701a      	strb	r2, [r3, #0]
    ADCSensor *adc_sensor = (ADCSensor*) malloc(sizeof(ADCSensor));
 8002eaa:	201c      	movs	r0, #28
 8002eac:	f005 fd1c 	bl	80088e8 <malloc>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	60bb      	str	r3, [r7, #8]
    adc_sensor->adc = hadc;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
    adc_sensor->total_ranks = _total_ranks;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1cfa      	adds	r2, r7, #3
 8002ebe:	7812      	ldrb	r2, [r2, #0]
 8002ec0:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 8002ec2:	230f      	movs	r3, #15
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e00d      	b.n	8002ee8 <new_adc_sensor+0x4c>
        adc_sensor->values[i] = 0;
 8002ecc:	210f      	movs	r1, #15
 8002ece:	187b      	adds	r3, r7, r1
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	18d3      	adds	r3, r2, r3
 8002ed8:	3306      	adds	r3, #6
 8002eda:	2200      	movs	r2, #0
 8002edc:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 8002ede:	187b      	adds	r3, r7, r1
 8002ee0:	187a      	adds	r2, r7, r1
 8002ee2:	7812      	ldrb	r2, [r2, #0]
 8002ee4:	3201      	adds	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	230f      	movs	r3, #15
 8002eea:	18fa      	adds	r2, r7, r3
 8002eec:	1cfb      	adds	r3, r7, #3
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d3ea      	bcc.n	8002ecc <new_adc_sensor+0x30>
    }
    return adc_sensor;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b004      	add	sp, #16
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <get_adc_sensor_value>:

// REQUIRES: adc_sensor is an ADCSensor object and rank is the index
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint16_t get_adc_sensor_value(ADCSensor *adc_sensor, uint8_t rank) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	000a      	movs	r2, r1
 8002f0a:	1cfb      	adds	r3, r7, #3
 8002f0c:	701a      	strb	r2, [r3, #0]
    return adc_sensor->values[rank];
 8002f0e:	1cfb      	adds	r3, r7, #3
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	18d3      	adds	r3, r2, r3
 8002f18:	3306      	adds	r3, #6
 8002f1a:	881b      	ldrh	r3, [r3, #0]
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <update_adc_sensor_values>:

// REQUIRES: adc_sensor is an ADCSensor object
// MODIFIES: values
// EFFECTS: Updates the stored value of value.
void update_adc_sensor_values(ADCSensor *adc_sensor) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e00b      	b.n	8002f4a <update_adc_sensor_values+0x26>
		HAL_ADC_Start_DMA(adc_sensor->adc, adc_sensor->values, adc_sensor->total_ranks);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	1d99      	adds	r1, r3, #6
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	791b      	ldrb	r3, [r3, #4]
 8002f3e:	001a      	movs	r2, r3
 8002f40:	f002 f8b0 	bl	80050a4 <HAL_ADC_Start_DMA>
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	001a      	movs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4293      	cmp	r3, r2
 8002f54:	dbed      	blt.n	8002f32 <update_adc_sensor_values+0xe>
	}
}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b004      	add	sp, #16
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <new_battery_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created BatterySensor object
BatterySensor *new_battery_sensor(ADCSensor *_adc_sensor, uint8_t _rank) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	000a      	movs	r2, r1
 8002f6a:	1cfb      	adds	r3, r7, #3
 8002f6c:	701a      	strb	r2, [r3, #0]
	BatterySensor *battery_sensor = (BatterySensor*) malloc(sizeof(BatterySensor));
 8002f6e:	2008      	movs	r0, #8
 8002f70:	f005 fcba 	bl	80088e8 <malloc>
 8002f74:	0003      	movs	r3, r0
 8002f76:	60fb      	str	r3, [r7, #12]
	battery_sensor->adc_sensor = _adc_sensor;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	601a      	str	r2, [r3, #0]
	battery_sensor->rank = _rank;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1cfa      	adds	r2, r7, #3
 8002f82:	7812      	ldrb	r2, [r2, #0]
 8002f84:	711a      	strb	r2, [r3, #4]
	return battery_sensor;
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b004      	add	sp, #16
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <get_battery_sensor_data>:

// REQUIRES: ForceSensor is a force_sensor object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value battery sensor data.
uint8_t get_battery_sensor_data(BatterySensor *battery_sensor) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    uint32_t raw_value = get_adc_sensor_value(battery_sensor->adc_sensor, battery_sensor->rank);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	791b      	ldrb	r3, [r3, #4]
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	0010      	movs	r0, r2
 8002fa4:	f7ff ffac 	bl	8002f00 <get_adc_sensor_value>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	60fb      	str	r3, [r7, #12]
    float voltage = raw_value * 3.3f / 64.0;
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7fe f89b 	bl	80010e8 <__aeabi_ui2f>
 8002fb2:	1c03      	adds	r3, r0, #0
 8002fb4:	4914      	ldr	r1, [pc, #80]	; (8003008 <get_battery_sensor_data+0x78>)
 8002fb6:	1c18      	adds	r0, r3, #0
 8002fb8:	f7fd ff70 	bl	8000e9c <__aeabi_fmul>
 8002fbc:	1c03      	adds	r3, r0, #0
 8002fbe:	2185      	movs	r1, #133	; 0x85
 8002fc0:	05c9      	lsls	r1, r1, #23
 8002fc2:	1c18      	adds	r0, r3, #0
 8002fc4:	f7fd fda2 	bl	8000b0c <__aeabi_fdiv>
 8002fc8:	1c03      	adds	r3, r0, #0
 8002fca:	60bb      	str	r3, [r7, #8]
    if (voltage > BATTERY_SENSOR_FIVE_BATTERY) {
 8002fcc:	490f      	ldr	r1, [pc, #60]	; (800300c <get_battery_sensor_data+0x7c>)
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	f7fd fa8e 	bl	80004f0 <__aeabi_fcmpgt>
 8002fd4:	1e03      	subs	r3, r0, #0
 8002fd6:	d001      	beq.n	8002fdc <get_battery_sensor_data+0x4c>
    	return 5;
 8002fd8:	2305      	movs	r3, #5
 8002fda:	e010      	b.n	8002ffe <get_battery_sensor_data+0x6e>
    }
    else if (voltage > BATTERY_SENSOR_THREE_BATTERY) {
 8002fdc:	490c      	ldr	r1, [pc, #48]	; (8003010 <get_battery_sensor_data+0x80>)
 8002fde:	68b8      	ldr	r0, [r7, #8]
 8002fe0:	f7fd fa86 	bl	80004f0 <__aeabi_fcmpgt>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d001      	beq.n	8002fec <get_battery_sensor_data+0x5c>
    	return 3;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e008      	b.n	8002ffe <get_battery_sensor_data+0x6e>
    }
    else if (voltage > BATTERY_SENSOR_ONE_BATTERY) {
 8002fec:	4909      	ldr	r1, [pc, #36]	; (8003014 <get_battery_sensor_data+0x84>)
 8002fee:	68b8      	ldr	r0, [r7, #8]
 8002ff0:	f7fd fa7e 	bl	80004f0 <__aeabi_fcmpgt>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d001      	beq.n	8002ffc <get_battery_sensor_data+0x6c>
    	return 1;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <get_battery_sensor_data+0x6e>
    }
    return 0;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	0018      	movs	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	b004      	add	sp, #16
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	40533333 	.word	0x40533333
 800300c:	3faccccd 	.word	0x3faccccd
 8003010:	3f8ccccd 	.word	0x3f8ccccd
 8003014:	3f333333 	.word	0x3f333333

08003018 <new_wireless>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: huart is a UART channel
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Wireless object
Wireless *new_wireless(UART_HandleTypeDef *huart) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	Wireless *wireless = (Wireless*) malloc(sizeof(Wireless));
 8003020:	2018      	movs	r0, #24
 8003022:	f005 fc61 	bl	80088e8 <malloc>
 8003026:	0003      	movs	r3, r0
 8003028:	60fb      	str	r3, [r7, #12]
	wireless->uart = huart;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	601a      	str	r2, [r3, #0]
	return wireless;
 8003030:	68fb      	ldr	r3, [r7, #12]
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b004      	add	sp, #16
 8003038:	bd80      	pop	{r7, pc}

0800303a <refresh_wireless_status>:

// REQUIRES: wireless is a Wireless object
// MODIFIES: Nothing
// EFFECTS: Increases ms_since_comms.
// Assumes function is called every 2 ms
void refresh_wireless_status(Wireless *wireless) {
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
	wireless->ms_since_comms += 2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	1c9a      	adds	r2, r3, #2
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	615a      	str	r2, [r3, #20]
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <is_wireless_comms_lost>:

// REQUIRES: wireless is a Wireless object
// MODIFIES: Nothing
// EFFECTS: Returns whether or not wireless comms were lost
bool is_wireless_comms_lost(Wireless *wireless) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	return wireless->ms_since_comms >= TIME_INDICATING_WIRELESS_COMMS_LOST_MS;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <is_wireless_comms_lost+0x20>)
 8003062:	429a      	cmp	r2, r3
 8003064:	419b      	sbcs	r3, r3
 8003066:	425b      	negs	r3, r3
 8003068:	b2db      	uxtb	r3, r3
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b002      	add	sp, #8
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	00000bb7 	.word	0x00000bb7

08003078 <send_wireless_speed>:

// REQUIRES: wireless is a Wireless object
// and speed is the speed data
// MODIFIES: Nothing
// EFFECTS: Sends speed data over wireless
void send_wireless_speed(Wireless *wireless, int speed) {
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	char string[sizeof(wireless->uart_buffer)];
	sprintf((char *)string, "S%iES%iE", speed, speed);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	4907      	ldr	r1, [pc, #28]	; (80030a4 <send_wireless_speed+0x2c>)
 8003088:	240c      	movs	r4, #12
 800308a:	1938      	adds	r0, r7, r4
 800308c:	f006 fbb6 	bl	80097fc <siprintf>
	send_wireless_string_10(wireless, string);
 8003090:	193a      	adds	r2, r7, r4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0011      	movs	r1, r2
 8003096:	0018      	movs	r0, r3
 8003098:	f000 f924 	bl	80032e4 <send_wireless_string_10>
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b007      	add	sp, #28
 80030a2:	bd90      	pop	{r4, r7, pc}
 80030a4:	0800d378 	.word	0x0800d378

080030a8 <send_wireless_detect_skater_status>:

// REQUIRES: wireless is a Wireless object
// and skater_status is 0 if board does not detect skater
// MODIFIES: Nothing
// EFFECTS: Send wireless skater status
void send_wireless_detect_skater_status(Wireless *wireless, uint8_t skater_status) {
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	000a      	movs	r2, r1
 80030b2:	1cfb      	adds	r3, r7, #3
 80030b4:	701a      	strb	r2, [r3, #0]
	char string[sizeof(wireless->uart_buffer)];
	sprintf((char *)string, "D%iED%iE", skater_status, skater_status);
 80030b6:	1cfb      	adds	r3, r7, #3
 80030b8:	781a      	ldrb	r2, [r3, #0]
 80030ba:	1cfb      	adds	r3, r7, #3
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	4907      	ldr	r1, [pc, #28]	; (80030dc <send_wireless_detect_skater_status+0x34>)
 80030c0:	240c      	movs	r4, #12
 80030c2:	1938      	adds	r0, r7, r4
 80030c4:	f006 fb9a 	bl	80097fc <siprintf>
	send_wireless_string_10(wireless, string);
 80030c8:	193a      	adds	r2, r7, r4
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0011      	movs	r1, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f908 	bl	80032e4 <send_wireless_string_10>
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b007      	add	sp, #28
 80030da:	bd90      	pop	{r4, r7, pc}
 80030dc:	0800d384 	.word	0x0800d384

080030e0 <send_wireless_battery_data>:

// REQUIRES: wireless is a Wireless object
// and battery_data is the battery data
// MODIFIES: Nothing
// EFFECTS: Sends battery data over wireless
void send_wireless_battery_data(Wireless *wireless, int battery_data) {
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	char string[sizeof(wireless->uart_buffer)];
	sprintf((char *)string, "B%iEB%iE", battery_data, battery_data);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	4907      	ldr	r1, [pc, #28]	; (800310c <send_wireless_battery_data+0x2c>)
 80030f0:	240c      	movs	r4, #12
 80030f2:	1938      	adds	r0, r7, r4
 80030f4:	f006 fb82 	bl	80097fc <siprintf>
	send_wireless_string_10(wireless, string);
 80030f8:	193a      	adds	r2, r7, r4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0011      	movs	r1, r2
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 f8f0 	bl	80032e4 <send_wireless_string_10>
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b007      	add	sp, #28
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	0800d390 	.word	0x0800d390

08003110 <parse_wireless_message>:

// REQUIRES: wireless and display are objects
// MODIFIES: Nothing
// EFFECTS: Attempts to parse data based on wireless buffer and returns true if success
bool parse_wireless_message(Wireless *wireless, Skater* skater, Joint* joint, char start_char) {
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b08d      	sub	sp, #52	; 0x34
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	001a      	movs	r2, r3
 800311e:	1cfb      	adds	r3, r7, #3
 8003120:	701a      	strb	r2, [r3, #0]
	int start_of_transmit = -1;
 8003122:	2301      	movs	r3, #1
 8003124:	425b      	negs	r3, r3
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
	int end_of_transmit = -1;
 8003128:	2301      	movs	r3, #1
 800312a:	425b      	negs	r3, r3
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i = 0; i < sizeof(wireless->uart_buffer) - 1; ++i) {
 800312e:	2300      	movs	r3, #0
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e01c      	b.n	800316e <parse_wireless_message+0x5e>
		if (wireless->uart_buffer[i] == start_char && isdigit((unsigned char)wireless->uart_buffer[i + 1])) {
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	18d3      	adds	r3, r2, r3
 800313a:	3304      	adds	r3, #4
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	1cfa      	adds	r2, r7, #3
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d110      	bne.n	8003168 <parse_wireless_message+0x58>
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	3301      	adds	r3, #1
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	18d3      	adds	r3, r2, r3
 800314e:	791b      	ldrb	r3, [r3, #4]
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <parse_wireless_message+0xf4>)
 8003154:	18d3      	adds	r3, r2, r3
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	001a      	movs	r2, r3
 800315a:	2304      	movs	r3, #4
 800315c:	4013      	ands	r3, r2
 800315e:	d003      	beq.n	8003168 <parse_wireless_message+0x58>
			start_of_transmit = i + 1;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	3301      	adds	r3, #1
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003166:	e005      	b.n	8003174 <parse_wireless_message+0x64>
	for (int i = 0; i < sizeof(wireless->uart_buffer) - 1; ++i) {
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	3301      	adds	r3, #1
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	2b08      	cmp	r3, #8
 8003172:	d9df      	bls.n	8003134 <parse_wireless_message+0x24>
		}
	}
	if (start_of_transmit == -1) return false;
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	3301      	adds	r3, #1
 8003178:	d101      	bne.n	800317e <parse_wireless_message+0x6e>
 800317a:	2300      	movs	r3, #0
 800317c:	e03e      	b.n	80031fc <parse_wireless_message+0xec>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	e01b      	b.n	80031bc <parse_wireless_message+0xac>
		if (wireless->uart_buffer[i] == 'E') {
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	18d3      	adds	r3, r2, r3
 800318a:	3304      	adds	r3, #4
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b45      	cmp	r3, #69	; 0x45
 8003190:	d102      	bne.n	8003198 <parse_wireless_message+0x88>
			end_of_transmit = i;
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8003196:	e014      	b.n	80031c2 <parse_wireless_message+0xb2>
		}
		else {
			if (!isdigit(wireless->uart_buffer[i])) return false;
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	18d3      	adds	r3, r2, r3
 800319e:	3304      	adds	r3, #4
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	4b17      	ldr	r3, [pc, #92]	; (8003204 <parse_wireless_message+0xf4>)
 80031a6:	18d3      	adds	r3, r2, r3
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	001a      	movs	r2, r3
 80031ac:	2304      	movs	r3, #4
 80031ae:	4013      	ands	r3, r2
 80031b0:	d101      	bne.n	80031b6 <parse_wireless_message+0xa6>
 80031b2:	2300      	movs	r3, #0
 80031b4:	e022      	b.n	80031fc <parse_wireless_message+0xec>
	for (int i = start_of_transmit; i < sizeof(wireless->uart_buffer); ++i) {
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	3301      	adds	r3, #1
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2b09      	cmp	r3, #9
 80031c0:	d9e0      	bls.n	8003184 <parse_wireless_message+0x74>
		}
	}
	if (end_of_transmit == -1) return false;
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	3301      	adds	r3, #1
 80031c6:	d101      	bne.n	80031cc <parse_wireless_message+0xbc>
 80031c8:	2300      	movs	r3, #0
 80031ca:	e017      	b.n	80031fc <parse_wireless_message+0xec>

	char contents_string[5];
	int length = end_of_transmit - start_of_transmit;
 80031cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	61fb      	str	r3, [r7, #28]
	memcpy(contents_string, wireless->uart_buffer + start_of_transmit, length);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1d1a      	adds	r2, r3, #4
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	18d1      	adds	r1, r2, r3
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	2410      	movs	r4, #16
 80031e0:	193b      	adds	r3, r7, r4
 80031e2:	0018      	movs	r0, r3
 80031e4:	f005 fb8a 	bl	80088fc <memcpy>

	int content = atoi(contents_string);
 80031e8:	193b      	adds	r3, r7, r4
 80031ea:	0018      	movs	r0, r3
 80031ec:	f005 fb4c 	bl	8008888 <atoi>
 80031f0:	0003      	movs	r3, r0
 80031f2:	61bb      	str	r3, [r7, #24]

	wireless->message_contents = content;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	611a      	str	r2, [r3, #16]

	return true;
 80031fa:	2301      	movs	r3, #1
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	b00d      	add	sp, #52	; 0x34
 8003202:	bd90      	pop	{r4, r7, pc}
 8003204:	0800d564 	.word	0x0800d564

08003208 <receive_wireless>:

// REQUIRES: wireless, skater, and joint are objects
// MODIFIES: Nothing
// EFFECTS: Receives the wireless angle and changes the joint angle if skater is on the board
void receive_wireless(Wireless *wireless, Skater* skater, Joint* joint) {
 8003208:	b5b0      	push	{r4, r5, r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
//	for (int i = 0; i < 10; ++i) {
//		wireless->uart_buffer[i] = 0;
//	}
//	HAL_Delay(10);
	HAL_UART_Receive_DMA(wireless->uart, (uint8_t *)wireless->uart_buffer, sizeof(wireless->uart_buffer));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3304      	adds	r3, #4
 800321c:	220a      	movs	r2, #10
 800321e:	0019      	movs	r1, r3
 8003220:	f004 fb14 	bl	800784c <HAL_UART_Receive_DMA>
//	HAL_Delay(10);
	bool target_success =  parse_wireless_message(wireless, skater, joint, 'T');
 8003224:	251b      	movs	r5, #27
 8003226:	197c      	adds	r4, r7, r5
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	2354      	movs	r3, #84	; 0x54
 8003230:	f7ff ff6e 	bl	8003110 <parse_wireless_message>
 8003234:	0003      	movs	r3, r0
 8003236:	7023      	strb	r3, [r4, #0]
	if (target_success) {
 8003238:	197b      	adds	r3, r7, r5
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d049      	beq.n	80032d4 <receive_wireless+0xcc>
		wireless->ms_since_comms = 0;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	615a      	str	r2, [r3, #20]
		bool is_skater_here = !has_skater_recently_left_board(skater);
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	0018      	movs	r0, r3
 800324a:	f000 fff0 	bl	800422e <has_skater_recently_left_board>
 800324e:	0003      	movs	r3, r0
 8003250:	1e5a      	subs	r2, r3, #1
 8003252:	4193      	sbcs	r3, r2
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2201      	movs	r2, #1
 8003258:	4053      	eors	r3, r2
 800325a:	b2db      	uxtb	r3, r3
 800325c:	001a      	movs	r2, r3
 800325e:	201a      	movs	r0, #26
 8003260:	183b      	adds	r3, r7, r0
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	781a      	ldrb	r2, [r3, #0]
 8003266:	2101      	movs	r1, #1
 8003268:	400a      	ands	r2, r1
 800326a:	701a      	strb	r2, [r3, #0]
		if (is_skater_here) {
 800326c:	183b      	adds	r3, r7, r0
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02e      	beq.n	80032d2 <receive_wireless+0xca>
			int trigger_val = wireless->message_contents;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	617b      	str	r3, [r7, #20]
			int32_t desired_steps = RIGHT_BEFORE_BRAKING_STEPS;
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <receive_wireless+0xd4>)
 800327c:	61fb      	str	r3, [r7, #28]
			if (0 <= trigger_val && trigger_val < 10) {
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	db05      	blt.n	8003290 <receive_wireless+0x88>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b09      	cmp	r3, #9
 8003288:	dc02      	bgt.n	8003290 <receive_wireless+0x88>
				desired_steps = RIGHT_BEFORE_BRAKING_STEPS;
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <receive_wireless+0xd4>)
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	e01a      	b.n	80032c6 <receive_wireless+0xbe>
			}
			else if (trigger_val < 32) {
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b1f      	cmp	r3, #31
 8003294:	dc02      	bgt.n	800329c <receive_wireless+0x94>
				desired_steps = RIGHT_BEFORE_BRAKING_STEPS;
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <receive_wireless+0xd4>)
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e014      	b.n	80032c6 <receive_wireless+0xbe>
			}
			else if (trigger_val < 63) {
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b3e      	cmp	r3, #62	; 0x3e
 80032a0:	dc0c      	bgt.n	80032bc <receive_wireless+0xb4>
				desired_steps = (trigger_val - 32) * (MAX_BRAKING_STEPS - RIGHT_BEFORE_BRAKING_STEPS) / 32 + RIGHT_BEFORE_BRAKING_STEPS;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3b20      	subs	r3, #32
 80032a6:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <receive_wireless+0xd4>)
 80032a8:	4353      	muls	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	da00      	bge.n	80032b0 <receive_wireless+0xa8>
 80032ae:	331f      	adds	r3, #31
 80032b0:	115b      	asrs	r3, r3, #5
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <receive_wireless+0xd4>)
 80032b4:	4694      	mov	ip, r2
 80032b6:	4463      	add	r3, ip
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e004      	b.n	80032c6 <receive_wireless+0xbe>
			}
			else if (trigger_val < 64){
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b3f      	cmp	r3, #63	; 0x3f
 80032c0:	dc01      	bgt.n	80032c6 <receive_wireless+0xbe>
				desired_steps = MAX_BRAKING_STEPS;
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <receive_wireless+0xd8>)
 80032c4:	61fb      	str	r3, [r7, #28]
			}
			set_joint_target(joint, desired_steps);
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	0011      	movs	r1, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 f98d 	bl	80035ec <set_joint_target>
		}
		return;
 80032d2:	46c0      	nop			; (mov r8, r8)
	}
}
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b008      	add	sp, #32
 80032d8:	bdb0      	pop	{r4, r5, r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	000032c8 	.word	0x000032c8
 80032e0:	00006590 	.word	0x00006590

080032e4 <send_wireless_string_10>:

// REQUIRES: wireless is a Wireless object
// and string is an array of 10 characters.
// MODIFIES: Nothing
// EFFECTS: Sends the character array over wireless
void send_wireless_string_10(Wireless *wireless, char string[10]) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
	HAL_Delay(50);
 80032ee:	2032      	movs	r0, #50	; 0x32
 80032f0:	f001 fbc4 	bl	8004a7c <HAL_Delay>
	HAL_UART_Transmit(wireless->uart, (uint8_t *)string, sizeof(wireless->uart_buffer), 200);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	23c8      	movs	r3, #200	; 0xc8
 80032fc:	220a      	movs	r2, #10
 80032fe:	f004 fa09 	bl	8007714 <HAL_UART_Transmit>
	HAL_Delay(50);
 8003302:	2032      	movs	r0, #50	; 0x32
 8003304:	f001 fbba 	bl	8004a7c <HAL_Delay>
}
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	46bd      	mov	sp, r7
 800330c:	b002      	add	sp, #8
 800330e:	bd80      	pop	{r7, pc}

08003310 <new_force_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ForceSensor object
ForceSensor *new_force_sensor(ADCSensor *_adc_sensor, uint8_t _rank) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	000a      	movs	r2, r1
 800331a:	1cfb      	adds	r3, r7, #3
 800331c:	701a      	strb	r2, [r3, #0]
    ForceSensor *force_sensor = (ForceSensor*) malloc(sizeof(ForceSensor));
 800331e:	2008      	movs	r0, #8
 8003320:	f005 fae2 	bl	80088e8 <malloc>
 8003324:	0003      	movs	r3, r0
 8003326:	60fb      	str	r3, [r7, #12]
	force_sensor->adc_sensor = _adc_sensor;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]
    force_sensor->rank = _rank;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1cfa      	adds	r2, r7, #3
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	711a      	strb	r2, [r3, #4]
	return force_sensor;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	b004      	add	sp, #16
 800333e:	bd80      	pop	{r7, pc}

08003340 <get_force_sensor_data>:

// REQUIRES: ForceSensor is a force_sensor object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value force sensor voltage output.
uint16_t get_force_sensor_data(ForceSensor *force_sensor) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
    return get_adc_sensor_value(force_sensor->adc_sensor, force_sensor->rank);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	791b      	ldrb	r3, [r3, #4]
 8003350:	0019      	movs	r1, r3
 8003352:	0010      	movs	r0, r2
 8003354:	f7ff fdd4 	bl	8002f00 <get_adc_sensor_value>
 8003358:	0003      	movs	r3, r0
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b002      	add	sp, #8
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <new_imu_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hi2c is the i2c channel and _addr is the address
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created IMU object
IMU *new_imu_sensor(I2C_HandleTypeDef *hi2c, uint8_t _addr) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	000a      	movs	r2, r1
 800336e:	1cfb      	adds	r3, r7, #3
 8003370:	701a      	strb	r2, [r3, #0]
    IMU *imu = (IMU*) malloc(sizeof(IMU));
 8003372:	2014      	movs	r0, #20
 8003374:	f005 fab8 	bl	80088e8 <malloc>
 8003378:	0003      	movs	r3, r0
 800337a:	60fb      	str	r3, [r7, #12]
	imu->i2c = hi2c;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]
	imu->addr = _addr;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1cfa      	adds	r2, r7, #3
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	711a      	strb	r2, [r3, #4]
	imu->accel_values[0] = 0.0f;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	609a      	str	r2, [r3, #8]
	imu->accel_values[1] = 0.0f;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	60da      	str	r2, [r3, #12]
	imu->accel_values[2] = IMU_Z_ACCEL_GRAVITY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4a03      	ldr	r2, [pc, #12]	; (80033a8 <new_imu_sensor+0x44>)
 800339a:	611a      	str	r2, [r3, #16]
	return imu;
 800339c:	68fb      	ldr	r3, [r7, #12]
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	c11cf5c3 	.word	0xc11cf5c3

080033ac <refresh_imu_accel_in_axis>:

// REQUIRES: IMU is an IMU object and axis is an axis
// MODIFIES: nothing
// EFFECTS: Updates the imu acceleration in the axis in m/s^2
void refresh_imu_accel_in_axis(IMU *imu, axis axis) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	000a      	movs	r2, r1
 80033b6:	1cfb      	adds	r3, r7, #3
 80033b8:	701a      	strb	r2, [r3, #0]
	// TODO;
	return;
 80033ba:	46c0      	nop			; (mov r8, r8)
}
 80033bc:	46bd      	mov	sp, r7
 80033be:	b002      	add	sp, #8
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <get_imu_accel_in_axis>:

// REQUIRES: IMU is an IMU object and axis is an axis
// MODIFIES: nothing
// EFFECTS: Returns the imu acceleration in the axis in m/s^2
float get_imu_accel_in_axis(IMU *imu, axis axis) {
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	000a      	movs	r2, r1
 80033cc:	1cfb      	adds	r3, r7, #3
 80033ce:	701a      	strb	r2, [r3, #0]
    return imu->accel_values[axis];
 80033d0:	1cfb      	adds	r3, r7, #3
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3202      	adds	r2, #2
 80033d8:	0092      	lsls	r2, r2, #2
 80033da:	58d3      	ldr	r3, [r2, r3]
}
 80033dc:	1c18      	adds	r0, r3, #0
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <is_imu_z_accel_equal_to_gravity>:

// REQUIRES: IMU is an IMU object
// MODIFIES: nothing
// EFFECTS: Returns if IMU z accel is equal to gravity
bool is_imu_z_accel_equal_to_gravity(IMU *imu) {
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
    return fabs(get_imu_accel_in_axis(imu, Z_Axis) - IMU_Z_ACCEL_GRAVITY) < IMU_ACCEL_NOISE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2102      	movs	r1, #2
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff ffe6 	bl	80033c2 <get_imu_accel_in_axis>
 80033f6:	1c03      	adds	r3, r0, #0
 80033f8:	490b      	ldr	r1, [pc, #44]	; (8003428 <is_imu_z_accel_equal_to_gravity+0x44>)
 80033fa:	1c18      	adds	r0, r3, #0
 80033fc:	f7fd f9e8 	bl	80007d0 <__aeabi_fadd>
 8003400:	1c03      	adds	r3, r0, #0
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	085b      	lsrs	r3, r3, #1
 8003406:	2201      	movs	r2, #1
 8003408:	1c14      	adds	r4, r2, #0
 800340a:	21fe      	movs	r1, #254	; 0xfe
 800340c:	0589      	lsls	r1, r1, #22
 800340e:	1c18      	adds	r0, r3, #0
 8003410:	f7fd f85a 	bl	80004c8 <__aeabi_fcmplt>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d101      	bne.n	800341c <is_imu_z_accel_equal_to_gravity+0x38>
 8003418:	2300      	movs	r3, #0
 800341a:	1c1c      	adds	r4, r3, #0
 800341c:	b2e3      	uxtb	r3, r4
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b003      	add	sp, #12
 8003424:	bd90      	pop	{r4, r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	411cf5c3 	.word	0x411cf5c3

0800342c <new_interrupt_timer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _timer corresponds to timer
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created InterruptTimer object
InterruptTimer *new_interrupt_timer(TIM_HandleTypeDef *_timer) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	InterruptTimer *interrupt_timer = (InterruptTimer*) malloc(sizeof(InterruptTimer));
 8003434:	2004      	movs	r0, #4
 8003436:	f005 fa57 	bl	80088e8 <malloc>
 800343a:	0003      	movs	r3, r0
 800343c:	60fb      	str	r3, [r7, #12]
	interrupt_timer->timer = _timer;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	601a      	str	r2, [r3, #0]
	return interrupt_timer;
 8003444:	68fb      	ldr	r3, [r7, #12]
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b004      	add	sp, #16
 800344c:	bd80      	pop	{r7, pc}

0800344e <start_interrupt_timer>:

// REQUIRES: interrupt_timer is an InterruptTimer object
// MODIFIES: nothing
// EFFECTS: Enables interrupts for the interrupt timer
void start_interrupt_timer(InterruptTimer *interrupt_timer) {
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(interrupt_timer->timer);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	0018      	movs	r0, r3
 800345c:	f003 fed0 	bl	8007200 <HAL_TIM_Base_Start_IT>
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <new_joint>:
// REQUIRES: _motor is a Motor object,
// _potentiometer is a Potentiometer object,
// and _rest_limit_switch_pin and _brake_limit_switch_pin is a PinData object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Joint object
Joint *new_joint(Motor* _motor, Potentiometer* _potentiometer, PinData* _rest_limit_switch_pin, PinData* _brake_limit_switch_pin) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
	Joint *joint = (Joint*) malloc(sizeof(Joint));
 8003476:	2020      	movs	r0, #32
 8003478:	f005 fa36 	bl	80088e8 <malloc>
 800347c:	0003      	movs	r3, r0
 800347e:	617b      	str	r3, [r7, #20]
	joint->motor = _motor;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	601a      	str	r2, [r3, #0]
    joint->potentiometer = _potentiometer;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	605a      	str	r2, [r3, #4]
    joint->rest_limit_switch_pin = _rest_limit_switch_pin;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	609a      	str	r2, [r3, #8]
    joint->brake_limit_switch_pin = _brake_limit_switch_pin;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	60da      	str	r2, [r3, #12]
    joint->potentiometer_value_at_rest_offset = 0;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
    joint->current_angle_steps = CALIBRATION_POINT_REST_STEPS;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	615a      	str	r2, [r3, #20]
    joint->desired_angle_steps = CALIBRATION_POINT_REST_STEPS;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2200      	movs	r2, #0
 80034a8:	619a      	str	r2, [r3, #24]
	joint->is_calibrated = false;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
	joint->is_rest_limit_switch_activated = true;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2201      	movs	r2, #1
 80034b4:	775a      	strb	r2, [r3, #29]
	joint->is_brake_limit_switch_activated = false;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	779a      	strb	r2, [r3, #30]
	return joint;
 80034bc:	697b      	ldr	r3, [r7, #20]
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b006      	add	sp, #24
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <is_joint_close_enough_to_target>:

// REQUIRES: joint is a Joint object
// MODIFIES: Nothing
// EFFECTS: Returns whether or not current joint angle is close enough to desired angle
bool is_joint_close_enough_to_target(Joint *joint) {
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
	return joint->desired_angle_steps == joint->current_angle_steps;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	425a      	negs	r2, r3
 80034da:	4153      	adcs	r3, r2
 80034dc:	b2db      	uxtb	r3, r3
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b002      	add	sp, #8
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <move_joint_to_target>:

// REQUIRES: joint is a Joint object
// MODIFIES: Nothing
// EFFECTS: Moves the motor based on current steps and desired steps
void move_joint_to_target(Joint *joint) {
 80034e6:	b590      	push	{r4, r7, lr}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
	if (!is_joint_close_enough_to_target(joint)) {
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff ffe8 	bl	80034c6 <is_joint_close_enough_to_target>
 80034f6:	0003      	movs	r3, r0
 80034f8:	001a      	movs	r2, r3
 80034fa:	2301      	movs	r3, #1
 80034fc:	4053      	eors	r3, r2
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d037      	beq.n	8003574 <move_joint_to_target+0x8e>
		bool is_difference_steps_positive = joint->desired_angle_steps > joint->current_angle_steps;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6999      	ldr	r1, [r3, #24]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	230f      	movs	r3, #15
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	2001      	movs	r0, #1
 8003512:	4291      	cmp	r1, r2
 8003514:	dc01      	bgt.n	800351a <move_joint_to_target+0x34>
 8003516:	2200      	movs	r2, #0
 8003518:	1c10      	adds	r0, r2, #0
 800351a:	7018      	strb	r0, [r3, #0]
		bool direction = !((is_difference_steps_positive) ^ IS_MOTOR_SAME_DIRECTION_AS_POTENTIOMETER);
 800351c:	240f      	movs	r4, #15
 800351e:	193b      	adds	r3, r7, r4
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	1e5a      	subs	r2, r3, #1
 8003524:	4193      	sbcs	r3, r2
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2201      	movs	r2, #1
 800352a:	4053      	eors	r3, r2
 800352c:	b2db      	uxtb	r3, r3
 800352e:	001a      	movs	r2, r3
 8003530:	200e      	movs	r0, #14
 8003532:	183b      	adds	r3, r7, r0
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	2101      	movs	r1, #1
 800353a:	400a      	ands	r2, r1
 800353c:	701a      	strb	r2, [r3, #0]
		step_motor_direction(joint->motor, direction);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	183b      	adds	r3, r7, r0
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	0019      	movs	r1, r3
 8003548:	0010      	movs	r0, r2
 800354a:	f000 fdb5 	bl	80040b8 <step_motor_direction>
		int8_t steps = is_difference_steps_positive ? 1 : -1;
 800354e:	193b      	adds	r3, r7, r4
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <move_joint_to_target+0x74>
 8003556:	2201      	movs	r2, #1
 8003558:	e001      	b.n	800355e <move_joint_to_target+0x78>
 800355a:	2301      	movs	r3, #1
 800355c:	425a      	negs	r2, r3
 800355e:	210d      	movs	r1, #13
 8003560:	187b      	adds	r3, r7, r1
 8003562:	701a      	strb	r2, [r3, #0]
		joint->current_angle_steps += steps;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	187b      	adds	r3, r7, r1
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b25b      	sxtb	r3, r3
 800356e:	18d2      	adds	r2, r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	615a      	str	r2, [r3, #20]
	}
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b005      	add	sp, #20
 800357a:	bd90      	pop	{r4, r7, pc}

0800357c <refresh_joint_limit_switch>:

// REQUIRES: joint is a Joint object
// MODIFIES: is_rest_limit_switch_activated and is_brake_limit_switch_activated
// EFFECTS: Updates joint limit switch value
void refresh_joint_limit_switch(Joint *joint) {
 800357c:	b5b0      	push	{r4, r5, r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	bool raw_rest_pin_value = get_pin_value(joint->rest_limit_switch_pin);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	250f      	movs	r5, #15
 800358a:	197c      	adds	r4, r7, r5
 800358c:	0018      	movs	r0, r3
 800358e:	f000 fdf2 	bl	8004176 <get_pin_value>
 8003592:	0003      	movs	r3, r0
 8003594:	7023      	strb	r3, [r4, #0]
	joint->is_rest_limit_switch_activated = raw_rest_pin_value;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	197a      	adds	r2, r7, r5
 800359a:	7812      	ldrb	r2, [r2, #0]
 800359c:	775a      	strb	r2, [r3, #29]
	if (joint->is_rest_limit_switch_activated) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7f5b      	ldrb	r3, [r3, #29]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <refresh_joint_limit_switch+0x3a>
		joint->is_calibrated = true;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	771a      	strb	r2, [r3, #28]
		zero_joint(joint);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 f830 	bl	8003614 <zero_joint>
			// TODO - currently does not support potentiometer offset
			joint->current_angle_steps = MAX_BRAKING_STEPS;
		}
	}

}
 80035b4:	e013      	b.n	80035de <refresh_joint_limit_switch+0x62>
		bool raw_brake_pin_value = get_pin_value(joint->brake_limit_switch_pin);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	250e      	movs	r5, #14
 80035bc:	197c      	adds	r4, r7, r5
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 fdd9 	bl	8004176 <get_pin_value>
 80035c4:	0003      	movs	r3, r0
 80035c6:	7023      	strb	r3, [r4, #0]
		joint->is_brake_limit_switch_activated = raw_brake_pin_value;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	197a      	adds	r2, r7, r5
 80035cc:	7812      	ldrb	r2, [r2, #0]
 80035ce:	779a      	strb	r2, [r3, #30]
		if (joint->is_brake_limit_switch_activated) {
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7f9b      	ldrb	r3, [r3, #30]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <refresh_joint_limit_switch+0x62>
			joint->current_angle_steps = MAX_BRAKING_STEPS;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a03      	ldr	r2, [pc, #12]	; (80035e8 <refresh_joint_limit_switch+0x6c>)
 80035dc:	615a      	str	r2, [r3, #20]
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bdb0      	pop	{r4, r5, r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	00006590 	.word	0x00006590

080035ec <set_joint_target>:

// REQUIRES: joint is a Joint object
// and target is an integer
// MODIFIES: desired_angle_steps
// EFFECTS: Changes the desired_angle_steps
void set_joint_target(Joint *joint, int32_t target) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
	if (joint->is_calibrated) {
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7f1b      	ldrb	r3, [r3, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <set_joint_target+0x1a>
		joint->desired_angle_steps = target;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	619a      	str	r2, [r3, #24]
	}
	else {
		joint->desired_angle_steps = CALIBRATION_POINT_REST_STEPS;
	}
}
 8003604:	e002      	b.n	800360c <set_joint_target+0x20>
		joint->desired_angle_steps = CALIBRATION_POINT_REST_STEPS;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	619a      	str	r2, [r3, #24]
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}

08003614 <zero_joint>:

// REQUIRES: joint is a Joint object
// MODIFIES: potentiometer_error
// EFFECTS: Updates the potentiometer_error so that
// current potentiometer readings are mapped to zero
void zero_joint(Joint *joint) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	joint->potentiometer_value_at_rest_offset = get_potentiometer_input(joint->potentiometer);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0018      	movs	r0, r3
 8003622:	f000 fddf 	bl	80041e4 <get_potentiometer_input>
 8003626:	0002      	movs	r2, r0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	611a      	str	r2, [r3, #16]
	joint->current_angle_steps = 0;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	615a      	str	r2, [r3, #20]
}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	46bd      	mov	sp, r7
 8003636:	b002      	add	sp, #8
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	receive_wireless(wireless, skater, joint);
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_UART_RxCpltCallback+0x24>)
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_UART_RxCpltCallback+0x28>)
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_UART_RxCpltCallback+0x2c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	001a      	movs	r2, r3
 8003652:	f7ff fdd9 	bl	8003208 <receive_wireless>
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b002      	add	sp, #8
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	2000050c 	.word	0x2000050c
 8003664:	20000504 	.word	0x20000504
 8003668:	200004fc 	.word	0x200004fc

0800366c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800366c:	b5b0      	push	{r4, r5, r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	if (htim == fast_interrupt_timer->timer) {
 8003674:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d111      	bne.n	80036a4 <HAL_TIM_PeriodElapsedCallback+0x38>

		set_pin_value(debug_pin_1, 1);
 8003680:	4b56      	ldr	r3, [pc, #344]	; (80037dc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	0018      	movs	r0, r3
 8003688:	f000 fd56 	bl	8004138 <set_pin_value>
		// 50 us
		move_joint_to_target(joint);
 800368c:	4b54      	ldr	r3, [pc, #336]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0018      	movs	r0, r3
 8003692:	f7ff ff28 	bl	80034e6 <move_joint_to_target>
		set_pin_value(debug_pin_1, 0);
 8003696:	4b51      	ldr	r3, [pc, #324]	; (80037dc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2100      	movs	r1, #0
 800369c:	0018      	movs	r0, r3
 800369e:	f000 fd4b 	bl	8004138 <set_pin_value>
	else if (htim == imu_interrupt_timer->timer) {
		// Called once every 200 ms
		refresh_imu_accel_in_axis(front_imu, Z_Axis);
		refresh_imu_accel_in_axis(back_imu, Z_Axis);
	}
}
 80036a2:	e095      	b.n	80037d0 <HAL_TIM_PeriodElapsedCallback+0x164>
	else if (htim == slow_interrupt_timer->timer) {
 80036a4:	4b4f      	ldr	r3, [pc, #316]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d000      	beq.n	80036b2 <HAL_TIM_PeriodElapsedCallback+0x46>
 80036b0:	e07c      	b.n	80037ac <HAL_TIM_PeriodElapsedCallback+0x140>
		update_adc_sensor_values(adc_sensor);
 80036b2:	4b4d      	ldr	r3, [pc, #308]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7ff fc34 	bl	8002f24 <update_adc_sensor_values>
			refresh_skater_status(skater);
 80036bc:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0x180>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 fddf 	bl	8004284 <refresh_skater_status>
			bool motor_thinks_is_at_rest_max = joint->current_angle_steps == MAX_REST_STEPS;
 80036c6:	4b46      	ldr	r3, [pc, #280]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	200f      	movs	r0, #15
 80036ce:	183b      	adds	r3, r7, r0
 80036d0:	4251      	negs	r1, r2
 80036d2:	414a      	adcs	r2, r1
 80036d4:	701a      	strb	r2, [r3, #0]
			if (motor_thinks_is_at_rest_max && !joint->is_rest_limit_switch_activated) {
 80036d6:	183b      	adds	r3, r7, r0
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d011      	beq.n	8003702 <HAL_TIM_PeriodElapsedCallback+0x96>
 80036de:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	7f5b      	ldrb	r3, [r3, #29]
 80036e4:	2201      	movs	r2, #1
 80036e6:	4053      	eors	r3, r2
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_TIM_PeriodElapsedCallback+0x96>
				joint->current_angle_steps += ARBITRARY_ADD_ANGLE_FOR_LIMIT_SWITCH_STEPS;
 80036ee:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	4b3a      	ldr	r3, [pc, #232]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	493d      	ldr	r1, [pc, #244]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80036fa:	468c      	mov	ip, r1
 80036fc:	4462      	add	r2, ip
 80036fe:	615a      	str	r2, [r3, #20]
 8003700:	e01f      	b.n	8003742 <HAL_TIM_PeriodElapsedCallback+0xd6>
				bool motor_thinks_is_at_brake_max = joint->current_angle_steps == MAX_BRAKING_STEPS;
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	200e      	movs	r0, #14
 800370a:	183b      	adds	r3, r7, r0
 800370c:	4939      	ldr	r1, [pc, #228]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800370e:	468c      	mov	ip, r1
 8003710:	4462      	add	r2, ip
 8003712:	4251      	negs	r1, r2
 8003714:	414a      	adcs	r2, r1
 8003716:	701a      	strb	r2, [r3, #0]
				if (motor_thinks_is_at_brake_max && !joint->is_brake_limit_switch_activated) {
 8003718:	183b      	adds	r3, r7, r0
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8003720:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	7f9b      	ldrb	r3, [r3, #30]
 8003726:	2201      	movs	r2, #1
 8003728:	4053      	eors	r3, r2
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_TIM_PeriodElapsedCallback+0xd6>
					joint->current_angle_steps -= ARBITRARY_ADD_ANGLE_FOR_LIMIT_SWITCH_STEPS;
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	492f      	ldr	r1, [pc, #188]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800373c:	468c      	mov	ip, r1
 800373e:	4462      	add	r2, ip
 8003740:	615a      	str	r2, [r3, #20]
			refresh_joint_limit_switch(joint);
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0018      	movs	r0, r3
 8003748:	f7ff ff18 	bl	800357c <refresh_joint_limit_switch>
		if (has_skater_recently_left_board(skater)) {
 800374c:	4b27      	ldr	r3, [pc, #156]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0x180>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0018      	movs	r0, r3
 8003752:	f000 fd6c 	bl	800422e <has_skater_recently_left_board>
 8003756:	1e03      	subs	r3, r0, #0
 8003758:	d014      	beq.n	8003784 <HAL_TIM_PeriodElapsedCallback+0x118>
			bool board_is_on_the_floor = is_imu_z_accel_equal_to_gravity(front_imu);
 800375a:	4b28      	ldr	r3, [pc, #160]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x190>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	250d      	movs	r5, #13
 8003760:	197c      	adds	r4, r7, r5
 8003762:	0018      	movs	r0, r3
 8003764:	f7ff fe3e 	bl	80033e4 <is_imu_z_accel_equal_to_gravity>
 8003768:	0003      	movs	r3, r0
 800376a:	7023      	strb	r3, [r4, #0]
			if (board_is_on_the_floor) {
 800376c:	197b      	adds	r3, r7, r5
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d015      	beq.n	80037a0 <HAL_TIM_PeriodElapsedCallback+0x134>
				set_joint_target(joint, FLOOR_BRAKING_STEPS_HARD);
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a21      	ldr	r2, [pc, #132]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800377a:	0011      	movs	r1, r2
 800377c:	0018      	movs	r0, r3
 800377e:	f7ff ff35 	bl	80035ec <set_joint_target>
 8003782:	e00d      	b.n	80037a0 <HAL_TIM_PeriodElapsedCallback+0x134>
		else if (USE_WIRELESS_COMMS_WATCHDOG && is_wireless_comms_lost(wireless)) {
 8003784:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff fc63 	bl	8003054 <is_wireless_comms_lost>
 800378e:	1e03      	subs	r3, r0, #0
 8003790:	d006      	beq.n	80037a0 <HAL_TIM_PeriodElapsedCallback+0x134>
			set_joint_target(joint, RIGHT_BEFORE_BRAKING_STEPS);
 8003792:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003798:	0011      	movs	r1, r2
 800379a:	0018      	movs	r0, r3
 800379c:	f7ff ff26 	bl	80035ec <set_joint_target>
		refresh_wireless_status(wireless);
 80037a0:	4b18      	ldr	r3, [pc, #96]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff fc48 	bl	800303a <refresh_wireless_status>
}
 80037aa:	e011      	b.n	80037d0 <HAL_TIM_PeriodElapsedCallback+0x164>
	else if (htim == imu_interrupt_timer->timer) {
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d10b      	bne.n	80037d0 <HAL_TIM_PeriodElapsedCallback+0x164>
		refresh_imu_accel_in_axis(front_imu, Z_Axis);
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x190>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2102      	movs	r1, #2
 80037be:	0018      	movs	r0, r3
 80037c0:	f7ff fdf4 	bl	80033ac <refresh_imu_accel_in_axis>
		refresh_imu_accel_in_axis(back_imu, Z_Axis);
 80037c4:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2102      	movs	r1, #2
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7ff fdee 	bl	80033ac <refresh_imu_accel_in_axis>
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bdb0      	pop	{r4, r5, r7, pc}
 80037d8:	20000530 	.word	0x20000530
 80037dc:	20000528 	.word	0x20000528
 80037e0:	200004fc 	.word	0x200004fc
 80037e4:	2000052c 	.word	0x2000052c
 80037e8:	200004e4 	.word	0x200004e4
 80037ec:	20000504 	.word	0x20000504
 80037f0:	000005dc 	.word	0x000005dc
 80037f4:	ffff9a70 	.word	0xffff9a70
 80037f8:	fffffa24 	.word	0xfffffa24
 80037fc:	200004ec 	.word	0x200004ec
 8003800:	000061a8 	.word	0x000061a8
 8003804:	2000050c 	.word	0x2000050c
 8003808:	000032c8 	.word	0x000032c8
 800380c:	20000534 	.word	0x20000534
 8003810:	200004f0 	.word	0x200004f0

08003814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	adc_sensor = new_adc_sensor(&hadc1, 3);
 800381a:	4b9b      	ldr	r3, [pc, #620]	; (8003a88 <main+0x274>)
 800381c:	2103      	movs	r1, #3
 800381e:	0018      	movs	r0, r3
 8003820:	f7ff fb3c 	bl	8002e9c <new_adc_sensor>
 8003824:	0002      	movs	r2, r0
 8003826:	4b99      	ldr	r3, [pc, #612]	; (8003a8c <main+0x278>)
 8003828:	601a      	str	r2, [r3, #0]
	// TODO - Implement actual code for the IMUs
	front_imu = new_imu_sensor(&hi2c2, ADDRESS_BOTH_GROUND);
 800382a:	4b99      	ldr	r3, [pc, #612]	; (8003a90 <main+0x27c>)
 800382c:	2100      	movs	r1, #0
 800382e:	0018      	movs	r0, r3
 8003830:	f7ff fd98 	bl	8003364 <new_imu_sensor>
 8003834:	0002      	movs	r2, r0
 8003836:	4b97      	ldr	r3, [pc, #604]	; (8003a94 <main+0x280>)
 8003838:	601a      	str	r2, [r3, #0]
	back_imu = new_imu_sensor(&hi2c2, ADDRESS_BOTH_HIGH);
 800383a:	4b95      	ldr	r3, [pc, #596]	; (8003a90 <main+0x27c>)
 800383c:	2100      	movs	r1, #0
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff fd90 	bl	8003364 <new_imu_sensor>
 8003844:	0002      	movs	r2, r0
 8003846:	4b94      	ldr	r3, [pc, #592]	; (8003a98 <main+0x284>)
 8003848:	601a      	str	r2, [r3, #0]
	motor_direction_pin = new_pin_data(DRV8825_DIR_GPIO_Port, DRV8825_DIR_Pin, PIN_IS_OUTPUT);
 800384a:	23a0      	movs	r3, #160	; 0xa0
 800384c:	05db      	lsls	r3, r3, #23
 800384e:	2201      	movs	r2, #1
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	0018      	movs	r0, r3
 8003854:	f000 fc4f 	bl	80040f6 <new_pin_data>
 8003858:	0002      	movs	r2, r0
 800385a:	4b90      	ldr	r3, [pc, #576]	; (8003a9c <main+0x288>)
 800385c:	601a      	str	r2, [r3, #0]
	motor_step_pin = new_pin_data(DRV8825_STP_GPIO_Port, DRV8825_STP_Pin, PIN_IS_OUTPUT);
 800385e:	23a0      	movs	r3, #160	; 0xa0
 8003860:	05db      	lsls	r3, r3, #23
 8003862:	2201      	movs	r2, #1
 8003864:	2140      	movs	r1, #64	; 0x40
 8003866:	0018      	movs	r0, r3
 8003868:	f000 fc45 	bl	80040f6 <new_pin_data>
 800386c:	0002      	movs	r2, r0
 800386e:	4b8c      	ldr	r3, [pc, #560]	; (8003aa0 <main+0x28c>)
 8003870:	601a      	str	r2, [r3, #0]
	rest_limit_switch_pin = new_pin_data(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, PIN_IS_INPUT);
 8003872:	23a0      	movs	r3, #160	; 0xa0
 8003874:	05db      	lsls	r3, r3, #23
 8003876:	2200      	movs	r2, #0
 8003878:	2102      	movs	r1, #2
 800387a:	0018      	movs	r0, r3
 800387c:	f000 fc3b 	bl	80040f6 <new_pin_data>
 8003880:	0002      	movs	r2, r0
 8003882:	4b88      	ldr	r3, [pc, #544]	; (8003aa4 <main+0x290>)
 8003884:	601a      	str	r2, [r3, #0]
	brake_limit_switch_pin = new_pin_data(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, PIN_IS_INPUT);
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4887      	ldr	r0, [pc, #540]	; (8003aa8 <main+0x294>)
 800388c:	2200      	movs	r2, #0
 800388e:	0019      	movs	r1, r3
 8003890:	f000 fc31 	bl	80040f6 <new_pin_data>
 8003894:	0002      	movs	r2, r0
 8003896:	4b85      	ldr	r3, [pc, #532]	; (8003aac <main+0x298>)
 8003898:	601a      	str	r2, [r3, #0]
	debug_led = new_pin_data(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, PIN_IS_OUTPUT);
 800389a:	4b85      	ldr	r3, [pc, #532]	; (8003ab0 <main+0x29c>)
 800389c:	2201      	movs	r2, #1
 800389e:	2104      	movs	r1, #4
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 fc28 	bl	80040f6 <new_pin_data>
 80038a6:	0002      	movs	r2, r0
 80038a8:	4b82      	ldr	r3, [pc, #520]	; (8003ab4 <main+0x2a0>)
 80038aa:	601a      	str	r2, [r3, #0]
	debug_pin_0 = new_pin_data(DEBUG_PIN_0_GPIO_Port, DEBUG_PIN_0_Pin, PIN_IS_OUTPUT);
 80038ac:	23a0      	movs	r3, #160	; 0xa0
 80038ae:	05db      	lsls	r3, r3, #23
 80038b0:	2201      	movs	r2, #1
 80038b2:	2120      	movs	r1, #32
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 fc1e 	bl	80040f6 <new_pin_data>
 80038ba:	0002      	movs	r2, r0
 80038bc:	4b7e      	ldr	r3, [pc, #504]	; (8003ab8 <main+0x2a4>)
 80038be:	601a      	str	r2, [r3, #0]
	debug_pin_1 = new_pin_data(DEBUG_PIN_1_GPIO_Port, DEBUG_PIN_1_Pin, PIN_IS_OUTPUT);
 80038c0:	4b79      	ldr	r3, [pc, #484]	; (8003aa8 <main+0x294>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	2101      	movs	r1, #1
 80038c6:	0018      	movs	r0, r3
 80038c8:	f000 fc15 	bl	80040f6 <new_pin_data>
 80038cc:	0002      	movs	r2, r0
 80038ce:	4b7b      	ldr	r3, [pc, #492]	; (8003abc <main+0x2a8>)
 80038d0:	601a      	str	r2, [r3, #0]
	motor = new_motor(motor_direction_pin, motor_step_pin);
 80038d2:	4b72      	ldr	r3, [pc, #456]	; (8003a9c <main+0x288>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b72      	ldr	r3, [pc, #456]	; (8003aa0 <main+0x28c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	0019      	movs	r1, r3
 80038dc:	0010      	movs	r0, r2
 80038de:	f000 fbd6 	bl	800408e <new_motor>
 80038e2:	0002      	movs	r2, r0
 80038e4:	4b76      	ldr	r3, [pc, #472]	; (8003ac0 <main+0x2ac>)
 80038e6:	601a      	str	r2, [r3, #0]
	slow_interrupt_timer = new_interrupt_timer(&htim14);
 80038e8:	4b76      	ldr	r3, [pc, #472]	; (8003ac4 <main+0x2b0>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7ff fd9e 	bl	800342c <new_interrupt_timer>
 80038f0:	0002      	movs	r2, r0
 80038f2:	4b75      	ldr	r3, [pc, #468]	; (8003ac8 <main+0x2b4>)
 80038f4:	601a      	str	r2, [r3, #0]
	fast_interrupt_timer = new_interrupt_timer(&htim16);
 80038f6:	4b75      	ldr	r3, [pc, #468]	; (8003acc <main+0x2b8>)
 80038f8:	0018      	movs	r0, r3
 80038fa:	f7ff fd97 	bl	800342c <new_interrupt_timer>
 80038fe:	0002      	movs	r2, r0
 8003900:	4b73      	ldr	r3, [pc, #460]	; (8003ad0 <main+0x2bc>)
 8003902:	601a      	str	r2, [r3, #0]
	imu_interrupt_timer = new_interrupt_timer(&htim17);
 8003904:	4b73      	ldr	r3, [pc, #460]	; (8003ad4 <main+0x2c0>)
 8003906:	0018      	movs	r0, r3
 8003908:	f7ff fd90 	bl	800342c <new_interrupt_timer>
 800390c:	0002      	movs	r2, r0
 800390e:	4b72      	ldr	r3, [pc, #456]	; (8003ad8 <main+0x2c4>)
 8003910:	601a      	str	r2, [r3, #0]
	potentiometer = new_potentiometer(adc_sensor, 1);
 8003912:	4b5e      	ldr	r3, [pc, #376]	; (8003a8c <main+0x278>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2101      	movs	r1, #1
 8003918:	0018      	movs	r0, r3
 800391a:	f000 fc4b 	bl	80041b4 <new_potentiometer>
 800391e:	0002      	movs	r2, r0
 8003920:	4b6e      	ldr	r3, [pc, #440]	; (8003adc <main+0x2c8>)
 8003922:	601a      	str	r2, [r3, #0]
	joint = new_joint(motor, potentiometer, rest_limit_switch_pin, brake_limit_switch_pin);
 8003924:	4b66      	ldr	r3, [pc, #408]	; (8003ac0 <main+0x2ac>)
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	4b6c      	ldr	r3, [pc, #432]	; (8003adc <main+0x2c8>)
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <main+0x290>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b5e      	ldr	r3, [pc, #376]	; (8003aac <main+0x298>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f7ff fd98 	bl	8003468 <new_joint>
 8003938:	0002      	movs	r2, r0
 800393a:	4b69      	ldr	r3, [pc, #420]	; (8003ae0 <main+0x2cc>)
 800393c:	601a      	str	r2, [r3, #0]
	force_sensor = new_force_sensor(adc_sensor, 0);
 800393e:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <main+0x278>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2100      	movs	r1, #0
 8003944:	0018      	movs	r0, r3
 8003946:	f7ff fce3 	bl	8003310 <new_force_sensor>
 800394a:	0002      	movs	r2, r0
 800394c:	4b65      	ldr	r3, [pc, #404]	; (8003ae4 <main+0x2d0>)
 800394e:	601a      	str	r2, [r3, #0]
	battery_sensor = new_battery_sensor(adc_sensor, 2);
 8003950:	4b4e      	ldr	r3, [pc, #312]	; (8003a8c <main+0x278>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2102      	movs	r1, #2
 8003956:	0018      	movs	r0, r3
 8003958:	f7ff fb02 	bl	8002f60 <new_battery_sensor>
 800395c:	0002      	movs	r2, r0
 800395e:	4b62      	ldr	r3, [pc, #392]	; (8003ae8 <main+0x2d4>)
 8003960:	601a      	str	r2, [r3, #0]
	skater = new_skater(force_sensor);
 8003962:	4b60      	ldr	r3, [pc, #384]	; (8003ae4 <main+0x2d0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	0018      	movs	r0, r3
 8003968:	f000 fc4d 	bl	8004206 <new_skater>
 800396c:	0002      	movs	r2, r0
 800396e:	4b5f      	ldr	r3, [pc, #380]	; (8003aec <main+0x2d8>)
 8003970:	601a      	str	r2, [r3, #0]
	wireless = new_wireless(&huart1);
 8003972:	4b5f      	ldr	r3, [pc, #380]	; (8003af0 <main+0x2dc>)
 8003974:	0018      	movs	r0, r3
 8003976:	f7ff fb4f 	bl	8003018 <new_wireless>
 800397a:	0002      	movs	r2, r0
 800397c:	4b5d      	ldr	r3, [pc, #372]	; (8003af4 <main+0x2e0>)
 800397e:	601a      	str	r2, [r3, #0]
	speed_sensor = new_speed_sensor(front_imu, back_imu);
 8003980:	4b44      	ldr	r3, [pc, #272]	; (8003a94 <main+0x280>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b44      	ldr	r3, [pc, #272]	; (8003a98 <main+0x284>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0019      	movs	r1, r3
 800398a:	0010      	movs	r0, r2
 800398c:	f000 fc9f 	bl	80042ce <new_speed_sensor>
 8003990:	0002      	movs	r2, r0
 8003992:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <main+0x2e4>)
 8003994:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003996:	f000 ffeb 	bl	8004970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800399a:	f000 f8af 	bl	8003afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800399e:	f000 faab 	bl	8003ef8 <MX_GPIO_Init>
  MX_DMA_Init();
 80039a2:	f000 fa83 	bl	8003eac <MX_DMA_Init>
  MX_I2C2_Init();
 80039a6:	f000 f981 	bl	8003cac <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80039aa:	f000 fa31 	bl	8003e10 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80039ae:	f000 f8ed 	bl	8003b8c <MX_ADC1_Init>
  MX_TIM14_Init();
 80039b2:	f000 f9bb 	bl	8003d2c <MX_TIM14_Init>
  MX_TIM16_Init();
 80039b6:	f000 f9dd 	bl	8003d74 <MX_TIM16_Init>
  MX_TIM17_Init();
 80039ba:	f000 fa01 	bl	8003dc0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  start_interrupt_timer(fast_interrupt_timer);
 80039be:	4b44      	ldr	r3, [pc, #272]	; (8003ad0 <main+0x2bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7ff fd43 	bl	800344e <start_interrupt_timer>
  start_interrupt_timer(slow_interrupt_timer);
 80039c8:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <main+0x2b4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff fd3e 	bl	800344e <start_interrupt_timer>
  if (USE_IMU) {
	  start_interrupt_timer(imu_interrupt_timer);
  }

  receive_wireless(wireless, skater, joint);
 80039d2:	4b48      	ldr	r3, [pc, #288]	; (8003af4 <main+0x2e0>)
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	4b45      	ldr	r3, [pc, #276]	; (8003aec <main+0x2d8>)
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <main+0x2cc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	001a      	movs	r2, r3
 80039e0:	f7ff fc12 	bl	8003208 <receive_wireless>
    /* USER CODE BEGIN 3 */

	  // TODO - this statement is in an if statement since we are afraid that it takes too much time
	  // and will decrease responsiveness. However, this may not actually be true
	  // It is worth testing to see if this is actually the case.
	  HAL_Delay(1000);
 80039e4:	23fa      	movs	r3, #250	; 0xfa
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	0018      	movs	r0, r3
 80039ea:	f001 f847 	bl	8004a7c <HAL_Delay>
	  if (is_joint_close_enough_to_target(joint)) {
 80039ee:	4b3c      	ldr	r3, [pc, #240]	; (8003ae0 <main+0x2cc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7ff fd67 	bl	80034c6 <is_joint_close_enough_to_target>
 80039f8:	1e03      	subs	r3, r0, #0
 80039fa:	d037      	beq.n	8003a6c <main+0x258>
		  // TODO - fix once we actually get speed
//		  uint8_t current_speed = get_speed_sensor_data(speed_sensor);
		  uint8_t current_speed = joint->current_angle_steps / 1000;  // DUMMY VAL
 80039fc:	4b38      	ldr	r3, [pc, #224]	; (8003ae0 <main+0x2cc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	22fa      	movs	r2, #250	; 0xfa
 8003a04:	0091      	lsls	r1, r2, #2
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7fc fc22 	bl	8000250 <__divsi3>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	001a      	movs	r2, r3
 8003a10:	1dfb      	adds	r3, r7, #7
 8003a12:	701a      	strb	r2, [r3, #0]
		  send_wireless_speed(wireless, current_speed);
 8003a14:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <main+0x2e0>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	1dfb      	adds	r3, r7, #7
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	0010      	movs	r0, r2
 8003a20:	f7ff fb2a 	bl	8003078 <send_wireless_speed>

		  uint8_t battery_data = get_battery_sensor_data(battery_sensor);
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <main+0x2d4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	1dbc      	adds	r4, r7, #6
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f7ff fab0 	bl	8002f90 <get_battery_sensor_data>
 8003a30:	0003      	movs	r3, r0
 8003a32:	7023      	strb	r3, [r4, #0]
		  send_wireless_battery_data(wireless, battery_data);
 8003a34:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <main+0x2e0>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	1dbb      	adds	r3, r7, #6
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	0010      	movs	r0, r2
 8003a40:	f7ff fb4e 	bl	80030e0 <send_wireless_battery_data>

		  uint8_t is_skater_detected = !is_skater_gone(skater);
 8003a44:	4b29      	ldr	r3, [pc, #164]	; (8003aec <main+0x2d8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f000 fc0b 	bl	8004264 <is_skater_gone>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	001a      	movs	r2, r3
 8003a52:	2301      	movs	r3, #1
 8003a54:	4053      	eors	r3, r2
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	1d7b      	adds	r3, r7, #5
 8003a5a:	701a      	strb	r2, [r3, #0]
		  send_wireless_detect_skater_status(wireless, is_skater_detected);
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <main+0x2e0>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	1d7b      	adds	r3, r7, #5
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	0019      	movs	r1, r3
 8003a66:	0010      	movs	r0, r2
 8003a68:	f7ff fb1e 	bl	80030a8 <send_wireless_detect_skater_status>

	  }
	  set_pin_value(debug_pin_0, 1);
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <main+0x2a4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2101      	movs	r1, #1
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fb60 	bl	8004138 <set_pin_value>
	  set_pin_value(debug_pin_0, 0);
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <main+0x2a4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f000 fb5a 	bl	8004138 <set_pin_value>
	  HAL_Delay(1000);
 8003a84:	e7ae      	b.n	80039e4 <main+0x1d0>
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	200001fc 	.word	0x200001fc
 8003a8c:	200004e4 	.word	0x200004e4
 8003a90:	200002bc 	.word	0x200002bc
 8003a94:	200004ec 	.word	0x200004ec
 8003a98:	200004f0 	.word	0x200004f0
 8003a9c:	20000510 	.word	0x20000510
 8003aa0:	20000514 	.word	0x20000514
 8003aa4:	20000518 	.word	0x20000518
 8003aa8:	50000400 	.word	0x50000400
 8003aac:	2000051c 	.word	0x2000051c
 8003ab0:	50001400 	.word	0x50001400
 8003ab4:	20000520 	.word	0x20000520
 8003ab8:	20000524 	.word	0x20000524
 8003abc:	20000528 	.word	0x20000528
 8003ac0:	200004f4 	.word	0x200004f4
 8003ac4:	20000310 	.word	0x20000310
 8003ac8:	2000052c 	.word	0x2000052c
 8003acc:	2000035c 	.word	0x2000035c
 8003ad0:	20000530 	.word	0x20000530
 8003ad4:	200003a8 	.word	0x200003a8
 8003ad8:	20000534 	.word	0x20000534
 8003adc:	200004f8 	.word	0x200004f8
 8003ae0:	200004fc 	.word	0x200004fc
 8003ae4:	20000500 	.word	0x20000500
 8003ae8:	200004e8 	.word	0x200004e8
 8003aec:	20000504 	.word	0x20000504
 8003af0:	200003f4 	.word	0x200003f4
 8003af4:	2000050c 	.word	0x2000050c
 8003af8:	20000508 	.word	0x20000508

08003afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b093      	sub	sp, #76	; 0x4c
 8003b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b02:	2410      	movs	r4, #16
 8003b04:	193b      	adds	r3, r7, r4
 8003b06:	0018      	movs	r0, r3
 8003b08:	2338      	movs	r3, #56	; 0x38
 8003b0a:	001a      	movs	r2, r3
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	f004 fefe 	bl	800890e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b12:	003b      	movs	r3, r7
 8003b14:	0018      	movs	r0, r3
 8003b16:	2310      	movs	r3, #16
 8003b18:	001a      	movs	r2, r3
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f004 fef7 	bl	800890e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f002 fc89 	bl	800643c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b2a:	193b      	adds	r3, r7, r4
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b30:	193b      	adds	r3, r7, r4
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	0052      	lsls	r2, r2, #1
 8003b36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003b38:	193b      	adds	r3, r7, r4
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	2240      	movs	r2, #64	; 0x40
 8003b42:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	2200      	movs	r2, #0
 8003b48:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b4a:	193b      	adds	r3, r7, r4
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f002 fcc1 	bl	80064d4 <HAL_RCC_OscConfig>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d001      	beq.n	8003b5a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003b56:	f000 fa95 	bl	8004084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b5a:	003b      	movs	r3, r7
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003b60:	003b      	movs	r3, r7
 8003b62:	2200      	movs	r2, #0
 8003b64:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b66:	003b      	movs	r3, r7
 8003b68:	2200      	movs	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b6c:	003b      	movs	r3, r7
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b72:	003b      	movs	r3, r7
 8003b74:	2100      	movs	r1, #0
 8003b76:	0018      	movs	r0, r3
 8003b78:	f002 ffc6 	bl	8006b08 <HAL_RCC_ClockConfig>
 8003b7c:	1e03      	subs	r3, r0, #0
 8003b7e:	d001      	beq.n	8003b84 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003b80:	f000 fa80 	bl	8004084 <Error_Handler>
  }
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b013      	add	sp, #76	; 0x4c
 8003b8a:	bd90      	pop	{r4, r7, pc}

08003b8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	0018      	movs	r0, r3
 8003b96:	230c      	movs	r3, #12
 8003b98:	001a      	movs	r2, r3
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	f004 feb7 	bl	800890e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003ba0:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003ba2:	4a3f      	ldr	r2, [pc, #252]	; (8003ca0 <MX_ADC1_Init+0x114>)
 8003ba4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003ba6:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003ba8:	2280      	movs	r2, #128	; 0x80
 8003baa:	05d2      	lsls	r2, r2, #23
 8003bac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8003bae:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bb0:	2218      	movs	r2, #24
 8003bb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bb4:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003bba:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0392      	lsls	r2, r2, #14
 8003bc0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bc2:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003bc8:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003bce:	4b33      	ldr	r3, [pc, #204]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003bd4:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8003bda:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bdc:	2203      	movs	r2, #3
 8003bde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003be0:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003be2:	2220      	movs	r2, #32
 8003be4:	2101      	movs	r1, #1
 8003be6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003be8:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003bf4:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bf6:	222c      	movs	r2, #44	; 0x2c
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003c02:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003c08:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003c10:	223c      	movs	r2, #60	; 0x3c
 8003c12:	2100      	movs	r1, #0
 8003c14:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003c16:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c1c:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f001 f898 	bl	8004d54 <HAL_ADC_Init>
 8003c24:	1e03      	subs	r3, r0, #0
 8003c26:	d001      	beq.n	8003c2c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003c28:	f000 fa2c 	bl	8004084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003c2c:	1d3b      	adds	r3, r7, #4
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	2200      	movs	r2, #0
 8003c36:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c3e:	1d3a      	adds	r2, r7, #4
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003c42:	0011      	movs	r1, r2
 8003c44:	0018      	movs	r0, r3
 8003c46:	f001 fad3 	bl	80051f0 <HAL_ADC_ConfigChannel>
 8003c4a:	1e03      	subs	r3, r0, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8003c4e:	f000 fa19 	bl	8004084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003c52:	1d3b      	adds	r3, r7, #4
 8003c54:	4a13      	ldr	r2, [pc, #76]	; (8003ca4 <MX_ADC1_Init+0x118>)
 8003c56:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c5e:	1d3a      	adds	r2, r7, #4
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003c62:	0011      	movs	r1, r2
 8003c64:	0018      	movs	r0, r3
 8003c66:	f001 fac3 	bl	80051f0 <HAL_ADC_ConfigChannel>
 8003c6a:	1e03      	subs	r3, r0, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8003c6e:	f000 fa09 	bl	8004084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <MX_ADC1_Init+0x11c>)
 8003c76:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c7e:	1d3a      	adds	r2, r7, #4
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <MX_ADC1_Init+0x110>)
 8003c82:	0011      	movs	r1, r2
 8003c84:	0018      	movs	r0, r3
 8003c86:	f001 fab3 	bl	80051f0 <HAL_ADC_ConfigChannel>
 8003c8a:	1e03      	subs	r3, r0, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8003c8e:	f000 f9f9 	bl	8004084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	200001fc 	.word	0x200001fc
 8003ca0:	40012400 	.word	0x40012400
 8003ca4:	08000004 	.word	0x08000004
 8003ca8:	0c000008 	.word	0x0c000008

08003cac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003cb2:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <MX_I2C2_Init+0x78>)
 8003cb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8003cb6:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003cb8:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <MX_I2C2_Init+0x7c>)
 8003cba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cc2:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cc8:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003cce:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f002 fa79 	bl	80061e0 <HAL_I2C_Init>
 8003cee:	1e03      	subs	r3, r0, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003cf2:	f000 f9c7 	bl	8004084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f002 fb06 	bl	800630c <HAL_I2CEx_ConfigAnalogFilter>
 8003d00:	1e03      	subs	r3, r0, #0
 8003d02:	d001      	beq.n	8003d08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003d04:	f000 f9be 	bl	8004084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <MX_I2C2_Init+0x74>)
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f002 fb49 	bl	80063a4 <HAL_I2CEx_ConfigDigitalFilter>
 8003d12:	1e03      	subs	r3, r0, #0
 8003d14:	d001      	beq.n	8003d1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003d16:	f000 f9b5 	bl	8004084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	200002bc 	.word	0x200002bc
 8003d24:	40005800 	.word	0x40005800
 8003d28:	00303d5b 	.word	0x00303d5b

08003d2c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <MX_TIM14_Init+0x40>)
 8003d32:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <MX_TIM14_Init+0x44>)
 8003d34:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15;
 8003d36:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <MX_TIM14_Init+0x40>)
 8003d38:	220f      	movs	r2, #15
 8003d3a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <MX_TIM14_Init+0x40>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = SLOW_PERIOD;
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <MX_TIM14_Init+0x40>)
 8003d44:	22fa      	movs	r2, #250	; 0xfa
 8003d46:	00d2      	lsls	r2, r2, #3
 8003d48:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <MX_TIM14_Init+0x40>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <MX_TIM14_Init+0x40>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <MX_TIM14_Init+0x40>)
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f003 f9f9 	bl	8007150 <HAL_TIM_Base_Init>
 8003d5e:	1e03      	subs	r3, r0, #0
 8003d60:	d001      	beq.n	8003d66 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003d62:	f000 f98f 	bl	8004084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000310 	.word	0x20000310
 8003d70:	40002000 	.word	0x40002000

08003d74 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <MX_TIM16_Init+0x44>)
 8003d7a:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <MX_TIM16_Init+0x48>)
 8003d7c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15;
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <MX_TIM16_Init+0x44>)
 8003d80:	220f      	movs	r2, #15
 8003d82:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <MX_TIM16_Init+0x44>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = FAST_PERIOD;
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <MX_TIM16_Init+0x44>)
 8003d8c:	2232      	movs	r2, #50	; 0x32
 8003d8e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <MX_TIM16_Init+0x44>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <MX_TIM16_Init+0x44>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <MX_TIM16_Init+0x44>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <MX_TIM16_Init+0x44>)
 8003da4:	0018      	movs	r0, r3
 8003da6:	f003 f9d3 	bl	8007150 <HAL_TIM_Base_Init>
 8003daa:	1e03      	subs	r3, r0, #0
 8003dac:	d001      	beq.n	8003db2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8003dae:	f000 f969 	bl	8004084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	2000035c 	.word	0x2000035c
 8003dbc:	40014400 	.word	0x40014400

08003dc0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <MX_TIM17_Init+0x44>)
 8003dc6:	4a10      	ldr	r2, [pc, #64]	; (8003e08 <MX_TIM17_Init+0x48>)
 8003dc8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 127;
 8003dca:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <MX_TIM17_Init+0x44>)
 8003dcc:	227f      	movs	r2, #127	; 0x7f
 8003dce:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <MX_TIM17_Init+0x44>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = IMU_PERIOD;
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <MX_TIM17_Init+0x44>)
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <MX_TIM17_Init+0x4c>)
 8003dda:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ddc:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <MX_TIM17_Init+0x44>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <MX_TIM17_Init+0x44>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <MX_TIM17_Init+0x44>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <MX_TIM17_Init+0x44>)
 8003df0:	0018      	movs	r0, r3
 8003df2:	f003 f9ad 	bl	8007150 <HAL_TIM_Base_Init>
 8003df6:	1e03      	subs	r3, r0, #0
 8003df8:	d001      	beq.n	8003dfe <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8003dfa:	f000 f943 	bl	8004084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200003a8 	.word	0x200003a8
 8003e08:	40014800 	.word	0x40014800
 8003e0c:	0000c350 	.word	0x0000c350

08003e10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e14:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <MX_USART1_UART_Init+0x98>)
 8003e18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003e1a:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e1c:	2296      	movs	r2, #150	; 0x96
 8003e1e:	0192      	lsls	r2, r2, #6
 8003e20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e28:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e36:	220c      	movs	r2, #12
 8003e38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e4c:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f003 fc04 	bl	8007668 <HAL_UART_Init>
 8003e60:	1e03      	subs	r3, r0, #0
 8003e62:	d001      	beq.n	8003e68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003e64:	f000 f90e 	bl	8004084 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e68:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f004 fc2b 	bl	80086c8 <HAL_UARTEx_SetTxFifoThreshold>
 8003e72:	1e03      	subs	r3, r0, #0
 8003e74:	d001      	beq.n	8003e7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003e76:	f000 f905 	bl	8004084 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f004 fc62 	bl	8008748 <HAL_UARTEx_SetRxFifoThreshold>
 8003e84:	1e03      	subs	r3, r0, #0
 8003e86:	d001      	beq.n	8003e8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003e88:	f000 f8fc 	bl	8004084 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <MX_USART1_UART_Init+0x94>)
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f004 fbe0 	bl	8008654 <HAL_UARTEx_DisableFifoMode>
 8003e94:	1e03      	subs	r3, r0, #0
 8003e96:	d001      	beq.n	8003e9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003e98:	f000 f8f4 	bl	8004084 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e9c:	46c0      	nop			; (mov r8, r8)
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	200003f4 	.word	0x200003f4
 8003ea8:	40013800 	.word	0x40013800

08003eac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <MX_DMA_Init+0x48>)
 8003eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <MX_DMA_Init+0x48>)
 8003eb8:	2101      	movs	r1, #1
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <MX_DMA_Init+0x48>)
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2100      	movs	r1, #0
 8003ece:	2009      	movs	r0, #9
 8003ed0:	f001 fd26 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003ed4:	2009      	movs	r0, #9
 8003ed6:	f001 fd38 	bl	800594a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003eda:	2200      	movs	r2, #0
 8003edc:	2100      	movs	r1, #0
 8003ede:	200a      	movs	r0, #10
 8003ee0:	f001 fd1e 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003ee4:	200a      	movs	r0, #10
 8003ee6:	f001 fd30 	bl	800594a <HAL_NVIC_EnableIRQ>

}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b002      	add	sp, #8
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	40021000 	.word	0x40021000

08003ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b089      	sub	sp, #36	; 0x24
 8003efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efe:	240c      	movs	r4, #12
 8003f00:	193b      	adds	r3, r7, r4
 8003f02:	0018      	movs	r0, r3
 8003f04:	2314      	movs	r3, #20
 8003f06:	001a      	movs	r2, r3
 8003f08:	2100      	movs	r1, #0
 8003f0a:	f004 fd00 	bl	800890e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0e:	4b59      	ldr	r3, [pc, #356]	; (8004074 <MX_GPIO_Init+0x17c>)
 8003f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f12:	4b58      	ldr	r3, [pc, #352]	; (8004074 <MX_GPIO_Init+0x17c>)
 8003f14:	2102      	movs	r1, #2
 8003f16:	430a      	orrs	r2, r1
 8003f18:	635a      	str	r2, [r3, #52]	; 0x34
 8003f1a:	4b56      	ldr	r3, [pc, #344]	; (8004074 <MX_GPIO_Init+0x17c>)
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	2202      	movs	r2, #2
 8003f20:	4013      	ands	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f26:	4b53      	ldr	r3, [pc, #332]	; (8004074 <MX_GPIO_Init+0x17c>)
 8003f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2a:	4b52      	ldr	r3, [pc, #328]	; (8004074 <MX_GPIO_Init+0x17c>)
 8003f2c:	2120      	movs	r1, #32
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	635a      	str	r2, [r3, #52]	; 0x34
 8003f32:	4b50      	ldr	r3, [pc, #320]	; (8004074 <MX_GPIO_Init+0x17c>)
 8003f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f36:	2220      	movs	r2, #32
 8003f38:	4013      	ands	r3, r2
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3e:	4b4d      	ldr	r3, [pc, #308]	; (8004074 <MX_GPIO_Init+0x17c>)
 8003f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f42:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <MX_GPIO_Init+0x17c>)
 8003f44:	2101      	movs	r1, #1
 8003f46:	430a      	orrs	r2, r1
 8003f48:	635a      	str	r2, [r3, #52]	; 0x34
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <MX_GPIO_Init+0x17c>)
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4e:	2201      	movs	r2, #1
 8003f50:	4013      	ands	r3, r2
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIMIT_SWITCH_1_Pin|DEBUG_PIN_1_Pin, GPIO_PIN_RESET);
 8003f56:	4948      	ldr	r1, [pc, #288]	; (8004078 <MX_GPIO_Init+0x180>)
 8003f58:	4b48      	ldr	r3, [pc, #288]	; (800407c <MX_GPIO_Init+0x184>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f002 f8e4 	bl	800612a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8003f62:	4b47      	ldr	r3, [pc, #284]	; (8004080 <MX_GPIO_Init+0x188>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	2104      	movs	r1, #4
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f002 f8de 	bl	800612a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIMIT_SWITCH_2_Pin|DEBUG_PIN_0_Pin|DRV8825_STP_Pin|DRV8825_DIR_Pin, GPIO_PIN_RESET);
 8003f6e:	23a0      	movs	r3, #160	; 0xa0
 8003f70:	05db      	lsls	r3, r3, #23
 8003f72:	2200      	movs	r2, #0
 8003f74:	21e2      	movs	r1, #226	; 0xe2
 8003f76:	0018      	movs	r0, r3
 8003f78:	f002 f8d7 	bl	800612a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SWITCH_1_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin;
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	0092      	lsls	r2, r2, #2
 8003f82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f84:	193b      	adds	r3, r7, r4
 8003f86:	2201      	movs	r2, #1
 8003f88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f8a:	193b      	adds	r3, r7, r4
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f90:	193b      	adds	r3, r7, r4
 8003f92:	2200      	movs	r2, #0
 8003f94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8003f96:	193b      	adds	r3, r7, r4
 8003f98:	4a38      	ldr	r2, [pc, #224]	; (800407c <MX_GPIO_Init+0x184>)
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	0010      	movs	r0, r2
 8003f9e:	f001 ff43 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8003fa2:	193b      	adds	r3, r7, r4
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa8:	193b      	adds	r3, r7, r4
 8003faa:	2201      	movs	r2, #1
 8003fac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	193b      	adds	r3, r7, r4
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb4:	193b      	adds	r3, r7, r4
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8003fba:	193b      	adds	r3, r7, r4
 8003fbc:	4a30      	ldr	r2, [pc, #192]	; (8004080 <MX_GPIO_Init+0x188>)
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	0010      	movs	r0, r2
 8003fc2:	f001 ff31 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_2_Pin;
 8003fc6:	193b      	adds	r3, r7, r4
 8003fc8:	2202      	movs	r2, #2
 8003fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fcc:	193b      	adds	r3, r7, r4
 8003fce:	2201      	movs	r2, #1
 8003fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd8:	193b      	adds	r3, r7, r4
 8003fda:	2200      	movs	r2, #0
 8003fdc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_2_GPIO_Port, &GPIO_InitStruct);
 8003fde:	193a      	adds	r2, r7, r4
 8003fe0:	23a0      	movs	r3, #160	; 0xa0
 8003fe2:	05db      	lsls	r3, r3, #23
 8003fe4:	0011      	movs	r1, r2
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f001 ff1e 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fec:	193b      	adds	r3, r7, r4
 8003fee:	2210      	movs	r2, #16
 8003ff0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ff2:	193b      	adds	r3, r7, r4
 8003ff4:	2288      	movs	r2, #136	; 0x88
 8003ff6:	0352      	lsls	r2, r2, #13
 8003ff8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffa:	193b      	adds	r3, r7, r4
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004000:	193a      	adds	r2, r7, r4
 8004002:	23a0      	movs	r3, #160	; 0xa0
 8004004:	05db      	lsls	r3, r3, #23
 8004006:	0011      	movs	r1, r2
 8004008:	0018      	movs	r0, r3
 800400a:	f001 ff0d 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_PIN_0_Pin DRV8825_STP_Pin DRV8825_DIR_Pin */
  GPIO_InitStruct.Pin = DEBUG_PIN_0_Pin|DRV8825_STP_Pin|DRV8825_DIR_Pin;
 800400e:	193b      	adds	r3, r7, r4
 8004010:	22e0      	movs	r2, #224	; 0xe0
 8004012:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004014:	193b      	adds	r3, r7, r4
 8004016:	2201      	movs	r2, #1
 8004018:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401a:	193b      	adds	r3, r7, r4
 800401c:	2200      	movs	r2, #0
 800401e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004020:	193b      	adds	r3, r7, r4
 8004022:	2200      	movs	r2, #0
 8004024:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004026:	193a      	adds	r2, r7, r4
 8004028:	23a0      	movs	r3, #160	; 0xa0
 800402a:	05db      	lsls	r3, r3, #23
 800402c:	0011      	movs	r1, r2
 800402e:	0018      	movs	r0, r3
 8004030:	f001 fefa 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_PIN_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_PIN_1_Pin;
 8004034:	0021      	movs	r1, r4
 8004036:	187b      	adds	r3, r7, r1
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800403c:	187b      	adds	r3, r7, r1
 800403e:	2201      	movs	r2, #1
 8004040:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	187b      	adds	r3, r7, r1
 8004044:	2200      	movs	r2, #0
 8004046:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004048:	187b      	adds	r3, r7, r1
 800404a:	2200      	movs	r2, #0
 800404c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_PIN_1_GPIO_Port, &GPIO_InitStruct);
 800404e:	187b      	adds	r3, r7, r1
 8004050:	4a0a      	ldr	r2, [pc, #40]	; (800407c <MX_GPIO_Init+0x184>)
 8004052:	0019      	movs	r1, r3
 8004054:	0010      	movs	r0, r2
 8004056:	f001 fee7 	bl	8005e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800405a:	2200      	movs	r2, #0
 800405c:	2100      	movs	r1, #0
 800405e:	2007      	movs	r0, #7
 8004060:	f001 fc5e 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004064:	2007      	movs	r0, #7
 8004066:	f001 fc70 	bl	800594a <HAL_NVIC_EnableIRQ>

}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	b009      	add	sp, #36	; 0x24
 8004070:	bd90      	pop	{r4, r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	40021000 	.word	0x40021000
 8004078:	00000201 	.word	0x00000201
 800407c:	50000400 	.word	0x50000400
 8004080:	50001400 	.word	0x50001400

08004084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004088:	b672      	cpsid	i
}
 800408a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800408c:	e7fe      	b.n	800408c <Error_Handler+0x8>

0800408e <new_motor>:
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Motor object
Motor *new_motor(
	PinData *_dir_pin,
	PinData *_stp_pin
) {
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
    Motor *motor = (Motor*) malloc(sizeof(Motor));
 8004098:	2008      	movs	r0, #8
 800409a:	f004 fc25 	bl	80088e8 <malloc>
 800409e:	0003      	movs	r3, r0
 80040a0:	60fb      	str	r3, [r7, #12]
    motor->dir_pin = _dir_pin;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	601a      	str	r2, [r3, #0]
    motor->stp_pin = _stp_pin;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	605a      	str	r2, [r3, #4]
	return motor;
 80040ae:	68fb      	ldr	r3, [r7, #12]
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b004      	add	sp, #16
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <step_motor_direction>:

// REQUIRES: motor is a Motor object
// and direction is a bool that dictates direction
// MODIFIES: nothing
// EFFECTS: Moves the motor a certain by a certain amount of steps
void step_motor_direction(Motor *motor, bool dir) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	000a      	movs	r2, r1
 80040c2:	1cfb      	adds	r3, r7, #3
 80040c4:	701a      	strb	r2, [r3, #0]
	set_pin_value(motor->dir_pin, dir);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	1cfb      	adds	r3, r7, #3
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	0019      	movs	r1, r3
 80040d0:	0010      	movs	r0, r2
 80040d2:	f000 f831 	bl	8004138 <set_pin_value>
	set_pin_value(motor->stp_pin, GPIO_PIN_SET);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2101      	movs	r1, #1
 80040dc:	0018      	movs	r0, r3
 80040de:	f000 f82b 	bl	8004138 <set_pin_value>
//	for (uint8_t i = 0; i < 10; ++i);
	set_pin_value(motor->stp_pin, GPIO_PIN_RESET);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2100      	movs	r1, #0
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 f825 	bl	8004138 <set_pin_value>
}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b002      	add	sp, #8
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <new_pin_data>:
// REQUIRES: _port and _pin corresponds to
// the port and pin and _is_output is boolean
// that is true if the pin is an output pin.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created PinData object
PinData *new_pin_data(GPIO_TypeDef *_port, uint16_t _pin, bool _is_output) {
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	0008      	movs	r0, r1
 8004100:	0011      	movs	r1, r2
 8004102:	1cbb      	adds	r3, r7, #2
 8004104:	1c02      	adds	r2, r0, #0
 8004106:	801a      	strh	r2, [r3, #0]
 8004108:	1c7b      	adds	r3, r7, #1
 800410a:	1c0a      	adds	r2, r1, #0
 800410c:	701a      	strb	r2, [r3, #0]
    PinData *pin_data = (PinData*) malloc(sizeof(PinData));
 800410e:	2008      	movs	r0, #8
 8004110:	f004 fbea 	bl	80088e8 <malloc>
 8004114:	0003      	movs	r3, r0
 8004116:	60fb      	str	r3, [r7, #12]
	pin_data->port = _port;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
    pin_data->pin = _pin;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1cba      	adds	r2, r7, #2
 8004122:	8812      	ldrh	r2, [r2, #0]
 8004124:	809a      	strh	r2, [r3, #4]
    pin_data->is_output = _is_output;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1c7a      	adds	r2, r7, #1
 800412a:	7812      	ldrb	r2, [r2, #0]
 800412c:	719a      	strb	r2, [r3, #6]
	return pin_data;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b004      	add	sp, #16
 8004136:	bd80      	pop	{r7, pc}

08004138 <set_pin_value>:

// REQUIRES: pin_data is PinData and value is 0 or 1
// MODIFIES: nothing
// EFFECTS: Sets pin to value
void set_pin_value(PinData *pin_data, uint8_t value) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	000a      	movs	r2, r1
 8004142:	1cfb      	adds	r3, r7, #3
 8004144:	701a      	strb	r2, [r3, #0]
	if (!pin_data->is_output) {
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	799b      	ldrb	r3, [r3, #6]
 800414a:	2201      	movs	r2, #1
 800414c:	4053      	eors	r3, r2
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10c      	bne.n	800416e <set_pin_value+0x36>
		return;
	}
	HAL_GPIO_WritePin(pin_data->port, pin_data->pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8899      	ldrh	r1, [r3, #4]
 800415c:	1cfb      	adds	r3, r7, #3
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	1e5a      	subs	r2, r3, #1
 8004162:	4193      	sbcs	r3, r2
 8004164:	b2db      	uxtb	r3, r3
 8004166:	001a      	movs	r2, r3
 8004168:	f001 ffdf 	bl	800612a <HAL_GPIO_WritePin>
 800416c:	e000      	b.n	8004170 <set_pin_value+0x38>
		return;
 800416e:	46c0      	nop			; (mov r8, r8)
}
 8004170:	46bd      	mov	sp, r7
 8004172:	b002      	add	sp, #8
 8004174:	bd80      	pop	{r7, pc}

08004176 <get_pin_value>:

// REQUIRES: pin_data is PinData
// MODIFIES: nothing
// EFFECTS: Returns value of pin
bool get_pin_value(PinData *pin_data) {
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
	if (pin_data->is_output) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	799b      	ldrb	r3, [r3, #6]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <get_pin_value+0x14>
		return false;
 8004186:	2300      	movs	r3, #0
 8004188:	e010      	b.n	80041ac <get_pin_value+0x36>
	}
	bool value = HAL_GPIO_ReadPin(pin_data->port, pin_data->pin);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	889b      	ldrh	r3, [r3, #4]
 8004192:	0019      	movs	r1, r3
 8004194:	0010      	movs	r0, r2
 8004196:	f001 ffab 	bl	80060f0 <HAL_GPIO_ReadPin>
 800419a:	0003      	movs	r3, r0
 800419c:	001a      	movs	r2, r3
 800419e:	200f      	movs	r0, #15
 80041a0:	183b      	adds	r3, r7, r0
 80041a2:	1e51      	subs	r1, r2, #1
 80041a4:	418a      	sbcs	r2, r1
 80041a6:	701a      	strb	r2, [r3, #0]
	return value;
 80041a8:	183b      	adds	r3, r7, r0
 80041aa:	781b      	ldrb	r3, [r3, #0]
}
 80041ac:	0018      	movs	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b004      	add	sp, #16
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <new_potentiometer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Potentiometer object
Potentiometer *new_potentiometer(ADCSensor *_adc_sensor, uint8_t _rank) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	000a      	movs	r2, r1
 80041be:	1cfb      	adds	r3, r7, #3
 80041c0:	701a      	strb	r2, [r3, #0]
    Potentiometer *potentiometer = (Potentiometer*) malloc(sizeof(Potentiometer));
 80041c2:	2008      	movs	r0, #8
 80041c4:	f004 fb90 	bl	80088e8 <malloc>
 80041c8:	0003      	movs	r3, r0
 80041ca:	60fb      	str	r3, [r7, #12]
    potentiometer->adc_sensor = _adc_sensor;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	601a      	str	r2, [r3, #0]
    potentiometer->rank = _rank;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1cfa      	adds	r2, r7, #3
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	711a      	strb	r2, [r3, #4]
    return potentiometer;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b004      	add	sp, #16
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <get_potentiometer_input>:

// REQUIRES: potentiometer is a Potentiometer object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint32_t get_potentiometer_input(Potentiometer *potentiometer) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
    return get_adc_sensor_value(potentiometer->adc_sensor, potentiometer->rank);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	791b      	ldrb	r3, [r3, #4]
 80041f4:	0019      	movs	r1, r3
 80041f6:	0010      	movs	r0, r2
 80041f8:	f7fe fe82 	bl	8002f00 <get_adc_sensor_value>
 80041fc:	0003      	movs	r3, r0
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b002      	add	sp, #8
 8004204:	bd80      	pop	{r7, pc}

08004206 <new_skater>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _force_sensor is a ForceSensor object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Skater object
Skater *new_skater(ForceSensor *_force_sensor) {
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
	Skater *skater = (Skater*) malloc(sizeof(Skater));
 800420e:	2008      	movs	r0, #8
 8004210:	f004 fb6a 	bl	80088e8 <malloc>
 8004214:	0003      	movs	r3, r0
 8004216:	60fb      	str	r3, [r7, #12]
	skater->force_sensor = _force_sensor;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	601a      	str	r2, [r3, #0]
	skater->ms_since_skater_detected = 0;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	605a      	str	r2, [r3, #4]
	return skater;
 8004224:	68fb      	ldr	r3, [r7, #12]
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	b004      	add	sp, #16
 800422c:	bd80      	pop	{r7, pc}

0800422e <has_skater_recently_left_board>:

// REQUIRES: skater is a Skater object
// MODIFIES: nothing
// EFFECTS: Returns whether skater has recently left board
bool has_skater_recently_left_board(Skater *skater) {
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
	return 1000 <= skater->ms_since_skater_detected && skater->ms_since_skater_detected <= TIME_TO_RELEASE_BRAKE_AFTER_SKATER_NOT_DETECTED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	23fa      	movs	r3, #250	; 0xfa
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	429a      	cmp	r2, r3
 8004240:	d307      	bcc.n	8004252 <has_skater_recently_left_board+0x24>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	23fa      	movs	r3, #250	; 0xfa
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	429a      	cmp	r2, r3
 800424c:	d801      	bhi.n	8004252 <has_skater_recently_left_board+0x24>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <has_skater_recently_left_board+0x26>
 8004252:	2300      	movs	r3, #0
 8004254:	1c1a      	adds	r2, r3, #0
 8004256:	2301      	movs	r3, #1
 8004258:	4013      	ands	r3, r2
 800425a:	b2db      	uxtb	r3, r3
}
 800425c:	0018      	movs	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	b002      	add	sp, #8
 8004262:	bd80      	pop	{r7, pc}

08004264 <is_skater_gone>:

// REQUIRES: skater is a Skater object
// MODIFIES: nothing
// EFFECTS: Returns whether skater is gone or not
bool is_skater_gone(Skater *skater) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	return 1000 < skater->ms_since_skater_detected;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	22fa      	movs	r2, #250	; 0xfa
 8004272:	0092      	lsls	r2, r2, #2
 8004274:	429a      	cmp	r2, r3
 8004276:	419b      	sbcs	r3, r3
 8004278:	425b      	negs	r3, r3
 800427a:	b2db      	uxtb	r3, r3
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	b002      	add	sp, #8
 8004282:	bd80      	pop	{r7, pc}

08004284 <refresh_skater_status>:

// REQUIRES: skater is a Skater object
// MODIFIES: ms_since_skater_detected
// EFFECTS: Updates the value of ms_since_skater_detected
// This function is expected to be called every 2 ms.
void refresh_skater_status(Skater *skater) {
 8004284:	b5b0      	push	{r4, r5, r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value = get_force_sensor_data(skater->force_sensor);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	250e      	movs	r5, #14
 8004292:	197c      	adds	r4, r7, r5
 8004294:	0018      	movs	r0, r3
 8004296:	f7ff f853 	bl	8003340 <get_force_sensor_data>
 800429a:	0003      	movs	r3, r0
 800429c:	8023      	strh	r3, [r4, #0]
	bool is_skater_detected = raw_value < RAW_FORCE_SENSOR_VALUE_INDICATING_SKATER_PRESENCE;
 800429e:	240d      	movs	r4, #13
 80042a0:	193a      	adds	r2, r7, r4
 80042a2:	197b      	adds	r3, r7, r5
 80042a4:	8819      	ldrh	r1, [r3, #0]
 80042a6:	202a      	movs	r0, #42	; 0x2a
 80042a8:	2300      	movs	r3, #0
 80042aa:	4288      	cmp	r0, r1
 80042ac:	415b      	adcs	r3, r3
 80042ae:	7013      	strb	r3, [r2, #0]

	// If skater is detected, reset value to 0.
	// If skater is not detected, then keep incrementing ms_since_skater_detected.
	skater->ms_since_skater_detected = is_skater_detected ?
			0 : skater->ms_since_skater_detected + 2;
 80042b0:	193b      	adds	r3, r7, r4
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <refresh_skater_status+0x38>
 80042b8:	2200      	movs	r2, #0
 80042ba:	e002      	b.n	80042c2 <refresh_skater_status+0x3e>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	1c9a      	adds	r2, r3, #2
	skater->ms_since_skater_detected = is_skater_detected ?
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	605a      	str	r2, [r3, #4]
}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b004      	add	sp, #16
 80042cc:	bdb0      	pop	{r4, r5, r7, pc}

080042ce <new_speed_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _front_imu and _back_imu are IMU objects
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created SpeedSensor object
SpeedSensor *new_speed_sensor(IMU *_front_imu, IMU *_back_imu) {
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
	SpeedSensor *speed_sensor = (SpeedSensor*) malloc(sizeof(SpeedSensor));
 80042d8:	200c      	movs	r0, #12
 80042da:	f004 fb05 	bl	80088e8 <malloc>
 80042de:	0003      	movs	r3, r0
 80042e0:	60fb      	str	r3, [r7, #12]
	speed_sensor->front_imu = _front_imu;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	601a      	str	r2, [r3, #0]
	speed_sensor->back_imu = _back_imu;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	605a      	str	r2, [r3, #4]
	speed_sensor->speed = 0;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	721a      	strb	r2, [r3, #8]
	return speed_sensor;
 80042f4:	68fb      	ldr	r3, [r7, #12]
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b004      	add	sp, #16
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <HAL_MspInit+0x44>)
 8004308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430a:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <HAL_MspInit+0x44>)
 800430c:	2101      	movs	r1, #1
 800430e:	430a      	orrs	r2, r1
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
 8004312:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <HAL_MspInit+0x44>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2201      	movs	r2, #1
 8004318:	4013      	ands	r3, r2
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <HAL_MspInit+0x44>)
 8004320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <HAL_MspInit+0x44>)
 8004324:	2180      	movs	r1, #128	; 0x80
 8004326:	0549      	lsls	r1, r1, #21
 8004328:	430a      	orrs	r2, r1
 800432a:	63da      	str	r2, [r3, #60]	; 0x3c
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_MspInit+0x44>)
 800432e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	055b      	lsls	r3, r3, #21
 8004334:	4013      	ands	r3, r2
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b002      	add	sp, #8
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	40021000 	.word	0x40021000

08004348 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b095      	sub	sp, #84	; 0x54
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	233c      	movs	r3, #60	; 0x3c
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	0018      	movs	r0, r3
 8004356:	2314      	movs	r3, #20
 8004358:	001a      	movs	r2, r3
 800435a:	2100      	movs	r1, #0
 800435c:	f004 fad7 	bl	800890e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004360:	2414      	movs	r4, #20
 8004362:	193b      	adds	r3, r7, r4
 8004364:	0018      	movs	r0, r3
 8004366:	2328      	movs	r3, #40	; 0x28
 8004368:	001a      	movs	r2, r3
 800436a:	2100      	movs	r1, #0
 800436c:	f004 facf 	bl	800890e <memset>
  if(hadc->Instance==ADC1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a35      	ldr	r2, [pc, #212]	; (800444c <HAL_ADC_MspInit+0x104>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d164      	bne.n	8004444 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800437a:	193b      	adds	r3, r7, r4
 800437c:	2280      	movs	r2, #128	; 0x80
 800437e:	01d2      	lsls	r2, r2, #7
 8004380:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004382:	193b      	adds	r3, r7, r4
 8004384:	2200      	movs	r2, #0
 8004386:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004388:	193b      	adds	r3, r7, r4
 800438a:	0018      	movs	r0, r3
 800438c:	f002 fd66 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 8004390:	1e03      	subs	r3, r0, #0
 8004392:	d001      	beq.n	8004398 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004394:	f7ff fe76 	bl	8004084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004398:	4b2d      	ldr	r3, [pc, #180]	; (8004450 <HAL_ADC_MspInit+0x108>)
 800439a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439c:	4b2c      	ldr	r3, [pc, #176]	; (8004450 <HAL_ADC_MspInit+0x108>)
 800439e:	2180      	movs	r1, #128	; 0x80
 80043a0:	0349      	lsls	r1, r1, #13
 80043a2:	430a      	orrs	r2, r1
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
 80043a6:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <HAL_ADC_MspInit+0x108>)
 80043a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	035b      	lsls	r3, r3, #13
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b4:	4b26      	ldr	r3, [pc, #152]	; (8004450 <HAL_ADC_MspInit+0x108>)
 80043b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b8:	4b25      	ldr	r3, [pc, #148]	; (8004450 <HAL_ADC_MspInit+0x108>)
 80043ba:	2101      	movs	r1, #1
 80043bc:	430a      	orrs	r2, r1
 80043be:	635a      	str	r2, [r3, #52]	; 0x34
 80043c0:	4b23      	ldr	r3, [pc, #140]	; (8004450 <HAL_ADC_MspInit+0x108>)
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	2201      	movs	r2, #1
 80043c6:	4013      	ands	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = FORCE_SENSOR_Pin|POTENTIOMETER_Pin|BATTERYDATA_Pin;
 80043cc:	213c      	movs	r1, #60	; 0x3c
 80043ce:	187b      	adds	r3, r7, r1
 80043d0:	220d      	movs	r2, #13
 80043d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043d4:	187b      	adds	r3, r7, r1
 80043d6:	2203      	movs	r2, #3
 80043d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	2200      	movs	r2, #0
 80043de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e0:	187a      	adds	r2, r7, r1
 80043e2:	23a0      	movs	r3, #160	; 0xa0
 80043e4:	05db      	lsls	r3, r3, #23
 80043e6:	0011      	movs	r1, r2
 80043e8:	0018      	movs	r0, r3
 80043ea:	f001 fd1d 	bl	8005e28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80043ee:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 80043f0:	4a19      	ldr	r2, [pc, #100]	; (8004458 <HAL_ADC_MspInit+0x110>)
 80043f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80043f4:	4b17      	ldr	r3, [pc, #92]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 80043f6:	2205      	movs	r2, #5
 80043f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 8004402:	2200      	movs	r2, #0
 8004404:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 8004408:	2280      	movs	r2, #128	; 0x80
 800440a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 800440e:	2280      	movs	r2, #128	; 0x80
 8004410:	0052      	lsls	r2, r2, #1
 8004412:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	00d2      	lsls	r2, r2, #3
 800441a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 800441e:	2220      	movs	r2, #32
 8004420:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004422:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 8004424:	2200      	movs	r2, #0
 8004426:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 800442a:	0018      	movs	r0, r3
 800442c:	f001 faaa 	bl	8005984 <HAL_DMA_Init>
 8004430:	1e03      	subs	r3, r0, #0
 8004432:	d001      	beq.n	8004438 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8004434:	f7ff fe26 	bl	8004084 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a06      	ldr	r2, [pc, #24]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 800443c:	651a      	str	r2, [r3, #80]	; 0x50
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_ADC_MspInit+0x10c>)
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b015      	add	sp, #84	; 0x54
 800444a:	bd90      	pop	{r4, r7, pc}
 800444c:	40012400 	.word	0x40012400
 8004450:	40021000 	.word	0x40021000
 8004454:	20000260 	.word	0x20000260
 8004458:	40020008 	.word	0x40020008

0800445c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b08b      	sub	sp, #44	; 0x2c
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004464:	2414      	movs	r4, #20
 8004466:	193b      	adds	r3, r7, r4
 8004468:	0018      	movs	r0, r3
 800446a:	2314      	movs	r3, #20
 800446c:	001a      	movs	r2, r3
 800446e:	2100      	movs	r1, #0
 8004470:	f004 fa4d 	bl	800890e <memset>
  if(hi2c->Instance==I2C2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_I2C_MspInit+0x90>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d131      	bne.n	80044e2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800447e:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <HAL_I2C_MspInit+0x94>)
 8004480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004482:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <HAL_I2C_MspInit+0x94>)
 8004484:	2101      	movs	r1, #1
 8004486:	430a      	orrs	r2, r1
 8004488:	635a      	str	r2, [r3, #52]	; 0x34
 800448a:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <HAL_I2C_MspInit+0x94>)
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	2201      	movs	r2, #1
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8004496:	193b      	adds	r3, r7, r4
 8004498:	22c0      	movs	r2, #192	; 0xc0
 800449a:	0152      	lsls	r2, r2, #5
 800449c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800449e:	0021      	movs	r1, r4
 80044a0:	187b      	adds	r3, r7, r1
 80044a2:	2212      	movs	r2, #18
 80044a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	187b      	adds	r3, r7, r1
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ac:	187b      	adds	r3, r7, r1
 80044ae:	2200      	movs	r2, #0
 80044b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80044b2:	187b      	adds	r3, r7, r1
 80044b4:	2206      	movs	r2, #6
 80044b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b8:	187a      	adds	r2, r7, r1
 80044ba:	23a0      	movs	r3, #160	; 0xa0
 80044bc:	05db      	lsls	r3, r3, #23
 80044be:	0011      	movs	r1, r2
 80044c0:	0018      	movs	r0, r3
 80044c2:	f001 fcb1 	bl	8005e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_I2C_MspInit+0x94>)
 80044c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_I2C_MspInit+0x94>)
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	03c9      	lsls	r1, r1, #15
 80044d0:	430a      	orrs	r2, r1
 80044d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_I2C_MspInit+0x94>)
 80044d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	03db      	lsls	r3, r3, #15
 80044dc:	4013      	ands	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b00b      	add	sp, #44	; 0x2c
 80044e8:	bd90      	pop	{r4, r7, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	40005800 	.word	0x40005800
 80044f0:	40021000 	.word	0x40021000

080044f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <HAL_TIM_Base_MspInit+0xb8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d116      	bne.n	8004534 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_TIM_Base_MspInit+0xbc>)
 8004508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450a:	4b29      	ldr	r3, [pc, #164]	; (80045b0 <HAL_TIM_Base_MspInit+0xbc>)
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	0209      	lsls	r1, r1, #8
 8004510:	430a      	orrs	r2, r1
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
 8004514:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <HAL_TIM_Base_MspInit+0xbc>)
 8004516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	4013      	ands	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	697b      	ldr	r3, [r7, #20]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8004522:	2200      	movs	r2, #0
 8004524:	2100      	movs	r1, #0
 8004526:	2013      	movs	r0, #19
 8004528:	f001 f9fa 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800452c:	2013      	movs	r0, #19
 800452e:	f001 fa0c 	bl	800594a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004532:	e036      	b.n	80045a2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1e      	ldr	r2, [pc, #120]	; (80045b4 <HAL_TIM_Base_MspInit+0xc0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d116      	bne.n	800456c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800453e:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <HAL_TIM_Base_MspInit+0xbc>)
 8004540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <HAL_TIM_Base_MspInit+0xbc>)
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	0289      	lsls	r1, r1, #10
 8004548:	430a      	orrs	r2, r1
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
 800454c:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <HAL_TIM_Base_MspInit+0xbc>)
 800454e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	029b      	lsls	r3, r3, #10
 8004554:	4013      	ands	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800455a:	2200      	movs	r2, #0
 800455c:	2100      	movs	r1, #0
 800455e:	2015      	movs	r0, #21
 8004560:	f001 f9de 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004564:	2015      	movs	r0, #21
 8004566:	f001 f9f0 	bl	800594a <HAL_NVIC_EnableIRQ>
}
 800456a:	e01a      	b.n	80045a2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a11      	ldr	r2, [pc, #68]	; (80045b8 <HAL_TIM_Base_MspInit+0xc4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d115      	bne.n	80045a2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004576:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <HAL_TIM_Base_MspInit+0xbc>)
 8004578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <HAL_TIM_Base_MspInit+0xbc>)
 800457c:	2180      	movs	r1, #128	; 0x80
 800457e:	02c9      	lsls	r1, r1, #11
 8004580:	430a      	orrs	r2, r1
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_TIM_Base_MspInit+0xbc>)
 8004586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	02db      	lsls	r3, r3, #11
 800458c:	4013      	ands	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8004592:	2200      	movs	r2, #0
 8004594:	2100      	movs	r1, #0
 8004596:	2016      	movs	r0, #22
 8004598:	f001 f9c2 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800459c:	2016      	movs	r0, #22
 800459e:	f001 f9d4 	bl	800594a <HAL_NVIC_EnableIRQ>
}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b006      	add	sp, #24
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	40002000 	.word	0x40002000
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800

080045bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b095      	sub	sp, #84	; 0x54
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c4:	233c      	movs	r3, #60	; 0x3c
 80045c6:	18fb      	adds	r3, r7, r3
 80045c8:	0018      	movs	r0, r3
 80045ca:	2314      	movs	r3, #20
 80045cc:	001a      	movs	r2, r3
 80045ce:	2100      	movs	r1, #0
 80045d0:	f004 f99d 	bl	800890e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045d4:	2414      	movs	r4, #20
 80045d6:	193b      	adds	r3, r7, r4
 80045d8:	0018      	movs	r0, r3
 80045da:	2328      	movs	r3, #40	; 0x28
 80045dc:	001a      	movs	r2, r3
 80045de:	2100      	movs	r1, #0
 80045e0:	f004 f995 	bl	800890e <memset>
  if(huart->Instance==USART1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a37      	ldr	r2, [pc, #220]	; (80046c8 <HAL_UART_MspInit+0x10c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d167      	bne.n	80046be <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80045ee:	193b      	adds	r3, r7, r4
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80045f4:	193b      	adds	r3, r7, r4
 80045f6:	2200      	movs	r2, #0
 80045f8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045fa:	193b      	adds	r3, r7, r4
 80045fc:	0018      	movs	r0, r3
 80045fe:	f002 fc2d 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 8004602:	1e03      	subs	r3, r0, #0
 8004604:	d001      	beq.n	800460a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004606:	f7ff fd3d 	bl	8004084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800460a:	4b30      	ldr	r3, [pc, #192]	; (80046cc <HAL_UART_MspInit+0x110>)
 800460c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <HAL_UART_MspInit+0x110>)
 8004610:	2180      	movs	r1, #128	; 0x80
 8004612:	01c9      	lsls	r1, r1, #7
 8004614:	430a      	orrs	r2, r1
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
 8004618:	4b2c      	ldr	r3, [pc, #176]	; (80046cc <HAL_UART_MspInit+0x110>)
 800461a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	01db      	lsls	r3, r3, #7
 8004620:	4013      	ands	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004626:	4b29      	ldr	r3, [pc, #164]	; (80046cc <HAL_UART_MspInit+0x110>)
 8004628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <HAL_UART_MspInit+0x110>)
 800462c:	2102      	movs	r1, #2
 800462e:	430a      	orrs	r2, r1
 8004630:	635a      	str	r2, [r3, #52]	; 0x34
 8004632:	4b26      	ldr	r3, [pc, #152]	; (80046cc <HAL_UART_MspInit+0x110>)
 8004634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004636:	2202      	movs	r2, #2
 8004638:	4013      	ands	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUETOOTH_UART_RX_Pin|BLUETOOTH_UART_TX_Pin;
 800463e:	213c      	movs	r1, #60	; 0x3c
 8004640:	187b      	adds	r3, r7, r1
 8004642:	22c0      	movs	r2, #192	; 0xc0
 8004644:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004646:	187b      	adds	r3, r7, r1
 8004648:	2202      	movs	r2, #2
 800464a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	187b      	adds	r3, r7, r1
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004652:	187b      	adds	r3, r7, r1
 8004654:	2200      	movs	r2, #0
 8004656:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004658:	187b      	adds	r3, r7, r1
 800465a:	2200      	movs	r2, #0
 800465c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800465e:	187b      	adds	r3, r7, r1
 8004660:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <HAL_UART_MspInit+0x114>)
 8004662:	0019      	movs	r1, r3
 8004664:	0010      	movs	r0, r2
 8004666:	f001 fbdf 	bl	8005e28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800466a:	4b1a      	ldr	r3, [pc, #104]	; (80046d4 <HAL_UART_MspInit+0x118>)
 800466c:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <HAL_UART_MspInit+0x11c>)
 800466e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004670:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <HAL_UART_MspInit+0x118>)
 8004672:	2232      	movs	r2, #50	; 0x32
 8004674:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004676:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <HAL_UART_MspInit+0x118>)
 8004678:	2200      	movs	r2, #0
 800467a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800467c:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <HAL_UART_MspInit+0x118>)
 800467e:	2200      	movs	r2, #0
 8004680:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <HAL_UART_MspInit+0x118>)
 8004684:	2280      	movs	r2, #128	; 0x80
 8004686:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004688:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <HAL_UART_MspInit+0x118>)
 800468a:	2200      	movs	r2, #0
 800468c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <HAL_UART_MspInit+0x118>)
 8004690:	2200      	movs	r2, #0
 8004692:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004694:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <HAL_UART_MspInit+0x118>)
 8004696:	2220      	movs	r2, #32
 8004698:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800469a:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <HAL_UART_MspInit+0x118>)
 800469c:	2200      	movs	r2, #0
 800469e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80046a0:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <HAL_UART_MspInit+0x118>)
 80046a2:	0018      	movs	r0, r3
 80046a4:	f001 f96e 	bl	8005984 <HAL_DMA_Init>
 80046a8:	1e03      	subs	r3, r0, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80046ac:	f7ff fcea 	bl	8004084 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2180      	movs	r1, #128	; 0x80
 80046b4:	4a07      	ldr	r2, [pc, #28]	; (80046d4 <HAL_UART_MspInit+0x118>)
 80046b6:	505a      	str	r2, [r3, r1]
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_UART_MspInit+0x118>)
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b015      	add	sp, #84	; 0x54
 80046c4:	bd90      	pop	{r4, r7, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	40013800 	.word	0x40013800
 80046cc:	40021000 	.word	0x40021000
 80046d0:	50000400 	.word	0x50000400
 80046d4:	20000488 	.word	0x20000488
 80046d8:	4002001c 	.word	0x4002001c

080046dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046e0:	e7fe      	b.n	80046e0 <NMI_Handler+0x4>

080046e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046e6:	e7fe      	b.n	80046e6 <HardFault_Handler+0x4>

080046e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004700:	f000 f9a0 	bl	8004a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800470e:	2010      	movs	r0, #16
 8004710:	f001 fd28 	bl	8006164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <DMA1_Channel1_IRQHandler+0x14>)
 8004722:	0018      	movs	r0, r3
 8004724:	f001 fa3e 	bl	8005ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	20000260 	.word	0x20000260

08004734 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <DMA1_Channel2_3_IRQHandler+0x14>)
 800473a:	0018      	movs	r0, r3
 800473c:	f001 fa32 	bl	8005ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	20000488 	.word	0x20000488

0800474c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004750:	4b03      	ldr	r3, [pc, #12]	; (8004760 <TIM14_IRQHandler+0x14>)
 8004752:	0018      	movs	r0, r3
 8004754:	f002 fda8 	bl	80072a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	20000310 	.word	0x20000310

08004764 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <TIM16_IRQHandler+0x14>)
 800476a:	0018      	movs	r0, r3
 800476c:	f002 fd9c 	bl	80072a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004770:	46c0      	nop			; (mov r8, r8)
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	2000035c 	.word	0x2000035c

0800477c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <TIM17_IRQHandler+0x14>)
 8004782:	0018      	movs	r0, r3
 8004784:	f002 fd90 	bl	80072a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	200003a8 	.word	0x200003a8

08004794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
	return 1;
 8004798:	2301      	movs	r3, #1
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <_kill>:

int _kill(int pid, int sig)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80047aa:	f004 f873 	bl	8008894 <__errno>
 80047ae:	0003      	movs	r3, r0
 80047b0:	2216      	movs	r2, #22
 80047b2:	601a      	str	r2, [r3, #0]
	return -1;
 80047b4:	2301      	movs	r3, #1
 80047b6:	425b      	negs	r3, r3
}
 80047b8:	0018      	movs	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b002      	add	sp, #8
 80047be:	bd80      	pop	{r7, pc}

080047c0 <_exit>:

void _exit (int status)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047c8:	2301      	movs	r3, #1
 80047ca:	425a      	negs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	0011      	movs	r1, r2
 80047d0:	0018      	movs	r0, r3
 80047d2:	f7ff ffe5 	bl	80047a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80047d6:	e7fe      	b.n	80047d6 <_exit+0x16>

080047d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e00a      	b.n	8004800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80047ea:	e000      	b.n	80047ee <_read+0x16>
 80047ec:	bf00      	nop
 80047ee:	0001      	movs	r1, r0
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	60ba      	str	r2, [r7, #8]
 80047f6:	b2ca      	uxtb	r2, r1
 80047f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	3301      	adds	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	429a      	cmp	r2, r3
 8004806:	dbf0      	blt.n	80047ea <_read+0x12>
	}

return len;
 8004808:	687b      	ldr	r3, [r7, #4]
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b006      	add	sp, #24
 8004810:	bd80      	pop	{r7, pc}

08004812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	e009      	b.n	8004838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	60ba      	str	r2, [r7, #8]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	0018      	movs	r0, r3
 800482e:	e000      	b.n	8004832 <_write+0x20>
 8004830:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	3301      	adds	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	dbf1      	blt.n	8004824 <_write+0x12>
	}
	return len;
 8004840:	687b      	ldr	r3, [r7, #4]
}
 8004842:	0018      	movs	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	b006      	add	sp, #24
 8004848:	bd80      	pop	{r7, pc}

0800484a <_close>:

int _close(int file)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
	return -1;
 8004852:	2301      	movs	r3, #1
 8004854:	425b      	negs	r3, r3
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}

0800485e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2280      	movs	r2, #128	; 0x80
 800486c:	0192      	lsls	r2, r2, #6
 800486e:	605a      	str	r2, [r3, #4]
	return 0;
 8004870:	2300      	movs	r3, #0
}
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	b002      	add	sp, #8
 8004878:	bd80      	pop	{r7, pc}

0800487a <_isatty>:

int _isatty(int file)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
	return 1;
 8004882:	2301      	movs	r3, #1
}
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}

0800488c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
	return 0;
 8004898:	2300      	movs	r3, #0
}
 800489a:	0018      	movs	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	b004      	add	sp, #16
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048ac:	4a14      	ldr	r2, [pc, #80]	; (8004900 <_sbrk+0x5c>)
 80048ae:	4b15      	ldr	r3, [pc, #84]	; (8004904 <_sbrk+0x60>)
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <_sbrk+0x64>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048c0:	4b11      	ldr	r3, [pc, #68]	; (8004908 <_sbrk+0x64>)
 80048c2:	4a12      	ldr	r2, [pc, #72]	; (800490c <_sbrk+0x68>)
 80048c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048c6:	4b10      	ldr	r3, [pc, #64]	; (8004908 <_sbrk+0x64>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	18d3      	adds	r3, r2, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d207      	bcs.n	80048e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048d4:	f003 ffde 	bl	8008894 <__errno>
 80048d8:	0003      	movs	r3, r0
 80048da:	220c      	movs	r2, #12
 80048dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048de:	2301      	movs	r3, #1
 80048e0:	425b      	negs	r3, r3
 80048e2:	e009      	b.n	80048f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <_sbrk+0x64>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048ea:	4b07      	ldr	r3, [pc, #28]	; (8004908 <_sbrk+0x64>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	18d2      	adds	r2, r2, r3
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <_sbrk+0x64>)
 80048f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80048f6:	68fb      	ldr	r3, [r7, #12]
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b006      	add	sp, #24
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20002000 	.word	0x20002000
 8004904:	00000400 	.word	0x00000400
 8004908:	20000538 	.word	0x20000538
 800490c:	20000550 	.word	0x20000550

08004910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004914:	46c0      	nop			; (mov r8, r8)
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800491c:	480d      	ldr	r0, [pc, #52]	; (8004954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800491e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004920:	f7ff fff6 	bl	8004910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004924:	480c      	ldr	r0, [pc, #48]	; (8004958 <LoopForever+0x6>)
  ldr r1, =_edata
 8004926:	490d      	ldr	r1, [pc, #52]	; (800495c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004928:	4a0d      	ldr	r2, [pc, #52]	; (8004960 <LoopForever+0xe>)
  movs r3, #0
 800492a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800492c:	e002      	b.n	8004934 <LoopCopyDataInit>

0800492e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800492e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004932:	3304      	adds	r3, #4

08004934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004938:	d3f9      	bcc.n	800492e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800493a:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800493c:	4c0a      	ldr	r4, [pc, #40]	; (8004968 <LoopForever+0x16>)
  movs r3, #0
 800493e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004940:	e001      	b.n	8004946 <LoopFillZerobss>

08004942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004944:	3204      	adds	r2, #4

08004946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004948:	d3fb      	bcc.n	8004942 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800494a:	f003 ffa9 	bl	80088a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800494e:	f7fe ff61 	bl	8003814 <main>

08004952 <LoopForever>:

LoopForever:
  b LoopForever
 8004952:	e7fe      	b.n	8004952 <LoopForever>
  ldr   r0, =_estack
 8004954:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800495c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004960:	0800da1c 	.word	0x0800da1c
  ldr r2, =_sbss
 8004964:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004968:	20000550 	.word	0x20000550

0800496c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800496c:	e7fe      	b.n	800496c <ADC1_IRQHandler>
	...

08004970 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004976:	1dfb      	adds	r3, r7, #7
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_Init+0x3c>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <HAL_Init+0x3c>)
 8004982:	2180      	movs	r1, #128	; 0x80
 8004984:	0049      	lsls	r1, r1, #1
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800498a:	2003      	movs	r0, #3
 800498c:	f000 f810 	bl	80049b0 <HAL_InitTick>
 8004990:	1e03      	subs	r3, r0, #0
 8004992:	d003      	beq.n	800499c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004994:	1dfb      	adds	r3, r7, #7
 8004996:	2201      	movs	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	e001      	b.n	80049a0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800499c:	f7ff fcb0 	bl	8004300 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80049a0:	1dfb      	adds	r3, r7, #7
 80049a2:	781b      	ldrb	r3, [r3, #0]
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b002      	add	sp, #8
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40022000 	.word	0x40022000

080049b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049b8:	230f      	movs	r3, #15
 80049ba:	18fb      	adds	r3, r7, r3
 80049bc:	2200      	movs	r2, #0
 80049be:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <HAL_InitTick+0x88>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02b      	beq.n	8004a20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80049c8:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <HAL_InitTick+0x8c>)
 80049ca:	681c      	ldr	r4, [r3, #0]
 80049cc:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <HAL_InitTick+0x88>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	0019      	movs	r1, r3
 80049d2:	23fa      	movs	r3, #250	; 0xfa
 80049d4:	0098      	lsls	r0, r3, #2
 80049d6:	f7fb fbb1 	bl	800013c <__udivsi3>
 80049da:	0003      	movs	r3, r0
 80049dc:	0019      	movs	r1, r3
 80049de:	0020      	movs	r0, r4
 80049e0:	f7fb fbac 	bl	800013c <__udivsi3>
 80049e4:	0003      	movs	r3, r0
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 ffbf 	bl	800596a <HAL_SYSTICK_Config>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d112      	bne.n	8004a16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d80a      	bhi.n	8004a0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	2301      	movs	r3, #1
 80049fa:	425b      	negs	r3, r3
 80049fc:	2200      	movs	r2, #0
 80049fe:	0018      	movs	r0, r3
 8004a00:	f000 ff8e 	bl	8005920 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <HAL_InitTick+0x90>)
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e00d      	b.n	8004a28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004a0c:	230f      	movs	r3, #15
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	2201      	movs	r2, #1
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	e008      	b.n	8004a28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a16:	230f      	movs	r3, #15
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e003      	b.n	8004a28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a20:	230f      	movs	r3, #15
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004a28:	230f      	movs	r3, #15
 8004a2a:	18fb      	adds	r3, r7, r3
 8004a2c:	781b      	ldrb	r3, [r3, #0]
}
 8004a2e:	0018      	movs	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b005      	add	sp, #20
 8004a34:	bd90      	pop	{r4, r7, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	20000008 	.word	0x20000008
 8004a3c:	20000000 	.word	0x20000000
 8004a40:	20000004 	.word	0x20000004

08004a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_IncTick+0x1c>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	001a      	movs	r2, r3
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_IncTick+0x20>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	18d2      	adds	r2, r2, r3
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_IncTick+0x20>)
 8004a56:	601a      	str	r2, [r3, #0]
}
 8004a58:	46c0      	nop			; (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	20000008 	.word	0x20000008
 8004a64:	2000053c 	.word	0x2000053c

08004a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a6c:	4b02      	ldr	r3, [pc, #8]	; (8004a78 <HAL_GetTick+0x10>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	0018      	movs	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	2000053c 	.word	0x2000053c

08004a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a84:	f7ff fff0 	bl	8004a68 <HAL_GetTick>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	d005      	beq.n	8004aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a96:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <HAL_Delay+0x44>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	f7ff ffe0 	bl	8004a68 <HAL_GetTick>
 8004aa8:	0002      	movs	r2, r0
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d8f7      	bhi.n	8004aa4 <HAL_Delay+0x28>
  {
  }
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b004      	add	sp, #16
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	20000008 	.word	0x20000008

08004ac4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a05      	ldr	r2, [pc, #20]	; (8004ae8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004ad4:	401a      	ands	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b002      	add	sp, #8
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	fe3fffff 	.word	0xfe3fffff

08004aec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	23e0      	movs	r3, #224	; 0xe0
 8004afa:	045b      	lsls	r3, r3, #17
 8004afc:	4013      	ands	r3, r2
}
 8004afe:	0018      	movs	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b002      	add	sp, #8
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	2104      	movs	r1, #4
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	2107      	movs	r1, #7
 8004b1e:	4091      	lsls	r1, r2
 8004b20:	000a      	movs	r2, r1
 8004b22:	43d2      	mvns	r2, r2
 8004b24:	401a      	ands	r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2104      	movs	r1, #4
 8004b2a:	400b      	ands	r3, r1
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4099      	lsls	r1, r3
 8004b30:	000b      	movs	r3, r1
 8004b32:	431a      	orrs	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b004      	add	sp, #16
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	2104      	movs	r1, #4
 8004b52:	400a      	ands	r2, r1
 8004b54:	2107      	movs	r1, #7
 8004b56:	4091      	lsls	r1, r2
 8004b58:	000a      	movs	r2, r1
 8004b5a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2104      	movs	r1, #4
 8004b60:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004b62:	40da      	lsrs	r2, r3
 8004b64:	0013      	movs	r3, r2
}
 8004b66:	0018      	movs	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b002      	add	sp, #8
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	23c0      	movs	r3, #192	; 0xc0
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d101      	bne.n	8004b86 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b002      	add	sp, #8
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	211f      	movs	r1, #31
 8004ba4:	400a      	ands	r2, r1
 8004ba6:	210f      	movs	r1, #15
 8004ba8:	4091      	lsls	r1, r2
 8004baa:	000a      	movs	r2, r1
 8004bac:	43d2      	mvns	r2, r2
 8004bae:	401a      	ands	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0e9b      	lsrs	r3, r3, #26
 8004bb4:	210f      	movs	r1, #15
 8004bb6:	4019      	ands	r1, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	201f      	movs	r0, #31
 8004bbc:	4003      	ands	r3, r0
 8004bbe:	4099      	lsls	r1, r3
 8004bc0:	000b      	movs	r3, r1
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004bc8:	46c0      	nop			; (mov r8, r8)
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b004      	add	sp, #16
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	035b      	lsls	r3, r3, #13
 8004be2:	0b5b      	lsrs	r3, r3, #13
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b002      	add	sp, #8
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	0352      	lsls	r2, r2, #13
 8004c04:	0b52      	lsrs	r2, r2, #13
 8004c06:	43d2      	mvns	r2, r2
 8004c08:	401a      	ands	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b002      	add	sp, #8
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	0212      	lsls	r2, r2, #8
 8004c2c:	43d2      	mvns	r2, r2
 8004c2e:	401a      	ands	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	400b      	ands	r3, r1
 8004c38:	4904      	ldr	r1, [pc, #16]	; (8004c4c <LL_ADC_SetChannelSamplingTime+0x34>)
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b004      	add	sp, #16
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	07ffff00 	.word	0x07ffff00

08004c50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4a05      	ldr	r2, [pc, #20]	; (8004c74 <LL_ADC_EnableInternalRegulator+0x24>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	0552      	lsls	r2, r2, #21
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	b002      	add	sp, #8
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	6fffffe8 	.word	0x6fffffe8

08004c78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	055b      	lsls	r3, r3, #21
 8004c88:	401a      	ands	r2, r3
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	055b      	lsls	r3, r3, #21
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d101      	bne.n	8004c96 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	0018      	movs	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b002      	add	sp, #8
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <LL_ADC_Enable+0x20>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004cb8:	46c0      	nop			; (mov r8, r8)
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b002      	add	sp, #8
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	7fffffe8 	.word	0x7fffffe8

08004cc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <LL_ADC_Disable+0x20>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	b002      	add	sp, #8
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	7fffffe8 	.word	0x7fffffe8

08004ce8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <LL_ADC_IsEnabled+0x18>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <LL_ADC_IsEnabled+0x1a>
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b002      	add	sp, #8
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <LL_ADC_REG_StartConversion+0x20>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d24:	46c0      	nop			; (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	7fffffe8 	.word	0x7fffffe8

08004d30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d101      	bne.n	8004d48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d5c:	231f      	movs	r3, #31
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e17f      	b.n	800507a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7ff fadf 	bl	8004348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2254      	movs	r2, #84	; 0x54
 8004d94:	2100      	movs	r1, #0
 8004d96:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7ff ff6b 	bl	8004c78 <LL_ADC_IsInternalRegulatorEnabled>
 8004da2:	1e03      	subs	r3, r0, #0
 8004da4:	d115      	bne.n	8004dd2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	0018      	movs	r0, r3
 8004dac:	f7ff ff50 	bl	8004c50 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004db0:	4bb4      	ldr	r3, [pc, #720]	; (8005084 <HAL_ADC_Init+0x330>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	49b4      	ldr	r1, [pc, #720]	; (8005088 <HAL_ADC_Init+0x334>)
 8004db6:	0018      	movs	r0, r3
 8004db8:	f7fb f9c0 	bl	800013c <__udivsi3>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004dc4:	e002      	b.n	8004dcc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f9      	bne.n	8004dc6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f7ff ff4e 	bl	8004c78 <LL_ADC_IsInternalRegulatorEnabled>
 8004ddc:	1e03      	subs	r3, r0, #0
 8004dde:	d10f      	bne.n	8004e00 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	2210      	movs	r2, #16
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df0:	2201      	movs	r2, #1
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004df8:	231f      	movs	r3, #31
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7ff ff93 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 8004e0a:	0003      	movs	r3, r0
 8004e0c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	2210      	movs	r2, #16
 8004e14:	4013      	ands	r3, r2
 8004e16:	d000      	beq.n	8004e1a <HAL_ADC_Init+0xc6>
 8004e18:	e122      	b.n	8005060 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d000      	beq.n	8004e22 <HAL_ADC_Init+0xce>
 8004e20:	e11e      	b.n	8005060 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	4a99      	ldr	r2, [pc, #612]	; (800508c <HAL_ADC_Init+0x338>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	0018      	movs	r0, r3
 8004e38:	f7ff ff56 	bl	8004ce8 <LL_ADC_IsEnabled>
 8004e3c:	1e03      	subs	r3, r0, #0
 8004e3e:	d000      	beq.n	8004e42 <HAL_ADC_Init+0xee>
 8004e40:	e0ad      	b.n	8004f9e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7e1b      	ldrb	r3, [r3, #24]
 8004e4a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004e4c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	7e5b      	ldrb	r3, [r3, #25]
 8004e52:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004e54:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	7e9b      	ldrb	r3, [r3, #26]
 8004e5a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004e5c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <HAL_ADC_Init+0x118>
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	015b      	lsls	r3, r3, #5
 8004e6a:	e000      	b.n	8004e6e <HAL_ADC_Init+0x11a>
 8004e6c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004e6e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004e74:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	da04      	bge.n	8004e88 <HAL_ADC_Init+0x134>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	e001      	b.n	8004e8c <HAL_ADC_Init+0x138>
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004e8c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	212c      	movs	r1, #44	; 0x2c
 8004e92:	5c5b      	ldrb	r3, [r3, r1]
 8004e94:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004e96:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	5c9b      	ldrb	r3, [r3, r2]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d115      	bne.n	8004ed4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7e9b      	ldrb	r3, [r3, #26]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2280      	movs	r2, #128	; 0x80
 8004eb4:	0252      	lsls	r2, r2, #9
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	e00b      	b.n	8004ed4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	2201      	movs	r2, #1
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee0:	23e0      	movs	r3, #224	; 0xe0
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004eea:	4313      	orrs	r3, r2
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a65      	ldr	r2, [pc, #404]	; (8005090 <HAL_ADC_Init+0x33c>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	0019      	movs	r1, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	0f9b      	lsrs	r3, r3, #30
 8004f0e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004f14:	4313      	orrs	r3, r2
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	223c      	movs	r2, #60	; 0x3c
 8004f20:	5c9b      	ldrb	r3, [r3, r2]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d111      	bne.n	8004f4a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	0f9b      	lsrs	r3, r3, #30
 8004f2c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004f32:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004f38:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004f3e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	2201      	movs	r2, #1
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	4a50      	ldr	r2, [pc, #320]	; (8005094 <HAL_ADC_Init+0x340>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	0019      	movs	r1, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	23c0      	movs	r3, #192	; 0xc0
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d018      	beq.n	8004f9e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004f70:	2380      	movs	r3, #128	; 0x80
 8004f72:	05db      	lsls	r3, r3, #23
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d012      	beq.n	8004f9e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	061b      	lsls	r3, r3, #24
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d00c      	beq.n	8004f9e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004f84:	4b44      	ldr	r3, [pc, #272]	; (8005098 <HAL_ADC_Init+0x344>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a44      	ldr	r2, [pc, #272]	; (800509c <HAL_ADC_Init+0x348>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	23f0      	movs	r3, #240	; 0xf0
 8004f94:	039b      	lsls	r3, r3, #14
 8004f96:	401a      	ands	r2, r3
 8004f98:	4b3f      	ldr	r3, [pc, #252]	; (8005098 <HAL_ADC_Init+0x344>)
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	001a      	movs	r2, r3
 8004fa8:	2100      	movs	r1, #0
 8004faa:	f7ff fdac 	bl	8004b06 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	493a      	ldr	r1, [pc, #232]	; (80050a0 <HAL_ADC_Init+0x34c>)
 8004fb8:	001a      	movs	r2, r3
 8004fba:	f7ff fda4 	bl	8004b06 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2110      	movs	r1, #16
 8004fd2:	4249      	negs	r1, r1
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fd8:	e018      	b.n	800500c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	039b      	lsls	r3, r3, #14
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d112      	bne.n	800500c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	221c      	movs	r2, #28
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	4252      	negs	r2, r2
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	0011      	movs	r1, r2
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2100      	movs	r1, #0
 8005012:	0018      	movs	r0, r3
 8005014:	f7ff fd94 	bl	8004b40 <LL_ADC_GetSamplingTimeCommonChannels>
 8005018:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800501e:	429a      	cmp	r2, r3
 8005020:	d10b      	bne.n	800503a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502c:	2203      	movs	r2, #3
 800502e:	4393      	bics	r3, r2
 8005030:	2201      	movs	r2, #1
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005038:	e01c      	b.n	8005074 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	2212      	movs	r2, #18
 8005040:	4393      	bics	r3, r2
 8005042:	2210      	movs	r2, #16
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	2201      	movs	r2, #1
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005056:	231f      	movs	r3, #31
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800505e:	e009      	b.n	8005074 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005064:	2210      	movs	r2, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800506c:	231f      	movs	r3, #31
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005074:	231f      	movs	r3, #31
 8005076:	18fb      	adds	r3, r7, r3
 8005078:	781b      	ldrb	r3, [r3, #0]
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b008      	add	sp, #32
 8005080:	bd80      	pop	{r7, pc}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	20000000 	.word	0x20000000
 8005088:	00030d40 	.word	0x00030d40
 800508c:	fffffefd 	.word	0xfffffefd
 8005090:	fffe0201 	.word	0xfffe0201
 8005094:	1ffffc02 	.word	0x1ffffc02
 8005098:	40012708 	.word	0x40012708
 800509c:	ffc3ffff 	.word	0xffc3ffff
 80050a0:	07ffff04 	.word	0x07ffff04

080050a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80050a4:	b5b0      	push	{r4, r5, r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f7ff fe3b 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 80050ba:	1e03      	subs	r3, r0, #0
 80050bc:	d16c      	bne.n	8005198 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2254      	movs	r2, #84	; 0x54
 80050c2:	5c9b      	ldrb	r3, [r3, r2]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_ADC_Start_DMA+0x28>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e06c      	b.n	80051a6 <HAL_ADC_Start_DMA+0x102>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2254      	movs	r2, #84	; 0x54
 80050d0:	2101      	movs	r1, #1
 80050d2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	4013      	ands	r3, r2
 80050de:	d113      	bne.n	8005108 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	0018      	movs	r0, r3
 80050e6:	f7ff fdff 	bl	8004ce8 <LL_ADC_IsEnabled>
 80050ea:	1e03      	subs	r3, r0, #0
 80050ec:	d004      	beq.n	80050f8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f7ff fde6 	bl	8004cc4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2101      	movs	r1, #1
 8005104:	430a      	orrs	r2, r1
 8005106:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005108:	2517      	movs	r5, #23
 800510a:	197c      	adds	r4, r7, r5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	0018      	movs	r0, r3
 8005110:	f000 fa46 	bl	80055a0 <ADC_Enable>
 8005114:	0003      	movs	r3, r0
 8005116:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005118:	002c      	movs	r4, r5
 800511a:	193b      	adds	r3, r7, r4
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d13e      	bne.n	80051a0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005126:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <HAL_ADC_Start_DMA+0x10c>)
 8005128:	4013      	ands	r3, r2
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	0052      	lsls	r2, r2, #1
 800512e:	431a      	orrs	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513e:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <HAL_ADC_Start_DMA+0x110>)
 8005140:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005146:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <HAL_ADC_Start_DMA+0x114>)
 8005148:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514e:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <HAL_ADC_Start_DMA+0x118>)
 8005150:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	221c      	movs	r2, #28
 8005158:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2254      	movs	r2, #84	; 0x54
 800515e:	2100      	movs	r1, #0
 8005160:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2110      	movs	r1, #16
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3340      	adds	r3, #64	; 0x40
 800517c:	0019      	movs	r1, r3
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	193c      	adds	r4, r7, r4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f000 fc88 	bl	8005a98 <HAL_DMA_Start_IT>
 8005188:	0003      	movs	r3, r0
 800518a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	0018      	movs	r0, r3
 8005192:	f7ff fdbb 	bl	8004d0c <LL_ADC_REG_StartConversion>
 8005196:	e003      	b.n	80051a0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005198:	2317      	movs	r3, #23
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	2202      	movs	r2, #2
 800519e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80051a0:	2317      	movs	r3, #23
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	781b      	ldrb	r3, [r3, #0]
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b006      	add	sp, #24
 80051ac:	bdb0      	pop	{r4, r5, r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	fffff0fe 	.word	0xfffff0fe
 80051b4:	080056ad 	.word	0x080056ad
 80051b8:	08005775 	.word	0x08005775
 80051bc:	08005793 	.word	0x08005793

080051c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b002      	add	sp, #8
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	b002      	add	sp, #8
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b002      	add	sp, #8
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051fa:	2317      	movs	r3, #23
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2254      	movs	r2, #84	; 0x54
 800520a:	5c9b      	ldrb	r3, [r3, r2]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x24>
 8005210:	2302      	movs	r3, #2
 8005212:	e1c0      	b.n	8005596 <HAL_ADC_ConfigChannel+0x3a6>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2254      	movs	r2, #84	; 0x54
 8005218:	2101      	movs	r1, #1
 800521a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	0018      	movs	r0, r3
 8005222:	f7ff fd85 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 8005226:	1e03      	subs	r3, r0, #0
 8005228:	d000      	beq.n	800522c <HAL_ADC_ConfigChannel+0x3c>
 800522a:	e1a3      	b.n	8005574 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d100      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x46>
 8005234:	e143      	b.n	80054be <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	429a      	cmp	r2, r3
 8005240:	d004      	beq.n	800524c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005246:	4ac1      	ldr	r2, [pc, #772]	; (800554c <HAL_ADC_ConfigChannel+0x35c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d108      	bne.n	800525e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0019      	movs	r1, r3
 8005256:	0010      	movs	r0, r2
 8005258:	f7ff fcba 	bl	8004bd0 <LL_ADC_REG_SetSequencerChAdd>
 800525c:	e0c9      	b.n	80053f2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	211f      	movs	r1, #31
 8005268:	400b      	ands	r3, r1
 800526a:	210f      	movs	r1, #15
 800526c:	4099      	lsls	r1, r3
 800526e:	000b      	movs	r3, r1
 8005270:	43db      	mvns	r3, r3
 8005272:	4013      	ands	r3, r2
 8005274:	0019      	movs	r1, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	035b      	lsls	r3, r3, #13
 800527c:	0b5b      	lsrs	r3, r3, #13
 800527e:	d105      	bne.n	800528c <HAL_ADC_ConfigChannel+0x9c>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	0e9b      	lsrs	r3, r3, #26
 8005286:	221f      	movs	r2, #31
 8005288:	4013      	ands	r3, r2
 800528a:	e098      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2201      	movs	r2, #1
 8005292:	4013      	ands	r3, r2
 8005294:	d000      	beq.n	8005298 <HAL_ADC_ConfigChannel+0xa8>
 8005296:	e091      	b.n	80053bc <HAL_ADC_ConfigChannel+0x1cc>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2202      	movs	r2, #2
 800529e:	4013      	ands	r3, r2
 80052a0:	d000      	beq.n	80052a4 <HAL_ADC_ConfigChannel+0xb4>
 80052a2:	e089      	b.n	80053b8 <HAL_ADC_ConfigChannel+0x1c8>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2204      	movs	r2, #4
 80052aa:	4013      	ands	r3, r2
 80052ac:	d000      	beq.n	80052b0 <HAL_ADC_ConfigChannel+0xc0>
 80052ae:	e081      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x1c4>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2208      	movs	r2, #8
 80052b6:	4013      	ands	r3, r2
 80052b8:	d000      	beq.n	80052bc <HAL_ADC_ConfigChannel+0xcc>
 80052ba:	e079      	b.n	80053b0 <HAL_ADC_ConfigChannel+0x1c0>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2210      	movs	r2, #16
 80052c2:	4013      	ands	r3, r2
 80052c4:	d000      	beq.n	80052c8 <HAL_ADC_ConfigChannel+0xd8>
 80052c6:	e071      	b.n	80053ac <HAL_ADC_ConfigChannel+0x1bc>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2220      	movs	r2, #32
 80052ce:	4013      	ands	r3, r2
 80052d0:	d000      	beq.n	80052d4 <HAL_ADC_ConfigChannel+0xe4>
 80052d2:	e069      	b.n	80053a8 <HAL_ADC_ConfigChannel+0x1b8>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2240      	movs	r2, #64	; 0x40
 80052da:	4013      	ands	r3, r2
 80052dc:	d000      	beq.n	80052e0 <HAL_ADC_ConfigChannel+0xf0>
 80052de:	e061      	b.n	80053a4 <HAL_ADC_ConfigChannel+0x1b4>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2280      	movs	r2, #128	; 0x80
 80052e6:	4013      	ands	r3, r2
 80052e8:	d000      	beq.n	80052ec <HAL_ADC_ConfigChannel+0xfc>
 80052ea:	e059      	b.n	80053a0 <HAL_ADC_ConfigChannel+0x1b0>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4013      	ands	r3, r2
 80052f6:	d151      	bne.n	800539c <HAL_ADC_ConfigChannel+0x1ac>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4013      	ands	r3, r2
 8005302:	d149      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x1a8>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4013      	ands	r3, r2
 800530e:	d141      	bne.n	8005394 <HAL_ADC_ConfigChannel+0x1a4>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	4013      	ands	r3, r2
 800531a:	d139      	bne.n	8005390 <HAL_ADC_ConfigChannel+0x1a0>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	015b      	lsls	r3, r3, #5
 8005324:	4013      	ands	r3, r2
 8005326:	d131      	bne.n	800538c <HAL_ADC_ConfigChannel+0x19c>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	019b      	lsls	r3, r3, #6
 8005330:	4013      	ands	r3, r2
 8005332:	d129      	bne.n	8005388 <HAL_ADC_ConfigChannel+0x198>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	01db      	lsls	r3, r3, #7
 800533c:	4013      	ands	r3, r2
 800533e:	d121      	bne.n	8005384 <HAL_ADC_ConfigChannel+0x194>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	2380      	movs	r3, #128	; 0x80
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	4013      	ands	r3, r2
 800534a:	d119      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x190>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	025b      	lsls	r3, r3, #9
 8005354:	4013      	ands	r3, r2
 8005356:	d111      	bne.n	800537c <HAL_ADC_ConfigChannel+0x18c>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	029b      	lsls	r3, r3, #10
 8005360:	4013      	ands	r3, r2
 8005362:	d109      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x188>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	02db      	lsls	r3, r3, #11
 800536c:	4013      	ands	r3, r2
 800536e:	d001      	beq.n	8005374 <HAL_ADC_ConfigChannel+0x184>
 8005370:	2312      	movs	r3, #18
 8005372:	e024      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 8005374:	2300      	movs	r3, #0
 8005376:	e022      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 8005378:	2311      	movs	r3, #17
 800537a:	e020      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 800537c:	2310      	movs	r3, #16
 800537e:	e01e      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 8005380:	230f      	movs	r3, #15
 8005382:	e01c      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 8005384:	230e      	movs	r3, #14
 8005386:	e01a      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 8005388:	230d      	movs	r3, #13
 800538a:	e018      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 800538c:	230c      	movs	r3, #12
 800538e:	e016      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 8005390:	230b      	movs	r3, #11
 8005392:	e014      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 8005394:	230a      	movs	r3, #10
 8005396:	e012      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 8005398:	2309      	movs	r3, #9
 800539a:	e010      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 800539c:	2308      	movs	r3, #8
 800539e:	e00e      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 80053a0:	2307      	movs	r3, #7
 80053a2:	e00c      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 80053a4:	2306      	movs	r3, #6
 80053a6:	e00a      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 80053a8:	2305      	movs	r3, #5
 80053aa:	e008      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 80053ac:	2304      	movs	r3, #4
 80053ae:	e006      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 80053b0:	2303      	movs	r3, #3
 80053b2:	e004      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e002      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ce>
 80053bc:	2300      	movs	r3, #0
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	6852      	ldr	r2, [r2, #4]
 80053c2:	201f      	movs	r0, #31
 80053c4:	4002      	ands	r2, r0
 80053c6:	4093      	lsls	r3, r2
 80053c8:	000a      	movs	r2, r1
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	089b      	lsrs	r3, r3, #2
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d808      	bhi.n	80053f2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6859      	ldr	r1, [r3, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	001a      	movs	r2, r3
 80053ee:	f7ff fbcf 	bl	8004b90 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6819      	ldr	r1, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	001a      	movs	r2, r3
 8005400:	f7ff fc0a 	bl	8004c18 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	db00      	blt.n	800540e <HAL_ADC_ConfigChannel+0x21e>
 800540c:	e0bc      	b.n	8005588 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800540e:	4b50      	ldr	r3, [pc, #320]	; (8005550 <HAL_ADC_ConfigChannel+0x360>)
 8005410:	0018      	movs	r0, r3
 8005412:	f7ff fb6b 	bl	8004aec <LL_ADC_GetCommonPathInternalCh>
 8005416:	0003      	movs	r3, r0
 8005418:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a4d      	ldr	r2, [pc, #308]	; (8005554 <HAL_ADC_ConfigChannel+0x364>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d122      	bne.n	800546a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	041b      	lsls	r3, r3, #16
 800542a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800542c:	d11d      	bne.n	800546a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2280      	movs	r2, #128	; 0x80
 8005432:	0412      	lsls	r2, r2, #16
 8005434:	4313      	orrs	r3, r2
 8005436:	4a46      	ldr	r2, [pc, #280]	; (8005550 <HAL_ADC_ConfigChannel+0x360>)
 8005438:	0019      	movs	r1, r3
 800543a:	0010      	movs	r0, r2
 800543c:	f7ff fb42 	bl	8004ac4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005440:	4b45      	ldr	r3, [pc, #276]	; (8005558 <HAL_ADC_ConfigChannel+0x368>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4945      	ldr	r1, [pc, #276]	; (800555c <HAL_ADC_ConfigChannel+0x36c>)
 8005446:	0018      	movs	r0, r3
 8005448:	f7fa fe78 	bl	800013c <__udivsi3>
 800544c:	0003      	movs	r3, r0
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	0013      	movs	r3, r2
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	189b      	adds	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800545a:	e002      	b.n	8005462 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3b01      	subs	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f9      	bne.n	800545c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005468:	e08e      	b.n	8005588 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a3c      	ldr	r2, [pc, #240]	; (8005560 <HAL_ADC_ConfigChannel+0x370>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10e      	bne.n	8005492 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	045b      	lsls	r3, r3, #17
 800547a:	4013      	ands	r3, r2
 800547c:	d109      	bne.n	8005492 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2280      	movs	r2, #128	; 0x80
 8005482:	0452      	lsls	r2, r2, #17
 8005484:	4313      	orrs	r3, r2
 8005486:	4a32      	ldr	r2, [pc, #200]	; (8005550 <HAL_ADC_ConfigChannel+0x360>)
 8005488:	0019      	movs	r1, r3
 800548a:	0010      	movs	r0, r2
 800548c:	f7ff fb1a 	bl	8004ac4 <LL_ADC_SetCommonPathInternalCh>
 8005490:	e07a      	b.n	8005588 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a33      	ldr	r2, [pc, #204]	; (8005564 <HAL_ADC_ConfigChannel+0x374>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d000      	beq.n	800549e <HAL_ADC_ConfigChannel+0x2ae>
 800549c:	e074      	b.n	8005588 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	03db      	lsls	r3, r3, #15
 80054a4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80054a6:	d000      	beq.n	80054aa <HAL_ADC_ConfigChannel+0x2ba>
 80054a8:	e06e      	b.n	8005588 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2280      	movs	r2, #128	; 0x80
 80054ae:	03d2      	lsls	r2, r2, #15
 80054b0:	4313      	orrs	r3, r2
 80054b2:	4a27      	ldr	r2, [pc, #156]	; (8005550 <HAL_ADC_ConfigChannel+0x360>)
 80054b4:	0019      	movs	r1, r3
 80054b6:	0010      	movs	r0, r2
 80054b8:	f7ff fb04 	bl	8004ac4 <LL_ADC_SetCommonPathInternalCh>
 80054bc:	e064      	b.n	8005588 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	061b      	lsls	r3, r3, #24
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d004      	beq.n	80054d4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80054ce:	4a1f      	ldr	r2, [pc, #124]	; (800554c <HAL_ADC_ConfigChannel+0x35c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d107      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	0019      	movs	r1, r3
 80054de:	0010      	movs	r0, r2
 80054e0:	f7ff fb87 	bl	8004bf2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	da4d      	bge.n	8005588 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054ec:	4b18      	ldr	r3, [pc, #96]	; (8005550 <HAL_ADC_ConfigChannel+0x360>)
 80054ee:	0018      	movs	r0, r3
 80054f0:	f7ff fafc 	bl	8004aec <LL_ADC_GetCommonPathInternalCh>
 80054f4:	0003      	movs	r3, r0
 80054f6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a15      	ldr	r2, [pc, #84]	; (8005554 <HAL_ADC_ConfigChannel+0x364>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d108      	bne.n	8005514 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4a18      	ldr	r2, [pc, #96]	; (8005568 <HAL_ADC_ConfigChannel+0x378>)
 8005506:	4013      	ands	r3, r2
 8005508:	4a11      	ldr	r2, [pc, #68]	; (8005550 <HAL_ADC_ConfigChannel+0x360>)
 800550a:	0019      	movs	r1, r3
 800550c:	0010      	movs	r0, r2
 800550e:	f7ff fad9 	bl	8004ac4 <LL_ADC_SetCommonPathInternalCh>
 8005512:	e039      	b.n	8005588 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a11      	ldr	r2, [pc, #68]	; (8005560 <HAL_ADC_ConfigChannel+0x370>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d108      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	4a12      	ldr	r2, [pc, #72]	; (800556c <HAL_ADC_ConfigChannel+0x37c>)
 8005522:	4013      	ands	r3, r2
 8005524:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <HAL_ADC_ConfigChannel+0x360>)
 8005526:	0019      	movs	r1, r3
 8005528:	0010      	movs	r0, r2
 800552a:	f7ff facb 	bl	8004ac4 <LL_ADC_SetCommonPathInternalCh>
 800552e:	e02b      	b.n	8005588 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a0b      	ldr	r2, [pc, #44]	; (8005564 <HAL_ADC_ConfigChannel+0x374>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d126      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4a0c      	ldr	r2, [pc, #48]	; (8005570 <HAL_ADC_ConfigChannel+0x380>)
 800553e:	4013      	ands	r3, r2
 8005540:	4a03      	ldr	r2, [pc, #12]	; (8005550 <HAL_ADC_ConfigChannel+0x360>)
 8005542:	0019      	movs	r1, r3
 8005544:	0010      	movs	r0, r2
 8005546:	f7ff fabd 	bl	8004ac4 <LL_ADC_SetCommonPathInternalCh>
 800554a:	e01d      	b.n	8005588 <HAL_ADC_ConfigChannel+0x398>
 800554c:	80000004 	.word	0x80000004
 8005550:	40012708 	.word	0x40012708
 8005554:	b0001000 	.word	0xb0001000
 8005558:	20000000 	.word	0x20000000
 800555c:	00030d40 	.word	0x00030d40
 8005560:	b8004000 	.word	0xb8004000
 8005564:	b4002000 	.word	0xb4002000
 8005568:	ff7fffff 	.word	0xff7fffff
 800556c:	feffffff 	.word	0xfeffffff
 8005570:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	2220      	movs	r2, #32
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005580:	2317      	movs	r3, #23
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2254      	movs	r2, #84	; 0x54
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005590:	2317      	movs	r3, #23
 8005592:	18fb      	adds	r3, r7, r3
 8005594:	781b      	ldrb	r3, [r3, #0]
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b006      	add	sp, #24
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)

080055a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7ff fb99 	bl	8004ce8 <LL_ADC_IsEnabled>
 80055b6:	1e03      	subs	r3, r0, #0
 80055b8:	d000      	beq.n	80055bc <ADC_Enable+0x1c>
 80055ba:	e069      	b.n	8005690 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	4a36      	ldr	r2, [pc, #216]	; (800569c <ADC_Enable+0xfc>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	d00d      	beq.n	80055e4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055cc:	2210      	movs	r2, #16
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d8:	2201      	movs	r2, #1
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e056      	b.n	8005692 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	0018      	movs	r0, r3
 80055ea:	f7ff fb59 	bl	8004ca0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80055ee:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <ADC_Enable+0x100>)
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7ff fa7b 	bl	8004aec <LL_ADC_GetCommonPathInternalCh>
 80055f6:	0002      	movs	r2, r0
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	4013      	ands	r3, r2
 80055fe:	d00f      	beq.n	8005620 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005600:	4b28      	ldr	r3, [pc, #160]	; (80056a4 <ADC_Enable+0x104>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4928      	ldr	r1, [pc, #160]	; (80056a8 <ADC_Enable+0x108>)
 8005606:	0018      	movs	r0, r3
 8005608:	f7fa fd98 	bl	800013c <__udivsi3>
 800560c:	0003      	movs	r3, r0
 800560e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005610:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005612:	e002      	b.n	800561a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	3b01      	subs	r3, #1
 8005618:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f9      	bne.n	8005614 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	7e5b      	ldrb	r3, [r3, #25]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d033      	beq.n	8005690 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005628:	f7ff fa1e 	bl	8004a68 <HAL_GetTick>
 800562c:	0003      	movs	r3, r0
 800562e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005630:	e027      	b.n	8005682 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	0018      	movs	r0, r3
 8005638:	f7ff fb56 	bl	8004ce8 <LL_ADC_IsEnabled>
 800563c:	1e03      	subs	r3, r0, #0
 800563e:	d104      	bne.n	800564a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	0018      	movs	r0, r3
 8005646:	f7ff fb2b 	bl	8004ca0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800564a:	f7ff fa0d 	bl	8004a68 <HAL_GetTick>
 800564e:	0002      	movs	r2, r0
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d914      	bls.n	8005682 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2201      	movs	r2, #1
 8005660:	4013      	ands	r3, r2
 8005662:	2b01      	cmp	r3, #1
 8005664:	d00d      	beq.n	8005682 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	2210      	movs	r2, #16
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005676:	2201      	movs	r2, #1
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e007      	b.n	8005692 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2201      	movs	r2, #1
 800568a:	4013      	ands	r3, r2
 800568c:	2b01      	cmp	r3, #1
 800568e:	d1d0      	bne.n	8005632 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	0018      	movs	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	b004      	add	sp, #16
 8005698:	bd80      	pop	{r7, pc}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	80000017 	.word	0x80000017
 80056a0:	40012708 	.word	0x40012708
 80056a4:	20000000 	.word	0x20000000
 80056a8:	00030d40 	.word	0x00030d40

080056ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	2250      	movs	r2, #80	; 0x50
 80056c0:	4013      	ands	r3, r2
 80056c2:	d141      	bne.n	8005748 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	2280      	movs	r2, #128	; 0x80
 80056ca:	0092      	lsls	r2, r2, #2
 80056cc:	431a      	orrs	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	0018      	movs	r0, r3
 80056d8:	f7ff fa49 	bl	8004b6e <LL_ADC_REG_IsTriggerSourceSWStart>
 80056dc:	1e03      	subs	r3, r0, #0
 80056de:	d02e      	beq.n	800573e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	7e9b      	ldrb	r3, [r3, #26]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d12a      	bne.n	800573e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2208      	movs	r2, #8
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d123      	bne.n	800573e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	0018      	movs	r0, r3
 80056fc:	f7ff fb18 	bl	8004d30 <LL_ADC_REG_IsConversionOngoing>
 8005700:	1e03      	subs	r3, r0, #0
 8005702:	d110      	bne.n	8005726 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	210c      	movs	r1, #12
 8005710:	438a      	bics	r2, r1
 8005712:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	4a15      	ldr	r2, [pc, #84]	; (8005770 <ADC_DMAConvCplt+0xc4>)
 800571a:	4013      	ands	r3, r2
 800571c:	2201      	movs	r2, #1
 800571e:	431a      	orrs	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	659a      	str	r2, [r3, #88]	; 0x58
 8005724:	e00b      	b.n	800573e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572a:	2220      	movs	r2, #32
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	2201      	movs	r2, #1
 8005738:	431a      	orrs	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	0018      	movs	r0, r3
 8005742:	f7ff fd3d 	bl	80051c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005746:	e00f      	b.n	8005768 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	2210      	movs	r2, #16
 800574e:	4013      	ands	r3, r2
 8005750:	d004      	beq.n	800575c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	0018      	movs	r0, r3
 8005756:	f7ff fd43 	bl	80051e0 <HAL_ADC_ErrorCallback>
}
 800575a:	e005      	b.n	8005768 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	0010      	movs	r0, r2
 8005766:	4798      	blx	r3
}
 8005768:	46c0      	nop			; (mov r8, r8)
 800576a:	46bd      	mov	sp, r7
 800576c:	b004      	add	sp, #16
 800576e:	bd80      	pop	{r7, pc}
 8005770:	fffffefe 	.word	0xfffffefe

08005774 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	0018      	movs	r0, r3
 8005786:	f7ff fd23 	bl	80051d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	46bd      	mov	sp, r7
 800578e:	b004      	add	sp, #16
 8005790:	bd80      	pop	{r7, pc}

08005792 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	2240      	movs	r2, #64	; 0x40
 80057a6:	431a      	orrs	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b0:	2204      	movs	r2, #4
 80057b2:	431a      	orrs	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7ff fd10 	bl	80051e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057c0:	46c0      	nop			; (mov r8, r8)
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b004      	add	sp, #16
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	0002      	movs	r2, r0
 80057d0:	1dfb      	adds	r3, r7, #7
 80057d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b7f      	cmp	r3, #127	; 0x7f
 80057da:	d809      	bhi.n	80057f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057dc:	1dfb      	adds	r3, r7, #7
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	001a      	movs	r2, r3
 80057e2:	231f      	movs	r3, #31
 80057e4:	401a      	ands	r2, r3
 80057e6:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <__NVIC_EnableIRQ+0x30>)
 80057e8:	2101      	movs	r1, #1
 80057ea:	4091      	lsls	r1, r2
 80057ec:	000a      	movs	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80057f0:	46c0      	nop			; (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b002      	add	sp, #8
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	e000e100 	.word	0xe000e100

080057fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	0002      	movs	r2, r0
 8005804:	6039      	str	r1, [r7, #0]
 8005806:	1dfb      	adds	r3, r7, #7
 8005808:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800580a:	1dfb      	adds	r3, r7, #7
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b7f      	cmp	r3, #127	; 0x7f
 8005810:	d828      	bhi.n	8005864 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005812:	4a2f      	ldr	r2, [pc, #188]	; (80058d0 <__NVIC_SetPriority+0xd4>)
 8005814:	1dfb      	adds	r3, r7, #7
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	b25b      	sxtb	r3, r3
 800581a:	089b      	lsrs	r3, r3, #2
 800581c:	33c0      	adds	r3, #192	; 0xc0
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	589b      	ldr	r3, [r3, r2]
 8005822:	1dfa      	adds	r2, r7, #7
 8005824:	7812      	ldrb	r2, [r2, #0]
 8005826:	0011      	movs	r1, r2
 8005828:	2203      	movs	r2, #3
 800582a:	400a      	ands	r2, r1
 800582c:	00d2      	lsls	r2, r2, #3
 800582e:	21ff      	movs	r1, #255	; 0xff
 8005830:	4091      	lsls	r1, r2
 8005832:	000a      	movs	r2, r1
 8005834:	43d2      	mvns	r2, r2
 8005836:	401a      	ands	r2, r3
 8005838:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	019b      	lsls	r3, r3, #6
 800583e:	22ff      	movs	r2, #255	; 0xff
 8005840:	401a      	ands	r2, r3
 8005842:	1dfb      	adds	r3, r7, #7
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	0018      	movs	r0, r3
 8005848:	2303      	movs	r3, #3
 800584a:	4003      	ands	r3, r0
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005850:	481f      	ldr	r0, [pc, #124]	; (80058d0 <__NVIC_SetPriority+0xd4>)
 8005852:	1dfb      	adds	r3, r7, #7
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b25b      	sxtb	r3, r3
 8005858:	089b      	lsrs	r3, r3, #2
 800585a:	430a      	orrs	r2, r1
 800585c:	33c0      	adds	r3, #192	; 0xc0
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005862:	e031      	b.n	80058c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <__NVIC_SetPriority+0xd8>)
 8005866:	1dfb      	adds	r3, r7, #7
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	0019      	movs	r1, r3
 800586c:	230f      	movs	r3, #15
 800586e:	400b      	ands	r3, r1
 8005870:	3b08      	subs	r3, #8
 8005872:	089b      	lsrs	r3, r3, #2
 8005874:	3306      	adds	r3, #6
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	18d3      	adds	r3, r2, r3
 800587a:	3304      	adds	r3, #4
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	1dfa      	adds	r2, r7, #7
 8005880:	7812      	ldrb	r2, [r2, #0]
 8005882:	0011      	movs	r1, r2
 8005884:	2203      	movs	r2, #3
 8005886:	400a      	ands	r2, r1
 8005888:	00d2      	lsls	r2, r2, #3
 800588a:	21ff      	movs	r1, #255	; 0xff
 800588c:	4091      	lsls	r1, r2
 800588e:	000a      	movs	r2, r1
 8005890:	43d2      	mvns	r2, r2
 8005892:	401a      	ands	r2, r3
 8005894:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	019b      	lsls	r3, r3, #6
 800589a:	22ff      	movs	r2, #255	; 0xff
 800589c:	401a      	ands	r2, r3
 800589e:	1dfb      	adds	r3, r7, #7
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	0018      	movs	r0, r3
 80058a4:	2303      	movs	r3, #3
 80058a6:	4003      	ands	r3, r0
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058ac:	4809      	ldr	r0, [pc, #36]	; (80058d4 <__NVIC_SetPriority+0xd8>)
 80058ae:	1dfb      	adds	r3, r7, #7
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	001c      	movs	r4, r3
 80058b4:	230f      	movs	r3, #15
 80058b6:	4023      	ands	r3, r4
 80058b8:	3b08      	subs	r3, #8
 80058ba:	089b      	lsrs	r3, r3, #2
 80058bc:	430a      	orrs	r2, r1
 80058be:	3306      	adds	r3, #6
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	18c3      	adds	r3, r0, r3
 80058c4:	3304      	adds	r3, #4
 80058c6:	601a      	str	r2, [r3, #0]
}
 80058c8:	46c0      	nop			; (mov r8, r8)
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b003      	add	sp, #12
 80058ce:	bd90      	pop	{r4, r7, pc}
 80058d0:	e000e100 	.word	0xe000e100
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	1e5a      	subs	r2, r3, #1
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	045b      	lsls	r3, r3, #17
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d301      	bcc.n	80058f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058ec:	2301      	movs	r3, #1
 80058ee:	e010      	b.n	8005912 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <SysTick_Config+0x44>)
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	3a01      	subs	r2, #1
 80058f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058f8:	2301      	movs	r3, #1
 80058fa:	425b      	negs	r3, r3
 80058fc:	2103      	movs	r1, #3
 80058fe:	0018      	movs	r0, r3
 8005900:	f7ff ff7c 	bl	80057fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <SysTick_Config+0x44>)
 8005906:	2200      	movs	r2, #0
 8005908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800590a:	4b04      	ldr	r3, [pc, #16]	; (800591c <SysTick_Config+0x44>)
 800590c:	2207      	movs	r2, #7
 800590e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005910:	2300      	movs	r3, #0
}
 8005912:	0018      	movs	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	b002      	add	sp, #8
 8005918:	bd80      	pop	{r7, pc}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	e000e010 	.word	0xe000e010

08005920 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	210f      	movs	r1, #15
 800592c:	187b      	adds	r3, r7, r1
 800592e:	1c02      	adds	r2, r0, #0
 8005930:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	187b      	adds	r3, r7, r1
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	b25b      	sxtb	r3, r3
 800593a:	0011      	movs	r1, r2
 800593c:	0018      	movs	r0, r3
 800593e:	f7ff ff5d 	bl	80057fc <__NVIC_SetPriority>
}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	46bd      	mov	sp, r7
 8005946:	b004      	add	sp, #16
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	0002      	movs	r2, r0
 8005952:	1dfb      	adds	r3, r7, #7
 8005954:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005956:	1dfb      	adds	r3, r7, #7
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b25b      	sxtb	r3, r3
 800595c:	0018      	movs	r0, r3
 800595e:	f7ff ff33 	bl	80057c8 <__NVIC_EnableIRQ>
}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b002      	add	sp, #8
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	0018      	movs	r0, r3
 8005976:	f7ff ffaf 	bl	80058d8 <SysTick_Config>
 800597a:	0003      	movs	r3, r0
}
 800597c:	0018      	movs	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	b002      	add	sp, #8
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e077      	b.n	8005a86 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <HAL_DMA_Init+0x10c>)
 800599c:	4694      	mov	ip, r2
 800599e:	4463      	add	r3, ip
 80059a0:	2114      	movs	r1, #20
 80059a2:	0018      	movs	r0, r3
 80059a4:	f7fa fbca 	bl	800013c <__udivsi3>
 80059a8:	0003      	movs	r3, r0
 80059aa:	009a      	lsls	r2, r3, #2
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2225      	movs	r2, #37	; 0x25
 80059b4:	2102      	movs	r1, #2
 80059b6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4934      	ldr	r1, [pc, #208]	; (8005a94 <HAL_DMA_Init+0x110>)
 80059c4:	400a      	ands	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6819      	ldr	r1, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	0018      	movs	r0, r3
 8005a02:	f000 f9c1 	bl	8005d88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	2380      	movs	r3, #128	; 0x80
 8005a0c:	01db      	lsls	r3, r3, #7
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d102      	bne.n	8005a18 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a20:	213f      	movs	r1, #63	; 0x3f
 8005a22:	400a      	ands	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d011      	beq.n	8005a5c <HAL_DMA_Init+0xd8>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d80d      	bhi.n	8005a5c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	0018      	movs	r0, r3
 8005a44:	f000 f9cc 	bl	8005de0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005a58:	605a      	str	r2, [r3, #4]
 8005a5a:	e008      	b.n	8005a6e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2225      	movs	r2, #37	; 0x25
 8005a78:	2101      	movs	r1, #1
 8005a7a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2224      	movs	r2, #36	; 0x24
 8005a80:	2100      	movs	r1, #0
 8005a82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	0018      	movs	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b002      	add	sp, #8
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	bffdfff8 	.word	0xbffdfff8
 8005a94:	ffff800f 	.word	0xffff800f

08005a98 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa6:	2317      	movs	r3, #23
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2224      	movs	r2, #36	; 0x24
 8005ab2:	5c9b      	ldrb	r3, [r3, r2]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_DMA_Start_IT+0x24>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e06f      	b.n	8005b9c <HAL_DMA_Start_IT+0x104>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2224      	movs	r2, #36	; 0x24
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2225      	movs	r2, #37	; 0x25
 8005ac8:	5c9b      	ldrb	r3, [r3, r2]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d157      	bne.n	8005b80 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2225      	movs	r2, #37	; 0x25
 8005ad4:	2102      	movs	r1, #2
 8005ad6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2101      	movs	r1, #1
 8005aea:	438a      	bics	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f907 	bl	8005d08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	210e      	movs	r1, #14
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e00f      	b.n	8005b34 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2104      	movs	r1, #4
 8005b20:	438a      	bics	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	210a      	movs	r1, #10
 8005b30:	430a      	orrs	r2, r1
 8005b32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	025b      	lsls	r3, r3, #9
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d008      	beq.n	8005b54 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	0049      	lsls	r1, r1, #1
 8005b50:	430a      	orrs	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	0049      	lsls	r1, r1, #1
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2101      	movs	r1, #1
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e00a      	b.n	8005b96 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2224      	movs	r2, #36	; 0x24
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005b8e:	2317      	movs	r3, #23
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005b96:	2317      	movs	r3, #23
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	781b      	ldrb	r3, [r3, #0]
}
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b006      	add	sp, #24
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005bac:	4b55      	ldr	r3, [pc, #340]	; (8005d04 <HAL_DMA_IRQHandler+0x160>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	221c      	movs	r2, #28
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2204      	movs	r2, #4
 8005bc4:	409a      	lsls	r2, r3
 8005bc6:	0013      	movs	r3, r2
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d027      	beq.n	8005c1e <HAL_DMA_IRQHandler+0x7a>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d023      	beq.n	8005c1e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	4013      	ands	r3, r2
 8005be0:	d107      	bne.n	8005bf2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2104      	movs	r1, #4
 8005bee:	438a      	bics	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005bf2:	4b44      	ldr	r3, [pc, #272]	; (8005d04 <HAL_DMA_IRQHandler+0x160>)
 8005bf4:	6859      	ldr	r1, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	221c      	movs	r2, #28
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	2204      	movs	r2, #4
 8005c00:	409a      	lsls	r2, r3
 8005c02:	4b40      	ldr	r3, [pc, #256]	; (8005d04 <HAL_DMA_IRQHandler+0x160>)
 8005c04:	430a      	orrs	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d100      	bne.n	8005c12 <HAL_DMA_IRQHandler+0x6e>
 8005c10:	e073      	b.n	8005cfa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	0010      	movs	r0, r2
 8005c1a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005c1c:	e06d      	b.n	8005cfa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	221c      	movs	r2, #28
 8005c24:	4013      	ands	r3, r2
 8005c26:	2202      	movs	r2, #2
 8005c28:	409a      	lsls	r2, r3
 8005c2a:	0013      	movs	r3, r2
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d02e      	beq.n	8005c90 <HAL_DMA_IRQHandler+0xec>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2202      	movs	r2, #2
 8005c36:	4013      	ands	r3, r2
 8005c38:	d02a      	beq.n	8005c90 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2220      	movs	r2, #32
 8005c42:	4013      	ands	r3, r2
 8005c44:	d10b      	bne.n	8005c5e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	210a      	movs	r1, #10
 8005c52:	438a      	bics	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2225      	movs	r2, #37	; 0x25
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005c5e:	4b29      	ldr	r3, [pc, #164]	; (8005d04 <HAL_DMA_IRQHandler+0x160>)
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	221c      	movs	r2, #28
 8005c68:	4013      	ands	r3, r2
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <HAL_DMA_IRQHandler+0x160>)
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	; 0x24
 8005c78:	2100      	movs	r1, #0
 8005c7a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d03a      	beq.n	8005cfa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	0010      	movs	r0, r2
 8005c8c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005c8e:	e034      	b.n	8005cfa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	221c      	movs	r2, #28
 8005c96:	4013      	ands	r3, r2
 8005c98:	2208      	movs	r2, #8
 8005c9a:	409a      	lsls	r2, r3
 8005c9c:	0013      	movs	r3, r2
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d02b      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x158>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2208      	movs	r2, #8
 8005ca8:	4013      	ands	r3, r2
 8005caa:	d027      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	210e      	movs	r1, #14
 8005cb8:	438a      	bics	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005cbc:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <HAL_DMA_IRQHandler+0x160>)
 8005cbe:	6859      	ldr	r1, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	221c      	movs	r2, #28
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2201      	movs	r2, #1
 8005cca:	409a      	lsls	r2, r3
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <HAL_DMA_IRQHandler+0x160>)
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2225      	movs	r2, #37	; 0x25
 8005cdc:	2101      	movs	r1, #1
 8005cde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2224      	movs	r2, #36	; 0x24
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	0010      	movs	r0, r2
 8005cf8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	46c0      	nop			; (mov r8, r8)
}
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	b004      	add	sp, #16
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40020000 	.word	0x40020000

08005d08 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d30:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005d32:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <DMA_SetConfig+0x7c>)
 8005d34:	6859      	ldr	r1, [r3, #4]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	221c      	movs	r2, #28
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2201      	movs	r2, #1
 8005d40:	409a      	lsls	r2, r3
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <DMA_SetConfig+0x7c>)
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d108      	bne.n	8005d6a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d68:	e007      	b.n	8005d7a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	60da      	str	r2, [r3, #12]
}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b004      	add	sp, #16
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	40020000 	.word	0x40020000

08005d88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	089b      	lsrs	r3, r3, #2
 8005d96:	4a10      	ldr	r2, [pc, #64]	; (8005dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005d98:	4694      	mov	ip, r2
 8005d9a:	4463      	add	r3, ip
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	001a      	movs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	001a      	movs	r2, r3
 8005daa:	23ff      	movs	r3, #255	; 0xff
 8005dac:	4013      	ands	r3, r2
 8005dae:	3b08      	subs	r3, #8
 8005db0:	2114      	movs	r1, #20
 8005db2:	0018      	movs	r0, r3
 8005db4:	f7fa f9c2 	bl	800013c <__udivsi3>
 8005db8:	0003      	movs	r3, r0
 8005dba:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a07      	ldr	r2, [pc, #28]	; (8005ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005dc0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	221f      	movs	r2, #31
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2201      	movs	r2, #1
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005dd0:	46c0      	nop			; (mov r8, r8)
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b004      	add	sp, #16
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	10008200 	.word	0x10008200
 8005ddc:	40020880 	.word	0x40020880

08005de0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	223f      	movs	r2, #63	; 0x3f
 8005dee:	4013      	ands	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a0a      	ldr	r2, [pc, #40]	; (8005e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005df6:	4694      	mov	ip, r2
 8005df8:	4463      	add	r3, ip
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	001a      	movs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a07      	ldr	r2, [pc, #28]	; (8005e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005e06:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2201      	movs	r2, #1
 8005e12:	409a      	lsls	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005e18:	46c0      	nop			; (mov r8, r8)
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b004      	add	sp, #16
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	1000823f 	.word	0x1000823f
 8005e24:	40020940 	.word	0x40020940

08005e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e36:	e147      	b.n	80060c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4091      	lsls	r1, r2
 8005e42:	000a      	movs	r2, r1
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d100      	bne.n	8005e50 <HAL_GPIO_Init+0x28>
 8005e4e:	e138      	b.n	80060c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2203      	movs	r2, #3
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d005      	beq.n	8005e68 <HAL_GPIO_Init+0x40>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2203      	movs	r2, #3
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d130      	bne.n	8005eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	2203      	movs	r2, #3
 8005e74:	409a      	lsls	r2, r3
 8005e76:	0013      	movs	r3, r2
 8005e78:	43da      	mvns	r2, r3
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	0013      	movs	r3, r2
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	409a      	lsls	r2, r3
 8005ea4:	0013      	movs	r3, r2
 8005ea6:	43da      	mvns	r2, r3
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	0013      	movs	r3, r2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2203      	movs	r2, #3
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d017      	beq.n	8005f06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	0013      	movs	r3, r2
 8005ee6:	43da      	mvns	r2, r3
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4013      	ands	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	0013      	movs	r3, r2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d123      	bne.n	8005f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	08da      	lsrs	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3208      	adds	r2, #8
 8005f1a:	0092      	lsls	r2, r2, #2
 8005f1c:	58d3      	ldr	r3, [r2, r3]
 8005f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2207      	movs	r2, #7
 8005f24:	4013      	ands	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	220f      	movs	r2, #15
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	0013      	movs	r3, r2
 8005f2e:	43da      	mvns	r2, r3
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4013      	ands	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2107      	movs	r1, #7
 8005f3e:	400b      	ands	r3, r1
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	409a      	lsls	r2, r3
 8005f44:	0013      	movs	r3, r2
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	08da      	lsrs	r2, r3, #3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3208      	adds	r2, #8
 8005f54:	0092      	lsls	r2, r2, #2
 8005f56:	6939      	ldr	r1, [r7, #16]
 8005f58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	2203      	movs	r2, #3
 8005f66:	409a      	lsls	r2, r3
 8005f68:	0013      	movs	r3, r2
 8005f6a:	43da      	mvns	r2, r3
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2203      	movs	r2, #3
 8005f78:	401a      	ands	r2, r3
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	409a      	lsls	r2, r3
 8005f80:	0013      	movs	r3, r2
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	23c0      	movs	r3, #192	; 0xc0
 8005f94:	029b      	lsls	r3, r3, #10
 8005f96:	4013      	ands	r3, r2
 8005f98:	d100      	bne.n	8005f9c <HAL_GPIO_Init+0x174>
 8005f9a:	e092      	b.n	80060c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005f9c:	4a50      	ldr	r2, [pc, #320]	; (80060e0 <HAL_GPIO_Init+0x2b8>)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	089b      	lsrs	r3, r3, #2
 8005fa2:	3318      	adds	r3, #24
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	589b      	ldr	r3, [r3, r2]
 8005fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2203      	movs	r2, #3
 8005fae:	4013      	ands	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	220f      	movs	r2, #15
 8005fb4:	409a      	lsls	r2, r3
 8005fb6:	0013      	movs	r3, r2
 8005fb8:	43da      	mvns	r2, r3
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	23a0      	movs	r3, #160	; 0xa0
 8005fc4:	05db      	lsls	r3, r3, #23
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d013      	beq.n	8005ff2 <HAL_GPIO_Init+0x1ca>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a45      	ldr	r2, [pc, #276]	; (80060e4 <HAL_GPIO_Init+0x2bc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00d      	beq.n	8005fee <HAL_GPIO_Init+0x1c6>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a44      	ldr	r2, [pc, #272]	; (80060e8 <HAL_GPIO_Init+0x2c0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <HAL_GPIO_Init+0x1c2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a43      	ldr	r2, [pc, #268]	; (80060ec <HAL_GPIO_Init+0x2c4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d101      	bne.n	8005fe6 <HAL_GPIO_Init+0x1be>
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e006      	b.n	8005ff4 <HAL_GPIO_Init+0x1cc>
 8005fe6:	2305      	movs	r3, #5
 8005fe8:	e004      	b.n	8005ff4 <HAL_GPIO_Init+0x1cc>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e002      	b.n	8005ff4 <HAL_GPIO_Init+0x1cc>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <HAL_GPIO_Init+0x1cc>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	2103      	movs	r1, #3
 8005ff8:	400a      	ands	r2, r1
 8005ffa:	00d2      	lsls	r2, r2, #3
 8005ffc:	4093      	lsls	r3, r2
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006004:	4936      	ldr	r1, [pc, #216]	; (80060e0 <HAL_GPIO_Init+0x2b8>)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	089b      	lsrs	r3, r3, #2
 800600a:	3318      	adds	r3, #24
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006012:	4b33      	ldr	r3, [pc, #204]	; (80060e0 <HAL_GPIO_Init+0x2b8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	43da      	mvns	r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4013      	ands	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	035b      	lsls	r3, r3, #13
 800602a:	4013      	ands	r3, r2
 800602c:	d003      	beq.n	8006036 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006036:	4b2a      	ldr	r3, [pc, #168]	; (80060e0 <HAL_GPIO_Init+0x2b8>)
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800603c:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <HAL_GPIO_Init+0x2b8>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	43da      	mvns	r2, r3
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4013      	ands	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	039b      	lsls	r3, r3, #14
 8006054:	4013      	ands	r3, r2
 8006056:	d003      	beq.n	8006060 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006060:	4b1f      	ldr	r3, [pc, #124]	; (80060e0 <HAL_GPIO_Init+0x2b8>)
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006066:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <HAL_GPIO_Init+0x2b8>)
 8006068:	2384      	movs	r3, #132	; 0x84
 800606a:	58d3      	ldr	r3, [r2, r3]
 800606c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	43da      	mvns	r2, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4013      	ands	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	2380      	movs	r3, #128	; 0x80
 800607e:	029b      	lsls	r3, r3, #10
 8006080:	4013      	ands	r3, r2
 8006082:	d003      	beq.n	800608c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800608c:	4914      	ldr	r1, [pc, #80]	; (80060e0 <HAL_GPIO_Init+0x2b8>)
 800608e:	2284      	movs	r2, #132	; 0x84
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006094:	4a12      	ldr	r2, [pc, #72]	; (80060e0 <HAL_GPIO_Init+0x2b8>)
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	58d3      	ldr	r3, [r2, r3]
 800609a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	43da      	mvns	r2, r3
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4013      	ands	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	2380      	movs	r3, #128	; 0x80
 80060ac:	025b      	lsls	r3, r3, #9
 80060ae:	4013      	ands	r3, r2
 80060b0:	d003      	beq.n	80060ba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060ba:	4909      	ldr	r1, [pc, #36]	; (80060e0 <HAL_GPIO_Init+0x2b8>)
 80060bc:	2280      	movs	r2, #128	; 0x80
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	3301      	adds	r3, #1
 80060c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	40da      	lsrs	r2, r3
 80060d0:	1e13      	subs	r3, r2, #0
 80060d2:	d000      	beq.n	80060d6 <HAL_GPIO_Init+0x2ae>
 80060d4:	e6b0      	b.n	8005e38 <HAL_GPIO_Init+0x10>
  }
}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	46c0      	nop			; (mov r8, r8)
 80060da:	46bd      	mov	sp, r7
 80060dc:	b006      	add	sp, #24
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40021800 	.word	0x40021800
 80060e4:	50000400 	.word	0x50000400
 80060e8:	50000800 	.word	0x50000800
 80060ec:	50000c00 	.word	0x50000c00

080060f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	000a      	movs	r2, r1
 80060fa:	1cbb      	adds	r3, r7, #2
 80060fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	1cba      	adds	r2, r7, #2
 8006104:	8812      	ldrh	r2, [r2, #0]
 8006106:	4013      	ands	r3, r2
 8006108:	d004      	beq.n	8006114 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800610a:	230f      	movs	r3, #15
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	2201      	movs	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e003      	b.n	800611c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006114:	230f      	movs	r3, #15
 8006116:	18fb      	adds	r3, r7, r3
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800611c:	230f      	movs	r3, #15
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	781b      	ldrb	r3, [r3, #0]
}
 8006122:	0018      	movs	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	b004      	add	sp, #16
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	0008      	movs	r0, r1
 8006134:	0011      	movs	r1, r2
 8006136:	1cbb      	adds	r3, r7, #2
 8006138:	1c02      	adds	r2, r0, #0
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	1c7b      	adds	r3, r7, #1
 800613e:	1c0a      	adds	r2, r1, #0
 8006140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006142:	1c7b      	adds	r3, r7, #1
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800614a:	1cbb      	adds	r3, r7, #2
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006152:	e003      	b.n	800615c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006154:	1cbb      	adds	r3, r7, #2
 8006156:	881a      	ldrh	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800615c:	46c0      	nop			; (mov r8, r8)
 800615e:	46bd      	mov	sp, r7
 8006160:	b002      	add	sp, #8
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	0002      	movs	r2, r0
 800616c:	1dbb      	adds	r3, r7, #6
 800616e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006170:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	1dba      	adds	r2, r7, #6
 8006176:	8812      	ldrh	r2, [r2, #0]
 8006178:	4013      	ands	r3, r2
 800617a:	d008      	beq.n	800618e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800617c:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800617e:	1dba      	adds	r2, r7, #6
 8006180:	8812      	ldrh	r2, [r2, #0]
 8006182:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006184:	1dbb      	adds	r3, r7, #6
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	0018      	movs	r0, r3
 800618a:	f000 f815 	bl	80061b8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800618e:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	1dba      	adds	r2, r7, #6
 8006194:	8812      	ldrh	r2, [r2, #0]
 8006196:	4013      	ands	r3, r2
 8006198:	d008      	beq.n	80061ac <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800619c:	1dba      	adds	r2, r7, #6
 800619e:	8812      	ldrh	r2, [r2, #0]
 80061a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80061a2:	1dbb      	adds	r3, r7, #6
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	0018      	movs	r0, r3
 80061a8:	f000 f810 	bl	80061cc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80061ac:	46c0      	nop			; (mov r8, r8)
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b002      	add	sp, #8
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40021800 	.word	0x40021800

080061b8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	0002      	movs	r2, r0
 80061c0:	1dbb      	adds	r3, r7, #6
 80061c2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80061c4:	46c0      	nop			; (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b002      	add	sp, #8
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	0002      	movs	r2, r0
 80061d4:	1dbb      	adds	r3, r7, #6
 80061d6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80061d8:	46c0      	nop			; (mov r8, r8)
 80061da:	46bd      	mov	sp, r7
 80061dc:	b002      	add	sp, #8
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e082      	b.n	80062f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2241      	movs	r2, #65	; 0x41
 80061f6:	5c9b      	ldrb	r3, [r3, r2]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d107      	bne.n	800620e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2240      	movs	r2, #64	; 0x40
 8006202:	2100      	movs	r1, #0
 8006204:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0018      	movs	r0, r3
 800620a:	f7fe f927 	bl	800445c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2241      	movs	r2, #65	; 0x41
 8006212:	2124      	movs	r1, #36	; 0x24
 8006214:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2101      	movs	r1, #1
 8006222:	438a      	bics	r2, r1
 8006224:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4934      	ldr	r1, [pc, #208]	; (8006300 <HAL_I2C_Init+0x120>)
 8006230:	400a      	ands	r2, r1
 8006232:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4931      	ldr	r1, [pc, #196]	; (8006304 <HAL_I2C_Init+0x124>)
 8006240:	400a      	ands	r2, r1
 8006242:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d108      	bne.n	800625e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2180      	movs	r1, #128	; 0x80
 8006256:	0209      	lsls	r1, r1, #8
 8006258:	430a      	orrs	r2, r1
 800625a:	609a      	str	r2, [r3, #8]
 800625c:	e007      	b.n	800626e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2184      	movs	r1, #132	; 0x84
 8006268:	0209      	lsls	r1, r1, #8
 800626a:	430a      	orrs	r2, r1
 800626c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d104      	bne.n	8006280 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2280      	movs	r2, #128	; 0x80
 800627c:	0112      	lsls	r2, r2, #4
 800627e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	491f      	ldr	r1, [pc, #124]	; (8006308 <HAL_I2C_Init+0x128>)
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	491a      	ldr	r1, [pc, #104]	; (8006304 <HAL_I2C_Init+0x124>)
 800629c:	400a      	ands	r2, r1
 800629e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69d9      	ldr	r1, [r3, #28]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1a      	ldr	r2, [r3, #32]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2101      	movs	r1, #1
 80062d6:	430a      	orrs	r2, r1
 80062d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2241      	movs	r2, #65	; 0x41
 80062e4:	2120      	movs	r1, #32
 80062e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2242      	movs	r2, #66	; 0x42
 80062f2:	2100      	movs	r1, #0
 80062f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	0018      	movs	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b002      	add	sp, #8
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	f0ffffff 	.word	0xf0ffffff
 8006304:	ffff7fff 	.word	0xffff7fff
 8006308:	02008000 	.word	0x02008000

0800630c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2241      	movs	r2, #65	; 0x41
 800631a:	5c9b      	ldrb	r3, [r3, r2]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b20      	cmp	r3, #32
 8006320:	d138      	bne.n	8006394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2240      	movs	r2, #64	; 0x40
 8006326:	5c9b      	ldrb	r3, [r3, r2]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800632c:	2302      	movs	r3, #2
 800632e:	e032      	b.n	8006396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2240      	movs	r2, #64	; 0x40
 8006334:	2101      	movs	r1, #1
 8006336:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2241      	movs	r2, #65	; 0x41
 800633c:	2124      	movs	r1, #36	; 0x24
 800633e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2101      	movs	r1, #1
 800634c:	438a      	bics	r2, r1
 800634e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4911      	ldr	r1, [pc, #68]	; (80063a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800635c:	400a      	ands	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6819      	ldr	r1, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2101      	movs	r1, #1
 800637c:	430a      	orrs	r2, r1
 800637e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2241      	movs	r2, #65	; 0x41
 8006384:	2120      	movs	r1, #32
 8006386:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2240      	movs	r2, #64	; 0x40
 800638c:	2100      	movs	r1, #0
 800638e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	0018      	movs	r0, r3
 8006398:	46bd      	mov	sp, r7
 800639a:	b002      	add	sp, #8
 800639c:	bd80      	pop	{r7, pc}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	ffffefff 	.word	0xffffefff

080063a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2241      	movs	r2, #65	; 0x41
 80063b2:	5c9b      	ldrb	r3, [r3, r2]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d139      	bne.n	800642e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2240      	movs	r2, #64	; 0x40
 80063be:	5c9b      	ldrb	r3, [r3, r2]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e033      	b.n	8006430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2240      	movs	r2, #64	; 0x40
 80063cc:	2101      	movs	r1, #1
 80063ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2241      	movs	r2, #65	; 0x41
 80063d4:	2124      	movs	r1, #36	; 0x24
 80063d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2101      	movs	r1, #1
 80063e4:	438a      	bics	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a11      	ldr	r2, [pc, #68]	; (8006438 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2101      	movs	r1, #1
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2241      	movs	r2, #65	; 0x41
 800641e:	2120      	movs	r1, #32
 8006420:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2240      	movs	r2, #64	; 0x40
 8006426:	2100      	movs	r1, #0
 8006428:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
  }
}
 8006430:	0018      	movs	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	b004      	add	sp, #16
 8006436:	bd80      	pop	{r7, pc}
 8006438:	fffff0ff 	.word	0xfffff0ff

0800643c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006444:	4b19      	ldr	r3, [pc, #100]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800644a:	4013      	ands	r3, r2
 800644c:	0019      	movs	r1, r3
 800644e:	4b17      	ldr	r3, [pc, #92]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	430a      	orrs	r2, r1
 8006454:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	429a      	cmp	r2, r3
 800645e:	d11f      	bne.n	80064a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006460:	4b14      	ldr	r3, [pc, #80]	; (80064b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	0013      	movs	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	189b      	adds	r3, r3, r2
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	4912      	ldr	r1, [pc, #72]	; (80064b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800646e:	0018      	movs	r0, r3
 8006470:	f7f9 fe64 	bl	800013c <__udivsi3>
 8006474:	0003      	movs	r3, r0
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800647a:	e008      	b.n	800648e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3b01      	subs	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e001      	b.n	800648e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e009      	b.n	80064a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	2380      	movs	r3, #128	; 0x80
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	401a      	ands	r2, r3
 8006498:	2380      	movs	r3, #128	; 0x80
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	429a      	cmp	r2, r3
 800649e:	d0ed      	beq.n	800647c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	0018      	movs	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b004      	add	sp, #16
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	40007000 	.word	0x40007000
 80064b0:	fffff9ff 	.word	0xfffff9ff
 80064b4:	20000000 	.word	0x20000000
 80064b8:	000f4240 	.word	0x000f4240

080064bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	23e0      	movs	r3, #224	; 0xe0
 80064c6:	01db      	lsls	r3, r3, #7
 80064c8:	4013      	ands	r3, r2
}
 80064ca:	0018      	movs	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40021000 	.word	0x40021000

080064d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e2fe      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2201      	movs	r2, #1
 80064ec:	4013      	ands	r3, r2
 80064ee:	d100      	bne.n	80064f2 <HAL_RCC_OscConfig+0x1e>
 80064f0:	e07c      	b.n	80065ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064f2:	4bc3      	ldr	r3, [pc, #780]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2238      	movs	r2, #56	; 0x38
 80064f8:	4013      	ands	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064fc:	4bc0      	ldr	r3, [pc, #768]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2203      	movs	r2, #3
 8006502:	4013      	ands	r3, r2
 8006504:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b10      	cmp	r3, #16
 800650a:	d102      	bne.n	8006512 <HAL_RCC_OscConfig+0x3e>
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d002      	beq.n	8006518 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b08      	cmp	r3, #8
 8006516:	d10b      	bne.n	8006530 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006518:	4bb9      	ldr	r3, [pc, #740]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	029b      	lsls	r3, r3, #10
 8006520:	4013      	ands	r3, r2
 8006522:	d062      	beq.n	80065ea <HAL_RCC_OscConfig+0x116>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d15e      	bne.n	80065ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e2d9      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	2380      	movs	r3, #128	; 0x80
 8006536:	025b      	lsls	r3, r3, #9
 8006538:	429a      	cmp	r2, r3
 800653a:	d107      	bne.n	800654c <HAL_RCC_OscConfig+0x78>
 800653c:	4bb0      	ldr	r3, [pc, #704]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4baf      	ldr	r3, [pc, #700]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006542:	2180      	movs	r1, #128	; 0x80
 8006544:	0249      	lsls	r1, r1, #9
 8006546:	430a      	orrs	r2, r1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e020      	b.n	800658e <HAL_RCC_OscConfig+0xba>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	23a0      	movs	r3, #160	; 0xa0
 8006552:	02db      	lsls	r3, r3, #11
 8006554:	429a      	cmp	r2, r3
 8006556:	d10e      	bne.n	8006576 <HAL_RCC_OscConfig+0xa2>
 8006558:	4ba9      	ldr	r3, [pc, #676]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	4ba8      	ldr	r3, [pc, #672]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800655e:	2180      	movs	r1, #128	; 0x80
 8006560:	02c9      	lsls	r1, r1, #11
 8006562:	430a      	orrs	r2, r1
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	4ba6      	ldr	r3, [pc, #664]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4ba5      	ldr	r3, [pc, #660]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800656c:	2180      	movs	r1, #128	; 0x80
 800656e:	0249      	lsls	r1, r1, #9
 8006570:	430a      	orrs	r2, r1
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e00b      	b.n	800658e <HAL_RCC_OscConfig+0xba>
 8006576:	4ba2      	ldr	r3, [pc, #648]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4ba1      	ldr	r3, [pc, #644]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800657c:	49a1      	ldr	r1, [pc, #644]	; (8006804 <HAL_RCC_OscConfig+0x330>)
 800657e:	400a      	ands	r2, r1
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	4b9f      	ldr	r3, [pc, #636]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4b9e      	ldr	r3, [pc, #632]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006588:	499f      	ldr	r1, [pc, #636]	; (8006808 <HAL_RCC_OscConfig+0x334>)
 800658a:	400a      	ands	r2, r1
 800658c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d014      	beq.n	80065c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006596:	f7fe fa67 	bl	8004a68 <HAL_GetTick>
 800659a:	0003      	movs	r3, r0
 800659c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a0:	f7fe fa62 	bl	8004a68 <HAL_GetTick>
 80065a4:	0002      	movs	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b64      	cmp	r3, #100	; 0x64
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e298      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065b2:	4b93      	ldr	r3, [pc, #588]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	4013      	ands	r3, r2
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0xcc>
 80065be:	e015      	b.n	80065ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fe fa52 	bl	8004a68 <HAL_GetTick>
 80065c4:	0003      	movs	r3, r0
 80065c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065ca:	f7fe fa4d 	bl	8004a68 <HAL_GetTick>
 80065ce:	0002      	movs	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b64      	cmp	r3, #100	; 0x64
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e283      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065dc:	4b88      	ldr	r3, [pc, #544]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	029b      	lsls	r3, r3, #10
 80065e4:	4013      	ands	r3, r2
 80065e6:	d1f0      	bne.n	80065ca <HAL_RCC_OscConfig+0xf6>
 80065e8:	e000      	b.n	80065ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2202      	movs	r2, #2
 80065f2:	4013      	ands	r3, r2
 80065f4:	d100      	bne.n	80065f8 <HAL_RCC_OscConfig+0x124>
 80065f6:	e099      	b.n	800672c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065f8:	4b81      	ldr	r3, [pc, #516]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2238      	movs	r2, #56	; 0x38
 80065fe:	4013      	ands	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006602:	4b7f      	ldr	r3, [pc, #508]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2203      	movs	r2, #3
 8006608:	4013      	ands	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2b10      	cmp	r3, #16
 8006610:	d102      	bne.n	8006618 <HAL_RCC_OscConfig+0x144>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d002      	beq.n	800661e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d135      	bne.n	800668a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800661e:	4b78      	ldr	r3, [pc, #480]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	2380      	movs	r3, #128	; 0x80
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4013      	ands	r3, r2
 8006628:	d005      	beq.n	8006636 <HAL_RCC_OscConfig+0x162>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e256      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006636:	4b72      	ldr	r3, [pc, #456]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	4a74      	ldr	r2, [pc, #464]	; (800680c <HAL_RCC_OscConfig+0x338>)
 800663c:	4013      	ands	r3, r2
 800663e:	0019      	movs	r1, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	021a      	lsls	r2, r3, #8
 8006646:	4b6e      	ldr	r3, [pc, #440]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d112      	bne.n	8006678 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006652:	4b6b      	ldr	r3, [pc, #428]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a6e      	ldr	r2, [pc, #440]	; (8006810 <HAL_RCC_OscConfig+0x33c>)
 8006658:	4013      	ands	r3, r2
 800665a:	0019      	movs	r1, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	4b67      	ldr	r3, [pc, #412]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006662:	430a      	orrs	r2, r1
 8006664:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006666:	4b66      	ldr	r3, [pc, #408]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	0adb      	lsrs	r3, r3, #11
 800666c:	2207      	movs	r2, #7
 800666e:	4013      	ands	r3, r2
 8006670:	4a68      	ldr	r2, [pc, #416]	; (8006814 <HAL_RCC_OscConfig+0x340>)
 8006672:	40da      	lsrs	r2, r3
 8006674:	4b68      	ldr	r3, [pc, #416]	; (8006818 <HAL_RCC_OscConfig+0x344>)
 8006676:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006678:	4b68      	ldr	r3, [pc, #416]	; (800681c <HAL_RCC_OscConfig+0x348>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	0018      	movs	r0, r3
 800667e:	f7fe f997 	bl	80049b0 <HAL_InitTick>
 8006682:	1e03      	subs	r3, r0, #0
 8006684:	d051      	beq.n	800672a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e22c      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d030      	beq.n	80066f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006692:	4b5b      	ldr	r3, [pc, #364]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a5e      	ldr	r2, [pc, #376]	; (8006810 <HAL_RCC_OscConfig+0x33c>)
 8006698:	4013      	ands	r3, r2
 800669a:	0019      	movs	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	4b57      	ldr	r3, [pc, #348]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066a2:	430a      	orrs	r2, r1
 80066a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80066a6:	4b56      	ldr	r3, [pc, #344]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4b55      	ldr	r3, [pc, #340]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066ac:	2180      	movs	r1, #128	; 0x80
 80066ae:	0049      	lsls	r1, r1, #1
 80066b0:	430a      	orrs	r2, r1
 80066b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fe f9d8 	bl	8004a68 <HAL_GetTick>
 80066b8:	0003      	movs	r3, r0
 80066ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066be:	f7fe f9d3 	bl	8004a68 <HAL_GetTick>
 80066c2:	0002      	movs	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e209      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066d0:	4b4b      	ldr	r3, [pc, #300]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	4013      	ands	r3, r2
 80066da:	d0f0      	beq.n	80066be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066dc:	4b48      	ldr	r3, [pc, #288]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4a4a      	ldr	r2, [pc, #296]	; (800680c <HAL_RCC_OscConfig+0x338>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	0019      	movs	r1, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	021a      	lsls	r2, r3, #8
 80066ec:	4b44      	ldr	r3, [pc, #272]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
 80066f2:	e01b      	b.n	800672c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80066f4:	4b42      	ldr	r3, [pc, #264]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b41      	ldr	r3, [pc, #260]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066fa:	4949      	ldr	r1, [pc, #292]	; (8006820 <HAL_RCC_OscConfig+0x34c>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fe f9b2 	bl	8004a68 <HAL_GetTick>
 8006704:	0003      	movs	r3, r0
 8006706:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800670a:	f7fe f9ad 	bl	8004a68 <HAL_GetTick>
 800670e:	0002      	movs	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e1e3      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800671c:	4b38      	ldr	r3, [pc, #224]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	2380      	movs	r3, #128	; 0x80
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	4013      	ands	r3, r2
 8006726:	d1f0      	bne.n	800670a <HAL_RCC_OscConfig+0x236>
 8006728:	e000      	b.n	800672c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800672a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2208      	movs	r2, #8
 8006732:	4013      	ands	r3, r2
 8006734:	d047      	beq.n	80067c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006736:	4b32      	ldr	r3, [pc, #200]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2238      	movs	r2, #56	; 0x38
 800673c:	4013      	ands	r3, r2
 800673e:	2b18      	cmp	r3, #24
 8006740:	d10a      	bne.n	8006758 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006742:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006746:	2202      	movs	r2, #2
 8006748:	4013      	ands	r3, r2
 800674a:	d03c      	beq.n	80067c6 <HAL_RCC_OscConfig+0x2f2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d138      	bne.n	80067c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e1c5      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d019      	beq.n	8006794 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006760:	4b27      	ldr	r3, [pc, #156]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006764:	4b26      	ldr	r3, [pc, #152]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006766:	2101      	movs	r1, #1
 8006768:	430a      	orrs	r2, r1
 800676a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fe f97c 	bl	8004a68 <HAL_GetTick>
 8006770:	0003      	movs	r3, r0
 8006772:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006776:	f7fe f977 	bl	8004a68 <HAL_GetTick>
 800677a:	0002      	movs	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e1ad      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006788:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800678a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678c:	2202      	movs	r2, #2
 800678e:	4013      	ands	r3, r2
 8006790:	d0f1      	beq.n	8006776 <HAL_RCC_OscConfig+0x2a2>
 8006792:	e018      	b.n	80067c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006794:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006796:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006798:	4b19      	ldr	r3, [pc, #100]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800679a:	2101      	movs	r1, #1
 800679c:	438a      	bics	r2, r1
 800679e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fe f962 	bl	8004a68 <HAL_GetTick>
 80067a4:	0003      	movs	r3, r0
 80067a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067aa:	f7fe f95d 	bl	8004a68 <HAL_GetTick>
 80067ae:	0002      	movs	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e193      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80067be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c0:	2202      	movs	r2, #2
 80067c2:	4013      	ands	r3, r2
 80067c4:	d1f1      	bne.n	80067aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2204      	movs	r2, #4
 80067cc:	4013      	ands	r3, r2
 80067ce:	d100      	bne.n	80067d2 <HAL_RCC_OscConfig+0x2fe>
 80067d0:	e0c6      	b.n	8006960 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067d2:	231f      	movs	r3, #31
 80067d4:	18fb      	adds	r3, r7, r3
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80067da:	4b09      	ldr	r3, [pc, #36]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2238      	movs	r2, #56	; 0x38
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d11e      	bne.n	8006824 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80067e6:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80067e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ea:	2202      	movs	r2, #2
 80067ec:	4013      	ands	r3, r2
 80067ee:	d100      	bne.n	80067f2 <HAL_RCC_OscConfig+0x31e>
 80067f0:	e0b6      	b.n	8006960 <HAL_RCC_OscConfig+0x48c>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d000      	beq.n	80067fc <HAL_RCC_OscConfig+0x328>
 80067fa:	e0b1      	b.n	8006960 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e171      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
 8006800:	40021000 	.word	0x40021000
 8006804:	fffeffff 	.word	0xfffeffff
 8006808:	fffbffff 	.word	0xfffbffff
 800680c:	ffff80ff 	.word	0xffff80ff
 8006810:	ffffc7ff 	.word	0xffffc7ff
 8006814:	00f42400 	.word	0x00f42400
 8006818:	20000000 	.word	0x20000000
 800681c:	20000004 	.word	0x20000004
 8006820:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006824:	4bb1      	ldr	r3, [pc, #708]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	055b      	lsls	r3, r3, #21
 800682c:	4013      	ands	r3, r2
 800682e:	d101      	bne.n	8006834 <HAL_RCC_OscConfig+0x360>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <HAL_RCC_OscConfig+0x362>
 8006834:	2300      	movs	r3, #0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d011      	beq.n	800685e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800683a:	4bac      	ldr	r3, [pc, #688]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 800683c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800683e:	4bab      	ldr	r3, [pc, #684]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006840:	2180      	movs	r1, #128	; 0x80
 8006842:	0549      	lsls	r1, r1, #21
 8006844:	430a      	orrs	r2, r1
 8006846:	63da      	str	r2, [r3, #60]	; 0x3c
 8006848:	4ba8      	ldr	r3, [pc, #672]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 800684a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	055b      	lsls	r3, r3, #21
 8006850:	4013      	ands	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006856:	231f      	movs	r3, #31
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	2201      	movs	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800685e:	4ba4      	ldr	r3, [pc, #656]	; (8006af0 <HAL_RCC_OscConfig+0x61c>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	2380      	movs	r3, #128	; 0x80
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4013      	ands	r3, r2
 8006868:	d11a      	bne.n	80068a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800686a:	4ba1      	ldr	r3, [pc, #644]	; (8006af0 <HAL_RCC_OscConfig+0x61c>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4ba0      	ldr	r3, [pc, #640]	; (8006af0 <HAL_RCC_OscConfig+0x61c>)
 8006870:	2180      	movs	r1, #128	; 0x80
 8006872:	0049      	lsls	r1, r1, #1
 8006874:	430a      	orrs	r2, r1
 8006876:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006878:	f7fe f8f6 	bl	8004a68 <HAL_GetTick>
 800687c:	0003      	movs	r3, r0
 800687e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006882:	f7fe f8f1 	bl	8004a68 <HAL_GetTick>
 8006886:	0002      	movs	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e127      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006894:	4b96      	ldr	r3, [pc, #600]	; (8006af0 <HAL_RCC_OscConfig+0x61c>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	4013      	ands	r3, r2
 800689e:	d0f0      	beq.n	8006882 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d106      	bne.n	80068b6 <HAL_RCC_OscConfig+0x3e2>
 80068a8:	4b90      	ldr	r3, [pc, #576]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80068aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068ac:	4b8f      	ldr	r3, [pc, #572]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80068ae:	2101      	movs	r1, #1
 80068b0:	430a      	orrs	r2, r1
 80068b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80068b4:	e01c      	b.n	80068f0 <HAL_RCC_OscConfig+0x41c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b05      	cmp	r3, #5
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCC_OscConfig+0x404>
 80068be:	4b8b      	ldr	r3, [pc, #556]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80068c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068c2:	4b8a      	ldr	r3, [pc, #552]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80068c4:	2104      	movs	r1, #4
 80068c6:	430a      	orrs	r2, r1
 80068c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80068ca:	4b88      	ldr	r3, [pc, #544]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80068cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068ce:	4b87      	ldr	r3, [pc, #540]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80068d0:	2101      	movs	r1, #1
 80068d2:	430a      	orrs	r2, r1
 80068d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80068d6:	e00b      	b.n	80068f0 <HAL_RCC_OscConfig+0x41c>
 80068d8:	4b84      	ldr	r3, [pc, #528]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80068da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068dc:	4b83      	ldr	r3, [pc, #524]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80068de:	2101      	movs	r1, #1
 80068e0:	438a      	bics	r2, r1
 80068e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80068e4:	4b81      	ldr	r3, [pc, #516]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80068e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068e8:	4b80      	ldr	r3, [pc, #512]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80068ea:	2104      	movs	r1, #4
 80068ec:	438a      	bics	r2, r1
 80068ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d014      	beq.n	8006922 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f8:	f7fe f8b6 	bl	8004a68 <HAL_GetTick>
 80068fc:	0003      	movs	r3, r0
 80068fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006900:	e009      	b.n	8006916 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006902:	f7fe f8b1 	bl	8004a68 <HAL_GetTick>
 8006906:	0002      	movs	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	4a79      	ldr	r2, [pc, #484]	; (8006af4 <HAL_RCC_OscConfig+0x620>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e0e6      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006916:	4b75      	ldr	r3, [pc, #468]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691a:	2202      	movs	r2, #2
 800691c:	4013      	ands	r3, r2
 800691e:	d0f0      	beq.n	8006902 <HAL_RCC_OscConfig+0x42e>
 8006920:	e013      	b.n	800694a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006922:	f7fe f8a1 	bl	8004a68 <HAL_GetTick>
 8006926:	0003      	movs	r3, r0
 8006928:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800692a:	e009      	b.n	8006940 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692c:	f7fe f89c 	bl	8004a68 <HAL_GetTick>
 8006930:	0002      	movs	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	4a6f      	ldr	r2, [pc, #444]	; (8006af4 <HAL_RCC_OscConfig+0x620>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e0d1      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006940:	4b6a      	ldr	r3, [pc, #424]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006944:	2202      	movs	r2, #2
 8006946:	4013      	ands	r3, r2
 8006948:	d1f0      	bne.n	800692c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800694a:	231f      	movs	r3, #31
 800694c:	18fb      	adds	r3, r7, r3
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d105      	bne.n	8006960 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006954:	4b65      	ldr	r3, [pc, #404]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006958:	4b64      	ldr	r3, [pc, #400]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 800695a:	4967      	ldr	r1, [pc, #412]	; (8006af8 <HAL_RCC_OscConfig+0x624>)
 800695c:	400a      	ands	r2, r1
 800695e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d100      	bne.n	800696a <HAL_RCC_OscConfig+0x496>
 8006968:	e0bb      	b.n	8006ae2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800696a:	4b60      	ldr	r3, [pc, #384]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2238      	movs	r2, #56	; 0x38
 8006970:	4013      	ands	r3, r2
 8006972:	2b10      	cmp	r3, #16
 8006974:	d100      	bne.n	8006978 <HAL_RCC_OscConfig+0x4a4>
 8006976:	e07b      	b.n	8006a70 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d156      	bne.n	8006a2e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006980:	4b5a      	ldr	r3, [pc, #360]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	4b59      	ldr	r3, [pc, #356]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006986:	495d      	ldr	r1, [pc, #372]	; (8006afc <HAL_RCC_OscConfig+0x628>)
 8006988:	400a      	ands	r2, r1
 800698a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fe f86c 	bl	8004a68 <HAL_GetTick>
 8006990:	0003      	movs	r3, r0
 8006992:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006996:	f7fe f867 	bl	8004a68 <HAL_GetTick>
 800699a:	0002      	movs	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e09d      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069a8:	4b50      	ldr	r3, [pc, #320]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	2380      	movs	r3, #128	; 0x80
 80069ae:	049b      	lsls	r3, r3, #18
 80069b0:	4013      	ands	r3, r2
 80069b2:	d1f0      	bne.n	8006996 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069b4:	4b4d      	ldr	r3, [pc, #308]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4a51      	ldr	r2, [pc, #324]	; (8006b00 <HAL_RCC_OscConfig+0x62c>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	0019      	movs	r1, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1a      	ldr	r2, [r3, #32]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e0:	431a      	orrs	r2, r3
 80069e2:	4b42      	ldr	r3, [pc, #264]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80069e4:	430a      	orrs	r2, r1
 80069e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e8:	4b40      	ldr	r3, [pc, #256]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	4b3f      	ldr	r3, [pc, #252]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80069ee:	2180      	movs	r1, #128	; 0x80
 80069f0:	0449      	lsls	r1, r1, #17
 80069f2:	430a      	orrs	r2, r1
 80069f4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80069f6:	4b3d      	ldr	r3, [pc, #244]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	4b3c      	ldr	r3, [pc, #240]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80069fc:	2180      	movs	r1, #128	; 0x80
 80069fe:	0549      	lsls	r1, r1, #21
 8006a00:	430a      	orrs	r2, r1
 8006a02:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fe f830 	bl	8004a68 <HAL_GetTick>
 8006a08:	0003      	movs	r3, r0
 8006a0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a0e:	f7fe f82b 	bl	8004a68 <HAL_GetTick>
 8006a12:	0002      	movs	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e061      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a20:	4b32      	ldr	r3, [pc, #200]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	049b      	lsls	r3, r3, #18
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_RCC_OscConfig+0x53a>
 8006a2c:	e059      	b.n	8006ae2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2e:	4b2f      	ldr	r3, [pc, #188]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b2e      	ldr	r3, [pc, #184]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006a34:	4931      	ldr	r1, [pc, #196]	; (8006afc <HAL_RCC_OscConfig+0x628>)
 8006a36:	400a      	ands	r2, r1
 8006a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3a:	f7fe f815 	bl	8004a68 <HAL_GetTick>
 8006a3e:	0003      	movs	r3, r0
 8006a40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a44:	f7fe f810 	bl	8004a68 <HAL_GetTick>
 8006a48:	0002      	movs	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e046      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a56:	4b25      	ldr	r3, [pc, #148]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	2380      	movs	r3, #128	; 0x80
 8006a5c:	049b      	lsls	r3, r3, #18
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d1f0      	bne.n	8006a44 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006a62:	4b22      	ldr	r3, [pc, #136]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	4b21      	ldr	r3, [pc, #132]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006a68:	4926      	ldr	r1, [pc, #152]	; (8006b04 <HAL_RCC_OscConfig+0x630>)
 8006a6a:	400a      	ands	r2, r1
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	e038      	b.n	8006ae2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e033      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006a7c:	4b1b      	ldr	r3, [pc, #108]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2203      	movs	r2, #3
 8006a86:	401a      	ands	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d126      	bne.n	8006ade <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2270      	movs	r2, #112	; 0x70
 8006a94:	401a      	ands	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d11f      	bne.n	8006ade <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	23fe      	movs	r3, #254	; 0xfe
 8006aa2:	01db      	lsls	r3, r3, #7
 8006aa4:	401a      	ands	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d116      	bne.n	8006ade <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	23f8      	movs	r3, #248	; 0xf8
 8006ab4:	039b      	lsls	r3, r3, #14
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d10e      	bne.n	8006ade <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	23e0      	movs	r3, #224	; 0xe0
 8006ac4:	051b      	lsls	r3, r3, #20
 8006ac6:	401a      	ands	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d106      	bne.n	8006ade <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	0f5b      	lsrs	r3, r3, #29
 8006ad4:	075a      	lsls	r2, r3, #29
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d001      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	b008      	add	sp, #32
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40021000 	.word	0x40021000
 8006af0:	40007000 	.word	0x40007000
 8006af4:	00001388 	.word	0x00001388
 8006af8:	efffffff 	.word	0xefffffff
 8006afc:	feffffff 	.word	0xfeffffff
 8006b00:	11c1808c 	.word	0x11c1808c
 8006b04:	eefefffc 	.word	0xeefefffc

08006b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0e9      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b76      	ldr	r3, [pc, #472]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2207      	movs	r2, #7
 8006b22:	4013      	ands	r3, r2
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d91e      	bls.n	8006b68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b73      	ldr	r3, [pc, #460]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2207      	movs	r2, #7
 8006b30:	4393      	bics	r3, r2
 8006b32:	0019      	movs	r1, r3
 8006b34:	4b70      	ldr	r3, [pc, #448]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b3c:	f7fd ff94 	bl	8004a68 <HAL_GetTick>
 8006b40:	0003      	movs	r3, r0
 8006b42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b44:	e009      	b.n	8006b5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b46:	f7fd ff8f 	bl	8004a68 <HAL_GetTick>
 8006b4a:	0002      	movs	r2, r0
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	4a6a      	ldr	r2, [pc, #424]	; (8006cfc <HAL_RCC_ClockConfig+0x1f4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e0ca      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b5a:	4b67      	ldr	r3, [pc, #412]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2207      	movs	r2, #7
 8006b60:	4013      	ands	r3, r2
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d1ee      	bne.n	8006b46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d015      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2204      	movs	r2, #4
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d006      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006b7c:	4b60      	ldr	r3, [pc, #384]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	4b5f      	ldr	r3, [pc, #380]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006b82:	21e0      	movs	r1, #224	; 0xe0
 8006b84:	01c9      	lsls	r1, r1, #7
 8006b86:	430a      	orrs	r2, r1
 8006b88:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b8a:	4b5d      	ldr	r3, [pc, #372]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	4a5d      	ldr	r2, [pc, #372]	; (8006d04 <HAL_RCC_ClockConfig+0x1fc>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	0019      	movs	r1, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	4b59      	ldr	r3, [pc, #356]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d057      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d107      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bb0:	4b53      	ldr	r3, [pc, #332]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	2380      	movs	r3, #128	; 0x80
 8006bb6:	029b      	lsls	r3, r3, #10
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d12b      	bne.n	8006c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e097      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc8:	4b4d      	ldr	r3, [pc, #308]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	2380      	movs	r3, #128	; 0x80
 8006bce:	049b      	lsls	r3, r3, #18
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	d11f      	bne.n	8006c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e08b      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d107      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006be0:	4b47      	ldr	r3, [pc, #284]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	2380      	movs	r3, #128	; 0x80
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	4013      	ands	r3, r2
 8006bea:	d113      	bne.n	8006c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e07f      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d106      	bne.n	8006c06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bf8:	4b41      	ldr	r3, [pc, #260]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	4013      	ands	r3, r2
 8006c00:	d108      	bne.n	8006c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e074      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c06:	4b3e      	ldr	r3, [pc, #248]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d101      	bne.n	8006c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e06d      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c14:	4b3a      	ldr	r3, [pc, #232]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2207      	movs	r2, #7
 8006c1a:	4393      	bics	r3, r2
 8006c1c:	0019      	movs	r1, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	4b37      	ldr	r3, [pc, #220]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006c24:	430a      	orrs	r2, r1
 8006c26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c28:	f7fd ff1e 	bl	8004a68 <HAL_GetTick>
 8006c2c:	0003      	movs	r3, r0
 8006c2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c30:	e009      	b.n	8006c46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c32:	f7fd ff19 	bl	8004a68 <HAL_GetTick>
 8006c36:	0002      	movs	r2, r0
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	4a2f      	ldr	r2, [pc, #188]	; (8006cfc <HAL_RCC_ClockConfig+0x1f4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e054      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c46:	4b2e      	ldr	r3, [pc, #184]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2238      	movs	r2, #56	; 0x38
 8006c4c:	401a      	ands	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d1ec      	bne.n	8006c32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c58:	4b27      	ldr	r3, [pc, #156]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2207      	movs	r2, #7
 8006c5e:	4013      	ands	r3, r2
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d21e      	bcs.n	8006ca4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c66:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2207      	movs	r2, #7
 8006c6c:	4393      	bics	r3, r2
 8006c6e:	0019      	movs	r1, r3
 8006c70:	4b21      	ldr	r3, [pc, #132]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c78:	f7fd fef6 	bl	8004a68 <HAL_GetTick>
 8006c7c:	0003      	movs	r3, r0
 8006c7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c80:	e009      	b.n	8006c96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c82:	f7fd fef1 	bl	8004a68 <HAL_GetTick>
 8006c86:	0002      	movs	r2, r0
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	4a1b      	ldr	r2, [pc, #108]	; (8006cfc <HAL_RCC_ClockConfig+0x1f4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e02c      	b.n	8006cf0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c96:	4b18      	ldr	r3, [pc, #96]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2207      	movs	r2, #7
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d1ee      	bne.n	8006c82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2204      	movs	r2, #4
 8006caa:	4013      	ands	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006cae:	4b14      	ldr	r3, [pc, #80]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <HAL_RCC_ClockConfig+0x200>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006cc2:	f000 f829 	bl	8006d18 <HAL_RCC_GetSysClockFreq>
 8006cc6:	0001      	movs	r1, r0
 8006cc8:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	0a1b      	lsrs	r3, r3, #8
 8006cce:	220f      	movs	r2, #15
 8006cd0:	401a      	ands	r2, r3
 8006cd2:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <HAL_RCC_ClockConfig+0x204>)
 8006cd4:	0092      	lsls	r2, r2, #2
 8006cd6:	58d3      	ldr	r3, [r2, r3]
 8006cd8:	221f      	movs	r2, #31
 8006cda:	4013      	ands	r3, r2
 8006cdc:	000a      	movs	r2, r1
 8006cde:	40da      	lsrs	r2, r3
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <HAL_RCC_ClockConfig+0x208>)
 8006ce2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <HAL_RCC_ClockConfig+0x20c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7fd fe61 	bl	80049b0 <HAL_InitTick>
 8006cee:	0003      	movs	r3, r0
}
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b004      	add	sp, #16
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40022000 	.word	0x40022000
 8006cfc:	00001388 	.word	0x00001388
 8006d00:	40021000 	.word	0x40021000
 8006d04:	fffff0ff 	.word	0xfffff0ff
 8006d08:	ffff8fff 	.word	0xffff8fff
 8006d0c:	0800d4dc 	.word	0x0800d4dc
 8006d10:	20000000 	.word	0x20000000
 8006d14:	20000004 	.word	0x20000004

08006d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d1e:	4b3c      	ldr	r3, [pc, #240]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2238      	movs	r2, #56	; 0x38
 8006d24:	4013      	ands	r3, r2
 8006d26:	d10f      	bne.n	8006d48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006d28:	4b39      	ldr	r3, [pc, #228]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	0adb      	lsrs	r3, r3, #11
 8006d2e:	2207      	movs	r2, #7
 8006d30:	4013      	ands	r3, r2
 8006d32:	2201      	movs	r2, #1
 8006d34:	409a      	lsls	r2, r3
 8006d36:	0013      	movs	r3, r2
 8006d38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	4835      	ldr	r0, [pc, #212]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d3e:	f7f9 f9fd 	bl	800013c <__udivsi3>
 8006d42:	0003      	movs	r3, r0
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	e05d      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d48:	4b31      	ldr	r3, [pc, #196]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2238      	movs	r2, #56	; 0x38
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d102      	bne.n	8006d5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d54:	4b30      	ldr	r3, [pc, #192]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x100>)
 8006d56:	613b      	str	r3, [r7, #16]
 8006d58:	e054      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d5a:	4b2d      	ldr	r3, [pc, #180]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	2238      	movs	r2, #56	; 0x38
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b10      	cmp	r3, #16
 8006d64:	d138      	bne.n	8006dd8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006d66:	4b2a      	ldr	r3, [pc, #168]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d70:	4b27      	ldr	r3, [pc, #156]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	091b      	lsrs	r3, r3, #4
 8006d76:	2207      	movs	r2, #7
 8006d78:	4013      	ands	r3, r2
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d10d      	bne.n	8006da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4824      	ldr	r0, [pc, #144]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x100>)
 8006d88:	f7f9 f9d8 	bl	800013c <__udivsi3>
 8006d8c:	0003      	movs	r3, r0
 8006d8e:	0019      	movs	r1, r3
 8006d90:	4b1f      	ldr	r3, [pc, #124]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	0a1b      	lsrs	r3, r3, #8
 8006d96:	227f      	movs	r2, #127	; 0x7f
 8006d98:	4013      	ands	r3, r2
 8006d9a:	434b      	muls	r3, r1
 8006d9c:	617b      	str	r3, [r7, #20]
        break;
 8006d9e:	e00d      	b.n	8006dbc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	481c      	ldr	r0, [pc, #112]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006da4:	f7f9 f9ca 	bl	800013c <__udivsi3>
 8006da8:	0003      	movs	r3, r0
 8006daa:	0019      	movs	r1, r3
 8006dac:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	0a1b      	lsrs	r3, r3, #8
 8006db2:	227f      	movs	r2, #127	; 0x7f
 8006db4:	4013      	ands	r3, r2
 8006db6:	434b      	muls	r3, r1
 8006db8:	617b      	str	r3, [r7, #20]
        break;
 8006dba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006dbc:	4b14      	ldr	r3, [pc, #80]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	0f5b      	lsrs	r3, r3, #29
 8006dc2:	2207      	movs	r2, #7
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	6978      	ldr	r0, [r7, #20]
 8006dce:	f7f9 f9b5 	bl	800013c <__udivsi3>
 8006dd2:	0003      	movs	r3, r0
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	e015      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006dd8:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2238      	movs	r2, #56	; 0x38
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d103      	bne.n	8006dec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006de4:	2380      	movs	r3, #128	; 0x80
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	e00b      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006dec:	4b08      	ldr	r3, [pc, #32]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2238      	movs	r2, #56	; 0x38
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b18      	cmp	r3, #24
 8006df6:	d103      	bne.n	8006e00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006df8:	23fa      	movs	r3, #250	; 0xfa
 8006dfa:	01db      	lsls	r3, r3, #7
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	e001      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e04:	693b      	ldr	r3, [r7, #16]
}
 8006e06:	0018      	movs	r0, r3
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	b006      	add	sp, #24
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	40021000 	.word	0x40021000
 8006e14:	00f42400 	.word	0x00f42400
 8006e18:	007a1200 	.word	0x007a1200

08006e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e20:	4b02      	ldr	r3, [pc, #8]	; (8006e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8006e22:	681b      	ldr	r3, [r3, #0]
}
 8006e24:	0018      	movs	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	20000000 	.word	0x20000000

08006e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e30:	b5b0      	push	{r4, r5, r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006e34:	f7ff fff2 	bl	8006e1c <HAL_RCC_GetHCLKFreq>
 8006e38:	0004      	movs	r4, r0
 8006e3a:	f7ff fb3f 	bl	80064bc <LL_RCC_GetAPB1Prescaler>
 8006e3e:	0003      	movs	r3, r0
 8006e40:	0b1a      	lsrs	r2, r3, #12
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e44:	0092      	lsls	r2, r2, #2
 8006e46:	58d3      	ldr	r3, [r2, r3]
 8006e48:	221f      	movs	r2, #31
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	40dc      	lsrs	r4, r3
 8006e4e:	0023      	movs	r3, r4
}
 8006e50:	0018      	movs	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bdb0      	pop	{r4, r5, r7, pc}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	0800d51c 	.word	0x0800d51c

08006e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006e64:	2313      	movs	r3, #19
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e6c:	2312      	movs	r3, #18
 8006e6e:	18fb      	adds	r3, r7, r3
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	2380      	movs	r3, #128	; 0x80
 8006e7a:	029b      	lsls	r3, r3, #10
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d100      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006e80:	e0a3      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e82:	2011      	movs	r0, #17
 8006e84:	183b      	adds	r3, r7, r0
 8006e86:	2200      	movs	r2, #0
 8006e88:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e8a:	4ba5      	ldr	r3, [pc, #660]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e8e:	2380      	movs	r3, #128	; 0x80
 8006e90:	055b      	lsls	r3, r3, #21
 8006e92:	4013      	ands	r3, r2
 8006e94:	d110      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e96:	4ba2      	ldr	r3, [pc, #648]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e9a:	4ba1      	ldr	r3, [pc, #644]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006e9c:	2180      	movs	r1, #128	; 0x80
 8006e9e:	0549      	lsls	r1, r1, #21
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ea4:	4b9e      	ldr	r3, [pc, #632]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ea8:	2380      	movs	r3, #128	; 0x80
 8006eaa:	055b      	lsls	r3, r3, #21
 8006eac:	4013      	ands	r3, r2
 8006eae:	60bb      	str	r3, [r7, #8]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eb2:	183b      	adds	r3, r7, r0
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eb8:	4b9a      	ldr	r3, [pc, #616]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	4b99      	ldr	r3, [pc, #612]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006ebe:	2180      	movs	r1, #128	; 0x80
 8006ec0:	0049      	lsls	r1, r1, #1
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ec6:	f7fd fdcf 	bl	8004a68 <HAL_GetTick>
 8006eca:	0003      	movs	r3, r0
 8006ecc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ece:	e00b      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ed0:	f7fd fdca 	bl	8004a68 <HAL_GetTick>
 8006ed4:	0002      	movs	r2, r0
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d904      	bls.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006ede:	2313      	movs	r3, #19
 8006ee0:	18fb      	adds	r3, r7, r3
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	701a      	strb	r2, [r3, #0]
        break;
 8006ee6:	e005      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ee8:	4b8e      	ldr	r3, [pc, #568]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d0ed      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006ef4:	2313      	movs	r3, #19
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d154      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006efe:	4b88      	ldr	r3, [pc, #544]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f02:	23c0      	movs	r3, #192	; 0xc0
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4013      	ands	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d019      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d014      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f1a:	4b81      	ldr	r3, [pc, #516]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1e:	4a82      	ldr	r2, [pc, #520]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f24:	4b7e      	ldr	r3, [pc, #504]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f28:	4b7d      	ldr	r3, [pc, #500]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f2a:	2180      	movs	r1, #128	; 0x80
 8006f2c:	0249      	lsls	r1, r1, #9
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f32:	4b7b      	ldr	r3, [pc, #492]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f36:	4b7a      	ldr	r3, [pc, #488]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f38:	497c      	ldr	r1, [pc, #496]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006f3a:	400a      	ands	r2, r1
 8006f3c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f3e:	4b78      	ldr	r3, [pc, #480]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2201      	movs	r2, #1
 8006f48:	4013      	ands	r3, r2
 8006f4a:	d016      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4c:	f7fd fd8c 	bl	8004a68 <HAL_GetTick>
 8006f50:	0003      	movs	r3, r0
 8006f52:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f54:	e00c      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f56:	f7fd fd87 	bl	8004a68 <HAL_GetTick>
 8006f5a:	0002      	movs	r2, r0
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	4a73      	ldr	r2, [pc, #460]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d904      	bls.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006f66:	2313      	movs	r3, #19
 8006f68:	18fb      	adds	r3, r7, r3
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	701a      	strb	r2, [r3, #0]
            break;
 8006f6e:	e004      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f70:	4b6b      	ldr	r3, [pc, #428]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f74:	2202      	movs	r2, #2
 8006f76:	4013      	ands	r3, r2
 8006f78:	d0ed      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006f7a:	2313      	movs	r3, #19
 8006f7c:	18fb      	adds	r3, r7, r3
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f84:	4b66      	ldr	r3, [pc, #408]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f88:	4a67      	ldr	r2, [pc, #412]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	0019      	movs	r1, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f92:	4b63      	ldr	r3, [pc, #396]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f94:	430a      	orrs	r2, r1
 8006f96:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f98:	e00c      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f9a:	2312      	movs	r3, #18
 8006f9c:	18fb      	adds	r3, r7, r3
 8006f9e:	2213      	movs	r2, #19
 8006fa0:	18ba      	adds	r2, r7, r2
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	e005      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa8:	2312      	movs	r3, #18
 8006faa:	18fb      	adds	r3, r7, r3
 8006fac:	2213      	movs	r2, #19
 8006fae:	18ba      	adds	r2, r7, r2
 8006fb0:	7812      	ldrb	r2, [r2, #0]
 8006fb2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fb4:	2311      	movs	r3, #17
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d105      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fbe:	4b58      	ldr	r3, [pc, #352]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fc2:	4b57      	ldr	r3, [pc, #348]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fc4:	495b      	ldr	r1, [pc, #364]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006fc6:	400a      	ands	r2, r1
 8006fc8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d009      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fd4:	4b52      	ldr	r3, [pc, #328]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd8:	2203      	movs	r2, #3
 8006fda:	4393      	bics	r3, r2
 8006fdc:	0019      	movs	r1, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	4b4f      	ldr	r3, [pc, #316]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2210      	movs	r2, #16
 8006fee:	4013      	ands	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ff2:	4b4b      	ldr	r3, [pc, #300]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	4a50      	ldr	r2, [pc, #320]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	0019      	movs	r1, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	4b47      	ldr	r3, [pc, #284]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007002:	430a      	orrs	r2, r1
 8007004:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	2380      	movs	r3, #128	; 0x80
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4013      	ands	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007012:	4b43      	ldr	r3, [pc, #268]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007016:	4a49      	ldr	r2, [pc, #292]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007018:	4013      	ands	r3, r2
 800701a:	0019      	movs	r1, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	695a      	ldr	r2, [r3, #20]
 8007020:	4b3f      	ldr	r3, [pc, #252]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007022:	430a      	orrs	r2, r1
 8007024:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	2380      	movs	r3, #128	; 0x80
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	4013      	ands	r3, r2
 8007030:	d009      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007032:	4b3b      	ldr	r3, [pc, #236]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	4a42      	ldr	r2, [pc, #264]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007038:	4013      	ands	r3, r2
 800703a:	0019      	movs	r1, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	4b37      	ldr	r3, [pc, #220]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007042:	430a      	orrs	r2, r1
 8007044:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2220      	movs	r2, #32
 800704c:	4013      	ands	r3, r2
 800704e:	d009      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007050:	4b33      	ldr	r3, [pc, #204]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007054:	4a3b      	ldr	r2, [pc, #236]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007056:	4013      	ands	r3, r2
 8007058:	0019      	movs	r1, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	4b30      	ldr	r3, [pc, #192]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007060:	430a      	orrs	r2, r1
 8007062:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	01db      	lsls	r3, r3, #7
 800706c:	4013      	ands	r3, r2
 800706e:	d015      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007070:	4b2b      	ldr	r3, [pc, #172]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	0899      	lsrs	r1, r3, #2
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69da      	ldr	r2, [r3, #28]
 800707c:	4b28      	ldr	r3, [pc, #160]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800707e:	430a      	orrs	r2, r1
 8007080:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69da      	ldr	r2, [r3, #28]
 8007086:	2380      	movs	r3, #128	; 0x80
 8007088:	05db      	lsls	r3, r3, #23
 800708a:	429a      	cmp	r2, r3
 800708c:	d106      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800708e:	4b24      	ldr	r3, [pc, #144]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	4b23      	ldr	r3, [pc, #140]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007094:	2180      	movs	r1, #128	; 0x80
 8007096:	0249      	lsls	r1, r1, #9
 8007098:	430a      	orrs	r2, r1
 800709a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	039b      	lsls	r3, r3, #14
 80070a4:	4013      	ands	r3, r2
 80070a6:	d016      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80070a8:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ac:	4a26      	ldr	r2, [pc, #152]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	0019      	movs	r1, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1a      	ldr	r2, [r3, #32]
 80070b6:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070b8:	430a      	orrs	r2, r1
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1a      	ldr	r2, [r3, #32]
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	03db      	lsls	r3, r3, #15
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d106      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80070c8:	4b15      	ldr	r3, [pc, #84]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	4b14      	ldr	r3, [pc, #80]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070ce:	2180      	movs	r1, #128	; 0x80
 80070d0:	0449      	lsls	r1, r1, #17
 80070d2:	430a      	orrs	r2, r1
 80070d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	4013      	ands	r3, r2
 80070e0:	d016      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80070e2:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e6:	4a19      	ldr	r2, [pc, #100]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	0019      	movs	r1, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691a      	ldr	r2, [r3, #16]
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070f2:	430a      	orrs	r2, r1
 80070f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	2380      	movs	r3, #128	; 0x80
 80070fc:	01db      	lsls	r3, r3, #7
 80070fe:	429a      	cmp	r2, r3
 8007100:	d106      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007102:	4b07      	ldr	r3, [pc, #28]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	4b06      	ldr	r3, [pc, #24]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007108:	2180      	movs	r1, #128	; 0x80
 800710a:	0249      	lsls	r1, r1, #9
 800710c:	430a      	orrs	r2, r1
 800710e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007110:	2312      	movs	r3, #18
 8007112:	18fb      	adds	r3, r7, r3
 8007114:	781b      	ldrb	r3, [r3, #0]
}
 8007116:	0018      	movs	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	b006      	add	sp, #24
 800711c:	bd80      	pop	{r7, pc}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	40021000 	.word	0x40021000
 8007124:	40007000 	.word	0x40007000
 8007128:	fffffcff 	.word	0xfffffcff
 800712c:	fffeffff 	.word	0xfffeffff
 8007130:	00001388 	.word	0x00001388
 8007134:	efffffff 	.word	0xefffffff
 8007138:	fffff3ff 	.word	0xfffff3ff
 800713c:	fff3ffff 	.word	0xfff3ffff
 8007140:	ffcfffff 	.word	0xffcfffff
 8007144:	ffffcfff 	.word	0xffffcfff
 8007148:	ffbfffff 	.word	0xffbfffff
 800714c:	ffff3fff 	.word	0xffff3fff

08007150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e04a      	b.n	80071f8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	223d      	movs	r2, #61	; 0x3d
 8007166:	5c9b      	ldrb	r3, [r3, r2]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d107      	bne.n	800717e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	223c      	movs	r2, #60	; 0x3c
 8007172:	2100      	movs	r1, #0
 8007174:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	0018      	movs	r0, r3
 800717a:	f7fd f9bb 	bl	80044f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	223d      	movs	r2, #61	; 0x3d
 8007182:	2102      	movs	r1, #2
 8007184:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3304      	adds	r3, #4
 800718e:	0019      	movs	r1, r3
 8007190:	0010      	movs	r0, r2
 8007192:	f000 f9db 	bl	800754c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2248      	movs	r2, #72	; 0x48
 800719a:	2101      	movs	r1, #1
 800719c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	223e      	movs	r2, #62	; 0x3e
 80071a2:	2101      	movs	r1, #1
 80071a4:	5499      	strb	r1, [r3, r2]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	223f      	movs	r2, #63	; 0x3f
 80071aa:	2101      	movs	r1, #1
 80071ac:	5499      	strb	r1, [r3, r2]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2240      	movs	r2, #64	; 0x40
 80071b2:	2101      	movs	r1, #1
 80071b4:	5499      	strb	r1, [r3, r2]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2241      	movs	r2, #65	; 0x41
 80071ba:	2101      	movs	r1, #1
 80071bc:	5499      	strb	r1, [r3, r2]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2242      	movs	r2, #66	; 0x42
 80071c2:	2101      	movs	r1, #1
 80071c4:	5499      	strb	r1, [r3, r2]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2243      	movs	r2, #67	; 0x43
 80071ca:	2101      	movs	r1, #1
 80071cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2244      	movs	r2, #68	; 0x44
 80071d2:	2101      	movs	r1, #1
 80071d4:	5499      	strb	r1, [r3, r2]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2245      	movs	r2, #69	; 0x45
 80071da:	2101      	movs	r1, #1
 80071dc:	5499      	strb	r1, [r3, r2]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2246      	movs	r2, #70	; 0x46
 80071e2:	2101      	movs	r1, #1
 80071e4:	5499      	strb	r1, [r3, r2]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2247      	movs	r2, #71	; 0x47
 80071ea:	2101      	movs	r1, #1
 80071ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	223d      	movs	r2, #61	; 0x3d
 80071f2:	2101      	movs	r1, #1
 80071f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	0018      	movs	r0, r3
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b002      	add	sp, #8
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	223d      	movs	r2, #61	; 0x3d
 800720c:	5c9b      	ldrb	r3, [r3, r2]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	d001      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e03d      	b.n	8007294 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	223d      	movs	r2, #61	; 0x3d
 800721c:	2102      	movs	r1, #2
 800721e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2101      	movs	r1, #1
 800722c:	430a      	orrs	r2, r1
 800722e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a19      	ldr	r2, [pc, #100]	; (800729c <HAL_TIM_Base_Start_IT+0x9c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00a      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0x50>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	2380      	movs	r3, #128	; 0x80
 8007240:	05db      	lsls	r3, r3, #23
 8007242:	429a      	cmp	r2, r3
 8007244:	d004      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0x50>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a15      	ldr	r2, [pc, #84]	; (80072a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d116      	bne.n	800727e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	4a13      	ldr	r2, [pc, #76]	; (80072a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8007258:	4013      	ands	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b06      	cmp	r3, #6
 8007260:	d016      	beq.n	8007290 <HAL_TIM_Base_Start_IT+0x90>
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	2380      	movs	r3, #128	; 0x80
 8007266:	025b      	lsls	r3, r3, #9
 8007268:	429a      	cmp	r2, r3
 800726a:	d011      	beq.n	8007290 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2101      	movs	r1, #1
 8007278:	430a      	orrs	r2, r1
 800727a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727c:	e008      	b.n	8007290 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2101      	movs	r1, #1
 800728a:	430a      	orrs	r2, r1
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	e000      	b.n	8007292 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007290:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	0018      	movs	r0, r3
 8007296:	46bd      	mov	sp, r7
 8007298:	b004      	add	sp, #16
 800729a:	bd80      	pop	{r7, pc}
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40000400 	.word	0x40000400
 80072a4:	00010007 	.word	0x00010007

080072a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2202      	movs	r2, #2
 80072b8:	4013      	ands	r3, r2
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d124      	bne.n	8007308 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	2202      	movs	r2, #2
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d11d      	bne.n	8007308 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2203      	movs	r2, #3
 80072d2:	4252      	negs	r2, r2
 80072d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	2203      	movs	r2, #3
 80072e4:	4013      	ands	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	0018      	movs	r0, r3
 80072ec:	f000 f916 	bl	800751c <HAL_TIM_IC_CaptureCallback>
 80072f0:	e007      	b.n	8007302 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f000 f909 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	0018      	movs	r0, r3
 80072fe:	f000 f915 	bl	800752c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2204      	movs	r2, #4
 8007310:	4013      	ands	r3, r2
 8007312:	2b04      	cmp	r3, #4
 8007314:	d125      	bne.n	8007362 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	2204      	movs	r2, #4
 800731e:	4013      	ands	r3, r2
 8007320:	2b04      	cmp	r3, #4
 8007322:	d11e      	bne.n	8007362 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2205      	movs	r2, #5
 800732a:	4252      	negs	r2, r2
 800732c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2202      	movs	r2, #2
 8007332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	23c0      	movs	r3, #192	; 0xc0
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4013      	ands	r3, r2
 8007340:	d004      	beq.n	800734c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	0018      	movs	r0, r3
 8007346:	f000 f8e9 	bl	800751c <HAL_TIM_IC_CaptureCallback>
 800734a:	e007      	b.n	800735c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	0018      	movs	r0, r3
 8007350:	f000 f8dc 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	0018      	movs	r0, r3
 8007358:	f000 f8e8 	bl	800752c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	2208      	movs	r2, #8
 800736a:	4013      	ands	r3, r2
 800736c:	2b08      	cmp	r3, #8
 800736e:	d124      	bne.n	80073ba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	2208      	movs	r2, #8
 8007378:	4013      	ands	r3, r2
 800737a:	2b08      	cmp	r3, #8
 800737c:	d11d      	bne.n	80073ba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2209      	movs	r2, #9
 8007384:	4252      	negs	r2, r2
 8007386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2204      	movs	r2, #4
 800738c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	2203      	movs	r2, #3
 8007396:	4013      	ands	r3, r2
 8007398:	d004      	beq.n	80073a4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	0018      	movs	r0, r3
 800739e:	f000 f8bd 	bl	800751c <HAL_TIM_IC_CaptureCallback>
 80073a2:	e007      	b.n	80073b4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	0018      	movs	r0, r3
 80073a8:	f000 f8b0 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	0018      	movs	r0, r3
 80073b0:	f000 f8bc 	bl	800752c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2210      	movs	r2, #16
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b10      	cmp	r3, #16
 80073c6:	d125      	bne.n	8007414 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	2210      	movs	r2, #16
 80073d0:	4013      	ands	r3, r2
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d11e      	bne.n	8007414 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2211      	movs	r2, #17
 80073dc:	4252      	negs	r2, r2
 80073de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2208      	movs	r2, #8
 80073e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	23c0      	movs	r3, #192	; 0xc0
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4013      	ands	r3, r2
 80073f2:	d004      	beq.n	80073fe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	0018      	movs	r0, r3
 80073f8:	f000 f890 	bl	800751c <HAL_TIM_IC_CaptureCallback>
 80073fc:	e007      	b.n	800740e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	0018      	movs	r0, r3
 8007402:	f000 f883 	bl	800750c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	0018      	movs	r0, r3
 800740a:	f000 f88f 	bl	800752c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2201      	movs	r2, #1
 800741c:	4013      	ands	r3, r2
 800741e:	2b01      	cmp	r3, #1
 8007420:	d10f      	bne.n	8007442 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	4013      	ands	r3, r2
 800742c:	2b01      	cmp	r3, #1
 800742e:	d108      	bne.n	8007442 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2202      	movs	r2, #2
 8007436:	4252      	negs	r2, r2
 8007438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	0018      	movs	r0, r3
 800743e:	f7fc f915 	bl	800366c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2280      	movs	r2, #128	; 0x80
 800744a:	4013      	ands	r3, r2
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d10f      	bne.n	8007470 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	2280      	movs	r2, #128	; 0x80
 8007458:	4013      	ands	r3, r2
 800745a:	2b80      	cmp	r3, #128	; 0x80
 800745c:	d108      	bne.n	8007470 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2281      	movs	r2, #129	; 0x81
 8007464:	4252      	negs	r2, r2
 8007466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	0018      	movs	r0, r3
 800746c:	f000 f8ec 	bl	8007648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	2380      	movs	r3, #128	; 0x80
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	401a      	ands	r2, r3
 800747c:	2380      	movs	r3, #128	; 0x80
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	429a      	cmp	r2, r3
 8007482:	d10e      	bne.n	80074a2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	2280      	movs	r2, #128	; 0x80
 800748c:	4013      	ands	r3, r2
 800748e:	2b80      	cmp	r3, #128	; 0x80
 8007490:	d107      	bne.n	80074a2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1c      	ldr	r2, [pc, #112]	; (8007508 <HAL_TIM_IRQHandler+0x260>)
 8007498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	0018      	movs	r0, r3
 800749e:	f000 f8db 	bl	8007658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	2240      	movs	r2, #64	; 0x40
 80074aa:	4013      	ands	r3, r2
 80074ac:	2b40      	cmp	r3, #64	; 0x40
 80074ae:	d10f      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	2240      	movs	r2, #64	; 0x40
 80074b8:	4013      	ands	r3, r2
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d108      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2241      	movs	r2, #65	; 0x41
 80074c4:	4252      	negs	r2, r2
 80074c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	0018      	movs	r0, r3
 80074cc:	f000 f836 	bl	800753c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2220      	movs	r2, #32
 80074d8:	4013      	ands	r3, r2
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d10f      	bne.n	80074fe <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2220      	movs	r2, #32
 80074e6:	4013      	ands	r3, r2
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d108      	bne.n	80074fe <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2221      	movs	r2, #33	; 0x21
 80074f2:	4252      	negs	r2, r2
 80074f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	0018      	movs	r0, r3
 80074fa:	f000 f89d 	bl	8007638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	46bd      	mov	sp, r7
 8007502:	b002      	add	sp, #8
 8007504:	bd80      	pop	{r7, pc}
 8007506:	46c0      	nop			; (mov r8, r8)
 8007508:	fffffeff 	.word	0xfffffeff

0800750c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007514:	46c0      	nop			; (mov r8, r8)
 8007516:	46bd      	mov	sp, r7
 8007518:	b002      	add	sp, #8
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007524:	46c0      	nop			; (mov r8, r8)
 8007526:	46bd      	mov	sp, r7
 8007528:	b002      	add	sp, #8
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007534:	46c0      	nop			; (mov r8, r8)
 8007536:	46bd      	mov	sp, r7
 8007538:	b002      	add	sp, #8
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007544:	46c0      	nop			; (mov r8, r8)
 8007546:	46bd      	mov	sp, r7
 8007548:	b002      	add	sp, #8
 800754a:	bd80      	pop	{r7, pc}

0800754c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a30      	ldr	r2, [pc, #192]	; (8007620 <TIM_Base_SetConfig+0xd4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d008      	beq.n	8007576 <TIM_Base_SetConfig+0x2a>
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	2380      	movs	r3, #128	; 0x80
 8007568:	05db      	lsls	r3, r3, #23
 800756a:	429a      	cmp	r2, r3
 800756c:	d003      	beq.n	8007576 <TIM_Base_SetConfig+0x2a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <TIM_Base_SetConfig+0xd8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d108      	bne.n	8007588 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2270      	movs	r2, #112	; 0x70
 800757a:	4393      	bics	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a25      	ldr	r2, [pc, #148]	; (8007620 <TIM_Base_SetConfig+0xd4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d014      	beq.n	80075ba <TIM_Base_SetConfig+0x6e>
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	2380      	movs	r3, #128	; 0x80
 8007594:	05db      	lsls	r3, r3, #23
 8007596:	429a      	cmp	r2, r3
 8007598:	d00f      	beq.n	80075ba <TIM_Base_SetConfig+0x6e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a21      	ldr	r2, [pc, #132]	; (8007624 <TIM_Base_SetConfig+0xd8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00b      	beq.n	80075ba <TIM_Base_SetConfig+0x6e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a20      	ldr	r2, [pc, #128]	; (8007628 <TIM_Base_SetConfig+0xdc>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d007      	beq.n	80075ba <TIM_Base_SetConfig+0x6e>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a1f      	ldr	r2, [pc, #124]	; (800762c <TIM_Base_SetConfig+0xe0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <TIM_Base_SetConfig+0x6e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1e      	ldr	r2, [pc, #120]	; (8007630 <TIM_Base_SetConfig+0xe4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d108      	bne.n	80075cc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <TIM_Base_SetConfig+0xe8>)
 80075be:	4013      	ands	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2280      	movs	r2, #128	; 0x80
 80075d0:	4393      	bics	r3, r2
 80075d2:	001a      	movs	r2, r3
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a0a      	ldr	r2, [pc, #40]	; (8007620 <TIM_Base_SetConfig+0xd4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d007      	beq.n	800760a <TIM_Base_SetConfig+0xbe>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a0b      	ldr	r2, [pc, #44]	; (800762c <TIM_Base_SetConfig+0xe0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_Base_SetConfig+0xbe>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a0a      	ldr	r2, [pc, #40]	; (8007630 <TIM_Base_SetConfig+0xe4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d103      	bne.n	8007612 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	691a      	ldr	r2, [r3, #16]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	615a      	str	r2, [r3, #20]
}
 8007618:	46c0      	nop			; (mov r8, r8)
 800761a:	46bd      	mov	sp, r7
 800761c:	b004      	add	sp, #16
 800761e:	bd80      	pop	{r7, pc}
 8007620:	40012c00 	.word	0x40012c00
 8007624:	40000400 	.word	0x40000400
 8007628:	40002000 	.word	0x40002000
 800762c:	40014400 	.word	0x40014400
 8007630:	40014800 	.word	0x40014800
 8007634:	fffffcff 	.word	0xfffffcff

08007638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007640:	46c0      	nop			; (mov r8, r8)
 8007642:	46bd      	mov	sp, r7
 8007644:	b002      	add	sp, #8
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007650:	46c0      	nop			; (mov r8, r8)
 8007652:	46bd      	mov	sp, r7
 8007654:	b002      	add	sp, #8
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007660:	46c0      	nop			; (mov r8, r8)
 8007662:	46bd      	mov	sp, r7
 8007664:	b002      	add	sp, #8
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e046      	b.n	8007708 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2288      	movs	r2, #136	; 0x88
 800767e:	589b      	ldr	r3, [r3, r2]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d107      	bne.n	8007694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2284      	movs	r2, #132	; 0x84
 8007688:	2100      	movs	r1, #0
 800768a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	0018      	movs	r0, r3
 8007690:	f7fc ff94 	bl	80045bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2288      	movs	r2, #136	; 0x88
 8007698:	2124      	movs	r1, #36	; 0x24
 800769a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2101      	movs	r1, #1
 80076a8:	438a      	bics	r2, r1
 80076aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	0018      	movs	r0, r3
 80076b0:	f000 f946 	bl	8007940 <UART_SetConfig>
 80076b4:	0003      	movs	r3, r0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d101      	bne.n	80076be <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e024      	b.n	8007708 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	0018      	movs	r0, r3
 80076ca:	f000 fbb1 	bl	8007e30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	490d      	ldr	r1, [pc, #52]	; (8007710 <HAL_UART_Init+0xa8>)
 80076da:	400a      	ands	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	212a      	movs	r1, #42	; 0x2a
 80076ea:	438a      	bics	r2, r1
 80076ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2101      	movs	r1, #1
 80076fa:	430a      	orrs	r2, r1
 80076fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	0018      	movs	r0, r3
 8007702:	f000 fc49 	bl	8007f98 <UART_CheckIdleState>
 8007706:	0003      	movs	r3, r0
}
 8007708:	0018      	movs	r0, r3
 800770a:	46bd      	mov	sp, r7
 800770c:	b002      	add	sp, #8
 800770e:	bd80      	pop	{r7, pc}
 8007710:	ffffb7ff 	.word	0xffffb7ff

08007714 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	; 0x28
 8007718:	af02      	add	r7, sp, #8
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	1dbb      	adds	r3, r7, #6
 8007722:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2288      	movs	r2, #136	; 0x88
 8007728:	589b      	ldr	r3, [r3, r2]
 800772a:	2b20      	cmp	r3, #32
 800772c:	d000      	beq.n	8007730 <HAL_UART_Transmit+0x1c>
 800772e:	e088      	b.n	8007842 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_UART_Transmit+0x2a>
 8007736:	1dbb      	adds	r3, r7, #6
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e080      	b.n	8007844 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	2380      	movs	r3, #128	; 0x80
 8007748:	015b      	lsls	r3, r3, #5
 800774a:	429a      	cmp	r2, r3
 800774c:	d109      	bne.n	8007762 <HAL_UART_Transmit+0x4e>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2201      	movs	r2, #1
 800775a:	4013      	ands	r3, r2
 800775c:	d001      	beq.n	8007762 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e070      	b.n	8007844 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2290      	movs	r2, #144	; 0x90
 8007766:	2100      	movs	r1, #0
 8007768:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2288      	movs	r2, #136	; 0x88
 800776e:	2121      	movs	r1, #33	; 0x21
 8007770:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007772:	f7fd f979 	bl	8004a68 <HAL_GetTick>
 8007776:	0003      	movs	r3, r0
 8007778:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1dba      	adds	r2, r7, #6
 800777e:	2154      	movs	r1, #84	; 0x54
 8007780:	8812      	ldrh	r2, [r2, #0]
 8007782:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	1dba      	adds	r2, r7, #6
 8007788:	2156      	movs	r1, #86	; 0x56
 800778a:	8812      	ldrh	r2, [r2, #0]
 800778c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	2380      	movs	r3, #128	; 0x80
 8007794:	015b      	lsls	r3, r3, #5
 8007796:	429a      	cmp	r2, r3
 8007798:	d108      	bne.n	80077ac <HAL_UART_Transmit+0x98>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	e003      	b.n	80077b4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077b0:	2300      	movs	r3, #0
 80077b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077b4:	e02c      	b.n	8007810 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	0013      	movs	r3, r2
 80077c0:	2200      	movs	r2, #0
 80077c2:	2180      	movs	r1, #128	; 0x80
 80077c4:	f000 fc36 	bl	8008034 <UART_WaitOnFlagUntilTimeout>
 80077c8:	1e03      	subs	r3, r0, #0
 80077ca:	d001      	beq.n	80077d0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e039      	b.n	8007844 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10b      	bne.n	80077ee <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	001a      	movs	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	05d2      	lsls	r2, r2, #23
 80077e2:	0dd2      	lsrs	r2, r2, #23
 80077e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	3302      	adds	r3, #2
 80077ea:	61bb      	str	r3, [r7, #24]
 80077ec:	e007      	b.n	80077fe <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	781a      	ldrb	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	3301      	adds	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2256      	movs	r2, #86	; 0x56
 8007802:	5a9b      	ldrh	r3, [r3, r2]
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b299      	uxth	r1, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2256      	movs	r2, #86	; 0x56
 800780e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2256      	movs	r2, #86	; 0x56
 8007814:	5a9b      	ldrh	r3, [r3, r2]
 8007816:	b29b      	uxth	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1cc      	bne.n	80077b6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	0013      	movs	r3, r2
 8007826:	2200      	movs	r2, #0
 8007828:	2140      	movs	r1, #64	; 0x40
 800782a:	f000 fc03 	bl	8008034 <UART_WaitOnFlagUntilTimeout>
 800782e:	1e03      	subs	r3, r0, #0
 8007830:	d001      	beq.n	8007836 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e006      	b.n	8007844 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2288      	movs	r2, #136	; 0x88
 800783a:	2120      	movs	r1, #32
 800783c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	e000      	b.n	8007844 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007842:	2302      	movs	r3, #2
  }
}
 8007844:	0018      	movs	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	b008      	add	sp, #32
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	1dbb      	adds	r3, r7, #6
 8007858:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	228c      	movs	r2, #140	; 0x8c
 800785e:	589b      	ldr	r3, [r3, r2]
 8007860:	2b20      	cmp	r3, #32
 8007862:	d14a      	bne.n	80078fa <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_UART_Receive_DMA+0x26>
 800786a:	1dbb      	adds	r3, r7, #6
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e042      	b.n	80078fc <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	2380      	movs	r3, #128	; 0x80
 800787c:	015b      	lsls	r3, r3, #5
 800787e:	429a      	cmp	r2, r3
 8007880:	d109      	bne.n	8007896 <HAL_UART_Receive_DMA+0x4a>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2201      	movs	r2, #1
 800788e:	4013      	ands	r3, r2
 8007890:	d001      	beq.n	8007896 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e032      	b.n	80078fc <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a18      	ldr	r2, [pc, #96]	; (8007904 <HAL_UART_Receive_DMA+0xb8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d020      	beq.n	80078e8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	2380      	movs	r3, #128	; 0x80
 80078ae:	041b      	lsls	r3, r3, #16
 80078b0:	4013      	ands	r3, r2
 80078b2:	d019      	beq.n	80078e8 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078b4:	f3ef 8310 	mrs	r3, PRIMASK
 80078b8:	613b      	str	r3, [r7, #16]
  return(result);
 80078ba:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078bc:	61fb      	str	r3, [r7, #28]
 80078be:	2301      	movs	r3, #1
 80078c0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f383 8810 	msr	PRIMASK, r3
}
 80078c8:	46c0      	nop			; (mov r8, r8)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2180      	movs	r1, #128	; 0x80
 80078d6:	04c9      	lsls	r1, r1, #19
 80078d8:	430a      	orrs	r2, r1
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f383 8810 	msr	PRIMASK, r3
}
 80078e6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80078e8:	1dbb      	adds	r3, r7, #6
 80078ea:	881a      	ldrh	r2, [r3, #0]
 80078ec:	68b9      	ldr	r1, [r7, #8]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	0018      	movs	r0, r3
 80078f2:	f000 fc67 	bl	80081c4 <UART_Start_Receive_DMA>
 80078f6:	0003      	movs	r3, r0
 80078f8:	e000      	b.n	80078fc <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80078fa:	2302      	movs	r3, #2
  }
}
 80078fc:	0018      	movs	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	b008      	add	sp, #32
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40008000 	.word	0x40008000

08007908 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007910:	46c0      	nop			; (mov r8, r8)
 8007912:	46bd      	mov	sp, r7
 8007914:	b002      	add	sp, #8
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007920:	46c0      	nop			; (mov r8, r8)
 8007922:	46bd      	mov	sp, r7
 8007924:	b002      	add	sp, #8
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	000a      	movs	r2, r1
 8007932:	1cbb      	adds	r3, r7, #2
 8007934:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007936:	46c0      	nop			; (mov r8, r8)
 8007938:	46bd      	mov	sp, r7
 800793a:	b002      	add	sp, #8
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007940:	b5b0      	push	{r4, r5, r7, lr}
 8007942:	b090      	sub	sp, #64	; 0x40
 8007944:	af00      	add	r7, sp, #0
 8007946:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007948:	231a      	movs	r3, #26
 800794a:	2220      	movs	r2, #32
 800794c:	189b      	adds	r3, r3, r2
 800794e:	19db      	adds	r3, r3, r7
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	431a      	orrs	r2, r3
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	431a      	orrs	r2, r3
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	4313      	orrs	r3, r2
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4ac4      	ldr	r2, [pc, #784]	; (8007c84 <UART_SetConfig+0x344>)
 8007974:	4013      	ands	r3, r2
 8007976:	0019      	movs	r1, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797e:	430b      	orrs	r3, r1
 8007980:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	4abf      	ldr	r2, [pc, #764]	; (8007c88 <UART_SetConfig+0x348>)
 800798a:	4013      	ands	r3, r2
 800798c:	0018      	movs	r0, r3
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	68d9      	ldr	r1, [r3, #12]
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	0003      	movs	r3, r0
 8007998:	430b      	orrs	r3, r1
 800799a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4ab9      	ldr	r2, [pc, #740]	; (8007c8c <UART_SetConfig+0x34c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d004      	beq.n	80079b6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079b2:	4313      	orrs	r3, r2
 80079b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	4ab4      	ldr	r2, [pc, #720]	; (8007c90 <UART_SetConfig+0x350>)
 80079be:	4013      	ands	r3, r2
 80079c0:	0019      	movs	r1, r3
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c8:	430b      	orrs	r3, r1
 80079ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	220f      	movs	r2, #15
 80079d4:	4393      	bics	r3, r2
 80079d6:	0018      	movs	r0, r3
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	0003      	movs	r3, r0
 80079e2:	430b      	orrs	r3, r1
 80079e4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4aaa      	ldr	r2, [pc, #680]	; (8007c94 <UART_SetConfig+0x354>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d131      	bne.n	8007a54 <UART_SetConfig+0x114>
 80079f0:	4ba9      	ldr	r3, [pc, #676]	; (8007c98 <UART_SetConfig+0x358>)
 80079f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f4:	2203      	movs	r2, #3
 80079f6:	4013      	ands	r3, r2
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d01d      	beq.n	8007a38 <UART_SetConfig+0xf8>
 80079fc:	d823      	bhi.n	8007a46 <UART_SetConfig+0x106>
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d00c      	beq.n	8007a1c <UART_SetConfig+0xdc>
 8007a02:	d820      	bhi.n	8007a46 <UART_SetConfig+0x106>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <UART_SetConfig+0xce>
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d00e      	beq.n	8007a2a <UART_SetConfig+0xea>
 8007a0c:	e01b      	b.n	8007a46 <UART_SetConfig+0x106>
 8007a0e:	231b      	movs	r3, #27
 8007a10:	2220      	movs	r2, #32
 8007a12:	189b      	adds	r3, r3, r2
 8007a14:	19db      	adds	r3, r3, r7
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	e071      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007a1c:	231b      	movs	r3, #27
 8007a1e:	2220      	movs	r2, #32
 8007a20:	189b      	adds	r3, r3, r2
 8007a22:	19db      	adds	r3, r3, r7
 8007a24:	2202      	movs	r2, #2
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	e06a      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007a2a:	231b      	movs	r3, #27
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	189b      	adds	r3, r3, r2
 8007a30:	19db      	adds	r3, r3, r7
 8007a32:	2204      	movs	r2, #4
 8007a34:	701a      	strb	r2, [r3, #0]
 8007a36:	e063      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007a38:	231b      	movs	r3, #27
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	189b      	adds	r3, r3, r2
 8007a3e:	19db      	adds	r3, r3, r7
 8007a40:	2208      	movs	r2, #8
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e05c      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007a46:	231b      	movs	r3, #27
 8007a48:	2220      	movs	r2, #32
 8007a4a:	189b      	adds	r3, r3, r2
 8007a4c:	19db      	adds	r3, r3, r7
 8007a4e:	2210      	movs	r2, #16
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	e055      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a90      	ldr	r2, [pc, #576]	; (8007c9c <UART_SetConfig+0x35c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d106      	bne.n	8007a6c <UART_SetConfig+0x12c>
 8007a5e:	231b      	movs	r3, #27
 8007a60:	2220      	movs	r2, #32
 8007a62:	189b      	adds	r3, r3, r2
 8007a64:	19db      	adds	r3, r3, r7
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	e049      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a86      	ldr	r2, [pc, #536]	; (8007c8c <UART_SetConfig+0x34c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d13e      	bne.n	8007af4 <UART_SetConfig+0x1b4>
 8007a76:	4b88      	ldr	r3, [pc, #544]	; (8007c98 <UART_SetConfig+0x358>)
 8007a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a7a:	23c0      	movs	r3, #192	; 0xc0
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	4013      	ands	r3, r2
 8007a80:	22c0      	movs	r2, #192	; 0xc0
 8007a82:	0112      	lsls	r2, r2, #4
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d027      	beq.n	8007ad8 <UART_SetConfig+0x198>
 8007a88:	22c0      	movs	r2, #192	; 0xc0
 8007a8a:	0112      	lsls	r2, r2, #4
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d82a      	bhi.n	8007ae6 <UART_SetConfig+0x1a6>
 8007a90:	2280      	movs	r2, #128	; 0x80
 8007a92:	0112      	lsls	r2, r2, #4
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d011      	beq.n	8007abc <UART_SetConfig+0x17c>
 8007a98:	2280      	movs	r2, #128	; 0x80
 8007a9a:	0112      	lsls	r2, r2, #4
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d822      	bhi.n	8007ae6 <UART_SetConfig+0x1a6>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <UART_SetConfig+0x16e>
 8007aa4:	2280      	movs	r2, #128	; 0x80
 8007aa6:	00d2      	lsls	r2, r2, #3
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00e      	beq.n	8007aca <UART_SetConfig+0x18a>
 8007aac:	e01b      	b.n	8007ae6 <UART_SetConfig+0x1a6>
 8007aae:	231b      	movs	r3, #27
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	189b      	adds	r3, r3, r2
 8007ab4:	19db      	adds	r3, r3, r7
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	e021      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007abc:	231b      	movs	r3, #27
 8007abe:	2220      	movs	r2, #32
 8007ac0:	189b      	adds	r3, r3, r2
 8007ac2:	19db      	adds	r3, r3, r7
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	e01a      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007aca:	231b      	movs	r3, #27
 8007acc:	2220      	movs	r2, #32
 8007ace:	189b      	adds	r3, r3, r2
 8007ad0:	19db      	adds	r3, r3, r7
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	e013      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007ad8:	231b      	movs	r3, #27
 8007ada:	2220      	movs	r2, #32
 8007adc:	189b      	adds	r3, r3, r2
 8007ade:	19db      	adds	r3, r3, r7
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e00c      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007ae6:	231b      	movs	r3, #27
 8007ae8:	2220      	movs	r2, #32
 8007aea:	189b      	adds	r3, r3, r2
 8007aec:	19db      	adds	r3, r3, r7
 8007aee:	2210      	movs	r2, #16
 8007af0:	701a      	strb	r2, [r3, #0]
 8007af2:	e005      	b.n	8007b00 <UART_SetConfig+0x1c0>
 8007af4:	231b      	movs	r3, #27
 8007af6:	2220      	movs	r2, #32
 8007af8:	189b      	adds	r3, r3, r2
 8007afa:	19db      	adds	r3, r3, r7
 8007afc:	2210      	movs	r2, #16
 8007afe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a61      	ldr	r2, [pc, #388]	; (8007c8c <UART_SetConfig+0x34c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d000      	beq.n	8007b0c <UART_SetConfig+0x1cc>
 8007b0a:	e092      	b.n	8007c32 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b0c:	231b      	movs	r3, #27
 8007b0e:	2220      	movs	r2, #32
 8007b10:	189b      	adds	r3, r3, r2
 8007b12:	19db      	adds	r3, r3, r7
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b08      	cmp	r3, #8
 8007b18:	d015      	beq.n	8007b46 <UART_SetConfig+0x206>
 8007b1a:	dc18      	bgt.n	8007b4e <UART_SetConfig+0x20e>
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d00d      	beq.n	8007b3c <UART_SetConfig+0x1fc>
 8007b20:	dc15      	bgt.n	8007b4e <UART_SetConfig+0x20e>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <UART_SetConfig+0x1ec>
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d005      	beq.n	8007b36 <UART_SetConfig+0x1f6>
 8007b2a:	e010      	b.n	8007b4e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b2c:	f7ff f980 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8007b30:	0003      	movs	r3, r0
 8007b32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b34:	e014      	b.n	8007b60 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b36:	4b5a      	ldr	r3, [pc, #360]	; (8007ca0 <UART_SetConfig+0x360>)
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b3a:	e011      	b.n	8007b60 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b3c:	f7ff f8ec 	bl	8006d18 <HAL_RCC_GetSysClockFreq>
 8007b40:	0003      	movs	r3, r0
 8007b42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b44:	e00c      	b.n	8007b60 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b46:	2380      	movs	r3, #128	; 0x80
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b4c:	e008      	b.n	8007b60 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007b52:	231a      	movs	r3, #26
 8007b54:	2220      	movs	r2, #32
 8007b56:	189b      	adds	r3, r3, r2
 8007b58:	19db      	adds	r3, r3, r7
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	701a      	strb	r2, [r3, #0]
        break;
 8007b5e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d100      	bne.n	8007b68 <UART_SetConfig+0x228>
 8007b66:	e147      	b.n	8007df8 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b6c:	4b4d      	ldr	r3, [pc, #308]	; (8007ca4 <UART_SetConfig+0x364>)
 8007b6e:	0052      	lsls	r2, r2, #1
 8007b70:	5ad3      	ldrh	r3, [r2, r3]
 8007b72:	0019      	movs	r1, r3
 8007b74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b76:	f7f8 fae1 	bl	800013c <__udivsi3>
 8007b7a:	0003      	movs	r3, r0
 8007b7c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	0013      	movs	r3, r2
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	189b      	adds	r3, r3, r2
 8007b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d305      	bcc.n	8007b9a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d906      	bls.n	8007ba8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8007b9a:	231a      	movs	r3, #26
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	189b      	adds	r3, r3, r2
 8007ba0:	19db      	adds	r3, r3, r7
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e127      	b.n	8007df8 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007baa:	61bb      	str	r3, [r7, #24]
 8007bac:	2300      	movs	r3, #0
 8007bae:	61fb      	str	r3, [r7, #28]
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bb4:	4b3b      	ldr	r3, [pc, #236]	; (8007ca4 <UART_SetConfig+0x364>)
 8007bb6:	0052      	lsls	r2, r2, #1
 8007bb8:	5ad3      	ldrh	r3, [r2, r3]
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	69b8      	ldr	r0, [r7, #24]
 8007bc6:	69f9      	ldr	r1, [r7, #28]
 8007bc8:	f7f8 fca6 	bl	8000518 <__aeabi_uldivmod>
 8007bcc:	0002      	movs	r2, r0
 8007bce:	000b      	movs	r3, r1
 8007bd0:	0e11      	lsrs	r1, r2, #24
 8007bd2:	021d      	lsls	r5, r3, #8
 8007bd4:	430d      	orrs	r5, r1
 8007bd6:	0214      	lsls	r4, r2, #8
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	60bb      	str	r3, [r7, #8]
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	68b8      	ldr	r0, [r7, #8]
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	1900      	adds	r0, r0, r4
 8007bea:	4169      	adcs	r1, r5
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	607b      	str	r3, [r7, #4]
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f7f8 fc8d 	bl	8000518 <__aeabi_uldivmod>
 8007bfe:	0002      	movs	r2, r0
 8007c00:	000b      	movs	r3, r1
 8007c02:	0013      	movs	r3, r2
 8007c04:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c08:	23c0      	movs	r3, #192	; 0xc0
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d309      	bcc.n	8007c24 <UART_SetConfig+0x2e4>
 8007c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c12:	2380      	movs	r3, #128	; 0x80
 8007c14:	035b      	lsls	r3, r3, #13
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d204      	bcs.n	8007c24 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c20:	60da      	str	r2, [r3, #12]
 8007c22:	e0e9      	b.n	8007df8 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8007c24:	231a      	movs	r3, #26
 8007c26:	2220      	movs	r2, #32
 8007c28:	189b      	adds	r3, r3, r2
 8007c2a:	19db      	adds	r3, r3, r7
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e0e2      	b.n	8007df8 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	69da      	ldr	r2, [r3, #28]
 8007c36:	2380      	movs	r3, #128	; 0x80
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d000      	beq.n	8007c40 <UART_SetConfig+0x300>
 8007c3e:	e083      	b.n	8007d48 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007c40:	231b      	movs	r3, #27
 8007c42:	2220      	movs	r2, #32
 8007c44:	189b      	adds	r3, r3, r2
 8007c46:	19db      	adds	r3, r3, r7
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b08      	cmp	r3, #8
 8007c4c:	d015      	beq.n	8007c7a <UART_SetConfig+0x33a>
 8007c4e:	dc2b      	bgt.n	8007ca8 <UART_SetConfig+0x368>
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d00d      	beq.n	8007c70 <UART_SetConfig+0x330>
 8007c54:	dc28      	bgt.n	8007ca8 <UART_SetConfig+0x368>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <UART_SetConfig+0x320>
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d005      	beq.n	8007c6a <UART_SetConfig+0x32a>
 8007c5e:	e023      	b.n	8007ca8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c60:	f7ff f8e6 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8007c64:	0003      	movs	r3, r0
 8007c66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c68:	e027      	b.n	8007cba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <UART_SetConfig+0x360>)
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c6e:	e024      	b.n	8007cba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c70:	f7ff f852 	bl	8006d18 <HAL_RCC_GetSysClockFreq>
 8007c74:	0003      	movs	r3, r0
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c78:	e01f      	b.n	8007cba <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c7a:	2380      	movs	r3, #128	; 0x80
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c80:	e01b      	b.n	8007cba <UART_SetConfig+0x37a>
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	cfff69f3 	.word	0xcfff69f3
 8007c88:	ffffcfff 	.word	0xffffcfff
 8007c8c:	40008000 	.word	0x40008000
 8007c90:	11fff4ff 	.word	0x11fff4ff
 8007c94:	40013800 	.word	0x40013800
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	40004400 	.word	0x40004400
 8007ca0:	00f42400 	.word	0x00f42400
 8007ca4:	0800d53c 	.word	0x0800d53c
      default:
        pclk = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007cac:	231a      	movs	r3, #26
 8007cae:	2220      	movs	r2, #32
 8007cb0:	189b      	adds	r3, r3, r2
 8007cb2:	19db      	adds	r3, r3, r7
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	701a      	strb	r2, [r3, #0]
        break;
 8007cb8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d100      	bne.n	8007cc2 <UART_SetConfig+0x382>
 8007cc0:	e09a      	b.n	8007df8 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cc6:	4b58      	ldr	r3, [pc, #352]	; (8007e28 <UART_SetConfig+0x4e8>)
 8007cc8:	0052      	lsls	r2, r2, #1
 8007cca:	5ad3      	ldrh	r3, [r2, r3]
 8007ccc:	0019      	movs	r1, r3
 8007cce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007cd0:	f7f8 fa34 	bl	800013c <__udivsi3>
 8007cd4:	0003      	movs	r3, r0
 8007cd6:	005a      	lsls	r2, r3, #1
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	085b      	lsrs	r3, r3, #1
 8007cde:	18d2      	adds	r2, r2, r3
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	0019      	movs	r1, r3
 8007ce6:	0010      	movs	r0, r2
 8007ce8:	f7f8 fa28 	bl	800013c <__udivsi3>
 8007cec:	0003      	movs	r3, r0
 8007cee:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	2b0f      	cmp	r3, #15
 8007cf4:	d921      	bls.n	8007d3a <UART_SetConfig+0x3fa>
 8007cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	025b      	lsls	r3, r3, #9
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d21c      	bcs.n	8007d3a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	200e      	movs	r0, #14
 8007d06:	2420      	movs	r4, #32
 8007d08:	1903      	adds	r3, r0, r4
 8007d0a:	19db      	adds	r3, r3, r7
 8007d0c:	210f      	movs	r1, #15
 8007d0e:	438a      	bics	r2, r1
 8007d10:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	085b      	lsrs	r3, r3, #1
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2207      	movs	r2, #7
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	b299      	uxth	r1, r3
 8007d1e:	1903      	adds	r3, r0, r4
 8007d20:	19db      	adds	r3, r3, r7
 8007d22:	1902      	adds	r2, r0, r4
 8007d24:	19d2      	adds	r2, r2, r7
 8007d26:	8812      	ldrh	r2, [r2, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	1902      	adds	r2, r0, r4
 8007d32:	19d2      	adds	r2, r2, r7
 8007d34:	8812      	ldrh	r2, [r2, #0]
 8007d36:	60da      	str	r2, [r3, #12]
 8007d38:	e05e      	b.n	8007df8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007d3a:	231a      	movs	r3, #26
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	189b      	adds	r3, r3, r2
 8007d40:	19db      	adds	r3, r3, r7
 8007d42:	2201      	movs	r2, #1
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	e057      	b.n	8007df8 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d48:	231b      	movs	r3, #27
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	189b      	adds	r3, r3, r2
 8007d4e:	19db      	adds	r3, r3, r7
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b08      	cmp	r3, #8
 8007d54:	d015      	beq.n	8007d82 <UART_SetConfig+0x442>
 8007d56:	dc18      	bgt.n	8007d8a <UART_SetConfig+0x44a>
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d00d      	beq.n	8007d78 <UART_SetConfig+0x438>
 8007d5c:	dc15      	bgt.n	8007d8a <UART_SetConfig+0x44a>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <UART_SetConfig+0x428>
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d005      	beq.n	8007d72 <UART_SetConfig+0x432>
 8007d66:	e010      	b.n	8007d8a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d68:	f7ff f862 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8007d6c:	0003      	movs	r3, r0
 8007d6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d70:	e014      	b.n	8007d9c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d72:	4b2e      	ldr	r3, [pc, #184]	; (8007e2c <UART_SetConfig+0x4ec>)
 8007d74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d76:	e011      	b.n	8007d9c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d78:	f7fe ffce 	bl	8006d18 <HAL_RCC_GetSysClockFreq>
 8007d7c:	0003      	movs	r3, r0
 8007d7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d80:	e00c      	b.n	8007d9c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d82:	2380      	movs	r3, #128	; 0x80
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d88:	e008      	b.n	8007d9c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007d8e:	231a      	movs	r3, #26
 8007d90:	2220      	movs	r2, #32
 8007d92:	189b      	adds	r3, r3, r2
 8007d94:	19db      	adds	r3, r3, r7
 8007d96:	2201      	movs	r2, #1
 8007d98:	701a      	strb	r2, [r3, #0]
        break;
 8007d9a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d02a      	beq.n	8007df8 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007da6:	4b20      	ldr	r3, [pc, #128]	; (8007e28 <UART_SetConfig+0x4e8>)
 8007da8:	0052      	lsls	r2, r2, #1
 8007daa:	5ad3      	ldrh	r3, [r2, r3]
 8007dac:	0019      	movs	r1, r3
 8007dae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007db0:	f7f8 f9c4 	bl	800013c <__udivsi3>
 8007db4:	0003      	movs	r3, r0
 8007db6:	001a      	movs	r2, r3
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	085b      	lsrs	r3, r3, #1
 8007dbe:	18d2      	adds	r2, r2, r3
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	0019      	movs	r1, r3
 8007dc6:	0010      	movs	r0, r2
 8007dc8:	f7f8 f9b8 	bl	800013c <__udivsi3>
 8007dcc:	0003      	movs	r3, r0
 8007dce:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	2b0f      	cmp	r3, #15
 8007dd4:	d90a      	bls.n	8007dec <UART_SetConfig+0x4ac>
 8007dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd8:	2380      	movs	r3, #128	; 0x80
 8007dda:	025b      	lsls	r3, r3, #9
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d205      	bcs.n	8007dec <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60da      	str	r2, [r3, #12]
 8007dea:	e005      	b.n	8007df8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007dec:	231a      	movs	r3, #26
 8007dee:	2220      	movs	r2, #32
 8007df0:	189b      	adds	r3, r3, r2
 8007df2:	19db      	adds	r3, r3, r7
 8007df4:	2201      	movs	r2, #1
 8007df6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	226a      	movs	r2, #106	; 0x6a
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	2268      	movs	r2, #104	; 0x68
 8007e04:	2101      	movs	r1, #1
 8007e06:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	2200      	movs	r2, #0
 8007e12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007e14:	231a      	movs	r3, #26
 8007e16:	2220      	movs	r2, #32
 8007e18:	189b      	adds	r3, r3, r2
 8007e1a:	19db      	adds	r3, r3, r7
 8007e1c:	781b      	ldrb	r3, [r3, #0]
}
 8007e1e:	0018      	movs	r0, r3
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b010      	add	sp, #64	; 0x40
 8007e24:	bdb0      	pop	{r4, r5, r7, pc}
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	0800d53c 	.word	0x0800d53c
 8007e2c:	00f42400 	.word	0x00f42400

08007e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	4013      	ands	r3, r2
 8007e40:	d00b      	beq.n	8007e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	4a4a      	ldr	r2, [pc, #296]	; (8007f74 <UART_AdvFeatureConfig+0x144>)
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	0019      	movs	r1, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5e:	2202      	movs	r2, #2
 8007e60:	4013      	ands	r3, r2
 8007e62:	d00b      	beq.n	8007e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	4a43      	ldr	r2, [pc, #268]	; (8007f78 <UART_AdvFeatureConfig+0x148>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	0019      	movs	r1, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e80:	2204      	movs	r2, #4
 8007e82:	4013      	ands	r3, r2
 8007e84:	d00b      	beq.n	8007e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4a3b      	ldr	r2, [pc, #236]	; (8007f7c <UART_AdvFeatureConfig+0x14c>)
 8007e8e:	4013      	ands	r3, r2
 8007e90:	0019      	movs	r1, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea2:	2208      	movs	r2, #8
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	d00b      	beq.n	8007ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	4a34      	ldr	r2, [pc, #208]	; (8007f80 <UART_AdvFeatureConfig+0x150>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	0019      	movs	r1, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec4:	2210      	movs	r2, #16
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	d00b      	beq.n	8007ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	4a2c      	ldr	r2, [pc, #176]	; (8007f84 <UART_AdvFeatureConfig+0x154>)
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	0019      	movs	r1, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	4013      	ands	r3, r2
 8007eea:	d00b      	beq.n	8007f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	4a25      	ldr	r2, [pc, #148]	; (8007f88 <UART_AdvFeatureConfig+0x158>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	0019      	movs	r1, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f08:	2240      	movs	r2, #64	; 0x40
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	d01d      	beq.n	8007f4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	4a1d      	ldr	r2, [pc, #116]	; (8007f8c <UART_AdvFeatureConfig+0x15c>)
 8007f16:	4013      	ands	r3, r2
 8007f18:	0019      	movs	r1, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f2a:	2380      	movs	r3, #128	; 0x80
 8007f2c:	035b      	lsls	r3, r3, #13
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d10b      	bne.n	8007f4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	4a15      	ldr	r2, [pc, #84]	; (8007f90 <UART_AdvFeatureConfig+0x160>)
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	0019      	movs	r1, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	2280      	movs	r2, #128	; 0x80
 8007f50:	4013      	ands	r3, r2
 8007f52:	d00b      	beq.n	8007f6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	4a0e      	ldr	r2, [pc, #56]	; (8007f94 <UART_AdvFeatureConfig+0x164>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	0019      	movs	r1, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	605a      	str	r2, [r3, #4]
  }
}
 8007f6c:	46c0      	nop			; (mov r8, r8)
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	b002      	add	sp, #8
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	fffdffff 	.word	0xfffdffff
 8007f78:	fffeffff 	.word	0xfffeffff
 8007f7c:	fffbffff 	.word	0xfffbffff
 8007f80:	ffff7fff 	.word	0xffff7fff
 8007f84:	ffffefff 	.word	0xffffefff
 8007f88:	ffffdfff 	.word	0xffffdfff
 8007f8c:	ffefffff 	.word	0xffefffff
 8007f90:	ff9fffff 	.word	0xff9fffff
 8007f94:	fff7ffff 	.word	0xfff7ffff

08007f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2290      	movs	r2, #144	; 0x90
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fa8:	f7fc fd5e 	bl	8004a68 <HAL_GetTick>
 8007fac:	0003      	movs	r3, r0
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	4013      	ands	r3, r2
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d10c      	bne.n	8007fd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2280      	movs	r2, #128	; 0x80
 8007fc2:	0391      	lsls	r1, r2, #14
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	4a1a      	ldr	r2, [pc, #104]	; (8008030 <UART_CheckIdleState+0x98>)
 8007fc8:	9200      	str	r2, [sp, #0]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f000 f832 	bl	8008034 <UART_WaitOnFlagUntilTimeout>
 8007fd0:	1e03      	subs	r3, r0, #0
 8007fd2:	d001      	beq.n	8007fd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e026      	b.n	8008026 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2204      	movs	r2, #4
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d10c      	bne.n	8008000 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2280      	movs	r2, #128	; 0x80
 8007fea:	03d1      	lsls	r1, r2, #15
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	4a10      	ldr	r2, [pc, #64]	; (8008030 <UART_CheckIdleState+0x98>)
 8007ff0:	9200      	str	r2, [sp, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f000 f81e 	bl	8008034 <UART_WaitOnFlagUntilTimeout>
 8007ff8:	1e03      	subs	r3, r0, #0
 8007ffa:	d001      	beq.n	8008000 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e012      	b.n	8008026 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2288      	movs	r2, #136	; 0x88
 8008004:	2120      	movs	r1, #32
 8008006:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	228c      	movs	r2, #140	; 0x8c
 800800c:	2120      	movs	r1, #32
 800800e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2284      	movs	r2, #132	; 0x84
 8008020:	2100      	movs	r1, #0
 8008022:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	0018      	movs	r0, r3
 8008028:	46bd      	mov	sp, r7
 800802a:	b004      	add	sp, #16
 800802c:	bd80      	pop	{r7, pc}
 800802e:	46c0      	nop			; (mov r8, r8)
 8008030:	01ffffff 	.word	0x01ffffff

08008034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b094      	sub	sp, #80	; 0x50
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	603b      	str	r3, [r7, #0]
 8008040:	1dfb      	adds	r3, r7, #7
 8008042:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008044:	e0a7      	b.n	8008196 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008048:	3301      	adds	r3, #1
 800804a:	d100      	bne.n	800804e <UART_WaitOnFlagUntilTimeout+0x1a>
 800804c:	e0a3      	b.n	8008196 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800804e:	f7fc fd0b 	bl	8004a68 <HAL_GetTick>
 8008052:	0002      	movs	r2, r0
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800805a:	429a      	cmp	r2, r3
 800805c:	d302      	bcc.n	8008064 <UART_WaitOnFlagUntilTimeout+0x30>
 800805e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008060:	2b00      	cmp	r3, #0
 8008062:	d13f      	bne.n	80080e4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008064:	f3ef 8310 	mrs	r3, PRIMASK
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800806c:	647b      	str	r3, [r7, #68]	; 0x44
 800806e:	2301      	movs	r3, #1
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	f383 8810 	msr	PRIMASK, r3
}
 8008078:	46c0      	nop			; (mov r8, r8)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	494e      	ldr	r1, [pc, #312]	; (80081c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008086:	400a      	ands	r2, r1
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800808c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	f383 8810 	msr	PRIMASK, r3
}
 8008094:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008096:	f3ef 8310 	mrs	r3, PRIMASK
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800809c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809e:	643b      	str	r3, [r7, #64]	; 0x40
 80080a0:	2301      	movs	r3, #1
 80080a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	f383 8810 	msr	PRIMASK, r3
}
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2101      	movs	r1, #1
 80080b8:	438a      	bics	r2, r1
 80080ba:	609a      	str	r2, [r3, #8]
 80080bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c2:	f383 8810 	msr	PRIMASK, r3
}
 80080c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2288      	movs	r2, #136	; 0x88
 80080cc:	2120      	movs	r1, #32
 80080ce:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	228c      	movs	r2, #140	; 0x8c
 80080d4:	2120      	movs	r1, #32
 80080d6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2284      	movs	r2, #132	; 0x84
 80080dc:	2100      	movs	r1, #0
 80080de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e069      	b.n	80081b8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2204      	movs	r2, #4
 80080ec:	4013      	ands	r3, r2
 80080ee:	d052      	beq.n	8008196 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69da      	ldr	r2, [r3, #28]
 80080f6:	2380      	movs	r3, #128	; 0x80
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	401a      	ands	r2, r3
 80080fc:	2380      	movs	r3, #128	; 0x80
 80080fe:	011b      	lsls	r3, r3, #4
 8008100:	429a      	cmp	r2, r3
 8008102:	d148      	bne.n	8008196 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2280      	movs	r2, #128	; 0x80
 800810a:	0112      	lsls	r2, r2, #4
 800810c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800810e:	f3ef 8310 	mrs	r3, PRIMASK
 8008112:	613b      	str	r3, [r7, #16]
  return(result);
 8008114:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008118:	2301      	movs	r3, #1
 800811a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f383 8810 	msr	PRIMASK, r3
}
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4924      	ldr	r1, [pc, #144]	; (80081c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008130:	400a      	ands	r2, r1
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008136:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	f383 8810 	msr	PRIMASK, r3
}
 800813e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008140:	f3ef 8310 	mrs	r3, PRIMASK
 8008144:	61fb      	str	r3, [r7, #28]
  return(result);
 8008146:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008148:	64bb      	str	r3, [r7, #72]	; 0x48
 800814a:	2301      	movs	r3, #1
 800814c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	f383 8810 	msr	PRIMASK, r3
}
 8008154:	46c0      	nop			; (mov r8, r8)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2101      	movs	r1, #1
 8008162:	438a      	bics	r2, r1
 8008164:	609a      	str	r2, [r3, #8]
 8008166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	f383 8810 	msr	PRIMASK, r3
}
 8008170:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2288      	movs	r2, #136	; 0x88
 8008176:	2120      	movs	r1, #32
 8008178:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	228c      	movs	r2, #140	; 0x8c
 800817e:	2120      	movs	r1, #32
 8008180:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2290      	movs	r2, #144	; 0x90
 8008186:	2120      	movs	r1, #32
 8008188:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2284      	movs	r2, #132	; 0x84
 800818e:	2100      	movs	r1, #0
 8008190:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e010      	b.n	80081b8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	4013      	ands	r3, r2
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	425a      	negs	r2, r3
 80081a6:	4153      	adcs	r3, r2
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	001a      	movs	r2, r3
 80081ac:	1dfb      	adds	r3, r7, #7
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d100      	bne.n	80081b6 <UART_WaitOnFlagUntilTimeout+0x182>
 80081b4:	e747      	b.n	8008046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	0018      	movs	r0, r3
 80081ba:	46bd      	mov	sp, r7
 80081bc:	b014      	add	sp, #80	; 0x50
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	fffffe5f 	.word	0xfffffe5f

080081c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b090      	sub	sp, #64	; 0x40
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	1dbb      	adds	r3, r7, #6
 80081d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	1dba      	adds	r2, r7, #6
 80081dc:	215c      	movs	r1, #92	; 0x5c
 80081de:	8812      	ldrh	r2, [r2, #0]
 80081e0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2290      	movs	r2, #144	; 0x90
 80081e6:	2100      	movs	r1, #0
 80081e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	228c      	movs	r2, #140	; 0x8c
 80081ee:	2122      	movs	r1, #34	; 0x22
 80081f0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2280      	movs	r2, #128	; 0x80
 80081f6:	589b      	ldr	r3, [r3, r2]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d02d      	beq.n	8008258 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2280      	movs	r2, #128	; 0x80
 8008200:	589b      	ldr	r3, [r3, r2]
 8008202:	4a40      	ldr	r2, [pc, #256]	; (8008304 <UART_Start_Receive_DMA+0x140>)
 8008204:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2280      	movs	r2, #128	; 0x80
 800820a:	589b      	ldr	r3, [r3, r2]
 800820c:	4a3e      	ldr	r2, [pc, #248]	; (8008308 <UART_Start_Receive_DMA+0x144>)
 800820e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2280      	movs	r2, #128	; 0x80
 8008214:	589b      	ldr	r3, [r3, r2]
 8008216:	4a3d      	ldr	r2, [pc, #244]	; (800830c <UART_Start_Receive_DMA+0x148>)
 8008218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2280      	movs	r2, #128	; 0x80
 800821e:	589b      	ldr	r3, [r3, r2]
 8008220:	2200      	movs	r2, #0
 8008222:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2280      	movs	r2, #128	; 0x80
 8008228:	5898      	ldr	r0, [r3, r2]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3324      	adds	r3, #36	; 0x24
 8008230:	0019      	movs	r1, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008236:	001a      	movs	r2, r3
 8008238:	1dbb      	adds	r3, r7, #6
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	f7fd fc2c 	bl	8005a98 <HAL_DMA_Start_IT>
 8008240:	1e03      	subs	r3, r0, #0
 8008242:	d009      	beq.n	8008258 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2290      	movs	r2, #144	; 0x90
 8008248:	2110      	movs	r1, #16
 800824a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	228c      	movs	r2, #140	; 0x8c
 8008250:	2120      	movs	r1, #32
 8008252:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e050      	b.n	80082fa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d019      	beq.n	8008294 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008260:	f3ef 8310 	mrs	r3, PRIMASK
 8008264:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800826a:	2301      	movs	r3, #1
 800826c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008270:	f383 8810 	msr	PRIMASK, r3
}
 8008274:	46c0      	nop			; (mov r8, r8)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2180      	movs	r1, #128	; 0x80
 8008282:	0049      	lsls	r1, r1, #1
 8008284:	430a      	orrs	r2, r1
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	f383 8810 	msr	PRIMASK, r3
}
 8008292:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008294:	f3ef 8310 	mrs	r3, PRIMASK
 8008298:	613b      	str	r3, [r7, #16]
  return(result);
 800829a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829c:	63bb      	str	r3, [r7, #56]	; 0x38
 800829e:	2301      	movs	r3, #1
 80082a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f383 8810 	msr	PRIMASK, r3
}
 80082a8:	46c0      	nop			; (mov r8, r8)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2101      	movs	r1, #1
 80082b6:	430a      	orrs	r2, r1
 80082b8:	609a      	str	r2, [r3, #8]
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	f383 8810 	msr	PRIMASK, r3
}
 80082c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c6:	f3ef 8310 	mrs	r3, PRIMASK
 80082ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80082cc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34
 80082d0:	2301      	movs	r3, #1
 80082d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	f383 8810 	msr	PRIMASK, r3
}
 80082da:	46c0      	nop			; (mov r8, r8)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689a      	ldr	r2, [r3, #8]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2140      	movs	r1, #64	; 0x40
 80082e8:	430a      	orrs	r2, r1
 80082ea:	609a      	str	r2, [r3, #8]
 80082ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	f383 8810 	msr	PRIMASK, r3
}
 80082f6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	0018      	movs	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	b010      	add	sp, #64	; 0x40
 8008300:	bd80      	pop	{r7, pc}
 8008302:	46c0      	nop			; (mov r8, r8)
 8008304:	0800845d 	.word	0x0800845d
 8008308:	0800858d 	.word	0x0800858d
 800830c:	080085cf 	.word	0x080085cf

08008310 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08a      	sub	sp, #40	; 0x28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008318:	f3ef 8310 	mrs	r3, PRIMASK
 800831c:	60bb      	str	r3, [r7, #8]
  return(result);
 800831e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008320:	627b      	str	r3, [r7, #36]	; 0x24
 8008322:	2301      	movs	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f383 8810 	msr	PRIMASK, r3
}
 800832c:	46c0      	nop			; (mov r8, r8)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	21c0      	movs	r1, #192	; 0xc0
 800833a:	438a      	bics	r2, r1
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f383 8810 	msr	PRIMASK, r3
}
 8008348:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800834a:	f3ef 8310 	mrs	r3, PRIMASK
 800834e:	617b      	str	r3, [r7, #20]
  return(result);
 8008350:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008352:	623b      	str	r3, [r7, #32]
 8008354:	2301      	movs	r3, #1
 8008356:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	f383 8810 	msr	PRIMASK, r3
}
 800835e:	46c0      	nop			; (mov r8, r8)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4908      	ldr	r1, [pc, #32]	; (800838c <UART_EndTxTransfer+0x7c>)
 800836c:	400a      	ands	r2, r1
 800836e:	609a      	str	r2, [r3, #8]
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f383 8810 	msr	PRIMASK, r3
}
 800837a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2288      	movs	r2, #136	; 0x88
 8008380:	2120      	movs	r1, #32
 8008382:	5099      	str	r1, [r3, r2]
}
 8008384:	46c0      	nop			; (mov r8, r8)
 8008386:	46bd      	mov	sp, r7
 8008388:	b00a      	add	sp, #40	; 0x28
 800838a:	bd80      	pop	{r7, pc}
 800838c:	ff7fffff 	.word	0xff7fffff

08008390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08e      	sub	sp, #56	; 0x38
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008398:	f3ef 8310 	mrs	r3, PRIMASK
 800839c:	617b      	str	r3, [r7, #20]
  return(result);
 800839e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083a0:	637b      	str	r3, [r7, #52]	; 0x34
 80083a2:	2301      	movs	r3, #1
 80083a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	f383 8810 	msr	PRIMASK, r3
}
 80083ac:	46c0      	nop			; (mov r8, r8)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4926      	ldr	r1, [pc, #152]	; (8008454 <UART_EndRxTransfer+0xc4>)
 80083ba:	400a      	ands	r2, r1
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	f383 8810 	msr	PRIMASK, r3
}
 80083c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ca:	f3ef 8310 	mrs	r3, PRIMASK
 80083ce:	623b      	str	r3, [r7, #32]
  return(result);
 80083d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083d2:	633b      	str	r3, [r7, #48]	; 0x30
 80083d4:	2301      	movs	r3, #1
 80083d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	f383 8810 	msr	PRIMASK, r3
}
 80083de:	46c0      	nop			; (mov r8, r8)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689a      	ldr	r2, [r3, #8]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	491b      	ldr	r1, [pc, #108]	; (8008458 <UART_EndRxTransfer+0xc8>)
 80083ec:	400a      	ands	r2, r1
 80083ee:	609a      	str	r2, [r3, #8]
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	f383 8810 	msr	PRIMASK, r3
}
 80083fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008400:	2b01      	cmp	r3, #1
 8008402:	d118      	bne.n	8008436 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008404:	f3ef 8310 	mrs	r3, PRIMASK
 8008408:	60bb      	str	r3, [r7, #8]
  return(result);
 800840a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800840c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800840e:	2301      	movs	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f383 8810 	msr	PRIMASK, r3
}
 8008418:	46c0      	nop			; (mov r8, r8)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2110      	movs	r1, #16
 8008426:	438a      	bics	r2, r1
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f383 8810 	msr	PRIMASK, r3
}
 8008434:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	228c      	movs	r2, #140	; 0x8c
 800843a:	2120      	movs	r1, #32
 800843c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	675a      	str	r2, [r3, #116]	; 0x74
}
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	46bd      	mov	sp, r7
 800844e:	b00e      	add	sp, #56	; 0x38
 8008450:	bd80      	pop	{r7, pc}
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	fffffedf 	.word	0xfffffedf
 8008458:	effffffe 	.word	0xeffffffe

0800845c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b094      	sub	sp, #80	; 0x50
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2220      	movs	r2, #32
 8008472:	4013      	ands	r3, r2
 8008474:	d16f      	bne.n	8008556 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008478:	225e      	movs	r2, #94	; 0x5e
 800847a:	2100      	movs	r1, #0
 800847c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800847e:	f3ef 8310 	mrs	r3, PRIMASK
 8008482:	61bb      	str	r3, [r7, #24]
  return(result);
 8008484:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008486:	64bb      	str	r3, [r7, #72]	; 0x48
 8008488:	2301      	movs	r3, #1
 800848a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f383 8810 	msr	PRIMASK, r3
}
 8008492:	46c0      	nop			; (mov r8, r8)
 8008494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	493a      	ldr	r1, [pc, #232]	; (8008588 <UART_DMAReceiveCplt+0x12c>)
 80084a0:	400a      	ands	r2, r1
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	f383 8810 	msr	PRIMASK, r3
}
 80084ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084b0:	f3ef 8310 	mrs	r3, PRIMASK
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b8:	647b      	str	r3, [r7, #68]	; 0x44
 80084ba:	2301      	movs	r3, #1
 80084bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	f383 8810 	msr	PRIMASK, r3
}
 80084c4:	46c0      	nop			; (mov r8, r8)
 80084c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2101      	movs	r1, #1
 80084d2:	438a      	bics	r2, r1
 80084d4:	609a      	str	r2, [r3, #8]
 80084d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	f383 8810 	msr	PRIMASK, r3
}
 80084e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084e2:	f3ef 8310 	mrs	r3, PRIMASK
 80084e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ea:	643b      	str	r3, [r7, #64]	; 0x40
 80084ec:	2301      	movs	r3, #1
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f2:	f383 8810 	msr	PRIMASK, r3
}
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2140      	movs	r1, #64	; 0x40
 8008504:	438a      	bics	r2, r1
 8008506:	609a      	str	r2, [r3, #8]
 8008508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800850a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	f383 8810 	msr	PRIMASK, r3
}
 8008512:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008516:	228c      	movs	r2, #140	; 0x8c
 8008518:	2120      	movs	r1, #32
 800851a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800851c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800851e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008520:	2b01      	cmp	r3, #1
 8008522:	d118      	bne.n	8008556 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008524:	f3ef 8310 	mrs	r3, PRIMASK
 8008528:	60fb      	str	r3, [r7, #12]
  return(result);
 800852a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800852c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800852e:	2301      	movs	r3, #1
 8008530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f383 8810 	msr	PRIMASK, r3
}
 8008538:	46c0      	nop			; (mov r8, r8)
 800853a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2110      	movs	r1, #16
 8008546:	438a      	bics	r2, r1
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f383 8810 	msr	PRIMASK, r3
}
 8008554:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008558:	2200      	movs	r2, #0
 800855a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800855e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d108      	bne.n	8008576 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008566:	225c      	movs	r2, #92	; 0x5c
 8008568:	5a9a      	ldrh	r2, [r3, r2]
 800856a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856c:	0011      	movs	r1, r2
 800856e:	0018      	movs	r0, r3
 8008570:	f7ff f9da 	bl	8007928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008574:	e003      	b.n	800857e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8008576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008578:	0018      	movs	r0, r3
 800857a:	f7fb f85f 	bl	800363c <HAL_UART_RxCpltCallback>
}
 800857e:	46c0      	nop			; (mov r8, r8)
 8008580:	46bd      	mov	sp, r7
 8008582:	b014      	add	sp, #80	; 0x50
 8008584:	bd80      	pop	{r7, pc}
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	fffffeff 	.word	0xfffffeff

0800858c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008598:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2201      	movs	r2, #1
 800859e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d10a      	bne.n	80085be <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	225c      	movs	r2, #92	; 0x5c
 80085ac:	5a9b      	ldrh	r3, [r3, r2]
 80085ae:	085b      	lsrs	r3, r3, #1
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	0011      	movs	r1, r2
 80085b6:	0018      	movs	r0, r3
 80085b8:	f7ff f9b6 	bl	8007928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085bc:	e003      	b.n	80085c6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	0018      	movs	r0, r3
 80085c2:	f7ff f9a1 	bl	8007908 <HAL_UART_RxHalfCpltCallback>
}
 80085c6:	46c0      	nop			; (mov r8, r8)
 80085c8:	46bd      	mov	sp, r7
 80085ca:	b004      	add	sp, #16
 80085cc:	bd80      	pop	{r7, pc}

080085ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b086      	sub	sp, #24
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2288      	movs	r2, #136	; 0x88
 80085e0:	589b      	ldr	r3, [r3, r2]
 80085e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	228c      	movs	r2, #140	; 0x8c
 80085e8:	589b      	ldr	r3, [r3, r2]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	2280      	movs	r2, #128	; 0x80
 80085f4:	4013      	ands	r3, r2
 80085f6:	2b80      	cmp	r3, #128	; 0x80
 80085f8:	d10a      	bne.n	8008610 <UART_DMAError+0x42>
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	2b21      	cmp	r3, #33	; 0x21
 80085fe:	d107      	bne.n	8008610 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2256      	movs	r2, #86	; 0x56
 8008604:	2100      	movs	r1, #0
 8008606:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	0018      	movs	r0, r3
 800860c:	f7ff fe80 	bl	8008310 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	2240      	movs	r2, #64	; 0x40
 8008618:	4013      	ands	r3, r2
 800861a:	2b40      	cmp	r3, #64	; 0x40
 800861c:	d10a      	bne.n	8008634 <UART_DMAError+0x66>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b22      	cmp	r3, #34	; 0x22
 8008622:	d107      	bne.n	8008634 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	225e      	movs	r2, #94	; 0x5e
 8008628:	2100      	movs	r1, #0
 800862a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	0018      	movs	r0, r3
 8008630:	f7ff feae 	bl	8008390 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2290      	movs	r2, #144	; 0x90
 8008638:	589b      	ldr	r3, [r3, r2]
 800863a:	2210      	movs	r2, #16
 800863c:	431a      	orrs	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2190      	movs	r1, #144	; 0x90
 8008642:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	0018      	movs	r0, r3
 8008648:	f7ff f966 	bl	8007918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800864c:	46c0      	nop			; (mov r8, r8)
 800864e:	46bd      	mov	sp, r7
 8008650:	b006      	add	sp, #24
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2284      	movs	r2, #132	; 0x84
 8008660:	5c9b      	ldrb	r3, [r3, r2]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d101      	bne.n	800866a <HAL_UARTEx_DisableFifoMode+0x16>
 8008666:	2302      	movs	r3, #2
 8008668:	e027      	b.n	80086ba <HAL_UARTEx_DisableFifoMode+0x66>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2284      	movs	r2, #132	; 0x84
 800866e:	2101      	movs	r1, #1
 8008670:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2288      	movs	r2, #136	; 0x88
 8008676:	2124      	movs	r1, #36	; 0x24
 8008678:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2101      	movs	r1, #1
 800868e:	438a      	bics	r2, r1
 8008690:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4a0b      	ldr	r2, [pc, #44]	; (80086c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008696:	4013      	ands	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2288      	movs	r2, #136	; 0x88
 80086ac:	2120      	movs	r1, #32
 80086ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2284      	movs	r2, #132	; 0x84
 80086b4:	2100      	movs	r1, #0
 80086b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	0018      	movs	r0, r3
 80086bc:	46bd      	mov	sp, r7
 80086be:	b004      	add	sp, #16
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	dfffffff 	.word	0xdfffffff

080086c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2284      	movs	r2, #132	; 0x84
 80086d6:	5c9b      	ldrb	r3, [r3, r2]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086dc:	2302      	movs	r3, #2
 80086de:	e02e      	b.n	800873e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2284      	movs	r2, #132	; 0x84
 80086e4:	2101      	movs	r1, #1
 80086e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2288      	movs	r2, #136	; 0x88
 80086ec:	2124      	movs	r1, #36	; 0x24
 80086ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2101      	movs	r1, #1
 8008704:	438a      	bics	r2, r1
 8008706:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	08d9      	lsrs	r1, r3, #3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	0018      	movs	r0, r3
 8008720:	f000 f854 	bl	80087cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2288      	movs	r2, #136	; 0x88
 8008730:	2120      	movs	r1, #32
 8008732:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2284      	movs	r2, #132	; 0x84
 8008738:	2100      	movs	r1, #0
 800873a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	0018      	movs	r0, r3
 8008740:	46bd      	mov	sp, r7
 8008742:	b004      	add	sp, #16
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2284      	movs	r2, #132	; 0x84
 8008756:	5c9b      	ldrb	r3, [r3, r2]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d101      	bne.n	8008760 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800875c:	2302      	movs	r3, #2
 800875e:	e02f      	b.n	80087c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2284      	movs	r2, #132	; 0x84
 8008764:	2101      	movs	r1, #1
 8008766:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2288      	movs	r2, #136	; 0x88
 800876c:	2124      	movs	r1, #36	; 0x24
 800876e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2101      	movs	r1, #1
 8008784:	438a      	bics	r2, r1
 8008786:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4a0e      	ldr	r2, [pc, #56]	; (80087c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008790:	4013      	ands	r3, r2
 8008792:	0019      	movs	r1, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	0018      	movs	r0, r3
 80087a2:	f000 f813 	bl	80087cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2288      	movs	r2, #136	; 0x88
 80087b2:	2120      	movs	r1, #32
 80087b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2284      	movs	r2, #132	; 0x84
 80087ba:	2100      	movs	r1, #0
 80087bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	0018      	movs	r0, r3
 80087c2:	46bd      	mov	sp, r7
 80087c4:	b004      	add	sp, #16
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	f1ffffff 	.word	0xf1ffffff

080087cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d108      	bne.n	80087ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	226a      	movs	r2, #106	; 0x6a
 80087e0:	2101      	movs	r1, #1
 80087e2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2268      	movs	r2, #104	; 0x68
 80087e8:	2101      	movs	r1, #1
 80087ea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087ec:	e043      	b.n	8008876 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ee:	260f      	movs	r6, #15
 80087f0:	19bb      	adds	r3, r7, r6
 80087f2:	2208      	movs	r2, #8
 80087f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087f6:	200e      	movs	r0, #14
 80087f8:	183b      	adds	r3, r7, r0
 80087fa:	2208      	movs	r2, #8
 80087fc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	0e5b      	lsrs	r3, r3, #25
 8008806:	b2da      	uxtb	r2, r3
 8008808:	240d      	movs	r4, #13
 800880a:	193b      	adds	r3, r7, r4
 800880c:	2107      	movs	r1, #7
 800880e:	400a      	ands	r2, r1
 8008810:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	0f5b      	lsrs	r3, r3, #29
 800881a:	b2da      	uxtb	r2, r3
 800881c:	250c      	movs	r5, #12
 800881e:	197b      	adds	r3, r7, r5
 8008820:	2107      	movs	r1, #7
 8008822:	400a      	ands	r2, r1
 8008824:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008826:	183b      	adds	r3, r7, r0
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	197a      	adds	r2, r7, r5
 800882c:	7812      	ldrb	r2, [r2, #0]
 800882e:	4914      	ldr	r1, [pc, #80]	; (8008880 <UARTEx_SetNbDataToProcess+0xb4>)
 8008830:	5c8a      	ldrb	r2, [r1, r2]
 8008832:	435a      	muls	r2, r3
 8008834:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008836:	197b      	adds	r3, r7, r5
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	4a12      	ldr	r2, [pc, #72]	; (8008884 <UARTEx_SetNbDataToProcess+0xb8>)
 800883c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800883e:	0019      	movs	r1, r3
 8008840:	f7f7 fd06 	bl	8000250 <__divsi3>
 8008844:	0003      	movs	r3, r0
 8008846:	b299      	uxth	r1, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	226a      	movs	r2, #106	; 0x6a
 800884c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800884e:	19bb      	adds	r3, r7, r6
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	193a      	adds	r2, r7, r4
 8008854:	7812      	ldrb	r2, [r2, #0]
 8008856:	490a      	ldr	r1, [pc, #40]	; (8008880 <UARTEx_SetNbDataToProcess+0xb4>)
 8008858:	5c8a      	ldrb	r2, [r1, r2]
 800885a:	435a      	muls	r2, r3
 800885c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800885e:	193b      	adds	r3, r7, r4
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	4a08      	ldr	r2, [pc, #32]	; (8008884 <UARTEx_SetNbDataToProcess+0xb8>)
 8008864:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008866:	0019      	movs	r1, r3
 8008868:	f7f7 fcf2 	bl	8000250 <__divsi3>
 800886c:	0003      	movs	r3, r0
 800886e:	b299      	uxth	r1, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2268      	movs	r2, #104	; 0x68
 8008874:	5299      	strh	r1, [r3, r2]
}
 8008876:	46c0      	nop			; (mov r8, r8)
 8008878:	46bd      	mov	sp, r7
 800887a:	b005      	add	sp, #20
 800887c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800887e:	46c0      	nop			; (mov r8, r8)
 8008880:	0800d554 	.word	0x0800d554
 8008884:	0800d55c 	.word	0x0800d55c

08008888 <atoi>:
 8008888:	b510      	push	{r4, lr}
 800888a:	220a      	movs	r2, #10
 800888c:	2100      	movs	r1, #0
 800888e:	f001 fe9b 	bl	800a5c8 <strtol>
 8008892:	bd10      	pop	{r4, pc}

08008894 <__errno>:
 8008894:	4b01      	ldr	r3, [pc, #4]	; (800889c <__errno+0x8>)
 8008896:	6818      	ldr	r0, [r3, #0]
 8008898:	4770      	bx	lr
 800889a:	46c0      	nop			; (mov r8, r8)
 800889c:	2000000c 	.word	0x2000000c

080088a0 <__libc_init_array>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	2600      	movs	r6, #0
 80088a4:	4d0c      	ldr	r5, [pc, #48]	; (80088d8 <__libc_init_array+0x38>)
 80088a6:	4c0d      	ldr	r4, [pc, #52]	; (80088dc <__libc_init_array+0x3c>)
 80088a8:	1b64      	subs	r4, r4, r5
 80088aa:	10a4      	asrs	r4, r4, #2
 80088ac:	42a6      	cmp	r6, r4
 80088ae:	d109      	bne.n	80088c4 <__libc_init_array+0x24>
 80088b0:	2600      	movs	r6, #0
 80088b2:	f004 fd53 	bl	800d35c <_init>
 80088b6:	4d0a      	ldr	r5, [pc, #40]	; (80088e0 <__libc_init_array+0x40>)
 80088b8:	4c0a      	ldr	r4, [pc, #40]	; (80088e4 <__libc_init_array+0x44>)
 80088ba:	1b64      	subs	r4, r4, r5
 80088bc:	10a4      	asrs	r4, r4, #2
 80088be:	42a6      	cmp	r6, r4
 80088c0:	d105      	bne.n	80088ce <__libc_init_array+0x2e>
 80088c2:	bd70      	pop	{r4, r5, r6, pc}
 80088c4:	00b3      	lsls	r3, r6, #2
 80088c6:	58eb      	ldr	r3, [r5, r3]
 80088c8:	4798      	blx	r3
 80088ca:	3601      	adds	r6, #1
 80088cc:	e7ee      	b.n	80088ac <__libc_init_array+0xc>
 80088ce:	00b3      	lsls	r3, r6, #2
 80088d0:	58eb      	ldr	r3, [r5, r3]
 80088d2:	4798      	blx	r3
 80088d4:	3601      	adds	r6, #1
 80088d6:	e7f2      	b.n	80088be <__libc_init_array+0x1e>
 80088d8:	0800da14 	.word	0x0800da14
 80088dc:	0800da14 	.word	0x0800da14
 80088e0:	0800da14 	.word	0x0800da14
 80088e4:	0800da18 	.word	0x0800da18

080088e8 <malloc>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4b03      	ldr	r3, [pc, #12]	; (80088f8 <malloc+0x10>)
 80088ec:	0001      	movs	r1, r0
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	f000 f882 	bl	80089f8 <_malloc_r>
 80088f4:	bd10      	pop	{r4, pc}
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	2000000c 	.word	0x2000000c

080088fc <memcpy>:
 80088fc:	2300      	movs	r3, #0
 80088fe:	b510      	push	{r4, lr}
 8008900:	429a      	cmp	r2, r3
 8008902:	d100      	bne.n	8008906 <memcpy+0xa>
 8008904:	bd10      	pop	{r4, pc}
 8008906:	5ccc      	ldrb	r4, [r1, r3]
 8008908:	54c4      	strb	r4, [r0, r3]
 800890a:	3301      	adds	r3, #1
 800890c:	e7f8      	b.n	8008900 <memcpy+0x4>

0800890e <memset>:
 800890e:	0003      	movs	r3, r0
 8008910:	1882      	adds	r2, r0, r2
 8008912:	4293      	cmp	r3, r2
 8008914:	d100      	bne.n	8008918 <memset+0xa>
 8008916:	4770      	bx	lr
 8008918:	7019      	strb	r1, [r3, #0]
 800891a:	3301      	adds	r3, #1
 800891c:	e7f9      	b.n	8008912 <memset+0x4>
	...

08008920 <_free_r>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	0005      	movs	r5, r0
 8008924:	2900      	cmp	r1, #0
 8008926:	d010      	beq.n	800894a <_free_r+0x2a>
 8008928:	1f0c      	subs	r4, r1, #4
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	da00      	bge.n	8008932 <_free_r+0x12>
 8008930:	18e4      	adds	r4, r4, r3
 8008932:	0028      	movs	r0, r5
 8008934:	f003 f890 	bl	800ba58 <__malloc_lock>
 8008938:	4a1d      	ldr	r2, [pc, #116]	; (80089b0 <_free_r+0x90>)
 800893a:	6813      	ldr	r3, [r2, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d105      	bne.n	800894c <_free_r+0x2c>
 8008940:	6063      	str	r3, [r4, #4]
 8008942:	6014      	str	r4, [r2, #0]
 8008944:	0028      	movs	r0, r5
 8008946:	f003 f88f 	bl	800ba68 <__malloc_unlock>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	42a3      	cmp	r3, r4
 800894e:	d908      	bls.n	8008962 <_free_r+0x42>
 8008950:	6821      	ldr	r1, [r4, #0]
 8008952:	1860      	adds	r0, r4, r1
 8008954:	4283      	cmp	r3, r0
 8008956:	d1f3      	bne.n	8008940 <_free_r+0x20>
 8008958:	6818      	ldr	r0, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	1841      	adds	r1, r0, r1
 800895e:	6021      	str	r1, [r4, #0]
 8008960:	e7ee      	b.n	8008940 <_free_r+0x20>
 8008962:	001a      	movs	r2, r3
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <_free_r+0x4e>
 800896a:	42a3      	cmp	r3, r4
 800896c:	d9f9      	bls.n	8008962 <_free_r+0x42>
 800896e:	6811      	ldr	r1, [r2, #0]
 8008970:	1850      	adds	r0, r2, r1
 8008972:	42a0      	cmp	r0, r4
 8008974:	d10b      	bne.n	800898e <_free_r+0x6e>
 8008976:	6820      	ldr	r0, [r4, #0]
 8008978:	1809      	adds	r1, r1, r0
 800897a:	1850      	adds	r0, r2, r1
 800897c:	6011      	str	r1, [r2, #0]
 800897e:	4283      	cmp	r3, r0
 8008980:	d1e0      	bne.n	8008944 <_free_r+0x24>
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	1841      	adds	r1, r0, r1
 8008988:	6011      	str	r1, [r2, #0]
 800898a:	6053      	str	r3, [r2, #4]
 800898c:	e7da      	b.n	8008944 <_free_r+0x24>
 800898e:	42a0      	cmp	r0, r4
 8008990:	d902      	bls.n	8008998 <_free_r+0x78>
 8008992:	230c      	movs	r3, #12
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	e7d5      	b.n	8008944 <_free_r+0x24>
 8008998:	6821      	ldr	r1, [r4, #0]
 800899a:	1860      	adds	r0, r4, r1
 800899c:	4283      	cmp	r3, r0
 800899e:	d103      	bne.n	80089a8 <_free_r+0x88>
 80089a0:	6818      	ldr	r0, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	1841      	adds	r1, r0, r1
 80089a6:	6021      	str	r1, [r4, #0]
 80089a8:	6063      	str	r3, [r4, #4]
 80089aa:	6054      	str	r4, [r2, #4]
 80089ac:	e7ca      	b.n	8008944 <_free_r+0x24>
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	20000540 	.word	0x20000540

080089b4 <sbrk_aligned>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	4e0f      	ldr	r6, [pc, #60]	; (80089f4 <sbrk_aligned+0x40>)
 80089b8:	000d      	movs	r5, r1
 80089ba:	6831      	ldr	r1, [r6, #0]
 80089bc:	0004      	movs	r4, r0
 80089be:	2900      	cmp	r1, #0
 80089c0:	d102      	bne.n	80089c8 <sbrk_aligned+0x14>
 80089c2:	f000 ff05 	bl	80097d0 <_sbrk_r>
 80089c6:	6030      	str	r0, [r6, #0]
 80089c8:	0029      	movs	r1, r5
 80089ca:	0020      	movs	r0, r4
 80089cc:	f000 ff00 	bl	80097d0 <_sbrk_r>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d00a      	beq.n	80089ea <sbrk_aligned+0x36>
 80089d4:	2303      	movs	r3, #3
 80089d6:	1cc5      	adds	r5, r0, #3
 80089d8:	439d      	bics	r5, r3
 80089da:	42a8      	cmp	r0, r5
 80089dc:	d007      	beq.n	80089ee <sbrk_aligned+0x3a>
 80089de:	1a29      	subs	r1, r5, r0
 80089e0:	0020      	movs	r0, r4
 80089e2:	f000 fef5 	bl	80097d0 <_sbrk_r>
 80089e6:	1c43      	adds	r3, r0, #1
 80089e8:	d101      	bne.n	80089ee <sbrk_aligned+0x3a>
 80089ea:	2501      	movs	r5, #1
 80089ec:	426d      	negs	r5, r5
 80089ee:	0028      	movs	r0, r5
 80089f0:	bd70      	pop	{r4, r5, r6, pc}
 80089f2:	46c0      	nop			; (mov r8, r8)
 80089f4:	20000544 	.word	0x20000544

080089f8 <_malloc_r>:
 80089f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089fa:	2203      	movs	r2, #3
 80089fc:	1ccb      	adds	r3, r1, #3
 80089fe:	4393      	bics	r3, r2
 8008a00:	3308      	adds	r3, #8
 8008a02:	0006      	movs	r6, r0
 8008a04:	001f      	movs	r7, r3
 8008a06:	2b0c      	cmp	r3, #12
 8008a08:	d232      	bcs.n	8008a70 <_malloc_r+0x78>
 8008a0a:	270c      	movs	r7, #12
 8008a0c:	42b9      	cmp	r1, r7
 8008a0e:	d831      	bhi.n	8008a74 <_malloc_r+0x7c>
 8008a10:	0030      	movs	r0, r6
 8008a12:	f003 f821 	bl	800ba58 <__malloc_lock>
 8008a16:	4d32      	ldr	r5, [pc, #200]	; (8008ae0 <_malloc_r+0xe8>)
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	001c      	movs	r4, r3
 8008a1c:	2c00      	cmp	r4, #0
 8008a1e:	d12e      	bne.n	8008a7e <_malloc_r+0x86>
 8008a20:	0039      	movs	r1, r7
 8008a22:	0030      	movs	r0, r6
 8008a24:	f7ff ffc6 	bl	80089b4 <sbrk_aligned>
 8008a28:	0004      	movs	r4, r0
 8008a2a:	1c43      	adds	r3, r0, #1
 8008a2c:	d11e      	bne.n	8008a6c <_malloc_r+0x74>
 8008a2e:	682c      	ldr	r4, [r5, #0]
 8008a30:	0025      	movs	r5, r4
 8008a32:	2d00      	cmp	r5, #0
 8008a34:	d14a      	bne.n	8008acc <_malloc_r+0xd4>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	0029      	movs	r1, r5
 8008a3a:	18e3      	adds	r3, r4, r3
 8008a3c:	0030      	movs	r0, r6
 8008a3e:	9301      	str	r3, [sp, #4]
 8008a40:	f000 fec6 	bl	80097d0 <_sbrk_r>
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	4283      	cmp	r3, r0
 8008a48:	d143      	bne.n	8008ad2 <_malloc_r+0xda>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	3703      	adds	r7, #3
 8008a4e:	1aff      	subs	r7, r7, r3
 8008a50:	2303      	movs	r3, #3
 8008a52:	439f      	bics	r7, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	2f0c      	cmp	r7, #12
 8008a58:	d200      	bcs.n	8008a5c <_malloc_r+0x64>
 8008a5a:	270c      	movs	r7, #12
 8008a5c:	0039      	movs	r1, r7
 8008a5e:	0030      	movs	r0, r6
 8008a60:	f7ff ffa8 	bl	80089b4 <sbrk_aligned>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d034      	beq.n	8008ad2 <_malloc_r+0xda>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	19df      	adds	r7, r3, r7
 8008a6c:	6027      	str	r7, [r4, #0]
 8008a6e:	e013      	b.n	8008a98 <_malloc_r+0xa0>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dacb      	bge.n	8008a0c <_malloc_r+0x14>
 8008a74:	230c      	movs	r3, #12
 8008a76:	2500      	movs	r5, #0
 8008a78:	6033      	str	r3, [r6, #0]
 8008a7a:	0028      	movs	r0, r5
 8008a7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a7e:	6822      	ldr	r2, [r4, #0]
 8008a80:	1bd1      	subs	r1, r2, r7
 8008a82:	d420      	bmi.n	8008ac6 <_malloc_r+0xce>
 8008a84:	290b      	cmp	r1, #11
 8008a86:	d917      	bls.n	8008ab8 <_malloc_r+0xc0>
 8008a88:	19e2      	adds	r2, r4, r7
 8008a8a:	6027      	str	r7, [r4, #0]
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	d111      	bne.n	8008ab4 <_malloc_r+0xbc>
 8008a90:	602a      	str	r2, [r5, #0]
 8008a92:	6863      	ldr	r3, [r4, #4]
 8008a94:	6011      	str	r1, [r2, #0]
 8008a96:	6053      	str	r3, [r2, #4]
 8008a98:	0030      	movs	r0, r6
 8008a9a:	0025      	movs	r5, r4
 8008a9c:	f002 ffe4 	bl	800ba68 <__malloc_unlock>
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	350b      	adds	r5, #11
 8008aa4:	1d23      	adds	r3, r4, #4
 8008aa6:	4395      	bics	r5, r2
 8008aa8:	1aea      	subs	r2, r5, r3
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	d0e5      	beq.n	8008a7a <_malloc_r+0x82>
 8008aae:	1b5b      	subs	r3, r3, r5
 8008ab0:	50a3      	str	r3, [r4, r2]
 8008ab2:	e7e2      	b.n	8008a7a <_malloc_r+0x82>
 8008ab4:	605a      	str	r2, [r3, #4]
 8008ab6:	e7ec      	b.n	8008a92 <_malloc_r+0x9a>
 8008ab8:	6862      	ldr	r2, [r4, #4]
 8008aba:	42a3      	cmp	r3, r4
 8008abc:	d101      	bne.n	8008ac2 <_malloc_r+0xca>
 8008abe:	602a      	str	r2, [r5, #0]
 8008ac0:	e7ea      	b.n	8008a98 <_malloc_r+0xa0>
 8008ac2:	605a      	str	r2, [r3, #4]
 8008ac4:	e7e8      	b.n	8008a98 <_malloc_r+0xa0>
 8008ac6:	0023      	movs	r3, r4
 8008ac8:	6864      	ldr	r4, [r4, #4]
 8008aca:	e7a7      	b.n	8008a1c <_malloc_r+0x24>
 8008acc:	002c      	movs	r4, r5
 8008ace:	686d      	ldr	r5, [r5, #4]
 8008ad0:	e7af      	b.n	8008a32 <_malloc_r+0x3a>
 8008ad2:	230c      	movs	r3, #12
 8008ad4:	0030      	movs	r0, r6
 8008ad6:	6033      	str	r3, [r6, #0]
 8008ad8:	f002 ffc6 	bl	800ba68 <__malloc_unlock>
 8008adc:	e7cd      	b.n	8008a7a <_malloc_r+0x82>
 8008ade:	46c0      	nop			; (mov r8, r8)
 8008ae0:	20000540 	.word	0x20000540

08008ae4 <__cvt>:
 8008ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae6:	001e      	movs	r6, r3
 8008ae8:	2300      	movs	r3, #0
 8008aea:	0014      	movs	r4, r2
 8008aec:	b08b      	sub	sp, #44	; 0x2c
 8008aee:	429e      	cmp	r6, r3
 8008af0:	da04      	bge.n	8008afc <__cvt+0x18>
 8008af2:	2180      	movs	r1, #128	; 0x80
 8008af4:	0609      	lsls	r1, r1, #24
 8008af6:	1873      	adds	r3, r6, r1
 8008af8:	001e      	movs	r6, r3
 8008afa:	232d      	movs	r3, #45	; 0x2d
 8008afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008afe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008b00:	7013      	strb	r3, [r2, #0]
 8008b02:	2320      	movs	r3, #32
 8008b04:	2203      	movs	r2, #3
 8008b06:	439f      	bics	r7, r3
 8008b08:	2f46      	cmp	r7, #70	; 0x46
 8008b0a:	d007      	beq.n	8008b1c <__cvt+0x38>
 8008b0c:	003b      	movs	r3, r7
 8008b0e:	3b45      	subs	r3, #69	; 0x45
 8008b10:	4259      	negs	r1, r3
 8008b12:	414b      	adcs	r3, r1
 8008b14:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b16:	3a01      	subs	r2, #1
 8008b18:	18cb      	adds	r3, r1, r3
 8008b1a:	9310      	str	r3, [sp, #64]	; 0x40
 8008b1c:	ab09      	add	r3, sp, #36	; 0x24
 8008b1e:	9304      	str	r3, [sp, #16]
 8008b20:	ab08      	add	r3, sp, #32
 8008b22:	9303      	str	r3, [sp, #12]
 8008b24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b26:	9200      	str	r2, [sp, #0]
 8008b28:	9302      	str	r3, [sp, #8]
 8008b2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b2c:	0022      	movs	r2, r4
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	0033      	movs	r3, r6
 8008b32:	f001 fde1 	bl	800a6f8 <_dtoa_r>
 8008b36:	0005      	movs	r5, r0
 8008b38:	2f47      	cmp	r7, #71	; 0x47
 8008b3a:	d102      	bne.n	8008b42 <__cvt+0x5e>
 8008b3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b3e:	07db      	lsls	r3, r3, #31
 8008b40:	d528      	bpl.n	8008b94 <__cvt+0xb0>
 8008b42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b44:	18eb      	adds	r3, r5, r3
 8008b46:	9307      	str	r3, [sp, #28]
 8008b48:	2f46      	cmp	r7, #70	; 0x46
 8008b4a:	d114      	bne.n	8008b76 <__cvt+0x92>
 8008b4c:	782b      	ldrb	r3, [r5, #0]
 8008b4e:	2b30      	cmp	r3, #48	; 0x30
 8008b50:	d10c      	bne.n	8008b6c <__cvt+0x88>
 8008b52:	2200      	movs	r2, #0
 8008b54:	2300      	movs	r3, #0
 8008b56:	0020      	movs	r0, r4
 8008b58:	0031      	movs	r1, r6
 8008b5a:	f7f7 fc75 	bl	8000448 <__aeabi_dcmpeq>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d104      	bne.n	8008b6c <__cvt+0x88>
 8008b62:	2301      	movs	r3, #1
 8008b64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b66:	1a9b      	subs	r3, r3, r2
 8008b68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b6e:	9a07      	ldr	r2, [sp, #28]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	18d3      	adds	r3, r2, r3
 8008b74:	9307      	str	r3, [sp, #28]
 8008b76:	2200      	movs	r2, #0
 8008b78:	2300      	movs	r3, #0
 8008b7a:	0020      	movs	r0, r4
 8008b7c:	0031      	movs	r1, r6
 8008b7e:	f7f7 fc63 	bl	8000448 <__aeabi_dcmpeq>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d001      	beq.n	8008b8a <__cvt+0xa6>
 8008b86:	9b07      	ldr	r3, [sp, #28]
 8008b88:	9309      	str	r3, [sp, #36]	; 0x24
 8008b8a:	2230      	movs	r2, #48	; 0x30
 8008b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8e:	9907      	ldr	r1, [sp, #28]
 8008b90:	428b      	cmp	r3, r1
 8008b92:	d306      	bcc.n	8008ba2 <__cvt+0xbe>
 8008b94:	0028      	movs	r0, r5
 8008b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b9a:	1b5b      	subs	r3, r3, r5
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	b00b      	add	sp, #44	; 0x2c
 8008ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba2:	1c59      	adds	r1, r3, #1
 8008ba4:	9109      	str	r1, [sp, #36]	; 0x24
 8008ba6:	701a      	strb	r2, [r3, #0]
 8008ba8:	e7f0      	b.n	8008b8c <__cvt+0xa8>

08008baa <__exponent>:
 8008baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bac:	1c83      	adds	r3, r0, #2
 8008bae:	b087      	sub	sp, #28
 8008bb0:	9303      	str	r3, [sp, #12]
 8008bb2:	0005      	movs	r5, r0
 8008bb4:	000c      	movs	r4, r1
 8008bb6:	232b      	movs	r3, #43	; 0x2b
 8008bb8:	7002      	strb	r2, [r0, #0]
 8008bba:	2900      	cmp	r1, #0
 8008bbc:	da01      	bge.n	8008bc2 <__exponent+0x18>
 8008bbe:	424c      	negs	r4, r1
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	706b      	strb	r3, [r5, #1]
 8008bc4:	2c09      	cmp	r4, #9
 8008bc6:	dd31      	ble.n	8008c2c <__exponent+0x82>
 8008bc8:	270a      	movs	r7, #10
 8008bca:	ab04      	add	r3, sp, #16
 8008bcc:	1dde      	adds	r6, r3, #7
 8008bce:	0020      	movs	r0, r4
 8008bd0:	0039      	movs	r1, r7
 8008bd2:	9601      	str	r6, [sp, #4]
 8008bd4:	f7f7 fc22 	bl	800041c <__aeabi_idivmod>
 8008bd8:	3e01      	subs	r6, #1
 8008bda:	3130      	adds	r1, #48	; 0x30
 8008bdc:	0020      	movs	r0, r4
 8008bde:	7031      	strb	r1, [r6, #0]
 8008be0:	0039      	movs	r1, r7
 8008be2:	9402      	str	r4, [sp, #8]
 8008be4:	f7f7 fb34 	bl	8000250 <__divsi3>
 8008be8:	9b02      	ldr	r3, [sp, #8]
 8008bea:	0004      	movs	r4, r0
 8008bec:	2b63      	cmp	r3, #99	; 0x63
 8008bee:	dcee      	bgt.n	8008bce <__exponent+0x24>
 8008bf0:	9b01      	ldr	r3, [sp, #4]
 8008bf2:	3430      	adds	r4, #48	; 0x30
 8008bf4:	1e9a      	subs	r2, r3, #2
 8008bf6:	0013      	movs	r3, r2
 8008bf8:	9903      	ldr	r1, [sp, #12]
 8008bfa:	7014      	strb	r4, [r2, #0]
 8008bfc:	a804      	add	r0, sp, #16
 8008bfe:	3007      	adds	r0, #7
 8008c00:	4298      	cmp	r0, r3
 8008c02:	d80e      	bhi.n	8008c22 <__exponent+0x78>
 8008c04:	ab04      	add	r3, sp, #16
 8008c06:	3307      	adds	r3, #7
 8008c08:	2000      	movs	r0, #0
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d804      	bhi.n	8008c18 <__exponent+0x6e>
 8008c0e:	ab04      	add	r3, sp, #16
 8008c10:	3009      	adds	r0, #9
 8008c12:	18c0      	adds	r0, r0, r3
 8008c14:	9b01      	ldr	r3, [sp, #4]
 8008c16:	1ac0      	subs	r0, r0, r3
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	1818      	adds	r0, r3, r0
 8008c1c:	1b40      	subs	r0, r0, r5
 8008c1e:	b007      	add	sp, #28
 8008c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c22:	7818      	ldrb	r0, [r3, #0]
 8008c24:	3301      	adds	r3, #1
 8008c26:	7008      	strb	r0, [r1, #0]
 8008c28:	3101      	adds	r1, #1
 8008c2a:	e7e7      	b.n	8008bfc <__exponent+0x52>
 8008c2c:	2330      	movs	r3, #48	; 0x30
 8008c2e:	18e4      	adds	r4, r4, r3
 8008c30:	70ab      	strb	r3, [r5, #2]
 8008c32:	1d28      	adds	r0, r5, #4
 8008c34:	70ec      	strb	r4, [r5, #3]
 8008c36:	e7f1      	b.n	8008c1c <__exponent+0x72>

08008c38 <_printf_float>:
 8008c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c3a:	b095      	sub	sp, #84	; 0x54
 8008c3c:	000c      	movs	r4, r1
 8008c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c40:	001e      	movs	r6, r3
 8008c42:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008c44:	0007      	movs	r7, r0
 8008c46:	f002 fee5 	bl	800ba14 <_localeconv_r>
 8008c4a:	6803      	ldr	r3, [r0, #0]
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c50:	f7f7 fa58 	bl	8000104 <strlen>
 8008c54:	2300      	movs	r3, #0
 8008c56:	9312      	str	r3, [sp, #72]	; 0x48
 8008c58:	7e23      	ldrb	r3, [r4, #24]
 8008c5a:	2207      	movs	r2, #7
 8008c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	900e      	str	r0, [sp, #56]	; 0x38
 8008c62:	930d      	str	r3, [sp, #52]	; 0x34
 8008c64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c66:	682b      	ldr	r3, [r5, #0]
 8008c68:	05c9      	lsls	r1, r1, #23
 8008c6a:	d547      	bpl.n	8008cfc <_printf_float+0xc4>
 8008c6c:	189b      	adds	r3, r3, r2
 8008c6e:	4393      	bics	r3, r2
 8008c70:	001a      	movs	r2, r3
 8008c72:	3208      	adds	r2, #8
 8008c74:	602a      	str	r2, [r5, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	64a2      	str	r2, [r4, #72]	; 0x48
 8008c7c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008c7e:	2201      	movs	r2, #1
 8008c80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008c82:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c86:	006b      	lsls	r3, r5, #1
 8008c88:	085b      	lsrs	r3, r3, #1
 8008c8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c8e:	4ba7      	ldr	r3, [pc, #668]	; (8008f2c <_printf_float+0x2f4>)
 8008c90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c92:	4252      	negs	r2, r2
 8008c94:	f7f9 ffa6 	bl	8002be4 <__aeabi_dcmpun>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d131      	bne.n	8008d00 <_printf_float+0xc8>
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	4ba3      	ldr	r3, [pc, #652]	; (8008f2c <_printf_float+0x2f4>)
 8008ca0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008ca2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008ca4:	4252      	negs	r2, r2
 8008ca6:	f7f7 fbdf 	bl	8000468 <__aeabi_dcmple>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d128      	bne.n	8008d00 <_printf_float+0xc8>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	0029      	movs	r1, r5
 8008cb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008cb6:	f7f7 fbcd 	bl	8000454 <__aeabi_dcmplt>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d003      	beq.n	8008cc6 <_printf_float+0x8e>
 8008cbe:	0023      	movs	r3, r4
 8008cc0:	222d      	movs	r2, #45	; 0x2d
 8008cc2:	3343      	adds	r3, #67	; 0x43
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc8:	4d99      	ldr	r5, [pc, #612]	; (8008f30 <_printf_float+0x2f8>)
 8008cca:	2b47      	cmp	r3, #71	; 0x47
 8008ccc:	d900      	bls.n	8008cd0 <_printf_float+0x98>
 8008cce:	4d99      	ldr	r5, [pc, #612]	; (8008f34 <_printf_float+0x2fc>)
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cd4:	6123      	str	r3, [r4, #16]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	439a      	bics	r2, r3
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6022      	str	r2, [r4, #0]
 8008cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce2:	0021      	movs	r1, r4
 8008ce4:	0038      	movs	r0, r7
 8008ce6:	9600      	str	r6, [sp, #0]
 8008ce8:	aa13      	add	r2, sp, #76	; 0x4c
 8008cea:	f000 f9e7 	bl	80090bc <_printf_common>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d000      	beq.n	8008cf4 <_printf_float+0xbc>
 8008cf2:	e0a2      	b.n	8008e3a <_printf_float+0x202>
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	4240      	negs	r0, r0
 8008cf8:	b015      	add	sp, #84	; 0x54
 8008cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cfc:	3307      	adds	r3, #7
 8008cfe:	e7b6      	b.n	8008c6e <_printf_float+0x36>
 8008d00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d02:	002b      	movs	r3, r5
 8008d04:	0010      	movs	r0, r2
 8008d06:	0029      	movs	r1, r5
 8008d08:	f7f9 ff6c 	bl	8002be4 <__aeabi_dcmpun>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	d00b      	beq.n	8008d28 <_printf_float+0xf0>
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	da03      	bge.n	8008d1c <_printf_float+0xe4>
 8008d14:	0023      	movs	r3, r4
 8008d16:	222d      	movs	r2, #45	; 0x2d
 8008d18:	3343      	adds	r3, #67	; 0x43
 8008d1a:	701a      	strb	r2, [r3, #0]
 8008d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1e:	4d86      	ldr	r5, [pc, #536]	; (8008f38 <_printf_float+0x300>)
 8008d20:	2b47      	cmp	r3, #71	; 0x47
 8008d22:	d9d5      	bls.n	8008cd0 <_printf_float+0x98>
 8008d24:	4d85      	ldr	r5, [pc, #532]	; (8008f3c <_printf_float+0x304>)
 8008d26:	e7d3      	b.n	8008cd0 <_printf_float+0x98>
 8008d28:	2220      	movs	r2, #32
 8008d2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d2c:	6863      	ldr	r3, [r4, #4]
 8008d2e:	4391      	bics	r1, r2
 8008d30:	910f      	str	r1, [sp, #60]	; 0x3c
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	d149      	bne.n	8008dca <_printf_float+0x192>
 8008d36:	3307      	adds	r3, #7
 8008d38:	6063      	str	r3, [r4, #4]
 8008d3a:	2380      	movs	r3, #128	; 0x80
 8008d3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	4313      	orrs	r3, r2
 8008d42:	2200      	movs	r2, #0
 8008d44:	9206      	str	r2, [sp, #24]
 8008d46:	aa12      	add	r2, sp, #72	; 0x48
 8008d48:	9205      	str	r2, [sp, #20]
 8008d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d4c:	a908      	add	r1, sp, #32
 8008d4e:	9204      	str	r2, [sp, #16]
 8008d50:	aa11      	add	r2, sp, #68	; 0x44
 8008d52:	9203      	str	r2, [sp, #12]
 8008d54:	2223      	movs	r2, #35	; 0x23
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	6863      	ldr	r3, [r4, #4]
 8008d5c:	1852      	adds	r2, r2, r1
 8008d5e:	9202      	str	r2, [sp, #8]
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	0038      	movs	r0, r7
 8008d64:	002b      	movs	r3, r5
 8008d66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d68:	f7ff febc 	bl	8008ae4 <__cvt>
 8008d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d6e:	0005      	movs	r5, r0
 8008d70:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d72:	2b47      	cmp	r3, #71	; 0x47
 8008d74:	d108      	bne.n	8008d88 <_printf_float+0x150>
 8008d76:	1ccb      	adds	r3, r1, #3
 8008d78:	db02      	blt.n	8008d80 <_printf_float+0x148>
 8008d7a:	6863      	ldr	r3, [r4, #4]
 8008d7c:	4299      	cmp	r1, r3
 8008d7e:	dd48      	ble.n	8008e12 <_printf_float+0x1da>
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	3b02      	subs	r3, #2
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	930a      	str	r3, [sp, #40]	; 0x28
 8008d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d8a:	2b65      	cmp	r3, #101	; 0x65
 8008d8c:	d824      	bhi.n	8008dd8 <_printf_float+0x1a0>
 8008d8e:	0020      	movs	r0, r4
 8008d90:	001a      	movs	r2, r3
 8008d92:	3901      	subs	r1, #1
 8008d94:	3050      	adds	r0, #80	; 0x50
 8008d96:	9111      	str	r1, [sp, #68]	; 0x44
 8008d98:	f7ff ff07 	bl	8008baa <__exponent>
 8008d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d9e:	900b      	str	r0, [sp, #44]	; 0x2c
 8008da0:	1813      	adds	r3, r2, r0
 8008da2:	6123      	str	r3, [r4, #16]
 8008da4:	2a01      	cmp	r2, #1
 8008da6:	dc02      	bgt.n	8008dae <_printf_float+0x176>
 8008da8:	6822      	ldr	r2, [r4, #0]
 8008daa:	07d2      	lsls	r2, r2, #31
 8008dac:	d501      	bpl.n	8008db2 <_printf_float+0x17a>
 8008dae:	3301      	adds	r3, #1
 8008db0:	6123      	str	r3, [r4, #16]
 8008db2:	2323      	movs	r3, #35	; 0x23
 8008db4:	aa08      	add	r2, sp, #32
 8008db6:	189b      	adds	r3, r3, r2
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d100      	bne.n	8008dc0 <_printf_float+0x188>
 8008dbe:	e78f      	b.n	8008ce0 <_printf_float+0xa8>
 8008dc0:	0023      	movs	r3, r4
 8008dc2:	222d      	movs	r2, #45	; 0x2d
 8008dc4:	3343      	adds	r3, #67	; 0x43
 8008dc6:	701a      	strb	r2, [r3, #0]
 8008dc8:	e78a      	b.n	8008ce0 <_printf_float+0xa8>
 8008dca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dcc:	2a47      	cmp	r2, #71	; 0x47
 8008dce:	d1b4      	bne.n	8008d3a <_printf_float+0x102>
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1b2      	bne.n	8008d3a <_printf_float+0x102>
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	e7af      	b.n	8008d38 <_printf_float+0x100>
 8008dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dda:	2b66      	cmp	r3, #102	; 0x66
 8008ddc:	d11b      	bne.n	8008e16 <_printf_float+0x1de>
 8008dde:	6863      	ldr	r3, [r4, #4]
 8008de0:	2900      	cmp	r1, #0
 8008de2:	dd0d      	ble.n	8008e00 <_printf_float+0x1c8>
 8008de4:	6121      	str	r1, [r4, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d102      	bne.n	8008df0 <_printf_float+0x1b8>
 8008dea:	6822      	ldr	r2, [r4, #0]
 8008dec:	07d2      	lsls	r2, r2, #31
 8008dee:	d502      	bpl.n	8008df6 <_printf_float+0x1be>
 8008df0:	3301      	adds	r3, #1
 8008df2:	1859      	adds	r1, r3, r1
 8008df4:	6121      	str	r1, [r4, #16]
 8008df6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008df8:	65a3      	str	r3, [r4, #88]	; 0x58
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dfe:	e7d8      	b.n	8008db2 <_printf_float+0x17a>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d103      	bne.n	8008e0c <_printf_float+0x1d4>
 8008e04:	2201      	movs	r2, #1
 8008e06:	6821      	ldr	r1, [r4, #0]
 8008e08:	4211      	tst	r1, r2
 8008e0a:	d000      	beq.n	8008e0e <_printf_float+0x1d6>
 8008e0c:	1c9a      	adds	r2, r3, #2
 8008e0e:	6122      	str	r2, [r4, #16]
 8008e10:	e7f1      	b.n	8008df6 <_printf_float+0x1be>
 8008e12:	2367      	movs	r3, #103	; 0x67
 8008e14:	930a      	str	r3, [sp, #40]	; 0x28
 8008e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	db06      	blt.n	8008e2c <_printf_float+0x1f4>
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	6123      	str	r3, [r4, #16]
 8008e22:	07d2      	lsls	r2, r2, #31
 8008e24:	d5e7      	bpl.n	8008df6 <_printf_float+0x1be>
 8008e26:	3301      	adds	r3, #1
 8008e28:	6123      	str	r3, [r4, #16]
 8008e2a:	e7e4      	b.n	8008df6 <_printf_float+0x1be>
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	dc01      	bgt.n	8008e36 <_printf_float+0x1fe>
 8008e32:	1849      	adds	r1, r1, r1
 8008e34:	1ac9      	subs	r1, r1, r3
 8008e36:	1852      	adds	r2, r2, r1
 8008e38:	e7e9      	b.n	8008e0e <_printf_float+0x1d6>
 8008e3a:	6822      	ldr	r2, [r4, #0]
 8008e3c:	0553      	lsls	r3, r2, #21
 8008e3e:	d407      	bmi.n	8008e50 <_printf_float+0x218>
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	002a      	movs	r2, r5
 8008e44:	0038      	movs	r0, r7
 8008e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e48:	47b0      	blx	r6
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	d128      	bne.n	8008ea0 <_printf_float+0x268>
 8008e4e:	e751      	b.n	8008cf4 <_printf_float+0xbc>
 8008e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e52:	2b65      	cmp	r3, #101	; 0x65
 8008e54:	d800      	bhi.n	8008e58 <_printf_float+0x220>
 8008e56:	e0e1      	b.n	800901c <_printf_float+0x3e4>
 8008e58:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008e5a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f7f7 faf2 	bl	8000448 <__aeabi_dcmpeq>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d031      	beq.n	8008ecc <_printf_float+0x294>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	0038      	movs	r0, r7
 8008e6c:	4a34      	ldr	r2, [pc, #208]	; (8008f40 <_printf_float+0x308>)
 8008e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e70:	47b0      	blx	r6
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d100      	bne.n	8008e78 <_printf_float+0x240>
 8008e76:	e73d      	b.n	8008cf4 <_printf_float+0xbc>
 8008e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	db02      	blt.n	8008e86 <_printf_float+0x24e>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	07db      	lsls	r3, r3, #31
 8008e84:	d50c      	bpl.n	8008ea0 <_printf_float+0x268>
 8008e86:	0038      	movs	r0, r7
 8008e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e8e:	47b0      	blx	r6
 8008e90:	2500      	movs	r5, #0
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	d100      	bne.n	8008e98 <_printf_float+0x260>
 8008e96:	e72d      	b.n	8008cf4 <_printf_float+0xbc>
 8008e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	42ab      	cmp	r3, r5
 8008e9e:	dc0a      	bgt.n	8008eb6 <_printf_float+0x27e>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	079b      	lsls	r3, r3, #30
 8008ea4:	d500      	bpl.n	8008ea8 <_printf_float+0x270>
 8008ea6:	e106      	b.n	80090b6 <_printf_float+0x47e>
 8008ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008eaa:	68e0      	ldr	r0, [r4, #12]
 8008eac:	4298      	cmp	r0, r3
 8008eae:	db00      	blt.n	8008eb2 <_printf_float+0x27a>
 8008eb0:	e722      	b.n	8008cf8 <_printf_float+0xc0>
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	e720      	b.n	8008cf8 <_printf_float+0xc0>
 8008eb6:	0022      	movs	r2, r4
 8008eb8:	2301      	movs	r3, #1
 8008eba:	0038      	movs	r0, r7
 8008ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ebe:	321a      	adds	r2, #26
 8008ec0:	47b0      	blx	r6
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	d100      	bne.n	8008ec8 <_printf_float+0x290>
 8008ec6:	e715      	b.n	8008cf4 <_printf_float+0xbc>
 8008ec8:	3501      	adds	r5, #1
 8008eca:	e7e5      	b.n	8008e98 <_printf_float+0x260>
 8008ecc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	dc38      	bgt.n	8008f44 <_printf_float+0x30c>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	0038      	movs	r0, r7
 8008ed6:	4a1a      	ldr	r2, [pc, #104]	; (8008f40 <_printf_float+0x308>)
 8008ed8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eda:	47b0      	blx	r6
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d100      	bne.n	8008ee2 <_printf_float+0x2aa>
 8008ee0:	e708      	b.n	8008cf4 <_printf_float+0xbc>
 8008ee2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	d102      	bne.n	8008ef0 <_printf_float+0x2b8>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	07db      	lsls	r3, r3, #31
 8008eee:	d5d7      	bpl.n	8008ea0 <_printf_float+0x268>
 8008ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ef2:	0038      	movs	r0, r7
 8008ef4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ef6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ef8:	47b0      	blx	r6
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d100      	bne.n	8008f00 <_printf_float+0x2c8>
 8008efe:	e6f9      	b.n	8008cf4 <_printf_float+0xbc>
 8008f00:	2300      	movs	r3, #0
 8008f02:	930a      	str	r3, [sp, #40]	; 0x28
 8008f04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f08:	425b      	negs	r3, r3
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	dc01      	bgt.n	8008f12 <_printf_float+0x2da>
 8008f0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f10:	e797      	b.n	8008e42 <_printf_float+0x20a>
 8008f12:	0022      	movs	r2, r4
 8008f14:	2301      	movs	r3, #1
 8008f16:	0038      	movs	r0, r7
 8008f18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f1a:	321a      	adds	r2, #26
 8008f1c:	47b0      	blx	r6
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	d100      	bne.n	8008f24 <_printf_float+0x2ec>
 8008f22:	e6e7      	b.n	8008cf4 <_printf_float+0xbc>
 8008f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f26:	3301      	adds	r3, #1
 8008f28:	e7eb      	b.n	8008f02 <_printf_float+0x2ca>
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	7fefffff 	.word	0x7fefffff
 8008f30:	0800d66c 	.word	0x0800d66c
 8008f34:	0800d670 	.word	0x0800d670
 8008f38:	0800d674 	.word	0x0800d674
 8008f3c:	0800d678 	.word	0x0800d678
 8008f40:	0800d67c 	.word	0x0800d67c
 8008f44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f48:	920a      	str	r2, [sp, #40]	; 0x28
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	dd00      	ble.n	8008f50 <_printf_float+0x318>
 8008f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	dc3c      	bgt.n	8008fd0 <_printf_float+0x398>
 8008f56:	2300      	movs	r3, #0
 8008f58:	930d      	str	r3, [sp, #52]	; 0x34
 8008f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5c:	43db      	mvns	r3, r3
 8008f5e:	17db      	asrs	r3, r3, #31
 8008f60:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f72:	4293      	cmp	r3, r2
 8008f74:	dc34      	bgt.n	8008fe0 <_printf_float+0x3a8>
 8008f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	db3d      	blt.n	8008ffa <_printf_float+0x3c2>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	07db      	lsls	r3, r3, #31
 8008f82:	d43a      	bmi.n	8008ffa <_printf_float+0x3c2>
 8008f84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f88:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	1a52      	subs	r2, r2, r1
 8008f8e:	920a      	str	r2, [sp, #40]	; 0x28
 8008f90:	429a      	cmp	r2, r3
 8008f92:	dd00      	ble.n	8008f96 <_printf_float+0x35e>
 8008f94:	930a      	str	r3, [sp, #40]	; 0x28
 8008f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	dc36      	bgt.n	800900a <_printf_float+0x3d2>
 8008f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f9e:	2500      	movs	r5, #0
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	17db      	asrs	r3, r3, #31
 8008fa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008faa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fac:	1a9b      	subs	r3, r3, r2
 8008fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fb0:	400a      	ands	r2, r1
 8008fb2:	1a9b      	subs	r3, r3, r2
 8008fb4:	42ab      	cmp	r3, r5
 8008fb6:	dc00      	bgt.n	8008fba <_printf_float+0x382>
 8008fb8:	e772      	b.n	8008ea0 <_printf_float+0x268>
 8008fba:	0022      	movs	r2, r4
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	0038      	movs	r0, r7
 8008fc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fc2:	321a      	adds	r2, #26
 8008fc4:	47b0      	blx	r6
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	d100      	bne.n	8008fcc <_printf_float+0x394>
 8008fca:	e693      	b.n	8008cf4 <_printf_float+0xbc>
 8008fcc:	3501      	adds	r5, #1
 8008fce:	e7ea      	b.n	8008fa6 <_printf_float+0x36e>
 8008fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd2:	002a      	movs	r2, r5
 8008fd4:	0038      	movs	r0, r7
 8008fd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fd8:	47b0      	blx	r6
 8008fda:	1c43      	adds	r3, r0, #1
 8008fdc:	d1bb      	bne.n	8008f56 <_printf_float+0x31e>
 8008fde:	e689      	b.n	8008cf4 <_printf_float+0xbc>
 8008fe0:	0022      	movs	r2, r4
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	0038      	movs	r0, r7
 8008fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fe8:	321a      	adds	r2, #26
 8008fea:	47b0      	blx	r6
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	d100      	bne.n	8008ff2 <_printf_float+0x3ba>
 8008ff0:	e680      	b.n	8008cf4 <_printf_float+0xbc>
 8008ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ff8:	e7b3      	b.n	8008f62 <_printf_float+0x32a>
 8008ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ffc:	0038      	movs	r0, r7
 8008ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009000:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009002:	47b0      	blx	r6
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d1bd      	bne.n	8008f84 <_printf_float+0x34c>
 8009008:	e674      	b.n	8008cf4 <_printf_float+0xbc>
 800900a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800900c:	0038      	movs	r0, r7
 800900e:	18ea      	adds	r2, r5, r3
 8009010:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009014:	47b0      	blx	r6
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d1c0      	bne.n	8008f9c <_printf_float+0x364>
 800901a:	e66b      	b.n	8008cf4 <_printf_float+0xbc>
 800901c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800901e:	2b01      	cmp	r3, #1
 8009020:	dc02      	bgt.n	8009028 <_printf_float+0x3f0>
 8009022:	2301      	movs	r3, #1
 8009024:	421a      	tst	r2, r3
 8009026:	d034      	beq.n	8009092 <_printf_float+0x45a>
 8009028:	2301      	movs	r3, #1
 800902a:	002a      	movs	r2, r5
 800902c:	0038      	movs	r0, r7
 800902e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009030:	47b0      	blx	r6
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d100      	bne.n	8009038 <_printf_float+0x400>
 8009036:	e65d      	b.n	8008cf4 <_printf_float+0xbc>
 8009038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800903a:	0038      	movs	r0, r7
 800903c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800903e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009040:	47b0      	blx	r6
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	d100      	bne.n	8009048 <_printf_float+0x410>
 8009046:	e655      	b.n	8008cf4 <_printf_float+0xbc>
 8009048:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800904a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800904c:	2200      	movs	r2, #0
 800904e:	2300      	movs	r3, #0
 8009050:	f7f7 f9fa 	bl	8000448 <__aeabi_dcmpeq>
 8009054:	2800      	cmp	r0, #0
 8009056:	d11a      	bne.n	800908e <_printf_float+0x456>
 8009058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800905a:	1c6a      	adds	r2, r5, #1
 800905c:	3b01      	subs	r3, #1
 800905e:	0038      	movs	r0, r7
 8009060:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009062:	47b0      	blx	r6
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d10e      	bne.n	8009086 <_printf_float+0x44e>
 8009068:	e644      	b.n	8008cf4 <_printf_float+0xbc>
 800906a:	0022      	movs	r2, r4
 800906c:	2301      	movs	r3, #1
 800906e:	0038      	movs	r0, r7
 8009070:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009072:	321a      	adds	r2, #26
 8009074:	47b0      	blx	r6
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	d100      	bne.n	800907c <_printf_float+0x444>
 800907a:	e63b      	b.n	8008cf4 <_printf_float+0xbc>
 800907c:	3501      	adds	r5, #1
 800907e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009080:	3b01      	subs	r3, #1
 8009082:	42ab      	cmp	r3, r5
 8009084:	dcf1      	bgt.n	800906a <_printf_float+0x432>
 8009086:	0022      	movs	r2, r4
 8009088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800908a:	3250      	adds	r2, #80	; 0x50
 800908c:	e6da      	b.n	8008e44 <_printf_float+0x20c>
 800908e:	2500      	movs	r5, #0
 8009090:	e7f5      	b.n	800907e <_printf_float+0x446>
 8009092:	002a      	movs	r2, r5
 8009094:	e7e3      	b.n	800905e <_printf_float+0x426>
 8009096:	0022      	movs	r2, r4
 8009098:	2301      	movs	r3, #1
 800909a:	0038      	movs	r0, r7
 800909c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800909e:	3219      	adds	r2, #25
 80090a0:	47b0      	blx	r6
 80090a2:	1c43      	adds	r3, r0, #1
 80090a4:	d100      	bne.n	80090a8 <_printf_float+0x470>
 80090a6:	e625      	b.n	8008cf4 <_printf_float+0xbc>
 80090a8:	3501      	adds	r5, #1
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dcf0      	bgt.n	8009096 <_printf_float+0x45e>
 80090b4:	e6f8      	b.n	8008ea8 <_printf_float+0x270>
 80090b6:	2500      	movs	r5, #0
 80090b8:	e7f7      	b.n	80090aa <_printf_float+0x472>
 80090ba:	46c0      	nop			; (mov r8, r8)

080090bc <_printf_common>:
 80090bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090be:	0015      	movs	r5, r2
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	688a      	ldr	r2, [r1, #8]
 80090c4:	690b      	ldr	r3, [r1, #16]
 80090c6:	000c      	movs	r4, r1
 80090c8:	9000      	str	r0, [sp, #0]
 80090ca:	4293      	cmp	r3, r2
 80090cc:	da00      	bge.n	80090d0 <_printf_common+0x14>
 80090ce:	0013      	movs	r3, r2
 80090d0:	0022      	movs	r2, r4
 80090d2:	602b      	str	r3, [r5, #0]
 80090d4:	3243      	adds	r2, #67	; 0x43
 80090d6:	7812      	ldrb	r2, [r2, #0]
 80090d8:	2a00      	cmp	r2, #0
 80090da:	d001      	beq.n	80090e0 <_printf_common+0x24>
 80090dc:	3301      	adds	r3, #1
 80090de:	602b      	str	r3, [r5, #0]
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	069b      	lsls	r3, r3, #26
 80090e4:	d502      	bpl.n	80090ec <_printf_common+0x30>
 80090e6:	682b      	ldr	r3, [r5, #0]
 80090e8:	3302      	adds	r3, #2
 80090ea:	602b      	str	r3, [r5, #0]
 80090ec:	6822      	ldr	r2, [r4, #0]
 80090ee:	2306      	movs	r3, #6
 80090f0:	0017      	movs	r7, r2
 80090f2:	401f      	ands	r7, r3
 80090f4:	421a      	tst	r2, r3
 80090f6:	d027      	beq.n	8009148 <_printf_common+0x8c>
 80090f8:	0023      	movs	r3, r4
 80090fa:	3343      	adds	r3, #67	; 0x43
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	1e5a      	subs	r2, r3, #1
 8009100:	4193      	sbcs	r3, r2
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	0692      	lsls	r2, r2, #26
 8009106:	d430      	bmi.n	800916a <_printf_common+0xae>
 8009108:	0022      	movs	r2, r4
 800910a:	9901      	ldr	r1, [sp, #4]
 800910c:	9800      	ldr	r0, [sp, #0]
 800910e:	9e08      	ldr	r6, [sp, #32]
 8009110:	3243      	adds	r2, #67	; 0x43
 8009112:	47b0      	blx	r6
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d025      	beq.n	8009164 <_printf_common+0xa8>
 8009118:	2306      	movs	r3, #6
 800911a:	6820      	ldr	r0, [r4, #0]
 800911c:	682a      	ldr	r2, [r5, #0]
 800911e:	68e1      	ldr	r1, [r4, #12]
 8009120:	2500      	movs	r5, #0
 8009122:	4003      	ands	r3, r0
 8009124:	2b04      	cmp	r3, #4
 8009126:	d103      	bne.n	8009130 <_printf_common+0x74>
 8009128:	1a8d      	subs	r5, r1, r2
 800912a:	43eb      	mvns	r3, r5
 800912c:	17db      	asrs	r3, r3, #31
 800912e:	401d      	ands	r5, r3
 8009130:	68a3      	ldr	r3, [r4, #8]
 8009132:	6922      	ldr	r2, [r4, #16]
 8009134:	4293      	cmp	r3, r2
 8009136:	dd01      	ble.n	800913c <_printf_common+0x80>
 8009138:	1a9b      	subs	r3, r3, r2
 800913a:	18ed      	adds	r5, r5, r3
 800913c:	2700      	movs	r7, #0
 800913e:	42bd      	cmp	r5, r7
 8009140:	d120      	bne.n	8009184 <_printf_common+0xc8>
 8009142:	2000      	movs	r0, #0
 8009144:	e010      	b.n	8009168 <_printf_common+0xac>
 8009146:	3701      	adds	r7, #1
 8009148:	68e3      	ldr	r3, [r4, #12]
 800914a:	682a      	ldr	r2, [r5, #0]
 800914c:	1a9b      	subs	r3, r3, r2
 800914e:	42bb      	cmp	r3, r7
 8009150:	ddd2      	ble.n	80090f8 <_printf_common+0x3c>
 8009152:	0022      	movs	r2, r4
 8009154:	2301      	movs	r3, #1
 8009156:	9901      	ldr	r1, [sp, #4]
 8009158:	9800      	ldr	r0, [sp, #0]
 800915a:	9e08      	ldr	r6, [sp, #32]
 800915c:	3219      	adds	r2, #25
 800915e:	47b0      	blx	r6
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d1f0      	bne.n	8009146 <_printf_common+0x8a>
 8009164:	2001      	movs	r0, #1
 8009166:	4240      	negs	r0, r0
 8009168:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800916a:	2030      	movs	r0, #48	; 0x30
 800916c:	18e1      	adds	r1, r4, r3
 800916e:	3143      	adds	r1, #67	; 0x43
 8009170:	7008      	strb	r0, [r1, #0]
 8009172:	0021      	movs	r1, r4
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	3145      	adds	r1, #69	; 0x45
 8009178:	7809      	ldrb	r1, [r1, #0]
 800917a:	18a2      	adds	r2, r4, r2
 800917c:	3243      	adds	r2, #67	; 0x43
 800917e:	3302      	adds	r3, #2
 8009180:	7011      	strb	r1, [r2, #0]
 8009182:	e7c1      	b.n	8009108 <_printf_common+0x4c>
 8009184:	0022      	movs	r2, r4
 8009186:	2301      	movs	r3, #1
 8009188:	9901      	ldr	r1, [sp, #4]
 800918a:	9800      	ldr	r0, [sp, #0]
 800918c:	9e08      	ldr	r6, [sp, #32]
 800918e:	321a      	adds	r2, #26
 8009190:	47b0      	blx	r6
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	d0e6      	beq.n	8009164 <_printf_common+0xa8>
 8009196:	3701      	adds	r7, #1
 8009198:	e7d1      	b.n	800913e <_printf_common+0x82>
	...

0800919c <_printf_i>:
 800919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919e:	b08b      	sub	sp, #44	; 0x2c
 80091a0:	9206      	str	r2, [sp, #24]
 80091a2:	000a      	movs	r2, r1
 80091a4:	3243      	adds	r2, #67	; 0x43
 80091a6:	9307      	str	r3, [sp, #28]
 80091a8:	9005      	str	r0, [sp, #20]
 80091aa:	9204      	str	r2, [sp, #16]
 80091ac:	7e0a      	ldrb	r2, [r1, #24]
 80091ae:	000c      	movs	r4, r1
 80091b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091b2:	2a78      	cmp	r2, #120	; 0x78
 80091b4:	d807      	bhi.n	80091c6 <_printf_i+0x2a>
 80091b6:	2a62      	cmp	r2, #98	; 0x62
 80091b8:	d809      	bhi.n	80091ce <_printf_i+0x32>
 80091ba:	2a00      	cmp	r2, #0
 80091bc:	d100      	bne.n	80091c0 <_printf_i+0x24>
 80091be:	e0c1      	b.n	8009344 <_printf_i+0x1a8>
 80091c0:	2a58      	cmp	r2, #88	; 0x58
 80091c2:	d100      	bne.n	80091c6 <_printf_i+0x2a>
 80091c4:	e08c      	b.n	80092e0 <_printf_i+0x144>
 80091c6:	0026      	movs	r6, r4
 80091c8:	3642      	adds	r6, #66	; 0x42
 80091ca:	7032      	strb	r2, [r6, #0]
 80091cc:	e022      	b.n	8009214 <_printf_i+0x78>
 80091ce:	0010      	movs	r0, r2
 80091d0:	3863      	subs	r0, #99	; 0x63
 80091d2:	2815      	cmp	r0, #21
 80091d4:	d8f7      	bhi.n	80091c6 <_printf_i+0x2a>
 80091d6:	f7f6 ffa7 	bl	8000128 <__gnu_thumb1_case_shi>
 80091da:	0016      	.short	0x0016
 80091dc:	fff6001f 	.word	0xfff6001f
 80091e0:	fff6fff6 	.word	0xfff6fff6
 80091e4:	001ffff6 	.word	0x001ffff6
 80091e8:	fff6fff6 	.word	0xfff6fff6
 80091ec:	fff6fff6 	.word	0xfff6fff6
 80091f0:	003600a8 	.word	0x003600a8
 80091f4:	fff6009a 	.word	0xfff6009a
 80091f8:	00b9fff6 	.word	0x00b9fff6
 80091fc:	0036fff6 	.word	0x0036fff6
 8009200:	fff6fff6 	.word	0xfff6fff6
 8009204:	009e      	.short	0x009e
 8009206:	0026      	movs	r6, r4
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	3642      	adds	r6, #66	; 0x42
 800920c:	1d11      	adds	r1, r2, #4
 800920e:	6019      	str	r1, [r3, #0]
 8009210:	6813      	ldr	r3, [r2, #0]
 8009212:	7033      	strb	r3, [r6, #0]
 8009214:	2301      	movs	r3, #1
 8009216:	e0a7      	b.n	8009368 <_printf_i+0x1cc>
 8009218:	6808      	ldr	r0, [r1, #0]
 800921a:	6819      	ldr	r1, [r3, #0]
 800921c:	1d0a      	adds	r2, r1, #4
 800921e:	0605      	lsls	r5, r0, #24
 8009220:	d50b      	bpl.n	800923a <_printf_i+0x9e>
 8009222:	680d      	ldr	r5, [r1, #0]
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	2d00      	cmp	r5, #0
 8009228:	da03      	bge.n	8009232 <_printf_i+0x96>
 800922a:	232d      	movs	r3, #45	; 0x2d
 800922c:	9a04      	ldr	r2, [sp, #16]
 800922e:	426d      	negs	r5, r5
 8009230:	7013      	strb	r3, [r2, #0]
 8009232:	4b61      	ldr	r3, [pc, #388]	; (80093b8 <_printf_i+0x21c>)
 8009234:	270a      	movs	r7, #10
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	e01b      	b.n	8009272 <_printf_i+0xd6>
 800923a:	680d      	ldr	r5, [r1, #0]
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	0641      	lsls	r1, r0, #25
 8009240:	d5f1      	bpl.n	8009226 <_printf_i+0x8a>
 8009242:	b22d      	sxth	r5, r5
 8009244:	e7ef      	b.n	8009226 <_printf_i+0x8a>
 8009246:	680d      	ldr	r5, [r1, #0]
 8009248:	6819      	ldr	r1, [r3, #0]
 800924a:	1d08      	adds	r0, r1, #4
 800924c:	6018      	str	r0, [r3, #0]
 800924e:	062e      	lsls	r6, r5, #24
 8009250:	d501      	bpl.n	8009256 <_printf_i+0xba>
 8009252:	680d      	ldr	r5, [r1, #0]
 8009254:	e003      	b.n	800925e <_printf_i+0xc2>
 8009256:	066d      	lsls	r5, r5, #25
 8009258:	d5fb      	bpl.n	8009252 <_printf_i+0xb6>
 800925a:	680d      	ldr	r5, [r1, #0]
 800925c:	b2ad      	uxth	r5, r5
 800925e:	4b56      	ldr	r3, [pc, #344]	; (80093b8 <_printf_i+0x21c>)
 8009260:	2708      	movs	r7, #8
 8009262:	9303      	str	r3, [sp, #12]
 8009264:	2a6f      	cmp	r2, #111	; 0x6f
 8009266:	d000      	beq.n	800926a <_printf_i+0xce>
 8009268:	3702      	adds	r7, #2
 800926a:	0023      	movs	r3, r4
 800926c:	2200      	movs	r2, #0
 800926e:	3343      	adds	r3, #67	; 0x43
 8009270:	701a      	strb	r2, [r3, #0]
 8009272:	6863      	ldr	r3, [r4, #4]
 8009274:	60a3      	str	r3, [r4, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	db03      	blt.n	8009282 <_printf_i+0xe6>
 800927a:	2204      	movs	r2, #4
 800927c:	6821      	ldr	r1, [r4, #0]
 800927e:	4391      	bics	r1, r2
 8009280:	6021      	str	r1, [r4, #0]
 8009282:	2d00      	cmp	r5, #0
 8009284:	d102      	bne.n	800928c <_printf_i+0xf0>
 8009286:	9e04      	ldr	r6, [sp, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00c      	beq.n	80092a6 <_printf_i+0x10a>
 800928c:	9e04      	ldr	r6, [sp, #16]
 800928e:	0028      	movs	r0, r5
 8009290:	0039      	movs	r1, r7
 8009292:	f7f6 ffd9 	bl	8000248 <__aeabi_uidivmod>
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	3e01      	subs	r6, #1
 800929a:	5c5b      	ldrb	r3, [r3, r1]
 800929c:	7033      	strb	r3, [r6, #0]
 800929e:	002b      	movs	r3, r5
 80092a0:	0005      	movs	r5, r0
 80092a2:	429f      	cmp	r7, r3
 80092a4:	d9f3      	bls.n	800928e <_printf_i+0xf2>
 80092a6:	2f08      	cmp	r7, #8
 80092a8:	d109      	bne.n	80092be <_printf_i+0x122>
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	07db      	lsls	r3, r3, #31
 80092ae:	d506      	bpl.n	80092be <_printf_i+0x122>
 80092b0:	6863      	ldr	r3, [r4, #4]
 80092b2:	6922      	ldr	r2, [r4, #16]
 80092b4:	4293      	cmp	r3, r2
 80092b6:	dc02      	bgt.n	80092be <_printf_i+0x122>
 80092b8:	2330      	movs	r3, #48	; 0x30
 80092ba:	3e01      	subs	r6, #1
 80092bc:	7033      	strb	r3, [r6, #0]
 80092be:	9b04      	ldr	r3, [sp, #16]
 80092c0:	1b9b      	subs	r3, r3, r6
 80092c2:	6123      	str	r3, [r4, #16]
 80092c4:	9b07      	ldr	r3, [sp, #28]
 80092c6:	0021      	movs	r1, r4
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	9805      	ldr	r0, [sp, #20]
 80092cc:	9b06      	ldr	r3, [sp, #24]
 80092ce:	aa09      	add	r2, sp, #36	; 0x24
 80092d0:	f7ff fef4 	bl	80090bc <_printf_common>
 80092d4:	1c43      	adds	r3, r0, #1
 80092d6:	d14c      	bne.n	8009372 <_printf_i+0x1d6>
 80092d8:	2001      	movs	r0, #1
 80092da:	4240      	negs	r0, r0
 80092dc:	b00b      	add	sp, #44	; 0x2c
 80092de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e0:	3145      	adds	r1, #69	; 0x45
 80092e2:	700a      	strb	r2, [r1, #0]
 80092e4:	4a34      	ldr	r2, [pc, #208]	; (80093b8 <_printf_i+0x21c>)
 80092e6:	9203      	str	r2, [sp, #12]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	6821      	ldr	r1, [r4, #0]
 80092ec:	ca20      	ldmia	r2!, {r5}
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	0608      	lsls	r0, r1, #24
 80092f2:	d516      	bpl.n	8009322 <_printf_i+0x186>
 80092f4:	07cb      	lsls	r3, r1, #31
 80092f6:	d502      	bpl.n	80092fe <_printf_i+0x162>
 80092f8:	2320      	movs	r3, #32
 80092fa:	4319      	orrs	r1, r3
 80092fc:	6021      	str	r1, [r4, #0]
 80092fe:	2710      	movs	r7, #16
 8009300:	2d00      	cmp	r5, #0
 8009302:	d1b2      	bne.n	800926a <_printf_i+0xce>
 8009304:	2320      	movs	r3, #32
 8009306:	6822      	ldr	r2, [r4, #0]
 8009308:	439a      	bics	r2, r3
 800930a:	6022      	str	r2, [r4, #0]
 800930c:	e7ad      	b.n	800926a <_printf_i+0xce>
 800930e:	2220      	movs	r2, #32
 8009310:	6809      	ldr	r1, [r1, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	6022      	str	r2, [r4, #0]
 8009316:	0022      	movs	r2, r4
 8009318:	2178      	movs	r1, #120	; 0x78
 800931a:	3245      	adds	r2, #69	; 0x45
 800931c:	7011      	strb	r1, [r2, #0]
 800931e:	4a27      	ldr	r2, [pc, #156]	; (80093bc <_printf_i+0x220>)
 8009320:	e7e1      	b.n	80092e6 <_printf_i+0x14a>
 8009322:	0648      	lsls	r0, r1, #25
 8009324:	d5e6      	bpl.n	80092f4 <_printf_i+0x158>
 8009326:	b2ad      	uxth	r5, r5
 8009328:	e7e4      	b.n	80092f4 <_printf_i+0x158>
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	680d      	ldr	r5, [r1, #0]
 800932e:	1d10      	adds	r0, r2, #4
 8009330:	6949      	ldr	r1, [r1, #20]
 8009332:	6018      	str	r0, [r3, #0]
 8009334:	6813      	ldr	r3, [r2, #0]
 8009336:	062e      	lsls	r6, r5, #24
 8009338:	d501      	bpl.n	800933e <_printf_i+0x1a2>
 800933a:	6019      	str	r1, [r3, #0]
 800933c:	e002      	b.n	8009344 <_printf_i+0x1a8>
 800933e:	066d      	lsls	r5, r5, #25
 8009340:	d5fb      	bpl.n	800933a <_printf_i+0x19e>
 8009342:	8019      	strh	r1, [r3, #0]
 8009344:	2300      	movs	r3, #0
 8009346:	9e04      	ldr	r6, [sp, #16]
 8009348:	6123      	str	r3, [r4, #16]
 800934a:	e7bb      	b.n	80092c4 <_printf_i+0x128>
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	1d11      	adds	r1, r2, #4
 8009350:	6019      	str	r1, [r3, #0]
 8009352:	6816      	ldr	r6, [r2, #0]
 8009354:	2100      	movs	r1, #0
 8009356:	0030      	movs	r0, r6
 8009358:	6862      	ldr	r2, [r4, #4]
 800935a:	f002 fb71 	bl	800ba40 <memchr>
 800935e:	2800      	cmp	r0, #0
 8009360:	d001      	beq.n	8009366 <_printf_i+0x1ca>
 8009362:	1b80      	subs	r0, r0, r6
 8009364:	6060      	str	r0, [r4, #4]
 8009366:	6863      	ldr	r3, [r4, #4]
 8009368:	6123      	str	r3, [r4, #16]
 800936a:	2300      	movs	r3, #0
 800936c:	9a04      	ldr	r2, [sp, #16]
 800936e:	7013      	strb	r3, [r2, #0]
 8009370:	e7a8      	b.n	80092c4 <_printf_i+0x128>
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	0032      	movs	r2, r6
 8009376:	9906      	ldr	r1, [sp, #24]
 8009378:	9805      	ldr	r0, [sp, #20]
 800937a:	9d07      	ldr	r5, [sp, #28]
 800937c:	47a8      	blx	r5
 800937e:	1c43      	adds	r3, r0, #1
 8009380:	d0aa      	beq.n	80092d8 <_printf_i+0x13c>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	079b      	lsls	r3, r3, #30
 8009386:	d415      	bmi.n	80093b4 <_printf_i+0x218>
 8009388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938a:	68e0      	ldr	r0, [r4, #12]
 800938c:	4298      	cmp	r0, r3
 800938e:	daa5      	bge.n	80092dc <_printf_i+0x140>
 8009390:	0018      	movs	r0, r3
 8009392:	e7a3      	b.n	80092dc <_printf_i+0x140>
 8009394:	0022      	movs	r2, r4
 8009396:	2301      	movs	r3, #1
 8009398:	9906      	ldr	r1, [sp, #24]
 800939a:	9805      	ldr	r0, [sp, #20]
 800939c:	9e07      	ldr	r6, [sp, #28]
 800939e:	3219      	adds	r2, #25
 80093a0:	47b0      	blx	r6
 80093a2:	1c43      	adds	r3, r0, #1
 80093a4:	d098      	beq.n	80092d8 <_printf_i+0x13c>
 80093a6:	3501      	adds	r5, #1
 80093a8:	68e3      	ldr	r3, [r4, #12]
 80093aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	42ab      	cmp	r3, r5
 80093b0:	dcf0      	bgt.n	8009394 <_printf_i+0x1f8>
 80093b2:	e7e9      	b.n	8009388 <_printf_i+0x1ec>
 80093b4:	2500      	movs	r5, #0
 80093b6:	e7f7      	b.n	80093a8 <_printf_i+0x20c>
 80093b8:	0800d67e 	.word	0x0800d67e
 80093bc:	0800d68f 	.word	0x0800d68f

080093c0 <_scanf_float>:
 80093c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093c2:	b08b      	sub	sp, #44	; 0x2c
 80093c4:	0015      	movs	r5, r2
 80093c6:	9001      	str	r0, [sp, #4]
 80093c8:	22ae      	movs	r2, #174	; 0xae
 80093ca:	2000      	movs	r0, #0
 80093cc:	9306      	str	r3, [sp, #24]
 80093ce:	688b      	ldr	r3, [r1, #8]
 80093d0:	000e      	movs	r6, r1
 80093d2:	1e59      	subs	r1, r3, #1
 80093d4:	0052      	lsls	r2, r2, #1
 80093d6:	9005      	str	r0, [sp, #20]
 80093d8:	4291      	cmp	r1, r2
 80093da:	d905      	bls.n	80093e8 <_scanf_float+0x28>
 80093dc:	3b5e      	subs	r3, #94	; 0x5e
 80093de:	3bff      	subs	r3, #255	; 0xff
 80093e0:	9305      	str	r3, [sp, #20]
 80093e2:	235e      	movs	r3, #94	; 0x5e
 80093e4:	33ff      	adds	r3, #255	; 0xff
 80093e6:	60b3      	str	r3, [r6, #8]
 80093e8:	23f0      	movs	r3, #240	; 0xf0
 80093ea:	6832      	ldr	r2, [r6, #0]
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	4313      	orrs	r3, r2
 80093f0:	6033      	str	r3, [r6, #0]
 80093f2:	0033      	movs	r3, r6
 80093f4:	2400      	movs	r4, #0
 80093f6:	331c      	adds	r3, #28
 80093f8:	001f      	movs	r7, r3
 80093fa:	9303      	str	r3, [sp, #12]
 80093fc:	9402      	str	r4, [sp, #8]
 80093fe:	9408      	str	r4, [sp, #32]
 8009400:	9407      	str	r4, [sp, #28]
 8009402:	9400      	str	r4, [sp, #0]
 8009404:	9404      	str	r4, [sp, #16]
 8009406:	68b2      	ldr	r2, [r6, #8]
 8009408:	2a00      	cmp	r2, #0
 800940a:	d00a      	beq.n	8009422 <_scanf_float+0x62>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b4e      	cmp	r3, #78	; 0x4e
 8009412:	d844      	bhi.n	800949e <_scanf_float+0xde>
 8009414:	0018      	movs	r0, r3
 8009416:	2b40      	cmp	r3, #64	; 0x40
 8009418:	d82c      	bhi.n	8009474 <_scanf_float+0xb4>
 800941a:	382b      	subs	r0, #43	; 0x2b
 800941c:	b2c1      	uxtb	r1, r0
 800941e:	290e      	cmp	r1, #14
 8009420:	d92a      	bls.n	8009478 <_scanf_float+0xb8>
 8009422:	9b00      	ldr	r3, [sp, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <_scanf_float+0x70>
 8009428:	6832      	ldr	r2, [r6, #0]
 800942a:	4ba4      	ldr	r3, [pc, #656]	; (80096bc <_scanf_float+0x2fc>)
 800942c:	4013      	ands	r3, r2
 800942e:	6033      	str	r3, [r6, #0]
 8009430:	9b02      	ldr	r3, [sp, #8]
 8009432:	3b01      	subs	r3, #1
 8009434:	2b01      	cmp	r3, #1
 8009436:	d900      	bls.n	800943a <_scanf_float+0x7a>
 8009438:	e0f9      	b.n	800962e <_scanf_float+0x26e>
 800943a:	24be      	movs	r4, #190	; 0xbe
 800943c:	0064      	lsls	r4, r4, #1
 800943e:	9b03      	ldr	r3, [sp, #12]
 8009440:	429f      	cmp	r7, r3
 8009442:	d900      	bls.n	8009446 <_scanf_float+0x86>
 8009444:	e0e9      	b.n	800961a <_scanf_float+0x25a>
 8009446:	2301      	movs	r3, #1
 8009448:	9302      	str	r3, [sp, #8]
 800944a:	e185      	b.n	8009758 <_scanf_float+0x398>
 800944c:	0018      	movs	r0, r3
 800944e:	3861      	subs	r0, #97	; 0x61
 8009450:	280d      	cmp	r0, #13
 8009452:	d8e6      	bhi.n	8009422 <_scanf_float+0x62>
 8009454:	f7f6 fe68 	bl	8000128 <__gnu_thumb1_case_shi>
 8009458:	ffe50083 	.word	0xffe50083
 800945c:	ffe5ffe5 	.word	0xffe5ffe5
 8009460:	00a200b6 	.word	0x00a200b6
 8009464:	ffe5ffe5 	.word	0xffe5ffe5
 8009468:	ffe50089 	.word	0xffe50089
 800946c:	ffe5ffe5 	.word	0xffe5ffe5
 8009470:	0065ffe5 	.word	0x0065ffe5
 8009474:	3841      	subs	r0, #65	; 0x41
 8009476:	e7eb      	b.n	8009450 <_scanf_float+0x90>
 8009478:	280e      	cmp	r0, #14
 800947a:	d8d2      	bhi.n	8009422 <_scanf_float+0x62>
 800947c:	f7f6 fe54 	bl	8000128 <__gnu_thumb1_case_shi>
 8009480:	ffd1004b 	.word	0xffd1004b
 8009484:	0098004b 	.word	0x0098004b
 8009488:	0020ffd1 	.word	0x0020ffd1
 800948c:	00400040 	.word	0x00400040
 8009490:	00400040 	.word	0x00400040
 8009494:	00400040 	.word	0x00400040
 8009498:	00400040 	.word	0x00400040
 800949c:	0040      	.short	0x0040
 800949e:	2b6e      	cmp	r3, #110	; 0x6e
 80094a0:	d809      	bhi.n	80094b6 <_scanf_float+0xf6>
 80094a2:	2b60      	cmp	r3, #96	; 0x60
 80094a4:	d8d2      	bhi.n	800944c <_scanf_float+0x8c>
 80094a6:	2b54      	cmp	r3, #84	; 0x54
 80094a8:	d07d      	beq.n	80095a6 <_scanf_float+0x1e6>
 80094aa:	2b59      	cmp	r3, #89	; 0x59
 80094ac:	d1b9      	bne.n	8009422 <_scanf_float+0x62>
 80094ae:	2c07      	cmp	r4, #7
 80094b0:	d1b7      	bne.n	8009422 <_scanf_float+0x62>
 80094b2:	2408      	movs	r4, #8
 80094b4:	e02c      	b.n	8009510 <_scanf_float+0x150>
 80094b6:	2b74      	cmp	r3, #116	; 0x74
 80094b8:	d075      	beq.n	80095a6 <_scanf_float+0x1e6>
 80094ba:	2b79      	cmp	r3, #121	; 0x79
 80094bc:	d0f7      	beq.n	80094ae <_scanf_float+0xee>
 80094be:	e7b0      	b.n	8009422 <_scanf_float+0x62>
 80094c0:	6831      	ldr	r1, [r6, #0]
 80094c2:	05c8      	lsls	r0, r1, #23
 80094c4:	d51c      	bpl.n	8009500 <_scanf_float+0x140>
 80094c6:	2380      	movs	r3, #128	; 0x80
 80094c8:	4399      	bics	r1, r3
 80094ca:	9b00      	ldr	r3, [sp, #0]
 80094cc:	6031      	str	r1, [r6, #0]
 80094ce:	3301      	adds	r3, #1
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <_scanf_float+0x120>
 80094d8:	3b01      	subs	r3, #1
 80094da:	3201      	adds	r2, #1
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	60b2      	str	r2, [r6, #8]
 80094e0:	68b3      	ldr	r3, [r6, #8]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	60b3      	str	r3, [r6, #8]
 80094e6:	6933      	ldr	r3, [r6, #16]
 80094e8:	3301      	adds	r3, #1
 80094ea:	6133      	str	r3, [r6, #16]
 80094ec:	686b      	ldr	r3, [r5, #4]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	606b      	str	r3, [r5, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	dc00      	bgt.n	80094f8 <_scanf_float+0x138>
 80094f6:	e086      	b.n	8009606 <_scanf_float+0x246>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	3301      	adds	r3, #1
 80094fc:	602b      	str	r3, [r5, #0]
 80094fe:	e782      	b.n	8009406 <_scanf_float+0x46>
 8009500:	9a02      	ldr	r2, [sp, #8]
 8009502:	1912      	adds	r2, r2, r4
 8009504:	2a00      	cmp	r2, #0
 8009506:	d18c      	bne.n	8009422 <_scanf_float+0x62>
 8009508:	4a6d      	ldr	r2, [pc, #436]	; (80096c0 <_scanf_float+0x300>)
 800950a:	6831      	ldr	r1, [r6, #0]
 800950c:	400a      	ands	r2, r1
 800950e:	6032      	str	r2, [r6, #0]
 8009510:	703b      	strb	r3, [r7, #0]
 8009512:	3701      	adds	r7, #1
 8009514:	e7e4      	b.n	80094e0 <_scanf_float+0x120>
 8009516:	2180      	movs	r1, #128	; 0x80
 8009518:	6832      	ldr	r2, [r6, #0]
 800951a:	420a      	tst	r2, r1
 800951c:	d081      	beq.n	8009422 <_scanf_float+0x62>
 800951e:	438a      	bics	r2, r1
 8009520:	e7f5      	b.n	800950e <_scanf_float+0x14e>
 8009522:	9a02      	ldr	r2, [sp, #8]
 8009524:	2a00      	cmp	r2, #0
 8009526:	d10f      	bne.n	8009548 <_scanf_float+0x188>
 8009528:	9a00      	ldr	r2, [sp, #0]
 800952a:	2a00      	cmp	r2, #0
 800952c:	d10f      	bne.n	800954e <_scanf_float+0x18e>
 800952e:	6832      	ldr	r2, [r6, #0]
 8009530:	21e0      	movs	r1, #224	; 0xe0
 8009532:	0010      	movs	r0, r2
 8009534:	00c9      	lsls	r1, r1, #3
 8009536:	4008      	ands	r0, r1
 8009538:	4288      	cmp	r0, r1
 800953a:	d108      	bne.n	800954e <_scanf_float+0x18e>
 800953c:	4961      	ldr	r1, [pc, #388]	; (80096c4 <_scanf_float+0x304>)
 800953e:	400a      	ands	r2, r1
 8009540:	6032      	str	r2, [r6, #0]
 8009542:	2201      	movs	r2, #1
 8009544:	9202      	str	r2, [sp, #8]
 8009546:	e7e3      	b.n	8009510 <_scanf_float+0x150>
 8009548:	9a02      	ldr	r2, [sp, #8]
 800954a:	2a02      	cmp	r2, #2
 800954c:	d059      	beq.n	8009602 <_scanf_float+0x242>
 800954e:	2c01      	cmp	r4, #1
 8009550:	d002      	beq.n	8009558 <_scanf_float+0x198>
 8009552:	2c04      	cmp	r4, #4
 8009554:	d000      	beq.n	8009558 <_scanf_float+0x198>
 8009556:	e764      	b.n	8009422 <_scanf_float+0x62>
 8009558:	3401      	adds	r4, #1
 800955a:	b2e4      	uxtb	r4, r4
 800955c:	e7d8      	b.n	8009510 <_scanf_float+0x150>
 800955e:	9a02      	ldr	r2, [sp, #8]
 8009560:	2a01      	cmp	r2, #1
 8009562:	d000      	beq.n	8009566 <_scanf_float+0x1a6>
 8009564:	e75d      	b.n	8009422 <_scanf_float+0x62>
 8009566:	2202      	movs	r2, #2
 8009568:	e7ec      	b.n	8009544 <_scanf_float+0x184>
 800956a:	2c00      	cmp	r4, #0
 800956c:	d110      	bne.n	8009590 <_scanf_float+0x1d0>
 800956e:	9a00      	ldr	r2, [sp, #0]
 8009570:	2a00      	cmp	r2, #0
 8009572:	d000      	beq.n	8009576 <_scanf_float+0x1b6>
 8009574:	e758      	b.n	8009428 <_scanf_float+0x68>
 8009576:	6832      	ldr	r2, [r6, #0]
 8009578:	21e0      	movs	r1, #224	; 0xe0
 800957a:	0010      	movs	r0, r2
 800957c:	00c9      	lsls	r1, r1, #3
 800957e:	4008      	ands	r0, r1
 8009580:	4288      	cmp	r0, r1
 8009582:	d000      	beq.n	8009586 <_scanf_float+0x1c6>
 8009584:	e754      	b.n	8009430 <_scanf_float+0x70>
 8009586:	494f      	ldr	r1, [pc, #316]	; (80096c4 <_scanf_float+0x304>)
 8009588:	3401      	adds	r4, #1
 800958a:	400a      	ands	r2, r1
 800958c:	6032      	str	r2, [r6, #0]
 800958e:	e7bf      	b.n	8009510 <_scanf_float+0x150>
 8009590:	21fd      	movs	r1, #253	; 0xfd
 8009592:	1ee2      	subs	r2, r4, #3
 8009594:	420a      	tst	r2, r1
 8009596:	d000      	beq.n	800959a <_scanf_float+0x1da>
 8009598:	e743      	b.n	8009422 <_scanf_float+0x62>
 800959a:	e7dd      	b.n	8009558 <_scanf_float+0x198>
 800959c:	2c02      	cmp	r4, #2
 800959e:	d000      	beq.n	80095a2 <_scanf_float+0x1e2>
 80095a0:	e73f      	b.n	8009422 <_scanf_float+0x62>
 80095a2:	2403      	movs	r4, #3
 80095a4:	e7b4      	b.n	8009510 <_scanf_float+0x150>
 80095a6:	2c06      	cmp	r4, #6
 80095a8:	d000      	beq.n	80095ac <_scanf_float+0x1ec>
 80095aa:	e73a      	b.n	8009422 <_scanf_float+0x62>
 80095ac:	2407      	movs	r4, #7
 80095ae:	e7af      	b.n	8009510 <_scanf_float+0x150>
 80095b0:	6832      	ldr	r2, [r6, #0]
 80095b2:	0591      	lsls	r1, r2, #22
 80095b4:	d400      	bmi.n	80095b8 <_scanf_float+0x1f8>
 80095b6:	e734      	b.n	8009422 <_scanf_float+0x62>
 80095b8:	4943      	ldr	r1, [pc, #268]	; (80096c8 <_scanf_float+0x308>)
 80095ba:	400a      	ands	r2, r1
 80095bc:	6032      	str	r2, [r6, #0]
 80095be:	9a00      	ldr	r2, [sp, #0]
 80095c0:	9204      	str	r2, [sp, #16]
 80095c2:	e7a5      	b.n	8009510 <_scanf_float+0x150>
 80095c4:	21a0      	movs	r1, #160	; 0xa0
 80095c6:	2080      	movs	r0, #128	; 0x80
 80095c8:	6832      	ldr	r2, [r6, #0]
 80095ca:	00c9      	lsls	r1, r1, #3
 80095cc:	4011      	ands	r1, r2
 80095ce:	00c0      	lsls	r0, r0, #3
 80095d0:	4281      	cmp	r1, r0
 80095d2:	d006      	beq.n	80095e2 <_scanf_float+0x222>
 80095d4:	4202      	tst	r2, r0
 80095d6:	d100      	bne.n	80095da <_scanf_float+0x21a>
 80095d8:	e723      	b.n	8009422 <_scanf_float+0x62>
 80095da:	9900      	ldr	r1, [sp, #0]
 80095dc:	2900      	cmp	r1, #0
 80095de:	d100      	bne.n	80095e2 <_scanf_float+0x222>
 80095e0:	e726      	b.n	8009430 <_scanf_float+0x70>
 80095e2:	0591      	lsls	r1, r2, #22
 80095e4:	d404      	bmi.n	80095f0 <_scanf_float+0x230>
 80095e6:	9900      	ldr	r1, [sp, #0]
 80095e8:	9804      	ldr	r0, [sp, #16]
 80095ea:	9708      	str	r7, [sp, #32]
 80095ec:	1a09      	subs	r1, r1, r0
 80095ee:	9107      	str	r1, [sp, #28]
 80095f0:	4934      	ldr	r1, [pc, #208]	; (80096c4 <_scanf_float+0x304>)
 80095f2:	400a      	ands	r2, r1
 80095f4:	21c0      	movs	r1, #192	; 0xc0
 80095f6:	0049      	lsls	r1, r1, #1
 80095f8:	430a      	orrs	r2, r1
 80095fa:	6032      	str	r2, [r6, #0]
 80095fc:	2200      	movs	r2, #0
 80095fe:	9200      	str	r2, [sp, #0]
 8009600:	e786      	b.n	8009510 <_scanf_float+0x150>
 8009602:	2203      	movs	r2, #3
 8009604:	e79e      	b.n	8009544 <_scanf_float+0x184>
 8009606:	23c0      	movs	r3, #192	; 0xc0
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	0029      	movs	r1, r5
 800960c:	58f3      	ldr	r3, [r6, r3]
 800960e:	9801      	ldr	r0, [sp, #4]
 8009610:	4798      	blx	r3
 8009612:	2800      	cmp	r0, #0
 8009614:	d100      	bne.n	8009618 <_scanf_float+0x258>
 8009616:	e6f6      	b.n	8009406 <_scanf_float+0x46>
 8009618:	e703      	b.n	8009422 <_scanf_float+0x62>
 800961a:	3f01      	subs	r7, #1
 800961c:	5933      	ldr	r3, [r6, r4]
 800961e:	002a      	movs	r2, r5
 8009620:	7839      	ldrb	r1, [r7, #0]
 8009622:	9801      	ldr	r0, [sp, #4]
 8009624:	4798      	blx	r3
 8009626:	6933      	ldr	r3, [r6, #16]
 8009628:	3b01      	subs	r3, #1
 800962a:	6133      	str	r3, [r6, #16]
 800962c:	e707      	b.n	800943e <_scanf_float+0x7e>
 800962e:	1e63      	subs	r3, r4, #1
 8009630:	2b06      	cmp	r3, #6
 8009632:	d80e      	bhi.n	8009652 <_scanf_float+0x292>
 8009634:	9702      	str	r7, [sp, #8]
 8009636:	2c02      	cmp	r4, #2
 8009638:	d920      	bls.n	800967c <_scanf_float+0x2bc>
 800963a:	1be3      	subs	r3, r4, r7
 800963c:	b2db      	uxtb	r3, r3
 800963e:	9305      	str	r3, [sp, #20]
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	9a05      	ldr	r2, [sp, #20]
 8009644:	189b      	adds	r3, r3, r2
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b03      	cmp	r3, #3
 800964a:	d827      	bhi.n	800969c <_scanf_float+0x2dc>
 800964c:	3c03      	subs	r4, #3
 800964e:	b2e4      	uxtb	r4, r4
 8009650:	1b3f      	subs	r7, r7, r4
 8009652:	6833      	ldr	r3, [r6, #0]
 8009654:	05da      	lsls	r2, r3, #23
 8009656:	d554      	bpl.n	8009702 <_scanf_float+0x342>
 8009658:	055b      	lsls	r3, r3, #21
 800965a:	d537      	bpl.n	80096cc <_scanf_float+0x30c>
 800965c:	24be      	movs	r4, #190	; 0xbe
 800965e:	0064      	lsls	r4, r4, #1
 8009660:	9b03      	ldr	r3, [sp, #12]
 8009662:	429f      	cmp	r7, r3
 8009664:	d800      	bhi.n	8009668 <_scanf_float+0x2a8>
 8009666:	e6ee      	b.n	8009446 <_scanf_float+0x86>
 8009668:	3f01      	subs	r7, #1
 800966a:	5933      	ldr	r3, [r6, r4]
 800966c:	002a      	movs	r2, r5
 800966e:	7839      	ldrb	r1, [r7, #0]
 8009670:	9801      	ldr	r0, [sp, #4]
 8009672:	4798      	blx	r3
 8009674:	6933      	ldr	r3, [r6, #16]
 8009676:	3b01      	subs	r3, #1
 8009678:	6133      	str	r3, [r6, #16]
 800967a:	e7f1      	b.n	8009660 <_scanf_float+0x2a0>
 800967c:	24be      	movs	r4, #190	; 0xbe
 800967e:	0064      	lsls	r4, r4, #1
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	429f      	cmp	r7, r3
 8009684:	d800      	bhi.n	8009688 <_scanf_float+0x2c8>
 8009686:	e6de      	b.n	8009446 <_scanf_float+0x86>
 8009688:	3f01      	subs	r7, #1
 800968a:	5933      	ldr	r3, [r6, r4]
 800968c:	002a      	movs	r2, r5
 800968e:	7839      	ldrb	r1, [r7, #0]
 8009690:	9801      	ldr	r0, [sp, #4]
 8009692:	4798      	blx	r3
 8009694:	6933      	ldr	r3, [r6, #16]
 8009696:	3b01      	subs	r3, #1
 8009698:	6133      	str	r3, [r6, #16]
 800969a:	e7f1      	b.n	8009680 <_scanf_float+0x2c0>
 800969c:	9b02      	ldr	r3, [sp, #8]
 800969e:	002a      	movs	r2, r5
 80096a0:	3b01      	subs	r3, #1
 80096a2:	7819      	ldrb	r1, [r3, #0]
 80096a4:	9302      	str	r3, [sp, #8]
 80096a6:	23be      	movs	r3, #190	; 0xbe
 80096a8:	005b      	lsls	r3, r3, #1
 80096aa:	58f3      	ldr	r3, [r6, r3]
 80096ac:	9801      	ldr	r0, [sp, #4]
 80096ae:	9309      	str	r3, [sp, #36]	; 0x24
 80096b0:	4798      	blx	r3
 80096b2:	6933      	ldr	r3, [r6, #16]
 80096b4:	3b01      	subs	r3, #1
 80096b6:	6133      	str	r3, [r6, #16]
 80096b8:	e7c2      	b.n	8009640 <_scanf_float+0x280>
 80096ba:	46c0      	nop			; (mov r8, r8)
 80096bc:	fffffeff 	.word	0xfffffeff
 80096c0:	fffffe7f 	.word	0xfffffe7f
 80096c4:	fffff87f 	.word	0xfffff87f
 80096c8:	fffffd7f 	.word	0xfffffd7f
 80096cc:	6933      	ldr	r3, [r6, #16]
 80096ce:	1e7c      	subs	r4, r7, #1
 80096d0:	7821      	ldrb	r1, [r4, #0]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	6133      	str	r3, [r6, #16]
 80096d6:	2965      	cmp	r1, #101	; 0x65
 80096d8:	d00c      	beq.n	80096f4 <_scanf_float+0x334>
 80096da:	2945      	cmp	r1, #69	; 0x45
 80096dc:	d00a      	beq.n	80096f4 <_scanf_float+0x334>
 80096de:	23be      	movs	r3, #190	; 0xbe
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	58f3      	ldr	r3, [r6, r3]
 80096e4:	002a      	movs	r2, r5
 80096e6:	9801      	ldr	r0, [sp, #4]
 80096e8:	4798      	blx	r3
 80096ea:	6933      	ldr	r3, [r6, #16]
 80096ec:	1ebc      	subs	r4, r7, #2
 80096ee:	3b01      	subs	r3, #1
 80096f0:	7821      	ldrb	r1, [r4, #0]
 80096f2:	6133      	str	r3, [r6, #16]
 80096f4:	23be      	movs	r3, #190	; 0xbe
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	002a      	movs	r2, r5
 80096fa:	58f3      	ldr	r3, [r6, r3]
 80096fc:	9801      	ldr	r0, [sp, #4]
 80096fe:	4798      	blx	r3
 8009700:	0027      	movs	r7, r4
 8009702:	6832      	ldr	r2, [r6, #0]
 8009704:	2310      	movs	r3, #16
 8009706:	0011      	movs	r1, r2
 8009708:	4019      	ands	r1, r3
 800970a:	9102      	str	r1, [sp, #8]
 800970c:	421a      	tst	r2, r3
 800970e:	d158      	bne.n	80097c2 <_scanf_float+0x402>
 8009710:	23c0      	movs	r3, #192	; 0xc0
 8009712:	7039      	strb	r1, [r7, #0]
 8009714:	6832      	ldr	r2, [r6, #0]
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	4013      	ands	r3, r2
 800971a:	2280      	movs	r2, #128	; 0x80
 800971c:	00d2      	lsls	r2, r2, #3
 800971e:	4293      	cmp	r3, r2
 8009720:	d11d      	bne.n	800975e <_scanf_float+0x39e>
 8009722:	9b04      	ldr	r3, [sp, #16]
 8009724:	9a00      	ldr	r2, [sp, #0]
 8009726:	9900      	ldr	r1, [sp, #0]
 8009728:	1a9a      	subs	r2, r3, r2
 800972a:	428b      	cmp	r3, r1
 800972c:	d124      	bne.n	8009778 <_scanf_float+0x3b8>
 800972e:	2200      	movs	r2, #0
 8009730:	9903      	ldr	r1, [sp, #12]
 8009732:	9801      	ldr	r0, [sp, #4]
 8009734:	f000 feae 	bl	800a494 <_strtod_r>
 8009738:	9b06      	ldr	r3, [sp, #24]
 800973a:	000d      	movs	r5, r1
 800973c:	6831      	ldr	r1, [r6, #0]
 800973e:	0004      	movs	r4, r0
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	078a      	lsls	r2, r1, #30
 8009744:	d525      	bpl.n	8009792 <_scanf_float+0x3d2>
 8009746:	1d1a      	adds	r2, r3, #4
 8009748:	9906      	ldr	r1, [sp, #24]
 800974a:	600a      	str	r2, [r1, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	601c      	str	r4, [r3, #0]
 8009750:	605d      	str	r5, [r3, #4]
 8009752:	68f3      	ldr	r3, [r6, #12]
 8009754:	3301      	adds	r3, #1
 8009756:	60f3      	str	r3, [r6, #12]
 8009758:	9802      	ldr	r0, [sp, #8]
 800975a:	b00b      	add	sp, #44	; 0x2c
 800975c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975e:	9b07      	ldr	r3, [sp, #28]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d0e4      	beq.n	800972e <_scanf_float+0x36e>
 8009764:	9b08      	ldr	r3, [sp, #32]
 8009766:	9a02      	ldr	r2, [sp, #8]
 8009768:	1c59      	adds	r1, r3, #1
 800976a:	9801      	ldr	r0, [sp, #4]
 800976c:	230a      	movs	r3, #10
 800976e:	f000 ff27 	bl	800a5c0 <_strtol_r>
 8009772:	9b07      	ldr	r3, [sp, #28]
 8009774:	9f08      	ldr	r7, [sp, #32]
 8009776:	1ac2      	subs	r2, r0, r3
 8009778:	0033      	movs	r3, r6
 800977a:	3370      	adds	r3, #112	; 0x70
 800977c:	33ff      	adds	r3, #255	; 0xff
 800977e:	429f      	cmp	r7, r3
 8009780:	d302      	bcc.n	8009788 <_scanf_float+0x3c8>
 8009782:	0037      	movs	r7, r6
 8009784:	376f      	adds	r7, #111	; 0x6f
 8009786:	37ff      	adds	r7, #255	; 0xff
 8009788:	0038      	movs	r0, r7
 800978a:	490f      	ldr	r1, [pc, #60]	; (80097c8 <_scanf_float+0x408>)
 800978c:	f000 f836 	bl	80097fc <siprintf>
 8009790:	e7cd      	b.n	800972e <_scanf_float+0x36e>
 8009792:	1d1a      	adds	r2, r3, #4
 8009794:	0749      	lsls	r1, r1, #29
 8009796:	d4d7      	bmi.n	8009748 <_scanf_float+0x388>
 8009798:	9906      	ldr	r1, [sp, #24]
 800979a:	0020      	movs	r0, r4
 800979c:	600a      	str	r2, [r1, #0]
 800979e:	681f      	ldr	r7, [r3, #0]
 80097a0:	0022      	movs	r2, r4
 80097a2:	002b      	movs	r3, r5
 80097a4:	0029      	movs	r1, r5
 80097a6:	f7f9 fa1d 	bl	8002be4 <__aeabi_dcmpun>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d004      	beq.n	80097b8 <_scanf_float+0x3f8>
 80097ae:	4807      	ldr	r0, [pc, #28]	; (80097cc <_scanf_float+0x40c>)
 80097b0:	f000 f820 	bl	80097f4 <nanf>
 80097b4:	6038      	str	r0, [r7, #0]
 80097b6:	e7cc      	b.n	8009752 <_scanf_float+0x392>
 80097b8:	0020      	movs	r0, r4
 80097ba:	0029      	movs	r1, r5
 80097bc:	f7f9 fabc 	bl	8002d38 <__aeabi_d2f>
 80097c0:	e7f8      	b.n	80097b4 <_scanf_float+0x3f4>
 80097c2:	2300      	movs	r3, #0
 80097c4:	e640      	b.n	8009448 <_scanf_float+0x88>
 80097c6:	46c0      	nop			; (mov r8, r8)
 80097c8:	0800d6a0 	.word	0x0800d6a0
 80097cc:	0800d9a8 	.word	0x0800d9a8

080097d0 <_sbrk_r>:
 80097d0:	2300      	movs	r3, #0
 80097d2:	b570      	push	{r4, r5, r6, lr}
 80097d4:	4d06      	ldr	r5, [pc, #24]	; (80097f0 <_sbrk_r+0x20>)
 80097d6:	0004      	movs	r4, r0
 80097d8:	0008      	movs	r0, r1
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	f7fb f862 	bl	80048a4 <_sbrk>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d103      	bne.n	80097ec <_sbrk_r+0x1c>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d000      	beq.n	80097ec <_sbrk_r+0x1c>
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	bd70      	pop	{r4, r5, r6, pc}
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	20000548 	.word	0x20000548

080097f4 <nanf>:
 80097f4:	4800      	ldr	r0, [pc, #0]	; (80097f8 <nanf+0x4>)
 80097f6:	4770      	bx	lr
 80097f8:	7fc00000 	.word	0x7fc00000

080097fc <siprintf>:
 80097fc:	b40e      	push	{r1, r2, r3}
 80097fe:	b500      	push	{lr}
 8009800:	490b      	ldr	r1, [pc, #44]	; (8009830 <siprintf+0x34>)
 8009802:	b09c      	sub	sp, #112	; 0x70
 8009804:	ab1d      	add	r3, sp, #116	; 0x74
 8009806:	9002      	str	r0, [sp, #8]
 8009808:	9006      	str	r0, [sp, #24]
 800980a:	9107      	str	r1, [sp, #28]
 800980c:	9104      	str	r1, [sp, #16]
 800980e:	4809      	ldr	r0, [pc, #36]	; (8009834 <siprintf+0x38>)
 8009810:	4909      	ldr	r1, [pc, #36]	; (8009838 <siprintf+0x3c>)
 8009812:	cb04      	ldmia	r3!, {r2}
 8009814:	9105      	str	r1, [sp, #20]
 8009816:	6800      	ldr	r0, [r0, #0]
 8009818:	a902      	add	r1, sp, #8
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	f002 fe84 	bl	800c528 <_svfiprintf_r>
 8009820:	2300      	movs	r3, #0
 8009822:	9a02      	ldr	r2, [sp, #8]
 8009824:	7013      	strb	r3, [r2, #0]
 8009826:	b01c      	add	sp, #112	; 0x70
 8009828:	bc08      	pop	{r3}
 800982a:	b003      	add	sp, #12
 800982c:	4718      	bx	r3
 800982e:	46c0      	nop			; (mov r8, r8)
 8009830:	7fffffff 	.word	0x7fffffff
 8009834:	2000000c 	.word	0x2000000c
 8009838:	ffff0208 	.word	0xffff0208

0800983c <sulp>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	0016      	movs	r6, r2
 8009840:	000d      	movs	r5, r1
 8009842:	f002 fc9d 	bl	800c180 <__ulp>
 8009846:	2e00      	cmp	r6, #0
 8009848:	d00d      	beq.n	8009866 <sulp+0x2a>
 800984a:	236b      	movs	r3, #107	; 0x6b
 800984c:	006a      	lsls	r2, r5, #1
 800984e:	0d52      	lsrs	r2, r2, #21
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	2b00      	cmp	r3, #0
 8009854:	dd07      	ble.n	8009866 <sulp+0x2a>
 8009856:	2400      	movs	r4, #0
 8009858:	4a03      	ldr	r2, [pc, #12]	; (8009868 <sulp+0x2c>)
 800985a:	051b      	lsls	r3, r3, #20
 800985c:	189d      	adds	r5, r3, r2
 800985e:	002b      	movs	r3, r5
 8009860:	0022      	movs	r2, r4
 8009862:	f7f8 fbc1 	bl	8001fe8 <__aeabi_dmul>
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	3ff00000 	.word	0x3ff00000

0800986c <_strtod_l>:
 800986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800986e:	001d      	movs	r5, r3
 8009870:	2300      	movs	r3, #0
 8009872:	b0a5      	sub	sp, #148	; 0x94
 8009874:	9320      	str	r3, [sp, #128]	; 0x80
 8009876:	4bac      	ldr	r3, [pc, #688]	; (8009b28 <_strtod_l+0x2bc>)
 8009878:	9005      	str	r0, [sp, #20]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	9108      	str	r1, [sp, #32]
 800987e:	0018      	movs	r0, r3
 8009880:	9307      	str	r3, [sp, #28]
 8009882:	921b      	str	r2, [sp, #108]	; 0x6c
 8009884:	f7f6 fc3e 	bl	8000104 <strlen>
 8009888:	2600      	movs	r6, #0
 800988a:	0004      	movs	r4, r0
 800988c:	2700      	movs	r7, #0
 800988e:	9b08      	ldr	r3, [sp, #32]
 8009890:	931f      	str	r3, [sp, #124]	; 0x7c
 8009892:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009894:	7813      	ldrb	r3, [r2, #0]
 8009896:	2b2b      	cmp	r3, #43	; 0x2b
 8009898:	d058      	beq.n	800994c <_strtod_l+0xe0>
 800989a:	d844      	bhi.n	8009926 <_strtod_l+0xba>
 800989c:	2b0d      	cmp	r3, #13
 800989e:	d83d      	bhi.n	800991c <_strtod_l+0xb0>
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d83d      	bhi.n	8009920 <_strtod_l+0xb4>
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d047      	beq.n	8009938 <_strtod_l+0xcc>
 80098a8:	2300      	movs	r3, #0
 80098aa:	930e      	str	r3, [sp, #56]	; 0x38
 80098ac:	2200      	movs	r2, #0
 80098ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80098b0:	920a      	str	r2, [sp, #40]	; 0x28
 80098b2:	9306      	str	r3, [sp, #24]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b30      	cmp	r3, #48	; 0x30
 80098b8:	d000      	beq.n	80098bc <_strtod_l+0x50>
 80098ba:	e07f      	b.n	80099bc <_strtod_l+0x150>
 80098bc:	9b06      	ldr	r3, [sp, #24]
 80098be:	3220      	adds	r2, #32
 80098c0:	785b      	ldrb	r3, [r3, #1]
 80098c2:	4393      	bics	r3, r2
 80098c4:	2b58      	cmp	r3, #88	; 0x58
 80098c6:	d000      	beq.n	80098ca <_strtod_l+0x5e>
 80098c8:	e06e      	b.n	80099a8 <_strtod_l+0x13c>
 80098ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098cc:	9502      	str	r5, [sp, #8]
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	ab20      	add	r3, sp, #128	; 0x80
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	4a95      	ldr	r2, [pc, #596]	; (8009b2c <_strtod_l+0x2c0>)
 80098d6:	ab21      	add	r3, sp, #132	; 0x84
 80098d8:	9805      	ldr	r0, [sp, #20]
 80098da:	a91f      	add	r1, sp, #124	; 0x7c
 80098dc:	f001 fd90 	bl	800b400 <__gethex>
 80098e0:	2307      	movs	r3, #7
 80098e2:	0005      	movs	r5, r0
 80098e4:	0004      	movs	r4, r0
 80098e6:	401d      	ands	r5, r3
 80098e8:	4218      	tst	r0, r3
 80098ea:	d006      	beq.n	80098fa <_strtod_l+0x8e>
 80098ec:	2d06      	cmp	r5, #6
 80098ee:	d12f      	bne.n	8009950 <_strtod_l+0xe4>
 80098f0:	9b06      	ldr	r3, [sp, #24]
 80098f2:	3301      	adds	r3, #1
 80098f4:	931f      	str	r3, [sp, #124]	; 0x7c
 80098f6:	2300      	movs	r3, #0
 80098f8:	930e      	str	r3, [sp, #56]	; 0x38
 80098fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <_strtod_l+0x9a>
 8009900:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009902:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01c      	beq.n	8009946 <_strtod_l+0xda>
 800990c:	2380      	movs	r3, #128	; 0x80
 800990e:	0032      	movs	r2, r6
 8009910:	061b      	lsls	r3, r3, #24
 8009912:	18fb      	adds	r3, r7, r3
 8009914:	0010      	movs	r0, r2
 8009916:	0019      	movs	r1, r3
 8009918:	b025      	add	sp, #148	; 0x94
 800991a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800991c:	2b20      	cmp	r3, #32
 800991e:	d1c3      	bne.n	80098a8 <_strtod_l+0x3c>
 8009920:	3201      	adds	r2, #1
 8009922:	921f      	str	r2, [sp, #124]	; 0x7c
 8009924:	e7b5      	b.n	8009892 <_strtod_l+0x26>
 8009926:	2b2d      	cmp	r3, #45	; 0x2d
 8009928:	d1be      	bne.n	80098a8 <_strtod_l+0x3c>
 800992a:	3b2c      	subs	r3, #44	; 0x2c
 800992c:	930e      	str	r3, [sp, #56]	; 0x38
 800992e:	1c53      	adds	r3, r2, #1
 8009930:	931f      	str	r3, [sp, #124]	; 0x7c
 8009932:	7853      	ldrb	r3, [r2, #1]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1b9      	bne.n	80098ac <_strtod_l+0x40>
 8009938:	9b08      	ldr	r3, [sp, #32]
 800993a:	931f      	str	r3, [sp, #124]	; 0x7c
 800993c:	2300      	movs	r3, #0
 800993e:	930e      	str	r3, [sp, #56]	; 0x38
 8009940:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1dc      	bne.n	8009900 <_strtod_l+0x94>
 8009946:	0032      	movs	r2, r6
 8009948:	003b      	movs	r3, r7
 800994a:	e7e3      	b.n	8009914 <_strtod_l+0xa8>
 800994c:	2300      	movs	r3, #0
 800994e:	e7ed      	b.n	800992c <_strtod_l+0xc0>
 8009950:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009952:	2a00      	cmp	r2, #0
 8009954:	d007      	beq.n	8009966 <_strtod_l+0xfa>
 8009956:	2135      	movs	r1, #53	; 0x35
 8009958:	a822      	add	r0, sp, #136	; 0x88
 800995a:	f002 fd12 	bl	800c382 <__copybits>
 800995e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009960:	9805      	ldr	r0, [sp, #20]
 8009962:	f002 f8cd 	bl	800bb00 <_Bfree>
 8009966:	1e68      	subs	r0, r5, #1
 8009968:	2804      	cmp	r0, #4
 800996a:	d806      	bhi.n	800997a <_strtod_l+0x10e>
 800996c:	f7f6 fbd2 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009970:	1816030b 	.word	0x1816030b
 8009974:	0b          	.byte	0x0b
 8009975:	00          	.byte	0x00
 8009976:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009978:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800997a:	0723      	lsls	r3, r4, #28
 800997c:	d5bd      	bpl.n	80098fa <_strtod_l+0x8e>
 800997e:	2380      	movs	r3, #128	; 0x80
 8009980:	061b      	lsls	r3, r3, #24
 8009982:	431f      	orrs	r7, r3
 8009984:	e7b9      	b.n	80098fa <_strtod_l+0x8e>
 8009986:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009988:	4a69      	ldr	r2, [pc, #420]	; (8009b30 <_strtod_l+0x2c4>)
 800998a:	496a      	ldr	r1, [pc, #424]	; (8009b34 <_strtod_l+0x2c8>)
 800998c:	401a      	ands	r2, r3
 800998e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009990:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009992:	185b      	adds	r3, r3, r1
 8009994:	051b      	lsls	r3, r3, #20
 8009996:	431a      	orrs	r2, r3
 8009998:	0017      	movs	r7, r2
 800999a:	e7ee      	b.n	800997a <_strtod_l+0x10e>
 800999c:	4f66      	ldr	r7, [pc, #408]	; (8009b38 <_strtod_l+0x2cc>)
 800999e:	e7ec      	b.n	800997a <_strtod_l+0x10e>
 80099a0:	2601      	movs	r6, #1
 80099a2:	4f66      	ldr	r7, [pc, #408]	; (8009b3c <_strtod_l+0x2d0>)
 80099a4:	4276      	negs	r6, r6
 80099a6:	e7e8      	b.n	800997a <_strtod_l+0x10e>
 80099a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	921f      	str	r2, [sp, #124]	; 0x7c
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b30      	cmp	r3, #48	; 0x30
 80099b2:	d0f9      	beq.n	80099a8 <_strtod_l+0x13c>
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0a0      	beq.n	80098fa <_strtod_l+0x8e>
 80099b8:	2301      	movs	r3, #1
 80099ba:	930a      	str	r3, [sp, #40]	; 0x28
 80099bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099be:	220a      	movs	r2, #10
 80099c0:	9310      	str	r3, [sp, #64]	; 0x40
 80099c2:	2300      	movs	r3, #0
 80099c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80099c8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80099cc:	7805      	ldrb	r5, [r0, #0]
 80099ce:	002b      	movs	r3, r5
 80099d0:	3b30      	subs	r3, #48	; 0x30
 80099d2:	b2d9      	uxtb	r1, r3
 80099d4:	2909      	cmp	r1, #9
 80099d6:	d927      	bls.n	8009a28 <_strtod_l+0x1bc>
 80099d8:	0022      	movs	r2, r4
 80099da:	9907      	ldr	r1, [sp, #28]
 80099dc:	f002 feaa 	bl	800c734 <strncmp>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d033      	beq.n	8009a4c <_strtod_l+0x1e0>
 80099e4:	2000      	movs	r0, #0
 80099e6:	002b      	movs	r3, r5
 80099e8:	4684      	mov	ip, r0
 80099ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ec:	900c      	str	r0, [sp, #48]	; 0x30
 80099ee:	9206      	str	r2, [sp, #24]
 80099f0:	2220      	movs	r2, #32
 80099f2:	0019      	movs	r1, r3
 80099f4:	4391      	bics	r1, r2
 80099f6:	000a      	movs	r2, r1
 80099f8:	2100      	movs	r1, #0
 80099fa:	9107      	str	r1, [sp, #28]
 80099fc:	2a45      	cmp	r2, #69	; 0x45
 80099fe:	d000      	beq.n	8009a02 <_strtod_l+0x196>
 8009a00:	e0c5      	b.n	8009b8e <_strtod_l+0x322>
 8009a02:	9b06      	ldr	r3, [sp, #24]
 8009a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a06:	4303      	orrs	r3, r0
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	428b      	cmp	r3, r1
 8009a0c:	d094      	beq.n	8009938 <_strtod_l+0xcc>
 8009a0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a10:	9308      	str	r3, [sp, #32]
 8009a12:	3301      	adds	r3, #1
 8009a14:	931f      	str	r3, [sp, #124]	; 0x7c
 8009a16:	9b08      	ldr	r3, [sp, #32]
 8009a18:	785b      	ldrb	r3, [r3, #1]
 8009a1a:	2b2b      	cmp	r3, #43	; 0x2b
 8009a1c:	d076      	beq.n	8009b0c <_strtod_l+0x2a0>
 8009a1e:	000c      	movs	r4, r1
 8009a20:	2b2d      	cmp	r3, #45	; 0x2d
 8009a22:	d179      	bne.n	8009b18 <_strtod_l+0x2ac>
 8009a24:	2401      	movs	r4, #1
 8009a26:	e072      	b.n	8009b0e <_strtod_l+0x2a2>
 8009a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a2a:	2908      	cmp	r1, #8
 8009a2c:	dc09      	bgt.n	8009a42 <_strtod_l+0x1d6>
 8009a2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a30:	4351      	muls	r1, r2
 8009a32:	185b      	adds	r3, r3, r1
 8009a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a38:	3001      	adds	r0, #1
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a3e:	901f      	str	r0, [sp, #124]	; 0x7c
 8009a40:	e7c3      	b.n	80099ca <_strtod_l+0x15e>
 8009a42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a44:	4351      	muls	r1, r2
 8009a46:	185b      	adds	r3, r3, r1
 8009a48:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a4a:	e7f4      	b.n	8009a36 <_strtod_l+0x1ca>
 8009a4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a50:	191c      	adds	r4, r3, r4
 8009a52:	941f      	str	r4, [sp, #124]	; 0x7c
 8009a54:	7823      	ldrb	r3, [r4, #0]
 8009a56:	2a00      	cmp	r2, #0
 8009a58:	d039      	beq.n	8009ace <_strtod_l+0x262>
 8009a5a:	900c      	str	r0, [sp, #48]	; 0x30
 8009a5c:	9206      	str	r2, [sp, #24]
 8009a5e:	001a      	movs	r2, r3
 8009a60:	3a30      	subs	r2, #48	; 0x30
 8009a62:	2a09      	cmp	r2, #9
 8009a64:	d912      	bls.n	8009a8c <_strtod_l+0x220>
 8009a66:	2201      	movs	r2, #1
 8009a68:	4694      	mov	ip, r2
 8009a6a:	e7c1      	b.n	80099f0 <_strtod_l+0x184>
 8009a6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a6e:	3001      	adds	r0, #1
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	921f      	str	r2, [sp, #124]	; 0x7c
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	2b30      	cmp	r3, #48	; 0x30
 8009a78:	d0f8      	beq.n	8009a6c <_strtod_l+0x200>
 8009a7a:	001a      	movs	r2, r3
 8009a7c:	3a31      	subs	r2, #49	; 0x31
 8009a7e:	2a08      	cmp	r2, #8
 8009a80:	d83f      	bhi.n	8009b02 <_strtod_l+0x296>
 8009a82:	900c      	str	r0, [sp, #48]	; 0x30
 8009a84:	2000      	movs	r0, #0
 8009a86:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009a88:	9006      	str	r0, [sp, #24]
 8009a8a:	9210      	str	r2, [sp, #64]	; 0x40
 8009a8c:	001a      	movs	r2, r3
 8009a8e:	1c41      	adds	r1, r0, #1
 8009a90:	3a30      	subs	r2, #48	; 0x30
 8009a92:	2b30      	cmp	r3, #48	; 0x30
 8009a94:	d015      	beq.n	8009ac2 <_strtod_l+0x256>
 8009a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a98:	185b      	adds	r3, r3, r1
 8009a9a:	210a      	movs	r1, #10
 8009a9c:	930c      	str	r3, [sp, #48]	; 0x30
 8009a9e:	9b06      	ldr	r3, [sp, #24]
 8009aa0:	18c4      	adds	r4, r0, r3
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	d115      	bne.n	8009ad2 <_strtod_l+0x266>
 8009aa6:	9906      	ldr	r1, [sp, #24]
 8009aa8:	9b06      	ldr	r3, [sp, #24]
 8009aaa:	3101      	adds	r1, #1
 8009aac:	1809      	adds	r1, r1, r0
 8009aae:	181b      	adds	r3, r3, r0
 8009ab0:	9106      	str	r1, [sp, #24]
 8009ab2:	2b08      	cmp	r3, #8
 8009ab4:	dc1b      	bgt.n	8009aee <_strtod_l+0x282>
 8009ab6:	230a      	movs	r3, #10
 8009ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009aba:	434b      	muls	r3, r1
 8009abc:	2100      	movs	r1, #0
 8009abe:	18d3      	adds	r3, r2, r3
 8009ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ac2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ac4:	0008      	movs	r0, r1
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	921f      	str	r2, [sp, #124]	; 0x7c
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	e7c7      	b.n	8009a5e <_strtod_l+0x1f2>
 8009ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ad0:	e7d1      	b.n	8009a76 <_strtod_l+0x20a>
 8009ad2:	2b08      	cmp	r3, #8
 8009ad4:	dc04      	bgt.n	8009ae0 <_strtod_l+0x274>
 8009ad6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009ad8:	434d      	muls	r5, r1
 8009ada:	950b      	str	r5, [sp, #44]	; 0x2c
 8009adc:	3301      	adds	r3, #1
 8009ade:	e7e0      	b.n	8009aa2 <_strtod_l+0x236>
 8009ae0:	1c5d      	adds	r5, r3, #1
 8009ae2:	2d10      	cmp	r5, #16
 8009ae4:	dcfa      	bgt.n	8009adc <_strtod_l+0x270>
 8009ae6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ae8:	434d      	muls	r5, r1
 8009aea:	950f      	str	r5, [sp, #60]	; 0x3c
 8009aec:	e7f6      	b.n	8009adc <_strtod_l+0x270>
 8009aee:	9b06      	ldr	r3, [sp, #24]
 8009af0:	2100      	movs	r1, #0
 8009af2:	2b10      	cmp	r3, #16
 8009af4:	dce5      	bgt.n	8009ac2 <_strtod_l+0x256>
 8009af6:	230a      	movs	r3, #10
 8009af8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009afa:	4343      	muls	r3, r0
 8009afc:	18d3      	adds	r3, r2, r3
 8009afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b00:	e7df      	b.n	8009ac2 <_strtod_l+0x256>
 8009b02:	2200      	movs	r2, #0
 8009b04:	920c      	str	r2, [sp, #48]	; 0x30
 8009b06:	9206      	str	r2, [sp, #24]
 8009b08:	3201      	adds	r2, #1
 8009b0a:	e7ad      	b.n	8009a68 <_strtod_l+0x1fc>
 8009b0c:	2400      	movs	r4, #0
 8009b0e:	9b08      	ldr	r3, [sp, #32]
 8009b10:	3302      	adds	r3, #2
 8009b12:	931f      	str	r3, [sp, #124]	; 0x7c
 8009b14:	9b08      	ldr	r3, [sp, #32]
 8009b16:	789b      	ldrb	r3, [r3, #2]
 8009b18:	001a      	movs	r2, r3
 8009b1a:	3a30      	subs	r2, #48	; 0x30
 8009b1c:	2a09      	cmp	r2, #9
 8009b1e:	d913      	bls.n	8009b48 <_strtod_l+0x2dc>
 8009b20:	9a08      	ldr	r2, [sp, #32]
 8009b22:	921f      	str	r2, [sp, #124]	; 0x7c
 8009b24:	2200      	movs	r2, #0
 8009b26:	e031      	b.n	8009b8c <_strtod_l+0x320>
 8009b28:	0800d7f0 	.word	0x0800d7f0
 8009b2c:	0800d6a8 	.word	0x0800d6a8
 8009b30:	ffefffff 	.word	0xffefffff
 8009b34:	00000433 	.word	0x00000433
 8009b38:	7ff00000 	.word	0x7ff00000
 8009b3c:	7fffffff 	.word	0x7fffffff
 8009b40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b42:	1c5a      	adds	r2, r3, #1
 8009b44:	921f      	str	r2, [sp, #124]	; 0x7c
 8009b46:	785b      	ldrb	r3, [r3, #1]
 8009b48:	2b30      	cmp	r3, #48	; 0x30
 8009b4a:	d0f9      	beq.n	8009b40 <_strtod_l+0x2d4>
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	9207      	str	r2, [sp, #28]
 8009b50:	001a      	movs	r2, r3
 8009b52:	3a31      	subs	r2, #49	; 0x31
 8009b54:	2a08      	cmp	r2, #8
 8009b56:	d81a      	bhi.n	8009b8e <_strtod_l+0x322>
 8009b58:	3b30      	subs	r3, #48	; 0x30
 8009b5a:	001a      	movs	r2, r3
 8009b5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b5e:	9307      	str	r3, [sp, #28]
 8009b60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b62:	1c59      	adds	r1, r3, #1
 8009b64:	911f      	str	r1, [sp, #124]	; 0x7c
 8009b66:	785b      	ldrb	r3, [r3, #1]
 8009b68:	001d      	movs	r5, r3
 8009b6a:	3d30      	subs	r5, #48	; 0x30
 8009b6c:	2d09      	cmp	r5, #9
 8009b6e:	d939      	bls.n	8009be4 <_strtod_l+0x378>
 8009b70:	9d07      	ldr	r5, [sp, #28]
 8009b72:	1b49      	subs	r1, r1, r5
 8009b74:	4db0      	ldr	r5, [pc, #704]	; (8009e38 <_strtod_l+0x5cc>)
 8009b76:	9507      	str	r5, [sp, #28]
 8009b78:	2908      	cmp	r1, #8
 8009b7a:	dc03      	bgt.n	8009b84 <_strtod_l+0x318>
 8009b7c:	9207      	str	r2, [sp, #28]
 8009b7e:	42aa      	cmp	r2, r5
 8009b80:	dd00      	ble.n	8009b84 <_strtod_l+0x318>
 8009b82:	9507      	str	r5, [sp, #28]
 8009b84:	2c00      	cmp	r4, #0
 8009b86:	d002      	beq.n	8009b8e <_strtod_l+0x322>
 8009b88:	9a07      	ldr	r2, [sp, #28]
 8009b8a:	4252      	negs	r2, r2
 8009b8c:	9207      	str	r2, [sp, #28]
 8009b8e:	9a06      	ldr	r2, [sp, #24]
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	d14b      	bne.n	8009c2c <_strtod_l+0x3c0>
 8009b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b96:	4310      	orrs	r0, r2
 8009b98:	d000      	beq.n	8009b9c <_strtod_l+0x330>
 8009b9a:	e6ae      	b.n	80098fa <_strtod_l+0x8e>
 8009b9c:	4662      	mov	r2, ip
 8009b9e:	2a00      	cmp	r2, #0
 8009ba0:	d000      	beq.n	8009ba4 <_strtod_l+0x338>
 8009ba2:	e6c9      	b.n	8009938 <_strtod_l+0xcc>
 8009ba4:	2b69      	cmp	r3, #105	; 0x69
 8009ba6:	d025      	beq.n	8009bf4 <_strtod_l+0x388>
 8009ba8:	dc21      	bgt.n	8009bee <_strtod_l+0x382>
 8009baa:	2b49      	cmp	r3, #73	; 0x49
 8009bac:	d022      	beq.n	8009bf4 <_strtod_l+0x388>
 8009bae:	2b4e      	cmp	r3, #78	; 0x4e
 8009bb0:	d000      	beq.n	8009bb4 <_strtod_l+0x348>
 8009bb2:	e6c1      	b.n	8009938 <_strtod_l+0xcc>
 8009bb4:	49a1      	ldr	r1, [pc, #644]	; (8009e3c <_strtod_l+0x5d0>)
 8009bb6:	a81f      	add	r0, sp, #124	; 0x7c
 8009bb8:	f001 fe70 	bl	800b89c <__match>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d100      	bne.n	8009bc2 <_strtod_l+0x356>
 8009bc0:	e6ba      	b.n	8009938 <_strtod_l+0xcc>
 8009bc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	2b28      	cmp	r3, #40	; 0x28
 8009bc8:	d12a      	bne.n	8009c20 <_strtod_l+0x3b4>
 8009bca:	499d      	ldr	r1, [pc, #628]	; (8009e40 <_strtod_l+0x5d4>)
 8009bcc:	aa22      	add	r2, sp, #136	; 0x88
 8009bce:	a81f      	add	r0, sp, #124	; 0x7c
 8009bd0:	f001 fe78 	bl	800b8c4 <__hexnan>
 8009bd4:	2805      	cmp	r0, #5
 8009bd6:	d123      	bne.n	8009c20 <_strtod_l+0x3b4>
 8009bd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bda:	4a9a      	ldr	r2, [pc, #616]	; (8009e44 <_strtod_l+0x5d8>)
 8009bdc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009bde:	431a      	orrs	r2, r3
 8009be0:	0017      	movs	r7, r2
 8009be2:	e68a      	b.n	80098fa <_strtod_l+0x8e>
 8009be4:	210a      	movs	r1, #10
 8009be6:	434a      	muls	r2, r1
 8009be8:	18d2      	adds	r2, r2, r3
 8009bea:	3a30      	subs	r2, #48	; 0x30
 8009bec:	e7b8      	b.n	8009b60 <_strtod_l+0x2f4>
 8009bee:	2b6e      	cmp	r3, #110	; 0x6e
 8009bf0:	d0e0      	beq.n	8009bb4 <_strtod_l+0x348>
 8009bf2:	e6a1      	b.n	8009938 <_strtod_l+0xcc>
 8009bf4:	4994      	ldr	r1, [pc, #592]	; (8009e48 <_strtod_l+0x5dc>)
 8009bf6:	a81f      	add	r0, sp, #124	; 0x7c
 8009bf8:	f001 fe50 	bl	800b89c <__match>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d100      	bne.n	8009c02 <_strtod_l+0x396>
 8009c00:	e69a      	b.n	8009938 <_strtod_l+0xcc>
 8009c02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c04:	4991      	ldr	r1, [pc, #580]	; (8009e4c <_strtod_l+0x5e0>)
 8009c06:	3b01      	subs	r3, #1
 8009c08:	a81f      	add	r0, sp, #124	; 0x7c
 8009c0a:	931f      	str	r3, [sp, #124]	; 0x7c
 8009c0c:	f001 fe46 	bl	800b89c <__match>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d102      	bne.n	8009c1a <_strtod_l+0x3ae>
 8009c14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c16:	3301      	adds	r3, #1
 8009c18:	931f      	str	r3, [sp, #124]	; 0x7c
 8009c1a:	2600      	movs	r6, #0
 8009c1c:	4f89      	ldr	r7, [pc, #548]	; (8009e44 <_strtod_l+0x5d8>)
 8009c1e:	e66c      	b.n	80098fa <_strtod_l+0x8e>
 8009c20:	488b      	ldr	r0, [pc, #556]	; (8009e50 <_strtod_l+0x5e4>)
 8009c22:	f002 fd81 	bl	800c728 <nan>
 8009c26:	0006      	movs	r6, r0
 8009c28:	000f      	movs	r7, r1
 8009c2a:	e666      	b.n	80098fa <_strtod_l+0x8e>
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c30:	1a9b      	subs	r3, r3, r2
 8009c32:	930a      	str	r3, [sp, #40]	; 0x28
 8009c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <_strtod_l+0x3d2>
 8009c3a:	9b06      	ldr	r3, [sp, #24]
 8009c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c3e:	9c06      	ldr	r4, [sp, #24]
 8009c40:	2c10      	cmp	r4, #16
 8009c42:	dd00      	ble.n	8009c46 <_strtod_l+0x3da>
 8009c44:	2410      	movs	r4, #16
 8009c46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009c48:	f7f9 f850 	bl	8002cec <__aeabi_ui2d>
 8009c4c:	9b06      	ldr	r3, [sp, #24]
 8009c4e:	0006      	movs	r6, r0
 8009c50:	000f      	movs	r7, r1
 8009c52:	2b09      	cmp	r3, #9
 8009c54:	dd15      	ble.n	8009c82 <_strtod_l+0x416>
 8009c56:	0022      	movs	r2, r4
 8009c58:	4b7e      	ldr	r3, [pc, #504]	; (8009e54 <_strtod_l+0x5e8>)
 8009c5a:	3a09      	subs	r2, #9
 8009c5c:	00d2      	lsls	r2, r2, #3
 8009c5e:	189b      	adds	r3, r3, r2
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	f7f8 f9c0 	bl	8001fe8 <__aeabi_dmul>
 8009c68:	0006      	movs	r6, r0
 8009c6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009c6c:	000f      	movs	r7, r1
 8009c6e:	f7f9 f83d 	bl	8002cec <__aeabi_ui2d>
 8009c72:	0002      	movs	r2, r0
 8009c74:	000b      	movs	r3, r1
 8009c76:	0030      	movs	r0, r6
 8009c78:	0039      	movs	r1, r7
 8009c7a:	f7f7 fa77 	bl	800116c <__aeabi_dadd>
 8009c7e:	0006      	movs	r6, r0
 8009c80:	000f      	movs	r7, r1
 8009c82:	9b06      	ldr	r3, [sp, #24]
 8009c84:	2b0f      	cmp	r3, #15
 8009c86:	dc39      	bgt.n	8009cfc <_strtod_l+0x490>
 8009c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d100      	bne.n	8009c90 <_strtod_l+0x424>
 8009c8e:	e634      	b.n	80098fa <_strtod_l+0x8e>
 8009c90:	dd24      	ble.n	8009cdc <_strtod_l+0x470>
 8009c92:	2b16      	cmp	r3, #22
 8009c94:	dc09      	bgt.n	8009caa <_strtod_l+0x43e>
 8009c96:	496f      	ldr	r1, [pc, #444]	; (8009e54 <_strtod_l+0x5e8>)
 8009c98:	00db      	lsls	r3, r3, #3
 8009c9a:	18c9      	adds	r1, r1, r3
 8009c9c:	0032      	movs	r2, r6
 8009c9e:	6808      	ldr	r0, [r1, #0]
 8009ca0:	6849      	ldr	r1, [r1, #4]
 8009ca2:	003b      	movs	r3, r7
 8009ca4:	f7f8 f9a0 	bl	8001fe8 <__aeabi_dmul>
 8009ca8:	e7bd      	b.n	8009c26 <_strtod_l+0x3ba>
 8009caa:	2325      	movs	r3, #37	; 0x25
 8009cac:	9a06      	ldr	r2, [sp, #24]
 8009cae:	1a9b      	subs	r3, r3, r2
 8009cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	db22      	blt.n	8009cfc <_strtod_l+0x490>
 8009cb6:	240f      	movs	r4, #15
 8009cb8:	9b06      	ldr	r3, [sp, #24]
 8009cba:	4d66      	ldr	r5, [pc, #408]	; (8009e54 <_strtod_l+0x5e8>)
 8009cbc:	1ae4      	subs	r4, r4, r3
 8009cbe:	00e1      	lsls	r1, r4, #3
 8009cc0:	1869      	adds	r1, r5, r1
 8009cc2:	0032      	movs	r2, r6
 8009cc4:	6808      	ldr	r0, [r1, #0]
 8009cc6:	6849      	ldr	r1, [r1, #4]
 8009cc8:	003b      	movs	r3, r7
 8009cca:	f7f8 f98d 	bl	8001fe8 <__aeabi_dmul>
 8009cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd0:	1b1c      	subs	r4, r3, r4
 8009cd2:	00e4      	lsls	r4, r4, #3
 8009cd4:	192c      	adds	r4, r5, r4
 8009cd6:	6822      	ldr	r2, [r4, #0]
 8009cd8:	6863      	ldr	r3, [r4, #4]
 8009cda:	e7e3      	b.n	8009ca4 <_strtod_l+0x438>
 8009cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cde:	3316      	adds	r3, #22
 8009ce0:	db0c      	blt.n	8009cfc <_strtod_l+0x490>
 8009ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ce4:	9a07      	ldr	r2, [sp, #28]
 8009ce6:	0030      	movs	r0, r6
 8009ce8:	1a9a      	subs	r2, r3, r2
 8009cea:	4b5a      	ldr	r3, [pc, #360]	; (8009e54 <_strtod_l+0x5e8>)
 8009cec:	00d2      	lsls	r2, r2, #3
 8009cee:	189b      	adds	r3, r3, r2
 8009cf0:	0039      	movs	r1, r7
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	f7f7 fd75 	bl	80017e4 <__aeabi_ddiv>
 8009cfa:	e794      	b.n	8009c26 <_strtod_l+0x3ba>
 8009cfc:	9b06      	ldr	r3, [sp, #24]
 8009cfe:	1b1c      	subs	r4, r3, r4
 8009d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d02:	18e4      	adds	r4, r4, r3
 8009d04:	2c00      	cmp	r4, #0
 8009d06:	dd72      	ble.n	8009dee <_strtod_l+0x582>
 8009d08:	230f      	movs	r3, #15
 8009d0a:	0021      	movs	r1, r4
 8009d0c:	4019      	ands	r1, r3
 8009d0e:	421c      	tst	r4, r3
 8009d10:	d00a      	beq.n	8009d28 <_strtod_l+0x4bc>
 8009d12:	00cb      	lsls	r3, r1, #3
 8009d14:	494f      	ldr	r1, [pc, #316]	; (8009e54 <_strtod_l+0x5e8>)
 8009d16:	0032      	movs	r2, r6
 8009d18:	18c9      	adds	r1, r1, r3
 8009d1a:	6808      	ldr	r0, [r1, #0]
 8009d1c:	6849      	ldr	r1, [r1, #4]
 8009d1e:	003b      	movs	r3, r7
 8009d20:	f7f8 f962 	bl	8001fe8 <__aeabi_dmul>
 8009d24:	0006      	movs	r6, r0
 8009d26:	000f      	movs	r7, r1
 8009d28:	230f      	movs	r3, #15
 8009d2a:	439c      	bics	r4, r3
 8009d2c:	d04a      	beq.n	8009dc4 <_strtod_l+0x558>
 8009d2e:	3326      	adds	r3, #38	; 0x26
 8009d30:	33ff      	adds	r3, #255	; 0xff
 8009d32:	429c      	cmp	r4, r3
 8009d34:	dd22      	ble.n	8009d7c <_strtod_l+0x510>
 8009d36:	2300      	movs	r3, #0
 8009d38:	9306      	str	r3, [sp, #24]
 8009d3a:	9307      	str	r3, [sp, #28]
 8009d3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d40:	2322      	movs	r3, #34	; 0x22
 8009d42:	2600      	movs	r6, #0
 8009d44:	9a05      	ldr	r2, [sp, #20]
 8009d46:	4f3f      	ldr	r7, [pc, #252]	; (8009e44 <_strtod_l+0x5d8>)
 8009d48:	6013      	str	r3, [r2, #0]
 8009d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d4c:	42b3      	cmp	r3, r6
 8009d4e:	d100      	bne.n	8009d52 <_strtod_l+0x4e6>
 8009d50:	e5d3      	b.n	80098fa <_strtod_l+0x8e>
 8009d52:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009d54:	9805      	ldr	r0, [sp, #20]
 8009d56:	f001 fed3 	bl	800bb00 <_Bfree>
 8009d5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d5c:	9805      	ldr	r0, [sp, #20]
 8009d5e:	f001 fecf 	bl	800bb00 <_Bfree>
 8009d62:	9907      	ldr	r1, [sp, #28]
 8009d64:	9805      	ldr	r0, [sp, #20]
 8009d66:	f001 fecb 	bl	800bb00 <_Bfree>
 8009d6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d6c:	9805      	ldr	r0, [sp, #20]
 8009d6e:	f001 fec7 	bl	800bb00 <_Bfree>
 8009d72:	9906      	ldr	r1, [sp, #24]
 8009d74:	9805      	ldr	r0, [sp, #20]
 8009d76:	f001 fec3 	bl	800bb00 <_Bfree>
 8009d7a:	e5be      	b.n	80098fa <_strtod_l+0x8e>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	0030      	movs	r0, r6
 8009d80:	0039      	movs	r1, r7
 8009d82:	4d35      	ldr	r5, [pc, #212]	; (8009e58 <_strtod_l+0x5ec>)
 8009d84:	1124      	asrs	r4, r4, #4
 8009d86:	9308      	str	r3, [sp, #32]
 8009d88:	2c01      	cmp	r4, #1
 8009d8a:	dc1e      	bgt.n	8009dca <_strtod_l+0x55e>
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <_strtod_l+0x528>
 8009d90:	0006      	movs	r6, r0
 8009d92:	000f      	movs	r7, r1
 8009d94:	4b31      	ldr	r3, [pc, #196]	; (8009e5c <_strtod_l+0x5f0>)
 8009d96:	0032      	movs	r2, r6
 8009d98:	18ff      	adds	r7, r7, r3
 8009d9a:	9b08      	ldr	r3, [sp, #32]
 8009d9c:	00dd      	lsls	r5, r3, #3
 8009d9e:	4b2e      	ldr	r3, [pc, #184]	; (8009e58 <_strtod_l+0x5ec>)
 8009da0:	195d      	adds	r5, r3, r5
 8009da2:	6828      	ldr	r0, [r5, #0]
 8009da4:	6869      	ldr	r1, [r5, #4]
 8009da6:	003b      	movs	r3, r7
 8009da8:	f7f8 f91e 	bl	8001fe8 <__aeabi_dmul>
 8009dac:	4b25      	ldr	r3, [pc, #148]	; (8009e44 <_strtod_l+0x5d8>)
 8009dae:	4a2c      	ldr	r2, [pc, #176]	; (8009e60 <_strtod_l+0x5f4>)
 8009db0:	0006      	movs	r6, r0
 8009db2:	400b      	ands	r3, r1
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d8be      	bhi.n	8009d36 <_strtod_l+0x4ca>
 8009db8:	4a2a      	ldr	r2, [pc, #168]	; (8009e64 <_strtod_l+0x5f8>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d913      	bls.n	8009de6 <_strtod_l+0x57a>
 8009dbe:	2601      	movs	r6, #1
 8009dc0:	4f29      	ldr	r7, [pc, #164]	; (8009e68 <_strtod_l+0x5fc>)
 8009dc2:	4276      	negs	r6, r6
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9308      	str	r3, [sp, #32]
 8009dc8:	e087      	b.n	8009eda <_strtod_l+0x66e>
 8009dca:	2201      	movs	r2, #1
 8009dcc:	4214      	tst	r4, r2
 8009dce:	d004      	beq.n	8009dda <_strtod_l+0x56e>
 8009dd0:	682a      	ldr	r2, [r5, #0]
 8009dd2:	686b      	ldr	r3, [r5, #4]
 8009dd4:	f7f8 f908 	bl	8001fe8 <__aeabi_dmul>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	9a08      	ldr	r2, [sp, #32]
 8009ddc:	1064      	asrs	r4, r4, #1
 8009dde:	3201      	adds	r2, #1
 8009de0:	9208      	str	r2, [sp, #32]
 8009de2:	3508      	adds	r5, #8
 8009de4:	e7d0      	b.n	8009d88 <_strtod_l+0x51c>
 8009de6:	23d4      	movs	r3, #212	; 0xd4
 8009de8:	049b      	lsls	r3, r3, #18
 8009dea:	18cf      	adds	r7, r1, r3
 8009dec:	e7ea      	b.n	8009dc4 <_strtod_l+0x558>
 8009dee:	2c00      	cmp	r4, #0
 8009df0:	d0e8      	beq.n	8009dc4 <_strtod_l+0x558>
 8009df2:	4264      	negs	r4, r4
 8009df4:	220f      	movs	r2, #15
 8009df6:	0023      	movs	r3, r4
 8009df8:	4013      	ands	r3, r2
 8009dfa:	4214      	tst	r4, r2
 8009dfc:	d00a      	beq.n	8009e14 <_strtod_l+0x5a8>
 8009dfe:	00da      	lsls	r2, r3, #3
 8009e00:	4b14      	ldr	r3, [pc, #80]	; (8009e54 <_strtod_l+0x5e8>)
 8009e02:	0030      	movs	r0, r6
 8009e04:	189b      	adds	r3, r3, r2
 8009e06:	0039      	movs	r1, r7
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f7f7 fcea 	bl	80017e4 <__aeabi_ddiv>
 8009e10:	0006      	movs	r6, r0
 8009e12:	000f      	movs	r7, r1
 8009e14:	1124      	asrs	r4, r4, #4
 8009e16:	d0d5      	beq.n	8009dc4 <_strtod_l+0x558>
 8009e18:	2c1f      	cmp	r4, #31
 8009e1a:	dd27      	ble.n	8009e6c <_strtod_l+0x600>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9306      	str	r3, [sp, #24]
 8009e20:	9307      	str	r3, [sp, #28]
 8009e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e24:	9309      	str	r3, [sp, #36]	; 0x24
 8009e26:	2322      	movs	r3, #34	; 0x22
 8009e28:	9a05      	ldr	r2, [sp, #20]
 8009e2a:	2600      	movs	r6, #0
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e30:	2700      	movs	r7, #0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d18d      	bne.n	8009d52 <_strtod_l+0x4e6>
 8009e36:	e560      	b.n	80098fa <_strtod_l+0x8e>
 8009e38:	00004e1f 	.word	0x00004e1f
 8009e3c:	0800d679 	.word	0x0800d679
 8009e40:	0800d6bc 	.word	0x0800d6bc
 8009e44:	7ff00000 	.word	0x7ff00000
 8009e48:	0800d671 	.word	0x0800d671
 8009e4c:	0800d6fb 	.word	0x0800d6fb
 8009e50:	0800d9a8 	.word	0x0800d9a8
 8009e54:	0800d888 	.word	0x0800d888
 8009e58:	0800d860 	.word	0x0800d860
 8009e5c:	fcb00000 	.word	0xfcb00000
 8009e60:	7ca00000 	.word	0x7ca00000
 8009e64:	7c900000 	.word	0x7c900000
 8009e68:	7fefffff 	.word	0x7fefffff
 8009e6c:	2310      	movs	r3, #16
 8009e6e:	0022      	movs	r2, r4
 8009e70:	401a      	ands	r2, r3
 8009e72:	9208      	str	r2, [sp, #32]
 8009e74:	421c      	tst	r4, r3
 8009e76:	d001      	beq.n	8009e7c <_strtod_l+0x610>
 8009e78:	335a      	adds	r3, #90	; 0x5a
 8009e7a:	9308      	str	r3, [sp, #32]
 8009e7c:	0030      	movs	r0, r6
 8009e7e:	0039      	movs	r1, r7
 8009e80:	2300      	movs	r3, #0
 8009e82:	4dc5      	ldr	r5, [pc, #788]	; (800a198 <_strtod_l+0x92c>)
 8009e84:	2201      	movs	r2, #1
 8009e86:	4214      	tst	r4, r2
 8009e88:	d004      	beq.n	8009e94 <_strtod_l+0x628>
 8009e8a:	682a      	ldr	r2, [r5, #0]
 8009e8c:	686b      	ldr	r3, [r5, #4]
 8009e8e:	f7f8 f8ab 	bl	8001fe8 <__aeabi_dmul>
 8009e92:	2301      	movs	r3, #1
 8009e94:	1064      	asrs	r4, r4, #1
 8009e96:	3508      	adds	r5, #8
 8009e98:	2c00      	cmp	r4, #0
 8009e9a:	d1f3      	bne.n	8009e84 <_strtod_l+0x618>
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <_strtod_l+0x638>
 8009ea0:	0006      	movs	r6, r0
 8009ea2:	000f      	movs	r7, r1
 8009ea4:	9b08      	ldr	r3, [sp, #32]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00f      	beq.n	8009eca <_strtod_l+0x65e>
 8009eaa:	236b      	movs	r3, #107	; 0x6b
 8009eac:	007a      	lsls	r2, r7, #1
 8009eae:	0d52      	lsrs	r2, r2, #21
 8009eb0:	0039      	movs	r1, r7
 8009eb2:	1a9b      	subs	r3, r3, r2
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	dd08      	ble.n	8009eca <_strtod_l+0x65e>
 8009eb8:	2b1f      	cmp	r3, #31
 8009eba:	dc00      	bgt.n	8009ebe <_strtod_l+0x652>
 8009ebc:	e124      	b.n	800a108 <_strtod_l+0x89c>
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	2b34      	cmp	r3, #52	; 0x34
 8009ec2:	dc00      	bgt.n	8009ec6 <_strtod_l+0x65a>
 8009ec4:	e119      	b.n	800a0fa <_strtod_l+0x88e>
 8009ec6:	27dc      	movs	r7, #220	; 0xdc
 8009ec8:	04bf      	lsls	r7, r7, #18
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2300      	movs	r3, #0
 8009ece:	0030      	movs	r0, r6
 8009ed0:	0039      	movs	r1, r7
 8009ed2:	f7f6 fab9 	bl	8000448 <__aeabi_dcmpeq>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d1a0      	bne.n	8009e1c <_strtod_l+0x5b0>
 8009eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009ee2:	9b06      	ldr	r3, [sp, #24]
 8009ee4:	9805      	ldr	r0, [sp, #20]
 8009ee6:	f001 fe73 	bl	800bbd0 <__s2b>
 8009eea:	900b      	str	r0, [sp, #44]	; 0x2c
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d100      	bne.n	8009ef2 <_strtod_l+0x686>
 8009ef0:	e721      	b.n	8009d36 <_strtod_l+0x4ca>
 8009ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef4:	9907      	ldr	r1, [sp, #28]
 8009ef6:	17da      	asrs	r2, r3, #31
 8009ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009efa:	1a5b      	subs	r3, r3, r1
 8009efc:	401a      	ands	r2, r3
 8009efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f00:	9215      	str	r2, [sp, #84]	; 0x54
 8009f02:	43db      	mvns	r3, r3
 8009f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f06:	17db      	asrs	r3, r3, #31
 8009f08:	401a      	ands	r2, r3
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	921a      	str	r2, [sp, #104]	; 0x68
 8009f0e:	9306      	str	r3, [sp, #24]
 8009f10:	9307      	str	r3, [sp, #28]
 8009f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f14:	9805      	ldr	r0, [sp, #20]
 8009f16:	6859      	ldr	r1, [r3, #4]
 8009f18:	f001 fdae 	bl	800ba78 <_Balloc>
 8009f1c:	9009      	str	r0, [sp, #36]	; 0x24
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d100      	bne.n	8009f24 <_strtod_l+0x6b8>
 8009f22:	e70d      	b.n	8009d40 <_strtod_l+0x4d4>
 8009f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	310c      	adds	r1, #12
 8009f2c:	1c9a      	adds	r2, r3, #2
 8009f2e:	0092      	lsls	r2, r2, #2
 8009f30:	300c      	adds	r0, #12
 8009f32:	930c      	str	r3, [sp, #48]	; 0x30
 8009f34:	f7fe fce2 	bl	80088fc <memcpy>
 8009f38:	ab22      	add	r3, sp, #136	; 0x88
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	ab21      	add	r3, sp, #132	; 0x84
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	0032      	movs	r2, r6
 8009f42:	003b      	movs	r3, r7
 8009f44:	9805      	ldr	r0, [sp, #20]
 8009f46:	9612      	str	r6, [sp, #72]	; 0x48
 8009f48:	9713      	str	r7, [sp, #76]	; 0x4c
 8009f4a:	f002 f98d 	bl	800c268 <__d2b>
 8009f4e:	9020      	str	r0, [sp, #128]	; 0x80
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d100      	bne.n	8009f56 <_strtod_l+0x6ea>
 8009f54:	e6f4      	b.n	8009d40 <_strtod_l+0x4d4>
 8009f56:	2101      	movs	r1, #1
 8009f58:	9805      	ldr	r0, [sp, #20]
 8009f5a:	f001 fecd 	bl	800bcf8 <__i2b>
 8009f5e:	9007      	str	r0, [sp, #28]
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d100      	bne.n	8009f66 <_strtod_l+0x6fa>
 8009f64:	e6ec      	b.n	8009d40 <_strtod_l+0x4d4>
 8009f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f68:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009f6a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009f6c:	1ad4      	subs	r4, r2, r3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	db01      	blt.n	8009f76 <_strtod_l+0x70a>
 8009f72:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009f74:	195d      	adds	r5, r3, r5
 8009f76:	9908      	ldr	r1, [sp, #32]
 8009f78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f7a:	1a5b      	subs	r3, r3, r1
 8009f7c:	2136      	movs	r1, #54	; 0x36
 8009f7e:	189b      	adds	r3, r3, r2
 8009f80:	1a8a      	subs	r2, r1, r2
 8009f82:	4986      	ldr	r1, [pc, #536]	; (800a19c <_strtod_l+0x930>)
 8009f84:	2001      	movs	r0, #1
 8009f86:	468c      	mov	ip, r1
 8009f88:	2100      	movs	r1, #0
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	9110      	str	r1, [sp, #64]	; 0x40
 8009f8e:	9014      	str	r0, [sp, #80]	; 0x50
 8009f90:	4563      	cmp	r3, ip
 8009f92:	da07      	bge.n	8009fa4 <_strtod_l+0x738>
 8009f94:	4661      	mov	r1, ip
 8009f96:	1ac9      	subs	r1, r1, r3
 8009f98:	1a52      	subs	r2, r2, r1
 8009f9a:	291f      	cmp	r1, #31
 8009f9c:	dd00      	ble.n	8009fa0 <_strtod_l+0x734>
 8009f9e:	e0b8      	b.n	800a112 <_strtod_l+0x8a6>
 8009fa0:	4088      	lsls	r0, r1
 8009fa2:	9014      	str	r0, [sp, #80]	; 0x50
 8009fa4:	18ab      	adds	r3, r5, r2
 8009fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8009fa8:	18a4      	adds	r4, r4, r2
 8009faa:	9b08      	ldr	r3, [sp, #32]
 8009fac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fae:	191c      	adds	r4, r3, r4
 8009fb0:	002b      	movs	r3, r5
 8009fb2:	4295      	cmp	r5, r2
 8009fb4:	dd00      	ble.n	8009fb8 <_strtod_l+0x74c>
 8009fb6:	0013      	movs	r3, r2
 8009fb8:	42a3      	cmp	r3, r4
 8009fba:	dd00      	ble.n	8009fbe <_strtod_l+0x752>
 8009fbc:	0023      	movs	r3, r4
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	dd04      	ble.n	8009fcc <_strtod_l+0x760>
 8009fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fc4:	1ae4      	subs	r4, r4, r3
 8009fc6:	1ad2      	subs	r2, r2, r3
 8009fc8:	920c      	str	r2, [sp, #48]	; 0x30
 8009fca:	1aed      	subs	r5, r5, r3
 8009fcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	dd17      	ble.n	800a002 <_strtod_l+0x796>
 8009fd2:	001a      	movs	r2, r3
 8009fd4:	9907      	ldr	r1, [sp, #28]
 8009fd6:	9805      	ldr	r0, [sp, #20]
 8009fd8:	f001 ff54 	bl	800be84 <__pow5mult>
 8009fdc:	9007      	str	r0, [sp, #28]
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d100      	bne.n	8009fe4 <_strtod_l+0x778>
 8009fe2:	e6ad      	b.n	8009d40 <_strtod_l+0x4d4>
 8009fe4:	0001      	movs	r1, r0
 8009fe6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fe8:	9805      	ldr	r0, [sp, #20]
 8009fea:	f001 fe9b 	bl	800bd24 <__multiply>
 8009fee:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d100      	bne.n	8009ff6 <_strtod_l+0x78a>
 8009ff4:	e6a4      	b.n	8009d40 <_strtod_l+0x4d4>
 8009ff6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009ff8:	9805      	ldr	r0, [sp, #20]
 8009ffa:	f001 fd81 	bl	800bb00 <_Bfree>
 8009ffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a000:	9320      	str	r3, [sp, #128]	; 0x80
 800a002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a004:	2b00      	cmp	r3, #0
 800a006:	dd00      	ble.n	800a00a <_strtod_l+0x79e>
 800a008:	e089      	b.n	800a11e <_strtod_l+0x8b2>
 800a00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dd08      	ble.n	800a022 <_strtod_l+0x7b6>
 800a010:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a012:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a014:	9805      	ldr	r0, [sp, #20]
 800a016:	f001 ff35 	bl	800be84 <__pow5mult>
 800a01a:	9009      	str	r0, [sp, #36]	; 0x24
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d100      	bne.n	800a022 <_strtod_l+0x7b6>
 800a020:	e68e      	b.n	8009d40 <_strtod_l+0x4d4>
 800a022:	2c00      	cmp	r4, #0
 800a024:	dd08      	ble.n	800a038 <_strtod_l+0x7cc>
 800a026:	0022      	movs	r2, r4
 800a028:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a02a:	9805      	ldr	r0, [sp, #20]
 800a02c:	f001 ff86 	bl	800bf3c <__lshift>
 800a030:	9009      	str	r0, [sp, #36]	; 0x24
 800a032:	2800      	cmp	r0, #0
 800a034:	d100      	bne.n	800a038 <_strtod_l+0x7cc>
 800a036:	e683      	b.n	8009d40 <_strtod_l+0x4d4>
 800a038:	2d00      	cmp	r5, #0
 800a03a:	dd08      	ble.n	800a04e <_strtod_l+0x7e2>
 800a03c:	002a      	movs	r2, r5
 800a03e:	9907      	ldr	r1, [sp, #28]
 800a040:	9805      	ldr	r0, [sp, #20]
 800a042:	f001 ff7b 	bl	800bf3c <__lshift>
 800a046:	9007      	str	r0, [sp, #28]
 800a048:	2800      	cmp	r0, #0
 800a04a:	d100      	bne.n	800a04e <_strtod_l+0x7e2>
 800a04c:	e678      	b.n	8009d40 <_strtod_l+0x4d4>
 800a04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a050:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a052:	9805      	ldr	r0, [sp, #20]
 800a054:	f001 fffc 	bl	800c050 <__mdiff>
 800a058:	9006      	str	r0, [sp, #24]
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d100      	bne.n	800a060 <_strtod_l+0x7f4>
 800a05e:	e66f      	b.n	8009d40 <_strtod_l+0x4d4>
 800a060:	2200      	movs	r2, #0
 800a062:	68c3      	ldr	r3, [r0, #12]
 800a064:	9907      	ldr	r1, [sp, #28]
 800a066:	60c2      	str	r2, [r0, #12]
 800a068:	930f      	str	r3, [sp, #60]	; 0x3c
 800a06a:	f001 ffd5 	bl	800c018 <__mcmp>
 800a06e:	2800      	cmp	r0, #0
 800a070:	da5f      	bge.n	800a132 <_strtod_l+0x8c6>
 800a072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a074:	4333      	orrs	r3, r6
 800a076:	d000      	beq.n	800a07a <_strtod_l+0x80e>
 800a078:	e08a      	b.n	800a190 <_strtod_l+0x924>
 800a07a:	033b      	lsls	r3, r7, #12
 800a07c:	d000      	beq.n	800a080 <_strtod_l+0x814>
 800a07e:	e087      	b.n	800a190 <_strtod_l+0x924>
 800a080:	22d6      	movs	r2, #214	; 0xd6
 800a082:	4b47      	ldr	r3, [pc, #284]	; (800a1a0 <_strtod_l+0x934>)
 800a084:	04d2      	lsls	r2, r2, #19
 800a086:	403b      	ands	r3, r7
 800a088:	4293      	cmp	r3, r2
 800a08a:	d800      	bhi.n	800a08e <_strtod_l+0x822>
 800a08c:	e080      	b.n	800a190 <_strtod_l+0x924>
 800a08e:	9b06      	ldr	r3, [sp, #24]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	930a      	str	r3, [sp, #40]	; 0x28
 800a094:	2b00      	cmp	r3, #0
 800a096:	d104      	bne.n	800a0a2 <_strtod_l+0x836>
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	930a      	str	r3, [sp, #40]	; 0x28
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	dd76      	ble.n	800a190 <_strtod_l+0x924>
 800a0a2:	9906      	ldr	r1, [sp, #24]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	9805      	ldr	r0, [sp, #20]
 800a0a8:	f001 ff48 	bl	800bf3c <__lshift>
 800a0ac:	9907      	ldr	r1, [sp, #28]
 800a0ae:	9006      	str	r0, [sp, #24]
 800a0b0:	f001 ffb2 	bl	800c018 <__mcmp>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	dd6b      	ble.n	800a190 <_strtod_l+0x924>
 800a0b8:	9908      	ldr	r1, [sp, #32]
 800a0ba:	003b      	movs	r3, r7
 800a0bc:	4a38      	ldr	r2, [pc, #224]	; (800a1a0 <_strtod_l+0x934>)
 800a0be:	2900      	cmp	r1, #0
 800a0c0:	d100      	bne.n	800a0c4 <_strtod_l+0x858>
 800a0c2:	e092      	b.n	800a1ea <_strtod_l+0x97e>
 800a0c4:	0011      	movs	r1, r2
 800a0c6:	20d6      	movs	r0, #214	; 0xd6
 800a0c8:	4039      	ands	r1, r7
 800a0ca:	04c0      	lsls	r0, r0, #19
 800a0cc:	4281      	cmp	r1, r0
 800a0ce:	dd00      	ble.n	800a0d2 <_strtod_l+0x866>
 800a0d0:	e08b      	b.n	800a1ea <_strtod_l+0x97e>
 800a0d2:	23dc      	movs	r3, #220	; 0xdc
 800a0d4:	049b      	lsls	r3, r3, #18
 800a0d6:	4299      	cmp	r1, r3
 800a0d8:	dc00      	bgt.n	800a0dc <_strtod_l+0x870>
 800a0da:	e6a4      	b.n	8009e26 <_strtod_l+0x5ba>
 800a0dc:	0030      	movs	r0, r6
 800a0de:	0039      	movs	r1, r7
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	4b30      	ldr	r3, [pc, #192]	; (800a1a4 <_strtod_l+0x938>)
 800a0e4:	f7f7 ff80 	bl	8001fe8 <__aeabi_dmul>
 800a0e8:	0006      	movs	r6, r0
 800a0ea:	000f      	movs	r7, r1
 800a0ec:	4308      	orrs	r0, r1
 800a0ee:	d000      	beq.n	800a0f2 <_strtod_l+0x886>
 800a0f0:	e62f      	b.n	8009d52 <_strtod_l+0x4e6>
 800a0f2:	2322      	movs	r3, #34	; 0x22
 800a0f4:	9a05      	ldr	r2, [sp, #20]
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	e62b      	b.n	8009d52 <_strtod_l+0x4e6>
 800a0fa:	234b      	movs	r3, #75	; 0x4b
 800a0fc:	1a9a      	subs	r2, r3, r2
 800a0fe:	3b4c      	subs	r3, #76	; 0x4c
 800a100:	4093      	lsls	r3, r2
 800a102:	4019      	ands	r1, r3
 800a104:	000f      	movs	r7, r1
 800a106:	e6e0      	b.n	8009eca <_strtod_l+0x65e>
 800a108:	2201      	movs	r2, #1
 800a10a:	4252      	negs	r2, r2
 800a10c:	409a      	lsls	r2, r3
 800a10e:	4016      	ands	r6, r2
 800a110:	e6db      	b.n	8009eca <_strtod_l+0x65e>
 800a112:	4925      	ldr	r1, [pc, #148]	; (800a1a8 <_strtod_l+0x93c>)
 800a114:	1acb      	subs	r3, r1, r3
 800a116:	0001      	movs	r1, r0
 800a118:	4099      	lsls	r1, r3
 800a11a:	9110      	str	r1, [sp, #64]	; 0x40
 800a11c:	e741      	b.n	8009fa2 <_strtod_l+0x736>
 800a11e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a120:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a122:	9805      	ldr	r0, [sp, #20]
 800a124:	f001 ff0a 	bl	800bf3c <__lshift>
 800a128:	9020      	str	r0, [sp, #128]	; 0x80
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d000      	beq.n	800a130 <_strtod_l+0x8c4>
 800a12e:	e76c      	b.n	800a00a <_strtod_l+0x79e>
 800a130:	e606      	b.n	8009d40 <_strtod_l+0x4d4>
 800a132:	970c      	str	r7, [sp, #48]	; 0x30
 800a134:	2800      	cmp	r0, #0
 800a136:	d176      	bne.n	800a226 <_strtod_l+0x9ba>
 800a138:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a13a:	033b      	lsls	r3, r7, #12
 800a13c:	0b1b      	lsrs	r3, r3, #12
 800a13e:	2a00      	cmp	r2, #0
 800a140:	d038      	beq.n	800a1b4 <_strtod_l+0x948>
 800a142:	4a1a      	ldr	r2, [pc, #104]	; (800a1ac <_strtod_l+0x940>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d138      	bne.n	800a1ba <_strtod_l+0x94e>
 800a148:	2201      	movs	r2, #1
 800a14a:	9b08      	ldr	r3, [sp, #32]
 800a14c:	4252      	negs	r2, r2
 800a14e:	0031      	movs	r1, r6
 800a150:	0010      	movs	r0, r2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00b      	beq.n	800a16e <_strtod_l+0x902>
 800a156:	24d4      	movs	r4, #212	; 0xd4
 800a158:	4b11      	ldr	r3, [pc, #68]	; (800a1a0 <_strtod_l+0x934>)
 800a15a:	0010      	movs	r0, r2
 800a15c:	403b      	ands	r3, r7
 800a15e:	04e4      	lsls	r4, r4, #19
 800a160:	42a3      	cmp	r3, r4
 800a162:	d804      	bhi.n	800a16e <_strtod_l+0x902>
 800a164:	306c      	adds	r0, #108	; 0x6c
 800a166:	0d1b      	lsrs	r3, r3, #20
 800a168:	1ac3      	subs	r3, r0, r3
 800a16a:	409a      	lsls	r2, r3
 800a16c:	0010      	movs	r0, r2
 800a16e:	4281      	cmp	r1, r0
 800a170:	d123      	bne.n	800a1ba <_strtod_l+0x94e>
 800a172:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <_strtod_l+0x944>)
 800a174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a176:	429a      	cmp	r2, r3
 800a178:	d102      	bne.n	800a180 <_strtod_l+0x914>
 800a17a:	1c4b      	adds	r3, r1, #1
 800a17c:	d100      	bne.n	800a180 <_strtod_l+0x914>
 800a17e:	e5df      	b.n	8009d40 <_strtod_l+0x4d4>
 800a180:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <_strtod_l+0x934>)
 800a182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a184:	2600      	movs	r6, #0
 800a186:	401a      	ands	r2, r3
 800a188:	0013      	movs	r3, r2
 800a18a:	2280      	movs	r2, #128	; 0x80
 800a18c:	0352      	lsls	r2, r2, #13
 800a18e:	189f      	adds	r7, r3, r2
 800a190:	9b08      	ldr	r3, [sp, #32]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1a2      	bne.n	800a0dc <_strtod_l+0x870>
 800a196:	e5dc      	b.n	8009d52 <_strtod_l+0x4e6>
 800a198:	0800d6d0 	.word	0x0800d6d0
 800a19c:	fffffc02 	.word	0xfffffc02
 800a1a0:	7ff00000 	.word	0x7ff00000
 800a1a4:	39500000 	.word	0x39500000
 800a1a8:	fffffbe2 	.word	0xfffffbe2
 800a1ac:	000fffff 	.word	0x000fffff
 800a1b0:	7fefffff 	.word	0x7fefffff
 800a1b4:	4333      	orrs	r3, r6
 800a1b6:	d100      	bne.n	800a1ba <_strtod_l+0x94e>
 800a1b8:	e77e      	b.n	800a0b8 <_strtod_l+0x84c>
 800a1ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d01d      	beq.n	800a1fc <_strtod_l+0x990>
 800a1c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1c4:	4213      	tst	r3, r2
 800a1c6:	d0e3      	beq.n	800a190 <_strtod_l+0x924>
 800a1c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1ca:	0030      	movs	r0, r6
 800a1cc:	0039      	movs	r1, r7
 800a1ce:	9a08      	ldr	r2, [sp, #32]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d017      	beq.n	800a204 <_strtod_l+0x998>
 800a1d4:	f7ff fb32 	bl	800983c <sulp>
 800a1d8:	0002      	movs	r2, r0
 800a1da:	000b      	movs	r3, r1
 800a1dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a1de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a1e0:	f7f6 ffc4 	bl	800116c <__aeabi_dadd>
 800a1e4:	0006      	movs	r6, r0
 800a1e6:	000f      	movs	r7, r1
 800a1e8:	e7d2      	b.n	800a190 <_strtod_l+0x924>
 800a1ea:	2601      	movs	r6, #1
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	4a99      	ldr	r2, [pc, #612]	; (800a454 <_strtod_l+0xbe8>)
 800a1f0:	4276      	negs	r6, r6
 800a1f2:	189b      	adds	r3, r3, r2
 800a1f4:	4a98      	ldr	r2, [pc, #608]	; (800a458 <_strtod_l+0xbec>)
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	0017      	movs	r7, r2
 800a1fa:	e7c9      	b.n	800a190 <_strtod_l+0x924>
 800a1fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1fe:	4233      	tst	r3, r6
 800a200:	d0c6      	beq.n	800a190 <_strtod_l+0x924>
 800a202:	e7e1      	b.n	800a1c8 <_strtod_l+0x95c>
 800a204:	f7ff fb1a 	bl	800983c <sulp>
 800a208:	0002      	movs	r2, r0
 800a20a:	000b      	movs	r3, r1
 800a20c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a20e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a210:	f7f8 f956 	bl	80024c0 <__aeabi_dsub>
 800a214:	2200      	movs	r2, #0
 800a216:	2300      	movs	r3, #0
 800a218:	0006      	movs	r6, r0
 800a21a:	000f      	movs	r7, r1
 800a21c:	f7f6 f914 	bl	8000448 <__aeabi_dcmpeq>
 800a220:	2800      	cmp	r0, #0
 800a222:	d0b5      	beq.n	800a190 <_strtod_l+0x924>
 800a224:	e5ff      	b.n	8009e26 <_strtod_l+0x5ba>
 800a226:	9907      	ldr	r1, [sp, #28]
 800a228:	9806      	ldr	r0, [sp, #24]
 800a22a:	f002 f881 	bl	800c330 <__ratio>
 800a22e:	2380      	movs	r3, #128	; 0x80
 800a230:	2200      	movs	r2, #0
 800a232:	05db      	lsls	r3, r3, #23
 800a234:	0004      	movs	r4, r0
 800a236:	000d      	movs	r5, r1
 800a238:	f7f6 f916 	bl	8000468 <__aeabi_dcmple>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d075      	beq.n	800a32c <_strtod_l+0xac0>
 800a240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d047      	beq.n	800a2d6 <_strtod_l+0xa6a>
 800a246:	2300      	movs	r3, #0
 800a248:	4c84      	ldr	r4, [pc, #528]	; (800a45c <_strtod_l+0xbf0>)
 800a24a:	2500      	movs	r5, #0
 800a24c:	9310      	str	r3, [sp, #64]	; 0x40
 800a24e:	9411      	str	r4, [sp, #68]	; 0x44
 800a250:	4c82      	ldr	r4, [pc, #520]	; (800a45c <_strtod_l+0xbf0>)
 800a252:	4a83      	ldr	r2, [pc, #524]	; (800a460 <_strtod_l+0xbf4>)
 800a254:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a256:	4013      	ands	r3, r2
 800a258:	9314      	str	r3, [sp, #80]	; 0x50
 800a25a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a25c:	4b81      	ldr	r3, [pc, #516]	; (800a464 <_strtod_l+0xbf8>)
 800a25e:	429a      	cmp	r2, r3
 800a260:	d000      	beq.n	800a264 <_strtod_l+0x9f8>
 800a262:	e0ac      	b.n	800a3be <_strtod_l+0xb52>
 800a264:	4a80      	ldr	r2, [pc, #512]	; (800a468 <_strtod_l+0xbfc>)
 800a266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a268:	4694      	mov	ip, r2
 800a26a:	4463      	add	r3, ip
 800a26c:	001f      	movs	r7, r3
 800a26e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a272:	0030      	movs	r0, r6
 800a274:	0039      	movs	r1, r7
 800a276:	920c      	str	r2, [sp, #48]	; 0x30
 800a278:	930d      	str	r3, [sp, #52]	; 0x34
 800a27a:	f001 ff81 	bl	800c180 <__ulp>
 800a27e:	0002      	movs	r2, r0
 800a280:	000b      	movs	r3, r1
 800a282:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a284:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a286:	f7f7 feaf 	bl	8001fe8 <__aeabi_dmul>
 800a28a:	0032      	movs	r2, r6
 800a28c:	003b      	movs	r3, r7
 800a28e:	f7f6 ff6d 	bl	800116c <__aeabi_dadd>
 800a292:	4a73      	ldr	r2, [pc, #460]	; (800a460 <_strtod_l+0xbf4>)
 800a294:	4b75      	ldr	r3, [pc, #468]	; (800a46c <_strtod_l+0xc00>)
 800a296:	0006      	movs	r6, r0
 800a298:	400a      	ands	r2, r1
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d95e      	bls.n	800a35c <_strtod_l+0xaf0>
 800a29e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2a0:	4b73      	ldr	r3, [pc, #460]	; (800a470 <_strtod_l+0xc04>)
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d103      	bne.n	800a2ae <_strtod_l+0xa42>
 800a2a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	d100      	bne.n	800a2ae <_strtod_l+0xa42>
 800a2ac:	e548      	b.n	8009d40 <_strtod_l+0x4d4>
 800a2ae:	2601      	movs	r6, #1
 800a2b0:	4f6f      	ldr	r7, [pc, #444]	; (800a470 <_strtod_l+0xc04>)
 800a2b2:	4276      	negs	r6, r6
 800a2b4:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a2b6:	9805      	ldr	r0, [sp, #20]
 800a2b8:	f001 fc22 	bl	800bb00 <_Bfree>
 800a2bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2be:	9805      	ldr	r0, [sp, #20]
 800a2c0:	f001 fc1e 	bl	800bb00 <_Bfree>
 800a2c4:	9907      	ldr	r1, [sp, #28]
 800a2c6:	9805      	ldr	r0, [sp, #20]
 800a2c8:	f001 fc1a 	bl	800bb00 <_Bfree>
 800a2cc:	9906      	ldr	r1, [sp, #24]
 800a2ce:	9805      	ldr	r0, [sp, #20]
 800a2d0:	f001 fc16 	bl	800bb00 <_Bfree>
 800a2d4:	e61d      	b.n	8009f12 <_strtod_l+0x6a6>
 800a2d6:	2e00      	cmp	r6, #0
 800a2d8:	d11c      	bne.n	800a314 <_strtod_l+0xaa8>
 800a2da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2dc:	031b      	lsls	r3, r3, #12
 800a2de:	d11f      	bne.n	800a320 <_strtod_l+0xab4>
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	0020      	movs	r0, r4
 800a2e4:	0029      	movs	r1, r5
 800a2e6:	4b5d      	ldr	r3, [pc, #372]	; (800a45c <_strtod_l+0xbf0>)
 800a2e8:	f7f6 f8b4 	bl	8000454 <__aeabi_dcmplt>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d11a      	bne.n	800a326 <_strtod_l+0xaba>
 800a2f0:	0020      	movs	r0, r4
 800a2f2:	0029      	movs	r1, r5
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4b5f      	ldr	r3, [pc, #380]	; (800a474 <_strtod_l+0xc08>)
 800a2f8:	f7f7 fe76 	bl	8001fe8 <__aeabi_dmul>
 800a2fc:	0005      	movs	r5, r0
 800a2fe:	000c      	movs	r4, r1
 800a300:	2380      	movs	r3, #128	; 0x80
 800a302:	061b      	lsls	r3, r3, #24
 800a304:	18e3      	adds	r3, r4, r3
 800a306:	951c      	str	r5, [sp, #112]	; 0x70
 800a308:	931d      	str	r3, [sp, #116]	; 0x74
 800a30a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a30c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a30e:	9210      	str	r2, [sp, #64]	; 0x40
 800a310:	9311      	str	r3, [sp, #68]	; 0x44
 800a312:	e79e      	b.n	800a252 <_strtod_l+0x9e6>
 800a314:	2e01      	cmp	r6, #1
 800a316:	d103      	bne.n	800a320 <_strtod_l+0xab4>
 800a318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d100      	bne.n	800a320 <_strtod_l+0xab4>
 800a31e:	e582      	b.n	8009e26 <_strtod_l+0x5ba>
 800a320:	2300      	movs	r3, #0
 800a322:	4c55      	ldr	r4, [pc, #340]	; (800a478 <_strtod_l+0xc0c>)
 800a324:	e791      	b.n	800a24a <_strtod_l+0x9de>
 800a326:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a328:	4c52      	ldr	r4, [pc, #328]	; (800a474 <_strtod_l+0xc08>)
 800a32a:	e7e9      	b.n	800a300 <_strtod_l+0xa94>
 800a32c:	2200      	movs	r2, #0
 800a32e:	0020      	movs	r0, r4
 800a330:	0029      	movs	r1, r5
 800a332:	4b50      	ldr	r3, [pc, #320]	; (800a474 <_strtod_l+0xc08>)
 800a334:	f7f7 fe58 	bl	8001fe8 <__aeabi_dmul>
 800a338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a33a:	0005      	movs	r5, r0
 800a33c:	000b      	movs	r3, r1
 800a33e:	000c      	movs	r4, r1
 800a340:	2a00      	cmp	r2, #0
 800a342:	d107      	bne.n	800a354 <_strtod_l+0xae8>
 800a344:	2280      	movs	r2, #128	; 0x80
 800a346:	0612      	lsls	r2, r2, #24
 800a348:	188b      	adds	r3, r1, r2
 800a34a:	9016      	str	r0, [sp, #88]	; 0x58
 800a34c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a34e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a352:	e7dc      	b.n	800a30e <_strtod_l+0xaa2>
 800a354:	0002      	movs	r2, r0
 800a356:	9216      	str	r2, [sp, #88]	; 0x58
 800a358:	9317      	str	r3, [sp, #92]	; 0x5c
 800a35a:	e7f8      	b.n	800a34e <_strtod_l+0xae2>
 800a35c:	23d4      	movs	r3, #212	; 0xd4
 800a35e:	049b      	lsls	r3, r3, #18
 800a360:	18cf      	adds	r7, r1, r3
 800a362:	9b08      	ldr	r3, [sp, #32]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1a5      	bne.n	800a2b4 <_strtod_l+0xa48>
 800a368:	4b3d      	ldr	r3, [pc, #244]	; (800a460 <_strtod_l+0xbf4>)
 800a36a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a36c:	403b      	ands	r3, r7
 800a36e:	429a      	cmp	r2, r3
 800a370:	d1a0      	bne.n	800a2b4 <_strtod_l+0xa48>
 800a372:	0028      	movs	r0, r5
 800a374:	0021      	movs	r1, r4
 800a376:	f7f6 f90d 	bl	8000594 <__aeabi_d2lz>
 800a37a:	f7f6 f947 	bl	800060c <__aeabi_l2d>
 800a37e:	0002      	movs	r2, r0
 800a380:	000b      	movs	r3, r1
 800a382:	0028      	movs	r0, r5
 800a384:	0021      	movs	r1, r4
 800a386:	f7f8 f89b 	bl	80024c0 <__aeabi_dsub>
 800a38a:	033b      	lsls	r3, r7, #12
 800a38c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a38e:	0b1b      	lsrs	r3, r3, #12
 800a390:	4333      	orrs	r3, r6
 800a392:	4313      	orrs	r3, r2
 800a394:	0004      	movs	r4, r0
 800a396:	000d      	movs	r5, r1
 800a398:	4a38      	ldr	r2, [pc, #224]	; (800a47c <_strtod_l+0xc10>)
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d055      	beq.n	800a44a <_strtod_l+0xbde>
 800a39e:	4b38      	ldr	r3, [pc, #224]	; (800a480 <_strtod_l+0xc14>)
 800a3a0:	f7f6 f858 	bl	8000454 <__aeabi_dcmplt>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d000      	beq.n	800a3aa <_strtod_l+0xb3e>
 800a3a8:	e4d3      	b.n	8009d52 <_strtod_l+0x4e6>
 800a3aa:	0020      	movs	r0, r4
 800a3ac:	0029      	movs	r1, r5
 800a3ae:	4a35      	ldr	r2, [pc, #212]	; (800a484 <_strtod_l+0xc18>)
 800a3b0:	4b30      	ldr	r3, [pc, #192]	; (800a474 <_strtod_l+0xc08>)
 800a3b2:	f7f6 f863 	bl	800047c <__aeabi_dcmpgt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d100      	bne.n	800a3bc <_strtod_l+0xb50>
 800a3ba:	e77b      	b.n	800a2b4 <_strtod_l+0xa48>
 800a3bc:	e4c9      	b.n	8009d52 <_strtod_l+0x4e6>
 800a3be:	9b08      	ldr	r3, [sp, #32]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d02b      	beq.n	800a41c <_strtod_l+0xbb0>
 800a3c4:	23d4      	movs	r3, #212	; 0xd4
 800a3c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3c8:	04db      	lsls	r3, r3, #19
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d826      	bhi.n	800a41c <_strtod_l+0xbb0>
 800a3ce:	0028      	movs	r0, r5
 800a3d0:	0021      	movs	r1, r4
 800a3d2:	4a2d      	ldr	r2, [pc, #180]	; (800a488 <_strtod_l+0xc1c>)
 800a3d4:	4b2d      	ldr	r3, [pc, #180]	; (800a48c <_strtod_l+0xc20>)
 800a3d6:	f7f6 f847 	bl	8000468 <__aeabi_dcmple>
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	d017      	beq.n	800a40e <_strtod_l+0xba2>
 800a3de:	0028      	movs	r0, r5
 800a3e0:	0021      	movs	r1, r4
 800a3e2:	f7f6 f8b9 	bl	8000558 <__aeabi_d2uiz>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d100      	bne.n	800a3ec <_strtod_l+0xb80>
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	f7f8 fc7e 	bl	8002cec <__aeabi_ui2d>
 800a3f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3f2:	0005      	movs	r5, r0
 800a3f4:	000b      	movs	r3, r1
 800a3f6:	000c      	movs	r4, r1
 800a3f8:	2a00      	cmp	r2, #0
 800a3fa:	d122      	bne.n	800a442 <_strtod_l+0xbd6>
 800a3fc:	2280      	movs	r2, #128	; 0x80
 800a3fe:	0612      	lsls	r2, r2, #24
 800a400:	188b      	adds	r3, r1, r2
 800a402:	9018      	str	r0, [sp, #96]	; 0x60
 800a404:	9319      	str	r3, [sp, #100]	; 0x64
 800a406:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a408:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a40a:	9210      	str	r2, [sp, #64]	; 0x40
 800a40c:	9311      	str	r3, [sp, #68]	; 0x44
 800a40e:	22d6      	movs	r2, #214	; 0xd6
 800a410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a412:	04d2      	lsls	r2, r2, #19
 800a414:	189b      	adds	r3, r3, r2
 800a416:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a418:	1a9b      	subs	r3, r3, r2
 800a41a:	9311      	str	r3, [sp, #68]	; 0x44
 800a41c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a41e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a420:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800a422:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a424:	f001 feac 	bl	800c180 <__ulp>
 800a428:	0002      	movs	r2, r0
 800a42a:	000b      	movs	r3, r1
 800a42c:	0030      	movs	r0, r6
 800a42e:	0039      	movs	r1, r7
 800a430:	f7f7 fdda 	bl	8001fe8 <__aeabi_dmul>
 800a434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a438:	f7f6 fe98 	bl	800116c <__aeabi_dadd>
 800a43c:	0006      	movs	r6, r0
 800a43e:	000f      	movs	r7, r1
 800a440:	e78f      	b.n	800a362 <_strtod_l+0xaf6>
 800a442:	0002      	movs	r2, r0
 800a444:	9218      	str	r2, [sp, #96]	; 0x60
 800a446:	9319      	str	r3, [sp, #100]	; 0x64
 800a448:	e7dd      	b.n	800a406 <_strtod_l+0xb9a>
 800a44a:	4b11      	ldr	r3, [pc, #68]	; (800a490 <_strtod_l+0xc24>)
 800a44c:	f7f6 f802 	bl	8000454 <__aeabi_dcmplt>
 800a450:	e7b1      	b.n	800a3b6 <_strtod_l+0xb4a>
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	fff00000 	.word	0xfff00000
 800a458:	000fffff 	.word	0x000fffff
 800a45c:	3ff00000 	.word	0x3ff00000
 800a460:	7ff00000 	.word	0x7ff00000
 800a464:	7fe00000 	.word	0x7fe00000
 800a468:	fcb00000 	.word	0xfcb00000
 800a46c:	7c9fffff 	.word	0x7c9fffff
 800a470:	7fefffff 	.word	0x7fefffff
 800a474:	3fe00000 	.word	0x3fe00000
 800a478:	bff00000 	.word	0xbff00000
 800a47c:	94a03595 	.word	0x94a03595
 800a480:	3fdfffff 	.word	0x3fdfffff
 800a484:	35afe535 	.word	0x35afe535
 800a488:	ffc00000 	.word	0xffc00000
 800a48c:	41dfffff 	.word	0x41dfffff
 800a490:	3fcfffff 	.word	0x3fcfffff

0800a494 <_strtod_r>:
 800a494:	b510      	push	{r4, lr}
 800a496:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <_strtod_r+0xc>)
 800a498:	f7ff f9e8 	bl	800986c <_strtod_l>
 800a49c:	bd10      	pop	{r4, pc}
 800a49e:	46c0      	nop			; (mov r8, r8)
 800a4a0:	20000074 	.word	0x20000074

0800a4a4 <_strtol_l.constprop.0>:
 800a4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	001e      	movs	r6, r3
 800a4aa:	9005      	str	r0, [sp, #20]
 800a4ac:	9101      	str	r1, [sp, #4]
 800a4ae:	9202      	str	r2, [sp, #8]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d045      	beq.n	800a540 <_strtol_l.constprop.0+0x9c>
 800a4b4:	000b      	movs	r3, r1
 800a4b6:	2e24      	cmp	r6, #36	; 0x24
 800a4b8:	d842      	bhi.n	800a540 <_strtol_l.constprop.0+0x9c>
 800a4ba:	4a3f      	ldr	r2, [pc, #252]	; (800a5b8 <_strtol_l.constprop.0+0x114>)
 800a4bc:	2108      	movs	r1, #8
 800a4be:	4694      	mov	ip, r2
 800a4c0:	001a      	movs	r2, r3
 800a4c2:	4660      	mov	r0, ip
 800a4c4:	7814      	ldrb	r4, [r2, #0]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	5d00      	ldrb	r0, [r0, r4]
 800a4ca:	001d      	movs	r5, r3
 800a4cc:	0007      	movs	r7, r0
 800a4ce:	400f      	ands	r7, r1
 800a4d0:	4208      	tst	r0, r1
 800a4d2:	d1f5      	bne.n	800a4c0 <_strtol_l.constprop.0+0x1c>
 800a4d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a4d6:	d13a      	bne.n	800a54e <_strtol_l.constprop.0+0xaa>
 800a4d8:	2701      	movs	r7, #1
 800a4da:	781c      	ldrb	r4, [r3, #0]
 800a4dc:	1c95      	adds	r5, r2, #2
 800a4de:	2e00      	cmp	r6, #0
 800a4e0:	d065      	beq.n	800a5ae <_strtol_l.constprop.0+0x10a>
 800a4e2:	2e10      	cmp	r6, #16
 800a4e4:	d109      	bne.n	800a4fa <_strtol_l.constprop.0+0x56>
 800a4e6:	2c30      	cmp	r4, #48	; 0x30
 800a4e8:	d107      	bne.n	800a4fa <_strtol_l.constprop.0+0x56>
 800a4ea:	2220      	movs	r2, #32
 800a4ec:	782b      	ldrb	r3, [r5, #0]
 800a4ee:	4393      	bics	r3, r2
 800a4f0:	2b58      	cmp	r3, #88	; 0x58
 800a4f2:	d157      	bne.n	800a5a4 <_strtol_l.constprop.0+0x100>
 800a4f4:	2610      	movs	r6, #16
 800a4f6:	786c      	ldrb	r4, [r5, #1]
 800a4f8:	3502      	adds	r5, #2
 800a4fa:	4b30      	ldr	r3, [pc, #192]	; (800a5bc <_strtol_l.constprop.0+0x118>)
 800a4fc:	0031      	movs	r1, r6
 800a4fe:	18fb      	adds	r3, r7, r3
 800a500:	0018      	movs	r0, r3
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	f7f5 fea0 	bl	8000248 <__aeabi_uidivmod>
 800a508:	2300      	movs	r3, #0
 800a50a:	2201      	movs	r2, #1
 800a50c:	4684      	mov	ip, r0
 800a50e:	0018      	movs	r0, r3
 800a510:	9104      	str	r1, [sp, #16]
 800a512:	4252      	negs	r2, r2
 800a514:	0021      	movs	r1, r4
 800a516:	3930      	subs	r1, #48	; 0x30
 800a518:	2909      	cmp	r1, #9
 800a51a:	d81d      	bhi.n	800a558 <_strtol_l.constprop.0+0xb4>
 800a51c:	000c      	movs	r4, r1
 800a51e:	42a6      	cmp	r6, r4
 800a520:	dd28      	ble.n	800a574 <_strtol_l.constprop.0+0xd0>
 800a522:	2b00      	cmp	r3, #0
 800a524:	db24      	blt.n	800a570 <_strtol_l.constprop.0+0xcc>
 800a526:	0013      	movs	r3, r2
 800a528:	4584      	cmp	ip, r0
 800a52a:	d306      	bcc.n	800a53a <_strtol_l.constprop.0+0x96>
 800a52c:	d102      	bne.n	800a534 <_strtol_l.constprop.0+0x90>
 800a52e:	9904      	ldr	r1, [sp, #16]
 800a530:	42a1      	cmp	r1, r4
 800a532:	db02      	blt.n	800a53a <_strtol_l.constprop.0+0x96>
 800a534:	2301      	movs	r3, #1
 800a536:	4370      	muls	r0, r6
 800a538:	1820      	adds	r0, r4, r0
 800a53a:	782c      	ldrb	r4, [r5, #0]
 800a53c:	3501      	adds	r5, #1
 800a53e:	e7e9      	b.n	800a514 <_strtol_l.constprop.0+0x70>
 800a540:	f7fe f9a8 	bl	8008894 <__errno>
 800a544:	2316      	movs	r3, #22
 800a546:	6003      	str	r3, [r0, #0]
 800a548:	2000      	movs	r0, #0
 800a54a:	b007      	add	sp, #28
 800a54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a54e:	2c2b      	cmp	r4, #43	; 0x2b
 800a550:	d1c5      	bne.n	800a4de <_strtol_l.constprop.0+0x3a>
 800a552:	781c      	ldrb	r4, [r3, #0]
 800a554:	1c95      	adds	r5, r2, #2
 800a556:	e7c2      	b.n	800a4de <_strtol_l.constprop.0+0x3a>
 800a558:	0021      	movs	r1, r4
 800a55a:	3941      	subs	r1, #65	; 0x41
 800a55c:	2919      	cmp	r1, #25
 800a55e:	d801      	bhi.n	800a564 <_strtol_l.constprop.0+0xc0>
 800a560:	3c37      	subs	r4, #55	; 0x37
 800a562:	e7dc      	b.n	800a51e <_strtol_l.constprop.0+0x7a>
 800a564:	0021      	movs	r1, r4
 800a566:	3961      	subs	r1, #97	; 0x61
 800a568:	2919      	cmp	r1, #25
 800a56a:	d803      	bhi.n	800a574 <_strtol_l.constprop.0+0xd0>
 800a56c:	3c57      	subs	r4, #87	; 0x57
 800a56e:	e7d6      	b.n	800a51e <_strtol_l.constprop.0+0x7a>
 800a570:	0013      	movs	r3, r2
 800a572:	e7e2      	b.n	800a53a <_strtol_l.constprop.0+0x96>
 800a574:	2b00      	cmp	r3, #0
 800a576:	da09      	bge.n	800a58c <_strtol_l.constprop.0+0xe8>
 800a578:	2322      	movs	r3, #34	; 0x22
 800a57a:	9a05      	ldr	r2, [sp, #20]
 800a57c:	9803      	ldr	r0, [sp, #12]
 800a57e:	6013      	str	r3, [r2, #0]
 800a580:	9b02      	ldr	r3, [sp, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0e1      	beq.n	800a54a <_strtol_l.constprop.0+0xa6>
 800a586:	1e6b      	subs	r3, r5, #1
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	e007      	b.n	800a59c <_strtol_l.constprop.0+0xf8>
 800a58c:	2f00      	cmp	r7, #0
 800a58e:	d000      	beq.n	800a592 <_strtol_l.constprop.0+0xee>
 800a590:	4240      	negs	r0, r0
 800a592:	9a02      	ldr	r2, [sp, #8]
 800a594:	2a00      	cmp	r2, #0
 800a596:	d0d8      	beq.n	800a54a <_strtol_l.constprop.0+0xa6>
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1f4      	bne.n	800a586 <_strtol_l.constprop.0+0xe2>
 800a59c:	9b02      	ldr	r3, [sp, #8]
 800a59e:	9a01      	ldr	r2, [sp, #4]
 800a5a0:	601a      	str	r2, [r3, #0]
 800a5a2:	e7d2      	b.n	800a54a <_strtol_l.constprop.0+0xa6>
 800a5a4:	2430      	movs	r4, #48	; 0x30
 800a5a6:	2e00      	cmp	r6, #0
 800a5a8:	d1a7      	bne.n	800a4fa <_strtol_l.constprop.0+0x56>
 800a5aa:	3608      	adds	r6, #8
 800a5ac:	e7a5      	b.n	800a4fa <_strtol_l.constprop.0+0x56>
 800a5ae:	2c30      	cmp	r4, #48	; 0x30
 800a5b0:	d09b      	beq.n	800a4ea <_strtol_l.constprop.0+0x46>
 800a5b2:	260a      	movs	r6, #10
 800a5b4:	e7a1      	b.n	800a4fa <_strtol_l.constprop.0+0x56>
 800a5b6:	46c0      	nop			; (mov r8, r8)
 800a5b8:	0800d565 	.word	0x0800d565
 800a5bc:	7fffffff 	.word	0x7fffffff

0800a5c0 <_strtol_r>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	f7ff ff6f 	bl	800a4a4 <_strtol_l.constprop.0>
 800a5c6:	bd10      	pop	{r4, pc}

0800a5c8 <strtol>:
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	0013      	movs	r3, r2
 800a5cc:	000a      	movs	r2, r1
 800a5ce:	0001      	movs	r1, r0
 800a5d0:	4802      	ldr	r0, [pc, #8]	; (800a5dc <strtol+0x14>)
 800a5d2:	6800      	ldr	r0, [r0, #0]
 800a5d4:	f7ff ff66 	bl	800a4a4 <_strtol_l.constprop.0>
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	46c0      	nop			; (mov r8, r8)
 800a5dc:	2000000c 	.word	0x2000000c

0800a5e0 <quorem>:
 800a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5e2:	0006      	movs	r6, r0
 800a5e4:	690b      	ldr	r3, [r1, #16]
 800a5e6:	6932      	ldr	r2, [r6, #16]
 800a5e8:	b087      	sub	sp, #28
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	9103      	str	r1, [sp, #12]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	db65      	blt.n	800a6be <quorem+0xde>
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	009c      	lsls	r4, r3, #2
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	000b      	movs	r3, r1
 800a5fa:	3314      	adds	r3, #20
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	191b      	adds	r3, r3, r4
 800a600:	9304      	str	r3, [sp, #16]
 800a602:	0033      	movs	r3, r6
 800a604:	3314      	adds	r3, #20
 800a606:	9302      	str	r3, [sp, #8]
 800a608:	191c      	adds	r4, r3, r4
 800a60a:	9b04      	ldr	r3, [sp, #16]
 800a60c:	6827      	ldr	r7, [r4, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	0038      	movs	r0, r7
 800a612:	1c5d      	adds	r5, r3, #1
 800a614:	0029      	movs	r1, r5
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	f7f5 fd90 	bl	800013c <__udivsi3>
 800a61c:	9001      	str	r0, [sp, #4]
 800a61e:	42af      	cmp	r7, r5
 800a620:	d324      	bcc.n	800a66c <quorem+0x8c>
 800a622:	2500      	movs	r5, #0
 800a624:	46ac      	mov	ip, r5
 800a626:	9802      	ldr	r0, [sp, #8]
 800a628:	9f05      	ldr	r7, [sp, #20]
 800a62a:	cf08      	ldmia	r7!, {r3}
 800a62c:	9a01      	ldr	r2, [sp, #4]
 800a62e:	b299      	uxth	r1, r3
 800a630:	4351      	muls	r1, r2
 800a632:	0c1b      	lsrs	r3, r3, #16
 800a634:	4353      	muls	r3, r2
 800a636:	1949      	adds	r1, r1, r5
 800a638:	0c0a      	lsrs	r2, r1, #16
 800a63a:	189b      	adds	r3, r3, r2
 800a63c:	6802      	ldr	r2, [r0, #0]
 800a63e:	b289      	uxth	r1, r1
 800a640:	b292      	uxth	r2, r2
 800a642:	4462      	add	r2, ip
 800a644:	1a52      	subs	r2, r2, r1
 800a646:	6801      	ldr	r1, [r0, #0]
 800a648:	0c1d      	lsrs	r5, r3, #16
 800a64a:	0c09      	lsrs	r1, r1, #16
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	1acb      	subs	r3, r1, r3
 800a650:	1411      	asrs	r1, r2, #16
 800a652:	185b      	adds	r3, r3, r1
 800a654:	1419      	asrs	r1, r3, #16
 800a656:	b292      	uxth	r2, r2
 800a658:	041b      	lsls	r3, r3, #16
 800a65a:	431a      	orrs	r2, r3
 800a65c:	9b04      	ldr	r3, [sp, #16]
 800a65e:	468c      	mov	ip, r1
 800a660:	c004      	stmia	r0!, {r2}
 800a662:	42bb      	cmp	r3, r7
 800a664:	d2e1      	bcs.n	800a62a <quorem+0x4a>
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d030      	beq.n	800a6ce <quorem+0xee>
 800a66c:	0030      	movs	r0, r6
 800a66e:	9903      	ldr	r1, [sp, #12]
 800a670:	f001 fcd2 	bl	800c018 <__mcmp>
 800a674:	2800      	cmp	r0, #0
 800a676:	db21      	blt.n	800a6bc <quorem+0xdc>
 800a678:	0030      	movs	r0, r6
 800a67a:	2400      	movs	r4, #0
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	9903      	ldr	r1, [sp, #12]
 800a680:	3301      	adds	r3, #1
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	3014      	adds	r0, #20
 800a686:	3114      	adds	r1, #20
 800a688:	6803      	ldr	r3, [r0, #0]
 800a68a:	c920      	ldmia	r1!, {r5}
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	1914      	adds	r4, r2, r4
 800a690:	b2aa      	uxth	r2, r5
 800a692:	1aa2      	subs	r2, r4, r2
 800a694:	0c1b      	lsrs	r3, r3, #16
 800a696:	0c2d      	lsrs	r5, r5, #16
 800a698:	1414      	asrs	r4, r2, #16
 800a69a:	1b5b      	subs	r3, r3, r5
 800a69c:	191b      	adds	r3, r3, r4
 800a69e:	141c      	asrs	r4, r3, #16
 800a6a0:	b292      	uxth	r2, r2
 800a6a2:	041b      	lsls	r3, r3, #16
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	c008      	stmia	r0!, {r3}
 800a6a8:	9b04      	ldr	r3, [sp, #16]
 800a6aa:	428b      	cmp	r3, r1
 800a6ac:	d2ec      	bcs.n	800a688 <quorem+0xa8>
 800a6ae:	9b00      	ldr	r3, [sp, #0]
 800a6b0:	9a02      	ldr	r2, [sp, #8]
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	18d3      	adds	r3, r2, r3
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	2a00      	cmp	r2, #0
 800a6ba:	d015      	beq.n	800a6e8 <quorem+0x108>
 800a6bc:	9801      	ldr	r0, [sp, #4]
 800a6be:	b007      	add	sp, #28
 800a6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d106      	bne.n	800a6d6 <quorem+0xf6>
 800a6c8:	9b00      	ldr	r3, [sp, #0]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	9b02      	ldr	r3, [sp, #8]
 800a6d0:	3c04      	subs	r4, #4
 800a6d2:	42a3      	cmp	r3, r4
 800a6d4:	d3f5      	bcc.n	800a6c2 <quorem+0xe2>
 800a6d6:	9b00      	ldr	r3, [sp, #0]
 800a6d8:	6133      	str	r3, [r6, #16]
 800a6da:	e7c7      	b.n	800a66c <quorem+0x8c>
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	d106      	bne.n	800a6f0 <quorem+0x110>
 800a6e2:	9a00      	ldr	r2, [sp, #0]
 800a6e4:	3a01      	subs	r2, #1
 800a6e6:	9200      	str	r2, [sp, #0]
 800a6e8:	9a02      	ldr	r2, [sp, #8]
 800a6ea:	3b04      	subs	r3, #4
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d3f5      	bcc.n	800a6dc <quorem+0xfc>
 800a6f0:	9b00      	ldr	r3, [sp, #0]
 800a6f2:	6133      	str	r3, [r6, #16]
 800a6f4:	e7e2      	b.n	800a6bc <quorem+0xdc>
	...

0800a6f8 <_dtoa_r>:
 800a6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6fa:	b09d      	sub	sp, #116	; 0x74
 800a6fc:	9202      	str	r2, [sp, #8]
 800a6fe:	9303      	str	r3, [sp, #12]
 800a700:	9b02      	ldr	r3, [sp, #8]
 800a702:	9c03      	ldr	r4, [sp, #12]
 800a704:	9308      	str	r3, [sp, #32]
 800a706:	9409      	str	r4, [sp, #36]	; 0x24
 800a708:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a70a:	0007      	movs	r7, r0
 800a70c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a70e:	2c00      	cmp	r4, #0
 800a710:	d10e      	bne.n	800a730 <_dtoa_r+0x38>
 800a712:	2010      	movs	r0, #16
 800a714:	f7fe f8e8 	bl	80088e8 <malloc>
 800a718:	1e02      	subs	r2, r0, #0
 800a71a:	6278      	str	r0, [r7, #36]	; 0x24
 800a71c:	d104      	bne.n	800a728 <_dtoa_r+0x30>
 800a71e:	21ea      	movs	r1, #234	; 0xea
 800a720:	4bc7      	ldr	r3, [pc, #796]	; (800aa40 <_dtoa_r+0x348>)
 800a722:	48c8      	ldr	r0, [pc, #800]	; (800aa44 <_dtoa_r+0x34c>)
 800a724:	f002 f826 	bl	800c774 <__assert_func>
 800a728:	6044      	str	r4, [r0, #4]
 800a72a:	6084      	str	r4, [r0, #8]
 800a72c:	6004      	str	r4, [r0, #0]
 800a72e:	60c4      	str	r4, [r0, #12]
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	2900      	cmp	r1, #0
 800a736:	d00a      	beq.n	800a74e <_dtoa_r+0x56>
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	2301      	movs	r3, #1
 800a73c:	4093      	lsls	r3, r2
 800a73e:	604a      	str	r2, [r1, #4]
 800a740:	608b      	str	r3, [r1, #8]
 800a742:	0038      	movs	r0, r7
 800a744:	f001 f9dc 	bl	800bb00 <_Bfree>
 800a748:	2200      	movs	r2, #0
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	2b00      	cmp	r3, #0
 800a752:	da20      	bge.n	800a796 <_dtoa_r+0x9e>
 800a754:	2301      	movs	r3, #1
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	9b03      	ldr	r3, [sp, #12]
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	085b      	lsrs	r3, r3, #1
 800a75e:	9309      	str	r3, [sp, #36]	; 0x24
 800a760:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a762:	4bb9      	ldr	r3, [pc, #740]	; (800aa48 <_dtoa_r+0x350>)
 800a764:	4ab8      	ldr	r2, [pc, #736]	; (800aa48 <_dtoa_r+0x350>)
 800a766:	402b      	ands	r3, r5
 800a768:	4293      	cmp	r3, r2
 800a76a:	d117      	bne.n	800a79c <_dtoa_r+0xa4>
 800a76c:	4bb7      	ldr	r3, [pc, #732]	; (800aa4c <_dtoa_r+0x354>)
 800a76e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a770:	0328      	lsls	r0, r5, #12
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	9b02      	ldr	r3, [sp, #8]
 800a776:	0b00      	lsrs	r0, r0, #12
 800a778:	4318      	orrs	r0, r3
 800a77a:	d101      	bne.n	800a780 <_dtoa_r+0x88>
 800a77c:	f000 fdbf 	bl	800b2fe <_dtoa_r+0xc06>
 800a780:	48b3      	ldr	r0, [pc, #716]	; (800aa50 <_dtoa_r+0x358>)
 800a782:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a784:	9006      	str	r0, [sp, #24]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <_dtoa_r+0x98>
 800a78a:	4bb2      	ldr	r3, [pc, #712]	; (800aa54 <_dtoa_r+0x35c>)
 800a78c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	9806      	ldr	r0, [sp, #24]
 800a792:	b01d      	add	sp, #116	; 0x74
 800a794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a796:	2300      	movs	r3, #0
 800a798:	602b      	str	r3, [r5, #0]
 800a79a:	e7e1      	b.n	800a760 <_dtoa_r+0x68>
 800a79c:	9b08      	ldr	r3, [sp, #32]
 800a79e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a7a0:	9312      	str	r3, [sp, #72]	; 0x48
 800a7a2:	9413      	str	r4, [sp, #76]	; 0x4c
 800a7a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	f7f5 fe4c 	bl	8000448 <__aeabi_dcmpeq>
 800a7b0:	1e04      	subs	r4, r0, #0
 800a7b2:	d009      	beq.n	800a7c8 <_dtoa_r+0xd0>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	4ba7      	ldr	r3, [pc, #668]	; (800aa58 <_dtoa_r+0x360>)
 800a7bc:	9306      	str	r3, [sp, #24]
 800a7be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0e5      	beq.n	800a790 <_dtoa_r+0x98>
 800a7c4:	4ba5      	ldr	r3, [pc, #660]	; (800aa5c <_dtoa_r+0x364>)
 800a7c6:	e7e1      	b.n	800a78c <_dtoa_r+0x94>
 800a7c8:	ab1a      	add	r3, sp, #104	; 0x68
 800a7ca:	9301      	str	r3, [sp, #4]
 800a7cc:	ab1b      	add	r3, sp, #108	; 0x6c
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	0038      	movs	r0, r7
 800a7d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7d6:	f001 fd47 	bl	800c268 <__d2b>
 800a7da:	006e      	lsls	r6, r5, #1
 800a7dc:	9005      	str	r0, [sp, #20]
 800a7de:	0d76      	lsrs	r6, r6, #21
 800a7e0:	d100      	bne.n	800a7e4 <_dtoa_r+0xec>
 800a7e2:	e07c      	b.n	800a8de <_dtoa_r+0x1e6>
 800a7e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a7e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7ea:	4a9d      	ldr	r2, [pc, #628]	; (800aa60 <_dtoa_r+0x368>)
 800a7ec:	031b      	lsls	r3, r3, #12
 800a7ee:	0b1b      	lsrs	r3, r3, #12
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	0011      	movs	r1, r2
 800a7f4:	4b9b      	ldr	r3, [pc, #620]	; (800aa64 <_dtoa_r+0x36c>)
 800a7f6:	9418      	str	r4, [sp, #96]	; 0x60
 800a7f8:	18f6      	adds	r6, r6, r3
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	4b9a      	ldr	r3, [pc, #616]	; (800aa68 <_dtoa_r+0x370>)
 800a7fe:	f7f7 fe5f 	bl	80024c0 <__aeabi_dsub>
 800a802:	4a9a      	ldr	r2, [pc, #616]	; (800aa6c <_dtoa_r+0x374>)
 800a804:	4b9a      	ldr	r3, [pc, #616]	; (800aa70 <_dtoa_r+0x378>)
 800a806:	f7f7 fbef 	bl	8001fe8 <__aeabi_dmul>
 800a80a:	4a9a      	ldr	r2, [pc, #616]	; (800aa74 <_dtoa_r+0x37c>)
 800a80c:	4b9a      	ldr	r3, [pc, #616]	; (800aa78 <_dtoa_r+0x380>)
 800a80e:	f7f6 fcad 	bl	800116c <__aeabi_dadd>
 800a812:	0004      	movs	r4, r0
 800a814:	0030      	movs	r0, r6
 800a816:	000d      	movs	r5, r1
 800a818:	f7f8 fa38 	bl	8002c8c <__aeabi_i2d>
 800a81c:	4a97      	ldr	r2, [pc, #604]	; (800aa7c <_dtoa_r+0x384>)
 800a81e:	4b98      	ldr	r3, [pc, #608]	; (800aa80 <_dtoa_r+0x388>)
 800a820:	f7f7 fbe2 	bl	8001fe8 <__aeabi_dmul>
 800a824:	0002      	movs	r2, r0
 800a826:	000b      	movs	r3, r1
 800a828:	0020      	movs	r0, r4
 800a82a:	0029      	movs	r1, r5
 800a82c:	f7f6 fc9e 	bl	800116c <__aeabi_dadd>
 800a830:	0004      	movs	r4, r0
 800a832:	000d      	movs	r5, r1
 800a834:	f7f8 f9f4 	bl	8002c20 <__aeabi_d2iz>
 800a838:	2200      	movs	r2, #0
 800a83a:	9002      	str	r0, [sp, #8]
 800a83c:	2300      	movs	r3, #0
 800a83e:	0020      	movs	r0, r4
 800a840:	0029      	movs	r1, r5
 800a842:	f7f5 fe07 	bl	8000454 <__aeabi_dcmplt>
 800a846:	2800      	cmp	r0, #0
 800a848:	d00b      	beq.n	800a862 <_dtoa_r+0x16a>
 800a84a:	9802      	ldr	r0, [sp, #8]
 800a84c:	f7f8 fa1e 	bl	8002c8c <__aeabi_i2d>
 800a850:	002b      	movs	r3, r5
 800a852:	0022      	movs	r2, r4
 800a854:	f7f5 fdf8 	bl	8000448 <__aeabi_dcmpeq>
 800a858:	4243      	negs	r3, r0
 800a85a:	4158      	adcs	r0, r3
 800a85c:	9b02      	ldr	r3, [sp, #8]
 800a85e:	1a1b      	subs	r3, r3, r0
 800a860:	9302      	str	r3, [sp, #8]
 800a862:	2301      	movs	r3, #1
 800a864:	9316      	str	r3, [sp, #88]	; 0x58
 800a866:	9b02      	ldr	r3, [sp, #8]
 800a868:	2b16      	cmp	r3, #22
 800a86a:	d80f      	bhi.n	800a88c <_dtoa_r+0x194>
 800a86c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a86e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a870:	00da      	lsls	r2, r3, #3
 800a872:	4b84      	ldr	r3, [pc, #528]	; (800aa84 <_dtoa_r+0x38c>)
 800a874:	189b      	adds	r3, r3, r2
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f7f5 fdeb 	bl	8000454 <__aeabi_dcmplt>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d049      	beq.n	800a916 <_dtoa_r+0x21e>
 800a882:	9b02      	ldr	r3, [sp, #8]
 800a884:	3b01      	subs	r3, #1
 800a886:	9302      	str	r3, [sp, #8]
 800a888:	2300      	movs	r3, #0
 800a88a:	9316      	str	r3, [sp, #88]	; 0x58
 800a88c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a88e:	1b9e      	subs	r6, r3, r6
 800a890:	2300      	movs	r3, #0
 800a892:	930a      	str	r3, [sp, #40]	; 0x28
 800a894:	0033      	movs	r3, r6
 800a896:	3b01      	subs	r3, #1
 800a898:	930d      	str	r3, [sp, #52]	; 0x34
 800a89a:	d504      	bpl.n	800a8a6 <_dtoa_r+0x1ae>
 800a89c:	2301      	movs	r3, #1
 800a89e:	1b9b      	subs	r3, r3, r6
 800a8a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	930d      	str	r3, [sp, #52]	; 0x34
 800a8a6:	9b02      	ldr	r3, [sp, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	db36      	blt.n	800a91a <_dtoa_r+0x222>
 800a8ac:	9a02      	ldr	r2, [sp, #8]
 800a8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8b0:	4694      	mov	ip, r2
 800a8b2:	4463      	add	r3, ip
 800a8b4:	930d      	str	r3, [sp, #52]	; 0x34
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	9215      	str	r2, [sp, #84]	; 0x54
 800a8ba:	930e      	str	r3, [sp, #56]	; 0x38
 800a8bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8be:	2401      	movs	r4, #1
 800a8c0:	2b09      	cmp	r3, #9
 800a8c2:	d864      	bhi.n	800a98e <_dtoa_r+0x296>
 800a8c4:	2b05      	cmp	r3, #5
 800a8c6:	dd02      	ble.n	800a8ce <_dtoa_r+0x1d6>
 800a8c8:	2400      	movs	r4, #0
 800a8ca:	3b04      	subs	r3, #4
 800a8cc:	9322      	str	r3, [sp, #136]	; 0x88
 800a8ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8d0:	1e98      	subs	r0, r3, #2
 800a8d2:	2803      	cmp	r0, #3
 800a8d4:	d864      	bhi.n	800a9a0 <_dtoa_r+0x2a8>
 800a8d6:	f7f5 fc1d 	bl	8000114 <__gnu_thumb1_case_uqi>
 800a8da:	3829      	.short	0x3829
 800a8dc:	5836      	.short	0x5836
 800a8de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a8e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a8e2:	189e      	adds	r6, r3, r2
 800a8e4:	4b68      	ldr	r3, [pc, #416]	; (800aa88 <_dtoa_r+0x390>)
 800a8e6:	18f2      	adds	r2, r6, r3
 800a8e8:	2a20      	cmp	r2, #32
 800a8ea:	dd0f      	ble.n	800a90c <_dtoa_r+0x214>
 800a8ec:	2340      	movs	r3, #64	; 0x40
 800a8ee:	1a9b      	subs	r3, r3, r2
 800a8f0:	409d      	lsls	r5, r3
 800a8f2:	4b66      	ldr	r3, [pc, #408]	; (800aa8c <_dtoa_r+0x394>)
 800a8f4:	9802      	ldr	r0, [sp, #8]
 800a8f6:	18f3      	adds	r3, r6, r3
 800a8f8:	40d8      	lsrs	r0, r3
 800a8fa:	4328      	orrs	r0, r5
 800a8fc:	f7f8 f9f6 	bl	8002cec <__aeabi_ui2d>
 800a900:	2301      	movs	r3, #1
 800a902:	4c63      	ldr	r4, [pc, #396]	; (800aa90 <_dtoa_r+0x398>)
 800a904:	3e01      	subs	r6, #1
 800a906:	1909      	adds	r1, r1, r4
 800a908:	9318      	str	r3, [sp, #96]	; 0x60
 800a90a:	e776      	b.n	800a7fa <_dtoa_r+0x102>
 800a90c:	2320      	movs	r3, #32
 800a90e:	9802      	ldr	r0, [sp, #8]
 800a910:	1a9b      	subs	r3, r3, r2
 800a912:	4098      	lsls	r0, r3
 800a914:	e7f2      	b.n	800a8fc <_dtoa_r+0x204>
 800a916:	9016      	str	r0, [sp, #88]	; 0x58
 800a918:	e7b8      	b.n	800a88c <_dtoa_r+0x194>
 800a91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a91c:	9a02      	ldr	r2, [sp, #8]
 800a91e:	1a9b      	subs	r3, r3, r2
 800a920:	930a      	str	r3, [sp, #40]	; 0x28
 800a922:	4253      	negs	r3, r2
 800a924:	930e      	str	r3, [sp, #56]	; 0x38
 800a926:	2300      	movs	r3, #0
 800a928:	9315      	str	r3, [sp, #84]	; 0x54
 800a92a:	e7c7      	b.n	800a8bc <_dtoa_r+0x1c4>
 800a92c:	2300      	movs	r3, #0
 800a92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a930:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a932:	930c      	str	r3, [sp, #48]	; 0x30
 800a934:	9307      	str	r3, [sp, #28]
 800a936:	2b00      	cmp	r3, #0
 800a938:	dc13      	bgt.n	800a962 <_dtoa_r+0x26a>
 800a93a:	2301      	movs	r3, #1
 800a93c:	001a      	movs	r2, r3
 800a93e:	930c      	str	r3, [sp, #48]	; 0x30
 800a940:	9307      	str	r3, [sp, #28]
 800a942:	9223      	str	r2, [sp, #140]	; 0x8c
 800a944:	e00d      	b.n	800a962 <_dtoa_r+0x26a>
 800a946:	2301      	movs	r3, #1
 800a948:	e7f1      	b.n	800a92e <_dtoa_r+0x236>
 800a94a:	2300      	movs	r3, #0
 800a94c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a94e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a950:	4694      	mov	ip, r2
 800a952:	9b02      	ldr	r3, [sp, #8]
 800a954:	4463      	add	r3, ip
 800a956:	930c      	str	r3, [sp, #48]	; 0x30
 800a958:	3301      	adds	r3, #1
 800a95a:	9307      	str	r3, [sp, #28]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dc00      	bgt.n	800a962 <_dtoa_r+0x26a>
 800a960:	2301      	movs	r3, #1
 800a962:	2200      	movs	r2, #0
 800a964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a966:	6042      	str	r2, [r0, #4]
 800a968:	3204      	adds	r2, #4
 800a96a:	0015      	movs	r5, r2
 800a96c:	3514      	adds	r5, #20
 800a96e:	6841      	ldr	r1, [r0, #4]
 800a970:	429d      	cmp	r5, r3
 800a972:	d919      	bls.n	800a9a8 <_dtoa_r+0x2b0>
 800a974:	0038      	movs	r0, r7
 800a976:	f001 f87f 	bl	800ba78 <_Balloc>
 800a97a:	9006      	str	r0, [sp, #24]
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d117      	bne.n	800a9b0 <_dtoa_r+0x2b8>
 800a980:	21d5      	movs	r1, #213	; 0xd5
 800a982:	0002      	movs	r2, r0
 800a984:	4b43      	ldr	r3, [pc, #268]	; (800aa94 <_dtoa_r+0x39c>)
 800a986:	0049      	lsls	r1, r1, #1
 800a988:	e6cb      	b.n	800a722 <_dtoa_r+0x2a>
 800a98a:	2301      	movs	r3, #1
 800a98c:	e7de      	b.n	800a94c <_dtoa_r+0x254>
 800a98e:	2300      	movs	r3, #0
 800a990:	940f      	str	r4, [sp, #60]	; 0x3c
 800a992:	9322      	str	r3, [sp, #136]	; 0x88
 800a994:	3b01      	subs	r3, #1
 800a996:	930c      	str	r3, [sp, #48]	; 0x30
 800a998:	9307      	str	r3, [sp, #28]
 800a99a:	2200      	movs	r2, #0
 800a99c:	3313      	adds	r3, #19
 800a99e:	e7d0      	b.n	800a942 <_dtoa_r+0x24a>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9a4:	3b02      	subs	r3, #2
 800a9a6:	e7f6      	b.n	800a996 <_dtoa_r+0x29e>
 800a9a8:	3101      	adds	r1, #1
 800a9aa:	6041      	str	r1, [r0, #4]
 800a9ac:	0052      	lsls	r2, r2, #1
 800a9ae:	e7dc      	b.n	800a96a <_dtoa_r+0x272>
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	9a06      	ldr	r2, [sp, #24]
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	9b07      	ldr	r3, [sp, #28]
 800a9b8:	2b0e      	cmp	r3, #14
 800a9ba:	d900      	bls.n	800a9be <_dtoa_r+0x2c6>
 800a9bc:	e0eb      	b.n	800ab96 <_dtoa_r+0x49e>
 800a9be:	2c00      	cmp	r4, #0
 800a9c0:	d100      	bne.n	800a9c4 <_dtoa_r+0x2cc>
 800a9c2:	e0e8      	b.n	800ab96 <_dtoa_r+0x49e>
 800a9c4:	9b02      	ldr	r3, [sp, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	dd68      	ble.n	800aa9c <_dtoa_r+0x3a4>
 800a9ca:	001a      	movs	r2, r3
 800a9cc:	210f      	movs	r1, #15
 800a9ce:	4b2d      	ldr	r3, [pc, #180]	; (800aa84 <_dtoa_r+0x38c>)
 800a9d0:	400a      	ands	r2, r1
 800a9d2:	00d2      	lsls	r2, r2, #3
 800a9d4:	189b      	adds	r3, r3, r2
 800a9d6:	681d      	ldr	r5, [r3, #0]
 800a9d8:	685e      	ldr	r6, [r3, #4]
 800a9da:	9b02      	ldr	r3, [sp, #8]
 800a9dc:	111c      	asrs	r4, r3, #4
 800a9de:	2302      	movs	r3, #2
 800a9e0:	9310      	str	r3, [sp, #64]	; 0x40
 800a9e2:	9b02      	ldr	r3, [sp, #8]
 800a9e4:	05db      	lsls	r3, r3, #23
 800a9e6:	d50b      	bpl.n	800aa00 <_dtoa_r+0x308>
 800a9e8:	4b2b      	ldr	r3, [pc, #172]	; (800aa98 <_dtoa_r+0x3a0>)
 800a9ea:	400c      	ands	r4, r1
 800a9ec:	6a1a      	ldr	r2, [r3, #32]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a9f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a9f4:	f7f6 fef6 	bl	80017e4 <__aeabi_ddiv>
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	9008      	str	r0, [sp, #32]
 800a9fc:	9109      	str	r1, [sp, #36]	; 0x24
 800a9fe:	9310      	str	r3, [sp, #64]	; 0x40
 800aa00:	4b25      	ldr	r3, [pc, #148]	; (800aa98 <_dtoa_r+0x3a0>)
 800aa02:	9314      	str	r3, [sp, #80]	; 0x50
 800aa04:	2c00      	cmp	r4, #0
 800aa06:	d108      	bne.n	800aa1a <_dtoa_r+0x322>
 800aa08:	9808      	ldr	r0, [sp, #32]
 800aa0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa0c:	002a      	movs	r2, r5
 800aa0e:	0033      	movs	r3, r6
 800aa10:	f7f6 fee8 	bl	80017e4 <__aeabi_ddiv>
 800aa14:	9008      	str	r0, [sp, #32]
 800aa16:	9109      	str	r1, [sp, #36]	; 0x24
 800aa18:	e05c      	b.n	800aad4 <_dtoa_r+0x3dc>
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	421c      	tst	r4, r3
 800aa1e:	d00b      	beq.n	800aa38 <_dtoa_r+0x340>
 800aa20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa22:	0028      	movs	r0, r5
 800aa24:	3301      	adds	r3, #1
 800aa26:	9310      	str	r3, [sp, #64]	; 0x40
 800aa28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa2a:	0031      	movs	r1, r6
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	f7f7 fada 	bl	8001fe8 <__aeabi_dmul>
 800aa34:	0005      	movs	r5, r0
 800aa36:	000e      	movs	r6, r1
 800aa38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa3a:	1064      	asrs	r4, r4, #1
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	e7e0      	b.n	800aa02 <_dtoa_r+0x30a>
 800aa40:	0800d705 	.word	0x0800d705
 800aa44:	0800d71c 	.word	0x0800d71c
 800aa48:	7ff00000 	.word	0x7ff00000
 800aa4c:	0000270f 	.word	0x0000270f
 800aa50:	0800d701 	.word	0x0800d701
 800aa54:	0800d704 	.word	0x0800d704
 800aa58:	0800d67c 	.word	0x0800d67c
 800aa5c:	0800d67d 	.word	0x0800d67d
 800aa60:	3ff00000 	.word	0x3ff00000
 800aa64:	fffffc01 	.word	0xfffffc01
 800aa68:	3ff80000 	.word	0x3ff80000
 800aa6c:	636f4361 	.word	0x636f4361
 800aa70:	3fd287a7 	.word	0x3fd287a7
 800aa74:	8b60c8b3 	.word	0x8b60c8b3
 800aa78:	3fc68a28 	.word	0x3fc68a28
 800aa7c:	509f79fb 	.word	0x509f79fb
 800aa80:	3fd34413 	.word	0x3fd34413
 800aa84:	0800d888 	.word	0x0800d888
 800aa88:	00000432 	.word	0x00000432
 800aa8c:	00000412 	.word	0x00000412
 800aa90:	fe100000 	.word	0xfe100000
 800aa94:	0800d777 	.word	0x0800d777
 800aa98:	0800d860 	.word	0x0800d860
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	9310      	str	r3, [sp, #64]	; 0x40
 800aaa0:	9b02      	ldr	r3, [sp, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d016      	beq.n	800aad4 <_dtoa_r+0x3dc>
 800aaa6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aaa8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aaaa:	425c      	negs	r4, r3
 800aaac:	230f      	movs	r3, #15
 800aaae:	4ab6      	ldr	r2, [pc, #728]	; (800ad88 <_dtoa_r+0x690>)
 800aab0:	4023      	ands	r3, r4
 800aab2:	00db      	lsls	r3, r3, #3
 800aab4:	18d3      	adds	r3, r2, r3
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	f7f7 fa95 	bl	8001fe8 <__aeabi_dmul>
 800aabe:	2601      	movs	r6, #1
 800aac0:	2300      	movs	r3, #0
 800aac2:	9008      	str	r0, [sp, #32]
 800aac4:	9109      	str	r1, [sp, #36]	; 0x24
 800aac6:	4db1      	ldr	r5, [pc, #708]	; (800ad8c <_dtoa_r+0x694>)
 800aac8:	1124      	asrs	r4, r4, #4
 800aaca:	2c00      	cmp	r4, #0
 800aacc:	d000      	beq.n	800aad0 <_dtoa_r+0x3d8>
 800aace:	e094      	b.n	800abfa <_dtoa_r+0x502>
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d19f      	bne.n	800aa14 <_dtoa_r+0x31c>
 800aad4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d100      	bne.n	800aadc <_dtoa_r+0x3e4>
 800aada:	e09b      	b.n	800ac14 <_dtoa_r+0x51c>
 800aadc:	9c08      	ldr	r4, [sp, #32]
 800aade:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aae0:	2200      	movs	r2, #0
 800aae2:	0020      	movs	r0, r4
 800aae4:	0029      	movs	r1, r5
 800aae6:	4baa      	ldr	r3, [pc, #680]	; (800ad90 <_dtoa_r+0x698>)
 800aae8:	f7f5 fcb4 	bl	8000454 <__aeabi_dcmplt>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d100      	bne.n	800aaf2 <_dtoa_r+0x3fa>
 800aaf0:	e090      	b.n	800ac14 <_dtoa_r+0x51c>
 800aaf2:	9b07      	ldr	r3, [sp, #28]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d100      	bne.n	800aafa <_dtoa_r+0x402>
 800aaf8:	e08c      	b.n	800ac14 <_dtoa_r+0x51c>
 800aafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	dd46      	ble.n	800ab8e <_dtoa_r+0x496>
 800ab00:	9b02      	ldr	r3, [sp, #8]
 800ab02:	2200      	movs	r2, #0
 800ab04:	0020      	movs	r0, r4
 800ab06:	0029      	movs	r1, r5
 800ab08:	1e5e      	subs	r6, r3, #1
 800ab0a:	4ba2      	ldr	r3, [pc, #648]	; (800ad94 <_dtoa_r+0x69c>)
 800ab0c:	f7f7 fa6c 	bl	8001fe8 <__aeabi_dmul>
 800ab10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab12:	9008      	str	r0, [sp, #32]
 800ab14:	9109      	str	r1, [sp, #36]	; 0x24
 800ab16:	3301      	adds	r3, #1
 800ab18:	9310      	str	r3, [sp, #64]	; 0x40
 800ab1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab1e:	9c08      	ldr	r4, [sp, #32]
 800ab20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab22:	9314      	str	r3, [sp, #80]	; 0x50
 800ab24:	f7f8 f8b2 	bl	8002c8c <__aeabi_i2d>
 800ab28:	0022      	movs	r2, r4
 800ab2a:	002b      	movs	r3, r5
 800ab2c:	f7f7 fa5c 	bl	8001fe8 <__aeabi_dmul>
 800ab30:	2200      	movs	r2, #0
 800ab32:	4b99      	ldr	r3, [pc, #612]	; (800ad98 <_dtoa_r+0x6a0>)
 800ab34:	f7f6 fb1a 	bl	800116c <__aeabi_dadd>
 800ab38:	9010      	str	r0, [sp, #64]	; 0x40
 800ab3a:	9111      	str	r1, [sp, #68]	; 0x44
 800ab3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab40:	9208      	str	r2, [sp, #32]
 800ab42:	9309      	str	r3, [sp, #36]	; 0x24
 800ab44:	4a95      	ldr	r2, [pc, #596]	; (800ad9c <_dtoa_r+0x6a4>)
 800ab46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab48:	4694      	mov	ip, r2
 800ab4a:	4463      	add	r3, ip
 800ab4c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d161      	bne.n	800ac1a <_dtoa_r+0x522>
 800ab56:	2200      	movs	r2, #0
 800ab58:	0020      	movs	r0, r4
 800ab5a:	0029      	movs	r1, r5
 800ab5c:	4b90      	ldr	r3, [pc, #576]	; (800ada0 <_dtoa_r+0x6a8>)
 800ab5e:	f7f7 fcaf 	bl	80024c0 <__aeabi_dsub>
 800ab62:	9a08      	ldr	r2, [sp, #32]
 800ab64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab66:	0004      	movs	r4, r0
 800ab68:	000d      	movs	r5, r1
 800ab6a:	f7f5 fc87 	bl	800047c <__aeabi_dcmpgt>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d000      	beq.n	800ab74 <_dtoa_r+0x47c>
 800ab72:	e2af      	b.n	800b0d4 <_dtoa_r+0x9dc>
 800ab74:	488b      	ldr	r0, [pc, #556]	; (800ada4 <_dtoa_r+0x6ac>)
 800ab76:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab78:	4684      	mov	ip, r0
 800ab7a:	4461      	add	r1, ip
 800ab7c:	000b      	movs	r3, r1
 800ab7e:	0020      	movs	r0, r4
 800ab80:	0029      	movs	r1, r5
 800ab82:	9a08      	ldr	r2, [sp, #32]
 800ab84:	f7f5 fc66 	bl	8000454 <__aeabi_dcmplt>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d000      	beq.n	800ab8e <_dtoa_r+0x496>
 800ab8c:	e29f      	b.n	800b0ce <_dtoa_r+0x9d6>
 800ab8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ab92:	9308      	str	r3, [sp, #32]
 800ab94:	9409      	str	r4, [sp, #36]	; 0x24
 800ab96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	da00      	bge.n	800ab9e <_dtoa_r+0x4a6>
 800ab9c:	e172      	b.n	800ae84 <_dtoa_r+0x78c>
 800ab9e:	9a02      	ldr	r2, [sp, #8]
 800aba0:	2a0e      	cmp	r2, #14
 800aba2:	dd00      	ble.n	800aba6 <_dtoa_r+0x4ae>
 800aba4:	e16e      	b.n	800ae84 <_dtoa_r+0x78c>
 800aba6:	4b78      	ldr	r3, [pc, #480]	; (800ad88 <_dtoa_r+0x690>)
 800aba8:	00d2      	lsls	r2, r2, #3
 800abaa:	189b      	adds	r3, r3, r2
 800abac:	685c      	ldr	r4, [r3, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	930a      	str	r3, [sp, #40]	; 0x28
 800abb2:	940b      	str	r4, [sp, #44]	; 0x2c
 800abb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	db00      	blt.n	800abbc <_dtoa_r+0x4c4>
 800abba:	e0f7      	b.n	800adac <_dtoa_r+0x6b4>
 800abbc:	9b07      	ldr	r3, [sp, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dd00      	ble.n	800abc4 <_dtoa_r+0x4cc>
 800abc2:	e0f3      	b.n	800adac <_dtoa_r+0x6b4>
 800abc4:	d000      	beq.n	800abc8 <_dtoa_r+0x4d0>
 800abc6:	e282      	b.n	800b0ce <_dtoa_r+0x9d6>
 800abc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abcc:	2200      	movs	r2, #0
 800abce:	4b74      	ldr	r3, [pc, #464]	; (800ada0 <_dtoa_r+0x6a8>)
 800abd0:	f7f7 fa0a 	bl	8001fe8 <__aeabi_dmul>
 800abd4:	9a08      	ldr	r2, [sp, #32]
 800abd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd8:	f7f5 fc5a 	bl	8000490 <__aeabi_dcmpge>
 800abdc:	9e07      	ldr	r6, [sp, #28]
 800abde:	0035      	movs	r5, r6
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d000      	beq.n	800abe6 <_dtoa_r+0x4ee>
 800abe4:	e259      	b.n	800b09a <_dtoa_r+0x9a2>
 800abe6:	9b06      	ldr	r3, [sp, #24]
 800abe8:	9a06      	ldr	r2, [sp, #24]
 800abea:	3301      	adds	r3, #1
 800abec:	9308      	str	r3, [sp, #32]
 800abee:	2331      	movs	r3, #49	; 0x31
 800abf0:	7013      	strb	r3, [r2, #0]
 800abf2:	9b02      	ldr	r3, [sp, #8]
 800abf4:	3301      	adds	r3, #1
 800abf6:	9302      	str	r3, [sp, #8]
 800abf8:	e254      	b.n	800b0a4 <_dtoa_r+0x9ac>
 800abfa:	4234      	tst	r4, r6
 800abfc:	d007      	beq.n	800ac0e <_dtoa_r+0x516>
 800abfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac00:	3301      	adds	r3, #1
 800ac02:	9310      	str	r3, [sp, #64]	; 0x40
 800ac04:	682a      	ldr	r2, [r5, #0]
 800ac06:	686b      	ldr	r3, [r5, #4]
 800ac08:	f7f7 f9ee 	bl	8001fe8 <__aeabi_dmul>
 800ac0c:	0033      	movs	r3, r6
 800ac0e:	1064      	asrs	r4, r4, #1
 800ac10:	3508      	adds	r5, #8
 800ac12:	e75a      	b.n	800aaca <_dtoa_r+0x3d2>
 800ac14:	9e02      	ldr	r6, [sp, #8]
 800ac16:	9b07      	ldr	r3, [sp, #28]
 800ac18:	e780      	b.n	800ab1c <_dtoa_r+0x424>
 800ac1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac1e:	1e5a      	subs	r2, r3, #1
 800ac20:	4b59      	ldr	r3, [pc, #356]	; (800ad88 <_dtoa_r+0x690>)
 800ac22:	00d2      	lsls	r2, r2, #3
 800ac24:	189b      	adds	r3, r3, r2
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	2900      	cmp	r1, #0
 800ac2c:	d051      	beq.n	800acd2 <_dtoa_r+0x5da>
 800ac2e:	2000      	movs	r0, #0
 800ac30:	495d      	ldr	r1, [pc, #372]	; (800ada8 <_dtoa_r+0x6b0>)
 800ac32:	f7f6 fdd7 	bl	80017e4 <__aeabi_ddiv>
 800ac36:	9a08      	ldr	r2, [sp, #32]
 800ac38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3a:	f7f7 fc41 	bl	80024c0 <__aeabi_dsub>
 800ac3e:	9a06      	ldr	r2, [sp, #24]
 800ac40:	9b06      	ldr	r3, [sp, #24]
 800ac42:	4694      	mov	ip, r2
 800ac44:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac48:	9010      	str	r0, [sp, #64]	; 0x40
 800ac4a:	9111      	str	r1, [sp, #68]	; 0x44
 800ac4c:	4463      	add	r3, ip
 800ac4e:	9319      	str	r3, [sp, #100]	; 0x64
 800ac50:	0029      	movs	r1, r5
 800ac52:	0020      	movs	r0, r4
 800ac54:	f7f7 ffe4 	bl	8002c20 <__aeabi_d2iz>
 800ac58:	9014      	str	r0, [sp, #80]	; 0x50
 800ac5a:	f7f8 f817 	bl	8002c8c <__aeabi_i2d>
 800ac5e:	0002      	movs	r2, r0
 800ac60:	000b      	movs	r3, r1
 800ac62:	0020      	movs	r0, r4
 800ac64:	0029      	movs	r1, r5
 800ac66:	f7f7 fc2b 	bl	80024c0 <__aeabi_dsub>
 800ac6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac6e:	3301      	adds	r3, #1
 800ac70:	9308      	str	r3, [sp, #32]
 800ac72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac74:	0004      	movs	r4, r0
 800ac76:	3330      	adds	r3, #48	; 0x30
 800ac78:	7013      	strb	r3, [r2, #0]
 800ac7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac7e:	000d      	movs	r5, r1
 800ac80:	f7f5 fbe8 	bl	8000454 <__aeabi_dcmplt>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d175      	bne.n	800ad74 <_dtoa_r+0x67c>
 800ac88:	0022      	movs	r2, r4
 800ac8a:	002b      	movs	r3, r5
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	4940      	ldr	r1, [pc, #256]	; (800ad90 <_dtoa_r+0x698>)
 800ac90:	f7f7 fc16 	bl	80024c0 <__aeabi_dsub>
 800ac94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac98:	f7f5 fbdc 	bl	8000454 <__aeabi_dcmplt>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d000      	beq.n	800aca2 <_dtoa_r+0x5aa>
 800aca0:	e0d2      	b.n	800ae48 <_dtoa_r+0x750>
 800aca2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aca4:	9a08      	ldr	r2, [sp, #32]
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d100      	bne.n	800acac <_dtoa_r+0x5b4>
 800acaa:	e770      	b.n	800ab8e <_dtoa_r+0x496>
 800acac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800acae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800acb0:	2200      	movs	r2, #0
 800acb2:	4b38      	ldr	r3, [pc, #224]	; (800ad94 <_dtoa_r+0x69c>)
 800acb4:	f7f7 f998 	bl	8001fe8 <__aeabi_dmul>
 800acb8:	4b36      	ldr	r3, [pc, #216]	; (800ad94 <_dtoa_r+0x69c>)
 800acba:	9010      	str	r0, [sp, #64]	; 0x40
 800acbc:	9111      	str	r1, [sp, #68]	; 0x44
 800acbe:	2200      	movs	r2, #0
 800acc0:	0020      	movs	r0, r4
 800acc2:	0029      	movs	r1, r5
 800acc4:	f7f7 f990 	bl	8001fe8 <__aeabi_dmul>
 800acc8:	9b08      	ldr	r3, [sp, #32]
 800acca:	0004      	movs	r4, r0
 800accc:	000d      	movs	r5, r1
 800acce:	9317      	str	r3, [sp, #92]	; 0x5c
 800acd0:	e7be      	b.n	800ac50 <_dtoa_r+0x558>
 800acd2:	9808      	ldr	r0, [sp, #32]
 800acd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acd6:	f7f7 f987 	bl	8001fe8 <__aeabi_dmul>
 800acda:	9a06      	ldr	r2, [sp, #24]
 800acdc:	9b06      	ldr	r3, [sp, #24]
 800acde:	4694      	mov	ip, r2
 800ace0:	9308      	str	r3, [sp, #32]
 800ace2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ace4:	9010      	str	r0, [sp, #64]	; 0x40
 800ace6:	9111      	str	r1, [sp, #68]	; 0x44
 800ace8:	4463      	add	r3, ip
 800acea:	9319      	str	r3, [sp, #100]	; 0x64
 800acec:	0029      	movs	r1, r5
 800acee:	0020      	movs	r0, r4
 800acf0:	f7f7 ff96 	bl	8002c20 <__aeabi_d2iz>
 800acf4:	9017      	str	r0, [sp, #92]	; 0x5c
 800acf6:	f7f7 ffc9 	bl	8002c8c <__aeabi_i2d>
 800acfa:	0002      	movs	r2, r0
 800acfc:	000b      	movs	r3, r1
 800acfe:	0020      	movs	r0, r4
 800ad00:	0029      	movs	r1, r5
 800ad02:	f7f7 fbdd 	bl	80024c0 <__aeabi_dsub>
 800ad06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad08:	9a08      	ldr	r2, [sp, #32]
 800ad0a:	3330      	adds	r3, #48	; 0x30
 800ad0c:	7013      	strb	r3, [r2, #0]
 800ad0e:	0013      	movs	r3, r2
 800ad10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad12:	3301      	adds	r3, #1
 800ad14:	0004      	movs	r4, r0
 800ad16:	000d      	movs	r5, r1
 800ad18:	9308      	str	r3, [sp, #32]
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d12c      	bne.n	800ad78 <_dtoa_r+0x680>
 800ad1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad20:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad22:	9a06      	ldr	r2, [sp, #24]
 800ad24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad26:	4694      	mov	ip, r2
 800ad28:	4463      	add	r3, ip
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	9308      	str	r3, [sp, #32]
 800ad2e:	4b1e      	ldr	r3, [pc, #120]	; (800ada8 <_dtoa_r+0x6b0>)
 800ad30:	f7f6 fa1c 	bl	800116c <__aeabi_dadd>
 800ad34:	0002      	movs	r2, r0
 800ad36:	000b      	movs	r3, r1
 800ad38:	0020      	movs	r0, r4
 800ad3a:	0029      	movs	r1, r5
 800ad3c:	f7f5 fb9e 	bl	800047c <__aeabi_dcmpgt>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d000      	beq.n	800ad46 <_dtoa_r+0x64e>
 800ad44:	e080      	b.n	800ae48 <_dtoa_r+0x750>
 800ad46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	4916      	ldr	r1, [pc, #88]	; (800ada8 <_dtoa_r+0x6b0>)
 800ad4e:	f7f7 fbb7 	bl	80024c0 <__aeabi_dsub>
 800ad52:	0002      	movs	r2, r0
 800ad54:	000b      	movs	r3, r1
 800ad56:	0020      	movs	r0, r4
 800ad58:	0029      	movs	r1, r5
 800ad5a:	f7f5 fb7b 	bl	8000454 <__aeabi_dcmplt>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d100      	bne.n	800ad64 <_dtoa_r+0x66c>
 800ad62:	e714      	b.n	800ab8e <_dtoa_r+0x496>
 800ad64:	9b08      	ldr	r3, [sp, #32]
 800ad66:	001a      	movs	r2, r3
 800ad68:	3a01      	subs	r2, #1
 800ad6a:	9208      	str	r2, [sp, #32]
 800ad6c:	7812      	ldrb	r2, [r2, #0]
 800ad6e:	2a30      	cmp	r2, #48	; 0x30
 800ad70:	d0f8      	beq.n	800ad64 <_dtoa_r+0x66c>
 800ad72:	9308      	str	r3, [sp, #32]
 800ad74:	9602      	str	r6, [sp, #8]
 800ad76:	e055      	b.n	800ae24 <_dtoa_r+0x72c>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <_dtoa_r+0x69c>)
 800ad7c:	f7f7 f934 	bl	8001fe8 <__aeabi_dmul>
 800ad80:	0004      	movs	r4, r0
 800ad82:	000d      	movs	r5, r1
 800ad84:	e7b2      	b.n	800acec <_dtoa_r+0x5f4>
 800ad86:	46c0      	nop			; (mov r8, r8)
 800ad88:	0800d888 	.word	0x0800d888
 800ad8c:	0800d860 	.word	0x0800d860
 800ad90:	3ff00000 	.word	0x3ff00000
 800ad94:	40240000 	.word	0x40240000
 800ad98:	401c0000 	.word	0x401c0000
 800ad9c:	fcc00000 	.word	0xfcc00000
 800ada0:	40140000 	.word	0x40140000
 800ada4:	7cc00000 	.word	0x7cc00000
 800ada8:	3fe00000 	.word	0x3fe00000
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	9e06      	ldr	r6, [sp, #24]
 800adb0:	3b01      	subs	r3, #1
 800adb2:	199b      	adds	r3, r3, r6
 800adb4:	930c      	str	r3, [sp, #48]	; 0x30
 800adb6:	9c08      	ldr	r4, [sp, #32]
 800adb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800adba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adbe:	0020      	movs	r0, r4
 800adc0:	0029      	movs	r1, r5
 800adc2:	f7f6 fd0f 	bl	80017e4 <__aeabi_ddiv>
 800adc6:	f7f7 ff2b 	bl	8002c20 <__aeabi_d2iz>
 800adca:	9007      	str	r0, [sp, #28]
 800adcc:	f7f7 ff5e 	bl	8002c8c <__aeabi_i2d>
 800add0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800add2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800add4:	f7f7 f908 	bl	8001fe8 <__aeabi_dmul>
 800add8:	0002      	movs	r2, r0
 800adda:	000b      	movs	r3, r1
 800addc:	0020      	movs	r0, r4
 800adde:	0029      	movs	r1, r5
 800ade0:	f7f7 fb6e 	bl	80024c0 <__aeabi_dsub>
 800ade4:	0033      	movs	r3, r6
 800ade6:	9a07      	ldr	r2, [sp, #28]
 800ade8:	3601      	adds	r6, #1
 800adea:	3230      	adds	r2, #48	; 0x30
 800adec:	701a      	strb	r2, [r3, #0]
 800adee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adf0:	9608      	str	r6, [sp, #32]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d139      	bne.n	800ae6a <_dtoa_r+0x772>
 800adf6:	0002      	movs	r2, r0
 800adf8:	000b      	movs	r3, r1
 800adfa:	f7f6 f9b7 	bl	800116c <__aeabi_dadd>
 800adfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae02:	0004      	movs	r4, r0
 800ae04:	000d      	movs	r5, r1
 800ae06:	f7f5 fb39 	bl	800047c <__aeabi_dcmpgt>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d11b      	bne.n	800ae46 <_dtoa_r+0x74e>
 800ae0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae12:	0020      	movs	r0, r4
 800ae14:	0029      	movs	r1, r5
 800ae16:	f7f5 fb17 	bl	8000448 <__aeabi_dcmpeq>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d002      	beq.n	800ae24 <_dtoa_r+0x72c>
 800ae1e:	9b07      	ldr	r3, [sp, #28]
 800ae20:	07db      	lsls	r3, r3, #31
 800ae22:	d410      	bmi.n	800ae46 <_dtoa_r+0x74e>
 800ae24:	0038      	movs	r0, r7
 800ae26:	9905      	ldr	r1, [sp, #20]
 800ae28:	f000 fe6a 	bl	800bb00 <_Bfree>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9a08      	ldr	r2, [sp, #32]
 800ae30:	9802      	ldr	r0, [sp, #8]
 800ae32:	7013      	strb	r3, [r2, #0]
 800ae34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae36:	3001      	adds	r0, #1
 800ae38:	6018      	str	r0, [r3, #0]
 800ae3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d100      	bne.n	800ae42 <_dtoa_r+0x74a>
 800ae40:	e4a6      	b.n	800a790 <_dtoa_r+0x98>
 800ae42:	601a      	str	r2, [r3, #0]
 800ae44:	e4a4      	b.n	800a790 <_dtoa_r+0x98>
 800ae46:	9e02      	ldr	r6, [sp, #8]
 800ae48:	9b08      	ldr	r3, [sp, #32]
 800ae4a:	9308      	str	r3, [sp, #32]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	781a      	ldrb	r2, [r3, #0]
 800ae50:	2a39      	cmp	r2, #57	; 0x39
 800ae52:	d106      	bne.n	800ae62 <_dtoa_r+0x76a>
 800ae54:	9a06      	ldr	r2, [sp, #24]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d1f7      	bne.n	800ae4a <_dtoa_r+0x752>
 800ae5a:	2230      	movs	r2, #48	; 0x30
 800ae5c:	9906      	ldr	r1, [sp, #24]
 800ae5e:	3601      	adds	r6, #1
 800ae60:	700a      	strb	r2, [r1, #0]
 800ae62:	781a      	ldrb	r2, [r3, #0]
 800ae64:	3201      	adds	r2, #1
 800ae66:	701a      	strb	r2, [r3, #0]
 800ae68:	e784      	b.n	800ad74 <_dtoa_r+0x67c>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4baa      	ldr	r3, [pc, #680]	; (800b118 <_dtoa_r+0xa20>)
 800ae6e:	f7f7 f8bb 	bl	8001fe8 <__aeabi_dmul>
 800ae72:	2200      	movs	r2, #0
 800ae74:	2300      	movs	r3, #0
 800ae76:	0004      	movs	r4, r0
 800ae78:	000d      	movs	r5, r1
 800ae7a:	f7f5 fae5 	bl	8000448 <__aeabi_dcmpeq>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d09b      	beq.n	800adba <_dtoa_r+0x6c2>
 800ae82:	e7cf      	b.n	800ae24 <_dtoa_r+0x72c>
 800ae84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae86:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ae88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae8a:	2d00      	cmp	r5, #0
 800ae8c:	d012      	beq.n	800aeb4 <_dtoa_r+0x7bc>
 800ae8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ae90:	2a01      	cmp	r2, #1
 800ae92:	dc66      	bgt.n	800af62 <_dtoa_r+0x86a>
 800ae94:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae96:	2a00      	cmp	r2, #0
 800ae98:	d05d      	beq.n	800af56 <_dtoa_r+0x85e>
 800ae9a:	4aa0      	ldr	r2, [pc, #640]	; (800b11c <_dtoa_r+0xa24>)
 800ae9c:	189b      	adds	r3, r3, r2
 800ae9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aea0:	2101      	movs	r1, #1
 800aea2:	18d2      	adds	r2, r2, r3
 800aea4:	920a      	str	r2, [sp, #40]	; 0x28
 800aea6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aea8:	0038      	movs	r0, r7
 800aeaa:	18d3      	adds	r3, r2, r3
 800aeac:	930d      	str	r3, [sp, #52]	; 0x34
 800aeae:	f000 ff23 	bl	800bcf8 <__i2b>
 800aeb2:	0005      	movs	r5, r0
 800aeb4:	2c00      	cmp	r4, #0
 800aeb6:	dd0e      	ble.n	800aed6 <_dtoa_r+0x7de>
 800aeb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	dd0b      	ble.n	800aed6 <_dtoa_r+0x7de>
 800aebe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aec0:	0023      	movs	r3, r4
 800aec2:	4294      	cmp	r4, r2
 800aec4:	dd00      	ble.n	800aec8 <_dtoa_r+0x7d0>
 800aec6:	0013      	movs	r3, r2
 800aec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeca:	1ae4      	subs	r4, r4, r3
 800aecc:	1ad2      	subs	r2, r2, r3
 800aece:	920a      	str	r2, [sp, #40]	; 0x28
 800aed0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	930d      	str	r3, [sp, #52]	; 0x34
 800aed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d01f      	beq.n	800af1c <_dtoa_r+0x824>
 800aedc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d054      	beq.n	800af8c <_dtoa_r+0x894>
 800aee2:	2e00      	cmp	r6, #0
 800aee4:	dd11      	ble.n	800af0a <_dtoa_r+0x812>
 800aee6:	0029      	movs	r1, r5
 800aee8:	0032      	movs	r2, r6
 800aeea:	0038      	movs	r0, r7
 800aeec:	f000 ffca 	bl	800be84 <__pow5mult>
 800aef0:	9a05      	ldr	r2, [sp, #20]
 800aef2:	0001      	movs	r1, r0
 800aef4:	0005      	movs	r5, r0
 800aef6:	0038      	movs	r0, r7
 800aef8:	f000 ff14 	bl	800bd24 <__multiply>
 800aefc:	9905      	ldr	r1, [sp, #20]
 800aefe:	9014      	str	r0, [sp, #80]	; 0x50
 800af00:	0038      	movs	r0, r7
 800af02:	f000 fdfd 	bl	800bb00 <_Bfree>
 800af06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af08:	9305      	str	r3, [sp, #20]
 800af0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af0c:	1b9a      	subs	r2, r3, r6
 800af0e:	42b3      	cmp	r3, r6
 800af10:	d004      	beq.n	800af1c <_dtoa_r+0x824>
 800af12:	0038      	movs	r0, r7
 800af14:	9905      	ldr	r1, [sp, #20]
 800af16:	f000 ffb5 	bl	800be84 <__pow5mult>
 800af1a:	9005      	str	r0, [sp, #20]
 800af1c:	2101      	movs	r1, #1
 800af1e:	0038      	movs	r0, r7
 800af20:	f000 feea 	bl	800bcf8 <__i2b>
 800af24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af26:	0006      	movs	r6, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dd31      	ble.n	800af90 <_dtoa_r+0x898>
 800af2c:	001a      	movs	r2, r3
 800af2e:	0001      	movs	r1, r0
 800af30:	0038      	movs	r0, r7
 800af32:	f000 ffa7 	bl	800be84 <__pow5mult>
 800af36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af38:	0006      	movs	r6, r0
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	dd2d      	ble.n	800af9a <_dtoa_r+0x8a2>
 800af3e:	2300      	movs	r3, #0
 800af40:	930e      	str	r3, [sp, #56]	; 0x38
 800af42:	6933      	ldr	r3, [r6, #16]
 800af44:	3303      	adds	r3, #3
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	18f3      	adds	r3, r6, r3
 800af4a:	6858      	ldr	r0, [r3, #4]
 800af4c:	f000 fe8c 	bl	800bc68 <__hi0bits>
 800af50:	2320      	movs	r3, #32
 800af52:	1a18      	subs	r0, r3, r0
 800af54:	e039      	b.n	800afca <_dtoa_r+0x8d2>
 800af56:	2336      	movs	r3, #54	; 0x36
 800af58:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800af5a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800af5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af5e:	1a9b      	subs	r3, r3, r2
 800af60:	e79d      	b.n	800ae9e <_dtoa_r+0x7a6>
 800af62:	9b07      	ldr	r3, [sp, #28]
 800af64:	1e5e      	subs	r6, r3, #1
 800af66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af68:	42b3      	cmp	r3, r6
 800af6a:	db07      	blt.n	800af7c <_dtoa_r+0x884>
 800af6c:	1b9e      	subs	r6, r3, r6
 800af6e:	9b07      	ldr	r3, [sp, #28]
 800af70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af72:	2b00      	cmp	r3, #0
 800af74:	da93      	bge.n	800ae9e <_dtoa_r+0x7a6>
 800af76:	1ae4      	subs	r4, r4, r3
 800af78:	2300      	movs	r3, #0
 800af7a:	e790      	b.n	800ae9e <_dtoa_r+0x7a6>
 800af7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af80:	1af3      	subs	r3, r6, r3
 800af82:	18d3      	adds	r3, r2, r3
 800af84:	960e      	str	r6, [sp, #56]	; 0x38
 800af86:	9315      	str	r3, [sp, #84]	; 0x54
 800af88:	2600      	movs	r6, #0
 800af8a:	e7f0      	b.n	800af6e <_dtoa_r+0x876>
 800af8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af8e:	e7c0      	b.n	800af12 <_dtoa_r+0x81a>
 800af90:	2300      	movs	r3, #0
 800af92:	930e      	str	r3, [sp, #56]	; 0x38
 800af94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af96:	2b01      	cmp	r3, #1
 800af98:	dc13      	bgt.n	800afc2 <_dtoa_r+0x8ca>
 800af9a:	2300      	movs	r3, #0
 800af9c:	930e      	str	r3, [sp, #56]	; 0x38
 800af9e:	9b08      	ldr	r3, [sp, #32]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10e      	bne.n	800afc2 <_dtoa_r+0x8ca>
 800afa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa6:	031b      	lsls	r3, r3, #12
 800afa8:	d10b      	bne.n	800afc2 <_dtoa_r+0x8ca>
 800afaa:	4b5d      	ldr	r3, [pc, #372]	; (800b120 <_dtoa_r+0xa28>)
 800afac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afae:	4213      	tst	r3, r2
 800afb0:	d007      	beq.n	800afc2 <_dtoa_r+0x8ca>
 800afb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb4:	3301      	adds	r3, #1
 800afb6:	930a      	str	r3, [sp, #40]	; 0x28
 800afb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afba:	3301      	adds	r3, #1
 800afbc:	930d      	str	r3, [sp, #52]	; 0x34
 800afbe:	2301      	movs	r3, #1
 800afc0:	930e      	str	r3, [sp, #56]	; 0x38
 800afc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afc4:	2001      	movs	r0, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1bb      	bne.n	800af42 <_dtoa_r+0x84a>
 800afca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afcc:	221f      	movs	r2, #31
 800afce:	1818      	adds	r0, r3, r0
 800afd0:	0003      	movs	r3, r0
 800afd2:	4013      	ands	r3, r2
 800afd4:	4210      	tst	r0, r2
 800afd6:	d046      	beq.n	800b066 <_dtoa_r+0x96e>
 800afd8:	3201      	adds	r2, #1
 800afda:	1ad2      	subs	r2, r2, r3
 800afdc:	2a04      	cmp	r2, #4
 800afde:	dd3f      	ble.n	800b060 <_dtoa_r+0x968>
 800afe0:	221c      	movs	r2, #28
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afe6:	18e4      	adds	r4, r4, r3
 800afe8:	18d2      	adds	r2, r2, r3
 800afea:	920a      	str	r2, [sp, #40]	; 0x28
 800afec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afee:	18d3      	adds	r3, r2, r3
 800aff0:	930d      	str	r3, [sp, #52]	; 0x34
 800aff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dd05      	ble.n	800b004 <_dtoa_r+0x90c>
 800aff8:	001a      	movs	r2, r3
 800affa:	0038      	movs	r0, r7
 800affc:	9905      	ldr	r1, [sp, #20]
 800affe:	f000 ff9d 	bl	800bf3c <__lshift>
 800b002:	9005      	str	r0, [sp, #20]
 800b004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b006:	2b00      	cmp	r3, #0
 800b008:	dd05      	ble.n	800b016 <_dtoa_r+0x91e>
 800b00a:	0031      	movs	r1, r6
 800b00c:	001a      	movs	r2, r3
 800b00e:	0038      	movs	r0, r7
 800b010:	f000 ff94 	bl	800bf3c <__lshift>
 800b014:	0006      	movs	r6, r0
 800b016:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d026      	beq.n	800b06a <_dtoa_r+0x972>
 800b01c:	0031      	movs	r1, r6
 800b01e:	9805      	ldr	r0, [sp, #20]
 800b020:	f000 fffa 	bl	800c018 <__mcmp>
 800b024:	2800      	cmp	r0, #0
 800b026:	da20      	bge.n	800b06a <_dtoa_r+0x972>
 800b028:	9b02      	ldr	r3, [sp, #8]
 800b02a:	220a      	movs	r2, #10
 800b02c:	3b01      	subs	r3, #1
 800b02e:	9302      	str	r3, [sp, #8]
 800b030:	0038      	movs	r0, r7
 800b032:	2300      	movs	r3, #0
 800b034:	9905      	ldr	r1, [sp, #20]
 800b036:	f000 fd87 	bl	800bb48 <__multadd>
 800b03a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b03c:	9005      	str	r0, [sp, #20]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d100      	bne.n	800b044 <_dtoa_r+0x94c>
 800b042:	e166      	b.n	800b312 <_dtoa_r+0xc1a>
 800b044:	2300      	movs	r3, #0
 800b046:	0029      	movs	r1, r5
 800b048:	220a      	movs	r2, #10
 800b04a:	0038      	movs	r0, r7
 800b04c:	f000 fd7c 	bl	800bb48 <__multadd>
 800b050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b052:	0005      	movs	r5, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	dc47      	bgt.n	800b0e8 <_dtoa_r+0x9f0>
 800b058:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	dc0d      	bgt.n	800b07a <_dtoa_r+0x982>
 800b05e:	e043      	b.n	800b0e8 <_dtoa_r+0x9f0>
 800b060:	2a04      	cmp	r2, #4
 800b062:	d0c6      	beq.n	800aff2 <_dtoa_r+0x8fa>
 800b064:	0013      	movs	r3, r2
 800b066:	331c      	adds	r3, #28
 800b068:	e7bc      	b.n	800afe4 <_dtoa_r+0x8ec>
 800b06a:	9b07      	ldr	r3, [sp, #28]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dc35      	bgt.n	800b0dc <_dtoa_r+0x9e4>
 800b070:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b072:	2b02      	cmp	r3, #2
 800b074:	dd32      	ble.n	800b0dc <_dtoa_r+0x9e4>
 800b076:	9b07      	ldr	r3, [sp, #28]
 800b078:	930c      	str	r3, [sp, #48]	; 0x30
 800b07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10c      	bne.n	800b09a <_dtoa_r+0x9a2>
 800b080:	0031      	movs	r1, r6
 800b082:	2205      	movs	r2, #5
 800b084:	0038      	movs	r0, r7
 800b086:	f000 fd5f 	bl	800bb48 <__multadd>
 800b08a:	0006      	movs	r6, r0
 800b08c:	0001      	movs	r1, r0
 800b08e:	9805      	ldr	r0, [sp, #20]
 800b090:	f000 ffc2 	bl	800c018 <__mcmp>
 800b094:	2800      	cmp	r0, #0
 800b096:	dd00      	ble.n	800b09a <_dtoa_r+0x9a2>
 800b098:	e5a5      	b.n	800abe6 <_dtoa_r+0x4ee>
 800b09a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b09c:	43db      	mvns	r3, r3
 800b09e:	9302      	str	r3, [sp, #8]
 800b0a0:	9b06      	ldr	r3, [sp, #24]
 800b0a2:	9308      	str	r3, [sp, #32]
 800b0a4:	2400      	movs	r4, #0
 800b0a6:	0031      	movs	r1, r6
 800b0a8:	0038      	movs	r0, r7
 800b0aa:	f000 fd29 	bl	800bb00 <_Bfree>
 800b0ae:	2d00      	cmp	r5, #0
 800b0b0:	d100      	bne.n	800b0b4 <_dtoa_r+0x9bc>
 800b0b2:	e6b7      	b.n	800ae24 <_dtoa_r+0x72c>
 800b0b4:	2c00      	cmp	r4, #0
 800b0b6:	d005      	beq.n	800b0c4 <_dtoa_r+0x9cc>
 800b0b8:	42ac      	cmp	r4, r5
 800b0ba:	d003      	beq.n	800b0c4 <_dtoa_r+0x9cc>
 800b0bc:	0021      	movs	r1, r4
 800b0be:	0038      	movs	r0, r7
 800b0c0:	f000 fd1e 	bl	800bb00 <_Bfree>
 800b0c4:	0029      	movs	r1, r5
 800b0c6:	0038      	movs	r0, r7
 800b0c8:	f000 fd1a 	bl	800bb00 <_Bfree>
 800b0cc:	e6aa      	b.n	800ae24 <_dtoa_r+0x72c>
 800b0ce:	2600      	movs	r6, #0
 800b0d0:	0035      	movs	r5, r6
 800b0d2:	e7e2      	b.n	800b09a <_dtoa_r+0x9a2>
 800b0d4:	9602      	str	r6, [sp, #8]
 800b0d6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b0d8:	0035      	movs	r5, r6
 800b0da:	e584      	b.n	800abe6 <_dtoa_r+0x4ee>
 800b0dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d100      	bne.n	800b0e4 <_dtoa_r+0x9ec>
 800b0e2:	e0ce      	b.n	800b282 <_dtoa_r+0xb8a>
 800b0e4:	9b07      	ldr	r3, [sp, #28]
 800b0e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b0e8:	2c00      	cmp	r4, #0
 800b0ea:	dd05      	ble.n	800b0f8 <_dtoa_r+0xa00>
 800b0ec:	0029      	movs	r1, r5
 800b0ee:	0022      	movs	r2, r4
 800b0f0:	0038      	movs	r0, r7
 800b0f2:	f000 ff23 	bl	800bf3c <__lshift>
 800b0f6:	0005      	movs	r5, r0
 800b0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0fa:	0028      	movs	r0, r5
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d022      	beq.n	800b146 <_dtoa_r+0xa4e>
 800b100:	0038      	movs	r0, r7
 800b102:	6869      	ldr	r1, [r5, #4]
 800b104:	f000 fcb8 	bl	800ba78 <_Balloc>
 800b108:	1e04      	subs	r4, r0, #0
 800b10a:	d10f      	bne.n	800b12c <_dtoa_r+0xa34>
 800b10c:	0002      	movs	r2, r0
 800b10e:	4b05      	ldr	r3, [pc, #20]	; (800b124 <_dtoa_r+0xa2c>)
 800b110:	4905      	ldr	r1, [pc, #20]	; (800b128 <_dtoa_r+0xa30>)
 800b112:	f7ff fb06 	bl	800a722 <_dtoa_r+0x2a>
 800b116:	46c0      	nop			; (mov r8, r8)
 800b118:	40240000 	.word	0x40240000
 800b11c:	00000433 	.word	0x00000433
 800b120:	7ff00000 	.word	0x7ff00000
 800b124:	0800d777 	.word	0x0800d777
 800b128:	000002ea 	.word	0x000002ea
 800b12c:	0029      	movs	r1, r5
 800b12e:	692b      	ldr	r3, [r5, #16]
 800b130:	310c      	adds	r1, #12
 800b132:	1c9a      	adds	r2, r3, #2
 800b134:	0092      	lsls	r2, r2, #2
 800b136:	300c      	adds	r0, #12
 800b138:	f7fd fbe0 	bl	80088fc <memcpy>
 800b13c:	2201      	movs	r2, #1
 800b13e:	0021      	movs	r1, r4
 800b140:	0038      	movs	r0, r7
 800b142:	f000 fefb 	bl	800bf3c <__lshift>
 800b146:	9b06      	ldr	r3, [sp, #24]
 800b148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b14a:	930a      	str	r3, [sp, #40]	; 0x28
 800b14c:	3b01      	subs	r3, #1
 800b14e:	189b      	adds	r3, r3, r2
 800b150:	2201      	movs	r2, #1
 800b152:	002c      	movs	r4, r5
 800b154:	0005      	movs	r5, r0
 800b156:	9314      	str	r3, [sp, #80]	; 0x50
 800b158:	9b08      	ldr	r3, [sp, #32]
 800b15a:	4013      	ands	r3, r2
 800b15c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b15e:	0031      	movs	r1, r6
 800b160:	9805      	ldr	r0, [sp, #20]
 800b162:	f7ff fa3d 	bl	800a5e0 <quorem>
 800b166:	0003      	movs	r3, r0
 800b168:	0021      	movs	r1, r4
 800b16a:	3330      	adds	r3, #48	; 0x30
 800b16c:	900d      	str	r0, [sp, #52]	; 0x34
 800b16e:	9805      	ldr	r0, [sp, #20]
 800b170:	9307      	str	r3, [sp, #28]
 800b172:	f000 ff51 	bl	800c018 <__mcmp>
 800b176:	002a      	movs	r2, r5
 800b178:	900e      	str	r0, [sp, #56]	; 0x38
 800b17a:	0031      	movs	r1, r6
 800b17c:	0038      	movs	r0, r7
 800b17e:	f000 ff67 	bl	800c050 <__mdiff>
 800b182:	68c3      	ldr	r3, [r0, #12]
 800b184:	9008      	str	r0, [sp, #32]
 800b186:	9310      	str	r3, [sp, #64]	; 0x40
 800b188:	2301      	movs	r3, #1
 800b18a:	930c      	str	r3, [sp, #48]	; 0x30
 800b18c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d104      	bne.n	800b19c <_dtoa_r+0xaa4>
 800b192:	0001      	movs	r1, r0
 800b194:	9805      	ldr	r0, [sp, #20]
 800b196:	f000 ff3f 	bl	800c018 <__mcmp>
 800b19a:	900c      	str	r0, [sp, #48]	; 0x30
 800b19c:	0038      	movs	r0, r7
 800b19e:	9908      	ldr	r1, [sp, #32]
 800b1a0:	f000 fcae 	bl	800bb00 <_Bfree>
 800b1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	9308      	str	r3, [sp, #32]
 800b1ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	d10c      	bne.n	800b1d0 <_dtoa_r+0xad8>
 800b1b6:	9b07      	ldr	r3, [sp, #28]
 800b1b8:	2b39      	cmp	r3, #57	; 0x39
 800b1ba:	d026      	beq.n	800b20a <_dtoa_r+0xb12>
 800b1bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	dd02      	ble.n	800b1c8 <_dtoa_r+0xad0>
 800b1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1c4:	3331      	adds	r3, #49	; 0x31
 800b1c6:	9307      	str	r3, [sp, #28]
 800b1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ca:	9a07      	ldr	r2, [sp, #28]
 800b1cc:	701a      	strb	r2, [r3, #0]
 800b1ce:	e76a      	b.n	800b0a6 <_dtoa_r+0x9ae>
 800b1d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	db04      	blt.n	800b1e0 <_dtoa_r+0xae8>
 800b1d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	d11f      	bne.n	800b220 <_dtoa_r+0xb28>
 800b1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	ddf0      	ble.n	800b1c8 <_dtoa_r+0xad0>
 800b1e6:	9905      	ldr	r1, [sp, #20]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	0038      	movs	r0, r7
 800b1ec:	f000 fea6 	bl	800bf3c <__lshift>
 800b1f0:	0031      	movs	r1, r6
 800b1f2:	9005      	str	r0, [sp, #20]
 800b1f4:	f000 ff10 	bl	800c018 <__mcmp>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	dc03      	bgt.n	800b204 <_dtoa_r+0xb0c>
 800b1fc:	d1e4      	bne.n	800b1c8 <_dtoa_r+0xad0>
 800b1fe:	9b07      	ldr	r3, [sp, #28]
 800b200:	07db      	lsls	r3, r3, #31
 800b202:	d5e1      	bpl.n	800b1c8 <_dtoa_r+0xad0>
 800b204:	9b07      	ldr	r3, [sp, #28]
 800b206:	2b39      	cmp	r3, #57	; 0x39
 800b208:	d1db      	bne.n	800b1c2 <_dtoa_r+0xaca>
 800b20a:	2339      	movs	r3, #57	; 0x39
 800b20c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b20e:	7013      	strb	r3, [r2, #0]
 800b210:	9b08      	ldr	r3, [sp, #32]
 800b212:	9308      	str	r3, [sp, #32]
 800b214:	3b01      	subs	r3, #1
 800b216:	781a      	ldrb	r2, [r3, #0]
 800b218:	2a39      	cmp	r2, #57	; 0x39
 800b21a:	d068      	beq.n	800b2ee <_dtoa_r+0xbf6>
 800b21c:	3201      	adds	r2, #1
 800b21e:	e7d5      	b.n	800b1cc <_dtoa_r+0xad4>
 800b220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b222:	2b00      	cmp	r3, #0
 800b224:	dd07      	ble.n	800b236 <_dtoa_r+0xb3e>
 800b226:	9b07      	ldr	r3, [sp, #28]
 800b228:	2b39      	cmp	r3, #57	; 0x39
 800b22a:	d0ee      	beq.n	800b20a <_dtoa_r+0xb12>
 800b22c:	9b07      	ldr	r3, [sp, #28]
 800b22e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b230:	3301      	adds	r3, #1
 800b232:	7013      	strb	r3, [r2, #0]
 800b234:	e737      	b.n	800b0a6 <_dtoa_r+0x9ae>
 800b236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b238:	9a07      	ldr	r2, [sp, #28]
 800b23a:	701a      	strb	r2, [r3, #0]
 800b23c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b23e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b240:	4293      	cmp	r3, r2
 800b242:	d03e      	beq.n	800b2c2 <_dtoa_r+0xbca>
 800b244:	2300      	movs	r3, #0
 800b246:	220a      	movs	r2, #10
 800b248:	9905      	ldr	r1, [sp, #20]
 800b24a:	0038      	movs	r0, r7
 800b24c:	f000 fc7c 	bl	800bb48 <__multadd>
 800b250:	2300      	movs	r3, #0
 800b252:	9005      	str	r0, [sp, #20]
 800b254:	220a      	movs	r2, #10
 800b256:	0021      	movs	r1, r4
 800b258:	0038      	movs	r0, r7
 800b25a:	42ac      	cmp	r4, r5
 800b25c:	d106      	bne.n	800b26c <_dtoa_r+0xb74>
 800b25e:	f000 fc73 	bl	800bb48 <__multadd>
 800b262:	0004      	movs	r4, r0
 800b264:	0005      	movs	r5, r0
 800b266:	9b08      	ldr	r3, [sp, #32]
 800b268:	930a      	str	r3, [sp, #40]	; 0x28
 800b26a:	e778      	b.n	800b15e <_dtoa_r+0xa66>
 800b26c:	f000 fc6c 	bl	800bb48 <__multadd>
 800b270:	0029      	movs	r1, r5
 800b272:	0004      	movs	r4, r0
 800b274:	2300      	movs	r3, #0
 800b276:	220a      	movs	r2, #10
 800b278:	0038      	movs	r0, r7
 800b27a:	f000 fc65 	bl	800bb48 <__multadd>
 800b27e:	0005      	movs	r5, r0
 800b280:	e7f1      	b.n	800b266 <_dtoa_r+0xb6e>
 800b282:	9b07      	ldr	r3, [sp, #28]
 800b284:	930c      	str	r3, [sp, #48]	; 0x30
 800b286:	2400      	movs	r4, #0
 800b288:	0031      	movs	r1, r6
 800b28a:	9805      	ldr	r0, [sp, #20]
 800b28c:	f7ff f9a8 	bl	800a5e0 <quorem>
 800b290:	9b06      	ldr	r3, [sp, #24]
 800b292:	3030      	adds	r0, #48	; 0x30
 800b294:	5518      	strb	r0, [r3, r4]
 800b296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b298:	3401      	adds	r4, #1
 800b29a:	9007      	str	r0, [sp, #28]
 800b29c:	42a3      	cmp	r3, r4
 800b29e:	dd07      	ble.n	800b2b0 <_dtoa_r+0xbb8>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	220a      	movs	r2, #10
 800b2a4:	0038      	movs	r0, r7
 800b2a6:	9905      	ldr	r1, [sp, #20]
 800b2a8:	f000 fc4e 	bl	800bb48 <__multadd>
 800b2ac:	9005      	str	r0, [sp, #20]
 800b2ae:	e7eb      	b.n	800b288 <_dtoa_r+0xb90>
 800b2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	dd00      	ble.n	800b2ba <_dtoa_r+0xbc2>
 800b2b8:	0018      	movs	r0, r3
 800b2ba:	2400      	movs	r4, #0
 800b2bc:	9b06      	ldr	r3, [sp, #24]
 800b2be:	181b      	adds	r3, r3, r0
 800b2c0:	9308      	str	r3, [sp, #32]
 800b2c2:	9905      	ldr	r1, [sp, #20]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	0038      	movs	r0, r7
 800b2c8:	f000 fe38 	bl	800bf3c <__lshift>
 800b2cc:	0031      	movs	r1, r6
 800b2ce:	9005      	str	r0, [sp, #20]
 800b2d0:	f000 fea2 	bl	800c018 <__mcmp>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	dc9b      	bgt.n	800b210 <_dtoa_r+0xb18>
 800b2d8:	d102      	bne.n	800b2e0 <_dtoa_r+0xbe8>
 800b2da:	9b07      	ldr	r3, [sp, #28]
 800b2dc:	07db      	lsls	r3, r3, #31
 800b2de:	d497      	bmi.n	800b210 <_dtoa_r+0xb18>
 800b2e0:	9b08      	ldr	r3, [sp, #32]
 800b2e2:	9308      	str	r3, [sp, #32]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	2a30      	cmp	r2, #48	; 0x30
 800b2ea:	d0fa      	beq.n	800b2e2 <_dtoa_r+0xbea>
 800b2ec:	e6db      	b.n	800b0a6 <_dtoa_r+0x9ae>
 800b2ee:	9a06      	ldr	r2, [sp, #24]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d18e      	bne.n	800b212 <_dtoa_r+0xb1a>
 800b2f4:	9b02      	ldr	r3, [sp, #8]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	9302      	str	r3, [sp, #8]
 800b2fa:	2331      	movs	r3, #49	; 0x31
 800b2fc:	e799      	b.n	800b232 <_dtoa_r+0xb3a>
 800b2fe:	4b09      	ldr	r3, [pc, #36]	; (800b324 <_dtoa_r+0xc2c>)
 800b300:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b302:	9306      	str	r3, [sp, #24]
 800b304:	4b08      	ldr	r3, [pc, #32]	; (800b328 <_dtoa_r+0xc30>)
 800b306:	2a00      	cmp	r2, #0
 800b308:	d001      	beq.n	800b30e <_dtoa_r+0xc16>
 800b30a:	f7ff fa3f 	bl	800a78c <_dtoa_r+0x94>
 800b30e:	f7ff fa3f 	bl	800a790 <_dtoa_r+0x98>
 800b312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b314:	2b00      	cmp	r3, #0
 800b316:	dcb6      	bgt.n	800b286 <_dtoa_r+0xb8e>
 800b318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	dd00      	ble.n	800b320 <_dtoa_r+0xc28>
 800b31e:	e6ac      	b.n	800b07a <_dtoa_r+0x982>
 800b320:	e7b1      	b.n	800b286 <_dtoa_r+0xb8e>
 800b322:	46c0      	nop			; (mov r8, r8)
 800b324:	0800d6f8 	.word	0x0800d6f8
 800b328:	0800d700 	.word	0x0800d700

0800b32c <rshift>:
 800b32c:	0002      	movs	r2, r0
 800b32e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b330:	6904      	ldr	r4, [r0, #16]
 800b332:	3214      	adds	r2, #20
 800b334:	0013      	movs	r3, r2
 800b336:	b085      	sub	sp, #20
 800b338:	114f      	asrs	r7, r1, #5
 800b33a:	42bc      	cmp	r4, r7
 800b33c:	dd31      	ble.n	800b3a2 <rshift+0x76>
 800b33e:	00bb      	lsls	r3, r7, #2
 800b340:	18d3      	adds	r3, r2, r3
 800b342:	261f      	movs	r6, #31
 800b344:	9301      	str	r3, [sp, #4]
 800b346:	000b      	movs	r3, r1
 800b348:	00a5      	lsls	r5, r4, #2
 800b34a:	4033      	ands	r3, r6
 800b34c:	1955      	adds	r5, r2, r5
 800b34e:	9302      	str	r3, [sp, #8]
 800b350:	4231      	tst	r1, r6
 800b352:	d10c      	bne.n	800b36e <rshift+0x42>
 800b354:	0016      	movs	r6, r2
 800b356:	9901      	ldr	r1, [sp, #4]
 800b358:	428d      	cmp	r5, r1
 800b35a:	d838      	bhi.n	800b3ce <rshift+0xa2>
 800b35c:	9901      	ldr	r1, [sp, #4]
 800b35e:	2300      	movs	r3, #0
 800b360:	3903      	subs	r1, #3
 800b362:	428d      	cmp	r5, r1
 800b364:	d301      	bcc.n	800b36a <rshift+0x3e>
 800b366:	1be3      	subs	r3, r4, r7
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	18d3      	adds	r3, r2, r3
 800b36c:	e019      	b.n	800b3a2 <rshift+0x76>
 800b36e:	2120      	movs	r1, #32
 800b370:	9b02      	ldr	r3, [sp, #8]
 800b372:	9e01      	ldr	r6, [sp, #4]
 800b374:	1acb      	subs	r3, r1, r3
 800b376:	9303      	str	r3, [sp, #12]
 800b378:	ce02      	ldmia	r6!, {r1}
 800b37a:	9b02      	ldr	r3, [sp, #8]
 800b37c:	4694      	mov	ip, r2
 800b37e:	40d9      	lsrs	r1, r3
 800b380:	9100      	str	r1, [sp, #0]
 800b382:	42b5      	cmp	r5, r6
 800b384:	d816      	bhi.n	800b3b4 <rshift+0x88>
 800b386:	9e01      	ldr	r6, [sp, #4]
 800b388:	2300      	movs	r3, #0
 800b38a:	3601      	adds	r6, #1
 800b38c:	42b5      	cmp	r5, r6
 800b38e:	d302      	bcc.n	800b396 <rshift+0x6a>
 800b390:	1be3      	subs	r3, r4, r7
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	3b04      	subs	r3, #4
 800b396:	9900      	ldr	r1, [sp, #0]
 800b398:	18d3      	adds	r3, r2, r3
 800b39a:	6019      	str	r1, [r3, #0]
 800b39c:	2900      	cmp	r1, #0
 800b39e:	d000      	beq.n	800b3a2 <rshift+0x76>
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	1a99      	subs	r1, r3, r2
 800b3a4:	1089      	asrs	r1, r1, #2
 800b3a6:	6101      	str	r1, [r0, #16]
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d101      	bne.n	800b3b0 <rshift+0x84>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	6143      	str	r3, [r0, #20]
 800b3b0:	b005      	add	sp, #20
 800b3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3b4:	6833      	ldr	r3, [r6, #0]
 800b3b6:	9903      	ldr	r1, [sp, #12]
 800b3b8:	408b      	lsls	r3, r1
 800b3ba:	9900      	ldr	r1, [sp, #0]
 800b3bc:	4319      	orrs	r1, r3
 800b3be:	4663      	mov	r3, ip
 800b3c0:	c302      	stmia	r3!, {r1}
 800b3c2:	469c      	mov	ip, r3
 800b3c4:	ce02      	ldmia	r6!, {r1}
 800b3c6:	9b02      	ldr	r3, [sp, #8]
 800b3c8:	40d9      	lsrs	r1, r3
 800b3ca:	9100      	str	r1, [sp, #0]
 800b3cc:	e7d9      	b.n	800b382 <rshift+0x56>
 800b3ce:	c908      	ldmia	r1!, {r3}
 800b3d0:	c608      	stmia	r6!, {r3}
 800b3d2:	e7c1      	b.n	800b358 <rshift+0x2c>

0800b3d4 <__hexdig_fun>:
 800b3d4:	0002      	movs	r2, r0
 800b3d6:	3a30      	subs	r2, #48	; 0x30
 800b3d8:	0003      	movs	r3, r0
 800b3da:	2a09      	cmp	r2, #9
 800b3dc:	d802      	bhi.n	800b3e4 <__hexdig_fun+0x10>
 800b3de:	3b20      	subs	r3, #32
 800b3e0:	b2d8      	uxtb	r0, r3
 800b3e2:	4770      	bx	lr
 800b3e4:	0002      	movs	r2, r0
 800b3e6:	3a61      	subs	r2, #97	; 0x61
 800b3e8:	2a05      	cmp	r2, #5
 800b3ea:	d801      	bhi.n	800b3f0 <__hexdig_fun+0x1c>
 800b3ec:	3b47      	subs	r3, #71	; 0x47
 800b3ee:	e7f7      	b.n	800b3e0 <__hexdig_fun+0xc>
 800b3f0:	001a      	movs	r2, r3
 800b3f2:	3a41      	subs	r2, #65	; 0x41
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	2a05      	cmp	r2, #5
 800b3f8:	d8f3      	bhi.n	800b3e2 <__hexdig_fun+0xe>
 800b3fa:	3b27      	subs	r3, #39	; 0x27
 800b3fc:	e7f0      	b.n	800b3e0 <__hexdig_fun+0xc>
	...

0800b400 <__gethex>:
 800b400:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b402:	b08d      	sub	sp, #52	; 0x34
 800b404:	930a      	str	r3, [sp, #40]	; 0x28
 800b406:	4bbf      	ldr	r3, [pc, #764]	; (800b704 <__gethex+0x304>)
 800b408:	9005      	str	r0, [sp, #20]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	9109      	str	r1, [sp, #36]	; 0x24
 800b40e:	0018      	movs	r0, r3
 800b410:	9202      	str	r2, [sp, #8]
 800b412:	9307      	str	r3, [sp, #28]
 800b414:	f7f4 fe76 	bl	8000104 <strlen>
 800b418:	2202      	movs	r2, #2
 800b41a:	9b07      	ldr	r3, [sp, #28]
 800b41c:	4252      	negs	r2, r2
 800b41e:	181b      	adds	r3, r3, r0
 800b420:	3b01      	subs	r3, #1
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	9003      	str	r0, [sp, #12]
 800b426:	930b      	str	r3, [sp, #44]	; 0x2c
 800b428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42a:	6819      	ldr	r1, [r3, #0]
 800b42c:	1c8b      	adds	r3, r1, #2
 800b42e:	1a52      	subs	r2, r2, r1
 800b430:	18d1      	adds	r1, r2, r3
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	9108      	str	r1, [sp, #32]
 800b436:	9901      	ldr	r1, [sp, #4]
 800b438:	3301      	adds	r3, #1
 800b43a:	7808      	ldrb	r0, [r1, #0]
 800b43c:	2830      	cmp	r0, #48	; 0x30
 800b43e:	d0f7      	beq.n	800b430 <__gethex+0x30>
 800b440:	f7ff ffc8 	bl	800b3d4 <__hexdig_fun>
 800b444:	2300      	movs	r3, #0
 800b446:	001c      	movs	r4, r3
 800b448:	9304      	str	r3, [sp, #16]
 800b44a:	4298      	cmp	r0, r3
 800b44c:	d11f      	bne.n	800b48e <__gethex+0x8e>
 800b44e:	9a03      	ldr	r2, [sp, #12]
 800b450:	9907      	ldr	r1, [sp, #28]
 800b452:	9801      	ldr	r0, [sp, #4]
 800b454:	f001 f96e 	bl	800c734 <strncmp>
 800b458:	0007      	movs	r7, r0
 800b45a:	42a0      	cmp	r0, r4
 800b45c:	d000      	beq.n	800b460 <__gethex+0x60>
 800b45e:	e06b      	b.n	800b538 <__gethex+0x138>
 800b460:	9b01      	ldr	r3, [sp, #4]
 800b462:	9a03      	ldr	r2, [sp, #12]
 800b464:	5c98      	ldrb	r0, [r3, r2]
 800b466:	189d      	adds	r5, r3, r2
 800b468:	f7ff ffb4 	bl	800b3d4 <__hexdig_fun>
 800b46c:	2301      	movs	r3, #1
 800b46e:	9304      	str	r3, [sp, #16]
 800b470:	42a0      	cmp	r0, r4
 800b472:	d030      	beq.n	800b4d6 <__gethex+0xd6>
 800b474:	9501      	str	r5, [sp, #4]
 800b476:	9b01      	ldr	r3, [sp, #4]
 800b478:	7818      	ldrb	r0, [r3, #0]
 800b47a:	2830      	cmp	r0, #48	; 0x30
 800b47c:	d009      	beq.n	800b492 <__gethex+0x92>
 800b47e:	f7ff ffa9 	bl	800b3d4 <__hexdig_fun>
 800b482:	4242      	negs	r2, r0
 800b484:	4142      	adcs	r2, r0
 800b486:	2301      	movs	r3, #1
 800b488:	002c      	movs	r4, r5
 800b48a:	9204      	str	r2, [sp, #16]
 800b48c:	9308      	str	r3, [sp, #32]
 800b48e:	9d01      	ldr	r5, [sp, #4]
 800b490:	e004      	b.n	800b49c <__gethex+0x9c>
 800b492:	9b01      	ldr	r3, [sp, #4]
 800b494:	3301      	adds	r3, #1
 800b496:	9301      	str	r3, [sp, #4]
 800b498:	e7ed      	b.n	800b476 <__gethex+0x76>
 800b49a:	3501      	adds	r5, #1
 800b49c:	7828      	ldrb	r0, [r5, #0]
 800b49e:	f7ff ff99 	bl	800b3d4 <__hexdig_fun>
 800b4a2:	1e07      	subs	r7, r0, #0
 800b4a4:	d1f9      	bne.n	800b49a <__gethex+0x9a>
 800b4a6:	0028      	movs	r0, r5
 800b4a8:	9a03      	ldr	r2, [sp, #12]
 800b4aa:	9907      	ldr	r1, [sp, #28]
 800b4ac:	f001 f942 	bl	800c734 <strncmp>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d10e      	bne.n	800b4d2 <__gethex+0xd2>
 800b4b4:	2c00      	cmp	r4, #0
 800b4b6:	d107      	bne.n	800b4c8 <__gethex+0xc8>
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	18ed      	adds	r5, r5, r3
 800b4bc:	002c      	movs	r4, r5
 800b4be:	7828      	ldrb	r0, [r5, #0]
 800b4c0:	f7ff ff88 	bl	800b3d4 <__hexdig_fun>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d102      	bne.n	800b4ce <__gethex+0xce>
 800b4c8:	1b64      	subs	r4, r4, r5
 800b4ca:	00a7      	lsls	r7, r4, #2
 800b4cc:	e003      	b.n	800b4d6 <__gethex+0xd6>
 800b4ce:	3501      	adds	r5, #1
 800b4d0:	e7f5      	b.n	800b4be <__gethex+0xbe>
 800b4d2:	2c00      	cmp	r4, #0
 800b4d4:	d1f8      	bne.n	800b4c8 <__gethex+0xc8>
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	782b      	ldrb	r3, [r5, #0]
 800b4da:	002e      	movs	r6, r5
 800b4dc:	4393      	bics	r3, r2
 800b4de:	2b50      	cmp	r3, #80	; 0x50
 800b4e0:	d11d      	bne.n	800b51e <__gethex+0x11e>
 800b4e2:	786b      	ldrb	r3, [r5, #1]
 800b4e4:	2b2b      	cmp	r3, #43	; 0x2b
 800b4e6:	d02c      	beq.n	800b542 <__gethex+0x142>
 800b4e8:	2b2d      	cmp	r3, #45	; 0x2d
 800b4ea:	d02e      	beq.n	800b54a <__gethex+0x14a>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	1c6e      	adds	r6, r5, #1
 800b4f0:	9306      	str	r3, [sp, #24]
 800b4f2:	7830      	ldrb	r0, [r6, #0]
 800b4f4:	f7ff ff6e 	bl	800b3d4 <__hexdig_fun>
 800b4f8:	1e43      	subs	r3, r0, #1
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	2b18      	cmp	r3, #24
 800b4fe:	d82b      	bhi.n	800b558 <__gethex+0x158>
 800b500:	3810      	subs	r0, #16
 800b502:	0004      	movs	r4, r0
 800b504:	7870      	ldrb	r0, [r6, #1]
 800b506:	f7ff ff65 	bl	800b3d4 <__hexdig_fun>
 800b50a:	1e43      	subs	r3, r0, #1
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	3601      	adds	r6, #1
 800b510:	2b18      	cmp	r3, #24
 800b512:	d91c      	bls.n	800b54e <__gethex+0x14e>
 800b514:	9b06      	ldr	r3, [sp, #24]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d000      	beq.n	800b51c <__gethex+0x11c>
 800b51a:	4264      	negs	r4, r4
 800b51c:	193f      	adds	r7, r7, r4
 800b51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b520:	601e      	str	r6, [r3, #0]
 800b522:	9b04      	ldr	r3, [sp, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d019      	beq.n	800b55c <__gethex+0x15c>
 800b528:	2600      	movs	r6, #0
 800b52a:	9b08      	ldr	r3, [sp, #32]
 800b52c:	42b3      	cmp	r3, r6
 800b52e:	d100      	bne.n	800b532 <__gethex+0x132>
 800b530:	3606      	adds	r6, #6
 800b532:	0030      	movs	r0, r6
 800b534:	b00d      	add	sp, #52	; 0x34
 800b536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b538:	2301      	movs	r3, #1
 800b53a:	2700      	movs	r7, #0
 800b53c:	9d01      	ldr	r5, [sp, #4]
 800b53e:	9304      	str	r3, [sp, #16]
 800b540:	e7c9      	b.n	800b4d6 <__gethex+0xd6>
 800b542:	2300      	movs	r3, #0
 800b544:	9306      	str	r3, [sp, #24]
 800b546:	1cae      	adds	r6, r5, #2
 800b548:	e7d3      	b.n	800b4f2 <__gethex+0xf2>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e7fa      	b.n	800b544 <__gethex+0x144>
 800b54e:	230a      	movs	r3, #10
 800b550:	435c      	muls	r4, r3
 800b552:	1824      	adds	r4, r4, r0
 800b554:	3c10      	subs	r4, #16
 800b556:	e7d5      	b.n	800b504 <__gethex+0x104>
 800b558:	002e      	movs	r6, r5
 800b55a:	e7e0      	b.n	800b51e <__gethex+0x11e>
 800b55c:	9b01      	ldr	r3, [sp, #4]
 800b55e:	9904      	ldr	r1, [sp, #16]
 800b560:	1aeb      	subs	r3, r5, r3
 800b562:	3b01      	subs	r3, #1
 800b564:	2b07      	cmp	r3, #7
 800b566:	dc0a      	bgt.n	800b57e <__gethex+0x17e>
 800b568:	9805      	ldr	r0, [sp, #20]
 800b56a:	f000 fa85 	bl	800ba78 <_Balloc>
 800b56e:	1e04      	subs	r4, r0, #0
 800b570:	d108      	bne.n	800b584 <__gethex+0x184>
 800b572:	0002      	movs	r2, r0
 800b574:	21de      	movs	r1, #222	; 0xde
 800b576:	4b64      	ldr	r3, [pc, #400]	; (800b708 <__gethex+0x308>)
 800b578:	4864      	ldr	r0, [pc, #400]	; (800b70c <__gethex+0x30c>)
 800b57a:	f001 f8fb 	bl	800c774 <__assert_func>
 800b57e:	3101      	adds	r1, #1
 800b580:	105b      	asrs	r3, r3, #1
 800b582:	e7ef      	b.n	800b564 <__gethex+0x164>
 800b584:	0003      	movs	r3, r0
 800b586:	3314      	adds	r3, #20
 800b588:	9304      	str	r3, [sp, #16]
 800b58a:	9309      	str	r3, [sp, #36]	; 0x24
 800b58c:	2300      	movs	r3, #0
 800b58e:	001e      	movs	r6, r3
 800b590:	9306      	str	r3, [sp, #24]
 800b592:	9b01      	ldr	r3, [sp, #4]
 800b594:	42ab      	cmp	r3, r5
 800b596:	d340      	bcc.n	800b61a <__gethex+0x21a>
 800b598:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b59a:	9b04      	ldr	r3, [sp, #16]
 800b59c:	c540      	stmia	r5!, {r6}
 800b59e:	1aed      	subs	r5, r5, r3
 800b5a0:	10ad      	asrs	r5, r5, #2
 800b5a2:	0030      	movs	r0, r6
 800b5a4:	6125      	str	r5, [r4, #16]
 800b5a6:	f000 fb5f 	bl	800bc68 <__hi0bits>
 800b5aa:	9b02      	ldr	r3, [sp, #8]
 800b5ac:	016d      	lsls	r5, r5, #5
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	1a2e      	subs	r6, r5, r0
 800b5b2:	9301      	str	r3, [sp, #4]
 800b5b4:	429e      	cmp	r6, r3
 800b5b6:	dd5a      	ble.n	800b66e <__gethex+0x26e>
 800b5b8:	1af6      	subs	r6, r6, r3
 800b5ba:	0031      	movs	r1, r6
 800b5bc:	0020      	movs	r0, r4
 800b5be:	f000 ff01 	bl	800c3c4 <__any_on>
 800b5c2:	1e05      	subs	r5, r0, #0
 800b5c4:	d016      	beq.n	800b5f4 <__gethex+0x1f4>
 800b5c6:	2501      	movs	r5, #1
 800b5c8:	211f      	movs	r1, #31
 800b5ca:	0028      	movs	r0, r5
 800b5cc:	1e73      	subs	r3, r6, #1
 800b5ce:	4019      	ands	r1, r3
 800b5d0:	4088      	lsls	r0, r1
 800b5d2:	0001      	movs	r1, r0
 800b5d4:	115a      	asrs	r2, r3, #5
 800b5d6:	9804      	ldr	r0, [sp, #16]
 800b5d8:	0092      	lsls	r2, r2, #2
 800b5da:	5812      	ldr	r2, [r2, r0]
 800b5dc:	420a      	tst	r2, r1
 800b5de:	d009      	beq.n	800b5f4 <__gethex+0x1f4>
 800b5e0:	42ab      	cmp	r3, r5
 800b5e2:	dd06      	ble.n	800b5f2 <__gethex+0x1f2>
 800b5e4:	0020      	movs	r0, r4
 800b5e6:	1eb1      	subs	r1, r6, #2
 800b5e8:	f000 feec 	bl	800c3c4 <__any_on>
 800b5ec:	3502      	adds	r5, #2
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d100      	bne.n	800b5f4 <__gethex+0x1f4>
 800b5f2:	2502      	movs	r5, #2
 800b5f4:	0031      	movs	r1, r6
 800b5f6:	0020      	movs	r0, r4
 800b5f8:	f7ff fe98 	bl	800b32c <rshift>
 800b5fc:	19bf      	adds	r7, r7, r6
 800b5fe:	9b02      	ldr	r3, [sp, #8]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	9303      	str	r3, [sp, #12]
 800b604:	42bb      	cmp	r3, r7
 800b606:	da42      	bge.n	800b68e <__gethex+0x28e>
 800b608:	0021      	movs	r1, r4
 800b60a:	9805      	ldr	r0, [sp, #20]
 800b60c:	f000 fa78 	bl	800bb00 <_Bfree>
 800b610:	2300      	movs	r3, #0
 800b612:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b614:	26a3      	movs	r6, #163	; 0xa3
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	e78b      	b.n	800b532 <__gethex+0x132>
 800b61a:	1e6b      	subs	r3, r5, #1
 800b61c:	9308      	str	r3, [sp, #32]
 800b61e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	4293      	cmp	r3, r2
 800b624:	d014      	beq.n	800b650 <__gethex+0x250>
 800b626:	9b06      	ldr	r3, [sp, #24]
 800b628:	2b20      	cmp	r3, #32
 800b62a:	d104      	bne.n	800b636 <__gethex+0x236>
 800b62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62e:	c340      	stmia	r3!, {r6}
 800b630:	2600      	movs	r6, #0
 800b632:	9309      	str	r3, [sp, #36]	; 0x24
 800b634:	9606      	str	r6, [sp, #24]
 800b636:	9b08      	ldr	r3, [sp, #32]
 800b638:	7818      	ldrb	r0, [r3, #0]
 800b63a:	f7ff fecb 	bl	800b3d4 <__hexdig_fun>
 800b63e:	230f      	movs	r3, #15
 800b640:	4018      	ands	r0, r3
 800b642:	9b06      	ldr	r3, [sp, #24]
 800b644:	9d08      	ldr	r5, [sp, #32]
 800b646:	4098      	lsls	r0, r3
 800b648:	3304      	adds	r3, #4
 800b64a:	4306      	orrs	r6, r0
 800b64c:	9306      	str	r3, [sp, #24]
 800b64e:	e7a0      	b.n	800b592 <__gethex+0x192>
 800b650:	2301      	movs	r3, #1
 800b652:	9a03      	ldr	r2, [sp, #12]
 800b654:	1a9d      	subs	r5, r3, r2
 800b656:	9b08      	ldr	r3, [sp, #32]
 800b658:	195d      	adds	r5, r3, r5
 800b65a:	9b01      	ldr	r3, [sp, #4]
 800b65c:	429d      	cmp	r5, r3
 800b65e:	d3e2      	bcc.n	800b626 <__gethex+0x226>
 800b660:	0028      	movs	r0, r5
 800b662:	9907      	ldr	r1, [sp, #28]
 800b664:	f001 f866 	bl	800c734 <strncmp>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d1dc      	bne.n	800b626 <__gethex+0x226>
 800b66c:	e791      	b.n	800b592 <__gethex+0x192>
 800b66e:	9b01      	ldr	r3, [sp, #4]
 800b670:	2500      	movs	r5, #0
 800b672:	429e      	cmp	r6, r3
 800b674:	dac3      	bge.n	800b5fe <__gethex+0x1fe>
 800b676:	1b9e      	subs	r6, r3, r6
 800b678:	0021      	movs	r1, r4
 800b67a:	0032      	movs	r2, r6
 800b67c:	9805      	ldr	r0, [sp, #20]
 800b67e:	f000 fc5d 	bl	800bf3c <__lshift>
 800b682:	0003      	movs	r3, r0
 800b684:	3314      	adds	r3, #20
 800b686:	0004      	movs	r4, r0
 800b688:	1bbf      	subs	r7, r7, r6
 800b68a:	9304      	str	r3, [sp, #16]
 800b68c:	e7b7      	b.n	800b5fe <__gethex+0x1fe>
 800b68e:	9b02      	ldr	r3, [sp, #8]
 800b690:	685e      	ldr	r6, [r3, #4]
 800b692:	42be      	cmp	r6, r7
 800b694:	dd71      	ble.n	800b77a <__gethex+0x37a>
 800b696:	9b01      	ldr	r3, [sp, #4]
 800b698:	1bf6      	subs	r6, r6, r7
 800b69a:	42b3      	cmp	r3, r6
 800b69c:	dc38      	bgt.n	800b710 <__gethex+0x310>
 800b69e:	9b02      	ldr	r3, [sp, #8]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d026      	beq.n	800b6f4 <__gethex+0x2f4>
 800b6a6:	2b03      	cmp	r3, #3
 800b6a8:	d028      	beq.n	800b6fc <__gethex+0x2fc>
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d119      	bne.n	800b6e2 <__gethex+0x2e2>
 800b6ae:	9b01      	ldr	r3, [sp, #4]
 800b6b0:	42b3      	cmp	r3, r6
 800b6b2:	d116      	bne.n	800b6e2 <__gethex+0x2e2>
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d10d      	bne.n	800b6d4 <__gethex+0x2d4>
 800b6b8:	9b02      	ldr	r3, [sp, #8]
 800b6ba:	2662      	movs	r6, #98	; 0x62
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	9a01      	ldr	r2, [sp, #4]
 800b6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	9a04      	ldr	r2, [sp, #16]
 800b6ca:	6123      	str	r3, [r4, #16]
 800b6cc:	6013      	str	r3, [r2, #0]
 800b6ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6d0:	601c      	str	r4, [r3, #0]
 800b6d2:	e72e      	b.n	800b532 <__gethex+0x132>
 800b6d4:	9901      	ldr	r1, [sp, #4]
 800b6d6:	0020      	movs	r0, r4
 800b6d8:	3901      	subs	r1, #1
 800b6da:	f000 fe73 	bl	800c3c4 <__any_on>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d1ea      	bne.n	800b6b8 <__gethex+0x2b8>
 800b6e2:	0021      	movs	r1, r4
 800b6e4:	9805      	ldr	r0, [sp, #20]
 800b6e6:	f000 fa0b 	bl	800bb00 <_Bfree>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6ee:	2650      	movs	r6, #80	; 0x50
 800b6f0:	6013      	str	r3, [r2, #0]
 800b6f2:	e71e      	b.n	800b532 <__gethex+0x132>
 800b6f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1f3      	bne.n	800b6e2 <__gethex+0x2e2>
 800b6fa:	e7dd      	b.n	800b6b8 <__gethex+0x2b8>
 800b6fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1da      	bne.n	800b6b8 <__gethex+0x2b8>
 800b702:	e7ee      	b.n	800b6e2 <__gethex+0x2e2>
 800b704:	0800d7f0 	.word	0x0800d7f0
 800b708:	0800d777 	.word	0x0800d777
 800b70c:	0800d788 	.word	0x0800d788
 800b710:	1e77      	subs	r7, r6, #1
 800b712:	2d00      	cmp	r5, #0
 800b714:	d12f      	bne.n	800b776 <__gethex+0x376>
 800b716:	2f00      	cmp	r7, #0
 800b718:	d004      	beq.n	800b724 <__gethex+0x324>
 800b71a:	0039      	movs	r1, r7
 800b71c:	0020      	movs	r0, r4
 800b71e:	f000 fe51 	bl	800c3c4 <__any_on>
 800b722:	0005      	movs	r5, r0
 800b724:	231f      	movs	r3, #31
 800b726:	117a      	asrs	r2, r7, #5
 800b728:	401f      	ands	r7, r3
 800b72a:	3b1e      	subs	r3, #30
 800b72c:	40bb      	lsls	r3, r7
 800b72e:	9904      	ldr	r1, [sp, #16]
 800b730:	0092      	lsls	r2, r2, #2
 800b732:	5852      	ldr	r2, [r2, r1]
 800b734:	421a      	tst	r2, r3
 800b736:	d001      	beq.n	800b73c <__gethex+0x33c>
 800b738:	2302      	movs	r3, #2
 800b73a:	431d      	orrs	r5, r3
 800b73c:	9b01      	ldr	r3, [sp, #4]
 800b73e:	0031      	movs	r1, r6
 800b740:	1b9b      	subs	r3, r3, r6
 800b742:	2602      	movs	r6, #2
 800b744:	0020      	movs	r0, r4
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	f7ff fdf0 	bl	800b32c <rshift>
 800b74c:	9b02      	ldr	r3, [sp, #8]
 800b74e:	685f      	ldr	r7, [r3, #4]
 800b750:	2d00      	cmp	r5, #0
 800b752:	d041      	beq.n	800b7d8 <__gethex+0x3d8>
 800b754:	9b02      	ldr	r3, [sp, #8]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d010      	beq.n	800b77e <__gethex+0x37e>
 800b75c:	2b03      	cmp	r3, #3
 800b75e:	d012      	beq.n	800b786 <__gethex+0x386>
 800b760:	2b01      	cmp	r3, #1
 800b762:	d106      	bne.n	800b772 <__gethex+0x372>
 800b764:	07aa      	lsls	r2, r5, #30
 800b766:	d504      	bpl.n	800b772 <__gethex+0x372>
 800b768:	9a04      	ldr	r2, [sp, #16]
 800b76a:	6810      	ldr	r0, [r2, #0]
 800b76c:	4305      	orrs	r5, r0
 800b76e:	421d      	tst	r5, r3
 800b770:	d10c      	bne.n	800b78c <__gethex+0x38c>
 800b772:	2310      	movs	r3, #16
 800b774:	e02f      	b.n	800b7d6 <__gethex+0x3d6>
 800b776:	2501      	movs	r5, #1
 800b778:	e7d4      	b.n	800b724 <__gethex+0x324>
 800b77a:	2601      	movs	r6, #1
 800b77c:	e7e8      	b.n	800b750 <__gethex+0x350>
 800b77e:	2301      	movs	r3, #1
 800b780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b782:	1a9b      	subs	r3, r3, r2
 800b784:	9313      	str	r3, [sp, #76]	; 0x4c
 800b786:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d0f2      	beq.n	800b772 <__gethex+0x372>
 800b78c:	6923      	ldr	r3, [r4, #16]
 800b78e:	2000      	movs	r0, #0
 800b790:	9303      	str	r3, [sp, #12]
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	0023      	movs	r3, r4
 800b798:	9a04      	ldr	r2, [sp, #16]
 800b79a:	3314      	adds	r3, #20
 800b79c:	1899      	adds	r1, r3, r2
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	1c55      	adds	r5, r2, #1
 800b7a2:	d01e      	beq.n	800b7e2 <__gethex+0x3e2>
 800b7a4:	3201      	adds	r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	0023      	movs	r3, r4
 800b7aa:	3314      	adds	r3, #20
 800b7ac:	2e02      	cmp	r6, #2
 800b7ae:	d140      	bne.n	800b832 <__gethex+0x432>
 800b7b0:	9a02      	ldr	r2, [sp, #8]
 800b7b2:	9901      	ldr	r1, [sp, #4]
 800b7b4:	6812      	ldr	r2, [r2, #0]
 800b7b6:	3a01      	subs	r2, #1
 800b7b8:	428a      	cmp	r2, r1
 800b7ba:	d10b      	bne.n	800b7d4 <__gethex+0x3d4>
 800b7bc:	114a      	asrs	r2, r1, #5
 800b7be:	211f      	movs	r1, #31
 800b7c0:	9801      	ldr	r0, [sp, #4]
 800b7c2:	0092      	lsls	r2, r2, #2
 800b7c4:	4001      	ands	r1, r0
 800b7c6:	2001      	movs	r0, #1
 800b7c8:	0005      	movs	r5, r0
 800b7ca:	408d      	lsls	r5, r1
 800b7cc:	58d3      	ldr	r3, [r2, r3]
 800b7ce:	422b      	tst	r3, r5
 800b7d0:	d000      	beq.n	800b7d4 <__gethex+0x3d4>
 800b7d2:	2601      	movs	r6, #1
 800b7d4:	2320      	movs	r3, #32
 800b7d6:	431e      	orrs	r6, r3
 800b7d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7da:	601c      	str	r4, [r3, #0]
 800b7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7de:	601f      	str	r7, [r3, #0]
 800b7e0:	e6a7      	b.n	800b532 <__gethex+0x132>
 800b7e2:	c301      	stmia	r3!, {r0}
 800b7e4:	4299      	cmp	r1, r3
 800b7e6:	d8da      	bhi.n	800b79e <__gethex+0x39e>
 800b7e8:	9b03      	ldr	r3, [sp, #12]
 800b7ea:	68a2      	ldr	r2, [r4, #8]
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	db17      	blt.n	800b820 <__gethex+0x420>
 800b7f0:	6863      	ldr	r3, [r4, #4]
 800b7f2:	9805      	ldr	r0, [sp, #20]
 800b7f4:	1c59      	adds	r1, r3, #1
 800b7f6:	f000 f93f 	bl	800ba78 <_Balloc>
 800b7fa:	1e05      	subs	r5, r0, #0
 800b7fc:	d103      	bne.n	800b806 <__gethex+0x406>
 800b7fe:	0002      	movs	r2, r0
 800b800:	2184      	movs	r1, #132	; 0x84
 800b802:	4b1c      	ldr	r3, [pc, #112]	; (800b874 <__gethex+0x474>)
 800b804:	e6b8      	b.n	800b578 <__gethex+0x178>
 800b806:	0021      	movs	r1, r4
 800b808:	6923      	ldr	r3, [r4, #16]
 800b80a:	310c      	adds	r1, #12
 800b80c:	1c9a      	adds	r2, r3, #2
 800b80e:	0092      	lsls	r2, r2, #2
 800b810:	300c      	adds	r0, #12
 800b812:	f7fd f873 	bl	80088fc <memcpy>
 800b816:	0021      	movs	r1, r4
 800b818:	9805      	ldr	r0, [sp, #20]
 800b81a:	f000 f971 	bl	800bb00 <_Bfree>
 800b81e:	002c      	movs	r4, r5
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	6122      	str	r2, [r4, #16]
 800b826:	2201      	movs	r2, #1
 800b828:	3304      	adds	r3, #4
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	18e3      	adds	r3, r4, r3
 800b82e:	605a      	str	r2, [r3, #4]
 800b830:	e7ba      	b.n	800b7a8 <__gethex+0x3a8>
 800b832:	6922      	ldr	r2, [r4, #16]
 800b834:	9903      	ldr	r1, [sp, #12]
 800b836:	428a      	cmp	r2, r1
 800b838:	dd09      	ble.n	800b84e <__gethex+0x44e>
 800b83a:	2101      	movs	r1, #1
 800b83c:	0020      	movs	r0, r4
 800b83e:	f7ff fd75 	bl	800b32c <rshift>
 800b842:	9b02      	ldr	r3, [sp, #8]
 800b844:	3701      	adds	r7, #1
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	42bb      	cmp	r3, r7
 800b84a:	dac2      	bge.n	800b7d2 <__gethex+0x3d2>
 800b84c:	e6dc      	b.n	800b608 <__gethex+0x208>
 800b84e:	221f      	movs	r2, #31
 800b850:	9d01      	ldr	r5, [sp, #4]
 800b852:	9901      	ldr	r1, [sp, #4]
 800b854:	2601      	movs	r6, #1
 800b856:	4015      	ands	r5, r2
 800b858:	4211      	tst	r1, r2
 800b85a:	d0bb      	beq.n	800b7d4 <__gethex+0x3d4>
 800b85c:	9a04      	ldr	r2, [sp, #16]
 800b85e:	189b      	adds	r3, r3, r2
 800b860:	3b04      	subs	r3, #4
 800b862:	6818      	ldr	r0, [r3, #0]
 800b864:	f000 fa00 	bl	800bc68 <__hi0bits>
 800b868:	2320      	movs	r3, #32
 800b86a:	1b5d      	subs	r5, r3, r5
 800b86c:	42a8      	cmp	r0, r5
 800b86e:	dbe4      	blt.n	800b83a <__gethex+0x43a>
 800b870:	e7b0      	b.n	800b7d4 <__gethex+0x3d4>
 800b872:	46c0      	nop			; (mov r8, r8)
 800b874:	0800d777 	.word	0x0800d777

0800b878 <L_shift>:
 800b878:	2308      	movs	r3, #8
 800b87a:	b570      	push	{r4, r5, r6, lr}
 800b87c:	2520      	movs	r5, #32
 800b87e:	1a9a      	subs	r2, r3, r2
 800b880:	0092      	lsls	r2, r2, #2
 800b882:	1aad      	subs	r5, r5, r2
 800b884:	6843      	ldr	r3, [r0, #4]
 800b886:	6806      	ldr	r6, [r0, #0]
 800b888:	001c      	movs	r4, r3
 800b88a:	40ac      	lsls	r4, r5
 800b88c:	40d3      	lsrs	r3, r2
 800b88e:	4334      	orrs	r4, r6
 800b890:	6004      	str	r4, [r0, #0]
 800b892:	6043      	str	r3, [r0, #4]
 800b894:	3004      	adds	r0, #4
 800b896:	4288      	cmp	r0, r1
 800b898:	d3f4      	bcc.n	800b884 <L_shift+0xc>
 800b89a:	bd70      	pop	{r4, r5, r6, pc}

0800b89c <__match>:
 800b89c:	b530      	push	{r4, r5, lr}
 800b89e:	6803      	ldr	r3, [r0, #0]
 800b8a0:	780c      	ldrb	r4, [r1, #0]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	2c00      	cmp	r4, #0
 800b8a6:	d102      	bne.n	800b8ae <__match+0x12>
 800b8a8:	6003      	str	r3, [r0, #0]
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	bd30      	pop	{r4, r5, pc}
 800b8ae:	781a      	ldrb	r2, [r3, #0]
 800b8b0:	0015      	movs	r5, r2
 800b8b2:	3d41      	subs	r5, #65	; 0x41
 800b8b4:	2d19      	cmp	r5, #25
 800b8b6:	d800      	bhi.n	800b8ba <__match+0x1e>
 800b8b8:	3220      	adds	r2, #32
 800b8ba:	3101      	adds	r1, #1
 800b8bc:	42a2      	cmp	r2, r4
 800b8be:	d0ef      	beq.n	800b8a0 <__match+0x4>
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	e7f3      	b.n	800b8ac <__match+0x10>

0800b8c4 <__hexnan>:
 800b8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8c6:	680b      	ldr	r3, [r1, #0]
 800b8c8:	b08b      	sub	sp, #44	; 0x2c
 800b8ca:	9201      	str	r2, [sp, #4]
 800b8cc:	9901      	ldr	r1, [sp, #4]
 800b8ce:	115a      	asrs	r2, r3, #5
 800b8d0:	0092      	lsls	r2, r2, #2
 800b8d2:	188a      	adds	r2, r1, r2
 800b8d4:	9202      	str	r2, [sp, #8]
 800b8d6:	0019      	movs	r1, r3
 800b8d8:	221f      	movs	r2, #31
 800b8da:	4011      	ands	r1, r2
 800b8dc:	9008      	str	r0, [sp, #32]
 800b8de:	9106      	str	r1, [sp, #24]
 800b8e0:	4213      	tst	r3, r2
 800b8e2:	d002      	beq.n	800b8ea <__hexnan+0x26>
 800b8e4:	9b02      	ldr	r3, [sp, #8]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	9302      	str	r3, [sp, #8]
 800b8ea:	9b02      	ldr	r3, [sp, #8]
 800b8ec:	2500      	movs	r5, #0
 800b8ee:	1f1e      	subs	r6, r3, #4
 800b8f0:	0037      	movs	r7, r6
 800b8f2:	0034      	movs	r4, r6
 800b8f4:	9b08      	ldr	r3, [sp, #32]
 800b8f6:	6035      	str	r5, [r6, #0]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	9507      	str	r5, [sp, #28]
 800b8fc:	9305      	str	r3, [sp, #20]
 800b8fe:	9503      	str	r5, [sp, #12]
 800b900:	9b05      	ldr	r3, [sp, #20]
 800b902:	3301      	adds	r3, #1
 800b904:	9309      	str	r3, [sp, #36]	; 0x24
 800b906:	9b05      	ldr	r3, [sp, #20]
 800b908:	785b      	ldrb	r3, [r3, #1]
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d028      	beq.n	800b962 <__hexnan+0x9e>
 800b910:	9804      	ldr	r0, [sp, #16]
 800b912:	f7ff fd5f 	bl	800b3d4 <__hexdig_fun>
 800b916:	2800      	cmp	r0, #0
 800b918:	d154      	bne.n	800b9c4 <__hexnan+0x100>
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	2b20      	cmp	r3, #32
 800b91e:	d819      	bhi.n	800b954 <__hexnan+0x90>
 800b920:	9b03      	ldr	r3, [sp, #12]
 800b922:	9a07      	ldr	r2, [sp, #28]
 800b924:	4293      	cmp	r3, r2
 800b926:	dd12      	ble.n	800b94e <__hexnan+0x8a>
 800b928:	42bc      	cmp	r4, r7
 800b92a:	d206      	bcs.n	800b93a <__hexnan+0x76>
 800b92c:	2d07      	cmp	r5, #7
 800b92e:	dc04      	bgt.n	800b93a <__hexnan+0x76>
 800b930:	002a      	movs	r2, r5
 800b932:	0039      	movs	r1, r7
 800b934:	0020      	movs	r0, r4
 800b936:	f7ff ff9f 	bl	800b878 <L_shift>
 800b93a:	9b01      	ldr	r3, [sp, #4]
 800b93c:	2508      	movs	r5, #8
 800b93e:	429c      	cmp	r4, r3
 800b940:	d905      	bls.n	800b94e <__hexnan+0x8a>
 800b942:	1f27      	subs	r7, r4, #4
 800b944:	2500      	movs	r5, #0
 800b946:	003c      	movs	r4, r7
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	603d      	str	r5, [r7, #0]
 800b94c:	9307      	str	r3, [sp, #28]
 800b94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b950:	9305      	str	r3, [sp, #20]
 800b952:	e7d5      	b.n	800b900 <__hexnan+0x3c>
 800b954:	9b04      	ldr	r3, [sp, #16]
 800b956:	2b29      	cmp	r3, #41	; 0x29
 800b958:	d159      	bne.n	800ba0e <__hexnan+0x14a>
 800b95a:	9b05      	ldr	r3, [sp, #20]
 800b95c:	9a08      	ldr	r2, [sp, #32]
 800b95e:	3302      	adds	r3, #2
 800b960:	6013      	str	r3, [r2, #0]
 800b962:	9b03      	ldr	r3, [sp, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d052      	beq.n	800ba0e <__hexnan+0x14a>
 800b968:	42bc      	cmp	r4, r7
 800b96a:	d206      	bcs.n	800b97a <__hexnan+0xb6>
 800b96c:	2d07      	cmp	r5, #7
 800b96e:	dc04      	bgt.n	800b97a <__hexnan+0xb6>
 800b970:	002a      	movs	r2, r5
 800b972:	0039      	movs	r1, r7
 800b974:	0020      	movs	r0, r4
 800b976:	f7ff ff7f 	bl	800b878 <L_shift>
 800b97a:	9b01      	ldr	r3, [sp, #4]
 800b97c:	429c      	cmp	r4, r3
 800b97e:	d935      	bls.n	800b9ec <__hexnan+0x128>
 800b980:	001a      	movs	r2, r3
 800b982:	0023      	movs	r3, r4
 800b984:	cb02      	ldmia	r3!, {r1}
 800b986:	c202      	stmia	r2!, {r1}
 800b988:	429e      	cmp	r6, r3
 800b98a:	d2fb      	bcs.n	800b984 <__hexnan+0xc0>
 800b98c:	9b02      	ldr	r3, [sp, #8]
 800b98e:	1c61      	adds	r1, r4, #1
 800b990:	1eda      	subs	r2, r3, #3
 800b992:	2304      	movs	r3, #4
 800b994:	4291      	cmp	r1, r2
 800b996:	d805      	bhi.n	800b9a4 <__hexnan+0xe0>
 800b998:	9b02      	ldr	r3, [sp, #8]
 800b99a:	3b04      	subs	r3, #4
 800b99c:	1b1b      	subs	r3, r3, r4
 800b99e:	089b      	lsrs	r3, r3, #2
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	9a01      	ldr	r2, [sp, #4]
 800b9a6:	18d3      	adds	r3, r2, r3
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	c304      	stmia	r3!, {r2}
 800b9ac:	429e      	cmp	r6, r3
 800b9ae:	d2fc      	bcs.n	800b9aa <__hexnan+0xe6>
 800b9b0:	6833      	ldr	r3, [r6, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d104      	bne.n	800b9c0 <__hexnan+0xfc>
 800b9b6:	9b01      	ldr	r3, [sp, #4]
 800b9b8:	429e      	cmp	r6, r3
 800b9ba:	d126      	bne.n	800ba0a <__hexnan+0x146>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	6033      	str	r3, [r6, #0]
 800b9c0:	2005      	movs	r0, #5
 800b9c2:	e025      	b.n	800ba10 <__hexnan+0x14c>
 800b9c4:	9b03      	ldr	r3, [sp, #12]
 800b9c6:	3501      	adds	r5, #1
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	9303      	str	r3, [sp, #12]
 800b9cc:	2d08      	cmp	r5, #8
 800b9ce:	dd06      	ble.n	800b9de <__hexnan+0x11a>
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	429c      	cmp	r4, r3
 800b9d4:	d9bb      	bls.n	800b94e <__hexnan+0x8a>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	2501      	movs	r5, #1
 800b9da:	3c04      	subs	r4, #4
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	220f      	movs	r2, #15
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	4010      	ands	r0, r2
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	4318      	orrs	r0, r3
 800b9e8:	6020      	str	r0, [r4, #0]
 800b9ea:	e7b0      	b.n	800b94e <__hexnan+0x8a>
 800b9ec:	9b06      	ldr	r3, [sp, #24]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d0de      	beq.n	800b9b0 <__hexnan+0xec>
 800b9f2:	2120      	movs	r1, #32
 800b9f4:	9a06      	ldr	r2, [sp, #24]
 800b9f6:	9b02      	ldr	r3, [sp, #8]
 800b9f8:	1a89      	subs	r1, r1, r2
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	4252      	negs	r2, r2
 800b9fe:	40ca      	lsrs	r2, r1
 800ba00:	3b04      	subs	r3, #4
 800ba02:	6819      	ldr	r1, [r3, #0]
 800ba04:	400a      	ands	r2, r1
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	e7d2      	b.n	800b9b0 <__hexnan+0xec>
 800ba0a:	3e04      	subs	r6, #4
 800ba0c:	e7d0      	b.n	800b9b0 <__hexnan+0xec>
 800ba0e:	2004      	movs	r0, #4
 800ba10:	b00b      	add	sp, #44	; 0x2c
 800ba12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba14 <_localeconv_r>:
 800ba14:	4800      	ldr	r0, [pc, #0]	; (800ba18 <_localeconv_r+0x4>)
 800ba16:	4770      	bx	lr
 800ba18:	20000164 	.word	0x20000164

0800ba1c <__ascii_mbtowc>:
 800ba1c:	b082      	sub	sp, #8
 800ba1e:	2900      	cmp	r1, #0
 800ba20:	d100      	bne.n	800ba24 <__ascii_mbtowc+0x8>
 800ba22:	a901      	add	r1, sp, #4
 800ba24:	1e10      	subs	r0, r2, #0
 800ba26:	d006      	beq.n	800ba36 <__ascii_mbtowc+0x1a>
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d006      	beq.n	800ba3a <__ascii_mbtowc+0x1e>
 800ba2c:	7813      	ldrb	r3, [r2, #0]
 800ba2e:	600b      	str	r3, [r1, #0]
 800ba30:	7810      	ldrb	r0, [r2, #0]
 800ba32:	1e43      	subs	r3, r0, #1
 800ba34:	4198      	sbcs	r0, r3
 800ba36:	b002      	add	sp, #8
 800ba38:	4770      	bx	lr
 800ba3a:	2002      	movs	r0, #2
 800ba3c:	4240      	negs	r0, r0
 800ba3e:	e7fa      	b.n	800ba36 <__ascii_mbtowc+0x1a>

0800ba40 <memchr>:
 800ba40:	b2c9      	uxtb	r1, r1
 800ba42:	1882      	adds	r2, r0, r2
 800ba44:	4290      	cmp	r0, r2
 800ba46:	d101      	bne.n	800ba4c <memchr+0xc>
 800ba48:	2000      	movs	r0, #0
 800ba4a:	4770      	bx	lr
 800ba4c:	7803      	ldrb	r3, [r0, #0]
 800ba4e:	428b      	cmp	r3, r1
 800ba50:	d0fb      	beq.n	800ba4a <memchr+0xa>
 800ba52:	3001      	adds	r0, #1
 800ba54:	e7f6      	b.n	800ba44 <memchr+0x4>
	...

0800ba58 <__malloc_lock>:
 800ba58:	b510      	push	{r4, lr}
 800ba5a:	4802      	ldr	r0, [pc, #8]	; (800ba64 <__malloc_lock+0xc>)
 800ba5c:	f000 feb9 	bl	800c7d2 <__retarget_lock_acquire_recursive>
 800ba60:	bd10      	pop	{r4, pc}
 800ba62:	46c0      	nop			; (mov r8, r8)
 800ba64:	2000054c 	.word	0x2000054c

0800ba68 <__malloc_unlock>:
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	4802      	ldr	r0, [pc, #8]	; (800ba74 <__malloc_unlock+0xc>)
 800ba6c:	f000 feb2 	bl	800c7d4 <__retarget_lock_release_recursive>
 800ba70:	bd10      	pop	{r4, pc}
 800ba72:	46c0      	nop			; (mov r8, r8)
 800ba74:	2000054c 	.word	0x2000054c

0800ba78 <_Balloc>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba7c:	0006      	movs	r6, r0
 800ba7e:	000c      	movs	r4, r1
 800ba80:	2d00      	cmp	r5, #0
 800ba82:	d10e      	bne.n	800baa2 <_Balloc+0x2a>
 800ba84:	2010      	movs	r0, #16
 800ba86:	f7fc ff2f 	bl	80088e8 <malloc>
 800ba8a:	1e02      	subs	r2, r0, #0
 800ba8c:	6270      	str	r0, [r6, #36]	; 0x24
 800ba8e:	d104      	bne.n	800ba9a <_Balloc+0x22>
 800ba90:	2166      	movs	r1, #102	; 0x66
 800ba92:	4b19      	ldr	r3, [pc, #100]	; (800baf8 <_Balloc+0x80>)
 800ba94:	4819      	ldr	r0, [pc, #100]	; (800bafc <_Balloc+0x84>)
 800ba96:	f000 fe6d 	bl	800c774 <__assert_func>
 800ba9a:	6045      	str	r5, [r0, #4]
 800ba9c:	6085      	str	r5, [r0, #8]
 800ba9e:	6005      	str	r5, [r0, #0]
 800baa0:	60c5      	str	r5, [r0, #12]
 800baa2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800baa4:	68eb      	ldr	r3, [r5, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d013      	beq.n	800bad2 <_Balloc+0x5a>
 800baaa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800baac:	00a2      	lsls	r2, r4, #2
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	189b      	adds	r3, r3, r2
 800bab2:	6818      	ldr	r0, [r3, #0]
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d118      	bne.n	800baea <_Balloc+0x72>
 800bab8:	2101      	movs	r1, #1
 800baba:	000d      	movs	r5, r1
 800babc:	40a5      	lsls	r5, r4
 800babe:	1d6a      	adds	r2, r5, #5
 800bac0:	0030      	movs	r0, r6
 800bac2:	0092      	lsls	r2, r2, #2
 800bac4:	f000 fca1 	bl	800c40a <_calloc_r>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d00c      	beq.n	800bae6 <_Balloc+0x6e>
 800bacc:	6044      	str	r4, [r0, #4]
 800bace:	6085      	str	r5, [r0, #8]
 800bad0:	e00d      	b.n	800baee <_Balloc+0x76>
 800bad2:	2221      	movs	r2, #33	; 0x21
 800bad4:	2104      	movs	r1, #4
 800bad6:	0030      	movs	r0, r6
 800bad8:	f000 fc97 	bl	800c40a <_calloc_r>
 800badc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bade:	60e8      	str	r0, [r5, #12]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e1      	bne.n	800baaa <_Balloc+0x32>
 800bae6:	2000      	movs	r0, #0
 800bae8:	bd70      	pop	{r4, r5, r6, pc}
 800baea:	6802      	ldr	r2, [r0, #0]
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	2300      	movs	r3, #0
 800baf0:	6103      	str	r3, [r0, #16]
 800baf2:	60c3      	str	r3, [r0, #12]
 800baf4:	e7f8      	b.n	800bae8 <_Balloc+0x70>
 800baf6:	46c0      	nop			; (mov r8, r8)
 800baf8:	0800d705 	.word	0x0800d705
 800bafc:	0800d804 	.word	0x0800d804

0800bb00 <_Bfree>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb04:	0005      	movs	r5, r0
 800bb06:	000c      	movs	r4, r1
 800bb08:	2e00      	cmp	r6, #0
 800bb0a:	d10e      	bne.n	800bb2a <_Bfree+0x2a>
 800bb0c:	2010      	movs	r0, #16
 800bb0e:	f7fc feeb 	bl	80088e8 <malloc>
 800bb12:	1e02      	subs	r2, r0, #0
 800bb14:	6268      	str	r0, [r5, #36]	; 0x24
 800bb16:	d104      	bne.n	800bb22 <_Bfree+0x22>
 800bb18:	218a      	movs	r1, #138	; 0x8a
 800bb1a:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <_Bfree+0x40>)
 800bb1c:	4809      	ldr	r0, [pc, #36]	; (800bb44 <_Bfree+0x44>)
 800bb1e:	f000 fe29 	bl	800c774 <__assert_func>
 800bb22:	6046      	str	r6, [r0, #4]
 800bb24:	6086      	str	r6, [r0, #8]
 800bb26:	6006      	str	r6, [r0, #0]
 800bb28:	60c6      	str	r6, [r0, #12]
 800bb2a:	2c00      	cmp	r4, #0
 800bb2c:	d007      	beq.n	800bb3e <_Bfree+0x3e>
 800bb2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb30:	6862      	ldr	r2, [r4, #4]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	0092      	lsls	r2, r2, #2
 800bb36:	189b      	adds	r3, r3, r2
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	6022      	str	r2, [r4, #0]
 800bb3c:	601c      	str	r4, [r3, #0]
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}
 800bb40:	0800d705 	.word	0x0800d705
 800bb44:	0800d804 	.word	0x0800d804

0800bb48 <__multadd>:
 800bb48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb4a:	000e      	movs	r6, r1
 800bb4c:	9001      	str	r0, [sp, #4]
 800bb4e:	000c      	movs	r4, r1
 800bb50:	001d      	movs	r5, r3
 800bb52:	2000      	movs	r0, #0
 800bb54:	690f      	ldr	r7, [r1, #16]
 800bb56:	3614      	adds	r6, #20
 800bb58:	6833      	ldr	r3, [r6, #0]
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	b299      	uxth	r1, r3
 800bb5e:	4351      	muls	r1, r2
 800bb60:	0c1b      	lsrs	r3, r3, #16
 800bb62:	4353      	muls	r3, r2
 800bb64:	1949      	adds	r1, r1, r5
 800bb66:	0c0d      	lsrs	r5, r1, #16
 800bb68:	195b      	adds	r3, r3, r5
 800bb6a:	0c1d      	lsrs	r5, r3, #16
 800bb6c:	b289      	uxth	r1, r1
 800bb6e:	041b      	lsls	r3, r3, #16
 800bb70:	185b      	adds	r3, r3, r1
 800bb72:	c608      	stmia	r6!, {r3}
 800bb74:	4287      	cmp	r7, r0
 800bb76:	dcef      	bgt.n	800bb58 <__multadd+0x10>
 800bb78:	2d00      	cmp	r5, #0
 800bb7a:	d022      	beq.n	800bbc2 <__multadd+0x7a>
 800bb7c:	68a3      	ldr	r3, [r4, #8]
 800bb7e:	42bb      	cmp	r3, r7
 800bb80:	dc19      	bgt.n	800bbb6 <__multadd+0x6e>
 800bb82:	6863      	ldr	r3, [r4, #4]
 800bb84:	9801      	ldr	r0, [sp, #4]
 800bb86:	1c59      	adds	r1, r3, #1
 800bb88:	f7ff ff76 	bl	800ba78 <_Balloc>
 800bb8c:	1e06      	subs	r6, r0, #0
 800bb8e:	d105      	bne.n	800bb9c <__multadd+0x54>
 800bb90:	0002      	movs	r2, r0
 800bb92:	21b5      	movs	r1, #181	; 0xb5
 800bb94:	4b0c      	ldr	r3, [pc, #48]	; (800bbc8 <__multadd+0x80>)
 800bb96:	480d      	ldr	r0, [pc, #52]	; (800bbcc <__multadd+0x84>)
 800bb98:	f000 fdec 	bl	800c774 <__assert_func>
 800bb9c:	0021      	movs	r1, r4
 800bb9e:	6923      	ldr	r3, [r4, #16]
 800bba0:	310c      	adds	r1, #12
 800bba2:	1c9a      	adds	r2, r3, #2
 800bba4:	0092      	lsls	r2, r2, #2
 800bba6:	300c      	adds	r0, #12
 800bba8:	f7fc fea8 	bl	80088fc <memcpy>
 800bbac:	0021      	movs	r1, r4
 800bbae:	9801      	ldr	r0, [sp, #4]
 800bbb0:	f7ff ffa6 	bl	800bb00 <_Bfree>
 800bbb4:	0034      	movs	r4, r6
 800bbb6:	1d3b      	adds	r3, r7, #4
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	18e3      	adds	r3, r4, r3
 800bbbc:	605d      	str	r5, [r3, #4]
 800bbbe:	1c7b      	adds	r3, r7, #1
 800bbc0:	6123      	str	r3, [r4, #16]
 800bbc2:	0020      	movs	r0, r4
 800bbc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbc6:	46c0      	nop			; (mov r8, r8)
 800bbc8:	0800d777 	.word	0x0800d777
 800bbcc:	0800d804 	.word	0x0800d804

0800bbd0 <__s2b>:
 800bbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbd2:	0006      	movs	r6, r0
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	000c      	movs	r4, r1
 800bbd8:	3008      	adds	r0, #8
 800bbda:	2109      	movs	r1, #9
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	0015      	movs	r5, r2
 800bbe0:	f7f4 fb36 	bl	8000250 <__divsi3>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	4283      	cmp	r3, r0
 800bbea:	db0a      	blt.n	800bc02 <__s2b+0x32>
 800bbec:	0030      	movs	r0, r6
 800bbee:	f7ff ff43 	bl	800ba78 <_Balloc>
 800bbf2:	1e01      	subs	r1, r0, #0
 800bbf4:	d108      	bne.n	800bc08 <__s2b+0x38>
 800bbf6:	0002      	movs	r2, r0
 800bbf8:	4b19      	ldr	r3, [pc, #100]	; (800bc60 <__s2b+0x90>)
 800bbfa:	481a      	ldr	r0, [pc, #104]	; (800bc64 <__s2b+0x94>)
 800bbfc:	31ce      	adds	r1, #206	; 0xce
 800bbfe:	f000 fdb9 	bl	800c774 <__assert_func>
 800bc02:	005b      	lsls	r3, r3, #1
 800bc04:	3101      	adds	r1, #1
 800bc06:	e7ef      	b.n	800bbe8 <__s2b+0x18>
 800bc08:	9b08      	ldr	r3, [sp, #32]
 800bc0a:	6143      	str	r3, [r0, #20]
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	6103      	str	r3, [r0, #16]
 800bc10:	2d09      	cmp	r5, #9
 800bc12:	dd18      	ble.n	800bc46 <__s2b+0x76>
 800bc14:	0023      	movs	r3, r4
 800bc16:	3309      	adds	r3, #9
 800bc18:	001f      	movs	r7, r3
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	1964      	adds	r4, r4, r5
 800bc1e:	783b      	ldrb	r3, [r7, #0]
 800bc20:	220a      	movs	r2, #10
 800bc22:	0030      	movs	r0, r6
 800bc24:	3b30      	subs	r3, #48	; 0x30
 800bc26:	f7ff ff8f 	bl	800bb48 <__multadd>
 800bc2a:	3701      	adds	r7, #1
 800bc2c:	0001      	movs	r1, r0
 800bc2e:	42a7      	cmp	r7, r4
 800bc30:	d1f5      	bne.n	800bc1e <__s2b+0x4e>
 800bc32:	002c      	movs	r4, r5
 800bc34:	9b00      	ldr	r3, [sp, #0]
 800bc36:	3c08      	subs	r4, #8
 800bc38:	191c      	adds	r4, r3, r4
 800bc3a:	002f      	movs	r7, r5
 800bc3c:	9b01      	ldr	r3, [sp, #4]
 800bc3e:	429f      	cmp	r7, r3
 800bc40:	db04      	blt.n	800bc4c <__s2b+0x7c>
 800bc42:	0008      	movs	r0, r1
 800bc44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc46:	2509      	movs	r5, #9
 800bc48:	340a      	adds	r4, #10
 800bc4a:	e7f6      	b.n	800bc3a <__s2b+0x6a>
 800bc4c:	1b63      	subs	r3, r4, r5
 800bc4e:	5ddb      	ldrb	r3, [r3, r7]
 800bc50:	220a      	movs	r2, #10
 800bc52:	0030      	movs	r0, r6
 800bc54:	3b30      	subs	r3, #48	; 0x30
 800bc56:	f7ff ff77 	bl	800bb48 <__multadd>
 800bc5a:	3701      	adds	r7, #1
 800bc5c:	0001      	movs	r1, r0
 800bc5e:	e7ed      	b.n	800bc3c <__s2b+0x6c>
 800bc60:	0800d777 	.word	0x0800d777
 800bc64:	0800d804 	.word	0x0800d804

0800bc68 <__hi0bits>:
 800bc68:	0003      	movs	r3, r0
 800bc6a:	0c02      	lsrs	r2, r0, #16
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	4282      	cmp	r2, r0
 800bc70:	d101      	bne.n	800bc76 <__hi0bits+0xe>
 800bc72:	041b      	lsls	r3, r3, #16
 800bc74:	3010      	adds	r0, #16
 800bc76:	0e1a      	lsrs	r2, r3, #24
 800bc78:	d101      	bne.n	800bc7e <__hi0bits+0x16>
 800bc7a:	3008      	adds	r0, #8
 800bc7c:	021b      	lsls	r3, r3, #8
 800bc7e:	0f1a      	lsrs	r2, r3, #28
 800bc80:	d101      	bne.n	800bc86 <__hi0bits+0x1e>
 800bc82:	3004      	adds	r0, #4
 800bc84:	011b      	lsls	r3, r3, #4
 800bc86:	0f9a      	lsrs	r2, r3, #30
 800bc88:	d101      	bne.n	800bc8e <__hi0bits+0x26>
 800bc8a:	3002      	adds	r0, #2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	db03      	blt.n	800bc9a <__hi0bits+0x32>
 800bc92:	3001      	adds	r0, #1
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	d400      	bmi.n	800bc9a <__hi0bits+0x32>
 800bc98:	2020      	movs	r0, #32
 800bc9a:	4770      	bx	lr

0800bc9c <__lo0bits>:
 800bc9c:	6803      	ldr	r3, [r0, #0]
 800bc9e:	0002      	movs	r2, r0
 800bca0:	2107      	movs	r1, #7
 800bca2:	0018      	movs	r0, r3
 800bca4:	4008      	ands	r0, r1
 800bca6:	420b      	tst	r3, r1
 800bca8:	d00d      	beq.n	800bcc6 <__lo0bits+0x2a>
 800bcaa:	3906      	subs	r1, #6
 800bcac:	2000      	movs	r0, #0
 800bcae:	420b      	tst	r3, r1
 800bcb0:	d105      	bne.n	800bcbe <__lo0bits+0x22>
 800bcb2:	3002      	adds	r0, #2
 800bcb4:	4203      	tst	r3, r0
 800bcb6:	d003      	beq.n	800bcc0 <__lo0bits+0x24>
 800bcb8:	40cb      	lsrs	r3, r1
 800bcba:	0008      	movs	r0, r1
 800bcbc:	6013      	str	r3, [r2, #0]
 800bcbe:	4770      	bx	lr
 800bcc0:	089b      	lsrs	r3, r3, #2
 800bcc2:	6013      	str	r3, [r2, #0]
 800bcc4:	e7fb      	b.n	800bcbe <__lo0bits+0x22>
 800bcc6:	b299      	uxth	r1, r3
 800bcc8:	2900      	cmp	r1, #0
 800bcca:	d101      	bne.n	800bcd0 <__lo0bits+0x34>
 800bccc:	2010      	movs	r0, #16
 800bcce:	0c1b      	lsrs	r3, r3, #16
 800bcd0:	b2d9      	uxtb	r1, r3
 800bcd2:	2900      	cmp	r1, #0
 800bcd4:	d101      	bne.n	800bcda <__lo0bits+0x3e>
 800bcd6:	3008      	adds	r0, #8
 800bcd8:	0a1b      	lsrs	r3, r3, #8
 800bcda:	0719      	lsls	r1, r3, #28
 800bcdc:	d101      	bne.n	800bce2 <__lo0bits+0x46>
 800bcde:	3004      	adds	r0, #4
 800bce0:	091b      	lsrs	r3, r3, #4
 800bce2:	0799      	lsls	r1, r3, #30
 800bce4:	d101      	bne.n	800bcea <__lo0bits+0x4e>
 800bce6:	3002      	adds	r0, #2
 800bce8:	089b      	lsrs	r3, r3, #2
 800bcea:	07d9      	lsls	r1, r3, #31
 800bcec:	d4e9      	bmi.n	800bcc2 <__lo0bits+0x26>
 800bcee:	3001      	adds	r0, #1
 800bcf0:	085b      	lsrs	r3, r3, #1
 800bcf2:	d1e6      	bne.n	800bcc2 <__lo0bits+0x26>
 800bcf4:	2020      	movs	r0, #32
 800bcf6:	e7e2      	b.n	800bcbe <__lo0bits+0x22>

0800bcf8 <__i2b>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	000c      	movs	r4, r1
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	f7ff febb 	bl	800ba78 <_Balloc>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d106      	bne.n	800bd14 <__i2b+0x1c>
 800bd06:	21a0      	movs	r1, #160	; 0xa0
 800bd08:	0002      	movs	r2, r0
 800bd0a:	4b04      	ldr	r3, [pc, #16]	; (800bd1c <__i2b+0x24>)
 800bd0c:	4804      	ldr	r0, [pc, #16]	; (800bd20 <__i2b+0x28>)
 800bd0e:	0049      	lsls	r1, r1, #1
 800bd10:	f000 fd30 	bl	800c774 <__assert_func>
 800bd14:	2301      	movs	r3, #1
 800bd16:	6144      	str	r4, [r0, #20]
 800bd18:	6103      	str	r3, [r0, #16]
 800bd1a:	bd10      	pop	{r4, pc}
 800bd1c:	0800d777 	.word	0x0800d777
 800bd20:	0800d804 	.word	0x0800d804

0800bd24 <__multiply>:
 800bd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd26:	690b      	ldr	r3, [r1, #16]
 800bd28:	0014      	movs	r4, r2
 800bd2a:	6912      	ldr	r2, [r2, #16]
 800bd2c:	000d      	movs	r5, r1
 800bd2e:	b089      	sub	sp, #36	; 0x24
 800bd30:	4293      	cmp	r3, r2
 800bd32:	da01      	bge.n	800bd38 <__multiply+0x14>
 800bd34:	0025      	movs	r5, r4
 800bd36:	000c      	movs	r4, r1
 800bd38:	692f      	ldr	r7, [r5, #16]
 800bd3a:	6926      	ldr	r6, [r4, #16]
 800bd3c:	6869      	ldr	r1, [r5, #4]
 800bd3e:	19bb      	adds	r3, r7, r6
 800bd40:	9302      	str	r3, [sp, #8]
 800bd42:	68ab      	ldr	r3, [r5, #8]
 800bd44:	19ba      	adds	r2, r7, r6
 800bd46:	4293      	cmp	r3, r2
 800bd48:	da00      	bge.n	800bd4c <__multiply+0x28>
 800bd4a:	3101      	adds	r1, #1
 800bd4c:	f7ff fe94 	bl	800ba78 <_Balloc>
 800bd50:	9001      	str	r0, [sp, #4]
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d106      	bne.n	800bd64 <__multiply+0x40>
 800bd56:	215e      	movs	r1, #94	; 0x5e
 800bd58:	0002      	movs	r2, r0
 800bd5a:	4b48      	ldr	r3, [pc, #288]	; (800be7c <__multiply+0x158>)
 800bd5c:	4848      	ldr	r0, [pc, #288]	; (800be80 <__multiply+0x15c>)
 800bd5e:	31ff      	adds	r1, #255	; 0xff
 800bd60:	f000 fd08 	bl	800c774 <__assert_func>
 800bd64:	9b01      	ldr	r3, [sp, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	3314      	adds	r3, #20
 800bd6a:	469c      	mov	ip, r3
 800bd6c:	19bb      	adds	r3, r7, r6
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4463      	add	r3, ip
 800bd72:	9303      	str	r3, [sp, #12]
 800bd74:	4663      	mov	r3, ip
 800bd76:	9903      	ldr	r1, [sp, #12]
 800bd78:	428b      	cmp	r3, r1
 800bd7a:	d32c      	bcc.n	800bdd6 <__multiply+0xb2>
 800bd7c:	002b      	movs	r3, r5
 800bd7e:	0022      	movs	r2, r4
 800bd80:	3314      	adds	r3, #20
 800bd82:	00bf      	lsls	r7, r7, #2
 800bd84:	3214      	adds	r2, #20
 800bd86:	9306      	str	r3, [sp, #24]
 800bd88:	00b6      	lsls	r6, r6, #2
 800bd8a:	19db      	adds	r3, r3, r7
 800bd8c:	9304      	str	r3, [sp, #16]
 800bd8e:	1993      	adds	r3, r2, r6
 800bd90:	9307      	str	r3, [sp, #28]
 800bd92:	2304      	movs	r3, #4
 800bd94:	9305      	str	r3, [sp, #20]
 800bd96:	002b      	movs	r3, r5
 800bd98:	9904      	ldr	r1, [sp, #16]
 800bd9a:	3315      	adds	r3, #21
 800bd9c:	9200      	str	r2, [sp, #0]
 800bd9e:	4299      	cmp	r1, r3
 800bda0:	d305      	bcc.n	800bdae <__multiply+0x8a>
 800bda2:	1b4b      	subs	r3, r1, r5
 800bda4:	3b15      	subs	r3, #21
 800bda6:	089b      	lsrs	r3, r3, #2
 800bda8:	3301      	adds	r3, #1
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	9305      	str	r3, [sp, #20]
 800bdae:	9b07      	ldr	r3, [sp, #28]
 800bdb0:	9a00      	ldr	r2, [sp, #0]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d311      	bcc.n	800bdda <__multiply+0xb6>
 800bdb6:	9b02      	ldr	r3, [sp, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	dd06      	ble.n	800bdca <__multiply+0xa6>
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	3b04      	subs	r3, #4
 800bdc0:	9303      	str	r3, [sp, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d053      	beq.n	800be72 <__multiply+0x14e>
 800bdca:	9b01      	ldr	r3, [sp, #4]
 800bdcc:	9a02      	ldr	r2, [sp, #8]
 800bdce:	0018      	movs	r0, r3
 800bdd0:	611a      	str	r2, [r3, #16]
 800bdd2:	b009      	add	sp, #36	; 0x24
 800bdd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdd6:	c304      	stmia	r3!, {r2}
 800bdd8:	e7cd      	b.n	800bd76 <__multiply+0x52>
 800bdda:	9b00      	ldr	r3, [sp, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	b298      	uxth	r0, r3
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d01b      	beq.n	800be1c <__multiply+0xf8>
 800bde4:	4667      	mov	r7, ip
 800bde6:	2400      	movs	r4, #0
 800bde8:	9e06      	ldr	r6, [sp, #24]
 800bdea:	ce02      	ldmia	r6!, {r1}
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	b28b      	uxth	r3, r1
 800bdf0:	4343      	muls	r3, r0
 800bdf2:	b292      	uxth	r2, r2
 800bdf4:	189b      	adds	r3, r3, r2
 800bdf6:	191b      	adds	r3, r3, r4
 800bdf8:	0c0c      	lsrs	r4, r1, #16
 800bdfa:	4344      	muls	r4, r0
 800bdfc:	683a      	ldr	r2, [r7, #0]
 800bdfe:	0c11      	lsrs	r1, r2, #16
 800be00:	1861      	adds	r1, r4, r1
 800be02:	0c1c      	lsrs	r4, r3, #16
 800be04:	1909      	adds	r1, r1, r4
 800be06:	0c0c      	lsrs	r4, r1, #16
 800be08:	b29b      	uxth	r3, r3
 800be0a:	0409      	lsls	r1, r1, #16
 800be0c:	430b      	orrs	r3, r1
 800be0e:	c708      	stmia	r7!, {r3}
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	42b3      	cmp	r3, r6
 800be14:	d8e9      	bhi.n	800bdea <__multiply+0xc6>
 800be16:	4663      	mov	r3, ip
 800be18:	9a05      	ldr	r2, [sp, #20]
 800be1a:	509c      	str	r4, [r3, r2]
 800be1c:	9b00      	ldr	r3, [sp, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	0c1e      	lsrs	r6, r3, #16
 800be22:	d020      	beq.n	800be66 <__multiply+0x142>
 800be24:	4663      	mov	r3, ip
 800be26:	002c      	movs	r4, r5
 800be28:	4660      	mov	r0, ip
 800be2a:	2700      	movs	r7, #0
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	3414      	adds	r4, #20
 800be30:	6822      	ldr	r2, [r4, #0]
 800be32:	b29b      	uxth	r3, r3
 800be34:	b291      	uxth	r1, r2
 800be36:	4371      	muls	r1, r6
 800be38:	6802      	ldr	r2, [r0, #0]
 800be3a:	0c12      	lsrs	r2, r2, #16
 800be3c:	1889      	adds	r1, r1, r2
 800be3e:	19cf      	adds	r7, r1, r7
 800be40:	0439      	lsls	r1, r7, #16
 800be42:	430b      	orrs	r3, r1
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	cc02      	ldmia	r4!, {r1}
 800be48:	6843      	ldr	r3, [r0, #4]
 800be4a:	0c09      	lsrs	r1, r1, #16
 800be4c:	4371      	muls	r1, r6
 800be4e:	b29b      	uxth	r3, r3
 800be50:	0c3f      	lsrs	r7, r7, #16
 800be52:	18cb      	adds	r3, r1, r3
 800be54:	9a04      	ldr	r2, [sp, #16]
 800be56:	19db      	adds	r3, r3, r7
 800be58:	0c1f      	lsrs	r7, r3, #16
 800be5a:	3004      	adds	r0, #4
 800be5c:	42a2      	cmp	r2, r4
 800be5e:	d8e7      	bhi.n	800be30 <__multiply+0x10c>
 800be60:	4662      	mov	r2, ip
 800be62:	9905      	ldr	r1, [sp, #20]
 800be64:	5053      	str	r3, [r2, r1]
 800be66:	9b00      	ldr	r3, [sp, #0]
 800be68:	3304      	adds	r3, #4
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	2304      	movs	r3, #4
 800be6e:	449c      	add	ip, r3
 800be70:	e79d      	b.n	800bdae <__multiply+0x8a>
 800be72:	9b02      	ldr	r3, [sp, #8]
 800be74:	3b01      	subs	r3, #1
 800be76:	9302      	str	r3, [sp, #8]
 800be78:	e79d      	b.n	800bdb6 <__multiply+0x92>
 800be7a:	46c0      	nop			; (mov r8, r8)
 800be7c:	0800d777 	.word	0x0800d777
 800be80:	0800d804 	.word	0x0800d804

0800be84 <__pow5mult>:
 800be84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be86:	2303      	movs	r3, #3
 800be88:	0015      	movs	r5, r2
 800be8a:	0007      	movs	r7, r0
 800be8c:	000e      	movs	r6, r1
 800be8e:	401a      	ands	r2, r3
 800be90:	421d      	tst	r5, r3
 800be92:	d008      	beq.n	800bea6 <__pow5mult+0x22>
 800be94:	4925      	ldr	r1, [pc, #148]	; (800bf2c <__pow5mult+0xa8>)
 800be96:	3a01      	subs	r2, #1
 800be98:	0092      	lsls	r2, r2, #2
 800be9a:	5852      	ldr	r2, [r2, r1]
 800be9c:	2300      	movs	r3, #0
 800be9e:	0031      	movs	r1, r6
 800bea0:	f7ff fe52 	bl	800bb48 <__multadd>
 800bea4:	0006      	movs	r6, r0
 800bea6:	10ad      	asrs	r5, r5, #2
 800bea8:	d03d      	beq.n	800bf26 <__pow5mult+0xa2>
 800beaa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800beac:	2c00      	cmp	r4, #0
 800beae:	d10f      	bne.n	800bed0 <__pow5mult+0x4c>
 800beb0:	2010      	movs	r0, #16
 800beb2:	f7fc fd19 	bl	80088e8 <malloc>
 800beb6:	1e02      	subs	r2, r0, #0
 800beb8:	6278      	str	r0, [r7, #36]	; 0x24
 800beba:	d105      	bne.n	800bec8 <__pow5mult+0x44>
 800bebc:	21d7      	movs	r1, #215	; 0xd7
 800bebe:	4b1c      	ldr	r3, [pc, #112]	; (800bf30 <__pow5mult+0xac>)
 800bec0:	481c      	ldr	r0, [pc, #112]	; (800bf34 <__pow5mult+0xb0>)
 800bec2:	0049      	lsls	r1, r1, #1
 800bec4:	f000 fc56 	bl	800c774 <__assert_func>
 800bec8:	6044      	str	r4, [r0, #4]
 800beca:	6084      	str	r4, [r0, #8]
 800becc:	6004      	str	r4, [r0, #0]
 800bece:	60c4      	str	r4, [r0, #12]
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	689c      	ldr	r4, [r3, #8]
 800bed4:	9301      	str	r3, [sp, #4]
 800bed6:	2c00      	cmp	r4, #0
 800bed8:	d108      	bne.n	800beec <__pow5mult+0x68>
 800beda:	0038      	movs	r0, r7
 800bedc:	4916      	ldr	r1, [pc, #88]	; (800bf38 <__pow5mult+0xb4>)
 800bede:	f7ff ff0b 	bl	800bcf8 <__i2b>
 800bee2:	9b01      	ldr	r3, [sp, #4]
 800bee4:	0004      	movs	r4, r0
 800bee6:	6098      	str	r0, [r3, #8]
 800bee8:	2300      	movs	r3, #0
 800beea:	6003      	str	r3, [r0, #0]
 800beec:	2301      	movs	r3, #1
 800beee:	421d      	tst	r5, r3
 800bef0:	d00a      	beq.n	800bf08 <__pow5mult+0x84>
 800bef2:	0031      	movs	r1, r6
 800bef4:	0022      	movs	r2, r4
 800bef6:	0038      	movs	r0, r7
 800bef8:	f7ff ff14 	bl	800bd24 <__multiply>
 800befc:	0031      	movs	r1, r6
 800befe:	9001      	str	r0, [sp, #4]
 800bf00:	0038      	movs	r0, r7
 800bf02:	f7ff fdfd 	bl	800bb00 <_Bfree>
 800bf06:	9e01      	ldr	r6, [sp, #4]
 800bf08:	106d      	asrs	r5, r5, #1
 800bf0a:	d00c      	beq.n	800bf26 <__pow5mult+0xa2>
 800bf0c:	6820      	ldr	r0, [r4, #0]
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d107      	bne.n	800bf22 <__pow5mult+0x9e>
 800bf12:	0022      	movs	r2, r4
 800bf14:	0021      	movs	r1, r4
 800bf16:	0038      	movs	r0, r7
 800bf18:	f7ff ff04 	bl	800bd24 <__multiply>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	6020      	str	r0, [r4, #0]
 800bf20:	6003      	str	r3, [r0, #0]
 800bf22:	0004      	movs	r4, r0
 800bf24:	e7e2      	b.n	800beec <__pow5mult+0x68>
 800bf26:	0030      	movs	r0, r6
 800bf28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf2a:	46c0      	nop			; (mov r8, r8)
 800bf2c:	0800d950 	.word	0x0800d950
 800bf30:	0800d705 	.word	0x0800d705
 800bf34:	0800d804 	.word	0x0800d804
 800bf38:	00000271 	.word	0x00000271

0800bf3c <__lshift>:
 800bf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3e:	000c      	movs	r4, r1
 800bf40:	0017      	movs	r7, r2
 800bf42:	6923      	ldr	r3, [r4, #16]
 800bf44:	1155      	asrs	r5, r2, #5
 800bf46:	b087      	sub	sp, #28
 800bf48:	18eb      	adds	r3, r5, r3
 800bf4a:	9302      	str	r3, [sp, #8]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	9301      	str	r3, [sp, #4]
 800bf50:	6849      	ldr	r1, [r1, #4]
 800bf52:	68a3      	ldr	r3, [r4, #8]
 800bf54:	9004      	str	r0, [sp, #16]
 800bf56:	9a01      	ldr	r2, [sp, #4]
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	db10      	blt.n	800bf7e <__lshift+0x42>
 800bf5c:	9804      	ldr	r0, [sp, #16]
 800bf5e:	f7ff fd8b 	bl	800ba78 <_Balloc>
 800bf62:	2300      	movs	r3, #0
 800bf64:	0002      	movs	r2, r0
 800bf66:	0006      	movs	r6, r0
 800bf68:	0019      	movs	r1, r3
 800bf6a:	3214      	adds	r2, #20
 800bf6c:	4298      	cmp	r0, r3
 800bf6e:	d10c      	bne.n	800bf8a <__lshift+0x4e>
 800bf70:	21da      	movs	r1, #218	; 0xda
 800bf72:	0002      	movs	r2, r0
 800bf74:	4b26      	ldr	r3, [pc, #152]	; (800c010 <__lshift+0xd4>)
 800bf76:	4827      	ldr	r0, [pc, #156]	; (800c014 <__lshift+0xd8>)
 800bf78:	31ff      	adds	r1, #255	; 0xff
 800bf7a:	f000 fbfb 	bl	800c774 <__assert_func>
 800bf7e:	3101      	adds	r1, #1
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	e7e8      	b.n	800bf56 <__lshift+0x1a>
 800bf84:	0098      	lsls	r0, r3, #2
 800bf86:	5011      	str	r1, [r2, r0]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	42ab      	cmp	r3, r5
 800bf8c:	dbfa      	blt.n	800bf84 <__lshift+0x48>
 800bf8e:	43eb      	mvns	r3, r5
 800bf90:	17db      	asrs	r3, r3, #31
 800bf92:	401d      	ands	r5, r3
 800bf94:	211f      	movs	r1, #31
 800bf96:	0023      	movs	r3, r4
 800bf98:	0038      	movs	r0, r7
 800bf9a:	00ad      	lsls	r5, r5, #2
 800bf9c:	1955      	adds	r5, r2, r5
 800bf9e:	6922      	ldr	r2, [r4, #16]
 800bfa0:	3314      	adds	r3, #20
 800bfa2:	0092      	lsls	r2, r2, #2
 800bfa4:	4008      	ands	r0, r1
 800bfa6:	4684      	mov	ip, r0
 800bfa8:	189a      	adds	r2, r3, r2
 800bfaa:	420f      	tst	r7, r1
 800bfac:	d02a      	beq.n	800c004 <__lshift+0xc8>
 800bfae:	3101      	adds	r1, #1
 800bfb0:	1a09      	subs	r1, r1, r0
 800bfb2:	9105      	str	r1, [sp, #20]
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	9503      	str	r5, [sp, #12]
 800bfb8:	4667      	mov	r7, ip
 800bfba:	6818      	ldr	r0, [r3, #0]
 800bfbc:	40b8      	lsls	r0, r7
 800bfbe:	4301      	orrs	r1, r0
 800bfc0:	9803      	ldr	r0, [sp, #12]
 800bfc2:	c002      	stmia	r0!, {r1}
 800bfc4:	cb02      	ldmia	r3!, {r1}
 800bfc6:	9003      	str	r0, [sp, #12]
 800bfc8:	9805      	ldr	r0, [sp, #20]
 800bfca:	40c1      	lsrs	r1, r0
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d8f3      	bhi.n	800bfb8 <__lshift+0x7c>
 800bfd0:	0020      	movs	r0, r4
 800bfd2:	3015      	adds	r0, #21
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	4282      	cmp	r2, r0
 800bfd8:	d304      	bcc.n	800bfe4 <__lshift+0xa8>
 800bfda:	1b13      	subs	r3, r2, r4
 800bfdc:	3b15      	subs	r3, #21
 800bfde:	089b      	lsrs	r3, r3, #2
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	50e9      	str	r1, [r5, r3]
 800bfe6:	2900      	cmp	r1, #0
 800bfe8:	d002      	beq.n	800bff0 <__lshift+0xb4>
 800bfea:	9b02      	ldr	r3, [sp, #8]
 800bfec:	3302      	adds	r3, #2
 800bfee:	9301      	str	r3, [sp, #4]
 800bff0:	9b01      	ldr	r3, [sp, #4]
 800bff2:	9804      	ldr	r0, [sp, #16]
 800bff4:	3b01      	subs	r3, #1
 800bff6:	0021      	movs	r1, r4
 800bff8:	6133      	str	r3, [r6, #16]
 800bffa:	f7ff fd81 	bl	800bb00 <_Bfree>
 800bffe:	0030      	movs	r0, r6
 800c000:	b007      	add	sp, #28
 800c002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c004:	cb02      	ldmia	r3!, {r1}
 800c006:	c502      	stmia	r5!, {r1}
 800c008:	429a      	cmp	r2, r3
 800c00a:	d8fb      	bhi.n	800c004 <__lshift+0xc8>
 800c00c:	e7f0      	b.n	800bff0 <__lshift+0xb4>
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	0800d777 	.word	0x0800d777
 800c014:	0800d804 	.word	0x0800d804

0800c018 <__mcmp>:
 800c018:	6902      	ldr	r2, [r0, #16]
 800c01a:	690b      	ldr	r3, [r1, #16]
 800c01c:	b530      	push	{r4, r5, lr}
 800c01e:	0004      	movs	r4, r0
 800c020:	1ad0      	subs	r0, r2, r3
 800c022:	429a      	cmp	r2, r3
 800c024:	d10d      	bne.n	800c042 <__mcmp+0x2a>
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	3414      	adds	r4, #20
 800c02a:	3114      	adds	r1, #20
 800c02c:	18e2      	adds	r2, r4, r3
 800c02e:	18c9      	adds	r1, r1, r3
 800c030:	3a04      	subs	r2, #4
 800c032:	3904      	subs	r1, #4
 800c034:	6815      	ldr	r5, [r2, #0]
 800c036:	680b      	ldr	r3, [r1, #0]
 800c038:	429d      	cmp	r5, r3
 800c03a:	d003      	beq.n	800c044 <__mcmp+0x2c>
 800c03c:	2001      	movs	r0, #1
 800c03e:	429d      	cmp	r5, r3
 800c040:	d303      	bcc.n	800c04a <__mcmp+0x32>
 800c042:	bd30      	pop	{r4, r5, pc}
 800c044:	4294      	cmp	r4, r2
 800c046:	d3f3      	bcc.n	800c030 <__mcmp+0x18>
 800c048:	e7fb      	b.n	800c042 <__mcmp+0x2a>
 800c04a:	4240      	negs	r0, r0
 800c04c:	e7f9      	b.n	800c042 <__mcmp+0x2a>
	...

0800c050 <__mdiff>:
 800c050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c052:	000e      	movs	r6, r1
 800c054:	0007      	movs	r7, r0
 800c056:	0011      	movs	r1, r2
 800c058:	0030      	movs	r0, r6
 800c05a:	b087      	sub	sp, #28
 800c05c:	0014      	movs	r4, r2
 800c05e:	f7ff ffdb 	bl	800c018 <__mcmp>
 800c062:	1e05      	subs	r5, r0, #0
 800c064:	d110      	bne.n	800c088 <__mdiff+0x38>
 800c066:	0001      	movs	r1, r0
 800c068:	0038      	movs	r0, r7
 800c06a:	f7ff fd05 	bl	800ba78 <_Balloc>
 800c06e:	1e02      	subs	r2, r0, #0
 800c070:	d104      	bne.n	800c07c <__mdiff+0x2c>
 800c072:	4b40      	ldr	r3, [pc, #256]	; (800c174 <__mdiff+0x124>)
 800c074:	4940      	ldr	r1, [pc, #256]	; (800c178 <__mdiff+0x128>)
 800c076:	4841      	ldr	r0, [pc, #260]	; (800c17c <__mdiff+0x12c>)
 800c078:	f000 fb7c 	bl	800c774 <__assert_func>
 800c07c:	2301      	movs	r3, #1
 800c07e:	6145      	str	r5, [r0, #20]
 800c080:	6103      	str	r3, [r0, #16]
 800c082:	0010      	movs	r0, r2
 800c084:	b007      	add	sp, #28
 800c086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c088:	2301      	movs	r3, #1
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	2800      	cmp	r0, #0
 800c08e:	db04      	blt.n	800c09a <__mdiff+0x4a>
 800c090:	0023      	movs	r3, r4
 800c092:	0034      	movs	r4, r6
 800c094:	001e      	movs	r6, r3
 800c096:	2300      	movs	r3, #0
 800c098:	9301      	str	r3, [sp, #4]
 800c09a:	0038      	movs	r0, r7
 800c09c:	6861      	ldr	r1, [r4, #4]
 800c09e:	f7ff fceb 	bl	800ba78 <_Balloc>
 800c0a2:	1e02      	subs	r2, r0, #0
 800c0a4:	d103      	bne.n	800c0ae <__mdiff+0x5e>
 800c0a6:	2190      	movs	r1, #144	; 0x90
 800c0a8:	4b32      	ldr	r3, [pc, #200]	; (800c174 <__mdiff+0x124>)
 800c0aa:	0089      	lsls	r1, r1, #2
 800c0ac:	e7e3      	b.n	800c076 <__mdiff+0x26>
 800c0ae:	9b01      	ldr	r3, [sp, #4]
 800c0b0:	2700      	movs	r7, #0
 800c0b2:	60c3      	str	r3, [r0, #12]
 800c0b4:	6920      	ldr	r0, [r4, #16]
 800c0b6:	3414      	adds	r4, #20
 800c0b8:	9401      	str	r4, [sp, #4]
 800c0ba:	9b01      	ldr	r3, [sp, #4]
 800c0bc:	0084      	lsls	r4, r0, #2
 800c0be:	191b      	adds	r3, r3, r4
 800c0c0:	0034      	movs	r4, r6
 800c0c2:	9302      	str	r3, [sp, #8]
 800c0c4:	6933      	ldr	r3, [r6, #16]
 800c0c6:	3414      	adds	r4, #20
 800c0c8:	0099      	lsls	r1, r3, #2
 800c0ca:	1863      	adds	r3, r4, r1
 800c0cc:	9303      	str	r3, [sp, #12]
 800c0ce:	0013      	movs	r3, r2
 800c0d0:	3314      	adds	r3, #20
 800c0d2:	469c      	mov	ip, r3
 800c0d4:	9305      	str	r3, [sp, #20]
 800c0d6:	9b01      	ldr	r3, [sp, #4]
 800c0d8:	9304      	str	r3, [sp, #16]
 800c0da:	9b04      	ldr	r3, [sp, #16]
 800c0dc:	cc02      	ldmia	r4!, {r1}
 800c0de:	cb20      	ldmia	r3!, {r5}
 800c0e0:	9304      	str	r3, [sp, #16]
 800c0e2:	b2ab      	uxth	r3, r5
 800c0e4:	19df      	adds	r7, r3, r7
 800c0e6:	b28b      	uxth	r3, r1
 800c0e8:	1afb      	subs	r3, r7, r3
 800c0ea:	0c09      	lsrs	r1, r1, #16
 800c0ec:	0c2d      	lsrs	r5, r5, #16
 800c0ee:	1a6d      	subs	r5, r5, r1
 800c0f0:	1419      	asrs	r1, r3, #16
 800c0f2:	186d      	adds	r5, r5, r1
 800c0f4:	4661      	mov	r1, ip
 800c0f6:	142f      	asrs	r7, r5, #16
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	042d      	lsls	r5, r5, #16
 800c0fc:	432b      	orrs	r3, r5
 800c0fe:	c108      	stmia	r1!, {r3}
 800c100:	9b03      	ldr	r3, [sp, #12]
 800c102:	468c      	mov	ip, r1
 800c104:	42a3      	cmp	r3, r4
 800c106:	d8e8      	bhi.n	800c0da <__mdiff+0x8a>
 800c108:	0031      	movs	r1, r6
 800c10a:	9c03      	ldr	r4, [sp, #12]
 800c10c:	3115      	adds	r1, #21
 800c10e:	2304      	movs	r3, #4
 800c110:	428c      	cmp	r4, r1
 800c112:	d304      	bcc.n	800c11e <__mdiff+0xce>
 800c114:	1ba3      	subs	r3, r4, r6
 800c116:	3b15      	subs	r3, #21
 800c118:	089b      	lsrs	r3, r3, #2
 800c11a:	3301      	adds	r3, #1
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	9901      	ldr	r1, [sp, #4]
 800c120:	18cc      	adds	r4, r1, r3
 800c122:	9905      	ldr	r1, [sp, #20]
 800c124:	0026      	movs	r6, r4
 800c126:	18cb      	adds	r3, r1, r3
 800c128:	469c      	mov	ip, r3
 800c12a:	9902      	ldr	r1, [sp, #8]
 800c12c:	428e      	cmp	r6, r1
 800c12e:	d310      	bcc.n	800c152 <__mdiff+0x102>
 800c130:	9e02      	ldr	r6, [sp, #8]
 800c132:	1ee1      	subs	r1, r4, #3
 800c134:	2500      	movs	r5, #0
 800c136:	428e      	cmp	r6, r1
 800c138:	d304      	bcc.n	800c144 <__mdiff+0xf4>
 800c13a:	0031      	movs	r1, r6
 800c13c:	3103      	adds	r1, #3
 800c13e:	1b0c      	subs	r4, r1, r4
 800c140:	08a4      	lsrs	r4, r4, #2
 800c142:	00a5      	lsls	r5, r4, #2
 800c144:	195b      	adds	r3, r3, r5
 800c146:	3b04      	subs	r3, #4
 800c148:	6819      	ldr	r1, [r3, #0]
 800c14a:	2900      	cmp	r1, #0
 800c14c:	d00f      	beq.n	800c16e <__mdiff+0x11e>
 800c14e:	6110      	str	r0, [r2, #16]
 800c150:	e797      	b.n	800c082 <__mdiff+0x32>
 800c152:	ce02      	ldmia	r6!, {r1}
 800c154:	b28d      	uxth	r5, r1
 800c156:	19ed      	adds	r5, r5, r7
 800c158:	0c0f      	lsrs	r7, r1, #16
 800c15a:	1429      	asrs	r1, r5, #16
 800c15c:	1879      	adds	r1, r7, r1
 800c15e:	140f      	asrs	r7, r1, #16
 800c160:	b2ad      	uxth	r5, r5
 800c162:	0409      	lsls	r1, r1, #16
 800c164:	430d      	orrs	r5, r1
 800c166:	4661      	mov	r1, ip
 800c168:	c120      	stmia	r1!, {r5}
 800c16a:	468c      	mov	ip, r1
 800c16c:	e7dd      	b.n	800c12a <__mdiff+0xda>
 800c16e:	3801      	subs	r0, #1
 800c170:	e7e9      	b.n	800c146 <__mdiff+0xf6>
 800c172:	46c0      	nop			; (mov r8, r8)
 800c174:	0800d777 	.word	0x0800d777
 800c178:	00000232 	.word	0x00000232
 800c17c:	0800d804 	.word	0x0800d804

0800c180 <__ulp>:
 800c180:	4b0f      	ldr	r3, [pc, #60]	; (800c1c0 <__ulp+0x40>)
 800c182:	4019      	ands	r1, r3
 800c184:	4b0f      	ldr	r3, [pc, #60]	; (800c1c4 <__ulp+0x44>)
 800c186:	18c9      	adds	r1, r1, r3
 800c188:	2900      	cmp	r1, #0
 800c18a:	dd04      	ble.n	800c196 <__ulp+0x16>
 800c18c:	2200      	movs	r2, #0
 800c18e:	000b      	movs	r3, r1
 800c190:	0010      	movs	r0, r2
 800c192:	0019      	movs	r1, r3
 800c194:	4770      	bx	lr
 800c196:	4249      	negs	r1, r1
 800c198:	2200      	movs	r2, #0
 800c19a:	2300      	movs	r3, #0
 800c19c:	1509      	asrs	r1, r1, #20
 800c19e:	2913      	cmp	r1, #19
 800c1a0:	dc04      	bgt.n	800c1ac <__ulp+0x2c>
 800c1a2:	2080      	movs	r0, #128	; 0x80
 800c1a4:	0300      	lsls	r0, r0, #12
 800c1a6:	4108      	asrs	r0, r1
 800c1a8:	0003      	movs	r3, r0
 800c1aa:	e7f1      	b.n	800c190 <__ulp+0x10>
 800c1ac:	3914      	subs	r1, #20
 800c1ae:	2001      	movs	r0, #1
 800c1b0:	291e      	cmp	r1, #30
 800c1b2:	dc02      	bgt.n	800c1ba <__ulp+0x3a>
 800c1b4:	2080      	movs	r0, #128	; 0x80
 800c1b6:	0600      	lsls	r0, r0, #24
 800c1b8:	40c8      	lsrs	r0, r1
 800c1ba:	0002      	movs	r2, r0
 800c1bc:	e7e8      	b.n	800c190 <__ulp+0x10>
 800c1be:	46c0      	nop			; (mov r8, r8)
 800c1c0:	7ff00000 	.word	0x7ff00000
 800c1c4:	fcc00000 	.word	0xfcc00000

0800c1c8 <__b2d>:
 800c1c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1ca:	0006      	movs	r6, r0
 800c1cc:	6903      	ldr	r3, [r0, #16]
 800c1ce:	3614      	adds	r6, #20
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	18f3      	adds	r3, r6, r3
 800c1d4:	1f1d      	subs	r5, r3, #4
 800c1d6:	682c      	ldr	r4, [r5, #0]
 800c1d8:	000f      	movs	r7, r1
 800c1da:	0020      	movs	r0, r4
 800c1dc:	9301      	str	r3, [sp, #4]
 800c1de:	f7ff fd43 	bl	800bc68 <__hi0bits>
 800c1e2:	2320      	movs	r3, #32
 800c1e4:	1a1b      	subs	r3, r3, r0
 800c1e6:	491f      	ldr	r1, [pc, #124]	; (800c264 <__b2d+0x9c>)
 800c1e8:	603b      	str	r3, [r7, #0]
 800c1ea:	280a      	cmp	r0, #10
 800c1ec:	dc16      	bgt.n	800c21c <__b2d+0x54>
 800c1ee:	230b      	movs	r3, #11
 800c1f0:	0027      	movs	r7, r4
 800c1f2:	1a1b      	subs	r3, r3, r0
 800c1f4:	40df      	lsrs	r7, r3
 800c1f6:	4339      	orrs	r1, r7
 800c1f8:	469c      	mov	ip, r3
 800c1fa:	000b      	movs	r3, r1
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	42ae      	cmp	r6, r5
 800c200:	d202      	bcs.n	800c208 <__b2d+0x40>
 800c202:	9901      	ldr	r1, [sp, #4]
 800c204:	3908      	subs	r1, #8
 800c206:	6809      	ldr	r1, [r1, #0]
 800c208:	3015      	adds	r0, #21
 800c20a:	4084      	lsls	r4, r0
 800c20c:	4660      	mov	r0, ip
 800c20e:	40c1      	lsrs	r1, r0
 800c210:	430c      	orrs	r4, r1
 800c212:	0022      	movs	r2, r4
 800c214:	0010      	movs	r0, r2
 800c216:	0019      	movs	r1, r3
 800c218:	b003      	add	sp, #12
 800c21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c21c:	2700      	movs	r7, #0
 800c21e:	42ae      	cmp	r6, r5
 800c220:	d202      	bcs.n	800c228 <__b2d+0x60>
 800c222:	9d01      	ldr	r5, [sp, #4]
 800c224:	3d08      	subs	r5, #8
 800c226:	682f      	ldr	r7, [r5, #0]
 800c228:	230b      	movs	r3, #11
 800c22a:	425b      	negs	r3, r3
 800c22c:	469c      	mov	ip, r3
 800c22e:	4484      	add	ip, r0
 800c230:	280b      	cmp	r0, #11
 800c232:	d013      	beq.n	800c25c <__b2d+0x94>
 800c234:	4663      	mov	r3, ip
 800c236:	2020      	movs	r0, #32
 800c238:	409c      	lsls	r4, r3
 800c23a:	1ac0      	subs	r0, r0, r3
 800c23c:	003b      	movs	r3, r7
 800c23e:	40c3      	lsrs	r3, r0
 800c240:	431c      	orrs	r4, r3
 800c242:	4321      	orrs	r1, r4
 800c244:	000b      	movs	r3, r1
 800c246:	2100      	movs	r1, #0
 800c248:	42b5      	cmp	r5, r6
 800c24a:	d901      	bls.n	800c250 <__b2d+0x88>
 800c24c:	3d04      	subs	r5, #4
 800c24e:	6829      	ldr	r1, [r5, #0]
 800c250:	4664      	mov	r4, ip
 800c252:	40c1      	lsrs	r1, r0
 800c254:	40a7      	lsls	r7, r4
 800c256:	430f      	orrs	r7, r1
 800c258:	003a      	movs	r2, r7
 800c25a:	e7db      	b.n	800c214 <__b2d+0x4c>
 800c25c:	4321      	orrs	r1, r4
 800c25e:	000b      	movs	r3, r1
 800c260:	e7fa      	b.n	800c258 <__b2d+0x90>
 800c262:	46c0      	nop			; (mov r8, r8)
 800c264:	3ff00000 	.word	0x3ff00000

0800c268 <__d2b>:
 800c268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c26a:	2101      	movs	r1, #1
 800c26c:	0014      	movs	r4, r2
 800c26e:	001e      	movs	r6, r3
 800c270:	9f08      	ldr	r7, [sp, #32]
 800c272:	f7ff fc01 	bl	800ba78 <_Balloc>
 800c276:	1e05      	subs	r5, r0, #0
 800c278:	d105      	bne.n	800c286 <__d2b+0x1e>
 800c27a:	0002      	movs	r2, r0
 800c27c:	4b26      	ldr	r3, [pc, #152]	; (800c318 <__d2b+0xb0>)
 800c27e:	4927      	ldr	r1, [pc, #156]	; (800c31c <__d2b+0xb4>)
 800c280:	4827      	ldr	r0, [pc, #156]	; (800c320 <__d2b+0xb8>)
 800c282:	f000 fa77 	bl	800c774 <__assert_func>
 800c286:	0333      	lsls	r3, r6, #12
 800c288:	0076      	lsls	r6, r6, #1
 800c28a:	0b1b      	lsrs	r3, r3, #12
 800c28c:	0d76      	lsrs	r6, r6, #21
 800c28e:	d124      	bne.n	800c2da <__d2b+0x72>
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	2c00      	cmp	r4, #0
 800c294:	d027      	beq.n	800c2e6 <__d2b+0x7e>
 800c296:	4668      	mov	r0, sp
 800c298:	9400      	str	r4, [sp, #0]
 800c29a:	f7ff fcff 	bl	800bc9c <__lo0bits>
 800c29e:	9c00      	ldr	r4, [sp, #0]
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d01e      	beq.n	800c2e2 <__d2b+0x7a>
 800c2a4:	9b01      	ldr	r3, [sp, #4]
 800c2a6:	2120      	movs	r1, #32
 800c2a8:	001a      	movs	r2, r3
 800c2aa:	1a09      	subs	r1, r1, r0
 800c2ac:	408a      	lsls	r2, r1
 800c2ae:	40c3      	lsrs	r3, r0
 800c2b0:	4322      	orrs	r2, r4
 800c2b2:	616a      	str	r2, [r5, #20]
 800c2b4:	9301      	str	r3, [sp, #4]
 800c2b6:	9c01      	ldr	r4, [sp, #4]
 800c2b8:	61ac      	str	r4, [r5, #24]
 800c2ba:	1e63      	subs	r3, r4, #1
 800c2bc:	419c      	sbcs	r4, r3
 800c2be:	3401      	adds	r4, #1
 800c2c0:	612c      	str	r4, [r5, #16]
 800c2c2:	2e00      	cmp	r6, #0
 800c2c4:	d018      	beq.n	800c2f8 <__d2b+0x90>
 800c2c6:	4b17      	ldr	r3, [pc, #92]	; (800c324 <__d2b+0xbc>)
 800c2c8:	18f6      	adds	r6, r6, r3
 800c2ca:	2335      	movs	r3, #53	; 0x35
 800c2cc:	1836      	adds	r6, r6, r0
 800c2ce:	1a18      	subs	r0, r3, r0
 800c2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2d2:	603e      	str	r6, [r7, #0]
 800c2d4:	6018      	str	r0, [r3, #0]
 800c2d6:	0028      	movs	r0, r5
 800c2d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c2da:	2280      	movs	r2, #128	; 0x80
 800c2dc:	0352      	lsls	r2, r2, #13
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	e7d6      	b.n	800c290 <__d2b+0x28>
 800c2e2:	616c      	str	r4, [r5, #20]
 800c2e4:	e7e7      	b.n	800c2b6 <__d2b+0x4e>
 800c2e6:	a801      	add	r0, sp, #4
 800c2e8:	f7ff fcd8 	bl	800bc9c <__lo0bits>
 800c2ec:	2401      	movs	r4, #1
 800c2ee:	9b01      	ldr	r3, [sp, #4]
 800c2f0:	612c      	str	r4, [r5, #16]
 800c2f2:	616b      	str	r3, [r5, #20]
 800c2f4:	3020      	adds	r0, #32
 800c2f6:	e7e4      	b.n	800c2c2 <__d2b+0x5a>
 800c2f8:	4b0b      	ldr	r3, [pc, #44]	; (800c328 <__d2b+0xc0>)
 800c2fa:	18c0      	adds	r0, r0, r3
 800c2fc:	4b0b      	ldr	r3, [pc, #44]	; (800c32c <__d2b+0xc4>)
 800c2fe:	6038      	str	r0, [r7, #0]
 800c300:	18e3      	adds	r3, r4, r3
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	18eb      	adds	r3, r5, r3
 800c306:	6958      	ldr	r0, [r3, #20]
 800c308:	f7ff fcae 	bl	800bc68 <__hi0bits>
 800c30c:	0164      	lsls	r4, r4, #5
 800c30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c310:	1a24      	subs	r4, r4, r0
 800c312:	601c      	str	r4, [r3, #0]
 800c314:	e7df      	b.n	800c2d6 <__d2b+0x6e>
 800c316:	46c0      	nop			; (mov r8, r8)
 800c318:	0800d777 	.word	0x0800d777
 800c31c:	0000030a 	.word	0x0000030a
 800c320:	0800d804 	.word	0x0800d804
 800c324:	fffffbcd 	.word	0xfffffbcd
 800c328:	fffffbce 	.word	0xfffffbce
 800c32c:	3fffffff 	.word	0x3fffffff

0800c330 <__ratio>:
 800c330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c332:	b087      	sub	sp, #28
 800c334:	000f      	movs	r7, r1
 800c336:	a904      	add	r1, sp, #16
 800c338:	0006      	movs	r6, r0
 800c33a:	f7ff ff45 	bl	800c1c8 <__b2d>
 800c33e:	9000      	str	r0, [sp, #0]
 800c340:	9101      	str	r1, [sp, #4]
 800c342:	9c00      	ldr	r4, [sp, #0]
 800c344:	9d01      	ldr	r5, [sp, #4]
 800c346:	0038      	movs	r0, r7
 800c348:	a905      	add	r1, sp, #20
 800c34a:	f7ff ff3d 	bl	800c1c8 <__b2d>
 800c34e:	9002      	str	r0, [sp, #8]
 800c350:	9103      	str	r1, [sp, #12]
 800c352:	9a02      	ldr	r2, [sp, #8]
 800c354:	9b03      	ldr	r3, [sp, #12]
 800c356:	6931      	ldr	r1, [r6, #16]
 800c358:	6938      	ldr	r0, [r7, #16]
 800c35a:	9e05      	ldr	r6, [sp, #20]
 800c35c:	1a08      	subs	r0, r1, r0
 800c35e:	9904      	ldr	r1, [sp, #16]
 800c360:	0140      	lsls	r0, r0, #5
 800c362:	1b89      	subs	r1, r1, r6
 800c364:	1841      	adds	r1, r0, r1
 800c366:	0508      	lsls	r0, r1, #20
 800c368:	2900      	cmp	r1, #0
 800c36a:	dd07      	ble.n	800c37c <__ratio+0x4c>
 800c36c:	9901      	ldr	r1, [sp, #4]
 800c36e:	1845      	adds	r5, r0, r1
 800c370:	0020      	movs	r0, r4
 800c372:	0029      	movs	r1, r5
 800c374:	f7f5 fa36 	bl	80017e4 <__aeabi_ddiv>
 800c378:	b007      	add	sp, #28
 800c37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c37c:	9903      	ldr	r1, [sp, #12]
 800c37e:	1a0b      	subs	r3, r1, r0
 800c380:	e7f6      	b.n	800c370 <__ratio+0x40>

0800c382 <__copybits>:
 800c382:	b570      	push	{r4, r5, r6, lr}
 800c384:	0014      	movs	r4, r2
 800c386:	0005      	movs	r5, r0
 800c388:	3901      	subs	r1, #1
 800c38a:	6913      	ldr	r3, [r2, #16]
 800c38c:	1149      	asrs	r1, r1, #5
 800c38e:	3101      	adds	r1, #1
 800c390:	0089      	lsls	r1, r1, #2
 800c392:	3414      	adds	r4, #20
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	1841      	adds	r1, r0, r1
 800c398:	18e3      	adds	r3, r4, r3
 800c39a:	42a3      	cmp	r3, r4
 800c39c:	d80d      	bhi.n	800c3ba <__copybits+0x38>
 800c39e:	0014      	movs	r4, r2
 800c3a0:	3411      	adds	r4, #17
 800c3a2:	2500      	movs	r5, #0
 800c3a4:	429c      	cmp	r4, r3
 800c3a6:	d803      	bhi.n	800c3b0 <__copybits+0x2e>
 800c3a8:	1a9b      	subs	r3, r3, r2
 800c3aa:	3b11      	subs	r3, #17
 800c3ac:	089b      	lsrs	r3, r3, #2
 800c3ae:	009d      	lsls	r5, r3, #2
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	1940      	adds	r0, r0, r5
 800c3b4:	4281      	cmp	r1, r0
 800c3b6:	d803      	bhi.n	800c3c0 <__copybits+0x3e>
 800c3b8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ba:	cc40      	ldmia	r4!, {r6}
 800c3bc:	c540      	stmia	r5!, {r6}
 800c3be:	e7ec      	b.n	800c39a <__copybits+0x18>
 800c3c0:	c008      	stmia	r0!, {r3}
 800c3c2:	e7f7      	b.n	800c3b4 <__copybits+0x32>

0800c3c4 <__any_on>:
 800c3c4:	0002      	movs	r2, r0
 800c3c6:	6900      	ldr	r0, [r0, #16]
 800c3c8:	b510      	push	{r4, lr}
 800c3ca:	3214      	adds	r2, #20
 800c3cc:	114b      	asrs	r3, r1, #5
 800c3ce:	4298      	cmp	r0, r3
 800c3d0:	db13      	blt.n	800c3fa <__any_on+0x36>
 800c3d2:	dd0c      	ble.n	800c3ee <__any_on+0x2a>
 800c3d4:	241f      	movs	r4, #31
 800c3d6:	0008      	movs	r0, r1
 800c3d8:	4020      	ands	r0, r4
 800c3da:	4221      	tst	r1, r4
 800c3dc:	d007      	beq.n	800c3ee <__any_on+0x2a>
 800c3de:	0099      	lsls	r1, r3, #2
 800c3e0:	588c      	ldr	r4, [r1, r2]
 800c3e2:	0021      	movs	r1, r4
 800c3e4:	40c1      	lsrs	r1, r0
 800c3e6:	4081      	lsls	r1, r0
 800c3e8:	2001      	movs	r0, #1
 800c3ea:	428c      	cmp	r4, r1
 800c3ec:	d104      	bne.n	800c3f8 <__any_on+0x34>
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	18d3      	adds	r3, r2, r3
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d803      	bhi.n	800c3fe <__any_on+0x3a>
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	bd10      	pop	{r4, pc}
 800c3fa:	0003      	movs	r3, r0
 800c3fc:	e7f7      	b.n	800c3ee <__any_on+0x2a>
 800c3fe:	3b04      	subs	r3, #4
 800c400:	6819      	ldr	r1, [r3, #0]
 800c402:	2900      	cmp	r1, #0
 800c404:	d0f5      	beq.n	800c3f2 <__any_on+0x2e>
 800c406:	2001      	movs	r0, #1
 800c408:	e7f6      	b.n	800c3f8 <__any_on+0x34>

0800c40a <_calloc_r>:
 800c40a:	b570      	push	{r4, r5, r6, lr}
 800c40c:	0c13      	lsrs	r3, r2, #16
 800c40e:	0c0d      	lsrs	r5, r1, #16
 800c410:	d11e      	bne.n	800c450 <_calloc_r+0x46>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10c      	bne.n	800c430 <_calloc_r+0x26>
 800c416:	b289      	uxth	r1, r1
 800c418:	b294      	uxth	r4, r2
 800c41a:	434c      	muls	r4, r1
 800c41c:	0021      	movs	r1, r4
 800c41e:	f7fc faeb 	bl	80089f8 <_malloc_r>
 800c422:	1e05      	subs	r5, r0, #0
 800c424:	d01b      	beq.n	800c45e <_calloc_r+0x54>
 800c426:	0022      	movs	r2, r4
 800c428:	2100      	movs	r1, #0
 800c42a:	f7fc fa70 	bl	800890e <memset>
 800c42e:	e016      	b.n	800c45e <_calloc_r+0x54>
 800c430:	1c1d      	adds	r5, r3, #0
 800c432:	1c0b      	adds	r3, r1, #0
 800c434:	b292      	uxth	r2, r2
 800c436:	b289      	uxth	r1, r1
 800c438:	b29c      	uxth	r4, r3
 800c43a:	4351      	muls	r1, r2
 800c43c:	b2ab      	uxth	r3, r5
 800c43e:	4363      	muls	r3, r4
 800c440:	0c0c      	lsrs	r4, r1, #16
 800c442:	191c      	adds	r4, r3, r4
 800c444:	0c22      	lsrs	r2, r4, #16
 800c446:	d107      	bne.n	800c458 <_calloc_r+0x4e>
 800c448:	0424      	lsls	r4, r4, #16
 800c44a:	b289      	uxth	r1, r1
 800c44c:	430c      	orrs	r4, r1
 800c44e:	e7e5      	b.n	800c41c <_calloc_r+0x12>
 800c450:	2b00      	cmp	r3, #0
 800c452:	d101      	bne.n	800c458 <_calloc_r+0x4e>
 800c454:	1c13      	adds	r3, r2, #0
 800c456:	e7ed      	b.n	800c434 <_calloc_r+0x2a>
 800c458:	230c      	movs	r3, #12
 800c45a:	2500      	movs	r5, #0
 800c45c:	6003      	str	r3, [r0, #0]
 800c45e:	0028      	movs	r0, r5
 800c460:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c464 <__ssputs_r>:
 800c464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c466:	688e      	ldr	r6, [r1, #8]
 800c468:	b085      	sub	sp, #20
 800c46a:	0007      	movs	r7, r0
 800c46c:	000c      	movs	r4, r1
 800c46e:	9203      	str	r2, [sp, #12]
 800c470:	9301      	str	r3, [sp, #4]
 800c472:	429e      	cmp	r6, r3
 800c474:	d83c      	bhi.n	800c4f0 <__ssputs_r+0x8c>
 800c476:	2390      	movs	r3, #144	; 0x90
 800c478:	898a      	ldrh	r2, [r1, #12]
 800c47a:	00db      	lsls	r3, r3, #3
 800c47c:	421a      	tst	r2, r3
 800c47e:	d034      	beq.n	800c4ea <__ssputs_r+0x86>
 800c480:	6909      	ldr	r1, [r1, #16]
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	6960      	ldr	r0, [r4, #20]
 800c486:	1a5b      	subs	r3, r3, r1
 800c488:	9302      	str	r3, [sp, #8]
 800c48a:	2303      	movs	r3, #3
 800c48c:	4343      	muls	r3, r0
 800c48e:	0fdd      	lsrs	r5, r3, #31
 800c490:	18ed      	adds	r5, r5, r3
 800c492:	9b01      	ldr	r3, [sp, #4]
 800c494:	9802      	ldr	r0, [sp, #8]
 800c496:	3301      	adds	r3, #1
 800c498:	181b      	adds	r3, r3, r0
 800c49a:	106d      	asrs	r5, r5, #1
 800c49c:	42ab      	cmp	r3, r5
 800c49e:	d900      	bls.n	800c4a2 <__ssputs_r+0x3e>
 800c4a0:	001d      	movs	r5, r3
 800c4a2:	0553      	lsls	r3, r2, #21
 800c4a4:	d532      	bpl.n	800c50c <__ssputs_r+0xa8>
 800c4a6:	0029      	movs	r1, r5
 800c4a8:	0038      	movs	r0, r7
 800c4aa:	f7fc faa5 	bl	80089f8 <_malloc_r>
 800c4ae:	1e06      	subs	r6, r0, #0
 800c4b0:	d109      	bne.n	800c4c6 <__ssputs_r+0x62>
 800c4b2:	230c      	movs	r3, #12
 800c4b4:	603b      	str	r3, [r7, #0]
 800c4b6:	2340      	movs	r3, #64	; 0x40
 800c4b8:	2001      	movs	r0, #1
 800c4ba:	89a2      	ldrh	r2, [r4, #12]
 800c4bc:	4240      	negs	r0, r0
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	81a3      	strh	r3, [r4, #12]
 800c4c2:	b005      	add	sp, #20
 800c4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c6:	9a02      	ldr	r2, [sp, #8]
 800c4c8:	6921      	ldr	r1, [r4, #16]
 800c4ca:	f7fc fa17 	bl	80088fc <memcpy>
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	4a14      	ldr	r2, [pc, #80]	; (800c524 <__ssputs_r+0xc0>)
 800c4d2:	401a      	ands	r2, r3
 800c4d4:	2380      	movs	r3, #128	; 0x80
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	81a3      	strh	r3, [r4, #12]
 800c4da:	9b02      	ldr	r3, [sp, #8]
 800c4dc:	6126      	str	r6, [r4, #16]
 800c4de:	18f6      	adds	r6, r6, r3
 800c4e0:	6026      	str	r6, [r4, #0]
 800c4e2:	6165      	str	r5, [r4, #20]
 800c4e4:	9e01      	ldr	r6, [sp, #4]
 800c4e6:	1aed      	subs	r5, r5, r3
 800c4e8:	60a5      	str	r5, [r4, #8]
 800c4ea:	9b01      	ldr	r3, [sp, #4]
 800c4ec:	429e      	cmp	r6, r3
 800c4ee:	d900      	bls.n	800c4f2 <__ssputs_r+0x8e>
 800c4f0:	9e01      	ldr	r6, [sp, #4]
 800c4f2:	0032      	movs	r2, r6
 800c4f4:	9903      	ldr	r1, [sp, #12]
 800c4f6:	6820      	ldr	r0, [r4, #0]
 800c4f8:	f000 f96d 	bl	800c7d6 <memmove>
 800c4fc:	68a3      	ldr	r3, [r4, #8]
 800c4fe:	2000      	movs	r0, #0
 800c500:	1b9b      	subs	r3, r3, r6
 800c502:	60a3      	str	r3, [r4, #8]
 800c504:	6823      	ldr	r3, [r4, #0]
 800c506:	199e      	adds	r6, r3, r6
 800c508:	6026      	str	r6, [r4, #0]
 800c50a:	e7da      	b.n	800c4c2 <__ssputs_r+0x5e>
 800c50c:	002a      	movs	r2, r5
 800c50e:	0038      	movs	r0, r7
 800c510:	f000 f974 	bl	800c7fc <_realloc_r>
 800c514:	1e06      	subs	r6, r0, #0
 800c516:	d1e0      	bne.n	800c4da <__ssputs_r+0x76>
 800c518:	0038      	movs	r0, r7
 800c51a:	6921      	ldr	r1, [r4, #16]
 800c51c:	f7fc fa00 	bl	8008920 <_free_r>
 800c520:	e7c7      	b.n	800c4b2 <__ssputs_r+0x4e>
 800c522:	46c0      	nop			; (mov r8, r8)
 800c524:	fffffb7f 	.word	0xfffffb7f

0800c528 <_svfiprintf_r>:
 800c528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c52a:	b0a1      	sub	sp, #132	; 0x84
 800c52c:	9003      	str	r0, [sp, #12]
 800c52e:	001d      	movs	r5, r3
 800c530:	898b      	ldrh	r3, [r1, #12]
 800c532:	000f      	movs	r7, r1
 800c534:	0016      	movs	r6, r2
 800c536:	061b      	lsls	r3, r3, #24
 800c538:	d511      	bpl.n	800c55e <_svfiprintf_r+0x36>
 800c53a:	690b      	ldr	r3, [r1, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10e      	bne.n	800c55e <_svfiprintf_r+0x36>
 800c540:	2140      	movs	r1, #64	; 0x40
 800c542:	f7fc fa59 	bl	80089f8 <_malloc_r>
 800c546:	6038      	str	r0, [r7, #0]
 800c548:	6138      	str	r0, [r7, #16]
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d105      	bne.n	800c55a <_svfiprintf_r+0x32>
 800c54e:	230c      	movs	r3, #12
 800c550:	9a03      	ldr	r2, [sp, #12]
 800c552:	3801      	subs	r0, #1
 800c554:	6013      	str	r3, [r2, #0]
 800c556:	b021      	add	sp, #132	; 0x84
 800c558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c55a:	2340      	movs	r3, #64	; 0x40
 800c55c:	617b      	str	r3, [r7, #20]
 800c55e:	2300      	movs	r3, #0
 800c560:	ac08      	add	r4, sp, #32
 800c562:	6163      	str	r3, [r4, #20]
 800c564:	3320      	adds	r3, #32
 800c566:	7663      	strb	r3, [r4, #25]
 800c568:	3310      	adds	r3, #16
 800c56a:	76a3      	strb	r3, [r4, #26]
 800c56c:	9507      	str	r5, [sp, #28]
 800c56e:	0035      	movs	r5, r6
 800c570:	782b      	ldrb	r3, [r5, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d001      	beq.n	800c57a <_svfiprintf_r+0x52>
 800c576:	2b25      	cmp	r3, #37	; 0x25
 800c578:	d147      	bne.n	800c60a <_svfiprintf_r+0xe2>
 800c57a:	1bab      	subs	r3, r5, r6
 800c57c:	9305      	str	r3, [sp, #20]
 800c57e:	42b5      	cmp	r5, r6
 800c580:	d00c      	beq.n	800c59c <_svfiprintf_r+0x74>
 800c582:	0032      	movs	r2, r6
 800c584:	0039      	movs	r1, r7
 800c586:	9803      	ldr	r0, [sp, #12]
 800c588:	f7ff ff6c 	bl	800c464 <__ssputs_r>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	d100      	bne.n	800c592 <_svfiprintf_r+0x6a>
 800c590:	e0ae      	b.n	800c6f0 <_svfiprintf_r+0x1c8>
 800c592:	6962      	ldr	r2, [r4, #20]
 800c594:	9b05      	ldr	r3, [sp, #20]
 800c596:	4694      	mov	ip, r2
 800c598:	4463      	add	r3, ip
 800c59a:	6163      	str	r3, [r4, #20]
 800c59c:	782b      	ldrb	r3, [r5, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d100      	bne.n	800c5a4 <_svfiprintf_r+0x7c>
 800c5a2:	e0a5      	b.n	800c6f0 <_svfiprintf_r+0x1c8>
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	4252      	negs	r2, r2
 800c5aa:	6062      	str	r2, [r4, #4]
 800c5ac:	a904      	add	r1, sp, #16
 800c5ae:	3254      	adds	r2, #84	; 0x54
 800c5b0:	1852      	adds	r2, r2, r1
 800c5b2:	1c6e      	adds	r6, r5, #1
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	60e3      	str	r3, [r4, #12]
 800c5b8:	60a3      	str	r3, [r4, #8]
 800c5ba:	7013      	strb	r3, [r2, #0]
 800c5bc:	65a3      	str	r3, [r4, #88]	; 0x58
 800c5be:	2205      	movs	r2, #5
 800c5c0:	7831      	ldrb	r1, [r6, #0]
 800c5c2:	4854      	ldr	r0, [pc, #336]	; (800c714 <_svfiprintf_r+0x1ec>)
 800c5c4:	f7ff fa3c 	bl	800ba40 <memchr>
 800c5c8:	1c75      	adds	r5, r6, #1
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d11f      	bne.n	800c60e <_svfiprintf_r+0xe6>
 800c5ce:	6822      	ldr	r2, [r4, #0]
 800c5d0:	06d3      	lsls	r3, r2, #27
 800c5d2:	d504      	bpl.n	800c5de <_svfiprintf_r+0xb6>
 800c5d4:	2353      	movs	r3, #83	; 0x53
 800c5d6:	a904      	add	r1, sp, #16
 800c5d8:	185b      	adds	r3, r3, r1
 800c5da:	2120      	movs	r1, #32
 800c5dc:	7019      	strb	r1, [r3, #0]
 800c5de:	0713      	lsls	r3, r2, #28
 800c5e0:	d504      	bpl.n	800c5ec <_svfiprintf_r+0xc4>
 800c5e2:	2353      	movs	r3, #83	; 0x53
 800c5e4:	a904      	add	r1, sp, #16
 800c5e6:	185b      	adds	r3, r3, r1
 800c5e8:	212b      	movs	r1, #43	; 0x2b
 800c5ea:	7019      	strb	r1, [r3, #0]
 800c5ec:	7833      	ldrb	r3, [r6, #0]
 800c5ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c5f0:	d016      	beq.n	800c620 <_svfiprintf_r+0xf8>
 800c5f2:	0035      	movs	r5, r6
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	200a      	movs	r0, #10
 800c5f8:	68e3      	ldr	r3, [r4, #12]
 800c5fa:	782a      	ldrb	r2, [r5, #0]
 800c5fc:	1c6e      	adds	r6, r5, #1
 800c5fe:	3a30      	subs	r2, #48	; 0x30
 800c600:	2a09      	cmp	r2, #9
 800c602:	d94e      	bls.n	800c6a2 <_svfiprintf_r+0x17a>
 800c604:	2900      	cmp	r1, #0
 800c606:	d111      	bne.n	800c62c <_svfiprintf_r+0x104>
 800c608:	e017      	b.n	800c63a <_svfiprintf_r+0x112>
 800c60a:	3501      	adds	r5, #1
 800c60c:	e7b0      	b.n	800c570 <_svfiprintf_r+0x48>
 800c60e:	4b41      	ldr	r3, [pc, #260]	; (800c714 <_svfiprintf_r+0x1ec>)
 800c610:	6822      	ldr	r2, [r4, #0]
 800c612:	1ac0      	subs	r0, r0, r3
 800c614:	2301      	movs	r3, #1
 800c616:	4083      	lsls	r3, r0
 800c618:	4313      	orrs	r3, r2
 800c61a:	002e      	movs	r6, r5
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	e7ce      	b.n	800c5be <_svfiprintf_r+0x96>
 800c620:	9b07      	ldr	r3, [sp, #28]
 800c622:	1d19      	adds	r1, r3, #4
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	9107      	str	r1, [sp, #28]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	db01      	blt.n	800c630 <_svfiprintf_r+0x108>
 800c62c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c62e:	e004      	b.n	800c63a <_svfiprintf_r+0x112>
 800c630:	425b      	negs	r3, r3
 800c632:	60e3      	str	r3, [r4, #12]
 800c634:	2302      	movs	r3, #2
 800c636:	4313      	orrs	r3, r2
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	782b      	ldrb	r3, [r5, #0]
 800c63c:	2b2e      	cmp	r3, #46	; 0x2e
 800c63e:	d10a      	bne.n	800c656 <_svfiprintf_r+0x12e>
 800c640:	786b      	ldrb	r3, [r5, #1]
 800c642:	2b2a      	cmp	r3, #42	; 0x2a
 800c644:	d135      	bne.n	800c6b2 <_svfiprintf_r+0x18a>
 800c646:	9b07      	ldr	r3, [sp, #28]
 800c648:	3502      	adds	r5, #2
 800c64a:	1d1a      	adds	r2, r3, #4
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	9207      	str	r2, [sp, #28]
 800c650:	2b00      	cmp	r3, #0
 800c652:	db2b      	blt.n	800c6ac <_svfiprintf_r+0x184>
 800c654:	9309      	str	r3, [sp, #36]	; 0x24
 800c656:	4e30      	ldr	r6, [pc, #192]	; (800c718 <_svfiprintf_r+0x1f0>)
 800c658:	2203      	movs	r2, #3
 800c65a:	0030      	movs	r0, r6
 800c65c:	7829      	ldrb	r1, [r5, #0]
 800c65e:	f7ff f9ef 	bl	800ba40 <memchr>
 800c662:	2800      	cmp	r0, #0
 800c664:	d006      	beq.n	800c674 <_svfiprintf_r+0x14c>
 800c666:	2340      	movs	r3, #64	; 0x40
 800c668:	1b80      	subs	r0, r0, r6
 800c66a:	4083      	lsls	r3, r0
 800c66c:	6822      	ldr	r2, [r4, #0]
 800c66e:	3501      	adds	r5, #1
 800c670:	4313      	orrs	r3, r2
 800c672:	6023      	str	r3, [r4, #0]
 800c674:	7829      	ldrb	r1, [r5, #0]
 800c676:	2206      	movs	r2, #6
 800c678:	4828      	ldr	r0, [pc, #160]	; (800c71c <_svfiprintf_r+0x1f4>)
 800c67a:	1c6e      	adds	r6, r5, #1
 800c67c:	7621      	strb	r1, [r4, #24]
 800c67e:	f7ff f9df 	bl	800ba40 <memchr>
 800c682:	2800      	cmp	r0, #0
 800c684:	d03c      	beq.n	800c700 <_svfiprintf_r+0x1d8>
 800c686:	4b26      	ldr	r3, [pc, #152]	; (800c720 <_svfiprintf_r+0x1f8>)
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d125      	bne.n	800c6d8 <_svfiprintf_r+0x1b0>
 800c68c:	2207      	movs	r2, #7
 800c68e:	9b07      	ldr	r3, [sp, #28]
 800c690:	3307      	adds	r3, #7
 800c692:	4393      	bics	r3, r2
 800c694:	3308      	adds	r3, #8
 800c696:	9307      	str	r3, [sp, #28]
 800c698:	6963      	ldr	r3, [r4, #20]
 800c69a:	9a04      	ldr	r2, [sp, #16]
 800c69c:	189b      	adds	r3, r3, r2
 800c69e:	6163      	str	r3, [r4, #20]
 800c6a0:	e765      	b.n	800c56e <_svfiprintf_r+0x46>
 800c6a2:	4343      	muls	r3, r0
 800c6a4:	0035      	movs	r5, r6
 800c6a6:	2101      	movs	r1, #1
 800c6a8:	189b      	adds	r3, r3, r2
 800c6aa:	e7a6      	b.n	800c5fa <_svfiprintf_r+0xd2>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	425b      	negs	r3, r3
 800c6b0:	e7d0      	b.n	800c654 <_svfiprintf_r+0x12c>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	200a      	movs	r0, #10
 800c6b6:	001a      	movs	r2, r3
 800c6b8:	3501      	adds	r5, #1
 800c6ba:	6063      	str	r3, [r4, #4]
 800c6bc:	7829      	ldrb	r1, [r5, #0]
 800c6be:	1c6e      	adds	r6, r5, #1
 800c6c0:	3930      	subs	r1, #48	; 0x30
 800c6c2:	2909      	cmp	r1, #9
 800c6c4:	d903      	bls.n	800c6ce <_svfiprintf_r+0x1a6>
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d0c5      	beq.n	800c656 <_svfiprintf_r+0x12e>
 800c6ca:	9209      	str	r2, [sp, #36]	; 0x24
 800c6cc:	e7c3      	b.n	800c656 <_svfiprintf_r+0x12e>
 800c6ce:	4342      	muls	r2, r0
 800c6d0:	0035      	movs	r5, r6
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	1852      	adds	r2, r2, r1
 800c6d6:	e7f1      	b.n	800c6bc <_svfiprintf_r+0x194>
 800c6d8:	ab07      	add	r3, sp, #28
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	003a      	movs	r2, r7
 800c6de:	0021      	movs	r1, r4
 800c6e0:	4b10      	ldr	r3, [pc, #64]	; (800c724 <_svfiprintf_r+0x1fc>)
 800c6e2:	9803      	ldr	r0, [sp, #12]
 800c6e4:	f7fc faa8 	bl	8008c38 <_printf_float>
 800c6e8:	9004      	str	r0, [sp, #16]
 800c6ea:	9b04      	ldr	r3, [sp, #16]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	d1d3      	bne.n	800c698 <_svfiprintf_r+0x170>
 800c6f0:	89bb      	ldrh	r3, [r7, #12]
 800c6f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c6f4:	065b      	lsls	r3, r3, #25
 800c6f6:	d400      	bmi.n	800c6fa <_svfiprintf_r+0x1d2>
 800c6f8:	e72d      	b.n	800c556 <_svfiprintf_r+0x2e>
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	4240      	negs	r0, r0
 800c6fe:	e72a      	b.n	800c556 <_svfiprintf_r+0x2e>
 800c700:	ab07      	add	r3, sp, #28
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	003a      	movs	r2, r7
 800c706:	0021      	movs	r1, r4
 800c708:	4b06      	ldr	r3, [pc, #24]	; (800c724 <_svfiprintf_r+0x1fc>)
 800c70a:	9803      	ldr	r0, [sp, #12]
 800c70c:	f7fc fd46 	bl	800919c <_printf_i>
 800c710:	e7ea      	b.n	800c6e8 <_svfiprintf_r+0x1c0>
 800c712:	46c0      	nop			; (mov r8, r8)
 800c714:	0800d95c 	.word	0x0800d95c
 800c718:	0800d962 	.word	0x0800d962
 800c71c:	0800d966 	.word	0x0800d966
 800c720:	08008c39 	.word	0x08008c39
 800c724:	0800c465 	.word	0x0800c465

0800c728 <nan>:
 800c728:	2000      	movs	r0, #0
 800c72a:	4901      	ldr	r1, [pc, #4]	; (800c730 <nan+0x8>)
 800c72c:	4770      	bx	lr
 800c72e:	46c0      	nop			; (mov r8, r8)
 800c730:	7ff80000 	.word	0x7ff80000

0800c734 <strncmp>:
 800c734:	b530      	push	{r4, r5, lr}
 800c736:	0005      	movs	r5, r0
 800c738:	1e10      	subs	r0, r2, #0
 800c73a:	d008      	beq.n	800c74e <strncmp+0x1a>
 800c73c:	2400      	movs	r4, #0
 800c73e:	3a01      	subs	r2, #1
 800c740:	5d2b      	ldrb	r3, [r5, r4]
 800c742:	5d08      	ldrb	r0, [r1, r4]
 800c744:	4283      	cmp	r3, r0
 800c746:	d101      	bne.n	800c74c <strncmp+0x18>
 800c748:	4294      	cmp	r4, r2
 800c74a:	d101      	bne.n	800c750 <strncmp+0x1c>
 800c74c:	1a18      	subs	r0, r3, r0
 800c74e:	bd30      	pop	{r4, r5, pc}
 800c750:	3401      	adds	r4, #1
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f4      	bne.n	800c740 <strncmp+0xc>
 800c756:	e7f9      	b.n	800c74c <strncmp+0x18>

0800c758 <__ascii_wctomb>:
 800c758:	0003      	movs	r3, r0
 800c75a:	1e08      	subs	r0, r1, #0
 800c75c:	d005      	beq.n	800c76a <__ascii_wctomb+0x12>
 800c75e:	2aff      	cmp	r2, #255	; 0xff
 800c760:	d904      	bls.n	800c76c <__ascii_wctomb+0x14>
 800c762:	228a      	movs	r2, #138	; 0x8a
 800c764:	2001      	movs	r0, #1
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	4240      	negs	r0, r0
 800c76a:	4770      	bx	lr
 800c76c:	2001      	movs	r0, #1
 800c76e:	700a      	strb	r2, [r1, #0]
 800c770:	e7fb      	b.n	800c76a <__ascii_wctomb+0x12>
	...

0800c774 <__assert_func>:
 800c774:	b530      	push	{r4, r5, lr}
 800c776:	0014      	movs	r4, r2
 800c778:	001a      	movs	r2, r3
 800c77a:	4b09      	ldr	r3, [pc, #36]	; (800c7a0 <__assert_func+0x2c>)
 800c77c:	0005      	movs	r5, r0
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	b085      	sub	sp, #20
 800c782:	68d8      	ldr	r0, [r3, #12]
 800c784:	4b07      	ldr	r3, [pc, #28]	; (800c7a4 <__assert_func+0x30>)
 800c786:	2c00      	cmp	r4, #0
 800c788:	d101      	bne.n	800c78e <__assert_func+0x1a>
 800c78a:	4b07      	ldr	r3, [pc, #28]	; (800c7a8 <__assert_func+0x34>)
 800c78c:	001c      	movs	r4, r3
 800c78e:	9301      	str	r3, [sp, #4]
 800c790:	9100      	str	r1, [sp, #0]
 800c792:	002b      	movs	r3, r5
 800c794:	4905      	ldr	r1, [pc, #20]	; (800c7ac <__assert_func+0x38>)
 800c796:	9402      	str	r4, [sp, #8]
 800c798:	f000 f80a 	bl	800c7b0 <fiprintf>
 800c79c:	f000 fa8c 	bl	800ccb8 <abort>
 800c7a0:	2000000c 	.word	0x2000000c
 800c7a4:	0800d96d 	.word	0x0800d96d
 800c7a8:	0800d9a8 	.word	0x0800d9a8
 800c7ac:	0800d97a 	.word	0x0800d97a

0800c7b0 <fiprintf>:
 800c7b0:	b40e      	push	{r1, r2, r3}
 800c7b2:	b503      	push	{r0, r1, lr}
 800c7b4:	0001      	movs	r1, r0
 800c7b6:	ab03      	add	r3, sp, #12
 800c7b8:	4804      	ldr	r0, [pc, #16]	; (800c7cc <fiprintf+0x1c>)
 800c7ba:	cb04      	ldmia	r3!, {r2}
 800c7bc:	6800      	ldr	r0, [r0, #0]
 800c7be:	9301      	str	r3, [sp, #4]
 800c7c0:	f000 f872 	bl	800c8a8 <_vfiprintf_r>
 800c7c4:	b002      	add	sp, #8
 800c7c6:	bc08      	pop	{r3}
 800c7c8:	b003      	add	sp, #12
 800c7ca:	4718      	bx	r3
 800c7cc:	2000000c 	.word	0x2000000c

0800c7d0 <__retarget_lock_init_recursive>:
 800c7d0:	4770      	bx	lr

0800c7d2 <__retarget_lock_acquire_recursive>:
 800c7d2:	4770      	bx	lr

0800c7d4 <__retarget_lock_release_recursive>:
 800c7d4:	4770      	bx	lr

0800c7d6 <memmove>:
 800c7d6:	b510      	push	{r4, lr}
 800c7d8:	4288      	cmp	r0, r1
 800c7da:	d902      	bls.n	800c7e2 <memmove+0xc>
 800c7dc:	188b      	adds	r3, r1, r2
 800c7de:	4298      	cmp	r0, r3
 800c7e0:	d303      	bcc.n	800c7ea <memmove+0x14>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e007      	b.n	800c7f6 <memmove+0x20>
 800c7e6:	5c8b      	ldrb	r3, [r1, r2]
 800c7e8:	5483      	strb	r3, [r0, r2]
 800c7ea:	3a01      	subs	r2, #1
 800c7ec:	d2fb      	bcs.n	800c7e6 <memmove+0x10>
 800c7ee:	bd10      	pop	{r4, pc}
 800c7f0:	5ccc      	ldrb	r4, [r1, r3]
 800c7f2:	54c4      	strb	r4, [r0, r3]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d1fa      	bne.n	800c7f0 <memmove+0x1a>
 800c7fa:	e7f8      	b.n	800c7ee <memmove+0x18>

0800c7fc <_realloc_r>:
 800c7fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7fe:	0007      	movs	r7, r0
 800c800:	000e      	movs	r6, r1
 800c802:	0014      	movs	r4, r2
 800c804:	2900      	cmp	r1, #0
 800c806:	d105      	bne.n	800c814 <_realloc_r+0x18>
 800c808:	0011      	movs	r1, r2
 800c80a:	f7fc f8f5 	bl	80089f8 <_malloc_r>
 800c80e:	0005      	movs	r5, r0
 800c810:	0028      	movs	r0, r5
 800c812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c814:	2a00      	cmp	r2, #0
 800c816:	d103      	bne.n	800c820 <_realloc_r+0x24>
 800c818:	f7fc f882 	bl	8008920 <_free_r>
 800c81c:	0025      	movs	r5, r4
 800c81e:	e7f7      	b.n	800c810 <_realloc_r+0x14>
 800c820:	f000 fc8c 	bl	800d13c <_malloc_usable_size_r>
 800c824:	9001      	str	r0, [sp, #4]
 800c826:	4284      	cmp	r4, r0
 800c828:	d803      	bhi.n	800c832 <_realloc_r+0x36>
 800c82a:	0035      	movs	r5, r6
 800c82c:	0843      	lsrs	r3, r0, #1
 800c82e:	42a3      	cmp	r3, r4
 800c830:	d3ee      	bcc.n	800c810 <_realloc_r+0x14>
 800c832:	0021      	movs	r1, r4
 800c834:	0038      	movs	r0, r7
 800c836:	f7fc f8df 	bl	80089f8 <_malloc_r>
 800c83a:	1e05      	subs	r5, r0, #0
 800c83c:	d0e8      	beq.n	800c810 <_realloc_r+0x14>
 800c83e:	9b01      	ldr	r3, [sp, #4]
 800c840:	0022      	movs	r2, r4
 800c842:	429c      	cmp	r4, r3
 800c844:	d900      	bls.n	800c848 <_realloc_r+0x4c>
 800c846:	001a      	movs	r2, r3
 800c848:	0031      	movs	r1, r6
 800c84a:	0028      	movs	r0, r5
 800c84c:	f7fc f856 	bl	80088fc <memcpy>
 800c850:	0031      	movs	r1, r6
 800c852:	0038      	movs	r0, r7
 800c854:	f7fc f864 	bl	8008920 <_free_r>
 800c858:	e7da      	b.n	800c810 <_realloc_r+0x14>

0800c85a <__sfputc_r>:
 800c85a:	6893      	ldr	r3, [r2, #8]
 800c85c:	b510      	push	{r4, lr}
 800c85e:	3b01      	subs	r3, #1
 800c860:	6093      	str	r3, [r2, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	da04      	bge.n	800c870 <__sfputc_r+0x16>
 800c866:	6994      	ldr	r4, [r2, #24]
 800c868:	42a3      	cmp	r3, r4
 800c86a:	db07      	blt.n	800c87c <__sfputc_r+0x22>
 800c86c:	290a      	cmp	r1, #10
 800c86e:	d005      	beq.n	800c87c <__sfputc_r+0x22>
 800c870:	6813      	ldr	r3, [r2, #0]
 800c872:	1c58      	adds	r0, r3, #1
 800c874:	6010      	str	r0, [r2, #0]
 800c876:	7019      	strb	r1, [r3, #0]
 800c878:	0008      	movs	r0, r1
 800c87a:	bd10      	pop	{r4, pc}
 800c87c:	f000 f94e 	bl	800cb1c <__swbuf_r>
 800c880:	0001      	movs	r1, r0
 800c882:	e7f9      	b.n	800c878 <__sfputc_r+0x1e>

0800c884 <__sfputs_r>:
 800c884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c886:	0006      	movs	r6, r0
 800c888:	000f      	movs	r7, r1
 800c88a:	0014      	movs	r4, r2
 800c88c:	18d5      	adds	r5, r2, r3
 800c88e:	42ac      	cmp	r4, r5
 800c890:	d101      	bne.n	800c896 <__sfputs_r+0x12>
 800c892:	2000      	movs	r0, #0
 800c894:	e007      	b.n	800c8a6 <__sfputs_r+0x22>
 800c896:	7821      	ldrb	r1, [r4, #0]
 800c898:	003a      	movs	r2, r7
 800c89a:	0030      	movs	r0, r6
 800c89c:	f7ff ffdd 	bl	800c85a <__sfputc_r>
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	1c43      	adds	r3, r0, #1
 800c8a4:	d1f3      	bne.n	800c88e <__sfputs_r+0xa>
 800c8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c8a8 <_vfiprintf_r>:
 800c8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8aa:	b0a1      	sub	sp, #132	; 0x84
 800c8ac:	0006      	movs	r6, r0
 800c8ae:	000c      	movs	r4, r1
 800c8b0:	001f      	movs	r7, r3
 800c8b2:	9203      	str	r2, [sp, #12]
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d004      	beq.n	800c8c2 <_vfiprintf_r+0x1a>
 800c8b8:	6983      	ldr	r3, [r0, #24]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <_vfiprintf_r+0x1a>
 800c8be:	f000 fb31 	bl	800cf24 <__sinit>
 800c8c2:	4b8e      	ldr	r3, [pc, #568]	; (800cafc <_vfiprintf_r+0x254>)
 800c8c4:	429c      	cmp	r4, r3
 800c8c6:	d11c      	bne.n	800c902 <_vfiprintf_r+0x5a>
 800c8c8:	6874      	ldr	r4, [r6, #4]
 800c8ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8cc:	07db      	lsls	r3, r3, #31
 800c8ce:	d405      	bmi.n	800c8dc <_vfiprintf_r+0x34>
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	059b      	lsls	r3, r3, #22
 800c8d4:	d402      	bmi.n	800c8dc <_vfiprintf_r+0x34>
 800c8d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8d8:	f7ff ff7b 	bl	800c7d2 <__retarget_lock_acquire_recursive>
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	071b      	lsls	r3, r3, #28
 800c8e0:	d502      	bpl.n	800c8e8 <_vfiprintf_r+0x40>
 800c8e2:	6923      	ldr	r3, [r4, #16]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d11d      	bne.n	800c924 <_vfiprintf_r+0x7c>
 800c8e8:	0021      	movs	r1, r4
 800c8ea:	0030      	movs	r0, r6
 800c8ec:	f000 f96c 	bl	800cbc8 <__swsetup_r>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d017      	beq.n	800c924 <_vfiprintf_r+0x7c>
 800c8f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8f6:	07db      	lsls	r3, r3, #31
 800c8f8:	d50d      	bpl.n	800c916 <_vfiprintf_r+0x6e>
 800c8fa:	2001      	movs	r0, #1
 800c8fc:	4240      	negs	r0, r0
 800c8fe:	b021      	add	sp, #132	; 0x84
 800c900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c902:	4b7f      	ldr	r3, [pc, #508]	; (800cb00 <_vfiprintf_r+0x258>)
 800c904:	429c      	cmp	r4, r3
 800c906:	d101      	bne.n	800c90c <_vfiprintf_r+0x64>
 800c908:	68b4      	ldr	r4, [r6, #8]
 800c90a:	e7de      	b.n	800c8ca <_vfiprintf_r+0x22>
 800c90c:	4b7d      	ldr	r3, [pc, #500]	; (800cb04 <_vfiprintf_r+0x25c>)
 800c90e:	429c      	cmp	r4, r3
 800c910:	d1db      	bne.n	800c8ca <_vfiprintf_r+0x22>
 800c912:	68f4      	ldr	r4, [r6, #12]
 800c914:	e7d9      	b.n	800c8ca <_vfiprintf_r+0x22>
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	059b      	lsls	r3, r3, #22
 800c91a:	d4ee      	bmi.n	800c8fa <_vfiprintf_r+0x52>
 800c91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c91e:	f7ff ff59 	bl	800c7d4 <__retarget_lock_release_recursive>
 800c922:	e7ea      	b.n	800c8fa <_vfiprintf_r+0x52>
 800c924:	2300      	movs	r3, #0
 800c926:	ad08      	add	r5, sp, #32
 800c928:	616b      	str	r3, [r5, #20]
 800c92a:	3320      	adds	r3, #32
 800c92c:	766b      	strb	r3, [r5, #25]
 800c92e:	3310      	adds	r3, #16
 800c930:	76ab      	strb	r3, [r5, #26]
 800c932:	9707      	str	r7, [sp, #28]
 800c934:	9f03      	ldr	r7, [sp, #12]
 800c936:	783b      	ldrb	r3, [r7, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d001      	beq.n	800c940 <_vfiprintf_r+0x98>
 800c93c:	2b25      	cmp	r3, #37	; 0x25
 800c93e:	d14e      	bne.n	800c9de <_vfiprintf_r+0x136>
 800c940:	9b03      	ldr	r3, [sp, #12]
 800c942:	1afb      	subs	r3, r7, r3
 800c944:	9305      	str	r3, [sp, #20]
 800c946:	9b03      	ldr	r3, [sp, #12]
 800c948:	429f      	cmp	r7, r3
 800c94a:	d00d      	beq.n	800c968 <_vfiprintf_r+0xc0>
 800c94c:	9b05      	ldr	r3, [sp, #20]
 800c94e:	0021      	movs	r1, r4
 800c950:	0030      	movs	r0, r6
 800c952:	9a03      	ldr	r2, [sp, #12]
 800c954:	f7ff ff96 	bl	800c884 <__sfputs_r>
 800c958:	1c43      	adds	r3, r0, #1
 800c95a:	d100      	bne.n	800c95e <_vfiprintf_r+0xb6>
 800c95c:	e0b5      	b.n	800caca <_vfiprintf_r+0x222>
 800c95e:	696a      	ldr	r2, [r5, #20]
 800c960:	9b05      	ldr	r3, [sp, #20]
 800c962:	4694      	mov	ip, r2
 800c964:	4463      	add	r3, ip
 800c966:	616b      	str	r3, [r5, #20]
 800c968:	783b      	ldrb	r3, [r7, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d100      	bne.n	800c970 <_vfiprintf_r+0xc8>
 800c96e:	e0ac      	b.n	800caca <_vfiprintf_r+0x222>
 800c970:	2201      	movs	r2, #1
 800c972:	1c7b      	adds	r3, r7, #1
 800c974:	9303      	str	r3, [sp, #12]
 800c976:	2300      	movs	r3, #0
 800c978:	4252      	negs	r2, r2
 800c97a:	606a      	str	r2, [r5, #4]
 800c97c:	a904      	add	r1, sp, #16
 800c97e:	3254      	adds	r2, #84	; 0x54
 800c980:	1852      	adds	r2, r2, r1
 800c982:	602b      	str	r3, [r5, #0]
 800c984:	60eb      	str	r3, [r5, #12]
 800c986:	60ab      	str	r3, [r5, #8]
 800c988:	7013      	strb	r3, [r2, #0]
 800c98a:	65ab      	str	r3, [r5, #88]	; 0x58
 800c98c:	9b03      	ldr	r3, [sp, #12]
 800c98e:	2205      	movs	r2, #5
 800c990:	7819      	ldrb	r1, [r3, #0]
 800c992:	485d      	ldr	r0, [pc, #372]	; (800cb08 <_vfiprintf_r+0x260>)
 800c994:	f7ff f854 	bl	800ba40 <memchr>
 800c998:	9b03      	ldr	r3, [sp, #12]
 800c99a:	1c5f      	adds	r7, r3, #1
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d120      	bne.n	800c9e2 <_vfiprintf_r+0x13a>
 800c9a0:	682a      	ldr	r2, [r5, #0]
 800c9a2:	06d3      	lsls	r3, r2, #27
 800c9a4:	d504      	bpl.n	800c9b0 <_vfiprintf_r+0x108>
 800c9a6:	2353      	movs	r3, #83	; 0x53
 800c9a8:	a904      	add	r1, sp, #16
 800c9aa:	185b      	adds	r3, r3, r1
 800c9ac:	2120      	movs	r1, #32
 800c9ae:	7019      	strb	r1, [r3, #0]
 800c9b0:	0713      	lsls	r3, r2, #28
 800c9b2:	d504      	bpl.n	800c9be <_vfiprintf_r+0x116>
 800c9b4:	2353      	movs	r3, #83	; 0x53
 800c9b6:	a904      	add	r1, sp, #16
 800c9b8:	185b      	adds	r3, r3, r1
 800c9ba:	212b      	movs	r1, #43	; 0x2b
 800c9bc:	7019      	strb	r1, [r3, #0]
 800c9be:	9b03      	ldr	r3, [sp, #12]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c9c4:	d016      	beq.n	800c9f4 <_vfiprintf_r+0x14c>
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	68eb      	ldr	r3, [r5, #12]
 800c9ca:	9f03      	ldr	r7, [sp, #12]
 800c9cc:	783a      	ldrb	r2, [r7, #0]
 800c9ce:	1c78      	adds	r0, r7, #1
 800c9d0:	3a30      	subs	r2, #48	; 0x30
 800c9d2:	4684      	mov	ip, r0
 800c9d4:	2a09      	cmp	r2, #9
 800c9d6:	d94f      	bls.n	800ca78 <_vfiprintf_r+0x1d0>
 800c9d8:	2900      	cmp	r1, #0
 800c9da:	d111      	bne.n	800ca00 <_vfiprintf_r+0x158>
 800c9dc:	e017      	b.n	800ca0e <_vfiprintf_r+0x166>
 800c9de:	3701      	adds	r7, #1
 800c9e0:	e7a9      	b.n	800c936 <_vfiprintf_r+0x8e>
 800c9e2:	4b49      	ldr	r3, [pc, #292]	; (800cb08 <_vfiprintf_r+0x260>)
 800c9e4:	682a      	ldr	r2, [r5, #0]
 800c9e6:	1ac0      	subs	r0, r0, r3
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	4083      	lsls	r3, r0
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	602b      	str	r3, [r5, #0]
 800c9f0:	9703      	str	r7, [sp, #12]
 800c9f2:	e7cb      	b.n	800c98c <_vfiprintf_r+0xe4>
 800c9f4:	9b07      	ldr	r3, [sp, #28]
 800c9f6:	1d19      	adds	r1, r3, #4
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	9107      	str	r1, [sp, #28]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	db01      	blt.n	800ca04 <_vfiprintf_r+0x15c>
 800ca00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca02:	e004      	b.n	800ca0e <_vfiprintf_r+0x166>
 800ca04:	425b      	negs	r3, r3
 800ca06:	60eb      	str	r3, [r5, #12]
 800ca08:	2302      	movs	r3, #2
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	602b      	str	r3, [r5, #0]
 800ca0e:	783b      	ldrb	r3, [r7, #0]
 800ca10:	2b2e      	cmp	r3, #46	; 0x2e
 800ca12:	d10a      	bne.n	800ca2a <_vfiprintf_r+0x182>
 800ca14:	787b      	ldrb	r3, [r7, #1]
 800ca16:	2b2a      	cmp	r3, #42	; 0x2a
 800ca18:	d137      	bne.n	800ca8a <_vfiprintf_r+0x1e2>
 800ca1a:	9b07      	ldr	r3, [sp, #28]
 800ca1c:	3702      	adds	r7, #2
 800ca1e:	1d1a      	adds	r2, r3, #4
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	9207      	str	r2, [sp, #28]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	db2d      	blt.n	800ca84 <_vfiprintf_r+0x1dc>
 800ca28:	9309      	str	r3, [sp, #36]	; 0x24
 800ca2a:	2203      	movs	r2, #3
 800ca2c:	7839      	ldrb	r1, [r7, #0]
 800ca2e:	4837      	ldr	r0, [pc, #220]	; (800cb0c <_vfiprintf_r+0x264>)
 800ca30:	f7ff f806 	bl	800ba40 <memchr>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d007      	beq.n	800ca48 <_vfiprintf_r+0x1a0>
 800ca38:	4b34      	ldr	r3, [pc, #208]	; (800cb0c <_vfiprintf_r+0x264>)
 800ca3a:	682a      	ldr	r2, [r5, #0]
 800ca3c:	1ac0      	subs	r0, r0, r3
 800ca3e:	2340      	movs	r3, #64	; 0x40
 800ca40:	4083      	lsls	r3, r0
 800ca42:	4313      	orrs	r3, r2
 800ca44:	3701      	adds	r7, #1
 800ca46:	602b      	str	r3, [r5, #0]
 800ca48:	7839      	ldrb	r1, [r7, #0]
 800ca4a:	1c7b      	adds	r3, r7, #1
 800ca4c:	2206      	movs	r2, #6
 800ca4e:	4830      	ldr	r0, [pc, #192]	; (800cb10 <_vfiprintf_r+0x268>)
 800ca50:	9303      	str	r3, [sp, #12]
 800ca52:	7629      	strb	r1, [r5, #24]
 800ca54:	f7fe fff4 	bl	800ba40 <memchr>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d045      	beq.n	800cae8 <_vfiprintf_r+0x240>
 800ca5c:	4b2d      	ldr	r3, [pc, #180]	; (800cb14 <_vfiprintf_r+0x26c>)
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d127      	bne.n	800cab2 <_vfiprintf_r+0x20a>
 800ca62:	2207      	movs	r2, #7
 800ca64:	9b07      	ldr	r3, [sp, #28]
 800ca66:	3307      	adds	r3, #7
 800ca68:	4393      	bics	r3, r2
 800ca6a:	3308      	adds	r3, #8
 800ca6c:	9307      	str	r3, [sp, #28]
 800ca6e:	696b      	ldr	r3, [r5, #20]
 800ca70:	9a04      	ldr	r2, [sp, #16]
 800ca72:	189b      	adds	r3, r3, r2
 800ca74:	616b      	str	r3, [r5, #20]
 800ca76:	e75d      	b.n	800c934 <_vfiprintf_r+0x8c>
 800ca78:	210a      	movs	r1, #10
 800ca7a:	434b      	muls	r3, r1
 800ca7c:	4667      	mov	r7, ip
 800ca7e:	189b      	adds	r3, r3, r2
 800ca80:	3909      	subs	r1, #9
 800ca82:	e7a3      	b.n	800c9cc <_vfiprintf_r+0x124>
 800ca84:	2301      	movs	r3, #1
 800ca86:	425b      	negs	r3, r3
 800ca88:	e7ce      	b.n	800ca28 <_vfiprintf_r+0x180>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	001a      	movs	r2, r3
 800ca8e:	3701      	adds	r7, #1
 800ca90:	606b      	str	r3, [r5, #4]
 800ca92:	7839      	ldrb	r1, [r7, #0]
 800ca94:	1c78      	adds	r0, r7, #1
 800ca96:	3930      	subs	r1, #48	; 0x30
 800ca98:	4684      	mov	ip, r0
 800ca9a:	2909      	cmp	r1, #9
 800ca9c:	d903      	bls.n	800caa6 <_vfiprintf_r+0x1fe>
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d0c3      	beq.n	800ca2a <_vfiprintf_r+0x182>
 800caa2:	9209      	str	r2, [sp, #36]	; 0x24
 800caa4:	e7c1      	b.n	800ca2a <_vfiprintf_r+0x182>
 800caa6:	230a      	movs	r3, #10
 800caa8:	435a      	muls	r2, r3
 800caaa:	4667      	mov	r7, ip
 800caac:	1852      	adds	r2, r2, r1
 800caae:	3b09      	subs	r3, #9
 800cab0:	e7ef      	b.n	800ca92 <_vfiprintf_r+0x1ea>
 800cab2:	ab07      	add	r3, sp, #28
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	0022      	movs	r2, r4
 800cab8:	0029      	movs	r1, r5
 800caba:	0030      	movs	r0, r6
 800cabc:	4b16      	ldr	r3, [pc, #88]	; (800cb18 <_vfiprintf_r+0x270>)
 800cabe:	f7fc f8bb 	bl	8008c38 <_printf_float>
 800cac2:	9004      	str	r0, [sp, #16]
 800cac4:	9b04      	ldr	r3, [sp, #16]
 800cac6:	3301      	adds	r3, #1
 800cac8:	d1d1      	bne.n	800ca6e <_vfiprintf_r+0x1c6>
 800caca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cacc:	07db      	lsls	r3, r3, #31
 800cace:	d405      	bmi.n	800cadc <_vfiprintf_r+0x234>
 800cad0:	89a3      	ldrh	r3, [r4, #12]
 800cad2:	059b      	lsls	r3, r3, #22
 800cad4:	d402      	bmi.n	800cadc <_vfiprintf_r+0x234>
 800cad6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cad8:	f7ff fe7c 	bl	800c7d4 <__retarget_lock_release_recursive>
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	065b      	lsls	r3, r3, #25
 800cae0:	d500      	bpl.n	800cae4 <_vfiprintf_r+0x23c>
 800cae2:	e70a      	b.n	800c8fa <_vfiprintf_r+0x52>
 800cae4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cae6:	e70a      	b.n	800c8fe <_vfiprintf_r+0x56>
 800cae8:	ab07      	add	r3, sp, #28
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	0022      	movs	r2, r4
 800caee:	0029      	movs	r1, r5
 800caf0:	0030      	movs	r0, r6
 800caf2:	4b09      	ldr	r3, [pc, #36]	; (800cb18 <_vfiprintf_r+0x270>)
 800caf4:	f7fc fb52 	bl	800919c <_printf_i>
 800caf8:	e7e3      	b.n	800cac2 <_vfiprintf_r+0x21a>
 800cafa:	46c0      	nop			; (mov r8, r8)
 800cafc:	0800d9cc 	.word	0x0800d9cc
 800cb00:	0800d9ec 	.word	0x0800d9ec
 800cb04:	0800d9ac 	.word	0x0800d9ac
 800cb08:	0800d95c 	.word	0x0800d95c
 800cb0c:	0800d962 	.word	0x0800d962
 800cb10:	0800d966 	.word	0x0800d966
 800cb14:	08008c39 	.word	0x08008c39
 800cb18:	0800c885 	.word	0x0800c885

0800cb1c <__swbuf_r>:
 800cb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1e:	0005      	movs	r5, r0
 800cb20:	000e      	movs	r6, r1
 800cb22:	0014      	movs	r4, r2
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d004      	beq.n	800cb32 <__swbuf_r+0x16>
 800cb28:	6983      	ldr	r3, [r0, #24]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d101      	bne.n	800cb32 <__swbuf_r+0x16>
 800cb2e:	f000 f9f9 	bl	800cf24 <__sinit>
 800cb32:	4b22      	ldr	r3, [pc, #136]	; (800cbbc <__swbuf_r+0xa0>)
 800cb34:	429c      	cmp	r4, r3
 800cb36:	d12e      	bne.n	800cb96 <__swbuf_r+0x7a>
 800cb38:	686c      	ldr	r4, [r5, #4]
 800cb3a:	69a3      	ldr	r3, [r4, #24]
 800cb3c:	60a3      	str	r3, [r4, #8]
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	071b      	lsls	r3, r3, #28
 800cb42:	d532      	bpl.n	800cbaa <__swbuf_r+0x8e>
 800cb44:	6923      	ldr	r3, [r4, #16]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d02f      	beq.n	800cbaa <__swbuf_r+0x8e>
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	6922      	ldr	r2, [r4, #16]
 800cb4e:	b2f7      	uxtb	r7, r6
 800cb50:	1a98      	subs	r0, r3, r2
 800cb52:	6963      	ldr	r3, [r4, #20]
 800cb54:	b2f6      	uxtb	r6, r6
 800cb56:	4283      	cmp	r3, r0
 800cb58:	dc05      	bgt.n	800cb66 <__swbuf_r+0x4a>
 800cb5a:	0021      	movs	r1, r4
 800cb5c:	0028      	movs	r0, r5
 800cb5e:	f000 f93f 	bl	800cde0 <_fflush_r>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d127      	bne.n	800cbb6 <__swbuf_r+0x9a>
 800cb66:	68a3      	ldr	r3, [r4, #8]
 800cb68:	3001      	adds	r0, #1
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	60a3      	str	r3, [r4, #8]
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	6022      	str	r2, [r4, #0]
 800cb74:	701f      	strb	r7, [r3, #0]
 800cb76:	6963      	ldr	r3, [r4, #20]
 800cb78:	4283      	cmp	r3, r0
 800cb7a:	d004      	beq.n	800cb86 <__swbuf_r+0x6a>
 800cb7c:	89a3      	ldrh	r3, [r4, #12]
 800cb7e:	07db      	lsls	r3, r3, #31
 800cb80:	d507      	bpl.n	800cb92 <__swbuf_r+0x76>
 800cb82:	2e0a      	cmp	r6, #10
 800cb84:	d105      	bne.n	800cb92 <__swbuf_r+0x76>
 800cb86:	0021      	movs	r1, r4
 800cb88:	0028      	movs	r0, r5
 800cb8a:	f000 f929 	bl	800cde0 <_fflush_r>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d111      	bne.n	800cbb6 <__swbuf_r+0x9a>
 800cb92:	0030      	movs	r0, r6
 800cb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb96:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <__swbuf_r+0xa4>)
 800cb98:	429c      	cmp	r4, r3
 800cb9a:	d101      	bne.n	800cba0 <__swbuf_r+0x84>
 800cb9c:	68ac      	ldr	r4, [r5, #8]
 800cb9e:	e7cc      	b.n	800cb3a <__swbuf_r+0x1e>
 800cba0:	4b08      	ldr	r3, [pc, #32]	; (800cbc4 <__swbuf_r+0xa8>)
 800cba2:	429c      	cmp	r4, r3
 800cba4:	d1c9      	bne.n	800cb3a <__swbuf_r+0x1e>
 800cba6:	68ec      	ldr	r4, [r5, #12]
 800cba8:	e7c7      	b.n	800cb3a <__swbuf_r+0x1e>
 800cbaa:	0021      	movs	r1, r4
 800cbac:	0028      	movs	r0, r5
 800cbae:	f000 f80b 	bl	800cbc8 <__swsetup_r>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d0c9      	beq.n	800cb4a <__swbuf_r+0x2e>
 800cbb6:	2601      	movs	r6, #1
 800cbb8:	4276      	negs	r6, r6
 800cbba:	e7ea      	b.n	800cb92 <__swbuf_r+0x76>
 800cbbc:	0800d9cc 	.word	0x0800d9cc
 800cbc0:	0800d9ec 	.word	0x0800d9ec
 800cbc4:	0800d9ac 	.word	0x0800d9ac

0800cbc8 <__swsetup_r>:
 800cbc8:	4b37      	ldr	r3, [pc, #220]	; (800cca8 <__swsetup_r+0xe0>)
 800cbca:	b570      	push	{r4, r5, r6, lr}
 800cbcc:	681d      	ldr	r5, [r3, #0]
 800cbce:	0006      	movs	r6, r0
 800cbd0:	000c      	movs	r4, r1
 800cbd2:	2d00      	cmp	r5, #0
 800cbd4:	d005      	beq.n	800cbe2 <__swsetup_r+0x1a>
 800cbd6:	69ab      	ldr	r3, [r5, #24]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <__swsetup_r+0x1a>
 800cbdc:	0028      	movs	r0, r5
 800cbde:	f000 f9a1 	bl	800cf24 <__sinit>
 800cbe2:	4b32      	ldr	r3, [pc, #200]	; (800ccac <__swsetup_r+0xe4>)
 800cbe4:	429c      	cmp	r4, r3
 800cbe6:	d10f      	bne.n	800cc08 <__swsetup_r+0x40>
 800cbe8:	686c      	ldr	r4, [r5, #4]
 800cbea:	230c      	movs	r3, #12
 800cbec:	5ee2      	ldrsh	r2, [r4, r3]
 800cbee:	b293      	uxth	r3, r2
 800cbf0:	0711      	lsls	r1, r2, #28
 800cbf2:	d42d      	bmi.n	800cc50 <__swsetup_r+0x88>
 800cbf4:	06d9      	lsls	r1, r3, #27
 800cbf6:	d411      	bmi.n	800cc1c <__swsetup_r+0x54>
 800cbf8:	2309      	movs	r3, #9
 800cbfa:	2001      	movs	r0, #1
 800cbfc:	6033      	str	r3, [r6, #0]
 800cbfe:	3337      	adds	r3, #55	; 0x37
 800cc00:	4313      	orrs	r3, r2
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	4240      	negs	r0, r0
 800cc06:	bd70      	pop	{r4, r5, r6, pc}
 800cc08:	4b29      	ldr	r3, [pc, #164]	; (800ccb0 <__swsetup_r+0xe8>)
 800cc0a:	429c      	cmp	r4, r3
 800cc0c:	d101      	bne.n	800cc12 <__swsetup_r+0x4a>
 800cc0e:	68ac      	ldr	r4, [r5, #8]
 800cc10:	e7eb      	b.n	800cbea <__swsetup_r+0x22>
 800cc12:	4b28      	ldr	r3, [pc, #160]	; (800ccb4 <__swsetup_r+0xec>)
 800cc14:	429c      	cmp	r4, r3
 800cc16:	d1e8      	bne.n	800cbea <__swsetup_r+0x22>
 800cc18:	68ec      	ldr	r4, [r5, #12]
 800cc1a:	e7e6      	b.n	800cbea <__swsetup_r+0x22>
 800cc1c:	075b      	lsls	r3, r3, #29
 800cc1e:	d513      	bpl.n	800cc48 <__swsetup_r+0x80>
 800cc20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc22:	2900      	cmp	r1, #0
 800cc24:	d008      	beq.n	800cc38 <__swsetup_r+0x70>
 800cc26:	0023      	movs	r3, r4
 800cc28:	3344      	adds	r3, #68	; 0x44
 800cc2a:	4299      	cmp	r1, r3
 800cc2c:	d002      	beq.n	800cc34 <__swsetup_r+0x6c>
 800cc2e:	0030      	movs	r0, r6
 800cc30:	f7fb fe76 	bl	8008920 <_free_r>
 800cc34:	2300      	movs	r3, #0
 800cc36:	6363      	str	r3, [r4, #52]	; 0x34
 800cc38:	2224      	movs	r2, #36	; 0x24
 800cc3a:	89a3      	ldrh	r3, [r4, #12]
 800cc3c:	4393      	bics	r3, r2
 800cc3e:	81a3      	strh	r3, [r4, #12]
 800cc40:	2300      	movs	r3, #0
 800cc42:	6063      	str	r3, [r4, #4]
 800cc44:	6923      	ldr	r3, [r4, #16]
 800cc46:	6023      	str	r3, [r4, #0]
 800cc48:	2308      	movs	r3, #8
 800cc4a:	89a2      	ldrh	r2, [r4, #12]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	81a3      	strh	r3, [r4, #12]
 800cc50:	6923      	ldr	r3, [r4, #16]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10b      	bne.n	800cc6e <__swsetup_r+0xa6>
 800cc56:	21a0      	movs	r1, #160	; 0xa0
 800cc58:	2280      	movs	r2, #128	; 0x80
 800cc5a:	89a3      	ldrh	r3, [r4, #12]
 800cc5c:	0089      	lsls	r1, r1, #2
 800cc5e:	0092      	lsls	r2, r2, #2
 800cc60:	400b      	ands	r3, r1
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d003      	beq.n	800cc6e <__swsetup_r+0xa6>
 800cc66:	0021      	movs	r1, r4
 800cc68:	0030      	movs	r0, r6
 800cc6a:	f000 fa23 	bl	800d0b4 <__smakebuf_r>
 800cc6e:	220c      	movs	r2, #12
 800cc70:	5ea3      	ldrsh	r3, [r4, r2]
 800cc72:	2001      	movs	r0, #1
 800cc74:	001a      	movs	r2, r3
 800cc76:	b299      	uxth	r1, r3
 800cc78:	4002      	ands	r2, r0
 800cc7a:	4203      	tst	r3, r0
 800cc7c:	d00f      	beq.n	800cc9e <__swsetup_r+0xd6>
 800cc7e:	2200      	movs	r2, #0
 800cc80:	60a2      	str	r2, [r4, #8]
 800cc82:	6962      	ldr	r2, [r4, #20]
 800cc84:	4252      	negs	r2, r2
 800cc86:	61a2      	str	r2, [r4, #24]
 800cc88:	2000      	movs	r0, #0
 800cc8a:	6922      	ldr	r2, [r4, #16]
 800cc8c:	4282      	cmp	r2, r0
 800cc8e:	d1ba      	bne.n	800cc06 <__swsetup_r+0x3e>
 800cc90:	060a      	lsls	r2, r1, #24
 800cc92:	d5b8      	bpl.n	800cc06 <__swsetup_r+0x3e>
 800cc94:	2240      	movs	r2, #64	; 0x40
 800cc96:	4313      	orrs	r3, r2
 800cc98:	81a3      	strh	r3, [r4, #12]
 800cc9a:	3801      	subs	r0, #1
 800cc9c:	e7b3      	b.n	800cc06 <__swsetup_r+0x3e>
 800cc9e:	0788      	lsls	r0, r1, #30
 800cca0:	d400      	bmi.n	800cca4 <__swsetup_r+0xdc>
 800cca2:	6962      	ldr	r2, [r4, #20]
 800cca4:	60a2      	str	r2, [r4, #8]
 800cca6:	e7ef      	b.n	800cc88 <__swsetup_r+0xc0>
 800cca8:	2000000c 	.word	0x2000000c
 800ccac:	0800d9cc 	.word	0x0800d9cc
 800ccb0:	0800d9ec 	.word	0x0800d9ec
 800ccb4:	0800d9ac 	.word	0x0800d9ac

0800ccb8 <abort>:
 800ccb8:	2006      	movs	r0, #6
 800ccba:	b510      	push	{r4, lr}
 800ccbc:	f000 fa70 	bl	800d1a0 <raise>
 800ccc0:	2001      	movs	r0, #1
 800ccc2:	f7f7 fd7d 	bl	80047c0 <_exit>
	...

0800ccc8 <__sflush_r>:
 800ccc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccca:	898b      	ldrh	r3, [r1, #12]
 800cccc:	0005      	movs	r5, r0
 800ccce:	000c      	movs	r4, r1
 800ccd0:	071a      	lsls	r2, r3, #28
 800ccd2:	d45f      	bmi.n	800cd94 <__sflush_r+0xcc>
 800ccd4:	684a      	ldr	r2, [r1, #4]
 800ccd6:	2a00      	cmp	r2, #0
 800ccd8:	dc04      	bgt.n	800cce4 <__sflush_r+0x1c>
 800ccda:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ccdc:	2a00      	cmp	r2, #0
 800ccde:	dc01      	bgt.n	800cce4 <__sflush_r+0x1c>
 800cce0:	2000      	movs	r0, #0
 800cce2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cce4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cce6:	2f00      	cmp	r7, #0
 800cce8:	d0fa      	beq.n	800cce0 <__sflush_r+0x18>
 800ccea:	2200      	movs	r2, #0
 800ccec:	2180      	movs	r1, #128	; 0x80
 800ccee:	682e      	ldr	r6, [r5, #0]
 800ccf0:	602a      	str	r2, [r5, #0]
 800ccf2:	001a      	movs	r2, r3
 800ccf4:	0149      	lsls	r1, r1, #5
 800ccf6:	400a      	ands	r2, r1
 800ccf8:	420b      	tst	r3, r1
 800ccfa:	d034      	beq.n	800cd66 <__sflush_r+0x9e>
 800ccfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccfe:	89a3      	ldrh	r3, [r4, #12]
 800cd00:	075b      	lsls	r3, r3, #29
 800cd02:	d506      	bpl.n	800cd12 <__sflush_r+0x4a>
 800cd04:	6863      	ldr	r3, [r4, #4]
 800cd06:	1ac0      	subs	r0, r0, r3
 800cd08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <__sflush_r+0x4a>
 800cd0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd10:	1ac0      	subs	r0, r0, r3
 800cd12:	0002      	movs	r2, r0
 800cd14:	6a21      	ldr	r1, [r4, #32]
 800cd16:	2300      	movs	r3, #0
 800cd18:	0028      	movs	r0, r5
 800cd1a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cd1c:	47b8      	blx	r7
 800cd1e:	89a1      	ldrh	r1, [r4, #12]
 800cd20:	1c43      	adds	r3, r0, #1
 800cd22:	d106      	bne.n	800cd32 <__sflush_r+0x6a>
 800cd24:	682b      	ldr	r3, [r5, #0]
 800cd26:	2b1d      	cmp	r3, #29
 800cd28:	d831      	bhi.n	800cd8e <__sflush_r+0xc6>
 800cd2a:	4a2c      	ldr	r2, [pc, #176]	; (800cddc <__sflush_r+0x114>)
 800cd2c:	40da      	lsrs	r2, r3
 800cd2e:	07d3      	lsls	r3, r2, #31
 800cd30:	d52d      	bpl.n	800cd8e <__sflush_r+0xc6>
 800cd32:	2300      	movs	r3, #0
 800cd34:	6063      	str	r3, [r4, #4]
 800cd36:	6923      	ldr	r3, [r4, #16]
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	04cb      	lsls	r3, r1, #19
 800cd3c:	d505      	bpl.n	800cd4a <__sflush_r+0x82>
 800cd3e:	1c43      	adds	r3, r0, #1
 800cd40:	d102      	bne.n	800cd48 <__sflush_r+0x80>
 800cd42:	682b      	ldr	r3, [r5, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d100      	bne.n	800cd4a <__sflush_r+0x82>
 800cd48:	6560      	str	r0, [r4, #84]	; 0x54
 800cd4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd4c:	602e      	str	r6, [r5, #0]
 800cd4e:	2900      	cmp	r1, #0
 800cd50:	d0c6      	beq.n	800cce0 <__sflush_r+0x18>
 800cd52:	0023      	movs	r3, r4
 800cd54:	3344      	adds	r3, #68	; 0x44
 800cd56:	4299      	cmp	r1, r3
 800cd58:	d002      	beq.n	800cd60 <__sflush_r+0x98>
 800cd5a:	0028      	movs	r0, r5
 800cd5c:	f7fb fde0 	bl	8008920 <_free_r>
 800cd60:	2000      	movs	r0, #0
 800cd62:	6360      	str	r0, [r4, #52]	; 0x34
 800cd64:	e7bd      	b.n	800cce2 <__sflush_r+0x1a>
 800cd66:	2301      	movs	r3, #1
 800cd68:	0028      	movs	r0, r5
 800cd6a:	6a21      	ldr	r1, [r4, #32]
 800cd6c:	47b8      	blx	r7
 800cd6e:	1c43      	adds	r3, r0, #1
 800cd70:	d1c5      	bne.n	800ccfe <__sflush_r+0x36>
 800cd72:	682b      	ldr	r3, [r5, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d0c2      	beq.n	800ccfe <__sflush_r+0x36>
 800cd78:	2b1d      	cmp	r3, #29
 800cd7a:	d001      	beq.n	800cd80 <__sflush_r+0xb8>
 800cd7c:	2b16      	cmp	r3, #22
 800cd7e:	d101      	bne.n	800cd84 <__sflush_r+0xbc>
 800cd80:	602e      	str	r6, [r5, #0]
 800cd82:	e7ad      	b.n	800cce0 <__sflush_r+0x18>
 800cd84:	2340      	movs	r3, #64	; 0x40
 800cd86:	89a2      	ldrh	r2, [r4, #12]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	81a3      	strh	r3, [r4, #12]
 800cd8c:	e7a9      	b.n	800cce2 <__sflush_r+0x1a>
 800cd8e:	2340      	movs	r3, #64	; 0x40
 800cd90:	430b      	orrs	r3, r1
 800cd92:	e7fa      	b.n	800cd8a <__sflush_r+0xc2>
 800cd94:	690f      	ldr	r7, [r1, #16]
 800cd96:	2f00      	cmp	r7, #0
 800cd98:	d0a2      	beq.n	800cce0 <__sflush_r+0x18>
 800cd9a:	680a      	ldr	r2, [r1, #0]
 800cd9c:	600f      	str	r7, [r1, #0]
 800cd9e:	1bd2      	subs	r2, r2, r7
 800cda0:	9201      	str	r2, [sp, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	079b      	lsls	r3, r3, #30
 800cda6:	d100      	bne.n	800cdaa <__sflush_r+0xe2>
 800cda8:	694a      	ldr	r2, [r1, #20]
 800cdaa:	60a2      	str	r2, [r4, #8]
 800cdac:	9b01      	ldr	r3, [sp, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	dc00      	bgt.n	800cdb4 <__sflush_r+0xec>
 800cdb2:	e795      	b.n	800cce0 <__sflush_r+0x18>
 800cdb4:	003a      	movs	r2, r7
 800cdb6:	0028      	movs	r0, r5
 800cdb8:	9b01      	ldr	r3, [sp, #4]
 800cdba:	6a21      	ldr	r1, [r4, #32]
 800cdbc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cdbe:	47b0      	blx	r6
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	dc06      	bgt.n	800cdd2 <__sflush_r+0x10a>
 800cdc4:	2340      	movs	r3, #64	; 0x40
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	89a2      	ldrh	r2, [r4, #12]
 800cdca:	4240      	negs	r0, r0
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	e787      	b.n	800cce2 <__sflush_r+0x1a>
 800cdd2:	9b01      	ldr	r3, [sp, #4]
 800cdd4:	183f      	adds	r7, r7, r0
 800cdd6:	1a1b      	subs	r3, r3, r0
 800cdd8:	9301      	str	r3, [sp, #4]
 800cdda:	e7e7      	b.n	800cdac <__sflush_r+0xe4>
 800cddc:	20400001 	.word	0x20400001

0800cde0 <_fflush_r>:
 800cde0:	690b      	ldr	r3, [r1, #16]
 800cde2:	b570      	push	{r4, r5, r6, lr}
 800cde4:	0005      	movs	r5, r0
 800cde6:	000c      	movs	r4, r1
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d102      	bne.n	800cdf2 <_fflush_r+0x12>
 800cdec:	2500      	movs	r5, #0
 800cdee:	0028      	movs	r0, r5
 800cdf0:	bd70      	pop	{r4, r5, r6, pc}
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d004      	beq.n	800ce00 <_fflush_r+0x20>
 800cdf6:	6983      	ldr	r3, [r0, #24]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d101      	bne.n	800ce00 <_fflush_r+0x20>
 800cdfc:	f000 f892 	bl	800cf24 <__sinit>
 800ce00:	4b14      	ldr	r3, [pc, #80]	; (800ce54 <_fflush_r+0x74>)
 800ce02:	429c      	cmp	r4, r3
 800ce04:	d11b      	bne.n	800ce3e <_fflush_r+0x5e>
 800ce06:	686c      	ldr	r4, [r5, #4]
 800ce08:	220c      	movs	r2, #12
 800ce0a:	5ea3      	ldrsh	r3, [r4, r2]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d0ed      	beq.n	800cdec <_fflush_r+0xc>
 800ce10:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce12:	07d2      	lsls	r2, r2, #31
 800ce14:	d404      	bmi.n	800ce20 <_fflush_r+0x40>
 800ce16:	059b      	lsls	r3, r3, #22
 800ce18:	d402      	bmi.n	800ce20 <_fflush_r+0x40>
 800ce1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce1c:	f7ff fcd9 	bl	800c7d2 <__retarget_lock_acquire_recursive>
 800ce20:	0028      	movs	r0, r5
 800ce22:	0021      	movs	r1, r4
 800ce24:	f7ff ff50 	bl	800ccc8 <__sflush_r>
 800ce28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce2a:	0005      	movs	r5, r0
 800ce2c:	07db      	lsls	r3, r3, #31
 800ce2e:	d4de      	bmi.n	800cdee <_fflush_r+0xe>
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	059b      	lsls	r3, r3, #22
 800ce34:	d4db      	bmi.n	800cdee <_fflush_r+0xe>
 800ce36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce38:	f7ff fccc 	bl	800c7d4 <__retarget_lock_release_recursive>
 800ce3c:	e7d7      	b.n	800cdee <_fflush_r+0xe>
 800ce3e:	4b06      	ldr	r3, [pc, #24]	; (800ce58 <_fflush_r+0x78>)
 800ce40:	429c      	cmp	r4, r3
 800ce42:	d101      	bne.n	800ce48 <_fflush_r+0x68>
 800ce44:	68ac      	ldr	r4, [r5, #8]
 800ce46:	e7df      	b.n	800ce08 <_fflush_r+0x28>
 800ce48:	4b04      	ldr	r3, [pc, #16]	; (800ce5c <_fflush_r+0x7c>)
 800ce4a:	429c      	cmp	r4, r3
 800ce4c:	d1dc      	bne.n	800ce08 <_fflush_r+0x28>
 800ce4e:	68ec      	ldr	r4, [r5, #12]
 800ce50:	e7da      	b.n	800ce08 <_fflush_r+0x28>
 800ce52:	46c0      	nop			; (mov r8, r8)
 800ce54:	0800d9cc 	.word	0x0800d9cc
 800ce58:	0800d9ec 	.word	0x0800d9ec
 800ce5c:	0800d9ac 	.word	0x0800d9ac

0800ce60 <std>:
 800ce60:	2300      	movs	r3, #0
 800ce62:	b510      	push	{r4, lr}
 800ce64:	0004      	movs	r4, r0
 800ce66:	6003      	str	r3, [r0, #0]
 800ce68:	6043      	str	r3, [r0, #4]
 800ce6a:	6083      	str	r3, [r0, #8]
 800ce6c:	8181      	strh	r1, [r0, #12]
 800ce6e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce70:	0019      	movs	r1, r3
 800ce72:	81c2      	strh	r2, [r0, #14]
 800ce74:	6103      	str	r3, [r0, #16]
 800ce76:	6143      	str	r3, [r0, #20]
 800ce78:	6183      	str	r3, [r0, #24]
 800ce7a:	2208      	movs	r2, #8
 800ce7c:	305c      	adds	r0, #92	; 0x5c
 800ce7e:	f7fb fd46 	bl	800890e <memset>
 800ce82:	4b05      	ldr	r3, [pc, #20]	; (800ce98 <std+0x38>)
 800ce84:	6224      	str	r4, [r4, #32]
 800ce86:	6263      	str	r3, [r4, #36]	; 0x24
 800ce88:	4b04      	ldr	r3, [pc, #16]	; (800ce9c <std+0x3c>)
 800ce8a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce8c:	4b04      	ldr	r3, [pc, #16]	; (800cea0 <std+0x40>)
 800ce8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce90:	4b04      	ldr	r3, [pc, #16]	; (800cea4 <std+0x44>)
 800ce92:	6323      	str	r3, [r4, #48]	; 0x30
 800ce94:	bd10      	pop	{r4, pc}
 800ce96:	46c0      	nop			; (mov r8, r8)
 800ce98:	0800d1e1 	.word	0x0800d1e1
 800ce9c:	0800d209 	.word	0x0800d209
 800cea0:	0800d241 	.word	0x0800d241
 800cea4:	0800d26d 	.word	0x0800d26d

0800cea8 <_cleanup_r>:
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	4902      	ldr	r1, [pc, #8]	; (800ceb4 <_cleanup_r+0xc>)
 800ceac:	f000 f8ba 	bl	800d024 <_fwalk_reent>
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	46c0      	nop			; (mov r8, r8)
 800ceb4:	0800cde1 	.word	0x0800cde1

0800ceb8 <__sfmoreglue>:
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	2568      	movs	r5, #104	; 0x68
 800cebc:	1e4a      	subs	r2, r1, #1
 800cebe:	4355      	muls	r5, r2
 800cec0:	000e      	movs	r6, r1
 800cec2:	0029      	movs	r1, r5
 800cec4:	3174      	adds	r1, #116	; 0x74
 800cec6:	f7fb fd97 	bl	80089f8 <_malloc_r>
 800ceca:	1e04      	subs	r4, r0, #0
 800cecc:	d008      	beq.n	800cee0 <__sfmoreglue+0x28>
 800cece:	2100      	movs	r1, #0
 800ced0:	002a      	movs	r2, r5
 800ced2:	6001      	str	r1, [r0, #0]
 800ced4:	6046      	str	r6, [r0, #4]
 800ced6:	300c      	adds	r0, #12
 800ced8:	60a0      	str	r0, [r4, #8]
 800ceda:	3268      	adds	r2, #104	; 0x68
 800cedc:	f7fb fd17 	bl	800890e <memset>
 800cee0:	0020      	movs	r0, r4
 800cee2:	bd70      	pop	{r4, r5, r6, pc}

0800cee4 <__sfp_lock_acquire>:
 800cee4:	b510      	push	{r4, lr}
 800cee6:	4802      	ldr	r0, [pc, #8]	; (800cef0 <__sfp_lock_acquire+0xc>)
 800cee8:	f7ff fc73 	bl	800c7d2 <__retarget_lock_acquire_recursive>
 800ceec:	bd10      	pop	{r4, pc}
 800ceee:	46c0      	nop			; (mov r8, r8)
 800cef0:	2000054d 	.word	0x2000054d

0800cef4 <__sfp_lock_release>:
 800cef4:	b510      	push	{r4, lr}
 800cef6:	4802      	ldr	r0, [pc, #8]	; (800cf00 <__sfp_lock_release+0xc>)
 800cef8:	f7ff fc6c 	bl	800c7d4 <__retarget_lock_release_recursive>
 800cefc:	bd10      	pop	{r4, pc}
 800cefe:	46c0      	nop			; (mov r8, r8)
 800cf00:	2000054d 	.word	0x2000054d

0800cf04 <__sinit_lock_acquire>:
 800cf04:	b510      	push	{r4, lr}
 800cf06:	4802      	ldr	r0, [pc, #8]	; (800cf10 <__sinit_lock_acquire+0xc>)
 800cf08:	f7ff fc63 	bl	800c7d2 <__retarget_lock_acquire_recursive>
 800cf0c:	bd10      	pop	{r4, pc}
 800cf0e:	46c0      	nop			; (mov r8, r8)
 800cf10:	2000054e 	.word	0x2000054e

0800cf14 <__sinit_lock_release>:
 800cf14:	b510      	push	{r4, lr}
 800cf16:	4802      	ldr	r0, [pc, #8]	; (800cf20 <__sinit_lock_release+0xc>)
 800cf18:	f7ff fc5c 	bl	800c7d4 <__retarget_lock_release_recursive>
 800cf1c:	bd10      	pop	{r4, pc}
 800cf1e:	46c0      	nop			; (mov r8, r8)
 800cf20:	2000054e 	.word	0x2000054e

0800cf24 <__sinit>:
 800cf24:	b513      	push	{r0, r1, r4, lr}
 800cf26:	0004      	movs	r4, r0
 800cf28:	f7ff ffec 	bl	800cf04 <__sinit_lock_acquire>
 800cf2c:	69a3      	ldr	r3, [r4, #24]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d002      	beq.n	800cf38 <__sinit+0x14>
 800cf32:	f7ff ffef 	bl	800cf14 <__sinit_lock_release>
 800cf36:	bd13      	pop	{r0, r1, r4, pc}
 800cf38:	64a3      	str	r3, [r4, #72]	; 0x48
 800cf3a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800cf3c:	6523      	str	r3, [r4, #80]	; 0x50
 800cf3e:	4b13      	ldr	r3, [pc, #76]	; (800cf8c <__sinit+0x68>)
 800cf40:	4a13      	ldr	r2, [pc, #76]	; (800cf90 <__sinit+0x6c>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf46:	9301      	str	r3, [sp, #4]
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	d101      	bne.n	800cf50 <__sinit+0x2c>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	61a3      	str	r3, [r4, #24]
 800cf50:	0020      	movs	r0, r4
 800cf52:	f000 f81f 	bl	800cf94 <__sfp>
 800cf56:	6060      	str	r0, [r4, #4]
 800cf58:	0020      	movs	r0, r4
 800cf5a:	f000 f81b 	bl	800cf94 <__sfp>
 800cf5e:	60a0      	str	r0, [r4, #8]
 800cf60:	0020      	movs	r0, r4
 800cf62:	f000 f817 	bl	800cf94 <__sfp>
 800cf66:	2200      	movs	r2, #0
 800cf68:	2104      	movs	r1, #4
 800cf6a:	60e0      	str	r0, [r4, #12]
 800cf6c:	6860      	ldr	r0, [r4, #4]
 800cf6e:	f7ff ff77 	bl	800ce60 <std>
 800cf72:	2201      	movs	r2, #1
 800cf74:	2109      	movs	r1, #9
 800cf76:	68a0      	ldr	r0, [r4, #8]
 800cf78:	f7ff ff72 	bl	800ce60 <std>
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	2112      	movs	r1, #18
 800cf80:	68e0      	ldr	r0, [r4, #12]
 800cf82:	f7ff ff6d 	bl	800ce60 <std>
 800cf86:	2301      	movs	r3, #1
 800cf88:	61a3      	str	r3, [r4, #24]
 800cf8a:	e7d2      	b.n	800cf32 <__sinit+0xe>
 800cf8c:	0800d668 	.word	0x0800d668
 800cf90:	0800cea9 	.word	0x0800cea9

0800cf94 <__sfp>:
 800cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf96:	0007      	movs	r7, r0
 800cf98:	f7ff ffa4 	bl	800cee4 <__sfp_lock_acquire>
 800cf9c:	4b1f      	ldr	r3, [pc, #124]	; (800d01c <__sfp+0x88>)
 800cf9e:	681e      	ldr	r6, [r3, #0]
 800cfa0:	69b3      	ldr	r3, [r6, #24]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d102      	bne.n	800cfac <__sfp+0x18>
 800cfa6:	0030      	movs	r0, r6
 800cfa8:	f7ff ffbc 	bl	800cf24 <__sinit>
 800cfac:	3648      	adds	r6, #72	; 0x48
 800cfae:	68b4      	ldr	r4, [r6, #8]
 800cfb0:	6873      	ldr	r3, [r6, #4]
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	d504      	bpl.n	800cfc0 <__sfp+0x2c>
 800cfb6:	6833      	ldr	r3, [r6, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d022      	beq.n	800d002 <__sfp+0x6e>
 800cfbc:	6836      	ldr	r6, [r6, #0]
 800cfbe:	e7f6      	b.n	800cfae <__sfp+0x1a>
 800cfc0:	220c      	movs	r2, #12
 800cfc2:	5ea5      	ldrsh	r5, [r4, r2]
 800cfc4:	2d00      	cmp	r5, #0
 800cfc6:	d11a      	bne.n	800cffe <__sfp+0x6a>
 800cfc8:	0020      	movs	r0, r4
 800cfca:	4b15      	ldr	r3, [pc, #84]	; (800d020 <__sfp+0x8c>)
 800cfcc:	3058      	adds	r0, #88	; 0x58
 800cfce:	60e3      	str	r3, [r4, #12]
 800cfd0:	6665      	str	r5, [r4, #100]	; 0x64
 800cfd2:	f7ff fbfd 	bl	800c7d0 <__retarget_lock_init_recursive>
 800cfd6:	f7ff ff8d 	bl	800cef4 <__sfp_lock_release>
 800cfda:	0020      	movs	r0, r4
 800cfdc:	2208      	movs	r2, #8
 800cfde:	0029      	movs	r1, r5
 800cfe0:	6025      	str	r5, [r4, #0]
 800cfe2:	60a5      	str	r5, [r4, #8]
 800cfe4:	6065      	str	r5, [r4, #4]
 800cfe6:	6125      	str	r5, [r4, #16]
 800cfe8:	6165      	str	r5, [r4, #20]
 800cfea:	61a5      	str	r5, [r4, #24]
 800cfec:	305c      	adds	r0, #92	; 0x5c
 800cfee:	f7fb fc8e 	bl	800890e <memset>
 800cff2:	6365      	str	r5, [r4, #52]	; 0x34
 800cff4:	63a5      	str	r5, [r4, #56]	; 0x38
 800cff6:	64a5      	str	r5, [r4, #72]	; 0x48
 800cff8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800cffa:	0020      	movs	r0, r4
 800cffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cffe:	3468      	adds	r4, #104	; 0x68
 800d000:	e7d7      	b.n	800cfb2 <__sfp+0x1e>
 800d002:	2104      	movs	r1, #4
 800d004:	0038      	movs	r0, r7
 800d006:	f7ff ff57 	bl	800ceb8 <__sfmoreglue>
 800d00a:	1e04      	subs	r4, r0, #0
 800d00c:	6030      	str	r0, [r6, #0]
 800d00e:	d1d5      	bne.n	800cfbc <__sfp+0x28>
 800d010:	f7ff ff70 	bl	800cef4 <__sfp_lock_release>
 800d014:	230c      	movs	r3, #12
 800d016:	603b      	str	r3, [r7, #0]
 800d018:	e7ef      	b.n	800cffa <__sfp+0x66>
 800d01a:	46c0      	nop			; (mov r8, r8)
 800d01c:	0800d668 	.word	0x0800d668
 800d020:	ffff0001 	.word	0xffff0001

0800d024 <_fwalk_reent>:
 800d024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d026:	0004      	movs	r4, r0
 800d028:	0006      	movs	r6, r0
 800d02a:	2700      	movs	r7, #0
 800d02c:	9101      	str	r1, [sp, #4]
 800d02e:	3448      	adds	r4, #72	; 0x48
 800d030:	6863      	ldr	r3, [r4, #4]
 800d032:	68a5      	ldr	r5, [r4, #8]
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	9b00      	ldr	r3, [sp, #0]
 800d038:	3b01      	subs	r3, #1
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	d504      	bpl.n	800d048 <_fwalk_reent+0x24>
 800d03e:	6824      	ldr	r4, [r4, #0]
 800d040:	2c00      	cmp	r4, #0
 800d042:	d1f5      	bne.n	800d030 <_fwalk_reent+0xc>
 800d044:	0038      	movs	r0, r7
 800d046:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d048:	89ab      	ldrh	r3, [r5, #12]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d908      	bls.n	800d060 <_fwalk_reent+0x3c>
 800d04e:	220e      	movs	r2, #14
 800d050:	5eab      	ldrsh	r3, [r5, r2]
 800d052:	3301      	adds	r3, #1
 800d054:	d004      	beq.n	800d060 <_fwalk_reent+0x3c>
 800d056:	0029      	movs	r1, r5
 800d058:	0030      	movs	r0, r6
 800d05a:	9b01      	ldr	r3, [sp, #4]
 800d05c:	4798      	blx	r3
 800d05e:	4307      	orrs	r7, r0
 800d060:	3568      	adds	r5, #104	; 0x68
 800d062:	e7e8      	b.n	800d036 <_fwalk_reent+0x12>

0800d064 <__swhatbuf_r>:
 800d064:	b570      	push	{r4, r5, r6, lr}
 800d066:	000e      	movs	r6, r1
 800d068:	001d      	movs	r5, r3
 800d06a:	230e      	movs	r3, #14
 800d06c:	5ec9      	ldrsh	r1, [r1, r3]
 800d06e:	0014      	movs	r4, r2
 800d070:	b096      	sub	sp, #88	; 0x58
 800d072:	2900      	cmp	r1, #0
 800d074:	da08      	bge.n	800d088 <__swhatbuf_r+0x24>
 800d076:	220c      	movs	r2, #12
 800d078:	5eb3      	ldrsh	r3, [r6, r2]
 800d07a:	2200      	movs	r2, #0
 800d07c:	602a      	str	r2, [r5, #0]
 800d07e:	061b      	lsls	r3, r3, #24
 800d080:	d411      	bmi.n	800d0a6 <__swhatbuf_r+0x42>
 800d082:	2380      	movs	r3, #128	; 0x80
 800d084:	00db      	lsls	r3, r3, #3
 800d086:	e00f      	b.n	800d0a8 <__swhatbuf_r+0x44>
 800d088:	466a      	mov	r2, sp
 800d08a:	f000 f91b 	bl	800d2c4 <_fstat_r>
 800d08e:	2800      	cmp	r0, #0
 800d090:	dbf1      	blt.n	800d076 <__swhatbuf_r+0x12>
 800d092:	23f0      	movs	r3, #240	; 0xf0
 800d094:	9901      	ldr	r1, [sp, #4]
 800d096:	021b      	lsls	r3, r3, #8
 800d098:	4019      	ands	r1, r3
 800d09a:	4b05      	ldr	r3, [pc, #20]	; (800d0b0 <__swhatbuf_r+0x4c>)
 800d09c:	18c9      	adds	r1, r1, r3
 800d09e:	424b      	negs	r3, r1
 800d0a0:	4159      	adcs	r1, r3
 800d0a2:	6029      	str	r1, [r5, #0]
 800d0a4:	e7ed      	b.n	800d082 <__swhatbuf_r+0x1e>
 800d0a6:	2340      	movs	r3, #64	; 0x40
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	6023      	str	r3, [r4, #0]
 800d0ac:	b016      	add	sp, #88	; 0x58
 800d0ae:	bd70      	pop	{r4, r5, r6, pc}
 800d0b0:	ffffe000 	.word	0xffffe000

0800d0b4 <__smakebuf_r>:
 800d0b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0b6:	2602      	movs	r6, #2
 800d0b8:	898b      	ldrh	r3, [r1, #12]
 800d0ba:	0005      	movs	r5, r0
 800d0bc:	000c      	movs	r4, r1
 800d0be:	4233      	tst	r3, r6
 800d0c0:	d006      	beq.n	800d0d0 <__smakebuf_r+0x1c>
 800d0c2:	0023      	movs	r3, r4
 800d0c4:	3347      	adds	r3, #71	; 0x47
 800d0c6:	6023      	str	r3, [r4, #0]
 800d0c8:	6123      	str	r3, [r4, #16]
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	6163      	str	r3, [r4, #20]
 800d0ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d0d0:	466a      	mov	r2, sp
 800d0d2:	ab01      	add	r3, sp, #4
 800d0d4:	f7ff ffc6 	bl	800d064 <__swhatbuf_r>
 800d0d8:	9900      	ldr	r1, [sp, #0]
 800d0da:	0007      	movs	r7, r0
 800d0dc:	0028      	movs	r0, r5
 800d0de:	f7fb fc8b 	bl	80089f8 <_malloc_r>
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	d108      	bne.n	800d0f8 <__smakebuf_r+0x44>
 800d0e6:	220c      	movs	r2, #12
 800d0e8:	5ea3      	ldrsh	r3, [r4, r2]
 800d0ea:	059a      	lsls	r2, r3, #22
 800d0ec:	d4ef      	bmi.n	800d0ce <__smakebuf_r+0x1a>
 800d0ee:	2203      	movs	r2, #3
 800d0f0:	4393      	bics	r3, r2
 800d0f2:	431e      	orrs	r6, r3
 800d0f4:	81a6      	strh	r6, [r4, #12]
 800d0f6:	e7e4      	b.n	800d0c2 <__smakebuf_r+0xe>
 800d0f8:	4b0f      	ldr	r3, [pc, #60]	; (800d138 <__smakebuf_r+0x84>)
 800d0fa:	62ab      	str	r3, [r5, #40]	; 0x28
 800d0fc:	2380      	movs	r3, #128	; 0x80
 800d0fe:	89a2      	ldrh	r2, [r4, #12]
 800d100:	6020      	str	r0, [r4, #0]
 800d102:	4313      	orrs	r3, r2
 800d104:	81a3      	strh	r3, [r4, #12]
 800d106:	9b00      	ldr	r3, [sp, #0]
 800d108:	6120      	str	r0, [r4, #16]
 800d10a:	6163      	str	r3, [r4, #20]
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00d      	beq.n	800d12e <__smakebuf_r+0x7a>
 800d112:	0028      	movs	r0, r5
 800d114:	230e      	movs	r3, #14
 800d116:	5ee1      	ldrsh	r1, [r4, r3]
 800d118:	f000 f8e6 	bl	800d2e8 <_isatty_r>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d006      	beq.n	800d12e <__smakebuf_r+0x7a>
 800d120:	2203      	movs	r2, #3
 800d122:	89a3      	ldrh	r3, [r4, #12]
 800d124:	4393      	bics	r3, r2
 800d126:	001a      	movs	r2, r3
 800d128:	2301      	movs	r3, #1
 800d12a:	4313      	orrs	r3, r2
 800d12c:	81a3      	strh	r3, [r4, #12]
 800d12e:	89a0      	ldrh	r0, [r4, #12]
 800d130:	4307      	orrs	r7, r0
 800d132:	81a7      	strh	r7, [r4, #12]
 800d134:	e7cb      	b.n	800d0ce <__smakebuf_r+0x1a>
 800d136:	46c0      	nop			; (mov r8, r8)
 800d138:	0800cea9 	.word	0x0800cea9

0800d13c <_malloc_usable_size_r>:
 800d13c:	1f0b      	subs	r3, r1, #4
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	1f18      	subs	r0, r3, #4
 800d142:	2b00      	cmp	r3, #0
 800d144:	da01      	bge.n	800d14a <_malloc_usable_size_r+0xe>
 800d146:	580b      	ldr	r3, [r1, r0]
 800d148:	18c0      	adds	r0, r0, r3
 800d14a:	4770      	bx	lr

0800d14c <_raise_r>:
 800d14c:	b570      	push	{r4, r5, r6, lr}
 800d14e:	0004      	movs	r4, r0
 800d150:	000d      	movs	r5, r1
 800d152:	291f      	cmp	r1, #31
 800d154:	d904      	bls.n	800d160 <_raise_r+0x14>
 800d156:	2316      	movs	r3, #22
 800d158:	6003      	str	r3, [r0, #0]
 800d15a:	2001      	movs	r0, #1
 800d15c:	4240      	negs	r0, r0
 800d15e:	bd70      	pop	{r4, r5, r6, pc}
 800d160:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d162:	2b00      	cmp	r3, #0
 800d164:	d004      	beq.n	800d170 <_raise_r+0x24>
 800d166:	008a      	lsls	r2, r1, #2
 800d168:	189b      	adds	r3, r3, r2
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	2a00      	cmp	r2, #0
 800d16e:	d108      	bne.n	800d182 <_raise_r+0x36>
 800d170:	0020      	movs	r0, r4
 800d172:	f000 f831 	bl	800d1d8 <_getpid_r>
 800d176:	002a      	movs	r2, r5
 800d178:	0001      	movs	r1, r0
 800d17a:	0020      	movs	r0, r4
 800d17c:	f000 f81a 	bl	800d1b4 <_kill_r>
 800d180:	e7ed      	b.n	800d15e <_raise_r+0x12>
 800d182:	2000      	movs	r0, #0
 800d184:	2a01      	cmp	r2, #1
 800d186:	d0ea      	beq.n	800d15e <_raise_r+0x12>
 800d188:	1c51      	adds	r1, r2, #1
 800d18a:	d103      	bne.n	800d194 <_raise_r+0x48>
 800d18c:	2316      	movs	r3, #22
 800d18e:	3001      	adds	r0, #1
 800d190:	6023      	str	r3, [r4, #0]
 800d192:	e7e4      	b.n	800d15e <_raise_r+0x12>
 800d194:	2400      	movs	r4, #0
 800d196:	0028      	movs	r0, r5
 800d198:	601c      	str	r4, [r3, #0]
 800d19a:	4790      	blx	r2
 800d19c:	0020      	movs	r0, r4
 800d19e:	e7de      	b.n	800d15e <_raise_r+0x12>

0800d1a0 <raise>:
 800d1a0:	b510      	push	{r4, lr}
 800d1a2:	4b03      	ldr	r3, [pc, #12]	; (800d1b0 <raise+0x10>)
 800d1a4:	0001      	movs	r1, r0
 800d1a6:	6818      	ldr	r0, [r3, #0]
 800d1a8:	f7ff ffd0 	bl	800d14c <_raise_r>
 800d1ac:	bd10      	pop	{r4, pc}
 800d1ae:	46c0      	nop			; (mov r8, r8)
 800d1b0:	2000000c 	.word	0x2000000c

0800d1b4 <_kill_r>:
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	b570      	push	{r4, r5, r6, lr}
 800d1b8:	4d06      	ldr	r5, [pc, #24]	; (800d1d4 <_kill_r+0x20>)
 800d1ba:	0004      	movs	r4, r0
 800d1bc:	0008      	movs	r0, r1
 800d1be:	0011      	movs	r1, r2
 800d1c0:	602b      	str	r3, [r5, #0]
 800d1c2:	f7f7 faed 	bl	80047a0 <_kill>
 800d1c6:	1c43      	adds	r3, r0, #1
 800d1c8:	d103      	bne.n	800d1d2 <_kill_r+0x1e>
 800d1ca:	682b      	ldr	r3, [r5, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d000      	beq.n	800d1d2 <_kill_r+0x1e>
 800d1d0:	6023      	str	r3, [r4, #0]
 800d1d2:	bd70      	pop	{r4, r5, r6, pc}
 800d1d4:	20000548 	.word	0x20000548

0800d1d8 <_getpid_r>:
 800d1d8:	b510      	push	{r4, lr}
 800d1da:	f7f7 fadb 	bl	8004794 <_getpid>
 800d1de:	bd10      	pop	{r4, pc}

0800d1e0 <__sread>:
 800d1e0:	b570      	push	{r4, r5, r6, lr}
 800d1e2:	000c      	movs	r4, r1
 800d1e4:	250e      	movs	r5, #14
 800d1e6:	5f49      	ldrsh	r1, [r1, r5]
 800d1e8:	f000 f8a4 	bl	800d334 <_read_r>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	db03      	blt.n	800d1f8 <__sread+0x18>
 800d1f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d1f2:	181b      	adds	r3, r3, r0
 800d1f4:	6563      	str	r3, [r4, #84]	; 0x54
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	89a3      	ldrh	r3, [r4, #12]
 800d1fa:	4a02      	ldr	r2, [pc, #8]	; (800d204 <__sread+0x24>)
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	81a3      	strh	r3, [r4, #12]
 800d200:	e7f9      	b.n	800d1f6 <__sread+0x16>
 800d202:	46c0      	nop			; (mov r8, r8)
 800d204:	ffffefff 	.word	0xffffefff

0800d208 <__swrite>:
 800d208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20a:	001f      	movs	r7, r3
 800d20c:	898b      	ldrh	r3, [r1, #12]
 800d20e:	0005      	movs	r5, r0
 800d210:	000c      	movs	r4, r1
 800d212:	0016      	movs	r6, r2
 800d214:	05db      	lsls	r3, r3, #23
 800d216:	d505      	bpl.n	800d224 <__swrite+0x1c>
 800d218:	230e      	movs	r3, #14
 800d21a:	5ec9      	ldrsh	r1, [r1, r3]
 800d21c:	2200      	movs	r2, #0
 800d21e:	2302      	movs	r3, #2
 800d220:	f000 f874 	bl	800d30c <_lseek_r>
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	4a05      	ldr	r2, [pc, #20]	; (800d23c <__swrite+0x34>)
 800d228:	0028      	movs	r0, r5
 800d22a:	4013      	ands	r3, r2
 800d22c:	81a3      	strh	r3, [r4, #12]
 800d22e:	0032      	movs	r2, r6
 800d230:	230e      	movs	r3, #14
 800d232:	5ee1      	ldrsh	r1, [r4, r3]
 800d234:	003b      	movs	r3, r7
 800d236:	f000 f81f 	bl	800d278 <_write_r>
 800d23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d23c:	ffffefff 	.word	0xffffefff

0800d240 <__sseek>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	000c      	movs	r4, r1
 800d244:	250e      	movs	r5, #14
 800d246:	5f49      	ldrsh	r1, [r1, r5]
 800d248:	f000 f860 	bl	800d30c <_lseek_r>
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	1c42      	adds	r2, r0, #1
 800d250:	d103      	bne.n	800d25a <__sseek+0x1a>
 800d252:	4a05      	ldr	r2, [pc, #20]	; (800d268 <__sseek+0x28>)
 800d254:	4013      	ands	r3, r2
 800d256:	81a3      	strh	r3, [r4, #12]
 800d258:	bd70      	pop	{r4, r5, r6, pc}
 800d25a:	2280      	movs	r2, #128	; 0x80
 800d25c:	0152      	lsls	r2, r2, #5
 800d25e:	4313      	orrs	r3, r2
 800d260:	81a3      	strh	r3, [r4, #12]
 800d262:	6560      	str	r0, [r4, #84]	; 0x54
 800d264:	e7f8      	b.n	800d258 <__sseek+0x18>
 800d266:	46c0      	nop			; (mov r8, r8)
 800d268:	ffffefff 	.word	0xffffefff

0800d26c <__sclose>:
 800d26c:	b510      	push	{r4, lr}
 800d26e:	230e      	movs	r3, #14
 800d270:	5ec9      	ldrsh	r1, [r1, r3]
 800d272:	f000 f815 	bl	800d2a0 <_close_r>
 800d276:	bd10      	pop	{r4, pc}

0800d278 <_write_r>:
 800d278:	b570      	push	{r4, r5, r6, lr}
 800d27a:	0004      	movs	r4, r0
 800d27c:	0008      	movs	r0, r1
 800d27e:	0011      	movs	r1, r2
 800d280:	001a      	movs	r2, r3
 800d282:	2300      	movs	r3, #0
 800d284:	4d05      	ldr	r5, [pc, #20]	; (800d29c <_write_r+0x24>)
 800d286:	602b      	str	r3, [r5, #0]
 800d288:	f7f7 fac3 	bl	8004812 <_write>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d103      	bne.n	800d298 <_write_r+0x20>
 800d290:	682b      	ldr	r3, [r5, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d000      	beq.n	800d298 <_write_r+0x20>
 800d296:	6023      	str	r3, [r4, #0]
 800d298:	bd70      	pop	{r4, r5, r6, pc}
 800d29a:	46c0      	nop			; (mov r8, r8)
 800d29c:	20000548 	.word	0x20000548

0800d2a0 <_close_r>:
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	b570      	push	{r4, r5, r6, lr}
 800d2a4:	4d06      	ldr	r5, [pc, #24]	; (800d2c0 <_close_r+0x20>)
 800d2a6:	0004      	movs	r4, r0
 800d2a8:	0008      	movs	r0, r1
 800d2aa:	602b      	str	r3, [r5, #0]
 800d2ac:	f7f7 facd 	bl	800484a <_close>
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	d103      	bne.n	800d2bc <_close_r+0x1c>
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d000      	beq.n	800d2bc <_close_r+0x1c>
 800d2ba:	6023      	str	r3, [r4, #0]
 800d2bc:	bd70      	pop	{r4, r5, r6, pc}
 800d2be:	46c0      	nop			; (mov r8, r8)
 800d2c0:	20000548 	.word	0x20000548

0800d2c4 <_fstat_r>:
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	b570      	push	{r4, r5, r6, lr}
 800d2c8:	4d06      	ldr	r5, [pc, #24]	; (800d2e4 <_fstat_r+0x20>)
 800d2ca:	0004      	movs	r4, r0
 800d2cc:	0008      	movs	r0, r1
 800d2ce:	0011      	movs	r1, r2
 800d2d0:	602b      	str	r3, [r5, #0]
 800d2d2:	f7f7 fac4 	bl	800485e <_fstat>
 800d2d6:	1c43      	adds	r3, r0, #1
 800d2d8:	d103      	bne.n	800d2e2 <_fstat_r+0x1e>
 800d2da:	682b      	ldr	r3, [r5, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d000      	beq.n	800d2e2 <_fstat_r+0x1e>
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	bd70      	pop	{r4, r5, r6, pc}
 800d2e4:	20000548 	.word	0x20000548

0800d2e8 <_isatty_r>:
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	b570      	push	{r4, r5, r6, lr}
 800d2ec:	4d06      	ldr	r5, [pc, #24]	; (800d308 <_isatty_r+0x20>)
 800d2ee:	0004      	movs	r4, r0
 800d2f0:	0008      	movs	r0, r1
 800d2f2:	602b      	str	r3, [r5, #0]
 800d2f4:	f7f7 fac1 	bl	800487a <_isatty>
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	d103      	bne.n	800d304 <_isatty_r+0x1c>
 800d2fc:	682b      	ldr	r3, [r5, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d000      	beq.n	800d304 <_isatty_r+0x1c>
 800d302:	6023      	str	r3, [r4, #0]
 800d304:	bd70      	pop	{r4, r5, r6, pc}
 800d306:	46c0      	nop			; (mov r8, r8)
 800d308:	20000548 	.word	0x20000548

0800d30c <_lseek_r>:
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	0004      	movs	r4, r0
 800d310:	0008      	movs	r0, r1
 800d312:	0011      	movs	r1, r2
 800d314:	001a      	movs	r2, r3
 800d316:	2300      	movs	r3, #0
 800d318:	4d05      	ldr	r5, [pc, #20]	; (800d330 <_lseek_r+0x24>)
 800d31a:	602b      	str	r3, [r5, #0]
 800d31c:	f7f7 fab6 	bl	800488c <_lseek>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d103      	bne.n	800d32c <_lseek_r+0x20>
 800d324:	682b      	ldr	r3, [r5, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d000      	beq.n	800d32c <_lseek_r+0x20>
 800d32a:	6023      	str	r3, [r4, #0]
 800d32c:	bd70      	pop	{r4, r5, r6, pc}
 800d32e:	46c0      	nop			; (mov r8, r8)
 800d330:	20000548 	.word	0x20000548

0800d334 <_read_r>:
 800d334:	b570      	push	{r4, r5, r6, lr}
 800d336:	0004      	movs	r4, r0
 800d338:	0008      	movs	r0, r1
 800d33a:	0011      	movs	r1, r2
 800d33c:	001a      	movs	r2, r3
 800d33e:	2300      	movs	r3, #0
 800d340:	4d05      	ldr	r5, [pc, #20]	; (800d358 <_read_r+0x24>)
 800d342:	602b      	str	r3, [r5, #0]
 800d344:	f7f7 fa48 	bl	80047d8 <_read>
 800d348:	1c43      	adds	r3, r0, #1
 800d34a:	d103      	bne.n	800d354 <_read_r+0x20>
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d000      	beq.n	800d354 <_read_r+0x20>
 800d352:	6023      	str	r3, [r4, #0]
 800d354:	bd70      	pop	{r4, r5, r6, pc}
 800d356:	46c0      	nop			; (mov r8, r8)
 800d358:	20000548 	.word	0x20000548

0800d35c <_init>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	46c0      	nop			; (mov r8, r8)
 800d360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d362:	bc08      	pop	{r3}
 800d364:	469e      	mov	lr, r3
 800d366:	4770      	bx	lr

0800d368 <_fini>:
 800d368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36a:	46c0      	nop			; (mov r8, r8)
 800d36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d36e:	bc08      	pop	{r3}
 800d370:	469e      	mov	lr, r3
 800d372:	4770      	bx	lr
