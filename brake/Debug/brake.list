
brake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee8c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800ef48  0800ef48  0001ef48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6a8  0800f6a8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6a8  0800f6a8  0001f6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6b0  0800f6b0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6b0  0800f6b0  0001f6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6b4  0800f6b4  0001f6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f6b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200001e0  0800f898  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  0800f898  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c67f  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cba  00000000  00000000  0003c887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00040548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00041b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b56a  00000000  00000000  00043030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc24  00000000  00000000  0005e59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ecd  00000000  00000000  0007c1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e08b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006778  00000000  00000000  0011e0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ef30 	.word	0x0800ef30

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800ef30 	.word	0x0800ef30

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 ff8d 	bl	800236c <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fedd 	bl	800221c <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 ff7f 	bl	800236c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 ff75 	bl	800236c <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ff05 	bl	80022a0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fefb 	bl	80022a0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fcb1 	bl	8000e28 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc3d 	bl	8000d50 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fca3 	bl	8000e28 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc99 	bl	8000e28 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc49 	bl	8000d9c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc3f 	bl	8000d9c <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f876 	bl	800064c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_d2uiz>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	2200      	movs	r2, #0
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <__aeabi_d2uiz+0x38>)
 8000572:	0004      	movs	r4, r0
 8000574:	000d      	movs	r5, r1
 8000576:	f7ff ff95 	bl	80004a4 <__aeabi_dcmpge>
 800057a:	2800      	cmp	r0, #0
 800057c:	d104      	bne.n	8000588 <__aeabi_d2uiz+0x1c>
 800057e:	0020      	movs	r0, r4
 8000580:	0029      	movs	r1, r5
 8000582:	f002 fd73 	bl	800306c <__aeabi_d2iz>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <__aeabi_d2uiz+0x38>)
 800058a:	2200      	movs	r2, #0
 800058c:	0020      	movs	r0, r4
 800058e:	0029      	movs	r1, r5
 8000590:	f002 f9bc 	bl	800290c <__aeabi_dsub>
 8000594:	f002 fd6a 	bl	800306c <__aeabi_d2iz>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	061b      	lsls	r3, r3, #24
 800059c:	469c      	mov	ip, r3
 800059e:	4460      	add	r0, ip
 80005a0:	e7f1      	b.n	8000586 <__aeabi_d2uiz+0x1a>
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	41e00000 	.word	0x41e00000

080005a8 <__aeabi_d2lz>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	0005      	movs	r5, r0
 80005ac:	000c      	movs	r4, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	0028      	movs	r0, r5
 80005b4:	0021      	movs	r1, r4
 80005b6:	f7ff ff57 	bl	8000468 <__aeabi_dcmplt>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d108      	bne.n	80005d0 <__aeabi_d2lz+0x28>
 80005be:	0028      	movs	r0, r5
 80005c0:	0021      	movs	r1, r4
 80005c2:	f000 f80f 	bl	80005e4 <__aeabi_d2ulz>
 80005c6:	0002      	movs	r2, r0
 80005c8:	000b      	movs	r3, r1
 80005ca:	0010      	movs	r0, r2
 80005cc:	0019      	movs	r1, r3
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	061b      	lsls	r3, r3, #24
 80005d4:	18e1      	adds	r1, r4, r3
 80005d6:	0028      	movs	r0, r5
 80005d8:	f000 f804 	bl	80005e4 <__aeabi_d2ulz>
 80005dc:	2300      	movs	r3, #0
 80005de:	4242      	negs	r2, r0
 80005e0:	418b      	sbcs	r3, r1
 80005e2:	e7f2      	b.n	80005ca <__aeabi_d2lz+0x22>

080005e4 <__aeabi_d2ulz>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <__aeabi_d2ulz+0x34>)
 80005ea:	000d      	movs	r5, r1
 80005ec:	0004      	movs	r4, r0
 80005ee:	f001 ff21 	bl	8002434 <__aeabi_dmul>
 80005f2:	f7ff ffbb 	bl	800056c <__aeabi_d2uiz>
 80005f6:	0006      	movs	r6, r0
 80005f8:	f002 fd9e 	bl	8003138 <__aeabi_ui2d>
 80005fc:	2200      	movs	r2, #0
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <__aeabi_d2ulz+0x38>)
 8000600:	f001 ff18 	bl	8002434 <__aeabi_dmul>
 8000604:	0002      	movs	r2, r0
 8000606:	000b      	movs	r3, r1
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 f97e 	bl	800290c <__aeabi_dsub>
 8000610:	f7ff ffac 	bl	800056c <__aeabi_d2uiz>
 8000614:	0031      	movs	r1, r6
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	3df00000 	.word	0x3df00000
 800061c:	41f00000 	.word	0x41f00000

08000620 <__aeabi_l2d>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	0006      	movs	r6, r0
 8000624:	0008      	movs	r0, r1
 8000626:	f002 fd57 	bl	80030d8 <__aeabi_i2d>
 800062a:	2200      	movs	r2, #0
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <__aeabi_l2d+0x28>)
 800062e:	f001 ff01 	bl	8002434 <__aeabi_dmul>
 8000632:	000d      	movs	r5, r1
 8000634:	0004      	movs	r4, r0
 8000636:	0030      	movs	r0, r6
 8000638:	f002 fd7e 	bl	8003138 <__aeabi_ui2d>
 800063c:	002b      	movs	r3, r5
 800063e:	0022      	movs	r2, r4
 8000640:	f000 ffba 	bl	80015b8 <__aeabi_dadd>
 8000644:	bd70      	pop	{r4, r5, r6, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	41f00000 	.word	0x41f00000

0800064c <__udivmoddi4>:
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	4657      	mov	r7, sl
 8000650:	464e      	mov	r6, r9
 8000652:	4645      	mov	r5, r8
 8000654:	46de      	mov	lr, fp
 8000656:	b5e0      	push	{r5, r6, r7, lr}
 8000658:	0004      	movs	r4, r0
 800065a:	000d      	movs	r5, r1
 800065c:	4692      	mov	sl, r2
 800065e:	4699      	mov	r9, r3
 8000660:	b083      	sub	sp, #12
 8000662:	428b      	cmp	r3, r1
 8000664:	d830      	bhi.n	80006c8 <__udivmoddi4+0x7c>
 8000666:	d02d      	beq.n	80006c4 <__udivmoddi4+0x78>
 8000668:	4649      	mov	r1, r9
 800066a:	4650      	mov	r0, sl
 800066c:	f002 fe78 	bl	8003360 <__clzdi2>
 8000670:	0029      	movs	r1, r5
 8000672:	0006      	movs	r6, r0
 8000674:	0020      	movs	r0, r4
 8000676:	f002 fe73 	bl	8003360 <__clzdi2>
 800067a:	1a33      	subs	r3, r6, r0
 800067c:	4698      	mov	r8, r3
 800067e:	3b20      	subs	r3, #32
 8000680:	469b      	mov	fp, r3
 8000682:	d433      	bmi.n	80006ec <__udivmoddi4+0xa0>
 8000684:	465a      	mov	r2, fp
 8000686:	4653      	mov	r3, sl
 8000688:	4093      	lsls	r3, r2
 800068a:	4642      	mov	r2, r8
 800068c:	001f      	movs	r7, r3
 800068e:	4653      	mov	r3, sl
 8000690:	4093      	lsls	r3, r2
 8000692:	001e      	movs	r6, r3
 8000694:	42af      	cmp	r7, r5
 8000696:	d83a      	bhi.n	800070e <__udivmoddi4+0xc2>
 8000698:	42af      	cmp	r7, r5
 800069a:	d100      	bne.n	800069e <__udivmoddi4+0x52>
 800069c:	e078      	b.n	8000790 <__udivmoddi4+0x144>
 800069e:	465b      	mov	r3, fp
 80006a0:	1ba4      	subs	r4, r4, r6
 80006a2:	41bd      	sbcs	r5, r7
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da00      	bge.n	80006aa <__udivmoddi4+0x5e>
 80006a8:	e075      	b.n	8000796 <__udivmoddi4+0x14a>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2300      	movs	r3, #0
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2301      	movs	r3, #1
 80006b4:	465a      	mov	r2, fp
 80006b6:	4093      	lsls	r3, r2
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2301      	movs	r3, #1
 80006bc:	4642      	mov	r2, r8
 80006be:	4093      	lsls	r3, r2
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	e028      	b.n	8000716 <__udivmoddi4+0xca>
 80006c4:	4282      	cmp	r2, r0
 80006c6:	d9cf      	bls.n	8000668 <__udivmoddi4+0x1c>
 80006c8:	2200      	movs	r2, #0
 80006ca:	2300      	movs	r3, #0
 80006cc:	9200      	str	r2, [sp, #0]
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <__udivmoddi4+0x8e>
 80006d6:	601c      	str	r4, [r3, #0]
 80006d8:	605d      	str	r5, [r3, #4]
 80006da:	9800      	ldr	r0, [sp, #0]
 80006dc:	9901      	ldr	r1, [sp, #4]
 80006de:	b003      	add	sp, #12
 80006e0:	bcf0      	pop	{r4, r5, r6, r7}
 80006e2:	46bb      	mov	fp, r7
 80006e4:	46b2      	mov	sl, r6
 80006e6:	46a9      	mov	r9, r5
 80006e8:	46a0      	mov	r8, r4
 80006ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ec:	4642      	mov	r2, r8
 80006ee:	2320      	movs	r3, #32
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	4652      	mov	r2, sl
 80006f4:	40da      	lsrs	r2, r3
 80006f6:	4641      	mov	r1, r8
 80006f8:	0013      	movs	r3, r2
 80006fa:	464a      	mov	r2, r9
 80006fc:	408a      	lsls	r2, r1
 80006fe:	0017      	movs	r7, r2
 8000700:	4642      	mov	r2, r8
 8000702:	431f      	orrs	r7, r3
 8000704:	4653      	mov	r3, sl
 8000706:	4093      	lsls	r3, r2
 8000708:	001e      	movs	r6, r3
 800070a:	42af      	cmp	r7, r5
 800070c:	d9c4      	bls.n	8000698 <__udivmoddi4+0x4c>
 800070e:	2200      	movs	r2, #0
 8000710:	2300      	movs	r3, #0
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	4643      	mov	r3, r8
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0d9      	beq.n	80006d0 <__udivmoddi4+0x84>
 800071c:	07fb      	lsls	r3, r7, #31
 800071e:	0872      	lsrs	r2, r6, #1
 8000720:	431a      	orrs	r2, r3
 8000722:	4646      	mov	r6, r8
 8000724:	087b      	lsrs	r3, r7, #1
 8000726:	e00e      	b.n	8000746 <__udivmoddi4+0xfa>
 8000728:	42ab      	cmp	r3, r5
 800072a:	d101      	bne.n	8000730 <__udivmoddi4+0xe4>
 800072c:	42a2      	cmp	r2, r4
 800072e:	d80c      	bhi.n	800074a <__udivmoddi4+0xfe>
 8000730:	1aa4      	subs	r4, r4, r2
 8000732:	419d      	sbcs	r5, r3
 8000734:	2001      	movs	r0, #1
 8000736:	1924      	adds	r4, r4, r4
 8000738:	416d      	adcs	r5, r5
 800073a:	2100      	movs	r1, #0
 800073c:	3e01      	subs	r6, #1
 800073e:	1824      	adds	r4, r4, r0
 8000740:	414d      	adcs	r5, r1
 8000742:	2e00      	cmp	r6, #0
 8000744:	d006      	beq.n	8000754 <__udivmoddi4+0x108>
 8000746:	42ab      	cmp	r3, r5
 8000748:	d9ee      	bls.n	8000728 <__udivmoddi4+0xdc>
 800074a:	3e01      	subs	r6, #1
 800074c:	1924      	adds	r4, r4, r4
 800074e:	416d      	adcs	r5, r5
 8000750:	2e00      	cmp	r6, #0
 8000752:	d1f8      	bne.n	8000746 <__udivmoddi4+0xfa>
 8000754:	9800      	ldr	r0, [sp, #0]
 8000756:	9901      	ldr	r1, [sp, #4]
 8000758:	465b      	mov	r3, fp
 800075a:	1900      	adds	r0, r0, r4
 800075c:	4169      	adcs	r1, r5
 800075e:	2b00      	cmp	r3, #0
 8000760:	db24      	blt.n	80007ac <__udivmoddi4+0x160>
 8000762:	002b      	movs	r3, r5
 8000764:	465a      	mov	r2, fp
 8000766:	4644      	mov	r4, r8
 8000768:	40d3      	lsrs	r3, r2
 800076a:	002a      	movs	r2, r5
 800076c:	40e2      	lsrs	r2, r4
 800076e:	001c      	movs	r4, r3
 8000770:	465b      	mov	r3, fp
 8000772:	0015      	movs	r5, r2
 8000774:	2b00      	cmp	r3, #0
 8000776:	db2a      	blt.n	80007ce <__udivmoddi4+0x182>
 8000778:	0026      	movs	r6, r4
 800077a:	409e      	lsls	r6, r3
 800077c:	0033      	movs	r3, r6
 800077e:	0026      	movs	r6, r4
 8000780:	4647      	mov	r7, r8
 8000782:	40be      	lsls	r6, r7
 8000784:	0032      	movs	r2, r6
 8000786:	1a80      	subs	r0, r0, r2
 8000788:	4199      	sbcs	r1, r3
 800078a:	9000      	str	r0, [sp, #0]
 800078c:	9101      	str	r1, [sp, #4]
 800078e:	e79f      	b.n	80006d0 <__udivmoddi4+0x84>
 8000790:	42a3      	cmp	r3, r4
 8000792:	d8bc      	bhi.n	800070e <__udivmoddi4+0xc2>
 8000794:	e783      	b.n	800069e <__udivmoddi4+0x52>
 8000796:	4642      	mov	r2, r8
 8000798:	2320      	movs	r3, #32
 800079a:	2100      	movs	r1, #0
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	2200      	movs	r2, #0
 80007a0:	9100      	str	r1, [sp, #0]
 80007a2:	9201      	str	r2, [sp, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	40da      	lsrs	r2, r3
 80007a8:	9201      	str	r2, [sp, #4]
 80007aa:	e786      	b.n	80006ba <__udivmoddi4+0x6e>
 80007ac:	4642      	mov	r2, r8
 80007ae:	2320      	movs	r3, #32
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	002a      	movs	r2, r5
 80007b4:	4646      	mov	r6, r8
 80007b6:	409a      	lsls	r2, r3
 80007b8:	0023      	movs	r3, r4
 80007ba:	40f3      	lsrs	r3, r6
 80007bc:	4644      	mov	r4, r8
 80007be:	4313      	orrs	r3, r2
 80007c0:	002a      	movs	r2, r5
 80007c2:	40e2      	lsrs	r2, r4
 80007c4:	001c      	movs	r4, r3
 80007c6:	465b      	mov	r3, fp
 80007c8:	0015      	movs	r5, r2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dad4      	bge.n	8000778 <__udivmoddi4+0x12c>
 80007ce:	4642      	mov	r2, r8
 80007d0:	002f      	movs	r7, r5
 80007d2:	2320      	movs	r3, #32
 80007d4:	0026      	movs	r6, r4
 80007d6:	4097      	lsls	r7, r2
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	40de      	lsrs	r6, r3
 80007dc:	003b      	movs	r3, r7
 80007de:	4333      	orrs	r3, r6
 80007e0:	e7cd      	b.n	800077e <__udivmoddi4+0x132>
 80007e2:	46c0      	nop			; (mov r8, r8)

080007e4 <__aeabi_fadd>:
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	46c6      	mov	lr, r8
 80007e8:	0243      	lsls	r3, r0, #9
 80007ea:	0a5b      	lsrs	r3, r3, #9
 80007ec:	024e      	lsls	r6, r1, #9
 80007ee:	0045      	lsls	r5, r0, #1
 80007f0:	004f      	lsls	r7, r1, #1
 80007f2:	00da      	lsls	r2, r3, #3
 80007f4:	0fc4      	lsrs	r4, r0, #31
 80007f6:	469c      	mov	ip, r3
 80007f8:	0a70      	lsrs	r0, r6, #9
 80007fa:	4690      	mov	r8, r2
 80007fc:	b500      	push	{lr}
 80007fe:	0e2d      	lsrs	r5, r5, #24
 8000800:	0e3f      	lsrs	r7, r7, #24
 8000802:	0fc9      	lsrs	r1, r1, #31
 8000804:	09b6      	lsrs	r6, r6, #6
 8000806:	428c      	cmp	r4, r1
 8000808:	d04b      	beq.n	80008a2 <__aeabi_fadd+0xbe>
 800080a:	1bea      	subs	r2, r5, r7
 800080c:	2a00      	cmp	r2, #0
 800080e:	dd36      	ble.n	800087e <__aeabi_fadd+0x9a>
 8000810:	2f00      	cmp	r7, #0
 8000812:	d061      	beq.n	80008d8 <__aeabi_fadd+0xf4>
 8000814:	2dff      	cmp	r5, #255	; 0xff
 8000816:	d100      	bne.n	800081a <__aeabi_fadd+0x36>
 8000818:	e0ad      	b.n	8000976 <__aeabi_fadd+0x192>
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	04db      	lsls	r3, r3, #19
 800081e:	431e      	orrs	r6, r3
 8000820:	2a1b      	cmp	r2, #27
 8000822:	dc00      	bgt.n	8000826 <__aeabi_fadd+0x42>
 8000824:	e0d3      	b.n	80009ce <__aeabi_fadd+0x1ea>
 8000826:	2001      	movs	r0, #1
 8000828:	4643      	mov	r3, r8
 800082a:	1a18      	subs	r0, r3, r0
 800082c:	0143      	lsls	r3, r0, #5
 800082e:	d400      	bmi.n	8000832 <__aeabi_fadd+0x4e>
 8000830:	e08c      	b.n	800094c <__aeabi_fadd+0x168>
 8000832:	0180      	lsls	r0, r0, #6
 8000834:	0987      	lsrs	r7, r0, #6
 8000836:	0038      	movs	r0, r7
 8000838:	f002 fd74 	bl	8003324 <__clzsi2>
 800083c:	3805      	subs	r0, #5
 800083e:	4087      	lsls	r7, r0
 8000840:	4285      	cmp	r5, r0
 8000842:	dc00      	bgt.n	8000846 <__aeabi_fadd+0x62>
 8000844:	e0b6      	b.n	80009b4 <__aeabi_fadd+0x1d0>
 8000846:	1a2d      	subs	r5, r5, r0
 8000848:	48b3      	ldr	r0, [pc, #716]	; (8000b18 <__aeabi_fadd+0x334>)
 800084a:	4038      	ands	r0, r7
 800084c:	0743      	lsls	r3, r0, #29
 800084e:	d004      	beq.n	800085a <__aeabi_fadd+0x76>
 8000850:	230f      	movs	r3, #15
 8000852:	4003      	ands	r3, r0
 8000854:	2b04      	cmp	r3, #4
 8000856:	d000      	beq.n	800085a <__aeabi_fadd+0x76>
 8000858:	3004      	adds	r0, #4
 800085a:	0143      	lsls	r3, r0, #5
 800085c:	d400      	bmi.n	8000860 <__aeabi_fadd+0x7c>
 800085e:	e078      	b.n	8000952 <__aeabi_fadd+0x16e>
 8000860:	1c6a      	adds	r2, r5, #1
 8000862:	2dfe      	cmp	r5, #254	; 0xfe
 8000864:	d065      	beq.n	8000932 <__aeabi_fadd+0x14e>
 8000866:	0180      	lsls	r0, r0, #6
 8000868:	0a43      	lsrs	r3, r0, #9
 800086a:	469c      	mov	ip, r3
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	4663      	mov	r3, ip
 8000870:	05d0      	lsls	r0, r2, #23
 8000872:	4318      	orrs	r0, r3
 8000874:	07e4      	lsls	r4, r4, #31
 8000876:	4320      	orrs	r0, r4
 8000878:	bc80      	pop	{r7}
 800087a:	46b8      	mov	r8, r7
 800087c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087e:	2a00      	cmp	r2, #0
 8000880:	d035      	beq.n	80008ee <__aeabi_fadd+0x10a>
 8000882:	1b7a      	subs	r2, r7, r5
 8000884:	2d00      	cmp	r5, #0
 8000886:	d000      	beq.n	800088a <__aeabi_fadd+0xa6>
 8000888:	e0af      	b.n	80009ea <__aeabi_fadd+0x206>
 800088a:	4643      	mov	r3, r8
 800088c:	2b00      	cmp	r3, #0
 800088e:	d100      	bne.n	8000892 <__aeabi_fadd+0xae>
 8000890:	e0a7      	b.n	80009e2 <__aeabi_fadd+0x1fe>
 8000892:	1e53      	subs	r3, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d100      	bne.n	800089a <__aeabi_fadd+0xb6>
 8000898:	e12f      	b.n	8000afa <__aeabi_fadd+0x316>
 800089a:	2aff      	cmp	r2, #255	; 0xff
 800089c:	d069      	beq.n	8000972 <__aeabi_fadd+0x18e>
 800089e:	001a      	movs	r2, r3
 80008a0:	e0aa      	b.n	80009f8 <__aeabi_fadd+0x214>
 80008a2:	1be9      	subs	r1, r5, r7
 80008a4:	2900      	cmp	r1, #0
 80008a6:	dd70      	ble.n	800098a <__aeabi_fadd+0x1a6>
 80008a8:	2f00      	cmp	r7, #0
 80008aa:	d037      	beq.n	800091c <__aeabi_fadd+0x138>
 80008ac:	2dff      	cmp	r5, #255	; 0xff
 80008ae:	d062      	beq.n	8000976 <__aeabi_fadd+0x192>
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	04db      	lsls	r3, r3, #19
 80008b4:	431e      	orrs	r6, r3
 80008b6:	291b      	cmp	r1, #27
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_fadd+0xd8>
 80008ba:	e0b0      	b.n	8000a1e <__aeabi_fadd+0x23a>
 80008bc:	2001      	movs	r0, #1
 80008be:	4440      	add	r0, r8
 80008c0:	0143      	lsls	r3, r0, #5
 80008c2:	d543      	bpl.n	800094c <__aeabi_fadd+0x168>
 80008c4:	3501      	adds	r5, #1
 80008c6:	2dff      	cmp	r5, #255	; 0xff
 80008c8:	d033      	beq.n	8000932 <__aeabi_fadd+0x14e>
 80008ca:	2301      	movs	r3, #1
 80008cc:	4a93      	ldr	r2, [pc, #588]	; (8000b1c <__aeabi_fadd+0x338>)
 80008ce:	4003      	ands	r3, r0
 80008d0:	0840      	lsrs	r0, r0, #1
 80008d2:	4010      	ands	r0, r2
 80008d4:	4318      	orrs	r0, r3
 80008d6:	e7b9      	b.n	800084c <__aeabi_fadd+0x68>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fadd+0xfa>
 80008dc:	e083      	b.n	80009e6 <__aeabi_fadd+0x202>
 80008de:	1e51      	subs	r1, r2, #1
 80008e0:	2a01      	cmp	r2, #1
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fadd+0x102>
 80008e4:	e0d8      	b.n	8000a98 <__aeabi_fadd+0x2b4>
 80008e6:	2aff      	cmp	r2, #255	; 0xff
 80008e8:	d045      	beq.n	8000976 <__aeabi_fadd+0x192>
 80008ea:	000a      	movs	r2, r1
 80008ec:	e798      	b.n	8000820 <__aeabi_fadd+0x3c>
 80008ee:	27fe      	movs	r7, #254	; 0xfe
 80008f0:	1c6a      	adds	r2, r5, #1
 80008f2:	4217      	tst	r7, r2
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fadd+0x114>
 80008f6:	e086      	b.n	8000a06 <__aeabi_fadd+0x222>
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d000      	beq.n	80008fe <__aeabi_fadd+0x11a>
 80008fc:	e0b7      	b.n	8000a6e <__aeabi_fadd+0x28a>
 80008fe:	4643      	mov	r3, r8
 8000900:	2b00      	cmp	r3, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x122>
 8000904:	e0f3      	b.n	8000aee <__aeabi_fadd+0x30a>
 8000906:	2200      	movs	r2, #0
 8000908:	2e00      	cmp	r6, #0
 800090a:	d0b0      	beq.n	800086e <__aeabi_fadd+0x8a>
 800090c:	1b98      	subs	r0, r3, r6
 800090e:	0143      	lsls	r3, r0, #5
 8000910:	d400      	bmi.n	8000914 <__aeabi_fadd+0x130>
 8000912:	e0fa      	b.n	8000b0a <__aeabi_fadd+0x326>
 8000914:	4643      	mov	r3, r8
 8000916:	000c      	movs	r4, r1
 8000918:	1af0      	subs	r0, r6, r3
 800091a:	e797      	b.n	800084c <__aeabi_fadd+0x68>
 800091c:	2e00      	cmp	r6, #0
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x13e>
 8000920:	e0c8      	b.n	8000ab4 <__aeabi_fadd+0x2d0>
 8000922:	1e4a      	subs	r2, r1, #1
 8000924:	2901      	cmp	r1, #1
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x146>
 8000928:	e0ae      	b.n	8000a88 <__aeabi_fadd+0x2a4>
 800092a:	29ff      	cmp	r1, #255	; 0xff
 800092c:	d023      	beq.n	8000976 <__aeabi_fadd+0x192>
 800092e:	0011      	movs	r1, r2
 8000930:	e7c1      	b.n	80008b6 <__aeabi_fadd+0xd2>
 8000932:	2300      	movs	r3, #0
 8000934:	22ff      	movs	r2, #255	; 0xff
 8000936:	469c      	mov	ip, r3
 8000938:	e799      	b.n	800086e <__aeabi_fadd+0x8a>
 800093a:	21fe      	movs	r1, #254	; 0xfe
 800093c:	1c6a      	adds	r2, r5, #1
 800093e:	4211      	tst	r1, r2
 8000940:	d077      	beq.n	8000a32 <__aeabi_fadd+0x24e>
 8000942:	2aff      	cmp	r2, #255	; 0xff
 8000944:	d0f5      	beq.n	8000932 <__aeabi_fadd+0x14e>
 8000946:	0015      	movs	r5, r2
 8000948:	4446      	add	r6, r8
 800094a:	0870      	lsrs	r0, r6, #1
 800094c:	0743      	lsls	r3, r0, #29
 800094e:	d000      	beq.n	8000952 <__aeabi_fadd+0x16e>
 8000950:	e77e      	b.n	8000850 <__aeabi_fadd+0x6c>
 8000952:	08c3      	lsrs	r3, r0, #3
 8000954:	2dff      	cmp	r5, #255	; 0xff
 8000956:	d00e      	beq.n	8000976 <__aeabi_fadd+0x192>
 8000958:	025b      	lsls	r3, r3, #9
 800095a:	0a5b      	lsrs	r3, r3, #9
 800095c:	469c      	mov	ip, r3
 800095e:	b2ea      	uxtb	r2, r5
 8000960:	e785      	b.n	800086e <__aeabi_fadd+0x8a>
 8000962:	2e00      	cmp	r6, #0
 8000964:	d007      	beq.n	8000976 <__aeabi_fadd+0x192>
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	03d2      	lsls	r2, r2, #15
 800096a:	4213      	tst	r3, r2
 800096c:	d003      	beq.n	8000976 <__aeabi_fadd+0x192>
 800096e:	4210      	tst	r0, r2
 8000970:	d101      	bne.n	8000976 <__aeabi_fadd+0x192>
 8000972:	000c      	movs	r4, r1
 8000974:	0003      	movs	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0db      	beq.n	8000932 <__aeabi_fadd+0x14e>
 800097a:	2080      	movs	r0, #128	; 0x80
 800097c:	03c0      	lsls	r0, r0, #15
 800097e:	4318      	orrs	r0, r3
 8000980:	0240      	lsls	r0, r0, #9
 8000982:	0a43      	lsrs	r3, r0, #9
 8000984:	469c      	mov	ip, r3
 8000986:	22ff      	movs	r2, #255	; 0xff
 8000988:	e771      	b.n	800086e <__aeabi_fadd+0x8a>
 800098a:	2900      	cmp	r1, #0
 800098c:	d0d5      	beq.n	800093a <__aeabi_fadd+0x156>
 800098e:	1b7a      	subs	r2, r7, r5
 8000990:	2d00      	cmp	r5, #0
 8000992:	d160      	bne.n	8000a56 <__aeabi_fadd+0x272>
 8000994:	4643      	mov	r3, r8
 8000996:	2b00      	cmp	r3, #0
 8000998:	d024      	beq.n	80009e4 <__aeabi_fadd+0x200>
 800099a:	1e53      	subs	r3, r2, #1
 800099c:	2a01      	cmp	r2, #1
 800099e:	d073      	beq.n	8000a88 <__aeabi_fadd+0x2a4>
 80009a0:	2aff      	cmp	r2, #255	; 0xff
 80009a2:	d0e7      	beq.n	8000974 <__aeabi_fadd+0x190>
 80009a4:	001a      	movs	r2, r3
 80009a6:	2a1b      	cmp	r2, #27
 80009a8:	dc00      	bgt.n	80009ac <__aeabi_fadd+0x1c8>
 80009aa:	e085      	b.n	8000ab8 <__aeabi_fadd+0x2d4>
 80009ac:	2001      	movs	r0, #1
 80009ae:	003d      	movs	r5, r7
 80009b0:	1980      	adds	r0, r0, r6
 80009b2:	e785      	b.n	80008c0 <__aeabi_fadd+0xdc>
 80009b4:	2320      	movs	r3, #32
 80009b6:	003a      	movs	r2, r7
 80009b8:	1b45      	subs	r5, r0, r5
 80009ba:	0038      	movs	r0, r7
 80009bc:	3501      	adds	r5, #1
 80009be:	40ea      	lsrs	r2, r5
 80009c0:	1b5d      	subs	r5, r3, r5
 80009c2:	40a8      	lsls	r0, r5
 80009c4:	1e43      	subs	r3, r0, #1
 80009c6:	4198      	sbcs	r0, r3
 80009c8:	2500      	movs	r5, #0
 80009ca:	4310      	orrs	r0, r2
 80009cc:	e73e      	b.n	800084c <__aeabi_fadd+0x68>
 80009ce:	2320      	movs	r3, #32
 80009d0:	0030      	movs	r0, r6
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	0031      	movs	r1, r6
 80009d6:	4098      	lsls	r0, r3
 80009d8:	40d1      	lsrs	r1, r2
 80009da:	1e43      	subs	r3, r0, #1
 80009dc:	4198      	sbcs	r0, r3
 80009de:	4308      	orrs	r0, r1
 80009e0:	e722      	b.n	8000828 <__aeabi_fadd+0x44>
 80009e2:	000c      	movs	r4, r1
 80009e4:	0003      	movs	r3, r0
 80009e6:	0015      	movs	r5, r2
 80009e8:	e7b4      	b.n	8000954 <__aeabi_fadd+0x170>
 80009ea:	2fff      	cmp	r7, #255	; 0xff
 80009ec:	d0c1      	beq.n	8000972 <__aeabi_fadd+0x18e>
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	4640      	mov	r0, r8
 80009f2:	04db      	lsls	r3, r3, #19
 80009f4:	4318      	orrs	r0, r3
 80009f6:	4680      	mov	r8, r0
 80009f8:	2a1b      	cmp	r2, #27
 80009fa:	dd51      	ble.n	8000aa0 <__aeabi_fadd+0x2bc>
 80009fc:	2001      	movs	r0, #1
 80009fe:	000c      	movs	r4, r1
 8000a00:	003d      	movs	r5, r7
 8000a02:	1a30      	subs	r0, r6, r0
 8000a04:	e712      	b.n	800082c <__aeabi_fadd+0x48>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1b9f      	subs	r7, r3, r6
 8000a0a:	017b      	lsls	r3, r7, #5
 8000a0c:	d42b      	bmi.n	8000a66 <__aeabi_fadd+0x282>
 8000a0e:	2f00      	cmp	r7, #0
 8000a10:	d000      	beq.n	8000a14 <__aeabi_fadd+0x230>
 8000a12:	e710      	b.n	8000836 <__aeabi_fadd+0x52>
 8000a14:	2300      	movs	r3, #0
 8000a16:	2400      	movs	r4, #0
 8000a18:	2200      	movs	r2, #0
 8000a1a:	469c      	mov	ip, r3
 8000a1c:	e727      	b.n	800086e <__aeabi_fadd+0x8a>
 8000a1e:	2320      	movs	r3, #32
 8000a20:	0032      	movs	r2, r6
 8000a22:	0030      	movs	r0, r6
 8000a24:	40ca      	lsrs	r2, r1
 8000a26:	1a59      	subs	r1, r3, r1
 8000a28:	4088      	lsls	r0, r1
 8000a2a:	1e43      	subs	r3, r0, #1
 8000a2c:	4198      	sbcs	r0, r3
 8000a2e:	4310      	orrs	r0, r2
 8000a30:	e745      	b.n	80008be <__aeabi_fadd+0xda>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d14a      	bne.n	8000acc <__aeabi_fadd+0x2e8>
 8000a36:	4643      	mov	r3, r8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d063      	beq.n	8000b04 <__aeabi_fadd+0x320>
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fadd+0x260>
 8000a42:	e714      	b.n	800086e <__aeabi_fadd+0x8a>
 8000a44:	0030      	movs	r0, r6
 8000a46:	4440      	add	r0, r8
 8000a48:	0143      	lsls	r3, r0, #5
 8000a4a:	d400      	bmi.n	8000a4e <__aeabi_fadd+0x26a>
 8000a4c:	e77e      	b.n	800094c <__aeabi_fadd+0x168>
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <__aeabi_fadd+0x334>)
 8000a50:	3501      	adds	r5, #1
 8000a52:	4018      	ands	r0, r3
 8000a54:	e77a      	b.n	800094c <__aeabi_fadd+0x168>
 8000a56:	2fff      	cmp	r7, #255	; 0xff
 8000a58:	d08c      	beq.n	8000974 <__aeabi_fadd+0x190>
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	4641      	mov	r1, r8
 8000a5e:	04db      	lsls	r3, r3, #19
 8000a60:	4319      	orrs	r1, r3
 8000a62:	4688      	mov	r8, r1
 8000a64:	e79f      	b.n	80009a6 <__aeabi_fadd+0x1c2>
 8000a66:	4643      	mov	r3, r8
 8000a68:	000c      	movs	r4, r1
 8000a6a:	1af7      	subs	r7, r6, r3
 8000a6c:	e6e3      	b.n	8000836 <__aeabi_fadd+0x52>
 8000a6e:	4642      	mov	r2, r8
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	d000      	beq.n	8000a76 <__aeabi_fadd+0x292>
 8000a74:	e775      	b.n	8000962 <__aeabi_fadd+0x17e>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d000      	beq.n	8000a7c <__aeabi_fadd+0x298>
 8000a7a:	e77a      	b.n	8000972 <__aeabi_fadd+0x18e>
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	03db      	lsls	r3, r3, #15
 8000a80:	2400      	movs	r4, #0
 8000a82:	469c      	mov	ip, r3
 8000a84:	22ff      	movs	r2, #255	; 0xff
 8000a86:	e6f2      	b.n	800086e <__aeabi_fadd+0x8a>
 8000a88:	0030      	movs	r0, r6
 8000a8a:	4440      	add	r0, r8
 8000a8c:	2501      	movs	r5, #1
 8000a8e:	0143      	lsls	r3, r0, #5
 8000a90:	d400      	bmi.n	8000a94 <__aeabi_fadd+0x2b0>
 8000a92:	e75b      	b.n	800094c <__aeabi_fadd+0x168>
 8000a94:	2502      	movs	r5, #2
 8000a96:	e718      	b.n	80008ca <__aeabi_fadd+0xe6>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	2501      	movs	r5, #1
 8000a9c:	1b98      	subs	r0, r3, r6
 8000a9e:	e6c5      	b.n	800082c <__aeabi_fadd+0x48>
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	4644      	mov	r4, r8
 8000aa4:	4640      	mov	r0, r8
 8000aa6:	40d4      	lsrs	r4, r2
 8000aa8:	1a9a      	subs	r2, r3, r2
 8000aaa:	4090      	lsls	r0, r2
 8000aac:	1e43      	subs	r3, r0, #1
 8000aae:	4198      	sbcs	r0, r3
 8000ab0:	4320      	orrs	r0, r4
 8000ab2:	e7a4      	b.n	80009fe <__aeabi_fadd+0x21a>
 8000ab4:	000d      	movs	r5, r1
 8000ab6:	e74d      	b.n	8000954 <__aeabi_fadd+0x170>
 8000ab8:	2320      	movs	r3, #32
 8000aba:	4641      	mov	r1, r8
 8000abc:	4640      	mov	r0, r8
 8000abe:	40d1      	lsrs	r1, r2
 8000ac0:	1a9a      	subs	r2, r3, r2
 8000ac2:	4090      	lsls	r0, r2
 8000ac4:	1e43      	subs	r3, r0, #1
 8000ac6:	4198      	sbcs	r0, r3
 8000ac8:	4308      	orrs	r0, r1
 8000aca:	e770      	b.n	80009ae <__aeabi_fadd+0x1ca>
 8000acc:	4642      	mov	r2, r8
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_fadd+0x2f0>
 8000ad2:	e74f      	b.n	8000974 <__aeabi_fadd+0x190>
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_fadd+0x2f6>
 8000ad8:	e74d      	b.n	8000976 <__aeabi_fadd+0x192>
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	03d2      	lsls	r2, r2, #15
 8000ade:	4213      	tst	r3, r2
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_fadd+0x300>
 8000ae2:	e748      	b.n	8000976 <__aeabi_fadd+0x192>
 8000ae4:	4210      	tst	r0, r2
 8000ae6:	d000      	beq.n	8000aea <__aeabi_fadd+0x306>
 8000ae8:	e745      	b.n	8000976 <__aeabi_fadd+0x192>
 8000aea:	0003      	movs	r3, r0
 8000aec:	e743      	b.n	8000976 <__aeabi_fadd+0x192>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d090      	beq.n	8000a14 <__aeabi_fadd+0x230>
 8000af2:	000c      	movs	r4, r1
 8000af4:	4684      	mov	ip, r0
 8000af6:	2200      	movs	r2, #0
 8000af8:	e6b9      	b.n	800086e <__aeabi_fadd+0x8a>
 8000afa:	4643      	mov	r3, r8
 8000afc:	000c      	movs	r4, r1
 8000afe:	1af0      	subs	r0, r6, r3
 8000b00:	3501      	adds	r5, #1
 8000b02:	e693      	b.n	800082c <__aeabi_fadd+0x48>
 8000b04:	4684      	mov	ip, r0
 8000b06:	2200      	movs	r2, #0
 8000b08:	e6b1      	b.n	800086e <__aeabi_fadd+0x8a>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fadd+0x32c>
 8000b0e:	e71d      	b.n	800094c <__aeabi_fadd+0x168>
 8000b10:	2300      	movs	r3, #0
 8000b12:	2400      	movs	r4, #0
 8000b14:	469c      	mov	ip, r3
 8000b16:	e6aa      	b.n	800086e <__aeabi_fadd+0x8a>
 8000b18:	fbffffff 	.word	0xfbffffff
 8000b1c:	7dffffff 	.word	0x7dffffff

08000b20 <__aeabi_fdiv>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	464f      	mov	r7, r9
 8000b24:	4646      	mov	r6, r8
 8000b26:	46d6      	mov	lr, sl
 8000b28:	0245      	lsls	r5, r0, #9
 8000b2a:	b5c0      	push	{r6, r7, lr}
 8000b2c:	0047      	lsls	r7, r0, #1
 8000b2e:	1c0c      	adds	r4, r1, #0
 8000b30:	0a6d      	lsrs	r5, r5, #9
 8000b32:	0e3f      	lsrs	r7, r7, #24
 8000b34:	0fc6      	lsrs	r6, r0, #31
 8000b36:	2f00      	cmp	r7, #0
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fdiv+0x1c>
 8000b3a:	e070      	b.n	8000c1e <__aeabi_fdiv+0xfe>
 8000b3c:	2fff      	cmp	r7, #255	; 0xff
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_fdiv+0x22>
 8000b40:	e075      	b.n	8000c2e <__aeabi_fdiv+0x10e>
 8000b42:	00eb      	lsls	r3, r5, #3
 8000b44:	2580      	movs	r5, #128	; 0x80
 8000b46:	04ed      	lsls	r5, r5, #19
 8000b48:	431d      	orrs	r5, r3
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	469a      	mov	sl, r3
 8000b50:	3f7f      	subs	r7, #127	; 0x7f
 8000b52:	0260      	lsls	r0, r4, #9
 8000b54:	0a43      	lsrs	r3, r0, #9
 8000b56:	4698      	mov	r8, r3
 8000b58:	0063      	lsls	r3, r4, #1
 8000b5a:	0e1b      	lsrs	r3, r3, #24
 8000b5c:	0fe4      	lsrs	r4, r4, #31
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d04e      	beq.n	8000c00 <__aeabi_fdiv+0xe0>
 8000b62:	2bff      	cmp	r3, #255	; 0xff
 8000b64:	d046      	beq.n	8000bf4 <__aeabi_fdiv+0xd4>
 8000b66:	4642      	mov	r2, r8
 8000b68:	00d0      	lsls	r0, r2, #3
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	04d2      	lsls	r2, r2, #19
 8000b6e:	4302      	orrs	r2, r0
 8000b70:	4690      	mov	r8, r2
 8000b72:	2200      	movs	r2, #0
 8000b74:	3b7f      	subs	r3, #127	; 0x7f
 8000b76:	0031      	movs	r1, r6
 8000b78:	1aff      	subs	r7, r7, r3
 8000b7a:	464b      	mov	r3, r9
 8000b7c:	4061      	eors	r1, r4
 8000b7e:	b2c9      	uxtb	r1, r1
 8000b80:	4313      	orrs	r3, r2
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	d900      	bls.n	8000b88 <__aeabi_fdiv+0x68>
 8000b86:	e0b5      	b.n	8000cf4 <__aeabi_fdiv+0x1d4>
 8000b88:	486e      	ldr	r0, [pc, #440]	; (8000d44 <__aeabi_fdiv+0x224>)
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	58c3      	ldr	r3, [r0, r3]
 8000b8e:	469f      	mov	pc, r3
 8000b90:	2300      	movs	r3, #0
 8000b92:	4698      	mov	r8, r3
 8000b94:	0026      	movs	r6, r4
 8000b96:	4645      	mov	r5, r8
 8000b98:	4692      	mov	sl, r2
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_fdiv+0x82>
 8000ba0:	e089      	b.n	8000cb6 <__aeabi_fdiv+0x196>
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fdiv+0x88>
 8000ba6:	e09e      	b.n	8000ce6 <__aeabi_fdiv+0x1c6>
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d018      	beq.n	8000bde <__aeabi_fdiv+0xbe>
 8000bac:	003b      	movs	r3, r7
 8000bae:	337f      	adds	r3, #127	; 0x7f
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	dd69      	ble.n	8000c88 <__aeabi_fdiv+0x168>
 8000bb4:	076a      	lsls	r2, r5, #29
 8000bb6:	d004      	beq.n	8000bc2 <__aeabi_fdiv+0xa2>
 8000bb8:	220f      	movs	r2, #15
 8000bba:	402a      	ands	r2, r5
 8000bbc:	2a04      	cmp	r2, #4
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_fdiv+0xa2>
 8000bc0:	3504      	adds	r5, #4
 8000bc2:	012a      	lsls	r2, r5, #4
 8000bc4:	d503      	bpl.n	8000bce <__aeabi_fdiv+0xae>
 8000bc6:	4b60      	ldr	r3, [pc, #384]	; (8000d48 <__aeabi_fdiv+0x228>)
 8000bc8:	401d      	ands	r5, r3
 8000bca:	003b      	movs	r3, r7
 8000bcc:	3380      	adds	r3, #128	; 0x80
 8000bce:	2bfe      	cmp	r3, #254	; 0xfe
 8000bd0:	dd00      	ble.n	8000bd4 <__aeabi_fdiv+0xb4>
 8000bd2:	e070      	b.n	8000cb6 <__aeabi_fdiv+0x196>
 8000bd4:	01ad      	lsls	r5, r5, #6
 8000bd6:	0a6d      	lsrs	r5, r5, #9
 8000bd8:	b2d8      	uxtb	r0, r3
 8000bda:	e002      	b.n	8000be2 <__aeabi_fdiv+0xc2>
 8000bdc:	000e      	movs	r6, r1
 8000bde:	2000      	movs	r0, #0
 8000be0:	2500      	movs	r5, #0
 8000be2:	05c0      	lsls	r0, r0, #23
 8000be4:	4328      	orrs	r0, r5
 8000be6:	07f6      	lsls	r6, r6, #31
 8000be8:	4330      	orrs	r0, r6
 8000bea:	bce0      	pop	{r5, r6, r7}
 8000bec:	46ba      	mov	sl, r7
 8000bee:	46b1      	mov	r9, r6
 8000bf0:	46a8      	mov	r8, r5
 8000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d13f      	bne.n	8000c7a <__aeabi_fdiv+0x15a>
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	3fff      	subs	r7, #255	; 0xff
 8000bfe:	e003      	b.n	8000c08 <__aeabi_fdiv+0xe8>
 8000c00:	4643      	mov	r3, r8
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d12d      	bne.n	8000c62 <__aeabi_fdiv+0x142>
 8000c06:	2201      	movs	r2, #1
 8000c08:	0031      	movs	r1, r6
 8000c0a:	464b      	mov	r3, r9
 8000c0c:	4061      	eors	r1, r4
 8000c0e:	b2c9      	uxtb	r1, r1
 8000c10:	4313      	orrs	r3, r2
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d834      	bhi.n	8000c80 <__aeabi_fdiv+0x160>
 8000c16:	484d      	ldr	r0, [pc, #308]	; (8000d4c <__aeabi_fdiv+0x22c>)
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	58c3      	ldr	r3, [r0, r3]
 8000c1c:	469f      	mov	pc, r3
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	d113      	bne.n	8000c4a <__aeabi_fdiv+0x12a>
 8000c22:	2304      	movs	r3, #4
 8000c24:	4699      	mov	r9, r3
 8000c26:	3b03      	subs	r3, #3
 8000c28:	2700      	movs	r7, #0
 8000c2a:	469a      	mov	sl, r3
 8000c2c:	e791      	b.n	8000b52 <__aeabi_fdiv+0x32>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d105      	bne.n	8000c3e <__aeabi_fdiv+0x11e>
 8000c32:	2308      	movs	r3, #8
 8000c34:	4699      	mov	r9, r3
 8000c36:	3b06      	subs	r3, #6
 8000c38:	27ff      	movs	r7, #255	; 0xff
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	e789      	b.n	8000b52 <__aeabi_fdiv+0x32>
 8000c3e:	230c      	movs	r3, #12
 8000c40:	4699      	mov	r9, r3
 8000c42:	3b09      	subs	r3, #9
 8000c44:	27ff      	movs	r7, #255	; 0xff
 8000c46:	469a      	mov	sl, r3
 8000c48:	e783      	b.n	8000b52 <__aeabi_fdiv+0x32>
 8000c4a:	0028      	movs	r0, r5
 8000c4c:	f002 fb6a 	bl	8003324 <__clzsi2>
 8000c50:	2776      	movs	r7, #118	; 0x76
 8000c52:	1f43      	subs	r3, r0, #5
 8000c54:	409d      	lsls	r5, r3
 8000c56:	2300      	movs	r3, #0
 8000c58:	427f      	negs	r7, r7
 8000c5a:	4699      	mov	r9, r3
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	1a3f      	subs	r7, r7, r0
 8000c60:	e777      	b.n	8000b52 <__aeabi_fdiv+0x32>
 8000c62:	4640      	mov	r0, r8
 8000c64:	f002 fb5e 	bl	8003324 <__clzsi2>
 8000c68:	4642      	mov	r2, r8
 8000c6a:	1f43      	subs	r3, r0, #5
 8000c6c:	409a      	lsls	r2, r3
 8000c6e:	2376      	movs	r3, #118	; 0x76
 8000c70:	425b      	negs	r3, r3
 8000c72:	4690      	mov	r8, r2
 8000c74:	1a1b      	subs	r3, r3, r0
 8000c76:	2200      	movs	r2, #0
 8000c78:	e77d      	b.n	8000b76 <__aeabi_fdiv+0x56>
 8000c7a:	23ff      	movs	r3, #255	; 0xff
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	e77a      	b.n	8000b76 <__aeabi_fdiv+0x56>
 8000c80:	000e      	movs	r6, r1
 8000c82:	20ff      	movs	r0, #255	; 0xff
 8000c84:	2500      	movs	r5, #0
 8000c86:	e7ac      	b.n	8000be2 <__aeabi_fdiv+0xc2>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	1ac0      	subs	r0, r0, r3
 8000c8c:	281b      	cmp	r0, #27
 8000c8e:	dca6      	bgt.n	8000bde <__aeabi_fdiv+0xbe>
 8000c90:	379e      	adds	r7, #158	; 0x9e
 8000c92:	002a      	movs	r2, r5
 8000c94:	40bd      	lsls	r5, r7
 8000c96:	40c2      	lsrs	r2, r0
 8000c98:	1e6b      	subs	r3, r5, #1
 8000c9a:	419d      	sbcs	r5, r3
 8000c9c:	4315      	orrs	r5, r2
 8000c9e:	076b      	lsls	r3, r5, #29
 8000ca0:	d004      	beq.n	8000cac <__aeabi_fdiv+0x18c>
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	402b      	ands	r3, r5
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d000      	beq.n	8000cac <__aeabi_fdiv+0x18c>
 8000caa:	3504      	adds	r5, #4
 8000cac:	016b      	lsls	r3, r5, #5
 8000cae:	d544      	bpl.n	8000d3a <__aeabi_fdiv+0x21a>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	e795      	b.n	8000be2 <__aeabi_fdiv+0xc2>
 8000cb6:	20ff      	movs	r0, #255	; 0xff
 8000cb8:	2500      	movs	r5, #0
 8000cba:	e792      	b.n	8000be2 <__aeabi_fdiv+0xc2>
 8000cbc:	2580      	movs	r5, #128	; 0x80
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	20ff      	movs	r0, #255	; 0xff
 8000cc2:	03ed      	lsls	r5, r5, #15
 8000cc4:	e78d      	b.n	8000be2 <__aeabi_fdiv+0xc2>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	4698      	mov	r8, r3
 8000cca:	2080      	movs	r0, #128	; 0x80
 8000ccc:	03c0      	lsls	r0, r0, #15
 8000cce:	4205      	tst	r5, r0
 8000cd0:	d009      	beq.n	8000ce6 <__aeabi_fdiv+0x1c6>
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	4203      	tst	r3, r0
 8000cd6:	d106      	bne.n	8000ce6 <__aeabi_fdiv+0x1c6>
 8000cd8:	4645      	mov	r5, r8
 8000cda:	4305      	orrs	r5, r0
 8000cdc:	026d      	lsls	r5, r5, #9
 8000cde:	0026      	movs	r6, r4
 8000ce0:	20ff      	movs	r0, #255	; 0xff
 8000ce2:	0a6d      	lsrs	r5, r5, #9
 8000ce4:	e77d      	b.n	8000be2 <__aeabi_fdiv+0xc2>
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	03c0      	lsls	r0, r0, #15
 8000cea:	4305      	orrs	r5, r0
 8000cec:	026d      	lsls	r5, r5, #9
 8000cee:	20ff      	movs	r0, #255	; 0xff
 8000cf0:	0a6d      	lsrs	r5, r5, #9
 8000cf2:	e776      	b.n	8000be2 <__aeabi_fdiv+0xc2>
 8000cf4:	4642      	mov	r2, r8
 8000cf6:	016b      	lsls	r3, r5, #5
 8000cf8:	0150      	lsls	r0, r2, #5
 8000cfa:	4283      	cmp	r3, r0
 8000cfc:	d219      	bcs.n	8000d32 <__aeabi_fdiv+0x212>
 8000cfe:	221b      	movs	r2, #27
 8000d00:	2500      	movs	r5, #0
 8000d02:	3f01      	subs	r7, #1
 8000d04:	2601      	movs	r6, #1
 8000d06:	001c      	movs	r4, r3
 8000d08:	006d      	lsls	r5, r5, #1
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2c00      	cmp	r4, #0
 8000d0e:	db01      	blt.n	8000d14 <__aeabi_fdiv+0x1f4>
 8000d10:	4298      	cmp	r0, r3
 8000d12:	d801      	bhi.n	8000d18 <__aeabi_fdiv+0x1f8>
 8000d14:	1a1b      	subs	r3, r3, r0
 8000d16:	4335      	orrs	r5, r6
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	d1f3      	bne.n	8000d06 <__aeabi_fdiv+0x1e6>
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	4193      	sbcs	r3, r2
 8000d22:	431d      	orrs	r5, r3
 8000d24:	003b      	movs	r3, r7
 8000d26:	337f      	adds	r3, #127	; 0x7f
 8000d28:	000e      	movs	r6, r1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dd00      	ble.n	8000d30 <__aeabi_fdiv+0x210>
 8000d2e:	e741      	b.n	8000bb4 <__aeabi_fdiv+0x94>
 8000d30:	e7aa      	b.n	8000c88 <__aeabi_fdiv+0x168>
 8000d32:	221a      	movs	r2, #26
 8000d34:	2501      	movs	r5, #1
 8000d36:	1a1b      	subs	r3, r3, r0
 8000d38:	e7e4      	b.n	8000d04 <__aeabi_fdiv+0x1e4>
 8000d3a:	01ad      	lsls	r5, r5, #6
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	0a6d      	lsrs	r5, r5, #9
 8000d40:	e74f      	b.n	8000be2 <__aeabi_fdiv+0xc2>
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	0800ef88 	.word	0x0800ef88
 8000d48:	f7ffffff 	.word	0xf7ffffff
 8000d4c:	0800efc8 	.word	0x0800efc8

08000d50 <__eqsf2>:
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	0042      	lsls	r2, r0, #1
 8000d54:	0245      	lsls	r5, r0, #9
 8000d56:	024e      	lsls	r6, r1, #9
 8000d58:	004c      	lsls	r4, r1, #1
 8000d5a:	0fc3      	lsrs	r3, r0, #31
 8000d5c:	0a6d      	lsrs	r5, r5, #9
 8000d5e:	2001      	movs	r0, #1
 8000d60:	0e12      	lsrs	r2, r2, #24
 8000d62:	0a76      	lsrs	r6, r6, #9
 8000d64:	0e24      	lsrs	r4, r4, #24
 8000d66:	0fc9      	lsrs	r1, r1, #31
 8000d68:	2aff      	cmp	r2, #255	; 0xff
 8000d6a:	d006      	beq.n	8000d7a <__eqsf2+0x2a>
 8000d6c:	2cff      	cmp	r4, #255	; 0xff
 8000d6e:	d003      	beq.n	8000d78 <__eqsf2+0x28>
 8000d70:	42a2      	cmp	r2, r4
 8000d72:	d101      	bne.n	8000d78 <__eqsf2+0x28>
 8000d74:	42b5      	cmp	r5, r6
 8000d76:	d006      	beq.n	8000d86 <__eqsf2+0x36>
 8000d78:	bd70      	pop	{r4, r5, r6, pc}
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d1fc      	bne.n	8000d78 <__eqsf2+0x28>
 8000d7e:	2cff      	cmp	r4, #255	; 0xff
 8000d80:	d1fa      	bne.n	8000d78 <__eqsf2+0x28>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d1f8      	bne.n	8000d78 <__eqsf2+0x28>
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d006      	beq.n	8000d98 <__eqsf2+0x48>
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	d1f3      	bne.n	8000d78 <__eqsf2+0x28>
 8000d90:	0028      	movs	r0, r5
 8000d92:	1e43      	subs	r3, r0, #1
 8000d94:	4198      	sbcs	r0, r3
 8000d96:	e7ef      	b.n	8000d78 <__eqsf2+0x28>
 8000d98:	2000      	movs	r0, #0
 8000d9a:	e7ed      	b.n	8000d78 <__eqsf2+0x28>

08000d9c <__gesf2>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	0245      	lsls	r5, r0, #9
 8000da2:	024e      	lsls	r6, r1, #9
 8000da4:	004c      	lsls	r4, r1, #1
 8000da6:	0fc3      	lsrs	r3, r0, #31
 8000da8:	0a6d      	lsrs	r5, r5, #9
 8000daa:	0e12      	lsrs	r2, r2, #24
 8000dac:	0a76      	lsrs	r6, r6, #9
 8000dae:	0e24      	lsrs	r4, r4, #24
 8000db0:	0fc8      	lsrs	r0, r1, #31
 8000db2:	2aff      	cmp	r2, #255	; 0xff
 8000db4:	d01b      	beq.n	8000dee <__gesf2+0x52>
 8000db6:	2cff      	cmp	r4, #255	; 0xff
 8000db8:	d00e      	beq.n	8000dd8 <__gesf2+0x3c>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d11b      	bne.n	8000df6 <__gesf2+0x5a>
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	d101      	bne.n	8000dc6 <__gesf2+0x2a>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d01c      	beq.n	8000e00 <__gesf2+0x64>
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d00c      	beq.n	8000de4 <__gesf2+0x48>
 8000dca:	4283      	cmp	r3, r0
 8000dcc:	d01c      	beq.n	8000e08 <__gesf2+0x6c>
 8000dce:	2102      	movs	r1, #2
 8000dd0:	1e58      	subs	r0, r3, #1
 8000dd2:	4008      	ands	r0, r1
 8000dd4:	3801      	subs	r0, #1
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d122      	bne.n	8000e22 <__gesf2+0x86>
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	d1f4      	bne.n	8000dca <__gesf2+0x2e>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d1f2      	bne.n	8000dca <__gesf2+0x2e>
 8000de4:	2800      	cmp	r0, #0
 8000de6:	d1f6      	bne.n	8000dd6 <__gesf2+0x3a>
 8000de8:	2001      	movs	r0, #1
 8000dea:	4240      	negs	r0, r0
 8000dec:	e7f3      	b.n	8000dd6 <__gesf2+0x3a>
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d117      	bne.n	8000e22 <__gesf2+0x86>
 8000df2:	2cff      	cmp	r4, #255	; 0xff
 8000df4:	d0f0      	beq.n	8000dd8 <__gesf2+0x3c>
 8000df6:	2c00      	cmp	r4, #0
 8000df8:	d1e7      	bne.n	8000dca <__gesf2+0x2e>
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d1e5      	bne.n	8000dca <__gesf2+0x2e>
 8000dfe:	e7e6      	b.n	8000dce <__gesf2+0x32>
 8000e00:	2000      	movs	r0, #0
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e7      	beq.n	8000dd6 <__gesf2+0x3a>
 8000e06:	e7e2      	b.n	8000dce <__gesf2+0x32>
 8000e08:	42a2      	cmp	r2, r4
 8000e0a:	dc05      	bgt.n	8000e18 <__gesf2+0x7c>
 8000e0c:	dbea      	blt.n	8000de4 <__gesf2+0x48>
 8000e0e:	42b5      	cmp	r5, r6
 8000e10:	d802      	bhi.n	8000e18 <__gesf2+0x7c>
 8000e12:	d3e7      	bcc.n	8000de4 <__gesf2+0x48>
 8000e14:	2000      	movs	r0, #0
 8000e16:	e7de      	b.n	8000dd6 <__gesf2+0x3a>
 8000e18:	4243      	negs	r3, r0
 8000e1a:	4158      	adcs	r0, r3
 8000e1c:	0040      	lsls	r0, r0, #1
 8000e1e:	3801      	subs	r0, #1
 8000e20:	e7d9      	b.n	8000dd6 <__gesf2+0x3a>
 8000e22:	2002      	movs	r0, #2
 8000e24:	4240      	negs	r0, r0
 8000e26:	e7d6      	b.n	8000dd6 <__gesf2+0x3a>

08000e28 <__lesf2>:
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	0042      	lsls	r2, r0, #1
 8000e2c:	0245      	lsls	r5, r0, #9
 8000e2e:	024e      	lsls	r6, r1, #9
 8000e30:	004c      	lsls	r4, r1, #1
 8000e32:	0fc3      	lsrs	r3, r0, #31
 8000e34:	0a6d      	lsrs	r5, r5, #9
 8000e36:	0e12      	lsrs	r2, r2, #24
 8000e38:	0a76      	lsrs	r6, r6, #9
 8000e3a:	0e24      	lsrs	r4, r4, #24
 8000e3c:	0fc8      	lsrs	r0, r1, #31
 8000e3e:	2aff      	cmp	r2, #255	; 0xff
 8000e40:	d00b      	beq.n	8000e5a <__lesf2+0x32>
 8000e42:	2cff      	cmp	r4, #255	; 0xff
 8000e44:	d00d      	beq.n	8000e62 <__lesf2+0x3a>
 8000e46:	2a00      	cmp	r2, #0
 8000e48:	d11f      	bne.n	8000e8a <__lesf2+0x62>
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	d116      	bne.n	8000e7c <__lesf2+0x54>
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	d114      	bne.n	8000e7c <__lesf2+0x54>
 8000e52:	2000      	movs	r0, #0
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d010      	beq.n	8000e7a <__lesf2+0x52>
 8000e58:	e009      	b.n	8000e6e <__lesf2+0x46>
 8000e5a:	2d00      	cmp	r5, #0
 8000e5c:	d10c      	bne.n	8000e78 <__lesf2+0x50>
 8000e5e:	2cff      	cmp	r4, #255	; 0xff
 8000e60:	d113      	bne.n	8000e8a <__lesf2+0x62>
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d108      	bne.n	8000e78 <__lesf2+0x50>
 8000e66:	2a00      	cmp	r2, #0
 8000e68:	d008      	beq.n	8000e7c <__lesf2+0x54>
 8000e6a:	4283      	cmp	r3, r0
 8000e6c:	d012      	beq.n	8000e94 <__lesf2+0x6c>
 8000e6e:	2102      	movs	r1, #2
 8000e70:	1e58      	subs	r0, r3, #1
 8000e72:	4008      	ands	r0, r1
 8000e74:	3801      	subs	r0, #1
 8000e76:	e000      	b.n	8000e7a <__lesf2+0x52>
 8000e78:	2002      	movs	r0, #2
 8000e7a:	bd70      	pop	{r4, r5, r6, pc}
 8000e7c:	2d00      	cmp	r5, #0
 8000e7e:	d1f4      	bne.n	8000e6a <__lesf2+0x42>
 8000e80:	2800      	cmp	r0, #0
 8000e82:	d1fa      	bne.n	8000e7a <__lesf2+0x52>
 8000e84:	2001      	movs	r0, #1
 8000e86:	4240      	negs	r0, r0
 8000e88:	e7f7      	b.n	8000e7a <__lesf2+0x52>
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d1ed      	bne.n	8000e6a <__lesf2+0x42>
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d1eb      	bne.n	8000e6a <__lesf2+0x42>
 8000e92:	e7ec      	b.n	8000e6e <__lesf2+0x46>
 8000e94:	42a2      	cmp	r2, r4
 8000e96:	dc05      	bgt.n	8000ea4 <__lesf2+0x7c>
 8000e98:	dbf2      	blt.n	8000e80 <__lesf2+0x58>
 8000e9a:	42b5      	cmp	r5, r6
 8000e9c:	d802      	bhi.n	8000ea4 <__lesf2+0x7c>
 8000e9e:	d3ef      	bcc.n	8000e80 <__lesf2+0x58>
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	e7ea      	b.n	8000e7a <__lesf2+0x52>
 8000ea4:	4243      	negs	r3, r0
 8000ea6:	4158      	adcs	r0, r3
 8000ea8:	0040      	lsls	r0, r0, #1
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7e5      	b.n	8000e7a <__lesf2+0x52>
 8000eae:	46c0      	nop			; (mov r8, r8)

08000eb0 <__aeabi_fmul>:
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb2:	464f      	mov	r7, r9
 8000eb4:	4646      	mov	r6, r8
 8000eb6:	46d6      	mov	lr, sl
 8000eb8:	0244      	lsls	r4, r0, #9
 8000eba:	0045      	lsls	r5, r0, #1
 8000ebc:	b5c0      	push	{r6, r7, lr}
 8000ebe:	0a64      	lsrs	r4, r4, #9
 8000ec0:	1c0f      	adds	r7, r1, #0
 8000ec2:	0e2d      	lsrs	r5, r5, #24
 8000ec4:	0fc6      	lsrs	r6, r0, #31
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fmul+0x1c>
 8000eca:	e08d      	b.n	8000fe8 <__aeabi_fmul+0x138>
 8000ecc:	2dff      	cmp	r5, #255	; 0xff
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fmul+0x22>
 8000ed0:	e092      	b.n	8000ff8 <__aeabi_fmul+0x148>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	2080      	movs	r0, #128	; 0x80
 8000ed6:	4699      	mov	r9, r3
 8000ed8:	469a      	mov	sl, r3
 8000eda:	00e4      	lsls	r4, r4, #3
 8000edc:	04c0      	lsls	r0, r0, #19
 8000ede:	4304      	orrs	r4, r0
 8000ee0:	3d7f      	subs	r5, #127	; 0x7f
 8000ee2:	0278      	lsls	r0, r7, #9
 8000ee4:	0a43      	lsrs	r3, r0, #9
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	007b      	lsls	r3, r7, #1
 8000eea:	0e1b      	lsrs	r3, r3, #24
 8000eec:	0fff      	lsrs	r7, r7, #31
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_fmul+0x44>
 8000ef2:	e070      	b.n	8000fd6 <__aeabi_fmul+0x126>
 8000ef4:	2bff      	cmp	r3, #255	; 0xff
 8000ef6:	d100      	bne.n	8000efa <__aeabi_fmul+0x4a>
 8000ef8:	e086      	b.n	8001008 <__aeabi_fmul+0x158>
 8000efa:	4642      	mov	r2, r8
 8000efc:	00d0      	lsls	r0, r2, #3
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	3b7f      	subs	r3, #127	; 0x7f
 8000f02:	18ed      	adds	r5, r5, r3
 8000f04:	2300      	movs	r3, #0
 8000f06:	04d2      	lsls	r2, r2, #19
 8000f08:	4302      	orrs	r2, r0
 8000f0a:	4690      	mov	r8, r2
 8000f0c:	469c      	mov	ip, r3
 8000f0e:	0031      	movs	r1, r6
 8000f10:	464b      	mov	r3, r9
 8000f12:	4079      	eors	r1, r7
 8000f14:	1c68      	adds	r0, r5, #1
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	d81c      	bhi.n	8000f54 <__aeabi_fmul+0xa4>
 8000f1a:	4a76      	ldr	r2, [pc, #472]	; (80010f4 <__aeabi_fmul+0x244>)
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	58d3      	ldr	r3, [r2, r3]
 8000f20:	469f      	mov	pc, r3
 8000f22:	0039      	movs	r1, r7
 8000f24:	4644      	mov	r4, r8
 8000f26:	46e2      	mov	sl, ip
 8000f28:	4653      	mov	r3, sl
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d00f      	beq.n	8000f4e <__aeabi_fmul+0x9e>
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d100      	bne.n	8000f34 <__aeabi_fmul+0x84>
 8000f32:	e0d7      	b.n	80010e4 <__aeabi_fmul+0x234>
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d137      	bne.n	8000fa8 <__aeabi_fmul+0xf8>
 8000f38:	2000      	movs	r0, #0
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	05c0      	lsls	r0, r0, #23
 8000f3e:	4320      	orrs	r0, r4
 8000f40:	07c9      	lsls	r1, r1, #31
 8000f42:	4308      	orrs	r0, r1
 8000f44:	bce0      	pop	{r5, r6, r7}
 8000f46:	46ba      	mov	sl, r7
 8000f48:	46b1      	mov	r9, r6
 8000f4a:	46a8      	mov	r8, r5
 8000f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4e:	20ff      	movs	r0, #255	; 0xff
 8000f50:	2400      	movs	r4, #0
 8000f52:	e7f3      	b.n	8000f3c <__aeabi_fmul+0x8c>
 8000f54:	0c26      	lsrs	r6, r4, #16
 8000f56:	0424      	lsls	r4, r4, #16
 8000f58:	0c22      	lsrs	r2, r4, #16
 8000f5a:	4644      	mov	r4, r8
 8000f5c:	0424      	lsls	r4, r4, #16
 8000f5e:	0c24      	lsrs	r4, r4, #16
 8000f60:	4643      	mov	r3, r8
 8000f62:	0027      	movs	r7, r4
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	4357      	muls	r7, r2
 8000f68:	4374      	muls	r4, r6
 8000f6a:	435a      	muls	r2, r3
 8000f6c:	435e      	muls	r6, r3
 8000f6e:	1912      	adds	r2, r2, r4
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	189b      	adds	r3, r3, r2
 8000f74:	429c      	cmp	r4, r3
 8000f76:	d903      	bls.n	8000f80 <__aeabi_fmul+0xd0>
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	0252      	lsls	r2, r2, #9
 8000f7c:	4694      	mov	ip, r2
 8000f7e:	4466      	add	r6, ip
 8000f80:	043f      	lsls	r7, r7, #16
 8000f82:	041a      	lsls	r2, r3, #16
 8000f84:	0c3f      	lsrs	r7, r7, #16
 8000f86:	19d2      	adds	r2, r2, r7
 8000f88:	0194      	lsls	r4, r2, #6
 8000f8a:	1e67      	subs	r7, r4, #1
 8000f8c:	41bc      	sbcs	r4, r7
 8000f8e:	0c1b      	lsrs	r3, r3, #16
 8000f90:	0e92      	lsrs	r2, r2, #26
 8000f92:	199b      	adds	r3, r3, r6
 8000f94:	4314      	orrs	r4, r2
 8000f96:	019b      	lsls	r3, r3, #6
 8000f98:	431c      	orrs	r4, r3
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	d400      	bmi.n	8000fa0 <__aeabi_fmul+0xf0>
 8000f9e:	e09b      	b.n	80010d8 <__aeabi_fmul+0x228>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	0862      	lsrs	r2, r4, #1
 8000fa4:	401c      	ands	r4, r3
 8000fa6:	4314      	orrs	r4, r2
 8000fa8:	0002      	movs	r2, r0
 8000faa:	327f      	adds	r2, #127	; 0x7f
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	dd64      	ble.n	800107a <__aeabi_fmul+0x1ca>
 8000fb0:	0763      	lsls	r3, r4, #29
 8000fb2:	d004      	beq.n	8000fbe <__aeabi_fmul+0x10e>
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	4023      	ands	r3, r4
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fmul+0x10e>
 8000fbc:	3404      	adds	r4, #4
 8000fbe:	0123      	lsls	r3, r4, #4
 8000fc0:	d503      	bpl.n	8000fca <__aeabi_fmul+0x11a>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <__aeabi_fmul+0x248>)
 8000fc6:	3280      	adds	r2, #128	; 0x80
 8000fc8:	401c      	ands	r4, r3
 8000fca:	2afe      	cmp	r2, #254	; 0xfe
 8000fcc:	dcbf      	bgt.n	8000f4e <__aeabi_fmul+0x9e>
 8000fce:	01a4      	lsls	r4, r4, #6
 8000fd0:	0a64      	lsrs	r4, r4, #9
 8000fd2:	b2d0      	uxtb	r0, r2
 8000fd4:	e7b2      	b.n	8000f3c <__aeabi_fmul+0x8c>
 8000fd6:	4643      	mov	r3, r8
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d13d      	bne.n	8001058 <__aeabi_fmul+0x1a8>
 8000fdc:	464a      	mov	r2, r9
 8000fde:	3301      	adds	r3, #1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	4691      	mov	r9, r2
 8000fe4:	469c      	mov	ip, r3
 8000fe6:	e792      	b.n	8000f0e <__aeabi_fmul+0x5e>
 8000fe8:	2c00      	cmp	r4, #0
 8000fea:	d129      	bne.n	8001040 <__aeabi_fmul+0x190>
 8000fec:	2304      	movs	r3, #4
 8000fee:	4699      	mov	r9, r3
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	469a      	mov	sl, r3
 8000ff6:	e774      	b.n	8000ee2 <__aeabi_fmul+0x32>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d11b      	bne.n	8001034 <__aeabi_fmul+0x184>
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	4699      	mov	r9, r3
 8001000:	3b06      	subs	r3, #6
 8001002:	25ff      	movs	r5, #255	; 0xff
 8001004:	469a      	mov	sl, r3
 8001006:	e76c      	b.n	8000ee2 <__aeabi_fmul+0x32>
 8001008:	4643      	mov	r3, r8
 800100a:	35ff      	adds	r5, #255	; 0xff
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10b      	bne.n	8001028 <__aeabi_fmul+0x178>
 8001010:	2302      	movs	r3, #2
 8001012:	464a      	mov	r2, r9
 8001014:	431a      	orrs	r2, r3
 8001016:	4691      	mov	r9, r2
 8001018:	469c      	mov	ip, r3
 800101a:	e778      	b.n	8000f0e <__aeabi_fmul+0x5e>
 800101c:	4653      	mov	r3, sl
 800101e:	0031      	movs	r1, r6
 8001020:	2b02      	cmp	r3, #2
 8001022:	d000      	beq.n	8001026 <__aeabi_fmul+0x176>
 8001024:	e783      	b.n	8000f2e <__aeabi_fmul+0x7e>
 8001026:	e792      	b.n	8000f4e <__aeabi_fmul+0x9e>
 8001028:	2303      	movs	r3, #3
 800102a:	464a      	mov	r2, r9
 800102c:	431a      	orrs	r2, r3
 800102e:	4691      	mov	r9, r2
 8001030:	469c      	mov	ip, r3
 8001032:	e76c      	b.n	8000f0e <__aeabi_fmul+0x5e>
 8001034:	230c      	movs	r3, #12
 8001036:	4699      	mov	r9, r3
 8001038:	3b09      	subs	r3, #9
 800103a:	25ff      	movs	r5, #255	; 0xff
 800103c:	469a      	mov	sl, r3
 800103e:	e750      	b.n	8000ee2 <__aeabi_fmul+0x32>
 8001040:	0020      	movs	r0, r4
 8001042:	f002 f96f 	bl	8003324 <__clzsi2>
 8001046:	2576      	movs	r5, #118	; 0x76
 8001048:	1f43      	subs	r3, r0, #5
 800104a:	409c      	lsls	r4, r3
 800104c:	2300      	movs	r3, #0
 800104e:	426d      	negs	r5, r5
 8001050:	4699      	mov	r9, r3
 8001052:	469a      	mov	sl, r3
 8001054:	1a2d      	subs	r5, r5, r0
 8001056:	e744      	b.n	8000ee2 <__aeabi_fmul+0x32>
 8001058:	4640      	mov	r0, r8
 800105a:	f002 f963 	bl	8003324 <__clzsi2>
 800105e:	4642      	mov	r2, r8
 8001060:	1f43      	subs	r3, r0, #5
 8001062:	409a      	lsls	r2, r3
 8001064:	2300      	movs	r3, #0
 8001066:	1a2d      	subs	r5, r5, r0
 8001068:	4690      	mov	r8, r2
 800106a:	469c      	mov	ip, r3
 800106c:	3d76      	subs	r5, #118	; 0x76
 800106e:	e74e      	b.n	8000f0e <__aeabi_fmul+0x5e>
 8001070:	2480      	movs	r4, #128	; 0x80
 8001072:	2100      	movs	r1, #0
 8001074:	20ff      	movs	r0, #255	; 0xff
 8001076:	03e4      	lsls	r4, r4, #15
 8001078:	e760      	b.n	8000f3c <__aeabi_fmul+0x8c>
 800107a:	2301      	movs	r3, #1
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	2b1b      	cmp	r3, #27
 8001080:	dd00      	ble.n	8001084 <__aeabi_fmul+0x1d4>
 8001082:	e759      	b.n	8000f38 <__aeabi_fmul+0x88>
 8001084:	0022      	movs	r2, r4
 8001086:	309e      	adds	r0, #158	; 0x9e
 8001088:	40da      	lsrs	r2, r3
 800108a:	4084      	lsls	r4, r0
 800108c:	0013      	movs	r3, r2
 800108e:	1e62      	subs	r2, r4, #1
 8001090:	4194      	sbcs	r4, r2
 8001092:	431c      	orrs	r4, r3
 8001094:	0763      	lsls	r3, r4, #29
 8001096:	d004      	beq.n	80010a2 <__aeabi_fmul+0x1f2>
 8001098:	230f      	movs	r3, #15
 800109a:	4023      	ands	r3, r4
 800109c:	2b04      	cmp	r3, #4
 800109e:	d000      	beq.n	80010a2 <__aeabi_fmul+0x1f2>
 80010a0:	3404      	adds	r4, #4
 80010a2:	0163      	lsls	r3, r4, #5
 80010a4:	d51a      	bpl.n	80010dc <__aeabi_fmul+0x22c>
 80010a6:	2001      	movs	r0, #1
 80010a8:	2400      	movs	r4, #0
 80010aa:	e747      	b.n	8000f3c <__aeabi_fmul+0x8c>
 80010ac:	2080      	movs	r0, #128	; 0x80
 80010ae:	03c0      	lsls	r0, r0, #15
 80010b0:	4204      	tst	r4, r0
 80010b2:	d009      	beq.n	80010c8 <__aeabi_fmul+0x218>
 80010b4:	4643      	mov	r3, r8
 80010b6:	4203      	tst	r3, r0
 80010b8:	d106      	bne.n	80010c8 <__aeabi_fmul+0x218>
 80010ba:	4644      	mov	r4, r8
 80010bc:	4304      	orrs	r4, r0
 80010be:	0264      	lsls	r4, r4, #9
 80010c0:	0039      	movs	r1, r7
 80010c2:	20ff      	movs	r0, #255	; 0xff
 80010c4:	0a64      	lsrs	r4, r4, #9
 80010c6:	e739      	b.n	8000f3c <__aeabi_fmul+0x8c>
 80010c8:	2080      	movs	r0, #128	; 0x80
 80010ca:	03c0      	lsls	r0, r0, #15
 80010cc:	4304      	orrs	r4, r0
 80010ce:	0264      	lsls	r4, r4, #9
 80010d0:	0031      	movs	r1, r6
 80010d2:	20ff      	movs	r0, #255	; 0xff
 80010d4:	0a64      	lsrs	r4, r4, #9
 80010d6:	e731      	b.n	8000f3c <__aeabi_fmul+0x8c>
 80010d8:	0028      	movs	r0, r5
 80010da:	e765      	b.n	8000fa8 <__aeabi_fmul+0xf8>
 80010dc:	01a4      	lsls	r4, r4, #6
 80010de:	2000      	movs	r0, #0
 80010e0:	0a64      	lsrs	r4, r4, #9
 80010e2:	e72b      	b.n	8000f3c <__aeabi_fmul+0x8c>
 80010e4:	2080      	movs	r0, #128	; 0x80
 80010e6:	03c0      	lsls	r0, r0, #15
 80010e8:	4304      	orrs	r4, r0
 80010ea:	0264      	lsls	r4, r4, #9
 80010ec:	20ff      	movs	r0, #255	; 0xff
 80010ee:	0a64      	lsrs	r4, r4, #9
 80010f0:	e724      	b.n	8000f3c <__aeabi_fmul+0x8c>
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	0800f008 	.word	0x0800f008
 80010f8:	f7ffffff 	.word	0xf7ffffff

080010fc <__aeabi_fsub>:
 80010fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fe:	46ce      	mov	lr, r9
 8001100:	4647      	mov	r7, r8
 8001102:	0243      	lsls	r3, r0, #9
 8001104:	0a5b      	lsrs	r3, r3, #9
 8001106:	024e      	lsls	r6, r1, #9
 8001108:	00da      	lsls	r2, r3, #3
 800110a:	4694      	mov	ip, r2
 800110c:	0a72      	lsrs	r2, r6, #9
 800110e:	4691      	mov	r9, r2
 8001110:	0045      	lsls	r5, r0, #1
 8001112:	004a      	lsls	r2, r1, #1
 8001114:	b580      	push	{r7, lr}
 8001116:	0e2d      	lsrs	r5, r5, #24
 8001118:	001f      	movs	r7, r3
 800111a:	0fc4      	lsrs	r4, r0, #31
 800111c:	0e12      	lsrs	r2, r2, #24
 800111e:	0fc9      	lsrs	r1, r1, #31
 8001120:	09b6      	lsrs	r6, r6, #6
 8001122:	2aff      	cmp	r2, #255	; 0xff
 8001124:	d05b      	beq.n	80011de <__aeabi_fsub+0xe2>
 8001126:	2001      	movs	r0, #1
 8001128:	4041      	eors	r1, r0
 800112a:	428c      	cmp	r4, r1
 800112c:	d039      	beq.n	80011a2 <__aeabi_fsub+0xa6>
 800112e:	1aa8      	subs	r0, r5, r2
 8001130:	2800      	cmp	r0, #0
 8001132:	dd5a      	ble.n	80011ea <__aeabi_fsub+0xee>
 8001134:	2a00      	cmp	r2, #0
 8001136:	d06a      	beq.n	800120e <__aeabi_fsub+0x112>
 8001138:	2dff      	cmp	r5, #255	; 0xff
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x42>
 800113c:	e0d9      	b.n	80012f2 <__aeabi_fsub+0x1f6>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	04d2      	lsls	r2, r2, #19
 8001142:	4316      	orrs	r6, r2
 8001144:	281b      	cmp	r0, #27
 8001146:	dc00      	bgt.n	800114a <__aeabi_fsub+0x4e>
 8001148:	e0e9      	b.n	800131e <__aeabi_fsub+0x222>
 800114a:	2001      	movs	r0, #1
 800114c:	4663      	mov	r3, ip
 800114e:	1a18      	subs	r0, r3, r0
 8001150:	0143      	lsls	r3, r0, #5
 8001152:	d400      	bmi.n	8001156 <__aeabi_fsub+0x5a>
 8001154:	e0b4      	b.n	80012c0 <__aeabi_fsub+0x1c4>
 8001156:	0180      	lsls	r0, r0, #6
 8001158:	0987      	lsrs	r7, r0, #6
 800115a:	0038      	movs	r0, r7
 800115c:	f002 f8e2 	bl	8003324 <__clzsi2>
 8001160:	3805      	subs	r0, #5
 8001162:	4087      	lsls	r7, r0
 8001164:	4285      	cmp	r5, r0
 8001166:	dc00      	bgt.n	800116a <__aeabi_fsub+0x6e>
 8001168:	e0cc      	b.n	8001304 <__aeabi_fsub+0x208>
 800116a:	1a2d      	subs	r5, r5, r0
 800116c:	48b5      	ldr	r0, [pc, #724]	; (8001444 <__aeabi_fsub+0x348>)
 800116e:	4038      	ands	r0, r7
 8001170:	0743      	lsls	r3, r0, #29
 8001172:	d004      	beq.n	800117e <__aeabi_fsub+0x82>
 8001174:	230f      	movs	r3, #15
 8001176:	4003      	ands	r3, r0
 8001178:	2b04      	cmp	r3, #4
 800117a:	d000      	beq.n	800117e <__aeabi_fsub+0x82>
 800117c:	3004      	adds	r0, #4
 800117e:	0143      	lsls	r3, r0, #5
 8001180:	d400      	bmi.n	8001184 <__aeabi_fsub+0x88>
 8001182:	e0a0      	b.n	80012c6 <__aeabi_fsub+0x1ca>
 8001184:	1c6a      	adds	r2, r5, #1
 8001186:	2dfe      	cmp	r5, #254	; 0xfe
 8001188:	d100      	bne.n	800118c <__aeabi_fsub+0x90>
 800118a:	e08d      	b.n	80012a8 <__aeabi_fsub+0x1ac>
 800118c:	0180      	lsls	r0, r0, #6
 800118e:	0a47      	lsrs	r7, r0, #9
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	05d0      	lsls	r0, r2, #23
 8001194:	4338      	orrs	r0, r7
 8001196:	07e4      	lsls	r4, r4, #31
 8001198:	4320      	orrs	r0, r4
 800119a:	bcc0      	pop	{r6, r7}
 800119c:	46b9      	mov	r9, r7
 800119e:	46b0      	mov	r8, r6
 80011a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011a2:	1aa8      	subs	r0, r5, r2
 80011a4:	4680      	mov	r8, r0
 80011a6:	2800      	cmp	r0, #0
 80011a8:	dd45      	ble.n	8001236 <__aeabi_fsub+0x13a>
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	d070      	beq.n	8001290 <__aeabi_fsub+0x194>
 80011ae:	2dff      	cmp	r5, #255	; 0xff
 80011b0:	d100      	bne.n	80011b4 <__aeabi_fsub+0xb8>
 80011b2:	e09e      	b.n	80012f2 <__aeabi_fsub+0x1f6>
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	04db      	lsls	r3, r3, #19
 80011b8:	431e      	orrs	r6, r3
 80011ba:	4643      	mov	r3, r8
 80011bc:	2b1b      	cmp	r3, #27
 80011be:	dc00      	bgt.n	80011c2 <__aeabi_fsub+0xc6>
 80011c0:	e0d2      	b.n	8001368 <__aeabi_fsub+0x26c>
 80011c2:	2001      	movs	r0, #1
 80011c4:	4460      	add	r0, ip
 80011c6:	0143      	lsls	r3, r0, #5
 80011c8:	d57a      	bpl.n	80012c0 <__aeabi_fsub+0x1c4>
 80011ca:	3501      	adds	r5, #1
 80011cc:	2dff      	cmp	r5, #255	; 0xff
 80011ce:	d06b      	beq.n	80012a8 <__aeabi_fsub+0x1ac>
 80011d0:	2301      	movs	r3, #1
 80011d2:	4a9d      	ldr	r2, [pc, #628]	; (8001448 <__aeabi_fsub+0x34c>)
 80011d4:	4003      	ands	r3, r0
 80011d6:	0840      	lsrs	r0, r0, #1
 80011d8:	4010      	ands	r0, r2
 80011da:	4318      	orrs	r0, r3
 80011dc:	e7c8      	b.n	8001170 <__aeabi_fsub+0x74>
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d020      	beq.n	8001224 <__aeabi_fsub+0x128>
 80011e2:	428c      	cmp	r4, r1
 80011e4:	d023      	beq.n	800122e <__aeabi_fsub+0x132>
 80011e6:	0028      	movs	r0, r5
 80011e8:	38ff      	subs	r0, #255	; 0xff
 80011ea:	2800      	cmp	r0, #0
 80011ec:	d039      	beq.n	8001262 <__aeabi_fsub+0x166>
 80011ee:	1b57      	subs	r7, r2, r5
 80011f0:	2d00      	cmp	r5, #0
 80011f2:	d000      	beq.n	80011f6 <__aeabi_fsub+0xfa>
 80011f4:	e09d      	b.n	8001332 <__aeabi_fsub+0x236>
 80011f6:	4663      	mov	r3, ip
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_fsub+0x102>
 80011fc:	e0db      	b.n	80013b6 <__aeabi_fsub+0x2ba>
 80011fe:	1e7b      	subs	r3, r7, #1
 8001200:	2f01      	cmp	r7, #1
 8001202:	d100      	bne.n	8001206 <__aeabi_fsub+0x10a>
 8001204:	e10d      	b.n	8001422 <__aeabi_fsub+0x326>
 8001206:	2fff      	cmp	r7, #255	; 0xff
 8001208:	d071      	beq.n	80012ee <__aeabi_fsub+0x1f2>
 800120a:	001f      	movs	r7, r3
 800120c:	e098      	b.n	8001340 <__aeabi_fsub+0x244>
 800120e:	2e00      	cmp	r6, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x118>
 8001212:	e0a7      	b.n	8001364 <__aeabi_fsub+0x268>
 8001214:	1e42      	subs	r2, r0, #1
 8001216:	2801      	cmp	r0, #1
 8001218:	d100      	bne.n	800121c <__aeabi_fsub+0x120>
 800121a:	e0e6      	b.n	80013ea <__aeabi_fsub+0x2ee>
 800121c:	28ff      	cmp	r0, #255	; 0xff
 800121e:	d068      	beq.n	80012f2 <__aeabi_fsub+0x1f6>
 8001220:	0010      	movs	r0, r2
 8001222:	e78f      	b.n	8001144 <__aeabi_fsub+0x48>
 8001224:	2001      	movs	r0, #1
 8001226:	4041      	eors	r1, r0
 8001228:	42a1      	cmp	r1, r4
 800122a:	d000      	beq.n	800122e <__aeabi_fsub+0x132>
 800122c:	e77f      	b.n	800112e <__aeabi_fsub+0x32>
 800122e:	20ff      	movs	r0, #255	; 0xff
 8001230:	4240      	negs	r0, r0
 8001232:	4680      	mov	r8, r0
 8001234:	44a8      	add	r8, r5
 8001236:	4640      	mov	r0, r8
 8001238:	2800      	cmp	r0, #0
 800123a:	d038      	beq.n	80012ae <__aeabi_fsub+0x1b2>
 800123c:	1b51      	subs	r1, r2, r5
 800123e:	2d00      	cmp	r5, #0
 8001240:	d100      	bne.n	8001244 <__aeabi_fsub+0x148>
 8001242:	e0ae      	b.n	80013a2 <__aeabi_fsub+0x2a6>
 8001244:	2aff      	cmp	r2, #255	; 0xff
 8001246:	d100      	bne.n	800124a <__aeabi_fsub+0x14e>
 8001248:	e0df      	b.n	800140a <__aeabi_fsub+0x30e>
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	4660      	mov	r0, ip
 800124e:	04db      	lsls	r3, r3, #19
 8001250:	4318      	orrs	r0, r3
 8001252:	4684      	mov	ip, r0
 8001254:	291b      	cmp	r1, #27
 8001256:	dc00      	bgt.n	800125a <__aeabi_fsub+0x15e>
 8001258:	e0d9      	b.n	800140e <__aeabi_fsub+0x312>
 800125a:	2001      	movs	r0, #1
 800125c:	0015      	movs	r5, r2
 800125e:	1980      	adds	r0, r0, r6
 8001260:	e7b1      	b.n	80011c6 <__aeabi_fsub+0xca>
 8001262:	20fe      	movs	r0, #254	; 0xfe
 8001264:	1c6a      	adds	r2, r5, #1
 8001266:	4210      	tst	r0, r2
 8001268:	d171      	bne.n	800134e <__aeabi_fsub+0x252>
 800126a:	2d00      	cmp	r5, #0
 800126c:	d000      	beq.n	8001270 <__aeabi_fsub+0x174>
 800126e:	e0a6      	b.n	80013be <__aeabi_fsub+0x2c2>
 8001270:	4663      	mov	r3, ip
 8001272:	2b00      	cmp	r3, #0
 8001274:	d100      	bne.n	8001278 <__aeabi_fsub+0x17c>
 8001276:	e0d9      	b.n	800142c <__aeabi_fsub+0x330>
 8001278:	2200      	movs	r2, #0
 800127a:	2e00      	cmp	r6, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_fsub+0x184>
 800127e:	e788      	b.n	8001192 <__aeabi_fsub+0x96>
 8001280:	1b98      	subs	r0, r3, r6
 8001282:	0143      	lsls	r3, r0, #5
 8001284:	d400      	bmi.n	8001288 <__aeabi_fsub+0x18c>
 8001286:	e0e1      	b.n	800144c <__aeabi_fsub+0x350>
 8001288:	4663      	mov	r3, ip
 800128a:	000c      	movs	r4, r1
 800128c:	1af0      	subs	r0, r6, r3
 800128e:	e76f      	b.n	8001170 <__aeabi_fsub+0x74>
 8001290:	2e00      	cmp	r6, #0
 8001292:	d100      	bne.n	8001296 <__aeabi_fsub+0x19a>
 8001294:	e0b7      	b.n	8001406 <__aeabi_fsub+0x30a>
 8001296:	0002      	movs	r2, r0
 8001298:	3a01      	subs	r2, #1
 800129a:	2801      	cmp	r0, #1
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x1a4>
 800129e:	e09c      	b.n	80013da <__aeabi_fsub+0x2de>
 80012a0:	28ff      	cmp	r0, #255	; 0xff
 80012a2:	d026      	beq.n	80012f2 <__aeabi_fsub+0x1f6>
 80012a4:	4690      	mov	r8, r2
 80012a6:	e788      	b.n	80011ba <__aeabi_fsub+0xbe>
 80012a8:	22ff      	movs	r2, #255	; 0xff
 80012aa:	2700      	movs	r7, #0
 80012ac:	e771      	b.n	8001192 <__aeabi_fsub+0x96>
 80012ae:	20fe      	movs	r0, #254	; 0xfe
 80012b0:	1c6a      	adds	r2, r5, #1
 80012b2:	4210      	tst	r0, r2
 80012b4:	d064      	beq.n	8001380 <__aeabi_fsub+0x284>
 80012b6:	2aff      	cmp	r2, #255	; 0xff
 80012b8:	d0f6      	beq.n	80012a8 <__aeabi_fsub+0x1ac>
 80012ba:	0015      	movs	r5, r2
 80012bc:	4466      	add	r6, ip
 80012be:	0870      	lsrs	r0, r6, #1
 80012c0:	0743      	lsls	r3, r0, #29
 80012c2:	d000      	beq.n	80012c6 <__aeabi_fsub+0x1ca>
 80012c4:	e756      	b.n	8001174 <__aeabi_fsub+0x78>
 80012c6:	08c3      	lsrs	r3, r0, #3
 80012c8:	2dff      	cmp	r5, #255	; 0xff
 80012ca:	d012      	beq.n	80012f2 <__aeabi_fsub+0x1f6>
 80012cc:	025b      	lsls	r3, r3, #9
 80012ce:	0a5f      	lsrs	r7, r3, #9
 80012d0:	b2ea      	uxtb	r2, r5
 80012d2:	e75e      	b.n	8001192 <__aeabi_fsub+0x96>
 80012d4:	4662      	mov	r2, ip
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_fsub+0x1e0>
 80012da:	e096      	b.n	800140a <__aeabi_fsub+0x30e>
 80012dc:	2e00      	cmp	r6, #0
 80012de:	d008      	beq.n	80012f2 <__aeabi_fsub+0x1f6>
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	03d2      	lsls	r2, r2, #15
 80012e4:	4213      	tst	r3, r2
 80012e6:	d004      	beq.n	80012f2 <__aeabi_fsub+0x1f6>
 80012e8:	4648      	mov	r0, r9
 80012ea:	4210      	tst	r0, r2
 80012ec:	d101      	bne.n	80012f2 <__aeabi_fsub+0x1f6>
 80012ee:	000c      	movs	r4, r1
 80012f0:	464b      	mov	r3, r9
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0d8      	beq.n	80012a8 <__aeabi_fsub+0x1ac>
 80012f6:	2780      	movs	r7, #128	; 0x80
 80012f8:	03ff      	lsls	r7, r7, #15
 80012fa:	431f      	orrs	r7, r3
 80012fc:	027f      	lsls	r7, r7, #9
 80012fe:	22ff      	movs	r2, #255	; 0xff
 8001300:	0a7f      	lsrs	r7, r7, #9
 8001302:	e746      	b.n	8001192 <__aeabi_fsub+0x96>
 8001304:	2320      	movs	r3, #32
 8001306:	003a      	movs	r2, r7
 8001308:	1b45      	subs	r5, r0, r5
 800130a:	0038      	movs	r0, r7
 800130c:	3501      	adds	r5, #1
 800130e:	40ea      	lsrs	r2, r5
 8001310:	1b5d      	subs	r5, r3, r5
 8001312:	40a8      	lsls	r0, r5
 8001314:	1e43      	subs	r3, r0, #1
 8001316:	4198      	sbcs	r0, r3
 8001318:	2500      	movs	r5, #0
 800131a:	4310      	orrs	r0, r2
 800131c:	e728      	b.n	8001170 <__aeabi_fsub+0x74>
 800131e:	2320      	movs	r3, #32
 8001320:	1a1b      	subs	r3, r3, r0
 8001322:	0032      	movs	r2, r6
 8001324:	409e      	lsls	r6, r3
 8001326:	40c2      	lsrs	r2, r0
 8001328:	0030      	movs	r0, r6
 800132a:	1e43      	subs	r3, r0, #1
 800132c:	4198      	sbcs	r0, r3
 800132e:	4310      	orrs	r0, r2
 8001330:	e70c      	b.n	800114c <__aeabi_fsub+0x50>
 8001332:	2aff      	cmp	r2, #255	; 0xff
 8001334:	d0db      	beq.n	80012ee <__aeabi_fsub+0x1f2>
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	4660      	mov	r0, ip
 800133a:	04db      	lsls	r3, r3, #19
 800133c:	4318      	orrs	r0, r3
 800133e:	4684      	mov	ip, r0
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dd56      	ble.n	80013f2 <__aeabi_fsub+0x2f6>
 8001344:	2001      	movs	r0, #1
 8001346:	000c      	movs	r4, r1
 8001348:	0015      	movs	r5, r2
 800134a:	1a30      	subs	r0, r6, r0
 800134c:	e700      	b.n	8001150 <__aeabi_fsub+0x54>
 800134e:	4663      	mov	r3, ip
 8001350:	1b9f      	subs	r7, r3, r6
 8001352:	017b      	lsls	r3, r7, #5
 8001354:	d43d      	bmi.n	80013d2 <__aeabi_fsub+0x2d6>
 8001356:	2f00      	cmp	r7, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x260>
 800135a:	e6fe      	b.n	800115a <__aeabi_fsub+0x5e>
 800135c:	2400      	movs	r4, #0
 800135e:	2200      	movs	r2, #0
 8001360:	2700      	movs	r7, #0
 8001362:	e716      	b.n	8001192 <__aeabi_fsub+0x96>
 8001364:	0005      	movs	r5, r0
 8001366:	e7af      	b.n	80012c8 <__aeabi_fsub+0x1cc>
 8001368:	0032      	movs	r2, r6
 800136a:	4643      	mov	r3, r8
 800136c:	4641      	mov	r1, r8
 800136e:	40da      	lsrs	r2, r3
 8001370:	2320      	movs	r3, #32
 8001372:	1a5b      	subs	r3, r3, r1
 8001374:	409e      	lsls	r6, r3
 8001376:	0030      	movs	r0, r6
 8001378:	1e43      	subs	r3, r0, #1
 800137a:	4198      	sbcs	r0, r3
 800137c:	4310      	orrs	r0, r2
 800137e:	e721      	b.n	80011c4 <__aeabi_fsub+0xc8>
 8001380:	2d00      	cmp	r5, #0
 8001382:	d1a7      	bne.n	80012d4 <__aeabi_fsub+0x1d8>
 8001384:	4663      	mov	r3, ip
 8001386:	2b00      	cmp	r3, #0
 8001388:	d059      	beq.n	800143e <__aeabi_fsub+0x342>
 800138a:	2200      	movs	r2, #0
 800138c:	2e00      	cmp	r6, #0
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x296>
 8001390:	e6ff      	b.n	8001192 <__aeabi_fsub+0x96>
 8001392:	0030      	movs	r0, r6
 8001394:	4460      	add	r0, ip
 8001396:	0143      	lsls	r3, r0, #5
 8001398:	d592      	bpl.n	80012c0 <__aeabi_fsub+0x1c4>
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <__aeabi_fsub+0x348>)
 800139c:	3501      	adds	r5, #1
 800139e:	4018      	ands	r0, r3
 80013a0:	e78e      	b.n	80012c0 <__aeabi_fsub+0x1c4>
 80013a2:	4663      	mov	r3, ip
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d047      	beq.n	8001438 <__aeabi_fsub+0x33c>
 80013a8:	1e4b      	subs	r3, r1, #1
 80013aa:	2901      	cmp	r1, #1
 80013ac:	d015      	beq.n	80013da <__aeabi_fsub+0x2de>
 80013ae:	29ff      	cmp	r1, #255	; 0xff
 80013b0:	d02b      	beq.n	800140a <__aeabi_fsub+0x30e>
 80013b2:	0019      	movs	r1, r3
 80013b4:	e74e      	b.n	8001254 <__aeabi_fsub+0x158>
 80013b6:	000c      	movs	r4, r1
 80013b8:	464b      	mov	r3, r9
 80013ba:	003d      	movs	r5, r7
 80013bc:	e784      	b.n	80012c8 <__aeabi_fsub+0x1cc>
 80013be:	4662      	mov	r2, ip
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	d18b      	bne.n	80012dc <__aeabi_fsub+0x1e0>
 80013c4:	2e00      	cmp	r6, #0
 80013c6:	d192      	bne.n	80012ee <__aeabi_fsub+0x1f2>
 80013c8:	2780      	movs	r7, #128	; 0x80
 80013ca:	2400      	movs	r4, #0
 80013cc:	22ff      	movs	r2, #255	; 0xff
 80013ce:	03ff      	lsls	r7, r7, #15
 80013d0:	e6df      	b.n	8001192 <__aeabi_fsub+0x96>
 80013d2:	4663      	mov	r3, ip
 80013d4:	000c      	movs	r4, r1
 80013d6:	1af7      	subs	r7, r6, r3
 80013d8:	e6bf      	b.n	800115a <__aeabi_fsub+0x5e>
 80013da:	0030      	movs	r0, r6
 80013dc:	4460      	add	r0, ip
 80013de:	2501      	movs	r5, #1
 80013e0:	0143      	lsls	r3, r0, #5
 80013e2:	d400      	bmi.n	80013e6 <__aeabi_fsub+0x2ea>
 80013e4:	e76c      	b.n	80012c0 <__aeabi_fsub+0x1c4>
 80013e6:	2502      	movs	r5, #2
 80013e8:	e6f2      	b.n	80011d0 <__aeabi_fsub+0xd4>
 80013ea:	4663      	mov	r3, ip
 80013ec:	2501      	movs	r5, #1
 80013ee:	1b98      	subs	r0, r3, r6
 80013f0:	e6ae      	b.n	8001150 <__aeabi_fsub+0x54>
 80013f2:	2320      	movs	r3, #32
 80013f4:	4664      	mov	r4, ip
 80013f6:	4660      	mov	r0, ip
 80013f8:	40fc      	lsrs	r4, r7
 80013fa:	1bdf      	subs	r7, r3, r7
 80013fc:	40b8      	lsls	r0, r7
 80013fe:	1e43      	subs	r3, r0, #1
 8001400:	4198      	sbcs	r0, r3
 8001402:	4320      	orrs	r0, r4
 8001404:	e79f      	b.n	8001346 <__aeabi_fsub+0x24a>
 8001406:	0005      	movs	r5, r0
 8001408:	e75e      	b.n	80012c8 <__aeabi_fsub+0x1cc>
 800140a:	464b      	mov	r3, r9
 800140c:	e771      	b.n	80012f2 <__aeabi_fsub+0x1f6>
 800140e:	2320      	movs	r3, #32
 8001410:	4665      	mov	r5, ip
 8001412:	4660      	mov	r0, ip
 8001414:	40cd      	lsrs	r5, r1
 8001416:	1a59      	subs	r1, r3, r1
 8001418:	4088      	lsls	r0, r1
 800141a:	1e43      	subs	r3, r0, #1
 800141c:	4198      	sbcs	r0, r3
 800141e:	4328      	orrs	r0, r5
 8001420:	e71c      	b.n	800125c <__aeabi_fsub+0x160>
 8001422:	4663      	mov	r3, ip
 8001424:	000c      	movs	r4, r1
 8001426:	2501      	movs	r5, #1
 8001428:	1af0      	subs	r0, r6, r3
 800142a:	e691      	b.n	8001150 <__aeabi_fsub+0x54>
 800142c:	2e00      	cmp	r6, #0
 800142e:	d095      	beq.n	800135c <__aeabi_fsub+0x260>
 8001430:	000c      	movs	r4, r1
 8001432:	464f      	mov	r7, r9
 8001434:	2200      	movs	r2, #0
 8001436:	e6ac      	b.n	8001192 <__aeabi_fsub+0x96>
 8001438:	464b      	mov	r3, r9
 800143a:	000d      	movs	r5, r1
 800143c:	e744      	b.n	80012c8 <__aeabi_fsub+0x1cc>
 800143e:	464f      	mov	r7, r9
 8001440:	2200      	movs	r2, #0
 8001442:	e6a6      	b.n	8001192 <__aeabi_fsub+0x96>
 8001444:	fbffffff 	.word	0xfbffffff
 8001448:	7dffffff 	.word	0x7dffffff
 800144c:	2800      	cmp	r0, #0
 800144e:	d000      	beq.n	8001452 <__aeabi_fsub+0x356>
 8001450:	e736      	b.n	80012c0 <__aeabi_fsub+0x1c4>
 8001452:	2400      	movs	r4, #0
 8001454:	2700      	movs	r7, #0
 8001456:	e69c      	b.n	8001192 <__aeabi_fsub+0x96>

08001458 <__aeabi_f2iz>:
 8001458:	0241      	lsls	r1, r0, #9
 800145a:	0042      	lsls	r2, r0, #1
 800145c:	0fc3      	lsrs	r3, r0, #31
 800145e:	0a49      	lsrs	r1, r1, #9
 8001460:	2000      	movs	r0, #0
 8001462:	0e12      	lsrs	r2, r2, #24
 8001464:	2a7e      	cmp	r2, #126	; 0x7e
 8001466:	dd03      	ble.n	8001470 <__aeabi_f2iz+0x18>
 8001468:	2a9d      	cmp	r2, #157	; 0x9d
 800146a:	dd02      	ble.n	8001472 <__aeabi_f2iz+0x1a>
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <__aeabi_f2iz+0x3c>)
 800146e:	1898      	adds	r0, r3, r2
 8001470:	4770      	bx	lr
 8001472:	2080      	movs	r0, #128	; 0x80
 8001474:	0400      	lsls	r0, r0, #16
 8001476:	4301      	orrs	r1, r0
 8001478:	2a95      	cmp	r2, #149	; 0x95
 800147a:	dc07      	bgt.n	800148c <__aeabi_f2iz+0x34>
 800147c:	2096      	movs	r0, #150	; 0x96
 800147e:	1a82      	subs	r2, r0, r2
 8001480:	40d1      	lsrs	r1, r2
 8001482:	4248      	negs	r0, r1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f3      	bne.n	8001470 <__aeabi_f2iz+0x18>
 8001488:	0008      	movs	r0, r1
 800148a:	e7f1      	b.n	8001470 <__aeabi_f2iz+0x18>
 800148c:	3a96      	subs	r2, #150	; 0x96
 800148e:	4091      	lsls	r1, r2
 8001490:	e7f7      	b.n	8001482 <__aeabi_f2iz+0x2a>
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	7fffffff 	.word	0x7fffffff

08001498 <__aeabi_i2f>:
 8001498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149a:	2800      	cmp	r0, #0
 800149c:	d013      	beq.n	80014c6 <__aeabi_i2f+0x2e>
 800149e:	17c3      	asrs	r3, r0, #31
 80014a0:	18c6      	adds	r6, r0, r3
 80014a2:	405e      	eors	r6, r3
 80014a4:	0fc4      	lsrs	r4, r0, #31
 80014a6:	0030      	movs	r0, r6
 80014a8:	f001 ff3c 	bl	8003324 <__clzsi2>
 80014ac:	239e      	movs	r3, #158	; 0x9e
 80014ae:	0005      	movs	r5, r0
 80014b0:	1a1b      	subs	r3, r3, r0
 80014b2:	2b96      	cmp	r3, #150	; 0x96
 80014b4:	dc0f      	bgt.n	80014d6 <__aeabi_i2f+0x3e>
 80014b6:	2808      	cmp	r0, #8
 80014b8:	dd01      	ble.n	80014be <__aeabi_i2f+0x26>
 80014ba:	3d08      	subs	r5, #8
 80014bc:	40ae      	lsls	r6, r5
 80014be:	0276      	lsls	r6, r6, #9
 80014c0:	0a76      	lsrs	r6, r6, #9
 80014c2:	b2d8      	uxtb	r0, r3
 80014c4:	e002      	b.n	80014cc <__aeabi_i2f+0x34>
 80014c6:	2400      	movs	r4, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	2600      	movs	r6, #0
 80014cc:	05c0      	lsls	r0, r0, #23
 80014ce:	4330      	orrs	r0, r6
 80014d0:	07e4      	lsls	r4, r4, #31
 80014d2:	4320      	orrs	r0, r4
 80014d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014d6:	2b99      	cmp	r3, #153	; 0x99
 80014d8:	dd0c      	ble.n	80014f4 <__aeabi_i2f+0x5c>
 80014da:	2205      	movs	r2, #5
 80014dc:	0031      	movs	r1, r6
 80014de:	1a12      	subs	r2, r2, r0
 80014e0:	40d1      	lsrs	r1, r2
 80014e2:	000a      	movs	r2, r1
 80014e4:	0001      	movs	r1, r0
 80014e6:	0030      	movs	r0, r6
 80014e8:	311b      	adds	r1, #27
 80014ea:	4088      	lsls	r0, r1
 80014ec:	1e41      	subs	r1, r0, #1
 80014ee:	4188      	sbcs	r0, r1
 80014f0:	4302      	orrs	r2, r0
 80014f2:	0016      	movs	r6, r2
 80014f4:	2d05      	cmp	r5, #5
 80014f6:	dc12      	bgt.n	800151e <__aeabi_i2f+0x86>
 80014f8:	0031      	movs	r1, r6
 80014fa:	4f0d      	ldr	r7, [pc, #52]	; (8001530 <__aeabi_i2f+0x98>)
 80014fc:	4039      	ands	r1, r7
 80014fe:	0772      	lsls	r2, r6, #29
 8001500:	d009      	beq.n	8001516 <__aeabi_i2f+0x7e>
 8001502:	200f      	movs	r0, #15
 8001504:	4030      	ands	r0, r6
 8001506:	2804      	cmp	r0, #4
 8001508:	d005      	beq.n	8001516 <__aeabi_i2f+0x7e>
 800150a:	3104      	adds	r1, #4
 800150c:	014a      	lsls	r2, r1, #5
 800150e:	d502      	bpl.n	8001516 <__aeabi_i2f+0x7e>
 8001510:	239f      	movs	r3, #159	; 0x9f
 8001512:	4039      	ands	r1, r7
 8001514:	1b5b      	subs	r3, r3, r5
 8001516:	0189      	lsls	r1, r1, #6
 8001518:	0a4e      	lsrs	r6, r1, #9
 800151a:	b2d8      	uxtb	r0, r3
 800151c:	e7d6      	b.n	80014cc <__aeabi_i2f+0x34>
 800151e:	1f6a      	subs	r2, r5, #5
 8001520:	4096      	lsls	r6, r2
 8001522:	0031      	movs	r1, r6
 8001524:	4f02      	ldr	r7, [pc, #8]	; (8001530 <__aeabi_i2f+0x98>)
 8001526:	4039      	ands	r1, r7
 8001528:	0772      	lsls	r2, r6, #29
 800152a:	d0f4      	beq.n	8001516 <__aeabi_i2f+0x7e>
 800152c:	e7e9      	b.n	8001502 <__aeabi_i2f+0x6a>
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	fbffffff 	.word	0xfbffffff

08001534 <__aeabi_ui2f>:
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	1e05      	subs	r5, r0, #0
 8001538:	d00e      	beq.n	8001558 <__aeabi_ui2f+0x24>
 800153a:	f001 fef3 	bl	8003324 <__clzsi2>
 800153e:	239e      	movs	r3, #158	; 0x9e
 8001540:	0004      	movs	r4, r0
 8001542:	1a1b      	subs	r3, r3, r0
 8001544:	2b96      	cmp	r3, #150	; 0x96
 8001546:	dc0c      	bgt.n	8001562 <__aeabi_ui2f+0x2e>
 8001548:	2808      	cmp	r0, #8
 800154a:	dd01      	ble.n	8001550 <__aeabi_ui2f+0x1c>
 800154c:	3c08      	subs	r4, #8
 800154e:	40a5      	lsls	r5, r4
 8001550:	026d      	lsls	r5, r5, #9
 8001552:	0a6d      	lsrs	r5, r5, #9
 8001554:	b2d8      	uxtb	r0, r3
 8001556:	e001      	b.n	800155c <__aeabi_ui2f+0x28>
 8001558:	2000      	movs	r0, #0
 800155a:	2500      	movs	r5, #0
 800155c:	05c0      	lsls	r0, r0, #23
 800155e:	4328      	orrs	r0, r5
 8001560:	bd70      	pop	{r4, r5, r6, pc}
 8001562:	2b99      	cmp	r3, #153	; 0x99
 8001564:	dd09      	ble.n	800157a <__aeabi_ui2f+0x46>
 8001566:	0002      	movs	r2, r0
 8001568:	0029      	movs	r1, r5
 800156a:	321b      	adds	r2, #27
 800156c:	4091      	lsls	r1, r2
 800156e:	1e4a      	subs	r2, r1, #1
 8001570:	4191      	sbcs	r1, r2
 8001572:	2205      	movs	r2, #5
 8001574:	1a12      	subs	r2, r2, r0
 8001576:	40d5      	lsrs	r5, r2
 8001578:	430d      	orrs	r5, r1
 800157a:	2c05      	cmp	r4, #5
 800157c:	dc12      	bgt.n	80015a4 <__aeabi_ui2f+0x70>
 800157e:	0029      	movs	r1, r5
 8001580:	4e0c      	ldr	r6, [pc, #48]	; (80015b4 <__aeabi_ui2f+0x80>)
 8001582:	4031      	ands	r1, r6
 8001584:	076a      	lsls	r2, r5, #29
 8001586:	d009      	beq.n	800159c <__aeabi_ui2f+0x68>
 8001588:	200f      	movs	r0, #15
 800158a:	4028      	ands	r0, r5
 800158c:	2804      	cmp	r0, #4
 800158e:	d005      	beq.n	800159c <__aeabi_ui2f+0x68>
 8001590:	3104      	adds	r1, #4
 8001592:	014a      	lsls	r2, r1, #5
 8001594:	d502      	bpl.n	800159c <__aeabi_ui2f+0x68>
 8001596:	239f      	movs	r3, #159	; 0x9f
 8001598:	4031      	ands	r1, r6
 800159a:	1b1b      	subs	r3, r3, r4
 800159c:	0189      	lsls	r1, r1, #6
 800159e:	0a4d      	lsrs	r5, r1, #9
 80015a0:	b2d8      	uxtb	r0, r3
 80015a2:	e7db      	b.n	800155c <__aeabi_ui2f+0x28>
 80015a4:	1f62      	subs	r2, r4, #5
 80015a6:	4095      	lsls	r5, r2
 80015a8:	0029      	movs	r1, r5
 80015aa:	4e02      	ldr	r6, [pc, #8]	; (80015b4 <__aeabi_ui2f+0x80>)
 80015ac:	4031      	ands	r1, r6
 80015ae:	076a      	lsls	r2, r5, #29
 80015b0:	d0f4      	beq.n	800159c <__aeabi_ui2f+0x68>
 80015b2:	e7e9      	b.n	8001588 <__aeabi_ui2f+0x54>
 80015b4:	fbffffff 	.word	0xfbffffff

080015b8 <__aeabi_dadd>:
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	464f      	mov	r7, r9
 80015bc:	4646      	mov	r6, r8
 80015be:	46d6      	mov	lr, sl
 80015c0:	000d      	movs	r5, r1
 80015c2:	0004      	movs	r4, r0
 80015c4:	b5c0      	push	{r6, r7, lr}
 80015c6:	001f      	movs	r7, r3
 80015c8:	0011      	movs	r1, r2
 80015ca:	0328      	lsls	r0, r5, #12
 80015cc:	0f62      	lsrs	r2, r4, #29
 80015ce:	0a40      	lsrs	r0, r0, #9
 80015d0:	4310      	orrs	r0, r2
 80015d2:	007a      	lsls	r2, r7, #1
 80015d4:	0d52      	lsrs	r2, r2, #21
 80015d6:	00e3      	lsls	r3, r4, #3
 80015d8:	033c      	lsls	r4, r7, #12
 80015da:	4691      	mov	r9, r2
 80015dc:	0a64      	lsrs	r4, r4, #9
 80015de:	0ffa      	lsrs	r2, r7, #31
 80015e0:	0f4f      	lsrs	r7, r1, #29
 80015e2:	006e      	lsls	r6, r5, #1
 80015e4:	4327      	orrs	r7, r4
 80015e6:	4692      	mov	sl, r2
 80015e8:	46b8      	mov	r8, r7
 80015ea:	0d76      	lsrs	r6, r6, #21
 80015ec:	0fed      	lsrs	r5, r5, #31
 80015ee:	00c9      	lsls	r1, r1, #3
 80015f0:	4295      	cmp	r5, r2
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dadd+0x3e>
 80015f4:	e099      	b.n	800172a <__aeabi_dadd+0x172>
 80015f6:	464c      	mov	r4, r9
 80015f8:	1b34      	subs	r4, r6, r4
 80015fa:	46a4      	mov	ip, r4
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	dc00      	bgt.n	8001602 <__aeabi_dadd+0x4a>
 8001600:	e07c      	b.n	80016fc <__aeabi_dadd+0x144>
 8001602:	464a      	mov	r2, r9
 8001604:	2a00      	cmp	r2, #0
 8001606:	d100      	bne.n	800160a <__aeabi_dadd+0x52>
 8001608:	e0b8      	b.n	800177c <__aeabi_dadd+0x1c4>
 800160a:	4ac5      	ldr	r2, [pc, #788]	; (8001920 <__aeabi_dadd+0x368>)
 800160c:	4296      	cmp	r6, r2
 800160e:	d100      	bne.n	8001612 <__aeabi_dadd+0x5a>
 8001610:	e11c      	b.n	800184c <__aeabi_dadd+0x294>
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	003c      	movs	r4, r7
 8001616:	0412      	lsls	r2, r2, #16
 8001618:	4314      	orrs	r4, r2
 800161a:	46a0      	mov	r8, r4
 800161c:	4662      	mov	r2, ip
 800161e:	2a38      	cmp	r2, #56	; 0x38
 8001620:	dd00      	ble.n	8001624 <__aeabi_dadd+0x6c>
 8001622:	e161      	b.n	80018e8 <__aeabi_dadd+0x330>
 8001624:	2a1f      	cmp	r2, #31
 8001626:	dd00      	ble.n	800162a <__aeabi_dadd+0x72>
 8001628:	e1cc      	b.n	80019c4 <__aeabi_dadd+0x40c>
 800162a:	4664      	mov	r4, ip
 800162c:	2220      	movs	r2, #32
 800162e:	1b12      	subs	r2, r2, r4
 8001630:	4644      	mov	r4, r8
 8001632:	4094      	lsls	r4, r2
 8001634:	000f      	movs	r7, r1
 8001636:	46a1      	mov	r9, r4
 8001638:	4664      	mov	r4, ip
 800163a:	4091      	lsls	r1, r2
 800163c:	40e7      	lsrs	r7, r4
 800163e:	464c      	mov	r4, r9
 8001640:	1e4a      	subs	r2, r1, #1
 8001642:	4191      	sbcs	r1, r2
 8001644:	433c      	orrs	r4, r7
 8001646:	4642      	mov	r2, r8
 8001648:	4321      	orrs	r1, r4
 800164a:	4664      	mov	r4, ip
 800164c:	40e2      	lsrs	r2, r4
 800164e:	1a80      	subs	r0, r0, r2
 8001650:	1a5c      	subs	r4, r3, r1
 8001652:	42a3      	cmp	r3, r4
 8001654:	419b      	sbcs	r3, r3
 8001656:	425f      	negs	r7, r3
 8001658:	1bc7      	subs	r7, r0, r7
 800165a:	023b      	lsls	r3, r7, #8
 800165c:	d400      	bmi.n	8001660 <__aeabi_dadd+0xa8>
 800165e:	e0d0      	b.n	8001802 <__aeabi_dadd+0x24a>
 8001660:	027f      	lsls	r7, r7, #9
 8001662:	0a7f      	lsrs	r7, r7, #9
 8001664:	2f00      	cmp	r7, #0
 8001666:	d100      	bne.n	800166a <__aeabi_dadd+0xb2>
 8001668:	e0ff      	b.n	800186a <__aeabi_dadd+0x2b2>
 800166a:	0038      	movs	r0, r7
 800166c:	f001 fe5a 	bl	8003324 <__clzsi2>
 8001670:	0001      	movs	r1, r0
 8001672:	3908      	subs	r1, #8
 8001674:	2320      	movs	r3, #32
 8001676:	0022      	movs	r2, r4
 8001678:	1a5b      	subs	r3, r3, r1
 800167a:	408f      	lsls	r7, r1
 800167c:	40da      	lsrs	r2, r3
 800167e:	408c      	lsls	r4, r1
 8001680:	4317      	orrs	r7, r2
 8001682:	42b1      	cmp	r1, r6
 8001684:	da00      	bge.n	8001688 <__aeabi_dadd+0xd0>
 8001686:	e0ff      	b.n	8001888 <__aeabi_dadd+0x2d0>
 8001688:	1b89      	subs	r1, r1, r6
 800168a:	1c4b      	adds	r3, r1, #1
 800168c:	2b1f      	cmp	r3, #31
 800168e:	dd00      	ble.n	8001692 <__aeabi_dadd+0xda>
 8001690:	e0a8      	b.n	80017e4 <__aeabi_dadd+0x22c>
 8001692:	2220      	movs	r2, #32
 8001694:	0039      	movs	r1, r7
 8001696:	1ad2      	subs	r2, r2, r3
 8001698:	0020      	movs	r0, r4
 800169a:	4094      	lsls	r4, r2
 800169c:	4091      	lsls	r1, r2
 800169e:	40d8      	lsrs	r0, r3
 80016a0:	1e62      	subs	r2, r4, #1
 80016a2:	4194      	sbcs	r4, r2
 80016a4:	40df      	lsrs	r7, r3
 80016a6:	2600      	movs	r6, #0
 80016a8:	4301      	orrs	r1, r0
 80016aa:	430c      	orrs	r4, r1
 80016ac:	0763      	lsls	r3, r4, #29
 80016ae:	d009      	beq.n	80016c4 <__aeabi_dadd+0x10c>
 80016b0:	230f      	movs	r3, #15
 80016b2:	4023      	ands	r3, r4
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d005      	beq.n	80016c4 <__aeabi_dadd+0x10c>
 80016b8:	1d23      	adds	r3, r4, #4
 80016ba:	42a3      	cmp	r3, r4
 80016bc:	41a4      	sbcs	r4, r4
 80016be:	4264      	negs	r4, r4
 80016c0:	193f      	adds	r7, r7, r4
 80016c2:	001c      	movs	r4, r3
 80016c4:	023b      	lsls	r3, r7, #8
 80016c6:	d400      	bmi.n	80016ca <__aeabi_dadd+0x112>
 80016c8:	e09e      	b.n	8001808 <__aeabi_dadd+0x250>
 80016ca:	4b95      	ldr	r3, [pc, #596]	; (8001920 <__aeabi_dadd+0x368>)
 80016cc:	3601      	adds	r6, #1
 80016ce:	429e      	cmp	r6, r3
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x11c>
 80016d2:	e0b7      	b.n	8001844 <__aeabi_dadd+0x28c>
 80016d4:	4a93      	ldr	r2, [pc, #588]	; (8001924 <__aeabi_dadd+0x36c>)
 80016d6:	08e4      	lsrs	r4, r4, #3
 80016d8:	4017      	ands	r7, r2
 80016da:	077b      	lsls	r3, r7, #29
 80016dc:	0571      	lsls	r1, r6, #21
 80016de:	027f      	lsls	r7, r7, #9
 80016e0:	4323      	orrs	r3, r4
 80016e2:	0b3f      	lsrs	r7, r7, #12
 80016e4:	0d4a      	lsrs	r2, r1, #21
 80016e6:	0512      	lsls	r2, r2, #20
 80016e8:	433a      	orrs	r2, r7
 80016ea:	07ed      	lsls	r5, r5, #31
 80016ec:	432a      	orrs	r2, r5
 80016ee:	0018      	movs	r0, r3
 80016f0:	0011      	movs	r1, r2
 80016f2:	bce0      	pop	{r5, r6, r7}
 80016f4:	46ba      	mov	sl, r7
 80016f6:	46b1      	mov	r9, r6
 80016f8:	46a8      	mov	r8, r5
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	d04b      	beq.n	8001798 <__aeabi_dadd+0x1e0>
 8001700:	464c      	mov	r4, r9
 8001702:	1ba4      	subs	r4, r4, r6
 8001704:	46a4      	mov	ip, r4
 8001706:	2e00      	cmp	r6, #0
 8001708:	d000      	beq.n	800170c <__aeabi_dadd+0x154>
 800170a:	e123      	b.n	8001954 <__aeabi_dadd+0x39c>
 800170c:	0004      	movs	r4, r0
 800170e:	431c      	orrs	r4, r3
 8001710:	d100      	bne.n	8001714 <__aeabi_dadd+0x15c>
 8001712:	e1af      	b.n	8001a74 <__aeabi_dadd+0x4bc>
 8001714:	4662      	mov	r2, ip
 8001716:	1e54      	subs	r4, r2, #1
 8001718:	2a01      	cmp	r2, #1
 800171a:	d100      	bne.n	800171e <__aeabi_dadd+0x166>
 800171c:	e215      	b.n	8001b4a <__aeabi_dadd+0x592>
 800171e:	4d80      	ldr	r5, [pc, #512]	; (8001920 <__aeabi_dadd+0x368>)
 8001720:	45ac      	cmp	ip, r5
 8001722:	d100      	bne.n	8001726 <__aeabi_dadd+0x16e>
 8001724:	e1c8      	b.n	8001ab8 <__aeabi_dadd+0x500>
 8001726:	46a4      	mov	ip, r4
 8001728:	e11b      	b.n	8001962 <__aeabi_dadd+0x3aa>
 800172a:	464a      	mov	r2, r9
 800172c:	1ab2      	subs	r2, r6, r2
 800172e:	4694      	mov	ip, r2
 8001730:	2a00      	cmp	r2, #0
 8001732:	dc00      	bgt.n	8001736 <__aeabi_dadd+0x17e>
 8001734:	e0ac      	b.n	8001890 <__aeabi_dadd+0x2d8>
 8001736:	464a      	mov	r2, r9
 8001738:	2a00      	cmp	r2, #0
 800173a:	d043      	beq.n	80017c4 <__aeabi_dadd+0x20c>
 800173c:	4a78      	ldr	r2, [pc, #480]	; (8001920 <__aeabi_dadd+0x368>)
 800173e:	4296      	cmp	r6, r2
 8001740:	d100      	bne.n	8001744 <__aeabi_dadd+0x18c>
 8001742:	e1af      	b.n	8001aa4 <__aeabi_dadd+0x4ec>
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	003c      	movs	r4, r7
 8001748:	0412      	lsls	r2, r2, #16
 800174a:	4314      	orrs	r4, r2
 800174c:	46a0      	mov	r8, r4
 800174e:	4662      	mov	r2, ip
 8001750:	2a38      	cmp	r2, #56	; 0x38
 8001752:	dc67      	bgt.n	8001824 <__aeabi_dadd+0x26c>
 8001754:	2a1f      	cmp	r2, #31
 8001756:	dc00      	bgt.n	800175a <__aeabi_dadd+0x1a2>
 8001758:	e15f      	b.n	8001a1a <__aeabi_dadd+0x462>
 800175a:	4647      	mov	r7, r8
 800175c:	3a20      	subs	r2, #32
 800175e:	40d7      	lsrs	r7, r2
 8001760:	4662      	mov	r2, ip
 8001762:	2a20      	cmp	r2, #32
 8001764:	d005      	beq.n	8001772 <__aeabi_dadd+0x1ba>
 8001766:	4664      	mov	r4, ip
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	1b12      	subs	r2, r2, r4
 800176c:	4644      	mov	r4, r8
 800176e:	4094      	lsls	r4, r2
 8001770:	4321      	orrs	r1, r4
 8001772:	1e4a      	subs	r2, r1, #1
 8001774:	4191      	sbcs	r1, r2
 8001776:	000c      	movs	r4, r1
 8001778:	433c      	orrs	r4, r7
 800177a:	e057      	b.n	800182c <__aeabi_dadd+0x274>
 800177c:	003a      	movs	r2, r7
 800177e:	430a      	orrs	r2, r1
 8001780:	d100      	bne.n	8001784 <__aeabi_dadd+0x1cc>
 8001782:	e105      	b.n	8001990 <__aeabi_dadd+0x3d8>
 8001784:	0022      	movs	r2, r4
 8001786:	3a01      	subs	r2, #1
 8001788:	2c01      	cmp	r4, #1
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x1d6>
 800178c:	e182      	b.n	8001a94 <__aeabi_dadd+0x4dc>
 800178e:	4c64      	ldr	r4, [pc, #400]	; (8001920 <__aeabi_dadd+0x368>)
 8001790:	45a4      	cmp	ip, r4
 8001792:	d05b      	beq.n	800184c <__aeabi_dadd+0x294>
 8001794:	4694      	mov	ip, r2
 8001796:	e741      	b.n	800161c <__aeabi_dadd+0x64>
 8001798:	4c63      	ldr	r4, [pc, #396]	; (8001928 <__aeabi_dadd+0x370>)
 800179a:	1c77      	adds	r7, r6, #1
 800179c:	4227      	tst	r7, r4
 800179e:	d000      	beq.n	80017a2 <__aeabi_dadd+0x1ea>
 80017a0:	e0c4      	b.n	800192c <__aeabi_dadd+0x374>
 80017a2:	0004      	movs	r4, r0
 80017a4:	431c      	orrs	r4, r3
 80017a6:	2e00      	cmp	r6, #0
 80017a8:	d000      	beq.n	80017ac <__aeabi_dadd+0x1f4>
 80017aa:	e169      	b.n	8001a80 <__aeabi_dadd+0x4c8>
 80017ac:	2c00      	cmp	r4, #0
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1fa>
 80017b0:	e1bf      	b.n	8001b32 <__aeabi_dadd+0x57a>
 80017b2:	4644      	mov	r4, r8
 80017b4:	430c      	orrs	r4, r1
 80017b6:	d000      	beq.n	80017ba <__aeabi_dadd+0x202>
 80017b8:	e1d0      	b.n	8001b5c <__aeabi_dadd+0x5a4>
 80017ba:	0742      	lsls	r2, r0, #29
 80017bc:	08db      	lsrs	r3, r3, #3
 80017be:	4313      	orrs	r3, r2
 80017c0:	08c0      	lsrs	r0, r0, #3
 80017c2:	e029      	b.n	8001818 <__aeabi_dadd+0x260>
 80017c4:	003a      	movs	r2, r7
 80017c6:	430a      	orrs	r2, r1
 80017c8:	d100      	bne.n	80017cc <__aeabi_dadd+0x214>
 80017ca:	e170      	b.n	8001aae <__aeabi_dadd+0x4f6>
 80017cc:	4662      	mov	r2, ip
 80017ce:	4664      	mov	r4, ip
 80017d0:	3a01      	subs	r2, #1
 80017d2:	2c01      	cmp	r4, #1
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dadd+0x220>
 80017d6:	e0e0      	b.n	800199a <__aeabi_dadd+0x3e2>
 80017d8:	4c51      	ldr	r4, [pc, #324]	; (8001920 <__aeabi_dadd+0x368>)
 80017da:	45a4      	cmp	ip, r4
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dadd+0x228>
 80017de:	e161      	b.n	8001aa4 <__aeabi_dadd+0x4ec>
 80017e0:	4694      	mov	ip, r2
 80017e2:	e7b4      	b.n	800174e <__aeabi_dadd+0x196>
 80017e4:	003a      	movs	r2, r7
 80017e6:	391f      	subs	r1, #31
 80017e8:	40ca      	lsrs	r2, r1
 80017ea:	0011      	movs	r1, r2
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	d003      	beq.n	80017f8 <__aeabi_dadd+0x240>
 80017f0:	2240      	movs	r2, #64	; 0x40
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	409f      	lsls	r7, r3
 80017f6:	433c      	orrs	r4, r7
 80017f8:	1e63      	subs	r3, r4, #1
 80017fa:	419c      	sbcs	r4, r3
 80017fc:	2700      	movs	r7, #0
 80017fe:	2600      	movs	r6, #0
 8001800:	430c      	orrs	r4, r1
 8001802:	0763      	lsls	r3, r4, #29
 8001804:	d000      	beq.n	8001808 <__aeabi_dadd+0x250>
 8001806:	e753      	b.n	80016b0 <__aeabi_dadd+0xf8>
 8001808:	46b4      	mov	ip, r6
 800180a:	08e4      	lsrs	r4, r4, #3
 800180c:	077b      	lsls	r3, r7, #29
 800180e:	4323      	orrs	r3, r4
 8001810:	08f8      	lsrs	r0, r7, #3
 8001812:	4a43      	ldr	r2, [pc, #268]	; (8001920 <__aeabi_dadd+0x368>)
 8001814:	4594      	cmp	ip, r2
 8001816:	d01d      	beq.n	8001854 <__aeabi_dadd+0x29c>
 8001818:	4662      	mov	r2, ip
 800181a:	0307      	lsls	r7, r0, #12
 800181c:	0552      	lsls	r2, r2, #21
 800181e:	0b3f      	lsrs	r7, r7, #12
 8001820:	0d52      	lsrs	r2, r2, #21
 8001822:	e760      	b.n	80016e6 <__aeabi_dadd+0x12e>
 8001824:	4644      	mov	r4, r8
 8001826:	430c      	orrs	r4, r1
 8001828:	1e62      	subs	r2, r4, #1
 800182a:	4194      	sbcs	r4, r2
 800182c:	18e4      	adds	r4, r4, r3
 800182e:	429c      	cmp	r4, r3
 8001830:	419b      	sbcs	r3, r3
 8001832:	425f      	negs	r7, r3
 8001834:	183f      	adds	r7, r7, r0
 8001836:	023b      	lsls	r3, r7, #8
 8001838:	d5e3      	bpl.n	8001802 <__aeabi_dadd+0x24a>
 800183a:	4b39      	ldr	r3, [pc, #228]	; (8001920 <__aeabi_dadd+0x368>)
 800183c:	3601      	adds	r6, #1
 800183e:	429e      	cmp	r6, r3
 8001840:	d000      	beq.n	8001844 <__aeabi_dadd+0x28c>
 8001842:	e0b5      	b.n	80019b0 <__aeabi_dadd+0x3f8>
 8001844:	0032      	movs	r2, r6
 8001846:	2700      	movs	r7, #0
 8001848:	2300      	movs	r3, #0
 800184a:	e74c      	b.n	80016e6 <__aeabi_dadd+0x12e>
 800184c:	0742      	lsls	r2, r0, #29
 800184e:	08db      	lsrs	r3, r3, #3
 8001850:	4313      	orrs	r3, r2
 8001852:	08c0      	lsrs	r0, r0, #3
 8001854:	001a      	movs	r2, r3
 8001856:	4302      	orrs	r2, r0
 8001858:	d100      	bne.n	800185c <__aeabi_dadd+0x2a4>
 800185a:	e1e1      	b.n	8001c20 <__aeabi_dadd+0x668>
 800185c:	2780      	movs	r7, #128	; 0x80
 800185e:	033f      	lsls	r7, r7, #12
 8001860:	4307      	orrs	r7, r0
 8001862:	033f      	lsls	r7, r7, #12
 8001864:	4a2e      	ldr	r2, [pc, #184]	; (8001920 <__aeabi_dadd+0x368>)
 8001866:	0b3f      	lsrs	r7, r7, #12
 8001868:	e73d      	b.n	80016e6 <__aeabi_dadd+0x12e>
 800186a:	0020      	movs	r0, r4
 800186c:	f001 fd5a 	bl	8003324 <__clzsi2>
 8001870:	0001      	movs	r1, r0
 8001872:	3118      	adds	r1, #24
 8001874:	291f      	cmp	r1, #31
 8001876:	dc00      	bgt.n	800187a <__aeabi_dadd+0x2c2>
 8001878:	e6fc      	b.n	8001674 <__aeabi_dadd+0xbc>
 800187a:	3808      	subs	r0, #8
 800187c:	4084      	lsls	r4, r0
 800187e:	0027      	movs	r7, r4
 8001880:	2400      	movs	r4, #0
 8001882:	42b1      	cmp	r1, r6
 8001884:	db00      	blt.n	8001888 <__aeabi_dadd+0x2d0>
 8001886:	e6ff      	b.n	8001688 <__aeabi_dadd+0xd0>
 8001888:	4a26      	ldr	r2, [pc, #152]	; (8001924 <__aeabi_dadd+0x36c>)
 800188a:	1a76      	subs	r6, r6, r1
 800188c:	4017      	ands	r7, r2
 800188e:	e70d      	b.n	80016ac <__aeabi_dadd+0xf4>
 8001890:	2a00      	cmp	r2, #0
 8001892:	d02f      	beq.n	80018f4 <__aeabi_dadd+0x33c>
 8001894:	464a      	mov	r2, r9
 8001896:	1b92      	subs	r2, r2, r6
 8001898:	4694      	mov	ip, r2
 800189a:	2e00      	cmp	r6, #0
 800189c:	d100      	bne.n	80018a0 <__aeabi_dadd+0x2e8>
 800189e:	e0ad      	b.n	80019fc <__aeabi_dadd+0x444>
 80018a0:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <__aeabi_dadd+0x368>)
 80018a2:	4591      	cmp	r9, r2
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dadd+0x2f0>
 80018a6:	e10f      	b.n	8001ac8 <__aeabi_dadd+0x510>
 80018a8:	2280      	movs	r2, #128	; 0x80
 80018aa:	0412      	lsls	r2, r2, #16
 80018ac:	4310      	orrs	r0, r2
 80018ae:	4662      	mov	r2, ip
 80018b0:	2a38      	cmp	r2, #56	; 0x38
 80018b2:	dd00      	ble.n	80018b6 <__aeabi_dadd+0x2fe>
 80018b4:	e10f      	b.n	8001ad6 <__aeabi_dadd+0x51e>
 80018b6:	2a1f      	cmp	r2, #31
 80018b8:	dd00      	ble.n	80018bc <__aeabi_dadd+0x304>
 80018ba:	e180      	b.n	8001bbe <__aeabi_dadd+0x606>
 80018bc:	4664      	mov	r4, ip
 80018be:	2220      	movs	r2, #32
 80018c0:	001e      	movs	r6, r3
 80018c2:	1b12      	subs	r2, r2, r4
 80018c4:	4667      	mov	r7, ip
 80018c6:	0004      	movs	r4, r0
 80018c8:	4093      	lsls	r3, r2
 80018ca:	4094      	lsls	r4, r2
 80018cc:	40fe      	lsrs	r6, r7
 80018ce:	1e5a      	subs	r2, r3, #1
 80018d0:	4193      	sbcs	r3, r2
 80018d2:	40f8      	lsrs	r0, r7
 80018d4:	4334      	orrs	r4, r6
 80018d6:	431c      	orrs	r4, r3
 80018d8:	4480      	add	r8, r0
 80018da:	1864      	adds	r4, r4, r1
 80018dc:	428c      	cmp	r4, r1
 80018de:	41bf      	sbcs	r7, r7
 80018e0:	427f      	negs	r7, r7
 80018e2:	464e      	mov	r6, r9
 80018e4:	4447      	add	r7, r8
 80018e6:	e7a6      	b.n	8001836 <__aeabi_dadd+0x27e>
 80018e8:	4642      	mov	r2, r8
 80018ea:	430a      	orrs	r2, r1
 80018ec:	0011      	movs	r1, r2
 80018ee:	1e4a      	subs	r2, r1, #1
 80018f0:	4191      	sbcs	r1, r2
 80018f2:	e6ad      	b.n	8001650 <__aeabi_dadd+0x98>
 80018f4:	4c0c      	ldr	r4, [pc, #48]	; (8001928 <__aeabi_dadd+0x370>)
 80018f6:	1c72      	adds	r2, r6, #1
 80018f8:	4222      	tst	r2, r4
 80018fa:	d000      	beq.n	80018fe <__aeabi_dadd+0x346>
 80018fc:	e0a1      	b.n	8001a42 <__aeabi_dadd+0x48a>
 80018fe:	0002      	movs	r2, r0
 8001900:	431a      	orrs	r2, r3
 8001902:	2e00      	cmp	r6, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dadd+0x350>
 8001906:	e0fa      	b.n	8001afe <__aeabi_dadd+0x546>
 8001908:	2a00      	cmp	r2, #0
 800190a:	d100      	bne.n	800190e <__aeabi_dadd+0x356>
 800190c:	e145      	b.n	8001b9a <__aeabi_dadd+0x5e2>
 800190e:	003a      	movs	r2, r7
 8001910:	430a      	orrs	r2, r1
 8001912:	d000      	beq.n	8001916 <__aeabi_dadd+0x35e>
 8001914:	e146      	b.n	8001ba4 <__aeabi_dadd+0x5ec>
 8001916:	0742      	lsls	r2, r0, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	08c0      	lsrs	r0, r0, #3
 800191e:	e77b      	b.n	8001818 <__aeabi_dadd+0x260>
 8001920:	000007ff 	.word	0x000007ff
 8001924:	ff7fffff 	.word	0xff7fffff
 8001928:	000007fe 	.word	0x000007fe
 800192c:	4647      	mov	r7, r8
 800192e:	1a5c      	subs	r4, r3, r1
 8001930:	1bc2      	subs	r2, r0, r7
 8001932:	42a3      	cmp	r3, r4
 8001934:	41bf      	sbcs	r7, r7
 8001936:	427f      	negs	r7, r7
 8001938:	46b9      	mov	r9, r7
 800193a:	0017      	movs	r7, r2
 800193c:	464a      	mov	r2, r9
 800193e:	1abf      	subs	r7, r7, r2
 8001940:	023a      	lsls	r2, r7, #8
 8001942:	d500      	bpl.n	8001946 <__aeabi_dadd+0x38e>
 8001944:	e08d      	b.n	8001a62 <__aeabi_dadd+0x4aa>
 8001946:	0023      	movs	r3, r4
 8001948:	433b      	orrs	r3, r7
 800194a:	d000      	beq.n	800194e <__aeabi_dadd+0x396>
 800194c:	e68a      	b.n	8001664 <__aeabi_dadd+0xac>
 800194e:	2000      	movs	r0, #0
 8001950:	2500      	movs	r5, #0
 8001952:	e761      	b.n	8001818 <__aeabi_dadd+0x260>
 8001954:	4cb4      	ldr	r4, [pc, #720]	; (8001c28 <__aeabi_dadd+0x670>)
 8001956:	45a1      	cmp	r9, r4
 8001958:	d100      	bne.n	800195c <__aeabi_dadd+0x3a4>
 800195a:	e0ad      	b.n	8001ab8 <__aeabi_dadd+0x500>
 800195c:	2480      	movs	r4, #128	; 0x80
 800195e:	0424      	lsls	r4, r4, #16
 8001960:	4320      	orrs	r0, r4
 8001962:	4664      	mov	r4, ip
 8001964:	2c38      	cmp	r4, #56	; 0x38
 8001966:	dc3d      	bgt.n	80019e4 <__aeabi_dadd+0x42c>
 8001968:	4662      	mov	r2, ip
 800196a:	2c1f      	cmp	r4, #31
 800196c:	dd00      	ble.n	8001970 <__aeabi_dadd+0x3b8>
 800196e:	e0b7      	b.n	8001ae0 <__aeabi_dadd+0x528>
 8001970:	2520      	movs	r5, #32
 8001972:	001e      	movs	r6, r3
 8001974:	1b2d      	subs	r5, r5, r4
 8001976:	0004      	movs	r4, r0
 8001978:	40ab      	lsls	r3, r5
 800197a:	40ac      	lsls	r4, r5
 800197c:	40d6      	lsrs	r6, r2
 800197e:	40d0      	lsrs	r0, r2
 8001980:	4642      	mov	r2, r8
 8001982:	1e5d      	subs	r5, r3, #1
 8001984:	41ab      	sbcs	r3, r5
 8001986:	4334      	orrs	r4, r6
 8001988:	1a12      	subs	r2, r2, r0
 800198a:	4690      	mov	r8, r2
 800198c:	4323      	orrs	r3, r4
 800198e:	e02c      	b.n	80019ea <__aeabi_dadd+0x432>
 8001990:	0742      	lsls	r2, r0, #29
 8001992:	08db      	lsrs	r3, r3, #3
 8001994:	4313      	orrs	r3, r2
 8001996:	08c0      	lsrs	r0, r0, #3
 8001998:	e73b      	b.n	8001812 <__aeabi_dadd+0x25a>
 800199a:	185c      	adds	r4, r3, r1
 800199c:	429c      	cmp	r4, r3
 800199e:	419b      	sbcs	r3, r3
 80019a0:	4440      	add	r0, r8
 80019a2:	425b      	negs	r3, r3
 80019a4:	18c7      	adds	r7, r0, r3
 80019a6:	2601      	movs	r6, #1
 80019a8:	023b      	lsls	r3, r7, #8
 80019aa:	d400      	bmi.n	80019ae <__aeabi_dadd+0x3f6>
 80019ac:	e729      	b.n	8001802 <__aeabi_dadd+0x24a>
 80019ae:	2602      	movs	r6, #2
 80019b0:	4a9e      	ldr	r2, [pc, #632]	; (8001c2c <__aeabi_dadd+0x674>)
 80019b2:	0863      	lsrs	r3, r4, #1
 80019b4:	4017      	ands	r7, r2
 80019b6:	2201      	movs	r2, #1
 80019b8:	4014      	ands	r4, r2
 80019ba:	431c      	orrs	r4, r3
 80019bc:	07fb      	lsls	r3, r7, #31
 80019be:	431c      	orrs	r4, r3
 80019c0:	087f      	lsrs	r7, r7, #1
 80019c2:	e673      	b.n	80016ac <__aeabi_dadd+0xf4>
 80019c4:	4644      	mov	r4, r8
 80019c6:	3a20      	subs	r2, #32
 80019c8:	40d4      	lsrs	r4, r2
 80019ca:	4662      	mov	r2, ip
 80019cc:	2a20      	cmp	r2, #32
 80019ce:	d005      	beq.n	80019dc <__aeabi_dadd+0x424>
 80019d0:	4667      	mov	r7, ip
 80019d2:	2240      	movs	r2, #64	; 0x40
 80019d4:	1bd2      	subs	r2, r2, r7
 80019d6:	4647      	mov	r7, r8
 80019d8:	4097      	lsls	r7, r2
 80019da:	4339      	orrs	r1, r7
 80019dc:	1e4a      	subs	r2, r1, #1
 80019de:	4191      	sbcs	r1, r2
 80019e0:	4321      	orrs	r1, r4
 80019e2:	e635      	b.n	8001650 <__aeabi_dadd+0x98>
 80019e4:	4303      	orrs	r3, r0
 80019e6:	1e58      	subs	r0, r3, #1
 80019e8:	4183      	sbcs	r3, r0
 80019ea:	1acc      	subs	r4, r1, r3
 80019ec:	42a1      	cmp	r1, r4
 80019ee:	41bf      	sbcs	r7, r7
 80019f0:	4643      	mov	r3, r8
 80019f2:	427f      	negs	r7, r7
 80019f4:	4655      	mov	r5, sl
 80019f6:	464e      	mov	r6, r9
 80019f8:	1bdf      	subs	r7, r3, r7
 80019fa:	e62e      	b.n	800165a <__aeabi_dadd+0xa2>
 80019fc:	0002      	movs	r2, r0
 80019fe:	431a      	orrs	r2, r3
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dadd+0x44c>
 8001a02:	e0bd      	b.n	8001b80 <__aeabi_dadd+0x5c8>
 8001a04:	4662      	mov	r2, ip
 8001a06:	4664      	mov	r4, ip
 8001a08:	3a01      	subs	r2, #1
 8001a0a:	2c01      	cmp	r4, #1
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x458>
 8001a0e:	e0e5      	b.n	8001bdc <__aeabi_dadd+0x624>
 8001a10:	4c85      	ldr	r4, [pc, #532]	; (8001c28 <__aeabi_dadd+0x670>)
 8001a12:	45a4      	cmp	ip, r4
 8001a14:	d058      	beq.n	8001ac8 <__aeabi_dadd+0x510>
 8001a16:	4694      	mov	ip, r2
 8001a18:	e749      	b.n	80018ae <__aeabi_dadd+0x2f6>
 8001a1a:	4664      	mov	r4, ip
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	1b12      	subs	r2, r2, r4
 8001a20:	4644      	mov	r4, r8
 8001a22:	4094      	lsls	r4, r2
 8001a24:	000f      	movs	r7, r1
 8001a26:	46a1      	mov	r9, r4
 8001a28:	4664      	mov	r4, ip
 8001a2a:	4091      	lsls	r1, r2
 8001a2c:	40e7      	lsrs	r7, r4
 8001a2e:	464c      	mov	r4, r9
 8001a30:	1e4a      	subs	r2, r1, #1
 8001a32:	4191      	sbcs	r1, r2
 8001a34:	433c      	orrs	r4, r7
 8001a36:	4642      	mov	r2, r8
 8001a38:	430c      	orrs	r4, r1
 8001a3a:	4661      	mov	r1, ip
 8001a3c:	40ca      	lsrs	r2, r1
 8001a3e:	1880      	adds	r0, r0, r2
 8001a40:	e6f4      	b.n	800182c <__aeabi_dadd+0x274>
 8001a42:	4c79      	ldr	r4, [pc, #484]	; (8001c28 <__aeabi_dadd+0x670>)
 8001a44:	42a2      	cmp	r2, r4
 8001a46:	d100      	bne.n	8001a4a <__aeabi_dadd+0x492>
 8001a48:	e6fd      	b.n	8001846 <__aeabi_dadd+0x28e>
 8001a4a:	1859      	adds	r1, r3, r1
 8001a4c:	4299      	cmp	r1, r3
 8001a4e:	419b      	sbcs	r3, r3
 8001a50:	4440      	add	r0, r8
 8001a52:	425f      	negs	r7, r3
 8001a54:	19c7      	adds	r7, r0, r7
 8001a56:	07fc      	lsls	r4, r7, #31
 8001a58:	0849      	lsrs	r1, r1, #1
 8001a5a:	0016      	movs	r6, r2
 8001a5c:	430c      	orrs	r4, r1
 8001a5e:	087f      	lsrs	r7, r7, #1
 8001a60:	e6cf      	b.n	8001802 <__aeabi_dadd+0x24a>
 8001a62:	1acc      	subs	r4, r1, r3
 8001a64:	42a1      	cmp	r1, r4
 8001a66:	41bf      	sbcs	r7, r7
 8001a68:	4643      	mov	r3, r8
 8001a6a:	427f      	negs	r7, r7
 8001a6c:	1a18      	subs	r0, r3, r0
 8001a6e:	4655      	mov	r5, sl
 8001a70:	1bc7      	subs	r7, r0, r7
 8001a72:	e5f7      	b.n	8001664 <__aeabi_dadd+0xac>
 8001a74:	08c9      	lsrs	r1, r1, #3
 8001a76:	077b      	lsls	r3, r7, #29
 8001a78:	4655      	mov	r5, sl
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	08f8      	lsrs	r0, r7, #3
 8001a7e:	e6c8      	b.n	8001812 <__aeabi_dadd+0x25a>
 8001a80:	2c00      	cmp	r4, #0
 8001a82:	d000      	beq.n	8001a86 <__aeabi_dadd+0x4ce>
 8001a84:	e081      	b.n	8001b8a <__aeabi_dadd+0x5d2>
 8001a86:	4643      	mov	r3, r8
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	d115      	bne.n	8001ab8 <__aeabi_dadd+0x500>
 8001a8c:	2080      	movs	r0, #128	; 0x80
 8001a8e:	2500      	movs	r5, #0
 8001a90:	0300      	lsls	r0, r0, #12
 8001a92:	e6e3      	b.n	800185c <__aeabi_dadd+0x2a4>
 8001a94:	1a5c      	subs	r4, r3, r1
 8001a96:	42a3      	cmp	r3, r4
 8001a98:	419b      	sbcs	r3, r3
 8001a9a:	1bc7      	subs	r7, r0, r7
 8001a9c:	425b      	negs	r3, r3
 8001a9e:	2601      	movs	r6, #1
 8001aa0:	1aff      	subs	r7, r7, r3
 8001aa2:	e5da      	b.n	800165a <__aeabi_dadd+0xa2>
 8001aa4:	0742      	lsls	r2, r0, #29
 8001aa6:	08db      	lsrs	r3, r3, #3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	08c0      	lsrs	r0, r0, #3
 8001aac:	e6d2      	b.n	8001854 <__aeabi_dadd+0x29c>
 8001aae:	0742      	lsls	r2, r0, #29
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	08c0      	lsrs	r0, r0, #3
 8001ab6:	e6ac      	b.n	8001812 <__aeabi_dadd+0x25a>
 8001ab8:	4643      	mov	r3, r8
 8001aba:	4642      	mov	r2, r8
 8001abc:	08c9      	lsrs	r1, r1, #3
 8001abe:	075b      	lsls	r3, r3, #29
 8001ac0:	4655      	mov	r5, sl
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	08d0      	lsrs	r0, r2, #3
 8001ac6:	e6c5      	b.n	8001854 <__aeabi_dadd+0x29c>
 8001ac8:	4643      	mov	r3, r8
 8001aca:	4642      	mov	r2, r8
 8001acc:	075b      	lsls	r3, r3, #29
 8001ace:	08c9      	lsrs	r1, r1, #3
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	08d0      	lsrs	r0, r2, #3
 8001ad4:	e6be      	b.n	8001854 <__aeabi_dadd+0x29c>
 8001ad6:	4303      	orrs	r3, r0
 8001ad8:	001c      	movs	r4, r3
 8001ada:	1e63      	subs	r3, r4, #1
 8001adc:	419c      	sbcs	r4, r3
 8001ade:	e6fc      	b.n	80018da <__aeabi_dadd+0x322>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	3c20      	subs	r4, #32
 8001ae4:	40e2      	lsrs	r2, r4
 8001ae6:	0014      	movs	r4, r2
 8001ae8:	4662      	mov	r2, ip
 8001aea:	2a20      	cmp	r2, #32
 8001aec:	d003      	beq.n	8001af6 <__aeabi_dadd+0x53e>
 8001aee:	2540      	movs	r5, #64	; 0x40
 8001af0:	1aad      	subs	r5, r5, r2
 8001af2:	40a8      	lsls	r0, r5
 8001af4:	4303      	orrs	r3, r0
 8001af6:	1e58      	subs	r0, r3, #1
 8001af8:	4183      	sbcs	r3, r0
 8001afa:	4323      	orrs	r3, r4
 8001afc:	e775      	b.n	80019ea <__aeabi_dadd+0x432>
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	d0e2      	beq.n	8001ac8 <__aeabi_dadd+0x510>
 8001b02:	003a      	movs	r2, r7
 8001b04:	430a      	orrs	r2, r1
 8001b06:	d0cd      	beq.n	8001aa4 <__aeabi_dadd+0x4ec>
 8001b08:	0742      	lsls	r2, r0, #29
 8001b0a:	08db      	lsrs	r3, r3, #3
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	2280      	movs	r2, #128	; 0x80
 8001b10:	08c0      	lsrs	r0, r0, #3
 8001b12:	0312      	lsls	r2, r2, #12
 8001b14:	4210      	tst	r0, r2
 8001b16:	d006      	beq.n	8001b26 <__aeabi_dadd+0x56e>
 8001b18:	08fc      	lsrs	r4, r7, #3
 8001b1a:	4214      	tst	r4, r2
 8001b1c:	d103      	bne.n	8001b26 <__aeabi_dadd+0x56e>
 8001b1e:	0020      	movs	r0, r4
 8001b20:	08cb      	lsrs	r3, r1, #3
 8001b22:	077a      	lsls	r2, r7, #29
 8001b24:	4313      	orrs	r3, r2
 8001b26:	0f5a      	lsrs	r2, r3, #29
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	0752      	lsls	r2, r2, #29
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	e690      	b.n	8001854 <__aeabi_dadd+0x29c>
 8001b32:	4643      	mov	r3, r8
 8001b34:	430b      	orrs	r3, r1
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dadd+0x582>
 8001b38:	e709      	b.n	800194e <__aeabi_dadd+0x396>
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	4642      	mov	r2, r8
 8001b3e:	08c9      	lsrs	r1, r1, #3
 8001b40:	075b      	lsls	r3, r3, #29
 8001b42:	4655      	mov	r5, sl
 8001b44:	430b      	orrs	r3, r1
 8001b46:	08d0      	lsrs	r0, r2, #3
 8001b48:	e666      	b.n	8001818 <__aeabi_dadd+0x260>
 8001b4a:	1acc      	subs	r4, r1, r3
 8001b4c:	42a1      	cmp	r1, r4
 8001b4e:	4189      	sbcs	r1, r1
 8001b50:	1a3f      	subs	r7, r7, r0
 8001b52:	4249      	negs	r1, r1
 8001b54:	4655      	mov	r5, sl
 8001b56:	2601      	movs	r6, #1
 8001b58:	1a7f      	subs	r7, r7, r1
 8001b5a:	e57e      	b.n	800165a <__aeabi_dadd+0xa2>
 8001b5c:	4642      	mov	r2, r8
 8001b5e:	1a5c      	subs	r4, r3, r1
 8001b60:	1a87      	subs	r7, r0, r2
 8001b62:	42a3      	cmp	r3, r4
 8001b64:	4192      	sbcs	r2, r2
 8001b66:	4252      	negs	r2, r2
 8001b68:	1abf      	subs	r7, r7, r2
 8001b6a:	023a      	lsls	r2, r7, #8
 8001b6c:	d53d      	bpl.n	8001bea <__aeabi_dadd+0x632>
 8001b6e:	1acc      	subs	r4, r1, r3
 8001b70:	42a1      	cmp	r1, r4
 8001b72:	4189      	sbcs	r1, r1
 8001b74:	4643      	mov	r3, r8
 8001b76:	4249      	negs	r1, r1
 8001b78:	1a1f      	subs	r7, r3, r0
 8001b7a:	4655      	mov	r5, sl
 8001b7c:	1a7f      	subs	r7, r7, r1
 8001b7e:	e595      	b.n	80016ac <__aeabi_dadd+0xf4>
 8001b80:	077b      	lsls	r3, r7, #29
 8001b82:	08c9      	lsrs	r1, r1, #3
 8001b84:	430b      	orrs	r3, r1
 8001b86:	08f8      	lsrs	r0, r7, #3
 8001b88:	e643      	b.n	8001812 <__aeabi_dadd+0x25a>
 8001b8a:	4644      	mov	r4, r8
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	430c      	orrs	r4, r1
 8001b90:	d130      	bne.n	8001bf4 <__aeabi_dadd+0x63c>
 8001b92:	0742      	lsls	r2, r0, #29
 8001b94:	4313      	orrs	r3, r2
 8001b96:	08c0      	lsrs	r0, r0, #3
 8001b98:	e65c      	b.n	8001854 <__aeabi_dadd+0x29c>
 8001b9a:	077b      	lsls	r3, r7, #29
 8001b9c:	08c9      	lsrs	r1, r1, #3
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	08f8      	lsrs	r0, r7, #3
 8001ba2:	e639      	b.n	8001818 <__aeabi_dadd+0x260>
 8001ba4:	185c      	adds	r4, r3, r1
 8001ba6:	429c      	cmp	r4, r3
 8001ba8:	419b      	sbcs	r3, r3
 8001baa:	4440      	add	r0, r8
 8001bac:	425b      	negs	r3, r3
 8001bae:	18c7      	adds	r7, r0, r3
 8001bb0:	023b      	lsls	r3, r7, #8
 8001bb2:	d400      	bmi.n	8001bb6 <__aeabi_dadd+0x5fe>
 8001bb4:	e625      	b.n	8001802 <__aeabi_dadd+0x24a>
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <__aeabi_dadd+0x674>)
 8001bb8:	2601      	movs	r6, #1
 8001bba:	401f      	ands	r7, r3
 8001bbc:	e621      	b.n	8001802 <__aeabi_dadd+0x24a>
 8001bbe:	0004      	movs	r4, r0
 8001bc0:	3a20      	subs	r2, #32
 8001bc2:	40d4      	lsrs	r4, r2
 8001bc4:	4662      	mov	r2, ip
 8001bc6:	2a20      	cmp	r2, #32
 8001bc8:	d004      	beq.n	8001bd4 <__aeabi_dadd+0x61c>
 8001bca:	2240      	movs	r2, #64	; 0x40
 8001bcc:	4666      	mov	r6, ip
 8001bce:	1b92      	subs	r2, r2, r6
 8001bd0:	4090      	lsls	r0, r2
 8001bd2:	4303      	orrs	r3, r0
 8001bd4:	1e5a      	subs	r2, r3, #1
 8001bd6:	4193      	sbcs	r3, r2
 8001bd8:	431c      	orrs	r4, r3
 8001bda:	e67e      	b.n	80018da <__aeabi_dadd+0x322>
 8001bdc:	185c      	adds	r4, r3, r1
 8001bde:	428c      	cmp	r4, r1
 8001be0:	4189      	sbcs	r1, r1
 8001be2:	4440      	add	r0, r8
 8001be4:	4249      	negs	r1, r1
 8001be6:	1847      	adds	r7, r0, r1
 8001be8:	e6dd      	b.n	80019a6 <__aeabi_dadd+0x3ee>
 8001bea:	0023      	movs	r3, r4
 8001bec:	433b      	orrs	r3, r7
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dadd+0x63a>
 8001bf0:	e6ad      	b.n	800194e <__aeabi_dadd+0x396>
 8001bf2:	e606      	b.n	8001802 <__aeabi_dadd+0x24a>
 8001bf4:	0744      	lsls	r4, r0, #29
 8001bf6:	4323      	orrs	r3, r4
 8001bf8:	2480      	movs	r4, #128	; 0x80
 8001bfa:	08c0      	lsrs	r0, r0, #3
 8001bfc:	0324      	lsls	r4, r4, #12
 8001bfe:	4220      	tst	r0, r4
 8001c00:	d008      	beq.n	8001c14 <__aeabi_dadd+0x65c>
 8001c02:	4642      	mov	r2, r8
 8001c04:	08d6      	lsrs	r6, r2, #3
 8001c06:	4226      	tst	r6, r4
 8001c08:	d104      	bne.n	8001c14 <__aeabi_dadd+0x65c>
 8001c0a:	4655      	mov	r5, sl
 8001c0c:	0030      	movs	r0, r6
 8001c0e:	08cb      	lsrs	r3, r1, #3
 8001c10:	0751      	lsls	r1, r2, #29
 8001c12:	430b      	orrs	r3, r1
 8001c14:	0f5a      	lsrs	r2, r3, #29
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	08db      	lsrs	r3, r3, #3
 8001c1a:	0752      	lsls	r2, r2, #29
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	e619      	b.n	8001854 <__aeabi_dadd+0x29c>
 8001c20:	2300      	movs	r3, #0
 8001c22:	4a01      	ldr	r2, [pc, #4]	; (8001c28 <__aeabi_dadd+0x670>)
 8001c24:	001f      	movs	r7, r3
 8001c26:	e55e      	b.n	80016e6 <__aeabi_dadd+0x12e>
 8001c28:	000007ff 	.word	0x000007ff
 8001c2c:	ff7fffff 	.word	0xff7fffff

08001c30 <__aeabi_ddiv>:
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c32:	4657      	mov	r7, sl
 8001c34:	464e      	mov	r6, r9
 8001c36:	4645      	mov	r5, r8
 8001c38:	46de      	mov	lr, fp
 8001c3a:	b5e0      	push	{r5, r6, r7, lr}
 8001c3c:	4681      	mov	r9, r0
 8001c3e:	0005      	movs	r5, r0
 8001c40:	030c      	lsls	r4, r1, #12
 8001c42:	0048      	lsls	r0, r1, #1
 8001c44:	4692      	mov	sl, r2
 8001c46:	001f      	movs	r7, r3
 8001c48:	b085      	sub	sp, #20
 8001c4a:	0b24      	lsrs	r4, r4, #12
 8001c4c:	0d40      	lsrs	r0, r0, #21
 8001c4e:	0fce      	lsrs	r6, r1, #31
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_ddiv+0x26>
 8001c54:	e156      	b.n	8001f04 <__aeabi_ddiv+0x2d4>
 8001c56:	4bd4      	ldr	r3, [pc, #848]	; (8001fa8 <__aeabi_ddiv+0x378>)
 8001c58:	4298      	cmp	r0, r3
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_ddiv+0x2e>
 8001c5c:	e172      	b.n	8001f44 <__aeabi_ddiv+0x314>
 8001c5e:	0f6b      	lsrs	r3, r5, #29
 8001c60:	00e4      	lsls	r4, r4, #3
 8001c62:	431c      	orrs	r4, r3
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	041b      	lsls	r3, r3, #16
 8001c68:	4323      	orrs	r3, r4
 8001c6a:	4698      	mov	r8, r3
 8001c6c:	4bcf      	ldr	r3, [pc, #828]	; (8001fac <__aeabi_ddiv+0x37c>)
 8001c6e:	00ed      	lsls	r5, r5, #3
 8001c70:	469b      	mov	fp, r3
 8001c72:	2300      	movs	r3, #0
 8001c74:	4699      	mov	r9, r3
 8001c76:	4483      	add	fp, r0
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	033c      	lsls	r4, r7, #12
 8001c7c:	007b      	lsls	r3, r7, #1
 8001c7e:	4650      	mov	r0, sl
 8001c80:	0b24      	lsrs	r4, r4, #12
 8001c82:	0d5b      	lsrs	r3, r3, #21
 8001c84:	0fff      	lsrs	r7, r7, #31
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d100      	bne.n	8001c8c <__aeabi_ddiv+0x5c>
 8001c8a:	e11f      	b.n	8001ecc <__aeabi_ddiv+0x29c>
 8001c8c:	4ac6      	ldr	r2, [pc, #792]	; (8001fa8 <__aeabi_ddiv+0x378>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d100      	bne.n	8001c94 <__aeabi_ddiv+0x64>
 8001c92:	e162      	b.n	8001f5a <__aeabi_ddiv+0x32a>
 8001c94:	49c5      	ldr	r1, [pc, #788]	; (8001fac <__aeabi_ddiv+0x37c>)
 8001c96:	0f42      	lsrs	r2, r0, #29
 8001c98:	468c      	mov	ip, r1
 8001c9a:	00e4      	lsls	r4, r4, #3
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	4314      	orrs	r4, r2
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	4463      	add	r3, ip
 8001ca4:	0412      	lsls	r2, r2, #16
 8001ca6:	1acb      	subs	r3, r1, r3
 8001ca8:	4314      	orrs	r4, r2
 8001caa:	469b      	mov	fp, r3
 8001cac:	00c2      	lsls	r2, r0, #3
 8001cae:	2000      	movs	r0, #0
 8001cb0:	0033      	movs	r3, r6
 8001cb2:	407b      	eors	r3, r7
 8001cb4:	469a      	mov	sl, r3
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d827      	bhi.n	8001d0c <__aeabi_ddiv+0xdc>
 8001cbc:	49bc      	ldr	r1, [pc, #752]	; (8001fb0 <__aeabi_ddiv+0x380>)
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	58cb      	ldr	r3, [r1, r3]
 8001cc2:	469f      	mov	pc, r3
 8001cc4:	46b2      	mov	sl, r6
 8001cc6:	9b00      	ldr	r3, [sp, #0]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d016      	beq.n	8001cfa <__aeabi_ddiv+0xca>
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_ddiv+0xa2>
 8001cd0:	e28e      	b.n	80021f0 <__aeabi_ddiv+0x5c0>
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_ddiv+0xa8>
 8001cd6:	e0d9      	b.n	8001e8c <__aeabi_ddiv+0x25c>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2400      	movs	r4, #0
 8001cdc:	2500      	movs	r5, #0
 8001cde:	4652      	mov	r2, sl
 8001ce0:	051b      	lsls	r3, r3, #20
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	07d2      	lsls	r2, r2, #31
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	0028      	movs	r0, r5
 8001cea:	0019      	movs	r1, r3
 8001cec:	b005      	add	sp, #20
 8001cee:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf0:	46bb      	mov	fp, r7
 8001cf2:	46b2      	mov	sl, r6
 8001cf4:	46a9      	mov	r9, r5
 8001cf6:	46a0      	mov	r8, r4
 8001cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cfa:	2400      	movs	r4, #0
 8001cfc:	2500      	movs	r5, #0
 8001cfe:	4baa      	ldr	r3, [pc, #680]	; (8001fa8 <__aeabi_ddiv+0x378>)
 8001d00:	e7ed      	b.n	8001cde <__aeabi_ddiv+0xae>
 8001d02:	46ba      	mov	sl, r7
 8001d04:	46a0      	mov	r8, r4
 8001d06:	0015      	movs	r5, r2
 8001d08:	9000      	str	r0, [sp, #0]
 8001d0a:	e7dc      	b.n	8001cc6 <__aeabi_ddiv+0x96>
 8001d0c:	4544      	cmp	r4, r8
 8001d0e:	d200      	bcs.n	8001d12 <__aeabi_ddiv+0xe2>
 8001d10:	e1c7      	b.n	80020a2 <__aeabi_ddiv+0x472>
 8001d12:	d100      	bne.n	8001d16 <__aeabi_ddiv+0xe6>
 8001d14:	e1c2      	b.n	800209c <__aeabi_ddiv+0x46c>
 8001d16:	2301      	movs	r3, #1
 8001d18:	425b      	negs	r3, r3
 8001d1a:	469c      	mov	ip, r3
 8001d1c:	002e      	movs	r6, r5
 8001d1e:	4640      	mov	r0, r8
 8001d20:	2500      	movs	r5, #0
 8001d22:	44e3      	add	fp, ip
 8001d24:	0223      	lsls	r3, r4, #8
 8001d26:	0e14      	lsrs	r4, r2, #24
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	0423      	lsls	r3, r4, #16
 8001d30:	0c1f      	lsrs	r7, r3, #16
 8001d32:	0212      	lsls	r2, r2, #8
 8001d34:	4649      	mov	r1, r9
 8001d36:	9200      	str	r2, [sp, #0]
 8001d38:	9701      	str	r7, [sp, #4]
 8001d3a:	f7fe fa8f 	bl	800025c <__aeabi_uidivmod>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	437a      	muls	r2, r7
 8001d42:	040b      	lsls	r3, r1, #16
 8001d44:	0c31      	lsrs	r1, r6, #16
 8001d46:	4680      	mov	r8, r0
 8001d48:	4319      	orrs	r1, r3
 8001d4a:	428a      	cmp	r2, r1
 8001d4c:	d907      	bls.n	8001d5e <__aeabi_ddiv+0x12e>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	425b      	negs	r3, r3
 8001d52:	469c      	mov	ip, r3
 8001d54:	1909      	adds	r1, r1, r4
 8001d56:	44e0      	add	r8, ip
 8001d58:	428c      	cmp	r4, r1
 8001d5a:	d800      	bhi.n	8001d5e <__aeabi_ddiv+0x12e>
 8001d5c:	e207      	b.n	800216e <__aeabi_ddiv+0x53e>
 8001d5e:	1a88      	subs	r0, r1, r2
 8001d60:	4649      	mov	r1, r9
 8001d62:	f7fe fa7b 	bl	800025c <__aeabi_uidivmod>
 8001d66:	0409      	lsls	r1, r1, #16
 8001d68:	468c      	mov	ip, r1
 8001d6a:	0431      	lsls	r1, r6, #16
 8001d6c:	4666      	mov	r6, ip
 8001d6e:	9a01      	ldr	r2, [sp, #4]
 8001d70:	0c09      	lsrs	r1, r1, #16
 8001d72:	4342      	muls	r2, r0
 8001d74:	0003      	movs	r3, r0
 8001d76:	4331      	orrs	r1, r6
 8001d78:	428a      	cmp	r2, r1
 8001d7a:	d904      	bls.n	8001d86 <__aeabi_ddiv+0x156>
 8001d7c:	1909      	adds	r1, r1, r4
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	428c      	cmp	r4, r1
 8001d82:	d800      	bhi.n	8001d86 <__aeabi_ddiv+0x156>
 8001d84:	e1ed      	b.n	8002162 <__aeabi_ddiv+0x532>
 8001d86:	1a88      	subs	r0, r1, r2
 8001d88:	4642      	mov	r2, r8
 8001d8a:	0412      	lsls	r2, r2, #16
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4641      	mov	r1, r8
 8001d92:	9b00      	ldr	r3, [sp, #0]
 8001d94:	040e      	lsls	r6, r1, #16
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	001f      	movs	r7, r3
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	9b00      	ldr	r3, [sp, #0]
 8001d9e:	0c36      	lsrs	r6, r6, #16
 8001da0:	041b      	lsls	r3, r3, #16
 8001da2:	0c19      	lsrs	r1, r3, #16
 8001da4:	000b      	movs	r3, r1
 8001da6:	4373      	muls	r3, r6
 8001da8:	0c12      	lsrs	r2, r2, #16
 8001daa:	437e      	muls	r6, r7
 8001dac:	9103      	str	r1, [sp, #12]
 8001dae:	4351      	muls	r1, r2
 8001db0:	437a      	muls	r2, r7
 8001db2:	0c1f      	lsrs	r7, r3, #16
 8001db4:	46bc      	mov	ip, r7
 8001db6:	1876      	adds	r6, r6, r1
 8001db8:	4466      	add	r6, ip
 8001dba:	42b1      	cmp	r1, r6
 8001dbc:	d903      	bls.n	8001dc6 <__aeabi_ddiv+0x196>
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	0249      	lsls	r1, r1, #9
 8001dc2:	468c      	mov	ip, r1
 8001dc4:	4462      	add	r2, ip
 8001dc6:	0c31      	lsrs	r1, r6, #16
 8001dc8:	188a      	adds	r2, r1, r2
 8001dca:	0431      	lsls	r1, r6, #16
 8001dcc:	041e      	lsls	r6, r3, #16
 8001dce:	0c36      	lsrs	r6, r6, #16
 8001dd0:	198e      	adds	r6, r1, r6
 8001dd2:	4290      	cmp	r0, r2
 8001dd4:	d302      	bcc.n	8001ddc <__aeabi_ddiv+0x1ac>
 8001dd6:	d112      	bne.n	8001dfe <__aeabi_ddiv+0x1ce>
 8001dd8:	42b5      	cmp	r5, r6
 8001dda:	d210      	bcs.n	8001dfe <__aeabi_ddiv+0x1ce>
 8001ddc:	4643      	mov	r3, r8
 8001dde:	1e59      	subs	r1, r3, #1
 8001de0:	9b00      	ldr	r3, [sp, #0]
 8001de2:	469c      	mov	ip, r3
 8001de4:	4465      	add	r5, ip
 8001de6:	001f      	movs	r7, r3
 8001de8:	429d      	cmp	r5, r3
 8001dea:	419b      	sbcs	r3, r3
 8001dec:	425b      	negs	r3, r3
 8001dee:	191b      	adds	r3, r3, r4
 8001df0:	18c0      	adds	r0, r0, r3
 8001df2:	4284      	cmp	r4, r0
 8001df4:	d200      	bcs.n	8001df8 <__aeabi_ddiv+0x1c8>
 8001df6:	e1a0      	b.n	800213a <__aeabi_ddiv+0x50a>
 8001df8:	d100      	bne.n	8001dfc <__aeabi_ddiv+0x1cc>
 8001dfa:	e19b      	b.n	8002134 <__aeabi_ddiv+0x504>
 8001dfc:	4688      	mov	r8, r1
 8001dfe:	1bae      	subs	r6, r5, r6
 8001e00:	42b5      	cmp	r5, r6
 8001e02:	41ad      	sbcs	r5, r5
 8001e04:	1a80      	subs	r0, r0, r2
 8001e06:	426d      	negs	r5, r5
 8001e08:	1b40      	subs	r0, r0, r5
 8001e0a:	4284      	cmp	r4, r0
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_ddiv+0x1e0>
 8001e0e:	e1d5      	b.n	80021bc <__aeabi_ddiv+0x58c>
 8001e10:	4649      	mov	r1, r9
 8001e12:	f7fe fa23 	bl	800025c <__aeabi_uidivmod>
 8001e16:	9a01      	ldr	r2, [sp, #4]
 8001e18:	040b      	lsls	r3, r1, #16
 8001e1a:	4342      	muls	r2, r0
 8001e1c:	0c31      	lsrs	r1, r6, #16
 8001e1e:	0005      	movs	r5, r0
 8001e20:	4319      	orrs	r1, r3
 8001e22:	428a      	cmp	r2, r1
 8001e24:	d900      	bls.n	8001e28 <__aeabi_ddiv+0x1f8>
 8001e26:	e16c      	b.n	8002102 <__aeabi_ddiv+0x4d2>
 8001e28:	1a88      	subs	r0, r1, r2
 8001e2a:	4649      	mov	r1, r9
 8001e2c:	f7fe fa16 	bl	800025c <__aeabi_uidivmod>
 8001e30:	9a01      	ldr	r2, [sp, #4]
 8001e32:	0436      	lsls	r6, r6, #16
 8001e34:	4342      	muls	r2, r0
 8001e36:	0409      	lsls	r1, r1, #16
 8001e38:	0c36      	lsrs	r6, r6, #16
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	430e      	orrs	r6, r1
 8001e3e:	42b2      	cmp	r2, r6
 8001e40:	d900      	bls.n	8001e44 <__aeabi_ddiv+0x214>
 8001e42:	e153      	b.n	80020ec <__aeabi_ddiv+0x4bc>
 8001e44:	9803      	ldr	r0, [sp, #12]
 8001e46:	1ab6      	subs	r6, r6, r2
 8001e48:	0002      	movs	r2, r0
 8001e4a:	042d      	lsls	r5, r5, #16
 8001e4c:	431d      	orrs	r5, r3
 8001e4e:	9f02      	ldr	r7, [sp, #8]
 8001e50:	042b      	lsls	r3, r5, #16
 8001e52:	0c1b      	lsrs	r3, r3, #16
 8001e54:	435a      	muls	r2, r3
 8001e56:	437b      	muls	r3, r7
 8001e58:	469c      	mov	ip, r3
 8001e5a:	0c29      	lsrs	r1, r5, #16
 8001e5c:	4348      	muls	r0, r1
 8001e5e:	0c13      	lsrs	r3, r2, #16
 8001e60:	4484      	add	ip, r0
 8001e62:	4463      	add	r3, ip
 8001e64:	4379      	muls	r1, r7
 8001e66:	4298      	cmp	r0, r3
 8001e68:	d903      	bls.n	8001e72 <__aeabi_ddiv+0x242>
 8001e6a:	2080      	movs	r0, #128	; 0x80
 8001e6c:	0240      	lsls	r0, r0, #9
 8001e6e:	4684      	mov	ip, r0
 8001e70:	4461      	add	r1, ip
 8001e72:	0c18      	lsrs	r0, r3, #16
 8001e74:	0412      	lsls	r2, r2, #16
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	0c12      	lsrs	r2, r2, #16
 8001e7a:	1841      	adds	r1, r0, r1
 8001e7c:	189b      	adds	r3, r3, r2
 8001e7e:	428e      	cmp	r6, r1
 8001e80:	d200      	bcs.n	8001e84 <__aeabi_ddiv+0x254>
 8001e82:	e0ff      	b.n	8002084 <__aeabi_ddiv+0x454>
 8001e84:	d100      	bne.n	8001e88 <__aeabi_ddiv+0x258>
 8001e86:	e0fa      	b.n	800207e <__aeabi_ddiv+0x44e>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	431d      	orrs	r5, r3
 8001e8c:	4a49      	ldr	r2, [pc, #292]	; (8001fb4 <__aeabi_ddiv+0x384>)
 8001e8e:	445a      	add	r2, fp
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	dc00      	bgt.n	8001e96 <__aeabi_ddiv+0x266>
 8001e94:	e0aa      	b.n	8001fec <__aeabi_ddiv+0x3bc>
 8001e96:	076b      	lsls	r3, r5, #29
 8001e98:	d000      	beq.n	8001e9c <__aeabi_ddiv+0x26c>
 8001e9a:	e13d      	b.n	8002118 <__aeabi_ddiv+0x4e8>
 8001e9c:	08ed      	lsrs	r5, r5, #3
 8001e9e:	4643      	mov	r3, r8
 8001ea0:	01db      	lsls	r3, r3, #7
 8001ea2:	d506      	bpl.n	8001eb2 <__aeabi_ddiv+0x282>
 8001ea4:	4642      	mov	r2, r8
 8001ea6:	4b44      	ldr	r3, [pc, #272]	; (8001fb8 <__aeabi_ddiv+0x388>)
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	4690      	mov	r8, r2
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	00d2      	lsls	r2, r2, #3
 8001eb0:	445a      	add	r2, fp
 8001eb2:	4b42      	ldr	r3, [pc, #264]	; (8001fbc <__aeabi_ddiv+0x38c>)
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	dd00      	ble.n	8001eba <__aeabi_ddiv+0x28a>
 8001eb8:	e71f      	b.n	8001cfa <__aeabi_ddiv+0xca>
 8001eba:	4643      	mov	r3, r8
 8001ebc:	075b      	lsls	r3, r3, #29
 8001ebe:	431d      	orrs	r5, r3
 8001ec0:	4643      	mov	r3, r8
 8001ec2:	0552      	lsls	r2, r2, #21
 8001ec4:	025c      	lsls	r4, r3, #9
 8001ec6:	0b24      	lsrs	r4, r4, #12
 8001ec8:	0d53      	lsrs	r3, r2, #21
 8001eca:	e708      	b.n	8001cde <__aeabi_ddiv+0xae>
 8001ecc:	4652      	mov	r2, sl
 8001ece:	4322      	orrs	r2, r4
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x2a4>
 8001ed2:	e07b      	b.n	8001fcc <__aeabi_ddiv+0x39c>
 8001ed4:	2c00      	cmp	r4, #0
 8001ed6:	d100      	bne.n	8001eda <__aeabi_ddiv+0x2aa>
 8001ed8:	e0fa      	b.n	80020d0 <__aeabi_ddiv+0x4a0>
 8001eda:	0020      	movs	r0, r4
 8001edc:	f001 fa22 	bl	8003324 <__clzsi2>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	3a0b      	subs	r2, #11
 8001ee4:	231d      	movs	r3, #29
 8001ee6:	0001      	movs	r1, r0
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	4652      	mov	r2, sl
 8001eec:	3908      	subs	r1, #8
 8001eee:	40da      	lsrs	r2, r3
 8001ef0:	408c      	lsls	r4, r1
 8001ef2:	4314      	orrs	r4, r2
 8001ef4:	4652      	mov	r2, sl
 8001ef6:	408a      	lsls	r2, r1
 8001ef8:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <__aeabi_ddiv+0x390>)
 8001efa:	4458      	add	r0, fp
 8001efc:	469b      	mov	fp, r3
 8001efe:	4483      	add	fp, r0
 8001f00:	2000      	movs	r0, #0
 8001f02:	e6d5      	b.n	8001cb0 <__aeabi_ddiv+0x80>
 8001f04:	464b      	mov	r3, r9
 8001f06:	4323      	orrs	r3, r4
 8001f08:	4698      	mov	r8, r3
 8001f0a:	d044      	beq.n	8001f96 <__aeabi_ddiv+0x366>
 8001f0c:	2c00      	cmp	r4, #0
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_ddiv+0x2e2>
 8001f10:	e0ce      	b.n	80020b0 <__aeabi_ddiv+0x480>
 8001f12:	0020      	movs	r0, r4
 8001f14:	f001 fa06 	bl	8003324 <__clzsi2>
 8001f18:	0001      	movs	r1, r0
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	390b      	subs	r1, #11
 8001f1e:	231d      	movs	r3, #29
 8001f20:	1a5b      	subs	r3, r3, r1
 8001f22:	4649      	mov	r1, r9
 8001f24:	0010      	movs	r0, r2
 8001f26:	40d9      	lsrs	r1, r3
 8001f28:	3808      	subs	r0, #8
 8001f2a:	4084      	lsls	r4, r0
 8001f2c:	000b      	movs	r3, r1
 8001f2e:	464d      	mov	r5, r9
 8001f30:	4323      	orrs	r3, r4
 8001f32:	4698      	mov	r8, r3
 8001f34:	4085      	lsls	r5, r0
 8001f36:	4823      	ldr	r0, [pc, #140]	; (8001fc4 <__aeabi_ddiv+0x394>)
 8001f38:	1a83      	subs	r3, r0, r2
 8001f3a:	469b      	mov	fp, r3
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	4699      	mov	r9, r3
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	e69a      	b.n	8001c7a <__aeabi_ddiv+0x4a>
 8001f44:	464b      	mov	r3, r9
 8001f46:	4323      	orrs	r3, r4
 8001f48:	4698      	mov	r8, r3
 8001f4a:	d11d      	bne.n	8001f88 <__aeabi_ddiv+0x358>
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	4699      	mov	r9, r3
 8001f50:	3b06      	subs	r3, #6
 8001f52:	2500      	movs	r5, #0
 8001f54:	4683      	mov	fp, r0
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	e68f      	b.n	8001c7a <__aeabi_ddiv+0x4a>
 8001f5a:	4652      	mov	r2, sl
 8001f5c:	4322      	orrs	r2, r4
 8001f5e:	d109      	bne.n	8001f74 <__aeabi_ddiv+0x344>
 8001f60:	2302      	movs	r3, #2
 8001f62:	4649      	mov	r1, r9
 8001f64:	4319      	orrs	r1, r3
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <__aeabi_ddiv+0x398>)
 8001f68:	4689      	mov	r9, r1
 8001f6a:	469c      	mov	ip, r3
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	2002      	movs	r0, #2
 8001f70:	44e3      	add	fp, ip
 8001f72:	e69d      	b.n	8001cb0 <__aeabi_ddiv+0x80>
 8001f74:	2303      	movs	r3, #3
 8001f76:	464a      	mov	r2, r9
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <__aeabi_ddiv+0x398>)
 8001f7c:	4691      	mov	r9, r2
 8001f7e:	469c      	mov	ip, r3
 8001f80:	4652      	mov	r2, sl
 8001f82:	2003      	movs	r0, #3
 8001f84:	44e3      	add	fp, ip
 8001f86:	e693      	b.n	8001cb0 <__aeabi_ddiv+0x80>
 8001f88:	230c      	movs	r3, #12
 8001f8a:	4699      	mov	r9, r3
 8001f8c:	3b09      	subs	r3, #9
 8001f8e:	46a0      	mov	r8, r4
 8001f90:	4683      	mov	fp, r0
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	e671      	b.n	8001c7a <__aeabi_ddiv+0x4a>
 8001f96:	2304      	movs	r3, #4
 8001f98:	4699      	mov	r9, r3
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	469b      	mov	fp, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	2500      	movs	r5, #0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	e669      	b.n	8001c7a <__aeabi_ddiv+0x4a>
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	000007ff 	.word	0x000007ff
 8001fac:	fffffc01 	.word	0xfffffc01
 8001fb0:	0800f048 	.word	0x0800f048
 8001fb4:	000003ff 	.word	0x000003ff
 8001fb8:	feffffff 	.word	0xfeffffff
 8001fbc:	000007fe 	.word	0x000007fe
 8001fc0:	000003f3 	.word	0x000003f3
 8001fc4:	fffffc0d 	.word	0xfffffc0d
 8001fc8:	fffff801 	.word	0xfffff801
 8001fcc:	4649      	mov	r1, r9
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4319      	orrs	r1, r3
 8001fd2:	4689      	mov	r9, r1
 8001fd4:	2400      	movs	r4, #0
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	e66a      	b.n	8001cb0 <__aeabi_ddiv+0x80>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2480      	movs	r4, #128	; 0x80
 8001fde:	469a      	mov	sl, r3
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	4b8a      	ldr	r3, [pc, #552]	; (800220c <__aeabi_ddiv+0x5dc>)
 8001fe4:	0324      	lsls	r4, r4, #12
 8001fe6:	e67a      	b.n	8001cde <__aeabi_ddiv+0xae>
 8001fe8:	2501      	movs	r5, #1
 8001fea:	426d      	negs	r5, r5
 8001fec:	2301      	movs	r3, #1
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	2b38      	cmp	r3, #56	; 0x38
 8001ff2:	dd00      	ble.n	8001ff6 <__aeabi_ddiv+0x3c6>
 8001ff4:	e670      	b.n	8001cd8 <__aeabi_ddiv+0xa8>
 8001ff6:	2b1f      	cmp	r3, #31
 8001ff8:	dc00      	bgt.n	8001ffc <__aeabi_ddiv+0x3cc>
 8001ffa:	e0bf      	b.n	800217c <__aeabi_ddiv+0x54c>
 8001ffc:	211f      	movs	r1, #31
 8001ffe:	4249      	negs	r1, r1
 8002000:	1a8a      	subs	r2, r1, r2
 8002002:	4641      	mov	r1, r8
 8002004:	40d1      	lsrs	r1, r2
 8002006:	000a      	movs	r2, r1
 8002008:	2b20      	cmp	r3, #32
 800200a:	d004      	beq.n	8002016 <__aeabi_ddiv+0x3e6>
 800200c:	4641      	mov	r1, r8
 800200e:	4b80      	ldr	r3, [pc, #512]	; (8002210 <__aeabi_ddiv+0x5e0>)
 8002010:	445b      	add	r3, fp
 8002012:	4099      	lsls	r1, r3
 8002014:	430d      	orrs	r5, r1
 8002016:	1e6b      	subs	r3, r5, #1
 8002018:	419d      	sbcs	r5, r3
 800201a:	2307      	movs	r3, #7
 800201c:	432a      	orrs	r2, r5
 800201e:	001d      	movs	r5, r3
 8002020:	2400      	movs	r4, #0
 8002022:	4015      	ands	r5, r2
 8002024:	4213      	tst	r3, r2
 8002026:	d100      	bne.n	800202a <__aeabi_ddiv+0x3fa>
 8002028:	e0d4      	b.n	80021d4 <__aeabi_ddiv+0x5a4>
 800202a:	210f      	movs	r1, #15
 800202c:	2300      	movs	r3, #0
 800202e:	4011      	ands	r1, r2
 8002030:	2904      	cmp	r1, #4
 8002032:	d100      	bne.n	8002036 <__aeabi_ddiv+0x406>
 8002034:	e0cb      	b.n	80021ce <__aeabi_ddiv+0x59e>
 8002036:	1d11      	adds	r1, r2, #4
 8002038:	4291      	cmp	r1, r2
 800203a:	4192      	sbcs	r2, r2
 800203c:	4252      	negs	r2, r2
 800203e:	189b      	adds	r3, r3, r2
 8002040:	000a      	movs	r2, r1
 8002042:	0219      	lsls	r1, r3, #8
 8002044:	d400      	bmi.n	8002048 <__aeabi_ddiv+0x418>
 8002046:	e0c2      	b.n	80021ce <__aeabi_ddiv+0x59e>
 8002048:	2301      	movs	r3, #1
 800204a:	2400      	movs	r4, #0
 800204c:	2500      	movs	r5, #0
 800204e:	e646      	b.n	8001cde <__aeabi_ddiv+0xae>
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	4641      	mov	r1, r8
 8002054:	031b      	lsls	r3, r3, #12
 8002056:	4219      	tst	r1, r3
 8002058:	d008      	beq.n	800206c <__aeabi_ddiv+0x43c>
 800205a:	421c      	tst	r4, r3
 800205c:	d106      	bne.n	800206c <__aeabi_ddiv+0x43c>
 800205e:	431c      	orrs	r4, r3
 8002060:	0324      	lsls	r4, r4, #12
 8002062:	46ba      	mov	sl, r7
 8002064:	0015      	movs	r5, r2
 8002066:	4b69      	ldr	r3, [pc, #420]	; (800220c <__aeabi_ddiv+0x5dc>)
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	e638      	b.n	8001cde <__aeabi_ddiv+0xae>
 800206c:	2480      	movs	r4, #128	; 0x80
 800206e:	4643      	mov	r3, r8
 8002070:	0324      	lsls	r4, r4, #12
 8002072:	431c      	orrs	r4, r3
 8002074:	0324      	lsls	r4, r4, #12
 8002076:	46b2      	mov	sl, r6
 8002078:	4b64      	ldr	r3, [pc, #400]	; (800220c <__aeabi_ddiv+0x5dc>)
 800207a:	0b24      	lsrs	r4, r4, #12
 800207c:	e62f      	b.n	8001cde <__aeabi_ddiv+0xae>
 800207e:	2b00      	cmp	r3, #0
 8002080:	d100      	bne.n	8002084 <__aeabi_ddiv+0x454>
 8002082:	e703      	b.n	8001e8c <__aeabi_ddiv+0x25c>
 8002084:	19a6      	adds	r6, r4, r6
 8002086:	1e68      	subs	r0, r5, #1
 8002088:	42a6      	cmp	r6, r4
 800208a:	d200      	bcs.n	800208e <__aeabi_ddiv+0x45e>
 800208c:	e08d      	b.n	80021aa <__aeabi_ddiv+0x57a>
 800208e:	428e      	cmp	r6, r1
 8002090:	d200      	bcs.n	8002094 <__aeabi_ddiv+0x464>
 8002092:	e0a3      	b.n	80021dc <__aeabi_ddiv+0x5ac>
 8002094:	d100      	bne.n	8002098 <__aeabi_ddiv+0x468>
 8002096:	e0b3      	b.n	8002200 <__aeabi_ddiv+0x5d0>
 8002098:	0005      	movs	r5, r0
 800209a:	e6f5      	b.n	8001e88 <__aeabi_ddiv+0x258>
 800209c:	42aa      	cmp	r2, r5
 800209e:	d900      	bls.n	80020a2 <__aeabi_ddiv+0x472>
 80020a0:	e639      	b.n	8001d16 <__aeabi_ddiv+0xe6>
 80020a2:	4643      	mov	r3, r8
 80020a4:	07de      	lsls	r6, r3, #31
 80020a6:	0858      	lsrs	r0, r3, #1
 80020a8:	086b      	lsrs	r3, r5, #1
 80020aa:	431e      	orrs	r6, r3
 80020ac:	07ed      	lsls	r5, r5, #31
 80020ae:	e639      	b.n	8001d24 <__aeabi_ddiv+0xf4>
 80020b0:	4648      	mov	r0, r9
 80020b2:	f001 f937 	bl	8003324 <__clzsi2>
 80020b6:	0001      	movs	r1, r0
 80020b8:	0002      	movs	r2, r0
 80020ba:	3115      	adds	r1, #21
 80020bc:	3220      	adds	r2, #32
 80020be:	291c      	cmp	r1, #28
 80020c0:	dc00      	bgt.n	80020c4 <__aeabi_ddiv+0x494>
 80020c2:	e72c      	b.n	8001f1e <__aeabi_ddiv+0x2ee>
 80020c4:	464b      	mov	r3, r9
 80020c6:	3808      	subs	r0, #8
 80020c8:	4083      	lsls	r3, r0
 80020ca:	2500      	movs	r5, #0
 80020cc:	4698      	mov	r8, r3
 80020ce:	e732      	b.n	8001f36 <__aeabi_ddiv+0x306>
 80020d0:	f001 f928 	bl	8003324 <__clzsi2>
 80020d4:	0003      	movs	r3, r0
 80020d6:	001a      	movs	r2, r3
 80020d8:	3215      	adds	r2, #21
 80020da:	3020      	adds	r0, #32
 80020dc:	2a1c      	cmp	r2, #28
 80020de:	dc00      	bgt.n	80020e2 <__aeabi_ddiv+0x4b2>
 80020e0:	e700      	b.n	8001ee4 <__aeabi_ddiv+0x2b4>
 80020e2:	4654      	mov	r4, sl
 80020e4:	3b08      	subs	r3, #8
 80020e6:	2200      	movs	r2, #0
 80020e8:	409c      	lsls	r4, r3
 80020ea:	e705      	b.n	8001ef8 <__aeabi_ddiv+0x2c8>
 80020ec:	1936      	adds	r6, r6, r4
 80020ee:	3b01      	subs	r3, #1
 80020f0:	42b4      	cmp	r4, r6
 80020f2:	d900      	bls.n	80020f6 <__aeabi_ddiv+0x4c6>
 80020f4:	e6a6      	b.n	8001e44 <__aeabi_ddiv+0x214>
 80020f6:	42b2      	cmp	r2, r6
 80020f8:	d800      	bhi.n	80020fc <__aeabi_ddiv+0x4cc>
 80020fa:	e6a3      	b.n	8001e44 <__aeabi_ddiv+0x214>
 80020fc:	1e83      	subs	r3, r0, #2
 80020fe:	1936      	adds	r6, r6, r4
 8002100:	e6a0      	b.n	8001e44 <__aeabi_ddiv+0x214>
 8002102:	1909      	adds	r1, r1, r4
 8002104:	3d01      	subs	r5, #1
 8002106:	428c      	cmp	r4, r1
 8002108:	d900      	bls.n	800210c <__aeabi_ddiv+0x4dc>
 800210a:	e68d      	b.n	8001e28 <__aeabi_ddiv+0x1f8>
 800210c:	428a      	cmp	r2, r1
 800210e:	d800      	bhi.n	8002112 <__aeabi_ddiv+0x4e2>
 8002110:	e68a      	b.n	8001e28 <__aeabi_ddiv+0x1f8>
 8002112:	1e85      	subs	r5, r0, #2
 8002114:	1909      	adds	r1, r1, r4
 8002116:	e687      	b.n	8001e28 <__aeabi_ddiv+0x1f8>
 8002118:	230f      	movs	r3, #15
 800211a:	402b      	ands	r3, r5
 800211c:	2b04      	cmp	r3, #4
 800211e:	d100      	bne.n	8002122 <__aeabi_ddiv+0x4f2>
 8002120:	e6bc      	b.n	8001e9c <__aeabi_ddiv+0x26c>
 8002122:	2305      	movs	r3, #5
 8002124:	425b      	negs	r3, r3
 8002126:	42ab      	cmp	r3, r5
 8002128:	419b      	sbcs	r3, r3
 800212a:	3504      	adds	r5, #4
 800212c:	425b      	negs	r3, r3
 800212e:	08ed      	lsrs	r5, r5, #3
 8002130:	4498      	add	r8, r3
 8002132:	e6b4      	b.n	8001e9e <__aeabi_ddiv+0x26e>
 8002134:	42af      	cmp	r7, r5
 8002136:	d900      	bls.n	800213a <__aeabi_ddiv+0x50a>
 8002138:	e660      	b.n	8001dfc <__aeabi_ddiv+0x1cc>
 800213a:	4282      	cmp	r2, r0
 800213c:	d804      	bhi.n	8002148 <__aeabi_ddiv+0x518>
 800213e:	d000      	beq.n	8002142 <__aeabi_ddiv+0x512>
 8002140:	e65c      	b.n	8001dfc <__aeabi_ddiv+0x1cc>
 8002142:	42ae      	cmp	r6, r5
 8002144:	d800      	bhi.n	8002148 <__aeabi_ddiv+0x518>
 8002146:	e659      	b.n	8001dfc <__aeabi_ddiv+0x1cc>
 8002148:	2302      	movs	r3, #2
 800214a:	425b      	negs	r3, r3
 800214c:	469c      	mov	ip, r3
 800214e:	9b00      	ldr	r3, [sp, #0]
 8002150:	44e0      	add	r8, ip
 8002152:	469c      	mov	ip, r3
 8002154:	4465      	add	r5, ip
 8002156:	429d      	cmp	r5, r3
 8002158:	419b      	sbcs	r3, r3
 800215a:	425b      	negs	r3, r3
 800215c:	191b      	adds	r3, r3, r4
 800215e:	18c0      	adds	r0, r0, r3
 8002160:	e64d      	b.n	8001dfe <__aeabi_ddiv+0x1ce>
 8002162:	428a      	cmp	r2, r1
 8002164:	d800      	bhi.n	8002168 <__aeabi_ddiv+0x538>
 8002166:	e60e      	b.n	8001d86 <__aeabi_ddiv+0x156>
 8002168:	1e83      	subs	r3, r0, #2
 800216a:	1909      	adds	r1, r1, r4
 800216c:	e60b      	b.n	8001d86 <__aeabi_ddiv+0x156>
 800216e:	428a      	cmp	r2, r1
 8002170:	d800      	bhi.n	8002174 <__aeabi_ddiv+0x544>
 8002172:	e5f4      	b.n	8001d5e <__aeabi_ddiv+0x12e>
 8002174:	1e83      	subs	r3, r0, #2
 8002176:	4698      	mov	r8, r3
 8002178:	1909      	adds	r1, r1, r4
 800217a:	e5f0      	b.n	8001d5e <__aeabi_ddiv+0x12e>
 800217c:	4925      	ldr	r1, [pc, #148]	; (8002214 <__aeabi_ddiv+0x5e4>)
 800217e:	0028      	movs	r0, r5
 8002180:	4459      	add	r1, fp
 8002182:	408d      	lsls	r5, r1
 8002184:	4642      	mov	r2, r8
 8002186:	408a      	lsls	r2, r1
 8002188:	1e69      	subs	r1, r5, #1
 800218a:	418d      	sbcs	r5, r1
 800218c:	4641      	mov	r1, r8
 800218e:	40d8      	lsrs	r0, r3
 8002190:	40d9      	lsrs	r1, r3
 8002192:	4302      	orrs	r2, r0
 8002194:	432a      	orrs	r2, r5
 8002196:	000b      	movs	r3, r1
 8002198:	0751      	lsls	r1, r2, #29
 800219a:	d100      	bne.n	800219e <__aeabi_ddiv+0x56e>
 800219c:	e751      	b.n	8002042 <__aeabi_ddiv+0x412>
 800219e:	210f      	movs	r1, #15
 80021a0:	4011      	ands	r1, r2
 80021a2:	2904      	cmp	r1, #4
 80021a4:	d000      	beq.n	80021a8 <__aeabi_ddiv+0x578>
 80021a6:	e746      	b.n	8002036 <__aeabi_ddiv+0x406>
 80021a8:	e74b      	b.n	8002042 <__aeabi_ddiv+0x412>
 80021aa:	0005      	movs	r5, r0
 80021ac:	428e      	cmp	r6, r1
 80021ae:	d000      	beq.n	80021b2 <__aeabi_ddiv+0x582>
 80021b0:	e66a      	b.n	8001e88 <__aeabi_ddiv+0x258>
 80021b2:	9a00      	ldr	r2, [sp, #0]
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d000      	beq.n	80021ba <__aeabi_ddiv+0x58a>
 80021b8:	e666      	b.n	8001e88 <__aeabi_ddiv+0x258>
 80021ba:	e667      	b.n	8001e8c <__aeabi_ddiv+0x25c>
 80021bc:	4a16      	ldr	r2, [pc, #88]	; (8002218 <__aeabi_ddiv+0x5e8>)
 80021be:	445a      	add	r2, fp
 80021c0:	2a00      	cmp	r2, #0
 80021c2:	dc00      	bgt.n	80021c6 <__aeabi_ddiv+0x596>
 80021c4:	e710      	b.n	8001fe8 <__aeabi_ddiv+0x3b8>
 80021c6:	2301      	movs	r3, #1
 80021c8:	2500      	movs	r5, #0
 80021ca:	4498      	add	r8, r3
 80021cc:	e667      	b.n	8001e9e <__aeabi_ddiv+0x26e>
 80021ce:	075d      	lsls	r5, r3, #29
 80021d0:	025b      	lsls	r3, r3, #9
 80021d2:	0b1c      	lsrs	r4, r3, #12
 80021d4:	08d2      	lsrs	r2, r2, #3
 80021d6:	2300      	movs	r3, #0
 80021d8:	4315      	orrs	r5, r2
 80021da:	e580      	b.n	8001cde <__aeabi_ddiv+0xae>
 80021dc:	9800      	ldr	r0, [sp, #0]
 80021de:	3d02      	subs	r5, #2
 80021e0:	0042      	lsls	r2, r0, #1
 80021e2:	4282      	cmp	r2, r0
 80021e4:	41bf      	sbcs	r7, r7
 80021e6:	427f      	negs	r7, r7
 80021e8:	193c      	adds	r4, r7, r4
 80021ea:	1936      	adds	r6, r6, r4
 80021ec:	9200      	str	r2, [sp, #0]
 80021ee:	e7dd      	b.n	80021ac <__aeabi_ddiv+0x57c>
 80021f0:	2480      	movs	r4, #128	; 0x80
 80021f2:	4643      	mov	r3, r8
 80021f4:	0324      	lsls	r4, r4, #12
 80021f6:	431c      	orrs	r4, r3
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <__aeabi_ddiv+0x5dc>)
 80021fc:	0b24      	lsrs	r4, r4, #12
 80021fe:	e56e      	b.n	8001cde <__aeabi_ddiv+0xae>
 8002200:	9a00      	ldr	r2, [sp, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d3ea      	bcc.n	80021dc <__aeabi_ddiv+0x5ac>
 8002206:	0005      	movs	r5, r0
 8002208:	e7d3      	b.n	80021b2 <__aeabi_ddiv+0x582>
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	000007ff 	.word	0x000007ff
 8002210:	0000043e 	.word	0x0000043e
 8002214:	0000041e 	.word	0x0000041e
 8002218:	000003ff 	.word	0x000003ff

0800221c <__eqdf2>:
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221e:	464e      	mov	r6, r9
 8002220:	4645      	mov	r5, r8
 8002222:	46de      	mov	lr, fp
 8002224:	4657      	mov	r7, sl
 8002226:	4690      	mov	r8, r2
 8002228:	b5e0      	push	{r5, r6, r7, lr}
 800222a:	0017      	movs	r7, r2
 800222c:	031a      	lsls	r2, r3, #12
 800222e:	0b12      	lsrs	r2, r2, #12
 8002230:	0005      	movs	r5, r0
 8002232:	4684      	mov	ip, r0
 8002234:	4819      	ldr	r0, [pc, #100]	; (800229c <__eqdf2+0x80>)
 8002236:	030e      	lsls	r6, r1, #12
 8002238:	004c      	lsls	r4, r1, #1
 800223a:	4691      	mov	r9, r2
 800223c:	005a      	lsls	r2, r3, #1
 800223e:	0fdb      	lsrs	r3, r3, #31
 8002240:	469b      	mov	fp, r3
 8002242:	0b36      	lsrs	r6, r6, #12
 8002244:	0d64      	lsrs	r4, r4, #21
 8002246:	0fc9      	lsrs	r1, r1, #31
 8002248:	0d52      	lsrs	r2, r2, #21
 800224a:	4284      	cmp	r4, r0
 800224c:	d019      	beq.n	8002282 <__eqdf2+0x66>
 800224e:	4282      	cmp	r2, r0
 8002250:	d010      	beq.n	8002274 <__eqdf2+0x58>
 8002252:	2001      	movs	r0, #1
 8002254:	4294      	cmp	r4, r2
 8002256:	d10e      	bne.n	8002276 <__eqdf2+0x5a>
 8002258:	454e      	cmp	r6, r9
 800225a:	d10c      	bne.n	8002276 <__eqdf2+0x5a>
 800225c:	2001      	movs	r0, #1
 800225e:	45c4      	cmp	ip, r8
 8002260:	d109      	bne.n	8002276 <__eqdf2+0x5a>
 8002262:	4559      	cmp	r1, fp
 8002264:	d017      	beq.n	8002296 <__eqdf2+0x7a>
 8002266:	2c00      	cmp	r4, #0
 8002268:	d105      	bne.n	8002276 <__eqdf2+0x5a>
 800226a:	0030      	movs	r0, r6
 800226c:	4328      	orrs	r0, r5
 800226e:	1e43      	subs	r3, r0, #1
 8002270:	4198      	sbcs	r0, r3
 8002272:	e000      	b.n	8002276 <__eqdf2+0x5a>
 8002274:	2001      	movs	r0, #1
 8002276:	bcf0      	pop	{r4, r5, r6, r7}
 8002278:	46bb      	mov	fp, r7
 800227a:	46b2      	mov	sl, r6
 800227c:	46a9      	mov	r9, r5
 800227e:	46a0      	mov	r8, r4
 8002280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002282:	0033      	movs	r3, r6
 8002284:	2001      	movs	r0, #1
 8002286:	432b      	orrs	r3, r5
 8002288:	d1f5      	bne.n	8002276 <__eqdf2+0x5a>
 800228a:	42a2      	cmp	r2, r4
 800228c:	d1f3      	bne.n	8002276 <__eqdf2+0x5a>
 800228e:	464b      	mov	r3, r9
 8002290:	433b      	orrs	r3, r7
 8002292:	d1f0      	bne.n	8002276 <__eqdf2+0x5a>
 8002294:	e7e2      	b.n	800225c <__eqdf2+0x40>
 8002296:	2000      	movs	r0, #0
 8002298:	e7ed      	b.n	8002276 <__eqdf2+0x5a>
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	000007ff 	.word	0x000007ff

080022a0 <__gedf2>:
 80022a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a2:	4647      	mov	r7, r8
 80022a4:	46ce      	mov	lr, r9
 80022a6:	0004      	movs	r4, r0
 80022a8:	0018      	movs	r0, r3
 80022aa:	0016      	movs	r6, r2
 80022ac:	031b      	lsls	r3, r3, #12
 80022ae:	0b1b      	lsrs	r3, r3, #12
 80022b0:	4d2d      	ldr	r5, [pc, #180]	; (8002368 <__gedf2+0xc8>)
 80022b2:	004a      	lsls	r2, r1, #1
 80022b4:	4699      	mov	r9, r3
 80022b6:	b580      	push	{r7, lr}
 80022b8:	0043      	lsls	r3, r0, #1
 80022ba:	030f      	lsls	r7, r1, #12
 80022bc:	46a4      	mov	ip, r4
 80022be:	46b0      	mov	r8, r6
 80022c0:	0b3f      	lsrs	r7, r7, #12
 80022c2:	0d52      	lsrs	r2, r2, #21
 80022c4:	0fc9      	lsrs	r1, r1, #31
 80022c6:	0d5b      	lsrs	r3, r3, #21
 80022c8:	0fc0      	lsrs	r0, r0, #31
 80022ca:	42aa      	cmp	r2, r5
 80022cc:	d021      	beq.n	8002312 <__gedf2+0x72>
 80022ce:	42ab      	cmp	r3, r5
 80022d0:	d013      	beq.n	80022fa <__gedf2+0x5a>
 80022d2:	2a00      	cmp	r2, #0
 80022d4:	d122      	bne.n	800231c <__gedf2+0x7c>
 80022d6:	433c      	orrs	r4, r7
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <__gedf2+0x42>
 80022dc:	464d      	mov	r5, r9
 80022de:	432e      	orrs	r6, r5
 80022e0:	d022      	beq.n	8002328 <__gedf2+0x88>
 80022e2:	2c00      	cmp	r4, #0
 80022e4:	d010      	beq.n	8002308 <__gedf2+0x68>
 80022e6:	4281      	cmp	r1, r0
 80022e8:	d022      	beq.n	8002330 <__gedf2+0x90>
 80022ea:	2002      	movs	r0, #2
 80022ec:	3901      	subs	r1, #1
 80022ee:	4008      	ands	r0, r1
 80022f0:	3801      	subs	r0, #1
 80022f2:	bcc0      	pop	{r6, r7}
 80022f4:	46b9      	mov	r9, r7
 80022f6:	46b0      	mov	r8, r6
 80022f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022fa:	464d      	mov	r5, r9
 80022fc:	432e      	orrs	r6, r5
 80022fe:	d129      	bne.n	8002354 <__gedf2+0xb4>
 8002300:	2a00      	cmp	r2, #0
 8002302:	d1f0      	bne.n	80022e6 <__gedf2+0x46>
 8002304:	433c      	orrs	r4, r7
 8002306:	d1ee      	bne.n	80022e6 <__gedf2+0x46>
 8002308:	2800      	cmp	r0, #0
 800230a:	d1f2      	bne.n	80022f2 <__gedf2+0x52>
 800230c:	2001      	movs	r0, #1
 800230e:	4240      	negs	r0, r0
 8002310:	e7ef      	b.n	80022f2 <__gedf2+0x52>
 8002312:	003d      	movs	r5, r7
 8002314:	4325      	orrs	r5, r4
 8002316:	d11d      	bne.n	8002354 <__gedf2+0xb4>
 8002318:	4293      	cmp	r3, r2
 800231a:	d0ee      	beq.n	80022fa <__gedf2+0x5a>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e2      	bne.n	80022e6 <__gedf2+0x46>
 8002320:	464c      	mov	r4, r9
 8002322:	4326      	orrs	r6, r4
 8002324:	d1df      	bne.n	80022e6 <__gedf2+0x46>
 8002326:	e7e0      	b.n	80022ea <__gedf2+0x4a>
 8002328:	2000      	movs	r0, #0
 800232a:	2c00      	cmp	r4, #0
 800232c:	d0e1      	beq.n	80022f2 <__gedf2+0x52>
 800232e:	e7dc      	b.n	80022ea <__gedf2+0x4a>
 8002330:	429a      	cmp	r2, r3
 8002332:	dc0a      	bgt.n	800234a <__gedf2+0xaa>
 8002334:	dbe8      	blt.n	8002308 <__gedf2+0x68>
 8002336:	454f      	cmp	r7, r9
 8002338:	d8d7      	bhi.n	80022ea <__gedf2+0x4a>
 800233a:	d00e      	beq.n	800235a <__gedf2+0xba>
 800233c:	2000      	movs	r0, #0
 800233e:	454f      	cmp	r7, r9
 8002340:	d2d7      	bcs.n	80022f2 <__gedf2+0x52>
 8002342:	2900      	cmp	r1, #0
 8002344:	d0e2      	beq.n	800230c <__gedf2+0x6c>
 8002346:	0008      	movs	r0, r1
 8002348:	e7d3      	b.n	80022f2 <__gedf2+0x52>
 800234a:	4243      	negs	r3, r0
 800234c:	4158      	adcs	r0, r3
 800234e:	0040      	lsls	r0, r0, #1
 8002350:	3801      	subs	r0, #1
 8002352:	e7ce      	b.n	80022f2 <__gedf2+0x52>
 8002354:	2002      	movs	r0, #2
 8002356:	4240      	negs	r0, r0
 8002358:	e7cb      	b.n	80022f2 <__gedf2+0x52>
 800235a:	45c4      	cmp	ip, r8
 800235c:	d8c5      	bhi.n	80022ea <__gedf2+0x4a>
 800235e:	2000      	movs	r0, #0
 8002360:	45c4      	cmp	ip, r8
 8002362:	d2c6      	bcs.n	80022f2 <__gedf2+0x52>
 8002364:	e7ed      	b.n	8002342 <__gedf2+0xa2>
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	000007ff 	.word	0x000007ff

0800236c <__ledf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4647      	mov	r7, r8
 8002370:	46ce      	mov	lr, r9
 8002372:	0004      	movs	r4, r0
 8002374:	0018      	movs	r0, r3
 8002376:	0016      	movs	r6, r2
 8002378:	031b      	lsls	r3, r3, #12
 800237a:	0b1b      	lsrs	r3, r3, #12
 800237c:	4d2c      	ldr	r5, [pc, #176]	; (8002430 <__ledf2+0xc4>)
 800237e:	004a      	lsls	r2, r1, #1
 8002380:	4699      	mov	r9, r3
 8002382:	b580      	push	{r7, lr}
 8002384:	0043      	lsls	r3, r0, #1
 8002386:	030f      	lsls	r7, r1, #12
 8002388:	46a4      	mov	ip, r4
 800238a:	46b0      	mov	r8, r6
 800238c:	0b3f      	lsrs	r7, r7, #12
 800238e:	0d52      	lsrs	r2, r2, #21
 8002390:	0fc9      	lsrs	r1, r1, #31
 8002392:	0d5b      	lsrs	r3, r3, #21
 8002394:	0fc0      	lsrs	r0, r0, #31
 8002396:	42aa      	cmp	r2, r5
 8002398:	d00d      	beq.n	80023b6 <__ledf2+0x4a>
 800239a:	42ab      	cmp	r3, r5
 800239c:	d010      	beq.n	80023c0 <__ledf2+0x54>
 800239e:	2a00      	cmp	r2, #0
 80023a0:	d127      	bne.n	80023f2 <__ledf2+0x86>
 80023a2:	433c      	orrs	r4, r7
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d111      	bne.n	80023cc <__ledf2+0x60>
 80023a8:	464d      	mov	r5, r9
 80023aa:	432e      	orrs	r6, r5
 80023ac:	d10e      	bne.n	80023cc <__ledf2+0x60>
 80023ae:	2000      	movs	r0, #0
 80023b0:	2c00      	cmp	r4, #0
 80023b2:	d015      	beq.n	80023e0 <__ledf2+0x74>
 80023b4:	e00e      	b.n	80023d4 <__ledf2+0x68>
 80023b6:	003d      	movs	r5, r7
 80023b8:	4325      	orrs	r5, r4
 80023ba:	d110      	bne.n	80023de <__ledf2+0x72>
 80023bc:	4293      	cmp	r3, r2
 80023be:	d118      	bne.n	80023f2 <__ledf2+0x86>
 80023c0:	464d      	mov	r5, r9
 80023c2:	432e      	orrs	r6, r5
 80023c4:	d10b      	bne.n	80023de <__ledf2+0x72>
 80023c6:	2a00      	cmp	r2, #0
 80023c8:	d102      	bne.n	80023d0 <__ledf2+0x64>
 80023ca:	433c      	orrs	r4, r7
 80023cc:	2c00      	cmp	r4, #0
 80023ce:	d00b      	beq.n	80023e8 <__ledf2+0x7c>
 80023d0:	4281      	cmp	r1, r0
 80023d2:	d014      	beq.n	80023fe <__ledf2+0x92>
 80023d4:	2002      	movs	r0, #2
 80023d6:	3901      	subs	r1, #1
 80023d8:	4008      	ands	r0, r1
 80023da:	3801      	subs	r0, #1
 80023dc:	e000      	b.n	80023e0 <__ledf2+0x74>
 80023de:	2002      	movs	r0, #2
 80023e0:	bcc0      	pop	{r6, r7}
 80023e2:	46b9      	mov	r9, r7
 80023e4:	46b0      	mov	r8, r6
 80023e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d1f9      	bne.n	80023e0 <__ledf2+0x74>
 80023ec:	2001      	movs	r0, #1
 80023ee:	4240      	negs	r0, r0
 80023f0:	e7f6      	b.n	80023e0 <__ledf2+0x74>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1ec      	bne.n	80023d0 <__ledf2+0x64>
 80023f6:	464c      	mov	r4, r9
 80023f8:	4326      	orrs	r6, r4
 80023fa:	d1e9      	bne.n	80023d0 <__ledf2+0x64>
 80023fc:	e7ea      	b.n	80023d4 <__ledf2+0x68>
 80023fe:	429a      	cmp	r2, r3
 8002400:	dd04      	ble.n	800240c <__ledf2+0xa0>
 8002402:	4243      	negs	r3, r0
 8002404:	4158      	adcs	r0, r3
 8002406:	0040      	lsls	r0, r0, #1
 8002408:	3801      	subs	r0, #1
 800240a:	e7e9      	b.n	80023e0 <__ledf2+0x74>
 800240c:	429a      	cmp	r2, r3
 800240e:	dbeb      	blt.n	80023e8 <__ledf2+0x7c>
 8002410:	454f      	cmp	r7, r9
 8002412:	d8df      	bhi.n	80023d4 <__ledf2+0x68>
 8002414:	d006      	beq.n	8002424 <__ledf2+0xb8>
 8002416:	2000      	movs	r0, #0
 8002418:	454f      	cmp	r7, r9
 800241a:	d2e1      	bcs.n	80023e0 <__ledf2+0x74>
 800241c:	2900      	cmp	r1, #0
 800241e:	d0e5      	beq.n	80023ec <__ledf2+0x80>
 8002420:	0008      	movs	r0, r1
 8002422:	e7dd      	b.n	80023e0 <__ledf2+0x74>
 8002424:	45c4      	cmp	ip, r8
 8002426:	d8d5      	bhi.n	80023d4 <__ledf2+0x68>
 8002428:	2000      	movs	r0, #0
 800242a:	45c4      	cmp	ip, r8
 800242c:	d2d8      	bcs.n	80023e0 <__ledf2+0x74>
 800242e:	e7f5      	b.n	800241c <__ledf2+0xb0>
 8002430:	000007ff 	.word	0x000007ff

08002434 <__aeabi_dmul>:
 8002434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002436:	4657      	mov	r7, sl
 8002438:	464e      	mov	r6, r9
 800243a:	4645      	mov	r5, r8
 800243c:	46de      	mov	lr, fp
 800243e:	b5e0      	push	{r5, r6, r7, lr}
 8002440:	4698      	mov	r8, r3
 8002442:	030c      	lsls	r4, r1, #12
 8002444:	004b      	lsls	r3, r1, #1
 8002446:	0006      	movs	r6, r0
 8002448:	4692      	mov	sl, r2
 800244a:	b087      	sub	sp, #28
 800244c:	0b24      	lsrs	r4, r4, #12
 800244e:	0d5b      	lsrs	r3, r3, #21
 8002450:	0fcf      	lsrs	r7, r1, #31
 8002452:	2b00      	cmp	r3, #0
 8002454:	d100      	bne.n	8002458 <__aeabi_dmul+0x24>
 8002456:	e15c      	b.n	8002712 <__aeabi_dmul+0x2de>
 8002458:	4ad9      	ldr	r2, [pc, #868]	; (80027c0 <__aeabi_dmul+0x38c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d100      	bne.n	8002460 <__aeabi_dmul+0x2c>
 800245e:	e175      	b.n	800274c <__aeabi_dmul+0x318>
 8002460:	0f42      	lsrs	r2, r0, #29
 8002462:	00e4      	lsls	r4, r4, #3
 8002464:	4314      	orrs	r4, r2
 8002466:	2280      	movs	r2, #128	; 0x80
 8002468:	0412      	lsls	r2, r2, #16
 800246a:	4314      	orrs	r4, r2
 800246c:	4ad5      	ldr	r2, [pc, #852]	; (80027c4 <__aeabi_dmul+0x390>)
 800246e:	00c5      	lsls	r5, r0, #3
 8002470:	4694      	mov	ip, r2
 8002472:	4463      	add	r3, ip
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2300      	movs	r3, #0
 8002478:	4699      	mov	r9, r3
 800247a:	469b      	mov	fp, r3
 800247c:	4643      	mov	r3, r8
 800247e:	4642      	mov	r2, r8
 8002480:	031e      	lsls	r6, r3, #12
 8002482:	0fd2      	lsrs	r2, r2, #31
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4650      	mov	r0, sl
 8002488:	4690      	mov	r8, r2
 800248a:	0b36      	lsrs	r6, r6, #12
 800248c:	0d5b      	lsrs	r3, r3, #21
 800248e:	d100      	bne.n	8002492 <__aeabi_dmul+0x5e>
 8002490:	e120      	b.n	80026d4 <__aeabi_dmul+0x2a0>
 8002492:	4acb      	ldr	r2, [pc, #812]	; (80027c0 <__aeabi_dmul+0x38c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d100      	bne.n	800249a <__aeabi_dmul+0x66>
 8002498:	e162      	b.n	8002760 <__aeabi_dmul+0x32c>
 800249a:	49ca      	ldr	r1, [pc, #808]	; (80027c4 <__aeabi_dmul+0x390>)
 800249c:	0f42      	lsrs	r2, r0, #29
 800249e:	468c      	mov	ip, r1
 80024a0:	9900      	ldr	r1, [sp, #0]
 80024a2:	4463      	add	r3, ip
 80024a4:	00f6      	lsls	r6, r6, #3
 80024a6:	468c      	mov	ip, r1
 80024a8:	4316      	orrs	r6, r2
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	449c      	add	ip, r3
 80024ae:	0412      	lsls	r2, r2, #16
 80024b0:	4663      	mov	r3, ip
 80024b2:	4316      	orrs	r6, r2
 80024b4:	00c2      	lsls	r2, r0, #3
 80024b6:	2000      	movs	r0, #0
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	9900      	ldr	r1, [sp, #0]
 80024bc:	4643      	mov	r3, r8
 80024be:	3101      	adds	r1, #1
 80024c0:	468c      	mov	ip, r1
 80024c2:	4649      	mov	r1, r9
 80024c4:	407b      	eors	r3, r7
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	290f      	cmp	r1, #15
 80024ca:	d826      	bhi.n	800251a <__aeabi_dmul+0xe6>
 80024cc:	4bbe      	ldr	r3, [pc, #760]	; (80027c8 <__aeabi_dmul+0x394>)
 80024ce:	0089      	lsls	r1, r1, #2
 80024d0:	5859      	ldr	r1, [r3, r1]
 80024d2:	468f      	mov	pc, r1
 80024d4:	4643      	mov	r3, r8
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	0034      	movs	r4, r6
 80024da:	0015      	movs	r5, r2
 80024dc:	4683      	mov	fp, r0
 80024de:	465b      	mov	r3, fp
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d016      	beq.n	8002512 <__aeabi_dmul+0xde>
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d100      	bne.n	80024ea <__aeabi_dmul+0xb6>
 80024e8:	e203      	b.n	80028f2 <__aeabi_dmul+0x4be>
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d000      	beq.n	80024f0 <__aeabi_dmul+0xbc>
 80024ee:	e0cd      	b.n	800268c <__aeabi_dmul+0x258>
 80024f0:	2200      	movs	r2, #0
 80024f2:	2400      	movs	r4, #0
 80024f4:	2500      	movs	r5, #0
 80024f6:	9b01      	ldr	r3, [sp, #4]
 80024f8:	0512      	lsls	r2, r2, #20
 80024fa:	4322      	orrs	r2, r4
 80024fc:	07db      	lsls	r3, r3, #31
 80024fe:	431a      	orrs	r2, r3
 8002500:	0028      	movs	r0, r5
 8002502:	0011      	movs	r1, r2
 8002504:	b007      	add	sp, #28
 8002506:	bcf0      	pop	{r4, r5, r6, r7}
 8002508:	46bb      	mov	fp, r7
 800250a:	46b2      	mov	sl, r6
 800250c:	46a9      	mov	r9, r5
 800250e:	46a0      	mov	r8, r4
 8002510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002512:	2400      	movs	r4, #0
 8002514:	2500      	movs	r5, #0
 8002516:	4aaa      	ldr	r2, [pc, #680]	; (80027c0 <__aeabi_dmul+0x38c>)
 8002518:	e7ed      	b.n	80024f6 <__aeabi_dmul+0xc2>
 800251a:	0c28      	lsrs	r0, r5, #16
 800251c:	042d      	lsls	r5, r5, #16
 800251e:	0c2d      	lsrs	r5, r5, #16
 8002520:	002b      	movs	r3, r5
 8002522:	0c11      	lsrs	r1, r2, #16
 8002524:	0412      	lsls	r2, r2, #16
 8002526:	0c12      	lsrs	r2, r2, #16
 8002528:	4353      	muls	r3, r2
 800252a:	4698      	mov	r8, r3
 800252c:	0013      	movs	r3, r2
 800252e:	002f      	movs	r7, r5
 8002530:	4343      	muls	r3, r0
 8002532:	4699      	mov	r9, r3
 8002534:	434f      	muls	r7, r1
 8002536:	444f      	add	r7, r9
 8002538:	46bb      	mov	fp, r7
 800253a:	4647      	mov	r7, r8
 800253c:	000b      	movs	r3, r1
 800253e:	0c3f      	lsrs	r7, r7, #16
 8002540:	46ba      	mov	sl, r7
 8002542:	4343      	muls	r3, r0
 8002544:	44da      	add	sl, fp
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	45d1      	cmp	r9, sl
 800254a:	d904      	bls.n	8002556 <__aeabi_dmul+0x122>
 800254c:	2780      	movs	r7, #128	; 0x80
 800254e:	027f      	lsls	r7, r7, #9
 8002550:	46b9      	mov	r9, r7
 8002552:	444b      	add	r3, r9
 8002554:	9302      	str	r3, [sp, #8]
 8002556:	4653      	mov	r3, sl
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	469b      	mov	fp, r3
 800255c:	4653      	mov	r3, sl
 800255e:	041f      	lsls	r7, r3, #16
 8002560:	4643      	mov	r3, r8
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	4698      	mov	r8, r3
 8002568:	003b      	movs	r3, r7
 800256a:	4443      	add	r3, r8
 800256c:	9304      	str	r3, [sp, #16]
 800256e:	0c33      	lsrs	r3, r6, #16
 8002570:	0436      	lsls	r6, r6, #16
 8002572:	0c36      	lsrs	r6, r6, #16
 8002574:	4698      	mov	r8, r3
 8002576:	0033      	movs	r3, r6
 8002578:	4343      	muls	r3, r0
 800257a:	4699      	mov	r9, r3
 800257c:	4643      	mov	r3, r8
 800257e:	4343      	muls	r3, r0
 8002580:	002f      	movs	r7, r5
 8002582:	469a      	mov	sl, r3
 8002584:	4643      	mov	r3, r8
 8002586:	4377      	muls	r7, r6
 8002588:	435d      	muls	r5, r3
 800258a:	0c38      	lsrs	r0, r7, #16
 800258c:	444d      	add	r5, r9
 800258e:	1945      	adds	r5, r0, r5
 8002590:	45a9      	cmp	r9, r5
 8002592:	d903      	bls.n	800259c <__aeabi_dmul+0x168>
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	025b      	lsls	r3, r3, #9
 8002598:	4699      	mov	r9, r3
 800259a:	44ca      	add	sl, r9
 800259c:	043f      	lsls	r7, r7, #16
 800259e:	0c28      	lsrs	r0, r5, #16
 80025a0:	0c3f      	lsrs	r7, r7, #16
 80025a2:	042d      	lsls	r5, r5, #16
 80025a4:	19ed      	adds	r5, r5, r7
 80025a6:	0c27      	lsrs	r7, r4, #16
 80025a8:	0424      	lsls	r4, r4, #16
 80025aa:	0c24      	lsrs	r4, r4, #16
 80025ac:	0003      	movs	r3, r0
 80025ae:	0020      	movs	r0, r4
 80025b0:	4350      	muls	r0, r2
 80025b2:	437a      	muls	r2, r7
 80025b4:	4691      	mov	r9, r2
 80025b6:	003a      	movs	r2, r7
 80025b8:	4453      	add	r3, sl
 80025ba:	9305      	str	r3, [sp, #20]
 80025bc:	0c03      	lsrs	r3, r0, #16
 80025be:	469a      	mov	sl, r3
 80025c0:	434a      	muls	r2, r1
 80025c2:	4361      	muls	r1, r4
 80025c4:	4449      	add	r1, r9
 80025c6:	4451      	add	r1, sl
 80025c8:	44ab      	add	fp, r5
 80025ca:	4589      	cmp	r9, r1
 80025cc:	d903      	bls.n	80025d6 <__aeabi_dmul+0x1a2>
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	025b      	lsls	r3, r3, #9
 80025d2:	4699      	mov	r9, r3
 80025d4:	444a      	add	r2, r9
 80025d6:	0400      	lsls	r0, r0, #16
 80025d8:	0c0b      	lsrs	r3, r1, #16
 80025da:	0c00      	lsrs	r0, r0, #16
 80025dc:	0409      	lsls	r1, r1, #16
 80025de:	1809      	adds	r1, r1, r0
 80025e0:	0020      	movs	r0, r4
 80025e2:	4699      	mov	r9, r3
 80025e4:	4643      	mov	r3, r8
 80025e6:	4370      	muls	r0, r6
 80025e8:	435c      	muls	r4, r3
 80025ea:	437e      	muls	r6, r7
 80025ec:	435f      	muls	r7, r3
 80025ee:	0c03      	lsrs	r3, r0, #16
 80025f0:	4698      	mov	r8, r3
 80025f2:	19a4      	adds	r4, r4, r6
 80025f4:	4444      	add	r4, r8
 80025f6:	444a      	add	r2, r9
 80025f8:	9703      	str	r7, [sp, #12]
 80025fa:	42a6      	cmp	r6, r4
 80025fc:	d904      	bls.n	8002608 <__aeabi_dmul+0x1d4>
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	025b      	lsls	r3, r3, #9
 8002602:	4698      	mov	r8, r3
 8002604:	4447      	add	r7, r8
 8002606:	9703      	str	r7, [sp, #12]
 8002608:	0423      	lsls	r3, r4, #16
 800260a:	9e02      	ldr	r6, [sp, #8]
 800260c:	469a      	mov	sl, r3
 800260e:	9b05      	ldr	r3, [sp, #20]
 8002610:	445e      	add	r6, fp
 8002612:	4698      	mov	r8, r3
 8002614:	42ae      	cmp	r6, r5
 8002616:	41ad      	sbcs	r5, r5
 8002618:	1876      	adds	r6, r6, r1
 800261a:	428e      	cmp	r6, r1
 800261c:	4189      	sbcs	r1, r1
 800261e:	0400      	lsls	r0, r0, #16
 8002620:	0c00      	lsrs	r0, r0, #16
 8002622:	4450      	add	r0, sl
 8002624:	4440      	add	r0, r8
 8002626:	426d      	negs	r5, r5
 8002628:	1947      	adds	r7, r0, r5
 800262a:	46b8      	mov	r8, r7
 800262c:	4693      	mov	fp, r2
 800262e:	4249      	negs	r1, r1
 8002630:	4689      	mov	r9, r1
 8002632:	44c3      	add	fp, r8
 8002634:	44d9      	add	r9, fp
 8002636:	4298      	cmp	r0, r3
 8002638:	4180      	sbcs	r0, r0
 800263a:	45a8      	cmp	r8, r5
 800263c:	41ad      	sbcs	r5, r5
 800263e:	4593      	cmp	fp, r2
 8002640:	4192      	sbcs	r2, r2
 8002642:	4589      	cmp	r9, r1
 8002644:	4189      	sbcs	r1, r1
 8002646:	426d      	negs	r5, r5
 8002648:	4240      	negs	r0, r0
 800264a:	4328      	orrs	r0, r5
 800264c:	0c24      	lsrs	r4, r4, #16
 800264e:	4252      	negs	r2, r2
 8002650:	4249      	negs	r1, r1
 8002652:	430a      	orrs	r2, r1
 8002654:	9b03      	ldr	r3, [sp, #12]
 8002656:	1900      	adds	r0, r0, r4
 8002658:	1880      	adds	r0, r0, r2
 800265a:	18c7      	adds	r7, r0, r3
 800265c:	464b      	mov	r3, r9
 800265e:	0ddc      	lsrs	r4, r3, #23
 8002660:	9b04      	ldr	r3, [sp, #16]
 8002662:	0275      	lsls	r5, r6, #9
 8002664:	431d      	orrs	r5, r3
 8002666:	1e6a      	subs	r2, r5, #1
 8002668:	4195      	sbcs	r5, r2
 800266a:	464b      	mov	r3, r9
 800266c:	0df6      	lsrs	r6, r6, #23
 800266e:	027f      	lsls	r7, r7, #9
 8002670:	4335      	orrs	r5, r6
 8002672:	025a      	lsls	r2, r3, #9
 8002674:	433c      	orrs	r4, r7
 8002676:	4315      	orrs	r5, r2
 8002678:	01fb      	lsls	r3, r7, #7
 800267a:	d400      	bmi.n	800267e <__aeabi_dmul+0x24a>
 800267c:	e11c      	b.n	80028b8 <__aeabi_dmul+0x484>
 800267e:	2101      	movs	r1, #1
 8002680:	086a      	lsrs	r2, r5, #1
 8002682:	400d      	ands	r5, r1
 8002684:	4315      	orrs	r5, r2
 8002686:	07e2      	lsls	r2, r4, #31
 8002688:	4315      	orrs	r5, r2
 800268a:	0864      	lsrs	r4, r4, #1
 800268c:	494f      	ldr	r1, [pc, #316]	; (80027cc <__aeabi_dmul+0x398>)
 800268e:	4461      	add	r1, ip
 8002690:	2900      	cmp	r1, #0
 8002692:	dc00      	bgt.n	8002696 <__aeabi_dmul+0x262>
 8002694:	e0b0      	b.n	80027f8 <__aeabi_dmul+0x3c4>
 8002696:	076b      	lsls	r3, r5, #29
 8002698:	d009      	beq.n	80026ae <__aeabi_dmul+0x27a>
 800269a:	220f      	movs	r2, #15
 800269c:	402a      	ands	r2, r5
 800269e:	2a04      	cmp	r2, #4
 80026a0:	d005      	beq.n	80026ae <__aeabi_dmul+0x27a>
 80026a2:	1d2a      	adds	r2, r5, #4
 80026a4:	42aa      	cmp	r2, r5
 80026a6:	41ad      	sbcs	r5, r5
 80026a8:	426d      	negs	r5, r5
 80026aa:	1964      	adds	r4, r4, r5
 80026ac:	0015      	movs	r5, r2
 80026ae:	01e3      	lsls	r3, r4, #7
 80026b0:	d504      	bpl.n	80026bc <__aeabi_dmul+0x288>
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	4a46      	ldr	r2, [pc, #280]	; (80027d0 <__aeabi_dmul+0x39c>)
 80026b6:	00c9      	lsls	r1, r1, #3
 80026b8:	4014      	ands	r4, r2
 80026ba:	4461      	add	r1, ip
 80026bc:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <__aeabi_dmul+0x3a0>)
 80026be:	4291      	cmp	r1, r2
 80026c0:	dd00      	ble.n	80026c4 <__aeabi_dmul+0x290>
 80026c2:	e726      	b.n	8002512 <__aeabi_dmul+0xde>
 80026c4:	0762      	lsls	r2, r4, #29
 80026c6:	08ed      	lsrs	r5, r5, #3
 80026c8:	0264      	lsls	r4, r4, #9
 80026ca:	0549      	lsls	r1, r1, #21
 80026cc:	4315      	orrs	r5, r2
 80026ce:	0b24      	lsrs	r4, r4, #12
 80026d0:	0d4a      	lsrs	r2, r1, #21
 80026d2:	e710      	b.n	80024f6 <__aeabi_dmul+0xc2>
 80026d4:	4652      	mov	r2, sl
 80026d6:	4332      	orrs	r2, r6
 80026d8:	d100      	bne.n	80026dc <__aeabi_dmul+0x2a8>
 80026da:	e07f      	b.n	80027dc <__aeabi_dmul+0x3a8>
 80026dc:	2e00      	cmp	r6, #0
 80026de:	d100      	bne.n	80026e2 <__aeabi_dmul+0x2ae>
 80026e0:	e0dc      	b.n	800289c <__aeabi_dmul+0x468>
 80026e2:	0030      	movs	r0, r6
 80026e4:	f000 fe1e 	bl	8003324 <__clzsi2>
 80026e8:	0002      	movs	r2, r0
 80026ea:	3a0b      	subs	r2, #11
 80026ec:	231d      	movs	r3, #29
 80026ee:	0001      	movs	r1, r0
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	4652      	mov	r2, sl
 80026f4:	3908      	subs	r1, #8
 80026f6:	40da      	lsrs	r2, r3
 80026f8:	408e      	lsls	r6, r1
 80026fa:	4316      	orrs	r6, r2
 80026fc:	4652      	mov	r2, sl
 80026fe:	408a      	lsls	r2, r1
 8002700:	9b00      	ldr	r3, [sp, #0]
 8002702:	4935      	ldr	r1, [pc, #212]	; (80027d8 <__aeabi_dmul+0x3a4>)
 8002704:	1a18      	subs	r0, r3, r0
 8002706:	0003      	movs	r3, r0
 8002708:	468c      	mov	ip, r1
 800270a:	4463      	add	r3, ip
 800270c:	2000      	movs	r0, #0
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	e6d3      	b.n	80024ba <__aeabi_dmul+0x86>
 8002712:	0025      	movs	r5, r4
 8002714:	4305      	orrs	r5, r0
 8002716:	d04a      	beq.n	80027ae <__aeabi_dmul+0x37a>
 8002718:	2c00      	cmp	r4, #0
 800271a:	d100      	bne.n	800271e <__aeabi_dmul+0x2ea>
 800271c:	e0b0      	b.n	8002880 <__aeabi_dmul+0x44c>
 800271e:	0020      	movs	r0, r4
 8002720:	f000 fe00 	bl	8003324 <__clzsi2>
 8002724:	0001      	movs	r1, r0
 8002726:	0002      	movs	r2, r0
 8002728:	390b      	subs	r1, #11
 800272a:	231d      	movs	r3, #29
 800272c:	0010      	movs	r0, r2
 800272e:	1a5b      	subs	r3, r3, r1
 8002730:	0031      	movs	r1, r6
 8002732:	0035      	movs	r5, r6
 8002734:	3808      	subs	r0, #8
 8002736:	4084      	lsls	r4, r0
 8002738:	40d9      	lsrs	r1, r3
 800273a:	4085      	lsls	r5, r0
 800273c:	430c      	orrs	r4, r1
 800273e:	4826      	ldr	r0, [pc, #152]	; (80027d8 <__aeabi_dmul+0x3a4>)
 8002740:	1a83      	subs	r3, r0, r2
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2300      	movs	r3, #0
 8002746:	4699      	mov	r9, r3
 8002748:	469b      	mov	fp, r3
 800274a:	e697      	b.n	800247c <__aeabi_dmul+0x48>
 800274c:	0005      	movs	r5, r0
 800274e:	4325      	orrs	r5, r4
 8002750:	d126      	bne.n	80027a0 <__aeabi_dmul+0x36c>
 8002752:	2208      	movs	r2, #8
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2302      	movs	r3, #2
 8002758:	2400      	movs	r4, #0
 800275a:	4691      	mov	r9, r2
 800275c:	469b      	mov	fp, r3
 800275e:	e68d      	b.n	800247c <__aeabi_dmul+0x48>
 8002760:	4652      	mov	r2, sl
 8002762:	9b00      	ldr	r3, [sp, #0]
 8002764:	4332      	orrs	r2, r6
 8002766:	d110      	bne.n	800278a <__aeabi_dmul+0x356>
 8002768:	4915      	ldr	r1, [pc, #84]	; (80027c0 <__aeabi_dmul+0x38c>)
 800276a:	2600      	movs	r6, #0
 800276c:	468c      	mov	ip, r1
 800276e:	4463      	add	r3, ip
 8002770:	4649      	mov	r1, r9
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2302      	movs	r3, #2
 8002776:	4319      	orrs	r1, r3
 8002778:	4689      	mov	r9, r1
 800277a:	2002      	movs	r0, #2
 800277c:	e69d      	b.n	80024ba <__aeabi_dmul+0x86>
 800277e:	465b      	mov	r3, fp
 8002780:	9701      	str	r7, [sp, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d000      	beq.n	8002788 <__aeabi_dmul+0x354>
 8002786:	e6ad      	b.n	80024e4 <__aeabi_dmul+0xb0>
 8002788:	e6c3      	b.n	8002512 <__aeabi_dmul+0xde>
 800278a:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <__aeabi_dmul+0x38c>)
 800278c:	2003      	movs	r0, #3
 800278e:	4694      	mov	ip, r2
 8002790:	4463      	add	r3, ip
 8002792:	464a      	mov	r2, r9
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2303      	movs	r3, #3
 8002798:	431a      	orrs	r2, r3
 800279a:	4691      	mov	r9, r2
 800279c:	4652      	mov	r2, sl
 800279e:	e68c      	b.n	80024ba <__aeabi_dmul+0x86>
 80027a0:	220c      	movs	r2, #12
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2303      	movs	r3, #3
 80027a6:	0005      	movs	r5, r0
 80027a8:	4691      	mov	r9, r2
 80027aa:	469b      	mov	fp, r3
 80027ac:	e666      	b.n	800247c <__aeabi_dmul+0x48>
 80027ae:	2304      	movs	r3, #4
 80027b0:	4699      	mov	r9, r3
 80027b2:	2300      	movs	r3, #0
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	3301      	adds	r3, #1
 80027b8:	2400      	movs	r4, #0
 80027ba:	469b      	mov	fp, r3
 80027bc:	e65e      	b.n	800247c <__aeabi_dmul+0x48>
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	000007ff 	.word	0x000007ff
 80027c4:	fffffc01 	.word	0xfffffc01
 80027c8:	0800f088 	.word	0x0800f088
 80027cc:	000003ff 	.word	0x000003ff
 80027d0:	feffffff 	.word	0xfeffffff
 80027d4:	000007fe 	.word	0x000007fe
 80027d8:	fffffc0d 	.word	0xfffffc0d
 80027dc:	4649      	mov	r1, r9
 80027de:	2301      	movs	r3, #1
 80027e0:	4319      	orrs	r1, r3
 80027e2:	4689      	mov	r9, r1
 80027e4:	2600      	movs	r6, #0
 80027e6:	2001      	movs	r0, #1
 80027e8:	e667      	b.n	80024ba <__aeabi_dmul+0x86>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2480      	movs	r4, #128	; 0x80
 80027ee:	2500      	movs	r5, #0
 80027f0:	4a43      	ldr	r2, [pc, #268]	; (8002900 <__aeabi_dmul+0x4cc>)
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	0324      	lsls	r4, r4, #12
 80027f6:	e67e      	b.n	80024f6 <__aeabi_dmul+0xc2>
 80027f8:	2001      	movs	r0, #1
 80027fa:	1a40      	subs	r0, r0, r1
 80027fc:	2838      	cmp	r0, #56	; 0x38
 80027fe:	dd00      	ble.n	8002802 <__aeabi_dmul+0x3ce>
 8002800:	e676      	b.n	80024f0 <__aeabi_dmul+0xbc>
 8002802:	281f      	cmp	r0, #31
 8002804:	dd5b      	ble.n	80028be <__aeabi_dmul+0x48a>
 8002806:	221f      	movs	r2, #31
 8002808:	0023      	movs	r3, r4
 800280a:	4252      	negs	r2, r2
 800280c:	1a51      	subs	r1, r2, r1
 800280e:	40cb      	lsrs	r3, r1
 8002810:	0019      	movs	r1, r3
 8002812:	2820      	cmp	r0, #32
 8002814:	d003      	beq.n	800281e <__aeabi_dmul+0x3ea>
 8002816:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <__aeabi_dmul+0x4d0>)
 8002818:	4462      	add	r2, ip
 800281a:	4094      	lsls	r4, r2
 800281c:	4325      	orrs	r5, r4
 800281e:	1e6a      	subs	r2, r5, #1
 8002820:	4195      	sbcs	r5, r2
 8002822:	002a      	movs	r2, r5
 8002824:	430a      	orrs	r2, r1
 8002826:	2107      	movs	r1, #7
 8002828:	000d      	movs	r5, r1
 800282a:	2400      	movs	r4, #0
 800282c:	4015      	ands	r5, r2
 800282e:	4211      	tst	r1, r2
 8002830:	d05b      	beq.n	80028ea <__aeabi_dmul+0x4b6>
 8002832:	210f      	movs	r1, #15
 8002834:	2400      	movs	r4, #0
 8002836:	4011      	ands	r1, r2
 8002838:	2904      	cmp	r1, #4
 800283a:	d053      	beq.n	80028e4 <__aeabi_dmul+0x4b0>
 800283c:	1d11      	adds	r1, r2, #4
 800283e:	4291      	cmp	r1, r2
 8002840:	4192      	sbcs	r2, r2
 8002842:	4252      	negs	r2, r2
 8002844:	18a4      	adds	r4, r4, r2
 8002846:	000a      	movs	r2, r1
 8002848:	0223      	lsls	r3, r4, #8
 800284a:	d54b      	bpl.n	80028e4 <__aeabi_dmul+0x4b0>
 800284c:	2201      	movs	r2, #1
 800284e:	2400      	movs	r4, #0
 8002850:	2500      	movs	r5, #0
 8002852:	e650      	b.n	80024f6 <__aeabi_dmul+0xc2>
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	421c      	tst	r4, r3
 800285a:	d009      	beq.n	8002870 <__aeabi_dmul+0x43c>
 800285c:	421e      	tst	r6, r3
 800285e:	d107      	bne.n	8002870 <__aeabi_dmul+0x43c>
 8002860:	4333      	orrs	r3, r6
 8002862:	031c      	lsls	r4, r3, #12
 8002864:	4643      	mov	r3, r8
 8002866:	0015      	movs	r5, r2
 8002868:	0b24      	lsrs	r4, r4, #12
 800286a:	4a25      	ldr	r2, [pc, #148]	; (8002900 <__aeabi_dmul+0x4cc>)
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	e642      	b.n	80024f6 <__aeabi_dmul+0xc2>
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	0312      	lsls	r2, r2, #12
 8002874:	4314      	orrs	r4, r2
 8002876:	0324      	lsls	r4, r4, #12
 8002878:	4a21      	ldr	r2, [pc, #132]	; (8002900 <__aeabi_dmul+0x4cc>)
 800287a:	0b24      	lsrs	r4, r4, #12
 800287c:	9701      	str	r7, [sp, #4]
 800287e:	e63a      	b.n	80024f6 <__aeabi_dmul+0xc2>
 8002880:	f000 fd50 	bl	8003324 <__clzsi2>
 8002884:	0001      	movs	r1, r0
 8002886:	0002      	movs	r2, r0
 8002888:	3115      	adds	r1, #21
 800288a:	3220      	adds	r2, #32
 800288c:	291c      	cmp	r1, #28
 800288e:	dc00      	bgt.n	8002892 <__aeabi_dmul+0x45e>
 8002890:	e74b      	b.n	800272a <__aeabi_dmul+0x2f6>
 8002892:	0034      	movs	r4, r6
 8002894:	3808      	subs	r0, #8
 8002896:	2500      	movs	r5, #0
 8002898:	4084      	lsls	r4, r0
 800289a:	e750      	b.n	800273e <__aeabi_dmul+0x30a>
 800289c:	f000 fd42 	bl	8003324 <__clzsi2>
 80028a0:	0003      	movs	r3, r0
 80028a2:	001a      	movs	r2, r3
 80028a4:	3215      	adds	r2, #21
 80028a6:	3020      	adds	r0, #32
 80028a8:	2a1c      	cmp	r2, #28
 80028aa:	dc00      	bgt.n	80028ae <__aeabi_dmul+0x47a>
 80028ac:	e71e      	b.n	80026ec <__aeabi_dmul+0x2b8>
 80028ae:	4656      	mov	r6, sl
 80028b0:	3b08      	subs	r3, #8
 80028b2:	2200      	movs	r2, #0
 80028b4:	409e      	lsls	r6, r3
 80028b6:	e723      	b.n	8002700 <__aeabi_dmul+0x2cc>
 80028b8:	9b00      	ldr	r3, [sp, #0]
 80028ba:	469c      	mov	ip, r3
 80028bc:	e6e6      	b.n	800268c <__aeabi_dmul+0x258>
 80028be:	4912      	ldr	r1, [pc, #72]	; (8002908 <__aeabi_dmul+0x4d4>)
 80028c0:	0022      	movs	r2, r4
 80028c2:	4461      	add	r1, ip
 80028c4:	002e      	movs	r6, r5
 80028c6:	408d      	lsls	r5, r1
 80028c8:	408a      	lsls	r2, r1
 80028ca:	40c6      	lsrs	r6, r0
 80028cc:	1e69      	subs	r1, r5, #1
 80028ce:	418d      	sbcs	r5, r1
 80028d0:	4332      	orrs	r2, r6
 80028d2:	432a      	orrs	r2, r5
 80028d4:	40c4      	lsrs	r4, r0
 80028d6:	0753      	lsls	r3, r2, #29
 80028d8:	d0b6      	beq.n	8002848 <__aeabi_dmul+0x414>
 80028da:	210f      	movs	r1, #15
 80028dc:	4011      	ands	r1, r2
 80028de:	2904      	cmp	r1, #4
 80028e0:	d1ac      	bne.n	800283c <__aeabi_dmul+0x408>
 80028e2:	e7b1      	b.n	8002848 <__aeabi_dmul+0x414>
 80028e4:	0765      	lsls	r5, r4, #29
 80028e6:	0264      	lsls	r4, r4, #9
 80028e8:	0b24      	lsrs	r4, r4, #12
 80028ea:	08d2      	lsrs	r2, r2, #3
 80028ec:	4315      	orrs	r5, r2
 80028ee:	2200      	movs	r2, #0
 80028f0:	e601      	b.n	80024f6 <__aeabi_dmul+0xc2>
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	0312      	lsls	r2, r2, #12
 80028f6:	4314      	orrs	r4, r2
 80028f8:	0324      	lsls	r4, r4, #12
 80028fa:	4a01      	ldr	r2, [pc, #4]	; (8002900 <__aeabi_dmul+0x4cc>)
 80028fc:	0b24      	lsrs	r4, r4, #12
 80028fe:	e5fa      	b.n	80024f6 <__aeabi_dmul+0xc2>
 8002900:	000007ff 	.word	0x000007ff
 8002904:	0000043e 	.word	0x0000043e
 8002908:	0000041e 	.word	0x0000041e

0800290c <__aeabi_dsub>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	4657      	mov	r7, sl
 8002910:	464e      	mov	r6, r9
 8002912:	4645      	mov	r5, r8
 8002914:	46de      	mov	lr, fp
 8002916:	b5e0      	push	{r5, r6, r7, lr}
 8002918:	001e      	movs	r6, r3
 800291a:	0017      	movs	r7, r2
 800291c:	004a      	lsls	r2, r1, #1
 800291e:	030b      	lsls	r3, r1, #12
 8002920:	0d52      	lsrs	r2, r2, #21
 8002922:	0a5b      	lsrs	r3, r3, #9
 8002924:	4690      	mov	r8, r2
 8002926:	0f42      	lsrs	r2, r0, #29
 8002928:	431a      	orrs	r2, r3
 800292a:	0fcd      	lsrs	r5, r1, #31
 800292c:	4ccd      	ldr	r4, [pc, #820]	; (8002c64 <__aeabi_dsub+0x358>)
 800292e:	0331      	lsls	r1, r6, #12
 8002930:	00c3      	lsls	r3, r0, #3
 8002932:	4694      	mov	ip, r2
 8002934:	0070      	lsls	r0, r6, #1
 8002936:	0f7a      	lsrs	r2, r7, #29
 8002938:	0a49      	lsrs	r1, r1, #9
 800293a:	00ff      	lsls	r7, r7, #3
 800293c:	469a      	mov	sl, r3
 800293e:	46b9      	mov	r9, r7
 8002940:	0d40      	lsrs	r0, r0, #21
 8002942:	0ff6      	lsrs	r6, r6, #31
 8002944:	4311      	orrs	r1, r2
 8002946:	42a0      	cmp	r0, r4
 8002948:	d100      	bne.n	800294c <__aeabi_dsub+0x40>
 800294a:	e0b1      	b.n	8002ab0 <__aeabi_dsub+0x1a4>
 800294c:	2201      	movs	r2, #1
 800294e:	4056      	eors	r6, r2
 8002950:	46b3      	mov	fp, r6
 8002952:	42b5      	cmp	r5, r6
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x4c>
 8002956:	e088      	b.n	8002a6a <__aeabi_dsub+0x15e>
 8002958:	4642      	mov	r2, r8
 800295a:	1a12      	subs	r2, r2, r0
 800295c:	2a00      	cmp	r2, #0
 800295e:	dc00      	bgt.n	8002962 <__aeabi_dsub+0x56>
 8002960:	e0ae      	b.n	8002ac0 <__aeabi_dsub+0x1b4>
 8002962:	2800      	cmp	r0, #0
 8002964:	d100      	bne.n	8002968 <__aeabi_dsub+0x5c>
 8002966:	e0c1      	b.n	8002aec <__aeabi_dsub+0x1e0>
 8002968:	48be      	ldr	r0, [pc, #760]	; (8002c64 <__aeabi_dsub+0x358>)
 800296a:	4580      	cmp	r8, r0
 800296c:	d100      	bne.n	8002970 <__aeabi_dsub+0x64>
 800296e:	e151      	b.n	8002c14 <__aeabi_dsub+0x308>
 8002970:	2080      	movs	r0, #128	; 0x80
 8002972:	0400      	lsls	r0, r0, #16
 8002974:	4301      	orrs	r1, r0
 8002976:	2a38      	cmp	r2, #56	; 0x38
 8002978:	dd00      	ble.n	800297c <__aeabi_dsub+0x70>
 800297a:	e17b      	b.n	8002c74 <__aeabi_dsub+0x368>
 800297c:	2a1f      	cmp	r2, #31
 800297e:	dd00      	ble.n	8002982 <__aeabi_dsub+0x76>
 8002980:	e1ee      	b.n	8002d60 <__aeabi_dsub+0x454>
 8002982:	2020      	movs	r0, #32
 8002984:	003e      	movs	r6, r7
 8002986:	1a80      	subs	r0, r0, r2
 8002988:	000c      	movs	r4, r1
 800298a:	40d6      	lsrs	r6, r2
 800298c:	40d1      	lsrs	r1, r2
 800298e:	4087      	lsls	r7, r0
 8002990:	4662      	mov	r2, ip
 8002992:	4084      	lsls	r4, r0
 8002994:	1a52      	subs	r2, r2, r1
 8002996:	1e78      	subs	r0, r7, #1
 8002998:	4187      	sbcs	r7, r0
 800299a:	4694      	mov	ip, r2
 800299c:	4334      	orrs	r4, r6
 800299e:	4327      	orrs	r7, r4
 80029a0:	1bdc      	subs	r4, r3, r7
 80029a2:	42a3      	cmp	r3, r4
 80029a4:	419b      	sbcs	r3, r3
 80029a6:	4662      	mov	r2, ip
 80029a8:	425b      	negs	r3, r3
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	4699      	mov	r9, r3
 80029ae:	464b      	mov	r3, r9
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	d400      	bmi.n	80029b6 <__aeabi_dsub+0xaa>
 80029b4:	e118      	b.n	8002be8 <__aeabi_dsub+0x2dc>
 80029b6:	464b      	mov	r3, r9
 80029b8:	0258      	lsls	r0, r3, #9
 80029ba:	0a43      	lsrs	r3, r0, #9
 80029bc:	4699      	mov	r9, r3
 80029be:	464b      	mov	r3, r9
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dsub+0xba>
 80029c4:	e137      	b.n	8002c36 <__aeabi_dsub+0x32a>
 80029c6:	4648      	mov	r0, r9
 80029c8:	f000 fcac 	bl	8003324 <__clzsi2>
 80029cc:	0001      	movs	r1, r0
 80029ce:	3908      	subs	r1, #8
 80029d0:	2320      	movs	r3, #32
 80029d2:	0022      	movs	r2, r4
 80029d4:	4648      	mov	r0, r9
 80029d6:	1a5b      	subs	r3, r3, r1
 80029d8:	40da      	lsrs	r2, r3
 80029da:	4088      	lsls	r0, r1
 80029dc:	408c      	lsls	r4, r1
 80029de:	4643      	mov	r3, r8
 80029e0:	4310      	orrs	r0, r2
 80029e2:	4588      	cmp	r8, r1
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0xdc>
 80029e6:	e136      	b.n	8002c56 <__aeabi_dsub+0x34a>
 80029e8:	1ac9      	subs	r1, r1, r3
 80029ea:	1c4b      	adds	r3, r1, #1
 80029ec:	2b1f      	cmp	r3, #31
 80029ee:	dd00      	ble.n	80029f2 <__aeabi_dsub+0xe6>
 80029f0:	e0ea      	b.n	8002bc8 <__aeabi_dsub+0x2bc>
 80029f2:	2220      	movs	r2, #32
 80029f4:	0026      	movs	r6, r4
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	0001      	movs	r1, r0
 80029fa:	4094      	lsls	r4, r2
 80029fc:	40de      	lsrs	r6, r3
 80029fe:	40d8      	lsrs	r0, r3
 8002a00:	2300      	movs	r3, #0
 8002a02:	4091      	lsls	r1, r2
 8002a04:	1e62      	subs	r2, r4, #1
 8002a06:	4194      	sbcs	r4, r2
 8002a08:	4681      	mov	r9, r0
 8002a0a:	4698      	mov	r8, r3
 8002a0c:	4331      	orrs	r1, r6
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	0763      	lsls	r3, r4, #29
 8002a12:	d009      	beq.n	8002a28 <__aeabi_dsub+0x11c>
 8002a14:	230f      	movs	r3, #15
 8002a16:	4023      	ands	r3, r4
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d005      	beq.n	8002a28 <__aeabi_dsub+0x11c>
 8002a1c:	1d23      	adds	r3, r4, #4
 8002a1e:	42a3      	cmp	r3, r4
 8002a20:	41a4      	sbcs	r4, r4
 8002a22:	4264      	negs	r4, r4
 8002a24:	44a1      	add	r9, r4
 8002a26:	001c      	movs	r4, r3
 8002a28:	464b      	mov	r3, r9
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	d400      	bmi.n	8002a30 <__aeabi_dsub+0x124>
 8002a2e:	e0de      	b.n	8002bee <__aeabi_dsub+0x2e2>
 8002a30:	4641      	mov	r1, r8
 8002a32:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <__aeabi_dsub+0x358>)
 8002a34:	3101      	adds	r1, #1
 8002a36:	4299      	cmp	r1, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x130>
 8002a3a:	e0e7      	b.n	8002c0c <__aeabi_dsub+0x300>
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	488a      	ldr	r0, [pc, #552]	; (8002c68 <__aeabi_dsub+0x35c>)
 8002a40:	08e4      	lsrs	r4, r4, #3
 8002a42:	4003      	ands	r3, r0
 8002a44:	0018      	movs	r0, r3
 8002a46:	0549      	lsls	r1, r1, #21
 8002a48:	075b      	lsls	r3, r3, #29
 8002a4a:	0240      	lsls	r0, r0, #9
 8002a4c:	4323      	orrs	r3, r4
 8002a4e:	0d4a      	lsrs	r2, r1, #21
 8002a50:	0b04      	lsrs	r4, r0, #12
 8002a52:	0512      	lsls	r2, r2, #20
 8002a54:	07ed      	lsls	r5, r5, #31
 8002a56:	4322      	orrs	r2, r4
 8002a58:	432a      	orrs	r2, r5
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	bcf0      	pop	{r4, r5, r6, r7}
 8002a60:	46bb      	mov	fp, r7
 8002a62:	46b2      	mov	sl, r6
 8002a64:	46a9      	mov	r9, r5
 8002a66:	46a0      	mov	r8, r4
 8002a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a6a:	4642      	mov	r2, r8
 8002a6c:	1a12      	subs	r2, r2, r0
 8002a6e:	2a00      	cmp	r2, #0
 8002a70:	dd52      	ble.n	8002b18 <__aeabi_dsub+0x20c>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d100      	bne.n	8002a78 <__aeabi_dsub+0x16c>
 8002a76:	e09c      	b.n	8002bb2 <__aeabi_dsub+0x2a6>
 8002a78:	45a0      	cmp	r8, r4
 8002a7a:	d100      	bne.n	8002a7e <__aeabi_dsub+0x172>
 8002a7c:	e0ca      	b.n	8002c14 <__aeabi_dsub+0x308>
 8002a7e:	2080      	movs	r0, #128	; 0x80
 8002a80:	0400      	lsls	r0, r0, #16
 8002a82:	4301      	orrs	r1, r0
 8002a84:	2a38      	cmp	r2, #56	; 0x38
 8002a86:	dd00      	ble.n	8002a8a <__aeabi_dsub+0x17e>
 8002a88:	e149      	b.n	8002d1e <__aeabi_dsub+0x412>
 8002a8a:	2a1f      	cmp	r2, #31
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dsub+0x184>
 8002a8e:	e197      	b.n	8002dc0 <__aeabi_dsub+0x4b4>
 8002a90:	0010      	movs	r0, r2
 8002a92:	000e      	movs	r6, r1
 8002a94:	3820      	subs	r0, #32
 8002a96:	40c6      	lsrs	r6, r0
 8002a98:	2a20      	cmp	r2, #32
 8002a9a:	d004      	beq.n	8002aa6 <__aeabi_dsub+0x19a>
 8002a9c:	2040      	movs	r0, #64	; 0x40
 8002a9e:	1a82      	subs	r2, r0, r2
 8002aa0:	4091      	lsls	r1, r2
 8002aa2:	430f      	orrs	r7, r1
 8002aa4:	46b9      	mov	r9, r7
 8002aa6:	464c      	mov	r4, r9
 8002aa8:	1e62      	subs	r2, r4, #1
 8002aaa:	4194      	sbcs	r4, r2
 8002aac:	4334      	orrs	r4, r6
 8002aae:	e13a      	b.n	8002d26 <__aeabi_dsub+0x41a>
 8002ab0:	000a      	movs	r2, r1
 8002ab2:	433a      	orrs	r2, r7
 8002ab4:	d028      	beq.n	8002b08 <__aeabi_dsub+0x1fc>
 8002ab6:	46b3      	mov	fp, r6
 8002ab8:	42b5      	cmp	r5, r6
 8002aba:	d02b      	beq.n	8002b14 <__aeabi_dsub+0x208>
 8002abc:	4a6b      	ldr	r2, [pc, #428]	; (8002c6c <__aeabi_dsub+0x360>)
 8002abe:	4442      	add	r2, r8
 8002ac0:	2a00      	cmp	r2, #0
 8002ac2:	d05d      	beq.n	8002b80 <__aeabi_dsub+0x274>
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	4644      	mov	r4, r8
 8002ac8:	1a82      	subs	r2, r0, r2
 8002aca:	2c00      	cmp	r4, #0
 8002acc:	d000      	beq.n	8002ad0 <__aeabi_dsub+0x1c4>
 8002ace:	e0f5      	b.n	8002cbc <__aeabi_dsub+0x3b0>
 8002ad0:	4665      	mov	r5, ip
 8002ad2:	431d      	orrs	r5, r3
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x1cc>
 8002ad6:	e19c      	b.n	8002e12 <__aeabi_dsub+0x506>
 8002ad8:	1e55      	subs	r5, r2, #1
 8002ada:	2a01      	cmp	r2, #1
 8002adc:	d100      	bne.n	8002ae0 <__aeabi_dsub+0x1d4>
 8002ade:	e1fb      	b.n	8002ed8 <__aeabi_dsub+0x5cc>
 8002ae0:	4c60      	ldr	r4, [pc, #384]	; (8002c64 <__aeabi_dsub+0x358>)
 8002ae2:	42a2      	cmp	r2, r4
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x1dc>
 8002ae6:	e1bd      	b.n	8002e64 <__aeabi_dsub+0x558>
 8002ae8:	002a      	movs	r2, r5
 8002aea:	e0f0      	b.n	8002cce <__aeabi_dsub+0x3c2>
 8002aec:	0008      	movs	r0, r1
 8002aee:	4338      	orrs	r0, r7
 8002af0:	d100      	bne.n	8002af4 <__aeabi_dsub+0x1e8>
 8002af2:	e0c3      	b.n	8002c7c <__aeabi_dsub+0x370>
 8002af4:	1e50      	subs	r0, r2, #1
 8002af6:	2a01      	cmp	r2, #1
 8002af8:	d100      	bne.n	8002afc <__aeabi_dsub+0x1f0>
 8002afa:	e1a8      	b.n	8002e4e <__aeabi_dsub+0x542>
 8002afc:	4c59      	ldr	r4, [pc, #356]	; (8002c64 <__aeabi_dsub+0x358>)
 8002afe:	42a2      	cmp	r2, r4
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x1f8>
 8002b02:	e087      	b.n	8002c14 <__aeabi_dsub+0x308>
 8002b04:	0002      	movs	r2, r0
 8002b06:	e736      	b.n	8002976 <__aeabi_dsub+0x6a>
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4056      	eors	r6, r2
 8002b0c:	46b3      	mov	fp, r6
 8002b0e:	42b5      	cmp	r5, r6
 8002b10:	d000      	beq.n	8002b14 <__aeabi_dsub+0x208>
 8002b12:	e721      	b.n	8002958 <__aeabi_dsub+0x4c>
 8002b14:	4a55      	ldr	r2, [pc, #340]	; (8002c6c <__aeabi_dsub+0x360>)
 8002b16:	4442      	add	r2, r8
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d100      	bne.n	8002b1e <__aeabi_dsub+0x212>
 8002b1c:	e0b5      	b.n	8002c8a <__aeabi_dsub+0x37e>
 8002b1e:	4642      	mov	r2, r8
 8002b20:	4644      	mov	r4, r8
 8002b22:	1a82      	subs	r2, r0, r2
 8002b24:	2c00      	cmp	r4, #0
 8002b26:	d100      	bne.n	8002b2a <__aeabi_dsub+0x21e>
 8002b28:	e138      	b.n	8002d9c <__aeabi_dsub+0x490>
 8002b2a:	4e4e      	ldr	r6, [pc, #312]	; (8002c64 <__aeabi_dsub+0x358>)
 8002b2c:	42b0      	cmp	r0, r6
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x226>
 8002b30:	e1de      	b.n	8002ef0 <__aeabi_dsub+0x5e4>
 8002b32:	2680      	movs	r6, #128	; 0x80
 8002b34:	4664      	mov	r4, ip
 8002b36:	0436      	lsls	r6, r6, #16
 8002b38:	4334      	orrs	r4, r6
 8002b3a:	46a4      	mov	ip, r4
 8002b3c:	2a38      	cmp	r2, #56	; 0x38
 8002b3e:	dd00      	ble.n	8002b42 <__aeabi_dsub+0x236>
 8002b40:	e196      	b.n	8002e70 <__aeabi_dsub+0x564>
 8002b42:	2a1f      	cmp	r2, #31
 8002b44:	dd00      	ble.n	8002b48 <__aeabi_dsub+0x23c>
 8002b46:	e224      	b.n	8002f92 <__aeabi_dsub+0x686>
 8002b48:	2620      	movs	r6, #32
 8002b4a:	1ab4      	subs	r4, r6, r2
 8002b4c:	46a2      	mov	sl, r4
 8002b4e:	4664      	mov	r4, ip
 8002b50:	4656      	mov	r6, sl
 8002b52:	40b4      	lsls	r4, r6
 8002b54:	46a1      	mov	r9, r4
 8002b56:	001c      	movs	r4, r3
 8002b58:	464e      	mov	r6, r9
 8002b5a:	40d4      	lsrs	r4, r2
 8002b5c:	4326      	orrs	r6, r4
 8002b5e:	0034      	movs	r4, r6
 8002b60:	4656      	mov	r6, sl
 8002b62:	40b3      	lsls	r3, r6
 8002b64:	1e5e      	subs	r6, r3, #1
 8002b66:	41b3      	sbcs	r3, r6
 8002b68:	431c      	orrs	r4, r3
 8002b6a:	4663      	mov	r3, ip
 8002b6c:	40d3      	lsrs	r3, r2
 8002b6e:	18c9      	adds	r1, r1, r3
 8002b70:	19e4      	adds	r4, r4, r7
 8002b72:	42bc      	cmp	r4, r7
 8002b74:	41bf      	sbcs	r7, r7
 8002b76:	427f      	negs	r7, r7
 8002b78:	46b9      	mov	r9, r7
 8002b7a:	4680      	mov	r8, r0
 8002b7c:	4489      	add	r9, r1
 8002b7e:	e0d8      	b.n	8002d32 <__aeabi_dsub+0x426>
 8002b80:	4640      	mov	r0, r8
 8002b82:	4c3b      	ldr	r4, [pc, #236]	; (8002c70 <__aeabi_dsub+0x364>)
 8002b84:	3001      	adds	r0, #1
 8002b86:	4220      	tst	r0, r4
 8002b88:	d000      	beq.n	8002b8c <__aeabi_dsub+0x280>
 8002b8a:	e0b4      	b.n	8002cf6 <__aeabi_dsub+0x3ea>
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d000      	beq.n	8002b94 <__aeabi_dsub+0x288>
 8002b92:	e144      	b.n	8002e1e <__aeabi_dsub+0x512>
 8002b94:	4660      	mov	r0, ip
 8002b96:	4318      	orrs	r0, r3
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0x290>
 8002b9a:	e190      	b.n	8002ebe <__aeabi_dsub+0x5b2>
 8002b9c:	0008      	movs	r0, r1
 8002b9e:	4338      	orrs	r0, r7
 8002ba0:	d000      	beq.n	8002ba4 <__aeabi_dsub+0x298>
 8002ba2:	e1aa      	b.n	8002efa <__aeabi_dsub+0x5ee>
 8002ba4:	4661      	mov	r1, ip
 8002ba6:	08db      	lsrs	r3, r3, #3
 8002ba8:	0749      	lsls	r1, r1, #29
 8002baa:	430b      	orrs	r3, r1
 8002bac:	4661      	mov	r1, ip
 8002bae:	08cc      	lsrs	r4, r1, #3
 8002bb0:	e027      	b.n	8002c02 <__aeabi_dsub+0x2f6>
 8002bb2:	0008      	movs	r0, r1
 8002bb4:	4338      	orrs	r0, r7
 8002bb6:	d061      	beq.n	8002c7c <__aeabi_dsub+0x370>
 8002bb8:	1e50      	subs	r0, r2, #1
 8002bba:	2a01      	cmp	r2, #1
 8002bbc:	d100      	bne.n	8002bc0 <__aeabi_dsub+0x2b4>
 8002bbe:	e139      	b.n	8002e34 <__aeabi_dsub+0x528>
 8002bc0:	42a2      	cmp	r2, r4
 8002bc2:	d027      	beq.n	8002c14 <__aeabi_dsub+0x308>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	e75d      	b.n	8002a84 <__aeabi_dsub+0x178>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	391f      	subs	r1, #31
 8002bcc:	40ca      	lsrs	r2, r1
 8002bce:	0011      	movs	r1, r2
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d003      	beq.n	8002bdc <__aeabi_dsub+0x2d0>
 8002bd4:	2240      	movs	r2, #64	; 0x40
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4098      	lsls	r0, r3
 8002bda:	4304      	orrs	r4, r0
 8002bdc:	1e63      	subs	r3, r4, #1
 8002bde:	419c      	sbcs	r4, r3
 8002be0:	2300      	movs	r3, #0
 8002be2:	4699      	mov	r9, r3
 8002be4:	4698      	mov	r8, r3
 8002be6:	430c      	orrs	r4, r1
 8002be8:	0763      	lsls	r3, r4, #29
 8002bea:	d000      	beq.n	8002bee <__aeabi_dsub+0x2e2>
 8002bec:	e712      	b.n	8002a14 <__aeabi_dsub+0x108>
 8002bee:	464b      	mov	r3, r9
 8002bf0:	464a      	mov	r2, r9
 8002bf2:	08e4      	lsrs	r4, r4, #3
 8002bf4:	075b      	lsls	r3, r3, #29
 8002bf6:	4323      	orrs	r3, r4
 8002bf8:	08d4      	lsrs	r4, r2, #3
 8002bfa:	4642      	mov	r2, r8
 8002bfc:	4919      	ldr	r1, [pc, #100]	; (8002c64 <__aeabi_dsub+0x358>)
 8002bfe:	428a      	cmp	r2, r1
 8002c00:	d00e      	beq.n	8002c20 <__aeabi_dsub+0x314>
 8002c02:	0324      	lsls	r4, r4, #12
 8002c04:	0552      	lsls	r2, r2, #21
 8002c06:	0b24      	lsrs	r4, r4, #12
 8002c08:	0d52      	lsrs	r2, r2, #21
 8002c0a:	e722      	b.n	8002a52 <__aeabi_dsub+0x146>
 8002c0c:	000a      	movs	r2, r1
 8002c0e:	2400      	movs	r4, #0
 8002c10:	2300      	movs	r3, #0
 8002c12:	e71e      	b.n	8002a52 <__aeabi_dsub+0x146>
 8002c14:	08db      	lsrs	r3, r3, #3
 8002c16:	4662      	mov	r2, ip
 8002c18:	0752      	lsls	r2, r2, #29
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	4662      	mov	r2, ip
 8002c1e:	08d4      	lsrs	r4, r2, #3
 8002c20:	001a      	movs	r2, r3
 8002c22:	4322      	orrs	r2, r4
 8002c24:	d100      	bne.n	8002c28 <__aeabi_dsub+0x31c>
 8002c26:	e1fc      	b.n	8003022 <__aeabi_dsub+0x716>
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	0312      	lsls	r2, r2, #12
 8002c2c:	4314      	orrs	r4, r2
 8002c2e:	0324      	lsls	r4, r4, #12
 8002c30:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <__aeabi_dsub+0x358>)
 8002c32:	0b24      	lsrs	r4, r4, #12
 8002c34:	e70d      	b.n	8002a52 <__aeabi_dsub+0x146>
 8002c36:	0020      	movs	r0, r4
 8002c38:	f000 fb74 	bl	8003324 <__clzsi2>
 8002c3c:	0001      	movs	r1, r0
 8002c3e:	3118      	adds	r1, #24
 8002c40:	291f      	cmp	r1, #31
 8002c42:	dc00      	bgt.n	8002c46 <__aeabi_dsub+0x33a>
 8002c44:	e6c4      	b.n	80029d0 <__aeabi_dsub+0xc4>
 8002c46:	3808      	subs	r0, #8
 8002c48:	4084      	lsls	r4, r0
 8002c4a:	4643      	mov	r3, r8
 8002c4c:	0020      	movs	r0, r4
 8002c4e:	2400      	movs	r4, #0
 8002c50:	4588      	cmp	r8, r1
 8002c52:	dc00      	bgt.n	8002c56 <__aeabi_dsub+0x34a>
 8002c54:	e6c8      	b.n	80029e8 <__aeabi_dsub+0xdc>
 8002c56:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <__aeabi_dsub+0x35c>)
 8002c58:	1a5b      	subs	r3, r3, r1
 8002c5a:	4010      	ands	r0, r2
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	4681      	mov	r9, r0
 8002c60:	e6d6      	b.n	8002a10 <__aeabi_dsub+0x104>
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	000007ff 	.word	0x000007ff
 8002c68:	ff7fffff 	.word	0xff7fffff
 8002c6c:	fffff801 	.word	0xfffff801
 8002c70:	000007fe 	.word	0x000007fe
 8002c74:	430f      	orrs	r7, r1
 8002c76:	1e7a      	subs	r2, r7, #1
 8002c78:	4197      	sbcs	r7, r2
 8002c7a:	e691      	b.n	80029a0 <__aeabi_dsub+0x94>
 8002c7c:	4661      	mov	r1, ip
 8002c7e:	08db      	lsrs	r3, r3, #3
 8002c80:	0749      	lsls	r1, r1, #29
 8002c82:	430b      	orrs	r3, r1
 8002c84:	4661      	mov	r1, ip
 8002c86:	08cc      	lsrs	r4, r1, #3
 8002c88:	e7b8      	b.n	8002bfc <__aeabi_dsub+0x2f0>
 8002c8a:	4640      	mov	r0, r8
 8002c8c:	4cd3      	ldr	r4, [pc, #844]	; (8002fdc <__aeabi_dsub+0x6d0>)
 8002c8e:	3001      	adds	r0, #1
 8002c90:	4220      	tst	r0, r4
 8002c92:	d000      	beq.n	8002c96 <__aeabi_dsub+0x38a>
 8002c94:	e0a2      	b.n	8002ddc <__aeabi_dsub+0x4d0>
 8002c96:	4640      	mov	r0, r8
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	d000      	beq.n	8002c9e <__aeabi_dsub+0x392>
 8002c9c:	e101      	b.n	8002ea2 <__aeabi_dsub+0x596>
 8002c9e:	4660      	mov	r0, ip
 8002ca0:	4318      	orrs	r0, r3
 8002ca2:	d100      	bne.n	8002ca6 <__aeabi_dsub+0x39a>
 8002ca4:	e15e      	b.n	8002f64 <__aeabi_dsub+0x658>
 8002ca6:	0008      	movs	r0, r1
 8002ca8:	4338      	orrs	r0, r7
 8002caa:	d000      	beq.n	8002cae <__aeabi_dsub+0x3a2>
 8002cac:	e15f      	b.n	8002f6e <__aeabi_dsub+0x662>
 8002cae:	4661      	mov	r1, ip
 8002cb0:	08db      	lsrs	r3, r3, #3
 8002cb2:	0749      	lsls	r1, r1, #29
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	4661      	mov	r1, ip
 8002cb8:	08cc      	lsrs	r4, r1, #3
 8002cba:	e7a2      	b.n	8002c02 <__aeabi_dsub+0x2f6>
 8002cbc:	4dc8      	ldr	r5, [pc, #800]	; (8002fe0 <__aeabi_dsub+0x6d4>)
 8002cbe:	42a8      	cmp	r0, r5
 8002cc0:	d100      	bne.n	8002cc4 <__aeabi_dsub+0x3b8>
 8002cc2:	e0cf      	b.n	8002e64 <__aeabi_dsub+0x558>
 8002cc4:	2580      	movs	r5, #128	; 0x80
 8002cc6:	4664      	mov	r4, ip
 8002cc8:	042d      	lsls	r5, r5, #16
 8002cca:	432c      	orrs	r4, r5
 8002ccc:	46a4      	mov	ip, r4
 8002cce:	2a38      	cmp	r2, #56	; 0x38
 8002cd0:	dc56      	bgt.n	8002d80 <__aeabi_dsub+0x474>
 8002cd2:	2a1f      	cmp	r2, #31
 8002cd4:	dd00      	ble.n	8002cd8 <__aeabi_dsub+0x3cc>
 8002cd6:	e0d1      	b.n	8002e7c <__aeabi_dsub+0x570>
 8002cd8:	2520      	movs	r5, #32
 8002cda:	001e      	movs	r6, r3
 8002cdc:	1aad      	subs	r5, r5, r2
 8002cde:	4664      	mov	r4, ip
 8002ce0:	40ab      	lsls	r3, r5
 8002ce2:	40ac      	lsls	r4, r5
 8002ce4:	40d6      	lsrs	r6, r2
 8002ce6:	1e5d      	subs	r5, r3, #1
 8002ce8:	41ab      	sbcs	r3, r5
 8002cea:	4334      	orrs	r4, r6
 8002cec:	4323      	orrs	r3, r4
 8002cee:	4664      	mov	r4, ip
 8002cf0:	40d4      	lsrs	r4, r2
 8002cf2:	1b09      	subs	r1, r1, r4
 8002cf4:	e049      	b.n	8002d8a <__aeabi_dsub+0x47e>
 8002cf6:	4660      	mov	r0, ip
 8002cf8:	1bdc      	subs	r4, r3, r7
 8002cfa:	1a46      	subs	r6, r0, r1
 8002cfc:	42a3      	cmp	r3, r4
 8002cfe:	4180      	sbcs	r0, r0
 8002d00:	4240      	negs	r0, r0
 8002d02:	4681      	mov	r9, r0
 8002d04:	0030      	movs	r0, r6
 8002d06:	464e      	mov	r6, r9
 8002d08:	1b80      	subs	r0, r0, r6
 8002d0a:	4681      	mov	r9, r0
 8002d0c:	0200      	lsls	r0, r0, #8
 8002d0e:	d476      	bmi.n	8002dfe <__aeabi_dsub+0x4f2>
 8002d10:	464b      	mov	r3, r9
 8002d12:	4323      	orrs	r3, r4
 8002d14:	d000      	beq.n	8002d18 <__aeabi_dsub+0x40c>
 8002d16:	e652      	b.n	80029be <__aeabi_dsub+0xb2>
 8002d18:	2400      	movs	r4, #0
 8002d1a:	2500      	movs	r5, #0
 8002d1c:	e771      	b.n	8002c02 <__aeabi_dsub+0x2f6>
 8002d1e:	4339      	orrs	r1, r7
 8002d20:	000c      	movs	r4, r1
 8002d22:	1e62      	subs	r2, r4, #1
 8002d24:	4194      	sbcs	r4, r2
 8002d26:	18e4      	adds	r4, r4, r3
 8002d28:	429c      	cmp	r4, r3
 8002d2a:	419b      	sbcs	r3, r3
 8002d2c:	425b      	negs	r3, r3
 8002d2e:	4463      	add	r3, ip
 8002d30:	4699      	mov	r9, r3
 8002d32:	464b      	mov	r3, r9
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	d400      	bmi.n	8002d3a <__aeabi_dsub+0x42e>
 8002d38:	e756      	b.n	8002be8 <__aeabi_dsub+0x2dc>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	469c      	mov	ip, r3
 8002d3e:	4ba8      	ldr	r3, [pc, #672]	; (8002fe0 <__aeabi_dsub+0x6d4>)
 8002d40:	44e0      	add	r8, ip
 8002d42:	4598      	cmp	r8, r3
 8002d44:	d038      	beq.n	8002db8 <__aeabi_dsub+0x4ac>
 8002d46:	464b      	mov	r3, r9
 8002d48:	48a6      	ldr	r0, [pc, #664]	; (8002fe4 <__aeabi_dsub+0x6d8>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4003      	ands	r3, r0
 8002d4e:	0018      	movs	r0, r3
 8002d50:	0863      	lsrs	r3, r4, #1
 8002d52:	4014      	ands	r4, r2
 8002d54:	431c      	orrs	r4, r3
 8002d56:	07c3      	lsls	r3, r0, #31
 8002d58:	431c      	orrs	r4, r3
 8002d5a:	0843      	lsrs	r3, r0, #1
 8002d5c:	4699      	mov	r9, r3
 8002d5e:	e657      	b.n	8002a10 <__aeabi_dsub+0x104>
 8002d60:	0010      	movs	r0, r2
 8002d62:	000e      	movs	r6, r1
 8002d64:	3820      	subs	r0, #32
 8002d66:	40c6      	lsrs	r6, r0
 8002d68:	2a20      	cmp	r2, #32
 8002d6a:	d004      	beq.n	8002d76 <__aeabi_dsub+0x46a>
 8002d6c:	2040      	movs	r0, #64	; 0x40
 8002d6e:	1a82      	subs	r2, r0, r2
 8002d70:	4091      	lsls	r1, r2
 8002d72:	430f      	orrs	r7, r1
 8002d74:	46b9      	mov	r9, r7
 8002d76:	464f      	mov	r7, r9
 8002d78:	1e7a      	subs	r2, r7, #1
 8002d7a:	4197      	sbcs	r7, r2
 8002d7c:	4337      	orrs	r7, r6
 8002d7e:	e60f      	b.n	80029a0 <__aeabi_dsub+0x94>
 8002d80:	4662      	mov	r2, ip
 8002d82:	431a      	orrs	r2, r3
 8002d84:	0013      	movs	r3, r2
 8002d86:	1e5a      	subs	r2, r3, #1
 8002d88:	4193      	sbcs	r3, r2
 8002d8a:	1afc      	subs	r4, r7, r3
 8002d8c:	42a7      	cmp	r7, r4
 8002d8e:	41bf      	sbcs	r7, r7
 8002d90:	427f      	negs	r7, r7
 8002d92:	1bcb      	subs	r3, r1, r7
 8002d94:	4699      	mov	r9, r3
 8002d96:	465d      	mov	r5, fp
 8002d98:	4680      	mov	r8, r0
 8002d9a:	e608      	b.n	80029ae <__aeabi_dsub+0xa2>
 8002d9c:	4666      	mov	r6, ip
 8002d9e:	431e      	orrs	r6, r3
 8002da0:	d100      	bne.n	8002da4 <__aeabi_dsub+0x498>
 8002da2:	e0be      	b.n	8002f22 <__aeabi_dsub+0x616>
 8002da4:	1e56      	subs	r6, r2, #1
 8002da6:	2a01      	cmp	r2, #1
 8002da8:	d100      	bne.n	8002dac <__aeabi_dsub+0x4a0>
 8002daa:	e109      	b.n	8002fc0 <__aeabi_dsub+0x6b4>
 8002dac:	4c8c      	ldr	r4, [pc, #560]	; (8002fe0 <__aeabi_dsub+0x6d4>)
 8002dae:	42a2      	cmp	r2, r4
 8002db0:	d100      	bne.n	8002db4 <__aeabi_dsub+0x4a8>
 8002db2:	e119      	b.n	8002fe8 <__aeabi_dsub+0x6dc>
 8002db4:	0032      	movs	r2, r6
 8002db6:	e6c1      	b.n	8002b3c <__aeabi_dsub+0x230>
 8002db8:	4642      	mov	r2, r8
 8002dba:	2400      	movs	r4, #0
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e648      	b.n	8002a52 <__aeabi_dsub+0x146>
 8002dc0:	2020      	movs	r0, #32
 8002dc2:	000c      	movs	r4, r1
 8002dc4:	1a80      	subs	r0, r0, r2
 8002dc6:	003e      	movs	r6, r7
 8002dc8:	4087      	lsls	r7, r0
 8002dca:	4084      	lsls	r4, r0
 8002dcc:	40d6      	lsrs	r6, r2
 8002dce:	1e78      	subs	r0, r7, #1
 8002dd0:	4187      	sbcs	r7, r0
 8002dd2:	40d1      	lsrs	r1, r2
 8002dd4:	4334      	orrs	r4, r6
 8002dd6:	433c      	orrs	r4, r7
 8002dd8:	448c      	add	ip, r1
 8002dda:	e7a4      	b.n	8002d26 <__aeabi_dsub+0x41a>
 8002ddc:	4a80      	ldr	r2, [pc, #512]	; (8002fe0 <__aeabi_dsub+0x6d4>)
 8002dde:	4290      	cmp	r0, r2
 8002de0:	d100      	bne.n	8002de4 <__aeabi_dsub+0x4d8>
 8002de2:	e0e9      	b.n	8002fb8 <__aeabi_dsub+0x6ac>
 8002de4:	19df      	adds	r7, r3, r7
 8002de6:	429f      	cmp	r7, r3
 8002de8:	419b      	sbcs	r3, r3
 8002dea:	4461      	add	r1, ip
 8002dec:	425b      	negs	r3, r3
 8002dee:	18c9      	adds	r1, r1, r3
 8002df0:	07cc      	lsls	r4, r1, #31
 8002df2:	087f      	lsrs	r7, r7, #1
 8002df4:	084b      	lsrs	r3, r1, #1
 8002df6:	4699      	mov	r9, r3
 8002df8:	4680      	mov	r8, r0
 8002dfa:	433c      	orrs	r4, r7
 8002dfc:	e6f4      	b.n	8002be8 <__aeabi_dsub+0x2dc>
 8002dfe:	1afc      	subs	r4, r7, r3
 8002e00:	42a7      	cmp	r7, r4
 8002e02:	41bf      	sbcs	r7, r7
 8002e04:	4663      	mov	r3, ip
 8002e06:	427f      	negs	r7, r7
 8002e08:	1ac9      	subs	r1, r1, r3
 8002e0a:	1bcb      	subs	r3, r1, r7
 8002e0c:	4699      	mov	r9, r3
 8002e0e:	465d      	mov	r5, fp
 8002e10:	e5d5      	b.n	80029be <__aeabi_dsub+0xb2>
 8002e12:	08ff      	lsrs	r7, r7, #3
 8002e14:	074b      	lsls	r3, r1, #29
 8002e16:	465d      	mov	r5, fp
 8002e18:	433b      	orrs	r3, r7
 8002e1a:	08cc      	lsrs	r4, r1, #3
 8002e1c:	e6ee      	b.n	8002bfc <__aeabi_dsub+0x2f0>
 8002e1e:	4662      	mov	r2, ip
 8002e20:	431a      	orrs	r2, r3
 8002e22:	d000      	beq.n	8002e26 <__aeabi_dsub+0x51a>
 8002e24:	e082      	b.n	8002f2c <__aeabi_dsub+0x620>
 8002e26:	000b      	movs	r3, r1
 8002e28:	433b      	orrs	r3, r7
 8002e2a:	d11b      	bne.n	8002e64 <__aeabi_dsub+0x558>
 8002e2c:	2480      	movs	r4, #128	; 0x80
 8002e2e:	2500      	movs	r5, #0
 8002e30:	0324      	lsls	r4, r4, #12
 8002e32:	e6f9      	b.n	8002c28 <__aeabi_dsub+0x31c>
 8002e34:	19dc      	adds	r4, r3, r7
 8002e36:	429c      	cmp	r4, r3
 8002e38:	419b      	sbcs	r3, r3
 8002e3a:	4461      	add	r1, ip
 8002e3c:	4689      	mov	r9, r1
 8002e3e:	425b      	negs	r3, r3
 8002e40:	4499      	add	r9, r3
 8002e42:	464b      	mov	r3, r9
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	d444      	bmi.n	8002ed2 <__aeabi_dsub+0x5c6>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	4698      	mov	r8, r3
 8002e4c:	e6cc      	b.n	8002be8 <__aeabi_dsub+0x2dc>
 8002e4e:	1bdc      	subs	r4, r3, r7
 8002e50:	4662      	mov	r2, ip
 8002e52:	42a3      	cmp	r3, r4
 8002e54:	419b      	sbcs	r3, r3
 8002e56:	1a51      	subs	r1, r2, r1
 8002e58:	425b      	negs	r3, r3
 8002e5a:	1acb      	subs	r3, r1, r3
 8002e5c:	4699      	mov	r9, r3
 8002e5e:	2301      	movs	r3, #1
 8002e60:	4698      	mov	r8, r3
 8002e62:	e5a4      	b.n	80029ae <__aeabi_dsub+0xa2>
 8002e64:	08ff      	lsrs	r7, r7, #3
 8002e66:	074b      	lsls	r3, r1, #29
 8002e68:	465d      	mov	r5, fp
 8002e6a:	433b      	orrs	r3, r7
 8002e6c:	08cc      	lsrs	r4, r1, #3
 8002e6e:	e6d7      	b.n	8002c20 <__aeabi_dsub+0x314>
 8002e70:	4662      	mov	r2, ip
 8002e72:	431a      	orrs	r2, r3
 8002e74:	0014      	movs	r4, r2
 8002e76:	1e63      	subs	r3, r4, #1
 8002e78:	419c      	sbcs	r4, r3
 8002e7a:	e679      	b.n	8002b70 <__aeabi_dsub+0x264>
 8002e7c:	0015      	movs	r5, r2
 8002e7e:	4664      	mov	r4, ip
 8002e80:	3d20      	subs	r5, #32
 8002e82:	40ec      	lsrs	r4, r5
 8002e84:	46a0      	mov	r8, r4
 8002e86:	2a20      	cmp	r2, #32
 8002e88:	d005      	beq.n	8002e96 <__aeabi_dsub+0x58a>
 8002e8a:	2540      	movs	r5, #64	; 0x40
 8002e8c:	4664      	mov	r4, ip
 8002e8e:	1aaa      	subs	r2, r5, r2
 8002e90:	4094      	lsls	r4, r2
 8002e92:	4323      	orrs	r3, r4
 8002e94:	469a      	mov	sl, r3
 8002e96:	4654      	mov	r4, sl
 8002e98:	1e63      	subs	r3, r4, #1
 8002e9a:	419c      	sbcs	r4, r3
 8002e9c:	4643      	mov	r3, r8
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	e773      	b.n	8002d8a <__aeabi_dsub+0x47e>
 8002ea2:	4662      	mov	r2, ip
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	d023      	beq.n	8002ef0 <__aeabi_dsub+0x5e4>
 8002ea8:	000a      	movs	r2, r1
 8002eaa:	433a      	orrs	r2, r7
 8002eac:	d000      	beq.n	8002eb0 <__aeabi_dsub+0x5a4>
 8002eae:	e0a0      	b.n	8002ff2 <__aeabi_dsub+0x6e6>
 8002eb0:	4662      	mov	r2, ip
 8002eb2:	08db      	lsrs	r3, r3, #3
 8002eb4:	0752      	lsls	r2, r2, #29
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	4662      	mov	r2, ip
 8002eba:	08d4      	lsrs	r4, r2, #3
 8002ebc:	e6b0      	b.n	8002c20 <__aeabi_dsub+0x314>
 8002ebe:	000b      	movs	r3, r1
 8002ec0:	433b      	orrs	r3, r7
 8002ec2:	d100      	bne.n	8002ec6 <__aeabi_dsub+0x5ba>
 8002ec4:	e728      	b.n	8002d18 <__aeabi_dsub+0x40c>
 8002ec6:	08ff      	lsrs	r7, r7, #3
 8002ec8:	074b      	lsls	r3, r1, #29
 8002eca:	465d      	mov	r5, fp
 8002ecc:	433b      	orrs	r3, r7
 8002ece:	08cc      	lsrs	r4, r1, #3
 8002ed0:	e697      	b.n	8002c02 <__aeabi_dsub+0x2f6>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	4698      	mov	r8, r3
 8002ed6:	e736      	b.n	8002d46 <__aeabi_dsub+0x43a>
 8002ed8:	1afc      	subs	r4, r7, r3
 8002eda:	42a7      	cmp	r7, r4
 8002edc:	41bf      	sbcs	r7, r7
 8002ede:	4663      	mov	r3, ip
 8002ee0:	427f      	negs	r7, r7
 8002ee2:	1ac9      	subs	r1, r1, r3
 8002ee4:	1bcb      	subs	r3, r1, r7
 8002ee6:	4699      	mov	r9, r3
 8002ee8:	2301      	movs	r3, #1
 8002eea:	465d      	mov	r5, fp
 8002eec:	4698      	mov	r8, r3
 8002eee:	e55e      	b.n	80029ae <__aeabi_dsub+0xa2>
 8002ef0:	074b      	lsls	r3, r1, #29
 8002ef2:	08ff      	lsrs	r7, r7, #3
 8002ef4:	433b      	orrs	r3, r7
 8002ef6:	08cc      	lsrs	r4, r1, #3
 8002ef8:	e692      	b.n	8002c20 <__aeabi_dsub+0x314>
 8002efa:	1bdc      	subs	r4, r3, r7
 8002efc:	4660      	mov	r0, ip
 8002efe:	42a3      	cmp	r3, r4
 8002f00:	41b6      	sbcs	r6, r6
 8002f02:	1a40      	subs	r0, r0, r1
 8002f04:	4276      	negs	r6, r6
 8002f06:	1b80      	subs	r0, r0, r6
 8002f08:	4681      	mov	r9, r0
 8002f0a:	0200      	lsls	r0, r0, #8
 8002f0c:	d560      	bpl.n	8002fd0 <__aeabi_dsub+0x6c4>
 8002f0e:	1afc      	subs	r4, r7, r3
 8002f10:	42a7      	cmp	r7, r4
 8002f12:	41bf      	sbcs	r7, r7
 8002f14:	4663      	mov	r3, ip
 8002f16:	427f      	negs	r7, r7
 8002f18:	1ac9      	subs	r1, r1, r3
 8002f1a:	1bcb      	subs	r3, r1, r7
 8002f1c:	4699      	mov	r9, r3
 8002f1e:	465d      	mov	r5, fp
 8002f20:	e576      	b.n	8002a10 <__aeabi_dsub+0x104>
 8002f22:	08ff      	lsrs	r7, r7, #3
 8002f24:	074b      	lsls	r3, r1, #29
 8002f26:	433b      	orrs	r3, r7
 8002f28:	08cc      	lsrs	r4, r1, #3
 8002f2a:	e667      	b.n	8002bfc <__aeabi_dsub+0x2f0>
 8002f2c:	000a      	movs	r2, r1
 8002f2e:	08db      	lsrs	r3, r3, #3
 8002f30:	433a      	orrs	r2, r7
 8002f32:	d100      	bne.n	8002f36 <__aeabi_dsub+0x62a>
 8002f34:	e66f      	b.n	8002c16 <__aeabi_dsub+0x30a>
 8002f36:	4662      	mov	r2, ip
 8002f38:	0752      	lsls	r2, r2, #29
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	4662      	mov	r2, ip
 8002f3e:	08d4      	lsrs	r4, r2, #3
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	0312      	lsls	r2, r2, #12
 8002f44:	4214      	tst	r4, r2
 8002f46:	d007      	beq.n	8002f58 <__aeabi_dsub+0x64c>
 8002f48:	08c8      	lsrs	r0, r1, #3
 8002f4a:	4210      	tst	r0, r2
 8002f4c:	d104      	bne.n	8002f58 <__aeabi_dsub+0x64c>
 8002f4e:	465d      	mov	r5, fp
 8002f50:	0004      	movs	r4, r0
 8002f52:	08fb      	lsrs	r3, r7, #3
 8002f54:	0749      	lsls	r1, r1, #29
 8002f56:	430b      	orrs	r3, r1
 8002f58:	0f5a      	lsrs	r2, r3, #29
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	0752      	lsls	r2, r2, #29
 8002f60:	4313      	orrs	r3, r2
 8002f62:	e65d      	b.n	8002c20 <__aeabi_dsub+0x314>
 8002f64:	074b      	lsls	r3, r1, #29
 8002f66:	08ff      	lsrs	r7, r7, #3
 8002f68:	433b      	orrs	r3, r7
 8002f6a:	08cc      	lsrs	r4, r1, #3
 8002f6c:	e649      	b.n	8002c02 <__aeabi_dsub+0x2f6>
 8002f6e:	19dc      	adds	r4, r3, r7
 8002f70:	429c      	cmp	r4, r3
 8002f72:	419b      	sbcs	r3, r3
 8002f74:	4461      	add	r1, ip
 8002f76:	4689      	mov	r9, r1
 8002f78:	425b      	negs	r3, r3
 8002f7a:	4499      	add	r9, r3
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	d400      	bmi.n	8002f84 <__aeabi_dsub+0x678>
 8002f82:	e631      	b.n	8002be8 <__aeabi_dsub+0x2dc>
 8002f84:	464a      	mov	r2, r9
 8002f86:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <__aeabi_dsub+0x6d8>)
 8002f88:	401a      	ands	r2, r3
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	4691      	mov	r9, r2
 8002f8e:	4698      	mov	r8, r3
 8002f90:	e62a      	b.n	8002be8 <__aeabi_dsub+0x2dc>
 8002f92:	0016      	movs	r6, r2
 8002f94:	4664      	mov	r4, ip
 8002f96:	3e20      	subs	r6, #32
 8002f98:	40f4      	lsrs	r4, r6
 8002f9a:	46a0      	mov	r8, r4
 8002f9c:	2a20      	cmp	r2, #32
 8002f9e:	d005      	beq.n	8002fac <__aeabi_dsub+0x6a0>
 8002fa0:	2640      	movs	r6, #64	; 0x40
 8002fa2:	4664      	mov	r4, ip
 8002fa4:	1ab2      	subs	r2, r6, r2
 8002fa6:	4094      	lsls	r4, r2
 8002fa8:	4323      	orrs	r3, r4
 8002faa:	469a      	mov	sl, r3
 8002fac:	4654      	mov	r4, sl
 8002fae:	1e63      	subs	r3, r4, #1
 8002fb0:	419c      	sbcs	r4, r3
 8002fb2:	4643      	mov	r3, r8
 8002fb4:	431c      	orrs	r4, r3
 8002fb6:	e5db      	b.n	8002b70 <__aeabi_dsub+0x264>
 8002fb8:	0002      	movs	r2, r0
 8002fba:	2400      	movs	r4, #0
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e548      	b.n	8002a52 <__aeabi_dsub+0x146>
 8002fc0:	19dc      	adds	r4, r3, r7
 8002fc2:	42bc      	cmp	r4, r7
 8002fc4:	41bf      	sbcs	r7, r7
 8002fc6:	4461      	add	r1, ip
 8002fc8:	4689      	mov	r9, r1
 8002fca:	427f      	negs	r7, r7
 8002fcc:	44b9      	add	r9, r7
 8002fce:	e738      	b.n	8002e42 <__aeabi_dsub+0x536>
 8002fd0:	464b      	mov	r3, r9
 8002fd2:	4323      	orrs	r3, r4
 8002fd4:	d100      	bne.n	8002fd8 <__aeabi_dsub+0x6cc>
 8002fd6:	e69f      	b.n	8002d18 <__aeabi_dsub+0x40c>
 8002fd8:	e606      	b.n	8002be8 <__aeabi_dsub+0x2dc>
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	000007fe 	.word	0x000007fe
 8002fe0:	000007ff 	.word	0x000007ff
 8002fe4:	ff7fffff 	.word	0xff7fffff
 8002fe8:	08ff      	lsrs	r7, r7, #3
 8002fea:	074b      	lsls	r3, r1, #29
 8002fec:	433b      	orrs	r3, r7
 8002fee:	08cc      	lsrs	r4, r1, #3
 8002ff0:	e616      	b.n	8002c20 <__aeabi_dsub+0x314>
 8002ff2:	4662      	mov	r2, ip
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	0752      	lsls	r2, r2, #29
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	4662      	mov	r2, ip
 8002ffc:	08d4      	lsrs	r4, r2, #3
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	0312      	lsls	r2, r2, #12
 8003002:	4214      	tst	r4, r2
 8003004:	d007      	beq.n	8003016 <__aeabi_dsub+0x70a>
 8003006:	08c8      	lsrs	r0, r1, #3
 8003008:	4210      	tst	r0, r2
 800300a:	d104      	bne.n	8003016 <__aeabi_dsub+0x70a>
 800300c:	465d      	mov	r5, fp
 800300e:	0004      	movs	r4, r0
 8003010:	08fb      	lsrs	r3, r7, #3
 8003012:	0749      	lsls	r1, r1, #29
 8003014:	430b      	orrs	r3, r1
 8003016:	0f5a      	lsrs	r2, r3, #29
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	0752      	lsls	r2, r2, #29
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	4313      	orrs	r3, r2
 8003020:	e5fe      	b.n	8002c20 <__aeabi_dsub+0x314>
 8003022:	2300      	movs	r3, #0
 8003024:	4a01      	ldr	r2, [pc, #4]	; (800302c <__aeabi_dsub+0x720>)
 8003026:	001c      	movs	r4, r3
 8003028:	e513      	b.n	8002a52 <__aeabi_dsub+0x146>
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	000007ff 	.word	0x000007ff

08003030 <__aeabi_dcmpun>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	0005      	movs	r5, r0
 8003034:	480c      	ldr	r0, [pc, #48]	; (8003068 <__aeabi_dcmpun+0x38>)
 8003036:	031c      	lsls	r4, r3, #12
 8003038:	0016      	movs	r6, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	030a      	lsls	r2, r1, #12
 800303e:	0049      	lsls	r1, r1, #1
 8003040:	0b12      	lsrs	r2, r2, #12
 8003042:	0d49      	lsrs	r1, r1, #21
 8003044:	0b24      	lsrs	r4, r4, #12
 8003046:	0d5b      	lsrs	r3, r3, #21
 8003048:	4281      	cmp	r1, r0
 800304a:	d008      	beq.n	800305e <__aeabi_dcmpun+0x2e>
 800304c:	4a06      	ldr	r2, [pc, #24]	; (8003068 <__aeabi_dcmpun+0x38>)
 800304e:	2000      	movs	r0, #0
 8003050:	4293      	cmp	r3, r2
 8003052:	d103      	bne.n	800305c <__aeabi_dcmpun+0x2c>
 8003054:	0020      	movs	r0, r4
 8003056:	4330      	orrs	r0, r6
 8003058:	1e43      	subs	r3, r0, #1
 800305a:	4198      	sbcs	r0, r3
 800305c:	bd70      	pop	{r4, r5, r6, pc}
 800305e:	2001      	movs	r0, #1
 8003060:	432a      	orrs	r2, r5
 8003062:	d1fb      	bne.n	800305c <__aeabi_dcmpun+0x2c>
 8003064:	e7f2      	b.n	800304c <__aeabi_dcmpun+0x1c>
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	000007ff 	.word	0x000007ff

0800306c <__aeabi_d2iz>:
 800306c:	000a      	movs	r2, r1
 800306e:	b530      	push	{r4, r5, lr}
 8003070:	4c13      	ldr	r4, [pc, #76]	; (80030c0 <__aeabi_d2iz+0x54>)
 8003072:	0053      	lsls	r3, r2, #1
 8003074:	0309      	lsls	r1, r1, #12
 8003076:	0005      	movs	r5, r0
 8003078:	0b09      	lsrs	r1, r1, #12
 800307a:	2000      	movs	r0, #0
 800307c:	0d5b      	lsrs	r3, r3, #21
 800307e:	0fd2      	lsrs	r2, r2, #31
 8003080:	42a3      	cmp	r3, r4
 8003082:	dd04      	ble.n	800308e <__aeabi_d2iz+0x22>
 8003084:	480f      	ldr	r0, [pc, #60]	; (80030c4 <__aeabi_d2iz+0x58>)
 8003086:	4283      	cmp	r3, r0
 8003088:	dd02      	ble.n	8003090 <__aeabi_d2iz+0x24>
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <__aeabi_d2iz+0x5c>)
 800308c:	18d0      	adds	r0, r2, r3
 800308e:	bd30      	pop	{r4, r5, pc}
 8003090:	2080      	movs	r0, #128	; 0x80
 8003092:	0340      	lsls	r0, r0, #13
 8003094:	4301      	orrs	r1, r0
 8003096:	480d      	ldr	r0, [pc, #52]	; (80030cc <__aeabi_d2iz+0x60>)
 8003098:	1ac0      	subs	r0, r0, r3
 800309a:	281f      	cmp	r0, #31
 800309c:	dd08      	ble.n	80030b0 <__aeabi_d2iz+0x44>
 800309e:	480c      	ldr	r0, [pc, #48]	; (80030d0 <__aeabi_d2iz+0x64>)
 80030a0:	1ac3      	subs	r3, r0, r3
 80030a2:	40d9      	lsrs	r1, r3
 80030a4:	000b      	movs	r3, r1
 80030a6:	4258      	negs	r0, r3
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d1f0      	bne.n	800308e <__aeabi_d2iz+0x22>
 80030ac:	0018      	movs	r0, r3
 80030ae:	e7ee      	b.n	800308e <__aeabi_d2iz+0x22>
 80030b0:	4c08      	ldr	r4, [pc, #32]	; (80030d4 <__aeabi_d2iz+0x68>)
 80030b2:	40c5      	lsrs	r5, r0
 80030b4:	46a4      	mov	ip, r4
 80030b6:	4463      	add	r3, ip
 80030b8:	4099      	lsls	r1, r3
 80030ba:	000b      	movs	r3, r1
 80030bc:	432b      	orrs	r3, r5
 80030be:	e7f2      	b.n	80030a6 <__aeabi_d2iz+0x3a>
 80030c0:	000003fe 	.word	0x000003fe
 80030c4:	0000041d 	.word	0x0000041d
 80030c8:	7fffffff 	.word	0x7fffffff
 80030cc:	00000433 	.word	0x00000433
 80030d0:	00000413 	.word	0x00000413
 80030d4:	fffffbed 	.word	0xfffffbed

080030d8 <__aeabi_i2d>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	2800      	cmp	r0, #0
 80030dc:	d016      	beq.n	800310c <__aeabi_i2d+0x34>
 80030de:	17c3      	asrs	r3, r0, #31
 80030e0:	18c5      	adds	r5, r0, r3
 80030e2:	405d      	eors	r5, r3
 80030e4:	0fc4      	lsrs	r4, r0, #31
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f91c 	bl	8003324 <__clzsi2>
 80030ec:	4a11      	ldr	r2, [pc, #68]	; (8003134 <__aeabi_i2d+0x5c>)
 80030ee:	1a12      	subs	r2, r2, r0
 80030f0:	280a      	cmp	r0, #10
 80030f2:	dc16      	bgt.n	8003122 <__aeabi_i2d+0x4a>
 80030f4:	0003      	movs	r3, r0
 80030f6:	002e      	movs	r6, r5
 80030f8:	3315      	adds	r3, #21
 80030fa:	409e      	lsls	r6, r3
 80030fc:	230b      	movs	r3, #11
 80030fe:	1a18      	subs	r0, r3, r0
 8003100:	40c5      	lsrs	r5, r0
 8003102:	0552      	lsls	r2, r2, #21
 8003104:	032d      	lsls	r5, r5, #12
 8003106:	0b2d      	lsrs	r5, r5, #12
 8003108:	0d53      	lsrs	r3, r2, #21
 800310a:	e003      	b.n	8003114 <__aeabi_i2d+0x3c>
 800310c:	2400      	movs	r4, #0
 800310e:	2300      	movs	r3, #0
 8003110:	2500      	movs	r5, #0
 8003112:	2600      	movs	r6, #0
 8003114:	051b      	lsls	r3, r3, #20
 8003116:	432b      	orrs	r3, r5
 8003118:	07e4      	lsls	r4, r4, #31
 800311a:	4323      	orrs	r3, r4
 800311c:	0030      	movs	r0, r6
 800311e:	0019      	movs	r1, r3
 8003120:	bd70      	pop	{r4, r5, r6, pc}
 8003122:	380b      	subs	r0, #11
 8003124:	4085      	lsls	r5, r0
 8003126:	0552      	lsls	r2, r2, #21
 8003128:	032d      	lsls	r5, r5, #12
 800312a:	2600      	movs	r6, #0
 800312c:	0b2d      	lsrs	r5, r5, #12
 800312e:	0d53      	lsrs	r3, r2, #21
 8003130:	e7f0      	b.n	8003114 <__aeabi_i2d+0x3c>
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	0000041e 	.word	0x0000041e

08003138 <__aeabi_ui2d>:
 8003138:	b510      	push	{r4, lr}
 800313a:	1e04      	subs	r4, r0, #0
 800313c:	d010      	beq.n	8003160 <__aeabi_ui2d+0x28>
 800313e:	f000 f8f1 	bl	8003324 <__clzsi2>
 8003142:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <__aeabi_ui2d+0x48>)
 8003144:	1a1b      	subs	r3, r3, r0
 8003146:	280a      	cmp	r0, #10
 8003148:	dc11      	bgt.n	800316e <__aeabi_ui2d+0x36>
 800314a:	220b      	movs	r2, #11
 800314c:	0021      	movs	r1, r4
 800314e:	1a12      	subs	r2, r2, r0
 8003150:	40d1      	lsrs	r1, r2
 8003152:	3015      	adds	r0, #21
 8003154:	030a      	lsls	r2, r1, #12
 8003156:	055b      	lsls	r3, r3, #21
 8003158:	4084      	lsls	r4, r0
 800315a:	0b12      	lsrs	r2, r2, #12
 800315c:	0d5b      	lsrs	r3, r3, #21
 800315e:	e001      	b.n	8003164 <__aeabi_ui2d+0x2c>
 8003160:	2300      	movs	r3, #0
 8003162:	2200      	movs	r2, #0
 8003164:	051b      	lsls	r3, r3, #20
 8003166:	4313      	orrs	r3, r2
 8003168:	0020      	movs	r0, r4
 800316a:	0019      	movs	r1, r3
 800316c:	bd10      	pop	{r4, pc}
 800316e:	0022      	movs	r2, r4
 8003170:	380b      	subs	r0, #11
 8003172:	4082      	lsls	r2, r0
 8003174:	055b      	lsls	r3, r3, #21
 8003176:	0312      	lsls	r2, r2, #12
 8003178:	2400      	movs	r4, #0
 800317a:	0b12      	lsrs	r2, r2, #12
 800317c:	0d5b      	lsrs	r3, r3, #21
 800317e:	e7f1      	b.n	8003164 <__aeabi_ui2d+0x2c>
 8003180:	0000041e 	.word	0x0000041e

08003184 <__aeabi_f2d>:
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	0043      	lsls	r3, r0, #1
 8003188:	0246      	lsls	r6, r0, #9
 800318a:	0fc4      	lsrs	r4, r0, #31
 800318c:	20fe      	movs	r0, #254	; 0xfe
 800318e:	0e1b      	lsrs	r3, r3, #24
 8003190:	1c59      	adds	r1, r3, #1
 8003192:	0a75      	lsrs	r5, r6, #9
 8003194:	4208      	tst	r0, r1
 8003196:	d00c      	beq.n	80031b2 <__aeabi_f2d+0x2e>
 8003198:	22e0      	movs	r2, #224	; 0xe0
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	4694      	mov	ip, r2
 800319e:	076d      	lsls	r5, r5, #29
 80031a0:	0b36      	lsrs	r6, r6, #12
 80031a2:	4463      	add	r3, ip
 80031a4:	051b      	lsls	r3, r3, #20
 80031a6:	4333      	orrs	r3, r6
 80031a8:	07e4      	lsls	r4, r4, #31
 80031aa:	4323      	orrs	r3, r4
 80031ac:	0028      	movs	r0, r5
 80031ae:	0019      	movs	r1, r3
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d114      	bne.n	80031e0 <__aeabi_f2d+0x5c>
 80031b6:	2d00      	cmp	r5, #0
 80031b8:	d01b      	beq.n	80031f2 <__aeabi_f2d+0x6e>
 80031ba:	0028      	movs	r0, r5
 80031bc:	f000 f8b2 	bl	8003324 <__clzsi2>
 80031c0:	280a      	cmp	r0, #10
 80031c2:	dc1c      	bgt.n	80031fe <__aeabi_f2d+0x7a>
 80031c4:	230b      	movs	r3, #11
 80031c6:	002e      	movs	r6, r5
 80031c8:	1a1b      	subs	r3, r3, r0
 80031ca:	40de      	lsrs	r6, r3
 80031cc:	0003      	movs	r3, r0
 80031ce:	3315      	adds	r3, #21
 80031d0:	409d      	lsls	r5, r3
 80031d2:	4a0e      	ldr	r2, [pc, #56]	; (800320c <__aeabi_f2d+0x88>)
 80031d4:	0336      	lsls	r6, r6, #12
 80031d6:	1a12      	subs	r2, r2, r0
 80031d8:	0552      	lsls	r2, r2, #21
 80031da:	0b36      	lsrs	r6, r6, #12
 80031dc:	0d53      	lsrs	r3, r2, #21
 80031de:	e7e1      	b.n	80031a4 <__aeabi_f2d+0x20>
 80031e0:	2d00      	cmp	r5, #0
 80031e2:	d009      	beq.n	80031f8 <__aeabi_f2d+0x74>
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	0b36      	lsrs	r6, r6, #12
 80031e8:	0312      	lsls	r2, r2, #12
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <__aeabi_f2d+0x8c>)
 80031ec:	076d      	lsls	r5, r5, #29
 80031ee:	4316      	orrs	r6, r2
 80031f0:	e7d8      	b.n	80031a4 <__aeabi_f2d+0x20>
 80031f2:	2300      	movs	r3, #0
 80031f4:	2600      	movs	r6, #0
 80031f6:	e7d5      	b.n	80031a4 <__aeabi_f2d+0x20>
 80031f8:	2600      	movs	r6, #0
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <__aeabi_f2d+0x8c>)
 80031fc:	e7d2      	b.n	80031a4 <__aeabi_f2d+0x20>
 80031fe:	0003      	movs	r3, r0
 8003200:	3b0b      	subs	r3, #11
 8003202:	409d      	lsls	r5, r3
 8003204:	002e      	movs	r6, r5
 8003206:	2500      	movs	r5, #0
 8003208:	e7e3      	b.n	80031d2 <__aeabi_f2d+0x4e>
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	00000389 	.word	0x00000389
 8003210:	000007ff 	.word	0x000007ff

08003214 <__aeabi_d2f>:
 8003214:	0002      	movs	r2, r0
 8003216:	004b      	lsls	r3, r1, #1
 8003218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321a:	0d5b      	lsrs	r3, r3, #21
 800321c:	030c      	lsls	r4, r1, #12
 800321e:	4e3d      	ldr	r6, [pc, #244]	; (8003314 <__aeabi_d2f+0x100>)
 8003220:	0a64      	lsrs	r4, r4, #9
 8003222:	0f40      	lsrs	r0, r0, #29
 8003224:	1c5f      	adds	r7, r3, #1
 8003226:	0fc9      	lsrs	r1, r1, #31
 8003228:	4304      	orrs	r4, r0
 800322a:	00d5      	lsls	r5, r2, #3
 800322c:	4237      	tst	r7, r6
 800322e:	d00a      	beq.n	8003246 <__aeabi_d2f+0x32>
 8003230:	4839      	ldr	r0, [pc, #228]	; (8003318 <__aeabi_d2f+0x104>)
 8003232:	181e      	adds	r6, r3, r0
 8003234:	2efe      	cmp	r6, #254	; 0xfe
 8003236:	dd16      	ble.n	8003266 <__aeabi_d2f+0x52>
 8003238:	20ff      	movs	r0, #255	; 0xff
 800323a:	2400      	movs	r4, #0
 800323c:	05c0      	lsls	r0, r0, #23
 800323e:	4320      	orrs	r0, r4
 8003240:	07c9      	lsls	r1, r1, #31
 8003242:	4308      	orrs	r0, r1
 8003244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <__aeabi_d2f+0x44>
 800324a:	432c      	orrs	r4, r5
 800324c:	d026      	beq.n	800329c <__aeabi_d2f+0x88>
 800324e:	2205      	movs	r2, #5
 8003250:	0192      	lsls	r2, r2, #6
 8003252:	0a54      	lsrs	r4, r2, #9
 8003254:	b2d8      	uxtb	r0, r3
 8003256:	e7f1      	b.n	800323c <__aeabi_d2f+0x28>
 8003258:	4325      	orrs	r5, r4
 800325a:	d0ed      	beq.n	8003238 <__aeabi_d2f+0x24>
 800325c:	2080      	movs	r0, #128	; 0x80
 800325e:	03c0      	lsls	r0, r0, #15
 8003260:	4304      	orrs	r4, r0
 8003262:	20ff      	movs	r0, #255	; 0xff
 8003264:	e7ea      	b.n	800323c <__aeabi_d2f+0x28>
 8003266:	2e00      	cmp	r6, #0
 8003268:	dd1b      	ble.n	80032a2 <__aeabi_d2f+0x8e>
 800326a:	0192      	lsls	r2, r2, #6
 800326c:	1e53      	subs	r3, r2, #1
 800326e:	419a      	sbcs	r2, r3
 8003270:	00e4      	lsls	r4, r4, #3
 8003272:	0f6d      	lsrs	r5, r5, #29
 8003274:	4322      	orrs	r2, r4
 8003276:	432a      	orrs	r2, r5
 8003278:	0753      	lsls	r3, r2, #29
 800327a:	d048      	beq.n	800330e <__aeabi_d2f+0xfa>
 800327c:	230f      	movs	r3, #15
 800327e:	4013      	ands	r3, r2
 8003280:	2b04      	cmp	r3, #4
 8003282:	d000      	beq.n	8003286 <__aeabi_d2f+0x72>
 8003284:	3204      	adds	r2, #4
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	04db      	lsls	r3, r3, #19
 800328a:	4013      	ands	r3, r2
 800328c:	d03f      	beq.n	800330e <__aeabi_d2f+0xfa>
 800328e:	1c70      	adds	r0, r6, #1
 8003290:	2efe      	cmp	r6, #254	; 0xfe
 8003292:	d0d1      	beq.n	8003238 <__aeabi_d2f+0x24>
 8003294:	0192      	lsls	r2, r2, #6
 8003296:	0a54      	lsrs	r4, r2, #9
 8003298:	b2c0      	uxtb	r0, r0
 800329a:	e7cf      	b.n	800323c <__aeabi_d2f+0x28>
 800329c:	2000      	movs	r0, #0
 800329e:	2400      	movs	r4, #0
 80032a0:	e7cc      	b.n	800323c <__aeabi_d2f+0x28>
 80032a2:	0032      	movs	r2, r6
 80032a4:	3217      	adds	r2, #23
 80032a6:	db22      	blt.n	80032ee <__aeabi_d2f+0xda>
 80032a8:	2080      	movs	r0, #128	; 0x80
 80032aa:	0400      	lsls	r0, r0, #16
 80032ac:	4320      	orrs	r0, r4
 80032ae:	241e      	movs	r4, #30
 80032b0:	1ba4      	subs	r4, r4, r6
 80032b2:	2c1f      	cmp	r4, #31
 80032b4:	dd1d      	ble.n	80032f2 <__aeabi_d2f+0xde>
 80032b6:	2202      	movs	r2, #2
 80032b8:	4252      	negs	r2, r2
 80032ba:	1b96      	subs	r6, r2, r6
 80032bc:	0002      	movs	r2, r0
 80032be:	40f2      	lsrs	r2, r6
 80032c0:	0016      	movs	r6, r2
 80032c2:	2c20      	cmp	r4, #32
 80032c4:	d004      	beq.n	80032d0 <__aeabi_d2f+0xbc>
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <__aeabi_d2f+0x108>)
 80032c8:	4694      	mov	ip, r2
 80032ca:	4463      	add	r3, ip
 80032cc:	4098      	lsls	r0, r3
 80032ce:	4305      	orrs	r5, r0
 80032d0:	002a      	movs	r2, r5
 80032d2:	1e53      	subs	r3, r2, #1
 80032d4:	419a      	sbcs	r2, r3
 80032d6:	4332      	orrs	r2, r6
 80032d8:	2600      	movs	r6, #0
 80032da:	0753      	lsls	r3, r2, #29
 80032dc:	d1ce      	bne.n	800327c <__aeabi_d2f+0x68>
 80032de:	2480      	movs	r4, #128	; 0x80
 80032e0:	0013      	movs	r3, r2
 80032e2:	04e4      	lsls	r4, r4, #19
 80032e4:	2001      	movs	r0, #1
 80032e6:	4023      	ands	r3, r4
 80032e8:	4222      	tst	r2, r4
 80032ea:	d1d3      	bne.n	8003294 <__aeabi_d2f+0x80>
 80032ec:	e7b0      	b.n	8003250 <__aeabi_d2f+0x3c>
 80032ee:	2300      	movs	r3, #0
 80032f0:	e7ad      	b.n	800324e <__aeabi_d2f+0x3a>
 80032f2:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <__aeabi_d2f+0x10c>)
 80032f4:	4694      	mov	ip, r2
 80032f6:	002a      	movs	r2, r5
 80032f8:	40e2      	lsrs	r2, r4
 80032fa:	0014      	movs	r4, r2
 80032fc:	002a      	movs	r2, r5
 80032fe:	4463      	add	r3, ip
 8003300:	409a      	lsls	r2, r3
 8003302:	4098      	lsls	r0, r3
 8003304:	1e55      	subs	r5, r2, #1
 8003306:	41aa      	sbcs	r2, r5
 8003308:	4302      	orrs	r2, r0
 800330a:	4322      	orrs	r2, r4
 800330c:	e7e4      	b.n	80032d8 <__aeabi_d2f+0xc4>
 800330e:	0033      	movs	r3, r6
 8003310:	e79e      	b.n	8003250 <__aeabi_d2f+0x3c>
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	000007fe 	.word	0x000007fe
 8003318:	fffffc80 	.word	0xfffffc80
 800331c:	fffffca2 	.word	0xfffffca2
 8003320:	fffffc82 	.word	0xfffffc82

08003324 <__clzsi2>:
 8003324:	211c      	movs	r1, #28
 8003326:	2301      	movs	r3, #1
 8003328:	041b      	lsls	r3, r3, #16
 800332a:	4298      	cmp	r0, r3
 800332c:	d301      	bcc.n	8003332 <__clzsi2+0xe>
 800332e:	0c00      	lsrs	r0, r0, #16
 8003330:	3910      	subs	r1, #16
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	4298      	cmp	r0, r3
 8003336:	d301      	bcc.n	800333c <__clzsi2+0x18>
 8003338:	0a00      	lsrs	r0, r0, #8
 800333a:	3908      	subs	r1, #8
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	4298      	cmp	r0, r3
 8003340:	d301      	bcc.n	8003346 <__clzsi2+0x22>
 8003342:	0900      	lsrs	r0, r0, #4
 8003344:	3904      	subs	r1, #4
 8003346:	a202      	add	r2, pc, #8	; (adr r2, 8003350 <__clzsi2+0x2c>)
 8003348:	5c10      	ldrb	r0, [r2, r0]
 800334a:	1840      	adds	r0, r0, r1
 800334c:	4770      	bx	lr
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	02020304 	.word	0x02020304
 8003354:	01010101 	.word	0x01010101
	...

08003360 <__clzdi2>:
 8003360:	b510      	push	{r4, lr}
 8003362:	2900      	cmp	r1, #0
 8003364:	d103      	bne.n	800336e <__clzdi2+0xe>
 8003366:	f7ff ffdd 	bl	8003324 <__clzsi2>
 800336a:	3020      	adds	r0, #32
 800336c:	e002      	b.n	8003374 <__clzdi2+0x14>
 800336e:	0008      	movs	r0, r1
 8003370:	f7ff ffd8 	bl	8003324 <__clzsi2>
 8003374:	bd10      	pop	{r4, pc}
 8003376:	46c0      	nop			; (mov r8, r8)

08003378 <new_adc_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hadc is the adc and _total_ranks are the total ranks.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ADCSensor object
ADCSensor *new_adc_sensor(ADC_HandleTypeDef *hadc, uint8_t _total_ranks) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	000a      	movs	r2, r1
 8003382:	1cfb      	adds	r3, r7, #3
 8003384:	701a      	strb	r2, [r3, #0]
    ADCSensor *adc_sensor = (ADCSensor*) malloc(sizeof(ADCSensor));
 8003386:	201c      	movs	r0, #28
 8003388:	f007 f832 	bl	800a3f0 <malloc>
 800338c:	0003      	movs	r3, r0
 800338e:	60bb      	str	r3, [r7, #8]
    adc_sensor->adc = hadc;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]
    adc_sensor->total_ranks = _total_ranks;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1cfa      	adds	r2, r7, #3
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 800339e:	230f      	movs	r3, #15
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e00d      	b.n	80033c4 <new_adc_sensor+0x4c>
        adc_sensor->values[i] = 0;
 80033a8:	210f      	movs	r1, #15
 80033aa:	187b      	adds	r3, r7, r1
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	18d3      	adds	r3, r2, r3
 80033b4:	3306      	adds	r3, #6
 80033b6:	2200      	movs	r2, #0
 80033b8:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	187a      	adds	r2, r7, r1
 80033be:	7812      	ldrb	r2, [r2, #0]
 80033c0:	3201      	adds	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	230f      	movs	r3, #15
 80033c6:	18fa      	adds	r2, r7, r3
 80033c8:	1cfb      	adds	r3, r7, #3
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d3ea      	bcc.n	80033a8 <new_adc_sensor+0x30>
    }
    return adc_sensor;
 80033d2:	68bb      	ldr	r3, [r7, #8]
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b004      	add	sp, #16
 80033da:	bd80      	pop	{r7, pc}

080033dc <get_adc_sensor_value>:

// REQUIRES: adc_sensor is an ADCSensor object and rank is the index
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint16_t get_adc_sensor_value(ADCSensor *adc_sensor, uint8_t rank) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	000a      	movs	r2, r1
 80033e6:	1cfb      	adds	r3, r7, #3
 80033e8:	701a      	strb	r2, [r3, #0]
    return adc_sensor->values[rank];
 80033ea:	1cfb      	adds	r3, r7, #3
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	18d3      	adds	r3, r2, r3
 80033f4:	3306      	adds	r3, #6
 80033f6:	881b      	ldrh	r3, [r3, #0]
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}

08003400 <update_adc_sensor_values>:

// REQUIRES: adc_sensor is an ADCSensor object
// MODIFIES: values
// EFFECTS: Updates the stored value of value.
void update_adc_sensor_values(ADCSensor *adc_sensor) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e00b      	b.n	8003426 <update_adc_sensor_values+0x26>
		HAL_ADC_Start_DMA(adc_sensor->adc, adc_sensor->values, adc_sensor->total_ranks);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	1d99      	adds	r1, r3, #6
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	791b      	ldrb	r3, [r3, #4]
 800341a:	001a      	movs	r2, r3
 800341c:	f001 fd84 	bl	8004f28 <HAL_ADC_Start_DMA>
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	791b      	ldrb	r3, [r3, #4]
 800342a:	001a      	movs	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4293      	cmp	r3, r2
 8003430:	dbed      	blt.n	800340e <update_adc_sensor_values+0xe>
	}
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bd80      	pop	{r7, pc}

0800343c <new_force_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ForceSensor object
ForceSensor *new_force_sensor(ADCSensor *_adc_sensor, uint8_t _rank) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	000a      	movs	r2, r1
 8003446:	1cfb      	adds	r3, r7, #3
 8003448:	701a      	strb	r2, [r3, #0]
    ForceSensor *force_sensor = (ForceSensor*) malloc(sizeof(ForceSensor));
 800344a:	2008      	movs	r0, #8
 800344c:	f006 ffd0 	bl	800a3f0 <malloc>
 8003450:	0003      	movs	r3, r0
 8003452:	60fb      	str	r3, [r7, #12]
	force_sensor->adc_sensor = _adc_sensor;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	601a      	str	r2, [r3, #0]
    force_sensor->rank = _rank;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1cfa      	adds	r2, r7, #3
 800345e:	7812      	ldrb	r2, [r2, #0]
 8003460:	711a      	strb	r2, [r3, #4]
	return force_sensor;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b004      	add	sp, #16
 800346a:	bd80      	pop	{r7, pc}

0800346c <get_force_sensor_data>:

// REQUIRES: ForceSensor is a force_sensor object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of the force sensor in Newtons.
float get_force_sensor_data(ForceSensor *force_sensor) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
    uint32_t raw_value = get_adc_sensor_value(force_sensor->adc_sensor, force_sensor->rank);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	791b      	ldrb	r3, [r3, #4]
 800347c:	0019      	movs	r1, r3
 800347e:	0010      	movs	r0, r2
 8003480:	f7ff ffac 	bl	80033dc <get_adc_sensor_value>
 8003484:	0003      	movs	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]
    return raw_value * FORCE_SENSOR_NEWTONS_PER_COUNT_RATIO;
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7fe f853 	bl	8001534 <__aeabi_ui2f>
 800348e:	1c03      	adds	r3, r0, #0
}
 8003490:	1c18      	adds	r0, r3, #0
 8003492:	46bd      	mov	sp, r7
 8003494:	b004      	add	sp, #16
 8003496:	bd80      	pop	{r7, pc}

08003498 <new_imu_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hi2c is the i2c channel
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created IMU object
IMU *new_imu_sensor(I2C_HandleTypeDef *hi2c) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
    IMU *imu = (IMU*) malloc(sizeof(IMU));
 80034a0:	2004      	movs	r0, #4
 80034a2:	f006 ffa5 	bl	800a3f0 <malloc>
 80034a6:	0003      	movs	r3, r0
 80034a8:	60fb      	str	r3, [r7, #12]
	imu->i2c = hi2c;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]
	return imu;
 80034b0:	68fb      	ldr	r3, [r7, #12]
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b004      	add	sp, #16
 80034b8:	bd80      	pop	{r7, pc}

080034ba <new_interrupt_timer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _timer corresponds to timer
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created InterruptTimer object
InterruptTimer *new_interrupt_timer(TIM_HandleTypeDef *_timer) {
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
	InterruptTimer *interrupt_timer = (InterruptTimer*) malloc(sizeof(InterruptTimer));
 80034c2:	2004      	movs	r0, #4
 80034c4:	f006 ff94 	bl	800a3f0 <malloc>
 80034c8:	0003      	movs	r3, r0
 80034ca:	60fb      	str	r3, [r7, #12]
	interrupt_timer->timer = _timer;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
	return interrupt_timer;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}

080034dc <start_interrupt_timer>:

// REQUIRES: interrupt_timer is an InterruptTimer object
// MODIFIES: nothing
// EFFECTS: Enables interrupts for the interrupt timer
void start_interrupt_timer(InterruptTimer *interrupt_timer) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(interrupt_timer->timer);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f003 fed9 	bl	80072a0 <HAL_TIM_Base_Start_IT>
}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b002      	add	sp, #8
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <new_joint>:

// REQUIRES: _motor is a Motor object and
// _potentiometer is a Potentiometer object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Joint object
Joint *new_joint(Motor* _motor, Potentiometer* _potentiometer) {
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
	Joint *joint = (Joint*) malloc(sizeof(Joint));
 8003500:	2018      	movs	r0, #24
 8003502:	f006 ff75 	bl	800a3f0 <malloc>
 8003506:	0003      	movs	r3, r0
 8003508:	60fb      	str	r3, [r7, #12]
	joint->motor = _motor;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]
    joint->potentiometer = _potentiometer;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	605a      	str	r2, [r3, #4]
    joint->potentiometer_value_at_rest_offset = 0;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
    joint->current_angle_degrees = 0;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	60da      	str	r2, [r3, #12]
    joint->desired_angle_degrees = 0;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
	joint->is_calibrated = false;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	751a      	strb	r2, [r3, #20]
	return joint;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b004      	add	sp, #16
 8003536:	bd80      	pop	{r7, pc}

08003538 <move_joint_to_target>:

// REQUIRES: joint is a Joint object
// and target is a float
// MODIFIES: Nothing
// EFFECTS: Moves the motor based on current angle and desired angle
void move_joint_to_target(Joint *joint) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	float difference_degrees = joint->desired_angle_degrees - joint->current_angle_degrees;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	1c19      	adds	r1, r3, #0
 800354a:	1c10      	adds	r0, r2, #0
 800354c:	f7fd fdd6 	bl	80010fc <__aeabi_fsub>
 8003550:	1c03      	adds	r3, r0, #0
 8003552:	617b      	str	r3, [r7, #20]
	if (abs(difference_degrees) > DESIRED_ANGLE_LAX_DEGREES) {
 8003554:	6978      	ldr	r0, [r7, #20]
 8003556:	f7fd ff7f 	bl	8001458 <__aeabi_f2iz>
 800355a:	0003      	movs	r3, r0
 800355c:	17da      	asrs	r2, r3, #31
 800355e:	189b      	adds	r3, r3, r2
 8003560:	4053      	eors	r3, r2
 8003562:	0018      	movs	r0, r3
 8003564:	f7fd ff98 	bl	8001498 <__aeabi_i2f>
 8003568:	1c03      	adds	r3, r0, #0
 800356a:	21fe      	movs	r1, #254	; 0xfe
 800356c:	0589      	lsls	r1, r1, #22
 800356e:	1c18      	adds	r0, r3, #0
 8003570:	f7fc ffc8 	bl	8000504 <__aeabi_fcmpgt>
 8003574:	1e03      	subs	r3, r0, #0
 8003576:	d100      	bne.n	800357a <move_joint_to_target+0x42>
		int motor_steps = difference_degrees * MOTOR_STEPS_PER_JOINT_DEGREE;
		change_motor_steps(joint->motor, motor_steps);
		float changed_degrees = motor_steps / MOTOR_STEPS_PER_JOINT_DEGREE;
		joint->current_angle_degrees += changed_degrees;
	}
}
 8003578:	e024      	b.n	80035c4 <move_joint_to_target+0x8c>
		int motor_steps = difference_degrees * MOTOR_STEPS_PER_JOINT_DEGREE;
 800357a:	4914      	ldr	r1, [pc, #80]	; (80035cc <move_joint_to_target+0x94>)
 800357c:	6978      	ldr	r0, [r7, #20]
 800357e:	f7fd fc97 	bl	8000eb0 <__aeabi_fmul>
 8003582:	1c03      	adds	r3, r0, #0
 8003584:	1c18      	adds	r0, r3, #0
 8003586:	f7fd ff67 	bl	8001458 <__aeabi_f2iz>
 800358a:	0003      	movs	r3, r0
 800358c:	613b      	str	r3, [r7, #16]
		change_motor_steps(joint->motor, motor_steps);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	0011      	movs	r1, r2
 8003596:	0018      	movs	r0, r3
 8003598:	f000 fcac 	bl	8003ef4 <change_motor_steps>
		float changed_degrees = motor_steps / MOTOR_STEPS_PER_JOINT_DEGREE;
 800359c:	6938      	ldr	r0, [r7, #16]
 800359e:	f7fd ff7b 	bl	8001498 <__aeabi_i2f>
 80035a2:	1c03      	adds	r3, r0, #0
 80035a4:	4909      	ldr	r1, [pc, #36]	; (80035cc <move_joint_to_target+0x94>)
 80035a6:	1c18      	adds	r0, r3, #0
 80035a8:	f7fd faba 	bl	8000b20 <__aeabi_fdiv>
 80035ac:	1c03      	adds	r3, r0, #0
 80035ae:	60fb      	str	r3, [r7, #12]
		joint->current_angle_degrees += changed_degrees;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	68f9      	ldr	r1, [r7, #12]
 80035b6:	1c18      	adds	r0, r3, #0
 80035b8:	f7fd f914 	bl	80007e4 <__aeabi_fadd>
 80035bc:	1c03      	adds	r3, r0, #0
 80035be:	1c1a      	adds	r2, r3, #0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b006      	add	sp, #24
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	42055555 	.word	0x42055555

080035d0 <refresh_joint_angle>:

// REQUIRES: joint is a Joint object
// MODIFIES: current_angle_degrees
// EFFECTS: Updates current_angle_degrees based on potentiometer
// reading and potentiometer offset
void refresh_joint_angle(Joint *joint) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	uint32_t raw_data = get_potentiometer_input(joint->potentiometer);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0018      	movs	r0, r3
 80035de:	f000 fd15 	bl	800400c <get_potentiometer_input>
 80035e2:	0003      	movs	r3, r0
 80035e4:	60fb      	str	r3, [r7, #12]
	int32_t adjusted_data = raw_data - joint->potentiometer_value_at_rest_offset;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	60bb      	str	r3, [r7, #8]
	joint->current_angle_degrees = adjusted_data / RATIO_OF_RAW_POTENT_DATA_PER_JOINT_DEGREE;
 80035f0:	68b8      	ldr	r0, [r7, #8]
 80035f2:	f7fd ff51 	bl	8001498 <__aeabi_i2f>
 80035f6:	1c03      	adds	r3, r0, #0
 80035f8:	4905      	ldr	r1, [pc, #20]	; (8003610 <refresh_joint_angle+0x40>)
 80035fa:	1c18      	adds	r0, r3, #0
 80035fc:	f7fd fa90 	bl	8000b20 <__aeabi_fdiv>
 8003600:	1c03      	adds	r3, r0, #0
 8003602:	1c1a      	adds	r2, r3, #0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}
 8003610:	41b60b61 	.word	0x41b60b61

08003614 <set_joint_target>:

// REQUIRES: joint is a Joint object
// and target is a float
// MODIFIES: desired_angle_degrees
// EFFECTS: Changes the desired_angle_degrees
void set_joint_target(Joint *joint, float target) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
	joint->desired_angle_degrees = target;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	611a      	str	r2, [r3, #16]
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b002      	add	sp, #8
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 8003634:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_UART_RxCpltCallback+0xe4>)
 8003636:	2201      	movs	r2, #1
 8003638:	2104      	movs	r1, #4
 800363a:	0018      	movs	r0, r3
 800363c:	f002 fdc4 	bl	80061c8 <HAL_GPIO_WritePin>
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003640:	201b      	movs	r0, #27
 8003642:	f002 f912 	bl	800586a <HAL_NVIC_DisableIRQ>
	memcpy(last_message, uart_buffer, sizeof(last_message));
 8003646:	4b33      	ldr	r3, [pc, #204]	; (8003714 <HAL_UART_RxCpltCallback+0xe8>)
 8003648:	4a33      	ldr	r2, [pc, #204]	; (8003718 <HAL_UART_RxCpltCallback+0xec>)
 800364a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800364c:	c313      	stmia	r3!, {r0, r1, r4}
 800364e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003650:	c313      	stmia	r3!, {r0, r1, r4}
 8003652:	6811      	ldr	r1, [r2, #0]
 8003654:	6019      	str	r1, [r3, #0]
 8003656:	8892      	ldrh	r2, [r2, #4]
 8003658:	809a      	strh	r2, [r3, #4]
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800365a:	201b      	movs	r0, #27
 800365c:	f002 f8f5 	bl	800584a <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(huart, uart_buffer, 30);
 8003660:	492d      	ldr	r1, [pc, #180]	; (8003718 <HAL_UART_RxCpltCallback+0xec>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	221e      	movs	r2, #30
 8003666:	0018      	movs	r0, r3
 8003668:	f004 fda8 	bl	80081bc <HAL_UART_Receive_IT>
	__HAL_UART_CLEAR_OREFLAG(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2208      	movs	r2, #8
 8003672:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2204      	movs	r2, #4
 800367a:	621a      	str	r2, [r3, #32]
	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 800367c:	201b      	movs	r0, #27
 800367e:	f002 f911 	bl	80058a4 <HAL_NVIC_ClearPendingIRQ>
	if (last_message[1] == 'D') {
 8003682:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_UART_RxCpltCallback+0xe8>)
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	2b44      	cmp	r3, #68	; 0x44
 8003688:	d137      	bne.n	80036fa <HAL_UART_RxCpltCallback+0xce>
		//Expected $DESIRED_ANGLE_CMD,<target>
		char delim[] = ",";
 800368a:	240c      	movs	r4, #12
 800368c:	193b      	adds	r3, r7, r4
 800368e:	222c      	movs	r2, #44	; 0x2c
 8003690:	801a      	strh	r2, [r3, #0]
		char *identifier = strtok(last_message, delim);
 8003692:	193a      	adds	r2, r7, r4
 8003694:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_UART_RxCpltCallback+0xe8>)
 8003696:	0011      	movs	r1, r2
 8003698:	0018      	movs	r0, r3
 800369a:	f008 fc8b 	bl	800bfb4 <strtok>
 800369e:	0003      	movs	r3, r0
 80036a0:	617b      	str	r3, [r7, #20]
		if (!strcmp(identifier,"$DESIRED_ANGLE_CMD")){
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_UART_RxCpltCallback+0xf0>)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	0011      	movs	r1, r2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7fc fd2b 	bl	8000104 <strcmp>
 80036ae:	1e03      	subs	r3, r0, #0
 80036b0:	d123      	bne.n	80036fa <HAL_UART_RxCpltCallback+0xce>
			if (!is_skater_gone(skater)) {
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_UART_RxCpltCallback+0xf4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 fccd 	bl	8004056 <is_skater_gone>
 80036bc:	0003      	movs	r3, r0
 80036be:	001a      	movs	r2, r3
 80036c0:	2301      	movs	r3, #1
 80036c2:	4053      	eors	r3, r2
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d017      	beq.n	80036fa <HAL_UART_RxCpltCallback+0xce>
				float target = atof(strtok(NULL,delim));
 80036ca:	193b      	adds	r3, r7, r4
 80036cc:	0019      	movs	r1, r3
 80036ce:	2000      	movs	r0, #0
 80036d0:	f008 fc70 	bl	800bfb4 <strtok>
 80036d4:	0003      	movs	r3, r0
 80036d6:	0018      	movs	r0, r3
 80036d8:	f006 fe5a 	bl	800a390 <atof>
 80036dc:	0002      	movs	r2, r0
 80036de:	000b      	movs	r3, r1
 80036e0:	0010      	movs	r0, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	f7ff fd96 	bl	8003214 <__aeabi_d2f>
 80036e8:	1c03      	adds	r3, r0, #0
 80036ea:	613b      	str	r3, [r7, #16]
				set_joint_target(joint, target);
 80036ec:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <HAL_UART_RxCpltCallback+0xf8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	1c11      	adds	r1, r2, #0
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff ff8d 	bl	8003614 <set_joint_target>
			}
		}
	}
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_UART_RxCpltCallback+0xe4>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	2104      	movs	r1, #4
 8003700:	0018      	movs	r0, r3
 8003702:	f002 fd61 	bl	80061c8 <HAL_GPIO_WritePin>
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b007      	add	sp, #28
 800370c:	bd90      	pop	{r4, r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	50001400 	.word	0x50001400
 8003714:	200004d8 	.word	0x200004d8
 8003718:	200004b8 	.word	0x200004b8
 800371c:	0800ef48 	.word	0x0800ef48
 8003720:	200004a0 	.word	0x200004a0
 8003724:	20000498 	.word	0x20000498

08003728 <HAL_TIM_PeriodElapsedCallback>:
	if (GPIO_Pin == LIMIT_SWITCH_0_Pin) {
		zero_joint(joint);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	if (htim == fast_interrupt_timer->timer) {
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d107      	bne.n	800374c <HAL_TIM_PeriodElapsedCallback+0x24>
		move_joint_to_target(joint);
 800373c:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	0018      	movs	r0, r3
 8003742:	f7ff fef9 	bl	8003538 <move_joint_to_target>
		send_message_flag = true;
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
	}
	if (htim == slow_interrupt_timer->timer) {
 800374c:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d11c      	bne.n	8003792 <HAL_TIM_PeriodElapsedCallback+0x6a>
		update_adc_sensor_values(adc_sensor);
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <HAL_TIM_PeriodElapsedCallback+0x84>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0018      	movs	r0, r3
 800375e:	f7ff fe4f 	bl	8003400 <update_adc_sensor_values>
		refresh_skater_status(skater);
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	0018      	movs	r0, r3
 8003768:	f000 fc86 	bl	8004078 <refresh_skater_status>
		refresh_joint_angle(joint);
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0018      	movs	r0, r3
 8003772:	f7ff ff2d 	bl	80035d0 <refresh_joint_angle>
		if (is_skater_gone(skater)) {
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0018      	movs	r0, r3
 800377c:	f000 fc6b 	bl	8004056 <is_skater_gone>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d006      	beq.n	8003792 <HAL_TIM_PeriodElapsedCallback+0x6a>
			set_joint_target(joint, AUTOMATIC_BRAKING_ANGLE_DEGREES);
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800378a:	1c11      	adds	r1, r2, #0
 800378c:	0018      	movs	r0, r3
 800378e:	f7ff ff41 	bl	8003614 <set_joint_target>
		}
	}
}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b002      	add	sp, #8
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	200004b4 	.word	0x200004b4
 80037a0:	20000498 	.word	0x20000498
 80037a4:	200004f6 	.word	0x200004f6
 80037a8:	200004b0 	.word	0x200004b0
 80037ac:	20000488 	.word	0x20000488
 80037b0:	200004a0 	.word	0x200004a0
 80037b4:	42b40000 	.word	0x42b40000

080037b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	adc_sensor = new_adc_sensor(&hadc1, 2);
 80037be:	4b4d      	ldr	r3, [pc, #308]	; (80038f4 <main+0x13c>)
 80037c0:	2102      	movs	r1, #2
 80037c2:	0018      	movs	r0, r3
 80037c4:	f7ff fdd8 	bl	8003378 <new_adc_sensor>
 80037c8:	0002      	movs	r2, r0
 80037ca:	4b4b      	ldr	r3, [pc, #300]	; (80038f8 <main+0x140>)
 80037cc:	601a      	str	r2, [r3, #0]
	imu = new_imu_sensor(&hi2c2);
 80037ce:	4b4b      	ldr	r3, [pc, #300]	; (80038fc <main+0x144>)
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7ff fe61 	bl	8003498 <new_imu_sensor>
 80037d6:	0002      	movs	r2, r0
 80037d8:	4b49      	ldr	r3, [pc, #292]	; (8003900 <main+0x148>)
 80037da:	601a      	str	r2, [r3, #0]
	motor_direction_pin = new_pin_data(DRV8825_DIR_GPIO_Port, DRV8825_DIR_Pin);
 80037dc:	23a0      	movs	r3, #160	; 0xa0
 80037de:	05db      	lsls	r3, r3, #23
 80037e0:	2180      	movs	r1, #128	; 0x80
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 fbcb 	bl	8003f7e <new_pin_data>
 80037e8:	0002      	movs	r2, r0
 80037ea:	4b46      	ldr	r3, [pc, #280]	; (8003904 <main+0x14c>)
 80037ec:	601a      	str	r2, [r3, #0]
	motor_step_pin = new_pin_data(DRV8825_STP_GPIO_Port, DRV8825_STP_Pin);
 80037ee:	23a0      	movs	r3, #160	; 0xa0
 80037f0:	05db      	lsls	r3, r3, #23
 80037f2:	2140      	movs	r1, #64	; 0x40
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 fbc2 	bl	8003f7e <new_pin_data>
 80037fa:	0002      	movs	r2, r0
 80037fc:	4b42      	ldr	r3, [pc, #264]	; (8003908 <main+0x150>)
 80037fe:	601a      	str	r2, [r3, #0]
	motor = new_motor(motor_direction_pin, motor_step_pin);
 8003800:	4b40      	ldr	r3, [pc, #256]	; (8003904 <main+0x14c>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b40      	ldr	r3, [pc, #256]	; (8003908 <main+0x150>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0019      	movs	r1, r3
 800380a:	0010      	movs	r0, r2
 800380c:	f000 fb5d 	bl	8003eca <new_motor>
 8003810:	0002      	movs	r2, r0
 8003812:	4b3e      	ldr	r3, [pc, #248]	; (800390c <main+0x154>)
 8003814:	601a      	str	r2, [r3, #0]
	slow_interrupt_timer = new_interrupt_timer(&htim14);
 8003816:	4b3e      	ldr	r3, [pc, #248]	; (8003910 <main+0x158>)
 8003818:	0018      	movs	r0, r3
 800381a:	f7ff fe4e 	bl	80034ba <new_interrupt_timer>
 800381e:	0002      	movs	r2, r0
 8003820:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <main+0x15c>)
 8003822:	601a      	str	r2, [r3, #0]
	fast_interrupt_timer = new_interrupt_timer(&htim16);
 8003824:	4b3c      	ldr	r3, [pc, #240]	; (8003918 <main+0x160>)
 8003826:	0018      	movs	r0, r3
 8003828:	f7ff fe47 	bl	80034ba <new_interrupt_timer>
 800382c:	0002      	movs	r2, r0
 800382e:	4b3b      	ldr	r3, [pc, #236]	; (800391c <main+0x164>)
 8003830:	601a      	str	r2, [r3, #0]
	potentiometer = new_potentiometer(adc_sensor, 1);
 8003832:	4b31      	ldr	r3, [pc, #196]	; (80038f8 <main+0x140>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2101      	movs	r1, #1
 8003838:	0018      	movs	r0, r3
 800383a:	f000 fbcf 	bl	8003fdc <new_potentiometer>
 800383e:	0002      	movs	r2, r0
 8003840:	4b37      	ldr	r3, [pc, #220]	; (8003920 <main+0x168>)
 8003842:	601a      	str	r2, [r3, #0]
	joint = new_joint(motor, potentiometer);
 8003844:	4b31      	ldr	r3, [pc, #196]	; (800390c <main+0x154>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4b35      	ldr	r3, [pc, #212]	; (8003920 <main+0x168>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0019      	movs	r1, r3
 800384e:	0010      	movs	r0, r2
 8003850:	f7ff fe51 	bl	80034f6 <new_joint>
 8003854:	0002      	movs	r2, r0
 8003856:	4b33      	ldr	r3, [pc, #204]	; (8003924 <main+0x16c>)
 8003858:	601a      	str	r2, [r3, #0]
	force_sensor = new_force_sensor(adc_sensor, 0);
 800385a:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <main+0x140>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2100      	movs	r1, #0
 8003860:	0018      	movs	r0, r3
 8003862:	f7ff fdeb 	bl	800343c <new_force_sensor>
 8003866:	0002      	movs	r2, r0
 8003868:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <main+0x170>)
 800386a:	601a      	str	r2, [r3, #0]
	skater = new_skater(force_sensor);
 800386c:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <main+0x170>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	0018      	movs	r0, r3
 8003872:	f000 fbdc 	bl	800402e <new_skater>
 8003876:	0002      	movs	r2, r0
 8003878:	4b2c      	ldr	r3, [pc, #176]	; (800392c <main+0x174>)
 800387a:	601a      	str	r2, [r3, #0]
	wireless = new_wireless(&huart1);
 800387c:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <main+0x178>)
 800387e:	0018      	movs	r0, r3
 8003880:	f000 ff49 	bl	8004716 <new_wireless>
 8003884:	0002      	movs	r2, r0
 8003886:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <main+0x17c>)
 8003888:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800388a:	f000 ffb3 	bl	80047f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800388e:	f000 f857 	bl	8003940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003892:	f000 fa73 	bl	8003d7c <MX_GPIO_Init>
  MX_DMA_Init();
 8003896:	f000 fa53 	bl	8003d40 <MX_DMA_Init>
  MX_I2C2_Init();
 800389a:	f000 f917 	bl	8003acc <MX_I2C2_Init>
  MX_TIM3_Init();
 800389e:	f000 f955 	bl	8003b4c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80038a2:	f000 f9ff 	bl	8003ca4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80038a6:	f000 f893 	bl	80039d0 <MX_ADC1_Init>
  MX_TIM14_Init();
 80038aa:	f000 f9af 	bl	8003c0c <MX_TIM14_Init>
  MX_TIM16_Init();
 80038ae:	f000 f9d1 	bl	8003c54 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  start_interrupt_timer(fast_interrupt_timer);
 80038b2:	4b1a      	ldr	r3, [pc, #104]	; (800391c <main+0x164>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7ff fe10 	bl	80034dc <start_interrupt_timer>
  start_interrupt_timer(slow_interrupt_timer);
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <main+0x15c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7ff fe0b 	bl	80034dc <start_interrupt_timer>
  HAL_UART_Receive_IT(&huart1, uart_buffer, 30);
 80038c6:	491c      	ldr	r1, [pc, #112]	; (8003938 <main+0x180>)
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <main+0x178>)
 80038ca:	221e      	movs	r2, #30
 80038cc:	0018      	movs	r0, r3
 80038ce:	f004 fc75 	bl	80081bc <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (send_message_flag) {
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <main+0x184>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0fb      	beq.n	80038d2 <main+0x11a>
		  float current_speed = 0.0f; // TODO - get actual speed
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]
		  send_wireless_speed(wireless, current_speed);
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <main+0x17c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	1c11      	adds	r1, r2, #0
 80038e6:	0018      	movs	r0, r3
 80038e8:	f000 ff26 	bl	8004738 <send_wireless_speed>
		  send_message_flag = false;
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <main+0x184>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
	  if (send_message_flag) {
 80038f2:	e7ee      	b.n	80038d2 <main+0x11a>
 80038f4:	200001fc 	.word	0x200001fc
 80038f8:	20000488 	.word	0x20000488
 80038fc:	200002bc 	.word	0x200002bc
 8003900:	2000048c 	.word	0x2000048c
 8003904:	200004a8 	.word	0x200004a8
 8003908:	200004ac 	.word	0x200004ac
 800390c:	20000490 	.word	0x20000490
 8003910:	2000035c 	.word	0x2000035c
 8003914:	200004b0 	.word	0x200004b0
 8003918:	200003a8 	.word	0x200003a8
 800391c:	200004b4 	.word	0x200004b4
 8003920:	20000494 	.word	0x20000494
 8003924:	20000498 	.word	0x20000498
 8003928:	2000049c 	.word	0x2000049c
 800392c:	200004a0 	.word	0x200004a0
 8003930:	200003f4 	.word	0x200003f4
 8003934:	200004a4 	.word	0x200004a4
 8003938:	200004b8 	.word	0x200004b8
 800393c:	200004f6 	.word	0x200004f6

08003940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b093      	sub	sp, #76	; 0x4c
 8003944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003946:	2410      	movs	r4, #16
 8003948:	193b      	adds	r3, r7, r4
 800394a:	0018      	movs	r0, r3
 800394c:	2338      	movs	r3, #56	; 0x38
 800394e:	001a      	movs	r2, r3
 8003950:	2100      	movs	r1, #0
 8003952:	f006 fd57 	bl	800a404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003956:	003b      	movs	r3, r7
 8003958:	0018      	movs	r0, r3
 800395a:	2310      	movs	r3, #16
 800395c:	001a      	movs	r2, r3
 800395e:	2100      	movs	r1, #0
 8003960:	f006 fd50 	bl	800a404 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	0018      	movs	r0, r3
 800396a:	f002 fdb7 	bl	80064dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800396e:	193b      	adds	r3, r7, r4
 8003970:	2202      	movs	r2, #2
 8003972:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003974:	193b      	adds	r3, r7, r4
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	0052      	lsls	r2, r2, #1
 800397a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800397c:	193b      	adds	r3, r7, r4
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003982:	193b      	adds	r3, r7, r4
 8003984:	2240      	movs	r2, #64	; 0x40
 8003986:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003988:	193b      	adds	r3, r7, r4
 800398a:	2200      	movs	r2, #0
 800398c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800398e:	193b      	adds	r3, r7, r4
 8003990:	0018      	movs	r0, r3
 8003992:	f002 fdef 	bl	8006574 <HAL_RCC_OscConfig>
 8003996:	1e03      	subs	r3, r0, #0
 8003998:	d001      	beq.n	800399e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800399a:	f000 fa91 	bl	8003ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800399e:	003b      	movs	r3, r7
 80039a0:	2207      	movs	r2, #7
 80039a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80039a4:	003b      	movs	r3, r7
 80039a6:	2200      	movs	r2, #0
 80039a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039aa:	003b      	movs	r3, r7
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039b0:	003b      	movs	r3, r7
 80039b2:	2200      	movs	r2, #0
 80039b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80039b6:	003b      	movs	r3, r7
 80039b8:	2100      	movs	r1, #0
 80039ba:	0018      	movs	r0, r3
 80039bc:	f003 f8f4 	bl	8006ba8 <HAL_RCC_ClockConfig>
 80039c0:	1e03      	subs	r3, r0, #0
 80039c2:	d001      	beq.n	80039c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80039c4:	f000 fa7c 	bl	8003ec0 <Error_Handler>
  }
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b013      	add	sp, #76	; 0x4c
 80039ce:	bd90      	pop	{r4, r7, pc}

080039d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	0018      	movs	r0, r3
 80039da:	230c      	movs	r3, #12
 80039dc:	001a      	movs	r2, r3
 80039de:	2100      	movs	r1, #0
 80039e0:	f006 fd10 	bl	800a404 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80039e4:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 80039e6:	4a37      	ldr	r2, [pc, #220]	; (8003ac4 <MX_ADC1_Init+0xf4>)
 80039e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80039ea:	4b35      	ldr	r3, [pc, #212]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	05d2      	lsls	r2, r2, #23
 80039f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039f2:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039f8:	4b31      	ldr	r3, [pc, #196]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80039fe:	4b30      	ldr	r3, [pc, #192]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	0392      	lsls	r2, r2, #14
 8003a04:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a06:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a08:	2204      	movs	r2, #4
 8003a0a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003a0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003a12:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003a18:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 8003a1e:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a20:	2202      	movs	r2, #2
 8003a22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003a24:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a26:	2220      	movs	r2, #32
 8003a28:	2101      	movs	r1, #1
 8003a2a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a2c:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003a38:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a3a:	222c      	movs	r2, #44	; 0x2c
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003a40:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003a46:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003a52:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a54:	223c      	movs	r2, #60	; 0x3c
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003a5a:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a62:	0018      	movs	r0, r3
 8003a64:	f001 f8b8 	bl	8004bd8 <HAL_ADC_Init>
 8003a68:	1e03      	subs	r3, r0, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003a6c:	f000 fa28 	bl	8003ec0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	2200      	movs	r2, #0
 8003a7a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003a7c:	1d3b      	adds	r3, r7, #4
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a82:	1d3a      	adds	r2, r7, #4
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003a86:	0011      	movs	r1, r2
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f001 faf3 	bl	8005074 <HAL_ADC_ConfigChannel>
 8003a8e:	1e03      	subs	r3, r0, #0
 8003a90:	d001      	beq.n	8003a96 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8003a92:	f000 fa15 	bl	8003ec0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <MX_ADC1_Init+0xf8>)
 8003a9a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003aa2:	1d3a      	adds	r2, r7, #4
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <MX_ADC1_Init+0xf0>)
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f001 fae3 	bl	8005074 <HAL_ADC_ConfigChannel>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8003ab2:	f000 fa05 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b004      	add	sp, #16
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	200001fc 	.word	0x200001fc
 8003ac4:	40012400 	.word	0x40012400
 8003ac8:	08000004 	.word	0x08000004

08003acc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <MX_I2C2_Init+0x78>)
 8003ad4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <MX_I2C2_Init+0x7c>)
 8003ada:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003adc:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ae8:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003aee:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003af4:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f002 fbb9 	bl	8006280 <HAL_I2C_Init>
 8003b0e:	1e03      	subs	r3, r0, #0
 8003b10:	d001      	beq.n	8003b16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003b12:	f000 f9d5 	bl	8003ec0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003b18:	2100      	movs	r1, #0
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f002 fc46 	bl	80063ac <HAL_I2CEx_ConfigAnalogFilter>
 8003b20:	1e03      	subs	r3, r0, #0
 8003b22:	d001      	beq.n	8003b28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003b24:	f000 f9cc 	bl	8003ec0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <MX_I2C2_Init+0x74>)
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f002 fc89 	bl	8006444 <HAL_I2CEx_ConfigDigitalFilter>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d001      	beq.n	8003b3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003b36:	f000 f9c3 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	200002bc 	.word	0x200002bc
 8003b44:	40005800 	.word	0x40005800
 8003b48:	00303d5b 	.word	0x00303d5b

08003b4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b52:	231c      	movs	r3, #28
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	0018      	movs	r0, r3
 8003b58:	230c      	movs	r3, #12
 8003b5a:	001a      	movs	r2, r3
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	f006 fc51 	bl	800a404 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b62:	003b      	movs	r3, r7
 8003b64:	0018      	movs	r0, r3
 8003b66:	231c      	movs	r3, #28
 8003b68:	001a      	movs	r2, r3
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	f006 fc4a 	bl	800a404 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b70:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <MX_TIM3_Init+0xb8>)
 8003b72:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <MX_TIM3_Init+0xbc>)
 8003b74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <MX_TIM3_Init+0xb8>)
 8003b78:	220f      	movs	r2, #15
 8003b7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b7c:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <MX_TIM3_Init+0xb8>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <MX_TIM3_Init+0xb8>)
 8003b84:	22c8      	movs	r2, #200	; 0xc8
 8003b86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b88:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <MX_TIM3_Init+0xb8>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <MX_TIM3_Init+0xb8>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <MX_TIM3_Init+0xb8>)
 8003b96:	0018      	movs	r0, r3
 8003b98:	f003 fbd6 	bl	8007348 <HAL_TIM_PWM_Init>
 8003b9c:	1e03      	subs	r3, r0, #0
 8003b9e:	d001      	beq.n	8003ba4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003ba0:	f000 f98e 	bl	8003ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba4:	211c      	movs	r1, #28
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bb2:	187a      	adds	r2, r7, r1
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <MX_TIM3_Init+0xb8>)
 8003bb6:	0011      	movs	r1, r2
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f004 f981 	bl	8007ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bbe:	1e03      	subs	r3, r0, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003bc2:	f000 f97d 	bl	8003ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bc6:	003b      	movs	r3, r7
 8003bc8:	2260      	movs	r2, #96	; 0x60
 8003bca:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003bcc:	003b      	movs	r3, r7
 8003bce:	2200      	movs	r2, #0
 8003bd0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bd2:	003b      	movs	r3, r7
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bd8:	003b      	movs	r3, r7
 8003bda:	2200      	movs	r2, #0
 8003bdc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bde:	0039      	movs	r1, r7
 8003be0:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <MX_TIM3_Init+0xb8>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	0018      	movs	r0, r3
 8003be6:	f003 fd39 	bl	800765c <HAL_TIM_PWM_ConfigChannel>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003bee:	f000 f967 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003bf2:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <MX_TIM3_Init+0xb8>)
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fbd1 	bl	800439c <HAL_TIM_MspPostInit>

}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b00a      	add	sp, #40	; 0x28
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	20000310 	.word	0x20000310
 8003c08:	40000400 	.word	0x40000400

08003c0c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003c10:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <MX_TIM14_Init+0x40>)
 8003c12:	4a0f      	ldr	r2, [pc, #60]	; (8003c50 <MX_TIM14_Init+0x44>)
 8003c14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15;
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <MX_TIM14_Init+0x40>)
 8003c18:	220f      	movs	r2, #15
 8003c1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <MX_TIM14_Init+0x40>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = SLOW_PERIOD;
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <MX_TIM14_Init+0x40>)
 8003c24:	22fa      	movs	r2, #250	; 0xfa
 8003c26:	00d2      	lsls	r2, r2, #3
 8003c28:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <MX_TIM14_Init+0x40>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <MX_TIM14_Init+0x40>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <MX_TIM14_Init+0x40>)
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f003 fad9 	bl	80071f0 <HAL_TIM_Base_Init>
 8003c3e:	1e03      	subs	r3, r0, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003c42:	f000 f93d 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	2000035c 	.word	0x2000035c
 8003c50:	40002000 	.word	0x40002000

08003c54 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <MX_TIM16_Init+0x48>)
 8003c5a:	4a11      	ldr	r2, [pc, #68]	; (8003ca0 <MX_TIM16_Init+0x4c>)
 8003c5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15;
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <MX_TIM16_Init+0x48>)
 8003c60:	220f      	movs	r2, #15
 8003c62:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <MX_TIM16_Init+0x48>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = FAST_PERIOD;
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <MX_TIM16_Init+0x48>)
 8003c6c:	22fa      	movs	r2, #250	; 0xfa
 8003c6e:	0092      	lsls	r2, r2, #2
 8003c70:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c72:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <MX_TIM16_Init+0x48>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003c78:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <MX_TIM16_Init+0x48>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <MX_TIM16_Init+0x48>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <MX_TIM16_Init+0x48>)
 8003c86:	0018      	movs	r0, r3
 8003c88:	f003 fab2 	bl	80071f0 <HAL_TIM_Base_Init>
 8003c8c:	1e03      	subs	r3, r0, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003c90:	f000 f916 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003c94:	46c0      	nop			; (mov r8, r8)
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	200003a8 	.word	0x200003a8
 8003ca0:	40014400 	.word	0x40014400

08003ca4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ca8:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003caa:	4a24      	ldr	r2, [pc, #144]	; (8003d3c <MX_USART1_UART_Init+0x98>)
 8003cac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003cae:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003cb0:	2296      	movs	r2, #150	; 0x96
 8003cb2:	0192      	lsls	r2, r2, #6
 8003cb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cb6:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003cca:	220c      	movs	r2, #12
 8003ccc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd4:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cda:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f004 f966 	bl	8007fc0 <HAL_UART_Init>
 8003cf4:	1e03      	subs	r3, r0, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003cf8:	f000 f8e2 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003cfe:	2100      	movs	r1, #0
 8003d00:	0018      	movs	r0, r3
 8003d02:	f006 fa65 	bl	800a1d0 <HAL_UARTEx_SetTxFifoThreshold>
 8003d06:	1e03      	subs	r3, r0, #0
 8003d08:	d001      	beq.n	8003d0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003d0a:	f000 f8d9 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003d10:	2100      	movs	r1, #0
 8003d12:	0018      	movs	r0, r3
 8003d14:	f006 fa9c 	bl	800a250 <HAL_UARTEx_SetRxFifoThreshold>
 8003d18:	1e03      	subs	r3, r0, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003d1c:	f000 f8d0 	bl	8003ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <MX_USART1_UART_Init+0x94>)
 8003d22:	0018      	movs	r0, r3
 8003d24:	f006 fa1a 	bl	800a15c <HAL_UARTEx_DisableFifoMode>
 8003d28:	1e03      	subs	r3, r0, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003d2c:	f000 f8c8 	bl	8003ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	200003f4 	.word	0x200003f4
 8003d3c:	40013800 	.word	0x40013800

08003d40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <MX_DMA_Init+0x38>)
 8003d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <MX_DMA_Init+0x38>)
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <MX_DMA_Init+0x38>)
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	2201      	movs	r2, #1
 8003d58:	4013      	ands	r3, r2
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2100      	movs	r1, #0
 8003d62:	2009      	movs	r0, #9
 8003d64:	f001 fd5c 	bl	8005820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003d68:	2009      	movs	r0, #9
 8003d6a:	f001 fd6e 	bl	800584a <HAL_NVIC_EnableIRQ>

}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b002      	add	sp, #8
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	40021000 	.word	0x40021000

08003d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d7c:	b590      	push	{r4, r7, lr}
 8003d7e:	b08b      	sub	sp, #44	; 0x2c
 8003d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d82:	2414      	movs	r4, #20
 8003d84:	193b      	adds	r3, r7, r4
 8003d86:	0018      	movs	r0, r3
 8003d88:	2314      	movs	r3, #20
 8003d8a:	001a      	movs	r2, r3
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	f006 fb39 	bl	800a404 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d92:	4b48      	ldr	r3, [pc, #288]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d96:	4b47      	ldr	r3, [pc, #284]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003d98:	2102      	movs	r1, #2
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d9e:	4b45      	ldr	r3, [pc, #276]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	2202      	movs	r2, #2
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003daa:	4b42      	ldr	r3, [pc, #264]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dae:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003db0:	2104      	movs	r1, #4
 8003db2:	430a      	orrs	r2, r1
 8003db4:	635a      	str	r2, [r3, #52]	; 0x34
 8003db6:	4b3f      	ldr	r3, [pc, #252]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	2204      	movs	r2, #4
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dc2:	4b3c      	ldr	r3, [pc, #240]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003dc8:	2120      	movs	r1, #32
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8003dce:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dda:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dde:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003de0:	2101      	movs	r1, #1
 8003de2:	430a      	orrs	r2, r1
 8003de4:	635a      	str	r2, [r3, #52]	; 0x34
 8003de6:	4b33      	ldr	r3, [pc, #204]	; (8003eb4 <MX_GPIO_Init+0x138>)
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	2201      	movs	r2, #1
 8003dec:	4013      	ands	r3, r2
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8003df2:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <MX_GPIO_Init+0x13c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	2104      	movs	r1, #4
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f002 f9e5 	bl	80061c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV8825_DIR_GPIO_Port, DRV8825_DIR_Pin, GPIO_PIN_RESET);
 8003dfe:	23a0      	movs	r3, #160	; 0xa0
 8003e00:	05db      	lsls	r3, r3, #23
 8003e02:	2200      	movs	r2, #0
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	0018      	movs	r0, r3
 8003e08:	f002 f9de 	bl	80061c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SWITCH_0_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_0_Pin;
 8003e0c:	193b      	adds	r3, r7, r4
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	01d2      	lsls	r2, r2, #7
 8003e12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e14:	193b      	adds	r3, r7, r4
 8003e16:	2288      	movs	r2, #136	; 0x88
 8003e18:	0352      	lsls	r2, r2, #13
 8003e1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1c:	193b      	adds	r3, r7, r4
 8003e1e:	2200      	movs	r2, #0
 8003e20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LIMIT_SWITCH_0_GPIO_Port, &GPIO_InitStruct);
 8003e22:	193b      	adds	r3, r7, r4
 8003e24:	4a25      	ldr	r2, [pc, #148]	; (8003ebc <MX_GPIO_Init+0x140>)
 8003e26:	0019      	movs	r1, r3
 8003e28:	0010      	movs	r0, r2
 8003e2a:	f002 f869 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8003e2e:	193b      	adds	r3, r7, r4
 8003e30:	2204      	movs	r2, #4
 8003e32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	2201      	movs	r2, #1
 8003e38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e40:	193b      	adds	r3, r7, r4
 8003e42:	2200      	movs	r2, #0
 8003e44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8003e46:	193b      	adds	r3, r7, r4
 8003e48:	4a1b      	ldr	r2, [pc, #108]	; (8003eb8 <MX_GPIO_Init+0x13c>)
 8003e4a:	0019      	movs	r1, r3
 8003e4c:	0010      	movs	r0, r2
 8003e4e:	f002 f857 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH_1_Pin PA4 */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin|GPIO_PIN_4;
 8003e52:	193b      	adds	r3, r7, r4
 8003e54:	2212      	movs	r2, #18
 8003e56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e58:	193b      	adds	r3, r7, r4
 8003e5a:	2288      	movs	r2, #136	; 0x88
 8003e5c:	0352      	lsls	r2, r2, #13
 8003e5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	193b      	adds	r3, r7, r4
 8003e62:	2200      	movs	r2, #0
 8003e64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e66:	193a      	adds	r2, r7, r4
 8003e68:	23a0      	movs	r3, #160	; 0xa0
 8003e6a:	05db      	lsls	r3, r3, #23
 8003e6c:	0011      	movs	r1, r2
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f002 f846 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV8825_DIR_Pin */
  GPIO_InitStruct.Pin = DRV8825_DIR_Pin;
 8003e74:	0021      	movs	r1, r4
 8003e76:	187b      	adds	r3, r7, r1
 8003e78:	2280      	movs	r2, #128	; 0x80
 8003e7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e7c:	187b      	adds	r3, r7, r1
 8003e7e:	2201      	movs	r2, #1
 8003e80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DRV8825_DIR_GPIO_Port, &GPIO_InitStruct);
 8003e8e:	187a      	adds	r2, r7, r1
 8003e90:	23a0      	movs	r3, #160	; 0xa0
 8003e92:	05db      	lsls	r3, r3, #23
 8003e94:	0011      	movs	r1, r2
 8003e96:	0018      	movs	r0, r3
 8003e98:	f002 f832 	bl	8005f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	2007      	movs	r0, #7
 8003ea2:	f001 fcbd 	bl	8005820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003ea6:	2007      	movs	r0, #7
 8003ea8:	f001 fccf 	bl	800584a <HAL_NVIC_EnableIRQ>

}
 8003eac:	46c0      	nop			; (mov r8, r8)
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b00b      	add	sp, #44	; 0x2c
 8003eb2:	bd90      	pop	{r4, r7, pc}
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	50001400 	.word	0x50001400
 8003ebc:	50000800 	.word	0x50000800

08003ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ec4:	b672      	cpsid	i
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ec8:	e7fe      	b.n	8003ec8 <Error_Handler+0x8>

08003eca <new_motor>:
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Motor object
Motor *new_motor(
	PinData *_dir_pin,
	PinData *_stp_pin
) {
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
    Motor *motor = (Motor*) malloc(sizeof(Motor));
 8003ed4:	2008      	movs	r0, #8
 8003ed6:	f006 fa8b 	bl	800a3f0 <malloc>
 8003eda:	0003      	movs	r3, r0
 8003edc:	60fb      	str	r3, [r7, #12]
    motor->dir_pin = _dir_pin;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	601a      	str	r2, [r3, #0]
    motor->stp_pin = _stp_pin;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
	return motor;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b004      	add	sp, #16
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <change_motor_steps>:

// REQUIRES: motor is a Motor object
// and steps is the amount of steps to turn
// MODIFIES: nothing
// EFFECTS: Moves the motor a certain by a certain amount of steps
void change_motor_steps(Motor *motor, int steps) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
    set_pin_value(motor->dir_pin, steps >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	0fdb      	lsrs	r3, r3, #31
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	0019      	movs	r1, r3
 8003f0c:	0010      	movs	r0, r2
 8003f0e:	f000 f84e 	bl	8003fae <set_pin_value>
    steps = abs(steps);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	17da      	asrs	r2, r3, #31
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	4053      	eors	r3, r2
 8003f1a:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < steps; ++i) {
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e024      	b.n	8003f6c <change_motor_steps+0x78>
    	set_pin_value(motor->stp_pin, GPIO_PIN_SET);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2101      	movs	r1, #1
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 f840 	bl	8003fae <set_pin_value>
		for (int j = 0; j < 1000; ++j);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e002      	b.n	8003f3a <change_motor_steps+0x46>
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	3301      	adds	r3, #1
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	23fa      	movs	r3, #250	; 0xfa
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	429a      	cmp	r2, r3
 8003f42:	dbf7      	blt.n	8003f34 <change_motor_steps+0x40>
		set_pin_value(motor->stp_pin, GPIO_PIN_RESET);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2100      	movs	r1, #0
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f000 f82f 	bl	8003fae <set_pin_value>
		for (int j = 0; j < 1000; ++j);
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e002      	b.n	8003f5c <change_motor_steps+0x68>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	23fa      	movs	r3, #250	; 0xfa
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	429a      	cmp	r2, r3
 8003f64:	dbf7      	blt.n	8003f56 <change_motor_steps+0x62>
    for (int i = 0; i < steps; ++i) {
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	dbd6      	blt.n	8003f22 <change_motor_steps+0x2e>
    }
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b006      	add	sp, #24
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <new_pin_data>:

// REQUIRES: _port and _pin corresponds to
// the port and pin.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created PinData object
PinData *new_pin_data(GPIO_TypeDef *_port, uint16_t _pin) {
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	000a      	movs	r2, r1
 8003f88:	1cbb      	adds	r3, r7, #2
 8003f8a:	801a      	strh	r2, [r3, #0]
    PinData *pin_data = (PinData*) malloc(sizeof(PinData));
 8003f8c:	2008      	movs	r0, #8
 8003f8e:	f006 fa2f 	bl	800a3f0 <malloc>
 8003f92:	0003      	movs	r3, r0
 8003f94:	60fb      	str	r3, [r7, #12]
	pin_data->port = _port;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]
    pin_data->pin = _pin;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1cba      	adds	r2, r7, #2
 8003fa0:	8812      	ldrh	r2, [r2, #0]
 8003fa2:	809a      	strh	r2, [r3, #4]
	return pin_data;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b004      	add	sp, #16
 8003fac:	bd80      	pop	{r7, pc}

08003fae <set_pin_value>:

// REQUIRES: pin_data is PinData and value is 0 or 1
// MODIFIES: nothing
// EFFECTS: Sets pin to value
void set_pin_value(PinData *pin_data, uint8_t value) {
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	000a      	movs	r2, r1
 8003fb8:	1cfb      	adds	r3, r7, #3
 8003fba:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(pin_data->port, pin_data->pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8899      	ldrh	r1, [r3, #4]
 8003fc4:	1cfb      	adds	r3, r7, #3
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	1e5a      	subs	r2, r3, #1
 8003fca:	4193      	sbcs	r3, r2
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	001a      	movs	r2, r3
 8003fd0:	f002 f8fa 	bl	80061c8 <HAL_GPIO_WritePin>
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <new_potentiometer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Potentiometer object
Potentiometer *new_potentiometer(ADCSensor *_adc_sensor, uint8_t _rank) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	000a      	movs	r2, r1
 8003fe6:	1cfb      	adds	r3, r7, #3
 8003fe8:	701a      	strb	r2, [r3, #0]
    Potentiometer *potentiometer = (Potentiometer*) malloc(sizeof(Potentiometer));
 8003fea:	2008      	movs	r0, #8
 8003fec:	f006 fa00 	bl	800a3f0 <malloc>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	60fb      	str	r3, [r7, #12]
    potentiometer->adc_sensor = _adc_sensor;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	601a      	str	r2, [r3, #0]
    potentiometer->rank = _rank;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1cfa      	adds	r2, r7, #3
 8003ffe:	7812      	ldrb	r2, [r2, #0]
 8004000:	711a      	strb	r2, [r3, #4]
    return potentiometer;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	0018      	movs	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	b004      	add	sp, #16
 800400a:	bd80      	pop	{r7, pc}

0800400c <get_potentiometer_input>:

// REQUIRES: potentiometer is a Potentiometer object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint32_t get_potentiometer_input(Potentiometer *potentiometer) {
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
    return get_adc_sensor_value(potentiometer->adc_sensor, potentiometer->rank);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	791b      	ldrb	r3, [r3, #4]
 800401c:	0019      	movs	r1, r3
 800401e:	0010      	movs	r0, r2
 8004020:	f7ff f9dc 	bl	80033dc <get_adc_sensor_value>
 8004024:	0003      	movs	r3, r0
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b002      	add	sp, #8
 800402c:	bd80      	pop	{r7, pc}

0800402e <new_skater>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _force_sensor is a ForceSensor object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Skater object
Skater *new_skater(ForceSensor *_force_sensor) {
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
	Skater *skater = (Skater*) malloc(sizeof(Skater));
 8004036:	2008      	movs	r0, #8
 8004038:	f006 f9da 	bl	800a3f0 <malloc>
 800403c:	0003      	movs	r3, r0
 800403e:	60fb      	str	r3, [r7, #12]
	skater->force_sensor = _force_sensor;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	601a      	str	r2, [r3, #0]
	skater->ms_since_skater_detected = 0;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	605a      	str	r2, [r3, #4]
	return skater;
 800404c:	68fb      	ldr	r3, [r7, #12]
}
 800404e:	0018      	movs	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	b004      	add	sp, #16
 8004054:	bd80      	pop	{r7, pc}

08004056 <is_skater_gone>:

// REQUIRES: skater is a Skater object
// MODIFIES: nothing
// EFFECTS: Returns whether skater is gone or not
bool is_skater_gone(Skater *skater) {
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
	return skater->ms_since_skater_detected > TIME_INDICATING_SKATER_ABSENCE_MS;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	22fa      	movs	r2, #250	; 0xfa
 8004064:	0092      	lsls	r2, r2, #2
 8004066:	429a      	cmp	r2, r3
 8004068:	419b      	sbcs	r3, r3
 800406a:	425b      	negs	r3, r3
 800406c:	b2db      	uxtb	r3, r3
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b002      	add	sp, #8
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <refresh_skater_status>:

// REQUIRES: skater is a Skater object
// MODIFIES: ms_since_skater_detected
// EFFECTS: Updates the value of ms_since_skater_detected
void refresh_skater_status(Skater *skater) {
 8004078:	b5b0      	push	{r4, r5, r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	float measured_newtons = get_force_sensor_data(skater->force_sensor);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0018      	movs	r0, r3
 8004086:	f7ff f9f1 	bl	800346c <get_force_sensor_data>
 800408a:	1c03      	adds	r3, r0, #0
 800408c:	60fb      	str	r3, [r7, #12]
	bool is_skater_detected = measured_newtons > FORCE_INDICATING_SKATER_PRESENCE_NEWTONS;
 800408e:	230b      	movs	r3, #11
 8004090:	18fc      	adds	r4, r7, r3
 8004092:	2301      	movs	r3, #1
 8004094:	1c1d      	adds	r5, r3, #0
 8004096:	4911      	ldr	r1, [pc, #68]	; (80040dc <refresh_skater_status+0x64>)
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7fc fa33 	bl	8000504 <__aeabi_fcmpgt>
 800409e:	1e03      	subs	r3, r0, #0
 80040a0:	d101      	bne.n	80040a6 <refresh_skater_status+0x2e>
 80040a2:	2300      	movs	r3, #0
 80040a4:	1c1d      	adds	r5, r3, #0
 80040a6:	7025      	strb	r5, [r4, #0]

	// If skater is detected, reset value to 0.
	// If skater is not detected, then keep incrementing ms_since_skater_detected
	// until it surpasses the expected maximum.
	skater->ms_since_skater_detected = is_skater_detected ?
			0 : skater->ms_since_skater_detected > TIME_INDICATING_SKATER_ABSENCE_MS ?
 80040a8:	230b      	movs	r3, #11
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <refresh_skater_status+0x3e>
 80040b2:	2300      	movs	r3, #0
 80040b4:	e00b      	b.n	80040ce <refresh_skater_status+0x56>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685a      	ldr	r2, [r3, #4]
					skater->ms_since_skater_detected : skater->ms_since_skater_detected + 200;
 80040ba:	23fa      	movs	r3, #250	; 0xfa
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	429a      	cmp	r2, r3
 80040c0:	d902      	bls.n	80040c8 <refresh_skater_status+0x50>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	e002      	b.n	80040ce <refresh_skater_status+0x56>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	33c8      	adds	r3, #200	; 0xc8
	skater->ms_since_skater_detected = is_skater_detected ?
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6053      	str	r3, [r2, #4]
}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b004      	add	sp, #16
 80040d8:	bdb0      	pop	{r4, r5, r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	43480000 	.word	0x43480000

080040e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e6:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <HAL_MspInit+0x44>)
 80040e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <HAL_MspInit+0x44>)
 80040ec:	2101      	movs	r1, #1
 80040ee:	430a      	orrs	r2, r1
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <HAL_MspInit+0x44>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2201      	movs	r2, #1
 80040f8:	4013      	ands	r3, r2
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040fe:	4b09      	ldr	r3, [pc, #36]	; (8004124 <HAL_MspInit+0x44>)
 8004100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004102:	4b08      	ldr	r3, [pc, #32]	; (8004124 <HAL_MspInit+0x44>)
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	0549      	lsls	r1, r1, #21
 8004108:	430a      	orrs	r2, r1
 800410a:	63da      	str	r2, [r3, #60]	; 0x3c
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_MspInit+0x44>)
 800410e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	055b      	lsls	r3, r3, #21
 8004114:	4013      	ands	r3, r2
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b002      	add	sp, #8
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	40021000 	.word	0x40021000

08004128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b095      	sub	sp, #84	; 0x54
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004130:	233c      	movs	r3, #60	; 0x3c
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	0018      	movs	r0, r3
 8004136:	2314      	movs	r3, #20
 8004138:	001a      	movs	r2, r3
 800413a:	2100      	movs	r1, #0
 800413c:	f006 f962 	bl	800a404 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004140:	2414      	movs	r4, #20
 8004142:	193b      	adds	r3, r7, r4
 8004144:	0018      	movs	r0, r3
 8004146:	2328      	movs	r3, #40	; 0x28
 8004148:	001a      	movs	r2, r3
 800414a:	2100      	movs	r1, #0
 800414c:	f006 f95a 	bl	800a404 <memset>
  if(hadc->Instance==ADC1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a35      	ldr	r2, [pc, #212]	; (800422c <HAL_ADC_MspInit+0x104>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d164      	bne.n	8004224 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800415a:	193b      	adds	r3, r7, r4
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	01d2      	lsls	r2, r2, #7
 8004160:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004162:	193b      	adds	r3, r7, r4
 8004164:	2200      	movs	r2, #0
 8004166:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004168:	193b      	adds	r3, r7, r4
 800416a:	0018      	movs	r0, r3
 800416c:	f002 fec6 	bl	8006efc <HAL_RCCEx_PeriphCLKConfig>
 8004170:	1e03      	subs	r3, r0, #0
 8004172:	d001      	beq.n	8004178 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004174:	f7ff fea4 	bl	8003ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <HAL_ADC_MspInit+0x108>)
 800417a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800417c:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <HAL_ADC_MspInit+0x108>)
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	0349      	lsls	r1, r1, #13
 8004182:	430a      	orrs	r2, r1
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
 8004186:	4b2a      	ldr	r3, [pc, #168]	; (8004230 <HAL_ADC_MspInit+0x108>)
 8004188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	035b      	lsls	r3, r3, #13
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004194:	4b26      	ldr	r3, [pc, #152]	; (8004230 <HAL_ADC_MspInit+0x108>)
 8004196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004198:	4b25      	ldr	r3, [pc, #148]	; (8004230 <HAL_ADC_MspInit+0x108>)
 800419a:	2101      	movs	r1, #1
 800419c:	430a      	orrs	r2, r1
 800419e:	635a      	str	r2, [r3, #52]	; 0x34
 80041a0:	4b23      	ldr	r3, [pc, #140]	; (8004230 <HAL_ADC_MspInit+0x108>)
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	2201      	movs	r2, #1
 80041a6:	4013      	ands	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = FORCE_SENSOR_Pin|POTENTIOMETER_Pin|BATTERYDATA_Pin;
 80041ac:	213c      	movs	r1, #60	; 0x3c
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	220d      	movs	r2, #13
 80041b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041b4:	187b      	adds	r3, r7, r1
 80041b6:	2203      	movs	r2, #3
 80041b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	2200      	movs	r2, #0
 80041be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c0:	187a      	adds	r2, r7, r1
 80041c2:	23a0      	movs	r3, #160	; 0xa0
 80041c4:	05db      	lsls	r3, r3, #23
 80041c6:	0011      	movs	r1, r2
 80041c8:	0018      	movs	r0, r3
 80041ca:	f001 fe99 	bl	8005f00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80041ce:	4b19      	ldr	r3, [pc, #100]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 80041d0:	4a19      	ldr	r2, [pc, #100]	; (8004238 <HAL_ADC_MspInit+0x110>)
 80041d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80041d4:	4b17      	ldr	r3, [pc, #92]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 80041d6:	2205      	movs	r2, #5
 80041d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041da:	4b16      	ldr	r3, [pc, #88]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80041e0:	4b14      	ldr	r3, [pc, #80]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80041e6:	4b13      	ldr	r3, [pc, #76]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 80041e8:	2280      	movs	r2, #128	; 0x80
 80041ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 80041ee:	2280      	movs	r2, #128	; 0x80
 80041f0:	0052      	lsls	r2, r2, #1
 80041f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	00d2      	lsls	r2, r2, #3
 80041fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80041fc:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 80041fe:	2220      	movs	r2, #32
 8004200:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004202:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 8004204:	2200      	movs	r2, #0
 8004206:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 800420a:	0018      	movs	r0, r3
 800420c:	f001 fb5a 	bl	80058c4 <HAL_DMA_Init>
 8004210:	1e03      	subs	r3, r0, #0
 8004212:	d001      	beq.n	8004218 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8004214:	f7ff fe54 	bl	8003ec0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a06      	ldr	r2, [pc, #24]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 800421c:	651a      	str	r2, [r3, #80]	; 0x50
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_ADC_MspInit+0x10c>)
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b015      	add	sp, #84	; 0x54
 800422a:	bd90      	pop	{r4, r7, pc}
 800422c:	40012400 	.word	0x40012400
 8004230:	40021000 	.word	0x40021000
 8004234:	20000260 	.word	0x20000260
 8004238:	40020008 	.word	0x40020008

0800423c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b08b      	sub	sp, #44	; 0x2c
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004244:	2414      	movs	r4, #20
 8004246:	193b      	adds	r3, r7, r4
 8004248:	0018      	movs	r0, r3
 800424a:	2314      	movs	r3, #20
 800424c:	001a      	movs	r2, r3
 800424e:	2100      	movs	r1, #0
 8004250:	f006 f8d8 	bl	800a404 <memset>
  if(hi2c->Instance==I2C2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <HAL_I2C_MspInit+0x90>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d131      	bne.n	80042c2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800425e:	4b1c      	ldr	r3, [pc, #112]	; (80042d0 <HAL_I2C_MspInit+0x94>)
 8004260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_I2C_MspInit+0x94>)
 8004264:	2101      	movs	r1, #1
 8004266:	430a      	orrs	r2, r1
 8004268:	635a      	str	r2, [r3, #52]	; 0x34
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_I2C_MspInit+0x94>)
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	2201      	movs	r2, #1
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8004276:	193b      	adds	r3, r7, r4
 8004278:	22c0      	movs	r2, #192	; 0xc0
 800427a:	0152      	lsls	r2, r2, #5
 800427c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800427e:	0021      	movs	r1, r4
 8004280:	187b      	adds	r3, r7, r1
 8004282:	2212      	movs	r2, #18
 8004284:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004286:	187b      	adds	r3, r7, r1
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428c:	187b      	adds	r3, r7, r1
 800428e:	2200      	movs	r2, #0
 8004290:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8004292:	187b      	adds	r3, r7, r1
 8004294:	2206      	movs	r2, #6
 8004296:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004298:	187a      	adds	r2, r7, r1
 800429a:	23a0      	movs	r3, #160	; 0xa0
 800429c:	05db      	lsls	r3, r3, #23
 800429e:	0011      	movs	r1, r2
 80042a0:	0018      	movs	r0, r3
 80042a2:	f001 fe2d 	bl	8005f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_I2C_MspInit+0x94>)
 80042a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_I2C_MspInit+0x94>)
 80042ac:	2180      	movs	r1, #128	; 0x80
 80042ae:	03c9      	lsls	r1, r1, #15
 80042b0:	430a      	orrs	r2, r1
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_I2C_MspInit+0x94>)
 80042b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	03db      	lsls	r3, r3, #15
 80042bc:	4013      	ands	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b00b      	add	sp, #44	; 0x2c
 80042c8:	bd90      	pop	{r4, r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	40005800 	.word	0x40005800
 80042d0:	40021000 	.word	0x40021000

080042d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a09      	ldr	r2, [pc, #36]	; (8004308 <HAL_TIM_PWM_MspInit+0x34>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10b      	bne.n	80042fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_TIM_PWM_MspInit+0x38>)
 80042e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_TIM_PWM_MspInit+0x38>)
 80042ec:	2102      	movs	r1, #2
 80042ee:	430a      	orrs	r2, r1
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <HAL_TIM_PWM_MspInit+0x38>)
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	2202      	movs	r2, #2
 80042f8:	4013      	ands	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	b004      	add	sp, #16
 8004304:	bd80      	pop	{r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	40000400 	.word	0x40000400
 800430c:	40021000 	.word	0x40021000

08004310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <HAL_TIM_Base_MspInit+0x80>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d116      	bne.n	8004350 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <HAL_TIM_Base_MspInit+0x84>)
 8004324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004326:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <HAL_TIM_Base_MspInit+0x84>)
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	0209      	lsls	r1, r1, #8
 800432c:	430a      	orrs	r2, r1
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <HAL_TIM_Base_MspInit+0x84>)
 8004332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	4013      	ands	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800433e:	2200      	movs	r2, #0
 8004340:	2100      	movs	r1, #0
 8004342:	2013      	movs	r0, #19
 8004344:	f001 fa6c 	bl	8005820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004348:	2013      	movs	r0, #19
 800434a:	f001 fa7e 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800434e:	e01a      	b.n	8004386 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a10      	ldr	r2, [pc, #64]	; (8004398 <HAL_TIM_Base_MspInit+0x88>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d115      	bne.n	8004386 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800435a:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <HAL_TIM_Base_MspInit+0x84>)
 800435c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <HAL_TIM_Base_MspInit+0x84>)
 8004360:	2180      	movs	r1, #128	; 0x80
 8004362:	0289      	lsls	r1, r1, #10
 8004364:	430a      	orrs	r2, r1
 8004366:	641a      	str	r2, [r3, #64]	; 0x40
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_TIM_Base_MspInit+0x84>)
 800436a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	029b      	lsls	r3, r3, #10
 8004370:	4013      	ands	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004376:	2200      	movs	r2, #0
 8004378:	2100      	movs	r1, #0
 800437a:	2015      	movs	r0, #21
 800437c:	f001 fa50 	bl	8005820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004380:	2015      	movs	r0, #21
 8004382:	f001 fa62 	bl	800584a <HAL_NVIC_EnableIRQ>
}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	46bd      	mov	sp, r7
 800438a:	b004      	add	sp, #16
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	40002000 	.word	0x40002000
 8004394:	40021000 	.word	0x40021000
 8004398:	40014400 	.word	0x40014400

0800439c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a4:	240c      	movs	r4, #12
 80043a6:	193b      	adds	r3, r7, r4
 80043a8:	0018      	movs	r0, r3
 80043aa:	2314      	movs	r3, #20
 80043ac:	001a      	movs	r2, r3
 80043ae:	2100      	movs	r1, #0
 80043b0:	f006 f828 	bl	800a404 <memset>
  if(htim->Instance==TIM3)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a14      	ldr	r2, [pc, #80]	; (800440c <HAL_TIM_MspPostInit+0x70>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d122      	bne.n	8004404 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <HAL_TIM_MspPostInit+0x74>)
 80043c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_TIM_MspPostInit+0x74>)
 80043c4:	2101      	movs	r1, #1
 80043c6:	430a      	orrs	r2, r1
 80043c8:	635a      	str	r2, [r3, #52]	; 0x34
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <HAL_TIM_MspPostInit+0x74>)
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	2201      	movs	r2, #1
 80043d0:	4013      	ands	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = DRV8825_STP_Pin;
 80043d6:	0021      	movs	r1, r4
 80043d8:	187b      	adds	r3, r7, r1
 80043da:	2240      	movs	r2, #64	; 0x40
 80043dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	2202      	movs	r2, #2
 80043e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ea:	187b      	adds	r3, r7, r1
 80043ec:	2200      	movs	r2, #0
 80043ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80043f0:	187b      	adds	r3, r7, r1
 80043f2:	2201      	movs	r2, #1
 80043f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DRV8825_STP_GPIO_Port, &GPIO_InitStruct);
 80043f6:	187a      	adds	r2, r7, r1
 80043f8:	23a0      	movs	r3, #160	; 0xa0
 80043fa:	05db      	lsls	r3, r3, #23
 80043fc:	0011      	movs	r1, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	f001 fd7e 	bl	8005f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b009      	add	sp, #36	; 0x24
 800440a:	bd90      	pop	{r4, r7, pc}
 800440c:	40000400 	.word	0x40000400
 8004410:	40021000 	.word	0x40021000

08004414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b095      	sub	sp, #84	; 0x54
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441c:	233c      	movs	r3, #60	; 0x3c
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	0018      	movs	r0, r3
 8004422:	2314      	movs	r3, #20
 8004424:	001a      	movs	r2, r3
 8004426:	2100      	movs	r1, #0
 8004428:	f005 ffec 	bl	800a404 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800442c:	2414      	movs	r4, #20
 800442e:	193b      	adds	r3, r7, r4
 8004430:	0018      	movs	r0, r3
 8004432:	2328      	movs	r3, #40	; 0x28
 8004434:	001a      	movs	r2, r3
 8004436:	2100      	movs	r1, #0
 8004438:	f005 ffe4 	bl	800a404 <memset>
  if(huart->Instance==USART1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a26      	ldr	r2, [pc, #152]	; (80044dc <HAL_UART_MspInit+0xc8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d145      	bne.n	80044d2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004446:	193b      	adds	r3, r7, r4
 8004448:	2201      	movs	r2, #1
 800444a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800444c:	193b      	adds	r3, r7, r4
 800444e:	2200      	movs	r2, #0
 8004450:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004452:	193b      	adds	r3, r7, r4
 8004454:	0018      	movs	r0, r3
 8004456:	f002 fd51 	bl	8006efc <HAL_RCCEx_PeriphCLKConfig>
 800445a:	1e03      	subs	r3, r0, #0
 800445c:	d001      	beq.n	8004462 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800445e:	f7ff fd2f 	bl	8003ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004462:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <HAL_UART_MspInit+0xcc>)
 8004464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004466:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <HAL_UART_MspInit+0xcc>)
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	01c9      	lsls	r1, r1, #7
 800446c:	430a      	orrs	r2, r1
 800446e:	641a      	str	r2, [r3, #64]	; 0x40
 8004470:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <HAL_UART_MspInit+0xcc>)
 8004472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	01db      	lsls	r3, r3, #7
 8004478:	4013      	ands	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800447e:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <HAL_UART_MspInit+0xcc>)
 8004480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <HAL_UART_MspInit+0xcc>)
 8004484:	2102      	movs	r1, #2
 8004486:	430a      	orrs	r2, r1
 8004488:	635a      	str	r2, [r3, #52]	; 0x34
 800448a:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <HAL_UART_MspInit+0xcc>)
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	2202      	movs	r2, #2
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUETOOTH_UART_RX_Pin|BLUETOOTH_UART_TX_Pin;
 8004496:	213c      	movs	r1, #60	; 0x3c
 8004498:	187b      	adds	r3, r7, r1
 800449a:	22c0      	movs	r2, #192	; 0xc0
 800449c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	2202      	movs	r2, #2
 80044a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	187b      	adds	r3, r7, r1
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044aa:	187b      	adds	r3, r7, r1
 80044ac:	2200      	movs	r2, #0
 80044ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	2200      	movs	r2, #0
 80044b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b6:	187b      	adds	r3, r7, r1
 80044b8:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <HAL_UART_MspInit+0xd0>)
 80044ba:	0019      	movs	r1, r3
 80044bc:	0010      	movs	r0, r2
 80044be:	f001 fd1f 	bl	8005f00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044c2:	2200      	movs	r2, #0
 80044c4:	2100      	movs	r1, #0
 80044c6:	201b      	movs	r0, #27
 80044c8:	f001 f9aa 	bl	8005820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044cc:	201b      	movs	r0, #27
 80044ce:	f001 f9bc 	bl	800584a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b015      	add	sp, #84	; 0x54
 80044d8:	bd90      	pop	{r4, r7, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	40013800 	.word	0x40013800
 80044e0:	40021000 	.word	0x40021000
 80044e4:	50000400 	.word	0x50000400

080044e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044ec:	e7fe      	b.n	80044ec <NMI_Handler+0x4>

080044ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044f2:	e7fe      	b.n	80044f2 <HardFault_Handler+0x4>

080044f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800450c:	f000 f9dc 	bl	80048c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004510:	46c0      	nop			; (mov r8, r8)
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800451a:	2010      	movs	r0, #16
 800451c:	f001 fe72 	bl	8006204 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_0_Pin);
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	01db      	lsls	r3, r3, #7
 8004524:	0018      	movs	r0, r3
 8004526:	f001 fe6d 	bl	8006204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <DMA1_Channel1_IRQHandler+0x14>)
 8004536:	0018      	movs	r0, r3
 8004538:	f001 fba0 	bl	8005c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	20000260 	.word	0x20000260

08004548 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800454c:	4b03      	ldr	r3, [pc, #12]	; (800455c <TIM14_IRQHandler+0x14>)
 800454e:	0018      	movs	r0, r3
 8004550:	f002 ff52 	bl	80073f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	2000035c 	.word	0x2000035c

08004560 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <TIM16_IRQHandler+0x14>)
 8004566:	0018      	movs	r0, r3
 8004568:	f002 ff46 	bl	80073f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	200003a8 	.word	0x200003a8

08004578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <USART1_IRQHandler+0x14>)
 800457e:	0018      	movs	r0, r3
 8004580:	f003 fe7a 	bl	8008278 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	200003f4 	.word	0x200003f4

08004590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	return 1;
 8004594:	2301      	movs	r3, #1
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <_kill>:

int _kill(int pid, int sig)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80045a6:	f005 fef9 	bl	800a39c <__errno>
 80045aa:	0003      	movs	r3, r0
 80045ac:	2216      	movs	r2, #22
 80045ae:	601a      	str	r2, [r3, #0]
	return -1;
 80045b0:	2301      	movs	r3, #1
 80045b2:	425b      	negs	r3, r3
}
 80045b4:	0018      	movs	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b002      	add	sp, #8
 80045ba:	bd80      	pop	{r7, pc}

080045bc <_exit>:

void _exit (int status)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045c4:	2301      	movs	r3, #1
 80045c6:	425a      	negs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	0011      	movs	r1, r2
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7ff ffe5 	bl	800459c <_kill>
	while (1) {}		/* Make sure we hang here */
 80045d2:	e7fe      	b.n	80045d2 <_exit+0x16>

080045d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e00a      	b.n	80045fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80045e6:	e000      	b.n	80045ea <_read+0x16>
 80045e8:	bf00      	nop
 80045ea:	0001      	movs	r1, r0
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	60ba      	str	r2, [r7, #8]
 80045f2:	b2ca      	uxtb	r2, r1
 80045f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	3301      	adds	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	dbf0      	blt.n	80045e6 <_read+0x12>
	}

return len;
 8004604:	687b      	ldr	r3, [r7, #4]
}
 8004606:	0018      	movs	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	b006      	add	sp, #24
 800460c:	bd80      	pop	{r7, pc}

0800460e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e009      	b.n	8004634 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	60ba      	str	r2, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	0018      	movs	r0, r3
 800462a:	e000      	b.n	800462e <_write+0x20>
 800462c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	3301      	adds	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	dbf1      	blt.n	8004620 <_write+0x12>
	}
	return len;
 800463c:	687b      	ldr	r3, [r7, #4]
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b006      	add	sp, #24
 8004644:	bd80      	pop	{r7, pc}

08004646 <_close>:

int _close(int file)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
	return -1;
 800464e:	2301      	movs	r3, #1
 8004650:	425b      	negs	r3, r3
}
 8004652:	0018      	movs	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	b002      	add	sp, #8
 8004658:	bd80      	pop	{r7, pc}

0800465a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	0192      	lsls	r2, r2, #6
 800466a:	605a      	str	r2, [r3, #4]
	return 0;
 800466c:	2300      	movs	r3, #0
}
 800466e:	0018      	movs	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	b002      	add	sp, #8
 8004674:	bd80      	pop	{r7, pc}

08004676 <_isatty>:

int _isatty(int file)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
	return 1;
 800467e:	2301      	movs	r3, #1
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}

08004688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
	return 0;
 8004694:	2300      	movs	r3, #0
}
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b004      	add	sp, #16
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046a8:	4a14      	ldr	r2, [pc, #80]	; (80046fc <_sbrk+0x5c>)
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <_sbrk+0x60>)
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046b4:	4b13      	ldr	r3, [pc, #76]	; (8004704 <_sbrk+0x64>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046bc:	4b11      	ldr	r3, [pc, #68]	; (8004704 <_sbrk+0x64>)
 80046be:	4a12      	ldr	r2, [pc, #72]	; (8004708 <_sbrk+0x68>)
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <_sbrk+0x64>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	18d3      	adds	r3, r2, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d207      	bcs.n	80046e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046d0:	f005 fe64 	bl	800a39c <__errno>
 80046d4:	0003      	movs	r3, r0
 80046d6:	220c      	movs	r2, #12
 80046d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046da:	2301      	movs	r3, #1
 80046dc:	425b      	negs	r3, r3
 80046de:	e009      	b.n	80046f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <_sbrk+0x64>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046e6:	4b07      	ldr	r3, [pc, #28]	; (8004704 <_sbrk+0x64>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	18d2      	adds	r2, r2, r3
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <_sbrk+0x64>)
 80046f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80046f2:	68fb      	ldr	r3, [r7, #12]
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b006      	add	sp, #24
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20002000 	.word	0x20002000
 8004700:	00000400 	.word	0x00000400
 8004704:	200004f8 	.word	0x200004f8
 8004708:	20000510 	.word	0x20000510

0800470c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <new_wireless>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: huart is a UART channel
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Wireless object
Wireless *new_wireless(UART_HandleTypeDef *huart) {
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
	Wireless *wireless = (Wireless*) malloc(sizeof(Wireless));
 800471e:	2004      	movs	r0, #4
 8004720:	f005 fe66 	bl	800a3f0 <malloc>
 8004724:	0003      	movs	r3, r0
 8004726:	60fb      	str	r3, [r7, #12]
	wireless->uart = huart;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
	return wireless;
 800472e:	68fb      	ldr	r3, [r7, #12]
}
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b004      	add	sp, #16
 8004736:	bd80      	pop	{r7, pc}

08004738 <send_wireless_speed>:

// REQUIRES: wireless is a Wireless object
// and speed is the speed data
// MODIFIES: Nothing
// EFFECTS: Sends speed data over wireless
void send_wireless_speed(Wireless *wireless, float speed) {
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b08b      	sub	sp, #44	; 0x2c
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
	char string[30];
	sprintf((char *)string, "$SPEED_DATA,%f,\n", speed);
 8004742:	6838      	ldr	r0, [r7, #0]
 8004744:	f7fe fd1e 	bl	8003184 <__aeabi_f2d>
 8004748:	0002      	movs	r2, r0
 800474a:	000b      	movs	r3, r1
 800474c:	4907      	ldr	r1, [pc, #28]	; (800476c <send_wireless_speed+0x34>)
 800474e:	2408      	movs	r4, #8
 8004750:	1938      	adds	r0, r7, r4
 8004752:	f006 fdcd 	bl	800b2f0 <siprintf>
	send_wireless_string_30(wireless, string);
 8004756:	193a      	adds	r2, r7, r4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	0011      	movs	r1, r2
 800475c:	0018      	movs	r0, r3
 800475e:	f000 f807 	bl	8004770 <send_wireless_string_30>
}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	46bd      	mov	sp, r7
 8004766:	b00b      	add	sp, #44	; 0x2c
 8004768:	bd90      	pop	{r4, r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	0800ef5c 	.word	0x0800ef5c

08004770 <send_wireless_string_30>:

// REQUIRES: wireless is a Wireless object
// and string is an array of 30 characters.
// MODIFIES: Nothing
// EFFECTS: Sends the character array over wireless
void send_wireless_string_30(Wireless *wireless, char string[30]) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
	HAL_Delay(300);
 800477a:	2396      	movs	r3, #150	; 0x96
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	0018      	movs	r0, r3
 8004780:	f000 f8be 	bl	8004900 <HAL_Delay>
	HAL_UART_Transmit_IT(wireless->uart, (uint8_t *)string, 30);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	221e      	movs	r2, #30
 800478c:	0018      	movs	r0, r3
 800478e:	f003 fc6d 	bl	800806c <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8004792:	2064      	movs	r0, #100	; 0x64
 8004794:	f000 f8b4 	bl	8004900 <HAL_Delay>
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b002      	add	sp, #8
 800479e:	bd80      	pop	{r7, pc}

080047a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047a0:	480d      	ldr	r0, [pc, #52]	; (80047d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80047a4:	f7ff ffb2 	bl	800470c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047a8:	480c      	ldr	r0, [pc, #48]	; (80047dc <LoopForever+0x6>)
  ldr r1, =_edata
 80047aa:	490d      	ldr	r1, [pc, #52]	; (80047e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047ac:	4a0d      	ldr	r2, [pc, #52]	; (80047e4 <LoopForever+0xe>)
  movs r3, #0
 80047ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047b0:	e002      	b.n	80047b8 <LoopCopyDataInit>

080047b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047b6:	3304      	adds	r3, #4

080047b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047bc:	d3f9      	bcc.n	80047b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047c0:	4c0a      	ldr	r4, [pc, #40]	; (80047ec <LoopForever+0x16>)
  movs r3, #0
 80047c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047c4:	e001      	b.n	80047ca <LoopFillZerobss>

080047c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047c8:	3204      	adds	r2, #4

080047ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047cc:	d3fb      	bcc.n	80047c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80047ce:	f005 fdeb 	bl	800a3a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80047d2:	f7fe fff1 	bl	80037b8 <main>

080047d6 <LoopForever>:

LoopForever:
  b LoopForever
 80047d6:	e7fe      	b.n	80047d6 <LoopForever>
  ldr   r0, =_estack
 80047d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80047dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047e0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80047e4:	0800f6b8 	.word	0x0800f6b8
  ldr r2, =_sbss
 80047e8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80047ec:	20000510 	.word	0x20000510

080047f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047f0:	e7fe      	b.n	80047f0 <ADC1_IRQHandler>
	...

080047f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047fa:	1dfb      	adds	r3, r7, #7
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_Init+0x3c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_Init+0x3c>)
 8004806:	2180      	movs	r1, #128	; 0x80
 8004808:	0049      	lsls	r1, r1, #1
 800480a:	430a      	orrs	r2, r1
 800480c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800480e:	2003      	movs	r0, #3
 8004810:	f000 f810 	bl	8004834 <HAL_InitTick>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d003      	beq.n	8004820 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004818:	1dfb      	adds	r3, r7, #7
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e001      	b.n	8004824 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004820:	f7ff fc5e 	bl	80040e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004824:	1dfb      	adds	r3, r7, #7
 8004826:	781b      	ldrb	r3, [r3, #0]
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40022000 	.word	0x40022000

08004834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800483c:	230f      	movs	r3, #15
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <HAL_InitTick+0x88>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d02b      	beq.n	80048a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800484c:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <HAL_InitTick+0x8c>)
 800484e:	681c      	ldr	r4, [r3, #0]
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <HAL_InitTick+0x88>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	0019      	movs	r1, r3
 8004856:	23fa      	movs	r3, #250	; 0xfa
 8004858:	0098      	lsls	r0, r3, #2
 800485a:	f7fb fc79 	bl	8000150 <__udivsi3>
 800485e:	0003      	movs	r3, r0
 8004860:	0019      	movs	r1, r3
 8004862:	0020      	movs	r0, r4
 8004864:	f7fb fc74 	bl	8000150 <__udivsi3>
 8004868:	0003      	movs	r3, r0
 800486a:	0018      	movs	r0, r3
 800486c:	f001 f80d 	bl	800588a <HAL_SYSTICK_Config>
 8004870:	1e03      	subs	r3, r0, #0
 8004872:	d112      	bne.n	800489a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d80a      	bhi.n	8004890 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	2301      	movs	r3, #1
 800487e:	425b      	negs	r3, r3
 8004880:	2200      	movs	r2, #0
 8004882:	0018      	movs	r0, r3
 8004884:	f000 ffcc 	bl	8005820 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <HAL_InitTick+0x90>)
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e00d      	b.n	80048ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004890:	230f      	movs	r3, #15
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	e008      	b.n	80048ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800489a:	230f      	movs	r3, #15
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	e003      	b.n	80048ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80048a4:	230f      	movs	r3, #15
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	2201      	movs	r2, #1
 80048aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80048ac:	230f      	movs	r3, #15
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	781b      	ldrb	r3, [r3, #0]
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b005      	add	sp, #20
 80048b8:	bd90      	pop	{r4, r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	20000008 	.word	0x20000008
 80048c0:	20000000 	.word	0x20000000
 80048c4:	20000004 	.word	0x20000004

080048c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_IncTick+0x1c>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	001a      	movs	r2, r3
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_IncTick+0x20>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	18d2      	adds	r2, r2, r3
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_IncTick+0x20>)
 80048da:	601a      	str	r2, [r3, #0]
}
 80048dc:	46c0      	nop			; (mov r8, r8)
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	20000008 	.word	0x20000008
 80048e8:	200004fc 	.word	0x200004fc

080048ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  return uwTick;
 80048f0:	4b02      	ldr	r3, [pc, #8]	; (80048fc <HAL_GetTick+0x10>)
 80048f2:	681b      	ldr	r3, [r3, #0]
}
 80048f4:	0018      	movs	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	200004fc 	.word	0x200004fc

08004900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004908:	f7ff fff0 	bl	80048ec <HAL_GetTick>
 800490c:	0003      	movs	r3, r0
 800490e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3301      	adds	r3, #1
 8004918:	d005      	beq.n	8004926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <HAL_Delay+0x44>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	001a      	movs	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	189b      	adds	r3, r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	f7ff ffe0 	bl	80048ec <HAL_GetTick>
 800492c:	0002      	movs	r2, r0
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	429a      	cmp	r2, r3
 8004936:	d8f7      	bhi.n	8004928 <HAL_Delay+0x28>
  {
  }
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	46bd      	mov	sp, r7
 800493e:	b004      	add	sp, #16
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	20000008 	.word	0x20000008

08004948 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a05      	ldr	r2, [pc, #20]	; (800496c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004958:	401a      	ands	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	46bd      	mov	sp, r7
 8004966:	b002      	add	sp, #8
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	fe3fffff 	.word	0xfe3fffff

08004970 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	23e0      	movs	r3, #224	; 0xe0
 800497e:	045b      	lsls	r3, r3, #17
 8004980:	4013      	ands	r3, r2
}
 8004982:	0018      	movs	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	b002      	add	sp, #8
 8004988:	bd80      	pop	{r7, pc}

0800498a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	2104      	movs	r1, #4
 800499e:	400a      	ands	r2, r1
 80049a0:	2107      	movs	r1, #7
 80049a2:	4091      	lsls	r1, r2
 80049a4:	000a      	movs	r2, r1
 80049a6:	43d2      	mvns	r2, r2
 80049a8:	401a      	ands	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2104      	movs	r1, #4
 80049ae:	400b      	ands	r3, r1
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4099      	lsls	r1, r3
 80049b4:	000b      	movs	r3, r1
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	b004      	add	sp, #16
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	2104      	movs	r1, #4
 80049d6:	400a      	ands	r2, r1
 80049d8:	2107      	movs	r1, #7
 80049da:	4091      	lsls	r1, r2
 80049dc:	000a      	movs	r2, r1
 80049de:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2104      	movs	r1, #4
 80049e4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80049e6:	40da      	lsrs	r2, r3
 80049e8:	0013      	movs	r3, r2
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b002      	add	sp, #8
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	23c0      	movs	r3, #192	; 0xc0
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	4013      	ands	r3, r2
 8004a04:	d101      	bne.n	8004a0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b002      	add	sp, #8
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	211f      	movs	r1, #31
 8004a28:	400a      	ands	r2, r1
 8004a2a:	210f      	movs	r1, #15
 8004a2c:	4091      	lsls	r1, r2
 8004a2e:	000a      	movs	r2, r1
 8004a30:	43d2      	mvns	r2, r2
 8004a32:	401a      	ands	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	0e9b      	lsrs	r3, r3, #26
 8004a38:	210f      	movs	r1, #15
 8004a3a:	4019      	ands	r1, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	201f      	movs	r0, #31
 8004a40:	4003      	ands	r3, r0
 8004a42:	4099      	lsls	r1, r3
 8004a44:	000b      	movs	r3, r1
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b004      	add	sp, #16
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	035b      	lsls	r3, r3, #13
 8004a66:	0b5b      	lsrs	r3, r3, #13
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b002      	add	sp, #8
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	0352      	lsls	r2, r2, #13
 8004a88:	0b52      	lsrs	r2, r2, #13
 8004a8a:	43d2      	mvns	r2, r2
 8004a8c:	401a      	ands	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b002      	add	sp, #8
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	0212      	lsls	r2, r2, #8
 8004ab0:	43d2      	mvns	r2, r2
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	400b      	ands	r3, r1
 8004abc:	4904      	ldr	r1, [pc, #16]	; (8004ad0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004abe:	400b      	ands	r3, r1
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b004      	add	sp, #16
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	07ffff00 	.word	0x07ffff00

08004ad4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <LL_ADC_EnableInternalRegulator+0x24>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2280      	movs	r2, #128	; 0x80
 8004ae6:	0552      	lsls	r2, r2, #21
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	6fffffe8 	.word	0x6fffffe8

08004afc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	055b      	lsls	r3, r3, #21
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	2380      	movs	r3, #128	; 0x80
 8004b10:	055b      	lsls	r3, r3, #21
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d101      	bne.n	8004b1a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <LL_ADC_Enable+0x20>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	2201      	movs	r2, #1
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b3c:	46c0      	nop			; (mov r8, r8)
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b002      	add	sp, #8
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	7fffffe8 	.word	0x7fffffe8

08004b48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <LL_ADC_Disable+0x20>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	2202      	movs	r2, #2
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	7fffffe8 	.word	0x7fffffe8

08004b6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <LL_ADC_IsEnabled+0x18>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <LL_ADC_IsEnabled+0x1a>
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b002      	add	sp, #8
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <LL_ADC_REG_StartConversion+0x20>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	7fffffe8 	.word	0x7fffffe8

08004bb4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d101      	bne.n	8004bcc <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b002      	add	sp, #8
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004be0:	231f      	movs	r3, #31
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e17f      	b.n	8004efe <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7ff fa8d 	bl	8004128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2254      	movs	r2, #84	; 0x54
 8004c18:	2100      	movs	r1, #0
 8004c1a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f7ff ff6b 	bl	8004afc <LL_ADC_IsInternalRegulatorEnabled>
 8004c26:	1e03      	subs	r3, r0, #0
 8004c28:	d115      	bne.n	8004c56 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f7ff ff50 	bl	8004ad4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c34:	4bb4      	ldr	r3, [pc, #720]	; (8004f08 <HAL_ADC_Init+0x330>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	49b4      	ldr	r1, [pc, #720]	; (8004f0c <HAL_ADC_Init+0x334>)
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7fb fa88 	bl	8000150 <__udivsi3>
 8004c40:	0003      	movs	r3, r0
 8004c42:	3301      	adds	r3, #1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c48:	e002      	b.n	8004c50 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f9      	bne.n	8004c4a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f7ff ff4e 	bl	8004afc <LL_ADC_IsInternalRegulatorEnabled>
 8004c60:	1e03      	subs	r3, r0, #0
 8004c62:	d10f      	bne.n	8004c84 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	2210      	movs	r2, #16
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	2201      	movs	r2, #1
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c7c:	231f      	movs	r3, #31
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f7ff ff93 	bl	8004bb4 <LL_ADC_REG_IsConversionOngoing>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c96:	2210      	movs	r2, #16
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d000      	beq.n	8004c9e <HAL_ADC_Init+0xc6>
 8004c9c:	e122      	b.n	8004ee4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d000      	beq.n	8004ca6 <HAL_ADC_Init+0xce>
 8004ca4:	e11e      	b.n	8004ee4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	4a99      	ldr	r2, [pc, #612]	; (8004f10 <HAL_ADC_Init+0x338>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	2202      	movs	r2, #2
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7ff ff56 	bl	8004b6c <LL_ADC_IsEnabled>
 8004cc0:	1e03      	subs	r3, r0, #0
 8004cc2:	d000      	beq.n	8004cc6 <HAL_ADC_Init+0xee>
 8004cc4:	e0ad      	b.n	8004e22 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	7e1b      	ldrb	r3, [r3, #24]
 8004cce:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004cd0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	7e5b      	ldrb	r3, [r3, #25]
 8004cd6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004cd8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	7e9b      	ldrb	r3, [r3, #26]
 8004cde:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004ce0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_ADC_Init+0x118>
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	015b      	lsls	r3, r3, #5
 8004cee:	e000      	b.n	8004cf2 <HAL_ADC_Init+0x11a>
 8004cf0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004cf2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004cf8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da04      	bge.n	8004d0c <HAL_ADC_Init+0x134>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	085b      	lsrs	r3, r3, #1
 8004d0a:	e001      	b.n	8004d10 <HAL_ADC_Init+0x138>
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004d10:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	212c      	movs	r1, #44	; 0x2c
 8004d16:	5c5b      	ldrb	r3, [r3, r1]
 8004d18:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004d1a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	5c9b      	ldrb	r3, [r3, r2]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d115      	bne.n	8004d58 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	7e9b      	ldrb	r3, [r3, #26]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2280      	movs	r2, #128	; 0x80
 8004d38:	0252      	lsls	r2, r2, #9
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	e00b      	b.n	8004d58 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	2220      	movs	r2, #32
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	2201      	movs	r2, #1
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d64:	23e0      	movs	r3, #224	; 0xe0
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a65      	ldr	r2, [pc, #404]	; (8004f14 <HAL_ADC_Init+0x33c>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	0019      	movs	r1, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	0f9b      	lsrs	r3, r3, #30
 8004d92:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	223c      	movs	r2, #60	; 0x3c
 8004da4:	5c9b      	ldrb	r3, [r3, r2]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d111      	bne.n	8004dce <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	0f9b      	lsrs	r3, r3, #30
 8004db0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004db6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004dbc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004dc2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	2201      	movs	r2, #1
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	4a50      	ldr	r2, [pc, #320]	; (8004f18 <HAL_ADC_Init+0x340>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	0019      	movs	r1, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	23c0      	movs	r3, #192	; 0xc0
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d018      	beq.n	8004e22 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	05db      	lsls	r3, r3, #23
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d012      	beq.n	8004e22 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	061b      	lsls	r3, r3, #24
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d00c      	beq.n	8004e22 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004e08:	4b44      	ldr	r3, [pc, #272]	; (8004f1c <HAL_ADC_Init+0x344>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a44      	ldr	r2, [pc, #272]	; (8004f20 <HAL_ADC_Init+0x348>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	0019      	movs	r1, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	23f0      	movs	r3, #240	; 0xf0
 8004e18:	039b      	lsls	r3, r3, #14
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <HAL_ADC_Init+0x344>)
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	f7ff fdac 	bl	800498a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	493a      	ldr	r1, [pc, #232]	; (8004f24 <HAL_ADC_Init+0x34c>)
 8004e3c:	001a      	movs	r2, r3
 8004e3e:	f7ff fda4 	bl	800498a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2110      	movs	r1, #16
 8004e56:	4249      	negs	r1, r1
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e5c:	e018      	b.n	8004e90 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	039b      	lsls	r3, r3, #14
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d112      	bne.n	8004e90 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	221c      	movs	r2, #28
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	4252      	negs	r2, r2
 8004e80:	409a      	lsls	r2, r3
 8004e82:	0011      	movs	r1, r2
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2100      	movs	r1, #0
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7ff fd94 	bl	80049c4 <LL_ADC_GetSamplingTimeCommonChannels>
 8004e9c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d10b      	bne.n	8004ebe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	4393      	bics	r3, r2
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004ebc:	e01c      	b.n	8004ef8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	2212      	movs	r2, #18
 8004ec4:	4393      	bics	r3, r2
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004eda:	231f      	movs	r3, #31
 8004edc:	18fb      	adds	r3, r7, r3
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004ee2:	e009      	b.n	8004ef8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	2210      	movs	r2, #16
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004ef0:	231f      	movs	r3, #31
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004ef8:	231f      	movs	r3, #31
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	781b      	ldrb	r3, [r3, #0]
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b008      	add	sp, #32
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	20000000 	.word	0x20000000
 8004f0c:	00030d40 	.word	0x00030d40
 8004f10:	fffffefd 	.word	0xfffffefd
 8004f14:	fffe0201 	.word	0xfffe0201
 8004f18:	1ffffc02 	.word	0x1ffffc02
 8004f1c:	40012708 	.word	0x40012708
 8004f20:	ffc3ffff 	.word	0xffc3ffff
 8004f24:	07ffff04 	.word	0x07ffff04

08004f28 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004f28:	b5b0      	push	{r4, r5, r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff fe3b 	bl	8004bb4 <LL_ADC_REG_IsConversionOngoing>
 8004f3e:	1e03      	subs	r3, r0, #0
 8004f40:	d16c      	bne.n	800501c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2254      	movs	r2, #84	; 0x54
 8004f46:	5c9b      	ldrb	r3, [r3, r2]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_ADC_Start_DMA+0x28>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e06c      	b.n	800502a <HAL_ADC_Start_DMA+0x102>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2254      	movs	r2, #84	; 0x54
 8004f54:	2101      	movs	r1, #1
 8004f56:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	4013      	ands	r3, r2
 8004f62:	d113      	bne.n	8004f8c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f7ff fdff 	bl	8004b6c <LL_ADC_IsEnabled>
 8004f6e:	1e03      	subs	r3, r0, #0
 8004f70:	d004      	beq.n	8004f7c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7ff fde6 	bl	8004b48 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2101      	movs	r1, #1
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004f8c:	2517      	movs	r5, #23
 8004f8e:	197c      	adds	r4, r7, r5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 fa46 	bl	8005424 <ADC_Enable>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004f9c:	002c      	movs	r4, r5
 8004f9e:	193b      	adds	r3, r7, r4
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d13e      	bne.n	8005024 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004faa:	4a22      	ldr	r2, [pc, #136]	; (8005034 <HAL_ADC_Start_DMA+0x10c>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	2280      	movs	r2, #128	; 0x80
 8004fb0:	0052      	lsls	r2, r2, #1
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc2:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <HAL_ADC_Start_DMA+0x110>)
 8004fc4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fca:	4a1c      	ldr	r2, [pc, #112]	; (800503c <HAL_ADC_Start_DMA+0x114>)
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd2:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <HAL_ADC_Start_DMA+0x118>)
 8004fd4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	221c      	movs	r2, #28
 8004fdc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2254      	movs	r2, #84	; 0x54
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2110      	movs	r1, #16
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3340      	adds	r3, #64	; 0x40
 8005000:	0019      	movs	r1, r3
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	193c      	adds	r4, r7, r4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f000 fce6 	bl	80059d8 <HAL_DMA_Start_IT>
 800500c:	0003      	movs	r3, r0
 800500e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	0018      	movs	r0, r3
 8005016:	f7ff fdbb 	bl	8004b90 <LL_ADC_REG_StartConversion>
 800501a:	e003      	b.n	8005024 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800501c:	2317      	movs	r3, #23
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	2202      	movs	r2, #2
 8005022:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005024:	2317      	movs	r3, #23
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	781b      	ldrb	r3, [r3, #0]
}
 800502a:	0018      	movs	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	b006      	add	sp, #24
 8005030:	bdb0      	pop	{r4, r5, r7, pc}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	fffff0fe 	.word	0xfffff0fe
 8005038:	08005531 	.word	0x08005531
 800503c:	080055f9 	.word	0x080055f9
 8005040:	08005617 	.word	0x08005617

08005044 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	b002      	add	sp, #8
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b002      	add	sp, #8
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800506c:	46c0      	nop			; (mov r8, r8)
 800506e:	46bd      	mov	sp, r7
 8005070:	b002      	add	sp, #8
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800507e:	2317      	movs	r3, #23
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2254      	movs	r2, #84	; 0x54
 800508e:	5c9b      	ldrb	r3, [r3, r2]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_ADC_ConfigChannel+0x24>
 8005094:	2302      	movs	r3, #2
 8005096:	e1c0      	b.n	800541a <HAL_ADC_ConfigChannel+0x3a6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2254      	movs	r2, #84	; 0x54
 800509c:	2101      	movs	r1, #1
 800509e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7ff fd85 	bl	8004bb4 <LL_ADC_REG_IsConversionOngoing>
 80050aa:	1e03      	subs	r3, r0, #0
 80050ac:	d000      	beq.n	80050b0 <HAL_ADC_ConfigChannel+0x3c>
 80050ae:	e1a3      	b.n	80053f8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d100      	bne.n	80050ba <HAL_ADC_ConfigChannel+0x46>
 80050b8:	e143      	b.n	8005342 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	061b      	lsls	r3, r3, #24
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d004      	beq.n	80050d0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80050ca:	4ac1      	ldr	r2, [pc, #772]	; (80053d0 <HAL_ADC_ConfigChannel+0x35c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d108      	bne.n	80050e2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	0019      	movs	r1, r3
 80050da:	0010      	movs	r0, r2
 80050dc:	f7ff fcba 	bl	8004a54 <LL_ADC_REG_SetSequencerChAdd>
 80050e0:	e0c9      	b.n	8005276 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	211f      	movs	r1, #31
 80050ec:	400b      	ands	r3, r1
 80050ee:	210f      	movs	r1, #15
 80050f0:	4099      	lsls	r1, r3
 80050f2:	000b      	movs	r3, r1
 80050f4:	43db      	mvns	r3, r3
 80050f6:	4013      	ands	r3, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	035b      	lsls	r3, r3, #13
 8005100:	0b5b      	lsrs	r3, r3, #13
 8005102:	d105      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x9c>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	0e9b      	lsrs	r3, r3, #26
 800510a:	221f      	movs	r2, #31
 800510c:	4013      	ands	r3, r2
 800510e:	e098      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2201      	movs	r2, #1
 8005116:	4013      	ands	r3, r2
 8005118:	d000      	beq.n	800511c <HAL_ADC_ConfigChannel+0xa8>
 800511a:	e091      	b.n	8005240 <HAL_ADC_ConfigChannel+0x1cc>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2202      	movs	r2, #2
 8005122:	4013      	ands	r3, r2
 8005124:	d000      	beq.n	8005128 <HAL_ADC_ConfigChannel+0xb4>
 8005126:	e089      	b.n	800523c <HAL_ADC_ConfigChannel+0x1c8>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2204      	movs	r2, #4
 800512e:	4013      	ands	r3, r2
 8005130:	d000      	beq.n	8005134 <HAL_ADC_ConfigChannel+0xc0>
 8005132:	e081      	b.n	8005238 <HAL_ADC_ConfigChannel+0x1c4>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2208      	movs	r2, #8
 800513a:	4013      	ands	r3, r2
 800513c:	d000      	beq.n	8005140 <HAL_ADC_ConfigChannel+0xcc>
 800513e:	e079      	b.n	8005234 <HAL_ADC_ConfigChannel+0x1c0>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2210      	movs	r2, #16
 8005146:	4013      	ands	r3, r2
 8005148:	d000      	beq.n	800514c <HAL_ADC_ConfigChannel+0xd8>
 800514a:	e071      	b.n	8005230 <HAL_ADC_ConfigChannel+0x1bc>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2220      	movs	r2, #32
 8005152:	4013      	ands	r3, r2
 8005154:	d000      	beq.n	8005158 <HAL_ADC_ConfigChannel+0xe4>
 8005156:	e069      	b.n	800522c <HAL_ADC_ConfigChannel+0x1b8>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2240      	movs	r2, #64	; 0x40
 800515e:	4013      	ands	r3, r2
 8005160:	d000      	beq.n	8005164 <HAL_ADC_ConfigChannel+0xf0>
 8005162:	e061      	b.n	8005228 <HAL_ADC_ConfigChannel+0x1b4>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2280      	movs	r2, #128	; 0x80
 800516a:	4013      	ands	r3, r2
 800516c:	d000      	beq.n	8005170 <HAL_ADC_ConfigChannel+0xfc>
 800516e:	e059      	b.n	8005224 <HAL_ADC_ConfigChannel+0x1b0>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	4013      	ands	r3, r2
 800517a:	d151      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x1ac>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4013      	ands	r3, r2
 8005186:	d149      	bne.n	800521c <HAL_ADC_ConfigChannel+0x1a8>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4013      	ands	r3, r2
 8005192:	d141      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x1a4>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	4013      	ands	r3, r2
 800519e:	d139      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x1a0>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	015b      	lsls	r3, r3, #5
 80051a8:	4013      	ands	r3, r2
 80051aa:	d131      	bne.n	8005210 <HAL_ADC_ConfigChannel+0x19c>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	019b      	lsls	r3, r3, #6
 80051b4:	4013      	ands	r3, r2
 80051b6:	d129      	bne.n	800520c <HAL_ADC_ConfigChannel+0x198>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	01db      	lsls	r3, r3, #7
 80051c0:	4013      	ands	r3, r2
 80051c2:	d121      	bne.n	8005208 <HAL_ADC_ConfigChannel+0x194>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	021b      	lsls	r3, r3, #8
 80051cc:	4013      	ands	r3, r2
 80051ce:	d119      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x190>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	025b      	lsls	r3, r3, #9
 80051d8:	4013      	ands	r3, r2
 80051da:	d111      	bne.n	8005200 <HAL_ADC_ConfigChannel+0x18c>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	029b      	lsls	r3, r3, #10
 80051e4:	4013      	ands	r3, r2
 80051e6:	d109      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x188>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	02db      	lsls	r3, r3, #11
 80051f0:	4013      	ands	r3, r2
 80051f2:	d001      	beq.n	80051f8 <HAL_ADC_ConfigChannel+0x184>
 80051f4:	2312      	movs	r3, #18
 80051f6:	e024      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 80051f8:	2300      	movs	r3, #0
 80051fa:	e022      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 80051fc:	2311      	movs	r3, #17
 80051fe:	e020      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005200:	2310      	movs	r3, #16
 8005202:	e01e      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005204:	230f      	movs	r3, #15
 8005206:	e01c      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005208:	230e      	movs	r3, #14
 800520a:	e01a      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 800520c:	230d      	movs	r3, #13
 800520e:	e018      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005210:	230c      	movs	r3, #12
 8005212:	e016      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005214:	230b      	movs	r3, #11
 8005216:	e014      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005218:	230a      	movs	r3, #10
 800521a:	e012      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 800521c:	2309      	movs	r3, #9
 800521e:	e010      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005220:	2308      	movs	r3, #8
 8005222:	e00e      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005224:	2307      	movs	r3, #7
 8005226:	e00c      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005228:	2306      	movs	r3, #6
 800522a:	e00a      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 800522c:	2305      	movs	r3, #5
 800522e:	e008      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005230:	2304      	movs	r3, #4
 8005232:	e006      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005234:	2303      	movs	r3, #3
 8005236:	e004      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005238:	2302      	movs	r3, #2
 800523a:	e002      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_ADC_ConfigChannel+0x1ce>
 8005240:	2300      	movs	r3, #0
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	6852      	ldr	r2, [r2, #4]
 8005246:	201f      	movs	r0, #31
 8005248:	4002      	ands	r2, r0
 800524a:	4093      	lsls	r3, r2
 800524c:	000a      	movs	r2, r1
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	429a      	cmp	r2, r3
 8005262:	d808      	bhi.n	8005276 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6859      	ldr	r1, [r3, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	001a      	movs	r2, r3
 8005272:	f7ff fbcf 	bl	8004a14 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6819      	ldr	r1, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	001a      	movs	r2, r3
 8005284:	f7ff fc0a 	bl	8004a9c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	db00      	blt.n	8005292 <HAL_ADC_ConfigChannel+0x21e>
 8005290:	e0bc      	b.n	800540c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005292:	4b50      	ldr	r3, [pc, #320]	; (80053d4 <HAL_ADC_ConfigChannel+0x360>)
 8005294:	0018      	movs	r0, r3
 8005296:	f7ff fb6b 	bl	8004970 <LL_ADC_GetCommonPathInternalCh>
 800529a:	0003      	movs	r3, r0
 800529c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a4d      	ldr	r2, [pc, #308]	; (80053d8 <HAL_ADC_ConfigChannel+0x364>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d122      	bne.n	80052ee <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	2380      	movs	r3, #128	; 0x80
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80052b0:	d11d      	bne.n	80052ee <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2280      	movs	r2, #128	; 0x80
 80052b6:	0412      	lsls	r2, r2, #16
 80052b8:	4313      	orrs	r3, r2
 80052ba:	4a46      	ldr	r2, [pc, #280]	; (80053d4 <HAL_ADC_ConfigChannel+0x360>)
 80052bc:	0019      	movs	r1, r3
 80052be:	0010      	movs	r0, r2
 80052c0:	f7ff fb42 	bl	8004948 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052c4:	4b45      	ldr	r3, [pc, #276]	; (80053dc <HAL_ADC_ConfigChannel+0x368>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4945      	ldr	r1, [pc, #276]	; (80053e0 <HAL_ADC_ConfigChannel+0x36c>)
 80052ca:	0018      	movs	r0, r3
 80052cc:	f7fa ff40 	bl	8000150 <__udivsi3>
 80052d0:	0003      	movs	r3, r0
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	0013      	movs	r3, r2
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	189b      	adds	r3, r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052de:	e002      	b.n	80052e6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1f9      	bne.n	80052e0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80052ec:	e08e      	b.n	800540c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a3c      	ldr	r2, [pc, #240]	; (80053e4 <HAL_ADC_ConfigChannel+0x370>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d10e      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	045b      	lsls	r3, r3, #17
 80052fe:	4013      	ands	r3, r2
 8005300:	d109      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2280      	movs	r2, #128	; 0x80
 8005306:	0452      	lsls	r2, r2, #17
 8005308:	4313      	orrs	r3, r2
 800530a:	4a32      	ldr	r2, [pc, #200]	; (80053d4 <HAL_ADC_ConfigChannel+0x360>)
 800530c:	0019      	movs	r1, r3
 800530e:	0010      	movs	r0, r2
 8005310:	f7ff fb1a 	bl	8004948 <LL_ADC_SetCommonPathInternalCh>
 8005314:	e07a      	b.n	800540c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a33      	ldr	r2, [pc, #204]	; (80053e8 <HAL_ADC_ConfigChannel+0x374>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d000      	beq.n	8005322 <HAL_ADC_ConfigChannel+0x2ae>
 8005320:	e074      	b.n	800540c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	03db      	lsls	r3, r3, #15
 8005328:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800532a:	d000      	beq.n	800532e <HAL_ADC_ConfigChannel+0x2ba>
 800532c:	e06e      	b.n	800540c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2280      	movs	r2, #128	; 0x80
 8005332:	03d2      	lsls	r2, r2, #15
 8005334:	4313      	orrs	r3, r2
 8005336:	4a27      	ldr	r2, [pc, #156]	; (80053d4 <HAL_ADC_ConfigChannel+0x360>)
 8005338:	0019      	movs	r1, r3
 800533a:	0010      	movs	r0, r2
 800533c:	f7ff fb04 	bl	8004948 <LL_ADC_SetCommonPathInternalCh>
 8005340:	e064      	b.n	800540c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	429a      	cmp	r2, r3
 800534c:	d004      	beq.n	8005358 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005352:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <HAL_ADC_ConfigChannel+0x35c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d107      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	0019      	movs	r1, r3
 8005362:	0010      	movs	r0, r2
 8005364:	f7ff fb87 	bl	8004a76 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	da4d      	bge.n	800540c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005370:	4b18      	ldr	r3, [pc, #96]	; (80053d4 <HAL_ADC_ConfigChannel+0x360>)
 8005372:	0018      	movs	r0, r3
 8005374:	f7ff fafc 	bl	8004970 <LL_ADC_GetCommonPathInternalCh>
 8005378:	0003      	movs	r3, r0
 800537a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <HAL_ADC_ConfigChannel+0x364>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4a18      	ldr	r2, [pc, #96]	; (80053ec <HAL_ADC_ConfigChannel+0x378>)
 800538a:	4013      	ands	r3, r2
 800538c:	4a11      	ldr	r2, [pc, #68]	; (80053d4 <HAL_ADC_ConfigChannel+0x360>)
 800538e:	0019      	movs	r1, r3
 8005390:	0010      	movs	r0, r2
 8005392:	f7ff fad9 	bl	8004948 <LL_ADC_SetCommonPathInternalCh>
 8005396:	e039      	b.n	800540c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a11      	ldr	r2, [pc, #68]	; (80053e4 <HAL_ADC_ConfigChannel+0x370>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d108      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <HAL_ADC_ConfigChannel+0x37c>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	4a0a      	ldr	r2, [pc, #40]	; (80053d4 <HAL_ADC_ConfigChannel+0x360>)
 80053aa:	0019      	movs	r1, r3
 80053ac:	0010      	movs	r0, r2
 80053ae:	f7ff facb 	bl	8004948 <LL_ADC_SetCommonPathInternalCh>
 80053b2:	e02b      	b.n	800540c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a0b      	ldr	r2, [pc, #44]	; (80053e8 <HAL_ADC_ConfigChannel+0x374>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d126      	bne.n	800540c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <HAL_ADC_ConfigChannel+0x380>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	4a03      	ldr	r2, [pc, #12]	; (80053d4 <HAL_ADC_ConfigChannel+0x360>)
 80053c6:	0019      	movs	r1, r3
 80053c8:	0010      	movs	r0, r2
 80053ca:	f7ff fabd 	bl	8004948 <LL_ADC_SetCommonPathInternalCh>
 80053ce:	e01d      	b.n	800540c <HAL_ADC_ConfigChannel+0x398>
 80053d0:	80000004 	.word	0x80000004
 80053d4:	40012708 	.word	0x40012708
 80053d8:	b0001000 	.word	0xb0001000
 80053dc:	20000000 	.word	0x20000000
 80053e0:	00030d40 	.word	0x00030d40
 80053e4:	b8004000 	.word	0xb8004000
 80053e8:	b4002000 	.word	0xb4002000
 80053ec:	ff7fffff 	.word	0xff7fffff
 80053f0:	feffffff 	.word	0xfeffffff
 80053f4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fc:	2220      	movs	r2, #32
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005404:	2317      	movs	r3, #23
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2254      	movs	r2, #84	; 0x54
 8005410:	2100      	movs	r1, #0
 8005412:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005414:	2317      	movs	r3, #23
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	781b      	ldrb	r3, [r3, #0]
}
 800541a:	0018      	movs	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	b006      	add	sp, #24
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)

08005424 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800542c:	2300      	movs	r3, #0
 800542e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	0018      	movs	r0, r3
 8005436:	f7ff fb99 	bl	8004b6c <LL_ADC_IsEnabled>
 800543a:	1e03      	subs	r3, r0, #0
 800543c:	d000      	beq.n	8005440 <ADC_Enable+0x1c>
 800543e:	e069      	b.n	8005514 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	4a36      	ldr	r2, [pc, #216]	; (8005520 <ADC_Enable+0xfc>)
 8005448:	4013      	ands	r3, r2
 800544a:	d00d      	beq.n	8005468 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005450:	2210      	movs	r2, #16
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545c:	2201      	movs	r2, #1
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e056      	b.n	8005516 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	0018      	movs	r0, r3
 800546e:	f7ff fb59 	bl	8004b24 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8005472:	4b2c      	ldr	r3, [pc, #176]	; (8005524 <ADC_Enable+0x100>)
 8005474:	0018      	movs	r0, r3
 8005476:	f7ff fa7b 	bl	8004970 <LL_ADC_GetCommonPathInternalCh>
 800547a:	0002      	movs	r2, r0
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	4013      	ands	r3, r2
 8005482:	d00f      	beq.n	80054a4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005484:	4b28      	ldr	r3, [pc, #160]	; (8005528 <ADC_Enable+0x104>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4928      	ldr	r1, [pc, #160]	; (800552c <ADC_Enable+0x108>)
 800548a:	0018      	movs	r0, r3
 800548c:	f7fa fe60 	bl	8000150 <__udivsi3>
 8005490:	0003      	movs	r3, r0
 8005492:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005494:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005496:	e002      	b.n	800549e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	3b01      	subs	r3, #1
 800549c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f9      	bne.n	8005498 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	7e5b      	ldrb	r3, [r3, #25]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d033      	beq.n	8005514 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80054ac:	f7ff fa1e 	bl	80048ec <HAL_GetTick>
 80054b0:	0003      	movs	r3, r0
 80054b2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054b4:	e027      	b.n	8005506 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f7ff fb56 	bl	8004b6c <LL_ADC_IsEnabled>
 80054c0:	1e03      	subs	r3, r0, #0
 80054c2:	d104      	bne.n	80054ce <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7ff fb2b 	bl	8004b24 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054ce:	f7ff fa0d 	bl	80048ec <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d914      	bls.n	8005506 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d00d      	beq.n	8005506 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ee:	2210      	movs	r2, #16
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fa:	2201      	movs	r2, #1
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e007      	b.n	8005516 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2201      	movs	r2, #1
 800550e:	4013      	ands	r3, r2
 8005510:	2b01      	cmp	r3, #1
 8005512:	d1d0      	bne.n	80054b6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	0018      	movs	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	b004      	add	sp, #16
 800551c:	bd80      	pop	{r7, pc}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	80000017 	.word	0x80000017
 8005524:	40012708 	.word	0x40012708
 8005528:	20000000 	.word	0x20000000
 800552c:	00030d40 	.word	0x00030d40

08005530 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005542:	2250      	movs	r2, #80	; 0x50
 8005544:	4013      	ands	r3, r2
 8005546:	d141      	bne.n	80055cc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554c:	2280      	movs	r2, #128	; 0x80
 800554e:	0092      	lsls	r2, r2, #2
 8005550:	431a      	orrs	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	0018      	movs	r0, r3
 800555c:	f7ff fa49 	bl	80049f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005560:	1e03      	subs	r3, r0, #0
 8005562:	d02e      	beq.n	80055c2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	7e9b      	ldrb	r3, [r3, #26]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d12a      	bne.n	80055c2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2208      	movs	r2, #8
 8005574:	4013      	ands	r3, r2
 8005576:	2b08      	cmp	r3, #8
 8005578:	d123      	bne.n	80055c2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	0018      	movs	r0, r3
 8005580:	f7ff fb18 	bl	8004bb4 <LL_ADC_REG_IsConversionOngoing>
 8005584:	1e03      	subs	r3, r0, #0
 8005586:	d110      	bne.n	80055aa <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	210c      	movs	r1, #12
 8005594:	438a      	bics	r2, r1
 8005596:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <ADC_DMAConvCplt+0xc4>)
 800559e:	4013      	ands	r3, r2
 80055a0:	2201      	movs	r2, #1
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	659a      	str	r2, [r3, #88]	; 0x58
 80055a8:	e00b      	b.n	80055c2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ae:	2220      	movs	r2, #32
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ba:	2201      	movs	r2, #1
 80055bc:	431a      	orrs	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	0018      	movs	r0, r3
 80055c6:	f7ff fd3d 	bl	8005044 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055ca:	e00f      	b.n	80055ec <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d0:	2210      	movs	r2, #16
 80055d2:	4013      	ands	r3, r2
 80055d4:	d004      	beq.n	80055e0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	0018      	movs	r0, r3
 80055da:	f7ff fd43 	bl	8005064 <HAL_ADC_ErrorCallback>
}
 80055de:	e005      	b.n	80055ec <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	0010      	movs	r0, r2
 80055ea:	4798      	blx	r3
}
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b004      	add	sp, #16
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	fffffefe 	.word	0xfffffefe

080055f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	0018      	movs	r0, r3
 800560a:	f7ff fd23 	bl	8005054 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	46bd      	mov	sp, r7
 8005612:	b004      	add	sp, #16
 8005614:	bd80      	pop	{r7, pc}

08005616 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	2240      	movs	r2, #64	; 0x40
 800562a:	431a      	orrs	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005634:	2204      	movs	r2, #4
 8005636:	431a      	orrs	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	0018      	movs	r0, r3
 8005640:	f7ff fd10 	bl	8005064 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005644:	46c0      	nop			; (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b004      	add	sp, #16
 800564a:	bd80      	pop	{r7, pc}

0800564c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	0002      	movs	r2, r0
 8005654:	1dfb      	adds	r3, r7, #7
 8005656:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005658:	1dfb      	adds	r3, r7, #7
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b7f      	cmp	r3, #127	; 0x7f
 800565e:	d809      	bhi.n	8005674 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005660:	1dfb      	adds	r3, r7, #7
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	001a      	movs	r2, r3
 8005666:	231f      	movs	r3, #31
 8005668:	401a      	ands	r2, r3
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <__NVIC_EnableIRQ+0x30>)
 800566c:	2101      	movs	r1, #1
 800566e:	4091      	lsls	r1, r2
 8005670:	000a      	movs	r2, r1
 8005672:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b002      	add	sp, #8
 800567a:	bd80      	pop	{r7, pc}
 800567c:	e000e100 	.word	0xe000e100

08005680 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	0002      	movs	r2, r0
 8005688:	1dfb      	adds	r3, r7, #7
 800568a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800568c:	1dfb      	adds	r3, r7, #7
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b7f      	cmp	r3, #127	; 0x7f
 8005692:	d810      	bhi.n	80056b6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005694:	1dfb      	adds	r3, r7, #7
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	001a      	movs	r2, r3
 800569a:	231f      	movs	r3, #31
 800569c:	4013      	ands	r3, r2
 800569e:	4908      	ldr	r1, [pc, #32]	; (80056c0 <__NVIC_DisableIRQ+0x40>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	409a      	lsls	r2, r3
 80056a4:	0013      	movs	r3, r2
 80056a6:	2280      	movs	r2, #128	; 0x80
 80056a8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056aa:	f3bf 8f4f 	dsb	sy
}
 80056ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80056b0:	f3bf 8f6f 	isb	sy
}
 80056b4:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b002      	add	sp, #8
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	e000e100 	.word	0xe000e100

080056c4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	0002      	movs	r2, r0
 80056cc:	1dfb      	adds	r3, r7, #7
 80056ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80056d0:	1dfb      	adds	r3, r7, #7
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b7f      	cmp	r3, #127	; 0x7f
 80056d6:	d80a      	bhi.n	80056ee <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056d8:	1dfb      	adds	r3, r7, #7
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	001a      	movs	r2, r3
 80056de:	231f      	movs	r3, #31
 80056e0:	4013      	ands	r3, r2
 80056e2:	4905      	ldr	r1, [pc, #20]	; (80056f8 <__NVIC_ClearPendingIRQ+0x34>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	409a      	lsls	r2, r3
 80056e8:	23c0      	movs	r3, #192	; 0xc0
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	50ca      	str	r2, [r1, r3]
  }
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b002      	add	sp, #8
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	e000e100 	.word	0xe000e100

080056fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	0002      	movs	r2, r0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	1dfb      	adds	r3, r7, #7
 8005708:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800570a:	1dfb      	adds	r3, r7, #7
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b7f      	cmp	r3, #127	; 0x7f
 8005710:	d828      	bhi.n	8005764 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005712:	4a2f      	ldr	r2, [pc, #188]	; (80057d0 <__NVIC_SetPriority+0xd4>)
 8005714:	1dfb      	adds	r3, r7, #7
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b25b      	sxtb	r3, r3
 800571a:	089b      	lsrs	r3, r3, #2
 800571c:	33c0      	adds	r3, #192	; 0xc0
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	589b      	ldr	r3, [r3, r2]
 8005722:	1dfa      	adds	r2, r7, #7
 8005724:	7812      	ldrb	r2, [r2, #0]
 8005726:	0011      	movs	r1, r2
 8005728:	2203      	movs	r2, #3
 800572a:	400a      	ands	r2, r1
 800572c:	00d2      	lsls	r2, r2, #3
 800572e:	21ff      	movs	r1, #255	; 0xff
 8005730:	4091      	lsls	r1, r2
 8005732:	000a      	movs	r2, r1
 8005734:	43d2      	mvns	r2, r2
 8005736:	401a      	ands	r2, r3
 8005738:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	019b      	lsls	r3, r3, #6
 800573e:	22ff      	movs	r2, #255	; 0xff
 8005740:	401a      	ands	r2, r3
 8005742:	1dfb      	adds	r3, r7, #7
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	0018      	movs	r0, r3
 8005748:	2303      	movs	r3, #3
 800574a:	4003      	ands	r3, r0
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005750:	481f      	ldr	r0, [pc, #124]	; (80057d0 <__NVIC_SetPriority+0xd4>)
 8005752:	1dfb      	adds	r3, r7, #7
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	b25b      	sxtb	r3, r3
 8005758:	089b      	lsrs	r3, r3, #2
 800575a:	430a      	orrs	r2, r1
 800575c:	33c0      	adds	r3, #192	; 0xc0
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005762:	e031      	b.n	80057c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005764:	4a1b      	ldr	r2, [pc, #108]	; (80057d4 <__NVIC_SetPriority+0xd8>)
 8005766:	1dfb      	adds	r3, r7, #7
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	0019      	movs	r1, r3
 800576c:	230f      	movs	r3, #15
 800576e:	400b      	ands	r3, r1
 8005770:	3b08      	subs	r3, #8
 8005772:	089b      	lsrs	r3, r3, #2
 8005774:	3306      	adds	r3, #6
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	18d3      	adds	r3, r2, r3
 800577a:	3304      	adds	r3, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	1dfa      	adds	r2, r7, #7
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	0011      	movs	r1, r2
 8005784:	2203      	movs	r2, #3
 8005786:	400a      	ands	r2, r1
 8005788:	00d2      	lsls	r2, r2, #3
 800578a:	21ff      	movs	r1, #255	; 0xff
 800578c:	4091      	lsls	r1, r2
 800578e:	000a      	movs	r2, r1
 8005790:	43d2      	mvns	r2, r2
 8005792:	401a      	ands	r2, r3
 8005794:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	019b      	lsls	r3, r3, #6
 800579a:	22ff      	movs	r2, #255	; 0xff
 800579c:	401a      	ands	r2, r3
 800579e:	1dfb      	adds	r3, r7, #7
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	0018      	movs	r0, r3
 80057a4:	2303      	movs	r3, #3
 80057a6:	4003      	ands	r3, r0
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057ac:	4809      	ldr	r0, [pc, #36]	; (80057d4 <__NVIC_SetPriority+0xd8>)
 80057ae:	1dfb      	adds	r3, r7, #7
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	001c      	movs	r4, r3
 80057b4:	230f      	movs	r3, #15
 80057b6:	4023      	ands	r3, r4
 80057b8:	3b08      	subs	r3, #8
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	430a      	orrs	r2, r1
 80057be:	3306      	adds	r3, #6
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	18c3      	adds	r3, r0, r3
 80057c4:	3304      	adds	r3, #4
 80057c6:	601a      	str	r2, [r3, #0]
}
 80057c8:	46c0      	nop			; (mov r8, r8)
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b003      	add	sp, #12
 80057ce:	bd90      	pop	{r4, r7, pc}
 80057d0:	e000e100 	.word	0xe000e100
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	1e5a      	subs	r2, r3, #1
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	045b      	lsls	r3, r3, #17
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d301      	bcc.n	80057f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ec:	2301      	movs	r3, #1
 80057ee:	e010      	b.n	8005812 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <SysTick_Config+0x44>)
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	3a01      	subs	r2, #1
 80057f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057f8:	2301      	movs	r3, #1
 80057fa:	425b      	negs	r3, r3
 80057fc:	2103      	movs	r1, #3
 80057fe:	0018      	movs	r0, r3
 8005800:	f7ff ff7c 	bl	80056fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <SysTick_Config+0x44>)
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800580a:	4b04      	ldr	r3, [pc, #16]	; (800581c <SysTick_Config+0x44>)
 800580c:	2207      	movs	r2, #7
 800580e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005810:	2300      	movs	r3, #0
}
 8005812:	0018      	movs	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	b002      	add	sp, #8
 8005818:	bd80      	pop	{r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	e000e010 	.word	0xe000e010

08005820 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	210f      	movs	r1, #15
 800582c:	187b      	adds	r3, r7, r1
 800582e:	1c02      	adds	r2, r0, #0
 8005830:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	187b      	adds	r3, r7, r1
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	b25b      	sxtb	r3, r3
 800583a:	0011      	movs	r1, r2
 800583c:	0018      	movs	r0, r3
 800583e:	f7ff ff5d 	bl	80056fc <__NVIC_SetPriority>
}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	46bd      	mov	sp, r7
 8005846:	b004      	add	sp, #16
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	0002      	movs	r2, r0
 8005852:	1dfb      	adds	r3, r7, #7
 8005854:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005856:	1dfb      	adds	r3, r7, #7
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b25b      	sxtb	r3, r3
 800585c:	0018      	movs	r0, r3
 800585e:	f7ff fef5 	bl	800564c <__NVIC_EnableIRQ>
}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	46bd      	mov	sp, r7
 8005866:	b002      	add	sp, #8
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	0002      	movs	r2, r0
 8005872:	1dfb      	adds	r3, r7, #7
 8005874:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005876:	1dfb      	adds	r3, r7, #7
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	b25b      	sxtb	r3, r3
 800587c:	0018      	movs	r0, r3
 800587e:	f7ff feff 	bl	8005680 <__NVIC_DisableIRQ>
}
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	46bd      	mov	sp, r7
 8005886:	b002      	add	sp, #8
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	0018      	movs	r0, r3
 8005896:	f7ff ff9f 	bl	80057d8 <SysTick_Config>
 800589a:	0003      	movs	r3, r0
}
 800589c:	0018      	movs	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	b002      	add	sp, #8
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	0002      	movs	r2, r0
 80058ac:	1dfb      	adds	r3, r7, #7
 80058ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80058b0:	1dfb      	adds	r3, r7, #7
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	b25b      	sxtb	r3, r3
 80058b6:	0018      	movs	r0, r3
 80058b8:	f7ff ff04 	bl	80056c4 <__NVIC_ClearPendingIRQ>
}
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	b002      	add	sp, #8
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e077      	b.n	80059c6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3d      	ldr	r2, [pc, #244]	; (80059d0 <HAL_DMA_Init+0x10c>)
 80058dc:	4694      	mov	ip, r2
 80058de:	4463      	add	r3, ip
 80058e0:	2114      	movs	r1, #20
 80058e2:	0018      	movs	r0, r3
 80058e4:	f7fa fc34 	bl	8000150 <__udivsi3>
 80058e8:	0003      	movs	r3, r0
 80058ea:	009a      	lsls	r2, r3, #2
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2225      	movs	r2, #37	; 0x25
 80058f4:	2102      	movs	r1, #2
 80058f6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4934      	ldr	r1, [pc, #208]	; (80059d4 <HAL_DMA_Init+0x110>)
 8005904:	400a      	ands	r2, r1
 8005906:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6819      	ldr	r1, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	0018      	movs	r0, r3
 8005942:	f000 fa8d 	bl	8005e60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	2380      	movs	r3, #128	; 0x80
 800594c:	01db      	lsls	r3, r3, #7
 800594e:	429a      	cmp	r2, r3
 8005950:	d102      	bne.n	8005958 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005960:	213f      	movs	r1, #63	; 0x3f
 8005962:	400a      	ands	r2, r1
 8005964:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800596e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d011      	beq.n	800599c <HAL_DMA_Init+0xd8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b04      	cmp	r3, #4
 800597e:	d80d      	bhi.n	800599c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	0018      	movs	r0, r3
 8005984:	f000 fa98 	bl	8005eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005998:	605a      	str	r2, [r3, #4]
 800599a:	e008      	b.n	80059ae <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2225      	movs	r2, #37	; 0x25
 80059b8:	2101      	movs	r1, #1
 80059ba:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2224      	movs	r2, #36	; 0x24
 80059c0:	2100      	movs	r1, #0
 80059c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	0018      	movs	r0, r3
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b002      	add	sp, #8
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	bffdfff8 	.word	0xbffdfff8
 80059d4:	ffff800f 	.word	0xffff800f

080059d8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e6:	2317      	movs	r3, #23
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2224      	movs	r2, #36	; 0x24
 80059f2:	5c9b      	ldrb	r3, [r3, r2]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_DMA_Start_IT+0x24>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e06f      	b.n	8005adc <HAL_DMA_Start_IT+0x104>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2224      	movs	r2, #36	; 0x24
 8005a00:	2101      	movs	r1, #1
 8005a02:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2225      	movs	r2, #37	; 0x25
 8005a08:	5c9b      	ldrb	r3, [r3, r2]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d157      	bne.n	8005ac0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2225      	movs	r2, #37	; 0x25
 8005a14:	2102      	movs	r1, #2
 8005a16:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2101      	movs	r1, #1
 8005a2a:	438a      	bics	r2, r1
 8005a2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f9d3 	bl	8005de0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	210e      	movs	r1, #14
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	e00f      	b.n	8005a74 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2104      	movs	r1, #4
 8005a60:	438a      	bics	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	210a      	movs	r1, #10
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	2380      	movs	r3, #128	; 0x80
 8005a7c:	025b      	lsls	r3, r3, #9
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d008      	beq.n	8005a94 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	2180      	movs	r1, #128	; 0x80
 8005a8e:	0049      	lsls	r1, r1, #1
 8005a90:	430a      	orrs	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa6:	2180      	movs	r1, #128	; 0x80
 8005aa8:	0049      	lsls	r1, r1, #1
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2101      	movs	r1, #1
 8005aba:	430a      	orrs	r2, r1
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e00a      	b.n	8005ad6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2224      	movs	r2, #36	; 0x24
 8005aca:	2100      	movs	r1, #0
 8005acc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005ace:	2317      	movs	r3, #23
 8005ad0:	18fb      	adds	r3, r7, r3
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005ad6:	2317      	movs	r3, #23
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	781b      	ldrb	r3, [r3, #0]
}
 8005adc:	0018      	movs	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b006      	add	sp, #24
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e050      	b.n	8005b98 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2225      	movs	r2, #37	; 0x25
 8005afa:	5c9b      	ldrb	r3, [r3, r2]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d008      	beq.n	8005b14 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2204      	movs	r2, #4
 8005b06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2224      	movs	r2, #36	; 0x24
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e041      	b.n	8005b98 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	210e      	movs	r1, #14
 8005b20:	438a      	bics	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2e:	491c      	ldr	r1, [pc, #112]	; (8005ba0 <HAL_DMA_Abort+0xbc>)
 8005b30:	400a      	ands	r2, r1
 8005b32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2101      	movs	r1, #1
 8005b40:	438a      	bics	r2, r1
 8005b42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8005b44:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <HAL_DMA_Abort+0xc0>)
 8005b46:	6859      	ldr	r1, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	221c      	movs	r2, #28
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2201      	movs	r2, #1
 8005b52:	409a      	lsls	r2, r3
 8005b54:	4b13      	ldr	r3, [pc, #76]	; (8005ba4 <HAL_DMA_Abort+0xc0>)
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b62:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00c      	beq.n	8005b86 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b76:	490a      	ldr	r1, [pc, #40]	; (8005ba0 <HAL_DMA_Abort+0xbc>)
 8005b78:	400a      	ands	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005b84:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2225      	movs	r2, #37	; 0x25
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2224      	movs	r2, #36	; 0x24
 8005b92:	2100      	movs	r1, #0
 8005b94:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	0018      	movs	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	fffffeff 	.word	0xfffffeff
 8005ba4:	40020000 	.word	0x40020000

08005ba8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	210f      	movs	r1, #15
 8005bb2:	187b      	adds	r3, r7, r1
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2225      	movs	r2, #37	; 0x25
 8005bbc:	5c9b      	ldrb	r3, [r3, r2]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d006      	beq.n	8005bd2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005bca:	187b      	adds	r3, r7, r1
 8005bcc:	2201      	movs	r2, #1
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	e049      	b.n	8005c66 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	210e      	movs	r1, #14
 8005bde:	438a      	bics	r2, r1
 8005be0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2101      	movs	r1, #1
 8005bee:	438a      	bics	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfc:	491d      	ldr	r1, [pc, #116]	; (8005c74 <HAL_DMA_Abort_IT+0xcc>)
 8005bfe:	400a      	ands	r2, r1
 8005c00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005c02:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <HAL_DMA_Abort_IT+0xd0>)
 8005c04:	6859      	ldr	r1, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	221c      	movs	r2, #28
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	2201      	movs	r2, #1
 8005c10:	409a      	lsls	r2, r3
 8005c12:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <HAL_DMA_Abort_IT+0xd0>)
 8005c14:	430a      	orrs	r2, r1
 8005c16:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00c      	beq.n	8005c44 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c34:	490f      	ldr	r1, [pc, #60]	; (8005c74 <HAL_DMA_Abort_IT+0xcc>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2225      	movs	r2, #37	; 0x25
 8005c48:	2101      	movs	r1, #1
 8005c4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2224      	movs	r2, #36	; 0x24
 8005c50:	2100      	movs	r1, #0
 8005c52:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	0010      	movs	r0, r2
 8005c64:	4798      	blx	r3
    }
  }
  return status;
 8005c66:	230f      	movs	r3, #15
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	781b      	ldrb	r3, [r3, #0]
}
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b004      	add	sp, #16
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	fffffeff 	.word	0xfffffeff
 8005c78:	40020000 	.word	0x40020000

08005c7c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005c84:	4b55      	ldr	r3, [pc, #340]	; (8005ddc <HAL_DMA_IRQHandler+0x160>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	221c      	movs	r2, #28
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	409a      	lsls	r2, r3
 8005c9e:	0013      	movs	r3, r2
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d027      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0x7a>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	4013      	ands	r3, r2
 8005cac:	d023      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d107      	bne.n	8005cca <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2104      	movs	r1, #4
 8005cc6:	438a      	bics	r2, r1
 8005cc8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005cca:	4b44      	ldr	r3, [pc, #272]	; (8005ddc <HAL_DMA_IRQHandler+0x160>)
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	221c      	movs	r2, #28
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	409a      	lsls	r2, r3
 8005cda:	4b40      	ldr	r3, [pc, #256]	; (8005ddc <HAL_DMA_IRQHandler+0x160>)
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d100      	bne.n	8005cea <HAL_DMA_IRQHandler+0x6e>
 8005ce8:	e073      	b.n	8005dd2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	0010      	movs	r0, r2
 8005cf2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005cf4:	e06d      	b.n	8005dd2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	221c      	movs	r2, #28
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2202      	movs	r2, #2
 8005d00:	409a      	lsls	r2, r3
 8005d02:	0013      	movs	r3, r2
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4013      	ands	r3, r2
 8005d08:	d02e      	beq.n	8005d68 <HAL_DMA_IRQHandler+0xec>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d02a      	beq.n	8005d68 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d10b      	bne.n	8005d36 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	210a      	movs	r1, #10
 8005d2a:	438a      	bics	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2225      	movs	r2, #37	; 0x25
 8005d32:	2101      	movs	r1, #1
 8005d34:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005d36:	4b29      	ldr	r3, [pc, #164]	; (8005ddc <HAL_DMA_IRQHandler+0x160>)
 8005d38:	6859      	ldr	r1, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	221c      	movs	r2, #28
 8005d40:	4013      	ands	r3, r2
 8005d42:	2202      	movs	r2, #2
 8005d44:	409a      	lsls	r2, r3
 8005d46:	4b25      	ldr	r3, [pc, #148]	; (8005ddc <HAL_DMA_IRQHandler+0x160>)
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2224      	movs	r2, #36	; 0x24
 8005d50:	2100      	movs	r1, #0
 8005d52:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d03a      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	0010      	movs	r0, r2
 8005d64:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005d66:	e034      	b.n	8005dd2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	221c      	movs	r2, #28
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2208      	movs	r2, #8
 8005d72:	409a      	lsls	r2, r3
 8005d74:	0013      	movs	r3, r2
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d02b      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x158>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2208      	movs	r2, #8
 8005d80:	4013      	ands	r3, r2
 8005d82:	d027      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	210e      	movs	r1, #14
 8005d90:	438a      	bics	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005d94:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <HAL_DMA_IRQHandler+0x160>)
 8005d96:	6859      	ldr	r1, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	221c      	movs	r2, #28
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2201      	movs	r2, #1
 8005da2:	409a      	lsls	r2, r3
 8005da4:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <HAL_DMA_IRQHandler+0x160>)
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2225      	movs	r2, #37	; 0x25
 8005db4:	2101      	movs	r1, #1
 8005db6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2224      	movs	r2, #36	; 0x24
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	0010      	movs	r0, r2
 8005dd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	46c0      	nop			; (mov r8, r8)
}
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b004      	add	sp, #16
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40020000 	.word	0x40020000

08005de0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005df6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e08:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005e0a:	4b14      	ldr	r3, [pc, #80]	; (8005e5c <DMA_SetConfig+0x7c>)
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	221c      	movs	r2, #28
 8005e14:	4013      	ands	r3, r2
 8005e16:	2201      	movs	r2, #1
 8005e18:	409a      	lsls	r2, r3
 8005e1a:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <DMA_SetConfig+0x7c>)
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b10      	cmp	r3, #16
 8005e2e:	d108      	bne.n	8005e42 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e40:	e007      	b.n	8005e52 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	60da      	str	r2, [r3, #12]
}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b004      	add	sp, #16
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	40020000 	.word	0x40020000

08005e60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	4a10      	ldr	r2, [pc, #64]	; (8005eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005e70:	4694      	mov	ip, r2
 8005e72:	4463      	add	r3, ip
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	001a      	movs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	001a      	movs	r2, r3
 8005e82:	23ff      	movs	r3, #255	; 0xff
 8005e84:	4013      	ands	r3, r2
 8005e86:	3b08      	subs	r3, #8
 8005e88:	2114      	movs	r1, #20
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f7fa f960 	bl	8000150 <__udivsi3>
 8005e90:	0003      	movs	r3, r0
 8005e92:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a07      	ldr	r2, [pc, #28]	; (8005eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005e98:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	221f      	movs	r2, #31
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	409a      	lsls	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b004      	add	sp, #16
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	10008200 	.word	0x10008200
 8005eb4:	40020880 	.word	0x40020880

08005eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	223f      	movs	r2, #63	; 0x3f
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a0a      	ldr	r2, [pc, #40]	; (8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005ece:	4694      	mov	ip, r2
 8005ed0:	4463      	add	r3, ip
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	001a      	movs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a07      	ldr	r2, [pc, #28]	; (8005efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005ede:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2201      	movs	r2, #1
 8005eea:	409a      	lsls	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005ef0:	46c0      	nop			; (mov r8, r8)
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b004      	add	sp, #16
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	1000823f 	.word	0x1000823f
 8005efc:	40020940 	.word	0x40020940

08005f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f0e:	e147      	b.n	80061a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2101      	movs	r1, #1
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4091      	lsls	r1, r2
 8005f1a:	000a      	movs	r2, r1
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d100      	bne.n	8005f28 <HAL_GPIO_Init+0x28>
 8005f26:	e138      	b.n	800619a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d005      	beq.n	8005f40 <HAL_GPIO_Init+0x40>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2203      	movs	r2, #3
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d130      	bne.n	8005fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	0013      	movs	r3, r2
 8005f50:	43da      	mvns	r2, r3
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4013      	ands	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	409a      	lsls	r2, r3
 8005f62:	0013      	movs	r3, r2
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f76:	2201      	movs	r2, #1
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	409a      	lsls	r2, r3
 8005f7c:	0013      	movs	r3, r2
 8005f7e:	43da      	mvns	r2, r3
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4013      	ands	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	091b      	lsrs	r3, r3, #4
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	401a      	ands	r2, r3
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	409a      	lsls	r2, r3
 8005f94:	0013      	movs	r3, r2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2203      	movs	r2, #3
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d017      	beq.n	8005fde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	2203      	movs	r2, #3
 8005fba:	409a      	lsls	r2, r3
 8005fbc:	0013      	movs	r3, r2
 8005fbe:	43da      	mvns	r2, r3
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	0013      	movs	r3, r2
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d123      	bne.n	8006032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	08da      	lsrs	r2, r3, #3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3208      	adds	r2, #8
 8005ff2:	0092      	lsls	r2, r2, #2
 8005ff4:	58d3      	ldr	r3, [r2, r3]
 8005ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2207      	movs	r2, #7
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	220f      	movs	r2, #15
 8006002:	409a      	lsls	r2, r3
 8006004:	0013      	movs	r3, r2
 8006006:	43da      	mvns	r2, r3
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4013      	ands	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2107      	movs	r1, #7
 8006016:	400b      	ands	r3, r1
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	409a      	lsls	r2, r3
 800601c:	0013      	movs	r3, r2
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	08da      	lsrs	r2, r3, #3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3208      	adds	r2, #8
 800602c:	0092      	lsls	r2, r2, #2
 800602e:	6939      	ldr	r1, [r7, #16]
 8006030:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	2203      	movs	r2, #3
 800603e:	409a      	lsls	r2, r3
 8006040:	0013      	movs	r3, r2
 8006042:	43da      	mvns	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4013      	ands	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2203      	movs	r2, #3
 8006050:	401a      	ands	r2, r3
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	409a      	lsls	r2, r3
 8006058:	0013      	movs	r3, r2
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	23c0      	movs	r3, #192	; 0xc0
 800606c:	029b      	lsls	r3, r3, #10
 800606e:	4013      	ands	r3, r2
 8006070:	d100      	bne.n	8006074 <HAL_GPIO_Init+0x174>
 8006072:	e092      	b.n	800619a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006074:	4a50      	ldr	r2, [pc, #320]	; (80061b8 <HAL_GPIO_Init+0x2b8>)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	089b      	lsrs	r3, r3, #2
 800607a:	3318      	adds	r3, #24
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	589b      	ldr	r3, [r3, r2]
 8006080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2203      	movs	r2, #3
 8006086:	4013      	ands	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	220f      	movs	r2, #15
 800608c:	409a      	lsls	r2, r3
 800608e:	0013      	movs	r3, r2
 8006090:	43da      	mvns	r2, r3
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4013      	ands	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	23a0      	movs	r3, #160	; 0xa0
 800609c:	05db      	lsls	r3, r3, #23
 800609e:	429a      	cmp	r2, r3
 80060a0:	d013      	beq.n	80060ca <HAL_GPIO_Init+0x1ca>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a45      	ldr	r2, [pc, #276]	; (80061bc <HAL_GPIO_Init+0x2bc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00d      	beq.n	80060c6 <HAL_GPIO_Init+0x1c6>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a44      	ldr	r2, [pc, #272]	; (80061c0 <HAL_GPIO_Init+0x2c0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d007      	beq.n	80060c2 <HAL_GPIO_Init+0x1c2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a43      	ldr	r2, [pc, #268]	; (80061c4 <HAL_GPIO_Init+0x2c4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d101      	bne.n	80060be <HAL_GPIO_Init+0x1be>
 80060ba:	2303      	movs	r3, #3
 80060bc:	e006      	b.n	80060cc <HAL_GPIO_Init+0x1cc>
 80060be:	2305      	movs	r3, #5
 80060c0:	e004      	b.n	80060cc <HAL_GPIO_Init+0x1cc>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e002      	b.n	80060cc <HAL_GPIO_Init+0x1cc>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <HAL_GPIO_Init+0x1cc>
 80060ca:	2300      	movs	r3, #0
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	2103      	movs	r1, #3
 80060d0:	400a      	ands	r2, r1
 80060d2:	00d2      	lsls	r2, r2, #3
 80060d4:	4093      	lsls	r3, r2
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80060dc:	4936      	ldr	r1, [pc, #216]	; (80061b8 <HAL_GPIO_Init+0x2b8>)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	089b      	lsrs	r3, r3, #2
 80060e2:	3318      	adds	r3, #24
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060ea:	4b33      	ldr	r3, [pc, #204]	; (80061b8 <HAL_GPIO_Init+0x2b8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	43da      	mvns	r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4013      	ands	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	2380      	movs	r3, #128	; 0x80
 8006100:	035b      	lsls	r3, r3, #13
 8006102:	4013      	ands	r3, r2
 8006104:	d003      	beq.n	800610e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800610e:	4b2a      	ldr	r3, [pc, #168]	; (80061b8 <HAL_GPIO_Init+0x2b8>)
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006114:	4b28      	ldr	r3, [pc, #160]	; (80061b8 <HAL_GPIO_Init+0x2b8>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	43da      	mvns	r2, r3
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4013      	ands	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	039b      	lsls	r3, r3, #14
 800612c:	4013      	ands	r3, r2
 800612e:	d003      	beq.n	8006138 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006138:	4b1f      	ldr	r3, [pc, #124]	; (80061b8 <HAL_GPIO_Init+0x2b8>)
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800613e:	4a1e      	ldr	r2, [pc, #120]	; (80061b8 <HAL_GPIO_Init+0x2b8>)
 8006140:	2384      	movs	r3, #132	; 0x84
 8006142:	58d3      	ldr	r3, [r2, r3]
 8006144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	43da      	mvns	r2, r3
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4013      	ands	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	029b      	lsls	r3, r3, #10
 8006158:	4013      	ands	r3, r2
 800615a:	d003      	beq.n	8006164 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006164:	4914      	ldr	r1, [pc, #80]	; (80061b8 <HAL_GPIO_Init+0x2b8>)
 8006166:	2284      	movs	r2, #132	; 0x84
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800616c:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <HAL_GPIO_Init+0x2b8>)
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	58d3      	ldr	r3, [r2, r3]
 8006172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	43da      	mvns	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4013      	ands	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	2380      	movs	r3, #128	; 0x80
 8006184:	025b      	lsls	r3, r3, #9
 8006186:	4013      	ands	r3, r2
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006192:	4909      	ldr	r1, [pc, #36]	; (80061b8 <HAL_GPIO_Init+0x2b8>)
 8006194:	2280      	movs	r2, #128	; 0x80
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	3301      	adds	r3, #1
 800619e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	40da      	lsrs	r2, r3
 80061a8:	1e13      	subs	r3, r2, #0
 80061aa:	d000      	beq.n	80061ae <HAL_GPIO_Init+0x2ae>
 80061ac:	e6b0      	b.n	8005f10 <HAL_GPIO_Init+0x10>
  }
}
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	46c0      	nop			; (mov r8, r8)
 80061b2:	46bd      	mov	sp, r7
 80061b4:	b006      	add	sp, #24
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40021800 	.word	0x40021800
 80061bc:	50000400 	.word	0x50000400
 80061c0:	50000800 	.word	0x50000800
 80061c4:	50000c00 	.word	0x50000c00

080061c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	0008      	movs	r0, r1
 80061d2:	0011      	movs	r1, r2
 80061d4:	1cbb      	adds	r3, r7, #2
 80061d6:	1c02      	adds	r2, r0, #0
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	1c7b      	adds	r3, r7, #1
 80061dc:	1c0a      	adds	r2, r1, #0
 80061de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061e0:	1c7b      	adds	r3, r7, #1
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061e8:	1cbb      	adds	r3, r7, #2
 80061ea:	881a      	ldrh	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80061f0:	e003      	b.n	80061fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061f2:	1cbb      	adds	r3, r7, #2
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b002      	add	sp, #8
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	0002      	movs	r2, r0
 800620c:	1dbb      	adds	r3, r7, #6
 800620e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006210:	4b10      	ldr	r3, [pc, #64]	; (8006254 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	1dba      	adds	r2, r7, #6
 8006216:	8812      	ldrh	r2, [r2, #0]
 8006218:	4013      	ands	r3, r2
 800621a:	d008      	beq.n	800622e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800621e:	1dba      	adds	r2, r7, #6
 8006220:	8812      	ldrh	r2, [r2, #0]
 8006222:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006224:	1dbb      	adds	r3, r7, #6
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	0018      	movs	r0, r3
 800622a:	f000 f815 	bl	8006258 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800622e:	4b09      	ldr	r3, [pc, #36]	; (8006254 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	1dba      	adds	r2, r7, #6
 8006234:	8812      	ldrh	r2, [r2, #0]
 8006236:	4013      	ands	r3, r2
 8006238:	d008      	beq.n	800624c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800623a:	4b06      	ldr	r3, [pc, #24]	; (8006254 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800623c:	1dba      	adds	r2, r7, #6
 800623e:	8812      	ldrh	r2, [r2, #0]
 8006240:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006242:	1dbb      	adds	r3, r7, #6
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	0018      	movs	r0, r3
 8006248:	f000 f810 	bl	800626c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800624c:	46c0      	nop			; (mov r8, r8)
 800624e:	46bd      	mov	sp, r7
 8006250:	b002      	add	sp, #8
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40021800 	.word	0x40021800

08006258 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	0002      	movs	r2, r0
 8006260:	1dbb      	adds	r3, r7, #6
 8006262:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006264:	46c0      	nop			; (mov r8, r8)
 8006266:	46bd      	mov	sp, r7
 8006268:	b002      	add	sp, #8
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	0002      	movs	r2, r0
 8006274:	1dbb      	adds	r3, r7, #6
 8006276:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	46bd      	mov	sp, r7
 800627c:	b002      	add	sp, #8
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e082      	b.n	8006398 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2241      	movs	r2, #65	; 0x41
 8006296:	5c9b      	ldrb	r3, [r3, r2]
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d107      	bne.n	80062ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2240      	movs	r2, #64	; 0x40
 80062a2:	2100      	movs	r1, #0
 80062a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	0018      	movs	r0, r3
 80062aa:	f7fd ffc7 	bl	800423c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2241      	movs	r2, #65	; 0x41
 80062b2:	2124      	movs	r1, #36	; 0x24
 80062b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2101      	movs	r1, #1
 80062c2:	438a      	bics	r2, r1
 80062c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4934      	ldr	r1, [pc, #208]	; (80063a0 <HAL_I2C_Init+0x120>)
 80062d0:	400a      	ands	r2, r1
 80062d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4931      	ldr	r1, [pc, #196]	; (80063a4 <HAL_I2C_Init+0x124>)
 80062e0:	400a      	ands	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d108      	bne.n	80062fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2180      	movs	r1, #128	; 0x80
 80062f6:	0209      	lsls	r1, r1, #8
 80062f8:	430a      	orrs	r2, r1
 80062fa:	609a      	str	r2, [r3, #8]
 80062fc:	e007      	b.n	800630e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2184      	movs	r1, #132	; 0x84
 8006308:	0209      	lsls	r1, r1, #8
 800630a:	430a      	orrs	r2, r1
 800630c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d104      	bne.n	8006320 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2280      	movs	r2, #128	; 0x80
 800631c:	0112      	lsls	r2, r2, #4
 800631e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	491f      	ldr	r1, [pc, #124]	; (80063a8 <HAL_I2C_Init+0x128>)
 800632c:	430a      	orrs	r2, r1
 800632e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	491a      	ldr	r1, [pc, #104]	; (80063a4 <HAL_I2C_Init+0x124>)
 800633c:	400a      	ands	r2, r1
 800633e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	431a      	orrs	r2, r3
 800634a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69d9      	ldr	r1, [r3, #28]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1a      	ldr	r2, [r3, #32]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2101      	movs	r1, #1
 8006376:	430a      	orrs	r2, r1
 8006378:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2241      	movs	r2, #65	; 0x41
 8006384:	2120      	movs	r1, #32
 8006386:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2242      	movs	r2, #66	; 0x42
 8006392:	2100      	movs	r1, #0
 8006394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	0018      	movs	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	b002      	add	sp, #8
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	f0ffffff 	.word	0xf0ffffff
 80063a4:	ffff7fff 	.word	0xffff7fff
 80063a8:	02008000 	.word	0x02008000

080063ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2241      	movs	r2, #65	; 0x41
 80063ba:	5c9b      	ldrb	r3, [r3, r2]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d138      	bne.n	8006434 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2240      	movs	r2, #64	; 0x40
 80063c6:	5c9b      	ldrb	r3, [r3, r2]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e032      	b.n	8006436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2240      	movs	r2, #64	; 0x40
 80063d4:	2101      	movs	r1, #1
 80063d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2241      	movs	r2, #65	; 0x41
 80063dc:	2124      	movs	r1, #36	; 0x24
 80063de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2101      	movs	r1, #1
 80063ec:	438a      	bics	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4911      	ldr	r1, [pc, #68]	; (8006440 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80063fc:	400a      	ands	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6819      	ldr	r1, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2101      	movs	r1, #1
 800641c:	430a      	orrs	r2, r1
 800641e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2241      	movs	r2, #65	; 0x41
 8006424:	2120      	movs	r1, #32
 8006426:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2240      	movs	r2, #64	; 0x40
 800642c:	2100      	movs	r1, #0
 800642e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	e000      	b.n	8006436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006434:	2302      	movs	r3, #2
  }
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b002      	add	sp, #8
 800643c:	bd80      	pop	{r7, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	ffffefff 	.word	0xffffefff

08006444 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2241      	movs	r2, #65	; 0x41
 8006452:	5c9b      	ldrb	r3, [r3, r2]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b20      	cmp	r3, #32
 8006458:	d139      	bne.n	80064ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2240      	movs	r2, #64	; 0x40
 800645e:	5c9b      	ldrb	r3, [r3, r2]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006464:	2302      	movs	r3, #2
 8006466:	e033      	b.n	80064d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2240      	movs	r2, #64	; 0x40
 800646c:	2101      	movs	r1, #1
 800646e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2241      	movs	r2, #65	; 0x41
 8006474:	2124      	movs	r1, #36	; 0x24
 8006476:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2101      	movs	r1, #1
 8006484:	438a      	bics	r2, r1
 8006486:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4a11      	ldr	r2, [pc, #68]	; (80064d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006494:	4013      	ands	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	021b      	lsls	r3, r3, #8
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2101      	movs	r1, #1
 80064b6:	430a      	orrs	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2241      	movs	r2, #65	; 0x41
 80064be:	2120      	movs	r1, #32
 80064c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2240      	movs	r2, #64	; 0x40
 80064c6:	2100      	movs	r1, #0
 80064c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e000      	b.n	80064d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
  }
}
 80064d0:	0018      	movs	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b004      	add	sp, #16
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	fffff0ff 	.word	0xfffff0ff

080064dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80064e4:	4b19      	ldr	r3, [pc, #100]	; (800654c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a19      	ldr	r2, [pc, #100]	; (8006550 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	0019      	movs	r1, r3
 80064ee:	4b17      	ldr	r3, [pc, #92]	; (800654c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	2380      	movs	r3, #128	; 0x80
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d11f      	bne.n	8006540 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006500:	4b14      	ldr	r3, [pc, #80]	; (8006554 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	0013      	movs	r3, r2
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	189b      	adds	r3, r3, r2
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	4912      	ldr	r1, [pc, #72]	; (8006558 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800650e:	0018      	movs	r0, r3
 8006510:	f7f9 fe1e 	bl	8000150 <__udivsi3>
 8006514:	0003      	movs	r3, r0
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800651a:	e008      	b.n	800652e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3b01      	subs	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e001      	b.n	800652e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e009      	b.n	8006542 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800652e:	4b07      	ldr	r3, [pc, #28]	; (800654c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	401a      	ands	r2, r3
 8006538:	2380      	movs	r3, #128	; 0x80
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	429a      	cmp	r2, r3
 800653e:	d0ed      	beq.n	800651c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	0018      	movs	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	b004      	add	sp, #16
 8006548:	bd80      	pop	{r7, pc}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	40007000 	.word	0x40007000
 8006550:	fffff9ff 	.word	0xfffff9ff
 8006554:	20000000 	.word	0x20000000
 8006558:	000f4240 	.word	0x000f4240

0800655c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006560:	4b03      	ldr	r3, [pc, #12]	; (8006570 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	23e0      	movs	r3, #224	; 0xe0
 8006566:	01db      	lsls	r3, r3, #7
 8006568:	4013      	ands	r3, r2
}
 800656a:	0018      	movs	r0, r3
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40021000 	.word	0x40021000

08006574 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e2fe      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2201      	movs	r2, #1
 800658c:	4013      	ands	r3, r2
 800658e:	d100      	bne.n	8006592 <HAL_RCC_OscConfig+0x1e>
 8006590:	e07c      	b.n	800668c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006592:	4bc3      	ldr	r3, [pc, #780]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2238      	movs	r2, #56	; 0x38
 8006598:	4013      	ands	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800659c:	4bc0      	ldr	r3, [pc, #768]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2203      	movs	r2, #3
 80065a2:	4013      	ands	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d102      	bne.n	80065b2 <HAL_RCC_OscConfig+0x3e>
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d002      	beq.n	80065b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d10b      	bne.n	80065d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b8:	4bb9      	ldr	r3, [pc, #740]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	2380      	movs	r3, #128	; 0x80
 80065be:	029b      	lsls	r3, r3, #10
 80065c0:	4013      	ands	r3, r2
 80065c2:	d062      	beq.n	800668a <HAL_RCC_OscConfig+0x116>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d15e      	bne.n	800668a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e2d9      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	2380      	movs	r3, #128	; 0x80
 80065d6:	025b      	lsls	r3, r3, #9
 80065d8:	429a      	cmp	r2, r3
 80065da:	d107      	bne.n	80065ec <HAL_RCC_OscConfig+0x78>
 80065dc:	4bb0      	ldr	r3, [pc, #704]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4baf      	ldr	r3, [pc, #700]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80065e2:	2180      	movs	r1, #128	; 0x80
 80065e4:	0249      	lsls	r1, r1, #9
 80065e6:	430a      	orrs	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e020      	b.n	800662e <HAL_RCC_OscConfig+0xba>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	23a0      	movs	r3, #160	; 0xa0
 80065f2:	02db      	lsls	r3, r3, #11
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d10e      	bne.n	8006616 <HAL_RCC_OscConfig+0xa2>
 80065f8:	4ba9      	ldr	r3, [pc, #676]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4ba8      	ldr	r3, [pc, #672]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80065fe:	2180      	movs	r1, #128	; 0x80
 8006600:	02c9      	lsls	r1, r1, #11
 8006602:	430a      	orrs	r2, r1
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	4ba6      	ldr	r3, [pc, #664]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4ba5      	ldr	r3, [pc, #660]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800660c:	2180      	movs	r1, #128	; 0x80
 800660e:	0249      	lsls	r1, r1, #9
 8006610:	430a      	orrs	r2, r1
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e00b      	b.n	800662e <HAL_RCC_OscConfig+0xba>
 8006616:	4ba2      	ldr	r3, [pc, #648]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4ba1      	ldr	r3, [pc, #644]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800661c:	49a1      	ldr	r1, [pc, #644]	; (80068a4 <HAL_RCC_OscConfig+0x330>)
 800661e:	400a      	ands	r2, r1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	4b9f      	ldr	r3, [pc, #636]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	4b9e      	ldr	r3, [pc, #632]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006628:	499f      	ldr	r1, [pc, #636]	; (80068a8 <HAL_RCC_OscConfig+0x334>)
 800662a:	400a      	ands	r2, r1
 800662c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d014      	beq.n	8006660 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006636:	f7fe f959 	bl	80048ec <HAL_GetTick>
 800663a:	0003      	movs	r3, r0
 800663c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006640:	f7fe f954 	bl	80048ec <HAL_GetTick>
 8006644:	0002      	movs	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b64      	cmp	r3, #100	; 0x64
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e298      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006652:	4b93      	ldr	r3, [pc, #588]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	2380      	movs	r3, #128	; 0x80
 8006658:	029b      	lsls	r3, r3, #10
 800665a:	4013      	ands	r3, r2
 800665c:	d0f0      	beq.n	8006640 <HAL_RCC_OscConfig+0xcc>
 800665e:	e015      	b.n	800668c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006660:	f7fe f944 	bl	80048ec <HAL_GetTick>
 8006664:	0003      	movs	r3, r0
 8006666:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800666a:	f7fe f93f 	bl	80048ec <HAL_GetTick>
 800666e:	0002      	movs	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b64      	cmp	r3, #100	; 0x64
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e283      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800667c:	4b88      	ldr	r3, [pc, #544]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	029b      	lsls	r3, r3, #10
 8006684:	4013      	ands	r3, r2
 8006686:	d1f0      	bne.n	800666a <HAL_RCC_OscConfig+0xf6>
 8006688:	e000      	b.n	800668c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800668a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2202      	movs	r2, #2
 8006692:	4013      	ands	r3, r2
 8006694:	d100      	bne.n	8006698 <HAL_RCC_OscConfig+0x124>
 8006696:	e099      	b.n	80067cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006698:	4b81      	ldr	r3, [pc, #516]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2238      	movs	r2, #56	; 0x38
 800669e:	4013      	ands	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066a2:	4b7f      	ldr	r3, [pc, #508]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	2203      	movs	r2, #3
 80066a8:	4013      	ands	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b10      	cmp	r3, #16
 80066b0:	d102      	bne.n	80066b8 <HAL_RCC_OscConfig+0x144>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d002      	beq.n	80066be <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d135      	bne.n	800672a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066be:	4b78      	ldr	r3, [pc, #480]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	2380      	movs	r3, #128	; 0x80
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	4013      	ands	r3, r2
 80066c8:	d005      	beq.n	80066d6 <HAL_RCC_OscConfig+0x162>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e256      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d6:	4b72      	ldr	r3, [pc, #456]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	4a74      	ldr	r2, [pc, #464]	; (80068ac <HAL_RCC_OscConfig+0x338>)
 80066dc:	4013      	ands	r3, r2
 80066de:	0019      	movs	r1, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	021a      	lsls	r2, r3, #8
 80066e6:	4b6e      	ldr	r3, [pc, #440]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80066e8:	430a      	orrs	r2, r1
 80066ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d112      	bne.n	8006718 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80066f2:	4b6b      	ldr	r3, [pc, #428]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a6e      	ldr	r2, [pc, #440]	; (80068b0 <HAL_RCC_OscConfig+0x33c>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	0019      	movs	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	4b67      	ldr	r3, [pc, #412]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006702:	430a      	orrs	r2, r1
 8006704:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006706:	4b66      	ldr	r3, [pc, #408]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	0adb      	lsrs	r3, r3, #11
 800670c:	2207      	movs	r2, #7
 800670e:	4013      	ands	r3, r2
 8006710:	4a68      	ldr	r2, [pc, #416]	; (80068b4 <HAL_RCC_OscConfig+0x340>)
 8006712:	40da      	lsrs	r2, r3
 8006714:	4b68      	ldr	r3, [pc, #416]	; (80068b8 <HAL_RCC_OscConfig+0x344>)
 8006716:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006718:	4b68      	ldr	r3, [pc, #416]	; (80068bc <HAL_RCC_OscConfig+0x348>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	0018      	movs	r0, r3
 800671e:	f7fe f889 	bl	8004834 <HAL_InitTick>
 8006722:	1e03      	subs	r3, r0, #0
 8006724:	d051      	beq.n	80067ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e22c      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d030      	beq.n	8006794 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006732:	4b5b      	ldr	r3, [pc, #364]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a5e      	ldr	r2, [pc, #376]	; (80068b0 <HAL_RCC_OscConfig+0x33c>)
 8006738:	4013      	ands	r3, r2
 800673a:	0019      	movs	r1, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	4b57      	ldr	r3, [pc, #348]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006742:	430a      	orrs	r2, r1
 8006744:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006746:	4b56      	ldr	r3, [pc, #344]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b55      	ldr	r3, [pc, #340]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800674c:	2180      	movs	r1, #128	; 0x80
 800674e:	0049      	lsls	r1, r1, #1
 8006750:	430a      	orrs	r2, r1
 8006752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006754:	f7fe f8ca 	bl	80048ec <HAL_GetTick>
 8006758:	0003      	movs	r3, r0
 800675a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800675c:	e008      	b.n	8006770 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800675e:	f7fe f8c5 	bl	80048ec <HAL_GetTick>
 8006762:	0002      	movs	r2, r0
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e209      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006770:	4b4b      	ldr	r3, [pc, #300]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	2380      	movs	r3, #128	; 0x80
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	4013      	ands	r3, r2
 800677a:	d0f0      	beq.n	800675e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677c:	4b48      	ldr	r3, [pc, #288]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4a4a      	ldr	r2, [pc, #296]	; (80068ac <HAL_RCC_OscConfig+0x338>)
 8006782:	4013      	ands	r3, r2
 8006784:	0019      	movs	r1, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	021a      	lsls	r2, r3, #8
 800678c:	4b44      	ldr	r3, [pc, #272]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	e01b      	b.n	80067cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006794:	4b42      	ldr	r3, [pc, #264]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	4b41      	ldr	r3, [pc, #260]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800679a:	4949      	ldr	r1, [pc, #292]	; (80068c0 <HAL_RCC_OscConfig+0x34c>)
 800679c:	400a      	ands	r2, r1
 800679e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fe f8a4 	bl	80048ec <HAL_GetTick>
 80067a4:	0003      	movs	r3, r0
 80067a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067aa:	f7fe f89f 	bl	80048ec <HAL_GetTick>
 80067ae:	0002      	movs	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e1e3      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067bc:	4b38      	ldr	r3, [pc, #224]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	2380      	movs	r3, #128	; 0x80
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4013      	ands	r3, r2
 80067c6:	d1f0      	bne.n	80067aa <HAL_RCC_OscConfig+0x236>
 80067c8:	e000      	b.n	80067cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2208      	movs	r2, #8
 80067d2:	4013      	ands	r3, r2
 80067d4:	d047      	beq.n	8006866 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80067d6:	4b32      	ldr	r3, [pc, #200]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2238      	movs	r2, #56	; 0x38
 80067dc:	4013      	ands	r3, r2
 80067de:	2b18      	cmp	r3, #24
 80067e0:	d10a      	bne.n	80067f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80067e2:	4b2f      	ldr	r3, [pc, #188]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 80067e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e6:	2202      	movs	r2, #2
 80067e8:	4013      	ands	r3, r2
 80067ea:	d03c      	beq.n	8006866 <HAL_RCC_OscConfig+0x2f2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d138      	bne.n	8006866 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e1c5      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d019      	beq.n	8006834 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006800:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006802:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006804:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006806:	2101      	movs	r1, #1
 8006808:	430a      	orrs	r2, r1
 800680a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680c:	f7fe f86e 	bl	80048ec <HAL_GetTick>
 8006810:	0003      	movs	r3, r0
 8006812:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006816:	f7fe f869 	bl	80048ec <HAL_GetTick>
 800681a:	0002      	movs	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e1ad      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006828:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800682a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682c:	2202      	movs	r2, #2
 800682e:	4013      	ands	r3, r2
 8006830:	d0f1      	beq.n	8006816 <HAL_RCC_OscConfig+0x2a2>
 8006832:	e018      	b.n	8006866 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006834:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006838:	4b19      	ldr	r3, [pc, #100]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800683a:	2101      	movs	r1, #1
 800683c:	438a      	bics	r2, r1
 800683e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fe f854 	bl	80048ec <HAL_GetTick>
 8006844:	0003      	movs	r3, r0
 8006846:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800684a:	f7fe f84f 	bl	80048ec <HAL_GetTick>
 800684e:	0002      	movs	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e193      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800685c:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800685e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006860:	2202      	movs	r2, #2
 8006862:	4013      	ands	r3, r2
 8006864:	d1f1      	bne.n	800684a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2204      	movs	r2, #4
 800686c:	4013      	ands	r3, r2
 800686e:	d100      	bne.n	8006872 <HAL_RCC_OscConfig+0x2fe>
 8006870:	e0c6      	b.n	8006a00 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006872:	231f      	movs	r3, #31
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2238      	movs	r2, #56	; 0x38
 8006880:	4013      	ands	r3, r2
 8006882:	2b20      	cmp	r3, #32
 8006884:	d11e      	bne.n	80068c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006886:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <HAL_RCC_OscConfig+0x32c>)
 8006888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688a:	2202      	movs	r2, #2
 800688c:	4013      	ands	r3, r2
 800688e:	d100      	bne.n	8006892 <HAL_RCC_OscConfig+0x31e>
 8006890:	e0b6      	b.n	8006a00 <HAL_RCC_OscConfig+0x48c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d000      	beq.n	800689c <HAL_RCC_OscConfig+0x328>
 800689a:	e0b1      	b.n	8006a00 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e171      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
 80068a0:	40021000 	.word	0x40021000
 80068a4:	fffeffff 	.word	0xfffeffff
 80068a8:	fffbffff 	.word	0xfffbffff
 80068ac:	ffff80ff 	.word	0xffff80ff
 80068b0:	ffffc7ff 	.word	0xffffc7ff
 80068b4:	00f42400 	.word	0x00f42400
 80068b8:	20000000 	.word	0x20000000
 80068bc:	20000004 	.word	0x20000004
 80068c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068c4:	4bb1      	ldr	r3, [pc, #708]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 80068c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	055b      	lsls	r3, r3, #21
 80068cc:	4013      	ands	r3, r2
 80068ce:	d101      	bne.n	80068d4 <HAL_RCC_OscConfig+0x360>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <HAL_RCC_OscConfig+0x362>
 80068d4:	2300      	movs	r3, #0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d011      	beq.n	80068fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80068da:	4bac      	ldr	r3, [pc, #688]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 80068dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068de:	4bab      	ldr	r3, [pc, #684]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 80068e0:	2180      	movs	r1, #128	; 0x80
 80068e2:	0549      	lsls	r1, r1, #21
 80068e4:	430a      	orrs	r2, r1
 80068e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80068e8:	4ba8      	ldr	r3, [pc, #672]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 80068ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ec:	2380      	movs	r3, #128	; 0x80
 80068ee:	055b      	lsls	r3, r3, #21
 80068f0:	4013      	ands	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80068f6:	231f      	movs	r3, #31
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	2201      	movs	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068fe:	4ba4      	ldr	r3, [pc, #656]	; (8006b90 <HAL_RCC_OscConfig+0x61c>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	2380      	movs	r3, #128	; 0x80
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	4013      	ands	r3, r2
 8006908:	d11a      	bne.n	8006940 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800690a:	4ba1      	ldr	r3, [pc, #644]	; (8006b90 <HAL_RCC_OscConfig+0x61c>)
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4ba0      	ldr	r3, [pc, #640]	; (8006b90 <HAL_RCC_OscConfig+0x61c>)
 8006910:	2180      	movs	r1, #128	; 0x80
 8006912:	0049      	lsls	r1, r1, #1
 8006914:	430a      	orrs	r2, r1
 8006916:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006918:	f7fd ffe8 	bl	80048ec <HAL_GetTick>
 800691c:	0003      	movs	r3, r0
 800691e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006922:	f7fd ffe3 	bl	80048ec <HAL_GetTick>
 8006926:	0002      	movs	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e127      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006934:	4b96      	ldr	r3, [pc, #600]	; (8006b90 <HAL_RCC_OscConfig+0x61c>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	2380      	movs	r3, #128	; 0x80
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	4013      	ands	r3, r2
 800693e:	d0f0      	beq.n	8006922 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d106      	bne.n	8006956 <HAL_RCC_OscConfig+0x3e2>
 8006948:	4b90      	ldr	r3, [pc, #576]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 800694a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800694c:	4b8f      	ldr	r3, [pc, #572]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 800694e:	2101      	movs	r1, #1
 8006950:	430a      	orrs	r2, r1
 8006952:	65da      	str	r2, [r3, #92]	; 0x5c
 8006954:	e01c      	b.n	8006990 <HAL_RCC_OscConfig+0x41c>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b05      	cmp	r3, #5
 800695c:	d10c      	bne.n	8006978 <HAL_RCC_OscConfig+0x404>
 800695e:	4b8b      	ldr	r3, [pc, #556]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006960:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006962:	4b8a      	ldr	r3, [pc, #552]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006964:	2104      	movs	r1, #4
 8006966:	430a      	orrs	r2, r1
 8006968:	65da      	str	r2, [r3, #92]	; 0x5c
 800696a:	4b88      	ldr	r3, [pc, #544]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 800696c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800696e:	4b87      	ldr	r3, [pc, #540]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006970:	2101      	movs	r1, #1
 8006972:	430a      	orrs	r2, r1
 8006974:	65da      	str	r2, [r3, #92]	; 0x5c
 8006976:	e00b      	b.n	8006990 <HAL_RCC_OscConfig+0x41c>
 8006978:	4b84      	ldr	r3, [pc, #528]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 800697a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800697c:	4b83      	ldr	r3, [pc, #524]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 800697e:	2101      	movs	r1, #1
 8006980:	438a      	bics	r2, r1
 8006982:	65da      	str	r2, [r3, #92]	; 0x5c
 8006984:	4b81      	ldr	r3, [pc, #516]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006986:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006988:	4b80      	ldr	r3, [pc, #512]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 800698a:	2104      	movs	r1, #4
 800698c:	438a      	bics	r2, r1
 800698e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d014      	beq.n	80069c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fd ffa8 	bl	80048ec <HAL_GetTick>
 800699c:	0003      	movs	r3, r0
 800699e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069a0:	e009      	b.n	80069b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a2:	f7fd ffa3 	bl	80048ec <HAL_GetTick>
 80069a6:	0002      	movs	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	4a79      	ldr	r2, [pc, #484]	; (8006b94 <HAL_RCC_OscConfig+0x620>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e0e6      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069b6:	4b75      	ldr	r3, [pc, #468]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 80069b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ba:	2202      	movs	r2, #2
 80069bc:	4013      	ands	r3, r2
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x42e>
 80069c0:	e013      	b.n	80069ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c2:	f7fd ff93 	bl	80048ec <HAL_GetTick>
 80069c6:	0003      	movs	r3, r0
 80069c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069ca:	e009      	b.n	80069e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069cc:	f7fd ff8e 	bl	80048ec <HAL_GetTick>
 80069d0:	0002      	movs	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	4a6f      	ldr	r2, [pc, #444]	; (8006b94 <HAL_RCC_OscConfig+0x620>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e0d1      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069e0:	4b6a      	ldr	r3, [pc, #424]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 80069e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e4:	2202      	movs	r2, #2
 80069e6:	4013      	ands	r3, r2
 80069e8:	d1f0      	bne.n	80069cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80069ea:	231f      	movs	r3, #31
 80069ec:	18fb      	adds	r3, r7, r3
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80069f4:	4b65      	ldr	r3, [pc, #404]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 80069f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f8:	4b64      	ldr	r3, [pc, #400]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 80069fa:	4967      	ldr	r1, [pc, #412]	; (8006b98 <HAL_RCC_OscConfig+0x624>)
 80069fc:	400a      	ands	r2, r1
 80069fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d100      	bne.n	8006a0a <HAL_RCC_OscConfig+0x496>
 8006a08:	e0bb      	b.n	8006b82 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a0a:	4b60      	ldr	r3, [pc, #384]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	2238      	movs	r2, #56	; 0x38
 8006a10:	4013      	ands	r3, r2
 8006a12:	2b10      	cmp	r3, #16
 8006a14:	d100      	bne.n	8006a18 <HAL_RCC_OscConfig+0x4a4>
 8006a16:	e07b      	b.n	8006b10 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d156      	bne.n	8006ace <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a20:	4b5a      	ldr	r3, [pc, #360]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	4b59      	ldr	r3, [pc, #356]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006a26:	495d      	ldr	r1, [pc, #372]	; (8006b9c <HAL_RCC_OscConfig+0x628>)
 8006a28:	400a      	ands	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fd ff5e 	bl	80048ec <HAL_GetTick>
 8006a30:	0003      	movs	r3, r0
 8006a32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a36:	f7fd ff59 	bl	80048ec <HAL_GetTick>
 8006a3a:	0002      	movs	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e09d      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a48:	4b50      	ldr	r3, [pc, #320]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	2380      	movs	r3, #128	; 0x80
 8006a4e:	049b      	lsls	r3, r3, #18
 8006a50:	4013      	ands	r3, r2
 8006a52:	d1f0      	bne.n	8006a36 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a54:	4b4d      	ldr	r3, [pc, #308]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4a51      	ldr	r2, [pc, #324]	; (8006ba0 <HAL_RCC_OscConfig+0x62c>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	0019      	movs	r1, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1a      	ldr	r2, [r3, #32]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	431a      	orrs	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a80:	431a      	orrs	r2, r3
 8006a82:	4b42      	ldr	r3, [pc, #264]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006a84:	430a      	orrs	r2, r1
 8006a86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a88:	4b40      	ldr	r3, [pc, #256]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	4b3f      	ldr	r3, [pc, #252]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006a8e:	2180      	movs	r1, #128	; 0x80
 8006a90:	0449      	lsls	r1, r1, #17
 8006a92:	430a      	orrs	r2, r1
 8006a94:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006a96:	4b3d      	ldr	r3, [pc, #244]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	4b3c      	ldr	r3, [pc, #240]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006a9c:	2180      	movs	r1, #128	; 0x80
 8006a9e:	0549      	lsls	r1, r1, #21
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa4:	f7fd ff22 	bl	80048ec <HAL_GetTick>
 8006aa8:	0003      	movs	r3, r0
 8006aaa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aae:	f7fd ff1d 	bl	80048ec <HAL_GetTick>
 8006ab2:	0002      	movs	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e061      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ac0:	4b32      	ldr	r3, [pc, #200]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	2380      	movs	r3, #128	; 0x80
 8006ac6:	049b      	lsls	r3, r3, #18
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d0f0      	beq.n	8006aae <HAL_RCC_OscConfig+0x53a>
 8006acc:	e059      	b.n	8006b82 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ace:	4b2f      	ldr	r3, [pc, #188]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b2e      	ldr	r3, [pc, #184]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006ad4:	4931      	ldr	r1, [pc, #196]	; (8006b9c <HAL_RCC_OscConfig+0x628>)
 8006ad6:	400a      	ands	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ada:	f7fd ff07 	bl	80048ec <HAL_GetTick>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae4:	f7fd ff02 	bl	80048ec <HAL_GetTick>
 8006ae8:	0002      	movs	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e046      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006af6:	4b25      	ldr	r3, [pc, #148]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	2380      	movs	r3, #128	; 0x80
 8006afc:	049b      	lsls	r3, r3, #18
 8006afe:	4013      	ands	r3, r2
 8006b00:	d1f0      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006b02:	4b22      	ldr	r3, [pc, #136]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	4b21      	ldr	r3, [pc, #132]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006b08:	4926      	ldr	r1, [pc, #152]	; (8006ba4 <HAL_RCC_OscConfig+0x630>)
 8006b0a:	400a      	ands	r2, r1
 8006b0c:	60da      	str	r2, [r3, #12]
 8006b0e:	e038      	b.n	8006b82 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e033      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006b1c:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <HAL_RCC_OscConfig+0x618>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2203      	movs	r2, #3
 8006b26:	401a      	ands	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d126      	bne.n	8006b7e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2270      	movs	r2, #112	; 0x70
 8006b34:	401a      	ands	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d11f      	bne.n	8006b7e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	23fe      	movs	r3, #254	; 0xfe
 8006b42:	01db      	lsls	r3, r3, #7
 8006b44:	401a      	ands	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d116      	bne.n	8006b7e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	23f8      	movs	r3, #248	; 0xf8
 8006b54:	039b      	lsls	r3, r3, #14
 8006b56:	401a      	ands	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d10e      	bne.n	8006b7e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	23e0      	movs	r3, #224	; 0xe0
 8006b64:	051b      	lsls	r3, r3, #20
 8006b66:	401a      	ands	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d106      	bne.n	8006b7e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	0f5b      	lsrs	r3, r3, #29
 8006b74:	075a      	lsls	r2, r3, #29
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d001      	beq.n	8006b82 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	0018      	movs	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	b008      	add	sp, #32
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	40007000 	.word	0x40007000
 8006b94:	00001388 	.word	0x00001388
 8006b98:	efffffff 	.word	0xefffffff
 8006b9c:	feffffff 	.word	0xfeffffff
 8006ba0:	11c1808c 	.word	0x11c1808c
 8006ba4:	eefefffc 	.word	0xeefefffc

08006ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0e9      	b.n	8006d90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bbc:	4b76      	ldr	r3, [pc, #472]	; (8006d98 <HAL_RCC_ClockConfig+0x1f0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2207      	movs	r2, #7
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d91e      	bls.n	8006c08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bca:	4b73      	ldr	r3, [pc, #460]	; (8006d98 <HAL_RCC_ClockConfig+0x1f0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2207      	movs	r2, #7
 8006bd0:	4393      	bics	r3, r2
 8006bd2:	0019      	movs	r1, r3
 8006bd4:	4b70      	ldr	r3, [pc, #448]	; (8006d98 <HAL_RCC_ClockConfig+0x1f0>)
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006bdc:	f7fd fe86 	bl	80048ec <HAL_GetTick>
 8006be0:	0003      	movs	r3, r0
 8006be2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006be4:	e009      	b.n	8006bfa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be6:	f7fd fe81 	bl	80048ec <HAL_GetTick>
 8006bea:	0002      	movs	r2, r0
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	4a6a      	ldr	r2, [pc, #424]	; (8006d9c <HAL_RCC_ClockConfig+0x1f4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e0ca      	b.n	8006d90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006bfa:	4b67      	ldr	r3, [pc, #412]	; (8006d98 <HAL_RCC_ClockConfig+0x1f0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2207      	movs	r2, #7
 8006c00:	4013      	ands	r3, r2
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d1ee      	bne.n	8006be6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d015      	beq.n	8006c3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2204      	movs	r2, #4
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d006      	beq.n	8006c2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006c1c:	4b60      	ldr	r3, [pc, #384]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	4b5f      	ldr	r3, [pc, #380]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006c22:	21e0      	movs	r1, #224	; 0xe0
 8006c24:	01c9      	lsls	r1, r1, #7
 8006c26:	430a      	orrs	r2, r1
 8006c28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c2a:	4b5d      	ldr	r3, [pc, #372]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	4a5d      	ldr	r2, [pc, #372]	; (8006da4 <HAL_RCC_ClockConfig+0x1fc>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	0019      	movs	r1, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	4b59      	ldr	r3, [pc, #356]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2201      	movs	r2, #1
 8006c44:	4013      	ands	r3, r2
 8006c46:	d057      	beq.n	8006cf8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d107      	bne.n	8006c60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c50:	4b53      	ldr	r3, [pc, #332]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	029b      	lsls	r3, r3, #10
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d12b      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e097      	b.n	8006d90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d107      	bne.n	8006c78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c68:	4b4d      	ldr	r3, [pc, #308]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	2380      	movs	r3, #128	; 0x80
 8006c6e:	049b      	lsls	r3, r3, #18
 8006c70:	4013      	ands	r3, r2
 8006c72:	d11f      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e08b      	b.n	8006d90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d107      	bne.n	8006c90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c80:	4b47      	ldr	r3, [pc, #284]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d113      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e07f      	b.n	8006d90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d106      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c98:	4b41      	ldr	r3, [pc, #260]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d108      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e074      	b.n	8006d90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ca6:	4b3e      	ldr	r3, [pc, #248]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006caa:	2202      	movs	r2, #2
 8006cac:	4013      	ands	r3, r2
 8006cae:	d101      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e06d      	b.n	8006d90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cb4:	4b3a      	ldr	r3, [pc, #232]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	2207      	movs	r2, #7
 8006cba:	4393      	bics	r3, r2
 8006cbc:	0019      	movs	r1, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	4b37      	ldr	r3, [pc, #220]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc8:	f7fd fe10 	bl	80048ec <HAL_GetTick>
 8006ccc:	0003      	movs	r3, r0
 8006cce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd0:	e009      	b.n	8006ce6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cd2:	f7fd fe0b 	bl	80048ec <HAL_GetTick>
 8006cd6:	0002      	movs	r2, r0
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	4a2f      	ldr	r2, [pc, #188]	; (8006d9c <HAL_RCC_ClockConfig+0x1f4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e054      	b.n	8006d90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ce6:	4b2e      	ldr	r3, [pc, #184]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2238      	movs	r2, #56	; 0x38
 8006cec:	401a      	ands	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d1ec      	bne.n	8006cd2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cf8:	4b27      	ldr	r3, [pc, #156]	; (8006d98 <HAL_RCC_ClockConfig+0x1f0>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2207      	movs	r2, #7
 8006cfe:	4013      	ands	r3, r2
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d21e      	bcs.n	8006d44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d06:	4b24      	ldr	r3, [pc, #144]	; (8006d98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2207      	movs	r2, #7
 8006d0c:	4393      	bics	r3, r2
 8006d0e:	0019      	movs	r1, r3
 8006d10:	4b21      	ldr	r3, [pc, #132]	; (8006d98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d18:	f7fd fde8 	bl	80048ec <HAL_GetTick>
 8006d1c:	0003      	movs	r3, r0
 8006d1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d20:	e009      	b.n	8006d36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d22:	f7fd fde3 	bl	80048ec <HAL_GetTick>
 8006d26:	0002      	movs	r2, r0
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <HAL_RCC_ClockConfig+0x1f4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e02c      	b.n	8006d90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d36:	4b18      	ldr	r3, [pc, #96]	; (8006d98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2207      	movs	r2, #7
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d1ee      	bne.n	8006d22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2204      	movs	r2, #4
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d009      	beq.n	8006d62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006d4e:	4b14      	ldr	r3, [pc, #80]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4a15      	ldr	r2, [pc, #84]	; (8006da8 <HAL_RCC_ClockConfig+0x200>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	0019      	movs	r1, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	4b10      	ldr	r3, [pc, #64]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006d62:	f000 f829 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8006d66:	0001      	movs	r1, r0
 8006d68:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	0a1b      	lsrs	r3, r3, #8
 8006d6e:	220f      	movs	r2, #15
 8006d70:	401a      	ands	r2, r3
 8006d72:	4b0e      	ldr	r3, [pc, #56]	; (8006dac <HAL_RCC_ClockConfig+0x204>)
 8006d74:	0092      	lsls	r2, r2, #2
 8006d76:	58d3      	ldr	r3, [r2, r3]
 8006d78:	221f      	movs	r2, #31
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	000a      	movs	r2, r1
 8006d7e:	40da      	lsrs	r2, r3
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <HAL_RCC_ClockConfig+0x208>)
 8006d82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d84:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_RCC_ClockConfig+0x20c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f7fd fd53 	bl	8004834 <HAL_InitTick>
 8006d8e:	0003      	movs	r3, r0
}
 8006d90:	0018      	movs	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b004      	add	sp, #16
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40022000 	.word	0x40022000
 8006d9c:	00001388 	.word	0x00001388
 8006da0:	40021000 	.word	0x40021000
 8006da4:	fffff0ff 	.word	0xfffff0ff
 8006da8:	ffff8fff 	.word	0xffff8fff
 8006dac:	0800f0c8 	.word	0x0800f0c8
 8006db0:	20000000 	.word	0x20000000
 8006db4:	20000004 	.word	0x20000004

08006db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dbe:	4b3c      	ldr	r3, [pc, #240]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	2238      	movs	r2, #56	; 0x38
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	d10f      	bne.n	8006de8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006dc8:	4b39      	ldr	r3, [pc, #228]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	0adb      	lsrs	r3, r3, #11
 8006dce:	2207      	movs	r2, #7
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	409a      	lsls	r2, r3
 8006dd6:	0013      	movs	r3, r2
 8006dd8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	4835      	ldr	r0, [pc, #212]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006dde:	f7f9 f9b7 	bl	8000150 <__udivsi3>
 8006de2:	0003      	movs	r3, r0
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	e05d      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006de8:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2238      	movs	r2, #56	; 0x38
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d102      	bne.n	8006dfa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006df4:	4b30      	ldr	r3, [pc, #192]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	e054      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dfa:	4b2d      	ldr	r3, [pc, #180]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2238      	movs	r2, #56	; 0x38
 8006e00:	4013      	ands	r3, r2
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d138      	bne.n	8006e78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006e06:	4b2a      	ldr	r3, [pc, #168]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e10:	4b27      	ldr	r3, [pc, #156]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	091b      	lsrs	r3, r3, #4
 8006e16:	2207      	movs	r2, #7
 8006e18:	4013      	ands	r3, r2
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d10d      	bne.n	8006e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	4824      	ldr	r0, [pc, #144]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006e28:	f7f9 f992 	bl	8000150 <__udivsi3>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	0019      	movs	r1, r3
 8006e30:	4b1f      	ldr	r3, [pc, #124]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	0a1b      	lsrs	r3, r3, #8
 8006e36:	227f      	movs	r2, #127	; 0x7f
 8006e38:	4013      	ands	r3, r2
 8006e3a:	434b      	muls	r3, r1
 8006e3c:	617b      	str	r3, [r7, #20]
        break;
 8006e3e:	e00d      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	481c      	ldr	r0, [pc, #112]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006e44:	f7f9 f984 	bl	8000150 <__udivsi3>
 8006e48:	0003      	movs	r3, r0
 8006e4a:	0019      	movs	r1, r3
 8006e4c:	4b18      	ldr	r3, [pc, #96]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	0a1b      	lsrs	r3, r3, #8
 8006e52:	227f      	movs	r2, #127	; 0x7f
 8006e54:	4013      	ands	r3, r2
 8006e56:	434b      	muls	r3, r1
 8006e58:	617b      	str	r3, [r7, #20]
        break;
 8006e5a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006e5c:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	0f5b      	lsrs	r3, r3, #29
 8006e62:	2207      	movs	r2, #7
 8006e64:	4013      	ands	r3, r2
 8006e66:	3301      	adds	r3, #1
 8006e68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	6978      	ldr	r0, [r7, #20]
 8006e6e:	f7f9 f96f 	bl	8000150 <__udivsi3>
 8006e72:	0003      	movs	r3, r0
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	e015      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006e78:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	2238      	movs	r2, #56	; 0x38
 8006e7e:	4013      	ands	r3, r2
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	d103      	bne.n	8006e8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	613b      	str	r3, [r7, #16]
 8006e8a:	e00b      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006e8c:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2238      	movs	r2, #56	; 0x38
 8006e92:	4013      	ands	r3, r2
 8006e94:	2b18      	cmp	r3, #24
 8006e96:	d103      	bne.n	8006ea0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006e98:	23fa      	movs	r3, #250	; 0xfa
 8006e9a:	01db      	lsls	r3, r3, #7
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	e001      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ea4:	693b      	ldr	r3, [r7, #16]
}
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b006      	add	sp, #24
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	40021000 	.word	0x40021000
 8006eb4:	00f42400 	.word	0x00f42400
 8006eb8:	007a1200 	.word	0x007a1200

08006ebc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ec0:	4b02      	ldr	r3, [pc, #8]	; (8006ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
}
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	20000000 	.word	0x20000000

08006ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ed0:	b5b0      	push	{r4, r5, r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006ed4:	f7ff fff2 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8006ed8:	0004      	movs	r4, r0
 8006eda:	f7ff fb3f 	bl	800655c <LL_RCC_GetAPB1Prescaler>
 8006ede:	0003      	movs	r3, r0
 8006ee0:	0b1a      	lsrs	r2, r3, #12
 8006ee2:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ee4:	0092      	lsls	r2, r2, #2
 8006ee6:	58d3      	ldr	r3, [r2, r3]
 8006ee8:	221f      	movs	r2, #31
 8006eea:	4013      	ands	r3, r2
 8006eec:	40dc      	lsrs	r4, r3
 8006eee:	0023      	movs	r3, r4
}
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	0800f108 	.word	0x0800f108

08006efc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006f04:	2313      	movs	r3, #19
 8006f06:	18fb      	adds	r3, r7, r3
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f0c:	2312      	movs	r3, #18
 8006f0e:	18fb      	adds	r3, r7, r3
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	2380      	movs	r3, #128	; 0x80
 8006f1a:	029b      	lsls	r3, r3, #10
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d100      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006f20:	e0a3      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f22:	2011      	movs	r0, #17
 8006f24:	183b      	adds	r3, r7, r0
 8006f26:	2200      	movs	r2, #0
 8006f28:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f2a:	4ba5      	ldr	r3, [pc, #660]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f2e:	2380      	movs	r3, #128	; 0x80
 8006f30:	055b      	lsls	r3, r3, #21
 8006f32:	4013      	ands	r3, r2
 8006f34:	d110      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f36:	4ba2      	ldr	r3, [pc, #648]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f3a:	4ba1      	ldr	r3, [pc, #644]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f3c:	2180      	movs	r1, #128	; 0x80
 8006f3e:	0549      	lsls	r1, r1, #21
 8006f40:	430a      	orrs	r2, r1
 8006f42:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f44:	4b9e      	ldr	r3, [pc, #632]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	055b      	lsls	r3, r3, #21
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	60bb      	str	r3, [r7, #8]
 8006f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f52:	183b      	adds	r3, r7, r0
 8006f54:	2201      	movs	r2, #1
 8006f56:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f58:	4b9a      	ldr	r3, [pc, #616]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	4b99      	ldr	r3, [pc, #612]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006f5e:	2180      	movs	r1, #128	; 0x80
 8006f60:	0049      	lsls	r1, r1, #1
 8006f62:	430a      	orrs	r2, r1
 8006f64:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f66:	f7fd fcc1 	bl	80048ec <HAL_GetTick>
 8006f6a:	0003      	movs	r3, r0
 8006f6c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f6e:	e00b      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f70:	f7fd fcbc 	bl	80048ec <HAL_GetTick>
 8006f74:	0002      	movs	r2, r0
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d904      	bls.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006f7e:	2313      	movs	r3, #19
 8006f80:	18fb      	adds	r3, r7, r3
 8006f82:	2203      	movs	r2, #3
 8006f84:	701a      	strb	r2, [r3, #0]
        break;
 8006f86:	e005      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f88:	4b8e      	ldr	r3, [pc, #568]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	2380      	movs	r3, #128	; 0x80
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	4013      	ands	r3, r2
 8006f92:	d0ed      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006f94:	2313      	movs	r3, #19
 8006f96:	18fb      	adds	r3, r7, r3
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d154      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f9e:	4b88      	ldr	r3, [pc, #544]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fa2:	23c0      	movs	r3, #192	; 0xc0
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d019      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d014      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fba:	4b81      	ldr	r3, [pc, #516]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fbe:	4a82      	ldr	r2, [pc, #520]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fc4:	4b7e      	ldr	r3, [pc, #504]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fc8:	4b7d      	ldr	r3, [pc, #500]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fca:	2180      	movs	r1, #128	; 0x80
 8006fcc:	0249      	lsls	r1, r1, #9
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fd2:	4b7b      	ldr	r3, [pc, #492]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fd6:	4b7a      	ldr	r3, [pc, #488]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fd8:	497c      	ldr	r1, [pc, #496]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006fda:	400a      	ands	r2, r1
 8006fdc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006fde:	4b78      	ldr	r3, [pc, #480]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	4013      	ands	r3, r2
 8006fea:	d016      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fec:	f7fd fc7e 	bl	80048ec <HAL_GetTick>
 8006ff0:	0003      	movs	r3, r0
 8006ff2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ff4:	e00c      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff6:	f7fd fc79 	bl	80048ec <HAL_GetTick>
 8006ffa:	0002      	movs	r2, r0
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	4a73      	ldr	r2, [pc, #460]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d904      	bls.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007006:	2313      	movs	r3, #19
 8007008:	18fb      	adds	r3, r7, r3
 800700a:	2203      	movs	r2, #3
 800700c:	701a      	strb	r2, [r3, #0]
            break;
 800700e:	e004      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007010:	4b6b      	ldr	r3, [pc, #428]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007014:	2202      	movs	r2, #2
 8007016:	4013      	ands	r3, r2
 8007018:	d0ed      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800701a:	2313      	movs	r3, #19
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007024:	4b66      	ldr	r3, [pc, #408]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007028:	4a67      	ldr	r2, [pc, #412]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800702a:	4013      	ands	r3, r2
 800702c:	0019      	movs	r1, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007032:	4b63      	ldr	r3, [pc, #396]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007034:	430a      	orrs	r2, r1
 8007036:	65da      	str	r2, [r3, #92]	; 0x5c
 8007038:	e00c      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800703a:	2312      	movs	r3, #18
 800703c:	18fb      	adds	r3, r7, r3
 800703e:	2213      	movs	r2, #19
 8007040:	18ba      	adds	r2, r7, r2
 8007042:	7812      	ldrb	r2, [r2, #0]
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	e005      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	2312      	movs	r3, #18
 800704a:	18fb      	adds	r3, r7, r3
 800704c:	2213      	movs	r2, #19
 800704e:	18ba      	adds	r2, r7, r2
 8007050:	7812      	ldrb	r2, [r2, #0]
 8007052:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007054:	2311      	movs	r3, #17
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d105      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800705e:	4b58      	ldr	r3, [pc, #352]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007062:	4b57      	ldr	r3, [pc, #348]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007064:	495b      	ldr	r1, [pc, #364]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007066:	400a      	ands	r2, r1
 8007068:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2201      	movs	r2, #1
 8007070:	4013      	ands	r3, r2
 8007072:	d009      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007074:	4b52      	ldr	r3, [pc, #328]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007078:	2203      	movs	r2, #3
 800707a:	4393      	bics	r3, r2
 800707c:	0019      	movs	r1, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	4b4f      	ldr	r3, [pc, #316]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007084:	430a      	orrs	r2, r1
 8007086:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2210      	movs	r2, #16
 800708e:	4013      	ands	r3, r2
 8007090:	d009      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007092:	4b4b      	ldr	r3, [pc, #300]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	4a50      	ldr	r2, [pc, #320]	; (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007098:	4013      	ands	r3, r2
 800709a:	0019      	movs	r1, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	4b47      	ldr	r3, [pc, #284]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070a2:	430a      	orrs	r2, r1
 80070a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	2380      	movs	r3, #128	; 0x80
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4013      	ands	r3, r2
 80070b0:	d009      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070b2:	4b43      	ldr	r3, [pc, #268]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	4a49      	ldr	r2, [pc, #292]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	0019      	movs	r1, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	4b3f      	ldr	r3, [pc, #252]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070c2:	430a      	orrs	r2, r1
 80070c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	2380      	movs	r3, #128	; 0x80
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	4013      	ands	r3, r2
 80070d0:	d009      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070d2:	4b3b      	ldr	r3, [pc, #236]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d6:	4a42      	ldr	r2, [pc, #264]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80070d8:	4013      	ands	r3, r2
 80070da:	0019      	movs	r1, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699a      	ldr	r2, [r3, #24]
 80070e0:	4b37      	ldr	r3, [pc, #220]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070e2:	430a      	orrs	r2, r1
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2220      	movs	r2, #32
 80070ec:	4013      	ands	r3, r2
 80070ee:	d009      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070f0:	4b33      	ldr	r3, [pc, #204]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f4:	4a3b      	ldr	r2, [pc, #236]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	0019      	movs	r1, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	4b30      	ldr	r3, [pc, #192]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007100:	430a      	orrs	r2, r1
 8007102:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	2380      	movs	r3, #128	; 0x80
 800710a:	01db      	lsls	r3, r3, #7
 800710c:	4013      	ands	r3, r2
 800710e:	d015      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007110:	4b2b      	ldr	r3, [pc, #172]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	0899      	lsrs	r1, r3, #2
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	69da      	ldr	r2, [r3, #28]
 800711c:	4b28      	ldr	r3, [pc, #160]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800711e:	430a      	orrs	r2, r1
 8007120:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69da      	ldr	r2, [r3, #28]
 8007126:	2380      	movs	r3, #128	; 0x80
 8007128:	05db      	lsls	r3, r3, #23
 800712a:	429a      	cmp	r2, r3
 800712c:	d106      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800712e:	4b24      	ldr	r3, [pc, #144]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	4b23      	ldr	r3, [pc, #140]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007134:	2180      	movs	r1, #128	; 0x80
 8007136:	0249      	lsls	r1, r1, #9
 8007138:	430a      	orrs	r2, r1
 800713a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	2380      	movs	r3, #128	; 0x80
 8007142:	039b      	lsls	r3, r3, #14
 8007144:	4013      	ands	r3, r2
 8007146:	d016      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007148:	4b1d      	ldr	r3, [pc, #116]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800714a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714c:	4a26      	ldr	r2, [pc, #152]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800714e:	4013      	ands	r3, r2
 8007150:	0019      	movs	r1, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1a      	ldr	r2, [r3, #32]
 8007156:	4b1a      	ldr	r3, [pc, #104]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007158:	430a      	orrs	r2, r1
 800715a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1a      	ldr	r2, [r3, #32]
 8007160:	2380      	movs	r3, #128	; 0x80
 8007162:	03db      	lsls	r3, r3, #15
 8007164:	429a      	cmp	r2, r3
 8007166:	d106      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007168:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	4b14      	ldr	r3, [pc, #80]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800716e:	2180      	movs	r1, #128	; 0x80
 8007170:	0449      	lsls	r1, r1, #17
 8007172:	430a      	orrs	r2, r1
 8007174:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	2380      	movs	r3, #128	; 0x80
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	4013      	ands	r3, r2
 8007180:	d016      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007182:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007186:	4a19      	ldr	r2, [pc, #100]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007188:	4013      	ands	r3, r2
 800718a:	0019      	movs	r1, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007192:	430a      	orrs	r2, r1
 8007194:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	2380      	movs	r3, #128	; 0x80
 800719c:	01db      	lsls	r3, r3, #7
 800719e:	429a      	cmp	r2, r3
 80071a0:	d106      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80071a2:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071a8:	2180      	movs	r1, #128	; 0x80
 80071aa:	0249      	lsls	r1, r1, #9
 80071ac:	430a      	orrs	r2, r1
 80071ae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80071b0:	2312      	movs	r3, #18
 80071b2:	18fb      	adds	r3, r7, r3
 80071b4:	781b      	ldrb	r3, [r3, #0]
}
 80071b6:	0018      	movs	r0, r3
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b006      	add	sp, #24
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	40021000 	.word	0x40021000
 80071c4:	40007000 	.word	0x40007000
 80071c8:	fffffcff 	.word	0xfffffcff
 80071cc:	fffeffff 	.word	0xfffeffff
 80071d0:	00001388 	.word	0x00001388
 80071d4:	efffffff 	.word	0xefffffff
 80071d8:	fffff3ff 	.word	0xfffff3ff
 80071dc:	fff3ffff 	.word	0xfff3ffff
 80071e0:	ffcfffff 	.word	0xffcfffff
 80071e4:	ffffcfff 	.word	0xffffcfff
 80071e8:	ffbfffff 	.word	0xffbfffff
 80071ec:	ffff3fff 	.word	0xffff3fff

080071f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e04a      	b.n	8007298 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	223d      	movs	r2, #61	; 0x3d
 8007206:	5c9b      	ldrb	r3, [r3, r2]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d107      	bne.n	800721e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	223c      	movs	r2, #60	; 0x3c
 8007212:	2100      	movs	r1, #0
 8007214:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	0018      	movs	r0, r3
 800721a:	f7fd f879 	bl	8004310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	223d      	movs	r2, #61	; 0x3d
 8007222:	2102      	movs	r1, #2
 8007224:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3304      	adds	r3, #4
 800722e:	0019      	movs	r1, r3
 8007230:	0010      	movs	r0, r2
 8007232:	f000 fb33 	bl	800789c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2248      	movs	r2, #72	; 0x48
 800723a:	2101      	movs	r1, #1
 800723c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	223e      	movs	r2, #62	; 0x3e
 8007242:	2101      	movs	r1, #1
 8007244:	5499      	strb	r1, [r3, r2]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	223f      	movs	r2, #63	; 0x3f
 800724a:	2101      	movs	r1, #1
 800724c:	5499      	strb	r1, [r3, r2]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2240      	movs	r2, #64	; 0x40
 8007252:	2101      	movs	r1, #1
 8007254:	5499      	strb	r1, [r3, r2]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2241      	movs	r2, #65	; 0x41
 800725a:	2101      	movs	r1, #1
 800725c:	5499      	strb	r1, [r3, r2]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2242      	movs	r2, #66	; 0x42
 8007262:	2101      	movs	r1, #1
 8007264:	5499      	strb	r1, [r3, r2]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2243      	movs	r2, #67	; 0x43
 800726a:	2101      	movs	r1, #1
 800726c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2244      	movs	r2, #68	; 0x44
 8007272:	2101      	movs	r1, #1
 8007274:	5499      	strb	r1, [r3, r2]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2245      	movs	r2, #69	; 0x45
 800727a:	2101      	movs	r1, #1
 800727c:	5499      	strb	r1, [r3, r2]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2246      	movs	r2, #70	; 0x46
 8007282:	2101      	movs	r1, #1
 8007284:	5499      	strb	r1, [r3, r2]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2247      	movs	r2, #71	; 0x47
 800728a:	2101      	movs	r1, #1
 800728c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	223d      	movs	r2, #61	; 0x3d
 8007292:	2101      	movs	r1, #1
 8007294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	0018      	movs	r0, r3
 800729a:	46bd      	mov	sp, r7
 800729c:	b002      	add	sp, #8
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	223d      	movs	r2, #61	; 0x3d
 80072ac:	5c9b      	ldrb	r3, [r3, r2]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d001      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e03d      	b.n	8007334 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	223d      	movs	r2, #61	; 0x3d
 80072bc:	2102      	movs	r1, #2
 80072be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2101      	movs	r1, #1
 80072cc:	430a      	orrs	r2, r1
 80072ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a19      	ldr	r2, [pc, #100]	; (800733c <HAL_TIM_Base_Start_IT+0x9c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00a      	beq.n	80072f0 <HAL_TIM_Base_Start_IT+0x50>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	2380      	movs	r3, #128	; 0x80
 80072e0:	05db      	lsls	r3, r3, #23
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d004      	beq.n	80072f0 <HAL_TIM_Base_Start_IT+0x50>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a15      	ldr	r2, [pc, #84]	; (8007340 <HAL_TIM_Base_Start_IT+0xa0>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d116      	bne.n	800731e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	4a13      	ldr	r2, [pc, #76]	; (8007344 <HAL_TIM_Base_Start_IT+0xa4>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b06      	cmp	r3, #6
 8007300:	d016      	beq.n	8007330 <HAL_TIM_Base_Start_IT+0x90>
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	2380      	movs	r3, #128	; 0x80
 8007306:	025b      	lsls	r3, r3, #9
 8007308:	429a      	cmp	r2, r3
 800730a:	d011      	beq.n	8007330 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2101      	movs	r1, #1
 8007318:	430a      	orrs	r2, r1
 800731a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731c:	e008      	b.n	8007330 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2101      	movs	r1, #1
 800732a:	430a      	orrs	r2, r1
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	e000      	b.n	8007332 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007330:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	0018      	movs	r0, r3
 8007336:	46bd      	mov	sp, r7
 8007338:	b004      	add	sp, #16
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40012c00 	.word	0x40012c00
 8007340:	40000400 	.word	0x40000400
 8007344:	00010007 	.word	0x00010007

08007348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e04a      	b.n	80073f0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	223d      	movs	r2, #61	; 0x3d
 800735e:	5c9b      	ldrb	r3, [r3, r2]
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d107      	bne.n	8007376 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	223c      	movs	r2, #60	; 0x3c
 800736a:	2100      	movs	r1, #0
 800736c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	0018      	movs	r0, r3
 8007372:	f7fc ffaf 	bl	80042d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	223d      	movs	r2, #61	; 0x3d
 800737a:	2102      	movs	r1, #2
 800737c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3304      	adds	r3, #4
 8007386:	0019      	movs	r1, r3
 8007388:	0010      	movs	r0, r2
 800738a:	f000 fa87 	bl	800789c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2248      	movs	r2, #72	; 0x48
 8007392:	2101      	movs	r1, #1
 8007394:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	223e      	movs	r2, #62	; 0x3e
 800739a:	2101      	movs	r1, #1
 800739c:	5499      	strb	r1, [r3, r2]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	223f      	movs	r2, #63	; 0x3f
 80073a2:	2101      	movs	r1, #1
 80073a4:	5499      	strb	r1, [r3, r2]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2240      	movs	r2, #64	; 0x40
 80073aa:	2101      	movs	r1, #1
 80073ac:	5499      	strb	r1, [r3, r2]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2241      	movs	r2, #65	; 0x41
 80073b2:	2101      	movs	r1, #1
 80073b4:	5499      	strb	r1, [r3, r2]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2242      	movs	r2, #66	; 0x42
 80073ba:	2101      	movs	r1, #1
 80073bc:	5499      	strb	r1, [r3, r2]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2243      	movs	r2, #67	; 0x43
 80073c2:	2101      	movs	r1, #1
 80073c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2244      	movs	r2, #68	; 0x44
 80073ca:	2101      	movs	r1, #1
 80073cc:	5499      	strb	r1, [r3, r2]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2245      	movs	r2, #69	; 0x45
 80073d2:	2101      	movs	r1, #1
 80073d4:	5499      	strb	r1, [r3, r2]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2246      	movs	r2, #70	; 0x46
 80073da:	2101      	movs	r1, #1
 80073dc:	5499      	strb	r1, [r3, r2]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2247      	movs	r2, #71	; 0x47
 80073e2:	2101      	movs	r1, #1
 80073e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	223d      	movs	r2, #61	; 0x3d
 80073ea:	2101      	movs	r1, #1
 80073ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	0018      	movs	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b002      	add	sp, #8
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2202      	movs	r2, #2
 8007408:	4013      	ands	r3, r2
 800740a:	2b02      	cmp	r3, #2
 800740c:	d124      	bne.n	8007458 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2202      	movs	r2, #2
 8007416:	4013      	ands	r3, r2
 8007418:	2b02      	cmp	r3, #2
 800741a:	d11d      	bne.n	8007458 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2203      	movs	r2, #3
 8007422:	4252      	negs	r2, r2
 8007424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	2203      	movs	r2, #3
 8007434:	4013      	ands	r3, r2
 8007436:	d004      	beq.n	8007442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	0018      	movs	r0, r3
 800743c:	f000 fa16 	bl	800786c <HAL_TIM_IC_CaptureCallback>
 8007440:	e007      	b.n	8007452 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	0018      	movs	r0, r3
 8007446:	f000 fa09 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	0018      	movs	r0, r3
 800744e:	f000 fa15 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2204      	movs	r2, #4
 8007460:	4013      	ands	r3, r2
 8007462:	2b04      	cmp	r3, #4
 8007464:	d125      	bne.n	80074b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2204      	movs	r2, #4
 800746e:	4013      	ands	r3, r2
 8007470:	2b04      	cmp	r3, #4
 8007472:	d11e      	bne.n	80074b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2205      	movs	r2, #5
 800747a:	4252      	negs	r2, r2
 800747c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2202      	movs	r2, #2
 8007482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	23c0      	movs	r3, #192	; 0xc0
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4013      	ands	r3, r2
 8007490:	d004      	beq.n	800749c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	0018      	movs	r0, r3
 8007496:	f000 f9e9 	bl	800786c <HAL_TIM_IC_CaptureCallback>
 800749a:	e007      	b.n	80074ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	0018      	movs	r0, r3
 80074a0:	f000 f9dc 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	0018      	movs	r0, r3
 80074a8:	f000 f9e8 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2208      	movs	r2, #8
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d124      	bne.n	800750a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	2208      	movs	r2, #8
 80074c8:	4013      	ands	r3, r2
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d11d      	bne.n	800750a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2209      	movs	r2, #9
 80074d4:	4252      	negs	r2, r2
 80074d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2204      	movs	r2, #4
 80074dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	2203      	movs	r2, #3
 80074e6:	4013      	ands	r3, r2
 80074e8:	d004      	beq.n	80074f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	0018      	movs	r0, r3
 80074ee:	f000 f9bd 	bl	800786c <HAL_TIM_IC_CaptureCallback>
 80074f2:	e007      	b.n	8007504 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	0018      	movs	r0, r3
 80074f8:	f000 f9b0 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	0018      	movs	r0, r3
 8007500:	f000 f9bc 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2210      	movs	r2, #16
 8007512:	4013      	ands	r3, r2
 8007514:	2b10      	cmp	r3, #16
 8007516:	d125      	bne.n	8007564 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	2210      	movs	r2, #16
 8007520:	4013      	ands	r3, r2
 8007522:	2b10      	cmp	r3, #16
 8007524:	d11e      	bne.n	8007564 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2211      	movs	r2, #17
 800752c:	4252      	negs	r2, r2
 800752e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2208      	movs	r2, #8
 8007534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69da      	ldr	r2, [r3, #28]
 800753c:	23c0      	movs	r3, #192	; 0xc0
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4013      	ands	r3, r2
 8007542:	d004      	beq.n	800754e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	0018      	movs	r0, r3
 8007548:	f000 f990 	bl	800786c <HAL_TIM_IC_CaptureCallback>
 800754c:	e007      	b.n	800755e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	0018      	movs	r0, r3
 8007552:	f000 f983 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	0018      	movs	r0, r3
 800755a:	f000 f98f 	bl	800787c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2201      	movs	r2, #1
 800756c:	4013      	ands	r3, r2
 800756e:	2b01      	cmp	r3, #1
 8007570:	d10f      	bne.n	8007592 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	4013      	ands	r3, r2
 800757c:	2b01      	cmp	r3, #1
 800757e:	d108      	bne.n	8007592 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2202      	movs	r2, #2
 8007586:	4252      	negs	r2, r2
 8007588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	0018      	movs	r0, r3
 800758e:	f7fc f8cb 	bl	8003728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2280      	movs	r2, #128	; 0x80
 800759a:	4013      	ands	r3, r2
 800759c:	2b80      	cmp	r3, #128	; 0x80
 800759e:	d10f      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	2280      	movs	r2, #128	; 0x80
 80075a8:	4013      	ands	r3, r2
 80075aa:	2b80      	cmp	r3, #128	; 0x80
 80075ac:	d108      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2281      	movs	r2, #129	; 0x81
 80075b4:	4252      	negs	r2, r2
 80075b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	0018      	movs	r0, r3
 80075bc:	f000 fcf0 	bl	8007fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	691a      	ldr	r2, [r3, #16]
 80075c6:	2380      	movs	r3, #128	; 0x80
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	401a      	ands	r2, r3
 80075cc:	2380      	movs	r3, #128	; 0x80
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d10e      	bne.n	80075f2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	2280      	movs	r2, #128	; 0x80
 80075dc:	4013      	ands	r3, r2
 80075de:	2b80      	cmp	r3, #128	; 0x80
 80075e0:	d107      	bne.n	80075f2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a1c      	ldr	r2, [pc, #112]	; (8007658 <HAL_TIM_IRQHandler+0x260>)
 80075e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	0018      	movs	r0, r3
 80075ee:	f000 fcdf 	bl	8007fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2240      	movs	r2, #64	; 0x40
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	d10f      	bne.n	8007620 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2240      	movs	r2, #64	; 0x40
 8007608:	4013      	ands	r3, r2
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d108      	bne.n	8007620 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2241      	movs	r2, #65	; 0x41
 8007614:	4252      	negs	r2, r2
 8007616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	0018      	movs	r0, r3
 800761c:	f000 f936 	bl	800788c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2220      	movs	r2, #32
 8007628:	4013      	ands	r3, r2
 800762a:	2b20      	cmp	r3, #32
 800762c:	d10f      	bne.n	800764e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	4013      	ands	r3, r2
 8007638:	2b20      	cmp	r3, #32
 800763a:	d108      	bne.n	800764e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2221      	movs	r2, #33	; 0x21
 8007642:	4252      	negs	r2, r2
 8007644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	0018      	movs	r0, r3
 800764a:	f000 fca1 	bl	8007f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800764e:	46c0      	nop			; (mov r8, r8)
 8007650:	46bd      	mov	sp, r7
 8007652:	b002      	add	sp, #8
 8007654:	bd80      	pop	{r7, pc}
 8007656:	46c0      	nop			; (mov r8, r8)
 8007658:	fffffeff 	.word	0xfffffeff

0800765c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007668:	2317      	movs	r3, #23
 800766a:	18fb      	adds	r3, r7, r3
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	223c      	movs	r2, #60	; 0x3c
 8007674:	5c9b      	ldrb	r3, [r3, r2]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_TIM_PWM_ConfigChannel+0x22>
 800767a:	2302      	movs	r3, #2
 800767c:	e0e5      	b.n	800784a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	223c      	movs	r2, #60	; 0x3c
 8007682:	2101      	movs	r1, #1
 8007684:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b14      	cmp	r3, #20
 800768a:	d900      	bls.n	800768e <HAL_TIM_PWM_ConfigChannel+0x32>
 800768c:	e0d1      	b.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	009a      	lsls	r2, r3, #2
 8007692:	4b70      	ldr	r3, [pc, #448]	; (8007854 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007694:	18d3      	adds	r3, r2, r3
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	0011      	movs	r1, r2
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 f970 	bl	8007988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2108      	movs	r1, #8
 80076b4:	430a      	orrs	r2, r1
 80076b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2104      	movs	r1, #4
 80076c4:	438a      	bics	r2, r1
 80076c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6999      	ldr	r1, [r3, #24]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	619a      	str	r2, [r3, #24]
      break;
 80076da:	e0af      	b.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	0011      	movs	r1, r2
 80076e4:	0018      	movs	r0, r3
 80076e6:	f000 f9cf 	bl	8007a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2180      	movs	r1, #128	; 0x80
 80076f6:	0109      	lsls	r1, r1, #4
 80076f8:	430a      	orrs	r2, r1
 80076fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4954      	ldr	r1, [pc, #336]	; (8007858 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007708:	400a      	ands	r2, r1
 800770a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6999      	ldr	r1, [r3, #24]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	021a      	lsls	r2, r3, #8
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	619a      	str	r2, [r3, #24]
      break;
 8007720:	e08c      	b.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	0011      	movs	r1, r2
 800772a:	0018      	movs	r0, r3
 800772c:	f000 fa2a 	bl	8007b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69da      	ldr	r2, [r3, #28]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2108      	movs	r1, #8
 800773c:	430a      	orrs	r2, r1
 800773e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69da      	ldr	r2, [r3, #28]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2104      	movs	r1, #4
 800774c:	438a      	bics	r2, r1
 800774e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	69d9      	ldr	r1, [r3, #28]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	691a      	ldr	r2, [r3, #16]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	61da      	str	r2, [r3, #28]
      break;
 8007762:	e06b      	b.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	0011      	movs	r1, r2
 800776c:	0018      	movs	r0, r3
 800776e:	f000 fa8b 	bl	8007c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69da      	ldr	r2, [r3, #28]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2180      	movs	r1, #128	; 0x80
 800777e:	0109      	lsls	r1, r1, #4
 8007780:	430a      	orrs	r2, r1
 8007782:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	69da      	ldr	r2, [r3, #28]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4932      	ldr	r1, [pc, #200]	; (8007858 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007790:	400a      	ands	r2, r1
 8007792:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69d9      	ldr	r1, [r3, #28]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	021a      	lsls	r2, r3, #8
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	61da      	str	r2, [r3, #28]
      break;
 80077a8:	e048      	b.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	0011      	movs	r1, r2
 80077b2:	0018      	movs	r0, r3
 80077b4:	f000 facc 	bl	8007d50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2108      	movs	r1, #8
 80077c4:	430a      	orrs	r2, r1
 80077c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2104      	movs	r1, #4
 80077d4:	438a      	bics	r2, r1
 80077d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	691a      	ldr	r2, [r3, #16]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077ea:	e027      	b.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	0011      	movs	r1, r2
 80077f4:	0018      	movs	r0, r3
 80077f6:	f000 fb05 	bl	8007e04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2180      	movs	r1, #128	; 0x80
 8007806:	0109      	lsls	r1, r1, #4
 8007808:	430a      	orrs	r2, r1
 800780a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4910      	ldr	r1, [pc, #64]	; (8007858 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007818:	400a      	ands	r2, r1
 800781a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	021a      	lsls	r2, r3, #8
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007830:	e004      	b.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007832:	2317      	movs	r3, #23
 8007834:	18fb      	adds	r3, r7, r3
 8007836:	2201      	movs	r2, #1
 8007838:	701a      	strb	r2, [r3, #0]
      break;
 800783a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	223c      	movs	r2, #60	; 0x3c
 8007840:	2100      	movs	r1, #0
 8007842:	5499      	strb	r1, [r3, r2]

  return status;
 8007844:	2317      	movs	r3, #23
 8007846:	18fb      	adds	r3, r7, r3
 8007848:	781b      	ldrb	r3, [r3, #0]
}
 800784a:	0018      	movs	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	b006      	add	sp, #24
 8007850:	bd80      	pop	{r7, pc}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	0800f128 	.word	0x0800f128
 8007858:	fffffbff 	.word	0xfffffbff

0800785c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007864:	46c0      	nop			; (mov r8, r8)
 8007866:	46bd      	mov	sp, r7
 8007868:	b002      	add	sp, #8
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007874:	46c0      	nop			; (mov r8, r8)
 8007876:	46bd      	mov	sp, r7
 8007878:	b002      	add	sp, #8
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007884:	46c0      	nop			; (mov r8, r8)
 8007886:	46bd      	mov	sp, r7
 8007888:	b002      	add	sp, #8
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007894:	46c0      	nop			; (mov r8, r8)
 8007896:	46bd      	mov	sp, r7
 8007898:	b002      	add	sp, #8
 800789a:	bd80      	pop	{r7, pc}

0800789c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a30      	ldr	r2, [pc, #192]	; (8007970 <TIM_Base_SetConfig+0xd4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d008      	beq.n	80078c6 <TIM_Base_SetConfig+0x2a>
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	2380      	movs	r3, #128	; 0x80
 80078b8:	05db      	lsls	r3, r3, #23
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d003      	beq.n	80078c6 <TIM_Base_SetConfig+0x2a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2c      	ldr	r2, [pc, #176]	; (8007974 <TIM_Base_SetConfig+0xd8>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d108      	bne.n	80078d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2270      	movs	r2, #112	; 0x70
 80078ca:	4393      	bics	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a25      	ldr	r2, [pc, #148]	; (8007970 <TIM_Base_SetConfig+0xd4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d014      	beq.n	800790a <TIM_Base_SetConfig+0x6e>
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	2380      	movs	r3, #128	; 0x80
 80078e4:	05db      	lsls	r3, r3, #23
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d00f      	beq.n	800790a <TIM_Base_SetConfig+0x6e>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a21      	ldr	r2, [pc, #132]	; (8007974 <TIM_Base_SetConfig+0xd8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00b      	beq.n	800790a <TIM_Base_SetConfig+0x6e>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a20      	ldr	r2, [pc, #128]	; (8007978 <TIM_Base_SetConfig+0xdc>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d007      	beq.n	800790a <TIM_Base_SetConfig+0x6e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a1f      	ldr	r2, [pc, #124]	; (800797c <TIM_Base_SetConfig+0xe0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_Base_SetConfig+0x6e>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a1e      	ldr	r2, [pc, #120]	; (8007980 <TIM_Base_SetConfig+0xe4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d108      	bne.n	800791c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4a1d      	ldr	r2, [pc, #116]	; (8007984 <TIM_Base_SetConfig+0xe8>)
 800790e:	4013      	ands	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2280      	movs	r2, #128	; 0x80
 8007920:	4393      	bics	r3, r2
 8007922:	001a      	movs	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <TIM_Base_SetConfig+0xd4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d007      	beq.n	800795a <TIM_Base_SetConfig+0xbe>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a0b      	ldr	r2, [pc, #44]	; (800797c <TIM_Base_SetConfig+0xe0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_Base_SetConfig+0xbe>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a0a      	ldr	r2, [pc, #40]	; (8007980 <TIM_Base_SetConfig+0xe4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d103      	bne.n	8007962 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	691a      	ldr	r2, [r3, #16]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	615a      	str	r2, [r3, #20]
}
 8007968:	46c0      	nop			; (mov r8, r8)
 800796a:	46bd      	mov	sp, r7
 800796c:	b004      	add	sp, #16
 800796e:	bd80      	pop	{r7, pc}
 8007970:	40012c00 	.word	0x40012c00
 8007974:	40000400 	.word	0x40000400
 8007978:	40002000 	.word	0x40002000
 800797c:	40014400 	.word	0x40014400
 8007980:	40014800 	.word	0x40014800
 8007984:	fffffcff 	.word	0xfffffcff

08007988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	2201      	movs	r2, #1
 8007998:	4393      	bics	r3, r2
 800799a:	001a      	movs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a2e      	ldr	r2, [pc, #184]	; (8007a70 <TIM_OC1_SetConfig+0xe8>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2203      	movs	r2, #3
 80079be:	4393      	bics	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	2202      	movs	r2, #2
 80079d0:	4393      	bics	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	4313      	orrs	r3, r2
 80079dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a24      	ldr	r2, [pc, #144]	; (8007a74 <TIM_OC1_SetConfig+0xec>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d007      	beq.n	80079f6 <TIM_OC1_SetConfig+0x6e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a23      	ldr	r2, [pc, #140]	; (8007a78 <TIM_OC1_SetConfig+0xf0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d003      	beq.n	80079f6 <TIM_OC1_SetConfig+0x6e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a22      	ldr	r2, [pc, #136]	; (8007a7c <TIM_OC1_SetConfig+0xf4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d10c      	bne.n	8007a10 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2208      	movs	r2, #8
 80079fa:	4393      	bics	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	4393      	bics	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a18      	ldr	r2, [pc, #96]	; (8007a74 <TIM_OC1_SetConfig+0xec>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d007      	beq.n	8007a28 <TIM_OC1_SetConfig+0xa0>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <TIM_OC1_SetConfig+0xf0>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_OC1_SetConfig+0xa0>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a16      	ldr	r2, [pc, #88]	; (8007a7c <TIM_OC1_SetConfig+0xf4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d111      	bne.n	8007a4c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4a15      	ldr	r2, [pc, #84]	; (8007a80 <TIM_OC1_SetConfig+0xf8>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4a14      	ldr	r2, [pc, #80]	; (8007a84 <TIM_OC1_SetConfig+0xfc>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	621a      	str	r2, [r3, #32]
}
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	b006      	add	sp, #24
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	fffeff8f 	.word	0xfffeff8f
 8007a74:	40012c00 	.word	0x40012c00
 8007a78:	40014400 	.word	0x40014400
 8007a7c:	40014800 	.word	0x40014800
 8007a80:	fffffeff 	.word	0xfffffeff
 8007a84:	fffffdff 	.word	0xfffffdff

08007a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	2210      	movs	r2, #16
 8007a98:	4393      	bics	r3, r2
 8007a9a:	001a      	movs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4a2c      	ldr	r2, [pc, #176]	; (8007b68 <TIM_OC2_SetConfig+0xe0>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a2b      	ldr	r2, [pc, #172]	; (8007b6c <TIM_OC2_SetConfig+0xe4>)
 8007abe:	4013      	ands	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	021b      	lsls	r3, r3, #8
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	4393      	bics	r3, r2
 8007ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a22      	ldr	r2, [pc, #136]	; (8007b70 <TIM_OC2_SetConfig+0xe8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d10d      	bne.n	8007b06 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2280      	movs	r2, #128	; 0x80
 8007aee:	4393      	bics	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2240      	movs	r2, #64	; 0x40
 8007b02:	4393      	bics	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a19      	ldr	r2, [pc, #100]	; (8007b70 <TIM_OC2_SetConfig+0xe8>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d007      	beq.n	8007b1e <TIM_OC2_SetConfig+0x96>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a18      	ldr	r2, [pc, #96]	; (8007b74 <TIM_OC2_SetConfig+0xec>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_OC2_SetConfig+0x96>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <TIM_OC2_SetConfig+0xf0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d113      	bne.n	8007b46 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	4a16      	ldr	r2, [pc, #88]	; (8007b7c <TIM_OC2_SetConfig+0xf4>)
 8007b22:	4013      	ands	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <TIM_OC2_SetConfig+0xf8>)
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	621a      	str	r2, [r3, #32]
}
 8007b60:	46c0      	nop			; (mov r8, r8)
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b006      	add	sp, #24
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	feff8fff 	.word	0xfeff8fff
 8007b6c:	fffffcff 	.word	0xfffffcff
 8007b70:	40012c00 	.word	0x40012c00
 8007b74:	40014400 	.word	0x40014400
 8007b78:	40014800 	.word	0x40014800
 8007b7c:	fffffbff 	.word	0xfffffbff
 8007b80:	fffff7ff 	.word	0xfffff7ff

08007b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	4a33      	ldr	r2, [pc, #204]	; (8007c60 <TIM_OC3_SetConfig+0xdc>)
 8007b94:	401a      	ands	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a2d      	ldr	r2, [pc, #180]	; (8007c64 <TIM_OC3_SetConfig+0xe0>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	4393      	bics	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	4a27      	ldr	r2, [pc, #156]	; (8007c68 <TIM_OC3_SetConfig+0xe4>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a23      	ldr	r2, [pc, #140]	; (8007c6c <TIM_OC3_SetConfig+0xe8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d10d      	bne.n	8007bfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	4a22      	ldr	r2, [pc, #136]	; (8007c70 <TIM_OC3_SetConfig+0xec>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	4a1e      	ldr	r2, [pc, #120]	; (8007c74 <TIM_OC3_SetConfig+0xf0>)
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a1a      	ldr	r2, [pc, #104]	; (8007c6c <TIM_OC3_SetConfig+0xe8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d007      	beq.n	8007c16 <TIM_OC3_SetConfig+0x92>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a1b      	ldr	r2, [pc, #108]	; (8007c78 <TIM_OC3_SetConfig+0xf4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d003      	beq.n	8007c16 <TIM_OC3_SetConfig+0x92>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a1a      	ldr	r2, [pc, #104]	; (8007c7c <TIM_OC3_SetConfig+0xf8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d113      	bne.n	8007c3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4a19      	ldr	r2, [pc, #100]	; (8007c80 <TIM_OC3_SetConfig+0xfc>)
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	4a18      	ldr	r2, [pc, #96]	; (8007c84 <TIM_OC3_SetConfig+0x100>)
 8007c22:	4013      	ands	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	011b      	lsls	r3, r3, #4
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	621a      	str	r2, [r3, #32]
}
 8007c58:	46c0      	nop			; (mov r8, r8)
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	b006      	add	sp, #24
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	fffffeff 	.word	0xfffffeff
 8007c64:	fffeff8f 	.word	0xfffeff8f
 8007c68:	fffffdff 	.word	0xfffffdff
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	fffff7ff 	.word	0xfffff7ff
 8007c74:	fffffbff 	.word	0xfffffbff
 8007c78:	40014400 	.word	0x40014400
 8007c7c:	40014800 	.word	0x40014800
 8007c80:	ffffefff 	.word	0xffffefff
 8007c84:	ffffdfff 	.word	0xffffdfff

08007c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	4a26      	ldr	r2, [pc, #152]	; (8007d30 <TIM_OC4_SetConfig+0xa8>)
 8007c98:	401a      	ands	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4a20      	ldr	r2, [pc, #128]	; (8007d34 <TIM_OC4_SetConfig+0xac>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4a1f      	ldr	r2, [pc, #124]	; (8007d38 <TIM_OC4_SetConfig+0xb0>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	021b      	lsls	r3, r3, #8
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	4a1b      	ldr	r2, [pc, #108]	; (8007d3c <TIM_OC4_SetConfig+0xb4>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	031b      	lsls	r3, r3, #12
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a17      	ldr	r2, [pc, #92]	; (8007d40 <TIM_OC4_SetConfig+0xb8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d007      	beq.n	8007cf8 <TIM_OC4_SetConfig+0x70>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a16      	ldr	r2, [pc, #88]	; (8007d44 <TIM_OC4_SetConfig+0xbc>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_OC4_SetConfig+0x70>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <TIM_OC4_SetConfig+0xc0>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d109      	bne.n	8007d0c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	4a14      	ldr	r2, [pc, #80]	; (8007d4c <TIM_OC4_SetConfig+0xc4>)
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	019b      	lsls	r3, r3, #6
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	621a      	str	r2, [r3, #32]
}
 8007d26:	46c0      	nop			; (mov r8, r8)
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	b006      	add	sp, #24
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	ffffefff 	.word	0xffffefff
 8007d34:	feff8fff 	.word	0xfeff8fff
 8007d38:	fffffcff 	.word	0xfffffcff
 8007d3c:	ffffdfff 	.word	0xffffdfff
 8007d40:	40012c00 	.word	0x40012c00
 8007d44:	40014400 	.word	0x40014400
 8007d48:	40014800 	.word	0x40014800
 8007d4c:	ffffbfff 	.word	0xffffbfff

08007d50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	4a23      	ldr	r2, [pc, #140]	; (8007dec <TIM_OC5_SetConfig+0x9c>)
 8007d60:	401a      	ands	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4a1d      	ldr	r2, [pc, #116]	; (8007df0 <TIM_OC5_SetConfig+0xa0>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	4a19      	ldr	r2, [pc, #100]	; (8007df4 <TIM_OC5_SetConfig+0xa4>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	041b      	lsls	r3, r3, #16
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <TIM_OC5_SetConfig+0xa8>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d007      	beq.n	8007db6 <TIM_OC5_SetConfig+0x66>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a14      	ldr	r2, [pc, #80]	; (8007dfc <TIM_OC5_SetConfig+0xac>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d003      	beq.n	8007db6 <TIM_OC5_SetConfig+0x66>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <TIM_OC5_SetConfig+0xb0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d109      	bne.n	8007dca <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	4a0c      	ldr	r2, [pc, #48]	; (8007dec <TIM_OC5_SetConfig+0x9c>)
 8007dba:	4013      	ands	r3, r2
 8007dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	021b      	lsls	r3, r3, #8
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	621a      	str	r2, [r3, #32]
}
 8007de4:	46c0      	nop			; (mov r8, r8)
 8007de6:	46bd      	mov	sp, r7
 8007de8:	b006      	add	sp, #24
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	fffeffff 	.word	0xfffeffff
 8007df0:	fffeff8f 	.word	0xfffeff8f
 8007df4:	fffdffff 	.word	0xfffdffff
 8007df8:	40012c00 	.word	0x40012c00
 8007dfc:	40014400 	.word	0x40014400
 8007e00:	40014800 	.word	0x40014800

08007e04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	4a24      	ldr	r2, [pc, #144]	; (8007ea4 <TIM_OC6_SetConfig+0xa0>)
 8007e14:	401a      	ands	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <TIM_OC6_SetConfig+0xa4>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	4a1a      	ldr	r2, [pc, #104]	; (8007eac <TIM_OC6_SetConfig+0xa8>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	051b      	lsls	r3, r3, #20
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a16      	ldr	r2, [pc, #88]	; (8007eb0 <TIM_OC6_SetConfig+0xac>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d007      	beq.n	8007e6c <TIM_OC6_SetConfig+0x68>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a15      	ldr	r2, [pc, #84]	; (8007eb4 <TIM_OC6_SetConfig+0xb0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d003      	beq.n	8007e6c <TIM_OC6_SetConfig+0x68>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <TIM_OC6_SetConfig+0xb4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d109      	bne.n	8007e80 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	4a13      	ldr	r2, [pc, #76]	; (8007ebc <TIM_OC6_SetConfig+0xb8>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	029b      	lsls	r3, r3, #10
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	621a      	str	r2, [r3, #32]
}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b006      	add	sp, #24
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	ffefffff 	.word	0xffefffff
 8007ea8:	feff8fff 	.word	0xfeff8fff
 8007eac:	ffdfffff 	.word	0xffdfffff
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40014400 	.word	0x40014400
 8007eb8:	40014800 	.word	0x40014800
 8007ebc:	fffbffff 	.word	0xfffbffff

08007ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	223c      	movs	r2, #60	; 0x3c
 8007ece:	5c9b      	ldrb	r3, [r3, r2]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e050      	b.n	8007f7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	223c      	movs	r2, #60	; 0x3c
 8007edc:	2101      	movs	r1, #1
 8007ede:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	223d      	movs	r2, #61	; 0x3d
 8007ee4:	2102      	movs	r1, #2
 8007ee6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a21      	ldr	r2, [pc, #132]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d108      	bne.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4a20      	ldr	r2, [pc, #128]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f06:	4013      	ands	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2270      	movs	r2, #112	; 0x70
 8007f18:	4393      	bics	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a14      	ldr	r2, [pc, #80]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00a      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	2380      	movs	r3, #128	; 0x80
 8007f3e:	05db      	lsls	r3, r3, #23
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d004      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a10      	ldr	r2, [pc, #64]	; (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d10c      	bne.n	8007f68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2280      	movs	r2, #128	; 0x80
 8007f52:	4393      	bics	r3, r2
 8007f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	223d      	movs	r2, #61	; 0x3d
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	223c      	movs	r2, #60	; 0x3c
 8007f74:	2100      	movs	r1, #0
 8007f76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b004      	add	sp, #16
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	40012c00 	.word	0x40012c00
 8007f88:	ff0fffff 	.word	0xff0fffff
 8007f8c:	40000400 	.word	0x40000400

08007f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f98:	46c0      	nop			; (mov r8, r8)
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	b002      	add	sp, #8
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fa8:	46c0      	nop			; (mov r8, r8)
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b002      	add	sp, #8
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fb8:	46c0      	nop			; (mov r8, r8)
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b002      	add	sp, #8
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e046      	b.n	8008060 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2288      	movs	r2, #136	; 0x88
 8007fd6:	589b      	ldr	r3, [r3, r2]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d107      	bne.n	8007fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2284      	movs	r2, #132	; 0x84
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	f7fc fa14 	bl	8004414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2288      	movs	r2, #136	; 0x88
 8007ff0:	2124      	movs	r1, #36	; 0x24
 8007ff2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2101      	movs	r1, #1
 8008000:	438a      	bics	r2, r1
 8008002:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	0018      	movs	r0, r3
 8008008:	f000 fc78 	bl	80088fc <UART_SetConfig>
 800800c:	0003      	movs	r3, r0
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e024      	b.n	8008060 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	0018      	movs	r0, r3
 8008022:	f000 fee3 	bl	8008dec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	490d      	ldr	r1, [pc, #52]	; (8008068 <HAL_UART_Init+0xa8>)
 8008032:	400a      	ands	r2, r1
 8008034:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	212a      	movs	r1, #42	; 0x2a
 8008042:	438a      	bics	r2, r1
 8008044:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2101      	movs	r1, #1
 8008052:	430a      	orrs	r2, r1
 8008054:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	0018      	movs	r0, r3
 800805a:	f000 ff7b 	bl	8008f54 <UART_CheckIdleState>
 800805e:	0003      	movs	r3, r0
}
 8008060:	0018      	movs	r0, r3
 8008062:	46bd      	mov	sp, r7
 8008064:	b002      	add	sp, #8
 8008066:	bd80      	pop	{r7, pc}
 8008068:	ffffb7ff 	.word	0xffffb7ff

0800806c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08c      	sub	sp, #48	; 0x30
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	1dbb      	adds	r3, r7, #6
 8008078:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2288      	movs	r2, #136	; 0x88
 800807e:	589b      	ldr	r3, [r3, r2]
 8008080:	2b20      	cmp	r3, #32
 8008082:	d000      	beq.n	8008086 <HAL_UART_Transmit_IT+0x1a>
 8008084:	e08d      	b.n	80081a2 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <HAL_UART_Transmit_IT+0x28>
 800808c:	1dbb      	adds	r3, r7, #6
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e085      	b.n	80081a4 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	2380      	movs	r3, #128	; 0x80
 800809e:	015b      	lsls	r3, r3, #5
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d109      	bne.n	80080b8 <HAL_UART_Transmit_IT+0x4c>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2201      	movs	r2, #1
 80080b0:	4013      	ands	r3, r2
 80080b2:	d001      	beq.n	80080b8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e075      	b.n	80081a4 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1dba      	adds	r2, r7, #6
 80080c2:	2154      	movs	r1, #84	; 0x54
 80080c4:	8812      	ldrh	r2, [r2, #0]
 80080c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	1dba      	adds	r2, r7, #6
 80080cc:	2156      	movs	r1, #86	; 0x56
 80080ce:	8812      	ldrh	r2, [r2, #0]
 80080d0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2290      	movs	r2, #144	; 0x90
 80080dc:	2100      	movs	r1, #0
 80080de:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2288      	movs	r2, #136	; 0x88
 80080e4:	2121      	movs	r1, #33	; 0x21
 80080e6:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80080ec:	2380      	movs	r3, #128	; 0x80
 80080ee:	059b      	lsls	r3, r3, #22
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d12a      	bne.n	800814a <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	2380      	movs	r3, #128	; 0x80
 80080fa:	015b      	lsls	r3, r3, #5
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d107      	bne.n	8008110 <HAL_UART_Transmit_IT+0xa4>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d103      	bne.n	8008110 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4a28      	ldr	r2, [pc, #160]	; (80081ac <HAL_UART_Transmit_IT+0x140>)
 800810c:	679a      	str	r2, [r3, #120]	; 0x78
 800810e:	e002      	b.n	8008116 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a27      	ldr	r2, [pc, #156]	; (80081b0 <HAL_UART_Transmit_IT+0x144>)
 8008114:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008116:	f3ef 8310 	mrs	r3, PRIMASK
 800811a:	61fb      	str	r3, [r7, #28]
  return(result);
 800811c:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800811e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008120:	2301      	movs	r3, #1
 8008122:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	f383 8810 	msr	PRIMASK, r3
}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2180      	movs	r1, #128	; 0x80
 8008138:	0409      	lsls	r1, r1, #16
 800813a:	430a      	orrs	r2, r1
 800813c:	609a      	str	r2, [r3, #8]
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	f383 8810 	msr	PRIMASK, r3
}
 8008148:	e029      	b.n	800819e <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	2380      	movs	r3, #128	; 0x80
 8008150:	015b      	lsls	r3, r3, #5
 8008152:	429a      	cmp	r2, r3
 8008154:	d107      	bne.n	8008166 <HAL_UART_Transmit_IT+0xfa>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d103      	bne.n	8008166 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4a14      	ldr	r2, [pc, #80]	; (80081b4 <HAL_UART_Transmit_IT+0x148>)
 8008162:	679a      	str	r2, [r3, #120]	; 0x78
 8008164:	e002      	b.n	800816c <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a13      	ldr	r2, [pc, #76]	; (80081b8 <HAL_UART_Transmit_IT+0x14c>)
 800816a:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800816c:	f3ef 8310 	mrs	r3, PRIMASK
 8008170:	613b      	str	r3, [r7, #16]
  return(result);
 8008172:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008176:	2301      	movs	r3, #1
 8008178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f383 8810 	msr	PRIMASK, r3
}
 8008180:	46c0      	nop			; (mov r8, r8)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2180      	movs	r1, #128	; 0x80
 800818e:	430a      	orrs	r2, r1
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008194:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f383 8810 	msr	PRIMASK, r3
}
 800819c:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	e000      	b.n	80081a4 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 80081a2:	2302      	movs	r3, #2
  }
}
 80081a4:	0018      	movs	r0, r3
 80081a6:	46bd      	mov	sp, r7
 80081a8:	b00c      	add	sp, #48	; 0x30
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	08009721 	.word	0x08009721
 80081b0:	08009635 	.word	0x08009635
 80081b4:	08009577 	.word	0x08009577
 80081b8:	080094c3 	.word	0x080094c3

080081bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	1dbb      	adds	r3, r7, #6
 80081c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	228c      	movs	r2, #140	; 0x8c
 80081ce:	589b      	ldr	r3, [r3, r2]
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	d14a      	bne.n	800826a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_UART_Receive_IT+0x26>
 80081da:	1dbb      	adds	r3, r7, #6
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e042      	b.n	800826c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	2380      	movs	r3, #128	; 0x80
 80081ec:	015b      	lsls	r3, r3, #5
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d109      	bne.n	8008206 <HAL_UART_Receive_IT+0x4a>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2201      	movs	r2, #1
 80081fe:	4013      	ands	r3, r2
 8008200:	d001      	beq.n	8008206 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e032      	b.n	800826c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a18      	ldr	r2, [pc, #96]	; (8008274 <HAL_UART_Receive_IT+0xb8>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d020      	beq.n	8008258 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	2380      	movs	r3, #128	; 0x80
 800821e:	041b      	lsls	r3, r3, #16
 8008220:	4013      	ands	r3, r2
 8008222:	d019      	beq.n	8008258 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008224:	f3ef 8310 	mrs	r3, PRIMASK
 8008228:	613b      	str	r3, [r7, #16]
  return(result);
 800822a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800822c:	61fb      	str	r3, [r7, #28]
 800822e:	2301      	movs	r3, #1
 8008230:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f383 8810 	msr	PRIMASK, r3
}
 8008238:	46c0      	nop			; (mov r8, r8)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2180      	movs	r1, #128	; 0x80
 8008246:	04c9      	lsls	r1, r1, #19
 8008248:	430a      	orrs	r2, r1
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f383 8810 	msr	PRIMASK, r3
}
 8008256:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008258:	1dbb      	adds	r3, r7, #6
 800825a:	881a      	ldrh	r2, [r3, #0]
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	0018      	movs	r0, r3
 8008262:	f000 ff8d 	bl	8009180 <UART_Start_Receive_IT>
 8008266:	0003      	movs	r3, r0
 8008268:	e000      	b.n	800826c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800826a:	2302      	movs	r3, #2
  }
}
 800826c:	0018      	movs	r0, r3
 800826e:	46bd      	mov	sp, r7
 8008270:	b008      	add	sp, #32
 8008272:	bd80      	pop	{r7, pc}
 8008274:	40008000 	.word	0x40008000

08008278 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008278:	b5b0      	push	{r4, r5, r7, lr}
 800827a:	b0aa      	sub	sp, #168	; 0xa8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	22a4      	movs	r2, #164	; 0xa4
 8008288:	18b9      	adds	r1, r7, r2
 800828a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	20a0      	movs	r0, #160	; 0xa0
 8008294:	1839      	adds	r1, r7, r0
 8008296:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	249c      	movs	r4, #156	; 0x9c
 80082a0:	1939      	adds	r1, r7, r4
 80082a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082a4:	0011      	movs	r1, r2
 80082a6:	18bb      	adds	r3, r7, r2
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4aa2      	ldr	r2, [pc, #648]	; (8008534 <HAL_UART_IRQHandler+0x2bc>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	2298      	movs	r2, #152	; 0x98
 80082b0:	18bd      	adds	r5, r7, r2
 80082b2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80082b4:	18bb      	adds	r3, r7, r2
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d11a      	bne.n	80082f2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082bc:	187b      	adds	r3, r7, r1
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2220      	movs	r2, #32
 80082c2:	4013      	ands	r3, r2
 80082c4:	d015      	beq.n	80082f2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082c6:	183b      	adds	r3, r7, r0
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2220      	movs	r2, #32
 80082cc:	4013      	ands	r3, r2
 80082ce:	d105      	bne.n	80082dc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082d0:	193b      	adds	r3, r7, r4
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	2380      	movs	r3, #128	; 0x80
 80082d6:	055b      	lsls	r3, r3, #21
 80082d8:	4013      	ands	r3, r2
 80082da:	d00a      	beq.n	80082f2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d100      	bne.n	80082e6 <HAL_UART_IRQHandler+0x6e>
 80082e4:	e2dc      	b.n	80088a0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	0010      	movs	r0, r2
 80082ee:	4798      	blx	r3
      }
      return;
 80082f0:	e2d6      	b.n	80088a0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082f2:	2398      	movs	r3, #152	; 0x98
 80082f4:	18fb      	adds	r3, r7, r3
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d100      	bne.n	80082fe <HAL_UART_IRQHandler+0x86>
 80082fc:	e122      	b.n	8008544 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80082fe:	239c      	movs	r3, #156	; 0x9c
 8008300:	18fb      	adds	r3, r7, r3
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a8c      	ldr	r2, [pc, #560]	; (8008538 <HAL_UART_IRQHandler+0x2c0>)
 8008306:	4013      	ands	r3, r2
 8008308:	d106      	bne.n	8008318 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800830a:	23a0      	movs	r3, #160	; 0xa0
 800830c:	18fb      	adds	r3, r7, r3
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a8a      	ldr	r2, [pc, #552]	; (800853c <HAL_UART_IRQHandler+0x2c4>)
 8008312:	4013      	ands	r3, r2
 8008314:	d100      	bne.n	8008318 <HAL_UART_IRQHandler+0xa0>
 8008316:	e115      	b.n	8008544 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008318:	23a4      	movs	r3, #164	; 0xa4
 800831a:	18fb      	adds	r3, r7, r3
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2201      	movs	r2, #1
 8008320:	4013      	ands	r3, r2
 8008322:	d012      	beq.n	800834a <HAL_UART_IRQHandler+0xd2>
 8008324:	23a0      	movs	r3, #160	; 0xa0
 8008326:	18fb      	adds	r3, r7, r3
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	2380      	movs	r3, #128	; 0x80
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	4013      	ands	r3, r2
 8008330:	d00b      	beq.n	800834a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2201      	movs	r2, #1
 8008338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2290      	movs	r2, #144	; 0x90
 800833e:	589b      	ldr	r3, [r3, r2]
 8008340:	2201      	movs	r2, #1
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2190      	movs	r1, #144	; 0x90
 8008348:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800834a:	23a4      	movs	r3, #164	; 0xa4
 800834c:	18fb      	adds	r3, r7, r3
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2202      	movs	r2, #2
 8008352:	4013      	ands	r3, r2
 8008354:	d011      	beq.n	800837a <HAL_UART_IRQHandler+0x102>
 8008356:	239c      	movs	r3, #156	; 0x9c
 8008358:	18fb      	adds	r3, r7, r3
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2201      	movs	r2, #1
 800835e:	4013      	ands	r3, r2
 8008360:	d00b      	beq.n	800837a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2202      	movs	r2, #2
 8008368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2290      	movs	r2, #144	; 0x90
 800836e:	589b      	ldr	r3, [r3, r2]
 8008370:	2204      	movs	r2, #4
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2190      	movs	r1, #144	; 0x90
 8008378:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800837a:	23a4      	movs	r3, #164	; 0xa4
 800837c:	18fb      	adds	r3, r7, r3
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2204      	movs	r2, #4
 8008382:	4013      	ands	r3, r2
 8008384:	d011      	beq.n	80083aa <HAL_UART_IRQHandler+0x132>
 8008386:	239c      	movs	r3, #156	; 0x9c
 8008388:	18fb      	adds	r3, r7, r3
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2201      	movs	r2, #1
 800838e:	4013      	ands	r3, r2
 8008390:	d00b      	beq.n	80083aa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2204      	movs	r2, #4
 8008398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2290      	movs	r2, #144	; 0x90
 800839e:	589b      	ldr	r3, [r3, r2]
 80083a0:	2202      	movs	r2, #2
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2190      	movs	r1, #144	; 0x90
 80083a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083aa:	23a4      	movs	r3, #164	; 0xa4
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2208      	movs	r2, #8
 80083b2:	4013      	ands	r3, r2
 80083b4:	d017      	beq.n	80083e6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083b6:	23a0      	movs	r3, #160	; 0xa0
 80083b8:	18fb      	adds	r3, r7, r3
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2220      	movs	r2, #32
 80083be:	4013      	ands	r3, r2
 80083c0:	d105      	bne.n	80083ce <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80083c2:	239c      	movs	r3, #156	; 0x9c
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a5b      	ldr	r2, [pc, #364]	; (8008538 <HAL_UART_IRQHandler+0x2c0>)
 80083ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083cc:	d00b      	beq.n	80083e6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2208      	movs	r2, #8
 80083d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2290      	movs	r2, #144	; 0x90
 80083da:	589b      	ldr	r3, [r3, r2]
 80083dc:	2208      	movs	r2, #8
 80083de:	431a      	orrs	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2190      	movs	r1, #144	; 0x90
 80083e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083e6:	23a4      	movs	r3, #164	; 0xa4
 80083e8:	18fb      	adds	r3, r7, r3
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	2380      	movs	r3, #128	; 0x80
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	4013      	ands	r3, r2
 80083f2:	d013      	beq.n	800841c <HAL_UART_IRQHandler+0x1a4>
 80083f4:	23a0      	movs	r3, #160	; 0xa0
 80083f6:	18fb      	adds	r3, r7, r3
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	2380      	movs	r3, #128	; 0x80
 80083fc:	04db      	lsls	r3, r3, #19
 80083fe:	4013      	ands	r3, r2
 8008400:	d00c      	beq.n	800841c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2280      	movs	r2, #128	; 0x80
 8008408:	0112      	lsls	r2, r2, #4
 800840a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2290      	movs	r2, #144	; 0x90
 8008410:	589b      	ldr	r3, [r3, r2]
 8008412:	2220      	movs	r2, #32
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2190      	movs	r1, #144	; 0x90
 800841a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2290      	movs	r2, #144	; 0x90
 8008420:	589b      	ldr	r3, [r3, r2]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d100      	bne.n	8008428 <HAL_UART_IRQHandler+0x1b0>
 8008426:	e23d      	b.n	80088a4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008428:	23a4      	movs	r3, #164	; 0xa4
 800842a:	18fb      	adds	r3, r7, r3
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2220      	movs	r2, #32
 8008430:	4013      	ands	r3, r2
 8008432:	d015      	beq.n	8008460 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008434:	23a0      	movs	r3, #160	; 0xa0
 8008436:	18fb      	adds	r3, r7, r3
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2220      	movs	r2, #32
 800843c:	4013      	ands	r3, r2
 800843e:	d106      	bne.n	800844e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008440:	239c      	movs	r3, #156	; 0x9c
 8008442:	18fb      	adds	r3, r7, r3
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	2380      	movs	r3, #128	; 0x80
 8008448:	055b      	lsls	r3, r3, #21
 800844a:	4013      	ands	r3, r2
 800844c:	d008      	beq.n	8008460 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008452:	2b00      	cmp	r3, #0
 8008454:	d004      	beq.n	8008460 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	0010      	movs	r0, r2
 800845e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2290      	movs	r2, #144	; 0x90
 8008464:	589b      	ldr	r3, [r3, r2]
 8008466:	2194      	movs	r1, #148	; 0x94
 8008468:	187a      	adds	r2, r7, r1
 800846a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	2240      	movs	r2, #64	; 0x40
 8008474:	4013      	ands	r3, r2
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d004      	beq.n	8008484 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800847a:	187b      	adds	r3, r7, r1
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2228      	movs	r2, #40	; 0x28
 8008480:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008482:	d04c      	beq.n	800851e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	0018      	movs	r0, r3
 8008488:	f000 ff9e 	bl	80093c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	2240      	movs	r2, #64	; 0x40
 8008494:	4013      	ands	r3, r2
 8008496:	2b40      	cmp	r3, #64	; 0x40
 8008498:	d13c      	bne.n	8008514 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800849a:	f3ef 8310 	mrs	r3, PRIMASK
 800849e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80084a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084a2:	2090      	movs	r0, #144	; 0x90
 80084a4:	183a      	adds	r2, r7, r0
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	2301      	movs	r3, #1
 80084aa:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ae:	f383 8810 	msr	PRIMASK, r3
}
 80084b2:	46c0      	nop			; (mov r8, r8)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2140      	movs	r1, #64	; 0x40
 80084c0:	438a      	bics	r2, r1
 80084c2:	609a      	str	r2, [r3, #8]
 80084c4:	183b      	adds	r3, r7, r0
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084cc:	f383 8810 	msr	PRIMASK, r3
}
 80084d0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2280      	movs	r2, #128	; 0x80
 80084d6:	589b      	ldr	r3, [r3, r2]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d016      	beq.n	800850a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2280      	movs	r2, #128	; 0x80
 80084e0:	589b      	ldr	r3, [r3, r2]
 80084e2:	4a17      	ldr	r2, [pc, #92]	; (8008540 <HAL_UART_IRQHandler+0x2c8>)
 80084e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2280      	movs	r2, #128	; 0x80
 80084ea:	589b      	ldr	r3, [r3, r2]
 80084ec:	0018      	movs	r0, r3
 80084ee:	f7fd fb5b 	bl	8005ba8 <HAL_DMA_Abort_IT>
 80084f2:	1e03      	subs	r3, r0, #0
 80084f4:	d01c      	beq.n	8008530 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2280      	movs	r2, #128	; 0x80
 80084fa:	589b      	ldr	r3, [r3, r2]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	2180      	movs	r1, #128	; 0x80
 8008502:	5852      	ldr	r2, [r2, r1]
 8008504:	0010      	movs	r0, r2
 8008506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008508:	e012      	b.n	8008530 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	0018      	movs	r0, r3
 800850e:	f000 f9e1 	bl	80088d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008512:	e00d      	b.n	8008530 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	0018      	movs	r0, r3
 8008518:	f000 f9dc 	bl	80088d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800851c:	e008      	b.n	8008530 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	0018      	movs	r0, r3
 8008522:	f000 f9d7 	bl	80088d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2290      	movs	r2, #144	; 0x90
 800852a:	2100      	movs	r1, #0
 800852c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800852e:	e1b9      	b.n	80088a4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008530:	46c0      	nop			; (mov r8, r8)
    return;
 8008532:	e1b7      	b.n	80088a4 <HAL_UART_IRQHandler+0x62c>
 8008534:	0000080f 	.word	0x0000080f
 8008538:	10000001 	.word	0x10000001
 800853c:	04000120 	.word	0x04000120
 8008540:	08009495 	.word	0x08009495

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008548:	2b01      	cmp	r3, #1
 800854a:	d000      	beq.n	800854e <HAL_UART_IRQHandler+0x2d6>
 800854c:	e13e      	b.n	80087cc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800854e:	23a4      	movs	r3, #164	; 0xa4
 8008550:	18fb      	adds	r3, r7, r3
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2210      	movs	r2, #16
 8008556:	4013      	ands	r3, r2
 8008558:	d100      	bne.n	800855c <HAL_UART_IRQHandler+0x2e4>
 800855a:	e137      	b.n	80087cc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800855c:	23a0      	movs	r3, #160	; 0xa0
 800855e:	18fb      	adds	r3, r7, r3
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2210      	movs	r2, #16
 8008564:	4013      	ands	r3, r2
 8008566:	d100      	bne.n	800856a <HAL_UART_IRQHandler+0x2f2>
 8008568:	e130      	b.n	80087cc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2210      	movs	r2, #16
 8008570:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	2240      	movs	r2, #64	; 0x40
 800857a:	4013      	ands	r3, r2
 800857c:	2b40      	cmp	r3, #64	; 0x40
 800857e:	d000      	beq.n	8008582 <HAL_UART_IRQHandler+0x30a>
 8008580:	e0a4      	b.n	80086cc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2280      	movs	r2, #128	; 0x80
 8008586:	589b      	ldr	r3, [r3, r2]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	217e      	movs	r1, #126	; 0x7e
 800858e:	187b      	adds	r3, r7, r1
 8008590:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008592:	187b      	adds	r3, r7, r1
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d100      	bne.n	800859c <HAL_UART_IRQHandler+0x324>
 800859a:	e185      	b.n	80088a8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	225c      	movs	r2, #92	; 0x5c
 80085a0:	5a9b      	ldrh	r3, [r3, r2]
 80085a2:	187a      	adds	r2, r7, r1
 80085a4:	8812      	ldrh	r2, [r2, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d300      	bcc.n	80085ac <HAL_UART_IRQHandler+0x334>
 80085aa:	e17d      	b.n	80088a8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	187a      	adds	r2, r7, r1
 80085b0:	215e      	movs	r1, #94	; 0x5e
 80085b2:	8812      	ldrh	r2, [r2, #0]
 80085b4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2280      	movs	r2, #128	; 0x80
 80085ba:	589b      	ldr	r3, [r3, r2]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2220      	movs	r2, #32
 80085c2:	4013      	ands	r3, r2
 80085c4:	d170      	bne.n	80086a8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085c6:	f3ef 8310 	mrs	r3, PRIMASK
 80085ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80085d0:	2301      	movs	r3, #1
 80085d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d6:	f383 8810 	msr	PRIMASK, r3
}
 80085da:	46c0      	nop			; (mov r8, r8)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	49b4      	ldr	r1, [pc, #720]	; (80088b8 <HAL_UART_IRQHandler+0x640>)
 80085e8:	400a      	ands	r2, r1
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	f383 8810 	msr	PRIMASK, r3
}
 80085f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085f8:	f3ef 8310 	mrs	r3, PRIMASK
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80085fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008600:	677b      	str	r3, [r7, #116]	; 0x74
 8008602:	2301      	movs	r3, #1
 8008604:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008608:	f383 8810 	msr	PRIMASK, r3
}
 800860c:	46c0      	nop			; (mov r8, r8)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2101      	movs	r1, #1
 800861a:	438a      	bics	r2, r1
 800861c:	609a      	str	r2, [r3, #8]
 800861e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008620:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008624:	f383 8810 	msr	PRIMASK, r3
}
 8008628:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800862a:	f3ef 8310 	mrs	r3, PRIMASK
 800862e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008630:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008632:	673b      	str	r3, [r7, #112]	; 0x70
 8008634:	2301      	movs	r3, #1
 8008636:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800863a:	f383 8810 	msr	PRIMASK, r3
}
 800863e:	46c0      	nop			; (mov r8, r8)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2140      	movs	r1, #64	; 0x40
 800864c:	438a      	bics	r2, r1
 800864e:	609a      	str	r2, [r3, #8]
 8008650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008652:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008656:	f383 8810 	msr	PRIMASK, r3
}
 800865a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	228c      	movs	r2, #140	; 0x8c
 8008660:	2120      	movs	r1, #32
 8008662:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800866a:	f3ef 8310 	mrs	r3, PRIMASK
 800866e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008670:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008674:	2301      	movs	r3, #1
 8008676:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800867a:	f383 8810 	msr	PRIMASK, r3
}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2110      	movs	r1, #16
 800868c:	438a      	bics	r2, r1
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008692:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008696:	f383 8810 	msr	PRIMASK, r3
}
 800869a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2280      	movs	r2, #128	; 0x80
 80086a0:	589b      	ldr	r3, [r3, r2]
 80086a2:	0018      	movs	r0, r3
 80086a4:	f7fd fa1e 	bl	8005ae4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	225c      	movs	r2, #92	; 0x5c
 80086b2:	5a9a      	ldrh	r2, [r3, r2]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	215e      	movs	r1, #94	; 0x5e
 80086b8:	5a5b      	ldrh	r3, [r3, r1]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	0011      	movs	r1, r2
 80086c4:	0018      	movs	r0, r3
 80086c6:	f000 f90d 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086ca:	e0ed      	b.n	80088a8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	225c      	movs	r2, #92	; 0x5c
 80086d0:	5a99      	ldrh	r1, [r3, r2]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	225e      	movs	r2, #94	; 0x5e
 80086d6:	5a9b      	ldrh	r3, [r3, r2]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	208e      	movs	r0, #142	; 0x8e
 80086dc:	183b      	adds	r3, r7, r0
 80086de:	1a8a      	subs	r2, r1, r2
 80086e0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	225e      	movs	r2, #94	; 0x5e
 80086e6:	5a9b      	ldrh	r3, [r3, r2]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d100      	bne.n	80086f0 <HAL_UART_IRQHandler+0x478>
 80086ee:	e0dd      	b.n	80088ac <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80086f0:	183b      	adds	r3, r7, r0
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d100      	bne.n	80086fa <HAL_UART_IRQHandler+0x482>
 80086f8:	e0d8      	b.n	80088ac <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086fa:	f3ef 8310 	mrs	r3, PRIMASK
 80086fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008700:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008702:	2488      	movs	r4, #136	; 0x88
 8008704:	193a      	adds	r2, r7, r4
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	2301      	movs	r3, #1
 800870a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f383 8810 	msr	PRIMASK, r3
}
 8008712:	46c0      	nop			; (mov r8, r8)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4967      	ldr	r1, [pc, #412]	; (80088bc <HAL_UART_IRQHandler+0x644>)
 8008720:	400a      	ands	r2, r1
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	193b      	adds	r3, r7, r4
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f383 8810 	msr	PRIMASK, r3
}
 8008730:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008732:	f3ef 8310 	mrs	r3, PRIMASK
 8008736:	61bb      	str	r3, [r7, #24]
  return(result);
 8008738:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800873a:	2484      	movs	r4, #132	; 0x84
 800873c:	193a      	adds	r2, r7, r4
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	2301      	movs	r3, #1
 8008742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f383 8810 	msr	PRIMASK, r3
}
 800874a:	46c0      	nop			; (mov r8, r8)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	495a      	ldr	r1, [pc, #360]	; (80088c0 <HAL_UART_IRQHandler+0x648>)
 8008758:	400a      	ands	r2, r1
 800875a:	609a      	str	r2, [r3, #8]
 800875c:	193b      	adds	r3, r7, r4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	f383 8810 	msr	PRIMASK, r3
}
 8008768:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	228c      	movs	r2, #140	; 0x8c
 800876e:	2120      	movs	r1, #32
 8008770:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800877e:	f3ef 8310 	mrs	r3, PRIMASK
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008786:	2480      	movs	r4, #128	; 0x80
 8008788:	193a      	adds	r2, r7, r4
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	2301      	movs	r3, #1
 800878e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	f383 8810 	msr	PRIMASK, r3
}
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2110      	movs	r1, #16
 80087a4:	438a      	bics	r2, r1
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	193b      	adds	r3, r7, r4
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	f383 8810 	msr	PRIMASK, r3
}
 80087b4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2202      	movs	r2, #2
 80087ba:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087bc:	183b      	adds	r3, r7, r0
 80087be:	881a      	ldrh	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	0011      	movs	r1, r2
 80087c4:	0018      	movs	r0, r3
 80087c6:	f000 f88d 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087ca:	e06f      	b.n	80088ac <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087cc:	23a4      	movs	r3, #164	; 0xa4
 80087ce:	18fb      	adds	r3, r7, r3
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	2380      	movs	r3, #128	; 0x80
 80087d4:	035b      	lsls	r3, r3, #13
 80087d6:	4013      	ands	r3, r2
 80087d8:	d010      	beq.n	80087fc <HAL_UART_IRQHandler+0x584>
 80087da:	239c      	movs	r3, #156	; 0x9c
 80087dc:	18fb      	adds	r3, r7, r3
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	2380      	movs	r3, #128	; 0x80
 80087e2:	03db      	lsls	r3, r3, #15
 80087e4:	4013      	ands	r3, r2
 80087e6:	d009      	beq.n	80087fc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2280      	movs	r2, #128	; 0x80
 80087ee:	0352      	lsls	r2, r2, #13
 80087f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	0018      	movs	r0, r3
 80087f6:	f001 fc99 	bl	800a12c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087fa:	e05a      	b.n	80088b2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80087fc:	23a4      	movs	r3, #164	; 0xa4
 80087fe:	18fb      	adds	r3, r7, r3
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2280      	movs	r2, #128	; 0x80
 8008804:	4013      	ands	r3, r2
 8008806:	d016      	beq.n	8008836 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008808:	23a0      	movs	r3, #160	; 0xa0
 800880a:	18fb      	adds	r3, r7, r3
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2280      	movs	r2, #128	; 0x80
 8008810:	4013      	ands	r3, r2
 8008812:	d106      	bne.n	8008822 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008814:	239c      	movs	r3, #156	; 0x9c
 8008816:	18fb      	adds	r3, r7, r3
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	2380      	movs	r3, #128	; 0x80
 800881c:	041b      	lsls	r3, r3, #16
 800881e:	4013      	ands	r3, r2
 8008820:	d009      	beq.n	8008836 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008826:	2b00      	cmp	r3, #0
 8008828:	d042      	beq.n	80088b0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	0010      	movs	r0, r2
 8008832:	4798      	blx	r3
    }
    return;
 8008834:	e03c      	b.n	80088b0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008836:	23a4      	movs	r3, #164	; 0xa4
 8008838:	18fb      	adds	r3, r7, r3
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2240      	movs	r2, #64	; 0x40
 800883e:	4013      	ands	r3, r2
 8008840:	d00a      	beq.n	8008858 <HAL_UART_IRQHandler+0x5e0>
 8008842:	23a0      	movs	r3, #160	; 0xa0
 8008844:	18fb      	adds	r3, r7, r3
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2240      	movs	r2, #64	; 0x40
 800884a:	4013      	ands	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	0018      	movs	r0, r3
 8008852:	f000 ffdf 	bl	8009814 <UART_EndTransmit_IT>
    return;
 8008856:	e02c      	b.n	80088b2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008858:	23a4      	movs	r3, #164	; 0xa4
 800885a:	18fb      	adds	r3, r7, r3
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	2380      	movs	r3, #128	; 0x80
 8008860:	041b      	lsls	r3, r3, #16
 8008862:	4013      	ands	r3, r2
 8008864:	d00b      	beq.n	800887e <HAL_UART_IRQHandler+0x606>
 8008866:	23a0      	movs	r3, #160	; 0xa0
 8008868:	18fb      	adds	r3, r7, r3
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	2380      	movs	r3, #128	; 0x80
 800886e:	05db      	lsls	r3, r3, #23
 8008870:	4013      	ands	r3, r2
 8008872:	d004      	beq.n	800887e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	0018      	movs	r0, r3
 8008878:	f001 fc68 	bl	800a14c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800887c:	e019      	b.n	80088b2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800887e:	23a4      	movs	r3, #164	; 0xa4
 8008880:	18fb      	adds	r3, r7, r3
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	045b      	lsls	r3, r3, #17
 8008888:	4013      	ands	r3, r2
 800888a:	d012      	beq.n	80088b2 <HAL_UART_IRQHandler+0x63a>
 800888c:	23a0      	movs	r3, #160	; 0xa0
 800888e:	18fb      	adds	r3, r7, r3
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	da0d      	bge.n	80088b2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	0018      	movs	r0, r3
 800889a:	f001 fc4f 	bl	800a13c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800889e:	e008      	b.n	80088b2 <HAL_UART_IRQHandler+0x63a>
      return;
 80088a0:	46c0      	nop			; (mov r8, r8)
 80088a2:	e006      	b.n	80088b2 <HAL_UART_IRQHandler+0x63a>
    return;
 80088a4:	46c0      	nop			; (mov r8, r8)
 80088a6:	e004      	b.n	80088b2 <HAL_UART_IRQHandler+0x63a>
      return;
 80088a8:	46c0      	nop			; (mov r8, r8)
 80088aa:	e002      	b.n	80088b2 <HAL_UART_IRQHandler+0x63a>
      return;
 80088ac:	46c0      	nop			; (mov r8, r8)
 80088ae:	e000      	b.n	80088b2 <HAL_UART_IRQHandler+0x63a>
    return;
 80088b0:	46c0      	nop			; (mov r8, r8)
  }
}
 80088b2:	46bd      	mov	sp, r7
 80088b4:	b02a      	add	sp, #168	; 0xa8
 80088b6:	bdb0      	pop	{r4, r5, r7, pc}
 80088b8:	fffffeff 	.word	0xfffffeff
 80088bc:	fffffedf 	.word	0xfffffedf
 80088c0:	effffffe 	.word	0xeffffffe

080088c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80088cc:	46c0      	nop			; (mov r8, r8)
 80088ce:	46bd      	mov	sp, r7
 80088d0:	b002      	add	sp, #8
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088dc:	46c0      	nop			; (mov r8, r8)
 80088de:	46bd      	mov	sp, r7
 80088e0:	b002      	add	sp, #8
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	000a      	movs	r2, r1
 80088ee:	1cbb      	adds	r3, r7, #2
 80088f0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088f2:	46c0      	nop			; (mov r8, r8)
 80088f4:	46bd      	mov	sp, r7
 80088f6:	b002      	add	sp, #8
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088fc:	b5b0      	push	{r4, r5, r7, lr}
 80088fe:	b090      	sub	sp, #64	; 0x40
 8008900:	af00      	add	r7, sp, #0
 8008902:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008904:	231a      	movs	r3, #26
 8008906:	2220      	movs	r2, #32
 8008908:	189b      	adds	r3, r3, r2
 800890a:	19db      	adds	r3, r3, r7
 800890c:	2200      	movs	r2, #0
 800890e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	431a      	orrs	r2, r3
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	431a      	orrs	r2, r3
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	4313      	orrs	r3, r2
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4ac4      	ldr	r2, [pc, #784]	; (8008c40 <UART_SetConfig+0x344>)
 8008930:	4013      	ands	r3, r2
 8008932:	0019      	movs	r1, r3
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893a:	430b      	orrs	r3, r1
 800893c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	4abf      	ldr	r2, [pc, #764]	; (8008c44 <UART_SetConfig+0x348>)
 8008946:	4013      	ands	r3, r2
 8008948:	0018      	movs	r0, r3
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	68d9      	ldr	r1, [r3, #12]
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	0003      	movs	r3, r0
 8008954:	430b      	orrs	r3, r1
 8008956:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4ab9      	ldr	r2, [pc, #740]	; (8008c48 <UART_SetConfig+0x34c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d004      	beq.n	8008972 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800896e:	4313      	orrs	r3, r2
 8008970:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	4ab4      	ldr	r2, [pc, #720]	; (8008c4c <UART_SetConfig+0x350>)
 800897a:	4013      	ands	r3, r2
 800897c:	0019      	movs	r1, r3
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008984:	430b      	orrs	r3, r1
 8008986:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	220f      	movs	r2, #15
 8008990:	4393      	bics	r3, r2
 8008992:	0018      	movs	r0, r3
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	0003      	movs	r3, r0
 800899e:	430b      	orrs	r3, r1
 80089a0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4aaa      	ldr	r2, [pc, #680]	; (8008c50 <UART_SetConfig+0x354>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d131      	bne.n	8008a10 <UART_SetConfig+0x114>
 80089ac:	4ba9      	ldr	r3, [pc, #676]	; (8008c54 <UART_SetConfig+0x358>)
 80089ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b0:	2203      	movs	r2, #3
 80089b2:	4013      	ands	r3, r2
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d01d      	beq.n	80089f4 <UART_SetConfig+0xf8>
 80089b8:	d823      	bhi.n	8008a02 <UART_SetConfig+0x106>
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d00c      	beq.n	80089d8 <UART_SetConfig+0xdc>
 80089be:	d820      	bhi.n	8008a02 <UART_SetConfig+0x106>
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <UART_SetConfig+0xce>
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d00e      	beq.n	80089e6 <UART_SetConfig+0xea>
 80089c8:	e01b      	b.n	8008a02 <UART_SetConfig+0x106>
 80089ca:	231b      	movs	r3, #27
 80089cc:	2220      	movs	r2, #32
 80089ce:	189b      	adds	r3, r3, r2
 80089d0:	19db      	adds	r3, r3, r7
 80089d2:	2200      	movs	r2, #0
 80089d4:	701a      	strb	r2, [r3, #0]
 80089d6:	e071      	b.n	8008abc <UART_SetConfig+0x1c0>
 80089d8:	231b      	movs	r3, #27
 80089da:	2220      	movs	r2, #32
 80089dc:	189b      	adds	r3, r3, r2
 80089de:	19db      	adds	r3, r3, r7
 80089e0:	2202      	movs	r2, #2
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	e06a      	b.n	8008abc <UART_SetConfig+0x1c0>
 80089e6:	231b      	movs	r3, #27
 80089e8:	2220      	movs	r2, #32
 80089ea:	189b      	adds	r3, r3, r2
 80089ec:	19db      	adds	r3, r3, r7
 80089ee:	2204      	movs	r2, #4
 80089f0:	701a      	strb	r2, [r3, #0]
 80089f2:	e063      	b.n	8008abc <UART_SetConfig+0x1c0>
 80089f4:	231b      	movs	r3, #27
 80089f6:	2220      	movs	r2, #32
 80089f8:	189b      	adds	r3, r3, r2
 80089fa:	19db      	adds	r3, r3, r7
 80089fc:	2208      	movs	r2, #8
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	e05c      	b.n	8008abc <UART_SetConfig+0x1c0>
 8008a02:	231b      	movs	r3, #27
 8008a04:	2220      	movs	r2, #32
 8008a06:	189b      	adds	r3, r3, r2
 8008a08:	19db      	adds	r3, r3, r7
 8008a0a:	2210      	movs	r2, #16
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	e055      	b.n	8008abc <UART_SetConfig+0x1c0>
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a90      	ldr	r2, [pc, #576]	; (8008c58 <UART_SetConfig+0x35c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d106      	bne.n	8008a28 <UART_SetConfig+0x12c>
 8008a1a:	231b      	movs	r3, #27
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	189b      	adds	r3, r3, r2
 8008a20:	19db      	adds	r3, r3, r7
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e049      	b.n	8008abc <UART_SetConfig+0x1c0>
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a86      	ldr	r2, [pc, #536]	; (8008c48 <UART_SetConfig+0x34c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d13e      	bne.n	8008ab0 <UART_SetConfig+0x1b4>
 8008a32:	4b88      	ldr	r3, [pc, #544]	; (8008c54 <UART_SetConfig+0x358>)
 8008a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a36:	23c0      	movs	r3, #192	; 0xc0
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	22c0      	movs	r2, #192	; 0xc0
 8008a3e:	0112      	lsls	r2, r2, #4
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d027      	beq.n	8008a94 <UART_SetConfig+0x198>
 8008a44:	22c0      	movs	r2, #192	; 0xc0
 8008a46:	0112      	lsls	r2, r2, #4
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d82a      	bhi.n	8008aa2 <UART_SetConfig+0x1a6>
 8008a4c:	2280      	movs	r2, #128	; 0x80
 8008a4e:	0112      	lsls	r2, r2, #4
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d011      	beq.n	8008a78 <UART_SetConfig+0x17c>
 8008a54:	2280      	movs	r2, #128	; 0x80
 8008a56:	0112      	lsls	r2, r2, #4
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d822      	bhi.n	8008aa2 <UART_SetConfig+0x1a6>
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d004      	beq.n	8008a6a <UART_SetConfig+0x16e>
 8008a60:	2280      	movs	r2, #128	; 0x80
 8008a62:	00d2      	lsls	r2, r2, #3
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00e      	beq.n	8008a86 <UART_SetConfig+0x18a>
 8008a68:	e01b      	b.n	8008aa2 <UART_SetConfig+0x1a6>
 8008a6a:	231b      	movs	r3, #27
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	189b      	adds	r3, r3, r2
 8008a70:	19db      	adds	r3, r3, r7
 8008a72:	2200      	movs	r2, #0
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	e021      	b.n	8008abc <UART_SetConfig+0x1c0>
 8008a78:	231b      	movs	r3, #27
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	189b      	adds	r3, r3, r2
 8008a7e:	19db      	adds	r3, r3, r7
 8008a80:	2202      	movs	r2, #2
 8008a82:	701a      	strb	r2, [r3, #0]
 8008a84:	e01a      	b.n	8008abc <UART_SetConfig+0x1c0>
 8008a86:	231b      	movs	r3, #27
 8008a88:	2220      	movs	r2, #32
 8008a8a:	189b      	adds	r3, r3, r2
 8008a8c:	19db      	adds	r3, r3, r7
 8008a8e:	2204      	movs	r2, #4
 8008a90:	701a      	strb	r2, [r3, #0]
 8008a92:	e013      	b.n	8008abc <UART_SetConfig+0x1c0>
 8008a94:	231b      	movs	r3, #27
 8008a96:	2220      	movs	r2, #32
 8008a98:	189b      	adds	r3, r3, r2
 8008a9a:	19db      	adds	r3, r3, r7
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	701a      	strb	r2, [r3, #0]
 8008aa0:	e00c      	b.n	8008abc <UART_SetConfig+0x1c0>
 8008aa2:	231b      	movs	r3, #27
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	189b      	adds	r3, r3, r2
 8008aa8:	19db      	adds	r3, r3, r7
 8008aaa:	2210      	movs	r2, #16
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	e005      	b.n	8008abc <UART_SetConfig+0x1c0>
 8008ab0:	231b      	movs	r3, #27
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	189b      	adds	r3, r3, r2
 8008ab6:	19db      	adds	r3, r3, r7
 8008ab8:	2210      	movs	r2, #16
 8008aba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a61      	ldr	r2, [pc, #388]	; (8008c48 <UART_SetConfig+0x34c>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d000      	beq.n	8008ac8 <UART_SetConfig+0x1cc>
 8008ac6:	e092      	b.n	8008bee <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ac8:	231b      	movs	r3, #27
 8008aca:	2220      	movs	r2, #32
 8008acc:	189b      	adds	r3, r3, r2
 8008ace:	19db      	adds	r3, r3, r7
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	2b08      	cmp	r3, #8
 8008ad4:	d015      	beq.n	8008b02 <UART_SetConfig+0x206>
 8008ad6:	dc18      	bgt.n	8008b0a <UART_SetConfig+0x20e>
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d00d      	beq.n	8008af8 <UART_SetConfig+0x1fc>
 8008adc:	dc15      	bgt.n	8008b0a <UART_SetConfig+0x20e>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <UART_SetConfig+0x1ec>
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d005      	beq.n	8008af2 <UART_SetConfig+0x1f6>
 8008ae6:	e010      	b.n	8008b0a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae8:	f7fe f9f2 	bl	8006ed0 <HAL_RCC_GetPCLK1Freq>
 8008aec:	0003      	movs	r3, r0
 8008aee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008af0:	e014      	b.n	8008b1c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af2:	4b5a      	ldr	r3, [pc, #360]	; (8008c5c <UART_SetConfig+0x360>)
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008af6:	e011      	b.n	8008b1c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008af8:	f7fe f95e 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8008afc:	0003      	movs	r3, r0
 8008afe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b00:	e00c      	b.n	8008b1c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b02:	2380      	movs	r3, #128	; 0x80
 8008b04:	021b      	lsls	r3, r3, #8
 8008b06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b08:	e008      	b.n	8008b1c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008b0e:	231a      	movs	r3, #26
 8008b10:	2220      	movs	r2, #32
 8008b12:	189b      	adds	r3, r3, r2
 8008b14:	19db      	adds	r3, r3, r7
 8008b16:	2201      	movs	r2, #1
 8008b18:	701a      	strb	r2, [r3, #0]
        break;
 8008b1a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d100      	bne.n	8008b24 <UART_SetConfig+0x228>
 8008b22:	e147      	b.n	8008db4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b28:	4b4d      	ldr	r3, [pc, #308]	; (8008c60 <UART_SetConfig+0x364>)
 8008b2a:	0052      	lsls	r2, r2, #1
 8008b2c:	5ad3      	ldrh	r3, [r2, r3]
 8008b2e:	0019      	movs	r1, r3
 8008b30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008b32:	f7f7 fb0d 	bl	8000150 <__udivsi3>
 8008b36:	0003      	movs	r3, r0
 8008b38:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	0013      	movs	r3, r2
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	189b      	adds	r3, r3, r2
 8008b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d305      	bcc.n	8008b56 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d906      	bls.n	8008b64 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8008b56:	231a      	movs	r3, #26
 8008b58:	2220      	movs	r2, #32
 8008b5a:	189b      	adds	r3, r3, r2
 8008b5c:	19db      	adds	r3, r3, r7
 8008b5e:	2201      	movs	r2, #1
 8008b60:	701a      	strb	r2, [r3, #0]
 8008b62:	e127      	b.n	8008db4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b66:	61bb      	str	r3, [r7, #24]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	61fb      	str	r3, [r7, #28]
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b70:	4b3b      	ldr	r3, [pc, #236]	; (8008c60 <UART_SetConfig+0x364>)
 8008b72:	0052      	lsls	r2, r2, #1
 8008b74:	5ad3      	ldrh	r3, [r2, r3]
 8008b76:	613b      	str	r3, [r7, #16]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	69b8      	ldr	r0, [r7, #24]
 8008b82:	69f9      	ldr	r1, [r7, #28]
 8008b84:	f7f7 fcd2 	bl	800052c <__aeabi_uldivmod>
 8008b88:	0002      	movs	r2, r0
 8008b8a:	000b      	movs	r3, r1
 8008b8c:	0e11      	lsrs	r1, r2, #24
 8008b8e:	021d      	lsls	r5, r3, #8
 8008b90:	430d      	orrs	r5, r1
 8008b92:	0214      	lsls	r4, r2, #8
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	085b      	lsrs	r3, r3, #1
 8008b9a:	60bb      	str	r3, [r7, #8]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	68b8      	ldr	r0, [r7, #8]
 8008ba2:	68f9      	ldr	r1, [r7, #12]
 8008ba4:	1900      	adds	r0, r0, r4
 8008ba6:	4169      	adcs	r1, r5
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	603b      	str	r3, [r7, #0]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	607b      	str	r3, [r7, #4]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f7f7 fcb9 	bl	800052c <__aeabi_uldivmod>
 8008bba:	0002      	movs	r2, r0
 8008bbc:	000b      	movs	r3, r1
 8008bbe:	0013      	movs	r3, r2
 8008bc0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc4:	23c0      	movs	r3, #192	; 0xc0
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d309      	bcc.n	8008be0 <UART_SetConfig+0x2e4>
 8008bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bce:	2380      	movs	r3, #128	; 0x80
 8008bd0:	035b      	lsls	r3, r3, #13
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d204      	bcs.n	8008be0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bdc:	60da      	str	r2, [r3, #12]
 8008bde:	e0e9      	b.n	8008db4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8008be0:	231a      	movs	r3, #26
 8008be2:	2220      	movs	r2, #32
 8008be4:	189b      	adds	r3, r3, r2
 8008be6:	19db      	adds	r3, r3, r7
 8008be8:	2201      	movs	r2, #1
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	e0e2      	b.n	8008db4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	69da      	ldr	r2, [r3, #28]
 8008bf2:	2380      	movs	r3, #128	; 0x80
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d000      	beq.n	8008bfc <UART_SetConfig+0x300>
 8008bfa:	e083      	b.n	8008d04 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8008bfc:	231b      	movs	r3, #27
 8008bfe:	2220      	movs	r2, #32
 8008c00:	189b      	adds	r3, r3, r2
 8008c02:	19db      	adds	r3, r3, r7
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d015      	beq.n	8008c36 <UART_SetConfig+0x33a>
 8008c0a:	dc2b      	bgt.n	8008c64 <UART_SetConfig+0x368>
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d00d      	beq.n	8008c2c <UART_SetConfig+0x330>
 8008c10:	dc28      	bgt.n	8008c64 <UART_SetConfig+0x368>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <UART_SetConfig+0x320>
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d005      	beq.n	8008c26 <UART_SetConfig+0x32a>
 8008c1a:	e023      	b.n	8008c64 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c1c:	f7fe f958 	bl	8006ed0 <HAL_RCC_GetPCLK1Freq>
 8008c20:	0003      	movs	r3, r0
 8008c22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c24:	e027      	b.n	8008c76 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c26:	4b0d      	ldr	r3, [pc, #52]	; (8008c5c <UART_SetConfig+0x360>)
 8008c28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c2a:	e024      	b.n	8008c76 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c2c:	f7fe f8c4 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8008c30:	0003      	movs	r3, r0
 8008c32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c34:	e01f      	b.n	8008c76 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c36:	2380      	movs	r3, #128	; 0x80
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c3c:	e01b      	b.n	8008c76 <UART_SetConfig+0x37a>
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	cfff69f3 	.word	0xcfff69f3
 8008c44:	ffffcfff 	.word	0xffffcfff
 8008c48:	40008000 	.word	0x40008000
 8008c4c:	11fff4ff 	.word	0x11fff4ff
 8008c50:	40013800 	.word	0x40013800
 8008c54:	40021000 	.word	0x40021000
 8008c58:	40004400 	.word	0x40004400
 8008c5c:	00f42400 	.word	0x00f42400
 8008c60:	0800f17c 	.word	0x0800f17c
      default:
        pclk = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008c68:	231a      	movs	r3, #26
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	189b      	adds	r3, r3, r2
 8008c6e:	19db      	adds	r3, r3, r7
 8008c70:	2201      	movs	r2, #1
 8008c72:	701a      	strb	r2, [r3, #0]
        break;
 8008c74:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d100      	bne.n	8008c7e <UART_SetConfig+0x382>
 8008c7c:	e09a      	b.n	8008db4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c82:	4b58      	ldr	r3, [pc, #352]	; (8008de4 <UART_SetConfig+0x4e8>)
 8008c84:	0052      	lsls	r2, r2, #1
 8008c86:	5ad3      	ldrh	r3, [r2, r3]
 8008c88:	0019      	movs	r1, r3
 8008c8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008c8c:	f7f7 fa60 	bl	8000150 <__udivsi3>
 8008c90:	0003      	movs	r3, r0
 8008c92:	005a      	lsls	r2, r3, #1
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	085b      	lsrs	r3, r3, #1
 8008c9a:	18d2      	adds	r2, r2, r3
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	0019      	movs	r1, r3
 8008ca2:	0010      	movs	r0, r2
 8008ca4:	f7f7 fa54 	bl	8000150 <__udivsi3>
 8008ca8:	0003      	movs	r3, r0
 8008caa:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	2b0f      	cmp	r3, #15
 8008cb0:	d921      	bls.n	8008cf6 <UART_SetConfig+0x3fa>
 8008cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cb4:	2380      	movs	r3, #128	; 0x80
 8008cb6:	025b      	lsls	r3, r3, #9
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d21c      	bcs.n	8008cf6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	200e      	movs	r0, #14
 8008cc2:	2420      	movs	r4, #32
 8008cc4:	1903      	adds	r3, r0, r4
 8008cc6:	19db      	adds	r3, r3, r7
 8008cc8:	210f      	movs	r1, #15
 8008cca:	438a      	bics	r2, r1
 8008ccc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	085b      	lsrs	r3, r3, #1
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	2207      	movs	r2, #7
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	b299      	uxth	r1, r3
 8008cda:	1903      	adds	r3, r0, r4
 8008cdc:	19db      	adds	r3, r3, r7
 8008cde:	1902      	adds	r2, r0, r4
 8008ce0:	19d2      	adds	r2, r2, r7
 8008ce2:	8812      	ldrh	r2, [r2, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	1902      	adds	r2, r0, r4
 8008cee:	19d2      	adds	r2, r2, r7
 8008cf0:	8812      	ldrh	r2, [r2, #0]
 8008cf2:	60da      	str	r2, [r3, #12]
 8008cf4:	e05e      	b.n	8008db4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8008cf6:	231a      	movs	r3, #26
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	189b      	adds	r3, r3, r2
 8008cfc:	19db      	adds	r3, r3, r7
 8008cfe:	2201      	movs	r2, #1
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e057      	b.n	8008db4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d04:	231b      	movs	r3, #27
 8008d06:	2220      	movs	r2, #32
 8008d08:	189b      	adds	r3, r3, r2
 8008d0a:	19db      	adds	r3, r3, r7
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	d015      	beq.n	8008d3e <UART_SetConfig+0x442>
 8008d12:	dc18      	bgt.n	8008d46 <UART_SetConfig+0x44a>
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d00d      	beq.n	8008d34 <UART_SetConfig+0x438>
 8008d18:	dc15      	bgt.n	8008d46 <UART_SetConfig+0x44a>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <UART_SetConfig+0x428>
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d005      	beq.n	8008d2e <UART_SetConfig+0x432>
 8008d22:	e010      	b.n	8008d46 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d24:	f7fe f8d4 	bl	8006ed0 <HAL_RCC_GetPCLK1Freq>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d2c:	e014      	b.n	8008d58 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d2e:	4b2e      	ldr	r3, [pc, #184]	; (8008de8 <UART_SetConfig+0x4ec>)
 8008d30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d32:	e011      	b.n	8008d58 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d34:	f7fe f840 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8008d38:	0003      	movs	r3, r0
 8008d3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d3c:	e00c      	b.n	8008d58 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d3e:	2380      	movs	r3, #128	; 0x80
 8008d40:	021b      	lsls	r3, r3, #8
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d44:	e008      	b.n	8008d58 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008d4a:	231a      	movs	r3, #26
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	189b      	adds	r3, r3, r2
 8008d50:	19db      	adds	r3, r3, r7
 8008d52:	2201      	movs	r2, #1
 8008d54:	701a      	strb	r2, [r3, #0]
        break;
 8008d56:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d02a      	beq.n	8008db4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d62:	4b20      	ldr	r3, [pc, #128]	; (8008de4 <UART_SetConfig+0x4e8>)
 8008d64:	0052      	lsls	r2, r2, #1
 8008d66:	5ad3      	ldrh	r3, [r2, r3]
 8008d68:	0019      	movs	r1, r3
 8008d6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008d6c:	f7f7 f9f0 	bl	8000150 <__udivsi3>
 8008d70:	0003      	movs	r3, r0
 8008d72:	001a      	movs	r2, r3
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	085b      	lsrs	r3, r3, #1
 8008d7a:	18d2      	adds	r2, r2, r3
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	0019      	movs	r1, r3
 8008d82:	0010      	movs	r0, r2
 8008d84:	f7f7 f9e4 	bl	8000150 <__udivsi3>
 8008d88:	0003      	movs	r3, r0
 8008d8a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	2b0f      	cmp	r3, #15
 8008d90:	d90a      	bls.n	8008da8 <UART_SetConfig+0x4ac>
 8008d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d94:	2380      	movs	r3, #128	; 0x80
 8008d96:	025b      	lsls	r3, r3, #9
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d205      	bcs.n	8008da8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	60da      	str	r2, [r3, #12]
 8008da6:	e005      	b.n	8008db4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8008da8:	231a      	movs	r3, #26
 8008daa:	2220      	movs	r2, #32
 8008dac:	189b      	adds	r3, r3, r2
 8008dae:	19db      	adds	r3, r3, r7
 8008db0:	2201      	movs	r2, #1
 8008db2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	226a      	movs	r2, #106	; 0x6a
 8008db8:	2101      	movs	r1, #1
 8008dba:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	2268      	movs	r2, #104	; 0x68
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	2200      	movs	r2, #0
 8008dce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008dd0:	231a      	movs	r3, #26
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	189b      	adds	r3, r3, r2
 8008dd6:	19db      	adds	r3, r3, r7
 8008dd8:	781b      	ldrb	r3, [r3, #0]
}
 8008dda:	0018      	movs	r0, r3
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	b010      	add	sp, #64	; 0x40
 8008de0:	bdb0      	pop	{r4, r5, r7, pc}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	0800f17c 	.word	0x0800f17c
 8008de8:	00f42400 	.word	0x00f42400

08008dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	2201      	movs	r2, #1
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	d00b      	beq.n	8008e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	4a4a      	ldr	r2, [pc, #296]	; (8008f30 <UART_AdvFeatureConfig+0x144>)
 8008e06:	4013      	ands	r3, r2
 8008e08:	0019      	movs	r1, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	d00b      	beq.n	8008e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	4a43      	ldr	r2, [pc, #268]	; (8008f34 <UART_AdvFeatureConfig+0x148>)
 8008e28:	4013      	ands	r3, r2
 8008e2a:	0019      	movs	r1, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	430a      	orrs	r2, r1
 8008e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3c:	2204      	movs	r2, #4
 8008e3e:	4013      	ands	r3, r2
 8008e40:	d00b      	beq.n	8008e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	4a3b      	ldr	r2, [pc, #236]	; (8008f38 <UART_AdvFeatureConfig+0x14c>)
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	0019      	movs	r1, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5e:	2208      	movs	r2, #8
 8008e60:	4013      	ands	r3, r2
 8008e62:	d00b      	beq.n	8008e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	4a34      	ldr	r2, [pc, #208]	; (8008f3c <UART_AdvFeatureConfig+0x150>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	0019      	movs	r1, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e80:	2210      	movs	r2, #16
 8008e82:	4013      	ands	r3, r2
 8008e84:	d00b      	beq.n	8008e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	4a2c      	ldr	r2, [pc, #176]	; (8008f40 <UART_AdvFeatureConfig+0x154>)
 8008e8e:	4013      	ands	r3, r2
 8008e90:	0019      	movs	r1, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	d00b      	beq.n	8008ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	4a25      	ldr	r2, [pc, #148]	; (8008f44 <UART_AdvFeatureConfig+0x158>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	0019      	movs	r1, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec4:	2240      	movs	r2, #64	; 0x40
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	d01d      	beq.n	8008f06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	4a1d      	ldr	r2, [pc, #116]	; (8008f48 <UART_AdvFeatureConfig+0x15c>)
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	0019      	movs	r1, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ee6:	2380      	movs	r3, #128	; 0x80
 8008ee8:	035b      	lsls	r3, r3, #13
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d10b      	bne.n	8008f06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	4a15      	ldr	r2, [pc, #84]	; (8008f4c <UART_AdvFeatureConfig+0x160>)
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	0019      	movs	r1, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0a:	2280      	movs	r2, #128	; 0x80
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	d00b      	beq.n	8008f28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	4a0e      	ldr	r2, [pc, #56]	; (8008f50 <UART_AdvFeatureConfig+0x164>)
 8008f18:	4013      	ands	r3, r2
 8008f1a:	0019      	movs	r1, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	430a      	orrs	r2, r1
 8008f26:	605a      	str	r2, [r3, #4]
  }
}
 8008f28:	46c0      	nop			; (mov r8, r8)
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	b002      	add	sp, #8
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	fffdffff 	.word	0xfffdffff
 8008f34:	fffeffff 	.word	0xfffeffff
 8008f38:	fffbffff 	.word	0xfffbffff
 8008f3c:	ffff7fff 	.word	0xffff7fff
 8008f40:	ffffefff 	.word	0xffffefff
 8008f44:	ffffdfff 	.word	0xffffdfff
 8008f48:	ffefffff 	.word	0xffefffff
 8008f4c:	ff9fffff 	.word	0xff9fffff
 8008f50:	fff7ffff 	.word	0xfff7ffff

08008f54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2290      	movs	r2, #144	; 0x90
 8008f60:	2100      	movs	r1, #0
 8008f62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f64:	f7fb fcc2 	bl	80048ec <HAL_GetTick>
 8008f68:	0003      	movs	r3, r0
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2208      	movs	r2, #8
 8008f74:	4013      	ands	r3, r2
 8008f76:	2b08      	cmp	r3, #8
 8008f78:	d10c      	bne.n	8008f94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2280      	movs	r2, #128	; 0x80
 8008f7e:	0391      	lsls	r1, r2, #14
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	4a1a      	ldr	r2, [pc, #104]	; (8008fec <UART_CheckIdleState+0x98>)
 8008f84:	9200      	str	r2, [sp, #0]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f000 f832 	bl	8008ff0 <UART_WaitOnFlagUntilTimeout>
 8008f8c:	1e03      	subs	r3, r0, #0
 8008f8e:	d001      	beq.n	8008f94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e026      	b.n	8008fe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d10c      	bne.n	8008fbc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2280      	movs	r2, #128	; 0x80
 8008fa6:	03d1      	lsls	r1, r2, #15
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	4a10      	ldr	r2, [pc, #64]	; (8008fec <UART_CheckIdleState+0x98>)
 8008fac:	9200      	str	r2, [sp, #0]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f000 f81e 	bl	8008ff0 <UART_WaitOnFlagUntilTimeout>
 8008fb4:	1e03      	subs	r3, r0, #0
 8008fb6:	d001      	beq.n	8008fbc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e012      	b.n	8008fe2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2288      	movs	r2, #136	; 0x88
 8008fc0:	2120      	movs	r1, #32
 8008fc2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	228c      	movs	r2, #140	; 0x8c
 8008fc8:	2120      	movs	r1, #32
 8008fca:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2284      	movs	r2, #132	; 0x84
 8008fdc:	2100      	movs	r1, #0
 8008fde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	b004      	add	sp, #16
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	46c0      	nop			; (mov r8, r8)
 8008fec:	01ffffff 	.word	0x01ffffff

08008ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b094      	sub	sp, #80	; 0x50
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	1dfb      	adds	r3, r7, #7
 8008ffe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009000:	e0a7      	b.n	8009152 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009004:	3301      	adds	r3, #1
 8009006:	d100      	bne.n	800900a <UART_WaitOnFlagUntilTimeout+0x1a>
 8009008:	e0a3      	b.n	8009152 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800900a:	f7fb fc6f 	bl	80048ec <HAL_GetTick>
 800900e:	0002      	movs	r2, r0
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009016:	429a      	cmp	r2, r3
 8009018:	d302      	bcc.n	8009020 <UART_WaitOnFlagUntilTimeout+0x30>
 800901a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800901c:	2b00      	cmp	r3, #0
 800901e:	d13f      	bne.n	80090a0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009020:	f3ef 8310 	mrs	r3, PRIMASK
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009028:	647b      	str	r3, [r7, #68]	; 0x44
 800902a:	2301      	movs	r3, #1
 800902c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009030:	f383 8810 	msr	PRIMASK, r3
}
 8009034:	46c0      	nop			; (mov r8, r8)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	494e      	ldr	r1, [pc, #312]	; (800917c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009042:	400a      	ands	r2, r1
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009048:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	f383 8810 	msr	PRIMASK, r3
}
 8009050:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009052:	f3ef 8310 	mrs	r3, PRIMASK
 8009056:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905a:	643b      	str	r3, [r7, #64]	; 0x40
 800905c:	2301      	movs	r3, #1
 800905e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	f383 8810 	msr	PRIMASK, r3
}
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2101      	movs	r1, #1
 8009074:	438a      	bics	r2, r1
 8009076:	609a      	str	r2, [r3, #8]
 8009078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907e:	f383 8810 	msr	PRIMASK, r3
}
 8009082:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2288      	movs	r2, #136	; 0x88
 8009088:	2120      	movs	r1, #32
 800908a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	228c      	movs	r2, #140	; 0x8c
 8009090:	2120      	movs	r1, #32
 8009092:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2284      	movs	r2, #132	; 0x84
 8009098:	2100      	movs	r1, #0
 800909a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e069      	b.n	8009174 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2204      	movs	r2, #4
 80090a8:	4013      	ands	r3, r2
 80090aa:	d052      	beq.n	8009152 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69da      	ldr	r2, [r3, #28]
 80090b2:	2380      	movs	r3, #128	; 0x80
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	401a      	ands	r2, r3
 80090b8:	2380      	movs	r3, #128	; 0x80
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	429a      	cmp	r2, r3
 80090be:	d148      	bne.n	8009152 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2280      	movs	r2, #128	; 0x80
 80090c6:	0112      	lsls	r2, r2, #4
 80090c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ca:	f3ef 8310 	mrs	r3, PRIMASK
 80090ce:	613b      	str	r3, [r7, #16]
  return(result);
 80090d0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80090d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090d4:	2301      	movs	r3, #1
 80090d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f383 8810 	msr	PRIMASK, r3
}
 80090de:	46c0      	nop			; (mov r8, r8)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4924      	ldr	r1, [pc, #144]	; (800917c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80090ec:	400a      	ands	r2, r1
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	f383 8810 	msr	PRIMASK, r3
}
 80090fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009100:	61fb      	str	r3, [r7, #28]
  return(result);
 8009102:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009104:	64bb      	str	r3, [r7, #72]	; 0x48
 8009106:	2301      	movs	r3, #1
 8009108:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	f383 8810 	msr	PRIMASK, r3
}
 8009110:	46c0      	nop			; (mov r8, r8)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2101      	movs	r1, #1
 800911e:	438a      	bics	r2, r1
 8009120:	609a      	str	r2, [r3, #8]
 8009122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	f383 8810 	msr	PRIMASK, r3
}
 800912c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2288      	movs	r2, #136	; 0x88
 8009132:	2120      	movs	r1, #32
 8009134:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	228c      	movs	r2, #140	; 0x8c
 800913a:	2120      	movs	r1, #32
 800913c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2290      	movs	r2, #144	; 0x90
 8009142:	2120      	movs	r1, #32
 8009144:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2284      	movs	r2, #132	; 0x84
 800914a:	2100      	movs	r1, #0
 800914c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e010      	b.n	8009174 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	4013      	ands	r3, r2
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	425a      	negs	r2, r3
 8009162:	4153      	adcs	r3, r2
 8009164:	b2db      	uxtb	r3, r3
 8009166:	001a      	movs	r2, r3
 8009168:	1dfb      	adds	r3, r7, #7
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d100      	bne.n	8009172 <UART_WaitOnFlagUntilTimeout+0x182>
 8009170:	e747      	b.n	8009002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	0018      	movs	r0, r3
 8009176:	46bd      	mov	sp, r7
 8009178:	b014      	add	sp, #80	; 0x50
 800917a:	bd80      	pop	{r7, pc}
 800917c:	fffffe5f 	.word	0xfffffe5f

08009180 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b098      	sub	sp, #96	; 0x60
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	1dbb      	adds	r3, r7, #6
 800918c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	1dba      	adds	r2, r7, #6
 8009198:	215c      	movs	r1, #92	; 0x5c
 800919a:	8812      	ldrh	r2, [r2, #0]
 800919c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	1dba      	adds	r2, r7, #6
 80091a2:	215e      	movs	r1, #94	; 0x5e
 80091a4:	8812      	ldrh	r2, [r2, #0]
 80091a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	2380      	movs	r3, #128	; 0x80
 80091b4:	015b      	lsls	r3, r3, #5
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d10d      	bne.n	80091d6 <UART_Start_Receive_IT+0x56>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d104      	bne.n	80091cc <UART_Start_Receive_IT+0x4c>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2260      	movs	r2, #96	; 0x60
 80091c6:	497b      	ldr	r1, [pc, #492]	; (80093b4 <UART_Start_Receive_IT+0x234>)
 80091c8:	5299      	strh	r1, [r3, r2]
 80091ca:	e02e      	b.n	800922a <UART_Start_Receive_IT+0xaa>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2260      	movs	r2, #96	; 0x60
 80091d0:	21ff      	movs	r1, #255	; 0xff
 80091d2:	5299      	strh	r1, [r3, r2]
 80091d4:	e029      	b.n	800922a <UART_Start_Receive_IT+0xaa>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10d      	bne.n	80091fa <UART_Start_Receive_IT+0x7a>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d104      	bne.n	80091f0 <UART_Start_Receive_IT+0x70>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2260      	movs	r2, #96	; 0x60
 80091ea:	21ff      	movs	r1, #255	; 0xff
 80091ec:	5299      	strh	r1, [r3, r2]
 80091ee:	e01c      	b.n	800922a <UART_Start_Receive_IT+0xaa>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2260      	movs	r2, #96	; 0x60
 80091f4:	217f      	movs	r1, #127	; 0x7f
 80091f6:	5299      	strh	r1, [r3, r2]
 80091f8:	e017      	b.n	800922a <UART_Start_Receive_IT+0xaa>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	689a      	ldr	r2, [r3, #8]
 80091fe:	2380      	movs	r3, #128	; 0x80
 8009200:	055b      	lsls	r3, r3, #21
 8009202:	429a      	cmp	r2, r3
 8009204:	d10d      	bne.n	8009222 <UART_Start_Receive_IT+0xa2>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d104      	bne.n	8009218 <UART_Start_Receive_IT+0x98>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2260      	movs	r2, #96	; 0x60
 8009212:	217f      	movs	r1, #127	; 0x7f
 8009214:	5299      	strh	r1, [r3, r2]
 8009216:	e008      	b.n	800922a <UART_Start_Receive_IT+0xaa>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2260      	movs	r2, #96	; 0x60
 800921c:	213f      	movs	r1, #63	; 0x3f
 800921e:	5299      	strh	r1, [r3, r2]
 8009220:	e003      	b.n	800922a <UART_Start_Receive_IT+0xaa>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2260      	movs	r2, #96	; 0x60
 8009226:	2100      	movs	r1, #0
 8009228:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2290      	movs	r2, #144	; 0x90
 800922e:	2100      	movs	r1, #0
 8009230:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	228c      	movs	r2, #140	; 0x8c
 8009236:	2122      	movs	r1, #34	; 0x22
 8009238:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800923a:	f3ef 8310 	mrs	r3, PRIMASK
 800923e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8009240:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009242:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009244:	2301      	movs	r3, #1
 8009246:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924a:	f383 8810 	msr	PRIMASK, r3
}
 800924e:	46c0      	nop			; (mov r8, r8)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689a      	ldr	r2, [r3, #8]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2101      	movs	r1, #1
 800925c:	430a      	orrs	r2, r1
 800925e:	609a      	str	r2, [r3, #8]
 8009260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009262:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009266:	f383 8810 	msr	PRIMASK, r3
}
 800926a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009270:	2380      	movs	r3, #128	; 0x80
 8009272:	059b      	lsls	r3, r3, #22
 8009274:	429a      	cmp	r2, r3
 8009276:	d150      	bne.n	800931a <UART_Start_Receive_IT+0x19a>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2268      	movs	r2, #104	; 0x68
 800927c:	5a9b      	ldrh	r3, [r3, r2]
 800927e:	1dba      	adds	r2, r7, #6
 8009280:	8812      	ldrh	r2, [r2, #0]
 8009282:	429a      	cmp	r2, r3
 8009284:	d349      	bcc.n	800931a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	2380      	movs	r3, #128	; 0x80
 800928c:	015b      	lsls	r3, r3, #5
 800928e:	429a      	cmp	r2, r3
 8009290:	d107      	bne.n	80092a2 <UART_Start_Receive_IT+0x122>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d103      	bne.n	80092a2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4a46      	ldr	r2, [pc, #280]	; (80093b8 <UART_Start_Receive_IT+0x238>)
 800929e:	675a      	str	r2, [r3, #116]	; 0x74
 80092a0:	e002      	b.n	80092a8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4a45      	ldr	r2, [pc, #276]	; (80093bc <UART_Start_Receive_IT+0x23c>)
 80092a6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d019      	beq.n	80092e4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092b0:	f3ef 8310 	mrs	r3, PRIMASK
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80092b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80092ba:	2301      	movs	r3, #1
 80092bc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	f383 8810 	msr	PRIMASK, r3
}
 80092c4:	46c0      	nop			; (mov r8, r8)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2180      	movs	r1, #128	; 0x80
 80092d2:	0049      	lsls	r1, r1, #1
 80092d4:	430a      	orrs	r2, r1
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092de:	f383 8810 	msr	PRIMASK, r3
}
 80092e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092e4:	f3ef 8310 	mrs	r3, PRIMASK
 80092e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092ec:	657b      	str	r3, [r7, #84]	; 0x54
 80092ee:	2301      	movs	r3, #1
 80092f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	f383 8810 	msr	PRIMASK, r3
}
 80092f8:	46c0      	nop			; (mov r8, r8)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2180      	movs	r1, #128	; 0x80
 8009306:	0549      	lsls	r1, r1, #21
 8009308:	430a      	orrs	r2, r1
 800930a:	609a      	str	r2, [r3, #8]
 800930c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800930e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009312:	f383 8810 	msr	PRIMASK, r3
}
 8009316:	46c0      	nop			; (mov r8, r8)
 8009318:	e047      	b.n	80093aa <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689a      	ldr	r2, [r3, #8]
 800931e:	2380      	movs	r3, #128	; 0x80
 8009320:	015b      	lsls	r3, r3, #5
 8009322:	429a      	cmp	r2, r3
 8009324:	d107      	bne.n	8009336 <UART_Start_Receive_IT+0x1b6>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d103      	bne.n	8009336 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4a23      	ldr	r2, [pc, #140]	; (80093c0 <UART_Start_Receive_IT+0x240>)
 8009332:	675a      	str	r2, [r3, #116]	; 0x74
 8009334:	e002      	b.n	800933c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	4a22      	ldr	r2, [pc, #136]	; (80093c4 <UART_Start_Receive_IT+0x244>)
 800933a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d019      	beq.n	8009378 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009344:	f3ef 8310 	mrs	r3, PRIMASK
 8009348:	61fb      	str	r3, [r7, #28]
  return(result);
 800934a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800934c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800934e:	2301      	movs	r3, #1
 8009350:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	f383 8810 	msr	PRIMASK, r3
}
 8009358:	46c0      	nop			; (mov r8, r8)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2190      	movs	r1, #144	; 0x90
 8009366:	0049      	lsls	r1, r1, #1
 8009368:	430a      	orrs	r2, r1
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800936e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	f383 8810 	msr	PRIMASK, r3
}
 8009376:	e018      	b.n	80093aa <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009378:	f3ef 8310 	mrs	r3, PRIMASK
 800937c:	613b      	str	r3, [r7, #16]
  return(result);
 800937e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009380:	653b      	str	r3, [r7, #80]	; 0x50
 8009382:	2301      	movs	r3, #1
 8009384:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f383 8810 	msr	PRIMASK, r3
}
 800938c:	46c0      	nop			; (mov r8, r8)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2120      	movs	r1, #32
 800939a:	430a      	orrs	r2, r1
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	f383 8810 	msr	PRIMASK, r3
}
 80093a8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	0018      	movs	r0, r3
 80093ae:	46bd      	mov	sp, r7
 80093b0:	b018      	add	sp, #96	; 0x60
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	000001ff 	.word	0x000001ff
 80093b8:	08009e41 	.word	0x08009e41
 80093bc:	08009b55 	.word	0x08009b55
 80093c0:	080099e1 	.word	0x080099e1
 80093c4:	0800986d 	.word	0x0800986d

080093c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08e      	sub	sp, #56	; 0x38
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093d0:	f3ef 8310 	mrs	r3, PRIMASK
 80093d4:	617b      	str	r3, [r7, #20]
  return(result);
 80093d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093d8:	637b      	str	r3, [r7, #52]	; 0x34
 80093da:	2301      	movs	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	f383 8810 	msr	PRIMASK, r3
}
 80093e4:	46c0      	nop			; (mov r8, r8)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4926      	ldr	r1, [pc, #152]	; (800948c <UART_EndRxTransfer+0xc4>)
 80093f2:	400a      	ands	r2, r1
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	f383 8810 	msr	PRIMASK, r3
}
 8009400:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009402:	f3ef 8310 	mrs	r3, PRIMASK
 8009406:	623b      	str	r3, [r7, #32]
  return(result);
 8009408:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800940a:	633b      	str	r3, [r7, #48]	; 0x30
 800940c:	2301      	movs	r3, #1
 800940e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	f383 8810 	msr	PRIMASK, r3
}
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689a      	ldr	r2, [r3, #8]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	491b      	ldr	r1, [pc, #108]	; (8009490 <UART_EndRxTransfer+0xc8>)
 8009424:	400a      	ands	r2, r1
 8009426:	609a      	str	r2, [r3, #8]
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	f383 8810 	msr	PRIMASK, r3
}
 8009432:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d118      	bne.n	800946e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800943c:	f3ef 8310 	mrs	r3, PRIMASK
 8009440:	60bb      	str	r3, [r7, #8]
  return(result);
 8009442:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009446:	2301      	movs	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f383 8810 	msr	PRIMASK, r3
}
 8009450:	46c0      	nop			; (mov r8, r8)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2110      	movs	r1, #16
 800945e:	438a      	bics	r2, r1
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f383 8810 	msr	PRIMASK, r3
}
 800946c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	228c      	movs	r2, #140	; 0x8c
 8009472:	2120      	movs	r1, #32
 8009474:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009482:	46c0      	nop			; (mov r8, r8)
 8009484:	46bd      	mov	sp, r7
 8009486:	b00e      	add	sp, #56	; 0x38
 8009488:	bd80      	pop	{r7, pc}
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	fffffedf 	.word	0xfffffedf
 8009490:	effffffe 	.word	0xeffffffe

08009494 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	225e      	movs	r2, #94	; 0x5e
 80094a6:	2100      	movs	r1, #0
 80094a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2256      	movs	r2, #86	; 0x56
 80094ae:	2100      	movs	r1, #0
 80094b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	0018      	movs	r0, r3
 80094b6:	f7ff fa0d 	bl	80088d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ba:	46c0      	nop			; (mov r8, r8)
 80094bc:	46bd      	mov	sp, r7
 80094be:	b004      	add	sp, #16
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b08a      	sub	sp, #40	; 0x28
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2288      	movs	r2, #136	; 0x88
 80094ce:	589b      	ldr	r3, [r3, r2]
 80094d0:	2b21      	cmp	r3, #33	; 0x21
 80094d2:	d14c      	bne.n	800956e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2256      	movs	r2, #86	; 0x56
 80094d8:	5a9b      	ldrh	r3, [r3, r2]
 80094da:	b29b      	uxth	r3, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d132      	bne.n	8009546 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e0:	f3ef 8310 	mrs	r3, PRIMASK
 80094e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80094e6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
 80094ea:	2301      	movs	r3, #1
 80094ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f383 8810 	msr	PRIMASK, r3
}
 80094f4:	46c0      	nop			; (mov r8, r8)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2180      	movs	r1, #128	; 0x80
 8009502:	438a      	bics	r2, r1
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f383 8810 	msr	PRIMASK, r3
}
 8009510:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009512:	f3ef 8310 	mrs	r3, PRIMASK
 8009516:	617b      	str	r3, [r7, #20]
  return(result);
 8009518:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800951a:	623b      	str	r3, [r7, #32]
 800951c:	2301      	movs	r3, #1
 800951e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	f383 8810 	msr	PRIMASK, r3
}
 8009526:	46c0      	nop			; (mov r8, r8)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2140      	movs	r1, #64	; 0x40
 8009534:	430a      	orrs	r2, r1
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f383 8810 	msr	PRIMASK, r3
}
 8009542:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009544:	e013      	b.n	800956e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800954a:	781a      	ldrb	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2256      	movs	r2, #86	; 0x56
 8009560:	5a9b      	ldrh	r3, [r3, r2]
 8009562:	b29b      	uxth	r3, r3
 8009564:	3b01      	subs	r3, #1
 8009566:	b299      	uxth	r1, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2256      	movs	r2, #86	; 0x56
 800956c:	5299      	strh	r1, [r3, r2]
}
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	46bd      	mov	sp, r7
 8009572:	b00a      	add	sp, #40	; 0x28
 8009574:	bd80      	pop	{r7, pc}

08009576 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b08c      	sub	sp, #48	; 0x30
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2288      	movs	r2, #136	; 0x88
 8009582:	589b      	ldr	r3, [r3, r2]
 8009584:	2b21      	cmp	r3, #33	; 0x21
 8009586:	d151      	bne.n	800962c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2256      	movs	r2, #86	; 0x56
 800958c:	5a9b      	ldrh	r3, [r3, r2]
 800958e:	b29b      	uxth	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d132      	bne.n	80095fa <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009594:	f3ef 8310 	mrs	r3, PRIMASK
 8009598:	60fb      	str	r3, [r7, #12]
  return(result);
 800959a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800959c:	62bb      	str	r3, [r7, #40]	; 0x28
 800959e:	2301      	movs	r3, #1
 80095a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f383 8810 	msr	PRIMASK, r3
}
 80095a8:	46c0      	nop			; (mov r8, r8)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2180      	movs	r1, #128	; 0x80
 80095b6:	438a      	bics	r2, r1
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f383 8810 	msr	PRIMASK, r3
}
 80095c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095c6:	f3ef 8310 	mrs	r3, PRIMASK
 80095ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80095cc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095ce:	627b      	str	r3, [r7, #36]	; 0x24
 80095d0:	2301      	movs	r3, #1
 80095d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	f383 8810 	msr	PRIMASK, r3
}
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2140      	movs	r1, #64	; 0x40
 80095e8:	430a      	orrs	r2, r1
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	f383 8810 	msr	PRIMASK, r3
}
 80095f6:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80095f8:	e018      	b.n	800962c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	001a      	movs	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	05d2      	lsls	r2, r2, #23
 800960c:	0dd2      	lsrs	r2, r2, #23
 800960e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009614:	1c9a      	adds	r2, r3, #2
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2256      	movs	r2, #86	; 0x56
 800961e:	5a9b      	ldrh	r3, [r3, r2]
 8009620:	b29b      	uxth	r3, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	b299      	uxth	r1, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2256      	movs	r2, #86	; 0x56
 800962a:	5299      	strh	r1, [r3, r2]
}
 800962c:	46c0      	nop			; (mov r8, r8)
 800962e:	46bd      	mov	sp, r7
 8009630:	b00c      	add	sp, #48	; 0x30
 8009632:	bd80      	pop	{r7, pc}

08009634 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b08c      	sub	sp, #48	; 0x30
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2288      	movs	r2, #136	; 0x88
 8009640:	589b      	ldr	r3, [r3, r2]
 8009642:	2b21      	cmp	r3, #33	; 0x21
 8009644:	d165      	bne.n	8009712 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009646:	232e      	movs	r3, #46	; 0x2e
 8009648:	18fb      	adds	r3, r7, r3
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	216a      	movs	r1, #106	; 0x6a
 800964e:	5a52      	ldrh	r2, [r2, r1]
 8009650:	801a      	strh	r2, [r3, #0]
 8009652:	e059      	b.n	8009708 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2256      	movs	r2, #86	; 0x56
 8009658:	5a9b      	ldrh	r3, [r3, r2]
 800965a:	b29b      	uxth	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d133      	bne.n	80096c8 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009660:	f3ef 8310 	mrs	r3, PRIMASK
 8009664:	60fb      	str	r3, [r7, #12]
  return(result);
 8009666:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009668:	62bb      	str	r3, [r7, #40]	; 0x28
 800966a:	2301      	movs	r3, #1
 800966c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f383 8810 	msr	PRIMASK, r3
}
 8009674:	46c0      	nop			; (mov r8, r8)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4926      	ldr	r1, [pc, #152]	; (800971c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8009682:	400a      	ands	r2, r1
 8009684:	609a      	str	r2, [r3, #8]
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f383 8810 	msr	PRIMASK, r3
}
 8009690:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009692:	f3ef 8310 	mrs	r3, PRIMASK
 8009696:	61bb      	str	r3, [r7, #24]
  return(result);
 8009698:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
 800969c:	2301      	movs	r3, #1
 800969e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	f383 8810 	msr	PRIMASK, r3
}
 80096a6:	46c0      	nop			; (mov r8, r8)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2140      	movs	r1, #64	; 0x40
 80096b4:	430a      	orrs	r2, r1
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	f383 8810 	msr	PRIMASK, r3
}
 80096c2:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80096c4:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80096c6:	e024      	b.n	8009712 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	2280      	movs	r2, #128	; 0x80
 80096d0:	4013      	ands	r3, r2
 80096d2:	d013      	beq.n	80096fc <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d8:	781a      	ldrb	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2256      	movs	r2, #86	; 0x56
 80096ee:	5a9b      	ldrh	r3, [r3, r2]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	3b01      	subs	r3, #1
 80096f4:	b299      	uxth	r1, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2256      	movs	r2, #86	; 0x56
 80096fa:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80096fc:	212e      	movs	r1, #46	; 0x2e
 80096fe:	187b      	adds	r3, r7, r1
 8009700:	881a      	ldrh	r2, [r3, #0]
 8009702:	187b      	adds	r3, r7, r1
 8009704:	3a01      	subs	r2, #1
 8009706:	801a      	strh	r2, [r3, #0]
 8009708:	232e      	movs	r3, #46	; 0x2e
 800970a:	18fb      	adds	r3, r7, r3
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1a0      	bne.n	8009654 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8009712:	46c0      	nop			; (mov r8, r8)
 8009714:	46bd      	mov	sp, r7
 8009716:	b00c      	add	sp, #48	; 0x30
 8009718:	bd80      	pop	{r7, pc}
 800971a:	46c0      	nop			; (mov r8, r8)
 800971c:	ff7fffff 	.word	0xff7fffff

08009720 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08c      	sub	sp, #48	; 0x30
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2288      	movs	r2, #136	; 0x88
 800972c:	589b      	ldr	r3, [r3, r2]
 800972e:	2b21      	cmp	r3, #33	; 0x21
 8009730:	d16a      	bne.n	8009808 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009732:	232e      	movs	r3, #46	; 0x2e
 8009734:	18fb      	adds	r3, r7, r3
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	216a      	movs	r1, #106	; 0x6a
 800973a:	5a52      	ldrh	r2, [r2, r1]
 800973c:	801a      	strh	r2, [r3, #0]
 800973e:	e05e      	b.n	80097fe <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2256      	movs	r2, #86	; 0x56
 8009744:	5a9b      	ldrh	r3, [r3, r2]
 8009746:	b29b      	uxth	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d133      	bne.n	80097b4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800974c:	f3ef 8310 	mrs	r3, PRIMASK
 8009750:	60bb      	str	r3, [r7, #8]
  return(result);
 8009752:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
 8009756:	2301      	movs	r3, #1
 8009758:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f383 8810 	msr	PRIMASK, r3
}
 8009760:	46c0      	nop			; (mov r8, r8)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689a      	ldr	r2, [r3, #8]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4928      	ldr	r1, [pc, #160]	; (8009810 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800976e:	400a      	ands	r2, r1
 8009770:	609a      	str	r2, [r3, #8]
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f383 8810 	msr	PRIMASK, r3
}
 800977c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800977e:	f3ef 8310 	mrs	r3, PRIMASK
 8009782:	617b      	str	r3, [r7, #20]
  return(result);
 8009784:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009786:	623b      	str	r3, [r7, #32]
 8009788:	2301      	movs	r3, #1
 800978a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	f383 8810 	msr	PRIMASK, r3
}
 8009792:	46c0      	nop			; (mov r8, r8)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2140      	movs	r1, #64	; 0x40
 80097a0:	430a      	orrs	r2, r1
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f383 8810 	msr	PRIMASK, r3
}
 80097ae:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80097b0:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80097b2:	e029      	b.n	8009808 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	2280      	movs	r2, #128	; 0x80
 80097bc:	4013      	ands	r3, r2
 80097be:	d018      	beq.n	80097f2 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c4:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80097c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	001a      	movs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	05d2      	lsls	r2, r2, #23
 80097d2:	0dd2      	lsrs	r2, r2, #23
 80097d4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097da:	1c9a      	adds	r2, r3, #2
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2256      	movs	r2, #86	; 0x56
 80097e4:	5a9b      	ldrh	r3, [r3, r2]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	3b01      	subs	r3, #1
 80097ea:	b299      	uxth	r1, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2256      	movs	r2, #86	; 0x56
 80097f0:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80097f2:	212e      	movs	r1, #46	; 0x2e
 80097f4:	187b      	adds	r3, r7, r1
 80097f6:	881a      	ldrh	r2, [r3, #0]
 80097f8:	187b      	adds	r3, r7, r1
 80097fa:	3a01      	subs	r2, #1
 80097fc:	801a      	strh	r2, [r3, #0]
 80097fe:	232e      	movs	r3, #46	; 0x2e
 8009800:	18fb      	adds	r3, r7, r3
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d19b      	bne.n	8009740 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8009808:	46c0      	nop			; (mov r8, r8)
 800980a:	46bd      	mov	sp, r7
 800980c:	b00c      	add	sp, #48	; 0x30
 800980e:	bd80      	pop	{r7, pc}
 8009810:	ff7fffff 	.word	0xff7fffff

08009814 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800981c:	f3ef 8310 	mrs	r3, PRIMASK
 8009820:	60bb      	str	r3, [r7, #8]
  return(result);
 8009822:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	2301      	movs	r3, #1
 8009828:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f383 8810 	msr	PRIMASK, r3
}
 8009830:	46c0      	nop			; (mov r8, r8)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2140      	movs	r1, #64	; 0x40
 800983e:	438a      	bics	r2, r1
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f383 8810 	msr	PRIMASK, r3
}
 800984c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2288      	movs	r2, #136	; 0x88
 8009852:	2120      	movs	r1, #32
 8009854:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	0018      	movs	r0, r3
 8009860:	f7ff f830 	bl	80088c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009864:	46c0      	nop			; (mov r8, r8)
 8009866:	46bd      	mov	sp, r7
 8009868:	b006      	add	sp, #24
 800986a:	bd80      	pop	{r7, pc}

0800986c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b090      	sub	sp, #64	; 0x40
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009874:	203e      	movs	r0, #62	; 0x3e
 8009876:	183b      	adds	r3, r7, r0
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	2160      	movs	r1, #96	; 0x60
 800987c:	5a52      	ldrh	r2, [r2, r1]
 800987e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	228c      	movs	r2, #140	; 0x8c
 8009884:	589b      	ldr	r3, [r3, r2]
 8009886:	2b22      	cmp	r3, #34	; 0x22
 8009888:	d000      	beq.n	800988c <UART_RxISR_8BIT+0x20>
 800988a:	e09a      	b.n	80099c2 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009892:	213c      	movs	r1, #60	; 0x3c
 8009894:	187b      	adds	r3, r7, r1
 8009896:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009898:	187b      	adds	r3, r7, r1
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	b2da      	uxtb	r2, r3
 800989e:	183b      	adds	r3, r7, r0
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b2d9      	uxtb	r1, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a8:	400a      	ands	r2, r1
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	225e      	movs	r2, #94	; 0x5e
 80098bc:	5a9b      	ldrh	r3, [r3, r2]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b299      	uxth	r1, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	225e      	movs	r2, #94	; 0x5e
 80098c8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	225e      	movs	r2, #94	; 0x5e
 80098ce:	5a9b      	ldrh	r3, [r3, r2]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d000      	beq.n	80098d8 <UART_RxISR_8BIT+0x6c>
 80098d6:	e07c      	b.n	80099d2 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098d8:	f3ef 8310 	mrs	r3, PRIMASK
 80098dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80098de:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80098e2:	2301      	movs	r3, #1
 80098e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	f383 8810 	msr	PRIMASK, r3
}
 80098ec:	46c0      	nop			; (mov r8, r8)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4938      	ldr	r1, [pc, #224]	; (80099dc <UART_RxISR_8BIT+0x170>)
 80098fa:	400a      	ands	r2, r1
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	f383 8810 	msr	PRIMASK, r3
}
 8009908:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800990a:	f3ef 8310 	mrs	r3, PRIMASK
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009912:	637b      	str	r3, [r7, #52]	; 0x34
 8009914:	2301      	movs	r3, #1
 8009916:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	f383 8810 	msr	PRIMASK, r3
}
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689a      	ldr	r2, [r3, #8]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2101      	movs	r1, #1
 800992c:	438a      	bics	r2, r1
 800992e:	609a      	str	r2, [r3, #8]
 8009930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009932:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009936:	f383 8810 	msr	PRIMASK, r3
}
 800993a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	228c      	movs	r2, #140	; 0x8c
 8009940:	2120      	movs	r1, #32
 8009942:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009954:	2b01      	cmp	r3, #1
 8009956:	d12f      	bne.n	80099b8 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800995e:	f3ef 8310 	mrs	r3, PRIMASK
 8009962:	60fb      	str	r3, [r7, #12]
  return(result);
 8009964:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009966:	633b      	str	r3, [r7, #48]	; 0x30
 8009968:	2301      	movs	r3, #1
 800996a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f383 8810 	msr	PRIMASK, r3
}
 8009972:	46c0      	nop			; (mov r8, r8)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2110      	movs	r1, #16
 8009980:	438a      	bics	r2, r1
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f383 8810 	msr	PRIMASK, r3
}
 800998e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	2210      	movs	r2, #16
 8009998:	4013      	ands	r3, r2
 800999a:	2b10      	cmp	r3, #16
 800999c:	d103      	bne.n	80099a6 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2210      	movs	r2, #16
 80099a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	225c      	movs	r2, #92	; 0x5c
 80099aa:	5a9a      	ldrh	r2, [r3, r2]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	0011      	movs	r1, r2
 80099b0:	0018      	movs	r0, r3
 80099b2:	f7fe ff97 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099b6:	e00c      	b.n	80099d2 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	0018      	movs	r0, r3
 80099bc:	f7f9 fe36 	bl	800362c <HAL_UART_RxCpltCallback>
}
 80099c0:	e007      	b.n	80099d2 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	699a      	ldr	r2, [r3, #24]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2108      	movs	r1, #8
 80099ce:	430a      	orrs	r2, r1
 80099d0:	619a      	str	r2, [r3, #24]
}
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	46bd      	mov	sp, r7
 80099d6:	b010      	add	sp, #64	; 0x40
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	fffffedf 	.word	0xfffffedf

080099e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b090      	sub	sp, #64	; 0x40
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80099e8:	203e      	movs	r0, #62	; 0x3e
 80099ea:	183b      	adds	r3, r7, r0
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	2160      	movs	r1, #96	; 0x60
 80099f0:	5a52      	ldrh	r2, [r2, r1]
 80099f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	228c      	movs	r2, #140	; 0x8c
 80099f8:	589b      	ldr	r3, [r3, r2]
 80099fa:	2b22      	cmp	r3, #34	; 0x22
 80099fc:	d000      	beq.n	8009a00 <UART_RxISR_16BIT+0x20>
 80099fe:	e09a      	b.n	8009b36 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a06:	213c      	movs	r1, #60	; 0x3c
 8009a08:	187b      	adds	r3, r7, r1
 8009a0a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a10:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a12:	187b      	adds	r3, r7, r1
 8009a14:	183a      	adds	r2, r7, r0
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	8812      	ldrh	r2, [r2, #0]
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a26:	1c9a      	adds	r2, r3, #2
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	225e      	movs	r2, #94	; 0x5e
 8009a30:	5a9b      	ldrh	r3, [r3, r2]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b299      	uxth	r1, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	225e      	movs	r2, #94	; 0x5e
 8009a3c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	225e      	movs	r2, #94	; 0x5e
 8009a42:	5a9b      	ldrh	r3, [r3, r2]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d000      	beq.n	8009a4c <UART_RxISR_16BIT+0x6c>
 8009a4a:	e07c      	b.n	8009b46 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a50:	617b      	str	r3, [r7, #20]
  return(result);
 8009a52:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
 8009a56:	2301      	movs	r3, #1
 8009a58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	f383 8810 	msr	PRIMASK, r3
}
 8009a60:	46c0      	nop			; (mov r8, r8)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4938      	ldr	r1, [pc, #224]	; (8009b50 <UART_RxISR_16BIT+0x170>)
 8009a6e:	400a      	ands	r2, r1
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	f383 8810 	msr	PRIMASK, r3
}
 8009a7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a82:	623b      	str	r3, [r7, #32]
  return(result);
 8009a84:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a86:	633b      	str	r3, [r7, #48]	; 0x30
 8009a88:	2301      	movs	r3, #1
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	f383 8810 	msr	PRIMASK, r3
}
 8009a92:	46c0      	nop			; (mov r8, r8)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689a      	ldr	r2, [r3, #8]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	438a      	bics	r2, r1
 8009aa2:	609a      	str	r2, [r3, #8]
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	f383 8810 	msr	PRIMASK, r3
}
 8009aae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	228c      	movs	r2, #140	; 0x8c
 8009ab4:	2120      	movs	r1, #32
 8009ab6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d12f      	bne.n	8009b2c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ad6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ad8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009adc:	2301      	movs	r3, #1
 8009ade:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f383 8810 	msr	PRIMASK, r3
}
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2110      	movs	r1, #16
 8009af4:	438a      	bics	r2, r1
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	f383 8810 	msr	PRIMASK, r3
}
 8009b02:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	2210      	movs	r2, #16
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	2b10      	cmp	r3, #16
 8009b10:	d103      	bne.n	8009b1a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2210      	movs	r2, #16
 8009b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	225c      	movs	r2, #92	; 0x5c
 8009b1e:	5a9a      	ldrh	r2, [r3, r2]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	0011      	movs	r1, r2
 8009b24:	0018      	movs	r0, r3
 8009b26:	f7fe fedd 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b2a:	e00c      	b.n	8009b46 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	0018      	movs	r0, r3
 8009b30:	f7f9 fd7c 	bl	800362c <HAL_UART_RxCpltCallback>
}
 8009b34:	e007      	b.n	8009b46 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	699a      	ldr	r2, [r3, #24]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2108      	movs	r1, #8
 8009b42:	430a      	orrs	r2, r1
 8009b44:	619a      	str	r2, [r3, #24]
}
 8009b46:	46c0      	nop			; (mov r8, r8)
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	b010      	add	sp, #64	; 0x40
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	fffffedf 	.word	0xfffffedf

08009b54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b09c      	sub	sp, #112	; 0x70
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009b5c:	236a      	movs	r3, #106	; 0x6a
 8009b5e:	18fb      	adds	r3, r7, r3
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	2160      	movs	r1, #96	; 0x60
 8009b64:	5a52      	ldrh	r2, [r2, r1]
 8009b66:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	228c      	movs	r2, #140	; 0x8c
 8009b84:	589b      	ldr	r3, [r3, r2]
 8009b86:	2b22      	cmp	r3, #34	; 0x22
 8009b88:	d000      	beq.n	8009b8c <UART_RxISR_8BIT_FIFOEN+0x38>
 8009b8a:	e144      	b.n	8009e16 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b8c:	235e      	movs	r3, #94	; 0x5e
 8009b8e:	18fb      	adds	r3, r7, r3
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	2168      	movs	r1, #104	; 0x68
 8009b94:	5a52      	ldrh	r2, [r2, r1]
 8009b96:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b98:	e0eb      	b.n	8009d72 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ba0:	215c      	movs	r1, #92	; 0x5c
 8009ba2:	187b      	adds	r3, r7, r1
 8009ba4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ba6:	187b      	adds	r3, r7, r1
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	236a      	movs	r3, #106	; 0x6a
 8009bae:	18fb      	adds	r3, r7, r3
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b2d9      	uxtb	r1, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb8:	400a      	ands	r2, r1
 8009bba:	b2d2      	uxtb	r2, r2
 8009bbc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	225e      	movs	r2, #94	; 0x5e
 8009bcc:	5a9b      	ldrh	r3, [r3, r2]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	b299      	uxth	r1, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	225e      	movs	r2, #94	; 0x5e
 8009bd8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009be4:	2207      	movs	r2, #7
 8009be6:	4013      	ands	r3, r2
 8009be8:	d049      	beq.n	8009c7e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bec:	2201      	movs	r2, #1
 8009bee:	4013      	ands	r3, r2
 8009bf0:	d010      	beq.n	8009c14 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8009bf2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bf4:	2380      	movs	r3, #128	; 0x80
 8009bf6:	005b      	lsls	r3, r3, #1
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	d00b      	beq.n	8009c14 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2201      	movs	r2, #1
 8009c02:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2290      	movs	r2, #144	; 0x90
 8009c08:	589b      	ldr	r3, [r3, r2]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2190      	movs	r1, #144	; 0x90
 8009c12:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c16:	2202      	movs	r2, #2
 8009c18:	4013      	ands	r3, r2
 8009c1a:	d00f      	beq.n	8009c3c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8009c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4013      	ands	r3, r2
 8009c22:	d00b      	beq.n	8009c3c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2202      	movs	r2, #2
 8009c2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2290      	movs	r2, #144	; 0x90
 8009c30:	589b      	ldr	r3, [r3, r2]
 8009c32:	2204      	movs	r2, #4
 8009c34:	431a      	orrs	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2190      	movs	r1, #144	; 0x90
 8009c3a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c3e:	2204      	movs	r2, #4
 8009c40:	4013      	ands	r3, r2
 8009c42:	d00f      	beq.n	8009c64 <UART_RxISR_8BIT_FIFOEN+0x110>
 8009c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c46:	2201      	movs	r2, #1
 8009c48:	4013      	ands	r3, r2
 8009c4a:	d00b      	beq.n	8009c64 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2204      	movs	r2, #4
 8009c52:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2290      	movs	r2, #144	; 0x90
 8009c58:	589b      	ldr	r3, [r3, r2]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2190      	movs	r1, #144	; 0x90
 8009c62:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2290      	movs	r2, #144	; 0x90
 8009c68:	589b      	ldr	r3, [r3, r2]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d007      	beq.n	8009c7e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	0018      	movs	r0, r3
 8009c72:	f7fe fe2f 	bl	80088d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2290      	movs	r2, #144	; 0x90
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	225e      	movs	r2, #94	; 0x5e
 8009c82:	5a9b      	ldrh	r3, [r3, r2]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d173      	bne.n	8009d72 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8009c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c92:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c94:	2301      	movs	r3, #1
 8009c96:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	f383 8810 	msr	PRIMASK, r3
}
 8009c9e:	46c0      	nop			; (mov r8, r8)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4961      	ldr	r1, [pc, #388]	; (8009e30 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8009cac:	400a      	ands	r2, r1
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cb2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb6:	f383 8810 	msr	PRIMASK, r3
}
 8009cba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8009cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8009cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ccc:	f383 8810 	msr	PRIMASK, r3
}
 8009cd0:	46c0      	nop			; (mov r8, r8)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4955      	ldr	r1, [pc, #340]	; (8009e34 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8009cde:	400a      	ands	r2, r1
 8009ce0:	609a      	str	r2, [r3, #8]
 8009ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ce4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce8:	f383 8810 	msr	PRIMASK, r3
}
 8009cec:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	228c      	movs	r2, #140	; 0x8c
 8009cf2:	2120      	movs	r1, #32
 8009cf4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d12f      	bne.n	8009d6a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d10:	f3ef 8310 	mrs	r3, PRIMASK
 8009d14:	623b      	str	r3, [r7, #32]
  return(result);
 8009d16:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d18:	653b      	str	r3, [r7, #80]	; 0x50
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	f383 8810 	msr	PRIMASK, r3
}
 8009d24:	46c0      	nop			; (mov r8, r8)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2110      	movs	r1, #16
 8009d32:	438a      	bics	r2, r1
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d38:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	f383 8810 	msr	PRIMASK, r3
}
 8009d40:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	69db      	ldr	r3, [r3, #28]
 8009d48:	2210      	movs	r2, #16
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	2b10      	cmp	r3, #16
 8009d4e:	d103      	bne.n	8009d58 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2210      	movs	r2, #16
 8009d56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	225c      	movs	r2, #92	; 0x5c
 8009d5c:	5a9a      	ldrh	r2, [r3, r2]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	0011      	movs	r1, r2
 8009d62:	0018      	movs	r0, r3
 8009d64:	f7fe fdbe 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
 8009d68:	e003      	b.n	8009d72 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	f7f9 fc5d 	bl	800362c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d72:	235e      	movs	r3, #94	; 0x5e
 8009d74:	18fb      	adds	r3, r7, r3
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d004      	beq.n	8009d86 <UART_RxISR_8BIT_FIFOEN+0x232>
 8009d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d7e:	2220      	movs	r2, #32
 8009d80:	4013      	ands	r3, r2
 8009d82:	d000      	beq.n	8009d86 <UART_RxISR_8BIT_FIFOEN+0x232>
 8009d84:	e709      	b.n	8009b9a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d86:	204e      	movs	r0, #78	; 0x4e
 8009d88:	183b      	adds	r3, r7, r0
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	215e      	movs	r1, #94	; 0x5e
 8009d8e:	5a52      	ldrh	r2, [r2, r1]
 8009d90:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d92:	0001      	movs	r1, r0
 8009d94:	187b      	adds	r3, r7, r1
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d044      	beq.n	8009e26 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2268      	movs	r2, #104	; 0x68
 8009da0:	5a9b      	ldrh	r3, [r3, r2]
 8009da2:	187a      	adds	r2, r7, r1
 8009da4:	8812      	ldrh	r2, [r2, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d23d      	bcs.n	8009e26 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009daa:	f3ef 8310 	mrs	r3, PRIMASK
 8009dae:	60bb      	str	r3, [r7, #8]
  return(result);
 8009db0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009db4:	2301      	movs	r3, #1
 8009db6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f383 8810 	msr	PRIMASK, r3
}
 8009dbe:	46c0      	nop			; (mov r8, r8)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689a      	ldr	r2, [r3, #8]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	491b      	ldr	r1, [pc, #108]	; (8009e38 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8009dcc:	400a      	ands	r2, r1
 8009dce:	609a      	str	r2, [r3, #8]
 8009dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f383 8810 	msr	PRIMASK, r3
}
 8009dda:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a17      	ldr	r2, [pc, #92]	; (8009e3c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8009de0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de2:	f3ef 8310 	mrs	r3, PRIMASK
 8009de6:	617b      	str	r3, [r7, #20]
  return(result);
 8009de8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009dea:	647b      	str	r3, [r7, #68]	; 0x44
 8009dec:	2301      	movs	r3, #1
 8009dee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	f383 8810 	msr	PRIMASK, r3
}
 8009df6:	46c0      	nop			; (mov r8, r8)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2120      	movs	r1, #32
 8009e04:	430a      	orrs	r2, r1
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	f383 8810 	msr	PRIMASK, r3
}
 8009e12:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e14:	e007      	b.n	8009e26 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	699a      	ldr	r2, [r3, #24]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2108      	movs	r1, #8
 8009e22:	430a      	orrs	r2, r1
 8009e24:	619a      	str	r2, [r3, #24]
}
 8009e26:	46c0      	nop			; (mov r8, r8)
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	b01c      	add	sp, #112	; 0x70
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	46c0      	nop			; (mov r8, r8)
 8009e30:	fffffeff 	.word	0xfffffeff
 8009e34:	effffffe 	.word	0xeffffffe
 8009e38:	efffffff 	.word	0xefffffff
 8009e3c:	0800986d 	.word	0x0800986d

08009e40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b09e      	sub	sp, #120	; 0x78
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009e48:	2372      	movs	r3, #114	; 0x72
 8009e4a:	18fb      	adds	r3, r7, r3
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	2160      	movs	r1, #96	; 0x60
 8009e50:	5a52      	ldrh	r2, [r2, r1]
 8009e52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	228c      	movs	r2, #140	; 0x8c
 8009e70:	589b      	ldr	r3, [r3, r2]
 8009e72:	2b22      	cmp	r3, #34	; 0x22
 8009e74:	d000      	beq.n	8009e78 <UART_RxISR_16BIT_FIFOEN+0x38>
 8009e76:	e144      	b.n	800a102 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009e78:	2366      	movs	r3, #102	; 0x66
 8009e7a:	18fb      	adds	r3, r7, r3
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	2168      	movs	r1, #104	; 0x68
 8009e80:	5a52      	ldrh	r2, [r2, r1]
 8009e82:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e84:	e0eb      	b.n	800a05e <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e8c:	2164      	movs	r1, #100	; 0x64
 8009e8e:	187b      	adds	r3, r7, r1
 8009e90:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e96:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8009e98:	187b      	adds	r3, r7, r1
 8009e9a:	2272      	movs	r2, #114	; 0x72
 8009e9c:	18ba      	adds	r2, r7, r2
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	8812      	ldrh	r2, [r2, #0]
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ea8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eae:	1c9a      	adds	r2, r3, #2
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	225e      	movs	r2, #94	; 0x5e
 8009eb8:	5a9b      	ldrh	r3, [r3, r2]
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	b299      	uxth	r1, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	225e      	movs	r2, #94	; 0x5e
 8009ec4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ed0:	2207      	movs	r2, #7
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	d049      	beq.n	8009f6a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ed8:	2201      	movs	r2, #1
 8009eda:	4013      	ands	r3, r2
 8009edc:	d010      	beq.n	8009f00 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8009ede:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ee0:	2380      	movs	r3, #128	; 0x80
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	d00b      	beq.n	8009f00 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2201      	movs	r2, #1
 8009eee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2290      	movs	r2, #144	; 0x90
 8009ef4:	589b      	ldr	r3, [r3, r2]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	431a      	orrs	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2190      	movs	r1, #144	; 0x90
 8009efe:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f02:	2202      	movs	r2, #2
 8009f04:	4013      	ands	r3, r2
 8009f06:	d00f      	beq.n	8009f28 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8009f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	d00b      	beq.n	8009f28 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2202      	movs	r2, #2
 8009f16:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2290      	movs	r2, #144	; 0x90
 8009f1c:	589b      	ldr	r3, [r3, r2]
 8009f1e:	2204      	movs	r2, #4
 8009f20:	431a      	orrs	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2190      	movs	r1, #144	; 0x90
 8009f26:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f2a:	2204      	movs	r2, #4
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	d00f      	beq.n	8009f50 <UART_RxISR_16BIT_FIFOEN+0x110>
 8009f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f32:	2201      	movs	r2, #1
 8009f34:	4013      	ands	r3, r2
 8009f36:	d00b      	beq.n	8009f50 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2204      	movs	r2, #4
 8009f3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2290      	movs	r2, #144	; 0x90
 8009f44:	589b      	ldr	r3, [r3, r2]
 8009f46:	2202      	movs	r2, #2
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2190      	movs	r1, #144	; 0x90
 8009f4e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2290      	movs	r2, #144	; 0x90
 8009f54:	589b      	ldr	r3, [r3, r2]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d007      	beq.n	8009f6a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	f7fe fcb9 	bl	80088d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2290      	movs	r2, #144	; 0x90
 8009f66:	2100      	movs	r1, #0
 8009f68:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	225e      	movs	r2, #94	; 0x5e
 8009f6e:	5a9b      	ldrh	r3, [r3, r2]
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d173      	bne.n	800a05e <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f76:	f3ef 8310 	mrs	r3, PRIMASK
 8009f7a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f80:	2301      	movs	r3, #1
 8009f82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f86:	f383 8810 	msr	PRIMASK, r3
}
 8009f8a:	46c0      	nop			; (mov r8, r8)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4961      	ldr	r1, [pc, #388]	; (800a11c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8009f98:	400a      	ands	r2, r1
 8009f9a:	601a      	str	r2, [r3, #0]
 8009f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	f383 8810 	msr	PRIMASK, r3
}
 8009fa6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8009fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb8:	f383 8810 	msr	PRIMASK, r3
}
 8009fbc:	46c0      	nop			; (mov r8, r8)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4955      	ldr	r1, [pc, #340]	; (800a120 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8009fca:	400a      	ands	r2, r1
 8009fcc:	609a      	str	r2, [r3, #8]
 8009fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fd0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fd4:	f383 8810 	msr	PRIMASK, r3
}
 8009fd8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	228c      	movs	r2, #140	; 0x8c
 8009fde:	2120      	movs	r1, #32
 8009fe0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d12f      	bne.n	800a056 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ffc:	f3ef 8310 	mrs	r3, PRIMASK
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a004:	657b      	str	r3, [r7, #84]	; 0x54
 800a006:	2301      	movs	r3, #1
 800a008:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	f383 8810 	msr	PRIMASK, r3
}
 800a010:	46c0      	nop			; (mov r8, r8)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2110      	movs	r1, #16
 800a01e:	438a      	bics	r2, r1
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a024:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a028:	f383 8810 	msr	PRIMASK, r3
}
 800a02c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	69db      	ldr	r3, [r3, #28]
 800a034:	2210      	movs	r2, #16
 800a036:	4013      	ands	r3, r2
 800a038:	2b10      	cmp	r3, #16
 800a03a:	d103      	bne.n	800a044 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2210      	movs	r2, #16
 800a042:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	225c      	movs	r2, #92	; 0x5c
 800a048:	5a9a      	ldrh	r2, [r3, r2]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	0011      	movs	r1, r2
 800a04e:	0018      	movs	r0, r3
 800a050:	f7fe fc48 	bl	80088e4 <HAL_UARTEx_RxEventCallback>
 800a054:	e003      	b.n	800a05e <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	0018      	movs	r0, r3
 800a05a:	f7f9 fae7 	bl	800362c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a05e:	2366      	movs	r3, #102	; 0x66
 800a060:	18fb      	adds	r3, r7, r3
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <UART_RxISR_16BIT_FIFOEN+0x232>
 800a068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a06a:	2220      	movs	r2, #32
 800a06c:	4013      	ands	r3, r2
 800a06e:	d000      	beq.n	800a072 <UART_RxISR_16BIT_FIFOEN+0x232>
 800a070:	e709      	b.n	8009e86 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a072:	2052      	movs	r0, #82	; 0x52
 800a074:	183b      	adds	r3, r7, r0
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	215e      	movs	r1, #94	; 0x5e
 800a07a:	5a52      	ldrh	r2, [r2, r1]
 800a07c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a07e:	0001      	movs	r1, r0
 800a080:	187b      	adds	r3, r7, r1
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d044      	beq.n	800a112 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2268      	movs	r2, #104	; 0x68
 800a08c:	5a9b      	ldrh	r3, [r3, r2]
 800a08e:	187a      	adds	r2, r7, r1
 800a090:	8812      	ldrh	r2, [r2, #0]
 800a092:	429a      	cmp	r2, r3
 800a094:	d23d      	bcs.n	800a112 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a096:	f3ef 8310 	mrs	r3, PRIMASK
 800a09a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a09c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a09e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	f383 8810 	msr	PRIMASK, r3
}
 800a0aa:	46c0      	nop			; (mov r8, r8)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689a      	ldr	r2, [r3, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	491b      	ldr	r1, [pc, #108]	; (800a124 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800a0b8:	400a      	ands	r2, r1
 800a0ba:	609a      	str	r2, [r3, #8]
 800a0bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f383 8810 	msr	PRIMASK, r3
}
 800a0c6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a17      	ldr	r2, [pc, #92]	; (800a128 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800a0cc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a0d2:	61bb      	str	r3, [r7, #24]
  return(result);
 800a0d4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0d8:	2301      	movs	r3, #1
 800a0da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	f383 8810 	msr	PRIMASK, r3
}
 800a0e2:	46c0      	nop			; (mov r8, r8)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2120      	movs	r1, #32
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	f383 8810 	msr	PRIMASK, r3
}
 800a0fe:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a100:	e007      	b.n	800a112 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	699a      	ldr	r2, [r3, #24]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2108      	movs	r1, #8
 800a10e:	430a      	orrs	r2, r1
 800a110:	619a      	str	r2, [r3, #24]
}
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	46bd      	mov	sp, r7
 800a116:	b01e      	add	sp, #120	; 0x78
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	46c0      	nop			; (mov r8, r8)
 800a11c:	fffffeff 	.word	0xfffffeff
 800a120:	effffffe 	.word	0xeffffffe
 800a124:	efffffff 	.word	0xefffffff
 800a128:	080099e1 	.word	0x080099e1

0800a12c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a134:	46c0      	nop			; (mov r8, r8)
 800a136:	46bd      	mov	sp, r7
 800a138:	b002      	add	sp, #8
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a144:	46c0      	nop			; (mov r8, r8)
 800a146:	46bd      	mov	sp, r7
 800a148:	b002      	add	sp, #8
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a154:	46c0      	nop			; (mov r8, r8)
 800a156:	46bd      	mov	sp, r7
 800a158:	b002      	add	sp, #8
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2284      	movs	r2, #132	; 0x84
 800a168:	5c9b      	ldrb	r3, [r3, r2]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d101      	bne.n	800a172 <HAL_UARTEx_DisableFifoMode+0x16>
 800a16e:	2302      	movs	r3, #2
 800a170:	e027      	b.n	800a1c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2284      	movs	r2, #132	; 0x84
 800a176:	2101      	movs	r1, #1
 800a178:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2288      	movs	r2, #136	; 0x88
 800a17e:	2124      	movs	r1, #36	; 0x24
 800a180:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2101      	movs	r1, #1
 800a196:	438a      	bics	r2, r1
 800a198:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	4a0b      	ldr	r2, [pc, #44]	; (800a1cc <HAL_UARTEx_DisableFifoMode+0x70>)
 800a19e:	4013      	ands	r3, r2
 800a1a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2288      	movs	r2, #136	; 0x88
 800a1b4:	2120      	movs	r1, #32
 800a1b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2284      	movs	r2, #132	; 0x84
 800a1bc:	2100      	movs	r1, #0
 800a1be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	b004      	add	sp, #16
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	46c0      	nop			; (mov r8, r8)
 800a1cc:	dfffffff 	.word	0xdfffffff

0800a1d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2284      	movs	r2, #132	; 0x84
 800a1de:	5c9b      	ldrb	r3, [r3, r2]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d101      	bne.n	800a1e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e02e      	b.n	800a246 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2284      	movs	r2, #132	; 0x84
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2288      	movs	r2, #136	; 0x88
 800a1f4:	2124      	movs	r1, #36	; 0x24
 800a1f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2101      	movs	r1, #1
 800a20c:	438a      	bics	r2, r1
 800a20e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	08d9      	lsrs	r1, r3, #3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	430a      	orrs	r2, r1
 800a222:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	0018      	movs	r0, r3
 800a228:	f000 f854 	bl	800a2d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2288      	movs	r2, #136	; 0x88
 800a238:	2120      	movs	r1, #32
 800a23a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2284      	movs	r2, #132	; 0x84
 800a240:	2100      	movs	r1, #0
 800a242:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	0018      	movs	r0, r3
 800a248:	46bd      	mov	sp, r7
 800a24a:	b004      	add	sp, #16
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2284      	movs	r2, #132	; 0x84
 800a25e:	5c9b      	ldrb	r3, [r3, r2]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d101      	bne.n	800a268 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a264:	2302      	movs	r3, #2
 800a266:	e02f      	b.n	800a2c8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2284      	movs	r2, #132	; 0x84
 800a26c:	2101      	movs	r1, #1
 800a26e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2288      	movs	r2, #136	; 0x88
 800a274:	2124      	movs	r1, #36	; 0x24
 800a276:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2101      	movs	r1, #1
 800a28c:	438a      	bics	r2, r1
 800a28e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	4a0e      	ldr	r2, [pc, #56]	; (800a2d0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a298:	4013      	ands	r3, r2
 800a29a:	0019      	movs	r1, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f000 f813 	bl	800a2d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2288      	movs	r2, #136	; 0x88
 800a2ba:	2120      	movs	r1, #32
 800a2bc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2284      	movs	r2, #132	; 0x84
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	b004      	add	sp, #16
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	f1ffffff 	.word	0xf1ffffff

0800a2d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d108      	bne.n	800a2f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	226a      	movs	r2, #106	; 0x6a
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2268      	movs	r2, #104	; 0x68
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2f4:	e043      	b.n	800a37e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2f6:	260f      	movs	r6, #15
 800a2f8:	19bb      	adds	r3, r7, r6
 800a2fa:	2208      	movs	r2, #8
 800a2fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2fe:	200e      	movs	r0, #14
 800a300:	183b      	adds	r3, r7, r0
 800a302:	2208      	movs	r2, #8
 800a304:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	0e5b      	lsrs	r3, r3, #25
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	240d      	movs	r4, #13
 800a312:	193b      	adds	r3, r7, r4
 800a314:	2107      	movs	r1, #7
 800a316:	400a      	ands	r2, r1
 800a318:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	0f5b      	lsrs	r3, r3, #29
 800a322:	b2da      	uxtb	r2, r3
 800a324:	250c      	movs	r5, #12
 800a326:	197b      	adds	r3, r7, r5
 800a328:	2107      	movs	r1, #7
 800a32a:	400a      	ands	r2, r1
 800a32c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a32e:	183b      	adds	r3, r7, r0
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	197a      	adds	r2, r7, r5
 800a334:	7812      	ldrb	r2, [r2, #0]
 800a336:	4914      	ldr	r1, [pc, #80]	; (800a388 <UARTEx_SetNbDataToProcess+0xb4>)
 800a338:	5c8a      	ldrb	r2, [r1, r2]
 800a33a:	435a      	muls	r2, r3
 800a33c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a33e:	197b      	adds	r3, r7, r5
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	4a12      	ldr	r2, [pc, #72]	; (800a38c <UARTEx_SetNbDataToProcess+0xb8>)
 800a344:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a346:	0019      	movs	r1, r3
 800a348:	f7f5 ff8c 	bl	8000264 <__divsi3>
 800a34c:	0003      	movs	r3, r0
 800a34e:	b299      	uxth	r1, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	226a      	movs	r2, #106	; 0x6a
 800a354:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a356:	19bb      	adds	r3, r7, r6
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	193a      	adds	r2, r7, r4
 800a35c:	7812      	ldrb	r2, [r2, #0]
 800a35e:	490a      	ldr	r1, [pc, #40]	; (800a388 <UARTEx_SetNbDataToProcess+0xb4>)
 800a360:	5c8a      	ldrb	r2, [r1, r2]
 800a362:	435a      	muls	r2, r3
 800a364:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a366:	193b      	adds	r3, r7, r4
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	4a08      	ldr	r2, [pc, #32]	; (800a38c <UARTEx_SetNbDataToProcess+0xb8>)
 800a36c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a36e:	0019      	movs	r1, r3
 800a370:	f7f5 ff78 	bl	8000264 <__divsi3>
 800a374:	0003      	movs	r3, r0
 800a376:	b299      	uxth	r1, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2268      	movs	r2, #104	; 0x68
 800a37c:	5299      	strh	r1, [r3, r2]
}
 800a37e:	46c0      	nop			; (mov r8, r8)
 800a380:	46bd      	mov	sp, r7
 800a382:	b005      	add	sp, #20
 800a384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a386:	46c0      	nop			; (mov r8, r8)
 800a388:	0800f194 	.word	0x0800f194
 800a38c:	0800f19c 	.word	0x0800f19c

0800a390 <atof>:
 800a390:	b510      	push	{r4, lr}
 800a392:	2100      	movs	r1, #0
 800a394:	f001 fe00 	bl	800bf98 <strtod>
 800a398:	bd10      	pop	{r4, pc}
	...

0800a39c <__errno>:
 800a39c:	4b01      	ldr	r3, [pc, #4]	; (800a3a4 <__errno+0x8>)
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	4770      	bx	lr
 800a3a2:	46c0      	nop			; (mov r8, r8)
 800a3a4:	2000000c 	.word	0x2000000c

0800a3a8 <__libc_init_array>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	2600      	movs	r6, #0
 800a3ac:	4d0c      	ldr	r5, [pc, #48]	; (800a3e0 <__libc_init_array+0x38>)
 800a3ae:	4c0d      	ldr	r4, [pc, #52]	; (800a3e4 <__libc_init_array+0x3c>)
 800a3b0:	1b64      	subs	r4, r4, r5
 800a3b2:	10a4      	asrs	r4, r4, #2
 800a3b4:	42a6      	cmp	r6, r4
 800a3b6:	d109      	bne.n	800a3cc <__libc_init_array+0x24>
 800a3b8:	2600      	movs	r6, #0
 800a3ba:	f004 fdb9 	bl	800ef30 <_init>
 800a3be:	4d0a      	ldr	r5, [pc, #40]	; (800a3e8 <__libc_init_array+0x40>)
 800a3c0:	4c0a      	ldr	r4, [pc, #40]	; (800a3ec <__libc_init_array+0x44>)
 800a3c2:	1b64      	subs	r4, r4, r5
 800a3c4:	10a4      	asrs	r4, r4, #2
 800a3c6:	42a6      	cmp	r6, r4
 800a3c8:	d105      	bne.n	800a3d6 <__libc_init_array+0x2e>
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}
 800a3cc:	00b3      	lsls	r3, r6, #2
 800a3ce:	58eb      	ldr	r3, [r5, r3]
 800a3d0:	4798      	blx	r3
 800a3d2:	3601      	adds	r6, #1
 800a3d4:	e7ee      	b.n	800a3b4 <__libc_init_array+0xc>
 800a3d6:	00b3      	lsls	r3, r6, #2
 800a3d8:	58eb      	ldr	r3, [r5, r3]
 800a3da:	4798      	blx	r3
 800a3dc:	3601      	adds	r6, #1
 800a3de:	e7f2      	b.n	800a3c6 <__libc_init_array+0x1e>
 800a3e0:	0800f6b0 	.word	0x0800f6b0
 800a3e4:	0800f6b0 	.word	0x0800f6b0
 800a3e8:	0800f6b0 	.word	0x0800f6b0
 800a3ec:	0800f6b4 	.word	0x0800f6b4

0800a3f0 <malloc>:
 800a3f0:	b510      	push	{r4, lr}
 800a3f2:	4b03      	ldr	r3, [pc, #12]	; (800a400 <malloc+0x10>)
 800a3f4:	0001      	movs	r1, r0
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	f000 f878 	bl	800a4ec <_malloc_r>
 800a3fc:	bd10      	pop	{r4, pc}
 800a3fe:	46c0      	nop			; (mov r8, r8)
 800a400:	2000000c 	.word	0x2000000c

0800a404 <memset>:
 800a404:	0003      	movs	r3, r0
 800a406:	1882      	adds	r2, r0, r2
 800a408:	4293      	cmp	r3, r2
 800a40a:	d100      	bne.n	800a40e <memset+0xa>
 800a40c:	4770      	bx	lr
 800a40e:	7019      	strb	r1, [r3, #0]
 800a410:	3301      	adds	r3, #1
 800a412:	e7f9      	b.n	800a408 <memset+0x4>

0800a414 <_free_r>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	0005      	movs	r5, r0
 800a418:	2900      	cmp	r1, #0
 800a41a:	d010      	beq.n	800a43e <_free_r+0x2a>
 800a41c:	1f0c      	subs	r4, r1, #4
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	da00      	bge.n	800a426 <_free_r+0x12>
 800a424:	18e4      	adds	r4, r4, r3
 800a426:	0028      	movs	r0, r5
 800a428:	f003 f92c 	bl	800d684 <__malloc_lock>
 800a42c:	4a1d      	ldr	r2, [pc, #116]	; (800a4a4 <_free_r+0x90>)
 800a42e:	6813      	ldr	r3, [r2, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d105      	bne.n	800a440 <_free_r+0x2c>
 800a434:	6063      	str	r3, [r4, #4]
 800a436:	6014      	str	r4, [r2, #0]
 800a438:	0028      	movs	r0, r5
 800a43a:	f003 f92b 	bl	800d694 <__malloc_unlock>
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	42a3      	cmp	r3, r4
 800a442:	d908      	bls.n	800a456 <_free_r+0x42>
 800a444:	6821      	ldr	r1, [r4, #0]
 800a446:	1860      	adds	r0, r4, r1
 800a448:	4283      	cmp	r3, r0
 800a44a:	d1f3      	bne.n	800a434 <_free_r+0x20>
 800a44c:	6818      	ldr	r0, [r3, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	1841      	adds	r1, r0, r1
 800a452:	6021      	str	r1, [r4, #0]
 800a454:	e7ee      	b.n	800a434 <_free_r+0x20>
 800a456:	001a      	movs	r2, r3
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <_free_r+0x4e>
 800a45e:	42a3      	cmp	r3, r4
 800a460:	d9f9      	bls.n	800a456 <_free_r+0x42>
 800a462:	6811      	ldr	r1, [r2, #0]
 800a464:	1850      	adds	r0, r2, r1
 800a466:	42a0      	cmp	r0, r4
 800a468:	d10b      	bne.n	800a482 <_free_r+0x6e>
 800a46a:	6820      	ldr	r0, [r4, #0]
 800a46c:	1809      	adds	r1, r1, r0
 800a46e:	1850      	adds	r0, r2, r1
 800a470:	6011      	str	r1, [r2, #0]
 800a472:	4283      	cmp	r3, r0
 800a474:	d1e0      	bne.n	800a438 <_free_r+0x24>
 800a476:	6818      	ldr	r0, [r3, #0]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	1841      	adds	r1, r0, r1
 800a47c:	6011      	str	r1, [r2, #0]
 800a47e:	6053      	str	r3, [r2, #4]
 800a480:	e7da      	b.n	800a438 <_free_r+0x24>
 800a482:	42a0      	cmp	r0, r4
 800a484:	d902      	bls.n	800a48c <_free_r+0x78>
 800a486:	230c      	movs	r3, #12
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	e7d5      	b.n	800a438 <_free_r+0x24>
 800a48c:	6821      	ldr	r1, [r4, #0]
 800a48e:	1860      	adds	r0, r4, r1
 800a490:	4283      	cmp	r3, r0
 800a492:	d103      	bne.n	800a49c <_free_r+0x88>
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	1841      	adds	r1, r0, r1
 800a49a:	6021      	str	r1, [r4, #0]
 800a49c:	6063      	str	r3, [r4, #4]
 800a49e:	6054      	str	r4, [r2, #4]
 800a4a0:	e7ca      	b.n	800a438 <_free_r+0x24>
 800a4a2:	46c0      	nop			; (mov r8, r8)
 800a4a4:	20000500 	.word	0x20000500

0800a4a8 <sbrk_aligned>:
 800a4a8:	b570      	push	{r4, r5, r6, lr}
 800a4aa:	4e0f      	ldr	r6, [pc, #60]	; (800a4e8 <sbrk_aligned+0x40>)
 800a4ac:	000d      	movs	r5, r1
 800a4ae:	6831      	ldr	r1, [r6, #0]
 800a4b0:	0004      	movs	r4, r0
 800a4b2:	2900      	cmp	r1, #0
 800a4b4:	d102      	bne.n	800a4bc <sbrk_aligned+0x14>
 800a4b6:	f000 ff05 	bl	800b2c4 <_sbrk_r>
 800a4ba:	6030      	str	r0, [r6, #0]
 800a4bc:	0029      	movs	r1, r5
 800a4be:	0020      	movs	r0, r4
 800a4c0:	f000 ff00 	bl	800b2c4 <_sbrk_r>
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	d00a      	beq.n	800a4de <sbrk_aligned+0x36>
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	1cc5      	adds	r5, r0, #3
 800a4cc:	439d      	bics	r5, r3
 800a4ce:	42a8      	cmp	r0, r5
 800a4d0:	d007      	beq.n	800a4e2 <sbrk_aligned+0x3a>
 800a4d2:	1a29      	subs	r1, r5, r0
 800a4d4:	0020      	movs	r0, r4
 800a4d6:	f000 fef5 	bl	800b2c4 <_sbrk_r>
 800a4da:	1c43      	adds	r3, r0, #1
 800a4dc:	d101      	bne.n	800a4e2 <sbrk_aligned+0x3a>
 800a4de:	2501      	movs	r5, #1
 800a4e0:	426d      	negs	r5, r5
 800a4e2:	0028      	movs	r0, r5
 800a4e4:	bd70      	pop	{r4, r5, r6, pc}
 800a4e6:	46c0      	nop			; (mov r8, r8)
 800a4e8:	20000504 	.word	0x20000504

0800a4ec <_malloc_r>:
 800a4ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ee:	2203      	movs	r2, #3
 800a4f0:	1ccb      	adds	r3, r1, #3
 800a4f2:	4393      	bics	r3, r2
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	0006      	movs	r6, r0
 800a4f8:	001f      	movs	r7, r3
 800a4fa:	2b0c      	cmp	r3, #12
 800a4fc:	d232      	bcs.n	800a564 <_malloc_r+0x78>
 800a4fe:	270c      	movs	r7, #12
 800a500:	42b9      	cmp	r1, r7
 800a502:	d831      	bhi.n	800a568 <_malloc_r+0x7c>
 800a504:	0030      	movs	r0, r6
 800a506:	f003 f8bd 	bl	800d684 <__malloc_lock>
 800a50a:	4d32      	ldr	r5, [pc, #200]	; (800a5d4 <_malloc_r+0xe8>)
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	001c      	movs	r4, r3
 800a510:	2c00      	cmp	r4, #0
 800a512:	d12e      	bne.n	800a572 <_malloc_r+0x86>
 800a514:	0039      	movs	r1, r7
 800a516:	0030      	movs	r0, r6
 800a518:	f7ff ffc6 	bl	800a4a8 <sbrk_aligned>
 800a51c:	0004      	movs	r4, r0
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	d11e      	bne.n	800a560 <_malloc_r+0x74>
 800a522:	682c      	ldr	r4, [r5, #0]
 800a524:	0025      	movs	r5, r4
 800a526:	2d00      	cmp	r5, #0
 800a528:	d14a      	bne.n	800a5c0 <_malloc_r+0xd4>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	0029      	movs	r1, r5
 800a52e:	18e3      	adds	r3, r4, r3
 800a530:	0030      	movs	r0, r6
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	f000 fec6 	bl	800b2c4 <_sbrk_r>
 800a538:	9b01      	ldr	r3, [sp, #4]
 800a53a:	4283      	cmp	r3, r0
 800a53c:	d143      	bne.n	800a5c6 <_malloc_r+0xda>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	3703      	adds	r7, #3
 800a542:	1aff      	subs	r7, r7, r3
 800a544:	2303      	movs	r3, #3
 800a546:	439f      	bics	r7, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	2f0c      	cmp	r7, #12
 800a54c:	d200      	bcs.n	800a550 <_malloc_r+0x64>
 800a54e:	270c      	movs	r7, #12
 800a550:	0039      	movs	r1, r7
 800a552:	0030      	movs	r0, r6
 800a554:	f7ff ffa8 	bl	800a4a8 <sbrk_aligned>
 800a558:	1c43      	adds	r3, r0, #1
 800a55a:	d034      	beq.n	800a5c6 <_malloc_r+0xda>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	19df      	adds	r7, r3, r7
 800a560:	6027      	str	r7, [r4, #0]
 800a562:	e013      	b.n	800a58c <_malloc_r+0xa0>
 800a564:	2b00      	cmp	r3, #0
 800a566:	dacb      	bge.n	800a500 <_malloc_r+0x14>
 800a568:	230c      	movs	r3, #12
 800a56a:	2500      	movs	r5, #0
 800a56c:	6033      	str	r3, [r6, #0]
 800a56e:	0028      	movs	r0, r5
 800a570:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a572:	6822      	ldr	r2, [r4, #0]
 800a574:	1bd1      	subs	r1, r2, r7
 800a576:	d420      	bmi.n	800a5ba <_malloc_r+0xce>
 800a578:	290b      	cmp	r1, #11
 800a57a:	d917      	bls.n	800a5ac <_malloc_r+0xc0>
 800a57c:	19e2      	adds	r2, r4, r7
 800a57e:	6027      	str	r7, [r4, #0]
 800a580:	42a3      	cmp	r3, r4
 800a582:	d111      	bne.n	800a5a8 <_malloc_r+0xbc>
 800a584:	602a      	str	r2, [r5, #0]
 800a586:	6863      	ldr	r3, [r4, #4]
 800a588:	6011      	str	r1, [r2, #0]
 800a58a:	6053      	str	r3, [r2, #4]
 800a58c:	0030      	movs	r0, r6
 800a58e:	0025      	movs	r5, r4
 800a590:	f003 f880 	bl	800d694 <__malloc_unlock>
 800a594:	2207      	movs	r2, #7
 800a596:	350b      	adds	r5, #11
 800a598:	1d23      	adds	r3, r4, #4
 800a59a:	4395      	bics	r5, r2
 800a59c:	1aea      	subs	r2, r5, r3
 800a59e:	429d      	cmp	r5, r3
 800a5a0:	d0e5      	beq.n	800a56e <_malloc_r+0x82>
 800a5a2:	1b5b      	subs	r3, r3, r5
 800a5a4:	50a3      	str	r3, [r4, r2]
 800a5a6:	e7e2      	b.n	800a56e <_malloc_r+0x82>
 800a5a8:	605a      	str	r2, [r3, #4]
 800a5aa:	e7ec      	b.n	800a586 <_malloc_r+0x9a>
 800a5ac:	6862      	ldr	r2, [r4, #4]
 800a5ae:	42a3      	cmp	r3, r4
 800a5b0:	d101      	bne.n	800a5b6 <_malloc_r+0xca>
 800a5b2:	602a      	str	r2, [r5, #0]
 800a5b4:	e7ea      	b.n	800a58c <_malloc_r+0xa0>
 800a5b6:	605a      	str	r2, [r3, #4]
 800a5b8:	e7e8      	b.n	800a58c <_malloc_r+0xa0>
 800a5ba:	0023      	movs	r3, r4
 800a5bc:	6864      	ldr	r4, [r4, #4]
 800a5be:	e7a7      	b.n	800a510 <_malloc_r+0x24>
 800a5c0:	002c      	movs	r4, r5
 800a5c2:	686d      	ldr	r5, [r5, #4]
 800a5c4:	e7af      	b.n	800a526 <_malloc_r+0x3a>
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	0030      	movs	r0, r6
 800a5ca:	6033      	str	r3, [r6, #0]
 800a5cc:	f003 f862 	bl	800d694 <__malloc_unlock>
 800a5d0:	e7cd      	b.n	800a56e <_malloc_r+0x82>
 800a5d2:	46c0      	nop			; (mov r8, r8)
 800a5d4:	20000500 	.word	0x20000500

0800a5d8 <__cvt>:
 800a5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5da:	001e      	movs	r6, r3
 800a5dc:	2300      	movs	r3, #0
 800a5de:	0014      	movs	r4, r2
 800a5e0:	b08b      	sub	sp, #44	; 0x2c
 800a5e2:	429e      	cmp	r6, r3
 800a5e4:	da04      	bge.n	800a5f0 <__cvt+0x18>
 800a5e6:	2180      	movs	r1, #128	; 0x80
 800a5e8:	0609      	lsls	r1, r1, #24
 800a5ea:	1873      	adds	r3, r6, r1
 800a5ec:	001e      	movs	r6, r3
 800a5ee:	232d      	movs	r3, #45	; 0x2d
 800a5f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a5f4:	7013      	strb	r3, [r2, #0]
 800a5f6:	2320      	movs	r3, #32
 800a5f8:	2203      	movs	r2, #3
 800a5fa:	439f      	bics	r7, r3
 800a5fc:	2f46      	cmp	r7, #70	; 0x46
 800a5fe:	d007      	beq.n	800a610 <__cvt+0x38>
 800a600:	003b      	movs	r3, r7
 800a602:	3b45      	subs	r3, #69	; 0x45
 800a604:	4259      	negs	r1, r3
 800a606:	414b      	adcs	r3, r1
 800a608:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a60a:	3a01      	subs	r2, #1
 800a60c:	18cb      	adds	r3, r1, r3
 800a60e:	9310      	str	r3, [sp, #64]	; 0x40
 800a610:	ab09      	add	r3, sp, #36	; 0x24
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	ab08      	add	r3, sp, #32
 800a616:	9303      	str	r3, [sp, #12]
 800a618:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a61a:	9200      	str	r2, [sp, #0]
 800a61c:	9302      	str	r3, [sp, #8]
 800a61e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a620:	0022      	movs	r2, r4
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	0033      	movs	r3, r6
 800a626:	f001 fe65 	bl	800c2f4 <_dtoa_r>
 800a62a:	0005      	movs	r5, r0
 800a62c:	2f47      	cmp	r7, #71	; 0x47
 800a62e:	d102      	bne.n	800a636 <__cvt+0x5e>
 800a630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a632:	07db      	lsls	r3, r3, #31
 800a634:	d528      	bpl.n	800a688 <__cvt+0xb0>
 800a636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a638:	18eb      	adds	r3, r5, r3
 800a63a:	9307      	str	r3, [sp, #28]
 800a63c:	2f46      	cmp	r7, #70	; 0x46
 800a63e:	d114      	bne.n	800a66a <__cvt+0x92>
 800a640:	782b      	ldrb	r3, [r5, #0]
 800a642:	2b30      	cmp	r3, #48	; 0x30
 800a644:	d10c      	bne.n	800a660 <__cvt+0x88>
 800a646:	2200      	movs	r2, #0
 800a648:	2300      	movs	r3, #0
 800a64a:	0020      	movs	r0, r4
 800a64c:	0031      	movs	r1, r6
 800a64e:	f7f5 ff05 	bl	800045c <__aeabi_dcmpeq>
 800a652:	2800      	cmp	r0, #0
 800a654:	d104      	bne.n	800a660 <__cvt+0x88>
 800a656:	2301      	movs	r3, #1
 800a658:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a65a:	1a9b      	subs	r3, r3, r2
 800a65c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a662:	9a07      	ldr	r2, [sp, #28]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	18d3      	adds	r3, r2, r3
 800a668:	9307      	str	r3, [sp, #28]
 800a66a:	2200      	movs	r2, #0
 800a66c:	2300      	movs	r3, #0
 800a66e:	0020      	movs	r0, r4
 800a670:	0031      	movs	r1, r6
 800a672:	f7f5 fef3 	bl	800045c <__aeabi_dcmpeq>
 800a676:	2800      	cmp	r0, #0
 800a678:	d001      	beq.n	800a67e <__cvt+0xa6>
 800a67a:	9b07      	ldr	r3, [sp, #28]
 800a67c:	9309      	str	r3, [sp, #36]	; 0x24
 800a67e:	2230      	movs	r2, #48	; 0x30
 800a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a682:	9907      	ldr	r1, [sp, #28]
 800a684:	428b      	cmp	r3, r1
 800a686:	d306      	bcc.n	800a696 <__cvt+0xbe>
 800a688:	0028      	movs	r0, r5
 800a68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a68e:	1b5b      	subs	r3, r3, r5
 800a690:	6013      	str	r3, [r2, #0]
 800a692:	b00b      	add	sp, #44	; 0x2c
 800a694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a696:	1c59      	adds	r1, r3, #1
 800a698:	9109      	str	r1, [sp, #36]	; 0x24
 800a69a:	701a      	strb	r2, [r3, #0]
 800a69c:	e7f0      	b.n	800a680 <__cvt+0xa8>

0800a69e <__exponent>:
 800a69e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6a0:	1c83      	adds	r3, r0, #2
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	9303      	str	r3, [sp, #12]
 800a6a6:	0005      	movs	r5, r0
 800a6a8:	000c      	movs	r4, r1
 800a6aa:	232b      	movs	r3, #43	; 0x2b
 800a6ac:	7002      	strb	r2, [r0, #0]
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	da01      	bge.n	800a6b6 <__exponent+0x18>
 800a6b2:	424c      	negs	r4, r1
 800a6b4:	3302      	adds	r3, #2
 800a6b6:	706b      	strb	r3, [r5, #1]
 800a6b8:	2c09      	cmp	r4, #9
 800a6ba:	dd31      	ble.n	800a720 <__exponent+0x82>
 800a6bc:	270a      	movs	r7, #10
 800a6be:	ab04      	add	r3, sp, #16
 800a6c0:	1dde      	adds	r6, r3, #7
 800a6c2:	0020      	movs	r0, r4
 800a6c4:	0039      	movs	r1, r7
 800a6c6:	9601      	str	r6, [sp, #4]
 800a6c8:	f7f5 feb2 	bl	8000430 <__aeabi_idivmod>
 800a6cc:	3e01      	subs	r6, #1
 800a6ce:	3130      	adds	r1, #48	; 0x30
 800a6d0:	0020      	movs	r0, r4
 800a6d2:	7031      	strb	r1, [r6, #0]
 800a6d4:	0039      	movs	r1, r7
 800a6d6:	9402      	str	r4, [sp, #8]
 800a6d8:	f7f5 fdc4 	bl	8000264 <__divsi3>
 800a6dc:	9b02      	ldr	r3, [sp, #8]
 800a6de:	0004      	movs	r4, r0
 800a6e0:	2b63      	cmp	r3, #99	; 0x63
 800a6e2:	dcee      	bgt.n	800a6c2 <__exponent+0x24>
 800a6e4:	9b01      	ldr	r3, [sp, #4]
 800a6e6:	3430      	adds	r4, #48	; 0x30
 800a6e8:	1e9a      	subs	r2, r3, #2
 800a6ea:	0013      	movs	r3, r2
 800a6ec:	9903      	ldr	r1, [sp, #12]
 800a6ee:	7014      	strb	r4, [r2, #0]
 800a6f0:	a804      	add	r0, sp, #16
 800a6f2:	3007      	adds	r0, #7
 800a6f4:	4298      	cmp	r0, r3
 800a6f6:	d80e      	bhi.n	800a716 <__exponent+0x78>
 800a6f8:	ab04      	add	r3, sp, #16
 800a6fa:	3307      	adds	r3, #7
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d804      	bhi.n	800a70c <__exponent+0x6e>
 800a702:	ab04      	add	r3, sp, #16
 800a704:	3009      	adds	r0, #9
 800a706:	18c0      	adds	r0, r0, r3
 800a708:	9b01      	ldr	r3, [sp, #4]
 800a70a:	1ac0      	subs	r0, r0, r3
 800a70c:	9b03      	ldr	r3, [sp, #12]
 800a70e:	1818      	adds	r0, r3, r0
 800a710:	1b40      	subs	r0, r0, r5
 800a712:	b007      	add	sp, #28
 800a714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a716:	7818      	ldrb	r0, [r3, #0]
 800a718:	3301      	adds	r3, #1
 800a71a:	7008      	strb	r0, [r1, #0]
 800a71c:	3101      	adds	r1, #1
 800a71e:	e7e7      	b.n	800a6f0 <__exponent+0x52>
 800a720:	2330      	movs	r3, #48	; 0x30
 800a722:	18e4      	adds	r4, r4, r3
 800a724:	70ab      	strb	r3, [r5, #2]
 800a726:	1d28      	adds	r0, r5, #4
 800a728:	70ec      	strb	r4, [r5, #3]
 800a72a:	e7f1      	b.n	800a710 <__exponent+0x72>

0800a72c <_printf_float>:
 800a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a72e:	b095      	sub	sp, #84	; 0x54
 800a730:	000c      	movs	r4, r1
 800a732:	9209      	str	r2, [sp, #36]	; 0x24
 800a734:	001e      	movs	r6, r3
 800a736:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a738:	0007      	movs	r7, r0
 800a73a:	f002 ff79 	bl	800d630 <_localeconv_r>
 800a73e:	6803      	ldr	r3, [r0, #0]
 800a740:	0018      	movs	r0, r3
 800a742:	930c      	str	r3, [sp, #48]	; 0x30
 800a744:	f7f5 fce8 	bl	8000118 <strlen>
 800a748:	2300      	movs	r3, #0
 800a74a:	9312      	str	r3, [sp, #72]	; 0x48
 800a74c:	7e23      	ldrb	r3, [r4, #24]
 800a74e:	2207      	movs	r2, #7
 800a750:	930a      	str	r3, [sp, #40]	; 0x28
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	900e      	str	r0, [sp, #56]	; 0x38
 800a756:	930d      	str	r3, [sp, #52]	; 0x34
 800a758:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a75a:	682b      	ldr	r3, [r5, #0]
 800a75c:	05c9      	lsls	r1, r1, #23
 800a75e:	d547      	bpl.n	800a7f0 <_printf_float+0xc4>
 800a760:	189b      	adds	r3, r3, r2
 800a762:	4393      	bics	r3, r2
 800a764:	001a      	movs	r2, r3
 800a766:	3208      	adds	r2, #8
 800a768:	602a      	str	r2, [r5, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	64a2      	str	r2, [r4, #72]	; 0x48
 800a770:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a772:	2201      	movs	r2, #1
 800a774:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a776:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a778:	930b      	str	r3, [sp, #44]	; 0x2c
 800a77a:	006b      	lsls	r3, r5, #1
 800a77c:	085b      	lsrs	r3, r3, #1
 800a77e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a780:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a782:	4ba7      	ldr	r3, [pc, #668]	; (800aa20 <_printf_float+0x2f4>)
 800a784:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a786:	4252      	negs	r2, r2
 800a788:	f7f8 fc52 	bl	8003030 <__aeabi_dcmpun>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d131      	bne.n	800a7f4 <_printf_float+0xc8>
 800a790:	2201      	movs	r2, #1
 800a792:	4ba3      	ldr	r3, [pc, #652]	; (800aa20 <_printf_float+0x2f4>)
 800a794:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a796:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a798:	4252      	negs	r2, r2
 800a79a:	f7f5 fe6f 	bl	800047c <__aeabi_dcmple>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d128      	bne.n	800a7f4 <_printf_float+0xc8>
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	0029      	movs	r1, r5
 800a7a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a7aa:	f7f5 fe5d 	bl	8000468 <__aeabi_dcmplt>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d003      	beq.n	800a7ba <_printf_float+0x8e>
 800a7b2:	0023      	movs	r3, r4
 800a7b4:	222d      	movs	r2, #45	; 0x2d
 800a7b6:	3343      	adds	r3, #67	; 0x43
 800a7b8:	701a      	strb	r2, [r3, #0]
 800a7ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7bc:	4d99      	ldr	r5, [pc, #612]	; (800aa24 <_printf_float+0x2f8>)
 800a7be:	2b47      	cmp	r3, #71	; 0x47
 800a7c0:	d900      	bls.n	800a7c4 <_printf_float+0x98>
 800a7c2:	4d99      	ldr	r5, [pc, #612]	; (800aa28 <_printf_float+0x2fc>)
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	439a      	bics	r2, r3
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	6022      	str	r2, [r4, #0]
 800a7d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d6:	0021      	movs	r1, r4
 800a7d8:	0038      	movs	r0, r7
 800a7da:	9600      	str	r6, [sp, #0]
 800a7dc:	aa13      	add	r2, sp, #76	; 0x4c
 800a7de:	f000 f9e7 	bl	800abb0 <_printf_common>
 800a7e2:	1c43      	adds	r3, r0, #1
 800a7e4:	d000      	beq.n	800a7e8 <_printf_float+0xbc>
 800a7e6:	e0a2      	b.n	800a92e <_printf_float+0x202>
 800a7e8:	2001      	movs	r0, #1
 800a7ea:	4240      	negs	r0, r0
 800a7ec:	b015      	add	sp, #84	; 0x54
 800a7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f0:	3307      	adds	r3, #7
 800a7f2:	e7b6      	b.n	800a762 <_printf_float+0x36>
 800a7f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7f6:	002b      	movs	r3, r5
 800a7f8:	0010      	movs	r0, r2
 800a7fa:	0029      	movs	r1, r5
 800a7fc:	f7f8 fc18 	bl	8003030 <__aeabi_dcmpun>
 800a800:	2800      	cmp	r0, #0
 800a802:	d00b      	beq.n	800a81c <_printf_float+0xf0>
 800a804:	2d00      	cmp	r5, #0
 800a806:	da03      	bge.n	800a810 <_printf_float+0xe4>
 800a808:	0023      	movs	r3, r4
 800a80a:	222d      	movs	r2, #45	; 0x2d
 800a80c:	3343      	adds	r3, #67	; 0x43
 800a80e:	701a      	strb	r2, [r3, #0]
 800a810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a812:	4d86      	ldr	r5, [pc, #536]	; (800aa2c <_printf_float+0x300>)
 800a814:	2b47      	cmp	r3, #71	; 0x47
 800a816:	d9d5      	bls.n	800a7c4 <_printf_float+0x98>
 800a818:	4d85      	ldr	r5, [pc, #532]	; (800aa30 <_printf_float+0x304>)
 800a81a:	e7d3      	b.n	800a7c4 <_printf_float+0x98>
 800a81c:	2220      	movs	r2, #32
 800a81e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a820:	6863      	ldr	r3, [r4, #4]
 800a822:	4391      	bics	r1, r2
 800a824:	910f      	str	r1, [sp, #60]	; 0x3c
 800a826:	1c5a      	adds	r2, r3, #1
 800a828:	d149      	bne.n	800a8be <_printf_float+0x192>
 800a82a:	3307      	adds	r3, #7
 800a82c:	6063      	str	r3, [r4, #4]
 800a82e:	2380      	movs	r3, #128	; 0x80
 800a830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a832:	00db      	lsls	r3, r3, #3
 800a834:	4313      	orrs	r3, r2
 800a836:	2200      	movs	r2, #0
 800a838:	9206      	str	r2, [sp, #24]
 800a83a:	aa12      	add	r2, sp, #72	; 0x48
 800a83c:	9205      	str	r2, [sp, #20]
 800a83e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a840:	a908      	add	r1, sp, #32
 800a842:	9204      	str	r2, [sp, #16]
 800a844:	aa11      	add	r2, sp, #68	; 0x44
 800a846:	9203      	str	r2, [sp, #12]
 800a848:	2223      	movs	r2, #35	; 0x23
 800a84a:	6023      	str	r3, [r4, #0]
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	6863      	ldr	r3, [r4, #4]
 800a850:	1852      	adds	r2, r2, r1
 800a852:	9202      	str	r2, [sp, #8]
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	0038      	movs	r0, r7
 800a858:	002b      	movs	r3, r5
 800a85a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a85c:	f7ff febc 	bl	800a5d8 <__cvt>
 800a860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a862:	0005      	movs	r5, r0
 800a864:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a866:	2b47      	cmp	r3, #71	; 0x47
 800a868:	d108      	bne.n	800a87c <_printf_float+0x150>
 800a86a:	1ccb      	adds	r3, r1, #3
 800a86c:	db02      	blt.n	800a874 <_printf_float+0x148>
 800a86e:	6863      	ldr	r3, [r4, #4]
 800a870:	4299      	cmp	r1, r3
 800a872:	dd48      	ble.n	800a906 <_printf_float+0x1da>
 800a874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a876:	3b02      	subs	r3, #2
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	930a      	str	r3, [sp, #40]	; 0x28
 800a87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a87e:	2b65      	cmp	r3, #101	; 0x65
 800a880:	d824      	bhi.n	800a8cc <_printf_float+0x1a0>
 800a882:	0020      	movs	r0, r4
 800a884:	001a      	movs	r2, r3
 800a886:	3901      	subs	r1, #1
 800a888:	3050      	adds	r0, #80	; 0x50
 800a88a:	9111      	str	r1, [sp, #68]	; 0x44
 800a88c:	f7ff ff07 	bl	800a69e <__exponent>
 800a890:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a892:	900b      	str	r0, [sp, #44]	; 0x2c
 800a894:	1813      	adds	r3, r2, r0
 800a896:	6123      	str	r3, [r4, #16]
 800a898:	2a01      	cmp	r2, #1
 800a89a:	dc02      	bgt.n	800a8a2 <_printf_float+0x176>
 800a89c:	6822      	ldr	r2, [r4, #0]
 800a89e:	07d2      	lsls	r2, r2, #31
 800a8a0:	d501      	bpl.n	800a8a6 <_printf_float+0x17a>
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	2323      	movs	r3, #35	; 0x23
 800a8a8:	aa08      	add	r2, sp, #32
 800a8aa:	189b      	adds	r3, r3, r2
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d100      	bne.n	800a8b4 <_printf_float+0x188>
 800a8b2:	e78f      	b.n	800a7d4 <_printf_float+0xa8>
 800a8b4:	0023      	movs	r3, r4
 800a8b6:	222d      	movs	r2, #45	; 0x2d
 800a8b8:	3343      	adds	r3, #67	; 0x43
 800a8ba:	701a      	strb	r2, [r3, #0]
 800a8bc:	e78a      	b.n	800a7d4 <_printf_float+0xa8>
 800a8be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8c0:	2a47      	cmp	r2, #71	; 0x47
 800a8c2:	d1b4      	bne.n	800a82e <_printf_float+0x102>
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1b2      	bne.n	800a82e <_printf_float+0x102>
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	e7af      	b.n	800a82c <_printf_float+0x100>
 800a8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ce:	2b66      	cmp	r3, #102	; 0x66
 800a8d0:	d11b      	bne.n	800a90a <_printf_float+0x1de>
 800a8d2:	6863      	ldr	r3, [r4, #4]
 800a8d4:	2900      	cmp	r1, #0
 800a8d6:	dd0d      	ble.n	800a8f4 <_printf_float+0x1c8>
 800a8d8:	6121      	str	r1, [r4, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d102      	bne.n	800a8e4 <_printf_float+0x1b8>
 800a8de:	6822      	ldr	r2, [r4, #0]
 800a8e0:	07d2      	lsls	r2, r2, #31
 800a8e2:	d502      	bpl.n	800a8ea <_printf_float+0x1be>
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	1859      	adds	r1, r3, r1
 800a8e8:	6121      	str	r1, [r4, #16]
 800a8ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8ec:	65a3      	str	r3, [r4, #88]	; 0x58
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8f2:	e7d8      	b.n	800a8a6 <_printf_float+0x17a>
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d103      	bne.n	800a900 <_printf_float+0x1d4>
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	6821      	ldr	r1, [r4, #0]
 800a8fc:	4211      	tst	r1, r2
 800a8fe:	d000      	beq.n	800a902 <_printf_float+0x1d6>
 800a900:	1c9a      	adds	r2, r3, #2
 800a902:	6122      	str	r2, [r4, #16]
 800a904:	e7f1      	b.n	800a8ea <_printf_float+0x1be>
 800a906:	2367      	movs	r3, #103	; 0x67
 800a908:	930a      	str	r3, [sp, #40]	; 0x28
 800a90a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a90c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a90e:	4293      	cmp	r3, r2
 800a910:	db06      	blt.n	800a920 <_printf_float+0x1f4>
 800a912:	6822      	ldr	r2, [r4, #0]
 800a914:	6123      	str	r3, [r4, #16]
 800a916:	07d2      	lsls	r2, r2, #31
 800a918:	d5e7      	bpl.n	800a8ea <_printf_float+0x1be>
 800a91a:	3301      	adds	r3, #1
 800a91c:	6123      	str	r3, [r4, #16]
 800a91e:	e7e4      	b.n	800a8ea <_printf_float+0x1be>
 800a920:	2101      	movs	r1, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	dc01      	bgt.n	800a92a <_printf_float+0x1fe>
 800a926:	1849      	adds	r1, r1, r1
 800a928:	1ac9      	subs	r1, r1, r3
 800a92a:	1852      	adds	r2, r2, r1
 800a92c:	e7e9      	b.n	800a902 <_printf_float+0x1d6>
 800a92e:	6822      	ldr	r2, [r4, #0]
 800a930:	0553      	lsls	r3, r2, #21
 800a932:	d407      	bmi.n	800a944 <_printf_float+0x218>
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	002a      	movs	r2, r5
 800a938:	0038      	movs	r0, r7
 800a93a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a93c:	47b0      	blx	r6
 800a93e:	1c43      	adds	r3, r0, #1
 800a940:	d128      	bne.n	800a994 <_printf_float+0x268>
 800a942:	e751      	b.n	800a7e8 <_printf_float+0xbc>
 800a944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a946:	2b65      	cmp	r3, #101	; 0x65
 800a948:	d800      	bhi.n	800a94c <_printf_float+0x220>
 800a94a:	e0e1      	b.n	800ab10 <_printf_float+0x3e4>
 800a94c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a94e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a950:	2200      	movs	r2, #0
 800a952:	2300      	movs	r3, #0
 800a954:	f7f5 fd82 	bl	800045c <__aeabi_dcmpeq>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d031      	beq.n	800a9c0 <_printf_float+0x294>
 800a95c:	2301      	movs	r3, #1
 800a95e:	0038      	movs	r0, r7
 800a960:	4a34      	ldr	r2, [pc, #208]	; (800aa34 <_printf_float+0x308>)
 800a962:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a964:	47b0      	blx	r6
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	d100      	bne.n	800a96c <_printf_float+0x240>
 800a96a:	e73d      	b.n	800a7e8 <_printf_float+0xbc>
 800a96c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a96e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a970:	4293      	cmp	r3, r2
 800a972:	db02      	blt.n	800a97a <_printf_float+0x24e>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	07db      	lsls	r3, r3, #31
 800a978:	d50c      	bpl.n	800a994 <_printf_float+0x268>
 800a97a:	0038      	movs	r0, r7
 800a97c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a97e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a980:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a982:	47b0      	blx	r6
 800a984:	2500      	movs	r5, #0
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	d100      	bne.n	800a98c <_printf_float+0x260>
 800a98a:	e72d      	b.n	800a7e8 <_printf_float+0xbc>
 800a98c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a98e:	3b01      	subs	r3, #1
 800a990:	42ab      	cmp	r3, r5
 800a992:	dc0a      	bgt.n	800a9aa <_printf_float+0x27e>
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	079b      	lsls	r3, r3, #30
 800a998:	d500      	bpl.n	800a99c <_printf_float+0x270>
 800a99a:	e106      	b.n	800abaa <_printf_float+0x47e>
 800a99c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a99e:	68e0      	ldr	r0, [r4, #12]
 800a9a0:	4298      	cmp	r0, r3
 800a9a2:	db00      	blt.n	800a9a6 <_printf_float+0x27a>
 800a9a4:	e722      	b.n	800a7ec <_printf_float+0xc0>
 800a9a6:	0018      	movs	r0, r3
 800a9a8:	e720      	b.n	800a7ec <_printf_float+0xc0>
 800a9aa:	0022      	movs	r2, r4
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	0038      	movs	r0, r7
 800a9b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9b2:	321a      	adds	r2, #26
 800a9b4:	47b0      	blx	r6
 800a9b6:	1c43      	adds	r3, r0, #1
 800a9b8:	d100      	bne.n	800a9bc <_printf_float+0x290>
 800a9ba:	e715      	b.n	800a7e8 <_printf_float+0xbc>
 800a9bc:	3501      	adds	r5, #1
 800a9be:	e7e5      	b.n	800a98c <_printf_float+0x260>
 800a9c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dc38      	bgt.n	800aa38 <_printf_float+0x30c>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	0038      	movs	r0, r7
 800a9ca:	4a1a      	ldr	r2, [pc, #104]	; (800aa34 <_printf_float+0x308>)
 800a9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9ce:	47b0      	blx	r6
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d100      	bne.n	800a9d6 <_printf_float+0x2aa>
 800a9d4:	e708      	b.n	800a7e8 <_printf_float+0xbc>
 800a9d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	d102      	bne.n	800a9e4 <_printf_float+0x2b8>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	07db      	lsls	r3, r3, #31
 800a9e2:	d5d7      	bpl.n	800a994 <_printf_float+0x268>
 800a9e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9e6:	0038      	movs	r0, r7
 800a9e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9ec:	47b0      	blx	r6
 800a9ee:	1c43      	adds	r3, r0, #1
 800a9f0:	d100      	bne.n	800a9f4 <_printf_float+0x2c8>
 800a9f2:	e6f9      	b.n	800a7e8 <_printf_float+0xbc>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9fc:	425b      	negs	r3, r3
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	dc01      	bgt.n	800aa06 <_printf_float+0x2da>
 800aa02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa04:	e797      	b.n	800a936 <_printf_float+0x20a>
 800aa06:	0022      	movs	r2, r4
 800aa08:	2301      	movs	r3, #1
 800aa0a:	0038      	movs	r0, r7
 800aa0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa0e:	321a      	adds	r2, #26
 800aa10:	47b0      	blx	r6
 800aa12:	1c43      	adds	r3, r0, #1
 800aa14:	d100      	bne.n	800aa18 <_printf_float+0x2ec>
 800aa16:	e6e7      	b.n	800a7e8 <_printf_float+0xbc>
 800aa18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	e7eb      	b.n	800a9f6 <_printf_float+0x2ca>
 800aa1e:	46c0      	nop			; (mov r8, r8)
 800aa20:	7fefffff 	.word	0x7fefffff
 800aa24:	0800f1a8 	.word	0x0800f1a8
 800aa28:	0800f1ac 	.word	0x0800f1ac
 800aa2c:	0800f1b0 	.word	0x0800f1b0
 800aa30:	0800f1b4 	.word	0x0800f1b4
 800aa34:	0800f1b8 	.word	0x0800f1b8
 800aa38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa3c:	920a      	str	r2, [sp, #40]	; 0x28
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	dd00      	ble.n	800aa44 <_printf_float+0x318>
 800aa42:	930a      	str	r3, [sp, #40]	; 0x28
 800aa44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	dc3c      	bgt.n	800aac4 <_printf_float+0x398>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	930d      	str	r3, [sp, #52]	; 0x34
 800aa4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa50:	43db      	mvns	r3, r3
 800aa52:	17db      	asrs	r3, r3, #31
 800aa54:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa5e:	4013      	ands	r3, r2
 800aa60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa66:	4293      	cmp	r3, r2
 800aa68:	dc34      	bgt.n	800aad4 <_printf_float+0x3a8>
 800aa6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	db3d      	blt.n	800aaee <_printf_float+0x3c2>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	07db      	lsls	r3, r3, #31
 800aa76:	d43a      	bmi.n	800aaee <_printf_float+0x3c2>
 800aa78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	1a52      	subs	r2, r2, r1
 800aa82:	920a      	str	r2, [sp, #40]	; 0x28
 800aa84:	429a      	cmp	r2, r3
 800aa86:	dd00      	ble.n	800aa8a <_printf_float+0x35e>
 800aa88:	930a      	str	r3, [sp, #40]	; 0x28
 800aa8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dc36      	bgt.n	800aafe <_printf_float+0x3d2>
 800aa90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa92:	2500      	movs	r5, #0
 800aa94:	43db      	mvns	r3, r3
 800aa96:	17db      	asrs	r3, r3, #31
 800aa98:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aaa0:	1a9b      	subs	r3, r3, r2
 800aaa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaa4:	400a      	ands	r2, r1
 800aaa6:	1a9b      	subs	r3, r3, r2
 800aaa8:	42ab      	cmp	r3, r5
 800aaaa:	dc00      	bgt.n	800aaae <_printf_float+0x382>
 800aaac:	e772      	b.n	800a994 <_printf_float+0x268>
 800aaae:	0022      	movs	r2, r4
 800aab0:	2301      	movs	r3, #1
 800aab2:	0038      	movs	r0, r7
 800aab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aab6:	321a      	adds	r2, #26
 800aab8:	47b0      	blx	r6
 800aaba:	1c43      	adds	r3, r0, #1
 800aabc:	d100      	bne.n	800aac0 <_printf_float+0x394>
 800aabe:	e693      	b.n	800a7e8 <_printf_float+0xbc>
 800aac0:	3501      	adds	r5, #1
 800aac2:	e7ea      	b.n	800aa9a <_printf_float+0x36e>
 800aac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac6:	002a      	movs	r2, r5
 800aac8:	0038      	movs	r0, r7
 800aaca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aacc:	47b0      	blx	r6
 800aace:	1c43      	adds	r3, r0, #1
 800aad0:	d1bb      	bne.n	800aa4a <_printf_float+0x31e>
 800aad2:	e689      	b.n	800a7e8 <_printf_float+0xbc>
 800aad4:	0022      	movs	r2, r4
 800aad6:	2301      	movs	r3, #1
 800aad8:	0038      	movs	r0, r7
 800aada:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aadc:	321a      	adds	r2, #26
 800aade:	47b0      	blx	r6
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d100      	bne.n	800aae6 <_printf_float+0x3ba>
 800aae4:	e680      	b.n	800a7e8 <_printf_float+0xbc>
 800aae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae8:	3301      	adds	r3, #1
 800aaea:	930d      	str	r3, [sp, #52]	; 0x34
 800aaec:	e7b3      	b.n	800aa56 <_printf_float+0x32a>
 800aaee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaf0:	0038      	movs	r0, r7
 800aaf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaf6:	47b0      	blx	r6
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d1bd      	bne.n	800aa78 <_printf_float+0x34c>
 800aafc:	e674      	b.n	800a7e8 <_printf_float+0xbc>
 800aafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab00:	0038      	movs	r0, r7
 800ab02:	18ea      	adds	r2, r5, r3
 800ab04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab08:	47b0      	blx	r6
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	d1c0      	bne.n	800aa90 <_printf_float+0x364>
 800ab0e:	e66b      	b.n	800a7e8 <_printf_float+0xbc>
 800ab10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	dc02      	bgt.n	800ab1c <_printf_float+0x3f0>
 800ab16:	2301      	movs	r3, #1
 800ab18:	421a      	tst	r2, r3
 800ab1a:	d034      	beq.n	800ab86 <_printf_float+0x45a>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	002a      	movs	r2, r5
 800ab20:	0038      	movs	r0, r7
 800ab22:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab24:	47b0      	blx	r6
 800ab26:	1c43      	adds	r3, r0, #1
 800ab28:	d100      	bne.n	800ab2c <_printf_float+0x400>
 800ab2a:	e65d      	b.n	800a7e8 <_printf_float+0xbc>
 800ab2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab2e:	0038      	movs	r0, r7
 800ab30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab34:	47b0      	blx	r6
 800ab36:	1c43      	adds	r3, r0, #1
 800ab38:	d100      	bne.n	800ab3c <_printf_float+0x410>
 800ab3a:	e655      	b.n	800a7e8 <_printf_float+0xbc>
 800ab3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ab3e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ab40:	2200      	movs	r2, #0
 800ab42:	2300      	movs	r3, #0
 800ab44:	f7f5 fc8a 	bl	800045c <__aeabi_dcmpeq>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d11a      	bne.n	800ab82 <_printf_float+0x456>
 800ab4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab4e:	1c6a      	adds	r2, r5, #1
 800ab50:	3b01      	subs	r3, #1
 800ab52:	0038      	movs	r0, r7
 800ab54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab56:	47b0      	blx	r6
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d10e      	bne.n	800ab7a <_printf_float+0x44e>
 800ab5c:	e644      	b.n	800a7e8 <_printf_float+0xbc>
 800ab5e:	0022      	movs	r2, r4
 800ab60:	2301      	movs	r3, #1
 800ab62:	0038      	movs	r0, r7
 800ab64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab66:	321a      	adds	r2, #26
 800ab68:	47b0      	blx	r6
 800ab6a:	1c43      	adds	r3, r0, #1
 800ab6c:	d100      	bne.n	800ab70 <_printf_float+0x444>
 800ab6e:	e63b      	b.n	800a7e8 <_printf_float+0xbc>
 800ab70:	3501      	adds	r5, #1
 800ab72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab74:	3b01      	subs	r3, #1
 800ab76:	42ab      	cmp	r3, r5
 800ab78:	dcf1      	bgt.n	800ab5e <_printf_float+0x432>
 800ab7a:	0022      	movs	r2, r4
 800ab7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab7e:	3250      	adds	r2, #80	; 0x50
 800ab80:	e6da      	b.n	800a938 <_printf_float+0x20c>
 800ab82:	2500      	movs	r5, #0
 800ab84:	e7f5      	b.n	800ab72 <_printf_float+0x446>
 800ab86:	002a      	movs	r2, r5
 800ab88:	e7e3      	b.n	800ab52 <_printf_float+0x426>
 800ab8a:	0022      	movs	r2, r4
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	0038      	movs	r0, r7
 800ab90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab92:	3219      	adds	r2, #25
 800ab94:	47b0      	blx	r6
 800ab96:	1c43      	adds	r3, r0, #1
 800ab98:	d100      	bne.n	800ab9c <_printf_float+0x470>
 800ab9a:	e625      	b.n	800a7e8 <_printf_float+0xbc>
 800ab9c:	3501      	adds	r5, #1
 800ab9e:	68e3      	ldr	r3, [r4, #12]
 800aba0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aba2:	1a9b      	subs	r3, r3, r2
 800aba4:	42ab      	cmp	r3, r5
 800aba6:	dcf0      	bgt.n	800ab8a <_printf_float+0x45e>
 800aba8:	e6f8      	b.n	800a99c <_printf_float+0x270>
 800abaa:	2500      	movs	r5, #0
 800abac:	e7f7      	b.n	800ab9e <_printf_float+0x472>
 800abae:	46c0      	nop			; (mov r8, r8)

0800abb0 <_printf_common>:
 800abb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abb2:	0015      	movs	r5, r2
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	688a      	ldr	r2, [r1, #8]
 800abb8:	690b      	ldr	r3, [r1, #16]
 800abba:	000c      	movs	r4, r1
 800abbc:	9000      	str	r0, [sp, #0]
 800abbe:	4293      	cmp	r3, r2
 800abc0:	da00      	bge.n	800abc4 <_printf_common+0x14>
 800abc2:	0013      	movs	r3, r2
 800abc4:	0022      	movs	r2, r4
 800abc6:	602b      	str	r3, [r5, #0]
 800abc8:	3243      	adds	r2, #67	; 0x43
 800abca:	7812      	ldrb	r2, [r2, #0]
 800abcc:	2a00      	cmp	r2, #0
 800abce:	d001      	beq.n	800abd4 <_printf_common+0x24>
 800abd0:	3301      	adds	r3, #1
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	069b      	lsls	r3, r3, #26
 800abd8:	d502      	bpl.n	800abe0 <_printf_common+0x30>
 800abda:	682b      	ldr	r3, [r5, #0]
 800abdc:	3302      	adds	r3, #2
 800abde:	602b      	str	r3, [r5, #0]
 800abe0:	6822      	ldr	r2, [r4, #0]
 800abe2:	2306      	movs	r3, #6
 800abe4:	0017      	movs	r7, r2
 800abe6:	401f      	ands	r7, r3
 800abe8:	421a      	tst	r2, r3
 800abea:	d027      	beq.n	800ac3c <_printf_common+0x8c>
 800abec:	0023      	movs	r3, r4
 800abee:	3343      	adds	r3, #67	; 0x43
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	1e5a      	subs	r2, r3, #1
 800abf4:	4193      	sbcs	r3, r2
 800abf6:	6822      	ldr	r2, [r4, #0]
 800abf8:	0692      	lsls	r2, r2, #26
 800abfa:	d430      	bmi.n	800ac5e <_printf_common+0xae>
 800abfc:	0022      	movs	r2, r4
 800abfe:	9901      	ldr	r1, [sp, #4]
 800ac00:	9800      	ldr	r0, [sp, #0]
 800ac02:	9e08      	ldr	r6, [sp, #32]
 800ac04:	3243      	adds	r2, #67	; 0x43
 800ac06:	47b0      	blx	r6
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d025      	beq.n	800ac58 <_printf_common+0xa8>
 800ac0c:	2306      	movs	r3, #6
 800ac0e:	6820      	ldr	r0, [r4, #0]
 800ac10:	682a      	ldr	r2, [r5, #0]
 800ac12:	68e1      	ldr	r1, [r4, #12]
 800ac14:	2500      	movs	r5, #0
 800ac16:	4003      	ands	r3, r0
 800ac18:	2b04      	cmp	r3, #4
 800ac1a:	d103      	bne.n	800ac24 <_printf_common+0x74>
 800ac1c:	1a8d      	subs	r5, r1, r2
 800ac1e:	43eb      	mvns	r3, r5
 800ac20:	17db      	asrs	r3, r3, #31
 800ac22:	401d      	ands	r5, r3
 800ac24:	68a3      	ldr	r3, [r4, #8]
 800ac26:	6922      	ldr	r2, [r4, #16]
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	dd01      	ble.n	800ac30 <_printf_common+0x80>
 800ac2c:	1a9b      	subs	r3, r3, r2
 800ac2e:	18ed      	adds	r5, r5, r3
 800ac30:	2700      	movs	r7, #0
 800ac32:	42bd      	cmp	r5, r7
 800ac34:	d120      	bne.n	800ac78 <_printf_common+0xc8>
 800ac36:	2000      	movs	r0, #0
 800ac38:	e010      	b.n	800ac5c <_printf_common+0xac>
 800ac3a:	3701      	adds	r7, #1
 800ac3c:	68e3      	ldr	r3, [r4, #12]
 800ac3e:	682a      	ldr	r2, [r5, #0]
 800ac40:	1a9b      	subs	r3, r3, r2
 800ac42:	42bb      	cmp	r3, r7
 800ac44:	ddd2      	ble.n	800abec <_printf_common+0x3c>
 800ac46:	0022      	movs	r2, r4
 800ac48:	2301      	movs	r3, #1
 800ac4a:	9901      	ldr	r1, [sp, #4]
 800ac4c:	9800      	ldr	r0, [sp, #0]
 800ac4e:	9e08      	ldr	r6, [sp, #32]
 800ac50:	3219      	adds	r2, #25
 800ac52:	47b0      	blx	r6
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d1f0      	bne.n	800ac3a <_printf_common+0x8a>
 800ac58:	2001      	movs	r0, #1
 800ac5a:	4240      	negs	r0, r0
 800ac5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac5e:	2030      	movs	r0, #48	; 0x30
 800ac60:	18e1      	adds	r1, r4, r3
 800ac62:	3143      	adds	r1, #67	; 0x43
 800ac64:	7008      	strb	r0, [r1, #0]
 800ac66:	0021      	movs	r1, r4
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	3145      	adds	r1, #69	; 0x45
 800ac6c:	7809      	ldrb	r1, [r1, #0]
 800ac6e:	18a2      	adds	r2, r4, r2
 800ac70:	3243      	adds	r2, #67	; 0x43
 800ac72:	3302      	adds	r3, #2
 800ac74:	7011      	strb	r1, [r2, #0]
 800ac76:	e7c1      	b.n	800abfc <_printf_common+0x4c>
 800ac78:	0022      	movs	r2, r4
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	9901      	ldr	r1, [sp, #4]
 800ac7e:	9800      	ldr	r0, [sp, #0]
 800ac80:	9e08      	ldr	r6, [sp, #32]
 800ac82:	321a      	adds	r2, #26
 800ac84:	47b0      	blx	r6
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d0e6      	beq.n	800ac58 <_printf_common+0xa8>
 800ac8a:	3701      	adds	r7, #1
 800ac8c:	e7d1      	b.n	800ac32 <_printf_common+0x82>
	...

0800ac90 <_printf_i>:
 800ac90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac92:	b08b      	sub	sp, #44	; 0x2c
 800ac94:	9206      	str	r2, [sp, #24]
 800ac96:	000a      	movs	r2, r1
 800ac98:	3243      	adds	r2, #67	; 0x43
 800ac9a:	9307      	str	r3, [sp, #28]
 800ac9c:	9005      	str	r0, [sp, #20]
 800ac9e:	9204      	str	r2, [sp, #16]
 800aca0:	7e0a      	ldrb	r2, [r1, #24]
 800aca2:	000c      	movs	r4, r1
 800aca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aca6:	2a78      	cmp	r2, #120	; 0x78
 800aca8:	d807      	bhi.n	800acba <_printf_i+0x2a>
 800acaa:	2a62      	cmp	r2, #98	; 0x62
 800acac:	d809      	bhi.n	800acc2 <_printf_i+0x32>
 800acae:	2a00      	cmp	r2, #0
 800acb0:	d100      	bne.n	800acb4 <_printf_i+0x24>
 800acb2:	e0c1      	b.n	800ae38 <_printf_i+0x1a8>
 800acb4:	2a58      	cmp	r2, #88	; 0x58
 800acb6:	d100      	bne.n	800acba <_printf_i+0x2a>
 800acb8:	e08c      	b.n	800add4 <_printf_i+0x144>
 800acba:	0026      	movs	r6, r4
 800acbc:	3642      	adds	r6, #66	; 0x42
 800acbe:	7032      	strb	r2, [r6, #0]
 800acc0:	e022      	b.n	800ad08 <_printf_i+0x78>
 800acc2:	0010      	movs	r0, r2
 800acc4:	3863      	subs	r0, #99	; 0x63
 800acc6:	2815      	cmp	r0, #21
 800acc8:	d8f7      	bhi.n	800acba <_printf_i+0x2a>
 800acca:	f7f5 fa37 	bl	800013c <__gnu_thumb1_case_shi>
 800acce:	0016      	.short	0x0016
 800acd0:	fff6001f 	.word	0xfff6001f
 800acd4:	fff6fff6 	.word	0xfff6fff6
 800acd8:	001ffff6 	.word	0x001ffff6
 800acdc:	fff6fff6 	.word	0xfff6fff6
 800ace0:	fff6fff6 	.word	0xfff6fff6
 800ace4:	003600a8 	.word	0x003600a8
 800ace8:	fff6009a 	.word	0xfff6009a
 800acec:	00b9fff6 	.word	0x00b9fff6
 800acf0:	0036fff6 	.word	0x0036fff6
 800acf4:	fff6fff6 	.word	0xfff6fff6
 800acf8:	009e      	.short	0x009e
 800acfa:	0026      	movs	r6, r4
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	3642      	adds	r6, #66	; 0x42
 800ad00:	1d11      	adds	r1, r2, #4
 800ad02:	6019      	str	r1, [r3, #0]
 800ad04:	6813      	ldr	r3, [r2, #0]
 800ad06:	7033      	strb	r3, [r6, #0]
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e0a7      	b.n	800ae5c <_printf_i+0x1cc>
 800ad0c:	6808      	ldr	r0, [r1, #0]
 800ad0e:	6819      	ldr	r1, [r3, #0]
 800ad10:	1d0a      	adds	r2, r1, #4
 800ad12:	0605      	lsls	r5, r0, #24
 800ad14:	d50b      	bpl.n	800ad2e <_printf_i+0x9e>
 800ad16:	680d      	ldr	r5, [r1, #0]
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	2d00      	cmp	r5, #0
 800ad1c:	da03      	bge.n	800ad26 <_printf_i+0x96>
 800ad1e:	232d      	movs	r3, #45	; 0x2d
 800ad20:	9a04      	ldr	r2, [sp, #16]
 800ad22:	426d      	negs	r5, r5
 800ad24:	7013      	strb	r3, [r2, #0]
 800ad26:	4b61      	ldr	r3, [pc, #388]	; (800aeac <_printf_i+0x21c>)
 800ad28:	270a      	movs	r7, #10
 800ad2a:	9303      	str	r3, [sp, #12]
 800ad2c:	e01b      	b.n	800ad66 <_printf_i+0xd6>
 800ad2e:	680d      	ldr	r5, [r1, #0]
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	0641      	lsls	r1, r0, #25
 800ad34:	d5f1      	bpl.n	800ad1a <_printf_i+0x8a>
 800ad36:	b22d      	sxth	r5, r5
 800ad38:	e7ef      	b.n	800ad1a <_printf_i+0x8a>
 800ad3a:	680d      	ldr	r5, [r1, #0]
 800ad3c:	6819      	ldr	r1, [r3, #0]
 800ad3e:	1d08      	adds	r0, r1, #4
 800ad40:	6018      	str	r0, [r3, #0]
 800ad42:	062e      	lsls	r6, r5, #24
 800ad44:	d501      	bpl.n	800ad4a <_printf_i+0xba>
 800ad46:	680d      	ldr	r5, [r1, #0]
 800ad48:	e003      	b.n	800ad52 <_printf_i+0xc2>
 800ad4a:	066d      	lsls	r5, r5, #25
 800ad4c:	d5fb      	bpl.n	800ad46 <_printf_i+0xb6>
 800ad4e:	680d      	ldr	r5, [r1, #0]
 800ad50:	b2ad      	uxth	r5, r5
 800ad52:	4b56      	ldr	r3, [pc, #344]	; (800aeac <_printf_i+0x21c>)
 800ad54:	2708      	movs	r7, #8
 800ad56:	9303      	str	r3, [sp, #12]
 800ad58:	2a6f      	cmp	r2, #111	; 0x6f
 800ad5a:	d000      	beq.n	800ad5e <_printf_i+0xce>
 800ad5c:	3702      	adds	r7, #2
 800ad5e:	0023      	movs	r3, r4
 800ad60:	2200      	movs	r2, #0
 800ad62:	3343      	adds	r3, #67	; 0x43
 800ad64:	701a      	strb	r2, [r3, #0]
 800ad66:	6863      	ldr	r3, [r4, #4]
 800ad68:	60a3      	str	r3, [r4, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	db03      	blt.n	800ad76 <_printf_i+0xe6>
 800ad6e:	2204      	movs	r2, #4
 800ad70:	6821      	ldr	r1, [r4, #0]
 800ad72:	4391      	bics	r1, r2
 800ad74:	6021      	str	r1, [r4, #0]
 800ad76:	2d00      	cmp	r5, #0
 800ad78:	d102      	bne.n	800ad80 <_printf_i+0xf0>
 800ad7a:	9e04      	ldr	r6, [sp, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00c      	beq.n	800ad9a <_printf_i+0x10a>
 800ad80:	9e04      	ldr	r6, [sp, #16]
 800ad82:	0028      	movs	r0, r5
 800ad84:	0039      	movs	r1, r7
 800ad86:	f7f5 fa69 	bl	800025c <__aeabi_uidivmod>
 800ad8a:	9b03      	ldr	r3, [sp, #12]
 800ad8c:	3e01      	subs	r6, #1
 800ad8e:	5c5b      	ldrb	r3, [r3, r1]
 800ad90:	7033      	strb	r3, [r6, #0]
 800ad92:	002b      	movs	r3, r5
 800ad94:	0005      	movs	r5, r0
 800ad96:	429f      	cmp	r7, r3
 800ad98:	d9f3      	bls.n	800ad82 <_printf_i+0xf2>
 800ad9a:	2f08      	cmp	r7, #8
 800ad9c:	d109      	bne.n	800adb2 <_printf_i+0x122>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	07db      	lsls	r3, r3, #31
 800ada2:	d506      	bpl.n	800adb2 <_printf_i+0x122>
 800ada4:	6863      	ldr	r3, [r4, #4]
 800ada6:	6922      	ldr	r2, [r4, #16]
 800ada8:	4293      	cmp	r3, r2
 800adaa:	dc02      	bgt.n	800adb2 <_printf_i+0x122>
 800adac:	2330      	movs	r3, #48	; 0x30
 800adae:	3e01      	subs	r6, #1
 800adb0:	7033      	strb	r3, [r6, #0]
 800adb2:	9b04      	ldr	r3, [sp, #16]
 800adb4:	1b9b      	subs	r3, r3, r6
 800adb6:	6123      	str	r3, [r4, #16]
 800adb8:	9b07      	ldr	r3, [sp, #28]
 800adba:	0021      	movs	r1, r4
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	9805      	ldr	r0, [sp, #20]
 800adc0:	9b06      	ldr	r3, [sp, #24]
 800adc2:	aa09      	add	r2, sp, #36	; 0x24
 800adc4:	f7ff fef4 	bl	800abb0 <_printf_common>
 800adc8:	1c43      	adds	r3, r0, #1
 800adca:	d14c      	bne.n	800ae66 <_printf_i+0x1d6>
 800adcc:	2001      	movs	r0, #1
 800adce:	4240      	negs	r0, r0
 800add0:	b00b      	add	sp, #44	; 0x2c
 800add2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800add4:	3145      	adds	r1, #69	; 0x45
 800add6:	700a      	strb	r2, [r1, #0]
 800add8:	4a34      	ldr	r2, [pc, #208]	; (800aeac <_printf_i+0x21c>)
 800adda:	9203      	str	r2, [sp, #12]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	6821      	ldr	r1, [r4, #0]
 800ade0:	ca20      	ldmia	r2!, {r5}
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	0608      	lsls	r0, r1, #24
 800ade6:	d516      	bpl.n	800ae16 <_printf_i+0x186>
 800ade8:	07cb      	lsls	r3, r1, #31
 800adea:	d502      	bpl.n	800adf2 <_printf_i+0x162>
 800adec:	2320      	movs	r3, #32
 800adee:	4319      	orrs	r1, r3
 800adf0:	6021      	str	r1, [r4, #0]
 800adf2:	2710      	movs	r7, #16
 800adf4:	2d00      	cmp	r5, #0
 800adf6:	d1b2      	bne.n	800ad5e <_printf_i+0xce>
 800adf8:	2320      	movs	r3, #32
 800adfa:	6822      	ldr	r2, [r4, #0]
 800adfc:	439a      	bics	r2, r3
 800adfe:	6022      	str	r2, [r4, #0]
 800ae00:	e7ad      	b.n	800ad5e <_printf_i+0xce>
 800ae02:	2220      	movs	r2, #32
 800ae04:	6809      	ldr	r1, [r1, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	6022      	str	r2, [r4, #0]
 800ae0a:	0022      	movs	r2, r4
 800ae0c:	2178      	movs	r1, #120	; 0x78
 800ae0e:	3245      	adds	r2, #69	; 0x45
 800ae10:	7011      	strb	r1, [r2, #0]
 800ae12:	4a27      	ldr	r2, [pc, #156]	; (800aeb0 <_printf_i+0x220>)
 800ae14:	e7e1      	b.n	800adda <_printf_i+0x14a>
 800ae16:	0648      	lsls	r0, r1, #25
 800ae18:	d5e6      	bpl.n	800ade8 <_printf_i+0x158>
 800ae1a:	b2ad      	uxth	r5, r5
 800ae1c:	e7e4      	b.n	800ade8 <_printf_i+0x158>
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	680d      	ldr	r5, [r1, #0]
 800ae22:	1d10      	adds	r0, r2, #4
 800ae24:	6949      	ldr	r1, [r1, #20]
 800ae26:	6018      	str	r0, [r3, #0]
 800ae28:	6813      	ldr	r3, [r2, #0]
 800ae2a:	062e      	lsls	r6, r5, #24
 800ae2c:	d501      	bpl.n	800ae32 <_printf_i+0x1a2>
 800ae2e:	6019      	str	r1, [r3, #0]
 800ae30:	e002      	b.n	800ae38 <_printf_i+0x1a8>
 800ae32:	066d      	lsls	r5, r5, #25
 800ae34:	d5fb      	bpl.n	800ae2e <_printf_i+0x19e>
 800ae36:	8019      	strh	r1, [r3, #0]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	9e04      	ldr	r6, [sp, #16]
 800ae3c:	6123      	str	r3, [r4, #16]
 800ae3e:	e7bb      	b.n	800adb8 <_printf_i+0x128>
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	1d11      	adds	r1, r2, #4
 800ae44:	6019      	str	r1, [r3, #0]
 800ae46:	6816      	ldr	r6, [r2, #0]
 800ae48:	2100      	movs	r1, #0
 800ae4a:	0030      	movs	r0, r6
 800ae4c:	6862      	ldr	r2, [r4, #4]
 800ae4e:	f002 fc05 	bl	800d65c <memchr>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d001      	beq.n	800ae5a <_printf_i+0x1ca>
 800ae56:	1b80      	subs	r0, r0, r6
 800ae58:	6060      	str	r0, [r4, #4]
 800ae5a:	6863      	ldr	r3, [r4, #4]
 800ae5c:	6123      	str	r3, [r4, #16]
 800ae5e:	2300      	movs	r3, #0
 800ae60:	9a04      	ldr	r2, [sp, #16]
 800ae62:	7013      	strb	r3, [r2, #0]
 800ae64:	e7a8      	b.n	800adb8 <_printf_i+0x128>
 800ae66:	6923      	ldr	r3, [r4, #16]
 800ae68:	0032      	movs	r2, r6
 800ae6a:	9906      	ldr	r1, [sp, #24]
 800ae6c:	9805      	ldr	r0, [sp, #20]
 800ae6e:	9d07      	ldr	r5, [sp, #28]
 800ae70:	47a8      	blx	r5
 800ae72:	1c43      	adds	r3, r0, #1
 800ae74:	d0aa      	beq.n	800adcc <_printf_i+0x13c>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	079b      	lsls	r3, r3, #30
 800ae7a:	d415      	bmi.n	800aea8 <_printf_i+0x218>
 800ae7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7e:	68e0      	ldr	r0, [r4, #12]
 800ae80:	4298      	cmp	r0, r3
 800ae82:	daa5      	bge.n	800add0 <_printf_i+0x140>
 800ae84:	0018      	movs	r0, r3
 800ae86:	e7a3      	b.n	800add0 <_printf_i+0x140>
 800ae88:	0022      	movs	r2, r4
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	9906      	ldr	r1, [sp, #24]
 800ae8e:	9805      	ldr	r0, [sp, #20]
 800ae90:	9e07      	ldr	r6, [sp, #28]
 800ae92:	3219      	adds	r2, #25
 800ae94:	47b0      	blx	r6
 800ae96:	1c43      	adds	r3, r0, #1
 800ae98:	d098      	beq.n	800adcc <_printf_i+0x13c>
 800ae9a:	3501      	adds	r5, #1
 800ae9c:	68e3      	ldr	r3, [r4, #12]
 800ae9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aea0:	1a9b      	subs	r3, r3, r2
 800aea2:	42ab      	cmp	r3, r5
 800aea4:	dcf0      	bgt.n	800ae88 <_printf_i+0x1f8>
 800aea6:	e7e9      	b.n	800ae7c <_printf_i+0x1ec>
 800aea8:	2500      	movs	r5, #0
 800aeaa:	e7f7      	b.n	800ae9c <_printf_i+0x20c>
 800aeac:	0800f1ba 	.word	0x0800f1ba
 800aeb0:	0800f1cb 	.word	0x0800f1cb

0800aeb4 <_scanf_float>:
 800aeb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeb6:	b08b      	sub	sp, #44	; 0x2c
 800aeb8:	0015      	movs	r5, r2
 800aeba:	9001      	str	r0, [sp, #4]
 800aebc:	22ae      	movs	r2, #174	; 0xae
 800aebe:	2000      	movs	r0, #0
 800aec0:	9306      	str	r3, [sp, #24]
 800aec2:	688b      	ldr	r3, [r1, #8]
 800aec4:	000e      	movs	r6, r1
 800aec6:	1e59      	subs	r1, r3, #1
 800aec8:	0052      	lsls	r2, r2, #1
 800aeca:	9005      	str	r0, [sp, #20]
 800aecc:	4291      	cmp	r1, r2
 800aece:	d905      	bls.n	800aedc <_scanf_float+0x28>
 800aed0:	3b5e      	subs	r3, #94	; 0x5e
 800aed2:	3bff      	subs	r3, #255	; 0xff
 800aed4:	9305      	str	r3, [sp, #20]
 800aed6:	235e      	movs	r3, #94	; 0x5e
 800aed8:	33ff      	adds	r3, #255	; 0xff
 800aeda:	60b3      	str	r3, [r6, #8]
 800aedc:	23f0      	movs	r3, #240	; 0xf0
 800aede:	6832      	ldr	r2, [r6, #0]
 800aee0:	00db      	lsls	r3, r3, #3
 800aee2:	4313      	orrs	r3, r2
 800aee4:	6033      	str	r3, [r6, #0]
 800aee6:	0033      	movs	r3, r6
 800aee8:	2400      	movs	r4, #0
 800aeea:	331c      	adds	r3, #28
 800aeec:	001f      	movs	r7, r3
 800aeee:	9303      	str	r3, [sp, #12]
 800aef0:	9402      	str	r4, [sp, #8]
 800aef2:	9408      	str	r4, [sp, #32]
 800aef4:	9407      	str	r4, [sp, #28]
 800aef6:	9400      	str	r4, [sp, #0]
 800aef8:	9404      	str	r4, [sp, #16]
 800aefa:	68b2      	ldr	r2, [r6, #8]
 800aefc:	2a00      	cmp	r2, #0
 800aefe:	d00a      	beq.n	800af16 <_scanf_float+0x62>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	2b4e      	cmp	r3, #78	; 0x4e
 800af06:	d844      	bhi.n	800af92 <_scanf_float+0xde>
 800af08:	0018      	movs	r0, r3
 800af0a:	2b40      	cmp	r3, #64	; 0x40
 800af0c:	d82c      	bhi.n	800af68 <_scanf_float+0xb4>
 800af0e:	382b      	subs	r0, #43	; 0x2b
 800af10:	b2c1      	uxtb	r1, r0
 800af12:	290e      	cmp	r1, #14
 800af14:	d92a      	bls.n	800af6c <_scanf_float+0xb8>
 800af16:	9b00      	ldr	r3, [sp, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <_scanf_float+0x70>
 800af1c:	6832      	ldr	r2, [r6, #0]
 800af1e:	4ba4      	ldr	r3, [pc, #656]	; (800b1b0 <_scanf_float+0x2fc>)
 800af20:	4013      	ands	r3, r2
 800af22:	6033      	str	r3, [r6, #0]
 800af24:	9b02      	ldr	r3, [sp, #8]
 800af26:	3b01      	subs	r3, #1
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d900      	bls.n	800af2e <_scanf_float+0x7a>
 800af2c:	e0f9      	b.n	800b122 <_scanf_float+0x26e>
 800af2e:	24be      	movs	r4, #190	; 0xbe
 800af30:	0064      	lsls	r4, r4, #1
 800af32:	9b03      	ldr	r3, [sp, #12]
 800af34:	429f      	cmp	r7, r3
 800af36:	d900      	bls.n	800af3a <_scanf_float+0x86>
 800af38:	e0e9      	b.n	800b10e <_scanf_float+0x25a>
 800af3a:	2301      	movs	r3, #1
 800af3c:	9302      	str	r3, [sp, #8]
 800af3e:	e185      	b.n	800b24c <_scanf_float+0x398>
 800af40:	0018      	movs	r0, r3
 800af42:	3861      	subs	r0, #97	; 0x61
 800af44:	280d      	cmp	r0, #13
 800af46:	d8e6      	bhi.n	800af16 <_scanf_float+0x62>
 800af48:	f7f5 f8f8 	bl	800013c <__gnu_thumb1_case_shi>
 800af4c:	ffe50083 	.word	0xffe50083
 800af50:	ffe5ffe5 	.word	0xffe5ffe5
 800af54:	00a200b6 	.word	0x00a200b6
 800af58:	ffe5ffe5 	.word	0xffe5ffe5
 800af5c:	ffe50089 	.word	0xffe50089
 800af60:	ffe5ffe5 	.word	0xffe5ffe5
 800af64:	0065ffe5 	.word	0x0065ffe5
 800af68:	3841      	subs	r0, #65	; 0x41
 800af6a:	e7eb      	b.n	800af44 <_scanf_float+0x90>
 800af6c:	280e      	cmp	r0, #14
 800af6e:	d8d2      	bhi.n	800af16 <_scanf_float+0x62>
 800af70:	f7f5 f8e4 	bl	800013c <__gnu_thumb1_case_shi>
 800af74:	ffd1004b 	.word	0xffd1004b
 800af78:	0098004b 	.word	0x0098004b
 800af7c:	0020ffd1 	.word	0x0020ffd1
 800af80:	00400040 	.word	0x00400040
 800af84:	00400040 	.word	0x00400040
 800af88:	00400040 	.word	0x00400040
 800af8c:	00400040 	.word	0x00400040
 800af90:	0040      	.short	0x0040
 800af92:	2b6e      	cmp	r3, #110	; 0x6e
 800af94:	d809      	bhi.n	800afaa <_scanf_float+0xf6>
 800af96:	2b60      	cmp	r3, #96	; 0x60
 800af98:	d8d2      	bhi.n	800af40 <_scanf_float+0x8c>
 800af9a:	2b54      	cmp	r3, #84	; 0x54
 800af9c:	d07d      	beq.n	800b09a <_scanf_float+0x1e6>
 800af9e:	2b59      	cmp	r3, #89	; 0x59
 800afa0:	d1b9      	bne.n	800af16 <_scanf_float+0x62>
 800afa2:	2c07      	cmp	r4, #7
 800afa4:	d1b7      	bne.n	800af16 <_scanf_float+0x62>
 800afa6:	2408      	movs	r4, #8
 800afa8:	e02c      	b.n	800b004 <_scanf_float+0x150>
 800afaa:	2b74      	cmp	r3, #116	; 0x74
 800afac:	d075      	beq.n	800b09a <_scanf_float+0x1e6>
 800afae:	2b79      	cmp	r3, #121	; 0x79
 800afb0:	d0f7      	beq.n	800afa2 <_scanf_float+0xee>
 800afb2:	e7b0      	b.n	800af16 <_scanf_float+0x62>
 800afb4:	6831      	ldr	r1, [r6, #0]
 800afb6:	05c8      	lsls	r0, r1, #23
 800afb8:	d51c      	bpl.n	800aff4 <_scanf_float+0x140>
 800afba:	2380      	movs	r3, #128	; 0x80
 800afbc:	4399      	bics	r1, r3
 800afbe:	9b00      	ldr	r3, [sp, #0]
 800afc0:	6031      	str	r1, [r6, #0]
 800afc2:	3301      	adds	r3, #1
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	9b05      	ldr	r3, [sp, #20]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d003      	beq.n	800afd4 <_scanf_float+0x120>
 800afcc:	3b01      	subs	r3, #1
 800afce:	3201      	adds	r2, #1
 800afd0:	9305      	str	r3, [sp, #20]
 800afd2:	60b2      	str	r2, [r6, #8]
 800afd4:	68b3      	ldr	r3, [r6, #8]
 800afd6:	3b01      	subs	r3, #1
 800afd8:	60b3      	str	r3, [r6, #8]
 800afda:	6933      	ldr	r3, [r6, #16]
 800afdc:	3301      	adds	r3, #1
 800afde:	6133      	str	r3, [r6, #16]
 800afe0:	686b      	ldr	r3, [r5, #4]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	606b      	str	r3, [r5, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	dc00      	bgt.n	800afec <_scanf_float+0x138>
 800afea:	e086      	b.n	800b0fa <_scanf_float+0x246>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	3301      	adds	r3, #1
 800aff0:	602b      	str	r3, [r5, #0]
 800aff2:	e782      	b.n	800aefa <_scanf_float+0x46>
 800aff4:	9a02      	ldr	r2, [sp, #8]
 800aff6:	1912      	adds	r2, r2, r4
 800aff8:	2a00      	cmp	r2, #0
 800affa:	d18c      	bne.n	800af16 <_scanf_float+0x62>
 800affc:	4a6d      	ldr	r2, [pc, #436]	; (800b1b4 <_scanf_float+0x300>)
 800affe:	6831      	ldr	r1, [r6, #0]
 800b000:	400a      	ands	r2, r1
 800b002:	6032      	str	r2, [r6, #0]
 800b004:	703b      	strb	r3, [r7, #0]
 800b006:	3701      	adds	r7, #1
 800b008:	e7e4      	b.n	800afd4 <_scanf_float+0x120>
 800b00a:	2180      	movs	r1, #128	; 0x80
 800b00c:	6832      	ldr	r2, [r6, #0]
 800b00e:	420a      	tst	r2, r1
 800b010:	d081      	beq.n	800af16 <_scanf_float+0x62>
 800b012:	438a      	bics	r2, r1
 800b014:	e7f5      	b.n	800b002 <_scanf_float+0x14e>
 800b016:	9a02      	ldr	r2, [sp, #8]
 800b018:	2a00      	cmp	r2, #0
 800b01a:	d10f      	bne.n	800b03c <_scanf_float+0x188>
 800b01c:	9a00      	ldr	r2, [sp, #0]
 800b01e:	2a00      	cmp	r2, #0
 800b020:	d10f      	bne.n	800b042 <_scanf_float+0x18e>
 800b022:	6832      	ldr	r2, [r6, #0]
 800b024:	21e0      	movs	r1, #224	; 0xe0
 800b026:	0010      	movs	r0, r2
 800b028:	00c9      	lsls	r1, r1, #3
 800b02a:	4008      	ands	r0, r1
 800b02c:	4288      	cmp	r0, r1
 800b02e:	d108      	bne.n	800b042 <_scanf_float+0x18e>
 800b030:	4961      	ldr	r1, [pc, #388]	; (800b1b8 <_scanf_float+0x304>)
 800b032:	400a      	ands	r2, r1
 800b034:	6032      	str	r2, [r6, #0]
 800b036:	2201      	movs	r2, #1
 800b038:	9202      	str	r2, [sp, #8]
 800b03a:	e7e3      	b.n	800b004 <_scanf_float+0x150>
 800b03c:	9a02      	ldr	r2, [sp, #8]
 800b03e:	2a02      	cmp	r2, #2
 800b040:	d059      	beq.n	800b0f6 <_scanf_float+0x242>
 800b042:	2c01      	cmp	r4, #1
 800b044:	d002      	beq.n	800b04c <_scanf_float+0x198>
 800b046:	2c04      	cmp	r4, #4
 800b048:	d000      	beq.n	800b04c <_scanf_float+0x198>
 800b04a:	e764      	b.n	800af16 <_scanf_float+0x62>
 800b04c:	3401      	adds	r4, #1
 800b04e:	b2e4      	uxtb	r4, r4
 800b050:	e7d8      	b.n	800b004 <_scanf_float+0x150>
 800b052:	9a02      	ldr	r2, [sp, #8]
 800b054:	2a01      	cmp	r2, #1
 800b056:	d000      	beq.n	800b05a <_scanf_float+0x1a6>
 800b058:	e75d      	b.n	800af16 <_scanf_float+0x62>
 800b05a:	2202      	movs	r2, #2
 800b05c:	e7ec      	b.n	800b038 <_scanf_float+0x184>
 800b05e:	2c00      	cmp	r4, #0
 800b060:	d110      	bne.n	800b084 <_scanf_float+0x1d0>
 800b062:	9a00      	ldr	r2, [sp, #0]
 800b064:	2a00      	cmp	r2, #0
 800b066:	d000      	beq.n	800b06a <_scanf_float+0x1b6>
 800b068:	e758      	b.n	800af1c <_scanf_float+0x68>
 800b06a:	6832      	ldr	r2, [r6, #0]
 800b06c:	21e0      	movs	r1, #224	; 0xe0
 800b06e:	0010      	movs	r0, r2
 800b070:	00c9      	lsls	r1, r1, #3
 800b072:	4008      	ands	r0, r1
 800b074:	4288      	cmp	r0, r1
 800b076:	d000      	beq.n	800b07a <_scanf_float+0x1c6>
 800b078:	e754      	b.n	800af24 <_scanf_float+0x70>
 800b07a:	494f      	ldr	r1, [pc, #316]	; (800b1b8 <_scanf_float+0x304>)
 800b07c:	3401      	adds	r4, #1
 800b07e:	400a      	ands	r2, r1
 800b080:	6032      	str	r2, [r6, #0]
 800b082:	e7bf      	b.n	800b004 <_scanf_float+0x150>
 800b084:	21fd      	movs	r1, #253	; 0xfd
 800b086:	1ee2      	subs	r2, r4, #3
 800b088:	420a      	tst	r2, r1
 800b08a:	d000      	beq.n	800b08e <_scanf_float+0x1da>
 800b08c:	e743      	b.n	800af16 <_scanf_float+0x62>
 800b08e:	e7dd      	b.n	800b04c <_scanf_float+0x198>
 800b090:	2c02      	cmp	r4, #2
 800b092:	d000      	beq.n	800b096 <_scanf_float+0x1e2>
 800b094:	e73f      	b.n	800af16 <_scanf_float+0x62>
 800b096:	2403      	movs	r4, #3
 800b098:	e7b4      	b.n	800b004 <_scanf_float+0x150>
 800b09a:	2c06      	cmp	r4, #6
 800b09c:	d000      	beq.n	800b0a0 <_scanf_float+0x1ec>
 800b09e:	e73a      	b.n	800af16 <_scanf_float+0x62>
 800b0a0:	2407      	movs	r4, #7
 800b0a2:	e7af      	b.n	800b004 <_scanf_float+0x150>
 800b0a4:	6832      	ldr	r2, [r6, #0]
 800b0a6:	0591      	lsls	r1, r2, #22
 800b0a8:	d400      	bmi.n	800b0ac <_scanf_float+0x1f8>
 800b0aa:	e734      	b.n	800af16 <_scanf_float+0x62>
 800b0ac:	4943      	ldr	r1, [pc, #268]	; (800b1bc <_scanf_float+0x308>)
 800b0ae:	400a      	ands	r2, r1
 800b0b0:	6032      	str	r2, [r6, #0]
 800b0b2:	9a00      	ldr	r2, [sp, #0]
 800b0b4:	9204      	str	r2, [sp, #16]
 800b0b6:	e7a5      	b.n	800b004 <_scanf_float+0x150>
 800b0b8:	21a0      	movs	r1, #160	; 0xa0
 800b0ba:	2080      	movs	r0, #128	; 0x80
 800b0bc:	6832      	ldr	r2, [r6, #0]
 800b0be:	00c9      	lsls	r1, r1, #3
 800b0c0:	4011      	ands	r1, r2
 800b0c2:	00c0      	lsls	r0, r0, #3
 800b0c4:	4281      	cmp	r1, r0
 800b0c6:	d006      	beq.n	800b0d6 <_scanf_float+0x222>
 800b0c8:	4202      	tst	r2, r0
 800b0ca:	d100      	bne.n	800b0ce <_scanf_float+0x21a>
 800b0cc:	e723      	b.n	800af16 <_scanf_float+0x62>
 800b0ce:	9900      	ldr	r1, [sp, #0]
 800b0d0:	2900      	cmp	r1, #0
 800b0d2:	d100      	bne.n	800b0d6 <_scanf_float+0x222>
 800b0d4:	e726      	b.n	800af24 <_scanf_float+0x70>
 800b0d6:	0591      	lsls	r1, r2, #22
 800b0d8:	d404      	bmi.n	800b0e4 <_scanf_float+0x230>
 800b0da:	9900      	ldr	r1, [sp, #0]
 800b0dc:	9804      	ldr	r0, [sp, #16]
 800b0de:	9708      	str	r7, [sp, #32]
 800b0e0:	1a09      	subs	r1, r1, r0
 800b0e2:	9107      	str	r1, [sp, #28]
 800b0e4:	4934      	ldr	r1, [pc, #208]	; (800b1b8 <_scanf_float+0x304>)
 800b0e6:	400a      	ands	r2, r1
 800b0e8:	21c0      	movs	r1, #192	; 0xc0
 800b0ea:	0049      	lsls	r1, r1, #1
 800b0ec:	430a      	orrs	r2, r1
 800b0ee:	6032      	str	r2, [r6, #0]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	9200      	str	r2, [sp, #0]
 800b0f4:	e786      	b.n	800b004 <_scanf_float+0x150>
 800b0f6:	2203      	movs	r2, #3
 800b0f8:	e79e      	b.n	800b038 <_scanf_float+0x184>
 800b0fa:	23c0      	movs	r3, #192	; 0xc0
 800b0fc:	005b      	lsls	r3, r3, #1
 800b0fe:	0029      	movs	r1, r5
 800b100:	58f3      	ldr	r3, [r6, r3]
 800b102:	9801      	ldr	r0, [sp, #4]
 800b104:	4798      	blx	r3
 800b106:	2800      	cmp	r0, #0
 800b108:	d100      	bne.n	800b10c <_scanf_float+0x258>
 800b10a:	e6f6      	b.n	800aefa <_scanf_float+0x46>
 800b10c:	e703      	b.n	800af16 <_scanf_float+0x62>
 800b10e:	3f01      	subs	r7, #1
 800b110:	5933      	ldr	r3, [r6, r4]
 800b112:	002a      	movs	r2, r5
 800b114:	7839      	ldrb	r1, [r7, #0]
 800b116:	9801      	ldr	r0, [sp, #4]
 800b118:	4798      	blx	r3
 800b11a:	6933      	ldr	r3, [r6, #16]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	6133      	str	r3, [r6, #16]
 800b120:	e707      	b.n	800af32 <_scanf_float+0x7e>
 800b122:	1e63      	subs	r3, r4, #1
 800b124:	2b06      	cmp	r3, #6
 800b126:	d80e      	bhi.n	800b146 <_scanf_float+0x292>
 800b128:	9702      	str	r7, [sp, #8]
 800b12a:	2c02      	cmp	r4, #2
 800b12c:	d920      	bls.n	800b170 <_scanf_float+0x2bc>
 800b12e:	1be3      	subs	r3, r4, r7
 800b130:	b2db      	uxtb	r3, r3
 800b132:	9305      	str	r3, [sp, #20]
 800b134:	9b02      	ldr	r3, [sp, #8]
 800b136:	9a05      	ldr	r2, [sp, #20]
 800b138:	189b      	adds	r3, r3, r2
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d827      	bhi.n	800b190 <_scanf_float+0x2dc>
 800b140:	3c03      	subs	r4, #3
 800b142:	b2e4      	uxtb	r4, r4
 800b144:	1b3f      	subs	r7, r7, r4
 800b146:	6833      	ldr	r3, [r6, #0]
 800b148:	05da      	lsls	r2, r3, #23
 800b14a:	d554      	bpl.n	800b1f6 <_scanf_float+0x342>
 800b14c:	055b      	lsls	r3, r3, #21
 800b14e:	d537      	bpl.n	800b1c0 <_scanf_float+0x30c>
 800b150:	24be      	movs	r4, #190	; 0xbe
 800b152:	0064      	lsls	r4, r4, #1
 800b154:	9b03      	ldr	r3, [sp, #12]
 800b156:	429f      	cmp	r7, r3
 800b158:	d800      	bhi.n	800b15c <_scanf_float+0x2a8>
 800b15a:	e6ee      	b.n	800af3a <_scanf_float+0x86>
 800b15c:	3f01      	subs	r7, #1
 800b15e:	5933      	ldr	r3, [r6, r4]
 800b160:	002a      	movs	r2, r5
 800b162:	7839      	ldrb	r1, [r7, #0]
 800b164:	9801      	ldr	r0, [sp, #4]
 800b166:	4798      	blx	r3
 800b168:	6933      	ldr	r3, [r6, #16]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	6133      	str	r3, [r6, #16]
 800b16e:	e7f1      	b.n	800b154 <_scanf_float+0x2a0>
 800b170:	24be      	movs	r4, #190	; 0xbe
 800b172:	0064      	lsls	r4, r4, #1
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	429f      	cmp	r7, r3
 800b178:	d800      	bhi.n	800b17c <_scanf_float+0x2c8>
 800b17a:	e6de      	b.n	800af3a <_scanf_float+0x86>
 800b17c:	3f01      	subs	r7, #1
 800b17e:	5933      	ldr	r3, [r6, r4]
 800b180:	002a      	movs	r2, r5
 800b182:	7839      	ldrb	r1, [r7, #0]
 800b184:	9801      	ldr	r0, [sp, #4]
 800b186:	4798      	blx	r3
 800b188:	6933      	ldr	r3, [r6, #16]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	6133      	str	r3, [r6, #16]
 800b18e:	e7f1      	b.n	800b174 <_scanf_float+0x2c0>
 800b190:	9b02      	ldr	r3, [sp, #8]
 800b192:	002a      	movs	r2, r5
 800b194:	3b01      	subs	r3, #1
 800b196:	7819      	ldrb	r1, [r3, #0]
 800b198:	9302      	str	r3, [sp, #8]
 800b19a:	23be      	movs	r3, #190	; 0xbe
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	58f3      	ldr	r3, [r6, r3]
 800b1a0:	9801      	ldr	r0, [sp, #4]
 800b1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1a4:	4798      	blx	r3
 800b1a6:	6933      	ldr	r3, [r6, #16]
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	6133      	str	r3, [r6, #16]
 800b1ac:	e7c2      	b.n	800b134 <_scanf_float+0x280>
 800b1ae:	46c0      	nop			; (mov r8, r8)
 800b1b0:	fffffeff 	.word	0xfffffeff
 800b1b4:	fffffe7f 	.word	0xfffffe7f
 800b1b8:	fffff87f 	.word	0xfffff87f
 800b1bc:	fffffd7f 	.word	0xfffffd7f
 800b1c0:	6933      	ldr	r3, [r6, #16]
 800b1c2:	1e7c      	subs	r4, r7, #1
 800b1c4:	7821      	ldrb	r1, [r4, #0]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	6133      	str	r3, [r6, #16]
 800b1ca:	2965      	cmp	r1, #101	; 0x65
 800b1cc:	d00c      	beq.n	800b1e8 <_scanf_float+0x334>
 800b1ce:	2945      	cmp	r1, #69	; 0x45
 800b1d0:	d00a      	beq.n	800b1e8 <_scanf_float+0x334>
 800b1d2:	23be      	movs	r3, #190	; 0xbe
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	58f3      	ldr	r3, [r6, r3]
 800b1d8:	002a      	movs	r2, r5
 800b1da:	9801      	ldr	r0, [sp, #4]
 800b1dc:	4798      	blx	r3
 800b1de:	6933      	ldr	r3, [r6, #16]
 800b1e0:	1ebc      	subs	r4, r7, #2
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	7821      	ldrb	r1, [r4, #0]
 800b1e6:	6133      	str	r3, [r6, #16]
 800b1e8:	23be      	movs	r3, #190	; 0xbe
 800b1ea:	005b      	lsls	r3, r3, #1
 800b1ec:	002a      	movs	r2, r5
 800b1ee:	58f3      	ldr	r3, [r6, r3]
 800b1f0:	9801      	ldr	r0, [sp, #4]
 800b1f2:	4798      	blx	r3
 800b1f4:	0027      	movs	r7, r4
 800b1f6:	6832      	ldr	r2, [r6, #0]
 800b1f8:	2310      	movs	r3, #16
 800b1fa:	0011      	movs	r1, r2
 800b1fc:	4019      	ands	r1, r3
 800b1fe:	9102      	str	r1, [sp, #8]
 800b200:	421a      	tst	r2, r3
 800b202:	d158      	bne.n	800b2b6 <_scanf_float+0x402>
 800b204:	23c0      	movs	r3, #192	; 0xc0
 800b206:	7039      	strb	r1, [r7, #0]
 800b208:	6832      	ldr	r2, [r6, #0]
 800b20a:	00db      	lsls	r3, r3, #3
 800b20c:	4013      	ands	r3, r2
 800b20e:	2280      	movs	r2, #128	; 0x80
 800b210:	00d2      	lsls	r2, r2, #3
 800b212:	4293      	cmp	r3, r2
 800b214:	d11d      	bne.n	800b252 <_scanf_float+0x39e>
 800b216:	9b04      	ldr	r3, [sp, #16]
 800b218:	9a00      	ldr	r2, [sp, #0]
 800b21a:	9900      	ldr	r1, [sp, #0]
 800b21c:	1a9a      	subs	r2, r3, r2
 800b21e:	428b      	cmp	r3, r1
 800b220:	d124      	bne.n	800b26c <_scanf_float+0x3b8>
 800b222:	2200      	movs	r2, #0
 800b224:	9903      	ldr	r1, [sp, #12]
 800b226:	9801      	ldr	r0, [sp, #4]
 800b228:	f000 feae 	bl	800bf88 <_strtod_r>
 800b22c:	9b06      	ldr	r3, [sp, #24]
 800b22e:	000d      	movs	r5, r1
 800b230:	6831      	ldr	r1, [r6, #0]
 800b232:	0004      	movs	r4, r0
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	078a      	lsls	r2, r1, #30
 800b238:	d525      	bpl.n	800b286 <_scanf_float+0x3d2>
 800b23a:	1d1a      	adds	r2, r3, #4
 800b23c:	9906      	ldr	r1, [sp, #24]
 800b23e:	600a      	str	r2, [r1, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	601c      	str	r4, [r3, #0]
 800b244:	605d      	str	r5, [r3, #4]
 800b246:	68f3      	ldr	r3, [r6, #12]
 800b248:	3301      	adds	r3, #1
 800b24a:	60f3      	str	r3, [r6, #12]
 800b24c:	9802      	ldr	r0, [sp, #8]
 800b24e:	b00b      	add	sp, #44	; 0x2c
 800b250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b252:	9b07      	ldr	r3, [sp, #28]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d0e4      	beq.n	800b222 <_scanf_float+0x36e>
 800b258:	9b08      	ldr	r3, [sp, #32]
 800b25a:	9a02      	ldr	r2, [sp, #8]
 800b25c:	1c59      	adds	r1, r3, #1
 800b25e:	9801      	ldr	r0, [sp, #4]
 800b260:	230a      	movs	r3, #10
 800b262:	f000 ff99 	bl	800c198 <_strtol_r>
 800b266:	9b07      	ldr	r3, [sp, #28]
 800b268:	9f08      	ldr	r7, [sp, #32]
 800b26a:	1ac2      	subs	r2, r0, r3
 800b26c:	0033      	movs	r3, r6
 800b26e:	3370      	adds	r3, #112	; 0x70
 800b270:	33ff      	adds	r3, #255	; 0xff
 800b272:	429f      	cmp	r7, r3
 800b274:	d302      	bcc.n	800b27c <_scanf_float+0x3c8>
 800b276:	0037      	movs	r7, r6
 800b278:	376f      	adds	r7, #111	; 0x6f
 800b27a:	37ff      	adds	r7, #255	; 0xff
 800b27c:	0038      	movs	r0, r7
 800b27e:	490f      	ldr	r1, [pc, #60]	; (800b2bc <_scanf_float+0x408>)
 800b280:	f000 f836 	bl	800b2f0 <siprintf>
 800b284:	e7cd      	b.n	800b222 <_scanf_float+0x36e>
 800b286:	1d1a      	adds	r2, r3, #4
 800b288:	0749      	lsls	r1, r1, #29
 800b28a:	d4d7      	bmi.n	800b23c <_scanf_float+0x388>
 800b28c:	9906      	ldr	r1, [sp, #24]
 800b28e:	0020      	movs	r0, r4
 800b290:	600a      	str	r2, [r1, #0]
 800b292:	681f      	ldr	r7, [r3, #0]
 800b294:	0022      	movs	r2, r4
 800b296:	002b      	movs	r3, r5
 800b298:	0029      	movs	r1, r5
 800b29a:	f7f7 fec9 	bl	8003030 <__aeabi_dcmpun>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d004      	beq.n	800b2ac <_scanf_float+0x3f8>
 800b2a2:	4807      	ldr	r0, [pc, #28]	; (800b2c0 <_scanf_float+0x40c>)
 800b2a4:	f000 f820 	bl	800b2e8 <nanf>
 800b2a8:	6038      	str	r0, [r7, #0]
 800b2aa:	e7cc      	b.n	800b246 <_scanf_float+0x392>
 800b2ac:	0020      	movs	r0, r4
 800b2ae:	0029      	movs	r1, r5
 800b2b0:	f7f7 ffb0 	bl	8003214 <__aeabi_d2f>
 800b2b4:	e7f8      	b.n	800b2a8 <_scanf_float+0x3f4>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	e640      	b.n	800af3c <_scanf_float+0x88>
 800b2ba:	46c0      	nop			; (mov r8, r8)
 800b2bc:	0800f1dc 	.word	0x0800f1dc
 800b2c0:	0800f2e7 	.word	0x0800f2e7

0800b2c4 <_sbrk_r>:
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	b570      	push	{r4, r5, r6, lr}
 800b2c8:	4d06      	ldr	r5, [pc, #24]	; (800b2e4 <_sbrk_r+0x20>)
 800b2ca:	0004      	movs	r4, r0
 800b2cc:	0008      	movs	r0, r1
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	f7f9 f9e6 	bl	80046a0 <_sbrk>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d103      	bne.n	800b2e0 <_sbrk_r+0x1c>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d000      	beq.n	800b2e0 <_sbrk_r+0x1c>
 800b2de:	6023      	str	r3, [r4, #0]
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	20000508 	.word	0x20000508

0800b2e8 <nanf>:
 800b2e8:	4800      	ldr	r0, [pc, #0]	; (800b2ec <nanf+0x4>)
 800b2ea:	4770      	bx	lr
 800b2ec:	7fc00000 	.word	0x7fc00000

0800b2f0 <siprintf>:
 800b2f0:	b40e      	push	{r1, r2, r3}
 800b2f2:	b500      	push	{lr}
 800b2f4:	490b      	ldr	r1, [pc, #44]	; (800b324 <siprintf+0x34>)
 800b2f6:	b09c      	sub	sp, #112	; 0x70
 800b2f8:	ab1d      	add	r3, sp, #116	; 0x74
 800b2fa:	9002      	str	r0, [sp, #8]
 800b2fc:	9006      	str	r0, [sp, #24]
 800b2fe:	9107      	str	r1, [sp, #28]
 800b300:	9104      	str	r1, [sp, #16]
 800b302:	4809      	ldr	r0, [pc, #36]	; (800b328 <siprintf+0x38>)
 800b304:	4909      	ldr	r1, [pc, #36]	; (800b32c <siprintf+0x3c>)
 800b306:	cb04      	ldmia	r3!, {r2}
 800b308:	9105      	str	r1, [sp, #20]
 800b30a:	6800      	ldr	r0, [r0, #0]
 800b30c:	a902      	add	r1, sp, #8
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	f002 ff20 	bl	800e154 <_svfiprintf_r>
 800b314:	2300      	movs	r3, #0
 800b316:	9a02      	ldr	r2, [sp, #8]
 800b318:	7013      	strb	r3, [r2, #0]
 800b31a:	b01c      	add	sp, #112	; 0x70
 800b31c:	bc08      	pop	{r3}
 800b31e:	b003      	add	sp, #12
 800b320:	4718      	bx	r3
 800b322:	46c0      	nop			; (mov r8, r8)
 800b324:	7fffffff 	.word	0x7fffffff
 800b328:	2000000c 	.word	0x2000000c
 800b32c:	ffff0208 	.word	0xffff0208

0800b330 <sulp>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	0016      	movs	r6, r2
 800b334:	000d      	movs	r5, r1
 800b336:	f002 fd39 	bl	800ddac <__ulp>
 800b33a:	2e00      	cmp	r6, #0
 800b33c:	d00d      	beq.n	800b35a <sulp+0x2a>
 800b33e:	236b      	movs	r3, #107	; 0x6b
 800b340:	006a      	lsls	r2, r5, #1
 800b342:	0d52      	lsrs	r2, r2, #21
 800b344:	1a9b      	subs	r3, r3, r2
 800b346:	2b00      	cmp	r3, #0
 800b348:	dd07      	ble.n	800b35a <sulp+0x2a>
 800b34a:	2400      	movs	r4, #0
 800b34c:	4a03      	ldr	r2, [pc, #12]	; (800b35c <sulp+0x2c>)
 800b34e:	051b      	lsls	r3, r3, #20
 800b350:	189d      	adds	r5, r3, r2
 800b352:	002b      	movs	r3, r5
 800b354:	0022      	movs	r2, r4
 800b356:	f7f7 f86d 	bl	8002434 <__aeabi_dmul>
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	3ff00000 	.word	0x3ff00000

0800b360 <_strtod_l>:
 800b360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b362:	001d      	movs	r5, r3
 800b364:	2300      	movs	r3, #0
 800b366:	b0a5      	sub	sp, #148	; 0x94
 800b368:	9320      	str	r3, [sp, #128]	; 0x80
 800b36a:	4bac      	ldr	r3, [pc, #688]	; (800b61c <_strtod_l+0x2bc>)
 800b36c:	9005      	str	r0, [sp, #20]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	9108      	str	r1, [sp, #32]
 800b372:	0018      	movs	r0, r3
 800b374:	9307      	str	r3, [sp, #28]
 800b376:	921b      	str	r2, [sp, #108]	; 0x6c
 800b378:	f7f4 fece 	bl	8000118 <strlen>
 800b37c:	2600      	movs	r6, #0
 800b37e:	0004      	movs	r4, r0
 800b380:	2700      	movs	r7, #0
 800b382:	9b08      	ldr	r3, [sp, #32]
 800b384:	931f      	str	r3, [sp, #124]	; 0x7c
 800b386:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b388:	7813      	ldrb	r3, [r2, #0]
 800b38a:	2b2b      	cmp	r3, #43	; 0x2b
 800b38c:	d058      	beq.n	800b440 <_strtod_l+0xe0>
 800b38e:	d844      	bhi.n	800b41a <_strtod_l+0xba>
 800b390:	2b0d      	cmp	r3, #13
 800b392:	d83d      	bhi.n	800b410 <_strtod_l+0xb0>
 800b394:	2b08      	cmp	r3, #8
 800b396:	d83d      	bhi.n	800b414 <_strtod_l+0xb4>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d047      	beq.n	800b42c <_strtod_l+0xcc>
 800b39c:	2300      	movs	r3, #0
 800b39e:	930e      	str	r3, [sp, #56]	; 0x38
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b3a4:	920a      	str	r2, [sp, #40]	; 0x28
 800b3a6:	9306      	str	r3, [sp, #24]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	2b30      	cmp	r3, #48	; 0x30
 800b3ac:	d000      	beq.n	800b3b0 <_strtod_l+0x50>
 800b3ae:	e07f      	b.n	800b4b0 <_strtod_l+0x150>
 800b3b0:	9b06      	ldr	r3, [sp, #24]
 800b3b2:	3220      	adds	r2, #32
 800b3b4:	785b      	ldrb	r3, [r3, #1]
 800b3b6:	4393      	bics	r3, r2
 800b3b8:	2b58      	cmp	r3, #88	; 0x58
 800b3ba:	d000      	beq.n	800b3be <_strtod_l+0x5e>
 800b3bc:	e06e      	b.n	800b49c <_strtod_l+0x13c>
 800b3be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3c0:	9502      	str	r5, [sp, #8]
 800b3c2:	9301      	str	r3, [sp, #4]
 800b3c4:	ab20      	add	r3, sp, #128	; 0x80
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	4a95      	ldr	r2, [pc, #596]	; (800b620 <_strtod_l+0x2c0>)
 800b3ca:	ab21      	add	r3, sp, #132	; 0x84
 800b3cc:	9805      	ldr	r0, [sp, #20]
 800b3ce:	a91f      	add	r1, sp, #124	; 0x7c
 800b3d0:	f001 fe24 	bl	800d01c <__gethex>
 800b3d4:	2307      	movs	r3, #7
 800b3d6:	0005      	movs	r5, r0
 800b3d8:	0004      	movs	r4, r0
 800b3da:	401d      	ands	r5, r3
 800b3dc:	4218      	tst	r0, r3
 800b3de:	d006      	beq.n	800b3ee <_strtod_l+0x8e>
 800b3e0:	2d06      	cmp	r5, #6
 800b3e2:	d12f      	bne.n	800b444 <_strtod_l+0xe4>
 800b3e4:	9b06      	ldr	r3, [sp, #24]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	931f      	str	r3, [sp, #124]	; 0x7c
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	930e      	str	r3, [sp, #56]	; 0x38
 800b3ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <_strtod_l+0x9a>
 800b3f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01c      	beq.n	800b43a <_strtod_l+0xda>
 800b400:	2380      	movs	r3, #128	; 0x80
 800b402:	0032      	movs	r2, r6
 800b404:	061b      	lsls	r3, r3, #24
 800b406:	18fb      	adds	r3, r7, r3
 800b408:	0010      	movs	r0, r2
 800b40a:	0019      	movs	r1, r3
 800b40c:	b025      	add	sp, #148	; 0x94
 800b40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b410:	2b20      	cmp	r3, #32
 800b412:	d1c3      	bne.n	800b39c <_strtod_l+0x3c>
 800b414:	3201      	adds	r2, #1
 800b416:	921f      	str	r2, [sp, #124]	; 0x7c
 800b418:	e7b5      	b.n	800b386 <_strtod_l+0x26>
 800b41a:	2b2d      	cmp	r3, #45	; 0x2d
 800b41c:	d1be      	bne.n	800b39c <_strtod_l+0x3c>
 800b41e:	3b2c      	subs	r3, #44	; 0x2c
 800b420:	930e      	str	r3, [sp, #56]	; 0x38
 800b422:	1c53      	adds	r3, r2, #1
 800b424:	931f      	str	r3, [sp, #124]	; 0x7c
 800b426:	7853      	ldrb	r3, [r2, #1]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1b9      	bne.n	800b3a0 <_strtod_l+0x40>
 800b42c:	9b08      	ldr	r3, [sp, #32]
 800b42e:	931f      	str	r3, [sp, #124]	; 0x7c
 800b430:	2300      	movs	r3, #0
 800b432:	930e      	str	r3, [sp, #56]	; 0x38
 800b434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1dc      	bne.n	800b3f4 <_strtod_l+0x94>
 800b43a:	0032      	movs	r2, r6
 800b43c:	003b      	movs	r3, r7
 800b43e:	e7e3      	b.n	800b408 <_strtod_l+0xa8>
 800b440:	2300      	movs	r3, #0
 800b442:	e7ed      	b.n	800b420 <_strtod_l+0xc0>
 800b444:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b446:	2a00      	cmp	r2, #0
 800b448:	d007      	beq.n	800b45a <_strtod_l+0xfa>
 800b44a:	2135      	movs	r1, #53	; 0x35
 800b44c:	a822      	add	r0, sp, #136	; 0x88
 800b44e:	f002 fdae 	bl	800dfae <__copybits>
 800b452:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b454:	9805      	ldr	r0, [sp, #20]
 800b456:	f002 f969 	bl	800d72c <_Bfree>
 800b45a:	1e68      	subs	r0, r5, #1
 800b45c:	2804      	cmp	r0, #4
 800b45e:	d806      	bhi.n	800b46e <_strtod_l+0x10e>
 800b460:	f7f4 fe62 	bl	8000128 <__gnu_thumb1_case_uqi>
 800b464:	1816030b 	.word	0x1816030b
 800b468:	0b          	.byte	0x0b
 800b469:	00          	.byte	0x00
 800b46a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800b46c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800b46e:	0723      	lsls	r3, r4, #28
 800b470:	d5bd      	bpl.n	800b3ee <_strtod_l+0x8e>
 800b472:	2380      	movs	r3, #128	; 0x80
 800b474:	061b      	lsls	r3, r3, #24
 800b476:	431f      	orrs	r7, r3
 800b478:	e7b9      	b.n	800b3ee <_strtod_l+0x8e>
 800b47a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b47c:	4a69      	ldr	r2, [pc, #420]	; (800b624 <_strtod_l+0x2c4>)
 800b47e:	496a      	ldr	r1, [pc, #424]	; (800b628 <_strtod_l+0x2c8>)
 800b480:	401a      	ands	r2, r3
 800b482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b484:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800b486:	185b      	adds	r3, r3, r1
 800b488:	051b      	lsls	r3, r3, #20
 800b48a:	431a      	orrs	r2, r3
 800b48c:	0017      	movs	r7, r2
 800b48e:	e7ee      	b.n	800b46e <_strtod_l+0x10e>
 800b490:	4f66      	ldr	r7, [pc, #408]	; (800b62c <_strtod_l+0x2cc>)
 800b492:	e7ec      	b.n	800b46e <_strtod_l+0x10e>
 800b494:	2601      	movs	r6, #1
 800b496:	4f66      	ldr	r7, [pc, #408]	; (800b630 <_strtod_l+0x2d0>)
 800b498:	4276      	negs	r6, r6
 800b49a:	e7e8      	b.n	800b46e <_strtod_l+0x10e>
 800b49c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	921f      	str	r2, [sp, #124]	; 0x7c
 800b4a2:	785b      	ldrb	r3, [r3, #1]
 800b4a4:	2b30      	cmp	r3, #48	; 0x30
 800b4a6:	d0f9      	beq.n	800b49c <_strtod_l+0x13c>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d0a0      	beq.n	800b3ee <_strtod_l+0x8e>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b4b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b4b2:	220a      	movs	r2, #10
 800b4b4:	9310      	str	r3, [sp, #64]	; 0x40
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4be:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800b4c0:	7805      	ldrb	r5, [r0, #0]
 800b4c2:	002b      	movs	r3, r5
 800b4c4:	3b30      	subs	r3, #48	; 0x30
 800b4c6:	b2d9      	uxtb	r1, r3
 800b4c8:	2909      	cmp	r1, #9
 800b4ca:	d927      	bls.n	800b51c <_strtod_l+0x1bc>
 800b4cc:	0022      	movs	r2, r4
 800b4ce:	9907      	ldr	r1, [sp, #28]
 800b4d0:	f003 f8a8 	bl	800e624 <strncmp>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d033      	beq.n	800b540 <_strtod_l+0x1e0>
 800b4d8:	2000      	movs	r0, #0
 800b4da:	002b      	movs	r3, r5
 800b4dc:	4684      	mov	ip, r0
 800b4de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4e0:	900c      	str	r0, [sp, #48]	; 0x30
 800b4e2:	9206      	str	r2, [sp, #24]
 800b4e4:	2220      	movs	r2, #32
 800b4e6:	0019      	movs	r1, r3
 800b4e8:	4391      	bics	r1, r2
 800b4ea:	000a      	movs	r2, r1
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	9107      	str	r1, [sp, #28]
 800b4f0:	2a45      	cmp	r2, #69	; 0x45
 800b4f2:	d000      	beq.n	800b4f6 <_strtod_l+0x196>
 800b4f4:	e0c5      	b.n	800b682 <_strtod_l+0x322>
 800b4f6:	9b06      	ldr	r3, [sp, #24]
 800b4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4fa:	4303      	orrs	r3, r0
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	428b      	cmp	r3, r1
 800b500:	d094      	beq.n	800b42c <_strtod_l+0xcc>
 800b502:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b504:	9308      	str	r3, [sp, #32]
 800b506:	3301      	adds	r3, #1
 800b508:	931f      	str	r3, [sp, #124]	; 0x7c
 800b50a:	9b08      	ldr	r3, [sp, #32]
 800b50c:	785b      	ldrb	r3, [r3, #1]
 800b50e:	2b2b      	cmp	r3, #43	; 0x2b
 800b510:	d076      	beq.n	800b600 <_strtod_l+0x2a0>
 800b512:	000c      	movs	r4, r1
 800b514:	2b2d      	cmp	r3, #45	; 0x2d
 800b516:	d179      	bne.n	800b60c <_strtod_l+0x2ac>
 800b518:	2401      	movs	r4, #1
 800b51a:	e072      	b.n	800b602 <_strtod_l+0x2a2>
 800b51c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b51e:	2908      	cmp	r1, #8
 800b520:	dc09      	bgt.n	800b536 <_strtod_l+0x1d6>
 800b522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b524:	4351      	muls	r1, r2
 800b526:	185b      	adds	r3, r3, r1
 800b528:	930b      	str	r3, [sp, #44]	; 0x2c
 800b52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52c:	3001      	adds	r0, #1
 800b52e:	3301      	adds	r3, #1
 800b530:	9309      	str	r3, [sp, #36]	; 0x24
 800b532:	901f      	str	r0, [sp, #124]	; 0x7c
 800b534:	e7c3      	b.n	800b4be <_strtod_l+0x15e>
 800b536:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b538:	4351      	muls	r1, r2
 800b53a:	185b      	adds	r3, r3, r1
 800b53c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b53e:	e7f4      	b.n	800b52a <_strtod_l+0x1ca>
 800b540:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b544:	191c      	adds	r4, r3, r4
 800b546:	941f      	str	r4, [sp, #124]	; 0x7c
 800b548:	7823      	ldrb	r3, [r4, #0]
 800b54a:	2a00      	cmp	r2, #0
 800b54c:	d039      	beq.n	800b5c2 <_strtod_l+0x262>
 800b54e:	900c      	str	r0, [sp, #48]	; 0x30
 800b550:	9206      	str	r2, [sp, #24]
 800b552:	001a      	movs	r2, r3
 800b554:	3a30      	subs	r2, #48	; 0x30
 800b556:	2a09      	cmp	r2, #9
 800b558:	d912      	bls.n	800b580 <_strtod_l+0x220>
 800b55a:	2201      	movs	r2, #1
 800b55c:	4694      	mov	ip, r2
 800b55e:	e7c1      	b.n	800b4e4 <_strtod_l+0x184>
 800b560:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b562:	3001      	adds	r0, #1
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	921f      	str	r2, [sp, #124]	; 0x7c
 800b568:	785b      	ldrb	r3, [r3, #1]
 800b56a:	2b30      	cmp	r3, #48	; 0x30
 800b56c:	d0f8      	beq.n	800b560 <_strtod_l+0x200>
 800b56e:	001a      	movs	r2, r3
 800b570:	3a31      	subs	r2, #49	; 0x31
 800b572:	2a08      	cmp	r2, #8
 800b574:	d83f      	bhi.n	800b5f6 <_strtod_l+0x296>
 800b576:	900c      	str	r0, [sp, #48]	; 0x30
 800b578:	2000      	movs	r0, #0
 800b57a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b57c:	9006      	str	r0, [sp, #24]
 800b57e:	9210      	str	r2, [sp, #64]	; 0x40
 800b580:	001a      	movs	r2, r3
 800b582:	1c41      	adds	r1, r0, #1
 800b584:	3a30      	subs	r2, #48	; 0x30
 800b586:	2b30      	cmp	r3, #48	; 0x30
 800b588:	d015      	beq.n	800b5b6 <_strtod_l+0x256>
 800b58a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b58c:	185b      	adds	r3, r3, r1
 800b58e:	210a      	movs	r1, #10
 800b590:	930c      	str	r3, [sp, #48]	; 0x30
 800b592:	9b06      	ldr	r3, [sp, #24]
 800b594:	18c4      	adds	r4, r0, r3
 800b596:	42a3      	cmp	r3, r4
 800b598:	d115      	bne.n	800b5c6 <_strtod_l+0x266>
 800b59a:	9906      	ldr	r1, [sp, #24]
 800b59c:	9b06      	ldr	r3, [sp, #24]
 800b59e:	3101      	adds	r1, #1
 800b5a0:	1809      	adds	r1, r1, r0
 800b5a2:	181b      	adds	r3, r3, r0
 800b5a4:	9106      	str	r1, [sp, #24]
 800b5a6:	2b08      	cmp	r3, #8
 800b5a8:	dc1b      	bgt.n	800b5e2 <_strtod_l+0x282>
 800b5aa:	230a      	movs	r3, #10
 800b5ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5ae:	434b      	muls	r3, r1
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	18d3      	adds	r3, r2, r3
 800b5b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b5b8:	0008      	movs	r0, r1
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	921f      	str	r2, [sp, #124]	; 0x7c
 800b5be:	785b      	ldrb	r3, [r3, #1]
 800b5c0:	e7c7      	b.n	800b552 <_strtod_l+0x1f2>
 800b5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5c4:	e7d1      	b.n	800b56a <_strtod_l+0x20a>
 800b5c6:	2b08      	cmp	r3, #8
 800b5c8:	dc04      	bgt.n	800b5d4 <_strtod_l+0x274>
 800b5ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b5cc:	434d      	muls	r5, r1
 800b5ce:	950b      	str	r5, [sp, #44]	; 0x2c
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	e7e0      	b.n	800b596 <_strtod_l+0x236>
 800b5d4:	1c5d      	adds	r5, r3, #1
 800b5d6:	2d10      	cmp	r5, #16
 800b5d8:	dcfa      	bgt.n	800b5d0 <_strtod_l+0x270>
 800b5da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5dc:	434d      	muls	r5, r1
 800b5de:	950f      	str	r5, [sp, #60]	; 0x3c
 800b5e0:	e7f6      	b.n	800b5d0 <_strtod_l+0x270>
 800b5e2:	9b06      	ldr	r3, [sp, #24]
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	2b10      	cmp	r3, #16
 800b5e8:	dce5      	bgt.n	800b5b6 <_strtod_l+0x256>
 800b5ea:	230a      	movs	r3, #10
 800b5ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b5ee:	4343      	muls	r3, r0
 800b5f0:	18d3      	adds	r3, r2, r3
 800b5f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5f4:	e7df      	b.n	800b5b6 <_strtod_l+0x256>
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	920c      	str	r2, [sp, #48]	; 0x30
 800b5fa:	9206      	str	r2, [sp, #24]
 800b5fc:	3201      	adds	r2, #1
 800b5fe:	e7ad      	b.n	800b55c <_strtod_l+0x1fc>
 800b600:	2400      	movs	r4, #0
 800b602:	9b08      	ldr	r3, [sp, #32]
 800b604:	3302      	adds	r3, #2
 800b606:	931f      	str	r3, [sp, #124]	; 0x7c
 800b608:	9b08      	ldr	r3, [sp, #32]
 800b60a:	789b      	ldrb	r3, [r3, #2]
 800b60c:	001a      	movs	r2, r3
 800b60e:	3a30      	subs	r2, #48	; 0x30
 800b610:	2a09      	cmp	r2, #9
 800b612:	d913      	bls.n	800b63c <_strtod_l+0x2dc>
 800b614:	9a08      	ldr	r2, [sp, #32]
 800b616:	921f      	str	r2, [sp, #124]	; 0x7c
 800b618:	2200      	movs	r2, #0
 800b61a:	e031      	b.n	800b680 <_strtod_l+0x320>
 800b61c:	0800f4c8 	.word	0x0800f4c8
 800b620:	0800f1e4 	.word	0x0800f1e4
 800b624:	ffefffff 	.word	0xffefffff
 800b628:	00000433 	.word	0x00000433
 800b62c:	7ff00000 	.word	0x7ff00000
 800b630:	7fffffff 	.word	0x7fffffff
 800b634:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b636:	1c5a      	adds	r2, r3, #1
 800b638:	921f      	str	r2, [sp, #124]	; 0x7c
 800b63a:	785b      	ldrb	r3, [r3, #1]
 800b63c:	2b30      	cmp	r3, #48	; 0x30
 800b63e:	d0f9      	beq.n	800b634 <_strtod_l+0x2d4>
 800b640:	2200      	movs	r2, #0
 800b642:	9207      	str	r2, [sp, #28]
 800b644:	001a      	movs	r2, r3
 800b646:	3a31      	subs	r2, #49	; 0x31
 800b648:	2a08      	cmp	r2, #8
 800b64a:	d81a      	bhi.n	800b682 <_strtod_l+0x322>
 800b64c:	3b30      	subs	r3, #48	; 0x30
 800b64e:	001a      	movs	r2, r3
 800b650:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b652:	9307      	str	r3, [sp, #28]
 800b654:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b656:	1c59      	adds	r1, r3, #1
 800b658:	911f      	str	r1, [sp, #124]	; 0x7c
 800b65a:	785b      	ldrb	r3, [r3, #1]
 800b65c:	001d      	movs	r5, r3
 800b65e:	3d30      	subs	r5, #48	; 0x30
 800b660:	2d09      	cmp	r5, #9
 800b662:	d939      	bls.n	800b6d8 <_strtod_l+0x378>
 800b664:	9d07      	ldr	r5, [sp, #28]
 800b666:	1b49      	subs	r1, r1, r5
 800b668:	4db0      	ldr	r5, [pc, #704]	; (800b92c <_strtod_l+0x5cc>)
 800b66a:	9507      	str	r5, [sp, #28]
 800b66c:	2908      	cmp	r1, #8
 800b66e:	dc03      	bgt.n	800b678 <_strtod_l+0x318>
 800b670:	9207      	str	r2, [sp, #28]
 800b672:	42aa      	cmp	r2, r5
 800b674:	dd00      	ble.n	800b678 <_strtod_l+0x318>
 800b676:	9507      	str	r5, [sp, #28]
 800b678:	2c00      	cmp	r4, #0
 800b67a:	d002      	beq.n	800b682 <_strtod_l+0x322>
 800b67c:	9a07      	ldr	r2, [sp, #28]
 800b67e:	4252      	negs	r2, r2
 800b680:	9207      	str	r2, [sp, #28]
 800b682:	9a06      	ldr	r2, [sp, #24]
 800b684:	2a00      	cmp	r2, #0
 800b686:	d14b      	bne.n	800b720 <_strtod_l+0x3c0>
 800b688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b68a:	4310      	orrs	r0, r2
 800b68c:	d000      	beq.n	800b690 <_strtod_l+0x330>
 800b68e:	e6ae      	b.n	800b3ee <_strtod_l+0x8e>
 800b690:	4662      	mov	r2, ip
 800b692:	2a00      	cmp	r2, #0
 800b694:	d000      	beq.n	800b698 <_strtod_l+0x338>
 800b696:	e6c9      	b.n	800b42c <_strtod_l+0xcc>
 800b698:	2b69      	cmp	r3, #105	; 0x69
 800b69a:	d025      	beq.n	800b6e8 <_strtod_l+0x388>
 800b69c:	dc21      	bgt.n	800b6e2 <_strtod_l+0x382>
 800b69e:	2b49      	cmp	r3, #73	; 0x49
 800b6a0:	d022      	beq.n	800b6e8 <_strtod_l+0x388>
 800b6a2:	2b4e      	cmp	r3, #78	; 0x4e
 800b6a4:	d000      	beq.n	800b6a8 <_strtod_l+0x348>
 800b6a6:	e6c1      	b.n	800b42c <_strtod_l+0xcc>
 800b6a8:	49a1      	ldr	r1, [pc, #644]	; (800b930 <_strtod_l+0x5d0>)
 800b6aa:	a81f      	add	r0, sp, #124	; 0x7c
 800b6ac:	f001 ff04 	bl	800d4b8 <__match>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d100      	bne.n	800b6b6 <_strtod_l+0x356>
 800b6b4:	e6ba      	b.n	800b42c <_strtod_l+0xcc>
 800b6b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2b28      	cmp	r3, #40	; 0x28
 800b6bc:	d12a      	bne.n	800b714 <_strtod_l+0x3b4>
 800b6be:	499d      	ldr	r1, [pc, #628]	; (800b934 <_strtod_l+0x5d4>)
 800b6c0:	aa22      	add	r2, sp, #136	; 0x88
 800b6c2:	a81f      	add	r0, sp, #124	; 0x7c
 800b6c4:	f001 ff0c 	bl	800d4e0 <__hexnan>
 800b6c8:	2805      	cmp	r0, #5
 800b6ca:	d123      	bne.n	800b714 <_strtod_l+0x3b4>
 800b6cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b6ce:	4a9a      	ldr	r2, [pc, #616]	; (800b938 <_strtod_l+0x5d8>)
 800b6d0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800b6d2:	431a      	orrs	r2, r3
 800b6d4:	0017      	movs	r7, r2
 800b6d6:	e68a      	b.n	800b3ee <_strtod_l+0x8e>
 800b6d8:	210a      	movs	r1, #10
 800b6da:	434a      	muls	r2, r1
 800b6dc:	18d2      	adds	r2, r2, r3
 800b6de:	3a30      	subs	r2, #48	; 0x30
 800b6e0:	e7b8      	b.n	800b654 <_strtod_l+0x2f4>
 800b6e2:	2b6e      	cmp	r3, #110	; 0x6e
 800b6e4:	d0e0      	beq.n	800b6a8 <_strtod_l+0x348>
 800b6e6:	e6a1      	b.n	800b42c <_strtod_l+0xcc>
 800b6e8:	4994      	ldr	r1, [pc, #592]	; (800b93c <_strtod_l+0x5dc>)
 800b6ea:	a81f      	add	r0, sp, #124	; 0x7c
 800b6ec:	f001 fee4 	bl	800d4b8 <__match>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d100      	bne.n	800b6f6 <_strtod_l+0x396>
 800b6f4:	e69a      	b.n	800b42c <_strtod_l+0xcc>
 800b6f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6f8:	4991      	ldr	r1, [pc, #580]	; (800b940 <_strtod_l+0x5e0>)
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	a81f      	add	r0, sp, #124	; 0x7c
 800b6fe:	931f      	str	r3, [sp, #124]	; 0x7c
 800b700:	f001 feda 	bl	800d4b8 <__match>
 800b704:	2800      	cmp	r0, #0
 800b706:	d102      	bne.n	800b70e <_strtod_l+0x3ae>
 800b708:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b70a:	3301      	adds	r3, #1
 800b70c:	931f      	str	r3, [sp, #124]	; 0x7c
 800b70e:	2600      	movs	r6, #0
 800b710:	4f89      	ldr	r7, [pc, #548]	; (800b938 <_strtod_l+0x5d8>)
 800b712:	e66c      	b.n	800b3ee <_strtod_l+0x8e>
 800b714:	488b      	ldr	r0, [pc, #556]	; (800b944 <_strtod_l+0x5e4>)
 800b716:	f002 ff7f 	bl	800e618 <nan>
 800b71a:	0006      	movs	r6, r0
 800b71c:	000f      	movs	r7, r1
 800b71e:	e666      	b.n	800b3ee <_strtod_l+0x8e>
 800b720:	9b07      	ldr	r3, [sp, #28]
 800b722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b724:	1a9b      	subs	r3, r3, r2
 800b726:	930a      	str	r3, [sp, #40]	; 0x28
 800b728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <_strtod_l+0x3d2>
 800b72e:	9b06      	ldr	r3, [sp, #24]
 800b730:	9309      	str	r3, [sp, #36]	; 0x24
 800b732:	9c06      	ldr	r4, [sp, #24]
 800b734:	2c10      	cmp	r4, #16
 800b736:	dd00      	ble.n	800b73a <_strtod_l+0x3da>
 800b738:	2410      	movs	r4, #16
 800b73a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b73c:	f7f7 fcfc 	bl	8003138 <__aeabi_ui2d>
 800b740:	9b06      	ldr	r3, [sp, #24]
 800b742:	0006      	movs	r6, r0
 800b744:	000f      	movs	r7, r1
 800b746:	2b09      	cmp	r3, #9
 800b748:	dd15      	ble.n	800b776 <_strtod_l+0x416>
 800b74a:	0022      	movs	r2, r4
 800b74c:	4b7e      	ldr	r3, [pc, #504]	; (800b948 <_strtod_l+0x5e8>)
 800b74e:	3a09      	subs	r2, #9
 800b750:	00d2      	lsls	r2, r2, #3
 800b752:	189b      	adds	r3, r3, r2
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	f7f6 fe6c 	bl	8002434 <__aeabi_dmul>
 800b75c:	0006      	movs	r6, r0
 800b75e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b760:	000f      	movs	r7, r1
 800b762:	f7f7 fce9 	bl	8003138 <__aeabi_ui2d>
 800b766:	0002      	movs	r2, r0
 800b768:	000b      	movs	r3, r1
 800b76a:	0030      	movs	r0, r6
 800b76c:	0039      	movs	r1, r7
 800b76e:	f7f5 ff23 	bl	80015b8 <__aeabi_dadd>
 800b772:	0006      	movs	r6, r0
 800b774:	000f      	movs	r7, r1
 800b776:	9b06      	ldr	r3, [sp, #24]
 800b778:	2b0f      	cmp	r3, #15
 800b77a:	dc39      	bgt.n	800b7f0 <_strtod_l+0x490>
 800b77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d100      	bne.n	800b784 <_strtod_l+0x424>
 800b782:	e634      	b.n	800b3ee <_strtod_l+0x8e>
 800b784:	dd24      	ble.n	800b7d0 <_strtod_l+0x470>
 800b786:	2b16      	cmp	r3, #22
 800b788:	dc09      	bgt.n	800b79e <_strtod_l+0x43e>
 800b78a:	496f      	ldr	r1, [pc, #444]	; (800b948 <_strtod_l+0x5e8>)
 800b78c:	00db      	lsls	r3, r3, #3
 800b78e:	18c9      	adds	r1, r1, r3
 800b790:	0032      	movs	r2, r6
 800b792:	6808      	ldr	r0, [r1, #0]
 800b794:	6849      	ldr	r1, [r1, #4]
 800b796:	003b      	movs	r3, r7
 800b798:	f7f6 fe4c 	bl	8002434 <__aeabi_dmul>
 800b79c:	e7bd      	b.n	800b71a <_strtod_l+0x3ba>
 800b79e:	2325      	movs	r3, #37	; 0x25
 800b7a0:	9a06      	ldr	r2, [sp, #24]
 800b7a2:	1a9b      	subs	r3, r3, r2
 800b7a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	db22      	blt.n	800b7f0 <_strtod_l+0x490>
 800b7aa:	240f      	movs	r4, #15
 800b7ac:	9b06      	ldr	r3, [sp, #24]
 800b7ae:	4d66      	ldr	r5, [pc, #408]	; (800b948 <_strtod_l+0x5e8>)
 800b7b0:	1ae4      	subs	r4, r4, r3
 800b7b2:	00e1      	lsls	r1, r4, #3
 800b7b4:	1869      	adds	r1, r5, r1
 800b7b6:	0032      	movs	r2, r6
 800b7b8:	6808      	ldr	r0, [r1, #0]
 800b7ba:	6849      	ldr	r1, [r1, #4]
 800b7bc:	003b      	movs	r3, r7
 800b7be:	f7f6 fe39 	bl	8002434 <__aeabi_dmul>
 800b7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c4:	1b1c      	subs	r4, r3, r4
 800b7c6:	00e4      	lsls	r4, r4, #3
 800b7c8:	192c      	adds	r4, r5, r4
 800b7ca:	6822      	ldr	r2, [r4, #0]
 800b7cc:	6863      	ldr	r3, [r4, #4]
 800b7ce:	e7e3      	b.n	800b798 <_strtod_l+0x438>
 800b7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7d2:	3316      	adds	r3, #22
 800b7d4:	db0c      	blt.n	800b7f0 <_strtod_l+0x490>
 800b7d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7d8:	9a07      	ldr	r2, [sp, #28]
 800b7da:	0030      	movs	r0, r6
 800b7dc:	1a9a      	subs	r2, r3, r2
 800b7de:	4b5a      	ldr	r3, [pc, #360]	; (800b948 <_strtod_l+0x5e8>)
 800b7e0:	00d2      	lsls	r2, r2, #3
 800b7e2:	189b      	adds	r3, r3, r2
 800b7e4:	0039      	movs	r1, r7
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f7f6 fa21 	bl	8001c30 <__aeabi_ddiv>
 800b7ee:	e794      	b.n	800b71a <_strtod_l+0x3ba>
 800b7f0:	9b06      	ldr	r3, [sp, #24]
 800b7f2:	1b1c      	subs	r4, r3, r4
 800b7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7f6:	18e4      	adds	r4, r4, r3
 800b7f8:	2c00      	cmp	r4, #0
 800b7fa:	dd72      	ble.n	800b8e2 <_strtod_l+0x582>
 800b7fc:	230f      	movs	r3, #15
 800b7fe:	0021      	movs	r1, r4
 800b800:	4019      	ands	r1, r3
 800b802:	421c      	tst	r4, r3
 800b804:	d00a      	beq.n	800b81c <_strtod_l+0x4bc>
 800b806:	00cb      	lsls	r3, r1, #3
 800b808:	494f      	ldr	r1, [pc, #316]	; (800b948 <_strtod_l+0x5e8>)
 800b80a:	0032      	movs	r2, r6
 800b80c:	18c9      	adds	r1, r1, r3
 800b80e:	6808      	ldr	r0, [r1, #0]
 800b810:	6849      	ldr	r1, [r1, #4]
 800b812:	003b      	movs	r3, r7
 800b814:	f7f6 fe0e 	bl	8002434 <__aeabi_dmul>
 800b818:	0006      	movs	r6, r0
 800b81a:	000f      	movs	r7, r1
 800b81c:	230f      	movs	r3, #15
 800b81e:	439c      	bics	r4, r3
 800b820:	d04a      	beq.n	800b8b8 <_strtod_l+0x558>
 800b822:	3326      	adds	r3, #38	; 0x26
 800b824:	33ff      	adds	r3, #255	; 0xff
 800b826:	429c      	cmp	r4, r3
 800b828:	dd22      	ble.n	800b870 <_strtod_l+0x510>
 800b82a:	2300      	movs	r3, #0
 800b82c:	9306      	str	r3, [sp, #24]
 800b82e:	9307      	str	r3, [sp, #28]
 800b830:	930b      	str	r3, [sp, #44]	; 0x2c
 800b832:	9309      	str	r3, [sp, #36]	; 0x24
 800b834:	2322      	movs	r3, #34	; 0x22
 800b836:	2600      	movs	r6, #0
 800b838:	9a05      	ldr	r2, [sp, #20]
 800b83a:	4f3f      	ldr	r7, [pc, #252]	; (800b938 <_strtod_l+0x5d8>)
 800b83c:	6013      	str	r3, [r2, #0]
 800b83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b840:	42b3      	cmp	r3, r6
 800b842:	d100      	bne.n	800b846 <_strtod_l+0x4e6>
 800b844:	e5d3      	b.n	800b3ee <_strtod_l+0x8e>
 800b846:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b848:	9805      	ldr	r0, [sp, #20]
 800b84a:	f001 ff6f 	bl	800d72c <_Bfree>
 800b84e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b850:	9805      	ldr	r0, [sp, #20]
 800b852:	f001 ff6b 	bl	800d72c <_Bfree>
 800b856:	9907      	ldr	r1, [sp, #28]
 800b858:	9805      	ldr	r0, [sp, #20]
 800b85a:	f001 ff67 	bl	800d72c <_Bfree>
 800b85e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b860:	9805      	ldr	r0, [sp, #20]
 800b862:	f001 ff63 	bl	800d72c <_Bfree>
 800b866:	9906      	ldr	r1, [sp, #24]
 800b868:	9805      	ldr	r0, [sp, #20]
 800b86a:	f001 ff5f 	bl	800d72c <_Bfree>
 800b86e:	e5be      	b.n	800b3ee <_strtod_l+0x8e>
 800b870:	2300      	movs	r3, #0
 800b872:	0030      	movs	r0, r6
 800b874:	0039      	movs	r1, r7
 800b876:	4d35      	ldr	r5, [pc, #212]	; (800b94c <_strtod_l+0x5ec>)
 800b878:	1124      	asrs	r4, r4, #4
 800b87a:	9308      	str	r3, [sp, #32]
 800b87c:	2c01      	cmp	r4, #1
 800b87e:	dc1e      	bgt.n	800b8be <_strtod_l+0x55e>
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <_strtod_l+0x528>
 800b884:	0006      	movs	r6, r0
 800b886:	000f      	movs	r7, r1
 800b888:	4b31      	ldr	r3, [pc, #196]	; (800b950 <_strtod_l+0x5f0>)
 800b88a:	0032      	movs	r2, r6
 800b88c:	18ff      	adds	r7, r7, r3
 800b88e:	9b08      	ldr	r3, [sp, #32]
 800b890:	00dd      	lsls	r5, r3, #3
 800b892:	4b2e      	ldr	r3, [pc, #184]	; (800b94c <_strtod_l+0x5ec>)
 800b894:	195d      	adds	r5, r3, r5
 800b896:	6828      	ldr	r0, [r5, #0]
 800b898:	6869      	ldr	r1, [r5, #4]
 800b89a:	003b      	movs	r3, r7
 800b89c:	f7f6 fdca 	bl	8002434 <__aeabi_dmul>
 800b8a0:	4b25      	ldr	r3, [pc, #148]	; (800b938 <_strtod_l+0x5d8>)
 800b8a2:	4a2c      	ldr	r2, [pc, #176]	; (800b954 <_strtod_l+0x5f4>)
 800b8a4:	0006      	movs	r6, r0
 800b8a6:	400b      	ands	r3, r1
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d8be      	bhi.n	800b82a <_strtod_l+0x4ca>
 800b8ac:	4a2a      	ldr	r2, [pc, #168]	; (800b958 <_strtod_l+0x5f8>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d913      	bls.n	800b8da <_strtod_l+0x57a>
 800b8b2:	2601      	movs	r6, #1
 800b8b4:	4f29      	ldr	r7, [pc, #164]	; (800b95c <_strtod_l+0x5fc>)
 800b8b6:	4276      	negs	r6, r6
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9308      	str	r3, [sp, #32]
 800b8bc:	e087      	b.n	800b9ce <_strtod_l+0x66e>
 800b8be:	2201      	movs	r2, #1
 800b8c0:	4214      	tst	r4, r2
 800b8c2:	d004      	beq.n	800b8ce <_strtod_l+0x56e>
 800b8c4:	682a      	ldr	r2, [r5, #0]
 800b8c6:	686b      	ldr	r3, [r5, #4]
 800b8c8:	f7f6 fdb4 	bl	8002434 <__aeabi_dmul>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	9a08      	ldr	r2, [sp, #32]
 800b8d0:	1064      	asrs	r4, r4, #1
 800b8d2:	3201      	adds	r2, #1
 800b8d4:	9208      	str	r2, [sp, #32]
 800b8d6:	3508      	adds	r5, #8
 800b8d8:	e7d0      	b.n	800b87c <_strtod_l+0x51c>
 800b8da:	23d4      	movs	r3, #212	; 0xd4
 800b8dc:	049b      	lsls	r3, r3, #18
 800b8de:	18cf      	adds	r7, r1, r3
 800b8e0:	e7ea      	b.n	800b8b8 <_strtod_l+0x558>
 800b8e2:	2c00      	cmp	r4, #0
 800b8e4:	d0e8      	beq.n	800b8b8 <_strtod_l+0x558>
 800b8e6:	4264      	negs	r4, r4
 800b8e8:	220f      	movs	r2, #15
 800b8ea:	0023      	movs	r3, r4
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	4214      	tst	r4, r2
 800b8f0:	d00a      	beq.n	800b908 <_strtod_l+0x5a8>
 800b8f2:	00da      	lsls	r2, r3, #3
 800b8f4:	4b14      	ldr	r3, [pc, #80]	; (800b948 <_strtod_l+0x5e8>)
 800b8f6:	0030      	movs	r0, r6
 800b8f8:	189b      	adds	r3, r3, r2
 800b8fa:	0039      	movs	r1, r7
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	f7f6 f996 	bl	8001c30 <__aeabi_ddiv>
 800b904:	0006      	movs	r6, r0
 800b906:	000f      	movs	r7, r1
 800b908:	1124      	asrs	r4, r4, #4
 800b90a:	d0d5      	beq.n	800b8b8 <_strtod_l+0x558>
 800b90c:	2c1f      	cmp	r4, #31
 800b90e:	dd27      	ble.n	800b960 <_strtod_l+0x600>
 800b910:	2300      	movs	r3, #0
 800b912:	9306      	str	r3, [sp, #24]
 800b914:	9307      	str	r3, [sp, #28]
 800b916:	930b      	str	r3, [sp, #44]	; 0x2c
 800b918:	9309      	str	r3, [sp, #36]	; 0x24
 800b91a:	2322      	movs	r3, #34	; 0x22
 800b91c:	9a05      	ldr	r2, [sp, #20]
 800b91e:	2600      	movs	r6, #0
 800b920:	6013      	str	r3, [r2, #0]
 800b922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b924:	2700      	movs	r7, #0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d18d      	bne.n	800b846 <_strtod_l+0x4e6>
 800b92a:	e560      	b.n	800b3ee <_strtod_l+0x8e>
 800b92c:	00004e1f 	.word	0x00004e1f
 800b930:	0800f1b5 	.word	0x0800f1b5
 800b934:	0800f1f8 	.word	0x0800f1f8
 800b938:	7ff00000 	.word	0x7ff00000
 800b93c:	0800f1ad 	.word	0x0800f1ad
 800b940:	0800f3ec 	.word	0x0800f3ec
 800b944:	0800f2e7 	.word	0x0800f2e7
 800b948:	0800f560 	.word	0x0800f560
 800b94c:	0800f538 	.word	0x0800f538
 800b950:	fcb00000 	.word	0xfcb00000
 800b954:	7ca00000 	.word	0x7ca00000
 800b958:	7c900000 	.word	0x7c900000
 800b95c:	7fefffff 	.word	0x7fefffff
 800b960:	2310      	movs	r3, #16
 800b962:	0022      	movs	r2, r4
 800b964:	401a      	ands	r2, r3
 800b966:	9208      	str	r2, [sp, #32]
 800b968:	421c      	tst	r4, r3
 800b96a:	d001      	beq.n	800b970 <_strtod_l+0x610>
 800b96c:	335a      	adds	r3, #90	; 0x5a
 800b96e:	9308      	str	r3, [sp, #32]
 800b970:	0030      	movs	r0, r6
 800b972:	0039      	movs	r1, r7
 800b974:	2300      	movs	r3, #0
 800b976:	4dc5      	ldr	r5, [pc, #788]	; (800bc8c <_strtod_l+0x92c>)
 800b978:	2201      	movs	r2, #1
 800b97a:	4214      	tst	r4, r2
 800b97c:	d004      	beq.n	800b988 <_strtod_l+0x628>
 800b97e:	682a      	ldr	r2, [r5, #0]
 800b980:	686b      	ldr	r3, [r5, #4]
 800b982:	f7f6 fd57 	bl	8002434 <__aeabi_dmul>
 800b986:	2301      	movs	r3, #1
 800b988:	1064      	asrs	r4, r4, #1
 800b98a:	3508      	adds	r5, #8
 800b98c:	2c00      	cmp	r4, #0
 800b98e:	d1f3      	bne.n	800b978 <_strtod_l+0x618>
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <_strtod_l+0x638>
 800b994:	0006      	movs	r6, r0
 800b996:	000f      	movs	r7, r1
 800b998:	9b08      	ldr	r3, [sp, #32]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00f      	beq.n	800b9be <_strtod_l+0x65e>
 800b99e:	236b      	movs	r3, #107	; 0x6b
 800b9a0:	007a      	lsls	r2, r7, #1
 800b9a2:	0d52      	lsrs	r2, r2, #21
 800b9a4:	0039      	movs	r1, r7
 800b9a6:	1a9b      	subs	r3, r3, r2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	dd08      	ble.n	800b9be <_strtod_l+0x65e>
 800b9ac:	2b1f      	cmp	r3, #31
 800b9ae:	dc00      	bgt.n	800b9b2 <_strtod_l+0x652>
 800b9b0:	e124      	b.n	800bbfc <_strtod_l+0x89c>
 800b9b2:	2600      	movs	r6, #0
 800b9b4:	2b34      	cmp	r3, #52	; 0x34
 800b9b6:	dc00      	bgt.n	800b9ba <_strtod_l+0x65a>
 800b9b8:	e119      	b.n	800bbee <_strtod_l+0x88e>
 800b9ba:	27dc      	movs	r7, #220	; 0xdc
 800b9bc:	04bf      	lsls	r7, r7, #18
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	0030      	movs	r0, r6
 800b9c4:	0039      	movs	r1, r7
 800b9c6:	f7f4 fd49 	bl	800045c <__aeabi_dcmpeq>
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	d1a0      	bne.n	800b910 <_strtod_l+0x5b0>
 800b9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b9d6:	9b06      	ldr	r3, [sp, #24]
 800b9d8:	9805      	ldr	r0, [sp, #20]
 800b9da:	f001 ff0f 	bl	800d7fc <__s2b>
 800b9de:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d100      	bne.n	800b9e6 <_strtod_l+0x686>
 800b9e4:	e721      	b.n	800b82a <_strtod_l+0x4ca>
 800b9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e8:	9907      	ldr	r1, [sp, #28]
 800b9ea:	17da      	asrs	r2, r3, #31
 800b9ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9ee:	1a5b      	subs	r3, r3, r1
 800b9f0:	401a      	ands	r2, r3
 800b9f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9f4:	9215      	str	r2, [sp, #84]	; 0x54
 800b9f6:	43db      	mvns	r3, r3
 800b9f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9fa:	17db      	asrs	r3, r3, #31
 800b9fc:	401a      	ands	r2, r3
 800b9fe:	2300      	movs	r3, #0
 800ba00:	921a      	str	r2, [sp, #104]	; 0x68
 800ba02:	9306      	str	r3, [sp, #24]
 800ba04:	9307      	str	r3, [sp, #28]
 800ba06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba08:	9805      	ldr	r0, [sp, #20]
 800ba0a:	6859      	ldr	r1, [r3, #4]
 800ba0c:	f001 fe4a 	bl	800d6a4 <_Balloc>
 800ba10:	9009      	str	r0, [sp, #36]	; 0x24
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d100      	bne.n	800ba18 <_strtod_l+0x6b8>
 800ba16:	e70d      	b.n	800b834 <_strtod_l+0x4d4>
 800ba18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	310c      	adds	r1, #12
 800ba20:	1c9a      	adds	r2, r3, #2
 800ba22:	0092      	lsls	r2, r2, #2
 800ba24:	300c      	adds	r0, #12
 800ba26:	930c      	str	r3, [sp, #48]	; 0x30
 800ba28:	f001 fe23 	bl	800d672 <memcpy>
 800ba2c:	ab22      	add	r3, sp, #136	; 0x88
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	ab21      	add	r3, sp, #132	; 0x84
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	0032      	movs	r2, r6
 800ba36:	003b      	movs	r3, r7
 800ba38:	9805      	ldr	r0, [sp, #20]
 800ba3a:	9612      	str	r6, [sp, #72]	; 0x48
 800ba3c:	9713      	str	r7, [sp, #76]	; 0x4c
 800ba3e:	f002 fa29 	bl	800de94 <__d2b>
 800ba42:	9020      	str	r0, [sp, #128]	; 0x80
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d100      	bne.n	800ba4a <_strtod_l+0x6ea>
 800ba48:	e6f4      	b.n	800b834 <_strtod_l+0x4d4>
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	9805      	ldr	r0, [sp, #20]
 800ba4e:	f001 ff69 	bl	800d924 <__i2b>
 800ba52:	9007      	str	r0, [sp, #28]
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d100      	bne.n	800ba5a <_strtod_l+0x6fa>
 800ba58:	e6ec      	b.n	800b834 <_strtod_l+0x4d4>
 800ba5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ba5e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ba60:	1ad4      	subs	r4, r2, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	db01      	blt.n	800ba6a <_strtod_l+0x70a>
 800ba66:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800ba68:	195d      	adds	r5, r3, r5
 800ba6a:	9908      	ldr	r1, [sp, #32]
 800ba6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ba6e:	1a5b      	subs	r3, r3, r1
 800ba70:	2136      	movs	r1, #54	; 0x36
 800ba72:	189b      	adds	r3, r3, r2
 800ba74:	1a8a      	subs	r2, r1, r2
 800ba76:	4986      	ldr	r1, [pc, #536]	; (800bc90 <_strtod_l+0x930>)
 800ba78:	2001      	movs	r0, #1
 800ba7a:	468c      	mov	ip, r1
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	9110      	str	r1, [sp, #64]	; 0x40
 800ba82:	9014      	str	r0, [sp, #80]	; 0x50
 800ba84:	4563      	cmp	r3, ip
 800ba86:	da07      	bge.n	800ba98 <_strtod_l+0x738>
 800ba88:	4661      	mov	r1, ip
 800ba8a:	1ac9      	subs	r1, r1, r3
 800ba8c:	1a52      	subs	r2, r2, r1
 800ba8e:	291f      	cmp	r1, #31
 800ba90:	dd00      	ble.n	800ba94 <_strtod_l+0x734>
 800ba92:	e0b8      	b.n	800bc06 <_strtod_l+0x8a6>
 800ba94:	4088      	lsls	r0, r1
 800ba96:	9014      	str	r0, [sp, #80]	; 0x50
 800ba98:	18ab      	adds	r3, r5, r2
 800ba9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ba9c:	18a4      	adds	r4, r4, r2
 800ba9e:	9b08      	ldr	r3, [sp, #32]
 800baa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800baa2:	191c      	adds	r4, r3, r4
 800baa4:	002b      	movs	r3, r5
 800baa6:	4295      	cmp	r5, r2
 800baa8:	dd00      	ble.n	800baac <_strtod_l+0x74c>
 800baaa:	0013      	movs	r3, r2
 800baac:	42a3      	cmp	r3, r4
 800baae:	dd00      	ble.n	800bab2 <_strtod_l+0x752>
 800bab0:	0023      	movs	r3, r4
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	dd04      	ble.n	800bac0 <_strtod_l+0x760>
 800bab6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bab8:	1ae4      	subs	r4, r4, r3
 800baba:	1ad2      	subs	r2, r2, r3
 800babc:	920c      	str	r2, [sp, #48]	; 0x30
 800babe:	1aed      	subs	r5, r5, r3
 800bac0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	dd17      	ble.n	800baf6 <_strtod_l+0x796>
 800bac6:	001a      	movs	r2, r3
 800bac8:	9907      	ldr	r1, [sp, #28]
 800baca:	9805      	ldr	r0, [sp, #20]
 800bacc:	f001 fff0 	bl	800dab0 <__pow5mult>
 800bad0:	9007      	str	r0, [sp, #28]
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d100      	bne.n	800bad8 <_strtod_l+0x778>
 800bad6:	e6ad      	b.n	800b834 <_strtod_l+0x4d4>
 800bad8:	0001      	movs	r1, r0
 800bada:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800badc:	9805      	ldr	r0, [sp, #20]
 800bade:	f001 ff37 	bl	800d950 <__multiply>
 800bae2:	900f      	str	r0, [sp, #60]	; 0x3c
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d100      	bne.n	800baea <_strtod_l+0x78a>
 800bae8:	e6a4      	b.n	800b834 <_strtod_l+0x4d4>
 800baea:	9920      	ldr	r1, [sp, #128]	; 0x80
 800baec:	9805      	ldr	r0, [sp, #20]
 800baee:	f001 fe1d 	bl	800d72c <_Bfree>
 800baf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baf4:	9320      	str	r3, [sp, #128]	; 0x80
 800baf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	dd00      	ble.n	800bafe <_strtod_l+0x79e>
 800bafc:	e089      	b.n	800bc12 <_strtod_l+0x8b2>
 800bafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	dd08      	ble.n	800bb16 <_strtod_l+0x7b6>
 800bb04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bb06:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb08:	9805      	ldr	r0, [sp, #20]
 800bb0a:	f001 ffd1 	bl	800dab0 <__pow5mult>
 800bb0e:	9009      	str	r0, [sp, #36]	; 0x24
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d100      	bne.n	800bb16 <_strtod_l+0x7b6>
 800bb14:	e68e      	b.n	800b834 <_strtod_l+0x4d4>
 800bb16:	2c00      	cmp	r4, #0
 800bb18:	dd08      	ble.n	800bb2c <_strtod_l+0x7cc>
 800bb1a:	0022      	movs	r2, r4
 800bb1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb1e:	9805      	ldr	r0, [sp, #20]
 800bb20:	f002 f822 	bl	800db68 <__lshift>
 800bb24:	9009      	str	r0, [sp, #36]	; 0x24
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d100      	bne.n	800bb2c <_strtod_l+0x7cc>
 800bb2a:	e683      	b.n	800b834 <_strtod_l+0x4d4>
 800bb2c:	2d00      	cmp	r5, #0
 800bb2e:	dd08      	ble.n	800bb42 <_strtod_l+0x7e2>
 800bb30:	002a      	movs	r2, r5
 800bb32:	9907      	ldr	r1, [sp, #28]
 800bb34:	9805      	ldr	r0, [sp, #20]
 800bb36:	f002 f817 	bl	800db68 <__lshift>
 800bb3a:	9007      	str	r0, [sp, #28]
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d100      	bne.n	800bb42 <_strtod_l+0x7e2>
 800bb40:	e678      	b.n	800b834 <_strtod_l+0x4d4>
 800bb42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb44:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bb46:	9805      	ldr	r0, [sp, #20]
 800bb48:	f002 f898 	bl	800dc7c <__mdiff>
 800bb4c:	9006      	str	r0, [sp, #24]
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d100      	bne.n	800bb54 <_strtod_l+0x7f4>
 800bb52:	e66f      	b.n	800b834 <_strtod_l+0x4d4>
 800bb54:	2200      	movs	r2, #0
 800bb56:	68c3      	ldr	r3, [r0, #12]
 800bb58:	9907      	ldr	r1, [sp, #28]
 800bb5a:	60c2      	str	r2, [r0, #12]
 800bb5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb5e:	f002 f871 	bl	800dc44 <__mcmp>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	da5f      	bge.n	800bc26 <_strtod_l+0x8c6>
 800bb66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb68:	4333      	orrs	r3, r6
 800bb6a:	d000      	beq.n	800bb6e <_strtod_l+0x80e>
 800bb6c:	e08a      	b.n	800bc84 <_strtod_l+0x924>
 800bb6e:	033b      	lsls	r3, r7, #12
 800bb70:	d000      	beq.n	800bb74 <_strtod_l+0x814>
 800bb72:	e087      	b.n	800bc84 <_strtod_l+0x924>
 800bb74:	22d6      	movs	r2, #214	; 0xd6
 800bb76:	4b47      	ldr	r3, [pc, #284]	; (800bc94 <_strtod_l+0x934>)
 800bb78:	04d2      	lsls	r2, r2, #19
 800bb7a:	403b      	ands	r3, r7
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d800      	bhi.n	800bb82 <_strtod_l+0x822>
 800bb80:	e080      	b.n	800bc84 <_strtod_l+0x924>
 800bb82:	9b06      	ldr	r3, [sp, #24]
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	930a      	str	r3, [sp, #40]	; 0x28
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d104      	bne.n	800bb96 <_strtod_l+0x836>
 800bb8c:	9b06      	ldr	r3, [sp, #24]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	930a      	str	r3, [sp, #40]	; 0x28
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	dd76      	ble.n	800bc84 <_strtod_l+0x924>
 800bb96:	9906      	ldr	r1, [sp, #24]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	9805      	ldr	r0, [sp, #20]
 800bb9c:	f001 ffe4 	bl	800db68 <__lshift>
 800bba0:	9907      	ldr	r1, [sp, #28]
 800bba2:	9006      	str	r0, [sp, #24]
 800bba4:	f002 f84e 	bl	800dc44 <__mcmp>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	dd6b      	ble.n	800bc84 <_strtod_l+0x924>
 800bbac:	9908      	ldr	r1, [sp, #32]
 800bbae:	003b      	movs	r3, r7
 800bbb0:	4a38      	ldr	r2, [pc, #224]	; (800bc94 <_strtod_l+0x934>)
 800bbb2:	2900      	cmp	r1, #0
 800bbb4:	d100      	bne.n	800bbb8 <_strtod_l+0x858>
 800bbb6:	e092      	b.n	800bcde <_strtod_l+0x97e>
 800bbb8:	0011      	movs	r1, r2
 800bbba:	20d6      	movs	r0, #214	; 0xd6
 800bbbc:	4039      	ands	r1, r7
 800bbbe:	04c0      	lsls	r0, r0, #19
 800bbc0:	4281      	cmp	r1, r0
 800bbc2:	dd00      	ble.n	800bbc6 <_strtod_l+0x866>
 800bbc4:	e08b      	b.n	800bcde <_strtod_l+0x97e>
 800bbc6:	23dc      	movs	r3, #220	; 0xdc
 800bbc8:	049b      	lsls	r3, r3, #18
 800bbca:	4299      	cmp	r1, r3
 800bbcc:	dc00      	bgt.n	800bbd0 <_strtod_l+0x870>
 800bbce:	e6a4      	b.n	800b91a <_strtod_l+0x5ba>
 800bbd0:	0030      	movs	r0, r6
 800bbd2:	0039      	movs	r1, r7
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4b30      	ldr	r3, [pc, #192]	; (800bc98 <_strtod_l+0x938>)
 800bbd8:	f7f6 fc2c 	bl	8002434 <__aeabi_dmul>
 800bbdc:	0006      	movs	r6, r0
 800bbde:	000f      	movs	r7, r1
 800bbe0:	4308      	orrs	r0, r1
 800bbe2:	d000      	beq.n	800bbe6 <_strtod_l+0x886>
 800bbe4:	e62f      	b.n	800b846 <_strtod_l+0x4e6>
 800bbe6:	2322      	movs	r3, #34	; 0x22
 800bbe8:	9a05      	ldr	r2, [sp, #20]
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	e62b      	b.n	800b846 <_strtod_l+0x4e6>
 800bbee:	234b      	movs	r3, #75	; 0x4b
 800bbf0:	1a9a      	subs	r2, r3, r2
 800bbf2:	3b4c      	subs	r3, #76	; 0x4c
 800bbf4:	4093      	lsls	r3, r2
 800bbf6:	4019      	ands	r1, r3
 800bbf8:	000f      	movs	r7, r1
 800bbfa:	e6e0      	b.n	800b9be <_strtod_l+0x65e>
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	4252      	negs	r2, r2
 800bc00:	409a      	lsls	r2, r3
 800bc02:	4016      	ands	r6, r2
 800bc04:	e6db      	b.n	800b9be <_strtod_l+0x65e>
 800bc06:	4925      	ldr	r1, [pc, #148]	; (800bc9c <_strtod_l+0x93c>)
 800bc08:	1acb      	subs	r3, r1, r3
 800bc0a:	0001      	movs	r1, r0
 800bc0c:	4099      	lsls	r1, r3
 800bc0e:	9110      	str	r1, [sp, #64]	; 0x40
 800bc10:	e741      	b.n	800ba96 <_strtod_l+0x736>
 800bc12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc14:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bc16:	9805      	ldr	r0, [sp, #20]
 800bc18:	f001 ffa6 	bl	800db68 <__lshift>
 800bc1c:	9020      	str	r0, [sp, #128]	; 0x80
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d000      	beq.n	800bc24 <_strtod_l+0x8c4>
 800bc22:	e76c      	b.n	800bafe <_strtod_l+0x79e>
 800bc24:	e606      	b.n	800b834 <_strtod_l+0x4d4>
 800bc26:	970c      	str	r7, [sp, #48]	; 0x30
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d176      	bne.n	800bd1a <_strtod_l+0x9ba>
 800bc2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc2e:	033b      	lsls	r3, r7, #12
 800bc30:	0b1b      	lsrs	r3, r3, #12
 800bc32:	2a00      	cmp	r2, #0
 800bc34:	d038      	beq.n	800bca8 <_strtod_l+0x948>
 800bc36:	4a1a      	ldr	r2, [pc, #104]	; (800bca0 <_strtod_l+0x940>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d138      	bne.n	800bcae <_strtod_l+0x94e>
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	9b08      	ldr	r3, [sp, #32]
 800bc40:	4252      	negs	r2, r2
 800bc42:	0031      	movs	r1, r6
 800bc44:	0010      	movs	r0, r2
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00b      	beq.n	800bc62 <_strtod_l+0x902>
 800bc4a:	24d4      	movs	r4, #212	; 0xd4
 800bc4c:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <_strtod_l+0x934>)
 800bc4e:	0010      	movs	r0, r2
 800bc50:	403b      	ands	r3, r7
 800bc52:	04e4      	lsls	r4, r4, #19
 800bc54:	42a3      	cmp	r3, r4
 800bc56:	d804      	bhi.n	800bc62 <_strtod_l+0x902>
 800bc58:	306c      	adds	r0, #108	; 0x6c
 800bc5a:	0d1b      	lsrs	r3, r3, #20
 800bc5c:	1ac3      	subs	r3, r0, r3
 800bc5e:	409a      	lsls	r2, r3
 800bc60:	0010      	movs	r0, r2
 800bc62:	4281      	cmp	r1, r0
 800bc64:	d123      	bne.n	800bcae <_strtod_l+0x94e>
 800bc66:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <_strtod_l+0x944>)
 800bc68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d102      	bne.n	800bc74 <_strtod_l+0x914>
 800bc6e:	1c4b      	adds	r3, r1, #1
 800bc70:	d100      	bne.n	800bc74 <_strtod_l+0x914>
 800bc72:	e5df      	b.n	800b834 <_strtod_l+0x4d4>
 800bc74:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <_strtod_l+0x934>)
 800bc76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc78:	2600      	movs	r6, #0
 800bc7a:	401a      	ands	r2, r3
 800bc7c:	0013      	movs	r3, r2
 800bc7e:	2280      	movs	r2, #128	; 0x80
 800bc80:	0352      	lsls	r2, r2, #13
 800bc82:	189f      	adds	r7, r3, r2
 800bc84:	9b08      	ldr	r3, [sp, #32]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1a2      	bne.n	800bbd0 <_strtod_l+0x870>
 800bc8a:	e5dc      	b.n	800b846 <_strtod_l+0x4e6>
 800bc8c:	0800f210 	.word	0x0800f210
 800bc90:	fffffc02 	.word	0xfffffc02
 800bc94:	7ff00000 	.word	0x7ff00000
 800bc98:	39500000 	.word	0x39500000
 800bc9c:	fffffbe2 	.word	0xfffffbe2
 800bca0:	000fffff 	.word	0x000fffff
 800bca4:	7fefffff 	.word	0x7fefffff
 800bca8:	4333      	orrs	r3, r6
 800bcaa:	d100      	bne.n	800bcae <_strtod_l+0x94e>
 800bcac:	e77e      	b.n	800bbac <_strtod_l+0x84c>
 800bcae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01d      	beq.n	800bcf0 <_strtod_l+0x990>
 800bcb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcb8:	4213      	tst	r3, r2
 800bcba:	d0e3      	beq.n	800bc84 <_strtod_l+0x924>
 800bcbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcbe:	0030      	movs	r0, r6
 800bcc0:	0039      	movs	r1, r7
 800bcc2:	9a08      	ldr	r2, [sp, #32]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d017      	beq.n	800bcf8 <_strtod_l+0x998>
 800bcc8:	f7ff fb32 	bl	800b330 <sulp>
 800bccc:	0002      	movs	r2, r0
 800bcce:	000b      	movs	r3, r1
 800bcd0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bcd2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bcd4:	f7f5 fc70 	bl	80015b8 <__aeabi_dadd>
 800bcd8:	0006      	movs	r6, r0
 800bcda:	000f      	movs	r7, r1
 800bcdc:	e7d2      	b.n	800bc84 <_strtod_l+0x924>
 800bcde:	2601      	movs	r6, #1
 800bce0:	4013      	ands	r3, r2
 800bce2:	4a99      	ldr	r2, [pc, #612]	; (800bf48 <_strtod_l+0xbe8>)
 800bce4:	4276      	negs	r6, r6
 800bce6:	189b      	adds	r3, r3, r2
 800bce8:	4a98      	ldr	r2, [pc, #608]	; (800bf4c <_strtod_l+0xbec>)
 800bcea:	431a      	orrs	r2, r3
 800bcec:	0017      	movs	r7, r2
 800bcee:	e7c9      	b.n	800bc84 <_strtod_l+0x924>
 800bcf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcf2:	4233      	tst	r3, r6
 800bcf4:	d0c6      	beq.n	800bc84 <_strtod_l+0x924>
 800bcf6:	e7e1      	b.n	800bcbc <_strtod_l+0x95c>
 800bcf8:	f7ff fb1a 	bl	800b330 <sulp>
 800bcfc:	0002      	movs	r2, r0
 800bcfe:	000b      	movs	r3, r1
 800bd00:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bd02:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bd04:	f7f6 fe02 	bl	800290c <__aeabi_dsub>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	0006      	movs	r6, r0
 800bd0e:	000f      	movs	r7, r1
 800bd10:	f7f4 fba4 	bl	800045c <__aeabi_dcmpeq>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d0b5      	beq.n	800bc84 <_strtod_l+0x924>
 800bd18:	e5ff      	b.n	800b91a <_strtod_l+0x5ba>
 800bd1a:	9907      	ldr	r1, [sp, #28]
 800bd1c:	9806      	ldr	r0, [sp, #24]
 800bd1e:	f002 f91d 	bl	800df5c <__ratio>
 800bd22:	2380      	movs	r3, #128	; 0x80
 800bd24:	2200      	movs	r2, #0
 800bd26:	05db      	lsls	r3, r3, #23
 800bd28:	0004      	movs	r4, r0
 800bd2a:	000d      	movs	r5, r1
 800bd2c:	f7f4 fba6 	bl	800047c <__aeabi_dcmple>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d075      	beq.n	800be20 <_strtod_l+0xac0>
 800bd34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d047      	beq.n	800bdca <_strtod_l+0xa6a>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	4c84      	ldr	r4, [pc, #528]	; (800bf50 <_strtod_l+0xbf0>)
 800bd3e:	2500      	movs	r5, #0
 800bd40:	9310      	str	r3, [sp, #64]	; 0x40
 800bd42:	9411      	str	r4, [sp, #68]	; 0x44
 800bd44:	4c82      	ldr	r4, [pc, #520]	; (800bf50 <_strtod_l+0xbf0>)
 800bd46:	4a83      	ldr	r2, [pc, #524]	; (800bf54 <_strtod_l+0xbf4>)
 800bd48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd4a:	4013      	ands	r3, r2
 800bd4c:	9314      	str	r3, [sp, #80]	; 0x50
 800bd4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd50:	4b81      	ldr	r3, [pc, #516]	; (800bf58 <_strtod_l+0xbf8>)
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d000      	beq.n	800bd58 <_strtod_l+0x9f8>
 800bd56:	e0ac      	b.n	800beb2 <_strtod_l+0xb52>
 800bd58:	4a80      	ldr	r2, [pc, #512]	; (800bf5c <_strtod_l+0xbfc>)
 800bd5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd5c:	4694      	mov	ip, r2
 800bd5e:	4463      	add	r3, ip
 800bd60:	001f      	movs	r7, r3
 800bd62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd66:	0030      	movs	r0, r6
 800bd68:	0039      	movs	r1, r7
 800bd6a:	920c      	str	r2, [sp, #48]	; 0x30
 800bd6c:	930d      	str	r3, [sp, #52]	; 0x34
 800bd6e:	f002 f81d 	bl	800ddac <__ulp>
 800bd72:	0002      	movs	r2, r0
 800bd74:	000b      	movs	r3, r1
 800bd76:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bd78:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bd7a:	f7f6 fb5b 	bl	8002434 <__aeabi_dmul>
 800bd7e:	0032      	movs	r2, r6
 800bd80:	003b      	movs	r3, r7
 800bd82:	f7f5 fc19 	bl	80015b8 <__aeabi_dadd>
 800bd86:	4a73      	ldr	r2, [pc, #460]	; (800bf54 <_strtod_l+0xbf4>)
 800bd88:	4b75      	ldr	r3, [pc, #468]	; (800bf60 <_strtod_l+0xc00>)
 800bd8a:	0006      	movs	r6, r0
 800bd8c:	400a      	ands	r2, r1
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d95e      	bls.n	800be50 <_strtod_l+0xaf0>
 800bd92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd94:	4b73      	ldr	r3, [pc, #460]	; (800bf64 <_strtod_l+0xc04>)
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d103      	bne.n	800bda2 <_strtod_l+0xa42>
 800bd9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	d100      	bne.n	800bda2 <_strtod_l+0xa42>
 800bda0:	e548      	b.n	800b834 <_strtod_l+0x4d4>
 800bda2:	2601      	movs	r6, #1
 800bda4:	4f6f      	ldr	r7, [pc, #444]	; (800bf64 <_strtod_l+0xc04>)
 800bda6:	4276      	negs	r6, r6
 800bda8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bdaa:	9805      	ldr	r0, [sp, #20]
 800bdac:	f001 fcbe 	bl	800d72c <_Bfree>
 800bdb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdb2:	9805      	ldr	r0, [sp, #20]
 800bdb4:	f001 fcba 	bl	800d72c <_Bfree>
 800bdb8:	9907      	ldr	r1, [sp, #28]
 800bdba:	9805      	ldr	r0, [sp, #20]
 800bdbc:	f001 fcb6 	bl	800d72c <_Bfree>
 800bdc0:	9906      	ldr	r1, [sp, #24]
 800bdc2:	9805      	ldr	r0, [sp, #20]
 800bdc4:	f001 fcb2 	bl	800d72c <_Bfree>
 800bdc8:	e61d      	b.n	800ba06 <_strtod_l+0x6a6>
 800bdca:	2e00      	cmp	r6, #0
 800bdcc:	d11c      	bne.n	800be08 <_strtod_l+0xaa8>
 800bdce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdd0:	031b      	lsls	r3, r3, #12
 800bdd2:	d11f      	bne.n	800be14 <_strtod_l+0xab4>
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	0020      	movs	r0, r4
 800bdd8:	0029      	movs	r1, r5
 800bdda:	4b5d      	ldr	r3, [pc, #372]	; (800bf50 <_strtod_l+0xbf0>)
 800bddc:	f7f4 fb44 	bl	8000468 <__aeabi_dcmplt>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d11a      	bne.n	800be1a <_strtod_l+0xaba>
 800bde4:	0020      	movs	r0, r4
 800bde6:	0029      	movs	r1, r5
 800bde8:	2200      	movs	r2, #0
 800bdea:	4b5f      	ldr	r3, [pc, #380]	; (800bf68 <_strtod_l+0xc08>)
 800bdec:	f7f6 fb22 	bl	8002434 <__aeabi_dmul>
 800bdf0:	0005      	movs	r5, r0
 800bdf2:	000c      	movs	r4, r1
 800bdf4:	2380      	movs	r3, #128	; 0x80
 800bdf6:	061b      	lsls	r3, r3, #24
 800bdf8:	18e3      	adds	r3, r4, r3
 800bdfa:	951c      	str	r5, [sp, #112]	; 0x70
 800bdfc:	931d      	str	r3, [sp, #116]	; 0x74
 800bdfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800be00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be02:	9210      	str	r2, [sp, #64]	; 0x40
 800be04:	9311      	str	r3, [sp, #68]	; 0x44
 800be06:	e79e      	b.n	800bd46 <_strtod_l+0x9e6>
 800be08:	2e01      	cmp	r6, #1
 800be0a:	d103      	bne.n	800be14 <_strtod_l+0xab4>
 800be0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d100      	bne.n	800be14 <_strtod_l+0xab4>
 800be12:	e582      	b.n	800b91a <_strtod_l+0x5ba>
 800be14:	2300      	movs	r3, #0
 800be16:	4c55      	ldr	r4, [pc, #340]	; (800bf6c <_strtod_l+0xc0c>)
 800be18:	e791      	b.n	800bd3e <_strtod_l+0x9de>
 800be1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be1c:	4c52      	ldr	r4, [pc, #328]	; (800bf68 <_strtod_l+0xc08>)
 800be1e:	e7e9      	b.n	800bdf4 <_strtod_l+0xa94>
 800be20:	2200      	movs	r2, #0
 800be22:	0020      	movs	r0, r4
 800be24:	0029      	movs	r1, r5
 800be26:	4b50      	ldr	r3, [pc, #320]	; (800bf68 <_strtod_l+0xc08>)
 800be28:	f7f6 fb04 	bl	8002434 <__aeabi_dmul>
 800be2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be2e:	0005      	movs	r5, r0
 800be30:	000b      	movs	r3, r1
 800be32:	000c      	movs	r4, r1
 800be34:	2a00      	cmp	r2, #0
 800be36:	d107      	bne.n	800be48 <_strtod_l+0xae8>
 800be38:	2280      	movs	r2, #128	; 0x80
 800be3a:	0612      	lsls	r2, r2, #24
 800be3c:	188b      	adds	r3, r1, r2
 800be3e:	9016      	str	r0, [sp, #88]	; 0x58
 800be40:	9317      	str	r3, [sp, #92]	; 0x5c
 800be42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be46:	e7dc      	b.n	800be02 <_strtod_l+0xaa2>
 800be48:	0002      	movs	r2, r0
 800be4a:	9216      	str	r2, [sp, #88]	; 0x58
 800be4c:	9317      	str	r3, [sp, #92]	; 0x5c
 800be4e:	e7f8      	b.n	800be42 <_strtod_l+0xae2>
 800be50:	23d4      	movs	r3, #212	; 0xd4
 800be52:	049b      	lsls	r3, r3, #18
 800be54:	18cf      	adds	r7, r1, r3
 800be56:	9b08      	ldr	r3, [sp, #32]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1a5      	bne.n	800bda8 <_strtod_l+0xa48>
 800be5c:	4b3d      	ldr	r3, [pc, #244]	; (800bf54 <_strtod_l+0xbf4>)
 800be5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be60:	403b      	ands	r3, r7
 800be62:	429a      	cmp	r2, r3
 800be64:	d1a0      	bne.n	800bda8 <_strtod_l+0xa48>
 800be66:	0028      	movs	r0, r5
 800be68:	0021      	movs	r1, r4
 800be6a:	f7f4 fb9d 	bl	80005a8 <__aeabi_d2lz>
 800be6e:	f7f4 fbd7 	bl	8000620 <__aeabi_l2d>
 800be72:	0002      	movs	r2, r0
 800be74:	000b      	movs	r3, r1
 800be76:	0028      	movs	r0, r5
 800be78:	0021      	movs	r1, r4
 800be7a:	f7f6 fd47 	bl	800290c <__aeabi_dsub>
 800be7e:	033b      	lsls	r3, r7, #12
 800be80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be82:	0b1b      	lsrs	r3, r3, #12
 800be84:	4333      	orrs	r3, r6
 800be86:	4313      	orrs	r3, r2
 800be88:	0004      	movs	r4, r0
 800be8a:	000d      	movs	r5, r1
 800be8c:	4a38      	ldr	r2, [pc, #224]	; (800bf70 <_strtod_l+0xc10>)
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d055      	beq.n	800bf3e <_strtod_l+0xbde>
 800be92:	4b38      	ldr	r3, [pc, #224]	; (800bf74 <_strtod_l+0xc14>)
 800be94:	f7f4 fae8 	bl	8000468 <__aeabi_dcmplt>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d000      	beq.n	800be9e <_strtod_l+0xb3e>
 800be9c:	e4d3      	b.n	800b846 <_strtod_l+0x4e6>
 800be9e:	0020      	movs	r0, r4
 800bea0:	0029      	movs	r1, r5
 800bea2:	4a35      	ldr	r2, [pc, #212]	; (800bf78 <_strtod_l+0xc18>)
 800bea4:	4b30      	ldr	r3, [pc, #192]	; (800bf68 <_strtod_l+0xc08>)
 800bea6:	f7f4 faf3 	bl	8000490 <__aeabi_dcmpgt>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d100      	bne.n	800beb0 <_strtod_l+0xb50>
 800beae:	e77b      	b.n	800bda8 <_strtod_l+0xa48>
 800beb0:	e4c9      	b.n	800b846 <_strtod_l+0x4e6>
 800beb2:	9b08      	ldr	r3, [sp, #32]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d02b      	beq.n	800bf10 <_strtod_l+0xbb0>
 800beb8:	23d4      	movs	r3, #212	; 0xd4
 800beba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bebc:	04db      	lsls	r3, r3, #19
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d826      	bhi.n	800bf10 <_strtod_l+0xbb0>
 800bec2:	0028      	movs	r0, r5
 800bec4:	0021      	movs	r1, r4
 800bec6:	4a2d      	ldr	r2, [pc, #180]	; (800bf7c <_strtod_l+0xc1c>)
 800bec8:	4b2d      	ldr	r3, [pc, #180]	; (800bf80 <_strtod_l+0xc20>)
 800beca:	f7f4 fad7 	bl	800047c <__aeabi_dcmple>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d017      	beq.n	800bf02 <_strtod_l+0xba2>
 800bed2:	0028      	movs	r0, r5
 800bed4:	0021      	movs	r1, r4
 800bed6:	f7f4 fb49 	bl	800056c <__aeabi_d2uiz>
 800beda:	2800      	cmp	r0, #0
 800bedc:	d100      	bne.n	800bee0 <_strtod_l+0xb80>
 800bede:	3001      	adds	r0, #1
 800bee0:	f7f7 f92a 	bl	8003138 <__aeabi_ui2d>
 800bee4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bee6:	0005      	movs	r5, r0
 800bee8:	000b      	movs	r3, r1
 800beea:	000c      	movs	r4, r1
 800beec:	2a00      	cmp	r2, #0
 800beee:	d122      	bne.n	800bf36 <_strtod_l+0xbd6>
 800bef0:	2280      	movs	r2, #128	; 0x80
 800bef2:	0612      	lsls	r2, r2, #24
 800bef4:	188b      	adds	r3, r1, r2
 800bef6:	9018      	str	r0, [sp, #96]	; 0x60
 800bef8:	9319      	str	r3, [sp, #100]	; 0x64
 800befa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800befc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800befe:	9210      	str	r2, [sp, #64]	; 0x40
 800bf00:	9311      	str	r3, [sp, #68]	; 0x44
 800bf02:	22d6      	movs	r2, #214	; 0xd6
 800bf04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf06:	04d2      	lsls	r2, r2, #19
 800bf08:	189b      	adds	r3, r3, r2
 800bf0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf0c:	1a9b      	subs	r3, r3, r2
 800bf0e:	9311      	str	r3, [sp, #68]	; 0x44
 800bf10:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bf12:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bf14:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800bf16:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800bf18:	f001 ff48 	bl	800ddac <__ulp>
 800bf1c:	0002      	movs	r2, r0
 800bf1e:	000b      	movs	r3, r1
 800bf20:	0030      	movs	r0, r6
 800bf22:	0039      	movs	r1, r7
 800bf24:	f7f6 fa86 	bl	8002434 <__aeabi_dmul>
 800bf28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf2c:	f7f5 fb44 	bl	80015b8 <__aeabi_dadd>
 800bf30:	0006      	movs	r6, r0
 800bf32:	000f      	movs	r7, r1
 800bf34:	e78f      	b.n	800be56 <_strtod_l+0xaf6>
 800bf36:	0002      	movs	r2, r0
 800bf38:	9218      	str	r2, [sp, #96]	; 0x60
 800bf3a:	9319      	str	r3, [sp, #100]	; 0x64
 800bf3c:	e7dd      	b.n	800befa <_strtod_l+0xb9a>
 800bf3e:	4b11      	ldr	r3, [pc, #68]	; (800bf84 <_strtod_l+0xc24>)
 800bf40:	f7f4 fa92 	bl	8000468 <__aeabi_dcmplt>
 800bf44:	e7b1      	b.n	800beaa <_strtod_l+0xb4a>
 800bf46:	46c0      	nop			; (mov r8, r8)
 800bf48:	fff00000 	.word	0xfff00000
 800bf4c:	000fffff 	.word	0x000fffff
 800bf50:	3ff00000 	.word	0x3ff00000
 800bf54:	7ff00000 	.word	0x7ff00000
 800bf58:	7fe00000 	.word	0x7fe00000
 800bf5c:	fcb00000 	.word	0xfcb00000
 800bf60:	7c9fffff 	.word	0x7c9fffff
 800bf64:	7fefffff 	.word	0x7fefffff
 800bf68:	3fe00000 	.word	0x3fe00000
 800bf6c:	bff00000 	.word	0xbff00000
 800bf70:	94a03595 	.word	0x94a03595
 800bf74:	3fdfffff 	.word	0x3fdfffff
 800bf78:	35afe535 	.word	0x35afe535
 800bf7c:	ffc00000 	.word	0xffc00000
 800bf80:	41dfffff 	.word	0x41dfffff
 800bf84:	3fcfffff 	.word	0x3fcfffff

0800bf88 <_strtod_r>:
 800bf88:	b510      	push	{r4, lr}
 800bf8a:	4b02      	ldr	r3, [pc, #8]	; (800bf94 <_strtod_r+0xc>)
 800bf8c:	f7ff f9e8 	bl	800b360 <_strtod_l>
 800bf90:	bd10      	pop	{r4, pc}
 800bf92:	46c0      	nop			; (mov r8, r8)
 800bf94:	20000074 	.word	0x20000074

0800bf98 <strtod>:
 800bf98:	b510      	push	{r4, lr}
 800bf9a:	000a      	movs	r2, r1
 800bf9c:	0001      	movs	r1, r0
 800bf9e:	4803      	ldr	r0, [pc, #12]	; (800bfac <strtod+0x14>)
 800bfa0:	4b03      	ldr	r3, [pc, #12]	; (800bfb0 <strtod+0x18>)
 800bfa2:	6800      	ldr	r0, [r0, #0]
 800bfa4:	f7ff f9dc 	bl	800b360 <_strtod_l>
 800bfa8:	bd10      	pop	{r4, pc}
 800bfaa:	46c0      	nop			; (mov r8, r8)
 800bfac:	2000000c 	.word	0x2000000c
 800bfb0:	20000074 	.word	0x20000074

0800bfb4 <strtok>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	4b16      	ldr	r3, [pc, #88]	; (800c010 <strtok+0x5c>)
 800bfb8:	0005      	movs	r5, r0
 800bfba:	681f      	ldr	r7, [r3, #0]
 800bfbc:	000e      	movs	r6, r1
 800bfbe:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800bfc0:	2c00      	cmp	r4, #0
 800bfc2:	d11d      	bne.n	800c000 <strtok+0x4c>
 800bfc4:	2050      	movs	r0, #80	; 0x50
 800bfc6:	f7fe fa13 	bl	800a3f0 <malloc>
 800bfca:	1e02      	subs	r2, r0, #0
 800bfcc:	65b8      	str	r0, [r7, #88]	; 0x58
 800bfce:	d104      	bne.n	800bfda <strtok+0x26>
 800bfd0:	2157      	movs	r1, #87	; 0x57
 800bfd2:	4b10      	ldr	r3, [pc, #64]	; (800c014 <strtok+0x60>)
 800bfd4:	4810      	ldr	r0, [pc, #64]	; (800c018 <strtok+0x64>)
 800bfd6:	f000 f8e3 	bl	800c1a0 <__assert_func>
 800bfda:	6004      	str	r4, [r0, #0]
 800bfdc:	6044      	str	r4, [r0, #4]
 800bfde:	6084      	str	r4, [r0, #8]
 800bfe0:	60c4      	str	r4, [r0, #12]
 800bfe2:	6104      	str	r4, [r0, #16]
 800bfe4:	6144      	str	r4, [r0, #20]
 800bfe6:	6184      	str	r4, [r0, #24]
 800bfe8:	6284      	str	r4, [r0, #40]	; 0x28
 800bfea:	62c4      	str	r4, [r0, #44]	; 0x2c
 800bfec:	6304      	str	r4, [r0, #48]	; 0x30
 800bfee:	6344      	str	r4, [r0, #52]	; 0x34
 800bff0:	6384      	str	r4, [r0, #56]	; 0x38
 800bff2:	63c4      	str	r4, [r0, #60]	; 0x3c
 800bff4:	6404      	str	r4, [r0, #64]	; 0x40
 800bff6:	6444      	str	r4, [r0, #68]	; 0x44
 800bff8:	6484      	str	r4, [r0, #72]	; 0x48
 800bffa:	64c4      	str	r4, [r0, #76]	; 0x4c
 800bffc:	7704      	strb	r4, [r0, #28]
 800bffe:	6244      	str	r4, [r0, #36]	; 0x24
 800c000:	0031      	movs	r1, r6
 800c002:	0028      	movs	r0, r5
 800c004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c006:	2301      	movs	r3, #1
 800c008:	f000 f808 	bl	800c01c <__strtok_r>
 800c00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	2000000c 	.word	0x2000000c
 800c014:	0800f238 	.word	0x0800f238
 800c018:	0800f24f 	.word	0x0800f24f

0800c01c <__strtok_r>:
 800c01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c01e:	2800      	cmp	r0, #0
 800c020:	d102      	bne.n	800c028 <__strtok_r+0xc>
 800c022:	6810      	ldr	r0, [r2, #0]
 800c024:	2800      	cmp	r0, #0
 800c026:	d013      	beq.n	800c050 <__strtok_r+0x34>
 800c028:	0004      	movs	r4, r0
 800c02a:	0020      	movs	r0, r4
 800c02c:	000e      	movs	r6, r1
 800c02e:	7805      	ldrb	r5, [r0, #0]
 800c030:	3401      	adds	r4, #1
 800c032:	7837      	ldrb	r7, [r6, #0]
 800c034:	2f00      	cmp	r7, #0
 800c036:	d104      	bne.n	800c042 <__strtok_r+0x26>
 800c038:	2d00      	cmp	r5, #0
 800c03a:	d10f      	bne.n	800c05c <__strtok_r+0x40>
 800c03c:	0028      	movs	r0, r5
 800c03e:	6015      	str	r5, [r2, #0]
 800c040:	e006      	b.n	800c050 <__strtok_r+0x34>
 800c042:	3601      	adds	r6, #1
 800c044:	42bd      	cmp	r5, r7
 800c046:	d1f4      	bne.n	800c032 <__strtok_r+0x16>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1ee      	bne.n	800c02a <__strtok_r+0xe>
 800c04c:	6014      	str	r4, [r2, #0]
 800c04e:	7003      	strb	r3, [r0, #0]
 800c050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c052:	002f      	movs	r7, r5
 800c054:	e00f      	b.n	800c076 <__strtok_r+0x5a>
 800c056:	3301      	adds	r3, #1
 800c058:	2e00      	cmp	r6, #0
 800c05a:	d104      	bne.n	800c066 <__strtok_r+0x4a>
 800c05c:	0023      	movs	r3, r4
 800c05e:	3401      	adds	r4, #1
 800c060:	781d      	ldrb	r5, [r3, #0]
 800c062:	0027      	movs	r7, r4
 800c064:	000b      	movs	r3, r1
 800c066:	781e      	ldrb	r6, [r3, #0]
 800c068:	42b5      	cmp	r5, r6
 800c06a:	d1f4      	bne.n	800c056 <__strtok_r+0x3a>
 800c06c:	2d00      	cmp	r5, #0
 800c06e:	d0f0      	beq.n	800c052 <__strtok_r+0x36>
 800c070:	2300      	movs	r3, #0
 800c072:	3c01      	subs	r4, #1
 800c074:	7023      	strb	r3, [r4, #0]
 800c076:	6017      	str	r7, [r2, #0]
 800c078:	e7ea      	b.n	800c050 <__strtok_r+0x34>
	...

0800c07c <_strtol_l.constprop.0>:
 800c07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c07e:	b087      	sub	sp, #28
 800c080:	001e      	movs	r6, r3
 800c082:	9005      	str	r0, [sp, #20]
 800c084:	9101      	str	r1, [sp, #4]
 800c086:	9202      	str	r2, [sp, #8]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d045      	beq.n	800c118 <_strtol_l.constprop.0+0x9c>
 800c08c:	000b      	movs	r3, r1
 800c08e:	2e24      	cmp	r6, #36	; 0x24
 800c090:	d842      	bhi.n	800c118 <_strtol_l.constprop.0+0x9c>
 800c092:	4a3f      	ldr	r2, [pc, #252]	; (800c190 <_strtol_l.constprop.0+0x114>)
 800c094:	2108      	movs	r1, #8
 800c096:	4694      	mov	ip, r2
 800c098:	001a      	movs	r2, r3
 800c09a:	4660      	mov	r0, ip
 800c09c:	7814      	ldrb	r4, [r2, #0]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	5d00      	ldrb	r0, [r0, r4]
 800c0a2:	001d      	movs	r5, r3
 800c0a4:	0007      	movs	r7, r0
 800c0a6:	400f      	ands	r7, r1
 800c0a8:	4208      	tst	r0, r1
 800c0aa:	d1f5      	bne.n	800c098 <_strtol_l.constprop.0+0x1c>
 800c0ac:	2c2d      	cmp	r4, #45	; 0x2d
 800c0ae:	d13a      	bne.n	800c126 <_strtol_l.constprop.0+0xaa>
 800c0b0:	2701      	movs	r7, #1
 800c0b2:	781c      	ldrb	r4, [r3, #0]
 800c0b4:	1c95      	adds	r5, r2, #2
 800c0b6:	2e00      	cmp	r6, #0
 800c0b8:	d065      	beq.n	800c186 <_strtol_l.constprop.0+0x10a>
 800c0ba:	2e10      	cmp	r6, #16
 800c0bc:	d109      	bne.n	800c0d2 <_strtol_l.constprop.0+0x56>
 800c0be:	2c30      	cmp	r4, #48	; 0x30
 800c0c0:	d107      	bne.n	800c0d2 <_strtol_l.constprop.0+0x56>
 800c0c2:	2220      	movs	r2, #32
 800c0c4:	782b      	ldrb	r3, [r5, #0]
 800c0c6:	4393      	bics	r3, r2
 800c0c8:	2b58      	cmp	r3, #88	; 0x58
 800c0ca:	d157      	bne.n	800c17c <_strtol_l.constprop.0+0x100>
 800c0cc:	2610      	movs	r6, #16
 800c0ce:	786c      	ldrb	r4, [r5, #1]
 800c0d0:	3502      	adds	r5, #2
 800c0d2:	4b30      	ldr	r3, [pc, #192]	; (800c194 <_strtol_l.constprop.0+0x118>)
 800c0d4:	0031      	movs	r1, r6
 800c0d6:	18fb      	adds	r3, r7, r3
 800c0d8:	0018      	movs	r0, r3
 800c0da:	9303      	str	r3, [sp, #12]
 800c0dc:	f7f4 f8be 	bl	800025c <__aeabi_uidivmod>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	4684      	mov	ip, r0
 800c0e6:	0018      	movs	r0, r3
 800c0e8:	9104      	str	r1, [sp, #16]
 800c0ea:	4252      	negs	r2, r2
 800c0ec:	0021      	movs	r1, r4
 800c0ee:	3930      	subs	r1, #48	; 0x30
 800c0f0:	2909      	cmp	r1, #9
 800c0f2:	d81d      	bhi.n	800c130 <_strtol_l.constprop.0+0xb4>
 800c0f4:	000c      	movs	r4, r1
 800c0f6:	42a6      	cmp	r6, r4
 800c0f8:	dd28      	ble.n	800c14c <_strtol_l.constprop.0+0xd0>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	db24      	blt.n	800c148 <_strtol_l.constprop.0+0xcc>
 800c0fe:	0013      	movs	r3, r2
 800c100:	4584      	cmp	ip, r0
 800c102:	d306      	bcc.n	800c112 <_strtol_l.constprop.0+0x96>
 800c104:	d102      	bne.n	800c10c <_strtol_l.constprop.0+0x90>
 800c106:	9904      	ldr	r1, [sp, #16]
 800c108:	42a1      	cmp	r1, r4
 800c10a:	db02      	blt.n	800c112 <_strtol_l.constprop.0+0x96>
 800c10c:	2301      	movs	r3, #1
 800c10e:	4370      	muls	r0, r6
 800c110:	1820      	adds	r0, r4, r0
 800c112:	782c      	ldrb	r4, [r5, #0]
 800c114:	3501      	adds	r5, #1
 800c116:	e7e9      	b.n	800c0ec <_strtol_l.constprop.0+0x70>
 800c118:	f7fe f940 	bl	800a39c <__errno>
 800c11c:	2316      	movs	r3, #22
 800c11e:	6003      	str	r3, [r0, #0]
 800c120:	2000      	movs	r0, #0
 800c122:	b007      	add	sp, #28
 800c124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c126:	2c2b      	cmp	r4, #43	; 0x2b
 800c128:	d1c5      	bne.n	800c0b6 <_strtol_l.constprop.0+0x3a>
 800c12a:	781c      	ldrb	r4, [r3, #0]
 800c12c:	1c95      	adds	r5, r2, #2
 800c12e:	e7c2      	b.n	800c0b6 <_strtol_l.constprop.0+0x3a>
 800c130:	0021      	movs	r1, r4
 800c132:	3941      	subs	r1, #65	; 0x41
 800c134:	2919      	cmp	r1, #25
 800c136:	d801      	bhi.n	800c13c <_strtol_l.constprop.0+0xc0>
 800c138:	3c37      	subs	r4, #55	; 0x37
 800c13a:	e7dc      	b.n	800c0f6 <_strtol_l.constprop.0+0x7a>
 800c13c:	0021      	movs	r1, r4
 800c13e:	3961      	subs	r1, #97	; 0x61
 800c140:	2919      	cmp	r1, #25
 800c142:	d803      	bhi.n	800c14c <_strtol_l.constprop.0+0xd0>
 800c144:	3c57      	subs	r4, #87	; 0x57
 800c146:	e7d6      	b.n	800c0f6 <_strtol_l.constprop.0+0x7a>
 800c148:	0013      	movs	r3, r2
 800c14a:	e7e2      	b.n	800c112 <_strtol_l.constprop.0+0x96>
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	da09      	bge.n	800c164 <_strtol_l.constprop.0+0xe8>
 800c150:	2322      	movs	r3, #34	; 0x22
 800c152:	9a05      	ldr	r2, [sp, #20]
 800c154:	9803      	ldr	r0, [sp, #12]
 800c156:	6013      	str	r3, [r2, #0]
 800c158:	9b02      	ldr	r3, [sp, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d0e1      	beq.n	800c122 <_strtol_l.constprop.0+0xa6>
 800c15e:	1e6b      	subs	r3, r5, #1
 800c160:	9301      	str	r3, [sp, #4]
 800c162:	e007      	b.n	800c174 <_strtol_l.constprop.0+0xf8>
 800c164:	2f00      	cmp	r7, #0
 800c166:	d000      	beq.n	800c16a <_strtol_l.constprop.0+0xee>
 800c168:	4240      	negs	r0, r0
 800c16a:	9a02      	ldr	r2, [sp, #8]
 800c16c:	2a00      	cmp	r2, #0
 800c16e:	d0d8      	beq.n	800c122 <_strtol_l.constprop.0+0xa6>
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1f4      	bne.n	800c15e <_strtol_l.constprop.0+0xe2>
 800c174:	9b02      	ldr	r3, [sp, #8]
 800c176:	9a01      	ldr	r2, [sp, #4]
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	e7d2      	b.n	800c122 <_strtol_l.constprop.0+0xa6>
 800c17c:	2430      	movs	r4, #48	; 0x30
 800c17e:	2e00      	cmp	r6, #0
 800c180:	d1a7      	bne.n	800c0d2 <_strtol_l.constprop.0+0x56>
 800c182:	3608      	adds	r6, #8
 800c184:	e7a5      	b.n	800c0d2 <_strtol_l.constprop.0+0x56>
 800c186:	2c30      	cmp	r4, #48	; 0x30
 800c188:	d09b      	beq.n	800c0c2 <_strtol_l.constprop.0+0x46>
 800c18a:	260a      	movs	r6, #10
 800c18c:	e7a1      	b.n	800c0d2 <_strtol_l.constprop.0+0x56>
 800c18e:	46c0      	nop			; (mov r8, r8)
 800c190:	0800f2e9 	.word	0x0800f2e9
 800c194:	7fffffff 	.word	0x7fffffff

0800c198 <_strtol_r>:
 800c198:	b510      	push	{r4, lr}
 800c19a:	f7ff ff6f 	bl	800c07c <_strtol_l.constprop.0>
 800c19e:	bd10      	pop	{r4, pc}

0800c1a0 <__assert_func>:
 800c1a0:	b530      	push	{r4, r5, lr}
 800c1a2:	0014      	movs	r4, r2
 800c1a4:	001a      	movs	r2, r3
 800c1a6:	4b09      	ldr	r3, [pc, #36]	; (800c1cc <__assert_func+0x2c>)
 800c1a8:	0005      	movs	r5, r0
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	b085      	sub	sp, #20
 800c1ae:	68d8      	ldr	r0, [r3, #12]
 800c1b0:	4b07      	ldr	r3, [pc, #28]	; (800c1d0 <__assert_func+0x30>)
 800c1b2:	2c00      	cmp	r4, #0
 800c1b4:	d101      	bne.n	800c1ba <__assert_func+0x1a>
 800c1b6:	4b07      	ldr	r3, [pc, #28]	; (800c1d4 <__assert_func+0x34>)
 800c1b8:	001c      	movs	r4, r3
 800c1ba:	9301      	str	r3, [sp, #4]
 800c1bc:	9100      	str	r1, [sp, #0]
 800c1be:	002b      	movs	r3, r5
 800c1c0:	4905      	ldr	r1, [pc, #20]	; (800c1d8 <__assert_func+0x38>)
 800c1c2:	9402      	str	r4, [sp, #8]
 800c1c4:	f000 feb0 	bl	800cf28 <fiprintf>
 800c1c8:	f002 fb1a 	bl	800e800 <abort>
 800c1cc:	2000000c 	.word	0x2000000c
 800c1d0:	0800f2ac 	.word	0x0800f2ac
 800c1d4:	0800f2e7 	.word	0x0800f2e7
 800c1d8:	0800f2b9 	.word	0x0800f2b9

0800c1dc <quorem>:
 800c1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1de:	0006      	movs	r6, r0
 800c1e0:	690b      	ldr	r3, [r1, #16]
 800c1e2:	6932      	ldr	r2, [r6, #16]
 800c1e4:	b087      	sub	sp, #28
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	9103      	str	r1, [sp, #12]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	db65      	blt.n	800c2ba <quorem+0xde>
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	009c      	lsls	r4, r3, #2
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	000b      	movs	r3, r1
 800c1f6:	3314      	adds	r3, #20
 800c1f8:	9305      	str	r3, [sp, #20]
 800c1fa:	191b      	adds	r3, r3, r4
 800c1fc:	9304      	str	r3, [sp, #16]
 800c1fe:	0033      	movs	r3, r6
 800c200:	3314      	adds	r3, #20
 800c202:	9302      	str	r3, [sp, #8]
 800c204:	191c      	adds	r4, r3, r4
 800c206:	9b04      	ldr	r3, [sp, #16]
 800c208:	6827      	ldr	r7, [r4, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	0038      	movs	r0, r7
 800c20e:	1c5d      	adds	r5, r3, #1
 800c210:	0029      	movs	r1, r5
 800c212:	9301      	str	r3, [sp, #4]
 800c214:	f7f3 ff9c 	bl	8000150 <__udivsi3>
 800c218:	9001      	str	r0, [sp, #4]
 800c21a:	42af      	cmp	r7, r5
 800c21c:	d324      	bcc.n	800c268 <quorem+0x8c>
 800c21e:	2500      	movs	r5, #0
 800c220:	46ac      	mov	ip, r5
 800c222:	9802      	ldr	r0, [sp, #8]
 800c224:	9f05      	ldr	r7, [sp, #20]
 800c226:	cf08      	ldmia	r7!, {r3}
 800c228:	9a01      	ldr	r2, [sp, #4]
 800c22a:	b299      	uxth	r1, r3
 800c22c:	4351      	muls	r1, r2
 800c22e:	0c1b      	lsrs	r3, r3, #16
 800c230:	4353      	muls	r3, r2
 800c232:	1949      	adds	r1, r1, r5
 800c234:	0c0a      	lsrs	r2, r1, #16
 800c236:	189b      	adds	r3, r3, r2
 800c238:	6802      	ldr	r2, [r0, #0]
 800c23a:	b289      	uxth	r1, r1
 800c23c:	b292      	uxth	r2, r2
 800c23e:	4462      	add	r2, ip
 800c240:	1a52      	subs	r2, r2, r1
 800c242:	6801      	ldr	r1, [r0, #0]
 800c244:	0c1d      	lsrs	r5, r3, #16
 800c246:	0c09      	lsrs	r1, r1, #16
 800c248:	b29b      	uxth	r3, r3
 800c24a:	1acb      	subs	r3, r1, r3
 800c24c:	1411      	asrs	r1, r2, #16
 800c24e:	185b      	adds	r3, r3, r1
 800c250:	1419      	asrs	r1, r3, #16
 800c252:	b292      	uxth	r2, r2
 800c254:	041b      	lsls	r3, r3, #16
 800c256:	431a      	orrs	r2, r3
 800c258:	9b04      	ldr	r3, [sp, #16]
 800c25a:	468c      	mov	ip, r1
 800c25c:	c004      	stmia	r0!, {r2}
 800c25e:	42bb      	cmp	r3, r7
 800c260:	d2e1      	bcs.n	800c226 <quorem+0x4a>
 800c262:	6823      	ldr	r3, [r4, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d030      	beq.n	800c2ca <quorem+0xee>
 800c268:	0030      	movs	r0, r6
 800c26a:	9903      	ldr	r1, [sp, #12]
 800c26c:	f001 fcea 	bl	800dc44 <__mcmp>
 800c270:	2800      	cmp	r0, #0
 800c272:	db21      	blt.n	800c2b8 <quorem+0xdc>
 800c274:	0030      	movs	r0, r6
 800c276:	2400      	movs	r4, #0
 800c278:	9b01      	ldr	r3, [sp, #4]
 800c27a:	9903      	ldr	r1, [sp, #12]
 800c27c:	3301      	adds	r3, #1
 800c27e:	9301      	str	r3, [sp, #4]
 800c280:	3014      	adds	r0, #20
 800c282:	3114      	adds	r1, #20
 800c284:	6803      	ldr	r3, [r0, #0]
 800c286:	c920      	ldmia	r1!, {r5}
 800c288:	b29a      	uxth	r2, r3
 800c28a:	1914      	adds	r4, r2, r4
 800c28c:	b2aa      	uxth	r2, r5
 800c28e:	1aa2      	subs	r2, r4, r2
 800c290:	0c1b      	lsrs	r3, r3, #16
 800c292:	0c2d      	lsrs	r5, r5, #16
 800c294:	1414      	asrs	r4, r2, #16
 800c296:	1b5b      	subs	r3, r3, r5
 800c298:	191b      	adds	r3, r3, r4
 800c29a:	141c      	asrs	r4, r3, #16
 800c29c:	b292      	uxth	r2, r2
 800c29e:	041b      	lsls	r3, r3, #16
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	c008      	stmia	r0!, {r3}
 800c2a4:	9b04      	ldr	r3, [sp, #16]
 800c2a6:	428b      	cmp	r3, r1
 800c2a8:	d2ec      	bcs.n	800c284 <quorem+0xa8>
 800c2aa:	9b00      	ldr	r3, [sp, #0]
 800c2ac:	9a02      	ldr	r2, [sp, #8]
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	18d3      	adds	r3, r2, r3
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	2a00      	cmp	r2, #0
 800c2b6:	d015      	beq.n	800c2e4 <quorem+0x108>
 800c2b8:	9801      	ldr	r0, [sp, #4]
 800c2ba:	b007      	add	sp, #28
 800c2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d106      	bne.n	800c2d2 <quorem+0xf6>
 800c2c4:	9b00      	ldr	r3, [sp, #0]
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	9b02      	ldr	r3, [sp, #8]
 800c2cc:	3c04      	subs	r4, #4
 800c2ce:	42a3      	cmp	r3, r4
 800c2d0:	d3f5      	bcc.n	800c2be <quorem+0xe2>
 800c2d2:	9b00      	ldr	r3, [sp, #0]
 800c2d4:	6133      	str	r3, [r6, #16]
 800c2d6:	e7c7      	b.n	800c268 <quorem+0x8c>
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	2a00      	cmp	r2, #0
 800c2dc:	d106      	bne.n	800c2ec <quorem+0x110>
 800c2de:	9a00      	ldr	r2, [sp, #0]
 800c2e0:	3a01      	subs	r2, #1
 800c2e2:	9200      	str	r2, [sp, #0]
 800c2e4:	9a02      	ldr	r2, [sp, #8]
 800c2e6:	3b04      	subs	r3, #4
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d3f5      	bcc.n	800c2d8 <quorem+0xfc>
 800c2ec:	9b00      	ldr	r3, [sp, #0]
 800c2ee:	6133      	str	r3, [r6, #16]
 800c2f0:	e7e2      	b.n	800c2b8 <quorem+0xdc>
	...

0800c2f4 <_dtoa_r>:
 800c2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2f6:	b09d      	sub	sp, #116	; 0x74
 800c2f8:	9202      	str	r2, [sp, #8]
 800c2fa:	9303      	str	r3, [sp, #12]
 800c2fc:	9b02      	ldr	r3, [sp, #8]
 800c2fe:	9c03      	ldr	r4, [sp, #12]
 800c300:	9308      	str	r3, [sp, #32]
 800c302:	9409      	str	r4, [sp, #36]	; 0x24
 800c304:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c306:	0007      	movs	r7, r0
 800c308:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800c30a:	2c00      	cmp	r4, #0
 800c30c:	d10e      	bne.n	800c32c <_dtoa_r+0x38>
 800c30e:	2010      	movs	r0, #16
 800c310:	f7fe f86e 	bl	800a3f0 <malloc>
 800c314:	1e02      	subs	r2, r0, #0
 800c316:	6278      	str	r0, [r7, #36]	; 0x24
 800c318:	d104      	bne.n	800c324 <_dtoa_r+0x30>
 800c31a:	21ea      	movs	r1, #234	; 0xea
 800c31c:	4bc7      	ldr	r3, [pc, #796]	; (800c63c <_dtoa_r+0x348>)
 800c31e:	48c8      	ldr	r0, [pc, #800]	; (800c640 <_dtoa_r+0x34c>)
 800c320:	f7ff ff3e 	bl	800c1a0 <__assert_func>
 800c324:	6044      	str	r4, [r0, #4]
 800c326:	6084      	str	r4, [r0, #8]
 800c328:	6004      	str	r4, [r0, #0]
 800c32a:	60c4      	str	r4, [r0, #12]
 800c32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32e:	6819      	ldr	r1, [r3, #0]
 800c330:	2900      	cmp	r1, #0
 800c332:	d00a      	beq.n	800c34a <_dtoa_r+0x56>
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	2301      	movs	r3, #1
 800c338:	4093      	lsls	r3, r2
 800c33a:	604a      	str	r2, [r1, #4]
 800c33c:	608b      	str	r3, [r1, #8]
 800c33e:	0038      	movs	r0, r7
 800c340:	f001 f9f4 	bl	800d72c <_Bfree>
 800c344:	2200      	movs	r2, #0
 800c346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	9b03      	ldr	r3, [sp, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	da20      	bge.n	800c392 <_dtoa_r+0x9e>
 800c350:	2301      	movs	r3, #1
 800c352:	602b      	str	r3, [r5, #0]
 800c354:	9b03      	ldr	r3, [sp, #12]
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	085b      	lsrs	r3, r3, #1
 800c35a:	9309      	str	r3, [sp, #36]	; 0x24
 800c35c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c35e:	4bb9      	ldr	r3, [pc, #740]	; (800c644 <_dtoa_r+0x350>)
 800c360:	4ab8      	ldr	r2, [pc, #736]	; (800c644 <_dtoa_r+0x350>)
 800c362:	402b      	ands	r3, r5
 800c364:	4293      	cmp	r3, r2
 800c366:	d117      	bne.n	800c398 <_dtoa_r+0xa4>
 800c368:	4bb7      	ldr	r3, [pc, #732]	; (800c648 <_dtoa_r+0x354>)
 800c36a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c36c:	0328      	lsls	r0, r5, #12
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	0b00      	lsrs	r0, r0, #12
 800c374:	4318      	orrs	r0, r3
 800c376:	d101      	bne.n	800c37c <_dtoa_r+0x88>
 800c378:	f000 fdbf 	bl	800cefa <_dtoa_r+0xc06>
 800c37c:	48b3      	ldr	r0, [pc, #716]	; (800c64c <_dtoa_r+0x358>)
 800c37e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c380:	9006      	str	r0, [sp, #24]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <_dtoa_r+0x98>
 800c386:	4bb2      	ldr	r3, [pc, #712]	; (800c650 <_dtoa_r+0x35c>)
 800c388:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c38a:	6013      	str	r3, [r2, #0]
 800c38c:	9806      	ldr	r0, [sp, #24]
 800c38e:	b01d      	add	sp, #116	; 0x74
 800c390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c392:	2300      	movs	r3, #0
 800c394:	602b      	str	r3, [r5, #0]
 800c396:	e7e1      	b.n	800c35c <_dtoa_r+0x68>
 800c398:	9b08      	ldr	r3, [sp, #32]
 800c39a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c39c:	9312      	str	r3, [sp, #72]	; 0x48
 800c39e:	9413      	str	r4, [sp, #76]	; 0x4c
 800c3a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c3a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f7f4 f858 	bl	800045c <__aeabi_dcmpeq>
 800c3ac:	1e04      	subs	r4, r0, #0
 800c3ae:	d009      	beq.n	800c3c4 <_dtoa_r+0xd0>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	4ba7      	ldr	r3, [pc, #668]	; (800c654 <_dtoa_r+0x360>)
 800c3b8:	9306      	str	r3, [sp, #24]
 800c3ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d0e5      	beq.n	800c38c <_dtoa_r+0x98>
 800c3c0:	4ba5      	ldr	r3, [pc, #660]	; (800c658 <_dtoa_r+0x364>)
 800c3c2:	e7e1      	b.n	800c388 <_dtoa_r+0x94>
 800c3c4:	ab1a      	add	r3, sp, #104	; 0x68
 800c3c6:	9301      	str	r3, [sp, #4]
 800c3c8:	ab1b      	add	r3, sp, #108	; 0x6c
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	0038      	movs	r0, r7
 800c3ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3d2:	f001 fd5f 	bl	800de94 <__d2b>
 800c3d6:	006e      	lsls	r6, r5, #1
 800c3d8:	9005      	str	r0, [sp, #20]
 800c3da:	0d76      	lsrs	r6, r6, #21
 800c3dc:	d100      	bne.n	800c3e0 <_dtoa_r+0xec>
 800c3de:	e07c      	b.n	800c4da <_dtoa_r+0x1e6>
 800c3e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c3e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c3e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3e6:	4a9d      	ldr	r2, [pc, #628]	; (800c65c <_dtoa_r+0x368>)
 800c3e8:	031b      	lsls	r3, r3, #12
 800c3ea:	0b1b      	lsrs	r3, r3, #12
 800c3ec:	431a      	orrs	r2, r3
 800c3ee:	0011      	movs	r1, r2
 800c3f0:	4b9b      	ldr	r3, [pc, #620]	; (800c660 <_dtoa_r+0x36c>)
 800c3f2:	9418      	str	r4, [sp, #96]	; 0x60
 800c3f4:	18f6      	adds	r6, r6, r3
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	4b9a      	ldr	r3, [pc, #616]	; (800c664 <_dtoa_r+0x370>)
 800c3fa:	f7f6 fa87 	bl	800290c <__aeabi_dsub>
 800c3fe:	4a9a      	ldr	r2, [pc, #616]	; (800c668 <_dtoa_r+0x374>)
 800c400:	4b9a      	ldr	r3, [pc, #616]	; (800c66c <_dtoa_r+0x378>)
 800c402:	f7f6 f817 	bl	8002434 <__aeabi_dmul>
 800c406:	4a9a      	ldr	r2, [pc, #616]	; (800c670 <_dtoa_r+0x37c>)
 800c408:	4b9a      	ldr	r3, [pc, #616]	; (800c674 <_dtoa_r+0x380>)
 800c40a:	f7f5 f8d5 	bl	80015b8 <__aeabi_dadd>
 800c40e:	0004      	movs	r4, r0
 800c410:	0030      	movs	r0, r6
 800c412:	000d      	movs	r5, r1
 800c414:	f7f6 fe60 	bl	80030d8 <__aeabi_i2d>
 800c418:	4a97      	ldr	r2, [pc, #604]	; (800c678 <_dtoa_r+0x384>)
 800c41a:	4b98      	ldr	r3, [pc, #608]	; (800c67c <_dtoa_r+0x388>)
 800c41c:	f7f6 f80a 	bl	8002434 <__aeabi_dmul>
 800c420:	0002      	movs	r2, r0
 800c422:	000b      	movs	r3, r1
 800c424:	0020      	movs	r0, r4
 800c426:	0029      	movs	r1, r5
 800c428:	f7f5 f8c6 	bl	80015b8 <__aeabi_dadd>
 800c42c:	0004      	movs	r4, r0
 800c42e:	000d      	movs	r5, r1
 800c430:	f7f6 fe1c 	bl	800306c <__aeabi_d2iz>
 800c434:	2200      	movs	r2, #0
 800c436:	9002      	str	r0, [sp, #8]
 800c438:	2300      	movs	r3, #0
 800c43a:	0020      	movs	r0, r4
 800c43c:	0029      	movs	r1, r5
 800c43e:	f7f4 f813 	bl	8000468 <__aeabi_dcmplt>
 800c442:	2800      	cmp	r0, #0
 800c444:	d00b      	beq.n	800c45e <_dtoa_r+0x16a>
 800c446:	9802      	ldr	r0, [sp, #8]
 800c448:	f7f6 fe46 	bl	80030d8 <__aeabi_i2d>
 800c44c:	002b      	movs	r3, r5
 800c44e:	0022      	movs	r2, r4
 800c450:	f7f4 f804 	bl	800045c <__aeabi_dcmpeq>
 800c454:	4243      	negs	r3, r0
 800c456:	4158      	adcs	r0, r3
 800c458:	9b02      	ldr	r3, [sp, #8]
 800c45a:	1a1b      	subs	r3, r3, r0
 800c45c:	9302      	str	r3, [sp, #8]
 800c45e:	2301      	movs	r3, #1
 800c460:	9316      	str	r3, [sp, #88]	; 0x58
 800c462:	9b02      	ldr	r3, [sp, #8]
 800c464:	2b16      	cmp	r3, #22
 800c466:	d80f      	bhi.n	800c488 <_dtoa_r+0x194>
 800c468:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c46a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c46c:	00da      	lsls	r2, r3, #3
 800c46e:	4b84      	ldr	r3, [pc, #528]	; (800c680 <_dtoa_r+0x38c>)
 800c470:	189b      	adds	r3, r3, r2
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	f7f3 fff7 	bl	8000468 <__aeabi_dcmplt>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	d049      	beq.n	800c512 <_dtoa_r+0x21e>
 800c47e:	9b02      	ldr	r3, [sp, #8]
 800c480:	3b01      	subs	r3, #1
 800c482:	9302      	str	r3, [sp, #8]
 800c484:	2300      	movs	r3, #0
 800c486:	9316      	str	r3, [sp, #88]	; 0x58
 800c488:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c48a:	1b9e      	subs	r6, r3, r6
 800c48c:	2300      	movs	r3, #0
 800c48e:	930a      	str	r3, [sp, #40]	; 0x28
 800c490:	0033      	movs	r3, r6
 800c492:	3b01      	subs	r3, #1
 800c494:	930d      	str	r3, [sp, #52]	; 0x34
 800c496:	d504      	bpl.n	800c4a2 <_dtoa_r+0x1ae>
 800c498:	2301      	movs	r3, #1
 800c49a:	1b9b      	subs	r3, r3, r6
 800c49c:	930a      	str	r3, [sp, #40]	; 0x28
 800c49e:	2300      	movs	r3, #0
 800c4a0:	930d      	str	r3, [sp, #52]	; 0x34
 800c4a2:	9b02      	ldr	r3, [sp, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	db36      	blt.n	800c516 <_dtoa_r+0x222>
 800c4a8:	9a02      	ldr	r2, [sp, #8]
 800c4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4ac:	4694      	mov	ip, r2
 800c4ae:	4463      	add	r3, ip
 800c4b0:	930d      	str	r3, [sp, #52]	; 0x34
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	9215      	str	r2, [sp, #84]	; 0x54
 800c4b6:	930e      	str	r3, [sp, #56]	; 0x38
 800c4b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4ba:	2401      	movs	r4, #1
 800c4bc:	2b09      	cmp	r3, #9
 800c4be:	d864      	bhi.n	800c58a <_dtoa_r+0x296>
 800c4c0:	2b05      	cmp	r3, #5
 800c4c2:	dd02      	ble.n	800c4ca <_dtoa_r+0x1d6>
 800c4c4:	2400      	movs	r4, #0
 800c4c6:	3b04      	subs	r3, #4
 800c4c8:	9322      	str	r3, [sp, #136]	; 0x88
 800c4ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4cc:	1e98      	subs	r0, r3, #2
 800c4ce:	2803      	cmp	r0, #3
 800c4d0:	d864      	bhi.n	800c59c <_dtoa_r+0x2a8>
 800c4d2:	f7f3 fe29 	bl	8000128 <__gnu_thumb1_case_uqi>
 800c4d6:	3829      	.short	0x3829
 800c4d8:	5836      	.short	0x5836
 800c4da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c4dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c4de:	189e      	adds	r6, r3, r2
 800c4e0:	4b68      	ldr	r3, [pc, #416]	; (800c684 <_dtoa_r+0x390>)
 800c4e2:	18f2      	adds	r2, r6, r3
 800c4e4:	2a20      	cmp	r2, #32
 800c4e6:	dd0f      	ble.n	800c508 <_dtoa_r+0x214>
 800c4e8:	2340      	movs	r3, #64	; 0x40
 800c4ea:	1a9b      	subs	r3, r3, r2
 800c4ec:	409d      	lsls	r5, r3
 800c4ee:	4b66      	ldr	r3, [pc, #408]	; (800c688 <_dtoa_r+0x394>)
 800c4f0:	9802      	ldr	r0, [sp, #8]
 800c4f2:	18f3      	adds	r3, r6, r3
 800c4f4:	40d8      	lsrs	r0, r3
 800c4f6:	4328      	orrs	r0, r5
 800c4f8:	f7f6 fe1e 	bl	8003138 <__aeabi_ui2d>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	4c63      	ldr	r4, [pc, #396]	; (800c68c <_dtoa_r+0x398>)
 800c500:	3e01      	subs	r6, #1
 800c502:	1909      	adds	r1, r1, r4
 800c504:	9318      	str	r3, [sp, #96]	; 0x60
 800c506:	e776      	b.n	800c3f6 <_dtoa_r+0x102>
 800c508:	2320      	movs	r3, #32
 800c50a:	9802      	ldr	r0, [sp, #8]
 800c50c:	1a9b      	subs	r3, r3, r2
 800c50e:	4098      	lsls	r0, r3
 800c510:	e7f2      	b.n	800c4f8 <_dtoa_r+0x204>
 800c512:	9016      	str	r0, [sp, #88]	; 0x58
 800c514:	e7b8      	b.n	800c488 <_dtoa_r+0x194>
 800c516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c518:	9a02      	ldr	r2, [sp, #8]
 800c51a:	1a9b      	subs	r3, r3, r2
 800c51c:	930a      	str	r3, [sp, #40]	; 0x28
 800c51e:	4253      	negs	r3, r2
 800c520:	930e      	str	r3, [sp, #56]	; 0x38
 800c522:	2300      	movs	r3, #0
 800c524:	9315      	str	r3, [sp, #84]	; 0x54
 800c526:	e7c7      	b.n	800c4b8 <_dtoa_r+0x1c4>
 800c528:	2300      	movs	r3, #0
 800c52a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c52c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c52e:	930c      	str	r3, [sp, #48]	; 0x30
 800c530:	9307      	str	r3, [sp, #28]
 800c532:	2b00      	cmp	r3, #0
 800c534:	dc13      	bgt.n	800c55e <_dtoa_r+0x26a>
 800c536:	2301      	movs	r3, #1
 800c538:	001a      	movs	r2, r3
 800c53a:	930c      	str	r3, [sp, #48]	; 0x30
 800c53c:	9307      	str	r3, [sp, #28]
 800c53e:	9223      	str	r2, [sp, #140]	; 0x8c
 800c540:	e00d      	b.n	800c55e <_dtoa_r+0x26a>
 800c542:	2301      	movs	r3, #1
 800c544:	e7f1      	b.n	800c52a <_dtoa_r+0x236>
 800c546:	2300      	movs	r3, #0
 800c548:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c54a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c54c:	4694      	mov	ip, r2
 800c54e:	9b02      	ldr	r3, [sp, #8]
 800c550:	4463      	add	r3, ip
 800c552:	930c      	str	r3, [sp, #48]	; 0x30
 800c554:	3301      	adds	r3, #1
 800c556:	9307      	str	r3, [sp, #28]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	dc00      	bgt.n	800c55e <_dtoa_r+0x26a>
 800c55c:	2301      	movs	r3, #1
 800c55e:	2200      	movs	r2, #0
 800c560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c562:	6042      	str	r2, [r0, #4]
 800c564:	3204      	adds	r2, #4
 800c566:	0015      	movs	r5, r2
 800c568:	3514      	adds	r5, #20
 800c56a:	6841      	ldr	r1, [r0, #4]
 800c56c:	429d      	cmp	r5, r3
 800c56e:	d919      	bls.n	800c5a4 <_dtoa_r+0x2b0>
 800c570:	0038      	movs	r0, r7
 800c572:	f001 f897 	bl	800d6a4 <_Balloc>
 800c576:	9006      	str	r0, [sp, #24]
 800c578:	2800      	cmp	r0, #0
 800c57a:	d117      	bne.n	800c5ac <_dtoa_r+0x2b8>
 800c57c:	21d5      	movs	r1, #213	; 0xd5
 800c57e:	0002      	movs	r2, r0
 800c580:	4b43      	ldr	r3, [pc, #268]	; (800c690 <_dtoa_r+0x39c>)
 800c582:	0049      	lsls	r1, r1, #1
 800c584:	e6cb      	b.n	800c31e <_dtoa_r+0x2a>
 800c586:	2301      	movs	r3, #1
 800c588:	e7de      	b.n	800c548 <_dtoa_r+0x254>
 800c58a:	2300      	movs	r3, #0
 800c58c:	940f      	str	r4, [sp, #60]	; 0x3c
 800c58e:	9322      	str	r3, [sp, #136]	; 0x88
 800c590:	3b01      	subs	r3, #1
 800c592:	930c      	str	r3, [sp, #48]	; 0x30
 800c594:	9307      	str	r3, [sp, #28]
 800c596:	2200      	movs	r2, #0
 800c598:	3313      	adds	r3, #19
 800c59a:	e7d0      	b.n	800c53e <_dtoa_r+0x24a>
 800c59c:	2301      	movs	r3, #1
 800c59e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5a0:	3b02      	subs	r3, #2
 800c5a2:	e7f6      	b.n	800c592 <_dtoa_r+0x29e>
 800c5a4:	3101      	adds	r1, #1
 800c5a6:	6041      	str	r1, [r0, #4]
 800c5a8:	0052      	lsls	r2, r2, #1
 800c5aa:	e7dc      	b.n	800c566 <_dtoa_r+0x272>
 800c5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ae:	9a06      	ldr	r2, [sp, #24]
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	9b07      	ldr	r3, [sp, #28]
 800c5b4:	2b0e      	cmp	r3, #14
 800c5b6:	d900      	bls.n	800c5ba <_dtoa_r+0x2c6>
 800c5b8:	e0eb      	b.n	800c792 <_dtoa_r+0x49e>
 800c5ba:	2c00      	cmp	r4, #0
 800c5bc:	d100      	bne.n	800c5c0 <_dtoa_r+0x2cc>
 800c5be:	e0e8      	b.n	800c792 <_dtoa_r+0x49e>
 800c5c0:	9b02      	ldr	r3, [sp, #8]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	dd68      	ble.n	800c698 <_dtoa_r+0x3a4>
 800c5c6:	001a      	movs	r2, r3
 800c5c8:	210f      	movs	r1, #15
 800c5ca:	4b2d      	ldr	r3, [pc, #180]	; (800c680 <_dtoa_r+0x38c>)
 800c5cc:	400a      	ands	r2, r1
 800c5ce:	00d2      	lsls	r2, r2, #3
 800c5d0:	189b      	adds	r3, r3, r2
 800c5d2:	681d      	ldr	r5, [r3, #0]
 800c5d4:	685e      	ldr	r6, [r3, #4]
 800c5d6:	9b02      	ldr	r3, [sp, #8]
 800c5d8:	111c      	asrs	r4, r3, #4
 800c5da:	2302      	movs	r3, #2
 800c5dc:	9310      	str	r3, [sp, #64]	; 0x40
 800c5de:	9b02      	ldr	r3, [sp, #8]
 800c5e0:	05db      	lsls	r3, r3, #23
 800c5e2:	d50b      	bpl.n	800c5fc <_dtoa_r+0x308>
 800c5e4:	4b2b      	ldr	r3, [pc, #172]	; (800c694 <_dtoa_r+0x3a0>)
 800c5e6:	400c      	ands	r4, r1
 800c5e8:	6a1a      	ldr	r2, [r3, #32]
 800c5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c5ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c5f0:	f7f5 fb1e 	bl	8001c30 <__aeabi_ddiv>
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	9008      	str	r0, [sp, #32]
 800c5f8:	9109      	str	r1, [sp, #36]	; 0x24
 800c5fa:	9310      	str	r3, [sp, #64]	; 0x40
 800c5fc:	4b25      	ldr	r3, [pc, #148]	; (800c694 <_dtoa_r+0x3a0>)
 800c5fe:	9314      	str	r3, [sp, #80]	; 0x50
 800c600:	2c00      	cmp	r4, #0
 800c602:	d108      	bne.n	800c616 <_dtoa_r+0x322>
 800c604:	9808      	ldr	r0, [sp, #32]
 800c606:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c608:	002a      	movs	r2, r5
 800c60a:	0033      	movs	r3, r6
 800c60c:	f7f5 fb10 	bl	8001c30 <__aeabi_ddiv>
 800c610:	9008      	str	r0, [sp, #32]
 800c612:	9109      	str	r1, [sp, #36]	; 0x24
 800c614:	e05c      	b.n	800c6d0 <_dtoa_r+0x3dc>
 800c616:	2301      	movs	r3, #1
 800c618:	421c      	tst	r4, r3
 800c61a:	d00b      	beq.n	800c634 <_dtoa_r+0x340>
 800c61c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c61e:	0028      	movs	r0, r5
 800c620:	3301      	adds	r3, #1
 800c622:	9310      	str	r3, [sp, #64]	; 0x40
 800c624:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c626:	0031      	movs	r1, r6
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	f7f5 ff02 	bl	8002434 <__aeabi_dmul>
 800c630:	0005      	movs	r5, r0
 800c632:	000e      	movs	r6, r1
 800c634:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c636:	1064      	asrs	r4, r4, #1
 800c638:	3308      	adds	r3, #8
 800c63a:	e7e0      	b.n	800c5fe <_dtoa_r+0x30a>
 800c63c:	0800f238 	.word	0x0800f238
 800c640:	0800f3f6 	.word	0x0800f3f6
 800c644:	7ff00000 	.word	0x7ff00000
 800c648:	0000270f 	.word	0x0000270f
 800c64c:	0800f3f2 	.word	0x0800f3f2
 800c650:	0800f3f5 	.word	0x0800f3f5
 800c654:	0800f1b8 	.word	0x0800f1b8
 800c658:	0800f1b9 	.word	0x0800f1b9
 800c65c:	3ff00000 	.word	0x3ff00000
 800c660:	fffffc01 	.word	0xfffffc01
 800c664:	3ff80000 	.word	0x3ff80000
 800c668:	636f4361 	.word	0x636f4361
 800c66c:	3fd287a7 	.word	0x3fd287a7
 800c670:	8b60c8b3 	.word	0x8b60c8b3
 800c674:	3fc68a28 	.word	0x3fc68a28
 800c678:	509f79fb 	.word	0x509f79fb
 800c67c:	3fd34413 	.word	0x3fd34413
 800c680:	0800f560 	.word	0x0800f560
 800c684:	00000432 	.word	0x00000432
 800c688:	00000412 	.word	0x00000412
 800c68c:	fe100000 	.word	0xfe100000
 800c690:	0800f451 	.word	0x0800f451
 800c694:	0800f538 	.word	0x0800f538
 800c698:	2302      	movs	r3, #2
 800c69a:	9310      	str	r3, [sp, #64]	; 0x40
 800c69c:	9b02      	ldr	r3, [sp, #8]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d016      	beq.n	800c6d0 <_dtoa_r+0x3dc>
 800c6a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c6a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c6a6:	425c      	negs	r4, r3
 800c6a8:	230f      	movs	r3, #15
 800c6aa:	4ab6      	ldr	r2, [pc, #728]	; (800c984 <_dtoa_r+0x690>)
 800c6ac:	4023      	ands	r3, r4
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	18d3      	adds	r3, r2, r3
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	f7f5 febd 	bl	8002434 <__aeabi_dmul>
 800c6ba:	2601      	movs	r6, #1
 800c6bc:	2300      	movs	r3, #0
 800c6be:	9008      	str	r0, [sp, #32]
 800c6c0:	9109      	str	r1, [sp, #36]	; 0x24
 800c6c2:	4db1      	ldr	r5, [pc, #708]	; (800c988 <_dtoa_r+0x694>)
 800c6c4:	1124      	asrs	r4, r4, #4
 800c6c6:	2c00      	cmp	r4, #0
 800c6c8:	d000      	beq.n	800c6cc <_dtoa_r+0x3d8>
 800c6ca:	e094      	b.n	800c7f6 <_dtoa_r+0x502>
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d19f      	bne.n	800c610 <_dtoa_r+0x31c>
 800c6d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d100      	bne.n	800c6d8 <_dtoa_r+0x3e4>
 800c6d6:	e09b      	b.n	800c810 <_dtoa_r+0x51c>
 800c6d8:	9c08      	ldr	r4, [sp, #32]
 800c6da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c6dc:	2200      	movs	r2, #0
 800c6de:	0020      	movs	r0, r4
 800c6e0:	0029      	movs	r1, r5
 800c6e2:	4baa      	ldr	r3, [pc, #680]	; (800c98c <_dtoa_r+0x698>)
 800c6e4:	f7f3 fec0 	bl	8000468 <__aeabi_dcmplt>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d100      	bne.n	800c6ee <_dtoa_r+0x3fa>
 800c6ec:	e090      	b.n	800c810 <_dtoa_r+0x51c>
 800c6ee:	9b07      	ldr	r3, [sp, #28]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d100      	bne.n	800c6f6 <_dtoa_r+0x402>
 800c6f4:	e08c      	b.n	800c810 <_dtoa_r+0x51c>
 800c6f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	dd46      	ble.n	800c78a <_dtoa_r+0x496>
 800c6fc:	9b02      	ldr	r3, [sp, #8]
 800c6fe:	2200      	movs	r2, #0
 800c700:	0020      	movs	r0, r4
 800c702:	0029      	movs	r1, r5
 800c704:	1e5e      	subs	r6, r3, #1
 800c706:	4ba2      	ldr	r3, [pc, #648]	; (800c990 <_dtoa_r+0x69c>)
 800c708:	f7f5 fe94 	bl	8002434 <__aeabi_dmul>
 800c70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c70e:	9008      	str	r0, [sp, #32]
 800c710:	9109      	str	r1, [sp, #36]	; 0x24
 800c712:	3301      	adds	r3, #1
 800c714:	9310      	str	r3, [sp, #64]	; 0x40
 800c716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c718:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c71a:	9c08      	ldr	r4, [sp, #32]
 800c71c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c71e:	9314      	str	r3, [sp, #80]	; 0x50
 800c720:	f7f6 fcda 	bl	80030d8 <__aeabi_i2d>
 800c724:	0022      	movs	r2, r4
 800c726:	002b      	movs	r3, r5
 800c728:	f7f5 fe84 	bl	8002434 <__aeabi_dmul>
 800c72c:	2200      	movs	r2, #0
 800c72e:	4b99      	ldr	r3, [pc, #612]	; (800c994 <_dtoa_r+0x6a0>)
 800c730:	f7f4 ff42 	bl	80015b8 <__aeabi_dadd>
 800c734:	9010      	str	r0, [sp, #64]	; 0x40
 800c736:	9111      	str	r1, [sp, #68]	; 0x44
 800c738:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c73a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c73c:	9208      	str	r2, [sp, #32]
 800c73e:	9309      	str	r3, [sp, #36]	; 0x24
 800c740:	4a95      	ldr	r2, [pc, #596]	; (800c998 <_dtoa_r+0x6a4>)
 800c742:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c744:	4694      	mov	ip, r2
 800c746:	4463      	add	r3, ip
 800c748:	9317      	str	r3, [sp, #92]	; 0x5c
 800c74a:	9309      	str	r3, [sp, #36]	; 0x24
 800c74c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d161      	bne.n	800c816 <_dtoa_r+0x522>
 800c752:	2200      	movs	r2, #0
 800c754:	0020      	movs	r0, r4
 800c756:	0029      	movs	r1, r5
 800c758:	4b90      	ldr	r3, [pc, #576]	; (800c99c <_dtoa_r+0x6a8>)
 800c75a:	f7f6 f8d7 	bl	800290c <__aeabi_dsub>
 800c75e:	9a08      	ldr	r2, [sp, #32]
 800c760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c762:	0004      	movs	r4, r0
 800c764:	000d      	movs	r5, r1
 800c766:	f7f3 fe93 	bl	8000490 <__aeabi_dcmpgt>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d000      	beq.n	800c770 <_dtoa_r+0x47c>
 800c76e:	e2af      	b.n	800ccd0 <_dtoa_r+0x9dc>
 800c770:	488b      	ldr	r0, [pc, #556]	; (800c9a0 <_dtoa_r+0x6ac>)
 800c772:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c774:	4684      	mov	ip, r0
 800c776:	4461      	add	r1, ip
 800c778:	000b      	movs	r3, r1
 800c77a:	0020      	movs	r0, r4
 800c77c:	0029      	movs	r1, r5
 800c77e:	9a08      	ldr	r2, [sp, #32]
 800c780:	f7f3 fe72 	bl	8000468 <__aeabi_dcmplt>
 800c784:	2800      	cmp	r0, #0
 800c786:	d000      	beq.n	800c78a <_dtoa_r+0x496>
 800c788:	e29f      	b.n	800ccca <_dtoa_r+0x9d6>
 800c78a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c78c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c78e:	9308      	str	r3, [sp, #32]
 800c790:	9409      	str	r4, [sp, #36]	; 0x24
 800c792:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c794:	2b00      	cmp	r3, #0
 800c796:	da00      	bge.n	800c79a <_dtoa_r+0x4a6>
 800c798:	e172      	b.n	800ca80 <_dtoa_r+0x78c>
 800c79a:	9a02      	ldr	r2, [sp, #8]
 800c79c:	2a0e      	cmp	r2, #14
 800c79e:	dd00      	ble.n	800c7a2 <_dtoa_r+0x4ae>
 800c7a0:	e16e      	b.n	800ca80 <_dtoa_r+0x78c>
 800c7a2:	4b78      	ldr	r3, [pc, #480]	; (800c984 <_dtoa_r+0x690>)
 800c7a4:	00d2      	lsls	r2, r2, #3
 800c7a6:	189b      	adds	r3, r3, r2
 800c7a8:	685c      	ldr	r4, [r3, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	930a      	str	r3, [sp, #40]	; 0x28
 800c7ae:	940b      	str	r4, [sp, #44]	; 0x2c
 800c7b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	db00      	blt.n	800c7b8 <_dtoa_r+0x4c4>
 800c7b6:	e0f7      	b.n	800c9a8 <_dtoa_r+0x6b4>
 800c7b8:	9b07      	ldr	r3, [sp, #28]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	dd00      	ble.n	800c7c0 <_dtoa_r+0x4cc>
 800c7be:	e0f3      	b.n	800c9a8 <_dtoa_r+0x6b4>
 800c7c0:	d000      	beq.n	800c7c4 <_dtoa_r+0x4d0>
 800c7c2:	e282      	b.n	800ccca <_dtoa_r+0x9d6>
 800c7c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c7c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	4b74      	ldr	r3, [pc, #464]	; (800c99c <_dtoa_r+0x6a8>)
 800c7cc:	f7f5 fe32 	bl	8002434 <__aeabi_dmul>
 800c7d0:	9a08      	ldr	r2, [sp, #32]
 800c7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d4:	f7f3 fe66 	bl	80004a4 <__aeabi_dcmpge>
 800c7d8:	9e07      	ldr	r6, [sp, #28]
 800c7da:	0035      	movs	r5, r6
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d000      	beq.n	800c7e2 <_dtoa_r+0x4ee>
 800c7e0:	e259      	b.n	800cc96 <_dtoa_r+0x9a2>
 800c7e2:	9b06      	ldr	r3, [sp, #24]
 800c7e4:	9a06      	ldr	r2, [sp, #24]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	9308      	str	r3, [sp, #32]
 800c7ea:	2331      	movs	r3, #49	; 0x31
 800c7ec:	7013      	strb	r3, [r2, #0]
 800c7ee:	9b02      	ldr	r3, [sp, #8]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	9302      	str	r3, [sp, #8]
 800c7f4:	e254      	b.n	800cca0 <_dtoa_r+0x9ac>
 800c7f6:	4234      	tst	r4, r6
 800c7f8:	d007      	beq.n	800c80a <_dtoa_r+0x516>
 800c7fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	9310      	str	r3, [sp, #64]	; 0x40
 800c800:	682a      	ldr	r2, [r5, #0]
 800c802:	686b      	ldr	r3, [r5, #4]
 800c804:	f7f5 fe16 	bl	8002434 <__aeabi_dmul>
 800c808:	0033      	movs	r3, r6
 800c80a:	1064      	asrs	r4, r4, #1
 800c80c:	3508      	adds	r5, #8
 800c80e:	e75a      	b.n	800c6c6 <_dtoa_r+0x3d2>
 800c810:	9e02      	ldr	r6, [sp, #8]
 800c812:	9b07      	ldr	r3, [sp, #28]
 800c814:	e780      	b.n	800c718 <_dtoa_r+0x424>
 800c816:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c818:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c81a:	1e5a      	subs	r2, r3, #1
 800c81c:	4b59      	ldr	r3, [pc, #356]	; (800c984 <_dtoa_r+0x690>)
 800c81e:	00d2      	lsls	r2, r2, #3
 800c820:	189b      	adds	r3, r3, r2
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	2900      	cmp	r1, #0
 800c828:	d051      	beq.n	800c8ce <_dtoa_r+0x5da>
 800c82a:	2000      	movs	r0, #0
 800c82c:	495d      	ldr	r1, [pc, #372]	; (800c9a4 <_dtoa_r+0x6b0>)
 800c82e:	f7f5 f9ff 	bl	8001c30 <__aeabi_ddiv>
 800c832:	9a08      	ldr	r2, [sp, #32]
 800c834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c836:	f7f6 f869 	bl	800290c <__aeabi_dsub>
 800c83a:	9a06      	ldr	r2, [sp, #24]
 800c83c:	9b06      	ldr	r3, [sp, #24]
 800c83e:	4694      	mov	ip, r2
 800c840:	9317      	str	r3, [sp, #92]	; 0x5c
 800c842:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c844:	9010      	str	r0, [sp, #64]	; 0x40
 800c846:	9111      	str	r1, [sp, #68]	; 0x44
 800c848:	4463      	add	r3, ip
 800c84a:	9319      	str	r3, [sp, #100]	; 0x64
 800c84c:	0029      	movs	r1, r5
 800c84e:	0020      	movs	r0, r4
 800c850:	f7f6 fc0c 	bl	800306c <__aeabi_d2iz>
 800c854:	9014      	str	r0, [sp, #80]	; 0x50
 800c856:	f7f6 fc3f 	bl	80030d8 <__aeabi_i2d>
 800c85a:	0002      	movs	r2, r0
 800c85c:	000b      	movs	r3, r1
 800c85e:	0020      	movs	r0, r4
 800c860:	0029      	movs	r1, r5
 800c862:	f7f6 f853 	bl	800290c <__aeabi_dsub>
 800c866:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c868:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c86a:	3301      	adds	r3, #1
 800c86c:	9308      	str	r3, [sp, #32]
 800c86e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c870:	0004      	movs	r4, r0
 800c872:	3330      	adds	r3, #48	; 0x30
 800c874:	7013      	strb	r3, [r2, #0]
 800c876:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c87a:	000d      	movs	r5, r1
 800c87c:	f7f3 fdf4 	bl	8000468 <__aeabi_dcmplt>
 800c880:	2800      	cmp	r0, #0
 800c882:	d175      	bne.n	800c970 <_dtoa_r+0x67c>
 800c884:	0022      	movs	r2, r4
 800c886:	002b      	movs	r3, r5
 800c888:	2000      	movs	r0, #0
 800c88a:	4940      	ldr	r1, [pc, #256]	; (800c98c <_dtoa_r+0x698>)
 800c88c:	f7f6 f83e 	bl	800290c <__aeabi_dsub>
 800c890:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c892:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c894:	f7f3 fde8 	bl	8000468 <__aeabi_dcmplt>
 800c898:	2800      	cmp	r0, #0
 800c89a:	d000      	beq.n	800c89e <_dtoa_r+0x5aa>
 800c89c:	e0d2      	b.n	800ca44 <_dtoa_r+0x750>
 800c89e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c8a0:	9a08      	ldr	r2, [sp, #32]
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d100      	bne.n	800c8a8 <_dtoa_r+0x5b4>
 800c8a6:	e770      	b.n	800c78a <_dtoa_r+0x496>
 800c8a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c8aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	4b38      	ldr	r3, [pc, #224]	; (800c990 <_dtoa_r+0x69c>)
 800c8b0:	f7f5 fdc0 	bl	8002434 <__aeabi_dmul>
 800c8b4:	4b36      	ldr	r3, [pc, #216]	; (800c990 <_dtoa_r+0x69c>)
 800c8b6:	9010      	str	r0, [sp, #64]	; 0x40
 800c8b8:	9111      	str	r1, [sp, #68]	; 0x44
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	0020      	movs	r0, r4
 800c8be:	0029      	movs	r1, r5
 800c8c0:	f7f5 fdb8 	bl	8002434 <__aeabi_dmul>
 800c8c4:	9b08      	ldr	r3, [sp, #32]
 800c8c6:	0004      	movs	r4, r0
 800c8c8:	000d      	movs	r5, r1
 800c8ca:	9317      	str	r3, [sp, #92]	; 0x5c
 800c8cc:	e7be      	b.n	800c84c <_dtoa_r+0x558>
 800c8ce:	9808      	ldr	r0, [sp, #32]
 800c8d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8d2:	f7f5 fdaf 	bl	8002434 <__aeabi_dmul>
 800c8d6:	9a06      	ldr	r2, [sp, #24]
 800c8d8:	9b06      	ldr	r3, [sp, #24]
 800c8da:	4694      	mov	ip, r2
 800c8dc:	9308      	str	r3, [sp, #32]
 800c8de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8e0:	9010      	str	r0, [sp, #64]	; 0x40
 800c8e2:	9111      	str	r1, [sp, #68]	; 0x44
 800c8e4:	4463      	add	r3, ip
 800c8e6:	9319      	str	r3, [sp, #100]	; 0x64
 800c8e8:	0029      	movs	r1, r5
 800c8ea:	0020      	movs	r0, r4
 800c8ec:	f7f6 fbbe 	bl	800306c <__aeabi_d2iz>
 800c8f0:	9017      	str	r0, [sp, #92]	; 0x5c
 800c8f2:	f7f6 fbf1 	bl	80030d8 <__aeabi_i2d>
 800c8f6:	0002      	movs	r2, r0
 800c8f8:	000b      	movs	r3, r1
 800c8fa:	0020      	movs	r0, r4
 800c8fc:	0029      	movs	r1, r5
 800c8fe:	f7f6 f805 	bl	800290c <__aeabi_dsub>
 800c902:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c904:	9a08      	ldr	r2, [sp, #32]
 800c906:	3330      	adds	r3, #48	; 0x30
 800c908:	7013      	strb	r3, [r2, #0]
 800c90a:	0013      	movs	r3, r2
 800c90c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c90e:	3301      	adds	r3, #1
 800c910:	0004      	movs	r4, r0
 800c912:	000d      	movs	r5, r1
 800c914:	9308      	str	r3, [sp, #32]
 800c916:	4293      	cmp	r3, r2
 800c918:	d12c      	bne.n	800c974 <_dtoa_r+0x680>
 800c91a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c91c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c91e:	9a06      	ldr	r2, [sp, #24]
 800c920:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c922:	4694      	mov	ip, r2
 800c924:	4463      	add	r3, ip
 800c926:	2200      	movs	r2, #0
 800c928:	9308      	str	r3, [sp, #32]
 800c92a:	4b1e      	ldr	r3, [pc, #120]	; (800c9a4 <_dtoa_r+0x6b0>)
 800c92c:	f7f4 fe44 	bl	80015b8 <__aeabi_dadd>
 800c930:	0002      	movs	r2, r0
 800c932:	000b      	movs	r3, r1
 800c934:	0020      	movs	r0, r4
 800c936:	0029      	movs	r1, r5
 800c938:	f7f3 fdaa 	bl	8000490 <__aeabi_dcmpgt>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d000      	beq.n	800c942 <_dtoa_r+0x64e>
 800c940:	e080      	b.n	800ca44 <_dtoa_r+0x750>
 800c942:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c944:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c946:	2000      	movs	r0, #0
 800c948:	4916      	ldr	r1, [pc, #88]	; (800c9a4 <_dtoa_r+0x6b0>)
 800c94a:	f7f5 ffdf 	bl	800290c <__aeabi_dsub>
 800c94e:	0002      	movs	r2, r0
 800c950:	000b      	movs	r3, r1
 800c952:	0020      	movs	r0, r4
 800c954:	0029      	movs	r1, r5
 800c956:	f7f3 fd87 	bl	8000468 <__aeabi_dcmplt>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d100      	bne.n	800c960 <_dtoa_r+0x66c>
 800c95e:	e714      	b.n	800c78a <_dtoa_r+0x496>
 800c960:	9b08      	ldr	r3, [sp, #32]
 800c962:	001a      	movs	r2, r3
 800c964:	3a01      	subs	r2, #1
 800c966:	9208      	str	r2, [sp, #32]
 800c968:	7812      	ldrb	r2, [r2, #0]
 800c96a:	2a30      	cmp	r2, #48	; 0x30
 800c96c:	d0f8      	beq.n	800c960 <_dtoa_r+0x66c>
 800c96e:	9308      	str	r3, [sp, #32]
 800c970:	9602      	str	r6, [sp, #8]
 800c972:	e055      	b.n	800ca20 <_dtoa_r+0x72c>
 800c974:	2200      	movs	r2, #0
 800c976:	4b06      	ldr	r3, [pc, #24]	; (800c990 <_dtoa_r+0x69c>)
 800c978:	f7f5 fd5c 	bl	8002434 <__aeabi_dmul>
 800c97c:	0004      	movs	r4, r0
 800c97e:	000d      	movs	r5, r1
 800c980:	e7b2      	b.n	800c8e8 <_dtoa_r+0x5f4>
 800c982:	46c0      	nop			; (mov r8, r8)
 800c984:	0800f560 	.word	0x0800f560
 800c988:	0800f538 	.word	0x0800f538
 800c98c:	3ff00000 	.word	0x3ff00000
 800c990:	40240000 	.word	0x40240000
 800c994:	401c0000 	.word	0x401c0000
 800c998:	fcc00000 	.word	0xfcc00000
 800c99c:	40140000 	.word	0x40140000
 800c9a0:	7cc00000 	.word	0x7cc00000
 800c9a4:	3fe00000 	.word	0x3fe00000
 800c9a8:	9b07      	ldr	r3, [sp, #28]
 800c9aa:	9e06      	ldr	r6, [sp, #24]
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	199b      	adds	r3, r3, r6
 800c9b0:	930c      	str	r3, [sp, #48]	; 0x30
 800c9b2:	9c08      	ldr	r4, [sp, #32]
 800c9b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c9b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9ba:	0020      	movs	r0, r4
 800c9bc:	0029      	movs	r1, r5
 800c9be:	f7f5 f937 	bl	8001c30 <__aeabi_ddiv>
 800c9c2:	f7f6 fb53 	bl	800306c <__aeabi_d2iz>
 800c9c6:	9007      	str	r0, [sp, #28]
 800c9c8:	f7f6 fb86 	bl	80030d8 <__aeabi_i2d>
 800c9cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9d0:	f7f5 fd30 	bl	8002434 <__aeabi_dmul>
 800c9d4:	0002      	movs	r2, r0
 800c9d6:	000b      	movs	r3, r1
 800c9d8:	0020      	movs	r0, r4
 800c9da:	0029      	movs	r1, r5
 800c9dc:	f7f5 ff96 	bl	800290c <__aeabi_dsub>
 800c9e0:	0033      	movs	r3, r6
 800c9e2:	9a07      	ldr	r2, [sp, #28]
 800c9e4:	3601      	adds	r6, #1
 800c9e6:	3230      	adds	r2, #48	; 0x30
 800c9e8:	701a      	strb	r2, [r3, #0]
 800c9ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9ec:	9608      	str	r6, [sp, #32]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d139      	bne.n	800ca66 <_dtoa_r+0x772>
 800c9f2:	0002      	movs	r2, r0
 800c9f4:	000b      	movs	r3, r1
 800c9f6:	f7f4 fddf 	bl	80015b8 <__aeabi_dadd>
 800c9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9fe:	0004      	movs	r4, r0
 800ca00:	000d      	movs	r5, r1
 800ca02:	f7f3 fd45 	bl	8000490 <__aeabi_dcmpgt>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d11b      	bne.n	800ca42 <_dtoa_r+0x74e>
 800ca0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca0e:	0020      	movs	r0, r4
 800ca10:	0029      	movs	r1, r5
 800ca12:	f7f3 fd23 	bl	800045c <__aeabi_dcmpeq>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d002      	beq.n	800ca20 <_dtoa_r+0x72c>
 800ca1a:	9b07      	ldr	r3, [sp, #28]
 800ca1c:	07db      	lsls	r3, r3, #31
 800ca1e:	d410      	bmi.n	800ca42 <_dtoa_r+0x74e>
 800ca20:	0038      	movs	r0, r7
 800ca22:	9905      	ldr	r1, [sp, #20]
 800ca24:	f000 fe82 	bl	800d72c <_Bfree>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	9a08      	ldr	r2, [sp, #32]
 800ca2c:	9802      	ldr	r0, [sp, #8]
 800ca2e:	7013      	strb	r3, [r2, #0]
 800ca30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ca32:	3001      	adds	r0, #1
 800ca34:	6018      	str	r0, [r3, #0]
 800ca36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d100      	bne.n	800ca3e <_dtoa_r+0x74a>
 800ca3c:	e4a6      	b.n	800c38c <_dtoa_r+0x98>
 800ca3e:	601a      	str	r2, [r3, #0]
 800ca40:	e4a4      	b.n	800c38c <_dtoa_r+0x98>
 800ca42:	9e02      	ldr	r6, [sp, #8]
 800ca44:	9b08      	ldr	r3, [sp, #32]
 800ca46:	9308      	str	r3, [sp, #32]
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	781a      	ldrb	r2, [r3, #0]
 800ca4c:	2a39      	cmp	r2, #57	; 0x39
 800ca4e:	d106      	bne.n	800ca5e <_dtoa_r+0x76a>
 800ca50:	9a06      	ldr	r2, [sp, #24]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d1f7      	bne.n	800ca46 <_dtoa_r+0x752>
 800ca56:	2230      	movs	r2, #48	; 0x30
 800ca58:	9906      	ldr	r1, [sp, #24]
 800ca5a:	3601      	adds	r6, #1
 800ca5c:	700a      	strb	r2, [r1, #0]
 800ca5e:	781a      	ldrb	r2, [r3, #0]
 800ca60:	3201      	adds	r2, #1
 800ca62:	701a      	strb	r2, [r3, #0]
 800ca64:	e784      	b.n	800c970 <_dtoa_r+0x67c>
 800ca66:	2200      	movs	r2, #0
 800ca68:	4baa      	ldr	r3, [pc, #680]	; (800cd14 <_dtoa_r+0xa20>)
 800ca6a:	f7f5 fce3 	bl	8002434 <__aeabi_dmul>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2300      	movs	r3, #0
 800ca72:	0004      	movs	r4, r0
 800ca74:	000d      	movs	r5, r1
 800ca76:	f7f3 fcf1 	bl	800045c <__aeabi_dcmpeq>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d09b      	beq.n	800c9b6 <_dtoa_r+0x6c2>
 800ca7e:	e7cf      	b.n	800ca20 <_dtoa_r+0x72c>
 800ca80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ca84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	d012      	beq.n	800cab0 <_dtoa_r+0x7bc>
 800ca8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ca8c:	2a01      	cmp	r2, #1
 800ca8e:	dc66      	bgt.n	800cb5e <_dtoa_r+0x86a>
 800ca90:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ca92:	2a00      	cmp	r2, #0
 800ca94:	d05d      	beq.n	800cb52 <_dtoa_r+0x85e>
 800ca96:	4aa0      	ldr	r2, [pc, #640]	; (800cd18 <_dtoa_r+0xa24>)
 800ca98:	189b      	adds	r3, r3, r2
 800ca9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca9c:	2101      	movs	r1, #1
 800ca9e:	18d2      	adds	r2, r2, r3
 800caa0:	920a      	str	r2, [sp, #40]	; 0x28
 800caa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800caa4:	0038      	movs	r0, r7
 800caa6:	18d3      	adds	r3, r2, r3
 800caa8:	930d      	str	r3, [sp, #52]	; 0x34
 800caaa:	f000 ff3b 	bl	800d924 <__i2b>
 800caae:	0005      	movs	r5, r0
 800cab0:	2c00      	cmp	r4, #0
 800cab2:	dd0e      	ble.n	800cad2 <_dtoa_r+0x7de>
 800cab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	dd0b      	ble.n	800cad2 <_dtoa_r+0x7de>
 800caba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cabc:	0023      	movs	r3, r4
 800cabe:	4294      	cmp	r4, r2
 800cac0:	dd00      	ble.n	800cac4 <_dtoa_r+0x7d0>
 800cac2:	0013      	movs	r3, r2
 800cac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cac6:	1ae4      	subs	r4, r4, r3
 800cac8:	1ad2      	subs	r2, r2, r3
 800caca:	920a      	str	r2, [sp, #40]	; 0x28
 800cacc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	930d      	str	r3, [sp, #52]	; 0x34
 800cad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d01f      	beq.n	800cb18 <_dtoa_r+0x824>
 800cad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d054      	beq.n	800cb88 <_dtoa_r+0x894>
 800cade:	2e00      	cmp	r6, #0
 800cae0:	dd11      	ble.n	800cb06 <_dtoa_r+0x812>
 800cae2:	0029      	movs	r1, r5
 800cae4:	0032      	movs	r2, r6
 800cae6:	0038      	movs	r0, r7
 800cae8:	f000 ffe2 	bl	800dab0 <__pow5mult>
 800caec:	9a05      	ldr	r2, [sp, #20]
 800caee:	0001      	movs	r1, r0
 800caf0:	0005      	movs	r5, r0
 800caf2:	0038      	movs	r0, r7
 800caf4:	f000 ff2c 	bl	800d950 <__multiply>
 800caf8:	9905      	ldr	r1, [sp, #20]
 800cafa:	9014      	str	r0, [sp, #80]	; 0x50
 800cafc:	0038      	movs	r0, r7
 800cafe:	f000 fe15 	bl	800d72c <_Bfree>
 800cb02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb04:	9305      	str	r3, [sp, #20]
 800cb06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb08:	1b9a      	subs	r2, r3, r6
 800cb0a:	42b3      	cmp	r3, r6
 800cb0c:	d004      	beq.n	800cb18 <_dtoa_r+0x824>
 800cb0e:	0038      	movs	r0, r7
 800cb10:	9905      	ldr	r1, [sp, #20]
 800cb12:	f000 ffcd 	bl	800dab0 <__pow5mult>
 800cb16:	9005      	str	r0, [sp, #20]
 800cb18:	2101      	movs	r1, #1
 800cb1a:	0038      	movs	r0, r7
 800cb1c:	f000 ff02 	bl	800d924 <__i2b>
 800cb20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb22:	0006      	movs	r6, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	dd31      	ble.n	800cb8c <_dtoa_r+0x898>
 800cb28:	001a      	movs	r2, r3
 800cb2a:	0001      	movs	r1, r0
 800cb2c:	0038      	movs	r0, r7
 800cb2e:	f000 ffbf 	bl	800dab0 <__pow5mult>
 800cb32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb34:	0006      	movs	r6, r0
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	dd2d      	ble.n	800cb96 <_dtoa_r+0x8a2>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	930e      	str	r3, [sp, #56]	; 0x38
 800cb3e:	6933      	ldr	r3, [r6, #16]
 800cb40:	3303      	adds	r3, #3
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	18f3      	adds	r3, r6, r3
 800cb46:	6858      	ldr	r0, [r3, #4]
 800cb48:	f000 fea4 	bl	800d894 <__hi0bits>
 800cb4c:	2320      	movs	r3, #32
 800cb4e:	1a18      	subs	r0, r3, r0
 800cb50:	e039      	b.n	800cbc6 <_dtoa_r+0x8d2>
 800cb52:	2336      	movs	r3, #54	; 0x36
 800cb54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cb56:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cb58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cb5a:	1a9b      	subs	r3, r3, r2
 800cb5c:	e79d      	b.n	800ca9a <_dtoa_r+0x7a6>
 800cb5e:	9b07      	ldr	r3, [sp, #28]
 800cb60:	1e5e      	subs	r6, r3, #1
 800cb62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb64:	42b3      	cmp	r3, r6
 800cb66:	db07      	blt.n	800cb78 <_dtoa_r+0x884>
 800cb68:	1b9e      	subs	r6, r3, r6
 800cb6a:	9b07      	ldr	r3, [sp, #28]
 800cb6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	da93      	bge.n	800ca9a <_dtoa_r+0x7a6>
 800cb72:	1ae4      	subs	r4, r4, r3
 800cb74:	2300      	movs	r3, #0
 800cb76:	e790      	b.n	800ca9a <_dtoa_r+0x7a6>
 800cb78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cb7c:	1af3      	subs	r3, r6, r3
 800cb7e:	18d3      	adds	r3, r2, r3
 800cb80:	960e      	str	r6, [sp, #56]	; 0x38
 800cb82:	9315      	str	r3, [sp, #84]	; 0x54
 800cb84:	2600      	movs	r6, #0
 800cb86:	e7f0      	b.n	800cb6a <_dtoa_r+0x876>
 800cb88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb8a:	e7c0      	b.n	800cb0e <_dtoa_r+0x81a>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	930e      	str	r3, [sp, #56]	; 0x38
 800cb90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	dc13      	bgt.n	800cbbe <_dtoa_r+0x8ca>
 800cb96:	2300      	movs	r3, #0
 800cb98:	930e      	str	r3, [sp, #56]	; 0x38
 800cb9a:	9b08      	ldr	r3, [sp, #32]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10e      	bne.n	800cbbe <_dtoa_r+0x8ca>
 800cba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba2:	031b      	lsls	r3, r3, #12
 800cba4:	d10b      	bne.n	800cbbe <_dtoa_r+0x8ca>
 800cba6:	4b5d      	ldr	r3, [pc, #372]	; (800cd1c <_dtoa_r+0xa28>)
 800cba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbaa:	4213      	tst	r3, r2
 800cbac:	d007      	beq.n	800cbbe <_dtoa_r+0x8ca>
 800cbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	930a      	str	r3, [sp, #40]	; 0x28
 800cbb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	930d      	str	r3, [sp, #52]	; 0x34
 800cbba:	2301      	movs	r3, #1
 800cbbc:	930e      	str	r3, [sp, #56]	; 0x38
 800cbbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1bb      	bne.n	800cb3e <_dtoa_r+0x84a>
 800cbc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbc8:	221f      	movs	r2, #31
 800cbca:	1818      	adds	r0, r3, r0
 800cbcc:	0003      	movs	r3, r0
 800cbce:	4013      	ands	r3, r2
 800cbd0:	4210      	tst	r0, r2
 800cbd2:	d046      	beq.n	800cc62 <_dtoa_r+0x96e>
 800cbd4:	3201      	adds	r2, #1
 800cbd6:	1ad2      	subs	r2, r2, r3
 800cbd8:	2a04      	cmp	r2, #4
 800cbda:	dd3f      	ble.n	800cc5c <_dtoa_r+0x968>
 800cbdc:	221c      	movs	r2, #28
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbe2:	18e4      	adds	r4, r4, r3
 800cbe4:	18d2      	adds	r2, r2, r3
 800cbe6:	920a      	str	r2, [sp, #40]	; 0x28
 800cbe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cbea:	18d3      	adds	r3, r2, r3
 800cbec:	930d      	str	r3, [sp, #52]	; 0x34
 800cbee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	dd05      	ble.n	800cc00 <_dtoa_r+0x90c>
 800cbf4:	001a      	movs	r2, r3
 800cbf6:	0038      	movs	r0, r7
 800cbf8:	9905      	ldr	r1, [sp, #20]
 800cbfa:	f000 ffb5 	bl	800db68 <__lshift>
 800cbfe:	9005      	str	r0, [sp, #20]
 800cc00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	dd05      	ble.n	800cc12 <_dtoa_r+0x91e>
 800cc06:	0031      	movs	r1, r6
 800cc08:	001a      	movs	r2, r3
 800cc0a:	0038      	movs	r0, r7
 800cc0c:	f000 ffac 	bl	800db68 <__lshift>
 800cc10:	0006      	movs	r6, r0
 800cc12:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d026      	beq.n	800cc66 <_dtoa_r+0x972>
 800cc18:	0031      	movs	r1, r6
 800cc1a:	9805      	ldr	r0, [sp, #20]
 800cc1c:	f001 f812 	bl	800dc44 <__mcmp>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	da20      	bge.n	800cc66 <_dtoa_r+0x972>
 800cc24:	9b02      	ldr	r3, [sp, #8]
 800cc26:	220a      	movs	r2, #10
 800cc28:	3b01      	subs	r3, #1
 800cc2a:	9302      	str	r3, [sp, #8]
 800cc2c:	0038      	movs	r0, r7
 800cc2e:	2300      	movs	r3, #0
 800cc30:	9905      	ldr	r1, [sp, #20]
 800cc32:	f000 fd9f 	bl	800d774 <__multadd>
 800cc36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc38:	9005      	str	r0, [sp, #20]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d100      	bne.n	800cc40 <_dtoa_r+0x94c>
 800cc3e:	e166      	b.n	800cf0e <_dtoa_r+0xc1a>
 800cc40:	2300      	movs	r3, #0
 800cc42:	0029      	movs	r1, r5
 800cc44:	220a      	movs	r2, #10
 800cc46:	0038      	movs	r0, r7
 800cc48:	f000 fd94 	bl	800d774 <__multadd>
 800cc4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc4e:	0005      	movs	r5, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	dc47      	bgt.n	800cce4 <_dtoa_r+0x9f0>
 800cc54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	dc0d      	bgt.n	800cc76 <_dtoa_r+0x982>
 800cc5a:	e043      	b.n	800cce4 <_dtoa_r+0x9f0>
 800cc5c:	2a04      	cmp	r2, #4
 800cc5e:	d0c6      	beq.n	800cbee <_dtoa_r+0x8fa>
 800cc60:	0013      	movs	r3, r2
 800cc62:	331c      	adds	r3, #28
 800cc64:	e7bc      	b.n	800cbe0 <_dtoa_r+0x8ec>
 800cc66:	9b07      	ldr	r3, [sp, #28]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	dc35      	bgt.n	800ccd8 <_dtoa_r+0x9e4>
 800cc6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	dd32      	ble.n	800ccd8 <_dtoa_r+0x9e4>
 800cc72:	9b07      	ldr	r3, [sp, #28]
 800cc74:	930c      	str	r3, [sp, #48]	; 0x30
 800cc76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10c      	bne.n	800cc96 <_dtoa_r+0x9a2>
 800cc7c:	0031      	movs	r1, r6
 800cc7e:	2205      	movs	r2, #5
 800cc80:	0038      	movs	r0, r7
 800cc82:	f000 fd77 	bl	800d774 <__multadd>
 800cc86:	0006      	movs	r6, r0
 800cc88:	0001      	movs	r1, r0
 800cc8a:	9805      	ldr	r0, [sp, #20]
 800cc8c:	f000 ffda 	bl	800dc44 <__mcmp>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	dd00      	ble.n	800cc96 <_dtoa_r+0x9a2>
 800cc94:	e5a5      	b.n	800c7e2 <_dtoa_r+0x4ee>
 800cc96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cc98:	43db      	mvns	r3, r3
 800cc9a:	9302      	str	r3, [sp, #8]
 800cc9c:	9b06      	ldr	r3, [sp, #24]
 800cc9e:	9308      	str	r3, [sp, #32]
 800cca0:	2400      	movs	r4, #0
 800cca2:	0031      	movs	r1, r6
 800cca4:	0038      	movs	r0, r7
 800cca6:	f000 fd41 	bl	800d72c <_Bfree>
 800ccaa:	2d00      	cmp	r5, #0
 800ccac:	d100      	bne.n	800ccb0 <_dtoa_r+0x9bc>
 800ccae:	e6b7      	b.n	800ca20 <_dtoa_r+0x72c>
 800ccb0:	2c00      	cmp	r4, #0
 800ccb2:	d005      	beq.n	800ccc0 <_dtoa_r+0x9cc>
 800ccb4:	42ac      	cmp	r4, r5
 800ccb6:	d003      	beq.n	800ccc0 <_dtoa_r+0x9cc>
 800ccb8:	0021      	movs	r1, r4
 800ccba:	0038      	movs	r0, r7
 800ccbc:	f000 fd36 	bl	800d72c <_Bfree>
 800ccc0:	0029      	movs	r1, r5
 800ccc2:	0038      	movs	r0, r7
 800ccc4:	f000 fd32 	bl	800d72c <_Bfree>
 800ccc8:	e6aa      	b.n	800ca20 <_dtoa_r+0x72c>
 800ccca:	2600      	movs	r6, #0
 800cccc:	0035      	movs	r5, r6
 800ccce:	e7e2      	b.n	800cc96 <_dtoa_r+0x9a2>
 800ccd0:	9602      	str	r6, [sp, #8]
 800ccd2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800ccd4:	0035      	movs	r5, r6
 800ccd6:	e584      	b.n	800c7e2 <_dtoa_r+0x4ee>
 800ccd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d100      	bne.n	800cce0 <_dtoa_r+0x9ec>
 800ccde:	e0ce      	b.n	800ce7e <_dtoa_r+0xb8a>
 800cce0:	9b07      	ldr	r3, [sp, #28]
 800cce2:	930c      	str	r3, [sp, #48]	; 0x30
 800cce4:	2c00      	cmp	r4, #0
 800cce6:	dd05      	ble.n	800ccf4 <_dtoa_r+0xa00>
 800cce8:	0029      	movs	r1, r5
 800ccea:	0022      	movs	r2, r4
 800ccec:	0038      	movs	r0, r7
 800ccee:	f000 ff3b 	bl	800db68 <__lshift>
 800ccf2:	0005      	movs	r5, r0
 800ccf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccf6:	0028      	movs	r0, r5
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d022      	beq.n	800cd42 <_dtoa_r+0xa4e>
 800ccfc:	0038      	movs	r0, r7
 800ccfe:	6869      	ldr	r1, [r5, #4]
 800cd00:	f000 fcd0 	bl	800d6a4 <_Balloc>
 800cd04:	1e04      	subs	r4, r0, #0
 800cd06:	d10f      	bne.n	800cd28 <_dtoa_r+0xa34>
 800cd08:	0002      	movs	r2, r0
 800cd0a:	4b05      	ldr	r3, [pc, #20]	; (800cd20 <_dtoa_r+0xa2c>)
 800cd0c:	4905      	ldr	r1, [pc, #20]	; (800cd24 <_dtoa_r+0xa30>)
 800cd0e:	f7ff fb06 	bl	800c31e <_dtoa_r+0x2a>
 800cd12:	46c0      	nop			; (mov r8, r8)
 800cd14:	40240000 	.word	0x40240000
 800cd18:	00000433 	.word	0x00000433
 800cd1c:	7ff00000 	.word	0x7ff00000
 800cd20:	0800f451 	.word	0x0800f451
 800cd24:	000002ea 	.word	0x000002ea
 800cd28:	0029      	movs	r1, r5
 800cd2a:	692b      	ldr	r3, [r5, #16]
 800cd2c:	310c      	adds	r1, #12
 800cd2e:	1c9a      	adds	r2, r3, #2
 800cd30:	0092      	lsls	r2, r2, #2
 800cd32:	300c      	adds	r0, #12
 800cd34:	f000 fc9d 	bl	800d672 <memcpy>
 800cd38:	2201      	movs	r2, #1
 800cd3a:	0021      	movs	r1, r4
 800cd3c:	0038      	movs	r0, r7
 800cd3e:	f000 ff13 	bl	800db68 <__lshift>
 800cd42:	9b06      	ldr	r3, [sp, #24]
 800cd44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd46:	930a      	str	r3, [sp, #40]	; 0x28
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	189b      	adds	r3, r3, r2
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	002c      	movs	r4, r5
 800cd50:	0005      	movs	r5, r0
 800cd52:	9314      	str	r3, [sp, #80]	; 0x50
 800cd54:	9b08      	ldr	r3, [sp, #32]
 800cd56:	4013      	ands	r3, r2
 800cd58:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd5a:	0031      	movs	r1, r6
 800cd5c:	9805      	ldr	r0, [sp, #20]
 800cd5e:	f7ff fa3d 	bl	800c1dc <quorem>
 800cd62:	0003      	movs	r3, r0
 800cd64:	0021      	movs	r1, r4
 800cd66:	3330      	adds	r3, #48	; 0x30
 800cd68:	900d      	str	r0, [sp, #52]	; 0x34
 800cd6a:	9805      	ldr	r0, [sp, #20]
 800cd6c:	9307      	str	r3, [sp, #28]
 800cd6e:	f000 ff69 	bl	800dc44 <__mcmp>
 800cd72:	002a      	movs	r2, r5
 800cd74:	900e      	str	r0, [sp, #56]	; 0x38
 800cd76:	0031      	movs	r1, r6
 800cd78:	0038      	movs	r0, r7
 800cd7a:	f000 ff7f 	bl	800dc7c <__mdiff>
 800cd7e:	68c3      	ldr	r3, [r0, #12]
 800cd80:	9008      	str	r0, [sp, #32]
 800cd82:	9310      	str	r3, [sp, #64]	; 0x40
 800cd84:	2301      	movs	r3, #1
 800cd86:	930c      	str	r3, [sp, #48]	; 0x30
 800cd88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d104      	bne.n	800cd98 <_dtoa_r+0xaa4>
 800cd8e:	0001      	movs	r1, r0
 800cd90:	9805      	ldr	r0, [sp, #20]
 800cd92:	f000 ff57 	bl	800dc44 <__mcmp>
 800cd96:	900c      	str	r0, [sp, #48]	; 0x30
 800cd98:	0038      	movs	r0, r7
 800cd9a:	9908      	ldr	r1, [sp, #32]
 800cd9c:	f000 fcc6 	bl	800d72c <_Bfree>
 800cda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cda4:	3301      	adds	r3, #1
 800cda6:	9308      	str	r3, [sp, #32]
 800cda8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	d10c      	bne.n	800cdcc <_dtoa_r+0xad8>
 800cdb2:	9b07      	ldr	r3, [sp, #28]
 800cdb4:	2b39      	cmp	r3, #57	; 0x39
 800cdb6:	d026      	beq.n	800ce06 <_dtoa_r+0xb12>
 800cdb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	dd02      	ble.n	800cdc4 <_dtoa_r+0xad0>
 800cdbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdc0:	3331      	adds	r3, #49	; 0x31
 800cdc2:	9307      	str	r3, [sp, #28]
 800cdc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdc6:	9a07      	ldr	r2, [sp, #28]
 800cdc8:	701a      	strb	r2, [r3, #0]
 800cdca:	e76a      	b.n	800cca2 <_dtoa_r+0x9ae>
 800cdcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	db04      	blt.n	800cddc <_dtoa_r+0xae8>
 800cdd2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	d11f      	bne.n	800ce1c <_dtoa_r+0xb28>
 800cddc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	ddf0      	ble.n	800cdc4 <_dtoa_r+0xad0>
 800cde2:	9905      	ldr	r1, [sp, #20]
 800cde4:	2201      	movs	r2, #1
 800cde6:	0038      	movs	r0, r7
 800cde8:	f000 febe 	bl	800db68 <__lshift>
 800cdec:	0031      	movs	r1, r6
 800cdee:	9005      	str	r0, [sp, #20]
 800cdf0:	f000 ff28 	bl	800dc44 <__mcmp>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	dc03      	bgt.n	800ce00 <_dtoa_r+0xb0c>
 800cdf8:	d1e4      	bne.n	800cdc4 <_dtoa_r+0xad0>
 800cdfa:	9b07      	ldr	r3, [sp, #28]
 800cdfc:	07db      	lsls	r3, r3, #31
 800cdfe:	d5e1      	bpl.n	800cdc4 <_dtoa_r+0xad0>
 800ce00:	9b07      	ldr	r3, [sp, #28]
 800ce02:	2b39      	cmp	r3, #57	; 0x39
 800ce04:	d1db      	bne.n	800cdbe <_dtoa_r+0xaca>
 800ce06:	2339      	movs	r3, #57	; 0x39
 800ce08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce0a:	7013      	strb	r3, [r2, #0]
 800ce0c:	9b08      	ldr	r3, [sp, #32]
 800ce0e:	9308      	str	r3, [sp, #32]
 800ce10:	3b01      	subs	r3, #1
 800ce12:	781a      	ldrb	r2, [r3, #0]
 800ce14:	2a39      	cmp	r2, #57	; 0x39
 800ce16:	d068      	beq.n	800ceea <_dtoa_r+0xbf6>
 800ce18:	3201      	adds	r2, #1
 800ce1a:	e7d5      	b.n	800cdc8 <_dtoa_r+0xad4>
 800ce1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	dd07      	ble.n	800ce32 <_dtoa_r+0xb3e>
 800ce22:	9b07      	ldr	r3, [sp, #28]
 800ce24:	2b39      	cmp	r3, #57	; 0x39
 800ce26:	d0ee      	beq.n	800ce06 <_dtoa_r+0xb12>
 800ce28:	9b07      	ldr	r3, [sp, #28]
 800ce2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	7013      	strb	r3, [r2, #0]
 800ce30:	e737      	b.n	800cca2 <_dtoa_r+0x9ae>
 800ce32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce34:	9a07      	ldr	r2, [sp, #28]
 800ce36:	701a      	strb	r2, [r3, #0]
 800ce38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d03e      	beq.n	800cebe <_dtoa_r+0xbca>
 800ce40:	2300      	movs	r3, #0
 800ce42:	220a      	movs	r2, #10
 800ce44:	9905      	ldr	r1, [sp, #20]
 800ce46:	0038      	movs	r0, r7
 800ce48:	f000 fc94 	bl	800d774 <__multadd>
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	9005      	str	r0, [sp, #20]
 800ce50:	220a      	movs	r2, #10
 800ce52:	0021      	movs	r1, r4
 800ce54:	0038      	movs	r0, r7
 800ce56:	42ac      	cmp	r4, r5
 800ce58:	d106      	bne.n	800ce68 <_dtoa_r+0xb74>
 800ce5a:	f000 fc8b 	bl	800d774 <__multadd>
 800ce5e:	0004      	movs	r4, r0
 800ce60:	0005      	movs	r5, r0
 800ce62:	9b08      	ldr	r3, [sp, #32]
 800ce64:	930a      	str	r3, [sp, #40]	; 0x28
 800ce66:	e778      	b.n	800cd5a <_dtoa_r+0xa66>
 800ce68:	f000 fc84 	bl	800d774 <__multadd>
 800ce6c:	0029      	movs	r1, r5
 800ce6e:	0004      	movs	r4, r0
 800ce70:	2300      	movs	r3, #0
 800ce72:	220a      	movs	r2, #10
 800ce74:	0038      	movs	r0, r7
 800ce76:	f000 fc7d 	bl	800d774 <__multadd>
 800ce7a:	0005      	movs	r5, r0
 800ce7c:	e7f1      	b.n	800ce62 <_dtoa_r+0xb6e>
 800ce7e:	9b07      	ldr	r3, [sp, #28]
 800ce80:	930c      	str	r3, [sp, #48]	; 0x30
 800ce82:	2400      	movs	r4, #0
 800ce84:	0031      	movs	r1, r6
 800ce86:	9805      	ldr	r0, [sp, #20]
 800ce88:	f7ff f9a8 	bl	800c1dc <quorem>
 800ce8c:	9b06      	ldr	r3, [sp, #24]
 800ce8e:	3030      	adds	r0, #48	; 0x30
 800ce90:	5518      	strb	r0, [r3, r4]
 800ce92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce94:	3401      	adds	r4, #1
 800ce96:	9007      	str	r0, [sp, #28]
 800ce98:	42a3      	cmp	r3, r4
 800ce9a:	dd07      	ble.n	800ceac <_dtoa_r+0xbb8>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	220a      	movs	r2, #10
 800cea0:	0038      	movs	r0, r7
 800cea2:	9905      	ldr	r1, [sp, #20]
 800cea4:	f000 fc66 	bl	800d774 <__multadd>
 800cea8:	9005      	str	r0, [sp, #20]
 800ceaa:	e7eb      	b.n	800ce84 <_dtoa_r+0xb90>
 800ceac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ceae:	2001      	movs	r0, #1
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	dd00      	ble.n	800ceb6 <_dtoa_r+0xbc2>
 800ceb4:	0018      	movs	r0, r3
 800ceb6:	2400      	movs	r4, #0
 800ceb8:	9b06      	ldr	r3, [sp, #24]
 800ceba:	181b      	adds	r3, r3, r0
 800cebc:	9308      	str	r3, [sp, #32]
 800cebe:	9905      	ldr	r1, [sp, #20]
 800cec0:	2201      	movs	r2, #1
 800cec2:	0038      	movs	r0, r7
 800cec4:	f000 fe50 	bl	800db68 <__lshift>
 800cec8:	0031      	movs	r1, r6
 800ceca:	9005      	str	r0, [sp, #20]
 800cecc:	f000 feba 	bl	800dc44 <__mcmp>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	dc9b      	bgt.n	800ce0c <_dtoa_r+0xb18>
 800ced4:	d102      	bne.n	800cedc <_dtoa_r+0xbe8>
 800ced6:	9b07      	ldr	r3, [sp, #28]
 800ced8:	07db      	lsls	r3, r3, #31
 800ceda:	d497      	bmi.n	800ce0c <_dtoa_r+0xb18>
 800cedc:	9b08      	ldr	r3, [sp, #32]
 800cede:	9308      	str	r3, [sp, #32]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	781a      	ldrb	r2, [r3, #0]
 800cee4:	2a30      	cmp	r2, #48	; 0x30
 800cee6:	d0fa      	beq.n	800cede <_dtoa_r+0xbea>
 800cee8:	e6db      	b.n	800cca2 <_dtoa_r+0x9ae>
 800ceea:	9a06      	ldr	r2, [sp, #24]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d18e      	bne.n	800ce0e <_dtoa_r+0xb1a>
 800cef0:	9b02      	ldr	r3, [sp, #8]
 800cef2:	3301      	adds	r3, #1
 800cef4:	9302      	str	r3, [sp, #8]
 800cef6:	2331      	movs	r3, #49	; 0x31
 800cef8:	e799      	b.n	800ce2e <_dtoa_r+0xb3a>
 800cefa:	4b09      	ldr	r3, [pc, #36]	; (800cf20 <_dtoa_r+0xc2c>)
 800cefc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cefe:	9306      	str	r3, [sp, #24]
 800cf00:	4b08      	ldr	r3, [pc, #32]	; (800cf24 <_dtoa_r+0xc30>)
 800cf02:	2a00      	cmp	r2, #0
 800cf04:	d001      	beq.n	800cf0a <_dtoa_r+0xc16>
 800cf06:	f7ff fa3f 	bl	800c388 <_dtoa_r+0x94>
 800cf0a:	f7ff fa3f 	bl	800c38c <_dtoa_r+0x98>
 800cf0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	dcb6      	bgt.n	800ce82 <_dtoa_r+0xb8e>
 800cf14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	dd00      	ble.n	800cf1c <_dtoa_r+0xc28>
 800cf1a:	e6ac      	b.n	800cc76 <_dtoa_r+0x982>
 800cf1c:	e7b1      	b.n	800ce82 <_dtoa_r+0xb8e>
 800cf1e:	46c0      	nop			; (mov r8, r8)
 800cf20:	0800f3e9 	.word	0x0800f3e9
 800cf24:	0800f3f1 	.word	0x0800f3f1

0800cf28 <fiprintf>:
 800cf28:	b40e      	push	{r1, r2, r3}
 800cf2a:	b503      	push	{r0, r1, lr}
 800cf2c:	0001      	movs	r1, r0
 800cf2e:	ab03      	add	r3, sp, #12
 800cf30:	4804      	ldr	r0, [pc, #16]	; (800cf44 <fiprintf+0x1c>)
 800cf32:	cb04      	ldmia	r3!, {r2}
 800cf34:	6800      	ldr	r0, [r0, #0]
 800cf36:	9301      	str	r3, [sp, #4]
 800cf38:	f001 fa34 	bl	800e3a4 <_vfiprintf_r>
 800cf3c:	b002      	add	sp, #8
 800cf3e:	bc08      	pop	{r3}
 800cf40:	b003      	add	sp, #12
 800cf42:	4718      	bx	r3
 800cf44:	2000000c 	.word	0x2000000c

0800cf48 <rshift>:
 800cf48:	0002      	movs	r2, r0
 800cf4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf4c:	6904      	ldr	r4, [r0, #16]
 800cf4e:	3214      	adds	r2, #20
 800cf50:	0013      	movs	r3, r2
 800cf52:	b085      	sub	sp, #20
 800cf54:	114f      	asrs	r7, r1, #5
 800cf56:	42bc      	cmp	r4, r7
 800cf58:	dd31      	ble.n	800cfbe <rshift+0x76>
 800cf5a:	00bb      	lsls	r3, r7, #2
 800cf5c:	18d3      	adds	r3, r2, r3
 800cf5e:	261f      	movs	r6, #31
 800cf60:	9301      	str	r3, [sp, #4]
 800cf62:	000b      	movs	r3, r1
 800cf64:	00a5      	lsls	r5, r4, #2
 800cf66:	4033      	ands	r3, r6
 800cf68:	1955      	adds	r5, r2, r5
 800cf6a:	9302      	str	r3, [sp, #8]
 800cf6c:	4231      	tst	r1, r6
 800cf6e:	d10c      	bne.n	800cf8a <rshift+0x42>
 800cf70:	0016      	movs	r6, r2
 800cf72:	9901      	ldr	r1, [sp, #4]
 800cf74:	428d      	cmp	r5, r1
 800cf76:	d838      	bhi.n	800cfea <rshift+0xa2>
 800cf78:	9901      	ldr	r1, [sp, #4]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	3903      	subs	r1, #3
 800cf7e:	428d      	cmp	r5, r1
 800cf80:	d301      	bcc.n	800cf86 <rshift+0x3e>
 800cf82:	1be3      	subs	r3, r4, r7
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	18d3      	adds	r3, r2, r3
 800cf88:	e019      	b.n	800cfbe <rshift+0x76>
 800cf8a:	2120      	movs	r1, #32
 800cf8c:	9b02      	ldr	r3, [sp, #8]
 800cf8e:	9e01      	ldr	r6, [sp, #4]
 800cf90:	1acb      	subs	r3, r1, r3
 800cf92:	9303      	str	r3, [sp, #12]
 800cf94:	ce02      	ldmia	r6!, {r1}
 800cf96:	9b02      	ldr	r3, [sp, #8]
 800cf98:	4694      	mov	ip, r2
 800cf9a:	40d9      	lsrs	r1, r3
 800cf9c:	9100      	str	r1, [sp, #0]
 800cf9e:	42b5      	cmp	r5, r6
 800cfa0:	d816      	bhi.n	800cfd0 <rshift+0x88>
 800cfa2:	9e01      	ldr	r6, [sp, #4]
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	3601      	adds	r6, #1
 800cfa8:	42b5      	cmp	r5, r6
 800cfaa:	d302      	bcc.n	800cfb2 <rshift+0x6a>
 800cfac:	1be3      	subs	r3, r4, r7
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	3b04      	subs	r3, #4
 800cfb2:	9900      	ldr	r1, [sp, #0]
 800cfb4:	18d3      	adds	r3, r2, r3
 800cfb6:	6019      	str	r1, [r3, #0]
 800cfb8:	2900      	cmp	r1, #0
 800cfba:	d000      	beq.n	800cfbe <rshift+0x76>
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	1a99      	subs	r1, r3, r2
 800cfc0:	1089      	asrs	r1, r1, #2
 800cfc2:	6101      	str	r1, [r0, #16]
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d101      	bne.n	800cfcc <rshift+0x84>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	6143      	str	r3, [r0, #20]
 800cfcc:	b005      	add	sp, #20
 800cfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfd0:	6833      	ldr	r3, [r6, #0]
 800cfd2:	9903      	ldr	r1, [sp, #12]
 800cfd4:	408b      	lsls	r3, r1
 800cfd6:	9900      	ldr	r1, [sp, #0]
 800cfd8:	4319      	orrs	r1, r3
 800cfda:	4663      	mov	r3, ip
 800cfdc:	c302      	stmia	r3!, {r1}
 800cfde:	469c      	mov	ip, r3
 800cfe0:	ce02      	ldmia	r6!, {r1}
 800cfe2:	9b02      	ldr	r3, [sp, #8]
 800cfe4:	40d9      	lsrs	r1, r3
 800cfe6:	9100      	str	r1, [sp, #0]
 800cfe8:	e7d9      	b.n	800cf9e <rshift+0x56>
 800cfea:	c908      	ldmia	r1!, {r3}
 800cfec:	c608      	stmia	r6!, {r3}
 800cfee:	e7c1      	b.n	800cf74 <rshift+0x2c>

0800cff0 <__hexdig_fun>:
 800cff0:	0002      	movs	r2, r0
 800cff2:	3a30      	subs	r2, #48	; 0x30
 800cff4:	0003      	movs	r3, r0
 800cff6:	2a09      	cmp	r2, #9
 800cff8:	d802      	bhi.n	800d000 <__hexdig_fun+0x10>
 800cffa:	3b20      	subs	r3, #32
 800cffc:	b2d8      	uxtb	r0, r3
 800cffe:	4770      	bx	lr
 800d000:	0002      	movs	r2, r0
 800d002:	3a61      	subs	r2, #97	; 0x61
 800d004:	2a05      	cmp	r2, #5
 800d006:	d801      	bhi.n	800d00c <__hexdig_fun+0x1c>
 800d008:	3b47      	subs	r3, #71	; 0x47
 800d00a:	e7f7      	b.n	800cffc <__hexdig_fun+0xc>
 800d00c:	001a      	movs	r2, r3
 800d00e:	3a41      	subs	r2, #65	; 0x41
 800d010:	2000      	movs	r0, #0
 800d012:	2a05      	cmp	r2, #5
 800d014:	d8f3      	bhi.n	800cffe <__hexdig_fun+0xe>
 800d016:	3b27      	subs	r3, #39	; 0x27
 800d018:	e7f0      	b.n	800cffc <__hexdig_fun+0xc>
	...

0800d01c <__gethex>:
 800d01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d01e:	b08d      	sub	sp, #52	; 0x34
 800d020:	930a      	str	r3, [sp, #40]	; 0x28
 800d022:	4bbf      	ldr	r3, [pc, #764]	; (800d320 <__gethex+0x304>)
 800d024:	9005      	str	r0, [sp, #20]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	9109      	str	r1, [sp, #36]	; 0x24
 800d02a:	0018      	movs	r0, r3
 800d02c:	9202      	str	r2, [sp, #8]
 800d02e:	9307      	str	r3, [sp, #28]
 800d030:	f7f3 f872 	bl	8000118 <strlen>
 800d034:	2202      	movs	r2, #2
 800d036:	9b07      	ldr	r3, [sp, #28]
 800d038:	4252      	negs	r2, r2
 800d03a:	181b      	adds	r3, r3, r0
 800d03c:	3b01      	subs	r3, #1
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	9003      	str	r0, [sp, #12]
 800d042:	930b      	str	r3, [sp, #44]	; 0x2c
 800d044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d046:	6819      	ldr	r1, [r3, #0]
 800d048:	1c8b      	adds	r3, r1, #2
 800d04a:	1a52      	subs	r2, r2, r1
 800d04c:	18d1      	adds	r1, r2, r3
 800d04e:	9301      	str	r3, [sp, #4]
 800d050:	9108      	str	r1, [sp, #32]
 800d052:	9901      	ldr	r1, [sp, #4]
 800d054:	3301      	adds	r3, #1
 800d056:	7808      	ldrb	r0, [r1, #0]
 800d058:	2830      	cmp	r0, #48	; 0x30
 800d05a:	d0f7      	beq.n	800d04c <__gethex+0x30>
 800d05c:	f7ff ffc8 	bl	800cff0 <__hexdig_fun>
 800d060:	2300      	movs	r3, #0
 800d062:	001c      	movs	r4, r3
 800d064:	9304      	str	r3, [sp, #16]
 800d066:	4298      	cmp	r0, r3
 800d068:	d11f      	bne.n	800d0aa <__gethex+0x8e>
 800d06a:	9a03      	ldr	r2, [sp, #12]
 800d06c:	9907      	ldr	r1, [sp, #28]
 800d06e:	9801      	ldr	r0, [sp, #4]
 800d070:	f001 fad8 	bl	800e624 <strncmp>
 800d074:	0007      	movs	r7, r0
 800d076:	42a0      	cmp	r0, r4
 800d078:	d000      	beq.n	800d07c <__gethex+0x60>
 800d07a:	e06b      	b.n	800d154 <__gethex+0x138>
 800d07c:	9b01      	ldr	r3, [sp, #4]
 800d07e:	9a03      	ldr	r2, [sp, #12]
 800d080:	5c98      	ldrb	r0, [r3, r2]
 800d082:	189d      	adds	r5, r3, r2
 800d084:	f7ff ffb4 	bl	800cff0 <__hexdig_fun>
 800d088:	2301      	movs	r3, #1
 800d08a:	9304      	str	r3, [sp, #16]
 800d08c:	42a0      	cmp	r0, r4
 800d08e:	d030      	beq.n	800d0f2 <__gethex+0xd6>
 800d090:	9501      	str	r5, [sp, #4]
 800d092:	9b01      	ldr	r3, [sp, #4]
 800d094:	7818      	ldrb	r0, [r3, #0]
 800d096:	2830      	cmp	r0, #48	; 0x30
 800d098:	d009      	beq.n	800d0ae <__gethex+0x92>
 800d09a:	f7ff ffa9 	bl	800cff0 <__hexdig_fun>
 800d09e:	4242      	negs	r2, r0
 800d0a0:	4142      	adcs	r2, r0
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	002c      	movs	r4, r5
 800d0a6:	9204      	str	r2, [sp, #16]
 800d0a8:	9308      	str	r3, [sp, #32]
 800d0aa:	9d01      	ldr	r5, [sp, #4]
 800d0ac:	e004      	b.n	800d0b8 <__gethex+0x9c>
 800d0ae:	9b01      	ldr	r3, [sp, #4]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	9301      	str	r3, [sp, #4]
 800d0b4:	e7ed      	b.n	800d092 <__gethex+0x76>
 800d0b6:	3501      	adds	r5, #1
 800d0b8:	7828      	ldrb	r0, [r5, #0]
 800d0ba:	f7ff ff99 	bl	800cff0 <__hexdig_fun>
 800d0be:	1e07      	subs	r7, r0, #0
 800d0c0:	d1f9      	bne.n	800d0b6 <__gethex+0x9a>
 800d0c2:	0028      	movs	r0, r5
 800d0c4:	9a03      	ldr	r2, [sp, #12]
 800d0c6:	9907      	ldr	r1, [sp, #28]
 800d0c8:	f001 faac 	bl	800e624 <strncmp>
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	d10e      	bne.n	800d0ee <__gethex+0xd2>
 800d0d0:	2c00      	cmp	r4, #0
 800d0d2:	d107      	bne.n	800d0e4 <__gethex+0xc8>
 800d0d4:	9b03      	ldr	r3, [sp, #12]
 800d0d6:	18ed      	adds	r5, r5, r3
 800d0d8:	002c      	movs	r4, r5
 800d0da:	7828      	ldrb	r0, [r5, #0]
 800d0dc:	f7ff ff88 	bl	800cff0 <__hexdig_fun>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d102      	bne.n	800d0ea <__gethex+0xce>
 800d0e4:	1b64      	subs	r4, r4, r5
 800d0e6:	00a7      	lsls	r7, r4, #2
 800d0e8:	e003      	b.n	800d0f2 <__gethex+0xd6>
 800d0ea:	3501      	adds	r5, #1
 800d0ec:	e7f5      	b.n	800d0da <__gethex+0xbe>
 800d0ee:	2c00      	cmp	r4, #0
 800d0f0:	d1f8      	bne.n	800d0e4 <__gethex+0xc8>
 800d0f2:	2220      	movs	r2, #32
 800d0f4:	782b      	ldrb	r3, [r5, #0]
 800d0f6:	002e      	movs	r6, r5
 800d0f8:	4393      	bics	r3, r2
 800d0fa:	2b50      	cmp	r3, #80	; 0x50
 800d0fc:	d11d      	bne.n	800d13a <__gethex+0x11e>
 800d0fe:	786b      	ldrb	r3, [r5, #1]
 800d100:	2b2b      	cmp	r3, #43	; 0x2b
 800d102:	d02c      	beq.n	800d15e <__gethex+0x142>
 800d104:	2b2d      	cmp	r3, #45	; 0x2d
 800d106:	d02e      	beq.n	800d166 <__gethex+0x14a>
 800d108:	2300      	movs	r3, #0
 800d10a:	1c6e      	adds	r6, r5, #1
 800d10c:	9306      	str	r3, [sp, #24]
 800d10e:	7830      	ldrb	r0, [r6, #0]
 800d110:	f7ff ff6e 	bl	800cff0 <__hexdig_fun>
 800d114:	1e43      	subs	r3, r0, #1
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b18      	cmp	r3, #24
 800d11a:	d82b      	bhi.n	800d174 <__gethex+0x158>
 800d11c:	3810      	subs	r0, #16
 800d11e:	0004      	movs	r4, r0
 800d120:	7870      	ldrb	r0, [r6, #1]
 800d122:	f7ff ff65 	bl	800cff0 <__hexdig_fun>
 800d126:	1e43      	subs	r3, r0, #1
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	3601      	adds	r6, #1
 800d12c:	2b18      	cmp	r3, #24
 800d12e:	d91c      	bls.n	800d16a <__gethex+0x14e>
 800d130:	9b06      	ldr	r3, [sp, #24]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d000      	beq.n	800d138 <__gethex+0x11c>
 800d136:	4264      	negs	r4, r4
 800d138:	193f      	adds	r7, r7, r4
 800d13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d13c:	601e      	str	r6, [r3, #0]
 800d13e:	9b04      	ldr	r3, [sp, #16]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d019      	beq.n	800d178 <__gethex+0x15c>
 800d144:	2600      	movs	r6, #0
 800d146:	9b08      	ldr	r3, [sp, #32]
 800d148:	42b3      	cmp	r3, r6
 800d14a:	d100      	bne.n	800d14e <__gethex+0x132>
 800d14c:	3606      	adds	r6, #6
 800d14e:	0030      	movs	r0, r6
 800d150:	b00d      	add	sp, #52	; 0x34
 800d152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d154:	2301      	movs	r3, #1
 800d156:	2700      	movs	r7, #0
 800d158:	9d01      	ldr	r5, [sp, #4]
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	e7c9      	b.n	800d0f2 <__gethex+0xd6>
 800d15e:	2300      	movs	r3, #0
 800d160:	9306      	str	r3, [sp, #24]
 800d162:	1cae      	adds	r6, r5, #2
 800d164:	e7d3      	b.n	800d10e <__gethex+0xf2>
 800d166:	2301      	movs	r3, #1
 800d168:	e7fa      	b.n	800d160 <__gethex+0x144>
 800d16a:	230a      	movs	r3, #10
 800d16c:	435c      	muls	r4, r3
 800d16e:	1824      	adds	r4, r4, r0
 800d170:	3c10      	subs	r4, #16
 800d172:	e7d5      	b.n	800d120 <__gethex+0x104>
 800d174:	002e      	movs	r6, r5
 800d176:	e7e0      	b.n	800d13a <__gethex+0x11e>
 800d178:	9b01      	ldr	r3, [sp, #4]
 800d17a:	9904      	ldr	r1, [sp, #16]
 800d17c:	1aeb      	subs	r3, r5, r3
 800d17e:	3b01      	subs	r3, #1
 800d180:	2b07      	cmp	r3, #7
 800d182:	dc0a      	bgt.n	800d19a <__gethex+0x17e>
 800d184:	9805      	ldr	r0, [sp, #20]
 800d186:	f000 fa8d 	bl	800d6a4 <_Balloc>
 800d18a:	1e04      	subs	r4, r0, #0
 800d18c:	d108      	bne.n	800d1a0 <__gethex+0x184>
 800d18e:	0002      	movs	r2, r0
 800d190:	21de      	movs	r1, #222	; 0xde
 800d192:	4b64      	ldr	r3, [pc, #400]	; (800d324 <__gethex+0x308>)
 800d194:	4864      	ldr	r0, [pc, #400]	; (800d328 <__gethex+0x30c>)
 800d196:	f7ff f803 	bl	800c1a0 <__assert_func>
 800d19a:	3101      	adds	r1, #1
 800d19c:	105b      	asrs	r3, r3, #1
 800d19e:	e7ef      	b.n	800d180 <__gethex+0x164>
 800d1a0:	0003      	movs	r3, r0
 800d1a2:	3314      	adds	r3, #20
 800d1a4:	9304      	str	r3, [sp, #16]
 800d1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	001e      	movs	r6, r3
 800d1ac:	9306      	str	r3, [sp, #24]
 800d1ae:	9b01      	ldr	r3, [sp, #4]
 800d1b0:	42ab      	cmp	r3, r5
 800d1b2:	d340      	bcc.n	800d236 <__gethex+0x21a>
 800d1b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d1b6:	9b04      	ldr	r3, [sp, #16]
 800d1b8:	c540      	stmia	r5!, {r6}
 800d1ba:	1aed      	subs	r5, r5, r3
 800d1bc:	10ad      	asrs	r5, r5, #2
 800d1be:	0030      	movs	r0, r6
 800d1c0:	6125      	str	r5, [r4, #16]
 800d1c2:	f000 fb67 	bl	800d894 <__hi0bits>
 800d1c6:	9b02      	ldr	r3, [sp, #8]
 800d1c8:	016d      	lsls	r5, r5, #5
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	1a2e      	subs	r6, r5, r0
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	429e      	cmp	r6, r3
 800d1d2:	dd5a      	ble.n	800d28a <__gethex+0x26e>
 800d1d4:	1af6      	subs	r6, r6, r3
 800d1d6:	0031      	movs	r1, r6
 800d1d8:	0020      	movs	r0, r4
 800d1da:	f000 ff09 	bl	800dff0 <__any_on>
 800d1de:	1e05      	subs	r5, r0, #0
 800d1e0:	d016      	beq.n	800d210 <__gethex+0x1f4>
 800d1e2:	2501      	movs	r5, #1
 800d1e4:	211f      	movs	r1, #31
 800d1e6:	0028      	movs	r0, r5
 800d1e8:	1e73      	subs	r3, r6, #1
 800d1ea:	4019      	ands	r1, r3
 800d1ec:	4088      	lsls	r0, r1
 800d1ee:	0001      	movs	r1, r0
 800d1f0:	115a      	asrs	r2, r3, #5
 800d1f2:	9804      	ldr	r0, [sp, #16]
 800d1f4:	0092      	lsls	r2, r2, #2
 800d1f6:	5812      	ldr	r2, [r2, r0]
 800d1f8:	420a      	tst	r2, r1
 800d1fa:	d009      	beq.n	800d210 <__gethex+0x1f4>
 800d1fc:	42ab      	cmp	r3, r5
 800d1fe:	dd06      	ble.n	800d20e <__gethex+0x1f2>
 800d200:	0020      	movs	r0, r4
 800d202:	1eb1      	subs	r1, r6, #2
 800d204:	f000 fef4 	bl	800dff0 <__any_on>
 800d208:	3502      	adds	r5, #2
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d100      	bne.n	800d210 <__gethex+0x1f4>
 800d20e:	2502      	movs	r5, #2
 800d210:	0031      	movs	r1, r6
 800d212:	0020      	movs	r0, r4
 800d214:	f7ff fe98 	bl	800cf48 <rshift>
 800d218:	19bf      	adds	r7, r7, r6
 800d21a:	9b02      	ldr	r3, [sp, #8]
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	9303      	str	r3, [sp, #12]
 800d220:	42bb      	cmp	r3, r7
 800d222:	da42      	bge.n	800d2aa <__gethex+0x28e>
 800d224:	0021      	movs	r1, r4
 800d226:	9805      	ldr	r0, [sp, #20]
 800d228:	f000 fa80 	bl	800d72c <_Bfree>
 800d22c:	2300      	movs	r3, #0
 800d22e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d230:	26a3      	movs	r6, #163	; 0xa3
 800d232:	6013      	str	r3, [r2, #0]
 800d234:	e78b      	b.n	800d14e <__gethex+0x132>
 800d236:	1e6b      	subs	r3, r5, #1
 800d238:	9308      	str	r3, [sp, #32]
 800d23a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	4293      	cmp	r3, r2
 800d240:	d014      	beq.n	800d26c <__gethex+0x250>
 800d242:	9b06      	ldr	r3, [sp, #24]
 800d244:	2b20      	cmp	r3, #32
 800d246:	d104      	bne.n	800d252 <__gethex+0x236>
 800d248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d24a:	c340      	stmia	r3!, {r6}
 800d24c:	2600      	movs	r6, #0
 800d24e:	9309      	str	r3, [sp, #36]	; 0x24
 800d250:	9606      	str	r6, [sp, #24]
 800d252:	9b08      	ldr	r3, [sp, #32]
 800d254:	7818      	ldrb	r0, [r3, #0]
 800d256:	f7ff fecb 	bl	800cff0 <__hexdig_fun>
 800d25a:	230f      	movs	r3, #15
 800d25c:	4018      	ands	r0, r3
 800d25e:	9b06      	ldr	r3, [sp, #24]
 800d260:	9d08      	ldr	r5, [sp, #32]
 800d262:	4098      	lsls	r0, r3
 800d264:	3304      	adds	r3, #4
 800d266:	4306      	orrs	r6, r0
 800d268:	9306      	str	r3, [sp, #24]
 800d26a:	e7a0      	b.n	800d1ae <__gethex+0x192>
 800d26c:	2301      	movs	r3, #1
 800d26e:	9a03      	ldr	r2, [sp, #12]
 800d270:	1a9d      	subs	r5, r3, r2
 800d272:	9b08      	ldr	r3, [sp, #32]
 800d274:	195d      	adds	r5, r3, r5
 800d276:	9b01      	ldr	r3, [sp, #4]
 800d278:	429d      	cmp	r5, r3
 800d27a:	d3e2      	bcc.n	800d242 <__gethex+0x226>
 800d27c:	0028      	movs	r0, r5
 800d27e:	9907      	ldr	r1, [sp, #28]
 800d280:	f001 f9d0 	bl	800e624 <strncmp>
 800d284:	2800      	cmp	r0, #0
 800d286:	d1dc      	bne.n	800d242 <__gethex+0x226>
 800d288:	e791      	b.n	800d1ae <__gethex+0x192>
 800d28a:	9b01      	ldr	r3, [sp, #4]
 800d28c:	2500      	movs	r5, #0
 800d28e:	429e      	cmp	r6, r3
 800d290:	dac3      	bge.n	800d21a <__gethex+0x1fe>
 800d292:	1b9e      	subs	r6, r3, r6
 800d294:	0021      	movs	r1, r4
 800d296:	0032      	movs	r2, r6
 800d298:	9805      	ldr	r0, [sp, #20]
 800d29a:	f000 fc65 	bl	800db68 <__lshift>
 800d29e:	0003      	movs	r3, r0
 800d2a0:	3314      	adds	r3, #20
 800d2a2:	0004      	movs	r4, r0
 800d2a4:	1bbf      	subs	r7, r7, r6
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	e7b7      	b.n	800d21a <__gethex+0x1fe>
 800d2aa:	9b02      	ldr	r3, [sp, #8]
 800d2ac:	685e      	ldr	r6, [r3, #4]
 800d2ae:	42be      	cmp	r6, r7
 800d2b0:	dd71      	ble.n	800d396 <__gethex+0x37a>
 800d2b2:	9b01      	ldr	r3, [sp, #4]
 800d2b4:	1bf6      	subs	r6, r6, r7
 800d2b6:	42b3      	cmp	r3, r6
 800d2b8:	dc38      	bgt.n	800d32c <__gethex+0x310>
 800d2ba:	9b02      	ldr	r3, [sp, #8]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	d026      	beq.n	800d310 <__gethex+0x2f4>
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	d028      	beq.n	800d318 <__gethex+0x2fc>
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d119      	bne.n	800d2fe <__gethex+0x2e2>
 800d2ca:	9b01      	ldr	r3, [sp, #4]
 800d2cc:	42b3      	cmp	r3, r6
 800d2ce:	d116      	bne.n	800d2fe <__gethex+0x2e2>
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d10d      	bne.n	800d2f0 <__gethex+0x2d4>
 800d2d4:	9b02      	ldr	r3, [sp, #8]
 800d2d6:	2662      	movs	r6, #98	; 0x62
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	9a01      	ldr	r2, [sp, #4]
 800d2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2e0:	601a      	str	r2, [r3, #0]
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	9a04      	ldr	r2, [sp, #16]
 800d2e6:	6123      	str	r3, [r4, #16]
 800d2e8:	6013      	str	r3, [r2, #0]
 800d2ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d2ec:	601c      	str	r4, [r3, #0]
 800d2ee:	e72e      	b.n	800d14e <__gethex+0x132>
 800d2f0:	9901      	ldr	r1, [sp, #4]
 800d2f2:	0020      	movs	r0, r4
 800d2f4:	3901      	subs	r1, #1
 800d2f6:	f000 fe7b 	bl	800dff0 <__any_on>
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d1ea      	bne.n	800d2d4 <__gethex+0x2b8>
 800d2fe:	0021      	movs	r1, r4
 800d300:	9805      	ldr	r0, [sp, #20]
 800d302:	f000 fa13 	bl	800d72c <_Bfree>
 800d306:	2300      	movs	r3, #0
 800d308:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d30a:	2650      	movs	r6, #80	; 0x50
 800d30c:	6013      	str	r3, [r2, #0]
 800d30e:	e71e      	b.n	800d14e <__gethex+0x132>
 800d310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1f3      	bne.n	800d2fe <__gethex+0x2e2>
 800d316:	e7dd      	b.n	800d2d4 <__gethex+0x2b8>
 800d318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1da      	bne.n	800d2d4 <__gethex+0x2b8>
 800d31e:	e7ee      	b.n	800d2fe <__gethex+0x2e2>
 800d320:	0800f4c8 	.word	0x0800f4c8
 800d324:	0800f451 	.word	0x0800f451
 800d328:	0800f462 	.word	0x0800f462
 800d32c:	1e77      	subs	r7, r6, #1
 800d32e:	2d00      	cmp	r5, #0
 800d330:	d12f      	bne.n	800d392 <__gethex+0x376>
 800d332:	2f00      	cmp	r7, #0
 800d334:	d004      	beq.n	800d340 <__gethex+0x324>
 800d336:	0039      	movs	r1, r7
 800d338:	0020      	movs	r0, r4
 800d33a:	f000 fe59 	bl	800dff0 <__any_on>
 800d33e:	0005      	movs	r5, r0
 800d340:	231f      	movs	r3, #31
 800d342:	117a      	asrs	r2, r7, #5
 800d344:	401f      	ands	r7, r3
 800d346:	3b1e      	subs	r3, #30
 800d348:	40bb      	lsls	r3, r7
 800d34a:	9904      	ldr	r1, [sp, #16]
 800d34c:	0092      	lsls	r2, r2, #2
 800d34e:	5852      	ldr	r2, [r2, r1]
 800d350:	421a      	tst	r2, r3
 800d352:	d001      	beq.n	800d358 <__gethex+0x33c>
 800d354:	2302      	movs	r3, #2
 800d356:	431d      	orrs	r5, r3
 800d358:	9b01      	ldr	r3, [sp, #4]
 800d35a:	0031      	movs	r1, r6
 800d35c:	1b9b      	subs	r3, r3, r6
 800d35e:	2602      	movs	r6, #2
 800d360:	0020      	movs	r0, r4
 800d362:	9301      	str	r3, [sp, #4]
 800d364:	f7ff fdf0 	bl	800cf48 <rshift>
 800d368:	9b02      	ldr	r3, [sp, #8]
 800d36a:	685f      	ldr	r7, [r3, #4]
 800d36c:	2d00      	cmp	r5, #0
 800d36e:	d041      	beq.n	800d3f4 <__gethex+0x3d8>
 800d370:	9b02      	ldr	r3, [sp, #8]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	2b02      	cmp	r3, #2
 800d376:	d010      	beq.n	800d39a <__gethex+0x37e>
 800d378:	2b03      	cmp	r3, #3
 800d37a:	d012      	beq.n	800d3a2 <__gethex+0x386>
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d106      	bne.n	800d38e <__gethex+0x372>
 800d380:	07aa      	lsls	r2, r5, #30
 800d382:	d504      	bpl.n	800d38e <__gethex+0x372>
 800d384:	9a04      	ldr	r2, [sp, #16]
 800d386:	6810      	ldr	r0, [r2, #0]
 800d388:	4305      	orrs	r5, r0
 800d38a:	421d      	tst	r5, r3
 800d38c:	d10c      	bne.n	800d3a8 <__gethex+0x38c>
 800d38e:	2310      	movs	r3, #16
 800d390:	e02f      	b.n	800d3f2 <__gethex+0x3d6>
 800d392:	2501      	movs	r5, #1
 800d394:	e7d4      	b.n	800d340 <__gethex+0x324>
 800d396:	2601      	movs	r6, #1
 800d398:	e7e8      	b.n	800d36c <__gethex+0x350>
 800d39a:	2301      	movs	r3, #1
 800d39c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d39e:	1a9b      	subs	r3, r3, r2
 800d3a0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d3a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d0f2      	beq.n	800d38e <__gethex+0x372>
 800d3a8:	6923      	ldr	r3, [r4, #16]
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	9303      	str	r3, [sp, #12]
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	9304      	str	r3, [sp, #16]
 800d3b2:	0023      	movs	r3, r4
 800d3b4:	9a04      	ldr	r2, [sp, #16]
 800d3b6:	3314      	adds	r3, #20
 800d3b8:	1899      	adds	r1, r3, r2
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	1c55      	adds	r5, r2, #1
 800d3be:	d01e      	beq.n	800d3fe <__gethex+0x3e2>
 800d3c0:	3201      	adds	r2, #1
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	0023      	movs	r3, r4
 800d3c6:	3314      	adds	r3, #20
 800d3c8:	2e02      	cmp	r6, #2
 800d3ca:	d140      	bne.n	800d44e <__gethex+0x432>
 800d3cc:	9a02      	ldr	r2, [sp, #8]
 800d3ce:	9901      	ldr	r1, [sp, #4]
 800d3d0:	6812      	ldr	r2, [r2, #0]
 800d3d2:	3a01      	subs	r2, #1
 800d3d4:	428a      	cmp	r2, r1
 800d3d6:	d10b      	bne.n	800d3f0 <__gethex+0x3d4>
 800d3d8:	114a      	asrs	r2, r1, #5
 800d3da:	211f      	movs	r1, #31
 800d3dc:	9801      	ldr	r0, [sp, #4]
 800d3de:	0092      	lsls	r2, r2, #2
 800d3e0:	4001      	ands	r1, r0
 800d3e2:	2001      	movs	r0, #1
 800d3e4:	0005      	movs	r5, r0
 800d3e6:	408d      	lsls	r5, r1
 800d3e8:	58d3      	ldr	r3, [r2, r3]
 800d3ea:	422b      	tst	r3, r5
 800d3ec:	d000      	beq.n	800d3f0 <__gethex+0x3d4>
 800d3ee:	2601      	movs	r6, #1
 800d3f0:	2320      	movs	r3, #32
 800d3f2:	431e      	orrs	r6, r3
 800d3f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3f6:	601c      	str	r4, [r3, #0]
 800d3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3fa:	601f      	str	r7, [r3, #0]
 800d3fc:	e6a7      	b.n	800d14e <__gethex+0x132>
 800d3fe:	c301      	stmia	r3!, {r0}
 800d400:	4299      	cmp	r1, r3
 800d402:	d8da      	bhi.n	800d3ba <__gethex+0x39e>
 800d404:	9b03      	ldr	r3, [sp, #12]
 800d406:	68a2      	ldr	r2, [r4, #8]
 800d408:	4293      	cmp	r3, r2
 800d40a:	db17      	blt.n	800d43c <__gethex+0x420>
 800d40c:	6863      	ldr	r3, [r4, #4]
 800d40e:	9805      	ldr	r0, [sp, #20]
 800d410:	1c59      	adds	r1, r3, #1
 800d412:	f000 f947 	bl	800d6a4 <_Balloc>
 800d416:	1e05      	subs	r5, r0, #0
 800d418:	d103      	bne.n	800d422 <__gethex+0x406>
 800d41a:	0002      	movs	r2, r0
 800d41c:	2184      	movs	r1, #132	; 0x84
 800d41e:	4b1c      	ldr	r3, [pc, #112]	; (800d490 <__gethex+0x474>)
 800d420:	e6b8      	b.n	800d194 <__gethex+0x178>
 800d422:	0021      	movs	r1, r4
 800d424:	6923      	ldr	r3, [r4, #16]
 800d426:	310c      	adds	r1, #12
 800d428:	1c9a      	adds	r2, r3, #2
 800d42a:	0092      	lsls	r2, r2, #2
 800d42c:	300c      	adds	r0, #12
 800d42e:	f000 f920 	bl	800d672 <memcpy>
 800d432:	0021      	movs	r1, r4
 800d434:	9805      	ldr	r0, [sp, #20]
 800d436:	f000 f979 	bl	800d72c <_Bfree>
 800d43a:	002c      	movs	r4, r5
 800d43c:	6923      	ldr	r3, [r4, #16]
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	6122      	str	r2, [r4, #16]
 800d442:	2201      	movs	r2, #1
 800d444:	3304      	adds	r3, #4
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	18e3      	adds	r3, r4, r3
 800d44a:	605a      	str	r2, [r3, #4]
 800d44c:	e7ba      	b.n	800d3c4 <__gethex+0x3a8>
 800d44e:	6922      	ldr	r2, [r4, #16]
 800d450:	9903      	ldr	r1, [sp, #12]
 800d452:	428a      	cmp	r2, r1
 800d454:	dd09      	ble.n	800d46a <__gethex+0x44e>
 800d456:	2101      	movs	r1, #1
 800d458:	0020      	movs	r0, r4
 800d45a:	f7ff fd75 	bl	800cf48 <rshift>
 800d45e:	9b02      	ldr	r3, [sp, #8]
 800d460:	3701      	adds	r7, #1
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	42bb      	cmp	r3, r7
 800d466:	dac2      	bge.n	800d3ee <__gethex+0x3d2>
 800d468:	e6dc      	b.n	800d224 <__gethex+0x208>
 800d46a:	221f      	movs	r2, #31
 800d46c:	9d01      	ldr	r5, [sp, #4]
 800d46e:	9901      	ldr	r1, [sp, #4]
 800d470:	2601      	movs	r6, #1
 800d472:	4015      	ands	r5, r2
 800d474:	4211      	tst	r1, r2
 800d476:	d0bb      	beq.n	800d3f0 <__gethex+0x3d4>
 800d478:	9a04      	ldr	r2, [sp, #16]
 800d47a:	189b      	adds	r3, r3, r2
 800d47c:	3b04      	subs	r3, #4
 800d47e:	6818      	ldr	r0, [r3, #0]
 800d480:	f000 fa08 	bl	800d894 <__hi0bits>
 800d484:	2320      	movs	r3, #32
 800d486:	1b5d      	subs	r5, r3, r5
 800d488:	42a8      	cmp	r0, r5
 800d48a:	dbe4      	blt.n	800d456 <__gethex+0x43a>
 800d48c:	e7b0      	b.n	800d3f0 <__gethex+0x3d4>
 800d48e:	46c0      	nop			; (mov r8, r8)
 800d490:	0800f451 	.word	0x0800f451

0800d494 <L_shift>:
 800d494:	2308      	movs	r3, #8
 800d496:	b570      	push	{r4, r5, r6, lr}
 800d498:	2520      	movs	r5, #32
 800d49a:	1a9a      	subs	r2, r3, r2
 800d49c:	0092      	lsls	r2, r2, #2
 800d49e:	1aad      	subs	r5, r5, r2
 800d4a0:	6843      	ldr	r3, [r0, #4]
 800d4a2:	6806      	ldr	r6, [r0, #0]
 800d4a4:	001c      	movs	r4, r3
 800d4a6:	40ac      	lsls	r4, r5
 800d4a8:	40d3      	lsrs	r3, r2
 800d4aa:	4334      	orrs	r4, r6
 800d4ac:	6004      	str	r4, [r0, #0]
 800d4ae:	6043      	str	r3, [r0, #4]
 800d4b0:	3004      	adds	r0, #4
 800d4b2:	4288      	cmp	r0, r1
 800d4b4:	d3f4      	bcc.n	800d4a0 <L_shift+0xc>
 800d4b6:	bd70      	pop	{r4, r5, r6, pc}

0800d4b8 <__match>:
 800d4b8:	b530      	push	{r4, r5, lr}
 800d4ba:	6803      	ldr	r3, [r0, #0]
 800d4bc:	780c      	ldrb	r4, [r1, #0]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	2c00      	cmp	r4, #0
 800d4c2:	d102      	bne.n	800d4ca <__match+0x12>
 800d4c4:	6003      	str	r3, [r0, #0]
 800d4c6:	2001      	movs	r0, #1
 800d4c8:	bd30      	pop	{r4, r5, pc}
 800d4ca:	781a      	ldrb	r2, [r3, #0]
 800d4cc:	0015      	movs	r5, r2
 800d4ce:	3d41      	subs	r5, #65	; 0x41
 800d4d0:	2d19      	cmp	r5, #25
 800d4d2:	d800      	bhi.n	800d4d6 <__match+0x1e>
 800d4d4:	3220      	adds	r2, #32
 800d4d6:	3101      	adds	r1, #1
 800d4d8:	42a2      	cmp	r2, r4
 800d4da:	d0ef      	beq.n	800d4bc <__match+0x4>
 800d4dc:	2000      	movs	r0, #0
 800d4de:	e7f3      	b.n	800d4c8 <__match+0x10>

0800d4e0 <__hexnan>:
 800d4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e2:	680b      	ldr	r3, [r1, #0]
 800d4e4:	b08b      	sub	sp, #44	; 0x2c
 800d4e6:	9201      	str	r2, [sp, #4]
 800d4e8:	9901      	ldr	r1, [sp, #4]
 800d4ea:	115a      	asrs	r2, r3, #5
 800d4ec:	0092      	lsls	r2, r2, #2
 800d4ee:	188a      	adds	r2, r1, r2
 800d4f0:	9202      	str	r2, [sp, #8]
 800d4f2:	0019      	movs	r1, r3
 800d4f4:	221f      	movs	r2, #31
 800d4f6:	4011      	ands	r1, r2
 800d4f8:	9008      	str	r0, [sp, #32]
 800d4fa:	9106      	str	r1, [sp, #24]
 800d4fc:	4213      	tst	r3, r2
 800d4fe:	d002      	beq.n	800d506 <__hexnan+0x26>
 800d500:	9b02      	ldr	r3, [sp, #8]
 800d502:	3304      	adds	r3, #4
 800d504:	9302      	str	r3, [sp, #8]
 800d506:	9b02      	ldr	r3, [sp, #8]
 800d508:	2500      	movs	r5, #0
 800d50a:	1f1e      	subs	r6, r3, #4
 800d50c:	0037      	movs	r7, r6
 800d50e:	0034      	movs	r4, r6
 800d510:	9b08      	ldr	r3, [sp, #32]
 800d512:	6035      	str	r5, [r6, #0]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	9507      	str	r5, [sp, #28]
 800d518:	9305      	str	r3, [sp, #20]
 800d51a:	9503      	str	r5, [sp, #12]
 800d51c:	9b05      	ldr	r3, [sp, #20]
 800d51e:	3301      	adds	r3, #1
 800d520:	9309      	str	r3, [sp, #36]	; 0x24
 800d522:	9b05      	ldr	r3, [sp, #20]
 800d524:	785b      	ldrb	r3, [r3, #1]
 800d526:	9304      	str	r3, [sp, #16]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d028      	beq.n	800d57e <__hexnan+0x9e>
 800d52c:	9804      	ldr	r0, [sp, #16]
 800d52e:	f7ff fd5f 	bl	800cff0 <__hexdig_fun>
 800d532:	2800      	cmp	r0, #0
 800d534:	d154      	bne.n	800d5e0 <__hexnan+0x100>
 800d536:	9b04      	ldr	r3, [sp, #16]
 800d538:	2b20      	cmp	r3, #32
 800d53a:	d819      	bhi.n	800d570 <__hexnan+0x90>
 800d53c:	9b03      	ldr	r3, [sp, #12]
 800d53e:	9a07      	ldr	r2, [sp, #28]
 800d540:	4293      	cmp	r3, r2
 800d542:	dd12      	ble.n	800d56a <__hexnan+0x8a>
 800d544:	42bc      	cmp	r4, r7
 800d546:	d206      	bcs.n	800d556 <__hexnan+0x76>
 800d548:	2d07      	cmp	r5, #7
 800d54a:	dc04      	bgt.n	800d556 <__hexnan+0x76>
 800d54c:	002a      	movs	r2, r5
 800d54e:	0039      	movs	r1, r7
 800d550:	0020      	movs	r0, r4
 800d552:	f7ff ff9f 	bl	800d494 <L_shift>
 800d556:	9b01      	ldr	r3, [sp, #4]
 800d558:	2508      	movs	r5, #8
 800d55a:	429c      	cmp	r4, r3
 800d55c:	d905      	bls.n	800d56a <__hexnan+0x8a>
 800d55e:	1f27      	subs	r7, r4, #4
 800d560:	2500      	movs	r5, #0
 800d562:	003c      	movs	r4, r7
 800d564:	9b03      	ldr	r3, [sp, #12]
 800d566:	603d      	str	r5, [r7, #0]
 800d568:	9307      	str	r3, [sp, #28]
 800d56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d56c:	9305      	str	r3, [sp, #20]
 800d56e:	e7d5      	b.n	800d51c <__hexnan+0x3c>
 800d570:	9b04      	ldr	r3, [sp, #16]
 800d572:	2b29      	cmp	r3, #41	; 0x29
 800d574:	d159      	bne.n	800d62a <__hexnan+0x14a>
 800d576:	9b05      	ldr	r3, [sp, #20]
 800d578:	9a08      	ldr	r2, [sp, #32]
 800d57a:	3302      	adds	r3, #2
 800d57c:	6013      	str	r3, [r2, #0]
 800d57e:	9b03      	ldr	r3, [sp, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d052      	beq.n	800d62a <__hexnan+0x14a>
 800d584:	42bc      	cmp	r4, r7
 800d586:	d206      	bcs.n	800d596 <__hexnan+0xb6>
 800d588:	2d07      	cmp	r5, #7
 800d58a:	dc04      	bgt.n	800d596 <__hexnan+0xb6>
 800d58c:	002a      	movs	r2, r5
 800d58e:	0039      	movs	r1, r7
 800d590:	0020      	movs	r0, r4
 800d592:	f7ff ff7f 	bl	800d494 <L_shift>
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	429c      	cmp	r4, r3
 800d59a:	d935      	bls.n	800d608 <__hexnan+0x128>
 800d59c:	001a      	movs	r2, r3
 800d59e:	0023      	movs	r3, r4
 800d5a0:	cb02      	ldmia	r3!, {r1}
 800d5a2:	c202      	stmia	r2!, {r1}
 800d5a4:	429e      	cmp	r6, r3
 800d5a6:	d2fb      	bcs.n	800d5a0 <__hexnan+0xc0>
 800d5a8:	9b02      	ldr	r3, [sp, #8]
 800d5aa:	1c61      	adds	r1, r4, #1
 800d5ac:	1eda      	subs	r2, r3, #3
 800d5ae:	2304      	movs	r3, #4
 800d5b0:	4291      	cmp	r1, r2
 800d5b2:	d805      	bhi.n	800d5c0 <__hexnan+0xe0>
 800d5b4:	9b02      	ldr	r3, [sp, #8]
 800d5b6:	3b04      	subs	r3, #4
 800d5b8:	1b1b      	subs	r3, r3, r4
 800d5ba:	089b      	lsrs	r3, r3, #2
 800d5bc:	3301      	adds	r3, #1
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	9a01      	ldr	r2, [sp, #4]
 800d5c2:	18d3      	adds	r3, r2, r3
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	c304      	stmia	r3!, {r2}
 800d5c8:	429e      	cmp	r6, r3
 800d5ca:	d2fc      	bcs.n	800d5c6 <__hexnan+0xe6>
 800d5cc:	6833      	ldr	r3, [r6, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d104      	bne.n	800d5dc <__hexnan+0xfc>
 800d5d2:	9b01      	ldr	r3, [sp, #4]
 800d5d4:	429e      	cmp	r6, r3
 800d5d6:	d126      	bne.n	800d626 <__hexnan+0x146>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	6033      	str	r3, [r6, #0]
 800d5dc:	2005      	movs	r0, #5
 800d5de:	e025      	b.n	800d62c <__hexnan+0x14c>
 800d5e0:	9b03      	ldr	r3, [sp, #12]
 800d5e2:	3501      	adds	r5, #1
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	9303      	str	r3, [sp, #12]
 800d5e8:	2d08      	cmp	r5, #8
 800d5ea:	dd06      	ble.n	800d5fa <__hexnan+0x11a>
 800d5ec:	9b01      	ldr	r3, [sp, #4]
 800d5ee:	429c      	cmp	r4, r3
 800d5f0:	d9bb      	bls.n	800d56a <__hexnan+0x8a>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	2501      	movs	r5, #1
 800d5f6:	3c04      	subs	r4, #4
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	220f      	movs	r2, #15
 800d5fc:	6823      	ldr	r3, [r4, #0]
 800d5fe:	4010      	ands	r0, r2
 800d600:	011b      	lsls	r3, r3, #4
 800d602:	4318      	orrs	r0, r3
 800d604:	6020      	str	r0, [r4, #0]
 800d606:	e7b0      	b.n	800d56a <__hexnan+0x8a>
 800d608:	9b06      	ldr	r3, [sp, #24]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d0de      	beq.n	800d5cc <__hexnan+0xec>
 800d60e:	2120      	movs	r1, #32
 800d610:	9a06      	ldr	r2, [sp, #24]
 800d612:	9b02      	ldr	r3, [sp, #8]
 800d614:	1a89      	subs	r1, r1, r2
 800d616:	2201      	movs	r2, #1
 800d618:	4252      	negs	r2, r2
 800d61a:	40ca      	lsrs	r2, r1
 800d61c:	3b04      	subs	r3, #4
 800d61e:	6819      	ldr	r1, [r3, #0]
 800d620:	400a      	ands	r2, r1
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	e7d2      	b.n	800d5cc <__hexnan+0xec>
 800d626:	3e04      	subs	r6, #4
 800d628:	e7d0      	b.n	800d5cc <__hexnan+0xec>
 800d62a:	2004      	movs	r0, #4
 800d62c:	b00b      	add	sp, #44	; 0x2c
 800d62e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d630 <_localeconv_r>:
 800d630:	4800      	ldr	r0, [pc, #0]	; (800d634 <_localeconv_r+0x4>)
 800d632:	4770      	bx	lr
 800d634:	20000164 	.word	0x20000164

0800d638 <__ascii_mbtowc>:
 800d638:	b082      	sub	sp, #8
 800d63a:	2900      	cmp	r1, #0
 800d63c:	d100      	bne.n	800d640 <__ascii_mbtowc+0x8>
 800d63e:	a901      	add	r1, sp, #4
 800d640:	1e10      	subs	r0, r2, #0
 800d642:	d006      	beq.n	800d652 <__ascii_mbtowc+0x1a>
 800d644:	2b00      	cmp	r3, #0
 800d646:	d006      	beq.n	800d656 <__ascii_mbtowc+0x1e>
 800d648:	7813      	ldrb	r3, [r2, #0]
 800d64a:	600b      	str	r3, [r1, #0]
 800d64c:	7810      	ldrb	r0, [r2, #0]
 800d64e:	1e43      	subs	r3, r0, #1
 800d650:	4198      	sbcs	r0, r3
 800d652:	b002      	add	sp, #8
 800d654:	4770      	bx	lr
 800d656:	2002      	movs	r0, #2
 800d658:	4240      	negs	r0, r0
 800d65a:	e7fa      	b.n	800d652 <__ascii_mbtowc+0x1a>

0800d65c <memchr>:
 800d65c:	b2c9      	uxtb	r1, r1
 800d65e:	1882      	adds	r2, r0, r2
 800d660:	4290      	cmp	r0, r2
 800d662:	d101      	bne.n	800d668 <memchr+0xc>
 800d664:	2000      	movs	r0, #0
 800d666:	4770      	bx	lr
 800d668:	7803      	ldrb	r3, [r0, #0]
 800d66a:	428b      	cmp	r3, r1
 800d66c:	d0fb      	beq.n	800d666 <memchr+0xa>
 800d66e:	3001      	adds	r0, #1
 800d670:	e7f6      	b.n	800d660 <memchr+0x4>

0800d672 <memcpy>:
 800d672:	2300      	movs	r3, #0
 800d674:	b510      	push	{r4, lr}
 800d676:	429a      	cmp	r2, r3
 800d678:	d100      	bne.n	800d67c <memcpy+0xa>
 800d67a:	bd10      	pop	{r4, pc}
 800d67c:	5ccc      	ldrb	r4, [r1, r3]
 800d67e:	54c4      	strb	r4, [r0, r3]
 800d680:	3301      	adds	r3, #1
 800d682:	e7f8      	b.n	800d676 <memcpy+0x4>

0800d684 <__malloc_lock>:
 800d684:	b510      	push	{r4, lr}
 800d686:	4802      	ldr	r0, [pc, #8]	; (800d690 <__malloc_lock+0xc>)
 800d688:	f001 fa91 	bl	800ebae <__retarget_lock_acquire_recursive>
 800d68c:	bd10      	pop	{r4, pc}
 800d68e:	46c0      	nop			; (mov r8, r8)
 800d690:	2000050c 	.word	0x2000050c

0800d694 <__malloc_unlock>:
 800d694:	b510      	push	{r4, lr}
 800d696:	4802      	ldr	r0, [pc, #8]	; (800d6a0 <__malloc_unlock+0xc>)
 800d698:	f001 fa8a 	bl	800ebb0 <__retarget_lock_release_recursive>
 800d69c:	bd10      	pop	{r4, pc}
 800d69e:	46c0      	nop			; (mov r8, r8)
 800d6a0:	2000050c 	.word	0x2000050c

0800d6a4 <_Balloc>:
 800d6a4:	b570      	push	{r4, r5, r6, lr}
 800d6a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d6a8:	0006      	movs	r6, r0
 800d6aa:	000c      	movs	r4, r1
 800d6ac:	2d00      	cmp	r5, #0
 800d6ae:	d10e      	bne.n	800d6ce <_Balloc+0x2a>
 800d6b0:	2010      	movs	r0, #16
 800d6b2:	f7fc fe9d 	bl	800a3f0 <malloc>
 800d6b6:	1e02      	subs	r2, r0, #0
 800d6b8:	6270      	str	r0, [r6, #36]	; 0x24
 800d6ba:	d104      	bne.n	800d6c6 <_Balloc+0x22>
 800d6bc:	2166      	movs	r1, #102	; 0x66
 800d6be:	4b19      	ldr	r3, [pc, #100]	; (800d724 <_Balloc+0x80>)
 800d6c0:	4819      	ldr	r0, [pc, #100]	; (800d728 <_Balloc+0x84>)
 800d6c2:	f7fe fd6d 	bl	800c1a0 <__assert_func>
 800d6c6:	6045      	str	r5, [r0, #4]
 800d6c8:	6085      	str	r5, [r0, #8]
 800d6ca:	6005      	str	r5, [r0, #0]
 800d6cc:	60c5      	str	r5, [r0, #12]
 800d6ce:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d6d0:	68eb      	ldr	r3, [r5, #12]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d013      	beq.n	800d6fe <_Balloc+0x5a>
 800d6d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d6d8:	00a2      	lsls	r2, r4, #2
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	189b      	adds	r3, r3, r2
 800d6de:	6818      	ldr	r0, [r3, #0]
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d118      	bne.n	800d716 <_Balloc+0x72>
 800d6e4:	2101      	movs	r1, #1
 800d6e6:	000d      	movs	r5, r1
 800d6e8:	40a5      	lsls	r5, r4
 800d6ea:	1d6a      	adds	r2, r5, #5
 800d6ec:	0030      	movs	r0, r6
 800d6ee:	0092      	lsls	r2, r2, #2
 800d6f0:	f000 fca1 	bl	800e036 <_calloc_r>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d00c      	beq.n	800d712 <_Balloc+0x6e>
 800d6f8:	6044      	str	r4, [r0, #4]
 800d6fa:	6085      	str	r5, [r0, #8]
 800d6fc:	e00d      	b.n	800d71a <_Balloc+0x76>
 800d6fe:	2221      	movs	r2, #33	; 0x21
 800d700:	2104      	movs	r1, #4
 800d702:	0030      	movs	r0, r6
 800d704:	f000 fc97 	bl	800e036 <_calloc_r>
 800d708:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d70a:	60e8      	str	r0, [r5, #12]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1e1      	bne.n	800d6d6 <_Balloc+0x32>
 800d712:	2000      	movs	r0, #0
 800d714:	bd70      	pop	{r4, r5, r6, pc}
 800d716:	6802      	ldr	r2, [r0, #0]
 800d718:	601a      	str	r2, [r3, #0]
 800d71a:	2300      	movs	r3, #0
 800d71c:	6103      	str	r3, [r0, #16]
 800d71e:	60c3      	str	r3, [r0, #12]
 800d720:	e7f8      	b.n	800d714 <_Balloc+0x70>
 800d722:	46c0      	nop			; (mov r8, r8)
 800d724:	0800f238 	.word	0x0800f238
 800d728:	0800f4dc 	.word	0x0800f4dc

0800d72c <_Bfree>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d730:	0005      	movs	r5, r0
 800d732:	000c      	movs	r4, r1
 800d734:	2e00      	cmp	r6, #0
 800d736:	d10e      	bne.n	800d756 <_Bfree+0x2a>
 800d738:	2010      	movs	r0, #16
 800d73a:	f7fc fe59 	bl	800a3f0 <malloc>
 800d73e:	1e02      	subs	r2, r0, #0
 800d740:	6268      	str	r0, [r5, #36]	; 0x24
 800d742:	d104      	bne.n	800d74e <_Bfree+0x22>
 800d744:	218a      	movs	r1, #138	; 0x8a
 800d746:	4b09      	ldr	r3, [pc, #36]	; (800d76c <_Bfree+0x40>)
 800d748:	4809      	ldr	r0, [pc, #36]	; (800d770 <_Bfree+0x44>)
 800d74a:	f7fe fd29 	bl	800c1a0 <__assert_func>
 800d74e:	6046      	str	r6, [r0, #4]
 800d750:	6086      	str	r6, [r0, #8]
 800d752:	6006      	str	r6, [r0, #0]
 800d754:	60c6      	str	r6, [r0, #12]
 800d756:	2c00      	cmp	r4, #0
 800d758:	d007      	beq.n	800d76a <_Bfree+0x3e>
 800d75a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d75c:	6862      	ldr	r2, [r4, #4]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	0092      	lsls	r2, r2, #2
 800d762:	189b      	adds	r3, r3, r2
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	6022      	str	r2, [r4, #0]
 800d768:	601c      	str	r4, [r3, #0]
 800d76a:	bd70      	pop	{r4, r5, r6, pc}
 800d76c:	0800f238 	.word	0x0800f238
 800d770:	0800f4dc 	.word	0x0800f4dc

0800d774 <__multadd>:
 800d774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d776:	000e      	movs	r6, r1
 800d778:	9001      	str	r0, [sp, #4]
 800d77a:	000c      	movs	r4, r1
 800d77c:	001d      	movs	r5, r3
 800d77e:	2000      	movs	r0, #0
 800d780:	690f      	ldr	r7, [r1, #16]
 800d782:	3614      	adds	r6, #20
 800d784:	6833      	ldr	r3, [r6, #0]
 800d786:	3001      	adds	r0, #1
 800d788:	b299      	uxth	r1, r3
 800d78a:	4351      	muls	r1, r2
 800d78c:	0c1b      	lsrs	r3, r3, #16
 800d78e:	4353      	muls	r3, r2
 800d790:	1949      	adds	r1, r1, r5
 800d792:	0c0d      	lsrs	r5, r1, #16
 800d794:	195b      	adds	r3, r3, r5
 800d796:	0c1d      	lsrs	r5, r3, #16
 800d798:	b289      	uxth	r1, r1
 800d79a:	041b      	lsls	r3, r3, #16
 800d79c:	185b      	adds	r3, r3, r1
 800d79e:	c608      	stmia	r6!, {r3}
 800d7a0:	4287      	cmp	r7, r0
 800d7a2:	dcef      	bgt.n	800d784 <__multadd+0x10>
 800d7a4:	2d00      	cmp	r5, #0
 800d7a6:	d022      	beq.n	800d7ee <__multadd+0x7a>
 800d7a8:	68a3      	ldr	r3, [r4, #8]
 800d7aa:	42bb      	cmp	r3, r7
 800d7ac:	dc19      	bgt.n	800d7e2 <__multadd+0x6e>
 800d7ae:	6863      	ldr	r3, [r4, #4]
 800d7b0:	9801      	ldr	r0, [sp, #4]
 800d7b2:	1c59      	adds	r1, r3, #1
 800d7b4:	f7ff ff76 	bl	800d6a4 <_Balloc>
 800d7b8:	1e06      	subs	r6, r0, #0
 800d7ba:	d105      	bne.n	800d7c8 <__multadd+0x54>
 800d7bc:	0002      	movs	r2, r0
 800d7be:	21b5      	movs	r1, #181	; 0xb5
 800d7c0:	4b0c      	ldr	r3, [pc, #48]	; (800d7f4 <__multadd+0x80>)
 800d7c2:	480d      	ldr	r0, [pc, #52]	; (800d7f8 <__multadd+0x84>)
 800d7c4:	f7fe fcec 	bl	800c1a0 <__assert_func>
 800d7c8:	0021      	movs	r1, r4
 800d7ca:	6923      	ldr	r3, [r4, #16]
 800d7cc:	310c      	adds	r1, #12
 800d7ce:	1c9a      	adds	r2, r3, #2
 800d7d0:	0092      	lsls	r2, r2, #2
 800d7d2:	300c      	adds	r0, #12
 800d7d4:	f7ff ff4d 	bl	800d672 <memcpy>
 800d7d8:	0021      	movs	r1, r4
 800d7da:	9801      	ldr	r0, [sp, #4]
 800d7dc:	f7ff ffa6 	bl	800d72c <_Bfree>
 800d7e0:	0034      	movs	r4, r6
 800d7e2:	1d3b      	adds	r3, r7, #4
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	18e3      	adds	r3, r4, r3
 800d7e8:	605d      	str	r5, [r3, #4]
 800d7ea:	1c7b      	adds	r3, r7, #1
 800d7ec:	6123      	str	r3, [r4, #16]
 800d7ee:	0020      	movs	r0, r4
 800d7f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d7f2:	46c0      	nop			; (mov r8, r8)
 800d7f4:	0800f451 	.word	0x0800f451
 800d7f8:	0800f4dc 	.word	0x0800f4dc

0800d7fc <__s2b>:
 800d7fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7fe:	0006      	movs	r6, r0
 800d800:	0018      	movs	r0, r3
 800d802:	000c      	movs	r4, r1
 800d804:	3008      	adds	r0, #8
 800d806:	2109      	movs	r1, #9
 800d808:	9301      	str	r3, [sp, #4]
 800d80a:	0015      	movs	r5, r2
 800d80c:	f7f2 fd2a 	bl	8000264 <__divsi3>
 800d810:	2301      	movs	r3, #1
 800d812:	2100      	movs	r1, #0
 800d814:	4283      	cmp	r3, r0
 800d816:	db0a      	blt.n	800d82e <__s2b+0x32>
 800d818:	0030      	movs	r0, r6
 800d81a:	f7ff ff43 	bl	800d6a4 <_Balloc>
 800d81e:	1e01      	subs	r1, r0, #0
 800d820:	d108      	bne.n	800d834 <__s2b+0x38>
 800d822:	0002      	movs	r2, r0
 800d824:	4b19      	ldr	r3, [pc, #100]	; (800d88c <__s2b+0x90>)
 800d826:	481a      	ldr	r0, [pc, #104]	; (800d890 <__s2b+0x94>)
 800d828:	31ce      	adds	r1, #206	; 0xce
 800d82a:	f7fe fcb9 	bl	800c1a0 <__assert_func>
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	3101      	adds	r1, #1
 800d832:	e7ef      	b.n	800d814 <__s2b+0x18>
 800d834:	9b08      	ldr	r3, [sp, #32]
 800d836:	6143      	str	r3, [r0, #20]
 800d838:	2301      	movs	r3, #1
 800d83a:	6103      	str	r3, [r0, #16]
 800d83c:	2d09      	cmp	r5, #9
 800d83e:	dd18      	ble.n	800d872 <__s2b+0x76>
 800d840:	0023      	movs	r3, r4
 800d842:	3309      	adds	r3, #9
 800d844:	001f      	movs	r7, r3
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	1964      	adds	r4, r4, r5
 800d84a:	783b      	ldrb	r3, [r7, #0]
 800d84c:	220a      	movs	r2, #10
 800d84e:	0030      	movs	r0, r6
 800d850:	3b30      	subs	r3, #48	; 0x30
 800d852:	f7ff ff8f 	bl	800d774 <__multadd>
 800d856:	3701      	adds	r7, #1
 800d858:	0001      	movs	r1, r0
 800d85a:	42a7      	cmp	r7, r4
 800d85c:	d1f5      	bne.n	800d84a <__s2b+0x4e>
 800d85e:	002c      	movs	r4, r5
 800d860:	9b00      	ldr	r3, [sp, #0]
 800d862:	3c08      	subs	r4, #8
 800d864:	191c      	adds	r4, r3, r4
 800d866:	002f      	movs	r7, r5
 800d868:	9b01      	ldr	r3, [sp, #4]
 800d86a:	429f      	cmp	r7, r3
 800d86c:	db04      	blt.n	800d878 <__s2b+0x7c>
 800d86e:	0008      	movs	r0, r1
 800d870:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d872:	2509      	movs	r5, #9
 800d874:	340a      	adds	r4, #10
 800d876:	e7f6      	b.n	800d866 <__s2b+0x6a>
 800d878:	1b63      	subs	r3, r4, r5
 800d87a:	5ddb      	ldrb	r3, [r3, r7]
 800d87c:	220a      	movs	r2, #10
 800d87e:	0030      	movs	r0, r6
 800d880:	3b30      	subs	r3, #48	; 0x30
 800d882:	f7ff ff77 	bl	800d774 <__multadd>
 800d886:	3701      	adds	r7, #1
 800d888:	0001      	movs	r1, r0
 800d88a:	e7ed      	b.n	800d868 <__s2b+0x6c>
 800d88c:	0800f451 	.word	0x0800f451
 800d890:	0800f4dc 	.word	0x0800f4dc

0800d894 <__hi0bits>:
 800d894:	0003      	movs	r3, r0
 800d896:	0c02      	lsrs	r2, r0, #16
 800d898:	2000      	movs	r0, #0
 800d89a:	4282      	cmp	r2, r0
 800d89c:	d101      	bne.n	800d8a2 <__hi0bits+0xe>
 800d89e:	041b      	lsls	r3, r3, #16
 800d8a0:	3010      	adds	r0, #16
 800d8a2:	0e1a      	lsrs	r2, r3, #24
 800d8a4:	d101      	bne.n	800d8aa <__hi0bits+0x16>
 800d8a6:	3008      	adds	r0, #8
 800d8a8:	021b      	lsls	r3, r3, #8
 800d8aa:	0f1a      	lsrs	r2, r3, #28
 800d8ac:	d101      	bne.n	800d8b2 <__hi0bits+0x1e>
 800d8ae:	3004      	adds	r0, #4
 800d8b0:	011b      	lsls	r3, r3, #4
 800d8b2:	0f9a      	lsrs	r2, r3, #30
 800d8b4:	d101      	bne.n	800d8ba <__hi0bits+0x26>
 800d8b6:	3002      	adds	r0, #2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	db03      	blt.n	800d8c6 <__hi0bits+0x32>
 800d8be:	3001      	adds	r0, #1
 800d8c0:	005b      	lsls	r3, r3, #1
 800d8c2:	d400      	bmi.n	800d8c6 <__hi0bits+0x32>
 800d8c4:	2020      	movs	r0, #32
 800d8c6:	4770      	bx	lr

0800d8c8 <__lo0bits>:
 800d8c8:	6803      	ldr	r3, [r0, #0]
 800d8ca:	0002      	movs	r2, r0
 800d8cc:	2107      	movs	r1, #7
 800d8ce:	0018      	movs	r0, r3
 800d8d0:	4008      	ands	r0, r1
 800d8d2:	420b      	tst	r3, r1
 800d8d4:	d00d      	beq.n	800d8f2 <__lo0bits+0x2a>
 800d8d6:	3906      	subs	r1, #6
 800d8d8:	2000      	movs	r0, #0
 800d8da:	420b      	tst	r3, r1
 800d8dc:	d105      	bne.n	800d8ea <__lo0bits+0x22>
 800d8de:	3002      	adds	r0, #2
 800d8e0:	4203      	tst	r3, r0
 800d8e2:	d003      	beq.n	800d8ec <__lo0bits+0x24>
 800d8e4:	40cb      	lsrs	r3, r1
 800d8e6:	0008      	movs	r0, r1
 800d8e8:	6013      	str	r3, [r2, #0]
 800d8ea:	4770      	bx	lr
 800d8ec:	089b      	lsrs	r3, r3, #2
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	e7fb      	b.n	800d8ea <__lo0bits+0x22>
 800d8f2:	b299      	uxth	r1, r3
 800d8f4:	2900      	cmp	r1, #0
 800d8f6:	d101      	bne.n	800d8fc <__lo0bits+0x34>
 800d8f8:	2010      	movs	r0, #16
 800d8fa:	0c1b      	lsrs	r3, r3, #16
 800d8fc:	b2d9      	uxtb	r1, r3
 800d8fe:	2900      	cmp	r1, #0
 800d900:	d101      	bne.n	800d906 <__lo0bits+0x3e>
 800d902:	3008      	adds	r0, #8
 800d904:	0a1b      	lsrs	r3, r3, #8
 800d906:	0719      	lsls	r1, r3, #28
 800d908:	d101      	bne.n	800d90e <__lo0bits+0x46>
 800d90a:	3004      	adds	r0, #4
 800d90c:	091b      	lsrs	r3, r3, #4
 800d90e:	0799      	lsls	r1, r3, #30
 800d910:	d101      	bne.n	800d916 <__lo0bits+0x4e>
 800d912:	3002      	adds	r0, #2
 800d914:	089b      	lsrs	r3, r3, #2
 800d916:	07d9      	lsls	r1, r3, #31
 800d918:	d4e9      	bmi.n	800d8ee <__lo0bits+0x26>
 800d91a:	3001      	adds	r0, #1
 800d91c:	085b      	lsrs	r3, r3, #1
 800d91e:	d1e6      	bne.n	800d8ee <__lo0bits+0x26>
 800d920:	2020      	movs	r0, #32
 800d922:	e7e2      	b.n	800d8ea <__lo0bits+0x22>

0800d924 <__i2b>:
 800d924:	b510      	push	{r4, lr}
 800d926:	000c      	movs	r4, r1
 800d928:	2101      	movs	r1, #1
 800d92a:	f7ff febb 	bl	800d6a4 <_Balloc>
 800d92e:	2800      	cmp	r0, #0
 800d930:	d106      	bne.n	800d940 <__i2b+0x1c>
 800d932:	21a0      	movs	r1, #160	; 0xa0
 800d934:	0002      	movs	r2, r0
 800d936:	4b04      	ldr	r3, [pc, #16]	; (800d948 <__i2b+0x24>)
 800d938:	4804      	ldr	r0, [pc, #16]	; (800d94c <__i2b+0x28>)
 800d93a:	0049      	lsls	r1, r1, #1
 800d93c:	f7fe fc30 	bl	800c1a0 <__assert_func>
 800d940:	2301      	movs	r3, #1
 800d942:	6144      	str	r4, [r0, #20]
 800d944:	6103      	str	r3, [r0, #16]
 800d946:	bd10      	pop	{r4, pc}
 800d948:	0800f451 	.word	0x0800f451
 800d94c:	0800f4dc 	.word	0x0800f4dc

0800d950 <__multiply>:
 800d950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d952:	690b      	ldr	r3, [r1, #16]
 800d954:	0014      	movs	r4, r2
 800d956:	6912      	ldr	r2, [r2, #16]
 800d958:	000d      	movs	r5, r1
 800d95a:	b089      	sub	sp, #36	; 0x24
 800d95c:	4293      	cmp	r3, r2
 800d95e:	da01      	bge.n	800d964 <__multiply+0x14>
 800d960:	0025      	movs	r5, r4
 800d962:	000c      	movs	r4, r1
 800d964:	692f      	ldr	r7, [r5, #16]
 800d966:	6926      	ldr	r6, [r4, #16]
 800d968:	6869      	ldr	r1, [r5, #4]
 800d96a:	19bb      	adds	r3, r7, r6
 800d96c:	9302      	str	r3, [sp, #8]
 800d96e:	68ab      	ldr	r3, [r5, #8]
 800d970:	19ba      	adds	r2, r7, r6
 800d972:	4293      	cmp	r3, r2
 800d974:	da00      	bge.n	800d978 <__multiply+0x28>
 800d976:	3101      	adds	r1, #1
 800d978:	f7ff fe94 	bl	800d6a4 <_Balloc>
 800d97c:	9001      	str	r0, [sp, #4]
 800d97e:	2800      	cmp	r0, #0
 800d980:	d106      	bne.n	800d990 <__multiply+0x40>
 800d982:	215e      	movs	r1, #94	; 0x5e
 800d984:	0002      	movs	r2, r0
 800d986:	4b48      	ldr	r3, [pc, #288]	; (800daa8 <__multiply+0x158>)
 800d988:	4848      	ldr	r0, [pc, #288]	; (800daac <__multiply+0x15c>)
 800d98a:	31ff      	adds	r1, #255	; 0xff
 800d98c:	f7fe fc08 	bl	800c1a0 <__assert_func>
 800d990:	9b01      	ldr	r3, [sp, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	3314      	adds	r3, #20
 800d996:	469c      	mov	ip, r3
 800d998:	19bb      	adds	r3, r7, r6
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4463      	add	r3, ip
 800d99e:	9303      	str	r3, [sp, #12]
 800d9a0:	4663      	mov	r3, ip
 800d9a2:	9903      	ldr	r1, [sp, #12]
 800d9a4:	428b      	cmp	r3, r1
 800d9a6:	d32c      	bcc.n	800da02 <__multiply+0xb2>
 800d9a8:	002b      	movs	r3, r5
 800d9aa:	0022      	movs	r2, r4
 800d9ac:	3314      	adds	r3, #20
 800d9ae:	00bf      	lsls	r7, r7, #2
 800d9b0:	3214      	adds	r2, #20
 800d9b2:	9306      	str	r3, [sp, #24]
 800d9b4:	00b6      	lsls	r6, r6, #2
 800d9b6:	19db      	adds	r3, r3, r7
 800d9b8:	9304      	str	r3, [sp, #16]
 800d9ba:	1993      	adds	r3, r2, r6
 800d9bc:	9307      	str	r3, [sp, #28]
 800d9be:	2304      	movs	r3, #4
 800d9c0:	9305      	str	r3, [sp, #20]
 800d9c2:	002b      	movs	r3, r5
 800d9c4:	9904      	ldr	r1, [sp, #16]
 800d9c6:	3315      	adds	r3, #21
 800d9c8:	9200      	str	r2, [sp, #0]
 800d9ca:	4299      	cmp	r1, r3
 800d9cc:	d305      	bcc.n	800d9da <__multiply+0x8a>
 800d9ce:	1b4b      	subs	r3, r1, r5
 800d9d0:	3b15      	subs	r3, #21
 800d9d2:	089b      	lsrs	r3, r3, #2
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	9305      	str	r3, [sp, #20]
 800d9da:	9b07      	ldr	r3, [sp, #28]
 800d9dc:	9a00      	ldr	r2, [sp, #0]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d311      	bcc.n	800da06 <__multiply+0xb6>
 800d9e2:	9b02      	ldr	r3, [sp, #8]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	dd06      	ble.n	800d9f6 <__multiply+0xa6>
 800d9e8:	9b03      	ldr	r3, [sp, #12]
 800d9ea:	3b04      	subs	r3, #4
 800d9ec:	9303      	str	r3, [sp, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	9300      	str	r3, [sp, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d053      	beq.n	800da9e <__multiply+0x14e>
 800d9f6:	9b01      	ldr	r3, [sp, #4]
 800d9f8:	9a02      	ldr	r2, [sp, #8]
 800d9fa:	0018      	movs	r0, r3
 800d9fc:	611a      	str	r2, [r3, #16]
 800d9fe:	b009      	add	sp, #36	; 0x24
 800da00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da02:	c304      	stmia	r3!, {r2}
 800da04:	e7cd      	b.n	800d9a2 <__multiply+0x52>
 800da06:	9b00      	ldr	r3, [sp, #0]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	b298      	uxth	r0, r3
 800da0c:	2800      	cmp	r0, #0
 800da0e:	d01b      	beq.n	800da48 <__multiply+0xf8>
 800da10:	4667      	mov	r7, ip
 800da12:	2400      	movs	r4, #0
 800da14:	9e06      	ldr	r6, [sp, #24]
 800da16:	ce02      	ldmia	r6!, {r1}
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	b28b      	uxth	r3, r1
 800da1c:	4343      	muls	r3, r0
 800da1e:	b292      	uxth	r2, r2
 800da20:	189b      	adds	r3, r3, r2
 800da22:	191b      	adds	r3, r3, r4
 800da24:	0c0c      	lsrs	r4, r1, #16
 800da26:	4344      	muls	r4, r0
 800da28:	683a      	ldr	r2, [r7, #0]
 800da2a:	0c11      	lsrs	r1, r2, #16
 800da2c:	1861      	adds	r1, r4, r1
 800da2e:	0c1c      	lsrs	r4, r3, #16
 800da30:	1909      	adds	r1, r1, r4
 800da32:	0c0c      	lsrs	r4, r1, #16
 800da34:	b29b      	uxth	r3, r3
 800da36:	0409      	lsls	r1, r1, #16
 800da38:	430b      	orrs	r3, r1
 800da3a:	c708      	stmia	r7!, {r3}
 800da3c:	9b04      	ldr	r3, [sp, #16]
 800da3e:	42b3      	cmp	r3, r6
 800da40:	d8e9      	bhi.n	800da16 <__multiply+0xc6>
 800da42:	4663      	mov	r3, ip
 800da44:	9a05      	ldr	r2, [sp, #20]
 800da46:	509c      	str	r4, [r3, r2]
 800da48:	9b00      	ldr	r3, [sp, #0]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	0c1e      	lsrs	r6, r3, #16
 800da4e:	d020      	beq.n	800da92 <__multiply+0x142>
 800da50:	4663      	mov	r3, ip
 800da52:	002c      	movs	r4, r5
 800da54:	4660      	mov	r0, ip
 800da56:	2700      	movs	r7, #0
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3414      	adds	r4, #20
 800da5c:	6822      	ldr	r2, [r4, #0]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	b291      	uxth	r1, r2
 800da62:	4371      	muls	r1, r6
 800da64:	6802      	ldr	r2, [r0, #0]
 800da66:	0c12      	lsrs	r2, r2, #16
 800da68:	1889      	adds	r1, r1, r2
 800da6a:	19cf      	adds	r7, r1, r7
 800da6c:	0439      	lsls	r1, r7, #16
 800da6e:	430b      	orrs	r3, r1
 800da70:	6003      	str	r3, [r0, #0]
 800da72:	cc02      	ldmia	r4!, {r1}
 800da74:	6843      	ldr	r3, [r0, #4]
 800da76:	0c09      	lsrs	r1, r1, #16
 800da78:	4371      	muls	r1, r6
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	0c3f      	lsrs	r7, r7, #16
 800da7e:	18cb      	adds	r3, r1, r3
 800da80:	9a04      	ldr	r2, [sp, #16]
 800da82:	19db      	adds	r3, r3, r7
 800da84:	0c1f      	lsrs	r7, r3, #16
 800da86:	3004      	adds	r0, #4
 800da88:	42a2      	cmp	r2, r4
 800da8a:	d8e7      	bhi.n	800da5c <__multiply+0x10c>
 800da8c:	4662      	mov	r2, ip
 800da8e:	9905      	ldr	r1, [sp, #20]
 800da90:	5053      	str	r3, [r2, r1]
 800da92:	9b00      	ldr	r3, [sp, #0]
 800da94:	3304      	adds	r3, #4
 800da96:	9300      	str	r3, [sp, #0]
 800da98:	2304      	movs	r3, #4
 800da9a:	449c      	add	ip, r3
 800da9c:	e79d      	b.n	800d9da <__multiply+0x8a>
 800da9e:	9b02      	ldr	r3, [sp, #8]
 800daa0:	3b01      	subs	r3, #1
 800daa2:	9302      	str	r3, [sp, #8]
 800daa4:	e79d      	b.n	800d9e2 <__multiply+0x92>
 800daa6:	46c0      	nop			; (mov r8, r8)
 800daa8:	0800f451 	.word	0x0800f451
 800daac:	0800f4dc 	.word	0x0800f4dc

0800dab0 <__pow5mult>:
 800dab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dab2:	2303      	movs	r3, #3
 800dab4:	0015      	movs	r5, r2
 800dab6:	0007      	movs	r7, r0
 800dab8:	000e      	movs	r6, r1
 800daba:	401a      	ands	r2, r3
 800dabc:	421d      	tst	r5, r3
 800dabe:	d008      	beq.n	800dad2 <__pow5mult+0x22>
 800dac0:	4925      	ldr	r1, [pc, #148]	; (800db58 <__pow5mult+0xa8>)
 800dac2:	3a01      	subs	r2, #1
 800dac4:	0092      	lsls	r2, r2, #2
 800dac6:	5852      	ldr	r2, [r2, r1]
 800dac8:	2300      	movs	r3, #0
 800daca:	0031      	movs	r1, r6
 800dacc:	f7ff fe52 	bl	800d774 <__multadd>
 800dad0:	0006      	movs	r6, r0
 800dad2:	10ad      	asrs	r5, r5, #2
 800dad4:	d03d      	beq.n	800db52 <__pow5mult+0xa2>
 800dad6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800dad8:	2c00      	cmp	r4, #0
 800dada:	d10f      	bne.n	800dafc <__pow5mult+0x4c>
 800dadc:	2010      	movs	r0, #16
 800dade:	f7fc fc87 	bl	800a3f0 <malloc>
 800dae2:	1e02      	subs	r2, r0, #0
 800dae4:	6278      	str	r0, [r7, #36]	; 0x24
 800dae6:	d105      	bne.n	800daf4 <__pow5mult+0x44>
 800dae8:	21d7      	movs	r1, #215	; 0xd7
 800daea:	4b1c      	ldr	r3, [pc, #112]	; (800db5c <__pow5mult+0xac>)
 800daec:	481c      	ldr	r0, [pc, #112]	; (800db60 <__pow5mult+0xb0>)
 800daee:	0049      	lsls	r1, r1, #1
 800daf0:	f7fe fb56 	bl	800c1a0 <__assert_func>
 800daf4:	6044      	str	r4, [r0, #4]
 800daf6:	6084      	str	r4, [r0, #8]
 800daf8:	6004      	str	r4, [r0, #0]
 800dafa:	60c4      	str	r4, [r0, #12]
 800dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafe:	689c      	ldr	r4, [r3, #8]
 800db00:	9301      	str	r3, [sp, #4]
 800db02:	2c00      	cmp	r4, #0
 800db04:	d108      	bne.n	800db18 <__pow5mult+0x68>
 800db06:	0038      	movs	r0, r7
 800db08:	4916      	ldr	r1, [pc, #88]	; (800db64 <__pow5mult+0xb4>)
 800db0a:	f7ff ff0b 	bl	800d924 <__i2b>
 800db0e:	9b01      	ldr	r3, [sp, #4]
 800db10:	0004      	movs	r4, r0
 800db12:	6098      	str	r0, [r3, #8]
 800db14:	2300      	movs	r3, #0
 800db16:	6003      	str	r3, [r0, #0]
 800db18:	2301      	movs	r3, #1
 800db1a:	421d      	tst	r5, r3
 800db1c:	d00a      	beq.n	800db34 <__pow5mult+0x84>
 800db1e:	0031      	movs	r1, r6
 800db20:	0022      	movs	r2, r4
 800db22:	0038      	movs	r0, r7
 800db24:	f7ff ff14 	bl	800d950 <__multiply>
 800db28:	0031      	movs	r1, r6
 800db2a:	9001      	str	r0, [sp, #4]
 800db2c:	0038      	movs	r0, r7
 800db2e:	f7ff fdfd 	bl	800d72c <_Bfree>
 800db32:	9e01      	ldr	r6, [sp, #4]
 800db34:	106d      	asrs	r5, r5, #1
 800db36:	d00c      	beq.n	800db52 <__pow5mult+0xa2>
 800db38:	6820      	ldr	r0, [r4, #0]
 800db3a:	2800      	cmp	r0, #0
 800db3c:	d107      	bne.n	800db4e <__pow5mult+0x9e>
 800db3e:	0022      	movs	r2, r4
 800db40:	0021      	movs	r1, r4
 800db42:	0038      	movs	r0, r7
 800db44:	f7ff ff04 	bl	800d950 <__multiply>
 800db48:	2300      	movs	r3, #0
 800db4a:	6020      	str	r0, [r4, #0]
 800db4c:	6003      	str	r3, [r0, #0]
 800db4e:	0004      	movs	r4, r0
 800db50:	e7e2      	b.n	800db18 <__pow5mult+0x68>
 800db52:	0030      	movs	r0, r6
 800db54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db56:	46c0      	nop			; (mov r8, r8)
 800db58:	0800f628 	.word	0x0800f628
 800db5c:	0800f238 	.word	0x0800f238
 800db60:	0800f4dc 	.word	0x0800f4dc
 800db64:	00000271 	.word	0x00000271

0800db68 <__lshift>:
 800db68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db6a:	000c      	movs	r4, r1
 800db6c:	0017      	movs	r7, r2
 800db6e:	6923      	ldr	r3, [r4, #16]
 800db70:	1155      	asrs	r5, r2, #5
 800db72:	b087      	sub	sp, #28
 800db74:	18eb      	adds	r3, r5, r3
 800db76:	9302      	str	r3, [sp, #8]
 800db78:	3301      	adds	r3, #1
 800db7a:	9301      	str	r3, [sp, #4]
 800db7c:	6849      	ldr	r1, [r1, #4]
 800db7e:	68a3      	ldr	r3, [r4, #8]
 800db80:	9004      	str	r0, [sp, #16]
 800db82:	9a01      	ldr	r2, [sp, #4]
 800db84:	4293      	cmp	r3, r2
 800db86:	db10      	blt.n	800dbaa <__lshift+0x42>
 800db88:	9804      	ldr	r0, [sp, #16]
 800db8a:	f7ff fd8b 	bl	800d6a4 <_Balloc>
 800db8e:	2300      	movs	r3, #0
 800db90:	0002      	movs	r2, r0
 800db92:	0006      	movs	r6, r0
 800db94:	0019      	movs	r1, r3
 800db96:	3214      	adds	r2, #20
 800db98:	4298      	cmp	r0, r3
 800db9a:	d10c      	bne.n	800dbb6 <__lshift+0x4e>
 800db9c:	21da      	movs	r1, #218	; 0xda
 800db9e:	0002      	movs	r2, r0
 800dba0:	4b26      	ldr	r3, [pc, #152]	; (800dc3c <__lshift+0xd4>)
 800dba2:	4827      	ldr	r0, [pc, #156]	; (800dc40 <__lshift+0xd8>)
 800dba4:	31ff      	adds	r1, #255	; 0xff
 800dba6:	f7fe fafb 	bl	800c1a0 <__assert_func>
 800dbaa:	3101      	adds	r1, #1
 800dbac:	005b      	lsls	r3, r3, #1
 800dbae:	e7e8      	b.n	800db82 <__lshift+0x1a>
 800dbb0:	0098      	lsls	r0, r3, #2
 800dbb2:	5011      	str	r1, [r2, r0]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	42ab      	cmp	r3, r5
 800dbb8:	dbfa      	blt.n	800dbb0 <__lshift+0x48>
 800dbba:	43eb      	mvns	r3, r5
 800dbbc:	17db      	asrs	r3, r3, #31
 800dbbe:	401d      	ands	r5, r3
 800dbc0:	211f      	movs	r1, #31
 800dbc2:	0023      	movs	r3, r4
 800dbc4:	0038      	movs	r0, r7
 800dbc6:	00ad      	lsls	r5, r5, #2
 800dbc8:	1955      	adds	r5, r2, r5
 800dbca:	6922      	ldr	r2, [r4, #16]
 800dbcc:	3314      	adds	r3, #20
 800dbce:	0092      	lsls	r2, r2, #2
 800dbd0:	4008      	ands	r0, r1
 800dbd2:	4684      	mov	ip, r0
 800dbd4:	189a      	adds	r2, r3, r2
 800dbd6:	420f      	tst	r7, r1
 800dbd8:	d02a      	beq.n	800dc30 <__lshift+0xc8>
 800dbda:	3101      	adds	r1, #1
 800dbdc:	1a09      	subs	r1, r1, r0
 800dbde:	9105      	str	r1, [sp, #20]
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	9503      	str	r5, [sp, #12]
 800dbe4:	4667      	mov	r7, ip
 800dbe6:	6818      	ldr	r0, [r3, #0]
 800dbe8:	40b8      	lsls	r0, r7
 800dbea:	4301      	orrs	r1, r0
 800dbec:	9803      	ldr	r0, [sp, #12]
 800dbee:	c002      	stmia	r0!, {r1}
 800dbf0:	cb02      	ldmia	r3!, {r1}
 800dbf2:	9003      	str	r0, [sp, #12]
 800dbf4:	9805      	ldr	r0, [sp, #20]
 800dbf6:	40c1      	lsrs	r1, r0
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d8f3      	bhi.n	800dbe4 <__lshift+0x7c>
 800dbfc:	0020      	movs	r0, r4
 800dbfe:	3015      	adds	r0, #21
 800dc00:	2304      	movs	r3, #4
 800dc02:	4282      	cmp	r2, r0
 800dc04:	d304      	bcc.n	800dc10 <__lshift+0xa8>
 800dc06:	1b13      	subs	r3, r2, r4
 800dc08:	3b15      	subs	r3, #21
 800dc0a:	089b      	lsrs	r3, r3, #2
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	50e9      	str	r1, [r5, r3]
 800dc12:	2900      	cmp	r1, #0
 800dc14:	d002      	beq.n	800dc1c <__lshift+0xb4>
 800dc16:	9b02      	ldr	r3, [sp, #8]
 800dc18:	3302      	adds	r3, #2
 800dc1a:	9301      	str	r3, [sp, #4]
 800dc1c:	9b01      	ldr	r3, [sp, #4]
 800dc1e:	9804      	ldr	r0, [sp, #16]
 800dc20:	3b01      	subs	r3, #1
 800dc22:	0021      	movs	r1, r4
 800dc24:	6133      	str	r3, [r6, #16]
 800dc26:	f7ff fd81 	bl	800d72c <_Bfree>
 800dc2a:	0030      	movs	r0, r6
 800dc2c:	b007      	add	sp, #28
 800dc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc30:	cb02      	ldmia	r3!, {r1}
 800dc32:	c502      	stmia	r5!, {r1}
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d8fb      	bhi.n	800dc30 <__lshift+0xc8>
 800dc38:	e7f0      	b.n	800dc1c <__lshift+0xb4>
 800dc3a:	46c0      	nop			; (mov r8, r8)
 800dc3c:	0800f451 	.word	0x0800f451
 800dc40:	0800f4dc 	.word	0x0800f4dc

0800dc44 <__mcmp>:
 800dc44:	6902      	ldr	r2, [r0, #16]
 800dc46:	690b      	ldr	r3, [r1, #16]
 800dc48:	b530      	push	{r4, r5, lr}
 800dc4a:	0004      	movs	r4, r0
 800dc4c:	1ad0      	subs	r0, r2, r3
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d10d      	bne.n	800dc6e <__mcmp+0x2a>
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	3414      	adds	r4, #20
 800dc56:	3114      	adds	r1, #20
 800dc58:	18e2      	adds	r2, r4, r3
 800dc5a:	18c9      	adds	r1, r1, r3
 800dc5c:	3a04      	subs	r2, #4
 800dc5e:	3904      	subs	r1, #4
 800dc60:	6815      	ldr	r5, [r2, #0]
 800dc62:	680b      	ldr	r3, [r1, #0]
 800dc64:	429d      	cmp	r5, r3
 800dc66:	d003      	beq.n	800dc70 <__mcmp+0x2c>
 800dc68:	2001      	movs	r0, #1
 800dc6a:	429d      	cmp	r5, r3
 800dc6c:	d303      	bcc.n	800dc76 <__mcmp+0x32>
 800dc6e:	bd30      	pop	{r4, r5, pc}
 800dc70:	4294      	cmp	r4, r2
 800dc72:	d3f3      	bcc.n	800dc5c <__mcmp+0x18>
 800dc74:	e7fb      	b.n	800dc6e <__mcmp+0x2a>
 800dc76:	4240      	negs	r0, r0
 800dc78:	e7f9      	b.n	800dc6e <__mcmp+0x2a>
	...

0800dc7c <__mdiff>:
 800dc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc7e:	000e      	movs	r6, r1
 800dc80:	0007      	movs	r7, r0
 800dc82:	0011      	movs	r1, r2
 800dc84:	0030      	movs	r0, r6
 800dc86:	b087      	sub	sp, #28
 800dc88:	0014      	movs	r4, r2
 800dc8a:	f7ff ffdb 	bl	800dc44 <__mcmp>
 800dc8e:	1e05      	subs	r5, r0, #0
 800dc90:	d110      	bne.n	800dcb4 <__mdiff+0x38>
 800dc92:	0001      	movs	r1, r0
 800dc94:	0038      	movs	r0, r7
 800dc96:	f7ff fd05 	bl	800d6a4 <_Balloc>
 800dc9a:	1e02      	subs	r2, r0, #0
 800dc9c:	d104      	bne.n	800dca8 <__mdiff+0x2c>
 800dc9e:	4b40      	ldr	r3, [pc, #256]	; (800dda0 <__mdiff+0x124>)
 800dca0:	4940      	ldr	r1, [pc, #256]	; (800dda4 <__mdiff+0x128>)
 800dca2:	4841      	ldr	r0, [pc, #260]	; (800dda8 <__mdiff+0x12c>)
 800dca4:	f7fe fa7c 	bl	800c1a0 <__assert_func>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	6145      	str	r5, [r0, #20]
 800dcac:	6103      	str	r3, [r0, #16]
 800dcae:	0010      	movs	r0, r2
 800dcb0:	b007      	add	sp, #28
 800dcb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	db04      	blt.n	800dcc6 <__mdiff+0x4a>
 800dcbc:	0023      	movs	r3, r4
 800dcbe:	0034      	movs	r4, r6
 800dcc0:	001e      	movs	r6, r3
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	9301      	str	r3, [sp, #4]
 800dcc6:	0038      	movs	r0, r7
 800dcc8:	6861      	ldr	r1, [r4, #4]
 800dcca:	f7ff fceb 	bl	800d6a4 <_Balloc>
 800dcce:	1e02      	subs	r2, r0, #0
 800dcd0:	d103      	bne.n	800dcda <__mdiff+0x5e>
 800dcd2:	2190      	movs	r1, #144	; 0x90
 800dcd4:	4b32      	ldr	r3, [pc, #200]	; (800dda0 <__mdiff+0x124>)
 800dcd6:	0089      	lsls	r1, r1, #2
 800dcd8:	e7e3      	b.n	800dca2 <__mdiff+0x26>
 800dcda:	9b01      	ldr	r3, [sp, #4]
 800dcdc:	2700      	movs	r7, #0
 800dcde:	60c3      	str	r3, [r0, #12]
 800dce0:	6920      	ldr	r0, [r4, #16]
 800dce2:	3414      	adds	r4, #20
 800dce4:	9401      	str	r4, [sp, #4]
 800dce6:	9b01      	ldr	r3, [sp, #4]
 800dce8:	0084      	lsls	r4, r0, #2
 800dcea:	191b      	adds	r3, r3, r4
 800dcec:	0034      	movs	r4, r6
 800dcee:	9302      	str	r3, [sp, #8]
 800dcf0:	6933      	ldr	r3, [r6, #16]
 800dcf2:	3414      	adds	r4, #20
 800dcf4:	0099      	lsls	r1, r3, #2
 800dcf6:	1863      	adds	r3, r4, r1
 800dcf8:	9303      	str	r3, [sp, #12]
 800dcfa:	0013      	movs	r3, r2
 800dcfc:	3314      	adds	r3, #20
 800dcfe:	469c      	mov	ip, r3
 800dd00:	9305      	str	r3, [sp, #20]
 800dd02:	9b01      	ldr	r3, [sp, #4]
 800dd04:	9304      	str	r3, [sp, #16]
 800dd06:	9b04      	ldr	r3, [sp, #16]
 800dd08:	cc02      	ldmia	r4!, {r1}
 800dd0a:	cb20      	ldmia	r3!, {r5}
 800dd0c:	9304      	str	r3, [sp, #16]
 800dd0e:	b2ab      	uxth	r3, r5
 800dd10:	19df      	adds	r7, r3, r7
 800dd12:	b28b      	uxth	r3, r1
 800dd14:	1afb      	subs	r3, r7, r3
 800dd16:	0c09      	lsrs	r1, r1, #16
 800dd18:	0c2d      	lsrs	r5, r5, #16
 800dd1a:	1a6d      	subs	r5, r5, r1
 800dd1c:	1419      	asrs	r1, r3, #16
 800dd1e:	186d      	adds	r5, r5, r1
 800dd20:	4661      	mov	r1, ip
 800dd22:	142f      	asrs	r7, r5, #16
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	042d      	lsls	r5, r5, #16
 800dd28:	432b      	orrs	r3, r5
 800dd2a:	c108      	stmia	r1!, {r3}
 800dd2c:	9b03      	ldr	r3, [sp, #12]
 800dd2e:	468c      	mov	ip, r1
 800dd30:	42a3      	cmp	r3, r4
 800dd32:	d8e8      	bhi.n	800dd06 <__mdiff+0x8a>
 800dd34:	0031      	movs	r1, r6
 800dd36:	9c03      	ldr	r4, [sp, #12]
 800dd38:	3115      	adds	r1, #21
 800dd3a:	2304      	movs	r3, #4
 800dd3c:	428c      	cmp	r4, r1
 800dd3e:	d304      	bcc.n	800dd4a <__mdiff+0xce>
 800dd40:	1ba3      	subs	r3, r4, r6
 800dd42:	3b15      	subs	r3, #21
 800dd44:	089b      	lsrs	r3, r3, #2
 800dd46:	3301      	adds	r3, #1
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	9901      	ldr	r1, [sp, #4]
 800dd4c:	18cc      	adds	r4, r1, r3
 800dd4e:	9905      	ldr	r1, [sp, #20]
 800dd50:	0026      	movs	r6, r4
 800dd52:	18cb      	adds	r3, r1, r3
 800dd54:	469c      	mov	ip, r3
 800dd56:	9902      	ldr	r1, [sp, #8]
 800dd58:	428e      	cmp	r6, r1
 800dd5a:	d310      	bcc.n	800dd7e <__mdiff+0x102>
 800dd5c:	9e02      	ldr	r6, [sp, #8]
 800dd5e:	1ee1      	subs	r1, r4, #3
 800dd60:	2500      	movs	r5, #0
 800dd62:	428e      	cmp	r6, r1
 800dd64:	d304      	bcc.n	800dd70 <__mdiff+0xf4>
 800dd66:	0031      	movs	r1, r6
 800dd68:	3103      	adds	r1, #3
 800dd6a:	1b0c      	subs	r4, r1, r4
 800dd6c:	08a4      	lsrs	r4, r4, #2
 800dd6e:	00a5      	lsls	r5, r4, #2
 800dd70:	195b      	adds	r3, r3, r5
 800dd72:	3b04      	subs	r3, #4
 800dd74:	6819      	ldr	r1, [r3, #0]
 800dd76:	2900      	cmp	r1, #0
 800dd78:	d00f      	beq.n	800dd9a <__mdiff+0x11e>
 800dd7a:	6110      	str	r0, [r2, #16]
 800dd7c:	e797      	b.n	800dcae <__mdiff+0x32>
 800dd7e:	ce02      	ldmia	r6!, {r1}
 800dd80:	b28d      	uxth	r5, r1
 800dd82:	19ed      	adds	r5, r5, r7
 800dd84:	0c0f      	lsrs	r7, r1, #16
 800dd86:	1429      	asrs	r1, r5, #16
 800dd88:	1879      	adds	r1, r7, r1
 800dd8a:	140f      	asrs	r7, r1, #16
 800dd8c:	b2ad      	uxth	r5, r5
 800dd8e:	0409      	lsls	r1, r1, #16
 800dd90:	430d      	orrs	r5, r1
 800dd92:	4661      	mov	r1, ip
 800dd94:	c120      	stmia	r1!, {r5}
 800dd96:	468c      	mov	ip, r1
 800dd98:	e7dd      	b.n	800dd56 <__mdiff+0xda>
 800dd9a:	3801      	subs	r0, #1
 800dd9c:	e7e9      	b.n	800dd72 <__mdiff+0xf6>
 800dd9e:	46c0      	nop			; (mov r8, r8)
 800dda0:	0800f451 	.word	0x0800f451
 800dda4:	00000232 	.word	0x00000232
 800dda8:	0800f4dc 	.word	0x0800f4dc

0800ddac <__ulp>:
 800ddac:	4b0f      	ldr	r3, [pc, #60]	; (800ddec <__ulp+0x40>)
 800ddae:	4019      	ands	r1, r3
 800ddb0:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <__ulp+0x44>)
 800ddb2:	18c9      	adds	r1, r1, r3
 800ddb4:	2900      	cmp	r1, #0
 800ddb6:	dd04      	ble.n	800ddc2 <__ulp+0x16>
 800ddb8:	2200      	movs	r2, #0
 800ddba:	000b      	movs	r3, r1
 800ddbc:	0010      	movs	r0, r2
 800ddbe:	0019      	movs	r1, r3
 800ddc0:	4770      	bx	lr
 800ddc2:	4249      	negs	r1, r1
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	1509      	asrs	r1, r1, #20
 800ddca:	2913      	cmp	r1, #19
 800ddcc:	dc04      	bgt.n	800ddd8 <__ulp+0x2c>
 800ddce:	2080      	movs	r0, #128	; 0x80
 800ddd0:	0300      	lsls	r0, r0, #12
 800ddd2:	4108      	asrs	r0, r1
 800ddd4:	0003      	movs	r3, r0
 800ddd6:	e7f1      	b.n	800ddbc <__ulp+0x10>
 800ddd8:	3914      	subs	r1, #20
 800ddda:	2001      	movs	r0, #1
 800dddc:	291e      	cmp	r1, #30
 800ddde:	dc02      	bgt.n	800dde6 <__ulp+0x3a>
 800dde0:	2080      	movs	r0, #128	; 0x80
 800dde2:	0600      	lsls	r0, r0, #24
 800dde4:	40c8      	lsrs	r0, r1
 800dde6:	0002      	movs	r2, r0
 800dde8:	e7e8      	b.n	800ddbc <__ulp+0x10>
 800ddea:	46c0      	nop			; (mov r8, r8)
 800ddec:	7ff00000 	.word	0x7ff00000
 800ddf0:	fcc00000 	.word	0xfcc00000

0800ddf4 <__b2d>:
 800ddf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddf6:	0006      	movs	r6, r0
 800ddf8:	6903      	ldr	r3, [r0, #16]
 800ddfa:	3614      	adds	r6, #20
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	18f3      	adds	r3, r6, r3
 800de00:	1f1d      	subs	r5, r3, #4
 800de02:	682c      	ldr	r4, [r5, #0]
 800de04:	000f      	movs	r7, r1
 800de06:	0020      	movs	r0, r4
 800de08:	9301      	str	r3, [sp, #4]
 800de0a:	f7ff fd43 	bl	800d894 <__hi0bits>
 800de0e:	2320      	movs	r3, #32
 800de10:	1a1b      	subs	r3, r3, r0
 800de12:	491f      	ldr	r1, [pc, #124]	; (800de90 <__b2d+0x9c>)
 800de14:	603b      	str	r3, [r7, #0]
 800de16:	280a      	cmp	r0, #10
 800de18:	dc16      	bgt.n	800de48 <__b2d+0x54>
 800de1a:	230b      	movs	r3, #11
 800de1c:	0027      	movs	r7, r4
 800de1e:	1a1b      	subs	r3, r3, r0
 800de20:	40df      	lsrs	r7, r3
 800de22:	4339      	orrs	r1, r7
 800de24:	469c      	mov	ip, r3
 800de26:	000b      	movs	r3, r1
 800de28:	2100      	movs	r1, #0
 800de2a:	42ae      	cmp	r6, r5
 800de2c:	d202      	bcs.n	800de34 <__b2d+0x40>
 800de2e:	9901      	ldr	r1, [sp, #4]
 800de30:	3908      	subs	r1, #8
 800de32:	6809      	ldr	r1, [r1, #0]
 800de34:	3015      	adds	r0, #21
 800de36:	4084      	lsls	r4, r0
 800de38:	4660      	mov	r0, ip
 800de3a:	40c1      	lsrs	r1, r0
 800de3c:	430c      	orrs	r4, r1
 800de3e:	0022      	movs	r2, r4
 800de40:	0010      	movs	r0, r2
 800de42:	0019      	movs	r1, r3
 800de44:	b003      	add	sp, #12
 800de46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de48:	2700      	movs	r7, #0
 800de4a:	42ae      	cmp	r6, r5
 800de4c:	d202      	bcs.n	800de54 <__b2d+0x60>
 800de4e:	9d01      	ldr	r5, [sp, #4]
 800de50:	3d08      	subs	r5, #8
 800de52:	682f      	ldr	r7, [r5, #0]
 800de54:	230b      	movs	r3, #11
 800de56:	425b      	negs	r3, r3
 800de58:	469c      	mov	ip, r3
 800de5a:	4484      	add	ip, r0
 800de5c:	280b      	cmp	r0, #11
 800de5e:	d013      	beq.n	800de88 <__b2d+0x94>
 800de60:	4663      	mov	r3, ip
 800de62:	2020      	movs	r0, #32
 800de64:	409c      	lsls	r4, r3
 800de66:	1ac0      	subs	r0, r0, r3
 800de68:	003b      	movs	r3, r7
 800de6a:	40c3      	lsrs	r3, r0
 800de6c:	431c      	orrs	r4, r3
 800de6e:	4321      	orrs	r1, r4
 800de70:	000b      	movs	r3, r1
 800de72:	2100      	movs	r1, #0
 800de74:	42b5      	cmp	r5, r6
 800de76:	d901      	bls.n	800de7c <__b2d+0x88>
 800de78:	3d04      	subs	r5, #4
 800de7a:	6829      	ldr	r1, [r5, #0]
 800de7c:	4664      	mov	r4, ip
 800de7e:	40c1      	lsrs	r1, r0
 800de80:	40a7      	lsls	r7, r4
 800de82:	430f      	orrs	r7, r1
 800de84:	003a      	movs	r2, r7
 800de86:	e7db      	b.n	800de40 <__b2d+0x4c>
 800de88:	4321      	orrs	r1, r4
 800de8a:	000b      	movs	r3, r1
 800de8c:	e7fa      	b.n	800de84 <__b2d+0x90>
 800de8e:	46c0      	nop			; (mov r8, r8)
 800de90:	3ff00000 	.word	0x3ff00000

0800de94 <__d2b>:
 800de94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de96:	2101      	movs	r1, #1
 800de98:	0014      	movs	r4, r2
 800de9a:	001e      	movs	r6, r3
 800de9c:	9f08      	ldr	r7, [sp, #32]
 800de9e:	f7ff fc01 	bl	800d6a4 <_Balloc>
 800dea2:	1e05      	subs	r5, r0, #0
 800dea4:	d105      	bne.n	800deb2 <__d2b+0x1e>
 800dea6:	0002      	movs	r2, r0
 800dea8:	4b26      	ldr	r3, [pc, #152]	; (800df44 <__d2b+0xb0>)
 800deaa:	4927      	ldr	r1, [pc, #156]	; (800df48 <__d2b+0xb4>)
 800deac:	4827      	ldr	r0, [pc, #156]	; (800df4c <__d2b+0xb8>)
 800deae:	f7fe f977 	bl	800c1a0 <__assert_func>
 800deb2:	0333      	lsls	r3, r6, #12
 800deb4:	0076      	lsls	r6, r6, #1
 800deb6:	0b1b      	lsrs	r3, r3, #12
 800deb8:	0d76      	lsrs	r6, r6, #21
 800deba:	d124      	bne.n	800df06 <__d2b+0x72>
 800debc:	9301      	str	r3, [sp, #4]
 800debe:	2c00      	cmp	r4, #0
 800dec0:	d027      	beq.n	800df12 <__d2b+0x7e>
 800dec2:	4668      	mov	r0, sp
 800dec4:	9400      	str	r4, [sp, #0]
 800dec6:	f7ff fcff 	bl	800d8c8 <__lo0bits>
 800deca:	9c00      	ldr	r4, [sp, #0]
 800decc:	2800      	cmp	r0, #0
 800dece:	d01e      	beq.n	800df0e <__d2b+0x7a>
 800ded0:	9b01      	ldr	r3, [sp, #4]
 800ded2:	2120      	movs	r1, #32
 800ded4:	001a      	movs	r2, r3
 800ded6:	1a09      	subs	r1, r1, r0
 800ded8:	408a      	lsls	r2, r1
 800deda:	40c3      	lsrs	r3, r0
 800dedc:	4322      	orrs	r2, r4
 800dede:	616a      	str	r2, [r5, #20]
 800dee0:	9301      	str	r3, [sp, #4]
 800dee2:	9c01      	ldr	r4, [sp, #4]
 800dee4:	61ac      	str	r4, [r5, #24]
 800dee6:	1e63      	subs	r3, r4, #1
 800dee8:	419c      	sbcs	r4, r3
 800deea:	3401      	adds	r4, #1
 800deec:	612c      	str	r4, [r5, #16]
 800deee:	2e00      	cmp	r6, #0
 800def0:	d018      	beq.n	800df24 <__d2b+0x90>
 800def2:	4b17      	ldr	r3, [pc, #92]	; (800df50 <__d2b+0xbc>)
 800def4:	18f6      	adds	r6, r6, r3
 800def6:	2335      	movs	r3, #53	; 0x35
 800def8:	1836      	adds	r6, r6, r0
 800defa:	1a18      	subs	r0, r3, r0
 800defc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800defe:	603e      	str	r6, [r7, #0]
 800df00:	6018      	str	r0, [r3, #0]
 800df02:	0028      	movs	r0, r5
 800df04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df06:	2280      	movs	r2, #128	; 0x80
 800df08:	0352      	lsls	r2, r2, #13
 800df0a:	4313      	orrs	r3, r2
 800df0c:	e7d6      	b.n	800debc <__d2b+0x28>
 800df0e:	616c      	str	r4, [r5, #20]
 800df10:	e7e7      	b.n	800dee2 <__d2b+0x4e>
 800df12:	a801      	add	r0, sp, #4
 800df14:	f7ff fcd8 	bl	800d8c8 <__lo0bits>
 800df18:	2401      	movs	r4, #1
 800df1a:	9b01      	ldr	r3, [sp, #4]
 800df1c:	612c      	str	r4, [r5, #16]
 800df1e:	616b      	str	r3, [r5, #20]
 800df20:	3020      	adds	r0, #32
 800df22:	e7e4      	b.n	800deee <__d2b+0x5a>
 800df24:	4b0b      	ldr	r3, [pc, #44]	; (800df54 <__d2b+0xc0>)
 800df26:	18c0      	adds	r0, r0, r3
 800df28:	4b0b      	ldr	r3, [pc, #44]	; (800df58 <__d2b+0xc4>)
 800df2a:	6038      	str	r0, [r7, #0]
 800df2c:	18e3      	adds	r3, r4, r3
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	18eb      	adds	r3, r5, r3
 800df32:	6958      	ldr	r0, [r3, #20]
 800df34:	f7ff fcae 	bl	800d894 <__hi0bits>
 800df38:	0164      	lsls	r4, r4, #5
 800df3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df3c:	1a24      	subs	r4, r4, r0
 800df3e:	601c      	str	r4, [r3, #0]
 800df40:	e7df      	b.n	800df02 <__d2b+0x6e>
 800df42:	46c0      	nop			; (mov r8, r8)
 800df44:	0800f451 	.word	0x0800f451
 800df48:	0000030a 	.word	0x0000030a
 800df4c:	0800f4dc 	.word	0x0800f4dc
 800df50:	fffffbcd 	.word	0xfffffbcd
 800df54:	fffffbce 	.word	0xfffffbce
 800df58:	3fffffff 	.word	0x3fffffff

0800df5c <__ratio>:
 800df5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df5e:	b087      	sub	sp, #28
 800df60:	000f      	movs	r7, r1
 800df62:	a904      	add	r1, sp, #16
 800df64:	0006      	movs	r6, r0
 800df66:	f7ff ff45 	bl	800ddf4 <__b2d>
 800df6a:	9000      	str	r0, [sp, #0]
 800df6c:	9101      	str	r1, [sp, #4]
 800df6e:	9c00      	ldr	r4, [sp, #0]
 800df70:	9d01      	ldr	r5, [sp, #4]
 800df72:	0038      	movs	r0, r7
 800df74:	a905      	add	r1, sp, #20
 800df76:	f7ff ff3d 	bl	800ddf4 <__b2d>
 800df7a:	9002      	str	r0, [sp, #8]
 800df7c:	9103      	str	r1, [sp, #12]
 800df7e:	9a02      	ldr	r2, [sp, #8]
 800df80:	9b03      	ldr	r3, [sp, #12]
 800df82:	6931      	ldr	r1, [r6, #16]
 800df84:	6938      	ldr	r0, [r7, #16]
 800df86:	9e05      	ldr	r6, [sp, #20]
 800df88:	1a08      	subs	r0, r1, r0
 800df8a:	9904      	ldr	r1, [sp, #16]
 800df8c:	0140      	lsls	r0, r0, #5
 800df8e:	1b89      	subs	r1, r1, r6
 800df90:	1841      	adds	r1, r0, r1
 800df92:	0508      	lsls	r0, r1, #20
 800df94:	2900      	cmp	r1, #0
 800df96:	dd07      	ble.n	800dfa8 <__ratio+0x4c>
 800df98:	9901      	ldr	r1, [sp, #4]
 800df9a:	1845      	adds	r5, r0, r1
 800df9c:	0020      	movs	r0, r4
 800df9e:	0029      	movs	r1, r5
 800dfa0:	f7f3 fe46 	bl	8001c30 <__aeabi_ddiv>
 800dfa4:	b007      	add	sp, #28
 800dfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfa8:	9903      	ldr	r1, [sp, #12]
 800dfaa:	1a0b      	subs	r3, r1, r0
 800dfac:	e7f6      	b.n	800df9c <__ratio+0x40>

0800dfae <__copybits>:
 800dfae:	b570      	push	{r4, r5, r6, lr}
 800dfb0:	0014      	movs	r4, r2
 800dfb2:	0005      	movs	r5, r0
 800dfb4:	3901      	subs	r1, #1
 800dfb6:	6913      	ldr	r3, [r2, #16]
 800dfb8:	1149      	asrs	r1, r1, #5
 800dfba:	3101      	adds	r1, #1
 800dfbc:	0089      	lsls	r1, r1, #2
 800dfbe:	3414      	adds	r4, #20
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	1841      	adds	r1, r0, r1
 800dfc4:	18e3      	adds	r3, r4, r3
 800dfc6:	42a3      	cmp	r3, r4
 800dfc8:	d80d      	bhi.n	800dfe6 <__copybits+0x38>
 800dfca:	0014      	movs	r4, r2
 800dfcc:	3411      	adds	r4, #17
 800dfce:	2500      	movs	r5, #0
 800dfd0:	429c      	cmp	r4, r3
 800dfd2:	d803      	bhi.n	800dfdc <__copybits+0x2e>
 800dfd4:	1a9b      	subs	r3, r3, r2
 800dfd6:	3b11      	subs	r3, #17
 800dfd8:	089b      	lsrs	r3, r3, #2
 800dfda:	009d      	lsls	r5, r3, #2
 800dfdc:	2300      	movs	r3, #0
 800dfde:	1940      	adds	r0, r0, r5
 800dfe0:	4281      	cmp	r1, r0
 800dfe2:	d803      	bhi.n	800dfec <__copybits+0x3e>
 800dfe4:	bd70      	pop	{r4, r5, r6, pc}
 800dfe6:	cc40      	ldmia	r4!, {r6}
 800dfe8:	c540      	stmia	r5!, {r6}
 800dfea:	e7ec      	b.n	800dfc6 <__copybits+0x18>
 800dfec:	c008      	stmia	r0!, {r3}
 800dfee:	e7f7      	b.n	800dfe0 <__copybits+0x32>

0800dff0 <__any_on>:
 800dff0:	0002      	movs	r2, r0
 800dff2:	6900      	ldr	r0, [r0, #16]
 800dff4:	b510      	push	{r4, lr}
 800dff6:	3214      	adds	r2, #20
 800dff8:	114b      	asrs	r3, r1, #5
 800dffa:	4298      	cmp	r0, r3
 800dffc:	db13      	blt.n	800e026 <__any_on+0x36>
 800dffe:	dd0c      	ble.n	800e01a <__any_on+0x2a>
 800e000:	241f      	movs	r4, #31
 800e002:	0008      	movs	r0, r1
 800e004:	4020      	ands	r0, r4
 800e006:	4221      	tst	r1, r4
 800e008:	d007      	beq.n	800e01a <__any_on+0x2a>
 800e00a:	0099      	lsls	r1, r3, #2
 800e00c:	588c      	ldr	r4, [r1, r2]
 800e00e:	0021      	movs	r1, r4
 800e010:	40c1      	lsrs	r1, r0
 800e012:	4081      	lsls	r1, r0
 800e014:	2001      	movs	r0, #1
 800e016:	428c      	cmp	r4, r1
 800e018:	d104      	bne.n	800e024 <__any_on+0x34>
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	18d3      	adds	r3, r2, r3
 800e01e:	4293      	cmp	r3, r2
 800e020:	d803      	bhi.n	800e02a <__any_on+0x3a>
 800e022:	2000      	movs	r0, #0
 800e024:	bd10      	pop	{r4, pc}
 800e026:	0003      	movs	r3, r0
 800e028:	e7f7      	b.n	800e01a <__any_on+0x2a>
 800e02a:	3b04      	subs	r3, #4
 800e02c:	6819      	ldr	r1, [r3, #0]
 800e02e:	2900      	cmp	r1, #0
 800e030:	d0f5      	beq.n	800e01e <__any_on+0x2e>
 800e032:	2001      	movs	r0, #1
 800e034:	e7f6      	b.n	800e024 <__any_on+0x34>

0800e036 <_calloc_r>:
 800e036:	b570      	push	{r4, r5, r6, lr}
 800e038:	0c13      	lsrs	r3, r2, #16
 800e03a:	0c0d      	lsrs	r5, r1, #16
 800e03c:	d11e      	bne.n	800e07c <_calloc_r+0x46>
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10c      	bne.n	800e05c <_calloc_r+0x26>
 800e042:	b289      	uxth	r1, r1
 800e044:	b294      	uxth	r4, r2
 800e046:	434c      	muls	r4, r1
 800e048:	0021      	movs	r1, r4
 800e04a:	f7fc fa4f 	bl	800a4ec <_malloc_r>
 800e04e:	1e05      	subs	r5, r0, #0
 800e050:	d01b      	beq.n	800e08a <_calloc_r+0x54>
 800e052:	0022      	movs	r2, r4
 800e054:	2100      	movs	r1, #0
 800e056:	f7fc f9d5 	bl	800a404 <memset>
 800e05a:	e016      	b.n	800e08a <_calloc_r+0x54>
 800e05c:	1c1d      	adds	r5, r3, #0
 800e05e:	1c0b      	adds	r3, r1, #0
 800e060:	b292      	uxth	r2, r2
 800e062:	b289      	uxth	r1, r1
 800e064:	b29c      	uxth	r4, r3
 800e066:	4351      	muls	r1, r2
 800e068:	b2ab      	uxth	r3, r5
 800e06a:	4363      	muls	r3, r4
 800e06c:	0c0c      	lsrs	r4, r1, #16
 800e06e:	191c      	adds	r4, r3, r4
 800e070:	0c22      	lsrs	r2, r4, #16
 800e072:	d107      	bne.n	800e084 <_calloc_r+0x4e>
 800e074:	0424      	lsls	r4, r4, #16
 800e076:	b289      	uxth	r1, r1
 800e078:	430c      	orrs	r4, r1
 800e07a:	e7e5      	b.n	800e048 <_calloc_r+0x12>
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d101      	bne.n	800e084 <_calloc_r+0x4e>
 800e080:	1c13      	adds	r3, r2, #0
 800e082:	e7ed      	b.n	800e060 <_calloc_r+0x2a>
 800e084:	230c      	movs	r3, #12
 800e086:	2500      	movs	r5, #0
 800e088:	6003      	str	r3, [r0, #0]
 800e08a:	0028      	movs	r0, r5
 800e08c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e090 <__ssputs_r>:
 800e090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e092:	688e      	ldr	r6, [r1, #8]
 800e094:	b085      	sub	sp, #20
 800e096:	0007      	movs	r7, r0
 800e098:	000c      	movs	r4, r1
 800e09a:	9203      	str	r2, [sp, #12]
 800e09c:	9301      	str	r3, [sp, #4]
 800e09e:	429e      	cmp	r6, r3
 800e0a0:	d83c      	bhi.n	800e11c <__ssputs_r+0x8c>
 800e0a2:	2390      	movs	r3, #144	; 0x90
 800e0a4:	898a      	ldrh	r2, [r1, #12]
 800e0a6:	00db      	lsls	r3, r3, #3
 800e0a8:	421a      	tst	r2, r3
 800e0aa:	d034      	beq.n	800e116 <__ssputs_r+0x86>
 800e0ac:	6909      	ldr	r1, [r1, #16]
 800e0ae:	6823      	ldr	r3, [r4, #0]
 800e0b0:	6960      	ldr	r0, [r4, #20]
 800e0b2:	1a5b      	subs	r3, r3, r1
 800e0b4:	9302      	str	r3, [sp, #8]
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	4343      	muls	r3, r0
 800e0ba:	0fdd      	lsrs	r5, r3, #31
 800e0bc:	18ed      	adds	r5, r5, r3
 800e0be:	9b01      	ldr	r3, [sp, #4]
 800e0c0:	9802      	ldr	r0, [sp, #8]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	181b      	adds	r3, r3, r0
 800e0c6:	106d      	asrs	r5, r5, #1
 800e0c8:	42ab      	cmp	r3, r5
 800e0ca:	d900      	bls.n	800e0ce <__ssputs_r+0x3e>
 800e0cc:	001d      	movs	r5, r3
 800e0ce:	0553      	lsls	r3, r2, #21
 800e0d0:	d532      	bpl.n	800e138 <__ssputs_r+0xa8>
 800e0d2:	0029      	movs	r1, r5
 800e0d4:	0038      	movs	r0, r7
 800e0d6:	f7fc fa09 	bl	800a4ec <_malloc_r>
 800e0da:	1e06      	subs	r6, r0, #0
 800e0dc:	d109      	bne.n	800e0f2 <__ssputs_r+0x62>
 800e0de:	230c      	movs	r3, #12
 800e0e0:	603b      	str	r3, [r7, #0]
 800e0e2:	2340      	movs	r3, #64	; 0x40
 800e0e4:	2001      	movs	r0, #1
 800e0e6:	89a2      	ldrh	r2, [r4, #12]
 800e0e8:	4240      	negs	r0, r0
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	81a3      	strh	r3, [r4, #12]
 800e0ee:	b005      	add	sp, #20
 800e0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f2:	9a02      	ldr	r2, [sp, #8]
 800e0f4:	6921      	ldr	r1, [r4, #16]
 800e0f6:	f7ff fabc 	bl	800d672 <memcpy>
 800e0fa:	89a3      	ldrh	r3, [r4, #12]
 800e0fc:	4a14      	ldr	r2, [pc, #80]	; (800e150 <__ssputs_r+0xc0>)
 800e0fe:	401a      	ands	r2, r3
 800e100:	2380      	movs	r3, #128	; 0x80
 800e102:	4313      	orrs	r3, r2
 800e104:	81a3      	strh	r3, [r4, #12]
 800e106:	9b02      	ldr	r3, [sp, #8]
 800e108:	6126      	str	r6, [r4, #16]
 800e10a:	18f6      	adds	r6, r6, r3
 800e10c:	6026      	str	r6, [r4, #0]
 800e10e:	6165      	str	r5, [r4, #20]
 800e110:	9e01      	ldr	r6, [sp, #4]
 800e112:	1aed      	subs	r5, r5, r3
 800e114:	60a5      	str	r5, [r4, #8]
 800e116:	9b01      	ldr	r3, [sp, #4]
 800e118:	429e      	cmp	r6, r3
 800e11a:	d900      	bls.n	800e11e <__ssputs_r+0x8e>
 800e11c:	9e01      	ldr	r6, [sp, #4]
 800e11e:	0032      	movs	r2, r6
 800e120:	9903      	ldr	r1, [sp, #12]
 800e122:	6820      	ldr	r0, [r4, #0]
 800e124:	f000 fdb2 	bl	800ec8c <memmove>
 800e128:	68a3      	ldr	r3, [r4, #8]
 800e12a:	2000      	movs	r0, #0
 800e12c:	1b9b      	subs	r3, r3, r6
 800e12e:	60a3      	str	r3, [r4, #8]
 800e130:	6823      	ldr	r3, [r4, #0]
 800e132:	199e      	adds	r6, r3, r6
 800e134:	6026      	str	r6, [r4, #0]
 800e136:	e7da      	b.n	800e0ee <__ssputs_r+0x5e>
 800e138:	002a      	movs	r2, r5
 800e13a:	0038      	movs	r0, r7
 800e13c:	f000 fdb9 	bl	800ecb2 <_realloc_r>
 800e140:	1e06      	subs	r6, r0, #0
 800e142:	d1e0      	bne.n	800e106 <__ssputs_r+0x76>
 800e144:	0038      	movs	r0, r7
 800e146:	6921      	ldr	r1, [r4, #16]
 800e148:	f7fc f964 	bl	800a414 <_free_r>
 800e14c:	e7c7      	b.n	800e0de <__ssputs_r+0x4e>
 800e14e:	46c0      	nop			; (mov r8, r8)
 800e150:	fffffb7f 	.word	0xfffffb7f

0800e154 <_svfiprintf_r>:
 800e154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e156:	b0a1      	sub	sp, #132	; 0x84
 800e158:	9003      	str	r0, [sp, #12]
 800e15a:	001d      	movs	r5, r3
 800e15c:	898b      	ldrh	r3, [r1, #12]
 800e15e:	000f      	movs	r7, r1
 800e160:	0016      	movs	r6, r2
 800e162:	061b      	lsls	r3, r3, #24
 800e164:	d511      	bpl.n	800e18a <_svfiprintf_r+0x36>
 800e166:	690b      	ldr	r3, [r1, #16]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10e      	bne.n	800e18a <_svfiprintf_r+0x36>
 800e16c:	2140      	movs	r1, #64	; 0x40
 800e16e:	f7fc f9bd 	bl	800a4ec <_malloc_r>
 800e172:	6038      	str	r0, [r7, #0]
 800e174:	6138      	str	r0, [r7, #16]
 800e176:	2800      	cmp	r0, #0
 800e178:	d105      	bne.n	800e186 <_svfiprintf_r+0x32>
 800e17a:	230c      	movs	r3, #12
 800e17c:	9a03      	ldr	r2, [sp, #12]
 800e17e:	3801      	subs	r0, #1
 800e180:	6013      	str	r3, [r2, #0]
 800e182:	b021      	add	sp, #132	; 0x84
 800e184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e186:	2340      	movs	r3, #64	; 0x40
 800e188:	617b      	str	r3, [r7, #20]
 800e18a:	2300      	movs	r3, #0
 800e18c:	ac08      	add	r4, sp, #32
 800e18e:	6163      	str	r3, [r4, #20]
 800e190:	3320      	adds	r3, #32
 800e192:	7663      	strb	r3, [r4, #25]
 800e194:	3310      	adds	r3, #16
 800e196:	76a3      	strb	r3, [r4, #26]
 800e198:	9507      	str	r5, [sp, #28]
 800e19a:	0035      	movs	r5, r6
 800e19c:	782b      	ldrb	r3, [r5, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <_svfiprintf_r+0x52>
 800e1a2:	2b25      	cmp	r3, #37	; 0x25
 800e1a4:	d147      	bne.n	800e236 <_svfiprintf_r+0xe2>
 800e1a6:	1bab      	subs	r3, r5, r6
 800e1a8:	9305      	str	r3, [sp, #20]
 800e1aa:	42b5      	cmp	r5, r6
 800e1ac:	d00c      	beq.n	800e1c8 <_svfiprintf_r+0x74>
 800e1ae:	0032      	movs	r2, r6
 800e1b0:	0039      	movs	r1, r7
 800e1b2:	9803      	ldr	r0, [sp, #12]
 800e1b4:	f7ff ff6c 	bl	800e090 <__ssputs_r>
 800e1b8:	1c43      	adds	r3, r0, #1
 800e1ba:	d100      	bne.n	800e1be <_svfiprintf_r+0x6a>
 800e1bc:	e0ae      	b.n	800e31c <_svfiprintf_r+0x1c8>
 800e1be:	6962      	ldr	r2, [r4, #20]
 800e1c0:	9b05      	ldr	r3, [sp, #20]
 800e1c2:	4694      	mov	ip, r2
 800e1c4:	4463      	add	r3, ip
 800e1c6:	6163      	str	r3, [r4, #20]
 800e1c8:	782b      	ldrb	r3, [r5, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d100      	bne.n	800e1d0 <_svfiprintf_r+0x7c>
 800e1ce:	e0a5      	b.n	800e31c <_svfiprintf_r+0x1c8>
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	4252      	negs	r2, r2
 800e1d6:	6062      	str	r2, [r4, #4]
 800e1d8:	a904      	add	r1, sp, #16
 800e1da:	3254      	adds	r2, #84	; 0x54
 800e1dc:	1852      	adds	r2, r2, r1
 800e1de:	1c6e      	adds	r6, r5, #1
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	60e3      	str	r3, [r4, #12]
 800e1e4:	60a3      	str	r3, [r4, #8]
 800e1e6:	7013      	strb	r3, [r2, #0]
 800e1e8:	65a3      	str	r3, [r4, #88]	; 0x58
 800e1ea:	2205      	movs	r2, #5
 800e1ec:	7831      	ldrb	r1, [r6, #0]
 800e1ee:	4854      	ldr	r0, [pc, #336]	; (800e340 <_svfiprintf_r+0x1ec>)
 800e1f0:	f7ff fa34 	bl	800d65c <memchr>
 800e1f4:	1c75      	adds	r5, r6, #1
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d11f      	bne.n	800e23a <_svfiprintf_r+0xe6>
 800e1fa:	6822      	ldr	r2, [r4, #0]
 800e1fc:	06d3      	lsls	r3, r2, #27
 800e1fe:	d504      	bpl.n	800e20a <_svfiprintf_r+0xb6>
 800e200:	2353      	movs	r3, #83	; 0x53
 800e202:	a904      	add	r1, sp, #16
 800e204:	185b      	adds	r3, r3, r1
 800e206:	2120      	movs	r1, #32
 800e208:	7019      	strb	r1, [r3, #0]
 800e20a:	0713      	lsls	r3, r2, #28
 800e20c:	d504      	bpl.n	800e218 <_svfiprintf_r+0xc4>
 800e20e:	2353      	movs	r3, #83	; 0x53
 800e210:	a904      	add	r1, sp, #16
 800e212:	185b      	adds	r3, r3, r1
 800e214:	212b      	movs	r1, #43	; 0x2b
 800e216:	7019      	strb	r1, [r3, #0]
 800e218:	7833      	ldrb	r3, [r6, #0]
 800e21a:	2b2a      	cmp	r3, #42	; 0x2a
 800e21c:	d016      	beq.n	800e24c <_svfiprintf_r+0xf8>
 800e21e:	0035      	movs	r5, r6
 800e220:	2100      	movs	r1, #0
 800e222:	200a      	movs	r0, #10
 800e224:	68e3      	ldr	r3, [r4, #12]
 800e226:	782a      	ldrb	r2, [r5, #0]
 800e228:	1c6e      	adds	r6, r5, #1
 800e22a:	3a30      	subs	r2, #48	; 0x30
 800e22c:	2a09      	cmp	r2, #9
 800e22e:	d94e      	bls.n	800e2ce <_svfiprintf_r+0x17a>
 800e230:	2900      	cmp	r1, #0
 800e232:	d111      	bne.n	800e258 <_svfiprintf_r+0x104>
 800e234:	e017      	b.n	800e266 <_svfiprintf_r+0x112>
 800e236:	3501      	adds	r5, #1
 800e238:	e7b0      	b.n	800e19c <_svfiprintf_r+0x48>
 800e23a:	4b41      	ldr	r3, [pc, #260]	; (800e340 <_svfiprintf_r+0x1ec>)
 800e23c:	6822      	ldr	r2, [r4, #0]
 800e23e:	1ac0      	subs	r0, r0, r3
 800e240:	2301      	movs	r3, #1
 800e242:	4083      	lsls	r3, r0
 800e244:	4313      	orrs	r3, r2
 800e246:	002e      	movs	r6, r5
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	e7ce      	b.n	800e1ea <_svfiprintf_r+0x96>
 800e24c:	9b07      	ldr	r3, [sp, #28]
 800e24e:	1d19      	adds	r1, r3, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	9107      	str	r1, [sp, #28]
 800e254:	2b00      	cmp	r3, #0
 800e256:	db01      	blt.n	800e25c <_svfiprintf_r+0x108>
 800e258:	930b      	str	r3, [sp, #44]	; 0x2c
 800e25a:	e004      	b.n	800e266 <_svfiprintf_r+0x112>
 800e25c:	425b      	negs	r3, r3
 800e25e:	60e3      	str	r3, [r4, #12]
 800e260:	2302      	movs	r3, #2
 800e262:	4313      	orrs	r3, r2
 800e264:	6023      	str	r3, [r4, #0]
 800e266:	782b      	ldrb	r3, [r5, #0]
 800e268:	2b2e      	cmp	r3, #46	; 0x2e
 800e26a:	d10a      	bne.n	800e282 <_svfiprintf_r+0x12e>
 800e26c:	786b      	ldrb	r3, [r5, #1]
 800e26e:	2b2a      	cmp	r3, #42	; 0x2a
 800e270:	d135      	bne.n	800e2de <_svfiprintf_r+0x18a>
 800e272:	9b07      	ldr	r3, [sp, #28]
 800e274:	3502      	adds	r5, #2
 800e276:	1d1a      	adds	r2, r3, #4
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	9207      	str	r2, [sp, #28]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	db2b      	blt.n	800e2d8 <_svfiprintf_r+0x184>
 800e280:	9309      	str	r3, [sp, #36]	; 0x24
 800e282:	4e30      	ldr	r6, [pc, #192]	; (800e344 <_svfiprintf_r+0x1f0>)
 800e284:	2203      	movs	r2, #3
 800e286:	0030      	movs	r0, r6
 800e288:	7829      	ldrb	r1, [r5, #0]
 800e28a:	f7ff f9e7 	bl	800d65c <memchr>
 800e28e:	2800      	cmp	r0, #0
 800e290:	d006      	beq.n	800e2a0 <_svfiprintf_r+0x14c>
 800e292:	2340      	movs	r3, #64	; 0x40
 800e294:	1b80      	subs	r0, r0, r6
 800e296:	4083      	lsls	r3, r0
 800e298:	6822      	ldr	r2, [r4, #0]
 800e29a:	3501      	adds	r5, #1
 800e29c:	4313      	orrs	r3, r2
 800e29e:	6023      	str	r3, [r4, #0]
 800e2a0:	7829      	ldrb	r1, [r5, #0]
 800e2a2:	2206      	movs	r2, #6
 800e2a4:	4828      	ldr	r0, [pc, #160]	; (800e348 <_svfiprintf_r+0x1f4>)
 800e2a6:	1c6e      	adds	r6, r5, #1
 800e2a8:	7621      	strb	r1, [r4, #24]
 800e2aa:	f7ff f9d7 	bl	800d65c <memchr>
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d03c      	beq.n	800e32c <_svfiprintf_r+0x1d8>
 800e2b2:	4b26      	ldr	r3, [pc, #152]	; (800e34c <_svfiprintf_r+0x1f8>)
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d125      	bne.n	800e304 <_svfiprintf_r+0x1b0>
 800e2b8:	2207      	movs	r2, #7
 800e2ba:	9b07      	ldr	r3, [sp, #28]
 800e2bc:	3307      	adds	r3, #7
 800e2be:	4393      	bics	r3, r2
 800e2c0:	3308      	adds	r3, #8
 800e2c2:	9307      	str	r3, [sp, #28]
 800e2c4:	6963      	ldr	r3, [r4, #20]
 800e2c6:	9a04      	ldr	r2, [sp, #16]
 800e2c8:	189b      	adds	r3, r3, r2
 800e2ca:	6163      	str	r3, [r4, #20]
 800e2cc:	e765      	b.n	800e19a <_svfiprintf_r+0x46>
 800e2ce:	4343      	muls	r3, r0
 800e2d0:	0035      	movs	r5, r6
 800e2d2:	2101      	movs	r1, #1
 800e2d4:	189b      	adds	r3, r3, r2
 800e2d6:	e7a6      	b.n	800e226 <_svfiprintf_r+0xd2>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	425b      	negs	r3, r3
 800e2dc:	e7d0      	b.n	800e280 <_svfiprintf_r+0x12c>
 800e2de:	2300      	movs	r3, #0
 800e2e0:	200a      	movs	r0, #10
 800e2e2:	001a      	movs	r2, r3
 800e2e4:	3501      	adds	r5, #1
 800e2e6:	6063      	str	r3, [r4, #4]
 800e2e8:	7829      	ldrb	r1, [r5, #0]
 800e2ea:	1c6e      	adds	r6, r5, #1
 800e2ec:	3930      	subs	r1, #48	; 0x30
 800e2ee:	2909      	cmp	r1, #9
 800e2f0:	d903      	bls.n	800e2fa <_svfiprintf_r+0x1a6>
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d0c5      	beq.n	800e282 <_svfiprintf_r+0x12e>
 800e2f6:	9209      	str	r2, [sp, #36]	; 0x24
 800e2f8:	e7c3      	b.n	800e282 <_svfiprintf_r+0x12e>
 800e2fa:	4342      	muls	r2, r0
 800e2fc:	0035      	movs	r5, r6
 800e2fe:	2301      	movs	r3, #1
 800e300:	1852      	adds	r2, r2, r1
 800e302:	e7f1      	b.n	800e2e8 <_svfiprintf_r+0x194>
 800e304:	ab07      	add	r3, sp, #28
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	003a      	movs	r2, r7
 800e30a:	0021      	movs	r1, r4
 800e30c:	4b10      	ldr	r3, [pc, #64]	; (800e350 <_svfiprintf_r+0x1fc>)
 800e30e:	9803      	ldr	r0, [sp, #12]
 800e310:	f7fc fa0c 	bl	800a72c <_printf_float>
 800e314:	9004      	str	r0, [sp, #16]
 800e316:	9b04      	ldr	r3, [sp, #16]
 800e318:	3301      	adds	r3, #1
 800e31a:	d1d3      	bne.n	800e2c4 <_svfiprintf_r+0x170>
 800e31c:	89bb      	ldrh	r3, [r7, #12]
 800e31e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e320:	065b      	lsls	r3, r3, #25
 800e322:	d400      	bmi.n	800e326 <_svfiprintf_r+0x1d2>
 800e324:	e72d      	b.n	800e182 <_svfiprintf_r+0x2e>
 800e326:	2001      	movs	r0, #1
 800e328:	4240      	negs	r0, r0
 800e32a:	e72a      	b.n	800e182 <_svfiprintf_r+0x2e>
 800e32c:	ab07      	add	r3, sp, #28
 800e32e:	9300      	str	r3, [sp, #0]
 800e330:	003a      	movs	r2, r7
 800e332:	0021      	movs	r1, r4
 800e334:	4b06      	ldr	r3, [pc, #24]	; (800e350 <_svfiprintf_r+0x1fc>)
 800e336:	9803      	ldr	r0, [sp, #12]
 800e338:	f7fc fcaa 	bl	800ac90 <_printf_i>
 800e33c:	e7ea      	b.n	800e314 <_svfiprintf_r+0x1c0>
 800e33e:	46c0      	nop			; (mov r8, r8)
 800e340:	0800f634 	.word	0x0800f634
 800e344:	0800f63a 	.word	0x0800f63a
 800e348:	0800f63e 	.word	0x0800f63e
 800e34c:	0800a72d 	.word	0x0800a72d
 800e350:	0800e091 	.word	0x0800e091

0800e354 <__sfputc_r>:
 800e354:	6893      	ldr	r3, [r2, #8]
 800e356:	b510      	push	{r4, lr}
 800e358:	3b01      	subs	r3, #1
 800e35a:	6093      	str	r3, [r2, #8]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	da04      	bge.n	800e36a <__sfputc_r+0x16>
 800e360:	6994      	ldr	r4, [r2, #24]
 800e362:	42a3      	cmp	r3, r4
 800e364:	db07      	blt.n	800e376 <__sfputc_r+0x22>
 800e366:	290a      	cmp	r1, #10
 800e368:	d005      	beq.n	800e376 <__sfputc_r+0x22>
 800e36a:	6813      	ldr	r3, [r2, #0]
 800e36c:	1c58      	adds	r0, r3, #1
 800e36e:	6010      	str	r0, [r2, #0]
 800e370:	7019      	strb	r1, [r3, #0]
 800e372:	0008      	movs	r0, r1
 800e374:	bd10      	pop	{r4, pc}
 800e376:	f000 f967 	bl	800e648 <__swbuf_r>
 800e37a:	0001      	movs	r1, r0
 800e37c:	e7f9      	b.n	800e372 <__sfputc_r+0x1e>

0800e37e <__sfputs_r>:
 800e37e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e380:	0006      	movs	r6, r0
 800e382:	000f      	movs	r7, r1
 800e384:	0014      	movs	r4, r2
 800e386:	18d5      	adds	r5, r2, r3
 800e388:	42ac      	cmp	r4, r5
 800e38a:	d101      	bne.n	800e390 <__sfputs_r+0x12>
 800e38c:	2000      	movs	r0, #0
 800e38e:	e007      	b.n	800e3a0 <__sfputs_r+0x22>
 800e390:	7821      	ldrb	r1, [r4, #0]
 800e392:	003a      	movs	r2, r7
 800e394:	0030      	movs	r0, r6
 800e396:	f7ff ffdd 	bl	800e354 <__sfputc_r>
 800e39a:	3401      	adds	r4, #1
 800e39c:	1c43      	adds	r3, r0, #1
 800e39e:	d1f3      	bne.n	800e388 <__sfputs_r+0xa>
 800e3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3a4 <_vfiprintf_r>:
 800e3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3a6:	b0a1      	sub	sp, #132	; 0x84
 800e3a8:	0006      	movs	r6, r0
 800e3aa:	000c      	movs	r4, r1
 800e3ac:	001f      	movs	r7, r3
 800e3ae:	9203      	str	r2, [sp, #12]
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d004      	beq.n	800e3be <_vfiprintf_r+0x1a>
 800e3b4:	6983      	ldr	r3, [r0, #24]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d101      	bne.n	800e3be <_vfiprintf_r+0x1a>
 800e3ba:	f000 fb57 	bl	800ea6c <__sinit>
 800e3be:	4b8e      	ldr	r3, [pc, #568]	; (800e5f8 <_vfiprintf_r+0x254>)
 800e3c0:	429c      	cmp	r4, r3
 800e3c2:	d11c      	bne.n	800e3fe <_vfiprintf_r+0x5a>
 800e3c4:	6874      	ldr	r4, [r6, #4]
 800e3c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3c8:	07db      	lsls	r3, r3, #31
 800e3ca:	d405      	bmi.n	800e3d8 <_vfiprintf_r+0x34>
 800e3cc:	89a3      	ldrh	r3, [r4, #12]
 800e3ce:	059b      	lsls	r3, r3, #22
 800e3d0:	d402      	bmi.n	800e3d8 <_vfiprintf_r+0x34>
 800e3d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3d4:	f000 fbeb 	bl	800ebae <__retarget_lock_acquire_recursive>
 800e3d8:	89a3      	ldrh	r3, [r4, #12]
 800e3da:	071b      	lsls	r3, r3, #28
 800e3dc:	d502      	bpl.n	800e3e4 <_vfiprintf_r+0x40>
 800e3de:	6923      	ldr	r3, [r4, #16]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d11d      	bne.n	800e420 <_vfiprintf_r+0x7c>
 800e3e4:	0021      	movs	r1, r4
 800e3e6:	0030      	movs	r0, r6
 800e3e8:	f000 f992 	bl	800e710 <__swsetup_r>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d017      	beq.n	800e420 <_vfiprintf_r+0x7c>
 800e3f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3f2:	07db      	lsls	r3, r3, #31
 800e3f4:	d50d      	bpl.n	800e412 <_vfiprintf_r+0x6e>
 800e3f6:	2001      	movs	r0, #1
 800e3f8:	4240      	negs	r0, r0
 800e3fa:	b021      	add	sp, #132	; 0x84
 800e3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3fe:	4b7f      	ldr	r3, [pc, #508]	; (800e5fc <_vfiprintf_r+0x258>)
 800e400:	429c      	cmp	r4, r3
 800e402:	d101      	bne.n	800e408 <_vfiprintf_r+0x64>
 800e404:	68b4      	ldr	r4, [r6, #8]
 800e406:	e7de      	b.n	800e3c6 <_vfiprintf_r+0x22>
 800e408:	4b7d      	ldr	r3, [pc, #500]	; (800e600 <_vfiprintf_r+0x25c>)
 800e40a:	429c      	cmp	r4, r3
 800e40c:	d1db      	bne.n	800e3c6 <_vfiprintf_r+0x22>
 800e40e:	68f4      	ldr	r4, [r6, #12]
 800e410:	e7d9      	b.n	800e3c6 <_vfiprintf_r+0x22>
 800e412:	89a3      	ldrh	r3, [r4, #12]
 800e414:	059b      	lsls	r3, r3, #22
 800e416:	d4ee      	bmi.n	800e3f6 <_vfiprintf_r+0x52>
 800e418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e41a:	f000 fbc9 	bl	800ebb0 <__retarget_lock_release_recursive>
 800e41e:	e7ea      	b.n	800e3f6 <_vfiprintf_r+0x52>
 800e420:	2300      	movs	r3, #0
 800e422:	ad08      	add	r5, sp, #32
 800e424:	616b      	str	r3, [r5, #20]
 800e426:	3320      	adds	r3, #32
 800e428:	766b      	strb	r3, [r5, #25]
 800e42a:	3310      	adds	r3, #16
 800e42c:	76ab      	strb	r3, [r5, #26]
 800e42e:	9707      	str	r7, [sp, #28]
 800e430:	9f03      	ldr	r7, [sp, #12]
 800e432:	783b      	ldrb	r3, [r7, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <_vfiprintf_r+0x98>
 800e438:	2b25      	cmp	r3, #37	; 0x25
 800e43a:	d14e      	bne.n	800e4da <_vfiprintf_r+0x136>
 800e43c:	9b03      	ldr	r3, [sp, #12]
 800e43e:	1afb      	subs	r3, r7, r3
 800e440:	9305      	str	r3, [sp, #20]
 800e442:	9b03      	ldr	r3, [sp, #12]
 800e444:	429f      	cmp	r7, r3
 800e446:	d00d      	beq.n	800e464 <_vfiprintf_r+0xc0>
 800e448:	9b05      	ldr	r3, [sp, #20]
 800e44a:	0021      	movs	r1, r4
 800e44c:	0030      	movs	r0, r6
 800e44e:	9a03      	ldr	r2, [sp, #12]
 800e450:	f7ff ff95 	bl	800e37e <__sfputs_r>
 800e454:	1c43      	adds	r3, r0, #1
 800e456:	d100      	bne.n	800e45a <_vfiprintf_r+0xb6>
 800e458:	e0b5      	b.n	800e5c6 <_vfiprintf_r+0x222>
 800e45a:	696a      	ldr	r2, [r5, #20]
 800e45c:	9b05      	ldr	r3, [sp, #20]
 800e45e:	4694      	mov	ip, r2
 800e460:	4463      	add	r3, ip
 800e462:	616b      	str	r3, [r5, #20]
 800e464:	783b      	ldrb	r3, [r7, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d100      	bne.n	800e46c <_vfiprintf_r+0xc8>
 800e46a:	e0ac      	b.n	800e5c6 <_vfiprintf_r+0x222>
 800e46c:	2201      	movs	r2, #1
 800e46e:	1c7b      	adds	r3, r7, #1
 800e470:	9303      	str	r3, [sp, #12]
 800e472:	2300      	movs	r3, #0
 800e474:	4252      	negs	r2, r2
 800e476:	606a      	str	r2, [r5, #4]
 800e478:	a904      	add	r1, sp, #16
 800e47a:	3254      	adds	r2, #84	; 0x54
 800e47c:	1852      	adds	r2, r2, r1
 800e47e:	602b      	str	r3, [r5, #0]
 800e480:	60eb      	str	r3, [r5, #12]
 800e482:	60ab      	str	r3, [r5, #8]
 800e484:	7013      	strb	r3, [r2, #0]
 800e486:	65ab      	str	r3, [r5, #88]	; 0x58
 800e488:	9b03      	ldr	r3, [sp, #12]
 800e48a:	2205      	movs	r2, #5
 800e48c:	7819      	ldrb	r1, [r3, #0]
 800e48e:	485d      	ldr	r0, [pc, #372]	; (800e604 <_vfiprintf_r+0x260>)
 800e490:	f7ff f8e4 	bl	800d65c <memchr>
 800e494:	9b03      	ldr	r3, [sp, #12]
 800e496:	1c5f      	adds	r7, r3, #1
 800e498:	2800      	cmp	r0, #0
 800e49a:	d120      	bne.n	800e4de <_vfiprintf_r+0x13a>
 800e49c:	682a      	ldr	r2, [r5, #0]
 800e49e:	06d3      	lsls	r3, r2, #27
 800e4a0:	d504      	bpl.n	800e4ac <_vfiprintf_r+0x108>
 800e4a2:	2353      	movs	r3, #83	; 0x53
 800e4a4:	a904      	add	r1, sp, #16
 800e4a6:	185b      	adds	r3, r3, r1
 800e4a8:	2120      	movs	r1, #32
 800e4aa:	7019      	strb	r1, [r3, #0]
 800e4ac:	0713      	lsls	r3, r2, #28
 800e4ae:	d504      	bpl.n	800e4ba <_vfiprintf_r+0x116>
 800e4b0:	2353      	movs	r3, #83	; 0x53
 800e4b2:	a904      	add	r1, sp, #16
 800e4b4:	185b      	adds	r3, r3, r1
 800e4b6:	212b      	movs	r1, #43	; 0x2b
 800e4b8:	7019      	strb	r1, [r3, #0]
 800e4ba:	9b03      	ldr	r3, [sp, #12]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	2b2a      	cmp	r3, #42	; 0x2a
 800e4c0:	d016      	beq.n	800e4f0 <_vfiprintf_r+0x14c>
 800e4c2:	2100      	movs	r1, #0
 800e4c4:	68eb      	ldr	r3, [r5, #12]
 800e4c6:	9f03      	ldr	r7, [sp, #12]
 800e4c8:	783a      	ldrb	r2, [r7, #0]
 800e4ca:	1c78      	adds	r0, r7, #1
 800e4cc:	3a30      	subs	r2, #48	; 0x30
 800e4ce:	4684      	mov	ip, r0
 800e4d0:	2a09      	cmp	r2, #9
 800e4d2:	d94f      	bls.n	800e574 <_vfiprintf_r+0x1d0>
 800e4d4:	2900      	cmp	r1, #0
 800e4d6:	d111      	bne.n	800e4fc <_vfiprintf_r+0x158>
 800e4d8:	e017      	b.n	800e50a <_vfiprintf_r+0x166>
 800e4da:	3701      	adds	r7, #1
 800e4dc:	e7a9      	b.n	800e432 <_vfiprintf_r+0x8e>
 800e4de:	4b49      	ldr	r3, [pc, #292]	; (800e604 <_vfiprintf_r+0x260>)
 800e4e0:	682a      	ldr	r2, [r5, #0]
 800e4e2:	1ac0      	subs	r0, r0, r3
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	4083      	lsls	r3, r0
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	602b      	str	r3, [r5, #0]
 800e4ec:	9703      	str	r7, [sp, #12]
 800e4ee:	e7cb      	b.n	800e488 <_vfiprintf_r+0xe4>
 800e4f0:	9b07      	ldr	r3, [sp, #28]
 800e4f2:	1d19      	adds	r1, r3, #4
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	9107      	str	r1, [sp, #28]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	db01      	blt.n	800e500 <_vfiprintf_r+0x15c>
 800e4fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4fe:	e004      	b.n	800e50a <_vfiprintf_r+0x166>
 800e500:	425b      	negs	r3, r3
 800e502:	60eb      	str	r3, [r5, #12]
 800e504:	2302      	movs	r3, #2
 800e506:	4313      	orrs	r3, r2
 800e508:	602b      	str	r3, [r5, #0]
 800e50a:	783b      	ldrb	r3, [r7, #0]
 800e50c:	2b2e      	cmp	r3, #46	; 0x2e
 800e50e:	d10a      	bne.n	800e526 <_vfiprintf_r+0x182>
 800e510:	787b      	ldrb	r3, [r7, #1]
 800e512:	2b2a      	cmp	r3, #42	; 0x2a
 800e514:	d137      	bne.n	800e586 <_vfiprintf_r+0x1e2>
 800e516:	9b07      	ldr	r3, [sp, #28]
 800e518:	3702      	adds	r7, #2
 800e51a:	1d1a      	adds	r2, r3, #4
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	9207      	str	r2, [sp, #28]
 800e520:	2b00      	cmp	r3, #0
 800e522:	db2d      	blt.n	800e580 <_vfiprintf_r+0x1dc>
 800e524:	9309      	str	r3, [sp, #36]	; 0x24
 800e526:	2203      	movs	r2, #3
 800e528:	7839      	ldrb	r1, [r7, #0]
 800e52a:	4837      	ldr	r0, [pc, #220]	; (800e608 <_vfiprintf_r+0x264>)
 800e52c:	f7ff f896 	bl	800d65c <memchr>
 800e530:	2800      	cmp	r0, #0
 800e532:	d007      	beq.n	800e544 <_vfiprintf_r+0x1a0>
 800e534:	4b34      	ldr	r3, [pc, #208]	; (800e608 <_vfiprintf_r+0x264>)
 800e536:	682a      	ldr	r2, [r5, #0]
 800e538:	1ac0      	subs	r0, r0, r3
 800e53a:	2340      	movs	r3, #64	; 0x40
 800e53c:	4083      	lsls	r3, r0
 800e53e:	4313      	orrs	r3, r2
 800e540:	3701      	adds	r7, #1
 800e542:	602b      	str	r3, [r5, #0]
 800e544:	7839      	ldrb	r1, [r7, #0]
 800e546:	1c7b      	adds	r3, r7, #1
 800e548:	2206      	movs	r2, #6
 800e54a:	4830      	ldr	r0, [pc, #192]	; (800e60c <_vfiprintf_r+0x268>)
 800e54c:	9303      	str	r3, [sp, #12]
 800e54e:	7629      	strb	r1, [r5, #24]
 800e550:	f7ff f884 	bl	800d65c <memchr>
 800e554:	2800      	cmp	r0, #0
 800e556:	d045      	beq.n	800e5e4 <_vfiprintf_r+0x240>
 800e558:	4b2d      	ldr	r3, [pc, #180]	; (800e610 <_vfiprintf_r+0x26c>)
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d127      	bne.n	800e5ae <_vfiprintf_r+0x20a>
 800e55e:	2207      	movs	r2, #7
 800e560:	9b07      	ldr	r3, [sp, #28]
 800e562:	3307      	adds	r3, #7
 800e564:	4393      	bics	r3, r2
 800e566:	3308      	adds	r3, #8
 800e568:	9307      	str	r3, [sp, #28]
 800e56a:	696b      	ldr	r3, [r5, #20]
 800e56c:	9a04      	ldr	r2, [sp, #16]
 800e56e:	189b      	adds	r3, r3, r2
 800e570:	616b      	str	r3, [r5, #20]
 800e572:	e75d      	b.n	800e430 <_vfiprintf_r+0x8c>
 800e574:	210a      	movs	r1, #10
 800e576:	434b      	muls	r3, r1
 800e578:	4667      	mov	r7, ip
 800e57a:	189b      	adds	r3, r3, r2
 800e57c:	3909      	subs	r1, #9
 800e57e:	e7a3      	b.n	800e4c8 <_vfiprintf_r+0x124>
 800e580:	2301      	movs	r3, #1
 800e582:	425b      	negs	r3, r3
 800e584:	e7ce      	b.n	800e524 <_vfiprintf_r+0x180>
 800e586:	2300      	movs	r3, #0
 800e588:	001a      	movs	r2, r3
 800e58a:	3701      	adds	r7, #1
 800e58c:	606b      	str	r3, [r5, #4]
 800e58e:	7839      	ldrb	r1, [r7, #0]
 800e590:	1c78      	adds	r0, r7, #1
 800e592:	3930      	subs	r1, #48	; 0x30
 800e594:	4684      	mov	ip, r0
 800e596:	2909      	cmp	r1, #9
 800e598:	d903      	bls.n	800e5a2 <_vfiprintf_r+0x1fe>
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d0c3      	beq.n	800e526 <_vfiprintf_r+0x182>
 800e59e:	9209      	str	r2, [sp, #36]	; 0x24
 800e5a0:	e7c1      	b.n	800e526 <_vfiprintf_r+0x182>
 800e5a2:	230a      	movs	r3, #10
 800e5a4:	435a      	muls	r2, r3
 800e5a6:	4667      	mov	r7, ip
 800e5a8:	1852      	adds	r2, r2, r1
 800e5aa:	3b09      	subs	r3, #9
 800e5ac:	e7ef      	b.n	800e58e <_vfiprintf_r+0x1ea>
 800e5ae:	ab07      	add	r3, sp, #28
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	0022      	movs	r2, r4
 800e5b4:	0029      	movs	r1, r5
 800e5b6:	0030      	movs	r0, r6
 800e5b8:	4b16      	ldr	r3, [pc, #88]	; (800e614 <_vfiprintf_r+0x270>)
 800e5ba:	f7fc f8b7 	bl	800a72c <_printf_float>
 800e5be:	9004      	str	r0, [sp, #16]
 800e5c0:	9b04      	ldr	r3, [sp, #16]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	d1d1      	bne.n	800e56a <_vfiprintf_r+0x1c6>
 800e5c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5c8:	07db      	lsls	r3, r3, #31
 800e5ca:	d405      	bmi.n	800e5d8 <_vfiprintf_r+0x234>
 800e5cc:	89a3      	ldrh	r3, [r4, #12]
 800e5ce:	059b      	lsls	r3, r3, #22
 800e5d0:	d402      	bmi.n	800e5d8 <_vfiprintf_r+0x234>
 800e5d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5d4:	f000 faec 	bl	800ebb0 <__retarget_lock_release_recursive>
 800e5d8:	89a3      	ldrh	r3, [r4, #12]
 800e5da:	065b      	lsls	r3, r3, #25
 800e5dc:	d500      	bpl.n	800e5e0 <_vfiprintf_r+0x23c>
 800e5de:	e70a      	b.n	800e3f6 <_vfiprintf_r+0x52>
 800e5e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e5e2:	e70a      	b.n	800e3fa <_vfiprintf_r+0x56>
 800e5e4:	ab07      	add	r3, sp, #28
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	0022      	movs	r2, r4
 800e5ea:	0029      	movs	r1, r5
 800e5ec:	0030      	movs	r0, r6
 800e5ee:	4b09      	ldr	r3, [pc, #36]	; (800e614 <_vfiprintf_r+0x270>)
 800e5f0:	f7fc fb4e 	bl	800ac90 <_printf_i>
 800e5f4:	e7e3      	b.n	800e5be <_vfiprintf_r+0x21a>
 800e5f6:	46c0      	nop			; (mov r8, r8)
 800e5f8:	0800f668 	.word	0x0800f668
 800e5fc:	0800f688 	.word	0x0800f688
 800e600:	0800f648 	.word	0x0800f648
 800e604:	0800f634 	.word	0x0800f634
 800e608:	0800f63a 	.word	0x0800f63a
 800e60c:	0800f63e 	.word	0x0800f63e
 800e610:	0800a72d 	.word	0x0800a72d
 800e614:	0800e37f 	.word	0x0800e37f

0800e618 <nan>:
 800e618:	2000      	movs	r0, #0
 800e61a:	4901      	ldr	r1, [pc, #4]	; (800e620 <nan+0x8>)
 800e61c:	4770      	bx	lr
 800e61e:	46c0      	nop			; (mov r8, r8)
 800e620:	7ff80000 	.word	0x7ff80000

0800e624 <strncmp>:
 800e624:	b530      	push	{r4, r5, lr}
 800e626:	0005      	movs	r5, r0
 800e628:	1e10      	subs	r0, r2, #0
 800e62a:	d008      	beq.n	800e63e <strncmp+0x1a>
 800e62c:	2400      	movs	r4, #0
 800e62e:	3a01      	subs	r2, #1
 800e630:	5d2b      	ldrb	r3, [r5, r4]
 800e632:	5d08      	ldrb	r0, [r1, r4]
 800e634:	4283      	cmp	r3, r0
 800e636:	d101      	bne.n	800e63c <strncmp+0x18>
 800e638:	4294      	cmp	r4, r2
 800e63a:	d101      	bne.n	800e640 <strncmp+0x1c>
 800e63c:	1a18      	subs	r0, r3, r0
 800e63e:	bd30      	pop	{r4, r5, pc}
 800e640:	3401      	adds	r4, #1
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1f4      	bne.n	800e630 <strncmp+0xc>
 800e646:	e7f9      	b.n	800e63c <strncmp+0x18>

0800e648 <__swbuf_r>:
 800e648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e64a:	0005      	movs	r5, r0
 800e64c:	000e      	movs	r6, r1
 800e64e:	0014      	movs	r4, r2
 800e650:	2800      	cmp	r0, #0
 800e652:	d004      	beq.n	800e65e <__swbuf_r+0x16>
 800e654:	6983      	ldr	r3, [r0, #24]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d101      	bne.n	800e65e <__swbuf_r+0x16>
 800e65a:	f000 fa07 	bl	800ea6c <__sinit>
 800e65e:	4b22      	ldr	r3, [pc, #136]	; (800e6e8 <__swbuf_r+0xa0>)
 800e660:	429c      	cmp	r4, r3
 800e662:	d12e      	bne.n	800e6c2 <__swbuf_r+0x7a>
 800e664:	686c      	ldr	r4, [r5, #4]
 800e666:	69a3      	ldr	r3, [r4, #24]
 800e668:	60a3      	str	r3, [r4, #8]
 800e66a:	89a3      	ldrh	r3, [r4, #12]
 800e66c:	071b      	lsls	r3, r3, #28
 800e66e:	d532      	bpl.n	800e6d6 <__swbuf_r+0x8e>
 800e670:	6923      	ldr	r3, [r4, #16]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d02f      	beq.n	800e6d6 <__swbuf_r+0x8e>
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	6922      	ldr	r2, [r4, #16]
 800e67a:	b2f7      	uxtb	r7, r6
 800e67c:	1a98      	subs	r0, r3, r2
 800e67e:	6963      	ldr	r3, [r4, #20]
 800e680:	b2f6      	uxtb	r6, r6
 800e682:	4283      	cmp	r3, r0
 800e684:	dc05      	bgt.n	800e692 <__swbuf_r+0x4a>
 800e686:	0021      	movs	r1, r4
 800e688:	0028      	movs	r0, r5
 800e68a:	f000 f94d 	bl	800e928 <_fflush_r>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d127      	bne.n	800e6e2 <__swbuf_r+0x9a>
 800e692:	68a3      	ldr	r3, [r4, #8]
 800e694:	3001      	adds	r0, #1
 800e696:	3b01      	subs	r3, #1
 800e698:	60a3      	str	r3, [r4, #8]
 800e69a:	6823      	ldr	r3, [r4, #0]
 800e69c:	1c5a      	adds	r2, r3, #1
 800e69e:	6022      	str	r2, [r4, #0]
 800e6a0:	701f      	strb	r7, [r3, #0]
 800e6a2:	6963      	ldr	r3, [r4, #20]
 800e6a4:	4283      	cmp	r3, r0
 800e6a6:	d004      	beq.n	800e6b2 <__swbuf_r+0x6a>
 800e6a8:	89a3      	ldrh	r3, [r4, #12]
 800e6aa:	07db      	lsls	r3, r3, #31
 800e6ac:	d507      	bpl.n	800e6be <__swbuf_r+0x76>
 800e6ae:	2e0a      	cmp	r6, #10
 800e6b0:	d105      	bne.n	800e6be <__swbuf_r+0x76>
 800e6b2:	0021      	movs	r1, r4
 800e6b4:	0028      	movs	r0, r5
 800e6b6:	f000 f937 	bl	800e928 <_fflush_r>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d111      	bne.n	800e6e2 <__swbuf_r+0x9a>
 800e6be:	0030      	movs	r0, r6
 800e6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6c2:	4b0a      	ldr	r3, [pc, #40]	; (800e6ec <__swbuf_r+0xa4>)
 800e6c4:	429c      	cmp	r4, r3
 800e6c6:	d101      	bne.n	800e6cc <__swbuf_r+0x84>
 800e6c8:	68ac      	ldr	r4, [r5, #8]
 800e6ca:	e7cc      	b.n	800e666 <__swbuf_r+0x1e>
 800e6cc:	4b08      	ldr	r3, [pc, #32]	; (800e6f0 <__swbuf_r+0xa8>)
 800e6ce:	429c      	cmp	r4, r3
 800e6d0:	d1c9      	bne.n	800e666 <__swbuf_r+0x1e>
 800e6d2:	68ec      	ldr	r4, [r5, #12]
 800e6d4:	e7c7      	b.n	800e666 <__swbuf_r+0x1e>
 800e6d6:	0021      	movs	r1, r4
 800e6d8:	0028      	movs	r0, r5
 800e6da:	f000 f819 	bl	800e710 <__swsetup_r>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d0c9      	beq.n	800e676 <__swbuf_r+0x2e>
 800e6e2:	2601      	movs	r6, #1
 800e6e4:	4276      	negs	r6, r6
 800e6e6:	e7ea      	b.n	800e6be <__swbuf_r+0x76>
 800e6e8:	0800f668 	.word	0x0800f668
 800e6ec:	0800f688 	.word	0x0800f688
 800e6f0:	0800f648 	.word	0x0800f648

0800e6f4 <__ascii_wctomb>:
 800e6f4:	0003      	movs	r3, r0
 800e6f6:	1e08      	subs	r0, r1, #0
 800e6f8:	d005      	beq.n	800e706 <__ascii_wctomb+0x12>
 800e6fa:	2aff      	cmp	r2, #255	; 0xff
 800e6fc:	d904      	bls.n	800e708 <__ascii_wctomb+0x14>
 800e6fe:	228a      	movs	r2, #138	; 0x8a
 800e700:	2001      	movs	r0, #1
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	4240      	negs	r0, r0
 800e706:	4770      	bx	lr
 800e708:	2001      	movs	r0, #1
 800e70a:	700a      	strb	r2, [r1, #0]
 800e70c:	e7fb      	b.n	800e706 <__ascii_wctomb+0x12>
	...

0800e710 <__swsetup_r>:
 800e710:	4b37      	ldr	r3, [pc, #220]	; (800e7f0 <__swsetup_r+0xe0>)
 800e712:	b570      	push	{r4, r5, r6, lr}
 800e714:	681d      	ldr	r5, [r3, #0]
 800e716:	0006      	movs	r6, r0
 800e718:	000c      	movs	r4, r1
 800e71a:	2d00      	cmp	r5, #0
 800e71c:	d005      	beq.n	800e72a <__swsetup_r+0x1a>
 800e71e:	69ab      	ldr	r3, [r5, #24]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d102      	bne.n	800e72a <__swsetup_r+0x1a>
 800e724:	0028      	movs	r0, r5
 800e726:	f000 f9a1 	bl	800ea6c <__sinit>
 800e72a:	4b32      	ldr	r3, [pc, #200]	; (800e7f4 <__swsetup_r+0xe4>)
 800e72c:	429c      	cmp	r4, r3
 800e72e:	d10f      	bne.n	800e750 <__swsetup_r+0x40>
 800e730:	686c      	ldr	r4, [r5, #4]
 800e732:	230c      	movs	r3, #12
 800e734:	5ee2      	ldrsh	r2, [r4, r3]
 800e736:	b293      	uxth	r3, r2
 800e738:	0711      	lsls	r1, r2, #28
 800e73a:	d42d      	bmi.n	800e798 <__swsetup_r+0x88>
 800e73c:	06d9      	lsls	r1, r3, #27
 800e73e:	d411      	bmi.n	800e764 <__swsetup_r+0x54>
 800e740:	2309      	movs	r3, #9
 800e742:	2001      	movs	r0, #1
 800e744:	6033      	str	r3, [r6, #0]
 800e746:	3337      	adds	r3, #55	; 0x37
 800e748:	4313      	orrs	r3, r2
 800e74a:	81a3      	strh	r3, [r4, #12]
 800e74c:	4240      	negs	r0, r0
 800e74e:	bd70      	pop	{r4, r5, r6, pc}
 800e750:	4b29      	ldr	r3, [pc, #164]	; (800e7f8 <__swsetup_r+0xe8>)
 800e752:	429c      	cmp	r4, r3
 800e754:	d101      	bne.n	800e75a <__swsetup_r+0x4a>
 800e756:	68ac      	ldr	r4, [r5, #8]
 800e758:	e7eb      	b.n	800e732 <__swsetup_r+0x22>
 800e75a:	4b28      	ldr	r3, [pc, #160]	; (800e7fc <__swsetup_r+0xec>)
 800e75c:	429c      	cmp	r4, r3
 800e75e:	d1e8      	bne.n	800e732 <__swsetup_r+0x22>
 800e760:	68ec      	ldr	r4, [r5, #12]
 800e762:	e7e6      	b.n	800e732 <__swsetup_r+0x22>
 800e764:	075b      	lsls	r3, r3, #29
 800e766:	d513      	bpl.n	800e790 <__swsetup_r+0x80>
 800e768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e76a:	2900      	cmp	r1, #0
 800e76c:	d008      	beq.n	800e780 <__swsetup_r+0x70>
 800e76e:	0023      	movs	r3, r4
 800e770:	3344      	adds	r3, #68	; 0x44
 800e772:	4299      	cmp	r1, r3
 800e774:	d002      	beq.n	800e77c <__swsetup_r+0x6c>
 800e776:	0030      	movs	r0, r6
 800e778:	f7fb fe4c 	bl	800a414 <_free_r>
 800e77c:	2300      	movs	r3, #0
 800e77e:	6363      	str	r3, [r4, #52]	; 0x34
 800e780:	2224      	movs	r2, #36	; 0x24
 800e782:	89a3      	ldrh	r3, [r4, #12]
 800e784:	4393      	bics	r3, r2
 800e786:	81a3      	strh	r3, [r4, #12]
 800e788:	2300      	movs	r3, #0
 800e78a:	6063      	str	r3, [r4, #4]
 800e78c:	6923      	ldr	r3, [r4, #16]
 800e78e:	6023      	str	r3, [r4, #0]
 800e790:	2308      	movs	r3, #8
 800e792:	89a2      	ldrh	r2, [r4, #12]
 800e794:	4313      	orrs	r3, r2
 800e796:	81a3      	strh	r3, [r4, #12]
 800e798:	6923      	ldr	r3, [r4, #16]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d10b      	bne.n	800e7b6 <__swsetup_r+0xa6>
 800e79e:	21a0      	movs	r1, #160	; 0xa0
 800e7a0:	2280      	movs	r2, #128	; 0x80
 800e7a2:	89a3      	ldrh	r3, [r4, #12]
 800e7a4:	0089      	lsls	r1, r1, #2
 800e7a6:	0092      	lsls	r2, r2, #2
 800e7a8:	400b      	ands	r3, r1
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d003      	beq.n	800e7b6 <__swsetup_r+0xa6>
 800e7ae:	0021      	movs	r1, r4
 800e7b0:	0030      	movs	r0, r6
 800e7b2:	f000 fa27 	bl	800ec04 <__smakebuf_r>
 800e7b6:	220c      	movs	r2, #12
 800e7b8:	5ea3      	ldrsh	r3, [r4, r2]
 800e7ba:	2001      	movs	r0, #1
 800e7bc:	001a      	movs	r2, r3
 800e7be:	b299      	uxth	r1, r3
 800e7c0:	4002      	ands	r2, r0
 800e7c2:	4203      	tst	r3, r0
 800e7c4:	d00f      	beq.n	800e7e6 <__swsetup_r+0xd6>
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	60a2      	str	r2, [r4, #8]
 800e7ca:	6962      	ldr	r2, [r4, #20]
 800e7cc:	4252      	negs	r2, r2
 800e7ce:	61a2      	str	r2, [r4, #24]
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	6922      	ldr	r2, [r4, #16]
 800e7d4:	4282      	cmp	r2, r0
 800e7d6:	d1ba      	bne.n	800e74e <__swsetup_r+0x3e>
 800e7d8:	060a      	lsls	r2, r1, #24
 800e7da:	d5b8      	bpl.n	800e74e <__swsetup_r+0x3e>
 800e7dc:	2240      	movs	r2, #64	; 0x40
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	81a3      	strh	r3, [r4, #12]
 800e7e2:	3801      	subs	r0, #1
 800e7e4:	e7b3      	b.n	800e74e <__swsetup_r+0x3e>
 800e7e6:	0788      	lsls	r0, r1, #30
 800e7e8:	d400      	bmi.n	800e7ec <__swsetup_r+0xdc>
 800e7ea:	6962      	ldr	r2, [r4, #20]
 800e7ec:	60a2      	str	r2, [r4, #8]
 800e7ee:	e7ef      	b.n	800e7d0 <__swsetup_r+0xc0>
 800e7f0:	2000000c 	.word	0x2000000c
 800e7f4:	0800f668 	.word	0x0800f668
 800e7f8:	0800f688 	.word	0x0800f688
 800e7fc:	0800f648 	.word	0x0800f648

0800e800 <abort>:
 800e800:	2006      	movs	r0, #6
 800e802:	b510      	push	{r4, lr}
 800e804:	f000 faae 	bl	800ed64 <raise>
 800e808:	2001      	movs	r0, #1
 800e80a:	f7f5 fed7 	bl	80045bc <_exit>
	...

0800e810 <__sflush_r>:
 800e810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e812:	898b      	ldrh	r3, [r1, #12]
 800e814:	0005      	movs	r5, r0
 800e816:	000c      	movs	r4, r1
 800e818:	071a      	lsls	r2, r3, #28
 800e81a:	d45f      	bmi.n	800e8dc <__sflush_r+0xcc>
 800e81c:	684a      	ldr	r2, [r1, #4]
 800e81e:	2a00      	cmp	r2, #0
 800e820:	dc04      	bgt.n	800e82c <__sflush_r+0x1c>
 800e822:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800e824:	2a00      	cmp	r2, #0
 800e826:	dc01      	bgt.n	800e82c <__sflush_r+0x1c>
 800e828:	2000      	movs	r0, #0
 800e82a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e82c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e82e:	2f00      	cmp	r7, #0
 800e830:	d0fa      	beq.n	800e828 <__sflush_r+0x18>
 800e832:	2200      	movs	r2, #0
 800e834:	2180      	movs	r1, #128	; 0x80
 800e836:	682e      	ldr	r6, [r5, #0]
 800e838:	602a      	str	r2, [r5, #0]
 800e83a:	001a      	movs	r2, r3
 800e83c:	0149      	lsls	r1, r1, #5
 800e83e:	400a      	ands	r2, r1
 800e840:	420b      	tst	r3, r1
 800e842:	d034      	beq.n	800e8ae <__sflush_r+0x9e>
 800e844:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e846:	89a3      	ldrh	r3, [r4, #12]
 800e848:	075b      	lsls	r3, r3, #29
 800e84a:	d506      	bpl.n	800e85a <__sflush_r+0x4a>
 800e84c:	6863      	ldr	r3, [r4, #4]
 800e84e:	1ac0      	subs	r0, r0, r3
 800e850:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e852:	2b00      	cmp	r3, #0
 800e854:	d001      	beq.n	800e85a <__sflush_r+0x4a>
 800e856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e858:	1ac0      	subs	r0, r0, r3
 800e85a:	0002      	movs	r2, r0
 800e85c:	6a21      	ldr	r1, [r4, #32]
 800e85e:	2300      	movs	r3, #0
 800e860:	0028      	movs	r0, r5
 800e862:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e864:	47b8      	blx	r7
 800e866:	89a1      	ldrh	r1, [r4, #12]
 800e868:	1c43      	adds	r3, r0, #1
 800e86a:	d106      	bne.n	800e87a <__sflush_r+0x6a>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	2b1d      	cmp	r3, #29
 800e870:	d831      	bhi.n	800e8d6 <__sflush_r+0xc6>
 800e872:	4a2c      	ldr	r2, [pc, #176]	; (800e924 <__sflush_r+0x114>)
 800e874:	40da      	lsrs	r2, r3
 800e876:	07d3      	lsls	r3, r2, #31
 800e878:	d52d      	bpl.n	800e8d6 <__sflush_r+0xc6>
 800e87a:	2300      	movs	r3, #0
 800e87c:	6063      	str	r3, [r4, #4]
 800e87e:	6923      	ldr	r3, [r4, #16]
 800e880:	6023      	str	r3, [r4, #0]
 800e882:	04cb      	lsls	r3, r1, #19
 800e884:	d505      	bpl.n	800e892 <__sflush_r+0x82>
 800e886:	1c43      	adds	r3, r0, #1
 800e888:	d102      	bne.n	800e890 <__sflush_r+0x80>
 800e88a:	682b      	ldr	r3, [r5, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d100      	bne.n	800e892 <__sflush_r+0x82>
 800e890:	6560      	str	r0, [r4, #84]	; 0x54
 800e892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e894:	602e      	str	r6, [r5, #0]
 800e896:	2900      	cmp	r1, #0
 800e898:	d0c6      	beq.n	800e828 <__sflush_r+0x18>
 800e89a:	0023      	movs	r3, r4
 800e89c:	3344      	adds	r3, #68	; 0x44
 800e89e:	4299      	cmp	r1, r3
 800e8a0:	d002      	beq.n	800e8a8 <__sflush_r+0x98>
 800e8a2:	0028      	movs	r0, r5
 800e8a4:	f7fb fdb6 	bl	800a414 <_free_r>
 800e8a8:	2000      	movs	r0, #0
 800e8aa:	6360      	str	r0, [r4, #52]	; 0x34
 800e8ac:	e7bd      	b.n	800e82a <__sflush_r+0x1a>
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	0028      	movs	r0, r5
 800e8b2:	6a21      	ldr	r1, [r4, #32]
 800e8b4:	47b8      	blx	r7
 800e8b6:	1c43      	adds	r3, r0, #1
 800e8b8:	d1c5      	bne.n	800e846 <__sflush_r+0x36>
 800e8ba:	682b      	ldr	r3, [r5, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d0c2      	beq.n	800e846 <__sflush_r+0x36>
 800e8c0:	2b1d      	cmp	r3, #29
 800e8c2:	d001      	beq.n	800e8c8 <__sflush_r+0xb8>
 800e8c4:	2b16      	cmp	r3, #22
 800e8c6:	d101      	bne.n	800e8cc <__sflush_r+0xbc>
 800e8c8:	602e      	str	r6, [r5, #0]
 800e8ca:	e7ad      	b.n	800e828 <__sflush_r+0x18>
 800e8cc:	2340      	movs	r3, #64	; 0x40
 800e8ce:	89a2      	ldrh	r2, [r4, #12]
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	81a3      	strh	r3, [r4, #12]
 800e8d4:	e7a9      	b.n	800e82a <__sflush_r+0x1a>
 800e8d6:	2340      	movs	r3, #64	; 0x40
 800e8d8:	430b      	orrs	r3, r1
 800e8da:	e7fa      	b.n	800e8d2 <__sflush_r+0xc2>
 800e8dc:	690f      	ldr	r7, [r1, #16]
 800e8de:	2f00      	cmp	r7, #0
 800e8e0:	d0a2      	beq.n	800e828 <__sflush_r+0x18>
 800e8e2:	680a      	ldr	r2, [r1, #0]
 800e8e4:	600f      	str	r7, [r1, #0]
 800e8e6:	1bd2      	subs	r2, r2, r7
 800e8e8:	9201      	str	r2, [sp, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	079b      	lsls	r3, r3, #30
 800e8ee:	d100      	bne.n	800e8f2 <__sflush_r+0xe2>
 800e8f0:	694a      	ldr	r2, [r1, #20]
 800e8f2:	60a2      	str	r2, [r4, #8]
 800e8f4:	9b01      	ldr	r3, [sp, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	dc00      	bgt.n	800e8fc <__sflush_r+0xec>
 800e8fa:	e795      	b.n	800e828 <__sflush_r+0x18>
 800e8fc:	003a      	movs	r2, r7
 800e8fe:	0028      	movs	r0, r5
 800e900:	9b01      	ldr	r3, [sp, #4]
 800e902:	6a21      	ldr	r1, [r4, #32]
 800e904:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e906:	47b0      	blx	r6
 800e908:	2800      	cmp	r0, #0
 800e90a:	dc06      	bgt.n	800e91a <__sflush_r+0x10a>
 800e90c:	2340      	movs	r3, #64	; 0x40
 800e90e:	2001      	movs	r0, #1
 800e910:	89a2      	ldrh	r2, [r4, #12]
 800e912:	4240      	negs	r0, r0
 800e914:	4313      	orrs	r3, r2
 800e916:	81a3      	strh	r3, [r4, #12]
 800e918:	e787      	b.n	800e82a <__sflush_r+0x1a>
 800e91a:	9b01      	ldr	r3, [sp, #4]
 800e91c:	183f      	adds	r7, r7, r0
 800e91e:	1a1b      	subs	r3, r3, r0
 800e920:	9301      	str	r3, [sp, #4]
 800e922:	e7e7      	b.n	800e8f4 <__sflush_r+0xe4>
 800e924:	20400001 	.word	0x20400001

0800e928 <_fflush_r>:
 800e928:	690b      	ldr	r3, [r1, #16]
 800e92a:	b570      	push	{r4, r5, r6, lr}
 800e92c:	0005      	movs	r5, r0
 800e92e:	000c      	movs	r4, r1
 800e930:	2b00      	cmp	r3, #0
 800e932:	d102      	bne.n	800e93a <_fflush_r+0x12>
 800e934:	2500      	movs	r5, #0
 800e936:	0028      	movs	r0, r5
 800e938:	bd70      	pop	{r4, r5, r6, pc}
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d004      	beq.n	800e948 <_fflush_r+0x20>
 800e93e:	6983      	ldr	r3, [r0, #24]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d101      	bne.n	800e948 <_fflush_r+0x20>
 800e944:	f000 f892 	bl	800ea6c <__sinit>
 800e948:	4b14      	ldr	r3, [pc, #80]	; (800e99c <_fflush_r+0x74>)
 800e94a:	429c      	cmp	r4, r3
 800e94c:	d11b      	bne.n	800e986 <_fflush_r+0x5e>
 800e94e:	686c      	ldr	r4, [r5, #4]
 800e950:	220c      	movs	r2, #12
 800e952:	5ea3      	ldrsh	r3, [r4, r2]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d0ed      	beq.n	800e934 <_fflush_r+0xc>
 800e958:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e95a:	07d2      	lsls	r2, r2, #31
 800e95c:	d404      	bmi.n	800e968 <_fflush_r+0x40>
 800e95e:	059b      	lsls	r3, r3, #22
 800e960:	d402      	bmi.n	800e968 <_fflush_r+0x40>
 800e962:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e964:	f000 f923 	bl	800ebae <__retarget_lock_acquire_recursive>
 800e968:	0028      	movs	r0, r5
 800e96a:	0021      	movs	r1, r4
 800e96c:	f7ff ff50 	bl	800e810 <__sflush_r>
 800e970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e972:	0005      	movs	r5, r0
 800e974:	07db      	lsls	r3, r3, #31
 800e976:	d4de      	bmi.n	800e936 <_fflush_r+0xe>
 800e978:	89a3      	ldrh	r3, [r4, #12]
 800e97a:	059b      	lsls	r3, r3, #22
 800e97c:	d4db      	bmi.n	800e936 <_fflush_r+0xe>
 800e97e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e980:	f000 f916 	bl	800ebb0 <__retarget_lock_release_recursive>
 800e984:	e7d7      	b.n	800e936 <_fflush_r+0xe>
 800e986:	4b06      	ldr	r3, [pc, #24]	; (800e9a0 <_fflush_r+0x78>)
 800e988:	429c      	cmp	r4, r3
 800e98a:	d101      	bne.n	800e990 <_fflush_r+0x68>
 800e98c:	68ac      	ldr	r4, [r5, #8]
 800e98e:	e7df      	b.n	800e950 <_fflush_r+0x28>
 800e990:	4b04      	ldr	r3, [pc, #16]	; (800e9a4 <_fflush_r+0x7c>)
 800e992:	429c      	cmp	r4, r3
 800e994:	d1dc      	bne.n	800e950 <_fflush_r+0x28>
 800e996:	68ec      	ldr	r4, [r5, #12]
 800e998:	e7da      	b.n	800e950 <_fflush_r+0x28>
 800e99a:	46c0      	nop			; (mov r8, r8)
 800e99c:	0800f668 	.word	0x0800f668
 800e9a0:	0800f688 	.word	0x0800f688
 800e9a4:	0800f648 	.word	0x0800f648

0800e9a8 <std>:
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	b510      	push	{r4, lr}
 800e9ac:	0004      	movs	r4, r0
 800e9ae:	6003      	str	r3, [r0, #0]
 800e9b0:	6043      	str	r3, [r0, #4]
 800e9b2:	6083      	str	r3, [r0, #8]
 800e9b4:	8181      	strh	r1, [r0, #12]
 800e9b6:	6643      	str	r3, [r0, #100]	; 0x64
 800e9b8:	0019      	movs	r1, r3
 800e9ba:	81c2      	strh	r2, [r0, #14]
 800e9bc:	6103      	str	r3, [r0, #16]
 800e9be:	6143      	str	r3, [r0, #20]
 800e9c0:	6183      	str	r3, [r0, #24]
 800e9c2:	2208      	movs	r2, #8
 800e9c4:	305c      	adds	r0, #92	; 0x5c
 800e9c6:	f7fb fd1d 	bl	800a404 <memset>
 800e9ca:	4b05      	ldr	r3, [pc, #20]	; (800e9e0 <std+0x38>)
 800e9cc:	6224      	str	r4, [r4, #32]
 800e9ce:	6263      	str	r3, [r4, #36]	; 0x24
 800e9d0:	4b04      	ldr	r3, [pc, #16]	; (800e9e4 <std+0x3c>)
 800e9d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9d4:	4b04      	ldr	r3, [pc, #16]	; (800e9e8 <std+0x40>)
 800e9d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9d8:	4b04      	ldr	r3, [pc, #16]	; (800e9ec <std+0x44>)
 800e9da:	6323      	str	r3, [r4, #48]	; 0x30
 800e9dc:	bd10      	pop	{r4, pc}
 800e9de:	46c0      	nop			; (mov r8, r8)
 800e9e0:	0800eda5 	.word	0x0800eda5
 800e9e4:	0800edcd 	.word	0x0800edcd
 800e9e8:	0800ee05 	.word	0x0800ee05
 800e9ec:	0800ee31 	.word	0x0800ee31

0800e9f0 <_cleanup_r>:
 800e9f0:	b510      	push	{r4, lr}
 800e9f2:	4902      	ldr	r1, [pc, #8]	; (800e9fc <_cleanup_r+0xc>)
 800e9f4:	f000 f8ba 	bl	800eb6c <_fwalk_reent>
 800e9f8:	bd10      	pop	{r4, pc}
 800e9fa:	46c0      	nop			; (mov r8, r8)
 800e9fc:	0800e929 	.word	0x0800e929

0800ea00 <__sfmoreglue>:
 800ea00:	b570      	push	{r4, r5, r6, lr}
 800ea02:	2568      	movs	r5, #104	; 0x68
 800ea04:	1e4a      	subs	r2, r1, #1
 800ea06:	4355      	muls	r5, r2
 800ea08:	000e      	movs	r6, r1
 800ea0a:	0029      	movs	r1, r5
 800ea0c:	3174      	adds	r1, #116	; 0x74
 800ea0e:	f7fb fd6d 	bl	800a4ec <_malloc_r>
 800ea12:	1e04      	subs	r4, r0, #0
 800ea14:	d008      	beq.n	800ea28 <__sfmoreglue+0x28>
 800ea16:	2100      	movs	r1, #0
 800ea18:	002a      	movs	r2, r5
 800ea1a:	6001      	str	r1, [r0, #0]
 800ea1c:	6046      	str	r6, [r0, #4]
 800ea1e:	300c      	adds	r0, #12
 800ea20:	60a0      	str	r0, [r4, #8]
 800ea22:	3268      	adds	r2, #104	; 0x68
 800ea24:	f7fb fcee 	bl	800a404 <memset>
 800ea28:	0020      	movs	r0, r4
 800ea2a:	bd70      	pop	{r4, r5, r6, pc}

0800ea2c <__sfp_lock_acquire>:
 800ea2c:	b510      	push	{r4, lr}
 800ea2e:	4802      	ldr	r0, [pc, #8]	; (800ea38 <__sfp_lock_acquire+0xc>)
 800ea30:	f000 f8bd 	bl	800ebae <__retarget_lock_acquire_recursive>
 800ea34:	bd10      	pop	{r4, pc}
 800ea36:	46c0      	nop			; (mov r8, r8)
 800ea38:	2000050d 	.word	0x2000050d

0800ea3c <__sfp_lock_release>:
 800ea3c:	b510      	push	{r4, lr}
 800ea3e:	4802      	ldr	r0, [pc, #8]	; (800ea48 <__sfp_lock_release+0xc>)
 800ea40:	f000 f8b6 	bl	800ebb0 <__retarget_lock_release_recursive>
 800ea44:	bd10      	pop	{r4, pc}
 800ea46:	46c0      	nop			; (mov r8, r8)
 800ea48:	2000050d 	.word	0x2000050d

0800ea4c <__sinit_lock_acquire>:
 800ea4c:	b510      	push	{r4, lr}
 800ea4e:	4802      	ldr	r0, [pc, #8]	; (800ea58 <__sinit_lock_acquire+0xc>)
 800ea50:	f000 f8ad 	bl	800ebae <__retarget_lock_acquire_recursive>
 800ea54:	bd10      	pop	{r4, pc}
 800ea56:	46c0      	nop			; (mov r8, r8)
 800ea58:	2000050e 	.word	0x2000050e

0800ea5c <__sinit_lock_release>:
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	4802      	ldr	r0, [pc, #8]	; (800ea68 <__sinit_lock_release+0xc>)
 800ea60:	f000 f8a6 	bl	800ebb0 <__retarget_lock_release_recursive>
 800ea64:	bd10      	pop	{r4, pc}
 800ea66:	46c0      	nop			; (mov r8, r8)
 800ea68:	2000050e 	.word	0x2000050e

0800ea6c <__sinit>:
 800ea6c:	b513      	push	{r0, r1, r4, lr}
 800ea6e:	0004      	movs	r4, r0
 800ea70:	f7ff ffec 	bl	800ea4c <__sinit_lock_acquire>
 800ea74:	69a3      	ldr	r3, [r4, #24]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d002      	beq.n	800ea80 <__sinit+0x14>
 800ea7a:	f7ff ffef 	bl	800ea5c <__sinit_lock_release>
 800ea7e:	bd13      	pop	{r0, r1, r4, pc}
 800ea80:	64a3      	str	r3, [r4, #72]	; 0x48
 800ea82:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ea84:	6523      	str	r3, [r4, #80]	; 0x50
 800ea86:	4b13      	ldr	r3, [pc, #76]	; (800ead4 <__sinit+0x68>)
 800ea88:	4a13      	ldr	r2, [pc, #76]	; (800ead8 <__sinit+0x6c>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea8e:	9301      	str	r3, [sp, #4]
 800ea90:	42a3      	cmp	r3, r4
 800ea92:	d101      	bne.n	800ea98 <__sinit+0x2c>
 800ea94:	2301      	movs	r3, #1
 800ea96:	61a3      	str	r3, [r4, #24]
 800ea98:	0020      	movs	r0, r4
 800ea9a:	f000 f81f 	bl	800eadc <__sfp>
 800ea9e:	6060      	str	r0, [r4, #4]
 800eaa0:	0020      	movs	r0, r4
 800eaa2:	f000 f81b 	bl	800eadc <__sfp>
 800eaa6:	60a0      	str	r0, [r4, #8]
 800eaa8:	0020      	movs	r0, r4
 800eaaa:	f000 f817 	bl	800eadc <__sfp>
 800eaae:	2200      	movs	r2, #0
 800eab0:	2104      	movs	r1, #4
 800eab2:	60e0      	str	r0, [r4, #12]
 800eab4:	6860      	ldr	r0, [r4, #4]
 800eab6:	f7ff ff77 	bl	800e9a8 <std>
 800eaba:	2201      	movs	r2, #1
 800eabc:	2109      	movs	r1, #9
 800eabe:	68a0      	ldr	r0, [r4, #8]
 800eac0:	f7ff ff72 	bl	800e9a8 <std>
 800eac4:	2202      	movs	r2, #2
 800eac6:	2112      	movs	r1, #18
 800eac8:	68e0      	ldr	r0, [r4, #12]
 800eaca:	f7ff ff6d 	bl	800e9a8 <std>
 800eace:	2301      	movs	r3, #1
 800ead0:	61a3      	str	r3, [r4, #24]
 800ead2:	e7d2      	b.n	800ea7a <__sinit+0xe>
 800ead4:	0800f1a4 	.word	0x0800f1a4
 800ead8:	0800e9f1 	.word	0x0800e9f1

0800eadc <__sfp>:
 800eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eade:	0007      	movs	r7, r0
 800eae0:	f7ff ffa4 	bl	800ea2c <__sfp_lock_acquire>
 800eae4:	4b1f      	ldr	r3, [pc, #124]	; (800eb64 <__sfp+0x88>)
 800eae6:	681e      	ldr	r6, [r3, #0]
 800eae8:	69b3      	ldr	r3, [r6, #24]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d102      	bne.n	800eaf4 <__sfp+0x18>
 800eaee:	0030      	movs	r0, r6
 800eaf0:	f7ff ffbc 	bl	800ea6c <__sinit>
 800eaf4:	3648      	adds	r6, #72	; 0x48
 800eaf6:	68b4      	ldr	r4, [r6, #8]
 800eaf8:	6873      	ldr	r3, [r6, #4]
 800eafa:	3b01      	subs	r3, #1
 800eafc:	d504      	bpl.n	800eb08 <__sfp+0x2c>
 800eafe:	6833      	ldr	r3, [r6, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d022      	beq.n	800eb4a <__sfp+0x6e>
 800eb04:	6836      	ldr	r6, [r6, #0]
 800eb06:	e7f6      	b.n	800eaf6 <__sfp+0x1a>
 800eb08:	220c      	movs	r2, #12
 800eb0a:	5ea5      	ldrsh	r5, [r4, r2]
 800eb0c:	2d00      	cmp	r5, #0
 800eb0e:	d11a      	bne.n	800eb46 <__sfp+0x6a>
 800eb10:	0020      	movs	r0, r4
 800eb12:	4b15      	ldr	r3, [pc, #84]	; (800eb68 <__sfp+0x8c>)
 800eb14:	3058      	adds	r0, #88	; 0x58
 800eb16:	60e3      	str	r3, [r4, #12]
 800eb18:	6665      	str	r5, [r4, #100]	; 0x64
 800eb1a:	f000 f847 	bl	800ebac <__retarget_lock_init_recursive>
 800eb1e:	f7ff ff8d 	bl	800ea3c <__sfp_lock_release>
 800eb22:	0020      	movs	r0, r4
 800eb24:	2208      	movs	r2, #8
 800eb26:	0029      	movs	r1, r5
 800eb28:	6025      	str	r5, [r4, #0]
 800eb2a:	60a5      	str	r5, [r4, #8]
 800eb2c:	6065      	str	r5, [r4, #4]
 800eb2e:	6125      	str	r5, [r4, #16]
 800eb30:	6165      	str	r5, [r4, #20]
 800eb32:	61a5      	str	r5, [r4, #24]
 800eb34:	305c      	adds	r0, #92	; 0x5c
 800eb36:	f7fb fc65 	bl	800a404 <memset>
 800eb3a:	6365      	str	r5, [r4, #52]	; 0x34
 800eb3c:	63a5      	str	r5, [r4, #56]	; 0x38
 800eb3e:	64a5      	str	r5, [r4, #72]	; 0x48
 800eb40:	64e5      	str	r5, [r4, #76]	; 0x4c
 800eb42:	0020      	movs	r0, r4
 800eb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb46:	3468      	adds	r4, #104	; 0x68
 800eb48:	e7d7      	b.n	800eafa <__sfp+0x1e>
 800eb4a:	2104      	movs	r1, #4
 800eb4c:	0038      	movs	r0, r7
 800eb4e:	f7ff ff57 	bl	800ea00 <__sfmoreglue>
 800eb52:	1e04      	subs	r4, r0, #0
 800eb54:	6030      	str	r0, [r6, #0]
 800eb56:	d1d5      	bne.n	800eb04 <__sfp+0x28>
 800eb58:	f7ff ff70 	bl	800ea3c <__sfp_lock_release>
 800eb5c:	230c      	movs	r3, #12
 800eb5e:	603b      	str	r3, [r7, #0]
 800eb60:	e7ef      	b.n	800eb42 <__sfp+0x66>
 800eb62:	46c0      	nop			; (mov r8, r8)
 800eb64:	0800f1a4 	.word	0x0800f1a4
 800eb68:	ffff0001 	.word	0xffff0001

0800eb6c <_fwalk_reent>:
 800eb6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb6e:	0004      	movs	r4, r0
 800eb70:	0006      	movs	r6, r0
 800eb72:	2700      	movs	r7, #0
 800eb74:	9101      	str	r1, [sp, #4]
 800eb76:	3448      	adds	r4, #72	; 0x48
 800eb78:	6863      	ldr	r3, [r4, #4]
 800eb7a:	68a5      	ldr	r5, [r4, #8]
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	9b00      	ldr	r3, [sp, #0]
 800eb80:	3b01      	subs	r3, #1
 800eb82:	9300      	str	r3, [sp, #0]
 800eb84:	d504      	bpl.n	800eb90 <_fwalk_reent+0x24>
 800eb86:	6824      	ldr	r4, [r4, #0]
 800eb88:	2c00      	cmp	r4, #0
 800eb8a:	d1f5      	bne.n	800eb78 <_fwalk_reent+0xc>
 800eb8c:	0038      	movs	r0, r7
 800eb8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eb90:	89ab      	ldrh	r3, [r5, #12]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d908      	bls.n	800eba8 <_fwalk_reent+0x3c>
 800eb96:	220e      	movs	r2, #14
 800eb98:	5eab      	ldrsh	r3, [r5, r2]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	d004      	beq.n	800eba8 <_fwalk_reent+0x3c>
 800eb9e:	0029      	movs	r1, r5
 800eba0:	0030      	movs	r0, r6
 800eba2:	9b01      	ldr	r3, [sp, #4]
 800eba4:	4798      	blx	r3
 800eba6:	4307      	orrs	r7, r0
 800eba8:	3568      	adds	r5, #104	; 0x68
 800ebaa:	e7e8      	b.n	800eb7e <_fwalk_reent+0x12>

0800ebac <__retarget_lock_init_recursive>:
 800ebac:	4770      	bx	lr

0800ebae <__retarget_lock_acquire_recursive>:
 800ebae:	4770      	bx	lr

0800ebb0 <__retarget_lock_release_recursive>:
 800ebb0:	4770      	bx	lr
	...

0800ebb4 <__swhatbuf_r>:
 800ebb4:	b570      	push	{r4, r5, r6, lr}
 800ebb6:	000e      	movs	r6, r1
 800ebb8:	001d      	movs	r5, r3
 800ebba:	230e      	movs	r3, #14
 800ebbc:	5ec9      	ldrsh	r1, [r1, r3]
 800ebbe:	0014      	movs	r4, r2
 800ebc0:	b096      	sub	sp, #88	; 0x58
 800ebc2:	2900      	cmp	r1, #0
 800ebc4:	da08      	bge.n	800ebd8 <__swhatbuf_r+0x24>
 800ebc6:	220c      	movs	r2, #12
 800ebc8:	5eb3      	ldrsh	r3, [r6, r2]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	602a      	str	r2, [r5, #0]
 800ebce:	061b      	lsls	r3, r3, #24
 800ebd0:	d411      	bmi.n	800ebf6 <__swhatbuf_r+0x42>
 800ebd2:	2380      	movs	r3, #128	; 0x80
 800ebd4:	00db      	lsls	r3, r3, #3
 800ebd6:	e00f      	b.n	800ebf8 <__swhatbuf_r+0x44>
 800ebd8:	466a      	mov	r2, sp
 800ebda:	f000 f955 	bl	800ee88 <_fstat_r>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	dbf1      	blt.n	800ebc6 <__swhatbuf_r+0x12>
 800ebe2:	23f0      	movs	r3, #240	; 0xf0
 800ebe4:	9901      	ldr	r1, [sp, #4]
 800ebe6:	021b      	lsls	r3, r3, #8
 800ebe8:	4019      	ands	r1, r3
 800ebea:	4b05      	ldr	r3, [pc, #20]	; (800ec00 <__swhatbuf_r+0x4c>)
 800ebec:	18c9      	adds	r1, r1, r3
 800ebee:	424b      	negs	r3, r1
 800ebf0:	4159      	adcs	r1, r3
 800ebf2:	6029      	str	r1, [r5, #0]
 800ebf4:	e7ed      	b.n	800ebd2 <__swhatbuf_r+0x1e>
 800ebf6:	2340      	movs	r3, #64	; 0x40
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	6023      	str	r3, [r4, #0]
 800ebfc:	b016      	add	sp, #88	; 0x58
 800ebfe:	bd70      	pop	{r4, r5, r6, pc}
 800ec00:	ffffe000 	.word	0xffffe000

0800ec04 <__smakebuf_r>:
 800ec04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec06:	2602      	movs	r6, #2
 800ec08:	898b      	ldrh	r3, [r1, #12]
 800ec0a:	0005      	movs	r5, r0
 800ec0c:	000c      	movs	r4, r1
 800ec0e:	4233      	tst	r3, r6
 800ec10:	d006      	beq.n	800ec20 <__smakebuf_r+0x1c>
 800ec12:	0023      	movs	r3, r4
 800ec14:	3347      	adds	r3, #71	; 0x47
 800ec16:	6023      	str	r3, [r4, #0]
 800ec18:	6123      	str	r3, [r4, #16]
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	6163      	str	r3, [r4, #20]
 800ec1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ec20:	466a      	mov	r2, sp
 800ec22:	ab01      	add	r3, sp, #4
 800ec24:	f7ff ffc6 	bl	800ebb4 <__swhatbuf_r>
 800ec28:	9900      	ldr	r1, [sp, #0]
 800ec2a:	0007      	movs	r7, r0
 800ec2c:	0028      	movs	r0, r5
 800ec2e:	f7fb fc5d 	bl	800a4ec <_malloc_r>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	d108      	bne.n	800ec48 <__smakebuf_r+0x44>
 800ec36:	220c      	movs	r2, #12
 800ec38:	5ea3      	ldrsh	r3, [r4, r2]
 800ec3a:	059a      	lsls	r2, r3, #22
 800ec3c:	d4ef      	bmi.n	800ec1e <__smakebuf_r+0x1a>
 800ec3e:	2203      	movs	r2, #3
 800ec40:	4393      	bics	r3, r2
 800ec42:	431e      	orrs	r6, r3
 800ec44:	81a6      	strh	r6, [r4, #12]
 800ec46:	e7e4      	b.n	800ec12 <__smakebuf_r+0xe>
 800ec48:	4b0f      	ldr	r3, [pc, #60]	; (800ec88 <__smakebuf_r+0x84>)
 800ec4a:	62ab      	str	r3, [r5, #40]	; 0x28
 800ec4c:	2380      	movs	r3, #128	; 0x80
 800ec4e:	89a2      	ldrh	r2, [r4, #12]
 800ec50:	6020      	str	r0, [r4, #0]
 800ec52:	4313      	orrs	r3, r2
 800ec54:	81a3      	strh	r3, [r4, #12]
 800ec56:	9b00      	ldr	r3, [sp, #0]
 800ec58:	6120      	str	r0, [r4, #16]
 800ec5a:	6163      	str	r3, [r4, #20]
 800ec5c:	9b01      	ldr	r3, [sp, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00d      	beq.n	800ec7e <__smakebuf_r+0x7a>
 800ec62:	0028      	movs	r0, r5
 800ec64:	230e      	movs	r3, #14
 800ec66:	5ee1      	ldrsh	r1, [r4, r3]
 800ec68:	f000 f920 	bl	800eeac <_isatty_r>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	d006      	beq.n	800ec7e <__smakebuf_r+0x7a>
 800ec70:	2203      	movs	r2, #3
 800ec72:	89a3      	ldrh	r3, [r4, #12]
 800ec74:	4393      	bics	r3, r2
 800ec76:	001a      	movs	r2, r3
 800ec78:	2301      	movs	r3, #1
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	81a3      	strh	r3, [r4, #12]
 800ec7e:	89a0      	ldrh	r0, [r4, #12]
 800ec80:	4307      	orrs	r7, r0
 800ec82:	81a7      	strh	r7, [r4, #12]
 800ec84:	e7cb      	b.n	800ec1e <__smakebuf_r+0x1a>
 800ec86:	46c0      	nop			; (mov r8, r8)
 800ec88:	0800e9f1 	.word	0x0800e9f1

0800ec8c <memmove>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	4288      	cmp	r0, r1
 800ec90:	d902      	bls.n	800ec98 <memmove+0xc>
 800ec92:	188b      	adds	r3, r1, r2
 800ec94:	4298      	cmp	r0, r3
 800ec96:	d303      	bcc.n	800eca0 <memmove+0x14>
 800ec98:	2300      	movs	r3, #0
 800ec9a:	e007      	b.n	800ecac <memmove+0x20>
 800ec9c:	5c8b      	ldrb	r3, [r1, r2]
 800ec9e:	5483      	strb	r3, [r0, r2]
 800eca0:	3a01      	subs	r2, #1
 800eca2:	d2fb      	bcs.n	800ec9c <memmove+0x10>
 800eca4:	bd10      	pop	{r4, pc}
 800eca6:	5ccc      	ldrb	r4, [r1, r3]
 800eca8:	54c4      	strb	r4, [r0, r3]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d1fa      	bne.n	800eca6 <memmove+0x1a>
 800ecb0:	e7f8      	b.n	800eca4 <memmove+0x18>

0800ecb2 <_realloc_r>:
 800ecb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecb4:	0007      	movs	r7, r0
 800ecb6:	000e      	movs	r6, r1
 800ecb8:	0014      	movs	r4, r2
 800ecba:	2900      	cmp	r1, #0
 800ecbc:	d105      	bne.n	800ecca <_realloc_r+0x18>
 800ecbe:	0011      	movs	r1, r2
 800ecc0:	f7fb fc14 	bl	800a4ec <_malloc_r>
 800ecc4:	0005      	movs	r5, r0
 800ecc6:	0028      	movs	r0, r5
 800ecc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ecca:	2a00      	cmp	r2, #0
 800eccc:	d103      	bne.n	800ecd6 <_realloc_r+0x24>
 800ecce:	f7fb fba1 	bl	800a414 <_free_r>
 800ecd2:	0025      	movs	r5, r4
 800ecd4:	e7f7      	b.n	800ecc6 <_realloc_r+0x14>
 800ecd6:	f000 f90f 	bl	800eef8 <_malloc_usable_size_r>
 800ecda:	9001      	str	r0, [sp, #4]
 800ecdc:	4284      	cmp	r4, r0
 800ecde:	d803      	bhi.n	800ece8 <_realloc_r+0x36>
 800ece0:	0035      	movs	r5, r6
 800ece2:	0843      	lsrs	r3, r0, #1
 800ece4:	42a3      	cmp	r3, r4
 800ece6:	d3ee      	bcc.n	800ecc6 <_realloc_r+0x14>
 800ece8:	0021      	movs	r1, r4
 800ecea:	0038      	movs	r0, r7
 800ecec:	f7fb fbfe 	bl	800a4ec <_malloc_r>
 800ecf0:	1e05      	subs	r5, r0, #0
 800ecf2:	d0e8      	beq.n	800ecc6 <_realloc_r+0x14>
 800ecf4:	9b01      	ldr	r3, [sp, #4]
 800ecf6:	0022      	movs	r2, r4
 800ecf8:	429c      	cmp	r4, r3
 800ecfa:	d900      	bls.n	800ecfe <_realloc_r+0x4c>
 800ecfc:	001a      	movs	r2, r3
 800ecfe:	0031      	movs	r1, r6
 800ed00:	0028      	movs	r0, r5
 800ed02:	f7fe fcb6 	bl	800d672 <memcpy>
 800ed06:	0031      	movs	r1, r6
 800ed08:	0038      	movs	r0, r7
 800ed0a:	f7fb fb83 	bl	800a414 <_free_r>
 800ed0e:	e7da      	b.n	800ecc6 <_realloc_r+0x14>

0800ed10 <_raise_r>:
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	0004      	movs	r4, r0
 800ed14:	000d      	movs	r5, r1
 800ed16:	291f      	cmp	r1, #31
 800ed18:	d904      	bls.n	800ed24 <_raise_r+0x14>
 800ed1a:	2316      	movs	r3, #22
 800ed1c:	6003      	str	r3, [r0, #0]
 800ed1e:	2001      	movs	r0, #1
 800ed20:	4240      	negs	r0, r0
 800ed22:	bd70      	pop	{r4, r5, r6, pc}
 800ed24:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d004      	beq.n	800ed34 <_raise_r+0x24>
 800ed2a:	008a      	lsls	r2, r1, #2
 800ed2c:	189b      	adds	r3, r3, r2
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	2a00      	cmp	r2, #0
 800ed32:	d108      	bne.n	800ed46 <_raise_r+0x36>
 800ed34:	0020      	movs	r0, r4
 800ed36:	f000 f831 	bl	800ed9c <_getpid_r>
 800ed3a:	002a      	movs	r2, r5
 800ed3c:	0001      	movs	r1, r0
 800ed3e:	0020      	movs	r0, r4
 800ed40:	f000 f81a 	bl	800ed78 <_kill_r>
 800ed44:	e7ed      	b.n	800ed22 <_raise_r+0x12>
 800ed46:	2000      	movs	r0, #0
 800ed48:	2a01      	cmp	r2, #1
 800ed4a:	d0ea      	beq.n	800ed22 <_raise_r+0x12>
 800ed4c:	1c51      	adds	r1, r2, #1
 800ed4e:	d103      	bne.n	800ed58 <_raise_r+0x48>
 800ed50:	2316      	movs	r3, #22
 800ed52:	3001      	adds	r0, #1
 800ed54:	6023      	str	r3, [r4, #0]
 800ed56:	e7e4      	b.n	800ed22 <_raise_r+0x12>
 800ed58:	2400      	movs	r4, #0
 800ed5a:	0028      	movs	r0, r5
 800ed5c:	601c      	str	r4, [r3, #0]
 800ed5e:	4790      	blx	r2
 800ed60:	0020      	movs	r0, r4
 800ed62:	e7de      	b.n	800ed22 <_raise_r+0x12>

0800ed64 <raise>:
 800ed64:	b510      	push	{r4, lr}
 800ed66:	4b03      	ldr	r3, [pc, #12]	; (800ed74 <raise+0x10>)
 800ed68:	0001      	movs	r1, r0
 800ed6a:	6818      	ldr	r0, [r3, #0]
 800ed6c:	f7ff ffd0 	bl	800ed10 <_raise_r>
 800ed70:	bd10      	pop	{r4, pc}
 800ed72:	46c0      	nop			; (mov r8, r8)
 800ed74:	2000000c 	.word	0x2000000c

0800ed78 <_kill_r>:
 800ed78:	2300      	movs	r3, #0
 800ed7a:	b570      	push	{r4, r5, r6, lr}
 800ed7c:	4d06      	ldr	r5, [pc, #24]	; (800ed98 <_kill_r+0x20>)
 800ed7e:	0004      	movs	r4, r0
 800ed80:	0008      	movs	r0, r1
 800ed82:	0011      	movs	r1, r2
 800ed84:	602b      	str	r3, [r5, #0]
 800ed86:	f7f5 fc09 	bl	800459c <_kill>
 800ed8a:	1c43      	adds	r3, r0, #1
 800ed8c:	d103      	bne.n	800ed96 <_kill_r+0x1e>
 800ed8e:	682b      	ldr	r3, [r5, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d000      	beq.n	800ed96 <_kill_r+0x1e>
 800ed94:	6023      	str	r3, [r4, #0]
 800ed96:	bd70      	pop	{r4, r5, r6, pc}
 800ed98:	20000508 	.word	0x20000508

0800ed9c <_getpid_r>:
 800ed9c:	b510      	push	{r4, lr}
 800ed9e:	f7f5 fbf7 	bl	8004590 <_getpid>
 800eda2:	bd10      	pop	{r4, pc}

0800eda4 <__sread>:
 800eda4:	b570      	push	{r4, r5, r6, lr}
 800eda6:	000c      	movs	r4, r1
 800eda8:	250e      	movs	r5, #14
 800edaa:	5f49      	ldrsh	r1, [r1, r5]
 800edac:	f000 f8ac 	bl	800ef08 <_read_r>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	db03      	blt.n	800edbc <__sread+0x18>
 800edb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800edb6:	181b      	adds	r3, r3, r0
 800edb8:	6563      	str	r3, [r4, #84]	; 0x54
 800edba:	bd70      	pop	{r4, r5, r6, pc}
 800edbc:	89a3      	ldrh	r3, [r4, #12]
 800edbe:	4a02      	ldr	r2, [pc, #8]	; (800edc8 <__sread+0x24>)
 800edc0:	4013      	ands	r3, r2
 800edc2:	81a3      	strh	r3, [r4, #12]
 800edc4:	e7f9      	b.n	800edba <__sread+0x16>
 800edc6:	46c0      	nop			; (mov r8, r8)
 800edc8:	ffffefff 	.word	0xffffefff

0800edcc <__swrite>:
 800edcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edce:	001f      	movs	r7, r3
 800edd0:	898b      	ldrh	r3, [r1, #12]
 800edd2:	0005      	movs	r5, r0
 800edd4:	000c      	movs	r4, r1
 800edd6:	0016      	movs	r6, r2
 800edd8:	05db      	lsls	r3, r3, #23
 800edda:	d505      	bpl.n	800ede8 <__swrite+0x1c>
 800eddc:	230e      	movs	r3, #14
 800edde:	5ec9      	ldrsh	r1, [r1, r3]
 800ede0:	2200      	movs	r2, #0
 800ede2:	2302      	movs	r3, #2
 800ede4:	f000 f874 	bl	800eed0 <_lseek_r>
 800ede8:	89a3      	ldrh	r3, [r4, #12]
 800edea:	4a05      	ldr	r2, [pc, #20]	; (800ee00 <__swrite+0x34>)
 800edec:	0028      	movs	r0, r5
 800edee:	4013      	ands	r3, r2
 800edf0:	81a3      	strh	r3, [r4, #12]
 800edf2:	0032      	movs	r2, r6
 800edf4:	230e      	movs	r3, #14
 800edf6:	5ee1      	ldrsh	r1, [r4, r3]
 800edf8:	003b      	movs	r3, r7
 800edfa:	f000 f81f 	bl	800ee3c <_write_r>
 800edfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee00:	ffffefff 	.word	0xffffefff

0800ee04 <__sseek>:
 800ee04:	b570      	push	{r4, r5, r6, lr}
 800ee06:	000c      	movs	r4, r1
 800ee08:	250e      	movs	r5, #14
 800ee0a:	5f49      	ldrsh	r1, [r1, r5]
 800ee0c:	f000 f860 	bl	800eed0 <_lseek_r>
 800ee10:	89a3      	ldrh	r3, [r4, #12]
 800ee12:	1c42      	adds	r2, r0, #1
 800ee14:	d103      	bne.n	800ee1e <__sseek+0x1a>
 800ee16:	4a05      	ldr	r2, [pc, #20]	; (800ee2c <__sseek+0x28>)
 800ee18:	4013      	ands	r3, r2
 800ee1a:	81a3      	strh	r3, [r4, #12]
 800ee1c:	bd70      	pop	{r4, r5, r6, pc}
 800ee1e:	2280      	movs	r2, #128	; 0x80
 800ee20:	0152      	lsls	r2, r2, #5
 800ee22:	4313      	orrs	r3, r2
 800ee24:	81a3      	strh	r3, [r4, #12]
 800ee26:	6560      	str	r0, [r4, #84]	; 0x54
 800ee28:	e7f8      	b.n	800ee1c <__sseek+0x18>
 800ee2a:	46c0      	nop			; (mov r8, r8)
 800ee2c:	ffffefff 	.word	0xffffefff

0800ee30 <__sclose>:
 800ee30:	b510      	push	{r4, lr}
 800ee32:	230e      	movs	r3, #14
 800ee34:	5ec9      	ldrsh	r1, [r1, r3]
 800ee36:	f000 f815 	bl	800ee64 <_close_r>
 800ee3a:	bd10      	pop	{r4, pc}

0800ee3c <_write_r>:
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	0004      	movs	r4, r0
 800ee40:	0008      	movs	r0, r1
 800ee42:	0011      	movs	r1, r2
 800ee44:	001a      	movs	r2, r3
 800ee46:	2300      	movs	r3, #0
 800ee48:	4d05      	ldr	r5, [pc, #20]	; (800ee60 <_write_r+0x24>)
 800ee4a:	602b      	str	r3, [r5, #0]
 800ee4c:	f7f5 fbdf 	bl	800460e <_write>
 800ee50:	1c43      	adds	r3, r0, #1
 800ee52:	d103      	bne.n	800ee5c <_write_r+0x20>
 800ee54:	682b      	ldr	r3, [r5, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d000      	beq.n	800ee5c <_write_r+0x20>
 800ee5a:	6023      	str	r3, [r4, #0]
 800ee5c:	bd70      	pop	{r4, r5, r6, pc}
 800ee5e:	46c0      	nop			; (mov r8, r8)
 800ee60:	20000508 	.word	0x20000508

0800ee64 <_close_r>:
 800ee64:	2300      	movs	r3, #0
 800ee66:	b570      	push	{r4, r5, r6, lr}
 800ee68:	4d06      	ldr	r5, [pc, #24]	; (800ee84 <_close_r+0x20>)
 800ee6a:	0004      	movs	r4, r0
 800ee6c:	0008      	movs	r0, r1
 800ee6e:	602b      	str	r3, [r5, #0]
 800ee70:	f7f5 fbe9 	bl	8004646 <_close>
 800ee74:	1c43      	adds	r3, r0, #1
 800ee76:	d103      	bne.n	800ee80 <_close_r+0x1c>
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d000      	beq.n	800ee80 <_close_r+0x1c>
 800ee7e:	6023      	str	r3, [r4, #0]
 800ee80:	bd70      	pop	{r4, r5, r6, pc}
 800ee82:	46c0      	nop			; (mov r8, r8)
 800ee84:	20000508 	.word	0x20000508

0800ee88 <_fstat_r>:
 800ee88:	2300      	movs	r3, #0
 800ee8a:	b570      	push	{r4, r5, r6, lr}
 800ee8c:	4d06      	ldr	r5, [pc, #24]	; (800eea8 <_fstat_r+0x20>)
 800ee8e:	0004      	movs	r4, r0
 800ee90:	0008      	movs	r0, r1
 800ee92:	0011      	movs	r1, r2
 800ee94:	602b      	str	r3, [r5, #0]
 800ee96:	f7f5 fbe0 	bl	800465a <_fstat>
 800ee9a:	1c43      	adds	r3, r0, #1
 800ee9c:	d103      	bne.n	800eea6 <_fstat_r+0x1e>
 800ee9e:	682b      	ldr	r3, [r5, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d000      	beq.n	800eea6 <_fstat_r+0x1e>
 800eea4:	6023      	str	r3, [r4, #0]
 800eea6:	bd70      	pop	{r4, r5, r6, pc}
 800eea8:	20000508 	.word	0x20000508

0800eeac <_isatty_r>:
 800eeac:	2300      	movs	r3, #0
 800eeae:	b570      	push	{r4, r5, r6, lr}
 800eeb0:	4d06      	ldr	r5, [pc, #24]	; (800eecc <_isatty_r+0x20>)
 800eeb2:	0004      	movs	r4, r0
 800eeb4:	0008      	movs	r0, r1
 800eeb6:	602b      	str	r3, [r5, #0]
 800eeb8:	f7f5 fbdd 	bl	8004676 <_isatty>
 800eebc:	1c43      	adds	r3, r0, #1
 800eebe:	d103      	bne.n	800eec8 <_isatty_r+0x1c>
 800eec0:	682b      	ldr	r3, [r5, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d000      	beq.n	800eec8 <_isatty_r+0x1c>
 800eec6:	6023      	str	r3, [r4, #0]
 800eec8:	bd70      	pop	{r4, r5, r6, pc}
 800eeca:	46c0      	nop			; (mov r8, r8)
 800eecc:	20000508 	.word	0x20000508

0800eed0 <_lseek_r>:
 800eed0:	b570      	push	{r4, r5, r6, lr}
 800eed2:	0004      	movs	r4, r0
 800eed4:	0008      	movs	r0, r1
 800eed6:	0011      	movs	r1, r2
 800eed8:	001a      	movs	r2, r3
 800eeda:	2300      	movs	r3, #0
 800eedc:	4d05      	ldr	r5, [pc, #20]	; (800eef4 <_lseek_r+0x24>)
 800eede:	602b      	str	r3, [r5, #0]
 800eee0:	f7f5 fbd2 	bl	8004688 <_lseek>
 800eee4:	1c43      	adds	r3, r0, #1
 800eee6:	d103      	bne.n	800eef0 <_lseek_r+0x20>
 800eee8:	682b      	ldr	r3, [r5, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d000      	beq.n	800eef0 <_lseek_r+0x20>
 800eeee:	6023      	str	r3, [r4, #0]
 800eef0:	bd70      	pop	{r4, r5, r6, pc}
 800eef2:	46c0      	nop			; (mov r8, r8)
 800eef4:	20000508 	.word	0x20000508

0800eef8 <_malloc_usable_size_r>:
 800eef8:	1f0b      	subs	r3, r1, #4
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	1f18      	subs	r0, r3, #4
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	da01      	bge.n	800ef06 <_malloc_usable_size_r+0xe>
 800ef02:	580b      	ldr	r3, [r1, r0]
 800ef04:	18c0      	adds	r0, r0, r3
 800ef06:	4770      	bx	lr

0800ef08 <_read_r>:
 800ef08:	b570      	push	{r4, r5, r6, lr}
 800ef0a:	0004      	movs	r4, r0
 800ef0c:	0008      	movs	r0, r1
 800ef0e:	0011      	movs	r1, r2
 800ef10:	001a      	movs	r2, r3
 800ef12:	2300      	movs	r3, #0
 800ef14:	4d05      	ldr	r5, [pc, #20]	; (800ef2c <_read_r+0x24>)
 800ef16:	602b      	str	r3, [r5, #0]
 800ef18:	f7f5 fb5c 	bl	80045d4 <_read>
 800ef1c:	1c43      	adds	r3, r0, #1
 800ef1e:	d103      	bne.n	800ef28 <_read_r+0x20>
 800ef20:	682b      	ldr	r3, [r5, #0]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d000      	beq.n	800ef28 <_read_r+0x20>
 800ef26:	6023      	str	r3, [r4, #0]
 800ef28:	bd70      	pop	{r4, r5, r6, pc}
 800ef2a:	46c0      	nop			; (mov r8, r8)
 800ef2c:	20000508 	.word	0x20000508

0800ef30 <_init>:
 800ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef32:	46c0      	nop			; (mov r8, r8)
 800ef34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef36:	bc08      	pop	{r3}
 800ef38:	469e      	mov	lr, r3
 800ef3a:	4770      	bx	lr

0800ef3c <_fini>:
 800ef3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3e:	46c0      	nop			; (mov r8, r8)
 800ef40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef42:	bc08      	pop	{r3}
 800ef44:	469e      	mov	lr, r3
 800ef46:	4770      	bx	lr
