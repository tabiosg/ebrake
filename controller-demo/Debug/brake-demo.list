
brake-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08008b78  08008b78  00018b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009060  08009060  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009060  08009060  00019060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009068  08009068  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009068  08009068  00019068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001e0  08009250  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08009250  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016621  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003236  00000000  00000000  00036831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00039a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  0003acf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa29  00000000  00000000  0003be18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190e8  00000000  00000000  00056841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e2a2  00000000  00000000  0006f929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010dbcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006058  00000000  00000000  0010dc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b60 	.word	0x08008b60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008b60 	.word	0x08008b60

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c50:	f000 b9aa 	b.w	8000fa8 <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f83c 	bl	8000cd8 <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_d2lz>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2300      	movs	r3, #0
 8000c72:	4604      	mov	r4, r0
 8000c74:	460d      	mov	r5, r1
 8000c76:	f7ff ff49 	bl	8000b0c <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x1c>
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	4629      	mov	r1, r5
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fcbf 	bl	8000628 <__aeabi_dmul>
 8000caa:	f7ff ff57 	bl	8000b5c <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fc40 	bl	8000534 <__aeabi_ui2d>
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f7ff fcb6 	bl	8000628 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff faf8 	bl	80002b8 <__aeabi_dsub>
 8000cc8:	f7ff ff48 	bl	8000b5c <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <new_adc_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hadc is the adc and _total_ranks are the total ranks.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ADCSensor object
ADCSensor *new_adc_sensor(ADC_HandleTypeDef *hadc, uint8_t _total_ranks) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
    ADCSensor *adc_sensor = (ADCSensor*) malloc(sizeof(ADCSensor));
 8000fb8:	201c      	movs	r0, #28
 8000fba:	f004 fce3 	bl	8005984 <malloc>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60bb      	str	r3, [r7, #8]
    adc_sensor->adc = hadc;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	601a      	str	r2, [r3, #0]
    adc_sensor->total_ranks = _total_ranks;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	78fa      	ldrb	r2, [r7, #3]
 8000fcc:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e008      	b.n	8000fe6 <new_adc_sensor+0x3a>
        adc_sensor->values[i] = 0;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	2200      	movs	r2, #0
 8000fde:	80da      	strh	r2, [r3, #6]
    for (uint8_t i = 0; i < _total_ranks; ++i) {
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3f2      	bcc.n	8000fd4 <new_adc_sensor+0x28>
    }
    return adc_sensor;
 8000fee:	68bb      	ldr	r3, [r7, #8]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <get_adc_sensor_value>:

// REQUIRES: adc_sensor is an ADCSensor object and rank is the index
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint16_t get_adc_sensor_value(ADCSensor *adc_sensor, uint8_t rank) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
    return adc_sensor->values[rank];
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	88db      	ldrh	r3, [r3, #6]
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <update_adc_sensor_values>:

// REQUIRES: adc_sensor is an ADCSensor object
// MODIFIES: values
// EFFECTS: Updates the stored value of value.
void update_adc_sensor_values(ADCSensor *adc_sensor) {
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e00b      	b.n	8001040 <update_adc_sensor_values+0x26>
		HAL_ADC_Start_DMA(adc_sensor->adc, adc_sensor->values, adc_sensor->total_ranks);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1d99      	adds	r1, r3, #6
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	461a      	mov	r2, r3
 8001036:	f001 f9c3 	bl	80023c0 <HAL_ADC_Start_DMA>
	for (int i = 0; i < adc_sensor->total_ranks; ++i) {
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3301      	adds	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	791b      	ldrb	r3, [r3, #4]
 8001044:	461a      	mov	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4293      	cmp	r3, r2
 800104a:	dbed      	blt.n	8001028 <update_adc_sensor_values+0xe>
	}
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <new_force_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created ForceSensor object
ForceSensor *new_force_sensor(ADCSensor *_adc_sensor, uint8_t _rank) {
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	70fb      	strb	r3, [r7, #3]
    ForceSensor *force_sensor = (ForceSensor*) malloc(sizeof(ForceSensor));
 8001062:	2008      	movs	r0, #8
 8001064:	f004 fc8e 	bl	8005984 <malloc>
 8001068:	4603      	mov	r3, r0
 800106a:	60fb      	str	r3, [r7, #12]
	force_sensor->adc_sensor = _adc_sensor;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	601a      	str	r2, [r3, #0]
    force_sensor->rank = _rank;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	78fa      	ldrb	r2, [r7, #3]
 8001076:	711a      	strb	r2, [r3, #4]
	return force_sensor;
 8001078:	68fb      	ldr	r3, [r7, #12]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <get_force_sensor_data>:

// REQUIRES: ForceSensor is a force_sensor object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of the force sensor in Newtons.
float get_force_sensor_data(ForceSensor *force_sensor) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
    uint32_t raw_value = get_adc_sensor_value(force_sensor->adc_sensor, force_sensor->rank);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	791b      	ldrb	r3, [r3, #4]
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f7ff ffaf 	bl	8000ff8 <get_adc_sensor_value>
 800109a:	4603      	mov	r3, r0
 800109c:	60fb      	str	r3, [r7, #12]
    return raw_value * FORCE_SENSOR_NEWTONS_PER_COUNT_RATIO;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80010a8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <new_imu_sensor>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: hi2c is the i2c channel
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created IMU object
IMU *new_imu_sensor(I2C_HandleTypeDef *hi2c) {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
    IMU *imu = (IMU*) malloc(sizeof(IMU));
 80010ba:	2004      	movs	r0, #4
 80010bc:	f004 fc62 	bl	8005984 <malloc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	60fb      	str	r3, [r7, #12]
	imu->i2c = hi2c;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
	return imu;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <new_interrupt_timer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _timer corresponds to timer
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created InterruptTimer object
InterruptTimer *new_interrupt_timer(TIM_HandleTypeDef *_timer) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	InterruptTimer *interrupt_timer = (InterruptTimer*) malloc(sizeof(InterruptTimer));
 80010dc:	2004      	movs	r0, #4
 80010de:	f004 fc51 	bl	8005984 <malloc>
 80010e2:	4603      	mov	r3, r0
 80010e4:	60fb      	str	r3, [r7, #12]
	interrupt_timer->timer = _timer;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
	return interrupt_timer;
 80010ec:	68fb      	ldr	r3, [r7, #12]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <start_interrupt_timer>:

// REQUIRES: interrupt_timer is an InterruptTimer object
// MODIFIES: nothing
// EFFECTS: Enables interrupts for the interrupt timer
void start_interrupt_timer(InterruptTimer *interrupt_timer) {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(interrupt_timer->timer);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fa2e 	bl	8004564 <HAL_TIM_Base_Start_IT>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <new_joint>:

// REQUIRES: _motor is a Motor object and
// _potentiometer is a Potentiometer object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Joint object
Joint *new_joint(Motor* _motor, Potentiometer* _potentiometer) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	Joint *joint = (Joint*) malloc(sizeof(Joint));
 800111a:	201c      	movs	r0, #28
 800111c:	f004 fc32 	bl	8005984 <malloc>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
	joint->motor = _motor;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
    joint->potentiometer = _potentiometer;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	605a      	str	r2, [r3, #4]
    joint->potentiometer_value_at_rest_offset = 0;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    joint->current_angle_degrees = 0;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    joint->desired_angle_degrees = 0;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
	joint->is_calibrated = false;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	761a      	strb	r2, [r3, #24]
	return joint;
 800114c:	68fb      	ldr	r3, [r7, #12]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <move_joint_to_target>:

// REQUIRES: joint is a Joint object
// and target is a float
// MODIFIES: Nothing
// EFFECTS: Moves the motor based on current angle and desired angle
void move_joint_to_target(Joint *joint) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	float difference_degrees = joint->desired_angle_degrees - joint->current_angle_degrees;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	ed93 7a04 	vldr	s14, [r3, #16]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 7a03 	vldr	s15, [r3, #12]
 800116a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116e:	edc7 7a03 	vstr	s15, [r7, #12]
	if (abs(difference_degrees) < DESIRED_ANGLE_LAX_DEGREES) {
 8001172:	edd7 7a03 	vldr	s15, [r7, #12]
 8001176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800117a:	ee17 3a90 	vmov	r3, s15
 800117e:	2b00      	cmp	r3, #0
 8001180:	bfb8      	it	lt
 8001182:	425b      	neglt	r3, r3
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001198:	d400      	bmi.n	800119c <move_joint_to_target+0x46>
		change_motor_angle(joint->motor, difference_degrees);
	}
}
 800119a:	e006      	b.n	80011aa <move_joint_to_target+0x54>
		change_motor_angle(joint->motor, difference_degrees);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fbfd 	bl	80019a4 <change_motor_angle>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <refresh_joint_angle>:

// REQUIRES: joint is a Joint object
// MODIFIES: current_angle_degrees
// EFFECTS: Updates current_angle_degrees based on potentiometer
// reading and potentiometer offset
void refresh_joint_angle(Joint *joint) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    uint32_t raw_data = get_potentiometer_input(joint->potentiometer);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fc8c 	bl	8001ade <get_potentiometer_input>
 80011c6:	60f8      	str	r0, [r7, #12]
	int32_t adjusted_data = raw_data - joint->potentiometer_value_at_rest_offset;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	60bb      	str	r3, [r7, #8]
	joint->current_angle_degrees = adjusted_data / RATIO_OF_RAW_POTENT_DATA_PER_JOINT_DEGREE;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011dc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011fc <refresh_joint_angle+0x48>
 80011e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011e4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001200 <refresh_joint_angle+0x4c>
 80011e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	45800000 	.word	0x45800000
 8001200:	43340000 	.word	0x43340000

08001204 <set_joint_target>:

// REQUIRES: joint is a Joint object
// and target is a float
// MODIFIES: desired_angle_degrees
// EFFECTS: Changes the desired_angle_degrees
void set_joint_target(Joint *joint, float target) {
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	ed87 0a00 	vstr	s0, [r7]
	joint->desired_angle_degrees = target;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	611a      	str	r2, [r3, #16]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <zero_joint>:

// REQUIRES: joint is a Joint object
// MODIFIES: potentiometer_error
// EFFECTS: Updates the potentiometer_error so that
// current potentiometer readings are mapped to zero
void zero_joint(Joint *joint) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
	joint->potentiometer_value_at_rest_offset = get_potentiometer_input(joint->potentiometer);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fc55 	bl	8001ade <get_potentiometer_input>
 8001234:	4602      	mov	r2, r0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	609a      	str	r2, [r3, #8]
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 800124c:	2025      	movs	r0, #37	; 0x25
 800124e:	f001 fdbc 	bl	8002dca <HAL_NVIC_DisableIRQ>
	memcpy(last_message, uart_buffer, sizeof(last_message));
 8001252:	4a33      	ldr	r2, [pc, #204]	; (8001320 <HAL_UART_RxCpltCallback+0xdc>)
 8001254:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_UART_RxCpltCallback+0xe0>)
 8001256:	4614      	mov	r4, r2
 8001258:	461d      	mov	r5, r3
 800125a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001262:	c407      	stmia	r4!, {r0, r1, r2}
 8001264:	8023      	strh	r3, [r4, #0]
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001266:	2025      	movs	r0, #37	; 0x25
 8001268:	f001 fda1 	bl	8002dae <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(huart, uart_buffer, 30);
 800126c:	221e      	movs	r2, #30
 800126e:	492d      	ldr	r1, [pc, #180]	; (8001324 <HAL_UART_RxCpltCallback+0xe0>)
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f003 fc2f 	bl	8004ad4 <HAL_UART_Receive_IT>
	__HAL_UART_CLEAR_OREFLAG(huart);
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]
	__HAL_UART_CLEAR_NEFLAG(huart);
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 80012a2:	2025      	movs	r0, #37	; 0x25
 80012a4:	f001 fdab 	bl	8002dfe <HAL_NVIC_ClearPendingIRQ>
	if (last_message[1] == 'D') {
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_UART_RxCpltCallback+0xdc>)
 80012aa:	785b      	ldrb	r3, [r3, #1]
 80012ac:	2b44      	cmp	r3, #68	; 0x44
 80012ae:	d133      	bne.n	8001318 <HAL_UART_RxCpltCallback+0xd4>
		//Expected $DESIRED_ANGLE_CMD,<target>
		char delim[] = ",";
 80012b0:	232c      	movs	r3, #44	; 0x2c
 80012b2:	81bb      	strh	r3, [r7, #12]
		char *identifier = strtok(last_message, delim);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	4819      	ldr	r0, [pc, #100]	; (8001320 <HAL_UART_RxCpltCallback+0xdc>)
 80012bc:	f005 fab2 	bl	8006824 <strtok>
 80012c0:	61f8      	str	r0, [r7, #28]
		if (!strcmp(identifier,"$DESIRED_ANGLE_CMD")){
 80012c2:	4919      	ldr	r1, [pc, #100]	; (8001328 <HAL_UART_RxCpltCallback+0xe4>)
 80012c4:	69f8      	ldr	r0, [r7, #28]
 80012c6:	f7fe ff8b 	bl	80001e0 <strcmp>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d123      	bne.n	8001318 <HAL_UART_RxCpltCallback+0xd4>
			if (!is_skater_gone(skater)) {
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_UART_RxCpltCallback+0xe8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fc27 	bl	8001b28 <is_skater_gone>
 80012da:	4603      	mov	r3, r0
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d018      	beq.n	8001318 <HAL_UART_RxCpltCallback+0xd4>
				float target = atof(strtok(NULL,delim));
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	4619      	mov	r1, r3
 80012ec:	2000      	movs	r0, #0
 80012ee:	f005 fa99 	bl	8006824 <strtok>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 fb17 	bl	8005928 <atof>
 80012fa:	ec53 2b10 	vmov	r2, r3, d0
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f7ff fc4b 	bl	8000b9c <__aeabi_d2f>
 8001306:	4603      	mov	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]
				set_joint_target(joint, target);
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_UART_RxCpltCallback+0xec>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff76 	bl	8001204 <set_joint_target>
			}
		}
	}
}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bdb0      	pop	{r4, r5, r7, pc}
 8001320:	2000041c 	.word	0x2000041c
 8001324:	200003fc 	.word	0x200003fc
 8001328:	08008b78 	.word	0x08008b78
 800132c:	200003e4 	.word	0x200003e4
 8001330:	200003dc 	.word	0x200003dc

08001334 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
	// This is the limit switch callback function.
	// If the limit switch is hit, then the joint should be zeroed.
	if (GPIO_Pin == LIMIT_SWITCH_Pin) {
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2b20      	cmp	r3, #32
 8001342:	d104      	bne.n	800134e <HAL_GPIO_EXTI_Callback+0x1a>
		zero_joint(joint);
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <HAL_GPIO_EXTI_Callback+0x24>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff6a 	bl	8001222 <zero_joint>
	}
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200003dc 	.word	0x200003dc

0800135c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	if (htim == fast_interrupt_timer->timer) {
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	d107      	bne.n	8001380 <HAL_TIM_PeriodElapsedCallback+0x24>
		move_joint_to_target(joint);
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff feee 	bl	8001156 <move_joint_to_target>
		send_message_flag = true;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
	}
	if (htim == slow_interrupt_timer->timer) {
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d127      	bne.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x80>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2102      	movs	r1, #2
 8001390:	4818      	ldr	r0, [pc, #96]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001392:	f002 fac9 	bl	8003928 <HAL_GPIO_WritePin>
		update_adc_sensor_values(adc_sensor);
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe3d 	bl	800101a <update_adc_sensor_values>
		refresh_skater_status(skater);
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fbd1 	bl	8001b4c <refresh_skater_status>
		refresh_joint_angle(joint);
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff00 	bl	80011b4 <refresh_joint_angle>
		if (is_skater_gone(skater)) {
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fbb5 	bl	8001b28 <is_skater_gone>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x76>
			set_joint_target(joint, AUTOMATIC_BRAKING_ANGLE_DEGREES);
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001400 <HAL_TIM_PeriodElapsedCallback+0xa4>
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff19 	bl	8001204 <set_joint_target>
		}
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2102      	movs	r1, #2
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013d8:	f002 faa6 	bl	8003928 <HAL_GPIO_WritePin>
	}
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200003f8 	.word	0x200003f8
 80013e8:	200003dc 	.word	0x200003dc
 80013ec:	2000043a 	.word	0x2000043a
 80013f0:	200003f4 	.word	0x200003f4
 80013f4:	40020400 	.word	0x40020400
 80013f8:	200003cc 	.word	0x200003cc
 80013fc:	200003e4 	.word	0x200003e4
 8001400:	42b40000 	.word	0x42b40000

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	adc_sensor = new_adc_sensor(&hadc1, 2);
 800140a:	2102      	movs	r1, #2
 800140c:	4847      	ldr	r0, [pc, #284]	; (800152c <main+0x128>)
 800140e:	f7ff fdcd 	bl	8000fac <new_adc_sensor>
 8001412:	4603      	mov	r3, r0
 8001414:	4a46      	ldr	r2, [pc, #280]	; (8001530 <main+0x12c>)
 8001416:	6013      	str	r3, [r2, #0]
	imu = new_imu_sensor(&hi2c2);
 8001418:	4846      	ldr	r0, [pc, #280]	; (8001534 <main+0x130>)
 800141a:	f7ff fe4a 	bl	80010b2 <new_imu_sensor>
 800141e:	4603      	mov	r3, r0
 8001420:	4a45      	ldr	r2, [pc, #276]	; (8001538 <main+0x134>)
 8001422:	6013      	str	r3, [r2, #0]
	motor_direction_pin = new_pin_data(DRV8825_DIR_GPIO_Port, DRV8825_DIR_Pin);
 8001424:	2110      	movs	r1, #16
 8001426:	4845      	ldr	r0, [pc, #276]	; (800153c <main+0x138>)
 8001428:	f000 fb16 	bl	8001a58 <new_pin_data>
 800142c:	4603      	mov	r3, r0
 800142e:	4a44      	ldr	r2, [pc, #272]	; (8001540 <main+0x13c>)
 8001430:	6013      	str	r3, [r2, #0]
	motor_step_pin = new_pin_data(DRV8825_STP_GPIO_Port, DRV8825_STP_Pin);
 8001432:	2120      	movs	r1, #32
 8001434:	4841      	ldr	r0, [pc, #260]	; (800153c <main+0x138>)
 8001436:	f000 fb0f 	bl	8001a58 <new_pin_data>
 800143a:	4603      	mov	r3, r0
 800143c:	4a41      	ldr	r2, [pc, #260]	; (8001544 <main+0x140>)
 800143e:	6013      	str	r3, [r2, #0]
	motor = new_motor(motor_direction_pin, motor_step_pin);
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <main+0x13c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a3f      	ldr	r2, [pc, #252]	; (8001544 <main+0x140>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fa95 	bl	800197a <new_motor>
 8001450:	4603      	mov	r3, r0
 8001452:	4a3d      	ldr	r2, [pc, #244]	; (8001548 <main+0x144>)
 8001454:	6013      	str	r3, [r2, #0]
	slow_interrupt_timer = new_interrupt_timer(&htim10);
 8001456:	483d      	ldr	r0, [pc, #244]	; (800154c <main+0x148>)
 8001458:	f7ff fe3c 	bl	80010d4 <new_interrupt_timer>
 800145c:	4603      	mov	r3, r0
 800145e:	4a3c      	ldr	r2, [pc, #240]	; (8001550 <main+0x14c>)
 8001460:	6013      	str	r3, [r2, #0]
	fast_interrupt_timer = new_interrupt_timer(&htim11);
 8001462:	483c      	ldr	r0, [pc, #240]	; (8001554 <main+0x150>)
 8001464:	f7ff fe36 	bl	80010d4 <new_interrupt_timer>
 8001468:	4603      	mov	r3, r0
 800146a:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <main+0x154>)
 800146c:	6013      	str	r3, [r2, #0]
	potentiometer = new_potentiometer(adc_sensor, 1);
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <main+0x12c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2101      	movs	r1, #1
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fb1c 	bl	8001ab2 <new_potentiometer>
 800147a:	4603      	mov	r3, r0
 800147c:	4a37      	ldr	r2, [pc, #220]	; (800155c <main+0x158>)
 800147e:	6013      	str	r3, [r2, #0]
	joint = new_joint(motor, potentiometer);
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <main+0x144>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a35      	ldr	r2, [pc, #212]	; (800155c <main+0x158>)
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fe40 	bl	8001110 <new_joint>
 8001490:	4603      	mov	r3, r0
 8001492:	4a33      	ldr	r2, [pc, #204]	; (8001560 <main+0x15c>)
 8001494:	6013      	str	r3, [r2, #0]
	force_sensor = new_force_sensor(adc_sensor, 0);
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <main+0x12c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fdda 	bl	8001056 <new_force_sensor>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <main+0x160>)
 80014a6:	6013      	str	r3, [r2, #0]
	skater = new_skater(force_sensor);
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <main+0x160>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fb27 	bl	8001b00 <new_skater>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a2c      	ldr	r2, [pc, #176]	; (8001568 <main+0x164>)
 80014b6:	6013      	str	r3, [r2, #0]
	wireless = new_wireless(&huart1);
 80014b8:	482c      	ldr	r0, [pc, #176]	; (800156c <main+0x168>)
 80014ba:	f000 fe37 	bl	800212c <new_wireless>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <main+0x16c>)
 80014c2:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c4:	f000 fea2 	bl	800220c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c8:	f000 f858 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014cc:	f000 f9d4 	bl	8001878 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d0:	f000 f9b2 	bl	8001838 <MX_DMA_Init>
  MX_ADC1_Init();
 80014d4:	f000 f8b0 	bl	8001638 <MX_ADC1_Init>
  MX_TIM10_Init();
 80014d8:	f000 f93c 	bl	8001754 <MX_TIM10_Init>
  MX_TIM11_Init();
 80014dc:	f000 f95e 	bl	800179c <MX_TIM11_Init>
  MX_USART1_UART_Init();
 80014e0:	f000 f980 	bl	80017e4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80014e4:	f000 f908 	bl	80016f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  start_interrupt_timer(fast_interrupt_timer);
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <main+0x154>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fe02 	bl	80010f6 <start_interrupt_timer>
  start_interrupt_timer(slow_interrupt_timer);
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <main+0x14c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fdfd 	bl	80010f6 <start_interrupt_timer>
  HAL_UART_Receive_IT(&huart1, uart_buffer, 30);
 80014fc:	221e      	movs	r2, #30
 80014fe:	491d      	ldr	r1, [pc, #116]	; (8001574 <main+0x170>)
 8001500:	481a      	ldr	r0, [pc, #104]	; (800156c <main+0x168>)
 8001502:	f003 fae7 	bl	8004ad4 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (send_message_flag) {
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <main+0x174>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0fb      	beq.n	8001506 <main+0x102>
		  float current_speed = 0.0f; // TODO - get actual speed
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
		  send_wireless_speed(wireless, current_speed);
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <main+0x16c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	ed97 0a01 	vldr	s0, [r7, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fe17 	bl	8002150 <send_wireless_speed>
		  send_message_flag = false;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <main+0x174>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
	  if (send_message_flag) {
 8001528:	e7ed      	b.n	8001506 <main+0x102>
 800152a:	bf00      	nop
 800152c:	200001fc 	.word	0x200001fc
 8001530:	200003cc 	.word	0x200003cc
 8001534:	200002a4 	.word	0x200002a4
 8001538:	200003d0 	.word	0x200003d0
 800153c:	40020800 	.word	0x40020800
 8001540:	200003ec 	.word	0x200003ec
 8001544:	200003f0 	.word	0x200003f0
 8001548:	200003d4 	.word	0x200003d4
 800154c:	200002f8 	.word	0x200002f8
 8001550:	200003f4 	.word	0x200003f4
 8001554:	20000340 	.word	0x20000340
 8001558:	200003f8 	.word	0x200003f8
 800155c:	200003d8 	.word	0x200003d8
 8001560:	200003dc 	.word	0x200003dc
 8001564:	200003e0 	.word	0x200003e0
 8001568:	200003e4 	.word	0x200003e4
 800156c:	20000388 	.word	0x20000388
 8001570:	200003e8 	.word	0x200003e8
 8001574:	200003fc 	.word	0x200003fc
 8001578:	2000043a 	.word	0x2000043a

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b094      	sub	sp, #80	; 0x50
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	2230      	movs	r2, #48	; 0x30
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fa02 	bl	8005994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <SystemClock_Config+0xb4>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <SystemClock_Config+0xb4>)
 80015aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ae:	6413      	str	r3, [r2, #64]	; 0x40
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <SystemClock_Config+0xb4>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <SystemClock_Config+0xb8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <SystemClock_Config+0xb8>)
 80015c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <SystemClock_Config+0xb8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015dc:	2301      	movs	r3, #1
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e0:	2310      	movs	r3, #16
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 fb11 	bl	8003c14 <HAL_RCC_OscConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015f8:	f000 f9ba 	bl	8001970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fc:	230f      	movs	r3, #15
 80015fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fd74 	bl	8004104 <HAL_RCC_ClockConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001622:	f000 f9a5 	bl	8001970 <Error_Handler>
  }
}
 8001626:	bf00      	nop
 8001628:	3750      	adds	r7, #80	; 0x50
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40007000 	.word	0x40007000

08001638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <MX_ADC1_Init+0xb4>)
 800164c:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <MX_ADC1_Init+0xb8>)
 800164e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <MX_ADC1_Init+0xb4>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <MX_ADC1_Init+0xb4>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <MX_ADC1_Init+0xb4>)
 800165e:	2201      	movs	r2, #1
 8001660:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <MX_ADC1_Init+0xb4>)
 8001664:	2200      	movs	r2, #0
 8001666:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <MX_ADC1_Init+0xb4>)
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <MX_ADC1_Init+0xb4>)
 8001672:	2201      	movs	r2, #1
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_ADC1_Init+0xb4>)
 8001678:	2200      	movs	r2, #0
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_ADC1_Init+0xb4>)
 800167e:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <MX_ADC1_Init+0xbc>)
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_ADC1_Init+0xb4>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_ADC1_Init+0xb4>)
 800168a:	2202      	movs	r2, #2
 800168c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_ADC1_Init+0xb4>)
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_ADC1_Init+0xb4>)
 8001698:	2201      	movs	r2, #1
 800169a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <MX_ADC1_Init+0xb4>)
 800169e:	f000 fe4b 	bl	8002338 <HAL_ADC_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80016a8:	f000 f962 	bl	8001970 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_ADC1_Init+0xb4>)
 80016be:	f000 ff8d 	bl	80025dc <HAL_ADC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80016c8:	f000 f952 	bl	8001970 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_ADC1_Init+0xb4>)
 80016d6:	f000 ff81 	bl	80025dc <HAL_ADC_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016e0:	f000 f946 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200001fc 	.word	0x200001fc
 80016f0:	40012000 	.word	0x40012000
 80016f4:	0f000001 	.word	0x0f000001

080016f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_I2C2_Init+0x50>)
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <MX_I2C2_Init+0x54>)
 8001700:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_I2C2_Init+0x50>)
 8001704:	4a12      	ldr	r2, [pc, #72]	; (8001750 <MX_I2C2_Init+0x58>)
 8001706:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_I2C2_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_I2C2_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_I2C2_Init+0x50>)
 8001716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MX_I2C2_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_I2C2_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <MX_I2C2_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_I2C2_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_I2C2_Init+0x50>)
 8001736:	f002 f929 	bl	800398c <HAL_I2C_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001740:	f000 f916 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200002a4 	.word	0x200002a4
 800174c:	40005800 	.word	0x40005800
 8001750:	000186a0 	.word	0x000186a0

08001754 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_TIM10_Init+0x40>)
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <MX_TIM10_Init+0x44>)
 800175c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <MX_TIM10_Init+0x40>)
 8001760:	220f      	movs	r2, #15
 8001762:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_TIM10_Init+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = SLOW_PERIOD;
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <MX_TIM10_Init+0x40>)
 800176c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001770:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_TIM10_Init+0x40>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_TIM10_Init+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_TIM10_Init+0x40>)
 8001780:	f002 fea0 	bl	80044c4 <HAL_TIM_Base_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800178a:	f000 f8f1 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200002f8 	.word	0x200002f8
 8001798:	40014400 	.word	0x40014400

0800179c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_TIM11_Init+0x40>)
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <MX_TIM11_Init+0x44>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 15;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <MX_TIM11_Init+0x40>)
 80017a8:	220f      	movs	r2, #15
 80017aa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_TIM11_Init+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = FAST_PERIOD;
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <MX_TIM11_Init+0x40>)
 80017b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017b8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_TIM11_Init+0x40>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_TIM11_Init+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_TIM11_Init+0x40>)
 80017c8:	f002 fe7c 	bl	80044c4 <HAL_TIM_Base_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80017d2:	f000 f8cd 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000340 	.word	0x20000340
 80017e0:	40014800 	.word	0x40014800

080017e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_USART1_UART_Init+0x50>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART1_UART_Init+0x4c>)
 800181c:	f003 f8c8 	bl	80049b0 <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001826:	f000 f8a3 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000388 	.word	0x20000388
 8001834:	40011000 	.word	0x40011000

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_DMA_Init+0x3c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <MX_DMA_Init+0x3c>)
 8001848:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_DMA_Init+0x3c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	2038      	movs	r0, #56	; 0x38
 8001860:	f001 fa89 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001864:	2038      	movs	r0, #56	; 0x38
 8001866:	f001 faa2 	bl	8002dae <HAL_NVIC_EnableIRQ>

}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b33      	ldr	r3, [pc, #204]	; (8001960 <MX_GPIO_Init+0xe8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a32      	ldr	r2, [pc, #200]	; (8001960 <MX_GPIO_Init+0xe8>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <MX_GPIO_Init+0xe8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <MX_GPIO_Init+0xe8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <MX_GPIO_Init+0xe8>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <MX_GPIO_Init+0xe8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <MX_GPIO_Init+0xe8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a24      	ldr	r2, [pc, #144]	; (8001960 <MX_GPIO_Init+0xe8>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <MX_GPIO_Init+0xe8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV8825_DIR_Pin|DRV8825_STP_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2130      	movs	r1, #48	; 0x30
 80018e6:	481f      	ldr	r0, [pc, #124]	; (8001964 <MX_GPIO_Init+0xec>)
 80018e8:	f002 f81e 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2102      	movs	r1, #2
 80018f0:	481d      	ldr	r0, [pc, #116]	; (8001968 <MX_GPIO_Init+0xf0>)
 80018f2:	f002 f819 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LIMIT_SWITCH_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_Pin;
 80018f6:	2320      	movs	r3, #32
 80018f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LIMIT_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4619      	mov	r1, r3
 800190a:	4818      	ldr	r0, [pc, #96]	; (800196c <MX_GPIO_Init+0xf4>)
 800190c:	f001 fe88 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV8825_DIR_Pin DRV8825_STP_Pin */
  GPIO_InitStruct.Pin = DRV8825_DIR_Pin|DRV8825_STP_Pin;
 8001910:	2330      	movs	r3, #48	; 0x30
 8001912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	480f      	ldr	r0, [pc, #60]	; (8001964 <MX_GPIO_Init+0xec>)
 8001928:	f001 fe7a 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 800192c:	2302      	movs	r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	4619      	mov	r1, r3
 8001942:	4809      	ldr	r0, [pc, #36]	; (8001968 <MX_GPIO_Init+0xf0>)
 8001944:	f001 fe6c 	bl	8003620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2017      	movs	r0, #23
 800194e:	f001 fa12 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001952:	2017      	movs	r0, #23
 8001954:	f001 fa2b 	bl	8002dae <HAL_NVIC_EnableIRQ>

}
 8001958:	bf00      	nop
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	40020800 	.word	0x40020800
 8001968:	40020400 	.word	0x40020400
 800196c:	40020000 	.word	0x40020000

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001978:	e7fe      	b.n	8001978 <Error_Handler+0x8>

0800197a <new_motor>:
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Motor object
Motor *new_motor(
	PinData *_dir_pin,
	PinData *_stp_pin
) {
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
    Motor *motor = (Motor*) malloc(sizeof(Motor));
 8001984:	2008      	movs	r0, #8
 8001986:	f003 fffd 	bl	8005984 <malloc>
 800198a:	4603      	mov	r3, r0
 800198c:	60fb      	str	r3, [r7, #12]
    motor->dir_pin = _dir_pin;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	601a      	str	r2, [r3, #0]
    motor->stp_pin = _stp_pin;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	605a      	str	r2, [r3, #4]
	return motor;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <change_motor_angle>:

// REQUIRES: motor is a Motor object
// and shifted_degrees is the amount to turn
// MODIFIES: nothing
// EFFECTS: Moves the motor a certain angle away in degrees
void change_motor_angle(Motor *motor, float angle) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	ed87 0a00 	vstr	s0, [r7]
    set_pin_value(motor->dir_pin, angle >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	edd7 7a00 	vldr	s15, [r7]
 80019b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	bfac      	ite	ge
 80019c2:	2201      	movge	r2, #1
 80019c4:	2200      	movlt	r2, #0
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f85a 	bl	8001a84 <set_pin_value>
    angle = angle > 0 ? angle : -angle;
 80019d0:	edd7 7a00 	vldr	s15, [r7]
 80019d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	dd02      	ble.n	80019e4 <change_motor_angle+0x40>
 80019de:	edd7 7a00 	vldr	s15, [r7]
 80019e2:	e003      	b.n	80019ec <change_motor_angle+0x48>
 80019e4:	edd7 7a00 	vldr	s15, [r7]
 80019e8:	eef1 7a67 	vneg.f32	s15, s15
 80019ec:	edc7 7a00 	vstr	s15, [r7]
    for (int i = 0; i < angle / MOTOR_DEGREES_PER_STEP; ++i) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	e018      	b.n	8001a28 <change_motor_angle+0x84>
    	set_pin_value(motor->stp_pin, GPIO_PIN_SET);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2101      	movs	r1, #1
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f841 	bl	8001a84 <set_pin_value>
		for (int j = 0; j < 1000; ++j);
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	e002      	b.n	8001a0e <change_motor_angle+0x6a>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a14:	dbf8      	blt.n	8001a08 <change_motor_angle+0x64>
		set_pin_value(motor->stp_pin, GPIO_PIN_RESET);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f831 	bl	8001a84 <set_pin_value>
    for (int i = 0; i < angle / MOTOR_DEGREES_PER_STEP; ++i) {
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a32:	edd7 6a00 	vldr	s13, [r7]
 8001a36:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8001a54 <change_motor_angle+0xb0>
 8001a3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	d4d6      	bmi.n	80019f6 <change_motor_angle+0x52>
    }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	3fe66666 	.word	0x3fe66666

08001a58 <new_pin_data>:

// REQUIRES: _port and _pin corresponds to
// the port and pin.
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created PinData object
PinData *new_pin_data(GPIO_TypeDef *_port, uint16_t _pin) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
    PinData *pin_data = (PinData*) malloc(sizeof(PinData));
 8001a64:	2008      	movs	r0, #8
 8001a66:	f003 ff8d 	bl	8005984 <malloc>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60fb      	str	r3, [r7, #12]
	pin_data->port = _port;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	601a      	str	r2, [r3, #0]
    pin_data->pin = _pin;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	809a      	strh	r2, [r3, #4]
	return pin_data;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <set_pin_value>:

// REQUIRES: pin_data is PinData and value is 0 or 1
// MODIFIES: nothing
// EFFECTS: Sets pin to value
void set_pin_value(PinData *pin_data, uint8_t value) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(pin_data->port, pin_data->pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	8899      	ldrh	r1, [r3, #4]
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf14      	ite	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	2300      	moveq	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	f001 ff3f 	bl	8003928 <HAL_GPIO_WritePin>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <new_potentiometer>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _adc_sensor is an ADCSensor object and _rank is the adc rank
// MODIFIES: nothing
// EFFECTS: Returns a pointer to a created Potentiometer object
Potentiometer *new_potentiometer(ADCSensor *_adc_sensor, uint8_t _rank) {
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
    Potentiometer *potentiometer = (Potentiometer*) malloc(sizeof(Potentiometer));
 8001abe:	2008      	movs	r0, #8
 8001ac0:	f003 ff60 	bl	8005984 <malloc>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60fb      	str	r3, [r7, #12]
    potentiometer->adc_sensor = _adc_sensor;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	601a      	str	r2, [r3, #0]
    potentiometer->rank = _rank;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	711a      	strb	r2, [r3, #4]
    return potentiometer;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <get_potentiometer_input>:

// REQUIRES: potentiometer is a Potentiometer object
// MODIFIES: nothing
// EFFECTS: Returns the currently stored value of trigger.
// Expect an integer between 0 and 4096.
uint32_t get_potentiometer_input(Potentiometer *potentiometer) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
    return get_adc_sensor_value(potentiometer->adc_sensor, potentiometer->rank);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	791b      	ldrb	r3, [r3, #4]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f7ff fa81 	bl	8000ff8 <get_adc_sensor_value>
 8001af6:	4603      	mov	r3, r0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <new_skater>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: _force_sensor is a ForceSensor object
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Skater object
Skater *new_skater(ForceSensor *_force_sensor) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	Skater *skater = (Skater*) malloc(sizeof(Skater));
 8001b08:	2008      	movs	r0, #8
 8001b0a:	f003 ff3b 	bl	8005984 <malloc>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	60fb      	str	r3, [r7, #12]
	skater->force_sensor = _force_sensor;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	601a      	str	r2, [r3, #0]
	skater->ms_since_skater_detected = 0;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
	return skater;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <is_skater_gone>:

// REQUIRES: skater is a Skater object
// MODIFIES: nothing
// EFFECTS: Returns whether skater is gone or not
bool is_skater_gone(Skater *skater) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	return skater->ms_since_skater_detected > TIME_INDICATING_SKATER_ABSENCE_MS;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b38:	bf8c      	ite	hi
 8001b3a:	2301      	movhi	r3, #1
 8001b3c:	2300      	movls	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <refresh_skater_status>:

// REQUIRES: skater is a Skater object
// MODIFIES: ms_since_skater_detected
// EFFECTS: Updates the value of ms_since_skater_detected
void refresh_skater_status(Skater *skater) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	float measured_newtons = get_force_sensor_data(skater->force_sensor);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fa92 	bl	8001082 <get_force_sensor_data>
 8001b5e:	ed87 0a03 	vstr	s0, [r7, #12]
	bool is_skater_detected = measured_newtons > FORCE_INDICATING_SKATER_PRESENCE_NEWTONS;
 8001b62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b66:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001ba8 <refresh_skater_status+0x5c>
 8001b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	bfcc      	ite	gt
 8001b74:	2301      	movgt	r3, #1
 8001b76:	2300      	movle	r3, #0
 8001b78:	72fb      	strb	r3, [r7, #11]

	// If skater is detected, reset value to 0.
	// If skater is not detected, then keep incrementing ms_since_skater_detected
	// until it surpasses the expected maximum.
	skater->ms_since_skater_detected = is_skater_detected ?
			0 : skater->ms_since_skater_detected > TIME_INDICATING_SKATER_ABSENCE_MS ?
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <refresh_skater_status+0x38>
 8001b80:	2300      	movs	r3, #0
 8001b82:	e00a      	b.n	8001b9a <refresh_skater_status+0x4e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
					skater->ms_since_skater_detected : skater->ms_since_skater_detected + 200;
 8001b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b8c:	d902      	bls.n	8001b94 <refresh_skater_status+0x48>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	e002      	b.n	8001b9a <refresh_skater_status+0x4e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	33c8      	adds	r3, #200	; 0xc8
	skater->ms_since_skater_detected = is_skater_detected ?
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6053      	str	r3, [r2, #4]
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	43480000 	.word	0x43480000

08001bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_MspInit+0x4c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <HAL_MspInit+0x4c>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_MspInit+0x4c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_MspInit+0x4c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <HAL_MspInit+0x4c>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_MspInit+0x4c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2f      	ldr	r2, [pc, #188]	; (8001cd8 <HAL_ADC_MspInit+0xdc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d157      	bne.n	8001cce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_ADC_MspInit+0xe0>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a2d      	ldr	r2, [pc, #180]	; (8001cdc <HAL_ADC_MspInit+0xe0>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <HAL_ADC_MspInit+0xe0>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_ADC_MspInit+0xe0>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <HAL_ADC_MspInit+0xe0>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_ADC_MspInit+0xe0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FORCE_SENSOR_Pin|POTENTIOMETER_Pin;
 8001c56:	2305      	movs	r3, #5
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <HAL_ADC_MspInit+0xe4>)
 8001c6a:	f001 fcd9 	bl	8003620 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001c70:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <HAL_ADC_MspInit+0xec>)
 8001c72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001c98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cb2:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001cb4:	f001 f8b2 	bl	8002e1c <HAL_DMA_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001cbe:	f7ff fe57 	bl	8001970 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HAL_ADC_MspInit+0xe8>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	; 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40012000 	.word	0x40012000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	20000244 	.word	0x20000244
 8001ce8:	40026410 	.word	0x40026410

08001cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <HAL_I2C_MspInit+0xa4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d13c      	bne.n	8001d88 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin;
 8001d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d30:	2312      	movs	r3, #18
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	4814      	ldr	r0, [pc, #80]	; (8001d98 <HAL_I2C_MspInit+0xac>)
 8001d48:	f001 fc6a 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d50:	2312      	movs	r3, #18
 8001d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001d5c:	2309      	movs	r3, #9
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	480c      	ldr	r0, [pc, #48]	; (8001d98 <HAL_I2C_MspInit+0xac>)
 8001d68:	f001 fc5a 	bl	8003620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_I2C_MspInit+0xa8>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40005800 	.word	0x40005800
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020400 	.word	0x40020400

08001d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <HAL_TIM_Base_MspInit+0x80>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d116      	bne.n	8001ddc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_TIM_Base_MspInit+0x84>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <HAL_TIM_Base_MspInit+0x84>)
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_TIM_Base_MspInit+0x84>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2019      	movs	r0, #25
 8001dd0:	f000 ffd1 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dd4:	2019      	movs	r0, #25
 8001dd6:	f000 ffea 	bl	8002dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001dda:	e01a      	b.n	8001e12 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_TIM_Base_MspInit+0x88>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d115      	bne.n	8001e12 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_TIM_Base_MspInit+0x84>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_TIM_Base_MspInit+0x84>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_TIM_Base_MspInit+0x84>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	201a      	movs	r0, #26
 8001e08:	f000 ffb5 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e0c:	201a      	movs	r0, #26
 8001e0e:	f000 ffce 	bl	8002dae <HAL_NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40014400 	.word	0x40014400
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40014800 	.word	0x40014800

08001e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <HAL_UART_MspInit+0x94>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d134      	bne.n	8001eb4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e54:	f043 0310 	orr.w	r3, r3, #16
 8001e58:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_UART_MspInit+0x98>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BLUETOOTH_UART_TX_Pin|BLUETOOTH_UART_RX_Pin;
 8001e82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e94:	2307      	movs	r3, #7
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4809      	ldr	r0, [pc, #36]	; (8001ec4 <HAL_UART_MspInit+0x9c>)
 8001ea0:	f001 fbbe 	bl	8003620 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2025      	movs	r0, #37	; 0x25
 8001eaa:	f000 ff64 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eae:	2025      	movs	r0, #37	; 0x25
 8001eb0:	f000 ff7d 	bl	8002dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40011000 	.word	0x40011000
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <NMI_Handler+0x4>

08001ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <HardFault_Handler+0x4>

08001ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <MemManage_Handler+0x4>

08001eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f14:	f000 f9cc 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_Pin);
 8001f20:	2020      	movs	r0, #32
 8001f22:	f001 fd1b 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f32:	f002 fb79 	bl	8004628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200002f8 	.word	0x200002f8

08001f40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f46:	f002 fb6f 	bl	8004628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000340 	.word	0x20000340

08001f54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <USART1_IRQHandler+0x10>)
 8001f5a:	f002 fdeb 	bl	8004b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000388 	.word	0x20000388

08001f68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <DMA2_Stream0_IRQHandler+0x10>)
 8001f6e:	f001 f8ed 	bl	800314c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000244 	.word	0x20000244

08001f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	return 1;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_kill>:

int _kill(int pid, int sig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f96:	f003 fccb 	bl	8005930 <__errno>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2216      	movs	r2, #22
 8001f9e:	601a      	str	r2, [r3, #0]
	return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_exit>:

void _exit (int status)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffe7 	bl	8001f8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fbe:	e7fe      	b.n	8001fbe <_exit+0x12>

08001fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e00a      	b.n	8001fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fd2:	f3af 8000 	nop.w
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	60ba      	str	r2, [r7, #8]
 8001fde:	b2ca      	uxtb	r2, r1
 8001fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbf0      	blt.n	8001fd2 <_read+0x12>
	}

return len;
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e009      	b.n	8002020 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	60ba      	str	r2, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf1      	blt.n	800200c <_write+0x12>
	}
	return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_close>:

int _close(int file)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	return -1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205a:	605a      	str	r2, [r3, #4]
	return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_isatty>:

int _isatty(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
	return 1;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
	return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f003 fc30 	bl	8005930 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20020000 	.word	0x20020000
 80020fc:	00000400 	.word	0x00000400
 8002100:	2000043c 	.word	0x2000043c
 8002104:	20000458 	.word	0x20000458

08002108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <new_wireless>:
/** PUBLIC FUNCTIONS **/

// REQUIRES: huart is a UART channel
// MODIFIES: Nothing
// EFFECTS: Returns a pointer to a created Wireless object
Wireless *new_wireless(UART_HandleTypeDef *huart) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	Wireless *wireless = (Wireless*) malloc(sizeof(Wireless));
 8002134:	2004      	movs	r0, #4
 8002136:	f003 fc25 	bl	8005984 <malloc>
 800213a:	4603      	mov	r3, r0
 800213c:	60fb      	str	r3, [r7, #12]
	wireless->uart = huart;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	601a      	str	r2, [r3, #0]
	return wireless;
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <send_wireless_speed>:

// REQUIRES: wireless is a Wireless object
// and speed is the speed data
// MODIFIES: Nothing
// EFFECTS: Sends speed data over wireless
void send_wireless_speed(Wireless *wireless, float speed) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	ed87 0a00 	vstr	s0, [r7]
	char string[30];
	sprintf((char *)string, "$SPEED_DATA,%f,\n", speed);
 800215c:	6838      	ldr	r0, [r7, #0]
 800215e:	f7fe fa0b 	bl	8000578 <__aeabi_f2d>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	f107 0008 	add.w	r0, r7, #8
 800216a:	4906      	ldr	r1, [pc, #24]	; (8002184 <send_wireless_speed+0x34>)
 800216c:	f003 fd0a 	bl	8005b84 <siprintf>
	send_wireless_string_30(wireless, string);
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	4619      	mov	r1, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f806 	bl	8002188 <send_wireless_string_30>
}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	08008b8c 	.word	0x08008b8c

08002188 <send_wireless_string_30>:

// REQUIRES: wireless is a Wireless object
// and string is an array of 30 characters.
// MODIFIES: Nothing
// EFFECTS: Sends the character array over wireless
void send_wireless_string_30(Wireless *wireless, char string[30]) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
	HAL_Delay(300);
 8002192:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002196:	f000 f8ab 	bl	80022f0 <HAL_Delay>
	HAL_UART_Transmit_IT(wireless->uart, (uint8_t *)string, 30);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	221e      	movs	r2, #30
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fc51 	bl	8004a4a <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80021a8:	2064      	movs	r0, #100	; 0x64
 80021aa:	f000 f8a1 	bl	80022f0 <HAL_Delay>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021bc:	480d      	ldr	r0, [pc, #52]	; (80021f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021be:	490e      	ldr	r1, [pc, #56]	; (80021f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c4:	e002      	b.n	80021cc <LoopCopyDataInit>

080021c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ca:	3304      	adds	r3, #4

080021cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d0:	d3f9      	bcc.n	80021c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d2:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021d4:	4c0b      	ldr	r4, [pc, #44]	; (8002204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d8:	e001      	b.n	80021de <LoopFillZerobss>

080021da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021dc:	3204      	adds	r2, #4

080021de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e0:	d3fb      	bcc.n	80021da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021e2:	f7ff ff91 	bl	8002108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021e6:	f003 fba9 	bl	800593c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ea:	f7ff f90b 	bl	8001404 <main>
  bx  lr    
 80021ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021fc:	08009070 	.word	0x08009070
  ldr r2, =_sbss
 8002200:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002204:	20000454 	.word	0x20000454

08002208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002208:	e7fe      	b.n	8002208 <ADC_IRQHandler>
	...

0800220c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <HAL_Init+0x40>)
 8002216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_Init+0x40>)
 8002222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_Init+0x40>)
 800222e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f000 fd93 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	200f      	movs	r0, #15
 800223c:	f000 f808 	bl	8002250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002240:	f7ff fcb4 	bl	8001bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023c00 	.word	0x40023c00

08002250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x54>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_InitTick+0x58>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fdb9 	bl	8002de6 <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f000 fd73 	bl	8002d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	; (80022ac <HAL_InitTick+0x5c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000008 	.word	0x20000008
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_IncTick+0x20>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_IncTick+0x24>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_IncTick+0x24>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000008 	.word	0x20000008
 80022d4:	20000440 	.word	0x20000440

080022d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_GetTick+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000440 	.word	0x20000440

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff ffee 	bl	80022d8 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002316:	bf00      	nop
 8002318:	f7ff ffde 	bl	80022d8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000008 	.word	0x20000008

08002338 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e033      	b.n	80023b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fc50 	bl	8001bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	d118      	bne.n	80023a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800237e:	f023 0302 	bic.w	r3, r3, #2
 8002382:	f043 0202 	orr.w	r2, r3, #2
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa58 	bl	8002840 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
 80023a6:	e001      	b.n	80023ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Start_DMA+0x1e>
 80023da:	2302      	movs	r3, #2
 80023dc:	e0ce      	b.n	800257c <HAL_ADC_Start_DMA+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d018      	beq.n	8002426 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002404:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <HAL_ADC_Start_DMA+0x1c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a5f      	ldr	r2, [pc, #380]	; (8002588 <HAL_ADC_Start_DMA+0x1c8>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0c9a      	lsrs	r2, r3, #18
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002418:	e002      	b.n	8002420 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	3b01      	subs	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f9      	bne.n	800241a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002434:	d107      	bne.n	8002446 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002444:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 8086 	bne.w	8002562 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002480:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002494:	d106      	bne.n	80024a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f023 0206 	bic.w	r2, r3, #6
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
 80024a2:	e002      	b.n	80024aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_ADC_Start_DMA+0x1cc>)
 80024b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	4a35      	ldr	r2, [pc, #212]	; (8002590 <HAL_ADC_Start_DMA+0x1d0>)
 80024bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	4a34      	ldr	r2, [pc, #208]	; (8002594 <HAL_ADC_Start_DMA+0x1d4>)
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	4a33      	ldr	r2, [pc, #204]	; (8002598 <HAL_ADC_Start_DMA+0x1d8>)
 80024cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	334c      	adds	r3, #76	; 0x4c
 8002502:	4619      	mov	r1, r3
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f000 fd36 	bl	8002f78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10f      	bne.n	8002538 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d129      	bne.n	800257a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	e020      	b.n	800257a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_ADC_Start_DMA+0x1dc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d11b      	bne.n	800257a <HAL_ADC_Start_DMA+0x1ba>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d114      	bne.n	800257a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	e00b      	b.n	800257a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f043 0210 	orr.w	r2, r3, #16
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000000 	.word	0x20000000
 8002588:	431bde83 	.word	0x431bde83
 800258c:	40012300 	.word	0x40012300
 8002590:	08002a39 	.word	0x08002a39
 8002594:	08002af3 	.word	0x08002af3
 8002598:	08002b0f 	.word	0x08002b0f
 800259c:	40012000 	.word	0x40012000

080025a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1c>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e113      	b.n	8002820 <HAL_ADC_ConfigChannel+0x244>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b09      	cmp	r3, #9
 8002606:	d925      	bls.n	8002654 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68d9      	ldr	r1, [r3, #12]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	3b1e      	subs	r3, #30
 800261e:	2207      	movs	r2, #7
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43da      	mvns	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	400a      	ands	r2, r1
 800262c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68d9      	ldr	r1, [r3, #12]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	4603      	mov	r3, r0
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4403      	add	r3, r0
 8002646:	3b1e      	subs	r3, #30
 8002648:	409a      	lsls	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	e022      	b.n	800269a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6919      	ldr	r1, [r3, #16]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	2207      	movs	r2, #7
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	400a      	ands	r2, r1
 8002676:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	4603      	mov	r3, r0
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4403      	add	r3, r0
 8002690:	409a      	lsls	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d824      	bhi.n	80026ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b05      	subs	r3, #5
 80026b4:	221f      	movs	r2, #31
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	400a      	ands	r2, r1
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	3b05      	subs	r3, #5
 80026de:	fa00 f203 	lsl.w	r2, r0, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ea:	e04c      	b.n	8002786 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d824      	bhi.n	800273e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	3b23      	subs	r3, #35	; 0x23
 8002706:	221f      	movs	r2, #31
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43da      	mvns	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	400a      	ands	r2, r1
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	3b23      	subs	r3, #35	; 0x23
 8002730:	fa00 f203 	lsl.w	r2, r0, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
 800273c:	e023      	b.n	8002786 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b41      	subs	r3, #65	; 0x41
 8002750:	221f      	movs	r2, #31
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	400a      	ands	r2, r1
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3b41      	subs	r3, #65	; 0x41
 800277a:	fa00 f203 	lsl.w	r2, r0, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <HAL_ADC_ConfigChannel+0x250>)
 8002788:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a28      	ldr	r2, [pc, #160]	; (8002830 <HAL_ADC_ConfigChannel+0x254>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d10f      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1d8>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b12      	cmp	r3, #18
 800279a:	d10b      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_ADC_ConfigChannel+0x254>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d12b      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x23a>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_ADC_ConfigChannel+0x258>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <HAL_ADC_ConfigChannel+0x1f4>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b11      	cmp	r3, #17
 80027ce:	d122      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a11      	ldr	r2, [pc, #68]	; (8002834 <HAL_ADC_ConfigChannel+0x258>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d111      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_ADC_ConfigChannel+0x25c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_ADC_ConfigChannel+0x260>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	0c9a      	lsrs	r2, r3, #18
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002808:	e002      	b.n	8002810 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40012300 	.word	0x40012300
 8002830:	40012000 	.word	0x40012000
 8002834:	10000012 	.word	0x10000012
 8002838:	20000000 	.word	0x20000000
 800283c:	431bde83 	.word	0x431bde83

08002840 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002848:	4b79      	ldr	r3, [pc, #484]	; (8002a30 <ADC_Init+0x1f0>)
 800284a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	431a      	orrs	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002874:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	021a      	lsls	r2, r3, #8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002898:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <ADC_Init+0x1f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d022      	beq.n	800291e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002908:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6899      	ldr	r1, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	e00f      	b.n	800293e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800292c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800293c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0202 	bic.w	r2, r2, #2
 800294c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7e1b      	ldrb	r3, [r3, #24]
 8002958:	005a      	lsls	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800298a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	3b01      	subs	r3, #1
 8002998:	035a      	lsls	r2, r3, #13
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	e007      	b.n	80029b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	051a      	lsls	r2, r3, #20
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029f6:	025a      	lsls	r2, r3, #9
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	029a      	lsls	r2, r3, #10
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40012300 	.word	0x40012300
 8002a34:	0f000001 	.word	0x0f000001

08002a38 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d13c      	bne.n	8002acc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d12b      	bne.n	8002ac4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d127      	bne.n	8002ac4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d119      	bne.n	8002ac4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0220 	bic.w	r2, r2, #32
 8002a9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7ff fd6b 	bl	80025a0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002aca:	e00e      	b.n	8002aea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff fd75 	bl	80025c8 <HAL_ADC_ErrorCallback>
}
 8002ade:	e004      	b.n	8002aea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fd57 	bl	80025b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2240      	movs	r2, #64	; 0x40
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f043 0204 	orr.w	r2, r3, #4
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff fd4a 	bl	80025c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <__NVIC_GetPriorityGrouping+0x18>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	f003 0307 	and.w	r3, r3, #7
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	db0b      	blt.n	8002bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <__NVIC_EnableIRQ+0x38>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000e100 	.word	0xe000e100

08002bdc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db12      	blt.n	8002c14 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	490a      	ldr	r1, [pc, #40]	; (8002c20 <__NVIC_DisableIRQ+0x44>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	3320      	adds	r3, #32
 8002c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c08:	f3bf 8f4f 	dsb	sy
}
 8002c0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c0e:	f3bf 8f6f 	isb	sy
}
 8002c12:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db0c      	blt.n	8002c50 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4907      	ldr	r1, [pc, #28]	; (8002c5c <__NVIC_ClearPendingIRQ+0x38>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2001      	movs	r0, #1
 8002c46:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4a:	3360      	adds	r3, #96	; 0x60
 8002c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d2c:	d301      	bcc.n	8002d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00f      	b.n	8002d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <SysTick_Config+0x40>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f7ff ff8e 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <SysTick_Config+0x40>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <SysTick_Config+0x40>)
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff fee7 	bl	8002b3c <__NVIC_SetPriorityGrouping>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d88:	f7ff fefc 	bl	8002b84 <__NVIC_GetPriorityGrouping>
 8002d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff8e 	bl	8002cb4 <NVIC_EncodePriority>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff5d 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff feef 	bl	8002ba0 <__NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff feff 	bl	8002bdc <__NVIC_DisableIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ff94 	bl	8002d1c <SysTick_Config>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff09 	bl	8002c24 <__NVIC_ClearPendingIRQ>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff fa56 	bl	80022d8 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e099      	b.n	8002f6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e58:	e00f      	b.n	8002e7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5a:	f7ff fa3d 	bl	80022d8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d908      	bls.n	8002e7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e078      	b.n	8002f6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e8      	bne.n	8002e5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_DMA_Init+0x158>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d107      	bne.n	8002ee4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	4313      	orrs	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f023 0307 	bic.w	r3, r3, #7
 8002efa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d117      	bne.n	8002f3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00e      	beq.n	8002f3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fb01 	bl	8003528 <DMA_CheckFifoParam>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e016      	b.n	8002f6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fab8 	bl	80034bc <DMA_CalcBaseAndBitshift>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	223f      	movs	r2, #63	; 0x3f
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	f010803f 	.word	0xf010803f

08002f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_DMA_Start_IT+0x26>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e040      	b.n	8003020 <HAL_DMA_Start_IT+0xa8>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d12f      	bne.n	8003012 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fa4a 	bl	8003460 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	223f      	movs	r2, #63	; 0x3f
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0216 	orr.w	r2, r2, #22
 8002fe6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0208 	orr.w	r2, r2, #8
 8002ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e005      	b.n	800301e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800301a:	2302      	movs	r3, #2
 800301c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003036:	f7ff f94f 	bl	80022d8 <HAL_GetTick>
 800303a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d008      	beq.n	800305a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2280      	movs	r2, #128	; 0x80
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e052      	b.n	8003100 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0216 	bic.w	r2, r2, #22
 8003068:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003078:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_DMA_Abort+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0208 	bic.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030aa:	e013      	b.n	80030d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ac:	f7ff f914 	bl	80022d8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d90c      	bls.n	80030d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2203      	movs	r2, #3
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e015      	b.n	8003100 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e4      	bne.n	80030ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	223f      	movs	r2, #63	; 0x3f
 80030e8:	409a      	lsls	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d004      	beq.n	8003126 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e00c      	b.n	8003140 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2205      	movs	r2, #5
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003158:	4b8e      	ldr	r3, [pc, #568]	; (8003394 <HAL_DMA_IRQHandler+0x248>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a8e      	ldr	r2, [pc, #568]	; (8003398 <HAL_DMA_IRQHandler+0x24c>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	2208      	movs	r2, #8
 8003178:	409a      	lsls	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01a      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0204 	bic.w	r2, r2, #4
 800319e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	2208      	movs	r2, #8
 80031a6:	409a      	lsls	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	2201      	movs	r2, #1
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d012      	beq.n	80031ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	2201      	movs	r2, #1
 80031dc:	409a      	lsls	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	f043 0202 	orr.w	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	2204      	movs	r2, #4
 80031f4:	409a      	lsls	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d012      	beq.n	8003224 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	2204      	movs	r2, #4
 8003212:	409a      	lsls	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f043 0204 	orr.w	r2, r3, #4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	2210      	movs	r2, #16
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d043      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d03c      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	2210      	movs	r2, #16
 8003248:	409a      	lsls	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d018      	beq.n	800328e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d108      	bne.n	800327c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d024      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
 800327a:	e01f      	b.n	80032bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01b      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
 800328c:	e016      	b.n	80032bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0208 	bic.w	r2, r2, #8
 80032aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	2220      	movs	r2, #32
 80032c2:	409a      	lsls	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 808f 	beq.w	80033ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8087 	beq.w	80033ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	2220      	movs	r2, #32
 80032e4:	409a      	lsls	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d136      	bne.n	8003364 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0216 	bic.w	r2, r2, #22
 8003304:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003314:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d103      	bne.n	8003326 <HAL_DMA_IRQHandler+0x1da>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0208 	bic.w	r2, r2, #8
 8003334:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	223f      	movs	r2, #63	; 0x3f
 800333c:	409a      	lsls	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003356:	2b00      	cmp	r3, #0
 8003358:	d07e      	beq.n	8003458 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
        }
        return;
 8003362:	e079      	b.n	8003458 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01d      	beq.n	80033ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10d      	bne.n	800339c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	2b00      	cmp	r3, #0
 8003386:	d031      	beq.n	80033ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
 8003390:	e02c      	b.n	80033ec <HAL_DMA_IRQHandler+0x2a0>
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000
 8003398:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d023      	beq.n	80033ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
 80033ac:	e01e      	b.n	80033ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10f      	bne.n	80033dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0210 	bic.w	r2, r2, #16
 80033ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d032      	beq.n	800345a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d022      	beq.n	8003446 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2205      	movs	r2, #5
 8003404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3301      	adds	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	429a      	cmp	r2, r3
 8003422:	d307      	bcc.n	8003434 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f2      	bne.n	8003418 <HAL_DMA_IRQHandler+0x2cc>
 8003432:	e000      	b.n	8003436 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003434:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
 8003456:	e000      	b.n	800345a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003458:	bf00      	nop
    }
  }
}
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800347c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b40      	cmp	r3, #64	; 0x40
 800348c:	d108      	bne.n	80034a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800349e:	e007      	b.n	80034b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	3b10      	subs	r3, #16
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <DMA_CalcBaseAndBitshift+0x64>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034d6:	4a13      	ldr	r2, [pc, #76]	; (8003524 <DMA_CalcBaseAndBitshift+0x68>)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d909      	bls.n	80034fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	1d1a      	adds	r2, r3, #4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	659a      	str	r2, [r3, #88]	; 0x58
 80034fc:	e007      	b.n	800350e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	aaaaaaab 	.word	0xaaaaaaab
 8003524:	08008bd0 	.word	0x08008bd0

08003528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11f      	bne.n	8003582 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d856      	bhi.n	80035f6 <DMA_CheckFifoParam+0xce>
 8003548:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <DMA_CheckFifoParam+0x28>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003561 	.word	0x08003561
 8003554:	08003573 	.word	0x08003573
 8003558:	08003561 	.word	0x08003561
 800355c:	080035f7 	.word	0x080035f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d046      	beq.n	80035fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003570:	e043      	b.n	80035fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800357a:	d140      	bne.n	80035fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003580:	e03d      	b.n	80035fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358a:	d121      	bne.n	80035d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d837      	bhi.n	8003602 <DMA_CheckFifoParam+0xda>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <DMA_CheckFifoParam+0x70>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035af 	.word	0x080035af
 80035a0:	080035a9 	.word	0x080035a9
 80035a4:	080035c1 	.word	0x080035c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e030      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d025      	beq.n	8003606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035be:	e022      	b.n	8003606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035c8:	d11f      	bne.n	800360a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ce:	e01c      	b.n	800360a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d903      	bls.n	80035de <DMA_CheckFifoParam+0xb6>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d003      	beq.n	80035e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035dc:	e018      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
      break;
 80035e2:	e015      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00e      	beq.n	800360e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      break;
 80035f4:	e00b      	b.n	800360e <DMA_CheckFifoParam+0xe6>
      break;
 80035f6:	bf00      	nop
 80035f8:	e00a      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;
 80035fa:	bf00      	nop
 80035fc:	e008      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;
 80035fe:	bf00      	nop
 8003600:	e006      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;
 8003602:	bf00      	nop
 8003604:	e004      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
 8003608:	e002      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;   
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <DMA_CheckFifoParam+0xe8>
      break;
 800360e:	bf00      	nop
    }
  } 
  
  return status; 
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e159      	b.n	80038f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800363c:	2201      	movs	r2, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	429a      	cmp	r2, r3
 8003656:	f040 8148 	bne.w	80038ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d005      	beq.n	8003672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800366e:	2b02      	cmp	r3, #2
 8003670:	d130      	bne.n	80036d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a8:	2201      	movs	r2, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 0201 	and.w	r2, r3, #1
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d017      	beq.n	8003710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d123      	bne.n	8003764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	08da      	lsrs	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3208      	adds	r2, #8
 8003724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	220f      	movs	r2, #15
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	08da      	lsrs	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3208      	adds	r2, #8
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	2203      	movs	r2, #3
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0203 	and.w	r2, r3, #3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a2 	beq.w	80038ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	4b57      	ldr	r3, [pc, #348]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4a56      	ldr	r2, [pc, #344]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 80037b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	4b54      	ldr	r3, [pc, #336]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c2:	4a52      	ldr	r2, [pc, #328]	; (800390c <HAL_GPIO_Init+0x2ec>)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a49      	ldr	r2, [pc, #292]	; (8003910 <HAL_GPIO_Init+0x2f0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d019      	beq.n	8003822 <HAL_GPIO_Init+0x202>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a48      	ldr	r2, [pc, #288]	; (8003914 <HAL_GPIO_Init+0x2f4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_GPIO_Init+0x1fe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a47      	ldr	r2, [pc, #284]	; (8003918 <HAL_GPIO_Init+0x2f8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00d      	beq.n	800381a <HAL_GPIO_Init+0x1fa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a46      	ldr	r2, [pc, #280]	; (800391c <HAL_GPIO_Init+0x2fc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <HAL_GPIO_Init+0x1f6>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a45      	ldr	r2, [pc, #276]	; (8003920 <HAL_GPIO_Init+0x300>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_GPIO_Init+0x1f2>
 800380e:	2304      	movs	r3, #4
 8003810:	e008      	b.n	8003824 <HAL_GPIO_Init+0x204>
 8003812:	2307      	movs	r3, #7
 8003814:	e006      	b.n	8003824 <HAL_GPIO_Init+0x204>
 8003816:	2303      	movs	r3, #3
 8003818:	e004      	b.n	8003824 <HAL_GPIO_Init+0x204>
 800381a:	2302      	movs	r3, #2
 800381c:	e002      	b.n	8003824 <HAL_GPIO_Init+0x204>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_GPIO_Init+0x204>
 8003822:	2300      	movs	r3, #0
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	f002 0203 	and.w	r2, r2, #3
 800382a:	0092      	lsls	r2, r2, #2
 800382c:	4093      	lsls	r3, r2
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003834:	4935      	ldr	r1, [pc, #212]	; (800390c <HAL_GPIO_Init+0x2ec>)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	3302      	adds	r3, #2
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003842:	4b38      	ldr	r3, [pc, #224]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003866:	4a2f      	ldr	r2, [pc, #188]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800386c:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_GPIO_Init+0x304>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003890:	4a24      	ldr	r2, [pc, #144]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_GPIO_Init+0x304>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ba:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <HAL_GPIO_Init+0x304>)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038c0:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_GPIO_Init+0x304>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038e4:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <HAL_GPIO_Init+0x304>)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3301      	adds	r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	f67f aea2 	bls.w	800363c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3724      	adds	r7, #36	; 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	40013800 	.word	0x40013800
 8003910:	40020000 	.word	0x40020000
 8003914:	40020400 	.word	0x40020400
 8003918:	40020800 	.word	0x40020800
 800391c:	40020c00 	.word	0x40020c00
 8003920:	40021000 	.word	0x40021000
 8003924:	40013c00 	.word	0x40013c00

08003928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	807b      	strh	r3, [r7, #2]
 8003934:	4613      	mov	r3, r2
 8003936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003938:	787b      	ldrb	r3, [r7, #1]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003944:	e003      	b.n	800394e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003946:	887b      	ldrh	r3, [r7, #2]
 8003948:	041a      	lsls	r2, r3, #16
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	619a      	str	r2, [r3, #24]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003972:	4a05      	ldr	r2, [pc, #20]	; (8003988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fcda 	bl	8001334 <HAL_GPIO_EXTI_Callback>
  }
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40013c00 	.word	0x40013c00

0800398c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e12b      	b.n	8003bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe f99a 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2224      	movs	r2, #36	; 0x24
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039f0:	f000 fd40 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 80039f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4a81      	ldr	r2, [pc, #516]	; (8003c00 <HAL_I2C_Init+0x274>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d807      	bhi.n	8003a10 <HAL_I2C_Init+0x84>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a80      	ldr	r2, [pc, #512]	; (8003c04 <HAL_I2C_Init+0x278>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	bf94      	ite	ls
 8003a08:	2301      	movls	r3, #1
 8003a0a:	2300      	movhi	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e006      	b.n	8003a1e <HAL_I2C_Init+0x92>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a7d      	ldr	r2, [pc, #500]	; (8003c08 <HAL_I2C_Init+0x27c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	bf94      	ite	ls
 8003a18:	2301      	movls	r3, #1
 8003a1a:	2300      	movhi	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0e7      	b.n	8003bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a78      	ldr	r2, [pc, #480]	; (8003c0c <HAL_I2C_Init+0x280>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	0c9b      	lsrs	r3, r3, #18
 8003a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a6a      	ldr	r2, [pc, #424]	; (8003c00 <HAL_I2C_Init+0x274>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d802      	bhi.n	8003a60 <HAL_I2C_Init+0xd4>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	e009      	b.n	8003a74 <HAL_I2C_Init+0xe8>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	4a69      	ldr	r2, [pc, #420]	; (8003c10 <HAL_I2C_Init+0x284>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	3301      	adds	r3, #1
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	495c      	ldr	r1, [pc, #368]	; (8003c00 <HAL_I2C_Init+0x274>)
 8003a90:	428b      	cmp	r3, r1
 8003a92:	d819      	bhi.n	8003ac8 <HAL_I2C_Init+0x13c>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e59      	subs	r1, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa2:	1c59      	adds	r1, r3, #1
 8003aa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003aa8:	400b      	ands	r3, r1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_I2C_Init+0x138>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1e59      	subs	r1, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003abc:	3301      	adds	r3, #1
 8003abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac2:	e051      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	e04f      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <HAL_I2C_Init+0x168>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e58      	subs	r0, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	440b      	add	r3, r1
 8003ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e012      	b.n	8003b1a <HAL_I2C_Init+0x18e>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1e58      	subs	r0, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	0099      	lsls	r1, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Init+0x196>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e022      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10e      	bne.n	8003b48 <HAL_I2C_Init+0x1bc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1e58      	subs	r0, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	440b      	add	r3, r1
 8003b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b46:	e00f      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e58      	subs	r0, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	0099      	lsls	r1, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	6809      	ldr	r1, [r1, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6911      	ldr	r1, [r2, #16]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	000186a0 	.word	0x000186a0
 8003c04:	001e847f 	.word	0x001e847f
 8003c08:	003d08ff 	.word	0x003d08ff
 8003c0c:	431bde83 	.word	0x431bde83
 8003c10:	10624dd3 	.word	0x10624dd3

08003c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e267      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d075      	beq.n	8003d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c32:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d00c      	beq.n	8003c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3e:	4b85      	ldr	r3, [pc, #532]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d112      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c4a:	4b82      	ldr	r3, [pc, #520]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c56:	d10b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	4b7e      	ldr	r3, [pc, #504]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05b      	beq.n	8003d1c <HAL_RCC_OscConfig+0x108>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d157      	bne.n	8003d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e242      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_OscConfig+0x74>
 8003c7a:	4b76      	ldr	r3, [pc, #472]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a75      	ldr	r2, [pc, #468]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e01d      	b.n	8003cc4 <HAL_RCC_OscConfig+0xb0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x98>
 8003c92:	4b70      	ldr	r3, [pc, #448]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a6f      	ldr	r2, [pc, #444]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b6d      	ldr	r3, [pc, #436]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a6c      	ldr	r2, [pc, #432]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0xb0>
 8003cac:	4b69      	ldr	r3, [pc, #420]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a68      	ldr	r2, [pc, #416]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b66      	ldr	r3, [pc, #408]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a65      	ldr	r2, [pc, #404]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fb04 	bl	80022d8 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fe fb00 	bl	80022d8 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e207      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b5b      	ldr	r3, [pc, #364]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xc0>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe faf0 	bl	80022d8 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fe faec 	bl	80022d8 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1f3      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	4b51      	ldr	r3, [pc, #324]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0xe8>
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d063      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d2a:	4b4a      	ldr	r3, [pc, #296]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d11c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d42:	4b44      	ldr	r3, [pc, #272]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d116      	bne.n	8003d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4e:	4b41      	ldr	r3, [pc, #260]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_RCC_OscConfig+0x152>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e1c7      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4937      	ldr	r1, [pc, #220]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	e03a      	b.n	8003df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d020      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d84:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <HAL_RCC_OscConfig+0x244>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8a:	f7fe faa5 	bl	80022d8 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d92:	f7fe faa1 	bl	80022d8 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e1a8      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4925      	ldr	r1, [pc, #148]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	600b      	str	r3, [r1, #0]
 8003dc4:	e015      	b.n	8003df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <HAL_RCC_OscConfig+0x244>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fe fa84 	bl	80022d8 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd4:	f7fe fa80 	bl	80022d8 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e187      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d036      	beq.n	8003e6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <HAL_RCC_OscConfig+0x248>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fe fa64 	bl	80022d8 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e14:	f7fe fa60 	bl	80022d8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e167      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_OscConfig+0x240>)
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x200>
 8003e32:	e01b      	b.n	8003e6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e34:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <HAL_RCC_OscConfig+0x248>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fa4d 	bl	80022d8 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	e00e      	b.n	8003e60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e42:	f7fe fa49 	bl	80022d8 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d907      	bls.n	8003e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e150      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
 8003e54:	40023800 	.word	0x40023800
 8003e58:	42470000 	.word	0x42470000
 8003e5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e60:	4b88      	ldr	r3, [pc, #544]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ea      	bne.n	8003e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8097 	beq.w	8003fa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7e:	4b81      	ldr	r3, [pc, #516]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10f      	bne.n	8003eaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	4b7d      	ldr	r3, [pc, #500]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4a7c      	ldr	r2, [pc, #496]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9a:	4b7a      	ldr	r3, [pc, #488]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	4b77      	ldr	r3, [pc, #476]	; (8004088 <HAL_RCC_OscConfig+0x474>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d118      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb6:	4b74      	ldr	r3, [pc, #464]	; (8004088 <HAL_RCC_OscConfig+0x474>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a73      	ldr	r2, [pc, #460]	; (8004088 <HAL_RCC_OscConfig+0x474>)
 8003ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec2:	f7fe fa09 	bl	80022d8 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eca:	f7fe fa05 	bl	80022d8 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e10c      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	4b6a      	ldr	r3, [pc, #424]	; (8004088 <HAL_RCC_OscConfig+0x474>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d106      	bne.n	8003efe <HAL_RCC_OscConfig+0x2ea>
 8003ef0:	4b64      	ldr	r3, [pc, #400]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	4a63      	ldr	r2, [pc, #396]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	6713      	str	r3, [r2, #112]	; 0x70
 8003efc:	e01c      	b.n	8003f38 <HAL_RCC_OscConfig+0x324>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b05      	cmp	r3, #5
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x30c>
 8003f06:	4b5f      	ldr	r3, [pc, #380]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a5e      	ldr	r2, [pc, #376]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	f043 0304 	orr.w	r3, r3, #4
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70
 8003f12:	4b5c      	ldr	r3, [pc, #368]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	4a5b      	ldr	r2, [pc, #364]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0x324>
 8003f20:	4b58      	ldr	r3, [pc, #352]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4a57      	ldr	r2, [pc, #348]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f26:	f023 0301 	bic.w	r3, r3, #1
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2c:	4b55      	ldr	r3, [pc, #340]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	4a54      	ldr	r2, [pc, #336]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f32:	f023 0304 	bic.w	r3, r3, #4
 8003f36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7fe f9ca 	bl	80022d8 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f48:	f7fe f9c6 	bl	80022d8 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e0cb      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5e:	4b49      	ldr	r3, [pc, #292]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0ee      	beq.n	8003f48 <HAL_RCC_OscConfig+0x334>
 8003f6a:	e014      	b.n	8003f96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6c:	f7fe f9b4 	bl	80022d8 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f72:	e00a      	b.n	8003f8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f74:	f7fe f9b0 	bl	80022d8 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e0b5      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8a:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1ee      	bne.n	8003f74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9c:	4b39      	ldr	r3, [pc, #228]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	4a38      	ldr	r2, [pc, #224]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80a1 	beq.w	80040f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fb2:	4b34      	ldr	r3, [pc, #208]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d05c      	beq.n	8004078 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d141      	bne.n	800404a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc6:	4b31      	ldr	r3, [pc, #196]	; (800408c <HAL_RCC_OscConfig+0x478>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fe f984 	bl	80022d8 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fe f980 	bl	80022d8 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e087      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	4b27      	ldr	r3, [pc, #156]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69da      	ldr	r2, [r3, #28]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	019b      	lsls	r3, r3, #6
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	085b      	lsrs	r3, r3, #1
 800400a:	3b01      	subs	r3, #1
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	491b      	ldr	r1, [pc, #108]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 8004018:	4313      	orrs	r3, r2
 800401a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_RCC_OscConfig+0x478>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fe f959 	bl	80022d8 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402a:	f7fe f955 	bl	80022d8 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e05c      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403c:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x416>
 8004048:	e054      	b.n	80040f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_RCC_OscConfig+0x478>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004050:	f7fe f942 	bl	80022d8 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004058:	f7fe f93e 	bl	80022d8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e045      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_RCC_OscConfig+0x470>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x444>
 8004076:	e03d      	b.n	80040f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d107      	bne.n	8004090 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e038      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
 8004084:	40023800 	.word	0x40023800
 8004088:	40007000 	.word	0x40007000
 800408c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_RCC_OscConfig+0x4ec>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d028      	beq.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d121      	bne.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d11a      	bne.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040c0:	4013      	ands	r3, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d111      	bne.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	3b01      	subs	r3, #1
 80040da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800

08004104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0cc      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004118:	4b68      	ldr	r3, [pc, #416]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d90c      	bls.n	8004140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b65      	ldr	r3, [pc, #404]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b63      	ldr	r3, [pc, #396]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0b8      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d020      	beq.n	800418e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004158:	4b59      	ldr	r3, [pc, #356]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a58      	ldr	r2, [pc, #352]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004170:	4b53      	ldr	r3, [pc, #332]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4a52      	ldr	r2, [pc, #328]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800417a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800417c:	4b50      	ldr	r3, [pc, #320]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	494d      	ldr	r1, [pc, #308]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d044      	beq.n	8004224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d119      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e07f      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d003      	beq.n	80041c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c2:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e06f      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e067      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e2:	4b37      	ldr	r3, [pc, #220]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 0203 	bic.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4934      	ldr	r1, [pc, #208]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f4:	f7fe f870 	bl	80022d8 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fc:	f7fe f86c 	bl	80022d8 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e04f      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 020c 	and.w	r2, r3, #12
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	429a      	cmp	r2, r3
 8004222:	d1eb      	bne.n	80041fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d20c      	bcs.n	800424c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b22      	ldr	r3, [pc, #136]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e032      	b.n	80042b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4916      	ldr	r1, [pc, #88]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	490e      	ldr	r1, [pc, #56]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800428a:	f000 f821 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
 800428e:	4602      	mov	r2, r0
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	490a      	ldr	r1, [pc, #40]	; (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 800429c:	5ccb      	ldrb	r3, [r1, r3]
 800429e:	fa22 f303 	lsr.w	r3, r2, r3
 80042a2:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCC_ClockConfig+0x1c8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fd ffd0 	bl	8002250 <HAL_InitTick>

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023c00 	.word	0x40023c00
 80042c0:	40023800 	.word	0x40023800
 80042c4:	08008bb8 	.word	0x08008bb8
 80042c8:	20000000 	.word	0x20000000
 80042cc:	20000004 	.word	0x20000004

080042d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d4:	b090      	sub	sp, #64	; 0x40
 80042d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
 80042dc:	2300      	movs	r3, #0
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e0:	2300      	movs	r3, #0
 80042e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042e8:	4b59      	ldr	r3, [pc, #356]	; (8004450 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 030c 	and.w	r3, r3, #12
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d00d      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x40>
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	f200 80a1 	bhi.w	800443c <HAL_RCC_GetSysClockFreq+0x16c>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x34>
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d003      	beq.n	800430a <HAL_RCC_GetSysClockFreq+0x3a>
 8004302:	e09b      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004304:	4b53      	ldr	r3, [pc, #332]	; (8004454 <HAL_RCC_GetSysClockFreq+0x184>)
 8004306:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004308:	e09b      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800430a:	4b53      	ldr	r3, [pc, #332]	; (8004458 <HAL_RCC_GetSysClockFreq+0x188>)
 800430c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800430e:	e098      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004310:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <HAL_RCC_GetSysClockFreq+0x180>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800431a:	4b4d      	ldr	r3, [pc, #308]	; (8004450 <HAL_RCC_GetSysClockFreq+0x180>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d028      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004326:	4b4a      	ldr	r3, [pc, #296]	; (8004450 <HAL_RCC_GetSysClockFreq+0x180>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	099b      	lsrs	r3, r3, #6
 800432c:	2200      	movs	r2, #0
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	627a      	str	r2, [r7, #36]	; 0x24
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004338:	2100      	movs	r1, #0
 800433a:	4b47      	ldr	r3, [pc, #284]	; (8004458 <HAL_RCC_GetSysClockFreq+0x188>)
 800433c:	fb03 f201 	mul.w	r2, r3, r1
 8004340:	2300      	movs	r3, #0
 8004342:	fb00 f303 	mul.w	r3, r0, r3
 8004346:	4413      	add	r3, r2
 8004348:	4a43      	ldr	r2, [pc, #268]	; (8004458 <HAL_RCC_GetSysClockFreq+0x188>)
 800434a:	fba0 1202 	umull	r1, r2, r0, r2
 800434e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004350:	460a      	mov	r2, r1
 8004352:	62ba      	str	r2, [r7, #40]	; 0x28
 8004354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004356:	4413      	add	r3, r2
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435c:	2200      	movs	r2, #0
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	61fa      	str	r2, [r7, #28]
 8004362:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800436a:	f7fc fc67 	bl	8000c3c <__aeabi_uldivmod>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4613      	mov	r3, r2
 8004374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004376:	e053      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004378:	4b35      	ldr	r3, [pc, #212]	; (8004450 <HAL_RCC_GetSysClockFreq+0x180>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	099b      	lsrs	r3, r3, #6
 800437e:	2200      	movs	r2, #0
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	617a      	str	r2, [r7, #20]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800438a:	f04f 0b00 	mov.w	fp, #0
 800438e:	4652      	mov	r2, sl
 8004390:	465b      	mov	r3, fp
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	0159      	lsls	r1, r3, #5
 800439c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a0:	0150      	lsls	r0, r2, #5
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	ebb2 080a 	subs.w	r8, r2, sl
 80043aa:	eb63 090b 	sbc.w	r9, r3, fp
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043c2:	ebb2 0408 	subs.w	r4, r2, r8
 80043c6:	eb63 0509 	sbc.w	r5, r3, r9
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	00eb      	lsls	r3, r5, #3
 80043d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043d8:	00e2      	lsls	r2, r4, #3
 80043da:	4614      	mov	r4, r2
 80043dc:	461d      	mov	r5, r3
 80043de:	eb14 030a 	adds.w	r3, r4, sl
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	eb45 030b 	adc.w	r3, r5, fp
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043f6:	4629      	mov	r1, r5
 80043f8:	028b      	lsls	r3, r1, #10
 80043fa:	4621      	mov	r1, r4
 80043fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004400:	4621      	mov	r1, r4
 8004402:	028a      	lsls	r2, r1, #10
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440a:	2200      	movs	r2, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	60fa      	str	r2, [r7, #12]
 8004410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004414:	f7fc fc12 	bl	8000c3c <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4613      	mov	r3, r2
 800441e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCC_GetSysClockFreq+0x180>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	3301      	adds	r3, #1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800443a:	e002      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetSysClockFreq+0x184>)
 800443e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004444:	4618      	mov	r0, r3
 8004446:	3740      	adds	r7, #64	; 0x40
 8004448:	46bd      	mov	sp, r7
 800444a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800
 8004454:	00f42400 	.word	0x00f42400
 8004458:	017d7840 	.word	0x017d7840

0800445c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <HAL_RCC_GetHCLKFreq+0x14>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000000 	.word	0x20000000

08004474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004478:	f7ff fff0 	bl	800445c <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0a9b      	lsrs	r3, r3, #10
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4903      	ldr	r1, [pc, #12]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40023800 	.word	0x40023800
 8004498:	08008bc8 	.word	0x08008bc8

0800449c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044a0:	f7ff ffdc 	bl	800445c <HAL_RCC_GetHCLKFreq>
 80044a4:	4602      	mov	r2, r0
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	0b5b      	lsrs	r3, r3, #13
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	4903      	ldr	r1, [pc, #12]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b2:	5ccb      	ldrb	r3, [r1, r3]
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40023800 	.word	0x40023800
 80044c0:	08008bc8 	.word	0x08008bc8

080044c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e041      	b.n	800455a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fd fc56 	bl	8001d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f000 f9c0 	bl	8004888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d001      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e044      	b.n	8004606 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <HAL_TIM_Base_Start_IT+0xb0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d018      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x6c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d013      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x6c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <HAL_TIM_Base_Start_IT+0xb4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00e      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x6c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a19      	ldr	r2, [pc, #100]	; (800461c <HAL_TIM_Base_Start_IT+0xb8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d009      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x6c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_TIM_Base_Start_IT+0xbc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x6c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a16      	ldr	r2, [pc, #88]	; (8004624 <HAL_TIM_Base_Start_IT+0xc0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d010      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0201 	orr.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f2:	e007      	b.n	8004604 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40014000 	.word	0x40014000

08004628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d122      	bne.n	8004684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b02      	cmp	r3, #2
 800464a:	d11b      	bne.n	8004684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0202 	mvn.w	r2, #2
 8004654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f8ee 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8e0 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8f1 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0204 	mvn.w	r2, #4
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f8c4 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8b6 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8c7 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0208 	mvn.w	r2, #8
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2204      	movs	r2, #4
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f89a 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f88c 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f89d 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b10      	cmp	r3, #16
 8004738:	d122      	bne.n	8004780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b10      	cmp	r3, #16
 8004746:	d11b      	bne.n	8004780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0210 	mvn.w	r2, #16
 8004750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2208      	movs	r2, #8
 8004756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f870 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 800476c:	e005      	b.n	800477a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f862 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f873 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d10e      	bne.n	80047ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d107      	bne.n	80047ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0201 	mvn.w	r2, #1
 80047a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc fdd8 	bl	800135c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b80      	cmp	r3, #128	; 0x80
 80047b8:	d10e      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c4:	2b80      	cmp	r3, #128	; 0x80
 80047c6:	d107      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8e2 	bl	800499c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	d10e      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d107      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f838 	bl	8004874 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b20      	cmp	r3, #32
 8004810:	d10e      	bne.n	8004830 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b20      	cmp	r3, #32
 800481e:	d107      	bne.n	8004830 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0220 	mvn.w	r2, #32
 8004828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f8ac 	bl	8004988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a34      	ldr	r2, [pc, #208]	; (800496c <TIM_Base_SetConfig+0xe4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00f      	beq.n	80048c0 <TIM_Base_SetConfig+0x38>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d00b      	beq.n	80048c0 <TIM_Base_SetConfig+0x38>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a31      	ldr	r2, [pc, #196]	; (8004970 <TIM_Base_SetConfig+0xe8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_Base_SetConfig+0x38>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a30      	ldr	r2, [pc, #192]	; (8004974 <TIM_Base_SetConfig+0xec>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0x38>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a2f      	ldr	r2, [pc, #188]	; (8004978 <TIM_Base_SetConfig+0xf0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a25      	ldr	r2, [pc, #148]	; (800496c <TIM_Base_SetConfig+0xe4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01b      	beq.n	8004912 <TIM_Base_SetConfig+0x8a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e0:	d017      	beq.n	8004912 <TIM_Base_SetConfig+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a22      	ldr	r2, [pc, #136]	; (8004970 <TIM_Base_SetConfig+0xe8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <TIM_Base_SetConfig+0x8a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a21      	ldr	r2, [pc, #132]	; (8004974 <TIM_Base_SetConfig+0xec>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00f      	beq.n	8004912 <TIM_Base_SetConfig+0x8a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a20      	ldr	r2, [pc, #128]	; (8004978 <TIM_Base_SetConfig+0xf0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00b      	beq.n	8004912 <TIM_Base_SetConfig+0x8a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1f      	ldr	r2, [pc, #124]	; (800497c <TIM_Base_SetConfig+0xf4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1e      	ldr	r2, [pc, #120]	; (8004980 <TIM_Base_SetConfig+0xf8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d003      	beq.n	8004912 <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1d      	ldr	r2, [pc, #116]	; (8004984 <TIM_Base_SetConfig+0xfc>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d108      	bne.n	8004924 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a08      	ldr	r2, [pc, #32]	; (800496c <TIM_Base_SetConfig+0xe4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d103      	bne.n	8004958 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	615a      	str	r2, [r3, #20]
}
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40010000 	.word	0x40010000
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800
 8004978:	40000c00 	.word	0x40000c00
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800

08004988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e03f      	b.n	8004a42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd fa26 	bl	8001e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2224      	movs	r2, #36	; 0x24
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fd23 	bl	8005440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695a      	ldr	r2, [r3, #20]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	4613      	mov	r3, r2
 8004a56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d130      	bne.n	8004ac6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_UART_Transmit_IT+0x26>
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e029      	b.n	8004ac8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Transmit_IT+0x38>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e022      	b.n	8004ac8 <HAL_UART_Transmit_IT+0x7e>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	88fa      	ldrh	r2, [r7, #6]
 8004a94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2221      	movs	r2, #33	; 0x21
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ac0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e000      	b.n	8004ac8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
  }
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d11d      	bne.n	8004b2a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_UART_Receive_IT+0x26>
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e016      	b.n	8004b2c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_UART_Receive_IT+0x38>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e00f      	b.n	8004b2c <HAL_UART_Receive_IT+0x58>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fab5 	bl	8005090 <UART_Start_Receive_IT>
 8004b26:	4603      	mov	r3, r0
 8004b28:	e000      	b.n	8004b2c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b2a:	2302      	movs	r3, #2
  }
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b0ba      	sub	sp, #232	; 0xe8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_UART_IRQHandler+0x66>
 8004b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fb99 	bl	80052ca <UART_Receive_IT>
      return;
 8004b98:	e256      	b.n	8005048 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80de 	beq.w	8004d60 <HAL_UART_IRQHandler+0x22c>
 8004ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80d1 	beq.w	8004d60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <HAL_UART_IRQHandler+0xae>
 8004bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_UART_IRQHandler+0xd2>
 8004bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f043 0202 	orr.w	r2, r3, #2
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_UART_IRQHandler+0xf6>
 8004c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f043 0204 	orr.w	r2, r3, #4
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d011      	beq.n	8004c5a <HAL_UART_IRQHandler+0x126>
 8004c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d105      	bne.n	8004c4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f043 0208 	orr.w	r2, r3, #8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 81ed 	beq.w	800503e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_UART_IRQHandler+0x14e>
 8004c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fb24 	bl	80052ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d103      	bne.n	8004cae <HAL_UART_IRQHandler+0x17a>
 8004ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d04f      	beq.n	8004d4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa2c 	bl	800510c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d141      	bne.n	8004d46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3314      	adds	r3, #20
 8004cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3314      	adds	r3, #20
 8004cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1d9      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d013      	beq.n	8004d3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	4a7d      	ldr	r2, [pc, #500]	; (8004f10 <HAL_UART_IRQHandler+0x3dc>)
 8004d1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe f9f0 	bl	8003108 <HAL_DMA_Abort_IT>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d016      	beq.n	8004d5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	e00e      	b.n	8004d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f990 	bl	8005064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	e00a      	b.n	8004d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f98c 	bl	8005064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	e006      	b.n	8004d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f988 	bl	8005064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d5a:	e170      	b.n	800503e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	bf00      	nop
    return;
 8004d5e:	e16e      	b.n	800503e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	f040 814a 	bne.w	8004ffe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8143 	beq.w	8004ffe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 813c 	beq.w	8004ffe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	f040 80b4 	bne.w	8004f14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004db8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8140 	beq.w	8005042 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	f080 8139 	bcs.w	8005042 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dd6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de2:	f000 8088 	beq.w	8004ef6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1d9      	bne.n	8004de6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3314      	adds	r3, #20
 8004e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e1      	bne.n	8004e32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3314      	adds	r3, #20
 8004e74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3314      	adds	r3, #20
 8004e8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e3      	bne.n	8004e6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec6:	f023 0310 	bic.w	r3, r3, #16
 8004eca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ed8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ede:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e3      	bne.n	8004eb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe f899 	bl	8003028 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f8b6 	bl	8005078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f0c:	e099      	b.n	8005042 <HAL_UART_IRQHandler+0x50e>
 8004f0e:	bf00      	nop
 8004f10:	080051d3 	.word	0x080051d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 808b 	beq.w	8005046 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8086 	beq.w	8005046 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	330c      	adds	r3, #12
 8004f40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f5e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e3      	bne.n	8004f3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3314      	adds	r3, #20
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	623b      	str	r3, [r7, #32]
   return(result);
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f96:	633a      	str	r2, [r7, #48]	; 0x30
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e3      	bne.n	8004f72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0310 	bic.w	r3, r3, #16
 8004fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fdc:	61fa      	str	r2, [r7, #28]
 8004fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	69b9      	ldr	r1, [r7, #24]
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e3      	bne.n	8004fb8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ff0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f83e 	bl	8005078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ffc:	e023      	b.n	8005046 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <HAL_UART_IRQHandler+0x4ea>
 800500a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8ef 	bl	80051fa <UART_Transmit_IT>
    return;
 800501c:	e014      	b.n	8005048 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00e      	beq.n	8005048 <HAL_UART_IRQHandler+0x514>
 800502a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d008      	beq.n	8005048 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f92f 	bl	800529a <UART_EndTransmit_IT>
    return;
 800503c:	e004      	b.n	8005048 <HAL_UART_IRQHandler+0x514>
    return;
 800503e:	bf00      	nop
 8005040:	e002      	b.n	8005048 <HAL_UART_IRQHandler+0x514>
      return;
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <HAL_UART_IRQHandler+0x514>
      return;
 8005046:	bf00      	nop
  }
}
 8005048:	37e8      	adds	r7, #232	; 0xe8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop

08005050 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2222      	movs	r2, #34	; 0x22
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0201 	orr.w	r2, r2, #1
 80050ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0220 	orr.w	r2, r2, #32
 80050fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b095      	sub	sp, #84	; 0x54
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800512a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005134:	643a      	str	r2, [r7, #64]	; 0x40
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800513a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	61fb      	str	r3, [r7, #28]
   return(result);
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3314      	adds	r3, #20
 8005166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005168:	62fa      	str	r2, [r7, #44]	; 0x2c
 800516a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800516e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e5      	bne.n	8005148 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005180:	2b01      	cmp	r3, #1
 8005182:	d119      	bne.n	80051b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	60bb      	str	r3, [r7, #8]
   return(result);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f023 0310 	bic.w	r3, r3, #16
 800519a:	647b      	str	r3, [r7, #68]	; 0x44
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051a4:	61ba      	str	r2, [r7, #24]
 80051a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6979      	ldr	r1, [r7, #20]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	613b      	str	r3, [r7, #16]
   return(result);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e5      	bne.n	8005184 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051c6:	bf00      	nop
 80051c8:	3754      	adds	r7, #84	; 0x54
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f7ff ff39 	bl	8005064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b21      	cmp	r3, #33	; 0x21
 800520c:	d13e      	bne.n	800528c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005216:	d114      	bne.n	8005242 <UART_Transmit_IT+0x48>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d110      	bne.n	8005242 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005234:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	1c9a      	adds	r2, r3, #2
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]
 8005240:	e008      	b.n	8005254 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	1c59      	adds	r1, r3, #1
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6211      	str	r1, [r2, #32]
 800524c:	781a      	ldrb	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29b      	uxth	r3, r3
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4619      	mov	r1, r3
 8005262:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10f      	bne.n	8005288 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005276:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005286:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e000      	b.n	800528e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fec8 	bl	8005050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b08c      	sub	sp, #48	; 0x30
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b22      	cmp	r3, #34	; 0x22
 80052dc:	f040 80ab 	bne.w	8005436 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e8:	d117      	bne.n	800531a <UART_Receive_IT+0x50>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d113      	bne.n	800531a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005308:	b29a      	uxth	r2, r3
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	629a      	str	r2, [r3, #40]	; 0x28
 8005318:	e026      	b.n	8005368 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	d007      	beq.n	800533e <UART_Receive_IT+0x74>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10a      	bne.n	800534c <UART_Receive_IT+0x82>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	b2da      	uxtb	r2, r3
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e008      	b.n	800535e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005358:	b2da      	uxtb	r2, r3
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29b      	uxth	r3, r3
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4619      	mov	r1, r3
 8005376:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005378:	2b00      	cmp	r3, #0
 800537a:	d15a      	bne.n	8005432 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0220 	bic.w	r2, r2, #32
 800538a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800539a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695a      	ldr	r2, [r3, #20]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0201 	bic.w	r2, r2, #1
 80053aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d135      	bne.n	8005428 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	613b      	str	r3, [r7, #16]
   return(result);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f023 0310 	bic.w	r3, r3, #16
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e2:	623a      	str	r2, [r7, #32]
 80053e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	69f9      	ldr	r1, [r7, #28]
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e5      	bne.n	80053c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b10      	cmp	r3, #16
 8005402:	d10a      	bne.n	800541a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fe29 	bl	8005078 <HAL_UARTEx_RxEventCallback>
 8005426:	e002      	b.n	800542e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fb ff0b 	bl	8001244 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	e002      	b.n	8005438 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e000      	b.n	8005438 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005436:	2302      	movs	r3, #2
  }
}
 8005438:	4618      	mov	r0, r3
 800543a:	3730      	adds	r7, #48	; 0x30
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005444:	b0c0      	sub	sp, #256	; 0x100
 8005446:	af00      	add	r7, sp, #0
 8005448:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545c:	68d9      	ldr	r1, [r3, #12]
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	ea40 0301 	orr.w	r3, r0, r1
 8005468:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	431a      	orrs	r2, r3
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	431a      	orrs	r2, r3
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005498:	f021 010c 	bic.w	r1, r1, #12
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054a6:	430b      	orrs	r3, r1
 80054a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ba:	6999      	ldr	r1, [r3, #24]
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	ea40 0301 	orr.w	r3, r0, r1
 80054c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b8f      	ldr	r3, [pc, #572]	; (800570c <UART_SetConfig+0x2cc>)
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d005      	beq.n	80054e0 <UART_SetConfig+0xa0>
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b8d      	ldr	r3, [pc, #564]	; (8005710 <UART_SetConfig+0x2d0>)
 80054dc:	429a      	cmp	r2, r3
 80054de:	d104      	bne.n	80054ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054e0:	f7fe ffdc 	bl	800449c <HAL_RCC_GetPCLK2Freq>
 80054e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054e8:	e003      	b.n	80054f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ea:	f7fe ffc3 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 80054ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fc:	f040 810c 	bne.w	8005718 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005504:	2200      	movs	r2, #0
 8005506:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800550a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800550e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005512:	4622      	mov	r2, r4
 8005514:	462b      	mov	r3, r5
 8005516:	1891      	adds	r1, r2, r2
 8005518:	65b9      	str	r1, [r7, #88]	; 0x58
 800551a:	415b      	adcs	r3, r3
 800551c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800551e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005522:	4621      	mov	r1, r4
 8005524:	eb12 0801 	adds.w	r8, r2, r1
 8005528:	4629      	mov	r1, r5
 800552a:	eb43 0901 	adc.w	r9, r3, r1
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800553a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800553e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005542:	4690      	mov	r8, r2
 8005544:	4699      	mov	r9, r3
 8005546:	4623      	mov	r3, r4
 8005548:	eb18 0303 	adds.w	r3, r8, r3
 800554c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005550:	462b      	mov	r3, r5
 8005552:	eb49 0303 	adc.w	r3, r9, r3
 8005556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800555a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005566:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800556a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800556e:	460b      	mov	r3, r1
 8005570:	18db      	adds	r3, r3, r3
 8005572:	653b      	str	r3, [r7, #80]	; 0x50
 8005574:	4613      	mov	r3, r2
 8005576:	eb42 0303 	adc.w	r3, r2, r3
 800557a:	657b      	str	r3, [r7, #84]	; 0x54
 800557c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005580:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005584:	f7fb fb5a 	bl	8000c3c <__aeabi_uldivmod>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4b61      	ldr	r3, [pc, #388]	; (8005714 <UART_SetConfig+0x2d4>)
 800558e:	fba3 2302 	umull	r2, r3, r3, r2
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	011c      	lsls	r4, r3, #4
 8005596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	1891      	adds	r1, r2, r2
 80055ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80055b0:	415b      	adcs	r3, r3
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055b8:	4641      	mov	r1, r8
 80055ba:	eb12 0a01 	adds.w	sl, r2, r1
 80055be:	4649      	mov	r1, r9
 80055c0:	eb43 0b01 	adc.w	fp, r3, r1
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055d8:	4692      	mov	sl, r2
 80055da:	469b      	mov	fp, r3
 80055dc:	4643      	mov	r3, r8
 80055de:	eb1a 0303 	adds.w	r3, sl, r3
 80055e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055e6:	464b      	mov	r3, r9
 80055e8:	eb4b 0303 	adc.w	r3, fp, r3
 80055ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005600:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005604:	460b      	mov	r3, r1
 8005606:	18db      	adds	r3, r3, r3
 8005608:	643b      	str	r3, [r7, #64]	; 0x40
 800560a:	4613      	mov	r3, r2
 800560c:	eb42 0303 	adc.w	r3, r2, r3
 8005610:	647b      	str	r3, [r7, #68]	; 0x44
 8005612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005616:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800561a:	f7fb fb0f 	bl	8000c3c <__aeabi_uldivmod>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4611      	mov	r1, r2
 8005624:	4b3b      	ldr	r3, [pc, #236]	; (8005714 <UART_SetConfig+0x2d4>)
 8005626:	fba3 2301 	umull	r2, r3, r3, r1
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	2264      	movs	r2, #100	; 0x64
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	1acb      	subs	r3, r1, r3
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800563a:	4b36      	ldr	r3, [pc, #216]	; (8005714 <UART_SetConfig+0x2d4>)
 800563c:	fba3 2302 	umull	r2, r3, r3, r2
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005648:	441c      	add	r4, r3
 800564a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800564e:	2200      	movs	r2, #0
 8005650:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005654:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005658:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800565c:	4642      	mov	r2, r8
 800565e:	464b      	mov	r3, r9
 8005660:	1891      	adds	r1, r2, r2
 8005662:	63b9      	str	r1, [r7, #56]	; 0x38
 8005664:	415b      	adcs	r3, r3
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800566c:	4641      	mov	r1, r8
 800566e:	1851      	adds	r1, r2, r1
 8005670:	6339      	str	r1, [r7, #48]	; 0x30
 8005672:	4649      	mov	r1, r9
 8005674:	414b      	adcs	r3, r1
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005684:	4659      	mov	r1, fp
 8005686:	00cb      	lsls	r3, r1, #3
 8005688:	4651      	mov	r1, sl
 800568a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568e:	4651      	mov	r1, sl
 8005690:	00ca      	lsls	r2, r1, #3
 8005692:	4610      	mov	r0, r2
 8005694:	4619      	mov	r1, r3
 8005696:	4603      	mov	r3, r0
 8005698:	4642      	mov	r2, r8
 800569a:	189b      	adds	r3, r3, r2
 800569c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056a0:	464b      	mov	r3, r9
 80056a2:	460a      	mov	r2, r1
 80056a4:	eb42 0303 	adc.w	r3, r2, r3
 80056a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056c0:	460b      	mov	r3, r1
 80056c2:	18db      	adds	r3, r3, r3
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c6:	4613      	mov	r3, r2
 80056c8:	eb42 0303 	adc.w	r3, r2, r3
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056d6:	f7fb fab1 	bl	8000c3c <__aeabi_uldivmod>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <UART_SetConfig+0x2d4>)
 80056e0:	fba3 1302 	umull	r1, r3, r3, r2
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	2164      	movs	r1, #100	; 0x64
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	3332      	adds	r3, #50	; 0x32
 80056f2:	4a08      	ldr	r2, [pc, #32]	; (8005714 <UART_SetConfig+0x2d4>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	f003 0207 	and.w	r2, r3, #7
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4422      	add	r2, r4
 8005706:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005708:	e105      	b.n	8005916 <UART_SetConfig+0x4d6>
 800570a:	bf00      	nop
 800570c:	40011000 	.word	0x40011000
 8005710:	40011400 	.word	0x40011400
 8005714:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571c:	2200      	movs	r2, #0
 800571e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005726:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800572a:	4642      	mov	r2, r8
 800572c:	464b      	mov	r3, r9
 800572e:	1891      	adds	r1, r2, r2
 8005730:	6239      	str	r1, [r7, #32]
 8005732:	415b      	adcs	r3, r3
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
 8005736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800573a:	4641      	mov	r1, r8
 800573c:	1854      	adds	r4, r2, r1
 800573e:	4649      	mov	r1, r9
 8005740:	eb43 0501 	adc.w	r5, r3, r1
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	00eb      	lsls	r3, r5, #3
 800574e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005752:	00e2      	lsls	r2, r4, #3
 8005754:	4614      	mov	r4, r2
 8005756:	461d      	mov	r5, r3
 8005758:	4643      	mov	r3, r8
 800575a:	18e3      	adds	r3, r4, r3
 800575c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005760:	464b      	mov	r3, r9
 8005762:	eb45 0303 	adc.w	r3, r5, r3
 8005766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005776:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005786:	4629      	mov	r1, r5
 8005788:	008b      	lsls	r3, r1, #2
 800578a:	4621      	mov	r1, r4
 800578c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005790:	4621      	mov	r1, r4
 8005792:	008a      	lsls	r2, r1, #2
 8005794:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005798:	f7fb fa50 	bl	8000c3c <__aeabi_uldivmod>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4b60      	ldr	r3, [pc, #384]	; (8005924 <UART_SetConfig+0x4e4>)
 80057a2:	fba3 2302 	umull	r2, r3, r3, r2
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	011c      	lsls	r4, r3, #4
 80057aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057bc:	4642      	mov	r2, r8
 80057be:	464b      	mov	r3, r9
 80057c0:	1891      	adds	r1, r2, r2
 80057c2:	61b9      	str	r1, [r7, #24]
 80057c4:	415b      	adcs	r3, r3
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057cc:	4641      	mov	r1, r8
 80057ce:	1851      	adds	r1, r2, r1
 80057d0:	6139      	str	r1, [r7, #16]
 80057d2:	4649      	mov	r1, r9
 80057d4:	414b      	adcs	r3, r1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057e4:	4659      	mov	r1, fp
 80057e6:	00cb      	lsls	r3, r1, #3
 80057e8:	4651      	mov	r1, sl
 80057ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ee:	4651      	mov	r1, sl
 80057f0:	00ca      	lsls	r2, r1, #3
 80057f2:	4610      	mov	r0, r2
 80057f4:	4619      	mov	r1, r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	4642      	mov	r2, r8
 80057fa:	189b      	adds	r3, r3, r2
 80057fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005800:	464b      	mov	r3, r9
 8005802:	460a      	mov	r2, r1
 8005804:	eb42 0303 	adc.w	r3, r2, r3
 8005808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	67bb      	str	r3, [r7, #120]	; 0x78
 8005816:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005824:	4649      	mov	r1, r9
 8005826:	008b      	lsls	r3, r1, #2
 8005828:	4641      	mov	r1, r8
 800582a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800582e:	4641      	mov	r1, r8
 8005830:	008a      	lsls	r2, r1, #2
 8005832:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005836:	f7fb fa01 	bl	8000c3c <__aeabi_uldivmod>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4b39      	ldr	r3, [pc, #228]	; (8005924 <UART_SetConfig+0x4e4>)
 8005840:	fba3 1302 	umull	r1, r3, r3, r2
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	2164      	movs	r1, #100	; 0x64
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	3332      	adds	r3, #50	; 0x32
 8005852:	4a34      	ldr	r2, [pc, #208]	; (8005924 <UART_SetConfig+0x4e4>)
 8005854:	fba2 2303 	umull	r2, r3, r2, r3
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800585e:	441c      	add	r4, r3
 8005860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005864:	2200      	movs	r2, #0
 8005866:	673b      	str	r3, [r7, #112]	; 0x70
 8005868:	677a      	str	r2, [r7, #116]	; 0x74
 800586a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800586e:	4642      	mov	r2, r8
 8005870:	464b      	mov	r3, r9
 8005872:	1891      	adds	r1, r2, r2
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	415b      	adcs	r3, r3
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800587e:	4641      	mov	r1, r8
 8005880:	1851      	adds	r1, r2, r1
 8005882:	6039      	str	r1, [r7, #0]
 8005884:	4649      	mov	r1, r9
 8005886:	414b      	adcs	r3, r1
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005896:	4659      	mov	r1, fp
 8005898:	00cb      	lsls	r3, r1, #3
 800589a:	4651      	mov	r1, sl
 800589c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058a0:	4651      	mov	r1, sl
 80058a2:	00ca      	lsls	r2, r1, #3
 80058a4:	4610      	mov	r0, r2
 80058a6:	4619      	mov	r1, r3
 80058a8:	4603      	mov	r3, r0
 80058aa:	4642      	mov	r2, r8
 80058ac:	189b      	adds	r3, r3, r2
 80058ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80058b0:	464b      	mov	r3, r9
 80058b2:	460a      	mov	r2, r1
 80058b4:	eb42 0303 	adc.w	r3, r2, r3
 80058b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	663b      	str	r3, [r7, #96]	; 0x60
 80058c4:	667a      	str	r2, [r7, #100]	; 0x64
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058d2:	4649      	mov	r1, r9
 80058d4:	008b      	lsls	r3, r1, #2
 80058d6:	4641      	mov	r1, r8
 80058d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058dc:	4641      	mov	r1, r8
 80058de:	008a      	lsls	r2, r1, #2
 80058e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058e4:	f7fb f9aa 	bl	8000c3c <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <UART_SetConfig+0x4e4>)
 80058ee:	fba3 1302 	umull	r1, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	2164      	movs	r1, #100	; 0x64
 80058f6:	fb01 f303 	mul.w	r3, r1, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	3332      	adds	r3, #50	; 0x32
 8005900:	4a08      	ldr	r2, [pc, #32]	; (8005924 <UART_SetConfig+0x4e4>)
 8005902:	fba2 2303 	umull	r2, r3, r2, r3
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	f003 020f 	and.w	r2, r3, #15
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4422      	add	r2, r4
 8005914:	609a      	str	r2, [r3, #8]
}
 8005916:	bf00      	nop
 8005918:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800591c:	46bd      	mov	sp, r7
 800591e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005922:	bf00      	nop
 8005924:	51eb851f 	.word	0x51eb851f

08005928 <atof>:
 8005928:	2100      	movs	r1, #0
 800592a:	f000 bf6f 	b.w	800680c <strtod>
	...

08005930 <__errno>:
 8005930:	4b01      	ldr	r3, [pc, #4]	; (8005938 <__errno+0x8>)
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	2000000c 	.word	0x2000000c

0800593c <__libc_init_array>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4d0d      	ldr	r5, [pc, #52]	; (8005974 <__libc_init_array+0x38>)
 8005940:	4c0d      	ldr	r4, [pc, #52]	; (8005978 <__libc_init_array+0x3c>)
 8005942:	1b64      	subs	r4, r4, r5
 8005944:	10a4      	asrs	r4, r4, #2
 8005946:	2600      	movs	r6, #0
 8005948:	42a6      	cmp	r6, r4
 800594a:	d109      	bne.n	8005960 <__libc_init_array+0x24>
 800594c:	4d0b      	ldr	r5, [pc, #44]	; (800597c <__libc_init_array+0x40>)
 800594e:	4c0c      	ldr	r4, [pc, #48]	; (8005980 <__libc_init_array+0x44>)
 8005950:	f003 f906 	bl	8008b60 <_init>
 8005954:	1b64      	subs	r4, r4, r5
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	2600      	movs	r6, #0
 800595a:	42a6      	cmp	r6, r4
 800595c:	d105      	bne.n	800596a <__libc_init_array+0x2e>
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	f855 3b04 	ldr.w	r3, [r5], #4
 8005964:	4798      	blx	r3
 8005966:	3601      	adds	r6, #1
 8005968:	e7ee      	b.n	8005948 <__libc_init_array+0xc>
 800596a:	f855 3b04 	ldr.w	r3, [r5], #4
 800596e:	4798      	blx	r3
 8005970:	3601      	adds	r6, #1
 8005972:	e7f2      	b.n	800595a <__libc_init_array+0x1e>
 8005974:	08009068 	.word	0x08009068
 8005978:	08009068 	.word	0x08009068
 800597c:	08009068 	.word	0x08009068
 8005980:	0800906c 	.word	0x0800906c

08005984 <malloc>:
 8005984:	4b02      	ldr	r3, [pc, #8]	; (8005990 <malloc+0xc>)
 8005986:	4601      	mov	r1, r0
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	f000 b877 	b.w	8005a7c <_malloc_r>
 800598e:	bf00      	nop
 8005990:	2000000c 	.word	0x2000000c

08005994 <memset>:
 8005994:	4402      	add	r2, r0
 8005996:	4603      	mov	r3, r0
 8005998:	4293      	cmp	r3, r2
 800599a:	d100      	bne.n	800599e <memset+0xa>
 800599c:	4770      	bx	lr
 800599e:	f803 1b01 	strb.w	r1, [r3], #1
 80059a2:	e7f9      	b.n	8005998 <memset+0x4>

080059a4 <_free_r>:
 80059a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059a6:	2900      	cmp	r1, #0
 80059a8:	d044      	beq.n	8005a34 <_free_r+0x90>
 80059aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ae:	9001      	str	r0, [sp, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f1a1 0404 	sub.w	r4, r1, #4
 80059b6:	bfb8      	it	lt
 80059b8:	18e4      	addlt	r4, r4, r3
 80059ba:	f001 fb4f 	bl	800705c <__malloc_lock>
 80059be:	4a1e      	ldr	r2, [pc, #120]	; (8005a38 <_free_r+0x94>)
 80059c0:	9801      	ldr	r0, [sp, #4]
 80059c2:	6813      	ldr	r3, [r2, #0]
 80059c4:	b933      	cbnz	r3, 80059d4 <_free_r+0x30>
 80059c6:	6063      	str	r3, [r4, #4]
 80059c8:	6014      	str	r4, [r2, #0]
 80059ca:	b003      	add	sp, #12
 80059cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059d0:	f001 bb4a 	b.w	8007068 <__malloc_unlock>
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	d908      	bls.n	80059ea <_free_r+0x46>
 80059d8:	6825      	ldr	r5, [r4, #0]
 80059da:	1961      	adds	r1, r4, r5
 80059dc:	428b      	cmp	r3, r1
 80059de:	bf01      	itttt	eq
 80059e0:	6819      	ldreq	r1, [r3, #0]
 80059e2:	685b      	ldreq	r3, [r3, #4]
 80059e4:	1949      	addeq	r1, r1, r5
 80059e6:	6021      	streq	r1, [r4, #0]
 80059e8:	e7ed      	b.n	80059c6 <_free_r+0x22>
 80059ea:	461a      	mov	r2, r3
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	b10b      	cbz	r3, 80059f4 <_free_r+0x50>
 80059f0:	42a3      	cmp	r3, r4
 80059f2:	d9fa      	bls.n	80059ea <_free_r+0x46>
 80059f4:	6811      	ldr	r1, [r2, #0]
 80059f6:	1855      	adds	r5, r2, r1
 80059f8:	42a5      	cmp	r5, r4
 80059fa:	d10b      	bne.n	8005a14 <_free_r+0x70>
 80059fc:	6824      	ldr	r4, [r4, #0]
 80059fe:	4421      	add	r1, r4
 8005a00:	1854      	adds	r4, r2, r1
 8005a02:	42a3      	cmp	r3, r4
 8005a04:	6011      	str	r1, [r2, #0]
 8005a06:	d1e0      	bne.n	80059ca <_free_r+0x26>
 8005a08:	681c      	ldr	r4, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	6053      	str	r3, [r2, #4]
 8005a0e:	4421      	add	r1, r4
 8005a10:	6011      	str	r1, [r2, #0]
 8005a12:	e7da      	b.n	80059ca <_free_r+0x26>
 8005a14:	d902      	bls.n	8005a1c <_free_r+0x78>
 8005a16:	230c      	movs	r3, #12
 8005a18:	6003      	str	r3, [r0, #0]
 8005a1a:	e7d6      	b.n	80059ca <_free_r+0x26>
 8005a1c:	6825      	ldr	r5, [r4, #0]
 8005a1e:	1961      	adds	r1, r4, r5
 8005a20:	428b      	cmp	r3, r1
 8005a22:	bf04      	itt	eq
 8005a24:	6819      	ldreq	r1, [r3, #0]
 8005a26:	685b      	ldreq	r3, [r3, #4]
 8005a28:	6063      	str	r3, [r4, #4]
 8005a2a:	bf04      	itt	eq
 8005a2c:	1949      	addeq	r1, r1, r5
 8005a2e:	6021      	streq	r1, [r4, #0]
 8005a30:	6054      	str	r4, [r2, #4]
 8005a32:	e7ca      	b.n	80059ca <_free_r+0x26>
 8005a34:	b003      	add	sp, #12
 8005a36:	bd30      	pop	{r4, r5, pc}
 8005a38:	20000444 	.word	0x20000444

08005a3c <sbrk_aligned>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4e0e      	ldr	r6, [pc, #56]	; (8005a78 <sbrk_aligned+0x3c>)
 8005a40:	460c      	mov	r4, r1
 8005a42:	6831      	ldr	r1, [r6, #0]
 8005a44:	4605      	mov	r5, r0
 8005a46:	b911      	cbnz	r1, 8005a4e <sbrk_aligned+0x12>
 8005a48:	f000 f88c 	bl	8005b64 <_sbrk_r>
 8005a4c:	6030      	str	r0, [r6, #0]
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4628      	mov	r0, r5
 8005a52:	f000 f887 	bl	8005b64 <_sbrk_r>
 8005a56:	1c43      	adds	r3, r0, #1
 8005a58:	d00a      	beq.n	8005a70 <sbrk_aligned+0x34>
 8005a5a:	1cc4      	adds	r4, r0, #3
 8005a5c:	f024 0403 	bic.w	r4, r4, #3
 8005a60:	42a0      	cmp	r0, r4
 8005a62:	d007      	beq.n	8005a74 <sbrk_aligned+0x38>
 8005a64:	1a21      	subs	r1, r4, r0
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 f87c 	bl	8005b64 <_sbrk_r>
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d101      	bne.n	8005a74 <sbrk_aligned+0x38>
 8005a70:	f04f 34ff 	mov.w	r4, #4294967295
 8005a74:	4620      	mov	r0, r4
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	20000448 	.word	0x20000448

08005a7c <_malloc_r>:
 8005a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a80:	1ccd      	adds	r5, r1, #3
 8005a82:	f025 0503 	bic.w	r5, r5, #3
 8005a86:	3508      	adds	r5, #8
 8005a88:	2d0c      	cmp	r5, #12
 8005a8a:	bf38      	it	cc
 8005a8c:	250c      	movcc	r5, #12
 8005a8e:	2d00      	cmp	r5, #0
 8005a90:	4607      	mov	r7, r0
 8005a92:	db01      	blt.n	8005a98 <_malloc_r+0x1c>
 8005a94:	42a9      	cmp	r1, r5
 8005a96:	d905      	bls.n	8005aa4 <_malloc_r+0x28>
 8005a98:	230c      	movs	r3, #12
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	2600      	movs	r6, #0
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa4:	4e2e      	ldr	r6, [pc, #184]	; (8005b60 <_malloc_r+0xe4>)
 8005aa6:	f001 fad9 	bl	800705c <__malloc_lock>
 8005aaa:	6833      	ldr	r3, [r6, #0]
 8005aac:	461c      	mov	r4, r3
 8005aae:	bb34      	cbnz	r4, 8005afe <_malloc_r+0x82>
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	f7ff ffc2 	bl	8005a3c <sbrk_aligned>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	4604      	mov	r4, r0
 8005abc:	d14d      	bne.n	8005b5a <_malloc_r+0xde>
 8005abe:	6834      	ldr	r4, [r6, #0]
 8005ac0:	4626      	mov	r6, r4
 8005ac2:	2e00      	cmp	r6, #0
 8005ac4:	d140      	bne.n	8005b48 <_malloc_r+0xcc>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4638      	mov	r0, r7
 8005acc:	eb04 0803 	add.w	r8, r4, r3
 8005ad0:	f000 f848 	bl	8005b64 <_sbrk_r>
 8005ad4:	4580      	cmp	r8, r0
 8005ad6:	d13a      	bne.n	8005b4e <_malloc_r+0xd2>
 8005ad8:	6821      	ldr	r1, [r4, #0]
 8005ada:	3503      	adds	r5, #3
 8005adc:	1a6d      	subs	r5, r5, r1
 8005ade:	f025 0503 	bic.w	r5, r5, #3
 8005ae2:	3508      	adds	r5, #8
 8005ae4:	2d0c      	cmp	r5, #12
 8005ae6:	bf38      	it	cc
 8005ae8:	250c      	movcc	r5, #12
 8005aea:	4629      	mov	r1, r5
 8005aec:	4638      	mov	r0, r7
 8005aee:	f7ff ffa5 	bl	8005a3c <sbrk_aligned>
 8005af2:	3001      	adds	r0, #1
 8005af4:	d02b      	beq.n	8005b4e <_malloc_r+0xd2>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	442b      	add	r3, r5
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	e00e      	b.n	8005b1c <_malloc_r+0xa0>
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	1b52      	subs	r2, r2, r5
 8005b02:	d41e      	bmi.n	8005b42 <_malloc_r+0xc6>
 8005b04:	2a0b      	cmp	r2, #11
 8005b06:	d916      	bls.n	8005b36 <_malloc_r+0xba>
 8005b08:	1961      	adds	r1, r4, r5
 8005b0a:	42a3      	cmp	r3, r4
 8005b0c:	6025      	str	r5, [r4, #0]
 8005b0e:	bf18      	it	ne
 8005b10:	6059      	strne	r1, [r3, #4]
 8005b12:	6863      	ldr	r3, [r4, #4]
 8005b14:	bf08      	it	eq
 8005b16:	6031      	streq	r1, [r6, #0]
 8005b18:	5162      	str	r2, [r4, r5]
 8005b1a:	604b      	str	r3, [r1, #4]
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	f104 060b 	add.w	r6, r4, #11
 8005b22:	f001 faa1 	bl	8007068 <__malloc_unlock>
 8005b26:	f026 0607 	bic.w	r6, r6, #7
 8005b2a:	1d23      	adds	r3, r4, #4
 8005b2c:	1af2      	subs	r2, r6, r3
 8005b2e:	d0b6      	beq.n	8005a9e <_malloc_r+0x22>
 8005b30:	1b9b      	subs	r3, r3, r6
 8005b32:	50a3      	str	r3, [r4, r2]
 8005b34:	e7b3      	b.n	8005a9e <_malloc_r+0x22>
 8005b36:	6862      	ldr	r2, [r4, #4]
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	bf0c      	ite	eq
 8005b3c:	6032      	streq	r2, [r6, #0]
 8005b3e:	605a      	strne	r2, [r3, #4]
 8005b40:	e7ec      	b.n	8005b1c <_malloc_r+0xa0>
 8005b42:	4623      	mov	r3, r4
 8005b44:	6864      	ldr	r4, [r4, #4]
 8005b46:	e7b2      	b.n	8005aae <_malloc_r+0x32>
 8005b48:	4634      	mov	r4, r6
 8005b4a:	6876      	ldr	r6, [r6, #4]
 8005b4c:	e7b9      	b.n	8005ac2 <_malloc_r+0x46>
 8005b4e:	230c      	movs	r3, #12
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	4638      	mov	r0, r7
 8005b54:	f001 fa88 	bl	8007068 <__malloc_unlock>
 8005b58:	e7a1      	b.n	8005a9e <_malloc_r+0x22>
 8005b5a:	6025      	str	r5, [r4, #0]
 8005b5c:	e7de      	b.n	8005b1c <_malloc_r+0xa0>
 8005b5e:	bf00      	nop
 8005b60:	20000444 	.word	0x20000444

08005b64 <_sbrk_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4d06      	ldr	r5, [pc, #24]	; (8005b80 <_sbrk_r+0x1c>)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	602b      	str	r3, [r5, #0]
 8005b70:	f7fc fa94 	bl	800209c <_sbrk>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_sbrk_r+0x1a>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_sbrk_r+0x1a>
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	2000044c 	.word	0x2000044c

08005b84 <siprintf>:
 8005b84:	b40e      	push	{r1, r2, r3}
 8005b86:	b500      	push	{lr}
 8005b88:	b09c      	sub	sp, #112	; 0x70
 8005b8a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b8c:	9002      	str	r0, [sp, #8]
 8005b8e:	9006      	str	r0, [sp, #24]
 8005b90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b94:	4809      	ldr	r0, [pc, #36]	; (8005bbc <siprintf+0x38>)
 8005b96:	9107      	str	r1, [sp, #28]
 8005b98:	9104      	str	r1, [sp, #16]
 8005b9a:	4909      	ldr	r1, [pc, #36]	; (8005bc0 <siprintf+0x3c>)
 8005b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba0:	9105      	str	r1, [sp, #20]
 8005ba2:	6800      	ldr	r0, [r0, #0]
 8005ba4:	9301      	str	r3, [sp, #4]
 8005ba6:	a902      	add	r1, sp, #8
 8005ba8:	f001 ff96 	bl	8007ad8 <_svfiprintf_r>
 8005bac:	9b02      	ldr	r3, [sp, #8]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	b01c      	add	sp, #112	; 0x70
 8005bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bb8:	b003      	add	sp, #12
 8005bba:	4770      	bx	lr
 8005bbc:	2000000c 	.word	0x2000000c
 8005bc0:	ffff0208 	.word	0xffff0208

08005bc4 <sulp>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	460d      	mov	r5, r1
 8005bca:	ec45 4b10 	vmov	d0, r4, r5
 8005bce:	4616      	mov	r6, r2
 8005bd0:	f001 fdc2 	bl	8007758 <__ulp>
 8005bd4:	ec51 0b10 	vmov	r0, r1, d0
 8005bd8:	b17e      	cbz	r6, 8005bfa <sulp+0x36>
 8005bda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005bde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dd09      	ble.n	8005bfa <sulp+0x36>
 8005be6:	051b      	lsls	r3, r3, #20
 8005be8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005bec:	2400      	movs	r4, #0
 8005bee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	462b      	mov	r3, r5
 8005bf6:	f7fa fd17 	bl	8000628 <__aeabi_dmul>
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	0000      	movs	r0, r0
	...

08005c00 <_strtod_l>:
 8005c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c04:	ed2d 8b02 	vpush	{d8}
 8005c08:	b09d      	sub	sp, #116	; 0x74
 8005c0a:	461f      	mov	r7, r3
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9318      	str	r3, [sp, #96]	; 0x60
 8005c10:	4ba2      	ldr	r3, [pc, #648]	; (8005e9c <_strtod_l+0x29c>)
 8005c12:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	9305      	str	r3, [sp, #20]
 8005c18:	4604      	mov	r4, r0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	4688      	mov	r8, r1
 8005c1e:	f7fa fae9 	bl	80001f4 <strlen>
 8005c22:	f04f 0a00 	mov.w	sl, #0
 8005c26:	4605      	mov	r5, r0
 8005c28:	f04f 0b00 	mov.w	fp, #0
 8005c2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c32:	781a      	ldrb	r2, [r3, #0]
 8005c34:	2a2b      	cmp	r2, #43	; 0x2b
 8005c36:	d04e      	beq.n	8005cd6 <_strtod_l+0xd6>
 8005c38:	d83b      	bhi.n	8005cb2 <_strtod_l+0xb2>
 8005c3a:	2a0d      	cmp	r2, #13
 8005c3c:	d834      	bhi.n	8005ca8 <_strtod_l+0xa8>
 8005c3e:	2a08      	cmp	r2, #8
 8005c40:	d834      	bhi.n	8005cac <_strtod_l+0xac>
 8005c42:	2a00      	cmp	r2, #0
 8005c44:	d03e      	beq.n	8005cc4 <_strtod_l+0xc4>
 8005c46:	2300      	movs	r3, #0
 8005c48:	930a      	str	r3, [sp, #40]	; 0x28
 8005c4a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005c4c:	7833      	ldrb	r3, [r6, #0]
 8005c4e:	2b30      	cmp	r3, #48	; 0x30
 8005c50:	f040 80b0 	bne.w	8005db4 <_strtod_l+0x1b4>
 8005c54:	7873      	ldrb	r3, [r6, #1]
 8005c56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c5a:	2b58      	cmp	r3, #88	; 0x58
 8005c5c:	d168      	bne.n	8005d30 <_strtod_l+0x130>
 8005c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c60:	9301      	str	r3, [sp, #4]
 8005c62:	ab18      	add	r3, sp, #96	; 0x60
 8005c64:	9702      	str	r7, [sp, #8]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4a8d      	ldr	r2, [pc, #564]	; (8005ea0 <_strtod_l+0x2a0>)
 8005c6a:	ab19      	add	r3, sp, #100	; 0x64
 8005c6c:	a917      	add	r1, sp, #92	; 0x5c
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 fecc 	bl	8006a0c <__gethex>
 8005c74:	f010 0707 	ands.w	r7, r0, #7
 8005c78:	4605      	mov	r5, r0
 8005c7a:	d005      	beq.n	8005c88 <_strtod_l+0x88>
 8005c7c:	2f06      	cmp	r7, #6
 8005c7e:	d12c      	bne.n	8005cda <_strtod_l+0xda>
 8005c80:	3601      	adds	r6, #1
 8005c82:	2300      	movs	r3, #0
 8005c84:	9617      	str	r6, [sp, #92]	; 0x5c
 8005c86:	930a      	str	r3, [sp, #40]	; 0x28
 8005c88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f040 8590 	bne.w	80067b0 <_strtod_l+0xbb0>
 8005c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c92:	b1eb      	cbz	r3, 8005cd0 <_strtod_l+0xd0>
 8005c94:	4652      	mov	r2, sl
 8005c96:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005c9a:	ec43 2b10 	vmov	d0, r2, r3
 8005c9e:	b01d      	add	sp, #116	; 0x74
 8005ca0:	ecbd 8b02 	vpop	{d8}
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca8:	2a20      	cmp	r2, #32
 8005caa:	d1cc      	bne.n	8005c46 <_strtod_l+0x46>
 8005cac:	3301      	adds	r3, #1
 8005cae:	9317      	str	r3, [sp, #92]	; 0x5c
 8005cb0:	e7be      	b.n	8005c30 <_strtod_l+0x30>
 8005cb2:	2a2d      	cmp	r2, #45	; 0x2d
 8005cb4:	d1c7      	bne.n	8005c46 <_strtod_l+0x46>
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	920a      	str	r2, [sp, #40]	; 0x28
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1c2      	bne.n	8005c4a <_strtod_l+0x4a>
 8005cc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cc6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f040 856e 	bne.w	80067ac <_strtod_l+0xbac>
 8005cd0:	4652      	mov	r2, sl
 8005cd2:	465b      	mov	r3, fp
 8005cd4:	e7e1      	b.n	8005c9a <_strtod_l+0x9a>
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	e7ee      	b.n	8005cb8 <_strtod_l+0xb8>
 8005cda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005cdc:	b13a      	cbz	r2, 8005cee <_strtod_l+0xee>
 8005cde:	2135      	movs	r1, #53	; 0x35
 8005ce0:	a81a      	add	r0, sp, #104	; 0x68
 8005ce2:	f001 fe44 	bl	800796e <__copybits>
 8005ce6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f001 fa03 	bl	80070f4 <_Bfree>
 8005cee:	3f01      	subs	r7, #1
 8005cf0:	2f04      	cmp	r7, #4
 8005cf2:	d806      	bhi.n	8005d02 <_strtod_l+0x102>
 8005cf4:	e8df f007 	tbb	[pc, r7]
 8005cf8:	1714030a 	.word	0x1714030a
 8005cfc:	0a          	.byte	0x0a
 8005cfd:	00          	.byte	0x00
 8005cfe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005d02:	0728      	lsls	r0, r5, #28
 8005d04:	d5c0      	bpl.n	8005c88 <_strtod_l+0x88>
 8005d06:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005d0a:	e7bd      	b.n	8005c88 <_strtod_l+0x88>
 8005d0c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005d10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005d1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005d1e:	e7f0      	b.n	8005d02 <_strtod_l+0x102>
 8005d20:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005ea4 <_strtod_l+0x2a4>
 8005d24:	e7ed      	b.n	8005d02 <_strtod_l+0x102>
 8005d26:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005d2a:	f04f 3aff 	mov.w	sl, #4294967295
 8005d2e:	e7e8      	b.n	8005d02 <_strtod_l+0x102>
 8005d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	2b30      	cmp	r3, #48	; 0x30
 8005d3a:	d0f9      	beq.n	8005d30 <_strtod_l+0x130>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0a3      	beq.n	8005c88 <_strtod_l+0x88>
 8005d40:	2301      	movs	r3, #1
 8005d42:	f04f 0900 	mov.w	r9, #0
 8005d46:	9304      	str	r3, [sp, #16]
 8005d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d4a:	9308      	str	r3, [sp, #32]
 8005d4c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d50:	464f      	mov	r7, r9
 8005d52:	220a      	movs	r2, #10
 8005d54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005d56:	7806      	ldrb	r6, [r0, #0]
 8005d58:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005d5c:	b2d9      	uxtb	r1, r3
 8005d5e:	2909      	cmp	r1, #9
 8005d60:	d92a      	bls.n	8005db8 <_strtod_l+0x1b8>
 8005d62:	9905      	ldr	r1, [sp, #20]
 8005d64:	462a      	mov	r2, r5
 8005d66:	f002 faaf 	bl	80082c8 <strncmp>
 8005d6a:	b398      	cbz	r0, 8005dd4 <_strtod_l+0x1d4>
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	4632      	mov	r2, r6
 8005d70:	463d      	mov	r5, r7
 8005d72:	9005      	str	r0, [sp, #20]
 8005d74:	4603      	mov	r3, r0
 8005d76:	2a65      	cmp	r2, #101	; 0x65
 8005d78:	d001      	beq.n	8005d7e <_strtod_l+0x17e>
 8005d7a:	2a45      	cmp	r2, #69	; 0x45
 8005d7c:	d118      	bne.n	8005db0 <_strtod_l+0x1b0>
 8005d7e:	b91d      	cbnz	r5, 8005d88 <_strtod_l+0x188>
 8005d80:	9a04      	ldr	r2, [sp, #16]
 8005d82:	4302      	orrs	r2, r0
 8005d84:	d09e      	beq.n	8005cc4 <_strtod_l+0xc4>
 8005d86:	2500      	movs	r5, #0
 8005d88:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005d8c:	f108 0201 	add.w	r2, r8, #1
 8005d90:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d92:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005d96:	2a2b      	cmp	r2, #43	; 0x2b
 8005d98:	d075      	beq.n	8005e86 <_strtod_l+0x286>
 8005d9a:	2a2d      	cmp	r2, #45	; 0x2d
 8005d9c:	d07b      	beq.n	8005e96 <_strtod_l+0x296>
 8005d9e:	f04f 0c00 	mov.w	ip, #0
 8005da2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005da6:	2909      	cmp	r1, #9
 8005da8:	f240 8082 	bls.w	8005eb0 <_strtod_l+0x2b0>
 8005dac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005db0:	2600      	movs	r6, #0
 8005db2:	e09d      	b.n	8005ef0 <_strtod_l+0x2f0>
 8005db4:	2300      	movs	r3, #0
 8005db6:	e7c4      	b.n	8005d42 <_strtod_l+0x142>
 8005db8:	2f08      	cmp	r7, #8
 8005dba:	bfd8      	it	le
 8005dbc:	9907      	ldrle	r1, [sp, #28]
 8005dbe:	f100 0001 	add.w	r0, r0, #1
 8005dc2:	bfda      	itte	le
 8005dc4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005dc8:	9307      	strle	r3, [sp, #28]
 8005dca:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005dce:	3701      	adds	r7, #1
 8005dd0:	9017      	str	r0, [sp, #92]	; 0x5c
 8005dd2:	e7bf      	b.n	8005d54 <_strtod_l+0x154>
 8005dd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dd6:	195a      	adds	r2, r3, r5
 8005dd8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005dda:	5d5a      	ldrb	r2, [r3, r5]
 8005ddc:	2f00      	cmp	r7, #0
 8005dde:	d037      	beq.n	8005e50 <_strtod_l+0x250>
 8005de0:	9005      	str	r0, [sp, #20]
 8005de2:	463d      	mov	r5, r7
 8005de4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d912      	bls.n	8005e12 <_strtod_l+0x212>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e7c2      	b.n	8005d76 <_strtod_l+0x176>
 8005df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005df6:	785a      	ldrb	r2, [r3, #1]
 8005df8:	3001      	adds	r0, #1
 8005dfa:	2a30      	cmp	r2, #48	; 0x30
 8005dfc:	d0f8      	beq.n	8005df0 <_strtod_l+0x1f0>
 8005dfe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	f200 84d9 	bhi.w	80067ba <_strtod_l+0xbba>
 8005e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e0a:	9005      	str	r0, [sp, #20]
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	9308      	str	r3, [sp, #32]
 8005e10:	4605      	mov	r5, r0
 8005e12:	3a30      	subs	r2, #48	; 0x30
 8005e14:	f100 0301 	add.w	r3, r0, #1
 8005e18:	d014      	beq.n	8005e44 <_strtod_l+0x244>
 8005e1a:	9905      	ldr	r1, [sp, #20]
 8005e1c:	4419      	add	r1, r3
 8005e1e:	9105      	str	r1, [sp, #20]
 8005e20:	462b      	mov	r3, r5
 8005e22:	eb00 0e05 	add.w	lr, r0, r5
 8005e26:	210a      	movs	r1, #10
 8005e28:	4573      	cmp	r3, lr
 8005e2a:	d113      	bne.n	8005e54 <_strtod_l+0x254>
 8005e2c:	182b      	adds	r3, r5, r0
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	f105 0501 	add.w	r5, r5, #1
 8005e34:	4405      	add	r5, r0
 8005e36:	dc1c      	bgt.n	8005e72 <_strtod_l+0x272>
 8005e38:	9907      	ldr	r1, [sp, #28]
 8005e3a:	230a      	movs	r3, #10
 8005e3c:	fb03 2301 	mla	r3, r3, r1, r2
 8005e40:	9307      	str	r3, [sp, #28]
 8005e42:	2300      	movs	r3, #0
 8005e44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e46:	1c51      	adds	r1, r2, #1
 8005e48:	9117      	str	r1, [sp, #92]	; 0x5c
 8005e4a:	7852      	ldrb	r2, [r2, #1]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	e7c9      	b.n	8005de4 <_strtod_l+0x1e4>
 8005e50:	4638      	mov	r0, r7
 8005e52:	e7d2      	b.n	8005dfa <_strtod_l+0x1fa>
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	dc04      	bgt.n	8005e62 <_strtod_l+0x262>
 8005e58:	9e07      	ldr	r6, [sp, #28]
 8005e5a:	434e      	muls	r6, r1
 8005e5c:	9607      	str	r6, [sp, #28]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	e7e2      	b.n	8005e28 <_strtod_l+0x228>
 8005e62:	f103 0c01 	add.w	ip, r3, #1
 8005e66:	f1bc 0f10 	cmp.w	ip, #16
 8005e6a:	bfd8      	it	le
 8005e6c:	fb01 f909 	mulle.w	r9, r1, r9
 8005e70:	e7f5      	b.n	8005e5e <_strtod_l+0x25e>
 8005e72:	2d10      	cmp	r5, #16
 8005e74:	bfdc      	itt	le
 8005e76:	230a      	movle	r3, #10
 8005e78:	fb03 2909 	mlale	r9, r3, r9, r2
 8005e7c:	e7e1      	b.n	8005e42 <_strtod_l+0x242>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	9305      	str	r3, [sp, #20]
 8005e82:	2301      	movs	r3, #1
 8005e84:	e77c      	b.n	8005d80 <_strtod_l+0x180>
 8005e86:	f04f 0c00 	mov.w	ip, #0
 8005e8a:	f108 0202 	add.w	r2, r8, #2
 8005e8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e90:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005e94:	e785      	b.n	8005da2 <_strtod_l+0x1a2>
 8005e96:	f04f 0c01 	mov.w	ip, #1
 8005e9a:	e7f6      	b.n	8005e8a <_strtod_l+0x28a>
 8005e9c:	08008d60 	.word	0x08008d60
 8005ea0:	08008be8 	.word	0x08008be8
 8005ea4:	7ff00000 	.word	0x7ff00000
 8005ea8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005eaa:	1c51      	adds	r1, r2, #1
 8005eac:	9117      	str	r1, [sp, #92]	; 0x5c
 8005eae:	7852      	ldrb	r2, [r2, #1]
 8005eb0:	2a30      	cmp	r2, #48	; 0x30
 8005eb2:	d0f9      	beq.n	8005ea8 <_strtod_l+0x2a8>
 8005eb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005eb8:	2908      	cmp	r1, #8
 8005eba:	f63f af79 	bhi.w	8005db0 <_strtod_l+0x1b0>
 8005ebe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005ec2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ec4:	9206      	str	r2, [sp, #24]
 8005ec6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ec8:	1c51      	adds	r1, r2, #1
 8005eca:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ecc:	7852      	ldrb	r2, [r2, #1]
 8005ece:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005ed2:	2e09      	cmp	r6, #9
 8005ed4:	d937      	bls.n	8005f46 <_strtod_l+0x346>
 8005ed6:	9e06      	ldr	r6, [sp, #24]
 8005ed8:	1b89      	subs	r1, r1, r6
 8005eda:	2908      	cmp	r1, #8
 8005edc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005ee0:	dc02      	bgt.n	8005ee8 <_strtod_l+0x2e8>
 8005ee2:	4576      	cmp	r6, lr
 8005ee4:	bfa8      	it	ge
 8005ee6:	4676      	movge	r6, lr
 8005ee8:	f1bc 0f00 	cmp.w	ip, #0
 8005eec:	d000      	beq.n	8005ef0 <_strtod_l+0x2f0>
 8005eee:	4276      	negs	r6, r6
 8005ef0:	2d00      	cmp	r5, #0
 8005ef2:	d14d      	bne.n	8005f90 <_strtod_l+0x390>
 8005ef4:	9904      	ldr	r1, [sp, #16]
 8005ef6:	4301      	orrs	r1, r0
 8005ef8:	f47f aec6 	bne.w	8005c88 <_strtod_l+0x88>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f47f aee1 	bne.w	8005cc4 <_strtod_l+0xc4>
 8005f02:	2a69      	cmp	r2, #105	; 0x69
 8005f04:	d027      	beq.n	8005f56 <_strtod_l+0x356>
 8005f06:	dc24      	bgt.n	8005f52 <_strtod_l+0x352>
 8005f08:	2a49      	cmp	r2, #73	; 0x49
 8005f0a:	d024      	beq.n	8005f56 <_strtod_l+0x356>
 8005f0c:	2a4e      	cmp	r2, #78	; 0x4e
 8005f0e:	f47f aed9 	bne.w	8005cc4 <_strtod_l+0xc4>
 8005f12:	499f      	ldr	r1, [pc, #636]	; (8006190 <_strtod_l+0x590>)
 8005f14:	a817      	add	r0, sp, #92	; 0x5c
 8005f16:	f000 ffd1 	bl	8006ebc <__match>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	f43f aed2 	beq.w	8005cc4 <_strtod_l+0xc4>
 8005f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b28      	cmp	r3, #40	; 0x28
 8005f26:	d12d      	bne.n	8005f84 <_strtod_l+0x384>
 8005f28:	499a      	ldr	r1, [pc, #616]	; (8006194 <_strtod_l+0x594>)
 8005f2a:	aa1a      	add	r2, sp, #104	; 0x68
 8005f2c:	a817      	add	r0, sp, #92	; 0x5c
 8005f2e:	f000 ffd9 	bl	8006ee4 <__hexnan>
 8005f32:	2805      	cmp	r0, #5
 8005f34:	d126      	bne.n	8005f84 <_strtod_l+0x384>
 8005f36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f38:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005f3c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005f40:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005f44:	e6a0      	b.n	8005c88 <_strtod_l+0x88>
 8005f46:	210a      	movs	r1, #10
 8005f48:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005f4c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005f50:	e7b9      	b.n	8005ec6 <_strtod_l+0x2c6>
 8005f52:	2a6e      	cmp	r2, #110	; 0x6e
 8005f54:	e7db      	b.n	8005f0e <_strtod_l+0x30e>
 8005f56:	4990      	ldr	r1, [pc, #576]	; (8006198 <_strtod_l+0x598>)
 8005f58:	a817      	add	r0, sp, #92	; 0x5c
 8005f5a:	f000 ffaf 	bl	8006ebc <__match>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	f43f aeb0 	beq.w	8005cc4 <_strtod_l+0xc4>
 8005f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f66:	498d      	ldr	r1, [pc, #564]	; (800619c <_strtod_l+0x59c>)
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	a817      	add	r0, sp, #92	; 0x5c
 8005f6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f6e:	f000 ffa5 	bl	8006ebc <__match>
 8005f72:	b910      	cbnz	r0, 8005f7a <_strtod_l+0x37a>
 8005f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f76:	3301      	adds	r3, #1
 8005f78:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f7a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80061ac <_strtod_l+0x5ac>
 8005f7e:	f04f 0a00 	mov.w	sl, #0
 8005f82:	e681      	b.n	8005c88 <_strtod_l+0x88>
 8005f84:	4886      	ldr	r0, [pc, #536]	; (80061a0 <_strtod_l+0x5a0>)
 8005f86:	f002 f997 	bl	80082b8 <nan>
 8005f8a:	ec5b ab10 	vmov	sl, fp, d0
 8005f8e:	e67b      	b.n	8005c88 <_strtod_l+0x88>
 8005f90:	9b05      	ldr	r3, [sp, #20]
 8005f92:	9807      	ldr	r0, [sp, #28]
 8005f94:	1af3      	subs	r3, r6, r3
 8005f96:	2f00      	cmp	r7, #0
 8005f98:	bf08      	it	eq
 8005f9a:	462f      	moveq	r7, r5
 8005f9c:	2d10      	cmp	r5, #16
 8005f9e:	9306      	str	r3, [sp, #24]
 8005fa0:	46a8      	mov	r8, r5
 8005fa2:	bfa8      	it	ge
 8005fa4:	f04f 0810 	movge.w	r8, #16
 8005fa8:	f7fa fac4 	bl	8000534 <__aeabi_ui2d>
 8005fac:	2d09      	cmp	r5, #9
 8005fae:	4682      	mov	sl, r0
 8005fb0:	468b      	mov	fp, r1
 8005fb2:	dd13      	ble.n	8005fdc <_strtod_l+0x3dc>
 8005fb4:	4b7b      	ldr	r3, [pc, #492]	; (80061a4 <_strtod_l+0x5a4>)
 8005fb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005fba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005fbe:	f7fa fb33 	bl	8000628 <__aeabi_dmul>
 8005fc2:	4682      	mov	sl, r0
 8005fc4:	4648      	mov	r0, r9
 8005fc6:	468b      	mov	fp, r1
 8005fc8:	f7fa fab4 	bl	8000534 <__aeabi_ui2d>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	4659      	mov	r1, fp
 8005fd4:	f7fa f972 	bl	80002bc <__adddf3>
 8005fd8:	4682      	mov	sl, r0
 8005fda:	468b      	mov	fp, r1
 8005fdc:	2d0f      	cmp	r5, #15
 8005fde:	dc38      	bgt.n	8006052 <_strtod_l+0x452>
 8005fe0:	9b06      	ldr	r3, [sp, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f43f ae50 	beq.w	8005c88 <_strtod_l+0x88>
 8005fe8:	dd24      	ble.n	8006034 <_strtod_l+0x434>
 8005fea:	2b16      	cmp	r3, #22
 8005fec:	dc0b      	bgt.n	8006006 <_strtod_l+0x406>
 8005fee:	496d      	ldr	r1, [pc, #436]	; (80061a4 <_strtod_l+0x5a4>)
 8005ff0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ff8:	4652      	mov	r2, sl
 8005ffa:	465b      	mov	r3, fp
 8005ffc:	f7fa fb14 	bl	8000628 <__aeabi_dmul>
 8006000:	4682      	mov	sl, r0
 8006002:	468b      	mov	fp, r1
 8006004:	e640      	b.n	8005c88 <_strtod_l+0x88>
 8006006:	9a06      	ldr	r2, [sp, #24]
 8006008:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800600c:	4293      	cmp	r3, r2
 800600e:	db20      	blt.n	8006052 <_strtod_l+0x452>
 8006010:	4c64      	ldr	r4, [pc, #400]	; (80061a4 <_strtod_l+0x5a4>)
 8006012:	f1c5 050f 	rsb	r5, r5, #15
 8006016:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800601a:	4652      	mov	r2, sl
 800601c:	465b      	mov	r3, fp
 800601e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006022:	f7fa fb01 	bl	8000628 <__aeabi_dmul>
 8006026:	9b06      	ldr	r3, [sp, #24]
 8006028:	1b5d      	subs	r5, r3, r5
 800602a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800602e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006032:	e7e3      	b.n	8005ffc <_strtod_l+0x3fc>
 8006034:	9b06      	ldr	r3, [sp, #24]
 8006036:	3316      	adds	r3, #22
 8006038:	db0b      	blt.n	8006052 <_strtod_l+0x452>
 800603a:	9b05      	ldr	r3, [sp, #20]
 800603c:	1b9e      	subs	r6, r3, r6
 800603e:	4b59      	ldr	r3, [pc, #356]	; (80061a4 <_strtod_l+0x5a4>)
 8006040:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006044:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006048:	4650      	mov	r0, sl
 800604a:	4659      	mov	r1, fp
 800604c:	f7fa fc16 	bl	800087c <__aeabi_ddiv>
 8006050:	e7d6      	b.n	8006000 <_strtod_l+0x400>
 8006052:	9b06      	ldr	r3, [sp, #24]
 8006054:	eba5 0808 	sub.w	r8, r5, r8
 8006058:	4498      	add	r8, r3
 800605a:	f1b8 0f00 	cmp.w	r8, #0
 800605e:	dd74      	ble.n	800614a <_strtod_l+0x54a>
 8006060:	f018 030f 	ands.w	r3, r8, #15
 8006064:	d00a      	beq.n	800607c <_strtod_l+0x47c>
 8006066:	494f      	ldr	r1, [pc, #316]	; (80061a4 <_strtod_l+0x5a4>)
 8006068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800606c:	4652      	mov	r2, sl
 800606e:	465b      	mov	r3, fp
 8006070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006074:	f7fa fad8 	bl	8000628 <__aeabi_dmul>
 8006078:	4682      	mov	sl, r0
 800607a:	468b      	mov	fp, r1
 800607c:	f038 080f 	bics.w	r8, r8, #15
 8006080:	d04f      	beq.n	8006122 <_strtod_l+0x522>
 8006082:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006086:	dd22      	ble.n	80060ce <_strtod_l+0x4ce>
 8006088:	2500      	movs	r5, #0
 800608a:	462e      	mov	r6, r5
 800608c:	9507      	str	r5, [sp, #28]
 800608e:	9505      	str	r5, [sp, #20]
 8006090:	2322      	movs	r3, #34	; 0x22
 8006092:	f8df b118 	ldr.w	fp, [pc, #280]	; 80061ac <_strtod_l+0x5ac>
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	f04f 0a00 	mov.w	sl, #0
 800609c:	9b07      	ldr	r3, [sp, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f43f adf2 	beq.w	8005c88 <_strtod_l+0x88>
 80060a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80060a6:	4620      	mov	r0, r4
 80060a8:	f001 f824 	bl	80070f4 <_Bfree>
 80060ac:	9905      	ldr	r1, [sp, #20]
 80060ae:	4620      	mov	r0, r4
 80060b0:	f001 f820 	bl	80070f4 <_Bfree>
 80060b4:	4631      	mov	r1, r6
 80060b6:	4620      	mov	r0, r4
 80060b8:	f001 f81c 	bl	80070f4 <_Bfree>
 80060bc:	9907      	ldr	r1, [sp, #28]
 80060be:	4620      	mov	r0, r4
 80060c0:	f001 f818 	bl	80070f4 <_Bfree>
 80060c4:	4629      	mov	r1, r5
 80060c6:	4620      	mov	r0, r4
 80060c8:	f001 f814 	bl	80070f4 <_Bfree>
 80060cc:	e5dc      	b.n	8005c88 <_strtod_l+0x88>
 80060ce:	4b36      	ldr	r3, [pc, #216]	; (80061a8 <_strtod_l+0x5a8>)
 80060d0:	9304      	str	r3, [sp, #16]
 80060d2:	2300      	movs	r3, #0
 80060d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80060d8:	4650      	mov	r0, sl
 80060da:	4659      	mov	r1, fp
 80060dc:	4699      	mov	r9, r3
 80060de:	f1b8 0f01 	cmp.w	r8, #1
 80060e2:	dc21      	bgt.n	8006128 <_strtod_l+0x528>
 80060e4:	b10b      	cbz	r3, 80060ea <_strtod_l+0x4ea>
 80060e6:	4682      	mov	sl, r0
 80060e8:	468b      	mov	fp, r1
 80060ea:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <_strtod_l+0x5a8>)
 80060ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80060f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80060f4:	4652      	mov	r2, sl
 80060f6:	465b      	mov	r3, fp
 80060f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80060fc:	f7fa fa94 	bl	8000628 <__aeabi_dmul>
 8006100:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <_strtod_l+0x5ac>)
 8006102:	460a      	mov	r2, r1
 8006104:	400b      	ands	r3, r1
 8006106:	492a      	ldr	r1, [pc, #168]	; (80061b0 <_strtod_l+0x5b0>)
 8006108:	428b      	cmp	r3, r1
 800610a:	4682      	mov	sl, r0
 800610c:	d8bc      	bhi.n	8006088 <_strtod_l+0x488>
 800610e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006112:	428b      	cmp	r3, r1
 8006114:	bf86      	itte	hi
 8006116:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80061b4 <_strtod_l+0x5b4>
 800611a:	f04f 3aff 	movhi.w	sl, #4294967295
 800611e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006122:	2300      	movs	r3, #0
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	e084      	b.n	8006232 <_strtod_l+0x632>
 8006128:	f018 0f01 	tst.w	r8, #1
 800612c:	d005      	beq.n	800613a <_strtod_l+0x53a>
 800612e:	9b04      	ldr	r3, [sp, #16]
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f7fa fa78 	bl	8000628 <__aeabi_dmul>
 8006138:	2301      	movs	r3, #1
 800613a:	9a04      	ldr	r2, [sp, #16]
 800613c:	3208      	adds	r2, #8
 800613e:	f109 0901 	add.w	r9, r9, #1
 8006142:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006146:	9204      	str	r2, [sp, #16]
 8006148:	e7c9      	b.n	80060de <_strtod_l+0x4de>
 800614a:	d0ea      	beq.n	8006122 <_strtod_l+0x522>
 800614c:	f1c8 0800 	rsb	r8, r8, #0
 8006150:	f018 020f 	ands.w	r2, r8, #15
 8006154:	d00a      	beq.n	800616c <_strtod_l+0x56c>
 8006156:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <_strtod_l+0x5a4>)
 8006158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800615c:	4650      	mov	r0, sl
 800615e:	4659      	mov	r1, fp
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f7fa fb8a 	bl	800087c <__aeabi_ddiv>
 8006168:	4682      	mov	sl, r0
 800616a:	468b      	mov	fp, r1
 800616c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006170:	d0d7      	beq.n	8006122 <_strtod_l+0x522>
 8006172:	f1b8 0f1f 	cmp.w	r8, #31
 8006176:	dd1f      	ble.n	80061b8 <_strtod_l+0x5b8>
 8006178:	2500      	movs	r5, #0
 800617a:	462e      	mov	r6, r5
 800617c:	9507      	str	r5, [sp, #28]
 800617e:	9505      	str	r5, [sp, #20]
 8006180:	2322      	movs	r3, #34	; 0x22
 8006182:	f04f 0a00 	mov.w	sl, #0
 8006186:	f04f 0b00 	mov.w	fp, #0
 800618a:	6023      	str	r3, [r4, #0]
 800618c:	e786      	b.n	800609c <_strtod_l+0x49c>
 800618e:	bf00      	nop
 8006190:	08008be5 	.word	0x08008be5
 8006194:	08008bfc 	.word	0x08008bfc
 8006198:	08008bdc 	.word	0x08008bdc
 800619c:	08008bdf 	.word	0x08008bdf
 80061a0:	08008ce7 	.word	0x08008ce7
 80061a4:	08008df8 	.word	0x08008df8
 80061a8:	08008dd0 	.word	0x08008dd0
 80061ac:	7ff00000 	.word	0x7ff00000
 80061b0:	7ca00000 	.word	0x7ca00000
 80061b4:	7fefffff 	.word	0x7fefffff
 80061b8:	f018 0310 	ands.w	r3, r8, #16
 80061bc:	bf18      	it	ne
 80061be:	236a      	movne	r3, #106	; 0x6a
 80061c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006570 <_strtod_l+0x970>
 80061c4:	9304      	str	r3, [sp, #16]
 80061c6:	4650      	mov	r0, sl
 80061c8:	4659      	mov	r1, fp
 80061ca:	2300      	movs	r3, #0
 80061cc:	f018 0f01 	tst.w	r8, #1
 80061d0:	d004      	beq.n	80061dc <_strtod_l+0x5dc>
 80061d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80061d6:	f7fa fa27 	bl	8000628 <__aeabi_dmul>
 80061da:	2301      	movs	r3, #1
 80061dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80061e0:	f109 0908 	add.w	r9, r9, #8
 80061e4:	d1f2      	bne.n	80061cc <_strtod_l+0x5cc>
 80061e6:	b10b      	cbz	r3, 80061ec <_strtod_l+0x5ec>
 80061e8:	4682      	mov	sl, r0
 80061ea:	468b      	mov	fp, r1
 80061ec:	9b04      	ldr	r3, [sp, #16]
 80061ee:	b1c3      	cbz	r3, 8006222 <_strtod_l+0x622>
 80061f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80061f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	4659      	mov	r1, fp
 80061fc:	dd11      	ble.n	8006222 <_strtod_l+0x622>
 80061fe:	2b1f      	cmp	r3, #31
 8006200:	f340 8124 	ble.w	800644c <_strtod_l+0x84c>
 8006204:	2b34      	cmp	r3, #52	; 0x34
 8006206:	bfde      	ittt	le
 8006208:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800620c:	f04f 33ff 	movle.w	r3, #4294967295
 8006210:	fa03 f202 	lslle.w	r2, r3, r2
 8006214:	f04f 0a00 	mov.w	sl, #0
 8006218:	bfcc      	ite	gt
 800621a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800621e:	ea02 0b01 	andle.w	fp, r2, r1
 8006222:	2200      	movs	r2, #0
 8006224:	2300      	movs	r3, #0
 8006226:	4650      	mov	r0, sl
 8006228:	4659      	mov	r1, fp
 800622a:	f7fa fc65 	bl	8000af8 <__aeabi_dcmpeq>
 800622e:	2800      	cmp	r0, #0
 8006230:	d1a2      	bne.n	8006178 <_strtod_l+0x578>
 8006232:	9b07      	ldr	r3, [sp, #28]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	9908      	ldr	r1, [sp, #32]
 8006238:	462b      	mov	r3, r5
 800623a:	463a      	mov	r2, r7
 800623c:	4620      	mov	r0, r4
 800623e:	f000 ffc1 	bl	80071c4 <__s2b>
 8006242:	9007      	str	r0, [sp, #28]
 8006244:	2800      	cmp	r0, #0
 8006246:	f43f af1f 	beq.w	8006088 <_strtod_l+0x488>
 800624a:	9b05      	ldr	r3, [sp, #20]
 800624c:	1b9e      	subs	r6, r3, r6
 800624e:	9b06      	ldr	r3, [sp, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	bfb4      	ite	lt
 8006254:	4633      	movlt	r3, r6
 8006256:	2300      	movge	r3, #0
 8006258:	930c      	str	r3, [sp, #48]	; 0x30
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	2500      	movs	r5, #0
 800625e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006262:	9312      	str	r3, [sp, #72]	; 0x48
 8006264:	462e      	mov	r6, r5
 8006266:	9b07      	ldr	r3, [sp, #28]
 8006268:	4620      	mov	r0, r4
 800626a:	6859      	ldr	r1, [r3, #4]
 800626c:	f000 ff02 	bl	8007074 <_Balloc>
 8006270:	9005      	str	r0, [sp, #20]
 8006272:	2800      	cmp	r0, #0
 8006274:	f43f af0c 	beq.w	8006090 <_strtod_l+0x490>
 8006278:	9b07      	ldr	r3, [sp, #28]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	3202      	adds	r2, #2
 800627e:	f103 010c 	add.w	r1, r3, #12
 8006282:	0092      	lsls	r2, r2, #2
 8006284:	300c      	adds	r0, #12
 8006286:	f000 fedb 	bl	8007040 <memcpy>
 800628a:	ec4b ab10 	vmov	d0, sl, fp
 800628e:	aa1a      	add	r2, sp, #104	; 0x68
 8006290:	a919      	add	r1, sp, #100	; 0x64
 8006292:	4620      	mov	r0, r4
 8006294:	f001 fadc 	bl	8007850 <__d2b>
 8006298:	ec4b ab18 	vmov	d8, sl, fp
 800629c:	9018      	str	r0, [sp, #96]	; 0x60
 800629e:	2800      	cmp	r0, #0
 80062a0:	f43f aef6 	beq.w	8006090 <_strtod_l+0x490>
 80062a4:	2101      	movs	r1, #1
 80062a6:	4620      	mov	r0, r4
 80062a8:	f001 f826 	bl	80072f8 <__i2b>
 80062ac:	4606      	mov	r6, r0
 80062ae:	2800      	cmp	r0, #0
 80062b0:	f43f aeee 	beq.w	8006090 <_strtod_l+0x490>
 80062b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062b6:	9904      	ldr	r1, [sp, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bfab      	itete	ge
 80062bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80062be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80062c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80062c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80062c6:	bfac      	ite	ge
 80062c8:	eb03 0902 	addge.w	r9, r3, r2
 80062cc:	1ad7      	sublt	r7, r2, r3
 80062ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80062d0:	eba3 0801 	sub.w	r8, r3, r1
 80062d4:	4490      	add	r8, r2
 80062d6:	4ba1      	ldr	r3, [pc, #644]	; (800655c <_strtod_l+0x95c>)
 80062d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80062dc:	4598      	cmp	r8, r3
 80062de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80062e2:	f280 80c7 	bge.w	8006474 <_strtod_l+0x874>
 80062e6:	eba3 0308 	sub.w	r3, r3, r8
 80062ea:	2b1f      	cmp	r3, #31
 80062ec:	eba2 0203 	sub.w	r2, r2, r3
 80062f0:	f04f 0101 	mov.w	r1, #1
 80062f4:	f300 80b1 	bgt.w	800645a <_strtod_l+0x85a>
 80062f8:	fa01 f303 	lsl.w	r3, r1, r3
 80062fc:	930d      	str	r3, [sp, #52]	; 0x34
 80062fe:	2300      	movs	r3, #0
 8006300:	9308      	str	r3, [sp, #32]
 8006302:	eb09 0802 	add.w	r8, r9, r2
 8006306:	9b04      	ldr	r3, [sp, #16]
 8006308:	45c1      	cmp	r9, r8
 800630a:	4417      	add	r7, r2
 800630c:	441f      	add	r7, r3
 800630e:	464b      	mov	r3, r9
 8006310:	bfa8      	it	ge
 8006312:	4643      	movge	r3, r8
 8006314:	42bb      	cmp	r3, r7
 8006316:	bfa8      	it	ge
 8006318:	463b      	movge	r3, r7
 800631a:	2b00      	cmp	r3, #0
 800631c:	bfc2      	ittt	gt
 800631e:	eba8 0803 	subgt.w	r8, r8, r3
 8006322:	1aff      	subgt	r7, r7, r3
 8006324:	eba9 0903 	subgt.w	r9, r9, r3
 8006328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800632a:	2b00      	cmp	r3, #0
 800632c:	dd17      	ble.n	800635e <_strtod_l+0x75e>
 800632e:	4631      	mov	r1, r6
 8006330:	461a      	mov	r2, r3
 8006332:	4620      	mov	r0, r4
 8006334:	f001 f8a0 	bl	8007478 <__pow5mult>
 8006338:	4606      	mov	r6, r0
 800633a:	2800      	cmp	r0, #0
 800633c:	f43f aea8 	beq.w	8006090 <_strtod_l+0x490>
 8006340:	4601      	mov	r1, r0
 8006342:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006344:	4620      	mov	r0, r4
 8006346:	f000 ffed 	bl	8007324 <__multiply>
 800634a:	900b      	str	r0, [sp, #44]	; 0x2c
 800634c:	2800      	cmp	r0, #0
 800634e:	f43f ae9f 	beq.w	8006090 <_strtod_l+0x490>
 8006352:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006354:	4620      	mov	r0, r4
 8006356:	f000 fecd 	bl	80070f4 <_Bfree>
 800635a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800635c:	9318      	str	r3, [sp, #96]	; 0x60
 800635e:	f1b8 0f00 	cmp.w	r8, #0
 8006362:	f300 808c 	bgt.w	800647e <_strtod_l+0x87e>
 8006366:	9b06      	ldr	r3, [sp, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	dd08      	ble.n	800637e <_strtod_l+0x77e>
 800636c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800636e:	9905      	ldr	r1, [sp, #20]
 8006370:	4620      	mov	r0, r4
 8006372:	f001 f881 	bl	8007478 <__pow5mult>
 8006376:	9005      	str	r0, [sp, #20]
 8006378:	2800      	cmp	r0, #0
 800637a:	f43f ae89 	beq.w	8006090 <_strtod_l+0x490>
 800637e:	2f00      	cmp	r7, #0
 8006380:	dd08      	ble.n	8006394 <_strtod_l+0x794>
 8006382:	9905      	ldr	r1, [sp, #20]
 8006384:	463a      	mov	r2, r7
 8006386:	4620      	mov	r0, r4
 8006388:	f001 f8d0 	bl	800752c <__lshift>
 800638c:	9005      	str	r0, [sp, #20]
 800638e:	2800      	cmp	r0, #0
 8006390:	f43f ae7e 	beq.w	8006090 <_strtod_l+0x490>
 8006394:	f1b9 0f00 	cmp.w	r9, #0
 8006398:	dd08      	ble.n	80063ac <_strtod_l+0x7ac>
 800639a:	4631      	mov	r1, r6
 800639c:	464a      	mov	r2, r9
 800639e:	4620      	mov	r0, r4
 80063a0:	f001 f8c4 	bl	800752c <__lshift>
 80063a4:	4606      	mov	r6, r0
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f43f ae72 	beq.w	8006090 <_strtod_l+0x490>
 80063ac:	9a05      	ldr	r2, [sp, #20]
 80063ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80063b0:	4620      	mov	r0, r4
 80063b2:	f001 f947 	bl	8007644 <__mdiff>
 80063b6:	4605      	mov	r5, r0
 80063b8:	2800      	cmp	r0, #0
 80063ba:	f43f ae69 	beq.w	8006090 <_strtod_l+0x490>
 80063be:	68c3      	ldr	r3, [r0, #12]
 80063c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c2:	2300      	movs	r3, #0
 80063c4:	60c3      	str	r3, [r0, #12]
 80063c6:	4631      	mov	r1, r6
 80063c8:	f001 f920 	bl	800760c <__mcmp>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	da60      	bge.n	8006492 <_strtod_l+0x892>
 80063d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d2:	ea53 030a 	orrs.w	r3, r3, sl
 80063d6:	f040 8082 	bne.w	80064de <_strtod_l+0x8de>
 80063da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d17d      	bne.n	80064de <_strtod_l+0x8de>
 80063e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063e6:	0d1b      	lsrs	r3, r3, #20
 80063e8:	051b      	lsls	r3, r3, #20
 80063ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80063ee:	d976      	bls.n	80064de <_strtod_l+0x8de>
 80063f0:	696b      	ldr	r3, [r5, #20]
 80063f2:	b913      	cbnz	r3, 80063fa <_strtod_l+0x7fa>
 80063f4:	692b      	ldr	r3, [r5, #16]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	dd71      	ble.n	80064de <_strtod_l+0x8de>
 80063fa:	4629      	mov	r1, r5
 80063fc:	2201      	movs	r2, #1
 80063fe:	4620      	mov	r0, r4
 8006400:	f001 f894 	bl	800752c <__lshift>
 8006404:	4631      	mov	r1, r6
 8006406:	4605      	mov	r5, r0
 8006408:	f001 f900 	bl	800760c <__mcmp>
 800640c:	2800      	cmp	r0, #0
 800640e:	dd66      	ble.n	80064de <_strtod_l+0x8de>
 8006410:	9904      	ldr	r1, [sp, #16]
 8006412:	4a53      	ldr	r2, [pc, #332]	; (8006560 <_strtod_l+0x960>)
 8006414:	465b      	mov	r3, fp
 8006416:	2900      	cmp	r1, #0
 8006418:	f000 8081 	beq.w	800651e <_strtod_l+0x91e>
 800641c:	ea02 010b 	and.w	r1, r2, fp
 8006420:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006424:	dc7b      	bgt.n	800651e <_strtod_l+0x91e>
 8006426:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800642a:	f77f aea9 	ble.w	8006180 <_strtod_l+0x580>
 800642e:	4b4d      	ldr	r3, [pc, #308]	; (8006564 <_strtod_l+0x964>)
 8006430:	4650      	mov	r0, sl
 8006432:	4659      	mov	r1, fp
 8006434:	2200      	movs	r2, #0
 8006436:	f7fa f8f7 	bl	8000628 <__aeabi_dmul>
 800643a:	460b      	mov	r3, r1
 800643c:	4303      	orrs	r3, r0
 800643e:	bf08      	it	eq
 8006440:	2322      	moveq	r3, #34	; 0x22
 8006442:	4682      	mov	sl, r0
 8006444:	468b      	mov	fp, r1
 8006446:	bf08      	it	eq
 8006448:	6023      	streq	r3, [r4, #0]
 800644a:	e62b      	b.n	80060a4 <_strtod_l+0x4a4>
 800644c:	f04f 32ff 	mov.w	r2, #4294967295
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	ea03 0a0a 	and.w	sl, r3, sl
 8006458:	e6e3      	b.n	8006222 <_strtod_l+0x622>
 800645a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800645e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006462:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006466:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800646a:	fa01 f308 	lsl.w	r3, r1, r8
 800646e:	9308      	str	r3, [sp, #32]
 8006470:	910d      	str	r1, [sp, #52]	; 0x34
 8006472:	e746      	b.n	8006302 <_strtod_l+0x702>
 8006474:	2300      	movs	r3, #0
 8006476:	9308      	str	r3, [sp, #32]
 8006478:	2301      	movs	r3, #1
 800647a:	930d      	str	r3, [sp, #52]	; 0x34
 800647c:	e741      	b.n	8006302 <_strtod_l+0x702>
 800647e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006480:	4642      	mov	r2, r8
 8006482:	4620      	mov	r0, r4
 8006484:	f001 f852 	bl	800752c <__lshift>
 8006488:	9018      	str	r0, [sp, #96]	; 0x60
 800648a:	2800      	cmp	r0, #0
 800648c:	f47f af6b 	bne.w	8006366 <_strtod_l+0x766>
 8006490:	e5fe      	b.n	8006090 <_strtod_l+0x490>
 8006492:	465f      	mov	r7, fp
 8006494:	d16e      	bne.n	8006574 <_strtod_l+0x974>
 8006496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800649c:	b342      	cbz	r2, 80064f0 <_strtod_l+0x8f0>
 800649e:	4a32      	ldr	r2, [pc, #200]	; (8006568 <_strtod_l+0x968>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d128      	bne.n	80064f6 <_strtod_l+0x8f6>
 80064a4:	9b04      	ldr	r3, [sp, #16]
 80064a6:	4651      	mov	r1, sl
 80064a8:	b1eb      	cbz	r3, 80064e6 <_strtod_l+0x8e6>
 80064aa:	4b2d      	ldr	r3, [pc, #180]	; (8006560 <_strtod_l+0x960>)
 80064ac:	403b      	ands	r3, r7
 80064ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80064b2:	f04f 32ff 	mov.w	r2, #4294967295
 80064b6:	d819      	bhi.n	80064ec <_strtod_l+0x8ec>
 80064b8:	0d1b      	lsrs	r3, r3, #20
 80064ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	4299      	cmp	r1, r3
 80064c4:	d117      	bne.n	80064f6 <_strtod_l+0x8f6>
 80064c6:	4b29      	ldr	r3, [pc, #164]	; (800656c <_strtod_l+0x96c>)
 80064c8:	429f      	cmp	r7, r3
 80064ca:	d102      	bne.n	80064d2 <_strtod_l+0x8d2>
 80064cc:	3101      	adds	r1, #1
 80064ce:	f43f addf 	beq.w	8006090 <_strtod_l+0x490>
 80064d2:	4b23      	ldr	r3, [pc, #140]	; (8006560 <_strtod_l+0x960>)
 80064d4:	403b      	ands	r3, r7
 80064d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80064da:	f04f 0a00 	mov.w	sl, #0
 80064de:	9b04      	ldr	r3, [sp, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1a4      	bne.n	800642e <_strtod_l+0x82e>
 80064e4:	e5de      	b.n	80060a4 <_strtod_l+0x4a4>
 80064e6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ea:	e7ea      	b.n	80064c2 <_strtod_l+0x8c2>
 80064ec:	4613      	mov	r3, r2
 80064ee:	e7e8      	b.n	80064c2 <_strtod_l+0x8c2>
 80064f0:	ea53 030a 	orrs.w	r3, r3, sl
 80064f4:	d08c      	beq.n	8006410 <_strtod_l+0x810>
 80064f6:	9b08      	ldr	r3, [sp, #32]
 80064f8:	b1db      	cbz	r3, 8006532 <_strtod_l+0x932>
 80064fa:	423b      	tst	r3, r7
 80064fc:	d0ef      	beq.n	80064de <_strtod_l+0x8de>
 80064fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006500:	9a04      	ldr	r2, [sp, #16]
 8006502:	4650      	mov	r0, sl
 8006504:	4659      	mov	r1, fp
 8006506:	b1c3      	cbz	r3, 800653a <_strtod_l+0x93a>
 8006508:	f7ff fb5c 	bl	8005bc4 <sulp>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	ec51 0b18 	vmov	r0, r1, d8
 8006514:	f7f9 fed2 	bl	80002bc <__adddf3>
 8006518:	4682      	mov	sl, r0
 800651a:	468b      	mov	fp, r1
 800651c:	e7df      	b.n	80064de <_strtod_l+0x8de>
 800651e:	4013      	ands	r3, r2
 8006520:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006524:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006528:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800652c:	f04f 3aff 	mov.w	sl, #4294967295
 8006530:	e7d5      	b.n	80064de <_strtod_l+0x8de>
 8006532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006534:	ea13 0f0a 	tst.w	r3, sl
 8006538:	e7e0      	b.n	80064fc <_strtod_l+0x8fc>
 800653a:	f7ff fb43 	bl	8005bc4 <sulp>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	ec51 0b18 	vmov	r0, r1, d8
 8006546:	f7f9 feb7 	bl	80002b8 <__aeabi_dsub>
 800654a:	2200      	movs	r2, #0
 800654c:	2300      	movs	r3, #0
 800654e:	4682      	mov	sl, r0
 8006550:	468b      	mov	fp, r1
 8006552:	f7fa fad1 	bl	8000af8 <__aeabi_dcmpeq>
 8006556:	2800      	cmp	r0, #0
 8006558:	d0c1      	beq.n	80064de <_strtod_l+0x8de>
 800655a:	e611      	b.n	8006180 <_strtod_l+0x580>
 800655c:	fffffc02 	.word	0xfffffc02
 8006560:	7ff00000 	.word	0x7ff00000
 8006564:	39500000 	.word	0x39500000
 8006568:	000fffff 	.word	0x000fffff
 800656c:	7fefffff 	.word	0x7fefffff
 8006570:	08008c10 	.word	0x08008c10
 8006574:	4631      	mov	r1, r6
 8006576:	4628      	mov	r0, r5
 8006578:	f001 f9c6 	bl	8007908 <__ratio>
 800657c:	ec59 8b10 	vmov	r8, r9, d0
 8006580:	ee10 0a10 	vmov	r0, s0
 8006584:	2200      	movs	r2, #0
 8006586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800658a:	4649      	mov	r1, r9
 800658c:	f7fa fac8 	bl	8000b20 <__aeabi_dcmple>
 8006590:	2800      	cmp	r0, #0
 8006592:	d07a      	beq.n	800668a <_strtod_l+0xa8a>
 8006594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d04a      	beq.n	8006630 <_strtod_l+0xa30>
 800659a:	4b95      	ldr	r3, [pc, #596]	; (80067f0 <_strtod_l+0xbf0>)
 800659c:	2200      	movs	r2, #0
 800659e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80065a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80067f0 <_strtod_l+0xbf0>
 80065a6:	f04f 0800 	mov.w	r8, #0
 80065aa:	4b92      	ldr	r3, [pc, #584]	; (80067f4 <_strtod_l+0xbf4>)
 80065ac:	403b      	ands	r3, r7
 80065ae:	930d      	str	r3, [sp, #52]	; 0x34
 80065b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065b2:	4b91      	ldr	r3, [pc, #580]	; (80067f8 <_strtod_l+0xbf8>)
 80065b4:	429a      	cmp	r2, r3
 80065b6:	f040 80b0 	bne.w	800671a <_strtod_l+0xb1a>
 80065ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80065c2:	ec4b ab10 	vmov	d0, sl, fp
 80065c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80065ca:	f001 f8c5 	bl	8007758 <__ulp>
 80065ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065d2:	ec53 2b10 	vmov	r2, r3, d0
 80065d6:	f7fa f827 	bl	8000628 <__aeabi_dmul>
 80065da:	4652      	mov	r2, sl
 80065dc:	465b      	mov	r3, fp
 80065de:	f7f9 fe6d 	bl	80002bc <__adddf3>
 80065e2:	460b      	mov	r3, r1
 80065e4:	4983      	ldr	r1, [pc, #524]	; (80067f4 <_strtod_l+0xbf4>)
 80065e6:	4a85      	ldr	r2, [pc, #532]	; (80067fc <_strtod_l+0xbfc>)
 80065e8:	4019      	ands	r1, r3
 80065ea:	4291      	cmp	r1, r2
 80065ec:	4682      	mov	sl, r0
 80065ee:	d960      	bls.n	80066b2 <_strtod_l+0xab2>
 80065f0:	ee18 3a90 	vmov	r3, s17
 80065f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d104      	bne.n	8006606 <_strtod_l+0xa06>
 80065fc:	ee18 3a10 	vmov	r3, s16
 8006600:	3301      	adds	r3, #1
 8006602:	f43f ad45 	beq.w	8006090 <_strtod_l+0x490>
 8006606:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006808 <_strtod_l+0xc08>
 800660a:	f04f 3aff 	mov.w	sl, #4294967295
 800660e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006610:	4620      	mov	r0, r4
 8006612:	f000 fd6f 	bl	80070f4 <_Bfree>
 8006616:	9905      	ldr	r1, [sp, #20]
 8006618:	4620      	mov	r0, r4
 800661a:	f000 fd6b 	bl	80070f4 <_Bfree>
 800661e:	4631      	mov	r1, r6
 8006620:	4620      	mov	r0, r4
 8006622:	f000 fd67 	bl	80070f4 <_Bfree>
 8006626:	4629      	mov	r1, r5
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fd63 	bl	80070f4 <_Bfree>
 800662e:	e61a      	b.n	8006266 <_strtod_l+0x666>
 8006630:	f1ba 0f00 	cmp.w	sl, #0
 8006634:	d11b      	bne.n	800666e <_strtod_l+0xa6e>
 8006636:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800663a:	b9f3      	cbnz	r3, 800667a <_strtod_l+0xa7a>
 800663c:	4b6c      	ldr	r3, [pc, #432]	; (80067f0 <_strtod_l+0xbf0>)
 800663e:	2200      	movs	r2, #0
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7fa fa62 	bl	8000b0c <__aeabi_dcmplt>
 8006648:	b9d0      	cbnz	r0, 8006680 <_strtod_l+0xa80>
 800664a:	4640      	mov	r0, r8
 800664c:	4649      	mov	r1, r9
 800664e:	4b6c      	ldr	r3, [pc, #432]	; (8006800 <_strtod_l+0xc00>)
 8006650:	2200      	movs	r2, #0
 8006652:	f7f9 ffe9 	bl	8000628 <__aeabi_dmul>
 8006656:	4680      	mov	r8, r0
 8006658:	4689      	mov	r9, r1
 800665a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800665e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006662:	9315      	str	r3, [sp, #84]	; 0x54
 8006664:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006668:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800666c:	e79d      	b.n	80065aa <_strtod_l+0x9aa>
 800666e:	f1ba 0f01 	cmp.w	sl, #1
 8006672:	d102      	bne.n	800667a <_strtod_l+0xa7a>
 8006674:	2f00      	cmp	r7, #0
 8006676:	f43f ad83 	beq.w	8006180 <_strtod_l+0x580>
 800667a:	4b62      	ldr	r3, [pc, #392]	; (8006804 <_strtod_l+0xc04>)
 800667c:	2200      	movs	r2, #0
 800667e:	e78e      	b.n	800659e <_strtod_l+0x99e>
 8006680:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006800 <_strtod_l+0xc00>
 8006684:	f04f 0800 	mov.w	r8, #0
 8006688:	e7e7      	b.n	800665a <_strtod_l+0xa5a>
 800668a:	4b5d      	ldr	r3, [pc, #372]	; (8006800 <_strtod_l+0xc00>)
 800668c:	4640      	mov	r0, r8
 800668e:	4649      	mov	r1, r9
 8006690:	2200      	movs	r2, #0
 8006692:	f7f9 ffc9 	bl	8000628 <__aeabi_dmul>
 8006696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006698:	4680      	mov	r8, r0
 800669a:	4689      	mov	r9, r1
 800669c:	b933      	cbnz	r3, 80066ac <_strtod_l+0xaac>
 800669e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066a2:	900e      	str	r0, [sp, #56]	; 0x38
 80066a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80066a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80066aa:	e7dd      	b.n	8006668 <_strtod_l+0xa68>
 80066ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80066b0:	e7f9      	b.n	80066a6 <_strtod_l+0xaa6>
 80066b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1a8      	bne.n	800660e <_strtod_l+0xa0e>
 80066bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066c2:	0d1b      	lsrs	r3, r3, #20
 80066c4:	051b      	lsls	r3, r3, #20
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d1a1      	bne.n	800660e <_strtod_l+0xa0e>
 80066ca:	4640      	mov	r0, r8
 80066cc:	4649      	mov	r1, r9
 80066ce:	f7fa facd 	bl	8000c6c <__aeabi_d2lz>
 80066d2:	f7f9 ff7b 	bl	80005cc <__aeabi_l2d>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7f9 fdeb 	bl	80002b8 <__aeabi_dsub>
 80066e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066e8:	ea43 030a 	orr.w	r3, r3, sl
 80066ec:	4313      	orrs	r3, r2
 80066ee:	4680      	mov	r8, r0
 80066f0:	4689      	mov	r9, r1
 80066f2:	d055      	beq.n	80067a0 <_strtod_l+0xba0>
 80066f4:	a336      	add	r3, pc, #216	; (adr r3, 80067d0 <_strtod_l+0xbd0>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f7fa fa07 	bl	8000b0c <__aeabi_dcmplt>
 80066fe:	2800      	cmp	r0, #0
 8006700:	f47f acd0 	bne.w	80060a4 <_strtod_l+0x4a4>
 8006704:	a334      	add	r3, pc, #208	; (adr r3, 80067d8 <_strtod_l+0xbd8>)
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	4640      	mov	r0, r8
 800670c:	4649      	mov	r1, r9
 800670e:	f7fa fa1b 	bl	8000b48 <__aeabi_dcmpgt>
 8006712:	2800      	cmp	r0, #0
 8006714:	f43f af7b 	beq.w	800660e <_strtod_l+0xa0e>
 8006718:	e4c4      	b.n	80060a4 <_strtod_l+0x4a4>
 800671a:	9b04      	ldr	r3, [sp, #16]
 800671c:	b333      	cbz	r3, 800676c <_strtod_l+0xb6c>
 800671e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006720:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006724:	d822      	bhi.n	800676c <_strtod_l+0xb6c>
 8006726:	a32e      	add	r3, pc, #184	; (adr r3, 80067e0 <_strtod_l+0xbe0>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7fa f9f6 	bl	8000b20 <__aeabi_dcmple>
 8006734:	b1a0      	cbz	r0, 8006760 <_strtod_l+0xb60>
 8006736:	4649      	mov	r1, r9
 8006738:	4640      	mov	r0, r8
 800673a:	f7fa fa0f 	bl	8000b5c <__aeabi_d2uiz>
 800673e:	2801      	cmp	r0, #1
 8006740:	bf38      	it	cc
 8006742:	2001      	movcc	r0, #1
 8006744:	f7f9 fef6 	bl	8000534 <__aeabi_ui2d>
 8006748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674a:	4680      	mov	r8, r0
 800674c:	4689      	mov	r9, r1
 800674e:	bb23      	cbnz	r3, 800679a <_strtod_l+0xb9a>
 8006750:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006754:	9010      	str	r0, [sp, #64]	; 0x40
 8006756:	9311      	str	r3, [sp, #68]	; 0x44
 8006758:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800675c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006764:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	9309      	str	r3, [sp, #36]	; 0x24
 800676c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006770:	eeb0 0a48 	vmov.f32	s0, s16
 8006774:	eef0 0a68 	vmov.f32	s1, s17
 8006778:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800677c:	f000 ffec 	bl	8007758 <__ulp>
 8006780:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006784:	ec53 2b10 	vmov	r2, r3, d0
 8006788:	f7f9 ff4e 	bl	8000628 <__aeabi_dmul>
 800678c:	ec53 2b18 	vmov	r2, r3, d8
 8006790:	f7f9 fd94 	bl	80002bc <__adddf3>
 8006794:	4682      	mov	sl, r0
 8006796:	468b      	mov	fp, r1
 8006798:	e78d      	b.n	80066b6 <_strtod_l+0xab6>
 800679a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800679e:	e7db      	b.n	8006758 <_strtod_l+0xb58>
 80067a0:	a311      	add	r3, pc, #68	; (adr r3, 80067e8 <_strtod_l+0xbe8>)
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f7fa f9b1 	bl	8000b0c <__aeabi_dcmplt>
 80067aa:	e7b2      	b.n	8006712 <_strtod_l+0xb12>
 80067ac:	2300      	movs	r3, #0
 80067ae:	930a      	str	r3, [sp, #40]	; 0x28
 80067b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	f7ff ba6b 	b.w	8005c90 <_strtod_l+0x90>
 80067ba:	2a65      	cmp	r2, #101	; 0x65
 80067bc:	f43f ab5f 	beq.w	8005e7e <_strtod_l+0x27e>
 80067c0:	2a45      	cmp	r2, #69	; 0x45
 80067c2:	f43f ab5c 	beq.w	8005e7e <_strtod_l+0x27e>
 80067c6:	2301      	movs	r3, #1
 80067c8:	f7ff bb94 	b.w	8005ef4 <_strtod_l+0x2f4>
 80067cc:	f3af 8000 	nop.w
 80067d0:	94a03595 	.word	0x94a03595
 80067d4:	3fdfffff 	.word	0x3fdfffff
 80067d8:	35afe535 	.word	0x35afe535
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	ffc00000 	.word	0xffc00000
 80067e4:	41dfffff 	.word	0x41dfffff
 80067e8:	94a03595 	.word	0x94a03595
 80067ec:	3fcfffff 	.word	0x3fcfffff
 80067f0:	3ff00000 	.word	0x3ff00000
 80067f4:	7ff00000 	.word	0x7ff00000
 80067f8:	7fe00000 	.word	0x7fe00000
 80067fc:	7c9fffff 	.word	0x7c9fffff
 8006800:	3fe00000 	.word	0x3fe00000
 8006804:	bff00000 	.word	0xbff00000
 8006808:	7fefffff 	.word	0x7fefffff

0800680c <strtod>:
 800680c:	460a      	mov	r2, r1
 800680e:	4601      	mov	r1, r0
 8006810:	4802      	ldr	r0, [pc, #8]	; (800681c <strtod+0x10>)
 8006812:	4b03      	ldr	r3, [pc, #12]	; (8006820 <strtod+0x14>)
 8006814:	6800      	ldr	r0, [r0, #0]
 8006816:	f7ff b9f3 	b.w	8005c00 <_strtod_l>
 800681a:	bf00      	nop
 800681c:	2000000c 	.word	0x2000000c
 8006820:	20000074 	.word	0x20000074

08006824 <strtok>:
 8006824:	4b16      	ldr	r3, [pc, #88]	; (8006880 <strtok+0x5c>)
 8006826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006828:	681e      	ldr	r6, [r3, #0]
 800682a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800682c:	4605      	mov	r5, r0
 800682e:	b9fc      	cbnz	r4, 8006870 <strtok+0x4c>
 8006830:	2050      	movs	r0, #80	; 0x50
 8006832:	9101      	str	r1, [sp, #4]
 8006834:	f7ff f8a6 	bl	8005984 <malloc>
 8006838:	9901      	ldr	r1, [sp, #4]
 800683a:	65b0      	str	r0, [r6, #88]	; 0x58
 800683c:	4602      	mov	r2, r0
 800683e:	b920      	cbnz	r0, 800684a <strtok+0x26>
 8006840:	4b10      	ldr	r3, [pc, #64]	; (8006884 <strtok+0x60>)
 8006842:	4811      	ldr	r0, [pc, #68]	; (8006888 <strtok+0x64>)
 8006844:	2157      	movs	r1, #87	; 0x57
 8006846:	f000 f849 	bl	80068dc <__assert_func>
 800684a:	e9c0 4400 	strd	r4, r4, [r0]
 800684e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006852:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006856:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800685a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800685e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006862:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006866:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800686a:	6184      	str	r4, [r0, #24]
 800686c:	7704      	strb	r4, [r0, #28]
 800686e:	6244      	str	r4, [r0, #36]	; 0x24
 8006870:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006872:	2301      	movs	r3, #1
 8006874:	4628      	mov	r0, r5
 8006876:	b002      	add	sp, #8
 8006878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800687c:	f000 b806 	b.w	800688c <__strtok_r>
 8006880:	2000000c 	.word	0x2000000c
 8006884:	08008c38 	.word	0x08008c38
 8006888:	08008c4f 	.word	0x08008c4f

0800688c <__strtok_r>:
 800688c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800688e:	b908      	cbnz	r0, 8006894 <__strtok_r+0x8>
 8006890:	6810      	ldr	r0, [r2, #0]
 8006892:	b188      	cbz	r0, 80068b8 <__strtok_r+0x2c>
 8006894:	4604      	mov	r4, r0
 8006896:	4620      	mov	r0, r4
 8006898:	f814 5b01 	ldrb.w	r5, [r4], #1
 800689c:	460f      	mov	r7, r1
 800689e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80068a2:	b91e      	cbnz	r6, 80068ac <__strtok_r+0x20>
 80068a4:	b965      	cbnz	r5, 80068c0 <__strtok_r+0x34>
 80068a6:	6015      	str	r5, [r2, #0]
 80068a8:	4628      	mov	r0, r5
 80068aa:	e005      	b.n	80068b8 <__strtok_r+0x2c>
 80068ac:	42b5      	cmp	r5, r6
 80068ae:	d1f6      	bne.n	800689e <__strtok_r+0x12>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f0      	bne.n	8006896 <__strtok_r+0xa>
 80068b4:	6014      	str	r4, [r2, #0]
 80068b6:	7003      	strb	r3, [r0, #0]
 80068b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ba:	461c      	mov	r4, r3
 80068bc:	e00c      	b.n	80068d8 <__strtok_r+0x4c>
 80068be:	b915      	cbnz	r5, 80068c6 <__strtok_r+0x3a>
 80068c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068c4:	460e      	mov	r6, r1
 80068c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80068ca:	42ab      	cmp	r3, r5
 80068cc:	d1f7      	bne.n	80068be <__strtok_r+0x32>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0f3      	beq.n	80068ba <__strtok_r+0x2e>
 80068d2:	2300      	movs	r3, #0
 80068d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80068d8:	6014      	str	r4, [r2, #0]
 80068da:	e7ed      	b.n	80068b8 <__strtok_r+0x2c>

080068dc <__assert_func>:
 80068dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068de:	4614      	mov	r4, r2
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b09      	ldr	r3, [pc, #36]	; (8006908 <__assert_func+0x2c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4605      	mov	r5, r0
 80068e8:	68d8      	ldr	r0, [r3, #12]
 80068ea:	b14c      	cbz	r4, 8006900 <__assert_func+0x24>
 80068ec:	4b07      	ldr	r3, [pc, #28]	; (800690c <__assert_func+0x30>)
 80068ee:	9100      	str	r1, [sp, #0]
 80068f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068f4:	4906      	ldr	r1, [pc, #24]	; (8006910 <__assert_func+0x34>)
 80068f6:	462b      	mov	r3, r5
 80068f8:	f000 f80e 	bl	8006918 <fiprintf>
 80068fc:	f001 fdc6 	bl	800848c <abort>
 8006900:	4b04      	ldr	r3, [pc, #16]	; (8006914 <__assert_func+0x38>)
 8006902:	461c      	mov	r4, r3
 8006904:	e7f3      	b.n	80068ee <__assert_func+0x12>
 8006906:	bf00      	nop
 8006908:	2000000c 	.word	0x2000000c
 800690c:	08008cac 	.word	0x08008cac
 8006910:	08008cb9 	.word	0x08008cb9
 8006914:	08008ce7 	.word	0x08008ce7

08006918 <fiprintf>:
 8006918:	b40e      	push	{r1, r2, r3}
 800691a:	b503      	push	{r0, r1, lr}
 800691c:	4601      	mov	r1, r0
 800691e:	ab03      	add	r3, sp, #12
 8006920:	4805      	ldr	r0, [pc, #20]	; (8006938 <fiprintf+0x20>)
 8006922:	f853 2b04 	ldr.w	r2, [r3], #4
 8006926:	6800      	ldr	r0, [r0, #0]
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	f001 f9ff 	bl	8007d2c <_vfiprintf_r>
 800692e:	b002      	add	sp, #8
 8006930:	f85d eb04 	ldr.w	lr, [sp], #4
 8006934:	b003      	add	sp, #12
 8006936:	4770      	bx	lr
 8006938:	2000000c 	.word	0x2000000c

0800693c <rshift>:
 800693c:	6903      	ldr	r3, [r0, #16]
 800693e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006942:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006946:	ea4f 1261 	mov.w	r2, r1, asr #5
 800694a:	f100 0414 	add.w	r4, r0, #20
 800694e:	dd45      	ble.n	80069dc <rshift+0xa0>
 8006950:	f011 011f 	ands.w	r1, r1, #31
 8006954:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006958:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800695c:	d10c      	bne.n	8006978 <rshift+0x3c>
 800695e:	f100 0710 	add.w	r7, r0, #16
 8006962:	4629      	mov	r1, r5
 8006964:	42b1      	cmp	r1, r6
 8006966:	d334      	bcc.n	80069d2 <rshift+0x96>
 8006968:	1a9b      	subs	r3, r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	1eea      	subs	r2, r5, #3
 800696e:	4296      	cmp	r6, r2
 8006970:	bf38      	it	cc
 8006972:	2300      	movcc	r3, #0
 8006974:	4423      	add	r3, r4
 8006976:	e015      	b.n	80069a4 <rshift+0x68>
 8006978:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800697c:	f1c1 0820 	rsb	r8, r1, #32
 8006980:	40cf      	lsrs	r7, r1
 8006982:	f105 0e04 	add.w	lr, r5, #4
 8006986:	46a1      	mov	r9, r4
 8006988:	4576      	cmp	r6, lr
 800698a:	46f4      	mov	ip, lr
 800698c:	d815      	bhi.n	80069ba <rshift+0x7e>
 800698e:	1a9a      	subs	r2, r3, r2
 8006990:	0092      	lsls	r2, r2, #2
 8006992:	3a04      	subs	r2, #4
 8006994:	3501      	adds	r5, #1
 8006996:	42ae      	cmp	r6, r5
 8006998:	bf38      	it	cc
 800699a:	2200      	movcc	r2, #0
 800699c:	18a3      	adds	r3, r4, r2
 800699e:	50a7      	str	r7, [r4, r2]
 80069a0:	b107      	cbz	r7, 80069a4 <rshift+0x68>
 80069a2:	3304      	adds	r3, #4
 80069a4:	1b1a      	subs	r2, r3, r4
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80069ac:	bf08      	it	eq
 80069ae:	2300      	moveq	r3, #0
 80069b0:	6102      	str	r2, [r0, #16]
 80069b2:	bf08      	it	eq
 80069b4:	6143      	streq	r3, [r0, #20]
 80069b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069ba:	f8dc c000 	ldr.w	ip, [ip]
 80069be:	fa0c fc08 	lsl.w	ip, ip, r8
 80069c2:	ea4c 0707 	orr.w	r7, ip, r7
 80069c6:	f849 7b04 	str.w	r7, [r9], #4
 80069ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80069ce:	40cf      	lsrs	r7, r1
 80069d0:	e7da      	b.n	8006988 <rshift+0x4c>
 80069d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80069d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80069da:	e7c3      	b.n	8006964 <rshift+0x28>
 80069dc:	4623      	mov	r3, r4
 80069de:	e7e1      	b.n	80069a4 <rshift+0x68>

080069e0 <__hexdig_fun>:
 80069e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80069e4:	2b09      	cmp	r3, #9
 80069e6:	d802      	bhi.n	80069ee <__hexdig_fun+0xe>
 80069e8:	3820      	subs	r0, #32
 80069ea:	b2c0      	uxtb	r0, r0
 80069ec:	4770      	bx	lr
 80069ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d801      	bhi.n	80069fa <__hexdig_fun+0x1a>
 80069f6:	3847      	subs	r0, #71	; 0x47
 80069f8:	e7f7      	b.n	80069ea <__hexdig_fun+0xa>
 80069fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80069fe:	2b05      	cmp	r3, #5
 8006a00:	d801      	bhi.n	8006a06 <__hexdig_fun+0x26>
 8006a02:	3827      	subs	r0, #39	; 0x27
 8006a04:	e7f1      	b.n	80069ea <__hexdig_fun+0xa>
 8006a06:	2000      	movs	r0, #0
 8006a08:	4770      	bx	lr
	...

08006a0c <__gethex>:
 8006a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a10:	ed2d 8b02 	vpush	{d8}
 8006a14:	b089      	sub	sp, #36	; 0x24
 8006a16:	ee08 0a10 	vmov	s16, r0
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	4bb4      	ldr	r3, [pc, #720]	; (8006cf0 <__gethex+0x2e4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	4618      	mov	r0, r3
 8006a24:	468b      	mov	fp, r1
 8006a26:	4690      	mov	r8, r2
 8006a28:	f7f9 fbe4 	bl	80001f4 <strlen>
 8006a2c:	9b01      	ldr	r3, [sp, #4]
 8006a2e:	f8db 2000 	ldr.w	r2, [fp]
 8006a32:	4403      	add	r3, r0
 8006a34:	4682      	mov	sl, r0
 8006a36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006a3a:	9305      	str	r3, [sp, #20]
 8006a3c:	1c93      	adds	r3, r2, #2
 8006a3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006a42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006a46:	32fe      	adds	r2, #254	; 0xfe
 8006a48:	18d1      	adds	r1, r2, r3
 8006a4a:	461f      	mov	r7, r3
 8006a4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006a50:	9100      	str	r1, [sp, #0]
 8006a52:	2830      	cmp	r0, #48	; 0x30
 8006a54:	d0f8      	beq.n	8006a48 <__gethex+0x3c>
 8006a56:	f7ff ffc3 	bl	80069e0 <__hexdig_fun>
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d13a      	bne.n	8006ad6 <__gethex+0xca>
 8006a60:	9901      	ldr	r1, [sp, #4]
 8006a62:	4652      	mov	r2, sl
 8006a64:	4638      	mov	r0, r7
 8006a66:	f001 fc2f 	bl	80082c8 <strncmp>
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d168      	bne.n	8006b42 <__gethex+0x136>
 8006a70:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006a74:	eb07 060a 	add.w	r6, r7, sl
 8006a78:	f7ff ffb2 	bl	80069e0 <__hexdig_fun>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d062      	beq.n	8006b46 <__gethex+0x13a>
 8006a80:	4633      	mov	r3, r6
 8006a82:	7818      	ldrb	r0, [r3, #0]
 8006a84:	2830      	cmp	r0, #48	; 0x30
 8006a86:	461f      	mov	r7, r3
 8006a88:	f103 0301 	add.w	r3, r3, #1
 8006a8c:	d0f9      	beq.n	8006a82 <__gethex+0x76>
 8006a8e:	f7ff ffa7 	bl	80069e0 <__hexdig_fun>
 8006a92:	2301      	movs	r3, #1
 8006a94:	fab0 f480 	clz	r4, r0
 8006a98:	0964      	lsrs	r4, r4, #5
 8006a9a:	4635      	mov	r5, r6
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	463a      	mov	r2, r7
 8006aa0:	4616      	mov	r6, r2
 8006aa2:	3201      	adds	r2, #1
 8006aa4:	7830      	ldrb	r0, [r6, #0]
 8006aa6:	f7ff ff9b 	bl	80069e0 <__hexdig_fun>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d1f8      	bne.n	8006aa0 <__gethex+0x94>
 8006aae:	9901      	ldr	r1, [sp, #4]
 8006ab0:	4652      	mov	r2, sl
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f001 fc08 	bl	80082c8 <strncmp>
 8006ab8:	b980      	cbnz	r0, 8006adc <__gethex+0xd0>
 8006aba:	b94d      	cbnz	r5, 8006ad0 <__gethex+0xc4>
 8006abc:	eb06 050a 	add.w	r5, r6, sl
 8006ac0:	462a      	mov	r2, r5
 8006ac2:	4616      	mov	r6, r2
 8006ac4:	3201      	adds	r2, #1
 8006ac6:	7830      	ldrb	r0, [r6, #0]
 8006ac8:	f7ff ff8a 	bl	80069e0 <__hexdig_fun>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d1f8      	bne.n	8006ac2 <__gethex+0xb6>
 8006ad0:	1bad      	subs	r5, r5, r6
 8006ad2:	00ad      	lsls	r5, r5, #2
 8006ad4:	e004      	b.n	8006ae0 <__gethex+0xd4>
 8006ad6:	2400      	movs	r4, #0
 8006ad8:	4625      	mov	r5, r4
 8006ada:	e7e0      	b.n	8006a9e <__gethex+0x92>
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	d1f7      	bne.n	8006ad0 <__gethex+0xc4>
 8006ae0:	7833      	ldrb	r3, [r6, #0]
 8006ae2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ae6:	2b50      	cmp	r3, #80	; 0x50
 8006ae8:	d13b      	bne.n	8006b62 <__gethex+0x156>
 8006aea:	7873      	ldrb	r3, [r6, #1]
 8006aec:	2b2b      	cmp	r3, #43	; 0x2b
 8006aee:	d02c      	beq.n	8006b4a <__gethex+0x13e>
 8006af0:	2b2d      	cmp	r3, #45	; 0x2d
 8006af2:	d02e      	beq.n	8006b52 <__gethex+0x146>
 8006af4:	1c71      	adds	r1, r6, #1
 8006af6:	f04f 0900 	mov.w	r9, #0
 8006afa:	7808      	ldrb	r0, [r1, #0]
 8006afc:	f7ff ff70 	bl	80069e0 <__hexdig_fun>
 8006b00:	1e43      	subs	r3, r0, #1
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b18      	cmp	r3, #24
 8006b06:	d82c      	bhi.n	8006b62 <__gethex+0x156>
 8006b08:	f1a0 0210 	sub.w	r2, r0, #16
 8006b0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006b10:	f7ff ff66 	bl	80069e0 <__hexdig_fun>
 8006b14:	1e43      	subs	r3, r0, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b18      	cmp	r3, #24
 8006b1a:	d91d      	bls.n	8006b58 <__gethex+0x14c>
 8006b1c:	f1b9 0f00 	cmp.w	r9, #0
 8006b20:	d000      	beq.n	8006b24 <__gethex+0x118>
 8006b22:	4252      	negs	r2, r2
 8006b24:	4415      	add	r5, r2
 8006b26:	f8cb 1000 	str.w	r1, [fp]
 8006b2a:	b1e4      	cbz	r4, 8006b66 <__gethex+0x15a>
 8006b2c:	9b00      	ldr	r3, [sp, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bf14      	ite	ne
 8006b32:	2700      	movne	r7, #0
 8006b34:	2706      	moveq	r7, #6
 8006b36:	4638      	mov	r0, r7
 8006b38:	b009      	add	sp, #36	; 0x24
 8006b3a:	ecbd 8b02 	vpop	{d8}
 8006b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b42:	463e      	mov	r6, r7
 8006b44:	4625      	mov	r5, r4
 8006b46:	2401      	movs	r4, #1
 8006b48:	e7ca      	b.n	8006ae0 <__gethex+0xd4>
 8006b4a:	f04f 0900 	mov.w	r9, #0
 8006b4e:	1cb1      	adds	r1, r6, #2
 8006b50:	e7d3      	b.n	8006afa <__gethex+0xee>
 8006b52:	f04f 0901 	mov.w	r9, #1
 8006b56:	e7fa      	b.n	8006b4e <__gethex+0x142>
 8006b58:	230a      	movs	r3, #10
 8006b5a:	fb03 0202 	mla	r2, r3, r2, r0
 8006b5e:	3a10      	subs	r2, #16
 8006b60:	e7d4      	b.n	8006b0c <__gethex+0x100>
 8006b62:	4631      	mov	r1, r6
 8006b64:	e7df      	b.n	8006b26 <__gethex+0x11a>
 8006b66:	1bf3      	subs	r3, r6, r7
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	2b07      	cmp	r3, #7
 8006b6e:	dc0b      	bgt.n	8006b88 <__gethex+0x17c>
 8006b70:	ee18 0a10 	vmov	r0, s16
 8006b74:	f000 fa7e 	bl	8007074 <_Balloc>
 8006b78:	4604      	mov	r4, r0
 8006b7a:	b940      	cbnz	r0, 8006b8e <__gethex+0x182>
 8006b7c:	4b5d      	ldr	r3, [pc, #372]	; (8006cf4 <__gethex+0x2e8>)
 8006b7e:	4602      	mov	r2, r0
 8006b80:	21de      	movs	r1, #222	; 0xde
 8006b82:	485d      	ldr	r0, [pc, #372]	; (8006cf8 <__gethex+0x2ec>)
 8006b84:	f7ff feaa 	bl	80068dc <__assert_func>
 8006b88:	3101      	adds	r1, #1
 8006b8a:	105b      	asrs	r3, r3, #1
 8006b8c:	e7ee      	b.n	8006b6c <__gethex+0x160>
 8006b8e:	f100 0914 	add.w	r9, r0, #20
 8006b92:	f04f 0b00 	mov.w	fp, #0
 8006b96:	f1ca 0301 	rsb	r3, sl, #1
 8006b9a:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b9e:	f8cd b000 	str.w	fp, [sp]
 8006ba2:	9306      	str	r3, [sp, #24]
 8006ba4:	42b7      	cmp	r7, r6
 8006ba6:	d340      	bcc.n	8006c2a <__gethex+0x21e>
 8006ba8:	9802      	ldr	r0, [sp, #8]
 8006baa:	9b00      	ldr	r3, [sp, #0]
 8006bac:	f840 3b04 	str.w	r3, [r0], #4
 8006bb0:	eba0 0009 	sub.w	r0, r0, r9
 8006bb4:	1080      	asrs	r0, r0, #2
 8006bb6:	0146      	lsls	r6, r0, #5
 8006bb8:	6120      	str	r0, [r4, #16]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fb4c 	bl	8007258 <__hi0bits>
 8006bc0:	1a30      	subs	r0, r6, r0
 8006bc2:	f8d8 6000 	ldr.w	r6, [r8]
 8006bc6:	42b0      	cmp	r0, r6
 8006bc8:	dd63      	ble.n	8006c92 <__gethex+0x286>
 8006bca:	1b87      	subs	r7, r0, r6
 8006bcc:	4639      	mov	r1, r7
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 fef0 	bl	80079b4 <__any_on>
 8006bd4:	4682      	mov	sl, r0
 8006bd6:	b1a8      	cbz	r0, 8006c04 <__gethex+0x1f8>
 8006bd8:	1e7b      	subs	r3, r7, #1
 8006bda:	1159      	asrs	r1, r3, #5
 8006bdc:	f003 021f 	and.w	r2, r3, #31
 8006be0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006be4:	f04f 0a01 	mov.w	sl, #1
 8006be8:	fa0a f202 	lsl.w	r2, sl, r2
 8006bec:	420a      	tst	r2, r1
 8006bee:	d009      	beq.n	8006c04 <__gethex+0x1f8>
 8006bf0:	4553      	cmp	r3, sl
 8006bf2:	dd05      	ble.n	8006c00 <__gethex+0x1f4>
 8006bf4:	1eb9      	subs	r1, r7, #2
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 fedc 	bl	80079b4 <__any_on>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d145      	bne.n	8006c8c <__gethex+0x280>
 8006c00:	f04f 0a02 	mov.w	sl, #2
 8006c04:	4639      	mov	r1, r7
 8006c06:	4620      	mov	r0, r4
 8006c08:	f7ff fe98 	bl	800693c <rshift>
 8006c0c:	443d      	add	r5, r7
 8006c0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c12:	42ab      	cmp	r3, r5
 8006c14:	da4c      	bge.n	8006cb0 <__gethex+0x2a4>
 8006c16:	ee18 0a10 	vmov	r0, s16
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	f000 fa6a 	bl	80070f4 <_Bfree>
 8006c20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c22:	2300      	movs	r3, #0
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	27a3      	movs	r7, #163	; 0xa3
 8006c28:	e785      	b.n	8006b36 <__gethex+0x12a>
 8006c2a:	1e73      	subs	r3, r6, #1
 8006c2c:	9a05      	ldr	r2, [sp, #20]
 8006c2e:	9303      	str	r3, [sp, #12]
 8006c30:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d019      	beq.n	8006c6c <__gethex+0x260>
 8006c38:	f1bb 0f20 	cmp.w	fp, #32
 8006c3c:	d107      	bne.n	8006c4e <__gethex+0x242>
 8006c3e:	9b02      	ldr	r3, [sp, #8]
 8006c40:	9a00      	ldr	r2, [sp, #0]
 8006c42:	f843 2b04 	str.w	r2, [r3], #4
 8006c46:	9302      	str	r3, [sp, #8]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	469b      	mov	fp, r3
 8006c4e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006c52:	f7ff fec5 	bl	80069e0 <__hexdig_fun>
 8006c56:	9b00      	ldr	r3, [sp, #0]
 8006c58:	f000 000f 	and.w	r0, r0, #15
 8006c5c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006c60:	4303      	orrs	r3, r0
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	f10b 0b04 	add.w	fp, fp, #4
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	e00d      	b.n	8006c88 <__gethex+0x27c>
 8006c6c:	9b03      	ldr	r3, [sp, #12]
 8006c6e:	9a06      	ldr	r2, [sp, #24]
 8006c70:	4413      	add	r3, r2
 8006c72:	42bb      	cmp	r3, r7
 8006c74:	d3e0      	bcc.n	8006c38 <__gethex+0x22c>
 8006c76:	4618      	mov	r0, r3
 8006c78:	9901      	ldr	r1, [sp, #4]
 8006c7a:	9307      	str	r3, [sp, #28]
 8006c7c:	4652      	mov	r2, sl
 8006c7e:	f001 fb23 	bl	80082c8 <strncmp>
 8006c82:	9b07      	ldr	r3, [sp, #28]
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d1d7      	bne.n	8006c38 <__gethex+0x22c>
 8006c88:	461e      	mov	r6, r3
 8006c8a:	e78b      	b.n	8006ba4 <__gethex+0x198>
 8006c8c:	f04f 0a03 	mov.w	sl, #3
 8006c90:	e7b8      	b.n	8006c04 <__gethex+0x1f8>
 8006c92:	da0a      	bge.n	8006caa <__gethex+0x29e>
 8006c94:	1a37      	subs	r7, r6, r0
 8006c96:	4621      	mov	r1, r4
 8006c98:	ee18 0a10 	vmov	r0, s16
 8006c9c:	463a      	mov	r2, r7
 8006c9e:	f000 fc45 	bl	800752c <__lshift>
 8006ca2:	1bed      	subs	r5, r5, r7
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	f100 0914 	add.w	r9, r0, #20
 8006caa:	f04f 0a00 	mov.w	sl, #0
 8006cae:	e7ae      	b.n	8006c0e <__gethex+0x202>
 8006cb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006cb4:	42a8      	cmp	r0, r5
 8006cb6:	dd72      	ble.n	8006d9e <__gethex+0x392>
 8006cb8:	1b45      	subs	r5, r0, r5
 8006cba:	42ae      	cmp	r6, r5
 8006cbc:	dc36      	bgt.n	8006d2c <__gethex+0x320>
 8006cbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d02a      	beq.n	8006d1c <__gethex+0x310>
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d02c      	beq.n	8006d24 <__gethex+0x318>
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d11c      	bne.n	8006d08 <__gethex+0x2fc>
 8006cce:	42ae      	cmp	r6, r5
 8006cd0:	d11a      	bne.n	8006d08 <__gethex+0x2fc>
 8006cd2:	2e01      	cmp	r6, #1
 8006cd4:	d112      	bne.n	8006cfc <__gethex+0x2f0>
 8006cd6:	9a04      	ldr	r2, [sp, #16]
 8006cd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	2301      	movs	r3, #1
 8006ce0:	6123      	str	r3, [r4, #16]
 8006ce2:	f8c9 3000 	str.w	r3, [r9]
 8006ce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ce8:	2762      	movs	r7, #98	; 0x62
 8006cea:	601c      	str	r4, [r3, #0]
 8006cec:	e723      	b.n	8006b36 <__gethex+0x12a>
 8006cee:	bf00      	nop
 8006cf0:	08008d60 	.word	0x08008d60
 8006cf4:	08008ce8 	.word	0x08008ce8
 8006cf8:	08008cf9 	.word	0x08008cf9
 8006cfc:	1e71      	subs	r1, r6, #1
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 fe58 	bl	80079b4 <__any_on>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d1e6      	bne.n	8006cd6 <__gethex+0x2ca>
 8006d08:	ee18 0a10 	vmov	r0, s16
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	f000 f9f1 	bl	80070f4 <_Bfree>
 8006d12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d14:	2300      	movs	r3, #0
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	2750      	movs	r7, #80	; 0x50
 8006d1a:	e70c      	b.n	8006b36 <__gethex+0x12a>
 8006d1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f2      	bne.n	8006d08 <__gethex+0x2fc>
 8006d22:	e7d8      	b.n	8006cd6 <__gethex+0x2ca>
 8006d24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1d5      	bne.n	8006cd6 <__gethex+0x2ca>
 8006d2a:	e7ed      	b.n	8006d08 <__gethex+0x2fc>
 8006d2c:	1e6f      	subs	r7, r5, #1
 8006d2e:	f1ba 0f00 	cmp.w	sl, #0
 8006d32:	d131      	bne.n	8006d98 <__gethex+0x38c>
 8006d34:	b127      	cbz	r7, 8006d40 <__gethex+0x334>
 8006d36:	4639      	mov	r1, r7
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 fe3b 	bl	80079b4 <__any_on>
 8006d3e:	4682      	mov	sl, r0
 8006d40:	117b      	asrs	r3, r7, #5
 8006d42:	2101      	movs	r1, #1
 8006d44:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006d48:	f007 071f 	and.w	r7, r7, #31
 8006d4c:	fa01 f707 	lsl.w	r7, r1, r7
 8006d50:	421f      	tst	r7, r3
 8006d52:	4629      	mov	r1, r5
 8006d54:	4620      	mov	r0, r4
 8006d56:	bf18      	it	ne
 8006d58:	f04a 0a02 	orrne.w	sl, sl, #2
 8006d5c:	1b76      	subs	r6, r6, r5
 8006d5e:	f7ff fded 	bl	800693c <rshift>
 8006d62:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006d66:	2702      	movs	r7, #2
 8006d68:	f1ba 0f00 	cmp.w	sl, #0
 8006d6c:	d048      	beq.n	8006e00 <__gethex+0x3f4>
 8006d6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d015      	beq.n	8006da2 <__gethex+0x396>
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d017      	beq.n	8006daa <__gethex+0x39e>
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d109      	bne.n	8006d92 <__gethex+0x386>
 8006d7e:	f01a 0f02 	tst.w	sl, #2
 8006d82:	d006      	beq.n	8006d92 <__gethex+0x386>
 8006d84:	f8d9 0000 	ldr.w	r0, [r9]
 8006d88:	ea4a 0a00 	orr.w	sl, sl, r0
 8006d8c:	f01a 0f01 	tst.w	sl, #1
 8006d90:	d10e      	bne.n	8006db0 <__gethex+0x3a4>
 8006d92:	f047 0710 	orr.w	r7, r7, #16
 8006d96:	e033      	b.n	8006e00 <__gethex+0x3f4>
 8006d98:	f04f 0a01 	mov.w	sl, #1
 8006d9c:	e7d0      	b.n	8006d40 <__gethex+0x334>
 8006d9e:	2701      	movs	r7, #1
 8006da0:	e7e2      	b.n	8006d68 <__gethex+0x35c>
 8006da2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006da4:	f1c3 0301 	rsb	r3, r3, #1
 8006da8:	9315      	str	r3, [sp, #84]	; 0x54
 8006daa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d0f0      	beq.n	8006d92 <__gethex+0x386>
 8006db0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006db4:	f104 0314 	add.w	r3, r4, #20
 8006db8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006dbc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006dc0:	f04f 0c00 	mov.w	ip, #0
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dca:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006dce:	d01c      	beq.n	8006e0a <__gethex+0x3fe>
 8006dd0:	3201      	adds	r2, #1
 8006dd2:	6002      	str	r2, [r0, #0]
 8006dd4:	2f02      	cmp	r7, #2
 8006dd6:	f104 0314 	add.w	r3, r4, #20
 8006dda:	d13f      	bne.n	8006e5c <__gethex+0x450>
 8006ddc:	f8d8 2000 	ldr.w	r2, [r8]
 8006de0:	3a01      	subs	r2, #1
 8006de2:	42b2      	cmp	r2, r6
 8006de4:	d10a      	bne.n	8006dfc <__gethex+0x3f0>
 8006de6:	1171      	asrs	r1, r6, #5
 8006de8:	2201      	movs	r2, #1
 8006dea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dee:	f006 061f 	and.w	r6, r6, #31
 8006df2:	fa02 f606 	lsl.w	r6, r2, r6
 8006df6:	421e      	tst	r6, r3
 8006df8:	bf18      	it	ne
 8006dfa:	4617      	movne	r7, r2
 8006dfc:	f047 0720 	orr.w	r7, r7, #32
 8006e00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e02:	601c      	str	r4, [r3, #0]
 8006e04:	9b04      	ldr	r3, [sp, #16]
 8006e06:	601d      	str	r5, [r3, #0]
 8006e08:	e695      	b.n	8006b36 <__gethex+0x12a>
 8006e0a:	4299      	cmp	r1, r3
 8006e0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006e10:	d8d8      	bhi.n	8006dc4 <__gethex+0x3b8>
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	459b      	cmp	fp, r3
 8006e16:	db19      	blt.n	8006e4c <__gethex+0x440>
 8006e18:	6861      	ldr	r1, [r4, #4]
 8006e1a:	ee18 0a10 	vmov	r0, s16
 8006e1e:	3101      	adds	r1, #1
 8006e20:	f000 f928 	bl	8007074 <_Balloc>
 8006e24:	4681      	mov	r9, r0
 8006e26:	b918      	cbnz	r0, 8006e30 <__gethex+0x424>
 8006e28:	4b1a      	ldr	r3, [pc, #104]	; (8006e94 <__gethex+0x488>)
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	2184      	movs	r1, #132	; 0x84
 8006e2e:	e6a8      	b.n	8006b82 <__gethex+0x176>
 8006e30:	6922      	ldr	r2, [r4, #16]
 8006e32:	3202      	adds	r2, #2
 8006e34:	f104 010c 	add.w	r1, r4, #12
 8006e38:	0092      	lsls	r2, r2, #2
 8006e3a:	300c      	adds	r0, #12
 8006e3c:	f000 f900 	bl	8007040 <memcpy>
 8006e40:	4621      	mov	r1, r4
 8006e42:	ee18 0a10 	vmov	r0, s16
 8006e46:	f000 f955 	bl	80070f4 <_Bfree>
 8006e4a:	464c      	mov	r4, r9
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e54:	6122      	str	r2, [r4, #16]
 8006e56:	2201      	movs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]
 8006e5a:	e7bb      	b.n	8006dd4 <__gethex+0x3c8>
 8006e5c:	6922      	ldr	r2, [r4, #16]
 8006e5e:	455a      	cmp	r2, fp
 8006e60:	dd0b      	ble.n	8006e7a <__gethex+0x46e>
 8006e62:	2101      	movs	r1, #1
 8006e64:	4620      	mov	r0, r4
 8006e66:	f7ff fd69 	bl	800693c <rshift>
 8006e6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e6e:	3501      	adds	r5, #1
 8006e70:	42ab      	cmp	r3, r5
 8006e72:	f6ff aed0 	blt.w	8006c16 <__gethex+0x20a>
 8006e76:	2701      	movs	r7, #1
 8006e78:	e7c0      	b.n	8006dfc <__gethex+0x3f0>
 8006e7a:	f016 061f 	ands.w	r6, r6, #31
 8006e7e:	d0fa      	beq.n	8006e76 <__gethex+0x46a>
 8006e80:	4453      	add	r3, sl
 8006e82:	f1c6 0620 	rsb	r6, r6, #32
 8006e86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006e8a:	f000 f9e5 	bl	8007258 <__hi0bits>
 8006e8e:	42b0      	cmp	r0, r6
 8006e90:	dbe7      	blt.n	8006e62 <__gethex+0x456>
 8006e92:	e7f0      	b.n	8006e76 <__gethex+0x46a>
 8006e94:	08008ce8 	.word	0x08008ce8

08006e98 <L_shift>:
 8006e98:	f1c2 0208 	rsb	r2, r2, #8
 8006e9c:	0092      	lsls	r2, r2, #2
 8006e9e:	b570      	push	{r4, r5, r6, lr}
 8006ea0:	f1c2 0620 	rsb	r6, r2, #32
 8006ea4:	6843      	ldr	r3, [r0, #4]
 8006ea6:	6804      	ldr	r4, [r0, #0]
 8006ea8:	fa03 f506 	lsl.w	r5, r3, r6
 8006eac:	432c      	orrs	r4, r5
 8006eae:	40d3      	lsrs	r3, r2
 8006eb0:	6004      	str	r4, [r0, #0]
 8006eb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006eb6:	4288      	cmp	r0, r1
 8006eb8:	d3f4      	bcc.n	8006ea4 <L_shift+0xc>
 8006eba:	bd70      	pop	{r4, r5, r6, pc}

08006ebc <__match>:
 8006ebc:	b530      	push	{r4, r5, lr}
 8006ebe:	6803      	ldr	r3, [r0, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ec6:	b914      	cbnz	r4, 8006ece <__match+0x12>
 8006ec8:	6003      	str	r3, [r0, #0]
 8006eca:	2001      	movs	r0, #1
 8006ecc:	bd30      	pop	{r4, r5, pc}
 8006ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ed2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006ed6:	2d19      	cmp	r5, #25
 8006ed8:	bf98      	it	ls
 8006eda:	3220      	addls	r2, #32
 8006edc:	42a2      	cmp	r2, r4
 8006ede:	d0f0      	beq.n	8006ec2 <__match+0x6>
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	e7f3      	b.n	8006ecc <__match+0x10>

08006ee4 <__hexnan>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	680b      	ldr	r3, [r1, #0]
 8006eea:	115e      	asrs	r6, r3, #5
 8006eec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006ef0:	f013 031f 	ands.w	r3, r3, #31
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	bf18      	it	ne
 8006ef8:	3604      	addne	r6, #4
 8006efa:	2500      	movs	r5, #0
 8006efc:	1f37      	subs	r7, r6, #4
 8006efe:	4690      	mov	r8, r2
 8006f00:	6802      	ldr	r2, [r0, #0]
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	4682      	mov	sl, r0
 8006f06:	f846 5c04 	str.w	r5, [r6, #-4]
 8006f0a:	46b9      	mov	r9, r7
 8006f0c:	463c      	mov	r4, r7
 8006f0e:	9502      	str	r5, [sp, #8]
 8006f10:	46ab      	mov	fp, r5
 8006f12:	7851      	ldrb	r1, [r2, #1]
 8006f14:	1c53      	adds	r3, r2, #1
 8006f16:	9303      	str	r3, [sp, #12]
 8006f18:	b341      	cbz	r1, 8006f6c <__hexnan+0x88>
 8006f1a:	4608      	mov	r0, r1
 8006f1c:	9205      	str	r2, [sp, #20]
 8006f1e:	9104      	str	r1, [sp, #16]
 8006f20:	f7ff fd5e 	bl	80069e0 <__hexdig_fun>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d14f      	bne.n	8006fc8 <__hexnan+0xe4>
 8006f28:	9904      	ldr	r1, [sp, #16]
 8006f2a:	9a05      	ldr	r2, [sp, #20]
 8006f2c:	2920      	cmp	r1, #32
 8006f2e:	d818      	bhi.n	8006f62 <__hexnan+0x7e>
 8006f30:	9b02      	ldr	r3, [sp, #8]
 8006f32:	459b      	cmp	fp, r3
 8006f34:	dd13      	ble.n	8006f5e <__hexnan+0x7a>
 8006f36:	454c      	cmp	r4, r9
 8006f38:	d206      	bcs.n	8006f48 <__hexnan+0x64>
 8006f3a:	2d07      	cmp	r5, #7
 8006f3c:	dc04      	bgt.n	8006f48 <__hexnan+0x64>
 8006f3e:	462a      	mov	r2, r5
 8006f40:	4649      	mov	r1, r9
 8006f42:	4620      	mov	r0, r4
 8006f44:	f7ff ffa8 	bl	8006e98 <L_shift>
 8006f48:	4544      	cmp	r4, r8
 8006f4a:	d950      	bls.n	8006fee <__hexnan+0x10a>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f1a4 0904 	sub.w	r9, r4, #4
 8006f52:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f56:	f8cd b008 	str.w	fp, [sp, #8]
 8006f5a:	464c      	mov	r4, r9
 8006f5c:	461d      	mov	r5, r3
 8006f5e:	9a03      	ldr	r2, [sp, #12]
 8006f60:	e7d7      	b.n	8006f12 <__hexnan+0x2e>
 8006f62:	2929      	cmp	r1, #41	; 0x29
 8006f64:	d156      	bne.n	8007014 <__hexnan+0x130>
 8006f66:	3202      	adds	r2, #2
 8006f68:	f8ca 2000 	str.w	r2, [sl]
 8006f6c:	f1bb 0f00 	cmp.w	fp, #0
 8006f70:	d050      	beq.n	8007014 <__hexnan+0x130>
 8006f72:	454c      	cmp	r4, r9
 8006f74:	d206      	bcs.n	8006f84 <__hexnan+0xa0>
 8006f76:	2d07      	cmp	r5, #7
 8006f78:	dc04      	bgt.n	8006f84 <__hexnan+0xa0>
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f7ff ff8a 	bl	8006e98 <L_shift>
 8006f84:	4544      	cmp	r4, r8
 8006f86:	d934      	bls.n	8006ff2 <__hexnan+0x10e>
 8006f88:	f1a8 0204 	sub.w	r2, r8, #4
 8006f8c:	4623      	mov	r3, r4
 8006f8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006f92:	f842 1f04 	str.w	r1, [r2, #4]!
 8006f96:	429f      	cmp	r7, r3
 8006f98:	d2f9      	bcs.n	8006f8e <__hexnan+0xaa>
 8006f9a:	1b3b      	subs	r3, r7, r4
 8006f9c:	f023 0303 	bic.w	r3, r3, #3
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	3401      	adds	r4, #1
 8006fa4:	3e03      	subs	r6, #3
 8006fa6:	42b4      	cmp	r4, r6
 8006fa8:	bf88      	it	hi
 8006faa:	2304      	movhi	r3, #4
 8006fac:	4443      	add	r3, r8
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f843 2b04 	str.w	r2, [r3], #4
 8006fb4:	429f      	cmp	r7, r3
 8006fb6:	d2fb      	bcs.n	8006fb0 <__hexnan+0xcc>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	b91b      	cbnz	r3, 8006fc4 <__hexnan+0xe0>
 8006fbc:	4547      	cmp	r7, r8
 8006fbe:	d127      	bne.n	8007010 <__hexnan+0x12c>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	2005      	movs	r0, #5
 8006fc6:	e026      	b.n	8007016 <__hexnan+0x132>
 8006fc8:	3501      	adds	r5, #1
 8006fca:	2d08      	cmp	r5, #8
 8006fcc:	f10b 0b01 	add.w	fp, fp, #1
 8006fd0:	dd06      	ble.n	8006fe0 <__hexnan+0xfc>
 8006fd2:	4544      	cmp	r4, r8
 8006fd4:	d9c3      	bls.n	8006f5e <__hexnan+0x7a>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006fdc:	2501      	movs	r5, #1
 8006fde:	3c04      	subs	r4, #4
 8006fe0:	6822      	ldr	r2, [r4, #0]
 8006fe2:	f000 000f 	and.w	r0, r0, #15
 8006fe6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006fea:	6022      	str	r2, [r4, #0]
 8006fec:	e7b7      	b.n	8006f5e <__hexnan+0x7a>
 8006fee:	2508      	movs	r5, #8
 8006ff0:	e7b5      	b.n	8006f5e <__hexnan+0x7a>
 8006ff2:	9b01      	ldr	r3, [sp, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0df      	beq.n	8006fb8 <__hexnan+0xd4>
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffc:	f1c3 0320 	rsb	r3, r3, #32
 8007000:	fa22 f303 	lsr.w	r3, r2, r3
 8007004:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007008:	401a      	ands	r2, r3
 800700a:	f846 2c04 	str.w	r2, [r6, #-4]
 800700e:	e7d3      	b.n	8006fb8 <__hexnan+0xd4>
 8007010:	3f04      	subs	r7, #4
 8007012:	e7d1      	b.n	8006fb8 <__hexnan+0xd4>
 8007014:	2004      	movs	r0, #4
 8007016:	b007      	add	sp, #28
 8007018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800701c <__ascii_mbtowc>:
 800701c:	b082      	sub	sp, #8
 800701e:	b901      	cbnz	r1, 8007022 <__ascii_mbtowc+0x6>
 8007020:	a901      	add	r1, sp, #4
 8007022:	b142      	cbz	r2, 8007036 <__ascii_mbtowc+0x1a>
 8007024:	b14b      	cbz	r3, 800703a <__ascii_mbtowc+0x1e>
 8007026:	7813      	ldrb	r3, [r2, #0]
 8007028:	600b      	str	r3, [r1, #0]
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	1e10      	subs	r0, r2, #0
 800702e:	bf18      	it	ne
 8007030:	2001      	movne	r0, #1
 8007032:	b002      	add	sp, #8
 8007034:	4770      	bx	lr
 8007036:	4610      	mov	r0, r2
 8007038:	e7fb      	b.n	8007032 <__ascii_mbtowc+0x16>
 800703a:	f06f 0001 	mvn.w	r0, #1
 800703e:	e7f8      	b.n	8007032 <__ascii_mbtowc+0x16>

08007040 <memcpy>:
 8007040:	440a      	add	r2, r1
 8007042:	4291      	cmp	r1, r2
 8007044:	f100 33ff 	add.w	r3, r0, #4294967295
 8007048:	d100      	bne.n	800704c <memcpy+0xc>
 800704a:	4770      	bx	lr
 800704c:	b510      	push	{r4, lr}
 800704e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007056:	4291      	cmp	r1, r2
 8007058:	d1f9      	bne.n	800704e <memcpy+0xe>
 800705a:	bd10      	pop	{r4, pc}

0800705c <__malloc_lock>:
 800705c:	4801      	ldr	r0, [pc, #4]	; (8007064 <__malloc_lock+0x8>)
 800705e:	f001 bbd5 	b.w	800880c <__retarget_lock_acquire_recursive>
 8007062:	bf00      	nop
 8007064:	20000450 	.word	0x20000450

08007068 <__malloc_unlock>:
 8007068:	4801      	ldr	r0, [pc, #4]	; (8007070 <__malloc_unlock+0x8>)
 800706a:	f001 bbd0 	b.w	800880e <__retarget_lock_release_recursive>
 800706e:	bf00      	nop
 8007070:	20000450 	.word	0x20000450

08007074 <_Balloc>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007078:	4604      	mov	r4, r0
 800707a:	460d      	mov	r5, r1
 800707c:	b976      	cbnz	r6, 800709c <_Balloc+0x28>
 800707e:	2010      	movs	r0, #16
 8007080:	f7fe fc80 	bl	8005984 <malloc>
 8007084:	4602      	mov	r2, r0
 8007086:	6260      	str	r0, [r4, #36]	; 0x24
 8007088:	b920      	cbnz	r0, 8007094 <_Balloc+0x20>
 800708a:	4b18      	ldr	r3, [pc, #96]	; (80070ec <_Balloc+0x78>)
 800708c:	4818      	ldr	r0, [pc, #96]	; (80070f0 <_Balloc+0x7c>)
 800708e:	2166      	movs	r1, #102	; 0x66
 8007090:	f7ff fc24 	bl	80068dc <__assert_func>
 8007094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007098:	6006      	str	r6, [r0, #0]
 800709a:	60c6      	str	r6, [r0, #12]
 800709c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800709e:	68f3      	ldr	r3, [r6, #12]
 80070a0:	b183      	cbz	r3, 80070c4 <_Balloc+0x50>
 80070a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070aa:	b9b8      	cbnz	r0, 80070dc <_Balloc+0x68>
 80070ac:	2101      	movs	r1, #1
 80070ae:	fa01 f605 	lsl.w	r6, r1, r5
 80070b2:	1d72      	adds	r2, r6, #5
 80070b4:	0092      	lsls	r2, r2, #2
 80070b6:	4620      	mov	r0, r4
 80070b8:	f000 fc9d 	bl	80079f6 <_calloc_r>
 80070bc:	b160      	cbz	r0, 80070d8 <_Balloc+0x64>
 80070be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070c2:	e00e      	b.n	80070e2 <_Balloc+0x6e>
 80070c4:	2221      	movs	r2, #33	; 0x21
 80070c6:	2104      	movs	r1, #4
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 fc94 	bl	80079f6 <_calloc_r>
 80070ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d0:	60f0      	str	r0, [r6, #12]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e4      	bne.n	80070a2 <_Balloc+0x2e>
 80070d8:	2000      	movs	r0, #0
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	6802      	ldr	r2, [r0, #0]
 80070de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070e2:	2300      	movs	r3, #0
 80070e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070e8:	e7f7      	b.n	80070da <_Balloc+0x66>
 80070ea:	bf00      	nop
 80070ec:	08008c38 	.word	0x08008c38
 80070f0:	08008d74 	.word	0x08008d74

080070f4 <_Bfree>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070f8:	4605      	mov	r5, r0
 80070fa:	460c      	mov	r4, r1
 80070fc:	b976      	cbnz	r6, 800711c <_Bfree+0x28>
 80070fe:	2010      	movs	r0, #16
 8007100:	f7fe fc40 	bl	8005984 <malloc>
 8007104:	4602      	mov	r2, r0
 8007106:	6268      	str	r0, [r5, #36]	; 0x24
 8007108:	b920      	cbnz	r0, 8007114 <_Bfree+0x20>
 800710a:	4b09      	ldr	r3, [pc, #36]	; (8007130 <_Bfree+0x3c>)
 800710c:	4809      	ldr	r0, [pc, #36]	; (8007134 <_Bfree+0x40>)
 800710e:	218a      	movs	r1, #138	; 0x8a
 8007110:	f7ff fbe4 	bl	80068dc <__assert_func>
 8007114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007118:	6006      	str	r6, [r0, #0]
 800711a:	60c6      	str	r6, [r0, #12]
 800711c:	b13c      	cbz	r4, 800712e <_Bfree+0x3a>
 800711e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007120:	6862      	ldr	r2, [r4, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007128:	6021      	str	r1, [r4, #0]
 800712a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	08008c38 	.word	0x08008c38
 8007134:	08008d74 	.word	0x08008d74

08007138 <__multadd>:
 8007138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800713c:	690d      	ldr	r5, [r1, #16]
 800713e:	4607      	mov	r7, r0
 8007140:	460c      	mov	r4, r1
 8007142:	461e      	mov	r6, r3
 8007144:	f101 0c14 	add.w	ip, r1, #20
 8007148:	2000      	movs	r0, #0
 800714a:	f8dc 3000 	ldr.w	r3, [ip]
 800714e:	b299      	uxth	r1, r3
 8007150:	fb02 6101 	mla	r1, r2, r1, r6
 8007154:	0c1e      	lsrs	r6, r3, #16
 8007156:	0c0b      	lsrs	r3, r1, #16
 8007158:	fb02 3306 	mla	r3, r2, r6, r3
 800715c:	b289      	uxth	r1, r1
 800715e:	3001      	adds	r0, #1
 8007160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007164:	4285      	cmp	r5, r0
 8007166:	f84c 1b04 	str.w	r1, [ip], #4
 800716a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800716e:	dcec      	bgt.n	800714a <__multadd+0x12>
 8007170:	b30e      	cbz	r6, 80071b6 <__multadd+0x7e>
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	42ab      	cmp	r3, r5
 8007176:	dc19      	bgt.n	80071ac <__multadd+0x74>
 8007178:	6861      	ldr	r1, [r4, #4]
 800717a:	4638      	mov	r0, r7
 800717c:	3101      	adds	r1, #1
 800717e:	f7ff ff79 	bl	8007074 <_Balloc>
 8007182:	4680      	mov	r8, r0
 8007184:	b928      	cbnz	r0, 8007192 <__multadd+0x5a>
 8007186:	4602      	mov	r2, r0
 8007188:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <__multadd+0x84>)
 800718a:	480d      	ldr	r0, [pc, #52]	; (80071c0 <__multadd+0x88>)
 800718c:	21b5      	movs	r1, #181	; 0xb5
 800718e:	f7ff fba5 	bl	80068dc <__assert_func>
 8007192:	6922      	ldr	r2, [r4, #16]
 8007194:	3202      	adds	r2, #2
 8007196:	f104 010c 	add.w	r1, r4, #12
 800719a:	0092      	lsls	r2, r2, #2
 800719c:	300c      	adds	r0, #12
 800719e:	f7ff ff4f 	bl	8007040 <memcpy>
 80071a2:	4621      	mov	r1, r4
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff ffa5 	bl	80070f4 <_Bfree>
 80071aa:	4644      	mov	r4, r8
 80071ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071b0:	3501      	adds	r5, #1
 80071b2:	615e      	str	r6, [r3, #20]
 80071b4:	6125      	str	r5, [r4, #16]
 80071b6:	4620      	mov	r0, r4
 80071b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071bc:	08008ce8 	.word	0x08008ce8
 80071c0:	08008d74 	.word	0x08008d74

080071c4 <__s2b>:
 80071c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	460c      	mov	r4, r1
 80071ca:	4615      	mov	r5, r2
 80071cc:	461f      	mov	r7, r3
 80071ce:	2209      	movs	r2, #9
 80071d0:	3308      	adds	r3, #8
 80071d2:	4606      	mov	r6, r0
 80071d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80071d8:	2100      	movs	r1, #0
 80071da:	2201      	movs	r2, #1
 80071dc:	429a      	cmp	r2, r3
 80071de:	db09      	blt.n	80071f4 <__s2b+0x30>
 80071e0:	4630      	mov	r0, r6
 80071e2:	f7ff ff47 	bl	8007074 <_Balloc>
 80071e6:	b940      	cbnz	r0, 80071fa <__s2b+0x36>
 80071e8:	4602      	mov	r2, r0
 80071ea:	4b19      	ldr	r3, [pc, #100]	; (8007250 <__s2b+0x8c>)
 80071ec:	4819      	ldr	r0, [pc, #100]	; (8007254 <__s2b+0x90>)
 80071ee:	21ce      	movs	r1, #206	; 0xce
 80071f0:	f7ff fb74 	bl	80068dc <__assert_func>
 80071f4:	0052      	lsls	r2, r2, #1
 80071f6:	3101      	adds	r1, #1
 80071f8:	e7f0      	b.n	80071dc <__s2b+0x18>
 80071fa:	9b08      	ldr	r3, [sp, #32]
 80071fc:	6143      	str	r3, [r0, #20]
 80071fe:	2d09      	cmp	r5, #9
 8007200:	f04f 0301 	mov.w	r3, #1
 8007204:	6103      	str	r3, [r0, #16]
 8007206:	dd16      	ble.n	8007236 <__s2b+0x72>
 8007208:	f104 0909 	add.w	r9, r4, #9
 800720c:	46c8      	mov	r8, r9
 800720e:	442c      	add	r4, r5
 8007210:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007214:	4601      	mov	r1, r0
 8007216:	3b30      	subs	r3, #48	; 0x30
 8007218:	220a      	movs	r2, #10
 800721a:	4630      	mov	r0, r6
 800721c:	f7ff ff8c 	bl	8007138 <__multadd>
 8007220:	45a0      	cmp	r8, r4
 8007222:	d1f5      	bne.n	8007210 <__s2b+0x4c>
 8007224:	f1a5 0408 	sub.w	r4, r5, #8
 8007228:	444c      	add	r4, r9
 800722a:	1b2d      	subs	r5, r5, r4
 800722c:	1963      	adds	r3, r4, r5
 800722e:	42bb      	cmp	r3, r7
 8007230:	db04      	blt.n	800723c <__s2b+0x78>
 8007232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007236:	340a      	adds	r4, #10
 8007238:	2509      	movs	r5, #9
 800723a:	e7f6      	b.n	800722a <__s2b+0x66>
 800723c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007240:	4601      	mov	r1, r0
 8007242:	3b30      	subs	r3, #48	; 0x30
 8007244:	220a      	movs	r2, #10
 8007246:	4630      	mov	r0, r6
 8007248:	f7ff ff76 	bl	8007138 <__multadd>
 800724c:	e7ee      	b.n	800722c <__s2b+0x68>
 800724e:	bf00      	nop
 8007250:	08008ce8 	.word	0x08008ce8
 8007254:	08008d74 	.word	0x08008d74

08007258 <__hi0bits>:
 8007258:	0c03      	lsrs	r3, r0, #16
 800725a:	041b      	lsls	r3, r3, #16
 800725c:	b9d3      	cbnz	r3, 8007294 <__hi0bits+0x3c>
 800725e:	0400      	lsls	r0, r0, #16
 8007260:	2310      	movs	r3, #16
 8007262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007266:	bf04      	itt	eq
 8007268:	0200      	lsleq	r0, r0, #8
 800726a:	3308      	addeq	r3, #8
 800726c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007270:	bf04      	itt	eq
 8007272:	0100      	lsleq	r0, r0, #4
 8007274:	3304      	addeq	r3, #4
 8007276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800727a:	bf04      	itt	eq
 800727c:	0080      	lsleq	r0, r0, #2
 800727e:	3302      	addeq	r3, #2
 8007280:	2800      	cmp	r0, #0
 8007282:	db05      	blt.n	8007290 <__hi0bits+0x38>
 8007284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007288:	f103 0301 	add.w	r3, r3, #1
 800728c:	bf08      	it	eq
 800728e:	2320      	moveq	r3, #32
 8007290:	4618      	mov	r0, r3
 8007292:	4770      	bx	lr
 8007294:	2300      	movs	r3, #0
 8007296:	e7e4      	b.n	8007262 <__hi0bits+0xa>

08007298 <__lo0bits>:
 8007298:	6803      	ldr	r3, [r0, #0]
 800729a:	f013 0207 	ands.w	r2, r3, #7
 800729e:	4601      	mov	r1, r0
 80072a0:	d00b      	beq.n	80072ba <__lo0bits+0x22>
 80072a2:	07da      	lsls	r2, r3, #31
 80072a4:	d423      	bmi.n	80072ee <__lo0bits+0x56>
 80072a6:	0798      	lsls	r0, r3, #30
 80072a8:	bf49      	itett	mi
 80072aa:	085b      	lsrmi	r3, r3, #1
 80072ac:	089b      	lsrpl	r3, r3, #2
 80072ae:	2001      	movmi	r0, #1
 80072b0:	600b      	strmi	r3, [r1, #0]
 80072b2:	bf5c      	itt	pl
 80072b4:	600b      	strpl	r3, [r1, #0]
 80072b6:	2002      	movpl	r0, #2
 80072b8:	4770      	bx	lr
 80072ba:	b298      	uxth	r0, r3
 80072bc:	b9a8      	cbnz	r0, 80072ea <__lo0bits+0x52>
 80072be:	0c1b      	lsrs	r3, r3, #16
 80072c0:	2010      	movs	r0, #16
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	b90a      	cbnz	r2, 80072ca <__lo0bits+0x32>
 80072c6:	3008      	adds	r0, #8
 80072c8:	0a1b      	lsrs	r3, r3, #8
 80072ca:	071a      	lsls	r2, r3, #28
 80072cc:	bf04      	itt	eq
 80072ce:	091b      	lsreq	r3, r3, #4
 80072d0:	3004      	addeq	r0, #4
 80072d2:	079a      	lsls	r2, r3, #30
 80072d4:	bf04      	itt	eq
 80072d6:	089b      	lsreq	r3, r3, #2
 80072d8:	3002      	addeq	r0, #2
 80072da:	07da      	lsls	r2, r3, #31
 80072dc:	d403      	bmi.n	80072e6 <__lo0bits+0x4e>
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	f100 0001 	add.w	r0, r0, #1
 80072e4:	d005      	beq.n	80072f2 <__lo0bits+0x5a>
 80072e6:	600b      	str	r3, [r1, #0]
 80072e8:	4770      	bx	lr
 80072ea:	4610      	mov	r0, r2
 80072ec:	e7e9      	b.n	80072c2 <__lo0bits+0x2a>
 80072ee:	2000      	movs	r0, #0
 80072f0:	4770      	bx	lr
 80072f2:	2020      	movs	r0, #32
 80072f4:	4770      	bx	lr
	...

080072f8 <__i2b>:
 80072f8:	b510      	push	{r4, lr}
 80072fa:	460c      	mov	r4, r1
 80072fc:	2101      	movs	r1, #1
 80072fe:	f7ff feb9 	bl	8007074 <_Balloc>
 8007302:	4602      	mov	r2, r0
 8007304:	b928      	cbnz	r0, 8007312 <__i2b+0x1a>
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <__i2b+0x24>)
 8007308:	4805      	ldr	r0, [pc, #20]	; (8007320 <__i2b+0x28>)
 800730a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800730e:	f7ff fae5 	bl	80068dc <__assert_func>
 8007312:	2301      	movs	r3, #1
 8007314:	6144      	str	r4, [r0, #20]
 8007316:	6103      	str	r3, [r0, #16]
 8007318:	bd10      	pop	{r4, pc}
 800731a:	bf00      	nop
 800731c:	08008ce8 	.word	0x08008ce8
 8007320:	08008d74 	.word	0x08008d74

08007324 <__multiply>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	4691      	mov	r9, r2
 800732a:	690a      	ldr	r2, [r1, #16]
 800732c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007330:	429a      	cmp	r2, r3
 8007332:	bfb8      	it	lt
 8007334:	460b      	movlt	r3, r1
 8007336:	460c      	mov	r4, r1
 8007338:	bfbc      	itt	lt
 800733a:	464c      	movlt	r4, r9
 800733c:	4699      	movlt	r9, r3
 800733e:	6927      	ldr	r7, [r4, #16]
 8007340:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007344:	68a3      	ldr	r3, [r4, #8]
 8007346:	6861      	ldr	r1, [r4, #4]
 8007348:	eb07 060a 	add.w	r6, r7, sl
 800734c:	42b3      	cmp	r3, r6
 800734e:	b085      	sub	sp, #20
 8007350:	bfb8      	it	lt
 8007352:	3101      	addlt	r1, #1
 8007354:	f7ff fe8e 	bl	8007074 <_Balloc>
 8007358:	b930      	cbnz	r0, 8007368 <__multiply+0x44>
 800735a:	4602      	mov	r2, r0
 800735c:	4b44      	ldr	r3, [pc, #272]	; (8007470 <__multiply+0x14c>)
 800735e:	4845      	ldr	r0, [pc, #276]	; (8007474 <__multiply+0x150>)
 8007360:	f240 115d 	movw	r1, #349	; 0x15d
 8007364:	f7ff faba 	bl	80068dc <__assert_func>
 8007368:	f100 0514 	add.w	r5, r0, #20
 800736c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007370:	462b      	mov	r3, r5
 8007372:	2200      	movs	r2, #0
 8007374:	4543      	cmp	r3, r8
 8007376:	d321      	bcc.n	80073bc <__multiply+0x98>
 8007378:	f104 0314 	add.w	r3, r4, #20
 800737c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007380:	f109 0314 	add.w	r3, r9, #20
 8007384:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007388:	9202      	str	r2, [sp, #8]
 800738a:	1b3a      	subs	r2, r7, r4
 800738c:	3a15      	subs	r2, #21
 800738e:	f022 0203 	bic.w	r2, r2, #3
 8007392:	3204      	adds	r2, #4
 8007394:	f104 0115 	add.w	r1, r4, #21
 8007398:	428f      	cmp	r7, r1
 800739a:	bf38      	it	cc
 800739c:	2204      	movcc	r2, #4
 800739e:	9201      	str	r2, [sp, #4]
 80073a0:	9a02      	ldr	r2, [sp, #8]
 80073a2:	9303      	str	r3, [sp, #12]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d80c      	bhi.n	80073c2 <__multiply+0x9e>
 80073a8:	2e00      	cmp	r6, #0
 80073aa:	dd03      	ble.n	80073b4 <__multiply+0x90>
 80073ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d05a      	beq.n	800746a <__multiply+0x146>
 80073b4:	6106      	str	r6, [r0, #16]
 80073b6:	b005      	add	sp, #20
 80073b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073bc:	f843 2b04 	str.w	r2, [r3], #4
 80073c0:	e7d8      	b.n	8007374 <__multiply+0x50>
 80073c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80073c6:	f1ba 0f00 	cmp.w	sl, #0
 80073ca:	d024      	beq.n	8007416 <__multiply+0xf2>
 80073cc:	f104 0e14 	add.w	lr, r4, #20
 80073d0:	46a9      	mov	r9, r5
 80073d2:	f04f 0c00 	mov.w	ip, #0
 80073d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073da:	f8d9 1000 	ldr.w	r1, [r9]
 80073de:	fa1f fb82 	uxth.w	fp, r2
 80073e2:	b289      	uxth	r1, r1
 80073e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80073e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073ec:	f8d9 2000 	ldr.w	r2, [r9]
 80073f0:	4461      	add	r1, ip
 80073f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80073fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073fe:	b289      	uxth	r1, r1
 8007400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007404:	4577      	cmp	r7, lr
 8007406:	f849 1b04 	str.w	r1, [r9], #4
 800740a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800740e:	d8e2      	bhi.n	80073d6 <__multiply+0xb2>
 8007410:	9a01      	ldr	r2, [sp, #4]
 8007412:	f845 c002 	str.w	ip, [r5, r2]
 8007416:	9a03      	ldr	r2, [sp, #12]
 8007418:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800741c:	3304      	adds	r3, #4
 800741e:	f1b9 0f00 	cmp.w	r9, #0
 8007422:	d020      	beq.n	8007466 <__multiply+0x142>
 8007424:	6829      	ldr	r1, [r5, #0]
 8007426:	f104 0c14 	add.w	ip, r4, #20
 800742a:	46ae      	mov	lr, r5
 800742c:	f04f 0a00 	mov.w	sl, #0
 8007430:	f8bc b000 	ldrh.w	fp, [ip]
 8007434:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007438:	fb09 220b 	mla	r2, r9, fp, r2
 800743c:	4492      	add	sl, r2
 800743e:	b289      	uxth	r1, r1
 8007440:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007444:	f84e 1b04 	str.w	r1, [lr], #4
 8007448:	f85c 2b04 	ldr.w	r2, [ip], #4
 800744c:	f8be 1000 	ldrh.w	r1, [lr]
 8007450:	0c12      	lsrs	r2, r2, #16
 8007452:	fb09 1102 	mla	r1, r9, r2, r1
 8007456:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800745a:	4567      	cmp	r7, ip
 800745c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007460:	d8e6      	bhi.n	8007430 <__multiply+0x10c>
 8007462:	9a01      	ldr	r2, [sp, #4]
 8007464:	50a9      	str	r1, [r5, r2]
 8007466:	3504      	adds	r5, #4
 8007468:	e79a      	b.n	80073a0 <__multiply+0x7c>
 800746a:	3e01      	subs	r6, #1
 800746c:	e79c      	b.n	80073a8 <__multiply+0x84>
 800746e:	bf00      	nop
 8007470:	08008ce8 	.word	0x08008ce8
 8007474:	08008d74 	.word	0x08008d74

08007478 <__pow5mult>:
 8007478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800747c:	4615      	mov	r5, r2
 800747e:	f012 0203 	ands.w	r2, r2, #3
 8007482:	4606      	mov	r6, r0
 8007484:	460f      	mov	r7, r1
 8007486:	d007      	beq.n	8007498 <__pow5mult+0x20>
 8007488:	4c25      	ldr	r4, [pc, #148]	; (8007520 <__pow5mult+0xa8>)
 800748a:	3a01      	subs	r2, #1
 800748c:	2300      	movs	r3, #0
 800748e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007492:	f7ff fe51 	bl	8007138 <__multadd>
 8007496:	4607      	mov	r7, r0
 8007498:	10ad      	asrs	r5, r5, #2
 800749a:	d03d      	beq.n	8007518 <__pow5mult+0xa0>
 800749c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800749e:	b97c      	cbnz	r4, 80074c0 <__pow5mult+0x48>
 80074a0:	2010      	movs	r0, #16
 80074a2:	f7fe fa6f 	bl	8005984 <malloc>
 80074a6:	4602      	mov	r2, r0
 80074a8:	6270      	str	r0, [r6, #36]	; 0x24
 80074aa:	b928      	cbnz	r0, 80074b8 <__pow5mult+0x40>
 80074ac:	4b1d      	ldr	r3, [pc, #116]	; (8007524 <__pow5mult+0xac>)
 80074ae:	481e      	ldr	r0, [pc, #120]	; (8007528 <__pow5mult+0xb0>)
 80074b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80074b4:	f7ff fa12 	bl	80068dc <__assert_func>
 80074b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074bc:	6004      	str	r4, [r0, #0]
 80074be:	60c4      	str	r4, [r0, #12]
 80074c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074c8:	b94c      	cbnz	r4, 80074de <__pow5mult+0x66>
 80074ca:	f240 2171 	movw	r1, #625	; 0x271
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff ff12 	bl	80072f8 <__i2b>
 80074d4:	2300      	movs	r3, #0
 80074d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80074da:	4604      	mov	r4, r0
 80074dc:	6003      	str	r3, [r0, #0]
 80074de:	f04f 0900 	mov.w	r9, #0
 80074e2:	07eb      	lsls	r3, r5, #31
 80074e4:	d50a      	bpl.n	80074fc <__pow5mult+0x84>
 80074e6:	4639      	mov	r1, r7
 80074e8:	4622      	mov	r2, r4
 80074ea:	4630      	mov	r0, r6
 80074ec:	f7ff ff1a 	bl	8007324 <__multiply>
 80074f0:	4639      	mov	r1, r7
 80074f2:	4680      	mov	r8, r0
 80074f4:	4630      	mov	r0, r6
 80074f6:	f7ff fdfd 	bl	80070f4 <_Bfree>
 80074fa:	4647      	mov	r7, r8
 80074fc:	106d      	asrs	r5, r5, #1
 80074fe:	d00b      	beq.n	8007518 <__pow5mult+0xa0>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	b938      	cbnz	r0, 8007514 <__pow5mult+0x9c>
 8007504:	4622      	mov	r2, r4
 8007506:	4621      	mov	r1, r4
 8007508:	4630      	mov	r0, r6
 800750a:	f7ff ff0b 	bl	8007324 <__multiply>
 800750e:	6020      	str	r0, [r4, #0]
 8007510:	f8c0 9000 	str.w	r9, [r0]
 8007514:	4604      	mov	r4, r0
 8007516:	e7e4      	b.n	80074e2 <__pow5mult+0x6a>
 8007518:	4638      	mov	r0, r7
 800751a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751e:	bf00      	nop
 8007520:	08008ec0 	.word	0x08008ec0
 8007524:	08008c38 	.word	0x08008c38
 8007528:	08008d74 	.word	0x08008d74

0800752c <__lshift>:
 800752c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	460c      	mov	r4, r1
 8007532:	6849      	ldr	r1, [r1, #4]
 8007534:	6923      	ldr	r3, [r4, #16]
 8007536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	4607      	mov	r7, r0
 800753e:	4691      	mov	r9, r2
 8007540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007544:	f108 0601 	add.w	r6, r8, #1
 8007548:	42b3      	cmp	r3, r6
 800754a:	db0b      	blt.n	8007564 <__lshift+0x38>
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff fd91 	bl	8007074 <_Balloc>
 8007552:	4605      	mov	r5, r0
 8007554:	b948      	cbnz	r0, 800756a <__lshift+0x3e>
 8007556:	4602      	mov	r2, r0
 8007558:	4b2a      	ldr	r3, [pc, #168]	; (8007604 <__lshift+0xd8>)
 800755a:	482b      	ldr	r0, [pc, #172]	; (8007608 <__lshift+0xdc>)
 800755c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007560:	f7ff f9bc 	bl	80068dc <__assert_func>
 8007564:	3101      	adds	r1, #1
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	e7ee      	b.n	8007548 <__lshift+0x1c>
 800756a:	2300      	movs	r3, #0
 800756c:	f100 0114 	add.w	r1, r0, #20
 8007570:	f100 0210 	add.w	r2, r0, #16
 8007574:	4618      	mov	r0, r3
 8007576:	4553      	cmp	r3, sl
 8007578:	db37      	blt.n	80075ea <__lshift+0xbe>
 800757a:	6920      	ldr	r0, [r4, #16]
 800757c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007580:	f104 0314 	add.w	r3, r4, #20
 8007584:	f019 091f 	ands.w	r9, r9, #31
 8007588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800758c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007590:	d02f      	beq.n	80075f2 <__lshift+0xc6>
 8007592:	f1c9 0e20 	rsb	lr, r9, #32
 8007596:	468a      	mov	sl, r1
 8007598:	f04f 0c00 	mov.w	ip, #0
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	fa02 f209 	lsl.w	r2, r2, r9
 80075a2:	ea42 020c 	orr.w	r2, r2, ip
 80075a6:	f84a 2b04 	str.w	r2, [sl], #4
 80075aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ae:	4298      	cmp	r0, r3
 80075b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80075b4:	d8f2      	bhi.n	800759c <__lshift+0x70>
 80075b6:	1b03      	subs	r3, r0, r4
 80075b8:	3b15      	subs	r3, #21
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	3304      	adds	r3, #4
 80075c0:	f104 0215 	add.w	r2, r4, #21
 80075c4:	4290      	cmp	r0, r2
 80075c6:	bf38      	it	cc
 80075c8:	2304      	movcc	r3, #4
 80075ca:	f841 c003 	str.w	ip, [r1, r3]
 80075ce:	f1bc 0f00 	cmp.w	ip, #0
 80075d2:	d001      	beq.n	80075d8 <__lshift+0xac>
 80075d4:	f108 0602 	add.w	r6, r8, #2
 80075d8:	3e01      	subs	r6, #1
 80075da:	4638      	mov	r0, r7
 80075dc:	612e      	str	r6, [r5, #16]
 80075de:	4621      	mov	r1, r4
 80075e0:	f7ff fd88 	bl	80070f4 <_Bfree>
 80075e4:	4628      	mov	r0, r5
 80075e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80075ee:	3301      	adds	r3, #1
 80075f0:	e7c1      	b.n	8007576 <__lshift+0x4a>
 80075f2:	3904      	subs	r1, #4
 80075f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80075fc:	4298      	cmp	r0, r3
 80075fe:	d8f9      	bhi.n	80075f4 <__lshift+0xc8>
 8007600:	e7ea      	b.n	80075d8 <__lshift+0xac>
 8007602:	bf00      	nop
 8007604:	08008ce8 	.word	0x08008ce8
 8007608:	08008d74 	.word	0x08008d74

0800760c <__mcmp>:
 800760c:	b530      	push	{r4, r5, lr}
 800760e:	6902      	ldr	r2, [r0, #16]
 8007610:	690c      	ldr	r4, [r1, #16]
 8007612:	1b12      	subs	r2, r2, r4
 8007614:	d10e      	bne.n	8007634 <__mcmp+0x28>
 8007616:	f100 0314 	add.w	r3, r0, #20
 800761a:	3114      	adds	r1, #20
 800761c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800762c:	42a5      	cmp	r5, r4
 800762e:	d003      	beq.n	8007638 <__mcmp+0x2c>
 8007630:	d305      	bcc.n	800763e <__mcmp+0x32>
 8007632:	2201      	movs	r2, #1
 8007634:	4610      	mov	r0, r2
 8007636:	bd30      	pop	{r4, r5, pc}
 8007638:	4283      	cmp	r3, r0
 800763a:	d3f3      	bcc.n	8007624 <__mcmp+0x18>
 800763c:	e7fa      	b.n	8007634 <__mcmp+0x28>
 800763e:	f04f 32ff 	mov.w	r2, #4294967295
 8007642:	e7f7      	b.n	8007634 <__mcmp+0x28>

08007644 <__mdiff>:
 8007644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	460c      	mov	r4, r1
 800764a:	4606      	mov	r6, r0
 800764c:	4611      	mov	r1, r2
 800764e:	4620      	mov	r0, r4
 8007650:	4690      	mov	r8, r2
 8007652:	f7ff ffdb 	bl	800760c <__mcmp>
 8007656:	1e05      	subs	r5, r0, #0
 8007658:	d110      	bne.n	800767c <__mdiff+0x38>
 800765a:	4629      	mov	r1, r5
 800765c:	4630      	mov	r0, r6
 800765e:	f7ff fd09 	bl	8007074 <_Balloc>
 8007662:	b930      	cbnz	r0, 8007672 <__mdiff+0x2e>
 8007664:	4b3a      	ldr	r3, [pc, #232]	; (8007750 <__mdiff+0x10c>)
 8007666:	4602      	mov	r2, r0
 8007668:	f240 2132 	movw	r1, #562	; 0x232
 800766c:	4839      	ldr	r0, [pc, #228]	; (8007754 <__mdiff+0x110>)
 800766e:	f7ff f935 	bl	80068dc <__assert_func>
 8007672:	2301      	movs	r3, #1
 8007674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767c:	bfa4      	itt	ge
 800767e:	4643      	movge	r3, r8
 8007680:	46a0      	movge	r8, r4
 8007682:	4630      	mov	r0, r6
 8007684:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007688:	bfa6      	itte	ge
 800768a:	461c      	movge	r4, r3
 800768c:	2500      	movge	r5, #0
 800768e:	2501      	movlt	r5, #1
 8007690:	f7ff fcf0 	bl	8007074 <_Balloc>
 8007694:	b920      	cbnz	r0, 80076a0 <__mdiff+0x5c>
 8007696:	4b2e      	ldr	r3, [pc, #184]	; (8007750 <__mdiff+0x10c>)
 8007698:	4602      	mov	r2, r0
 800769a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800769e:	e7e5      	b.n	800766c <__mdiff+0x28>
 80076a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076a4:	6926      	ldr	r6, [r4, #16]
 80076a6:	60c5      	str	r5, [r0, #12]
 80076a8:	f104 0914 	add.w	r9, r4, #20
 80076ac:	f108 0514 	add.w	r5, r8, #20
 80076b0:	f100 0e14 	add.w	lr, r0, #20
 80076b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80076b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076bc:	f108 0210 	add.w	r2, r8, #16
 80076c0:	46f2      	mov	sl, lr
 80076c2:	2100      	movs	r1, #0
 80076c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80076c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076cc:	fa1f f883 	uxth.w	r8, r3
 80076d0:	fa11 f18b 	uxtah	r1, r1, fp
 80076d4:	0c1b      	lsrs	r3, r3, #16
 80076d6:	eba1 0808 	sub.w	r8, r1, r8
 80076da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076e2:	fa1f f888 	uxth.w	r8, r8
 80076e6:	1419      	asrs	r1, r3, #16
 80076e8:	454e      	cmp	r6, r9
 80076ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076ee:	f84a 3b04 	str.w	r3, [sl], #4
 80076f2:	d8e7      	bhi.n	80076c4 <__mdiff+0x80>
 80076f4:	1b33      	subs	r3, r6, r4
 80076f6:	3b15      	subs	r3, #21
 80076f8:	f023 0303 	bic.w	r3, r3, #3
 80076fc:	3304      	adds	r3, #4
 80076fe:	3415      	adds	r4, #21
 8007700:	42a6      	cmp	r6, r4
 8007702:	bf38      	it	cc
 8007704:	2304      	movcc	r3, #4
 8007706:	441d      	add	r5, r3
 8007708:	4473      	add	r3, lr
 800770a:	469e      	mov	lr, r3
 800770c:	462e      	mov	r6, r5
 800770e:	4566      	cmp	r6, ip
 8007710:	d30e      	bcc.n	8007730 <__mdiff+0xec>
 8007712:	f10c 0203 	add.w	r2, ip, #3
 8007716:	1b52      	subs	r2, r2, r5
 8007718:	f022 0203 	bic.w	r2, r2, #3
 800771c:	3d03      	subs	r5, #3
 800771e:	45ac      	cmp	ip, r5
 8007720:	bf38      	it	cc
 8007722:	2200      	movcc	r2, #0
 8007724:	441a      	add	r2, r3
 8007726:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800772a:	b17b      	cbz	r3, 800774c <__mdiff+0x108>
 800772c:	6107      	str	r7, [r0, #16]
 800772e:	e7a3      	b.n	8007678 <__mdiff+0x34>
 8007730:	f856 8b04 	ldr.w	r8, [r6], #4
 8007734:	fa11 f288 	uxtah	r2, r1, r8
 8007738:	1414      	asrs	r4, r2, #16
 800773a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800773e:	b292      	uxth	r2, r2
 8007740:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007744:	f84e 2b04 	str.w	r2, [lr], #4
 8007748:	1421      	asrs	r1, r4, #16
 800774a:	e7e0      	b.n	800770e <__mdiff+0xca>
 800774c:	3f01      	subs	r7, #1
 800774e:	e7ea      	b.n	8007726 <__mdiff+0xe2>
 8007750:	08008ce8 	.word	0x08008ce8
 8007754:	08008d74 	.word	0x08008d74

08007758 <__ulp>:
 8007758:	b082      	sub	sp, #8
 800775a:	ed8d 0b00 	vstr	d0, [sp]
 800775e:	9b01      	ldr	r3, [sp, #4]
 8007760:	4912      	ldr	r1, [pc, #72]	; (80077ac <__ulp+0x54>)
 8007762:	4019      	ands	r1, r3
 8007764:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007768:	2900      	cmp	r1, #0
 800776a:	dd05      	ble.n	8007778 <__ulp+0x20>
 800776c:	2200      	movs	r2, #0
 800776e:	460b      	mov	r3, r1
 8007770:	ec43 2b10 	vmov	d0, r2, r3
 8007774:	b002      	add	sp, #8
 8007776:	4770      	bx	lr
 8007778:	4249      	negs	r1, r1
 800777a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800777e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	da04      	bge.n	8007796 <__ulp+0x3e>
 800778c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007790:	fa41 f300 	asr.w	r3, r1, r0
 8007794:	e7ec      	b.n	8007770 <__ulp+0x18>
 8007796:	f1a0 0114 	sub.w	r1, r0, #20
 800779a:	291e      	cmp	r1, #30
 800779c:	bfda      	itte	le
 800779e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80077a2:	fa20 f101 	lsrle.w	r1, r0, r1
 80077a6:	2101      	movgt	r1, #1
 80077a8:	460a      	mov	r2, r1
 80077aa:	e7e1      	b.n	8007770 <__ulp+0x18>
 80077ac:	7ff00000 	.word	0x7ff00000

080077b0 <__b2d>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	6905      	ldr	r5, [r0, #16]
 80077b4:	f100 0714 	add.w	r7, r0, #20
 80077b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80077bc:	1f2e      	subs	r6, r5, #4
 80077be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80077c2:	4620      	mov	r0, r4
 80077c4:	f7ff fd48 	bl	8007258 <__hi0bits>
 80077c8:	f1c0 0320 	rsb	r3, r0, #32
 80077cc:	280a      	cmp	r0, #10
 80077ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800784c <__b2d+0x9c>
 80077d2:	600b      	str	r3, [r1, #0]
 80077d4:	dc14      	bgt.n	8007800 <__b2d+0x50>
 80077d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80077da:	fa24 f10e 	lsr.w	r1, r4, lr
 80077de:	42b7      	cmp	r7, r6
 80077e0:	ea41 030c 	orr.w	r3, r1, ip
 80077e4:	bf34      	ite	cc
 80077e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80077ea:	2100      	movcs	r1, #0
 80077ec:	3015      	adds	r0, #21
 80077ee:	fa04 f000 	lsl.w	r0, r4, r0
 80077f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80077f6:	ea40 0201 	orr.w	r2, r0, r1
 80077fa:	ec43 2b10 	vmov	d0, r2, r3
 80077fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007800:	42b7      	cmp	r7, r6
 8007802:	bf3a      	itte	cc
 8007804:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007808:	f1a5 0608 	subcc.w	r6, r5, #8
 800780c:	2100      	movcs	r1, #0
 800780e:	380b      	subs	r0, #11
 8007810:	d017      	beq.n	8007842 <__b2d+0x92>
 8007812:	f1c0 0c20 	rsb	ip, r0, #32
 8007816:	fa04 f500 	lsl.w	r5, r4, r0
 800781a:	42be      	cmp	r6, r7
 800781c:	fa21 f40c 	lsr.w	r4, r1, ip
 8007820:	ea45 0504 	orr.w	r5, r5, r4
 8007824:	bf8c      	ite	hi
 8007826:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800782a:	2400      	movls	r4, #0
 800782c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007830:	fa01 f000 	lsl.w	r0, r1, r0
 8007834:	fa24 f40c 	lsr.w	r4, r4, ip
 8007838:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800783c:	ea40 0204 	orr.w	r2, r0, r4
 8007840:	e7db      	b.n	80077fa <__b2d+0x4a>
 8007842:	ea44 030c 	orr.w	r3, r4, ip
 8007846:	460a      	mov	r2, r1
 8007848:	e7d7      	b.n	80077fa <__b2d+0x4a>
 800784a:	bf00      	nop
 800784c:	3ff00000 	.word	0x3ff00000

08007850 <__d2b>:
 8007850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007854:	4689      	mov	r9, r1
 8007856:	2101      	movs	r1, #1
 8007858:	ec57 6b10 	vmov	r6, r7, d0
 800785c:	4690      	mov	r8, r2
 800785e:	f7ff fc09 	bl	8007074 <_Balloc>
 8007862:	4604      	mov	r4, r0
 8007864:	b930      	cbnz	r0, 8007874 <__d2b+0x24>
 8007866:	4602      	mov	r2, r0
 8007868:	4b25      	ldr	r3, [pc, #148]	; (8007900 <__d2b+0xb0>)
 800786a:	4826      	ldr	r0, [pc, #152]	; (8007904 <__d2b+0xb4>)
 800786c:	f240 310a 	movw	r1, #778	; 0x30a
 8007870:	f7ff f834 	bl	80068dc <__assert_func>
 8007874:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007878:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800787c:	bb35      	cbnz	r5, 80078cc <__d2b+0x7c>
 800787e:	2e00      	cmp	r6, #0
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	d028      	beq.n	80078d6 <__d2b+0x86>
 8007884:	4668      	mov	r0, sp
 8007886:	9600      	str	r6, [sp, #0]
 8007888:	f7ff fd06 	bl	8007298 <__lo0bits>
 800788c:	9900      	ldr	r1, [sp, #0]
 800788e:	b300      	cbz	r0, 80078d2 <__d2b+0x82>
 8007890:	9a01      	ldr	r2, [sp, #4]
 8007892:	f1c0 0320 	rsb	r3, r0, #32
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	430b      	orrs	r3, r1
 800789c:	40c2      	lsrs	r2, r0
 800789e:	6163      	str	r3, [r4, #20]
 80078a0:	9201      	str	r2, [sp, #4]
 80078a2:	9b01      	ldr	r3, [sp, #4]
 80078a4:	61a3      	str	r3, [r4, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bf14      	ite	ne
 80078aa:	2202      	movne	r2, #2
 80078ac:	2201      	moveq	r2, #1
 80078ae:	6122      	str	r2, [r4, #16]
 80078b0:	b1d5      	cbz	r5, 80078e8 <__d2b+0x98>
 80078b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078b6:	4405      	add	r5, r0
 80078b8:	f8c9 5000 	str.w	r5, [r9]
 80078bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078c0:	f8c8 0000 	str.w	r0, [r8]
 80078c4:	4620      	mov	r0, r4
 80078c6:	b003      	add	sp, #12
 80078c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078d0:	e7d5      	b.n	800787e <__d2b+0x2e>
 80078d2:	6161      	str	r1, [r4, #20]
 80078d4:	e7e5      	b.n	80078a2 <__d2b+0x52>
 80078d6:	a801      	add	r0, sp, #4
 80078d8:	f7ff fcde 	bl	8007298 <__lo0bits>
 80078dc:	9b01      	ldr	r3, [sp, #4]
 80078de:	6163      	str	r3, [r4, #20]
 80078e0:	2201      	movs	r2, #1
 80078e2:	6122      	str	r2, [r4, #16]
 80078e4:	3020      	adds	r0, #32
 80078e6:	e7e3      	b.n	80078b0 <__d2b+0x60>
 80078e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078f0:	f8c9 0000 	str.w	r0, [r9]
 80078f4:	6918      	ldr	r0, [r3, #16]
 80078f6:	f7ff fcaf 	bl	8007258 <__hi0bits>
 80078fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078fe:	e7df      	b.n	80078c0 <__d2b+0x70>
 8007900:	08008ce8 	.word	0x08008ce8
 8007904:	08008d74 	.word	0x08008d74

08007908 <__ratio>:
 8007908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	4688      	mov	r8, r1
 800790e:	4669      	mov	r1, sp
 8007910:	4681      	mov	r9, r0
 8007912:	f7ff ff4d 	bl	80077b0 <__b2d>
 8007916:	a901      	add	r1, sp, #4
 8007918:	4640      	mov	r0, r8
 800791a:	ec55 4b10 	vmov	r4, r5, d0
 800791e:	f7ff ff47 	bl	80077b0 <__b2d>
 8007922:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007926:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800792a:	eba3 0c02 	sub.w	ip, r3, r2
 800792e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007938:	ec51 0b10 	vmov	r0, r1, d0
 800793c:	2b00      	cmp	r3, #0
 800793e:	bfd6      	itet	le
 8007940:	460a      	movle	r2, r1
 8007942:	462a      	movgt	r2, r5
 8007944:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007948:	468b      	mov	fp, r1
 800794a:	462f      	mov	r7, r5
 800794c:	bfd4      	ite	le
 800794e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007952:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007956:	4620      	mov	r0, r4
 8007958:	ee10 2a10 	vmov	r2, s0
 800795c:	465b      	mov	r3, fp
 800795e:	4639      	mov	r1, r7
 8007960:	f7f8 ff8c 	bl	800087c <__aeabi_ddiv>
 8007964:	ec41 0b10 	vmov	d0, r0, r1
 8007968:	b003      	add	sp, #12
 800796a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800796e <__copybits>:
 800796e:	3901      	subs	r1, #1
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	1149      	asrs	r1, r1, #5
 8007974:	6914      	ldr	r4, [r2, #16]
 8007976:	3101      	adds	r1, #1
 8007978:	f102 0314 	add.w	r3, r2, #20
 800797c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007980:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007984:	1f05      	subs	r5, r0, #4
 8007986:	42a3      	cmp	r3, r4
 8007988:	d30c      	bcc.n	80079a4 <__copybits+0x36>
 800798a:	1aa3      	subs	r3, r4, r2
 800798c:	3b11      	subs	r3, #17
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	3211      	adds	r2, #17
 8007994:	42a2      	cmp	r2, r4
 8007996:	bf88      	it	hi
 8007998:	2300      	movhi	r3, #0
 800799a:	4418      	add	r0, r3
 800799c:	2300      	movs	r3, #0
 800799e:	4288      	cmp	r0, r1
 80079a0:	d305      	bcc.n	80079ae <__copybits+0x40>
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80079a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80079ac:	e7eb      	b.n	8007986 <__copybits+0x18>
 80079ae:	f840 3b04 	str.w	r3, [r0], #4
 80079b2:	e7f4      	b.n	800799e <__copybits+0x30>

080079b4 <__any_on>:
 80079b4:	f100 0214 	add.w	r2, r0, #20
 80079b8:	6900      	ldr	r0, [r0, #16]
 80079ba:	114b      	asrs	r3, r1, #5
 80079bc:	4298      	cmp	r0, r3
 80079be:	b510      	push	{r4, lr}
 80079c0:	db11      	blt.n	80079e6 <__any_on+0x32>
 80079c2:	dd0a      	ble.n	80079da <__any_on+0x26>
 80079c4:	f011 011f 	ands.w	r1, r1, #31
 80079c8:	d007      	beq.n	80079da <__any_on+0x26>
 80079ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80079ce:	fa24 f001 	lsr.w	r0, r4, r1
 80079d2:	fa00 f101 	lsl.w	r1, r0, r1
 80079d6:	428c      	cmp	r4, r1
 80079d8:	d10b      	bne.n	80079f2 <__any_on+0x3e>
 80079da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079de:	4293      	cmp	r3, r2
 80079e0:	d803      	bhi.n	80079ea <__any_on+0x36>
 80079e2:	2000      	movs	r0, #0
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	4603      	mov	r3, r0
 80079e8:	e7f7      	b.n	80079da <__any_on+0x26>
 80079ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079ee:	2900      	cmp	r1, #0
 80079f0:	d0f5      	beq.n	80079de <__any_on+0x2a>
 80079f2:	2001      	movs	r0, #1
 80079f4:	e7f6      	b.n	80079e4 <__any_on+0x30>

080079f6 <_calloc_r>:
 80079f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079f8:	fba1 2402 	umull	r2, r4, r1, r2
 80079fc:	b94c      	cbnz	r4, 8007a12 <_calloc_r+0x1c>
 80079fe:	4611      	mov	r1, r2
 8007a00:	9201      	str	r2, [sp, #4]
 8007a02:	f7fe f83b 	bl	8005a7c <_malloc_r>
 8007a06:	9a01      	ldr	r2, [sp, #4]
 8007a08:	4605      	mov	r5, r0
 8007a0a:	b930      	cbnz	r0, 8007a1a <_calloc_r+0x24>
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	b003      	add	sp, #12
 8007a10:	bd30      	pop	{r4, r5, pc}
 8007a12:	220c      	movs	r2, #12
 8007a14:	6002      	str	r2, [r0, #0]
 8007a16:	2500      	movs	r5, #0
 8007a18:	e7f8      	b.n	8007a0c <_calloc_r+0x16>
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	f7fd ffba 	bl	8005994 <memset>
 8007a20:	e7f4      	b.n	8007a0c <_calloc_r+0x16>

08007a22 <__ssputs_r>:
 8007a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a26:	688e      	ldr	r6, [r1, #8]
 8007a28:	429e      	cmp	r6, r3
 8007a2a:	4682      	mov	sl, r0
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	4690      	mov	r8, r2
 8007a30:	461f      	mov	r7, r3
 8007a32:	d838      	bhi.n	8007aa6 <__ssputs_r+0x84>
 8007a34:	898a      	ldrh	r2, [r1, #12]
 8007a36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a3a:	d032      	beq.n	8007aa2 <__ssputs_r+0x80>
 8007a3c:	6825      	ldr	r5, [r4, #0]
 8007a3e:	6909      	ldr	r1, [r1, #16]
 8007a40:	eba5 0901 	sub.w	r9, r5, r1
 8007a44:	6965      	ldr	r5, [r4, #20]
 8007a46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a4e:	3301      	adds	r3, #1
 8007a50:	444b      	add	r3, r9
 8007a52:	106d      	asrs	r5, r5, #1
 8007a54:	429d      	cmp	r5, r3
 8007a56:	bf38      	it	cc
 8007a58:	461d      	movcc	r5, r3
 8007a5a:	0553      	lsls	r3, r2, #21
 8007a5c:	d531      	bpl.n	8007ac2 <__ssputs_r+0xa0>
 8007a5e:	4629      	mov	r1, r5
 8007a60:	f7fe f80c 	bl	8005a7c <_malloc_r>
 8007a64:	4606      	mov	r6, r0
 8007a66:	b950      	cbnz	r0, 8007a7e <__ssputs_r+0x5c>
 8007a68:	230c      	movs	r3, #12
 8007a6a:	f8ca 3000 	str.w	r3, [sl]
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7e:	6921      	ldr	r1, [r4, #16]
 8007a80:	464a      	mov	r2, r9
 8007a82:	f7ff fadd 	bl	8007040 <memcpy>
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	6126      	str	r6, [r4, #16]
 8007a94:	6165      	str	r5, [r4, #20]
 8007a96:	444e      	add	r6, r9
 8007a98:	eba5 0509 	sub.w	r5, r5, r9
 8007a9c:	6026      	str	r6, [r4, #0]
 8007a9e:	60a5      	str	r5, [r4, #8]
 8007aa0:	463e      	mov	r6, r7
 8007aa2:	42be      	cmp	r6, r7
 8007aa4:	d900      	bls.n	8007aa8 <__ssputs_r+0x86>
 8007aa6:	463e      	mov	r6, r7
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	4632      	mov	r2, r6
 8007aac:	4641      	mov	r1, r8
 8007aae:	f000 ff15 	bl	80088dc <memmove>
 8007ab2:	68a3      	ldr	r3, [r4, #8]
 8007ab4:	1b9b      	subs	r3, r3, r6
 8007ab6:	60a3      	str	r3, [r4, #8]
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	4433      	add	r3, r6
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	2000      	movs	r0, #0
 8007ac0:	e7db      	b.n	8007a7a <__ssputs_r+0x58>
 8007ac2:	462a      	mov	r2, r5
 8007ac4:	f000 ff24 	bl	8008910 <_realloc_r>
 8007ac8:	4606      	mov	r6, r0
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d1e1      	bne.n	8007a92 <__ssputs_r+0x70>
 8007ace:	6921      	ldr	r1, [r4, #16]
 8007ad0:	4650      	mov	r0, sl
 8007ad2:	f7fd ff67 	bl	80059a4 <_free_r>
 8007ad6:	e7c7      	b.n	8007a68 <__ssputs_r+0x46>

08007ad8 <_svfiprintf_r>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	4698      	mov	r8, r3
 8007ade:	898b      	ldrh	r3, [r1, #12]
 8007ae0:	061b      	lsls	r3, r3, #24
 8007ae2:	b09d      	sub	sp, #116	; 0x74
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	460d      	mov	r5, r1
 8007ae8:	4614      	mov	r4, r2
 8007aea:	d50e      	bpl.n	8007b0a <_svfiprintf_r+0x32>
 8007aec:	690b      	ldr	r3, [r1, #16]
 8007aee:	b963      	cbnz	r3, 8007b0a <_svfiprintf_r+0x32>
 8007af0:	2140      	movs	r1, #64	; 0x40
 8007af2:	f7fd ffc3 	bl	8005a7c <_malloc_r>
 8007af6:	6028      	str	r0, [r5, #0]
 8007af8:	6128      	str	r0, [r5, #16]
 8007afa:	b920      	cbnz	r0, 8007b06 <_svfiprintf_r+0x2e>
 8007afc:	230c      	movs	r3, #12
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	e0d1      	b.n	8007caa <_svfiprintf_r+0x1d2>
 8007b06:	2340      	movs	r3, #64	; 0x40
 8007b08:	616b      	str	r3, [r5, #20]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0e:	2320      	movs	r3, #32
 8007b10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b14:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b18:	2330      	movs	r3, #48	; 0x30
 8007b1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cc4 <_svfiprintf_r+0x1ec>
 8007b1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b22:	f04f 0901 	mov.w	r9, #1
 8007b26:	4623      	mov	r3, r4
 8007b28:	469a      	mov	sl, r3
 8007b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b2e:	b10a      	cbz	r2, 8007b34 <_svfiprintf_r+0x5c>
 8007b30:	2a25      	cmp	r2, #37	; 0x25
 8007b32:	d1f9      	bne.n	8007b28 <_svfiprintf_r+0x50>
 8007b34:	ebba 0b04 	subs.w	fp, sl, r4
 8007b38:	d00b      	beq.n	8007b52 <_svfiprintf_r+0x7a>
 8007b3a:	465b      	mov	r3, fp
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	4629      	mov	r1, r5
 8007b40:	4638      	mov	r0, r7
 8007b42:	f7ff ff6e 	bl	8007a22 <__ssputs_r>
 8007b46:	3001      	adds	r0, #1
 8007b48:	f000 80aa 	beq.w	8007ca0 <_svfiprintf_r+0x1c8>
 8007b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b4e:	445a      	add	r2, fp
 8007b50:	9209      	str	r2, [sp, #36]	; 0x24
 8007b52:	f89a 3000 	ldrb.w	r3, [sl]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 80a2 	beq.w	8007ca0 <_svfiprintf_r+0x1c8>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b66:	f10a 0a01 	add.w	sl, sl, #1
 8007b6a:	9304      	str	r3, [sp, #16]
 8007b6c:	9307      	str	r3, [sp, #28]
 8007b6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b72:	931a      	str	r3, [sp, #104]	; 0x68
 8007b74:	4654      	mov	r4, sl
 8007b76:	2205      	movs	r2, #5
 8007b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b7c:	4851      	ldr	r0, [pc, #324]	; (8007cc4 <_svfiprintf_r+0x1ec>)
 8007b7e:	f7f8 fb47 	bl	8000210 <memchr>
 8007b82:	9a04      	ldr	r2, [sp, #16]
 8007b84:	b9d8      	cbnz	r0, 8007bbe <_svfiprintf_r+0xe6>
 8007b86:	06d0      	lsls	r0, r2, #27
 8007b88:	bf44      	itt	mi
 8007b8a:	2320      	movmi	r3, #32
 8007b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b90:	0711      	lsls	r1, r2, #28
 8007b92:	bf44      	itt	mi
 8007b94:	232b      	movmi	r3, #43	; 0x2b
 8007b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba0:	d015      	beq.n	8007bce <_svfiprintf_r+0xf6>
 8007ba2:	9a07      	ldr	r2, [sp, #28]
 8007ba4:	4654      	mov	r4, sl
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	f04f 0c0a 	mov.w	ip, #10
 8007bac:	4621      	mov	r1, r4
 8007bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb2:	3b30      	subs	r3, #48	; 0x30
 8007bb4:	2b09      	cmp	r3, #9
 8007bb6:	d94e      	bls.n	8007c56 <_svfiprintf_r+0x17e>
 8007bb8:	b1b0      	cbz	r0, 8007be8 <_svfiprintf_r+0x110>
 8007bba:	9207      	str	r2, [sp, #28]
 8007bbc:	e014      	b.n	8007be8 <_svfiprintf_r+0x110>
 8007bbe:	eba0 0308 	sub.w	r3, r0, r8
 8007bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	46a2      	mov	sl, r4
 8007bcc:	e7d2      	b.n	8007b74 <_svfiprintf_r+0x9c>
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	1d19      	adds	r1, r3, #4
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	9103      	str	r1, [sp, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bfbb      	ittet	lt
 8007bda:	425b      	neglt	r3, r3
 8007bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8007be0:	9307      	strge	r3, [sp, #28]
 8007be2:	9307      	strlt	r3, [sp, #28]
 8007be4:	bfb8      	it	lt
 8007be6:	9204      	strlt	r2, [sp, #16]
 8007be8:	7823      	ldrb	r3, [r4, #0]
 8007bea:	2b2e      	cmp	r3, #46	; 0x2e
 8007bec:	d10c      	bne.n	8007c08 <_svfiprintf_r+0x130>
 8007bee:	7863      	ldrb	r3, [r4, #1]
 8007bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf2:	d135      	bne.n	8007c60 <_svfiprintf_r+0x188>
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	1d1a      	adds	r2, r3, #4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	9203      	str	r2, [sp, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bfb8      	it	lt
 8007c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c04:	3402      	adds	r4, #2
 8007c06:	9305      	str	r3, [sp, #20]
 8007c08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cd4 <_svfiprintf_r+0x1fc>
 8007c0c:	7821      	ldrb	r1, [r4, #0]
 8007c0e:	2203      	movs	r2, #3
 8007c10:	4650      	mov	r0, sl
 8007c12:	f7f8 fafd 	bl	8000210 <memchr>
 8007c16:	b140      	cbz	r0, 8007c2a <_svfiprintf_r+0x152>
 8007c18:	2340      	movs	r3, #64	; 0x40
 8007c1a:	eba0 000a 	sub.w	r0, r0, sl
 8007c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007c22:	9b04      	ldr	r3, [sp, #16]
 8007c24:	4303      	orrs	r3, r0
 8007c26:	3401      	adds	r4, #1
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2e:	4826      	ldr	r0, [pc, #152]	; (8007cc8 <_svfiprintf_r+0x1f0>)
 8007c30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c34:	2206      	movs	r2, #6
 8007c36:	f7f8 faeb 	bl	8000210 <memchr>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d038      	beq.n	8007cb0 <_svfiprintf_r+0x1d8>
 8007c3e:	4b23      	ldr	r3, [pc, #140]	; (8007ccc <_svfiprintf_r+0x1f4>)
 8007c40:	bb1b      	cbnz	r3, 8007c8a <_svfiprintf_r+0x1b2>
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	3307      	adds	r3, #7
 8007c46:	f023 0307 	bic.w	r3, r3, #7
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	9303      	str	r3, [sp, #12]
 8007c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c50:	4433      	add	r3, r6
 8007c52:	9309      	str	r3, [sp, #36]	; 0x24
 8007c54:	e767      	b.n	8007b26 <_svfiprintf_r+0x4e>
 8007c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	e7a5      	b.n	8007bac <_svfiprintf_r+0xd4>
 8007c60:	2300      	movs	r3, #0
 8007c62:	3401      	adds	r4, #1
 8007c64:	9305      	str	r3, [sp, #20]
 8007c66:	4619      	mov	r1, r3
 8007c68:	f04f 0c0a 	mov.w	ip, #10
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c72:	3a30      	subs	r2, #48	; 0x30
 8007c74:	2a09      	cmp	r2, #9
 8007c76:	d903      	bls.n	8007c80 <_svfiprintf_r+0x1a8>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0c5      	beq.n	8007c08 <_svfiprintf_r+0x130>
 8007c7c:	9105      	str	r1, [sp, #20]
 8007c7e:	e7c3      	b.n	8007c08 <_svfiprintf_r+0x130>
 8007c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c84:	4604      	mov	r4, r0
 8007c86:	2301      	movs	r3, #1
 8007c88:	e7f0      	b.n	8007c6c <_svfiprintf_r+0x194>
 8007c8a:	ab03      	add	r3, sp, #12
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	462a      	mov	r2, r5
 8007c90:	4b0f      	ldr	r3, [pc, #60]	; (8007cd0 <_svfiprintf_r+0x1f8>)
 8007c92:	a904      	add	r1, sp, #16
 8007c94:	4638      	mov	r0, r7
 8007c96:	f3af 8000 	nop.w
 8007c9a:	1c42      	adds	r2, r0, #1
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	d1d6      	bne.n	8007c4e <_svfiprintf_r+0x176>
 8007ca0:	89ab      	ldrh	r3, [r5, #12]
 8007ca2:	065b      	lsls	r3, r3, #25
 8007ca4:	f53f af2c 	bmi.w	8007b00 <_svfiprintf_r+0x28>
 8007ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007caa:	b01d      	add	sp, #116	; 0x74
 8007cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb0:	ab03      	add	r3, sp, #12
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	462a      	mov	r2, r5
 8007cb6:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <_svfiprintf_r+0x1f8>)
 8007cb8:	a904      	add	r1, sp, #16
 8007cba:	4638      	mov	r0, r7
 8007cbc:	f000 f9d4 	bl	8008068 <_printf_i>
 8007cc0:	e7eb      	b.n	8007c9a <_svfiprintf_r+0x1c2>
 8007cc2:	bf00      	nop
 8007cc4:	08008ecc 	.word	0x08008ecc
 8007cc8:	08008ed6 	.word	0x08008ed6
 8007ccc:	00000000 	.word	0x00000000
 8007cd0:	08007a23 	.word	0x08007a23
 8007cd4:	08008ed2 	.word	0x08008ed2

08007cd8 <__sfputc_r>:
 8007cd8:	6893      	ldr	r3, [r2, #8]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	b410      	push	{r4}
 8007ce0:	6093      	str	r3, [r2, #8]
 8007ce2:	da08      	bge.n	8007cf6 <__sfputc_r+0x1e>
 8007ce4:	6994      	ldr	r4, [r2, #24]
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	db01      	blt.n	8007cee <__sfputc_r+0x16>
 8007cea:	290a      	cmp	r1, #10
 8007cec:	d103      	bne.n	8007cf6 <__sfputc_r+0x1e>
 8007cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cf2:	f000 bafd 	b.w	80082f0 <__swbuf_r>
 8007cf6:	6813      	ldr	r3, [r2, #0]
 8007cf8:	1c58      	adds	r0, r3, #1
 8007cfa:	6010      	str	r0, [r2, #0]
 8007cfc:	7019      	strb	r1, [r3, #0]
 8007cfe:	4608      	mov	r0, r1
 8007d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <__sfputs_r>:
 8007d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d08:	4606      	mov	r6, r0
 8007d0a:	460f      	mov	r7, r1
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	18d5      	adds	r5, r2, r3
 8007d10:	42ac      	cmp	r4, r5
 8007d12:	d101      	bne.n	8007d18 <__sfputs_r+0x12>
 8007d14:	2000      	movs	r0, #0
 8007d16:	e007      	b.n	8007d28 <__sfputs_r+0x22>
 8007d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d1c:	463a      	mov	r2, r7
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f7ff ffda 	bl	8007cd8 <__sfputc_r>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d1f3      	bne.n	8007d10 <__sfputs_r+0xa>
 8007d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d2c <_vfiprintf_r>:
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	460d      	mov	r5, r1
 8007d32:	b09d      	sub	sp, #116	; 0x74
 8007d34:	4614      	mov	r4, r2
 8007d36:	4698      	mov	r8, r3
 8007d38:	4606      	mov	r6, r0
 8007d3a:	b118      	cbz	r0, 8007d44 <_vfiprintf_r+0x18>
 8007d3c:	6983      	ldr	r3, [r0, #24]
 8007d3e:	b90b      	cbnz	r3, 8007d44 <_vfiprintf_r+0x18>
 8007d40:	f000 fcc6 	bl	80086d0 <__sinit>
 8007d44:	4b89      	ldr	r3, [pc, #548]	; (8007f6c <_vfiprintf_r+0x240>)
 8007d46:	429d      	cmp	r5, r3
 8007d48:	d11b      	bne.n	8007d82 <_vfiprintf_r+0x56>
 8007d4a:	6875      	ldr	r5, [r6, #4]
 8007d4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d4e:	07d9      	lsls	r1, r3, #31
 8007d50:	d405      	bmi.n	8007d5e <_vfiprintf_r+0x32>
 8007d52:	89ab      	ldrh	r3, [r5, #12]
 8007d54:	059a      	lsls	r2, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_vfiprintf_r+0x32>
 8007d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d5a:	f000 fd57 	bl	800880c <__retarget_lock_acquire_recursive>
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	071b      	lsls	r3, r3, #28
 8007d62:	d501      	bpl.n	8007d68 <_vfiprintf_r+0x3c>
 8007d64:	692b      	ldr	r3, [r5, #16]
 8007d66:	b9eb      	cbnz	r3, 8007da4 <_vfiprintf_r+0x78>
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f000 fb20 	bl	80083b0 <__swsetup_r>
 8007d70:	b1c0      	cbz	r0, 8007da4 <_vfiprintf_r+0x78>
 8007d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d74:	07dc      	lsls	r4, r3, #31
 8007d76:	d50e      	bpl.n	8007d96 <_vfiprintf_r+0x6a>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	b01d      	add	sp, #116	; 0x74
 8007d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d82:	4b7b      	ldr	r3, [pc, #492]	; (8007f70 <_vfiprintf_r+0x244>)
 8007d84:	429d      	cmp	r5, r3
 8007d86:	d101      	bne.n	8007d8c <_vfiprintf_r+0x60>
 8007d88:	68b5      	ldr	r5, [r6, #8]
 8007d8a:	e7df      	b.n	8007d4c <_vfiprintf_r+0x20>
 8007d8c:	4b79      	ldr	r3, [pc, #484]	; (8007f74 <_vfiprintf_r+0x248>)
 8007d8e:	429d      	cmp	r5, r3
 8007d90:	bf08      	it	eq
 8007d92:	68f5      	ldreq	r5, [r6, #12]
 8007d94:	e7da      	b.n	8007d4c <_vfiprintf_r+0x20>
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	0598      	lsls	r0, r3, #22
 8007d9a:	d4ed      	bmi.n	8007d78 <_vfiprintf_r+0x4c>
 8007d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d9e:	f000 fd36 	bl	800880e <__retarget_lock_release_recursive>
 8007da2:	e7e9      	b.n	8007d78 <_vfiprintf_r+0x4c>
 8007da4:	2300      	movs	r3, #0
 8007da6:	9309      	str	r3, [sp, #36]	; 0x24
 8007da8:	2320      	movs	r3, #32
 8007daa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db2:	2330      	movs	r3, #48	; 0x30
 8007db4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f78 <_vfiprintf_r+0x24c>
 8007db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dbc:	f04f 0901 	mov.w	r9, #1
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	469a      	mov	sl, r3
 8007dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc8:	b10a      	cbz	r2, 8007dce <_vfiprintf_r+0xa2>
 8007dca:	2a25      	cmp	r2, #37	; 0x25
 8007dcc:	d1f9      	bne.n	8007dc2 <_vfiprintf_r+0x96>
 8007dce:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd2:	d00b      	beq.n	8007dec <_vfiprintf_r+0xc0>
 8007dd4:	465b      	mov	r3, fp
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f7ff ff93 	bl	8007d06 <__sfputs_r>
 8007de0:	3001      	adds	r0, #1
 8007de2:	f000 80aa 	beq.w	8007f3a <_vfiprintf_r+0x20e>
 8007de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007de8:	445a      	add	r2, fp
 8007dea:	9209      	str	r2, [sp, #36]	; 0x24
 8007dec:	f89a 3000 	ldrb.w	r3, [sl]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80a2 	beq.w	8007f3a <_vfiprintf_r+0x20e>
 8007df6:	2300      	movs	r3, #0
 8007df8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e00:	f10a 0a01 	add.w	sl, sl, #1
 8007e04:	9304      	str	r3, [sp, #16]
 8007e06:	9307      	str	r3, [sp, #28]
 8007e08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e0e:	4654      	mov	r4, sl
 8007e10:	2205      	movs	r2, #5
 8007e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e16:	4858      	ldr	r0, [pc, #352]	; (8007f78 <_vfiprintf_r+0x24c>)
 8007e18:	f7f8 f9fa 	bl	8000210 <memchr>
 8007e1c:	9a04      	ldr	r2, [sp, #16]
 8007e1e:	b9d8      	cbnz	r0, 8007e58 <_vfiprintf_r+0x12c>
 8007e20:	06d1      	lsls	r1, r2, #27
 8007e22:	bf44      	itt	mi
 8007e24:	2320      	movmi	r3, #32
 8007e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e2a:	0713      	lsls	r3, r2, #28
 8007e2c:	bf44      	itt	mi
 8007e2e:	232b      	movmi	r3, #43	; 0x2b
 8007e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e34:	f89a 3000 	ldrb.w	r3, [sl]
 8007e38:	2b2a      	cmp	r3, #42	; 0x2a
 8007e3a:	d015      	beq.n	8007e68 <_vfiprintf_r+0x13c>
 8007e3c:	9a07      	ldr	r2, [sp, #28]
 8007e3e:	4654      	mov	r4, sl
 8007e40:	2000      	movs	r0, #0
 8007e42:	f04f 0c0a 	mov.w	ip, #10
 8007e46:	4621      	mov	r1, r4
 8007e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e4c:	3b30      	subs	r3, #48	; 0x30
 8007e4e:	2b09      	cmp	r3, #9
 8007e50:	d94e      	bls.n	8007ef0 <_vfiprintf_r+0x1c4>
 8007e52:	b1b0      	cbz	r0, 8007e82 <_vfiprintf_r+0x156>
 8007e54:	9207      	str	r2, [sp, #28]
 8007e56:	e014      	b.n	8007e82 <_vfiprintf_r+0x156>
 8007e58:	eba0 0308 	sub.w	r3, r0, r8
 8007e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e60:	4313      	orrs	r3, r2
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	46a2      	mov	sl, r4
 8007e66:	e7d2      	b.n	8007e0e <_vfiprintf_r+0xe2>
 8007e68:	9b03      	ldr	r3, [sp, #12]
 8007e6a:	1d19      	adds	r1, r3, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	9103      	str	r1, [sp, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bfbb      	ittet	lt
 8007e74:	425b      	neglt	r3, r3
 8007e76:	f042 0202 	orrlt.w	r2, r2, #2
 8007e7a:	9307      	strge	r3, [sp, #28]
 8007e7c:	9307      	strlt	r3, [sp, #28]
 8007e7e:	bfb8      	it	lt
 8007e80:	9204      	strlt	r2, [sp, #16]
 8007e82:	7823      	ldrb	r3, [r4, #0]
 8007e84:	2b2e      	cmp	r3, #46	; 0x2e
 8007e86:	d10c      	bne.n	8007ea2 <_vfiprintf_r+0x176>
 8007e88:	7863      	ldrb	r3, [r4, #1]
 8007e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e8c:	d135      	bne.n	8007efa <_vfiprintf_r+0x1ce>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	1d1a      	adds	r2, r3, #4
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	9203      	str	r2, [sp, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bfb8      	it	lt
 8007e9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e9e:	3402      	adds	r4, #2
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f88 <_vfiprintf_r+0x25c>
 8007ea6:	7821      	ldrb	r1, [r4, #0]
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	4650      	mov	r0, sl
 8007eac:	f7f8 f9b0 	bl	8000210 <memchr>
 8007eb0:	b140      	cbz	r0, 8007ec4 <_vfiprintf_r+0x198>
 8007eb2:	2340      	movs	r3, #64	; 0x40
 8007eb4:	eba0 000a 	sub.w	r0, r0, sl
 8007eb8:	fa03 f000 	lsl.w	r0, r3, r0
 8007ebc:	9b04      	ldr	r3, [sp, #16]
 8007ebe:	4303      	orrs	r3, r0
 8007ec0:	3401      	adds	r4, #1
 8007ec2:	9304      	str	r3, [sp, #16]
 8007ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec8:	482c      	ldr	r0, [pc, #176]	; (8007f7c <_vfiprintf_r+0x250>)
 8007eca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ece:	2206      	movs	r2, #6
 8007ed0:	f7f8 f99e 	bl	8000210 <memchr>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d03f      	beq.n	8007f58 <_vfiprintf_r+0x22c>
 8007ed8:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <_vfiprintf_r+0x254>)
 8007eda:	bb1b      	cbnz	r3, 8007f24 <_vfiprintf_r+0x1f8>
 8007edc:	9b03      	ldr	r3, [sp, #12]
 8007ede:	3307      	adds	r3, #7
 8007ee0:	f023 0307 	bic.w	r3, r3, #7
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	9303      	str	r3, [sp, #12]
 8007ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eea:	443b      	add	r3, r7
 8007eec:	9309      	str	r3, [sp, #36]	; 0x24
 8007eee:	e767      	b.n	8007dc0 <_vfiprintf_r+0x94>
 8007ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	e7a5      	b.n	8007e46 <_vfiprintf_r+0x11a>
 8007efa:	2300      	movs	r3, #0
 8007efc:	3401      	adds	r4, #1
 8007efe:	9305      	str	r3, [sp, #20]
 8007f00:	4619      	mov	r1, r3
 8007f02:	f04f 0c0a 	mov.w	ip, #10
 8007f06:	4620      	mov	r0, r4
 8007f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f0c:	3a30      	subs	r2, #48	; 0x30
 8007f0e:	2a09      	cmp	r2, #9
 8007f10:	d903      	bls.n	8007f1a <_vfiprintf_r+0x1ee>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0c5      	beq.n	8007ea2 <_vfiprintf_r+0x176>
 8007f16:	9105      	str	r1, [sp, #20]
 8007f18:	e7c3      	b.n	8007ea2 <_vfiprintf_r+0x176>
 8007f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f1e:	4604      	mov	r4, r0
 8007f20:	2301      	movs	r3, #1
 8007f22:	e7f0      	b.n	8007f06 <_vfiprintf_r+0x1da>
 8007f24:	ab03      	add	r3, sp, #12
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	462a      	mov	r2, r5
 8007f2a:	4b16      	ldr	r3, [pc, #88]	; (8007f84 <_vfiprintf_r+0x258>)
 8007f2c:	a904      	add	r1, sp, #16
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f3af 8000 	nop.w
 8007f34:	4607      	mov	r7, r0
 8007f36:	1c78      	adds	r0, r7, #1
 8007f38:	d1d6      	bne.n	8007ee8 <_vfiprintf_r+0x1bc>
 8007f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f3c:	07d9      	lsls	r1, r3, #31
 8007f3e:	d405      	bmi.n	8007f4c <_vfiprintf_r+0x220>
 8007f40:	89ab      	ldrh	r3, [r5, #12]
 8007f42:	059a      	lsls	r2, r3, #22
 8007f44:	d402      	bmi.n	8007f4c <_vfiprintf_r+0x220>
 8007f46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f48:	f000 fc61 	bl	800880e <__retarget_lock_release_recursive>
 8007f4c:	89ab      	ldrh	r3, [r5, #12]
 8007f4e:	065b      	lsls	r3, r3, #25
 8007f50:	f53f af12 	bmi.w	8007d78 <_vfiprintf_r+0x4c>
 8007f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f56:	e711      	b.n	8007d7c <_vfiprintf_r+0x50>
 8007f58:	ab03      	add	r3, sp, #12
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	462a      	mov	r2, r5
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <_vfiprintf_r+0x258>)
 8007f60:	a904      	add	r1, sp, #16
 8007f62:	4630      	mov	r0, r6
 8007f64:	f000 f880 	bl	8008068 <_printf_i>
 8007f68:	e7e4      	b.n	8007f34 <_vfiprintf_r+0x208>
 8007f6a:	bf00      	nop
 8007f6c:	08009020 	.word	0x08009020
 8007f70:	08009040 	.word	0x08009040
 8007f74:	08009000 	.word	0x08009000
 8007f78:	08008ecc 	.word	0x08008ecc
 8007f7c:	08008ed6 	.word	0x08008ed6
 8007f80:	00000000 	.word	0x00000000
 8007f84:	08007d07 	.word	0x08007d07
 8007f88:	08008ed2 	.word	0x08008ed2

08007f8c <_printf_common>:
 8007f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f90:	4616      	mov	r6, r2
 8007f92:	4699      	mov	r9, r3
 8007f94:	688a      	ldr	r2, [r1, #8]
 8007f96:	690b      	ldr	r3, [r1, #16]
 8007f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	bfb8      	it	lt
 8007fa0:	4613      	movlt	r3, r2
 8007fa2:	6033      	str	r3, [r6, #0]
 8007fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fa8:	4607      	mov	r7, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	b10a      	cbz	r2, 8007fb2 <_printf_common+0x26>
 8007fae:	3301      	adds	r3, #1
 8007fb0:	6033      	str	r3, [r6, #0]
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	0699      	lsls	r1, r3, #26
 8007fb6:	bf42      	ittt	mi
 8007fb8:	6833      	ldrmi	r3, [r6, #0]
 8007fba:	3302      	addmi	r3, #2
 8007fbc:	6033      	strmi	r3, [r6, #0]
 8007fbe:	6825      	ldr	r5, [r4, #0]
 8007fc0:	f015 0506 	ands.w	r5, r5, #6
 8007fc4:	d106      	bne.n	8007fd4 <_printf_common+0x48>
 8007fc6:	f104 0a19 	add.w	sl, r4, #25
 8007fca:	68e3      	ldr	r3, [r4, #12]
 8007fcc:	6832      	ldr	r2, [r6, #0]
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	42ab      	cmp	r3, r5
 8007fd2:	dc26      	bgt.n	8008022 <_printf_common+0x96>
 8007fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fd8:	1e13      	subs	r3, r2, #0
 8007fda:	6822      	ldr	r2, [r4, #0]
 8007fdc:	bf18      	it	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	0692      	lsls	r2, r2, #26
 8007fe2:	d42b      	bmi.n	800803c <_printf_common+0xb0>
 8007fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fe8:	4649      	mov	r1, r9
 8007fea:	4638      	mov	r0, r7
 8007fec:	47c0      	blx	r8
 8007fee:	3001      	adds	r0, #1
 8007ff0:	d01e      	beq.n	8008030 <_printf_common+0xa4>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	68e5      	ldr	r5, [r4, #12]
 8007ff6:	6832      	ldr	r2, [r6, #0]
 8007ff8:	f003 0306 	and.w	r3, r3, #6
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	bf08      	it	eq
 8008000:	1aad      	subeq	r5, r5, r2
 8008002:	68a3      	ldr	r3, [r4, #8]
 8008004:	6922      	ldr	r2, [r4, #16]
 8008006:	bf0c      	ite	eq
 8008008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800800c:	2500      	movne	r5, #0
 800800e:	4293      	cmp	r3, r2
 8008010:	bfc4      	itt	gt
 8008012:	1a9b      	subgt	r3, r3, r2
 8008014:	18ed      	addgt	r5, r5, r3
 8008016:	2600      	movs	r6, #0
 8008018:	341a      	adds	r4, #26
 800801a:	42b5      	cmp	r5, r6
 800801c:	d11a      	bne.n	8008054 <_printf_common+0xc8>
 800801e:	2000      	movs	r0, #0
 8008020:	e008      	b.n	8008034 <_printf_common+0xa8>
 8008022:	2301      	movs	r3, #1
 8008024:	4652      	mov	r2, sl
 8008026:	4649      	mov	r1, r9
 8008028:	4638      	mov	r0, r7
 800802a:	47c0      	blx	r8
 800802c:	3001      	adds	r0, #1
 800802e:	d103      	bne.n	8008038 <_printf_common+0xac>
 8008030:	f04f 30ff 	mov.w	r0, #4294967295
 8008034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008038:	3501      	adds	r5, #1
 800803a:	e7c6      	b.n	8007fca <_printf_common+0x3e>
 800803c:	18e1      	adds	r1, r4, r3
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	2030      	movs	r0, #48	; 0x30
 8008042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008046:	4422      	add	r2, r4
 8008048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800804c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008050:	3302      	adds	r3, #2
 8008052:	e7c7      	b.n	8007fe4 <_printf_common+0x58>
 8008054:	2301      	movs	r3, #1
 8008056:	4622      	mov	r2, r4
 8008058:	4649      	mov	r1, r9
 800805a:	4638      	mov	r0, r7
 800805c:	47c0      	blx	r8
 800805e:	3001      	adds	r0, #1
 8008060:	d0e6      	beq.n	8008030 <_printf_common+0xa4>
 8008062:	3601      	adds	r6, #1
 8008064:	e7d9      	b.n	800801a <_printf_common+0x8e>
	...

08008068 <_printf_i>:
 8008068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800806c:	7e0f      	ldrb	r7, [r1, #24]
 800806e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008070:	2f78      	cmp	r7, #120	; 0x78
 8008072:	4691      	mov	r9, r2
 8008074:	4680      	mov	r8, r0
 8008076:	460c      	mov	r4, r1
 8008078:	469a      	mov	sl, r3
 800807a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800807e:	d807      	bhi.n	8008090 <_printf_i+0x28>
 8008080:	2f62      	cmp	r7, #98	; 0x62
 8008082:	d80a      	bhi.n	800809a <_printf_i+0x32>
 8008084:	2f00      	cmp	r7, #0
 8008086:	f000 80d8 	beq.w	800823a <_printf_i+0x1d2>
 800808a:	2f58      	cmp	r7, #88	; 0x58
 800808c:	f000 80a3 	beq.w	80081d6 <_printf_i+0x16e>
 8008090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008098:	e03a      	b.n	8008110 <_printf_i+0xa8>
 800809a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800809e:	2b15      	cmp	r3, #21
 80080a0:	d8f6      	bhi.n	8008090 <_printf_i+0x28>
 80080a2:	a101      	add	r1, pc, #4	; (adr r1, 80080a8 <_printf_i+0x40>)
 80080a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080a8:	08008101 	.word	0x08008101
 80080ac:	08008115 	.word	0x08008115
 80080b0:	08008091 	.word	0x08008091
 80080b4:	08008091 	.word	0x08008091
 80080b8:	08008091 	.word	0x08008091
 80080bc:	08008091 	.word	0x08008091
 80080c0:	08008115 	.word	0x08008115
 80080c4:	08008091 	.word	0x08008091
 80080c8:	08008091 	.word	0x08008091
 80080cc:	08008091 	.word	0x08008091
 80080d0:	08008091 	.word	0x08008091
 80080d4:	08008221 	.word	0x08008221
 80080d8:	08008145 	.word	0x08008145
 80080dc:	08008203 	.word	0x08008203
 80080e0:	08008091 	.word	0x08008091
 80080e4:	08008091 	.word	0x08008091
 80080e8:	08008243 	.word	0x08008243
 80080ec:	08008091 	.word	0x08008091
 80080f0:	08008145 	.word	0x08008145
 80080f4:	08008091 	.word	0x08008091
 80080f8:	08008091 	.word	0x08008091
 80080fc:	0800820b 	.word	0x0800820b
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	1d1a      	adds	r2, r3, #4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	602a      	str	r2, [r5, #0]
 8008108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800810c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008110:	2301      	movs	r3, #1
 8008112:	e0a3      	b.n	800825c <_printf_i+0x1f4>
 8008114:	6820      	ldr	r0, [r4, #0]
 8008116:	6829      	ldr	r1, [r5, #0]
 8008118:	0606      	lsls	r6, r0, #24
 800811a:	f101 0304 	add.w	r3, r1, #4
 800811e:	d50a      	bpl.n	8008136 <_printf_i+0xce>
 8008120:	680e      	ldr	r6, [r1, #0]
 8008122:	602b      	str	r3, [r5, #0]
 8008124:	2e00      	cmp	r6, #0
 8008126:	da03      	bge.n	8008130 <_printf_i+0xc8>
 8008128:	232d      	movs	r3, #45	; 0x2d
 800812a:	4276      	negs	r6, r6
 800812c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008130:	485e      	ldr	r0, [pc, #376]	; (80082ac <_printf_i+0x244>)
 8008132:	230a      	movs	r3, #10
 8008134:	e019      	b.n	800816a <_printf_i+0x102>
 8008136:	680e      	ldr	r6, [r1, #0]
 8008138:	602b      	str	r3, [r5, #0]
 800813a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800813e:	bf18      	it	ne
 8008140:	b236      	sxthne	r6, r6
 8008142:	e7ef      	b.n	8008124 <_printf_i+0xbc>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	1d19      	adds	r1, r3, #4
 800814a:	6029      	str	r1, [r5, #0]
 800814c:	0601      	lsls	r1, r0, #24
 800814e:	d501      	bpl.n	8008154 <_printf_i+0xec>
 8008150:	681e      	ldr	r6, [r3, #0]
 8008152:	e002      	b.n	800815a <_printf_i+0xf2>
 8008154:	0646      	lsls	r6, r0, #25
 8008156:	d5fb      	bpl.n	8008150 <_printf_i+0xe8>
 8008158:	881e      	ldrh	r6, [r3, #0]
 800815a:	4854      	ldr	r0, [pc, #336]	; (80082ac <_printf_i+0x244>)
 800815c:	2f6f      	cmp	r7, #111	; 0x6f
 800815e:	bf0c      	ite	eq
 8008160:	2308      	moveq	r3, #8
 8008162:	230a      	movne	r3, #10
 8008164:	2100      	movs	r1, #0
 8008166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800816a:	6865      	ldr	r5, [r4, #4]
 800816c:	60a5      	str	r5, [r4, #8]
 800816e:	2d00      	cmp	r5, #0
 8008170:	bfa2      	ittt	ge
 8008172:	6821      	ldrge	r1, [r4, #0]
 8008174:	f021 0104 	bicge.w	r1, r1, #4
 8008178:	6021      	strge	r1, [r4, #0]
 800817a:	b90e      	cbnz	r6, 8008180 <_printf_i+0x118>
 800817c:	2d00      	cmp	r5, #0
 800817e:	d04d      	beq.n	800821c <_printf_i+0x1b4>
 8008180:	4615      	mov	r5, r2
 8008182:	fbb6 f1f3 	udiv	r1, r6, r3
 8008186:	fb03 6711 	mls	r7, r3, r1, r6
 800818a:	5dc7      	ldrb	r7, [r0, r7]
 800818c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008190:	4637      	mov	r7, r6
 8008192:	42bb      	cmp	r3, r7
 8008194:	460e      	mov	r6, r1
 8008196:	d9f4      	bls.n	8008182 <_printf_i+0x11a>
 8008198:	2b08      	cmp	r3, #8
 800819a:	d10b      	bne.n	80081b4 <_printf_i+0x14c>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	07de      	lsls	r6, r3, #31
 80081a0:	d508      	bpl.n	80081b4 <_printf_i+0x14c>
 80081a2:	6923      	ldr	r3, [r4, #16]
 80081a4:	6861      	ldr	r1, [r4, #4]
 80081a6:	4299      	cmp	r1, r3
 80081a8:	bfde      	ittt	le
 80081aa:	2330      	movle	r3, #48	; 0x30
 80081ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081b4:	1b52      	subs	r2, r2, r5
 80081b6:	6122      	str	r2, [r4, #16]
 80081b8:	f8cd a000 	str.w	sl, [sp]
 80081bc:	464b      	mov	r3, r9
 80081be:	aa03      	add	r2, sp, #12
 80081c0:	4621      	mov	r1, r4
 80081c2:	4640      	mov	r0, r8
 80081c4:	f7ff fee2 	bl	8007f8c <_printf_common>
 80081c8:	3001      	adds	r0, #1
 80081ca:	d14c      	bne.n	8008266 <_printf_i+0x1fe>
 80081cc:	f04f 30ff 	mov.w	r0, #4294967295
 80081d0:	b004      	add	sp, #16
 80081d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d6:	4835      	ldr	r0, [pc, #212]	; (80082ac <_printf_i+0x244>)
 80081d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081dc:	6829      	ldr	r1, [r5, #0]
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80081e4:	6029      	str	r1, [r5, #0]
 80081e6:	061d      	lsls	r5, r3, #24
 80081e8:	d514      	bpl.n	8008214 <_printf_i+0x1ac>
 80081ea:	07df      	lsls	r7, r3, #31
 80081ec:	bf44      	itt	mi
 80081ee:	f043 0320 	orrmi.w	r3, r3, #32
 80081f2:	6023      	strmi	r3, [r4, #0]
 80081f4:	b91e      	cbnz	r6, 80081fe <_printf_i+0x196>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	f023 0320 	bic.w	r3, r3, #32
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	2310      	movs	r3, #16
 8008200:	e7b0      	b.n	8008164 <_printf_i+0xfc>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	f043 0320 	orr.w	r3, r3, #32
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	2378      	movs	r3, #120	; 0x78
 800820c:	4828      	ldr	r0, [pc, #160]	; (80082b0 <_printf_i+0x248>)
 800820e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008212:	e7e3      	b.n	80081dc <_printf_i+0x174>
 8008214:	0659      	lsls	r1, r3, #25
 8008216:	bf48      	it	mi
 8008218:	b2b6      	uxthmi	r6, r6
 800821a:	e7e6      	b.n	80081ea <_printf_i+0x182>
 800821c:	4615      	mov	r5, r2
 800821e:	e7bb      	b.n	8008198 <_printf_i+0x130>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	6826      	ldr	r6, [r4, #0]
 8008224:	6961      	ldr	r1, [r4, #20]
 8008226:	1d18      	adds	r0, r3, #4
 8008228:	6028      	str	r0, [r5, #0]
 800822a:	0635      	lsls	r5, r6, #24
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	d501      	bpl.n	8008234 <_printf_i+0x1cc>
 8008230:	6019      	str	r1, [r3, #0]
 8008232:	e002      	b.n	800823a <_printf_i+0x1d2>
 8008234:	0670      	lsls	r0, r6, #25
 8008236:	d5fb      	bpl.n	8008230 <_printf_i+0x1c8>
 8008238:	8019      	strh	r1, [r3, #0]
 800823a:	2300      	movs	r3, #0
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	4615      	mov	r5, r2
 8008240:	e7ba      	b.n	80081b8 <_printf_i+0x150>
 8008242:	682b      	ldr	r3, [r5, #0]
 8008244:	1d1a      	adds	r2, r3, #4
 8008246:	602a      	str	r2, [r5, #0]
 8008248:	681d      	ldr	r5, [r3, #0]
 800824a:	6862      	ldr	r2, [r4, #4]
 800824c:	2100      	movs	r1, #0
 800824e:	4628      	mov	r0, r5
 8008250:	f7f7 ffde 	bl	8000210 <memchr>
 8008254:	b108      	cbz	r0, 800825a <_printf_i+0x1f2>
 8008256:	1b40      	subs	r0, r0, r5
 8008258:	6060      	str	r0, [r4, #4]
 800825a:	6863      	ldr	r3, [r4, #4]
 800825c:	6123      	str	r3, [r4, #16]
 800825e:	2300      	movs	r3, #0
 8008260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008264:	e7a8      	b.n	80081b8 <_printf_i+0x150>
 8008266:	6923      	ldr	r3, [r4, #16]
 8008268:	462a      	mov	r2, r5
 800826a:	4649      	mov	r1, r9
 800826c:	4640      	mov	r0, r8
 800826e:	47d0      	blx	sl
 8008270:	3001      	adds	r0, #1
 8008272:	d0ab      	beq.n	80081cc <_printf_i+0x164>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	079b      	lsls	r3, r3, #30
 8008278:	d413      	bmi.n	80082a2 <_printf_i+0x23a>
 800827a:	68e0      	ldr	r0, [r4, #12]
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	4298      	cmp	r0, r3
 8008280:	bfb8      	it	lt
 8008282:	4618      	movlt	r0, r3
 8008284:	e7a4      	b.n	80081d0 <_printf_i+0x168>
 8008286:	2301      	movs	r3, #1
 8008288:	4632      	mov	r2, r6
 800828a:	4649      	mov	r1, r9
 800828c:	4640      	mov	r0, r8
 800828e:	47d0      	blx	sl
 8008290:	3001      	adds	r0, #1
 8008292:	d09b      	beq.n	80081cc <_printf_i+0x164>
 8008294:	3501      	adds	r5, #1
 8008296:	68e3      	ldr	r3, [r4, #12]
 8008298:	9903      	ldr	r1, [sp, #12]
 800829a:	1a5b      	subs	r3, r3, r1
 800829c:	42ab      	cmp	r3, r5
 800829e:	dcf2      	bgt.n	8008286 <_printf_i+0x21e>
 80082a0:	e7eb      	b.n	800827a <_printf_i+0x212>
 80082a2:	2500      	movs	r5, #0
 80082a4:	f104 0619 	add.w	r6, r4, #25
 80082a8:	e7f5      	b.n	8008296 <_printf_i+0x22e>
 80082aa:	bf00      	nop
 80082ac:	08008edd 	.word	0x08008edd
 80082b0:	08008eee 	.word	0x08008eee
 80082b4:	00000000 	.word	0x00000000

080082b8 <nan>:
 80082b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80082c0 <nan+0x8>
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	00000000 	.word	0x00000000
 80082c4:	7ff80000 	.word	0x7ff80000

080082c8 <strncmp>:
 80082c8:	b510      	push	{r4, lr}
 80082ca:	b17a      	cbz	r2, 80082ec <strncmp+0x24>
 80082cc:	4603      	mov	r3, r0
 80082ce:	3901      	subs	r1, #1
 80082d0:	1884      	adds	r4, r0, r2
 80082d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80082d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80082da:	4290      	cmp	r0, r2
 80082dc:	d101      	bne.n	80082e2 <strncmp+0x1a>
 80082de:	42a3      	cmp	r3, r4
 80082e0:	d101      	bne.n	80082e6 <strncmp+0x1e>
 80082e2:	1a80      	subs	r0, r0, r2
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d1f3      	bne.n	80082d2 <strncmp+0xa>
 80082ea:	e7fa      	b.n	80082e2 <strncmp+0x1a>
 80082ec:	4610      	mov	r0, r2
 80082ee:	e7f9      	b.n	80082e4 <strncmp+0x1c>

080082f0 <__swbuf_r>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	460e      	mov	r6, r1
 80082f4:	4614      	mov	r4, r2
 80082f6:	4605      	mov	r5, r0
 80082f8:	b118      	cbz	r0, 8008302 <__swbuf_r+0x12>
 80082fa:	6983      	ldr	r3, [r0, #24]
 80082fc:	b90b      	cbnz	r3, 8008302 <__swbuf_r+0x12>
 80082fe:	f000 f9e7 	bl	80086d0 <__sinit>
 8008302:	4b21      	ldr	r3, [pc, #132]	; (8008388 <__swbuf_r+0x98>)
 8008304:	429c      	cmp	r4, r3
 8008306:	d12b      	bne.n	8008360 <__swbuf_r+0x70>
 8008308:	686c      	ldr	r4, [r5, #4]
 800830a:	69a3      	ldr	r3, [r4, #24]
 800830c:	60a3      	str	r3, [r4, #8]
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	071a      	lsls	r2, r3, #28
 8008312:	d52f      	bpl.n	8008374 <__swbuf_r+0x84>
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	b36b      	cbz	r3, 8008374 <__swbuf_r+0x84>
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	6820      	ldr	r0, [r4, #0]
 800831c:	1ac0      	subs	r0, r0, r3
 800831e:	6963      	ldr	r3, [r4, #20]
 8008320:	b2f6      	uxtb	r6, r6
 8008322:	4283      	cmp	r3, r0
 8008324:	4637      	mov	r7, r6
 8008326:	dc04      	bgt.n	8008332 <__swbuf_r+0x42>
 8008328:	4621      	mov	r1, r4
 800832a:	4628      	mov	r0, r5
 800832c:	f000 f93c 	bl	80085a8 <_fflush_r>
 8008330:	bb30      	cbnz	r0, 8008380 <__swbuf_r+0x90>
 8008332:	68a3      	ldr	r3, [r4, #8]
 8008334:	3b01      	subs	r3, #1
 8008336:	60a3      	str	r3, [r4, #8]
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	6022      	str	r2, [r4, #0]
 800833e:	701e      	strb	r6, [r3, #0]
 8008340:	6963      	ldr	r3, [r4, #20]
 8008342:	3001      	adds	r0, #1
 8008344:	4283      	cmp	r3, r0
 8008346:	d004      	beq.n	8008352 <__swbuf_r+0x62>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	07db      	lsls	r3, r3, #31
 800834c:	d506      	bpl.n	800835c <__swbuf_r+0x6c>
 800834e:	2e0a      	cmp	r6, #10
 8008350:	d104      	bne.n	800835c <__swbuf_r+0x6c>
 8008352:	4621      	mov	r1, r4
 8008354:	4628      	mov	r0, r5
 8008356:	f000 f927 	bl	80085a8 <_fflush_r>
 800835a:	b988      	cbnz	r0, 8008380 <__swbuf_r+0x90>
 800835c:	4638      	mov	r0, r7
 800835e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008360:	4b0a      	ldr	r3, [pc, #40]	; (800838c <__swbuf_r+0x9c>)
 8008362:	429c      	cmp	r4, r3
 8008364:	d101      	bne.n	800836a <__swbuf_r+0x7a>
 8008366:	68ac      	ldr	r4, [r5, #8]
 8008368:	e7cf      	b.n	800830a <__swbuf_r+0x1a>
 800836a:	4b09      	ldr	r3, [pc, #36]	; (8008390 <__swbuf_r+0xa0>)
 800836c:	429c      	cmp	r4, r3
 800836e:	bf08      	it	eq
 8008370:	68ec      	ldreq	r4, [r5, #12]
 8008372:	e7ca      	b.n	800830a <__swbuf_r+0x1a>
 8008374:	4621      	mov	r1, r4
 8008376:	4628      	mov	r0, r5
 8008378:	f000 f81a 	bl	80083b0 <__swsetup_r>
 800837c:	2800      	cmp	r0, #0
 800837e:	d0cb      	beq.n	8008318 <__swbuf_r+0x28>
 8008380:	f04f 37ff 	mov.w	r7, #4294967295
 8008384:	e7ea      	b.n	800835c <__swbuf_r+0x6c>
 8008386:	bf00      	nop
 8008388:	08009020 	.word	0x08009020
 800838c:	08009040 	.word	0x08009040
 8008390:	08009000 	.word	0x08009000

08008394 <__ascii_wctomb>:
 8008394:	b149      	cbz	r1, 80083aa <__ascii_wctomb+0x16>
 8008396:	2aff      	cmp	r2, #255	; 0xff
 8008398:	bf85      	ittet	hi
 800839a:	238a      	movhi	r3, #138	; 0x8a
 800839c:	6003      	strhi	r3, [r0, #0]
 800839e:	700a      	strbls	r2, [r1, #0]
 80083a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80083a4:	bf98      	it	ls
 80083a6:	2001      	movls	r0, #1
 80083a8:	4770      	bx	lr
 80083aa:	4608      	mov	r0, r1
 80083ac:	4770      	bx	lr
	...

080083b0 <__swsetup_r>:
 80083b0:	4b32      	ldr	r3, [pc, #200]	; (800847c <__swsetup_r+0xcc>)
 80083b2:	b570      	push	{r4, r5, r6, lr}
 80083b4:	681d      	ldr	r5, [r3, #0]
 80083b6:	4606      	mov	r6, r0
 80083b8:	460c      	mov	r4, r1
 80083ba:	b125      	cbz	r5, 80083c6 <__swsetup_r+0x16>
 80083bc:	69ab      	ldr	r3, [r5, #24]
 80083be:	b913      	cbnz	r3, 80083c6 <__swsetup_r+0x16>
 80083c0:	4628      	mov	r0, r5
 80083c2:	f000 f985 	bl	80086d0 <__sinit>
 80083c6:	4b2e      	ldr	r3, [pc, #184]	; (8008480 <__swsetup_r+0xd0>)
 80083c8:	429c      	cmp	r4, r3
 80083ca:	d10f      	bne.n	80083ec <__swsetup_r+0x3c>
 80083cc:	686c      	ldr	r4, [r5, #4]
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083d4:	0719      	lsls	r1, r3, #28
 80083d6:	d42c      	bmi.n	8008432 <__swsetup_r+0x82>
 80083d8:	06dd      	lsls	r5, r3, #27
 80083da:	d411      	bmi.n	8008400 <__swsetup_r+0x50>
 80083dc:	2309      	movs	r3, #9
 80083de:	6033      	str	r3, [r6, #0]
 80083e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ea:	e03e      	b.n	800846a <__swsetup_r+0xba>
 80083ec:	4b25      	ldr	r3, [pc, #148]	; (8008484 <__swsetup_r+0xd4>)
 80083ee:	429c      	cmp	r4, r3
 80083f0:	d101      	bne.n	80083f6 <__swsetup_r+0x46>
 80083f2:	68ac      	ldr	r4, [r5, #8]
 80083f4:	e7eb      	b.n	80083ce <__swsetup_r+0x1e>
 80083f6:	4b24      	ldr	r3, [pc, #144]	; (8008488 <__swsetup_r+0xd8>)
 80083f8:	429c      	cmp	r4, r3
 80083fa:	bf08      	it	eq
 80083fc:	68ec      	ldreq	r4, [r5, #12]
 80083fe:	e7e6      	b.n	80083ce <__swsetup_r+0x1e>
 8008400:	0758      	lsls	r0, r3, #29
 8008402:	d512      	bpl.n	800842a <__swsetup_r+0x7a>
 8008404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008406:	b141      	cbz	r1, 800841a <__swsetup_r+0x6a>
 8008408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800840c:	4299      	cmp	r1, r3
 800840e:	d002      	beq.n	8008416 <__swsetup_r+0x66>
 8008410:	4630      	mov	r0, r6
 8008412:	f7fd fac7 	bl	80059a4 <_free_r>
 8008416:	2300      	movs	r3, #0
 8008418:	6363      	str	r3, [r4, #52]	; 0x34
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	2300      	movs	r3, #0
 8008424:	6063      	str	r3, [r4, #4]
 8008426:	6923      	ldr	r3, [r4, #16]
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	f043 0308 	orr.w	r3, r3, #8
 8008430:	81a3      	strh	r3, [r4, #12]
 8008432:	6923      	ldr	r3, [r4, #16]
 8008434:	b94b      	cbnz	r3, 800844a <__swsetup_r+0x9a>
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800843c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008440:	d003      	beq.n	800844a <__swsetup_r+0x9a>
 8008442:	4621      	mov	r1, r4
 8008444:	4630      	mov	r0, r6
 8008446:	f000 fa09 	bl	800885c <__smakebuf_r>
 800844a:	89a0      	ldrh	r0, [r4, #12]
 800844c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008450:	f010 0301 	ands.w	r3, r0, #1
 8008454:	d00a      	beq.n	800846c <__swsetup_r+0xbc>
 8008456:	2300      	movs	r3, #0
 8008458:	60a3      	str	r3, [r4, #8]
 800845a:	6963      	ldr	r3, [r4, #20]
 800845c:	425b      	negs	r3, r3
 800845e:	61a3      	str	r3, [r4, #24]
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	b943      	cbnz	r3, 8008476 <__swsetup_r+0xc6>
 8008464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008468:	d1ba      	bne.n	80083e0 <__swsetup_r+0x30>
 800846a:	bd70      	pop	{r4, r5, r6, pc}
 800846c:	0781      	lsls	r1, r0, #30
 800846e:	bf58      	it	pl
 8008470:	6963      	ldrpl	r3, [r4, #20]
 8008472:	60a3      	str	r3, [r4, #8]
 8008474:	e7f4      	b.n	8008460 <__swsetup_r+0xb0>
 8008476:	2000      	movs	r0, #0
 8008478:	e7f7      	b.n	800846a <__swsetup_r+0xba>
 800847a:	bf00      	nop
 800847c:	2000000c 	.word	0x2000000c
 8008480:	08009020 	.word	0x08009020
 8008484:	08009040 	.word	0x08009040
 8008488:	08009000 	.word	0x08009000

0800848c <abort>:
 800848c:	b508      	push	{r3, lr}
 800848e:	2006      	movs	r0, #6
 8008490:	f000 fa96 	bl	80089c0 <raise>
 8008494:	2001      	movs	r0, #1
 8008496:	f7f9 fd89 	bl	8001fac <_exit>
	...

0800849c <__sflush_r>:
 800849c:	898a      	ldrh	r2, [r1, #12]
 800849e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a2:	4605      	mov	r5, r0
 80084a4:	0710      	lsls	r0, r2, #28
 80084a6:	460c      	mov	r4, r1
 80084a8:	d458      	bmi.n	800855c <__sflush_r+0xc0>
 80084aa:	684b      	ldr	r3, [r1, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	dc05      	bgt.n	80084bc <__sflush_r+0x20>
 80084b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	dc02      	bgt.n	80084bc <__sflush_r+0x20>
 80084b6:	2000      	movs	r0, #0
 80084b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084be:	2e00      	cmp	r6, #0
 80084c0:	d0f9      	beq.n	80084b6 <__sflush_r+0x1a>
 80084c2:	2300      	movs	r3, #0
 80084c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084c8:	682f      	ldr	r7, [r5, #0]
 80084ca:	602b      	str	r3, [r5, #0]
 80084cc:	d032      	beq.n	8008534 <__sflush_r+0x98>
 80084ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	075a      	lsls	r2, r3, #29
 80084d4:	d505      	bpl.n	80084e2 <__sflush_r+0x46>
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	1ac0      	subs	r0, r0, r3
 80084da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084dc:	b10b      	cbz	r3, 80084e2 <__sflush_r+0x46>
 80084de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084e0:	1ac0      	subs	r0, r0, r3
 80084e2:	2300      	movs	r3, #0
 80084e4:	4602      	mov	r2, r0
 80084e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084e8:	6a21      	ldr	r1, [r4, #32]
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b0      	blx	r6
 80084ee:	1c43      	adds	r3, r0, #1
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	d106      	bne.n	8008502 <__sflush_r+0x66>
 80084f4:	6829      	ldr	r1, [r5, #0]
 80084f6:	291d      	cmp	r1, #29
 80084f8:	d82c      	bhi.n	8008554 <__sflush_r+0xb8>
 80084fa:	4a2a      	ldr	r2, [pc, #168]	; (80085a4 <__sflush_r+0x108>)
 80084fc:	40ca      	lsrs	r2, r1
 80084fe:	07d6      	lsls	r6, r2, #31
 8008500:	d528      	bpl.n	8008554 <__sflush_r+0xb8>
 8008502:	2200      	movs	r2, #0
 8008504:	6062      	str	r2, [r4, #4]
 8008506:	04d9      	lsls	r1, r3, #19
 8008508:	6922      	ldr	r2, [r4, #16]
 800850a:	6022      	str	r2, [r4, #0]
 800850c:	d504      	bpl.n	8008518 <__sflush_r+0x7c>
 800850e:	1c42      	adds	r2, r0, #1
 8008510:	d101      	bne.n	8008516 <__sflush_r+0x7a>
 8008512:	682b      	ldr	r3, [r5, #0]
 8008514:	b903      	cbnz	r3, 8008518 <__sflush_r+0x7c>
 8008516:	6560      	str	r0, [r4, #84]	; 0x54
 8008518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800851a:	602f      	str	r7, [r5, #0]
 800851c:	2900      	cmp	r1, #0
 800851e:	d0ca      	beq.n	80084b6 <__sflush_r+0x1a>
 8008520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008524:	4299      	cmp	r1, r3
 8008526:	d002      	beq.n	800852e <__sflush_r+0x92>
 8008528:	4628      	mov	r0, r5
 800852a:	f7fd fa3b 	bl	80059a4 <_free_r>
 800852e:	2000      	movs	r0, #0
 8008530:	6360      	str	r0, [r4, #52]	; 0x34
 8008532:	e7c1      	b.n	80084b8 <__sflush_r+0x1c>
 8008534:	6a21      	ldr	r1, [r4, #32]
 8008536:	2301      	movs	r3, #1
 8008538:	4628      	mov	r0, r5
 800853a:	47b0      	blx	r6
 800853c:	1c41      	adds	r1, r0, #1
 800853e:	d1c7      	bne.n	80084d0 <__sflush_r+0x34>
 8008540:	682b      	ldr	r3, [r5, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0c4      	beq.n	80084d0 <__sflush_r+0x34>
 8008546:	2b1d      	cmp	r3, #29
 8008548:	d001      	beq.n	800854e <__sflush_r+0xb2>
 800854a:	2b16      	cmp	r3, #22
 800854c:	d101      	bne.n	8008552 <__sflush_r+0xb6>
 800854e:	602f      	str	r7, [r5, #0]
 8008550:	e7b1      	b.n	80084b6 <__sflush_r+0x1a>
 8008552:	89a3      	ldrh	r3, [r4, #12]
 8008554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008558:	81a3      	strh	r3, [r4, #12]
 800855a:	e7ad      	b.n	80084b8 <__sflush_r+0x1c>
 800855c:	690f      	ldr	r7, [r1, #16]
 800855e:	2f00      	cmp	r7, #0
 8008560:	d0a9      	beq.n	80084b6 <__sflush_r+0x1a>
 8008562:	0793      	lsls	r3, r2, #30
 8008564:	680e      	ldr	r6, [r1, #0]
 8008566:	bf08      	it	eq
 8008568:	694b      	ldreq	r3, [r1, #20]
 800856a:	600f      	str	r7, [r1, #0]
 800856c:	bf18      	it	ne
 800856e:	2300      	movne	r3, #0
 8008570:	eba6 0807 	sub.w	r8, r6, r7
 8008574:	608b      	str	r3, [r1, #8]
 8008576:	f1b8 0f00 	cmp.w	r8, #0
 800857a:	dd9c      	ble.n	80084b6 <__sflush_r+0x1a>
 800857c:	6a21      	ldr	r1, [r4, #32]
 800857e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008580:	4643      	mov	r3, r8
 8008582:	463a      	mov	r2, r7
 8008584:	4628      	mov	r0, r5
 8008586:	47b0      	blx	r6
 8008588:	2800      	cmp	r0, #0
 800858a:	dc06      	bgt.n	800859a <__sflush_r+0xfe>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008592:	81a3      	strh	r3, [r4, #12]
 8008594:	f04f 30ff 	mov.w	r0, #4294967295
 8008598:	e78e      	b.n	80084b8 <__sflush_r+0x1c>
 800859a:	4407      	add	r7, r0
 800859c:	eba8 0800 	sub.w	r8, r8, r0
 80085a0:	e7e9      	b.n	8008576 <__sflush_r+0xda>
 80085a2:	bf00      	nop
 80085a4:	20400001 	.word	0x20400001

080085a8 <_fflush_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	690b      	ldr	r3, [r1, #16]
 80085ac:	4605      	mov	r5, r0
 80085ae:	460c      	mov	r4, r1
 80085b0:	b913      	cbnz	r3, 80085b8 <_fflush_r+0x10>
 80085b2:	2500      	movs	r5, #0
 80085b4:	4628      	mov	r0, r5
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	b118      	cbz	r0, 80085c2 <_fflush_r+0x1a>
 80085ba:	6983      	ldr	r3, [r0, #24]
 80085bc:	b90b      	cbnz	r3, 80085c2 <_fflush_r+0x1a>
 80085be:	f000 f887 	bl	80086d0 <__sinit>
 80085c2:	4b14      	ldr	r3, [pc, #80]	; (8008614 <_fflush_r+0x6c>)
 80085c4:	429c      	cmp	r4, r3
 80085c6:	d11b      	bne.n	8008600 <_fflush_r+0x58>
 80085c8:	686c      	ldr	r4, [r5, #4]
 80085ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0ef      	beq.n	80085b2 <_fflush_r+0xa>
 80085d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085d4:	07d0      	lsls	r0, r2, #31
 80085d6:	d404      	bmi.n	80085e2 <_fflush_r+0x3a>
 80085d8:	0599      	lsls	r1, r3, #22
 80085da:	d402      	bmi.n	80085e2 <_fflush_r+0x3a>
 80085dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085de:	f000 f915 	bl	800880c <__retarget_lock_acquire_recursive>
 80085e2:	4628      	mov	r0, r5
 80085e4:	4621      	mov	r1, r4
 80085e6:	f7ff ff59 	bl	800849c <__sflush_r>
 80085ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ec:	07da      	lsls	r2, r3, #31
 80085ee:	4605      	mov	r5, r0
 80085f0:	d4e0      	bmi.n	80085b4 <_fflush_r+0xc>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	059b      	lsls	r3, r3, #22
 80085f6:	d4dd      	bmi.n	80085b4 <_fflush_r+0xc>
 80085f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085fa:	f000 f908 	bl	800880e <__retarget_lock_release_recursive>
 80085fe:	e7d9      	b.n	80085b4 <_fflush_r+0xc>
 8008600:	4b05      	ldr	r3, [pc, #20]	; (8008618 <_fflush_r+0x70>)
 8008602:	429c      	cmp	r4, r3
 8008604:	d101      	bne.n	800860a <_fflush_r+0x62>
 8008606:	68ac      	ldr	r4, [r5, #8]
 8008608:	e7df      	b.n	80085ca <_fflush_r+0x22>
 800860a:	4b04      	ldr	r3, [pc, #16]	; (800861c <_fflush_r+0x74>)
 800860c:	429c      	cmp	r4, r3
 800860e:	bf08      	it	eq
 8008610:	68ec      	ldreq	r4, [r5, #12]
 8008612:	e7da      	b.n	80085ca <_fflush_r+0x22>
 8008614:	08009020 	.word	0x08009020
 8008618:	08009040 	.word	0x08009040
 800861c:	08009000 	.word	0x08009000

08008620 <std>:
 8008620:	2300      	movs	r3, #0
 8008622:	b510      	push	{r4, lr}
 8008624:	4604      	mov	r4, r0
 8008626:	e9c0 3300 	strd	r3, r3, [r0]
 800862a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800862e:	6083      	str	r3, [r0, #8]
 8008630:	8181      	strh	r1, [r0, #12]
 8008632:	6643      	str	r3, [r0, #100]	; 0x64
 8008634:	81c2      	strh	r2, [r0, #14]
 8008636:	6183      	str	r3, [r0, #24]
 8008638:	4619      	mov	r1, r3
 800863a:	2208      	movs	r2, #8
 800863c:	305c      	adds	r0, #92	; 0x5c
 800863e:	f7fd f9a9 	bl	8005994 <memset>
 8008642:	4b05      	ldr	r3, [pc, #20]	; (8008658 <std+0x38>)
 8008644:	6263      	str	r3, [r4, #36]	; 0x24
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <std+0x3c>)
 8008648:	62a3      	str	r3, [r4, #40]	; 0x28
 800864a:	4b05      	ldr	r3, [pc, #20]	; (8008660 <std+0x40>)
 800864c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800864e:	4b05      	ldr	r3, [pc, #20]	; (8008664 <std+0x44>)
 8008650:	6224      	str	r4, [r4, #32]
 8008652:	6323      	str	r3, [r4, #48]	; 0x30
 8008654:	bd10      	pop	{r4, pc}
 8008656:	bf00      	nop
 8008658:	080089f9 	.word	0x080089f9
 800865c:	08008a1b 	.word	0x08008a1b
 8008660:	08008a53 	.word	0x08008a53
 8008664:	08008a77 	.word	0x08008a77

08008668 <_cleanup_r>:
 8008668:	4901      	ldr	r1, [pc, #4]	; (8008670 <_cleanup_r+0x8>)
 800866a:	f000 b8af 	b.w	80087cc <_fwalk_reent>
 800866e:	bf00      	nop
 8008670:	080085a9 	.word	0x080085a9

08008674 <__sfmoreglue>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	2268      	movs	r2, #104	; 0x68
 8008678:	1e4d      	subs	r5, r1, #1
 800867a:	4355      	muls	r5, r2
 800867c:	460e      	mov	r6, r1
 800867e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008682:	f7fd f9fb 	bl	8005a7c <_malloc_r>
 8008686:	4604      	mov	r4, r0
 8008688:	b140      	cbz	r0, 800869c <__sfmoreglue+0x28>
 800868a:	2100      	movs	r1, #0
 800868c:	e9c0 1600 	strd	r1, r6, [r0]
 8008690:	300c      	adds	r0, #12
 8008692:	60a0      	str	r0, [r4, #8]
 8008694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008698:	f7fd f97c 	bl	8005994 <memset>
 800869c:	4620      	mov	r0, r4
 800869e:	bd70      	pop	{r4, r5, r6, pc}

080086a0 <__sfp_lock_acquire>:
 80086a0:	4801      	ldr	r0, [pc, #4]	; (80086a8 <__sfp_lock_acquire+0x8>)
 80086a2:	f000 b8b3 	b.w	800880c <__retarget_lock_acquire_recursive>
 80086a6:	bf00      	nop
 80086a8:	20000451 	.word	0x20000451

080086ac <__sfp_lock_release>:
 80086ac:	4801      	ldr	r0, [pc, #4]	; (80086b4 <__sfp_lock_release+0x8>)
 80086ae:	f000 b8ae 	b.w	800880e <__retarget_lock_release_recursive>
 80086b2:	bf00      	nop
 80086b4:	20000451 	.word	0x20000451

080086b8 <__sinit_lock_acquire>:
 80086b8:	4801      	ldr	r0, [pc, #4]	; (80086c0 <__sinit_lock_acquire+0x8>)
 80086ba:	f000 b8a7 	b.w	800880c <__retarget_lock_acquire_recursive>
 80086be:	bf00      	nop
 80086c0:	20000452 	.word	0x20000452

080086c4 <__sinit_lock_release>:
 80086c4:	4801      	ldr	r0, [pc, #4]	; (80086cc <__sinit_lock_release+0x8>)
 80086c6:	f000 b8a2 	b.w	800880e <__retarget_lock_release_recursive>
 80086ca:	bf00      	nop
 80086cc:	20000452 	.word	0x20000452

080086d0 <__sinit>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	4604      	mov	r4, r0
 80086d4:	f7ff fff0 	bl	80086b8 <__sinit_lock_acquire>
 80086d8:	69a3      	ldr	r3, [r4, #24]
 80086da:	b11b      	cbz	r3, 80086e4 <__sinit+0x14>
 80086dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e0:	f7ff bff0 	b.w	80086c4 <__sinit_lock_release>
 80086e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086e8:	6523      	str	r3, [r4, #80]	; 0x50
 80086ea:	4b13      	ldr	r3, [pc, #76]	; (8008738 <__sinit+0x68>)
 80086ec:	4a13      	ldr	r2, [pc, #76]	; (800873c <__sinit+0x6c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	bf04      	itt	eq
 80086f6:	2301      	moveq	r3, #1
 80086f8:	61a3      	streq	r3, [r4, #24]
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 f820 	bl	8008740 <__sfp>
 8008700:	6060      	str	r0, [r4, #4]
 8008702:	4620      	mov	r0, r4
 8008704:	f000 f81c 	bl	8008740 <__sfp>
 8008708:	60a0      	str	r0, [r4, #8]
 800870a:	4620      	mov	r0, r4
 800870c:	f000 f818 	bl	8008740 <__sfp>
 8008710:	2200      	movs	r2, #0
 8008712:	60e0      	str	r0, [r4, #12]
 8008714:	2104      	movs	r1, #4
 8008716:	6860      	ldr	r0, [r4, #4]
 8008718:	f7ff ff82 	bl	8008620 <std>
 800871c:	68a0      	ldr	r0, [r4, #8]
 800871e:	2201      	movs	r2, #1
 8008720:	2109      	movs	r1, #9
 8008722:	f7ff ff7d 	bl	8008620 <std>
 8008726:	68e0      	ldr	r0, [r4, #12]
 8008728:	2202      	movs	r2, #2
 800872a:	2112      	movs	r1, #18
 800872c:	f7ff ff78 	bl	8008620 <std>
 8008730:	2301      	movs	r3, #1
 8008732:	61a3      	str	r3, [r4, #24]
 8008734:	e7d2      	b.n	80086dc <__sinit+0xc>
 8008736:	bf00      	nop
 8008738:	08008bd8 	.word	0x08008bd8
 800873c:	08008669 	.word	0x08008669

08008740 <__sfp>:
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	4607      	mov	r7, r0
 8008744:	f7ff ffac 	bl	80086a0 <__sfp_lock_acquire>
 8008748:	4b1e      	ldr	r3, [pc, #120]	; (80087c4 <__sfp+0x84>)
 800874a:	681e      	ldr	r6, [r3, #0]
 800874c:	69b3      	ldr	r3, [r6, #24]
 800874e:	b913      	cbnz	r3, 8008756 <__sfp+0x16>
 8008750:	4630      	mov	r0, r6
 8008752:	f7ff ffbd 	bl	80086d0 <__sinit>
 8008756:	3648      	adds	r6, #72	; 0x48
 8008758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800875c:	3b01      	subs	r3, #1
 800875e:	d503      	bpl.n	8008768 <__sfp+0x28>
 8008760:	6833      	ldr	r3, [r6, #0]
 8008762:	b30b      	cbz	r3, 80087a8 <__sfp+0x68>
 8008764:	6836      	ldr	r6, [r6, #0]
 8008766:	e7f7      	b.n	8008758 <__sfp+0x18>
 8008768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800876c:	b9d5      	cbnz	r5, 80087a4 <__sfp+0x64>
 800876e:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <__sfp+0x88>)
 8008770:	60e3      	str	r3, [r4, #12]
 8008772:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008776:	6665      	str	r5, [r4, #100]	; 0x64
 8008778:	f000 f847 	bl	800880a <__retarget_lock_init_recursive>
 800877c:	f7ff ff96 	bl	80086ac <__sfp_lock_release>
 8008780:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008784:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008788:	6025      	str	r5, [r4, #0]
 800878a:	61a5      	str	r5, [r4, #24]
 800878c:	2208      	movs	r2, #8
 800878e:	4629      	mov	r1, r5
 8008790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008794:	f7fd f8fe 	bl	8005994 <memset>
 8008798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800879c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087a0:	4620      	mov	r0, r4
 80087a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a4:	3468      	adds	r4, #104	; 0x68
 80087a6:	e7d9      	b.n	800875c <__sfp+0x1c>
 80087a8:	2104      	movs	r1, #4
 80087aa:	4638      	mov	r0, r7
 80087ac:	f7ff ff62 	bl	8008674 <__sfmoreglue>
 80087b0:	4604      	mov	r4, r0
 80087b2:	6030      	str	r0, [r6, #0]
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d1d5      	bne.n	8008764 <__sfp+0x24>
 80087b8:	f7ff ff78 	bl	80086ac <__sfp_lock_release>
 80087bc:	230c      	movs	r3, #12
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	e7ee      	b.n	80087a0 <__sfp+0x60>
 80087c2:	bf00      	nop
 80087c4:	08008bd8 	.word	0x08008bd8
 80087c8:	ffff0001 	.word	0xffff0001

080087cc <_fwalk_reent>:
 80087cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d0:	4606      	mov	r6, r0
 80087d2:	4688      	mov	r8, r1
 80087d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087d8:	2700      	movs	r7, #0
 80087da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087de:	f1b9 0901 	subs.w	r9, r9, #1
 80087e2:	d505      	bpl.n	80087f0 <_fwalk_reent+0x24>
 80087e4:	6824      	ldr	r4, [r4, #0]
 80087e6:	2c00      	cmp	r4, #0
 80087e8:	d1f7      	bne.n	80087da <_fwalk_reent+0xe>
 80087ea:	4638      	mov	r0, r7
 80087ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f0:	89ab      	ldrh	r3, [r5, #12]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d907      	bls.n	8008806 <_fwalk_reent+0x3a>
 80087f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087fa:	3301      	adds	r3, #1
 80087fc:	d003      	beq.n	8008806 <_fwalk_reent+0x3a>
 80087fe:	4629      	mov	r1, r5
 8008800:	4630      	mov	r0, r6
 8008802:	47c0      	blx	r8
 8008804:	4307      	orrs	r7, r0
 8008806:	3568      	adds	r5, #104	; 0x68
 8008808:	e7e9      	b.n	80087de <_fwalk_reent+0x12>

0800880a <__retarget_lock_init_recursive>:
 800880a:	4770      	bx	lr

0800880c <__retarget_lock_acquire_recursive>:
 800880c:	4770      	bx	lr

0800880e <__retarget_lock_release_recursive>:
 800880e:	4770      	bx	lr

08008810 <__swhatbuf_r>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	460e      	mov	r6, r1
 8008814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008818:	2900      	cmp	r1, #0
 800881a:	b096      	sub	sp, #88	; 0x58
 800881c:	4614      	mov	r4, r2
 800881e:	461d      	mov	r5, r3
 8008820:	da08      	bge.n	8008834 <__swhatbuf_r+0x24>
 8008822:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	602a      	str	r2, [r5, #0]
 800882a:	061a      	lsls	r2, r3, #24
 800882c:	d410      	bmi.n	8008850 <__swhatbuf_r+0x40>
 800882e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008832:	e00e      	b.n	8008852 <__swhatbuf_r+0x42>
 8008834:	466a      	mov	r2, sp
 8008836:	f000 f945 	bl	8008ac4 <_fstat_r>
 800883a:	2800      	cmp	r0, #0
 800883c:	dbf1      	blt.n	8008822 <__swhatbuf_r+0x12>
 800883e:	9a01      	ldr	r2, [sp, #4]
 8008840:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008844:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008848:	425a      	negs	r2, r3
 800884a:	415a      	adcs	r2, r3
 800884c:	602a      	str	r2, [r5, #0]
 800884e:	e7ee      	b.n	800882e <__swhatbuf_r+0x1e>
 8008850:	2340      	movs	r3, #64	; 0x40
 8008852:	2000      	movs	r0, #0
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	b016      	add	sp, #88	; 0x58
 8008858:	bd70      	pop	{r4, r5, r6, pc}
	...

0800885c <__smakebuf_r>:
 800885c:	898b      	ldrh	r3, [r1, #12]
 800885e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008860:	079d      	lsls	r5, r3, #30
 8008862:	4606      	mov	r6, r0
 8008864:	460c      	mov	r4, r1
 8008866:	d507      	bpl.n	8008878 <__smakebuf_r+0x1c>
 8008868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	6123      	str	r3, [r4, #16]
 8008870:	2301      	movs	r3, #1
 8008872:	6163      	str	r3, [r4, #20]
 8008874:	b002      	add	sp, #8
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	ab01      	add	r3, sp, #4
 800887a:	466a      	mov	r2, sp
 800887c:	f7ff ffc8 	bl	8008810 <__swhatbuf_r>
 8008880:	9900      	ldr	r1, [sp, #0]
 8008882:	4605      	mov	r5, r0
 8008884:	4630      	mov	r0, r6
 8008886:	f7fd f8f9 	bl	8005a7c <_malloc_r>
 800888a:	b948      	cbnz	r0, 80088a0 <__smakebuf_r+0x44>
 800888c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008890:	059a      	lsls	r2, r3, #22
 8008892:	d4ef      	bmi.n	8008874 <__smakebuf_r+0x18>
 8008894:	f023 0303 	bic.w	r3, r3, #3
 8008898:	f043 0302 	orr.w	r3, r3, #2
 800889c:	81a3      	strh	r3, [r4, #12]
 800889e:	e7e3      	b.n	8008868 <__smakebuf_r+0xc>
 80088a0:	4b0d      	ldr	r3, [pc, #52]	; (80088d8 <__smakebuf_r+0x7c>)
 80088a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	6020      	str	r0, [r4, #0]
 80088a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ac:	81a3      	strh	r3, [r4, #12]
 80088ae:	9b00      	ldr	r3, [sp, #0]
 80088b0:	6163      	str	r3, [r4, #20]
 80088b2:	9b01      	ldr	r3, [sp, #4]
 80088b4:	6120      	str	r0, [r4, #16]
 80088b6:	b15b      	cbz	r3, 80088d0 <__smakebuf_r+0x74>
 80088b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088bc:	4630      	mov	r0, r6
 80088be:	f000 f913 	bl	8008ae8 <_isatty_r>
 80088c2:	b128      	cbz	r0, 80088d0 <__smakebuf_r+0x74>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	f023 0303 	bic.w	r3, r3, #3
 80088ca:	f043 0301 	orr.w	r3, r3, #1
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	89a0      	ldrh	r0, [r4, #12]
 80088d2:	4305      	orrs	r5, r0
 80088d4:	81a5      	strh	r5, [r4, #12]
 80088d6:	e7cd      	b.n	8008874 <__smakebuf_r+0x18>
 80088d8:	08008669 	.word	0x08008669

080088dc <memmove>:
 80088dc:	4288      	cmp	r0, r1
 80088de:	b510      	push	{r4, lr}
 80088e0:	eb01 0402 	add.w	r4, r1, r2
 80088e4:	d902      	bls.n	80088ec <memmove+0x10>
 80088e6:	4284      	cmp	r4, r0
 80088e8:	4623      	mov	r3, r4
 80088ea:	d807      	bhi.n	80088fc <memmove+0x20>
 80088ec:	1e43      	subs	r3, r0, #1
 80088ee:	42a1      	cmp	r1, r4
 80088f0:	d008      	beq.n	8008904 <memmove+0x28>
 80088f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088fa:	e7f8      	b.n	80088ee <memmove+0x12>
 80088fc:	4402      	add	r2, r0
 80088fe:	4601      	mov	r1, r0
 8008900:	428a      	cmp	r2, r1
 8008902:	d100      	bne.n	8008906 <memmove+0x2a>
 8008904:	bd10      	pop	{r4, pc}
 8008906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800890a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800890e:	e7f7      	b.n	8008900 <memmove+0x24>

08008910 <_realloc_r>:
 8008910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008914:	4680      	mov	r8, r0
 8008916:	4614      	mov	r4, r2
 8008918:	460e      	mov	r6, r1
 800891a:	b921      	cbnz	r1, 8008926 <_realloc_r+0x16>
 800891c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008920:	4611      	mov	r1, r2
 8008922:	f7fd b8ab 	b.w	8005a7c <_malloc_r>
 8008926:	b92a      	cbnz	r2, 8008934 <_realloc_r+0x24>
 8008928:	f7fd f83c 	bl	80059a4 <_free_r>
 800892c:	4625      	mov	r5, r4
 800892e:	4628      	mov	r0, r5
 8008930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008934:	f000 f8fa 	bl	8008b2c <_malloc_usable_size_r>
 8008938:	4284      	cmp	r4, r0
 800893a:	4607      	mov	r7, r0
 800893c:	d802      	bhi.n	8008944 <_realloc_r+0x34>
 800893e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008942:	d812      	bhi.n	800896a <_realloc_r+0x5a>
 8008944:	4621      	mov	r1, r4
 8008946:	4640      	mov	r0, r8
 8008948:	f7fd f898 	bl	8005a7c <_malloc_r>
 800894c:	4605      	mov	r5, r0
 800894e:	2800      	cmp	r0, #0
 8008950:	d0ed      	beq.n	800892e <_realloc_r+0x1e>
 8008952:	42bc      	cmp	r4, r7
 8008954:	4622      	mov	r2, r4
 8008956:	4631      	mov	r1, r6
 8008958:	bf28      	it	cs
 800895a:	463a      	movcs	r2, r7
 800895c:	f7fe fb70 	bl	8007040 <memcpy>
 8008960:	4631      	mov	r1, r6
 8008962:	4640      	mov	r0, r8
 8008964:	f7fd f81e 	bl	80059a4 <_free_r>
 8008968:	e7e1      	b.n	800892e <_realloc_r+0x1e>
 800896a:	4635      	mov	r5, r6
 800896c:	e7df      	b.n	800892e <_realloc_r+0x1e>

0800896e <_raise_r>:
 800896e:	291f      	cmp	r1, #31
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4604      	mov	r4, r0
 8008974:	460d      	mov	r5, r1
 8008976:	d904      	bls.n	8008982 <_raise_r+0x14>
 8008978:	2316      	movs	r3, #22
 800897a:	6003      	str	r3, [r0, #0]
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	bd38      	pop	{r3, r4, r5, pc}
 8008982:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008984:	b112      	cbz	r2, 800898c <_raise_r+0x1e>
 8008986:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800898a:	b94b      	cbnz	r3, 80089a0 <_raise_r+0x32>
 800898c:	4620      	mov	r0, r4
 800898e:	f000 f831 	bl	80089f4 <_getpid_r>
 8008992:	462a      	mov	r2, r5
 8008994:	4601      	mov	r1, r0
 8008996:	4620      	mov	r0, r4
 8008998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800899c:	f000 b818 	b.w	80089d0 <_kill_r>
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d00a      	beq.n	80089ba <_raise_r+0x4c>
 80089a4:	1c59      	adds	r1, r3, #1
 80089a6:	d103      	bne.n	80089b0 <_raise_r+0x42>
 80089a8:	2316      	movs	r3, #22
 80089aa:	6003      	str	r3, [r0, #0]
 80089ac:	2001      	movs	r0, #1
 80089ae:	e7e7      	b.n	8008980 <_raise_r+0x12>
 80089b0:	2400      	movs	r4, #0
 80089b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089b6:	4628      	mov	r0, r5
 80089b8:	4798      	blx	r3
 80089ba:	2000      	movs	r0, #0
 80089bc:	e7e0      	b.n	8008980 <_raise_r+0x12>
	...

080089c0 <raise>:
 80089c0:	4b02      	ldr	r3, [pc, #8]	; (80089cc <raise+0xc>)
 80089c2:	4601      	mov	r1, r0
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	f7ff bfd2 	b.w	800896e <_raise_r>
 80089ca:	bf00      	nop
 80089cc:	2000000c 	.word	0x2000000c

080089d0 <_kill_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d07      	ldr	r5, [pc, #28]	; (80089f0 <_kill_r+0x20>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	f7f9 fad5 	bl	8001f8c <_kill>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d102      	bne.n	80089ec <_kill_r+0x1c>
 80089e6:	682b      	ldr	r3, [r5, #0]
 80089e8:	b103      	cbz	r3, 80089ec <_kill_r+0x1c>
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	bd38      	pop	{r3, r4, r5, pc}
 80089ee:	bf00      	nop
 80089f0:	2000044c 	.word	0x2000044c

080089f4 <_getpid_r>:
 80089f4:	f7f9 bac2 	b.w	8001f7c <_getpid>

080089f8 <__sread>:
 80089f8:	b510      	push	{r4, lr}
 80089fa:	460c      	mov	r4, r1
 80089fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a00:	f000 f89c 	bl	8008b3c <_read_r>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	bfab      	itete	ge
 8008a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a0c:	181b      	addge	r3, r3, r0
 8008a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a12:	bfac      	ite	ge
 8008a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a16:	81a3      	strhlt	r3, [r4, #12]
 8008a18:	bd10      	pop	{r4, pc}

08008a1a <__swrite>:
 8008a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1e:	461f      	mov	r7, r3
 8008a20:	898b      	ldrh	r3, [r1, #12]
 8008a22:	05db      	lsls	r3, r3, #23
 8008a24:	4605      	mov	r5, r0
 8008a26:	460c      	mov	r4, r1
 8008a28:	4616      	mov	r6, r2
 8008a2a:	d505      	bpl.n	8008a38 <__swrite+0x1e>
 8008a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a30:	2302      	movs	r3, #2
 8008a32:	2200      	movs	r2, #0
 8008a34:	f000 f868 	bl	8008b08 <_lseek_r>
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a42:	81a3      	strh	r3, [r4, #12]
 8008a44:	4632      	mov	r2, r6
 8008a46:	463b      	mov	r3, r7
 8008a48:	4628      	mov	r0, r5
 8008a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4e:	f000 b817 	b.w	8008a80 <_write_r>

08008a52 <__sseek>:
 8008a52:	b510      	push	{r4, lr}
 8008a54:	460c      	mov	r4, r1
 8008a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a5a:	f000 f855 	bl	8008b08 <_lseek_r>
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	bf15      	itete	ne
 8008a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a6e:	81a3      	strheq	r3, [r4, #12]
 8008a70:	bf18      	it	ne
 8008a72:	81a3      	strhne	r3, [r4, #12]
 8008a74:	bd10      	pop	{r4, pc}

08008a76 <__sclose>:
 8008a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7a:	f000 b813 	b.w	8008aa4 <_close_r>
	...

08008a80 <_write_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d07      	ldr	r5, [pc, #28]	; (8008aa0 <_write_r+0x20>)
 8008a84:	4604      	mov	r4, r0
 8008a86:	4608      	mov	r0, r1
 8008a88:	4611      	mov	r1, r2
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	602a      	str	r2, [r5, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f7f9 fab3 	bl	8001ffa <_write>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_write_r+0x1e>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_write_r+0x1e>
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	2000044c 	.word	0x2000044c

08008aa4 <_close_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4d06      	ldr	r5, [pc, #24]	; (8008ac0 <_close_r+0x1c>)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4604      	mov	r4, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	f7f9 fabf 	bl	8002032 <_close>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_close_r+0x1a>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_close_r+0x1a>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	2000044c 	.word	0x2000044c

08008ac4 <_fstat_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d07      	ldr	r5, [pc, #28]	; (8008ae4 <_fstat_r+0x20>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	4611      	mov	r1, r2
 8008ad0:	602b      	str	r3, [r5, #0]
 8008ad2:	f7f9 faba 	bl	800204a <_fstat>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	d102      	bne.n	8008ae0 <_fstat_r+0x1c>
 8008ada:	682b      	ldr	r3, [r5, #0]
 8008adc:	b103      	cbz	r3, 8008ae0 <_fstat_r+0x1c>
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	bd38      	pop	{r3, r4, r5, pc}
 8008ae2:	bf00      	nop
 8008ae4:	2000044c 	.word	0x2000044c

08008ae8 <_isatty_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4d06      	ldr	r5, [pc, #24]	; (8008b04 <_isatty_r+0x1c>)
 8008aec:	2300      	movs	r3, #0
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	602b      	str	r3, [r5, #0]
 8008af4:	f7f9 fab9 	bl	800206a <_isatty>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_isatty_r+0x1a>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_isatty_r+0x1a>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	2000044c 	.word	0x2000044c

08008b08 <_lseek_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d07      	ldr	r5, [pc, #28]	; (8008b28 <_lseek_r+0x20>)
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4611      	mov	r1, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	602a      	str	r2, [r5, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	f7f9 fab2 	bl	8002080 <_lseek>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_lseek_r+0x1e>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_lseek_r+0x1e>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	2000044c 	.word	0x2000044c

08008b2c <_malloc_usable_size_r>:
 8008b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b30:	1f18      	subs	r0, r3, #4
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bfbc      	itt	lt
 8008b36:	580b      	ldrlt	r3, [r1, r0]
 8008b38:	18c0      	addlt	r0, r0, r3
 8008b3a:	4770      	bx	lr

08008b3c <_read_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d07      	ldr	r5, [pc, #28]	; (8008b5c <_read_r+0x20>)
 8008b40:	4604      	mov	r4, r0
 8008b42:	4608      	mov	r0, r1
 8008b44:	4611      	mov	r1, r2
 8008b46:	2200      	movs	r2, #0
 8008b48:	602a      	str	r2, [r5, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f7f9 fa38 	bl	8001fc0 <_read>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_read_r+0x1e>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_read_r+0x1e>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	2000044c 	.word	0x2000044c

08008b60 <_init>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	bf00      	nop
 8008b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b66:	bc08      	pop	{r3}
 8008b68:	469e      	mov	lr, r3
 8008b6a:	4770      	bx	lr

08008b6c <_fini>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr
